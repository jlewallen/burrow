<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1125.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="1275"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0000%" y="693" width="0.0784%" height="15" fill="rgb(248,3,40)" fg:x="0" fg:w="1"/><text x="0.2500%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0784%" y="629" width="0.0784%" height="15" fill="rgb(223,178,23)" fg:x="1" fg:w="1"/><text x="0.3284%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.1569%" y="613" width="0.0784%" height="15" fill="rgb(240,132,45)" fg:x="2" fg:w="1"/><text x="0.4069%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.2353%" y="613" width="0.0784%" height="15" fill="rgb(245,164,36)" fg:x="3" fg:w="1"/><text x="0.4853%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2353%" y="597" width="0.0784%" height="15" fill="rgb(231,188,53)" fg:x="3" fg:w="1"/><text x="0.4853%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.31%)</title><rect x="0.0784%" y="661" width="0.3137%" height="15" fill="rgb(237,198,39)" fg:x="1" fg:w="4"/><text x="0.3284%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.31%)</title><rect x="0.0784%" y="645" width="0.3137%" height="15" fill="rgb(223,120,35)" fg:x="1" fg:w="4"/><text x="0.3284%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="0.1569%" y="629" width="0.2353%" height="15" fill="rgb(253,107,49)" fg:x="2" fg:w="3"/><text x="0.4069%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.3137%" y="613" width="0.0784%" height="15" fill="rgb(216,44,31)" fg:x="4" fg:w="1"/><text x="0.5637%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.3137%" y="597" width="0.0784%" height="15" fill="rgb(253,87,21)" fg:x="4" fg:w="1"/><text x="0.5637%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.3137%" y="581" width="0.0784%" height="15" fill="rgb(226,18,2)" fg:x="4" fg:w="1"/><text x="0.5637%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.3137%" y="565" width="0.0784%" height="15" fill="rgb(216,8,46)" fg:x="4" fg:w="1"/><text x="0.5637%" y="575.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.39%)</title><rect x="0.0784%" y="677" width="0.3922%" height="15" fill="rgb(226,140,39)" fg:x="1" fg:w="5"/><text x="0.3284%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.3922%" y="661" width="0.0784%" height="15" fill="rgb(221,194,54)" fg:x="5" fg:w="1"/><text x="0.6422%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.55%)</title><rect x="0.0000%" y="709" width="0.5490%" height="15" fill="rgb(213,92,11)" fg:x="0" fg:w="7"/><text x="0.2500%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (6 samples, 0.47%)</title><rect x="0.0784%" y="693" width="0.4706%" height="15" fill="rgb(229,162,46)" fg:x="1" fg:w="6"/><text x="0.3284%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::entity::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="0.4706%" y="677" width="0.0784%" height="15" fill="rgb(214,111,36)" fg:x="6" fg:w="1"/><text x="0.7206%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4706%" y="661" width="0.0784%" height="15" fill="rgb(207,6,21)" fg:x="6" fg:w="1"/><text x="0.7206%" y="671.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.63%)</title><rect x="0.0000%" y="741" width="0.6275%" height="15" fill="rgb(213,127,38)" fg:x="0" fg:w="8"/><text x="0.2500%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (8 samples, 0.63%)</title><rect x="0.0000%" y="725" width="0.6275%" height="15" fill="rgb(238,118,32)" fg:x="0" fg:w="8"/><text x="0.2500%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.5490%" y="709" width="0.0784%" height="15" fill="rgb(240,139,39)" fg:x="7" fg:w="1"/><text x="0.7990%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.6275%" y="677" width="0.0784%" height="15" fill="rgb(235,10,37)" fg:x="8" fg:w="1"/><text x="0.8775%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="0.7059%" y="645" width="0.0784%" height="15" fill="rgb(249,171,38)" fg:x="9" fg:w="1"/><text x="0.9559%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="0.7059%" y="629" width="0.0784%" height="15" fill="rgb(242,144,32)" fg:x="9" fg:w="1"/><text x="0.9559%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="0.7059%" y="613" width="0.0784%" height="15" fill="rgb(217,117,21)" fg:x="9" fg:w="1"/><text x="0.9559%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="0.7059%" y="597" width="0.0784%" height="15" fill="rgb(249,87,1)" fg:x="9" fg:w="1"/><text x="0.9559%" y="607.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="0.7059%" y="581" width="0.0784%" height="15" fill="rgb(248,196,48)" fg:x="9" fg:w="1"/><text x="0.9559%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="0.7059%" y="565" width="0.0784%" height="15" fill="rgb(251,206,33)" fg:x="9" fg:w="1"/><text x="0.9559%" y="575.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="0.7059%" y="549" width="0.0784%" height="15" fill="rgb(232,141,28)" fg:x="9" fg:w="1"/><text x="0.9559%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="0.7059%" y="533" width="0.0784%" height="15" fill="rgb(209,167,14)" fg:x="9" fg:w="1"/><text x="0.9559%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="0.7059%" y="517" width="0.0784%" height="15" fill="rgb(225,11,50)" fg:x="9" fg:w="1"/><text x="0.9559%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="0.7059%" y="501" width="0.0784%" height="15" fill="rgb(209,50,20)" fg:x="9" fg:w="1"/><text x="0.9559%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="0.7059%" y="485" width="0.0784%" height="15" fill="rgb(212,17,46)" fg:x="9" fg:w="1"/><text x="0.9559%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="0.7059%" y="469" width="0.0784%" height="15" fill="rgb(216,101,39)" fg:x="9" fg:w="1"/><text x="0.9559%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="0.7059%" y="453" width="0.0784%" height="15" fill="rgb(212,228,48)" fg:x="9" fg:w="1"/><text x="0.9559%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="0.7059%" y="437" width="0.0784%" height="15" fill="rgb(250,6,50)" fg:x="9" fg:w="1"/><text x="0.9559%" y="447.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.08%)</title><rect x="0.7059%" y="421" width="0.0784%" height="15" fill="rgb(250,160,48)" fg:x="9" fg:w="1"/><text x="0.9559%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.08%)</title><rect x="0.7059%" y="405" width="0.0784%" height="15" fill="rgb(244,216,33)" fg:x="9" fg:w="1"/><text x="0.9559%" y="415.50"></text></g><g><title>&lt;alloc::ffi::c_str::CString as core::convert::From&lt;&amp;core::ffi::c_str::CStr&gt;&gt;::from (1 samples, 0.08%)</title><rect x="0.7843%" y="629" width="0.0784%" height="15" fill="rgb(207,157,5)" fg:x="10" fg:w="1"/><text x="1.0343%" y="639.50"></text></g><g><title>alloc::ffi::c_str::&lt;impl alloc::borrow::ToOwned for core::ffi::c_str::CStr&gt;::to_owned (1 samples, 0.08%)</title><rect x="0.7843%" y="613" width="0.0784%" height="15" fill="rgb(228,199,8)" fg:x="10" fg:w="1"/><text x="1.0343%" y="623.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.08%)</title><rect x="0.7843%" y="597" width="0.0784%" height="15" fill="rgb(227,80,20)" fg:x="10" fg:w="1"/><text x="1.0343%" y="607.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T]&gt; as core::convert::From&lt;&amp;[T]&gt;&gt;::from (1 samples, 0.08%)</title><rect x="0.7843%" y="581" width="0.0784%" height="15" fill="rgb(222,9,33)" fg:x="10" fg:w="1"/><text x="1.0343%" y="591.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T]&gt; as alloc::boxed::BoxFromSlice&lt;T&gt;&gt;::from_slice (1 samples, 0.08%)</title><rect x="0.7843%" y="565" width="0.0784%" height="15" fill="rgb(239,44,28)" fg:x="10" fg:w="1"/><text x="1.0343%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="0.7843%" y="549" width="0.0784%" height="15" fill="rgb(249,187,43)" fg:x="10" fg:w="1"/><text x="1.0343%" y="559.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (8 samples, 0.63%)</title><rect x="0.7059%" y="677" width="0.6275%" height="15" fill="rgb(216,141,28)" fg:x="9" fg:w="8"/><text x="0.9559%" y="687.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (8 samples, 0.63%)</title><rect x="0.7059%" y="661" width="0.6275%" height="15" fill="rgb(230,154,53)" fg:x="9" fg:w="8"/><text x="0.9559%" y="671.50"></text></g><g><title>libloading::safe::Library::new (7 samples, 0.55%)</title><rect x="0.7843%" y="645" width="0.5490%" height="15" fill="rgb(227,82,4)" fg:x="10" fg:w="7"/><text x="1.0343%" y="655.50"></text></g><g><title>dlopen (6 samples, 0.47%)</title><rect x="0.8627%" y="629" width="0.4706%" height="15" fill="rgb(220,107,16)" fg:x="11" fg:w="6"/><text x="1.1127%" y="639.50"></text></g><g><title>_dl_catch_error (6 samples, 0.47%)</title><rect x="0.8627%" y="613" width="0.4706%" height="15" fill="rgb(207,187,2)" fg:x="11" fg:w="6"/><text x="1.1127%" y="623.50"></text></g><g><title>_dl_catch_exception (6 samples, 0.47%)</title><rect x="0.8627%" y="597" width="0.4706%" height="15" fill="rgb(210,162,52)" fg:x="11" fg:w="6"/><text x="1.1127%" y="607.50"></text></g><g><title>_dl_catch_exception (6 samples, 0.47%)</title><rect x="0.8627%" y="581" width="0.4706%" height="15" fill="rgb(217,216,49)" fg:x="11" fg:w="6"/><text x="1.1127%" y="591.50"></text></g><g><title>_dl_catch_exception (6 samples, 0.47%)</title><rect x="0.8627%" y="565" width="0.4706%" height="15" fill="rgb(218,146,49)" fg:x="11" fg:w="6"/><text x="1.1127%" y="575.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (10 samples, 0.78%)</title><rect x="0.6275%" y="741" width="0.7843%" height="15" fill="rgb(216,55,40)" fg:x="8" fg:w="10"/><text x="0.8775%" y="751.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (10 samples, 0.78%)</title><rect x="0.6275%" y="725" width="0.7843%" height="15" fill="rgb(208,196,21)" fg:x="8" fg:w="10"/><text x="0.8775%" y="735.50"></text></g><g><title>engine::session::Session::new (10 samples, 0.78%)</title><rect x="0.6275%" y="709" width="0.7843%" height="15" fill="rgb(242,117,42)" fg:x="8" fg:w="10"/><text x="0.8775%" y="719.50"></text></g><g><title>engine::session::Session::initialize (10 samples, 0.78%)</title><rect x="0.6275%" y="693" width="0.7843%" height="15" fill="rgb(210,11,23)" fg:x="8" fg:w="10"/><text x="0.8775%" y="703.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="1.3333%" y="677" width="0.0784%" height="15" fill="rgb(217,110,2)" fg:x="17" fg:w="1"/><text x="1.5833%" y="687.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="1.3333%" y="661" width="0.0784%" height="15" fill="rgb(229,77,54)" fg:x="17" fg:w="1"/><text x="1.5833%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="1.3333%" y="645" width="0.0784%" height="15" fill="rgb(218,53,16)" fg:x="17" fg:w="1"/><text x="1.5833%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.3333%" y="629" width="0.0784%" height="15" fill="rgb(215,38,13)" fg:x="17" fg:w="1"/><text x="1.5833%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.3333%" y="613" width="0.0784%" height="15" fill="rgb(235,42,18)" fg:x="17" fg:w="1"/><text x="1.5833%" y="623.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="1.3333%" y="597" width="0.0784%" height="15" fill="rgb(219,66,54)" fg:x="17" fg:w="1"/><text x="1.5833%" y="607.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.4118%" y="725" width="0.0784%" height="15" fill="rgb(222,205,4)" fg:x="18" fg:w="1"/><text x="1.6618%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.4118%" y="709" width="0.0784%" height="15" fill="rgb(227,213,46)" fg:x="18" fg:w="1"/><text x="1.6618%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.4118%" y="693" width="0.0784%" height="15" fill="rgb(250,145,42)" fg:x="18" fg:w="1"/><text x="1.6618%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="1.4118%" y="677" width="0.0784%" height="15" fill="rgb(219,15,2)" fg:x="18" fg:w="1"/><text x="1.6618%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="1.4118%" y="661" width="0.0784%" height="15" fill="rgb(231,181,52)" fg:x="18" fg:w="1"/><text x="1.6618%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="1.4118%" y="645" width="0.0784%" height="15" fill="rgb(235,1,42)" fg:x="18" fg:w="1"/><text x="1.6618%" y="655.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="1.4118%" y="629" width="0.0784%" height="15" fill="rgb(249,88,27)" fg:x="18" fg:w="1"/><text x="1.6618%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="1.4118%" y="613" width="0.0784%" height="15" fill="rgb(235,145,16)" fg:x="18" fg:w="1"/><text x="1.6618%" y="623.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="1.4902%" y="709" width="0.0784%" height="15" fill="rgb(237,114,19)" fg:x="19" fg:w="1"/><text x="1.7402%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="1.4902%" y="693" width="0.0784%" height="15" fill="rgb(238,51,50)" fg:x="19" fg:w="1"/><text x="1.7402%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="1.4902%" y="677" width="0.0784%" height="15" fill="rgb(205,194,25)" fg:x="19" fg:w="1"/><text x="1.7402%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="1.4902%" y="661" width="0.0784%" height="15" fill="rgb(215,203,17)" fg:x="19" fg:w="1"/><text x="1.7402%" y="671.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="1.5686%" y="629" width="0.0784%" height="15" fill="rgb(233,112,49)" fg:x="20" fg:w="1"/><text x="1.8186%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.5686%" y="613" width="0.0784%" height="15" fill="rgb(241,130,26)" fg:x="20" fg:w="1"/><text x="1.8186%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.5686%" y="597" width="0.0784%" height="15" fill="rgb(252,223,19)" fg:x="20" fg:w="1"/><text x="1.8186%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.5686%" y="581" width="0.0784%" height="15" fill="rgb(211,95,25)" fg:x="20" fg:w="1"/><text x="1.8186%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.5686%" y="565" width="0.0784%" height="15" fill="rgb(251,182,27)" fg:x="20" fg:w="1"/><text x="1.8186%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.5686%" y="549" width="0.0784%" height="15" fill="rgb(238,24,4)" fg:x="20" fg:w="1"/><text x="1.8186%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.5686%" y="533" width="0.0784%" height="15" fill="rgb(224,220,25)" fg:x="20" fg:w="1"/><text x="1.8186%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="1.5686%" y="517" width="0.0784%" height="15" fill="rgb(239,133,26)" fg:x="20" fg:w="1"/><text x="1.8186%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="1.6471%" y="613" width="0.0784%" height="15" fill="rgb(211,94,48)" fg:x="21" fg:w="1"/><text x="1.8971%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.7255%" y="613" width="0.0784%" height="15" fill="rgb(239,87,6)" fg:x="22" fg:w="1"/><text x="1.9755%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.8039%" y="581" width="0.0784%" height="15" fill="rgb(227,62,0)" fg:x="23" fg:w="1"/><text x="2.0539%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.8039%" y="565" width="0.0784%" height="15" fill="rgb(211,226,4)" fg:x="23" fg:w="1"/><text x="2.0539%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.8039%" y="549" width="0.0784%" height="15" fill="rgb(253,38,52)" fg:x="23" fg:w="1"/><text x="2.0539%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.8039%" y="533" width="0.0784%" height="15" fill="rgb(229,126,40)" fg:x="23" fg:w="1"/><text x="2.0539%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.8039%" y="517" width="0.0784%" height="15" fill="rgb(229,165,44)" fg:x="23" fg:w="1"/><text x="2.0539%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="1.8039%" y="597" width="0.1569%" height="15" fill="rgb(247,95,47)" fg:x="23" fg:w="2"/><text x="2.0539%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.8824%" y="581" width="0.0784%" height="15" fill="rgb(216,140,30)" fg:x="24" fg:w="1"/><text x="2.1324%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.8824%" y="565" width="0.0784%" height="15" fill="rgb(246,214,8)" fg:x="24" fg:w="1"/><text x="2.1324%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="1.8039%" y="613" width="0.2353%" height="15" fill="rgb(227,224,15)" fg:x="23" fg:w="3"/><text x="2.0539%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.9608%" y="597" width="0.0784%" height="15" fill="rgb(233,175,4)" fg:x="25" fg:w="1"/><text x="2.2108%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.9608%" y="581" width="0.0784%" height="15" fill="rgb(221,66,45)" fg:x="25" fg:w="1"/><text x="2.2108%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.9608%" y="565" width="0.0784%" height="15" fill="rgb(221,178,18)" fg:x="25" fg:w="1"/><text x="2.2108%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.9608%" y="549" width="0.0784%" height="15" fill="rgb(213,81,29)" fg:x="25" fg:w="1"/><text x="2.2108%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.9608%" y="533" width="0.0784%" height="15" fill="rgb(220,89,49)" fg:x="25" fg:w="1"/><text x="2.2108%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.9608%" y="517" width="0.0784%" height="15" fill="rgb(227,60,33)" fg:x="25" fg:w="1"/><text x="2.2108%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.9608%" y="501" width="0.0784%" height="15" fill="rgb(205,113,12)" fg:x="25" fg:w="1"/><text x="2.2108%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.55%)</title><rect x="1.5686%" y="645" width="0.5490%" height="15" fill="rgb(211,32,1)" fg:x="20" fg:w="7"/><text x="1.8186%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.47%)</title><rect x="1.6471%" y="629" width="0.4706%" height="15" fill="rgb(246,2,12)" fg:x="21" fg:w="6"/><text x="1.8971%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.0392%" y="613" width="0.0784%" height="15" fill="rgb(243,37,27)" fg:x="26" fg:w="1"/><text x="2.2892%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.1961%" y="565" width="0.0784%" height="15" fill="rgb(248,211,31)" fg:x="28" fg:w="1"/><text x="2.4461%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.2745%" y="565" width="0.0784%" height="15" fill="rgb(242,146,47)" fg:x="29" fg:w="1"/><text x="2.5245%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="2.3529%" y="565" width="0.0784%" height="15" fill="rgb(206,70,20)" fg:x="30" fg:w="1"/><text x="2.6029%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="2.3529%" y="549" width="0.0784%" height="15" fill="rgb(215,10,51)" fg:x="30" fg:w="1"/><text x="2.6029%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.3529%" y="533" width="0.0784%" height="15" fill="rgb(243,178,53)" fg:x="30" fg:w="1"/><text x="2.6029%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.47%)</title><rect x="2.1176%" y="645" width="0.4706%" height="15" fill="rgb(233,221,20)" fg:x="27" fg:w="6"/><text x="2.3676%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.47%)</title><rect x="2.1176%" y="629" width="0.4706%" height="15" fill="rgb(218,95,35)" fg:x="27" fg:w="6"/><text x="2.3676%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.47%)</title><rect x="2.1176%" y="613" width="0.4706%" height="15" fill="rgb(229,13,5)" fg:x="27" fg:w="6"/><text x="2.3676%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.47%)</title><rect x="2.1176%" y="597" width="0.4706%" height="15" fill="rgb(252,164,30)" fg:x="27" fg:w="6"/><text x="2.3676%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.47%)</title><rect x="2.1176%" y="581" width="0.4706%" height="15" fill="rgb(232,68,36)" fg:x="27" fg:w="6"/><text x="2.3676%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.4314%" y="565" width="0.1569%" height="15" fill="rgb(219,59,54)" fg:x="31" fg:w="2"/><text x="2.6814%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.5098%" y="549" width="0.0784%" height="15" fill="rgb(250,92,33)" fg:x="32" fg:w="1"/><text x="2.7598%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.5098%" y="533" width="0.0784%" height="15" fill="rgb(229,162,54)" fg:x="32" fg:w="1"/><text x="2.7598%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.5098%" y="517" width="0.0784%" height="15" fill="rgb(244,114,52)" fg:x="32" fg:w="1"/><text x="2.7598%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.5098%" y="501" width="0.0784%" height="15" fill="rgb(212,211,43)" fg:x="32" fg:w="1"/><text x="2.7598%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.7451%" y="597" width="0.0784%" height="15" fill="rgb(226,147,8)" fg:x="35" fg:w="1"/><text x="2.9951%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="2.8235%" y="597" width="0.0784%" height="15" fill="rgb(226,23,13)" fg:x="36" fg:w="1"/><text x="3.0735%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.9020%" y="549" width="0.0784%" height="15" fill="rgb(240,63,4)" fg:x="37" fg:w="1"/><text x="3.1520%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.9020%" y="533" width="0.0784%" height="15" fill="rgb(221,1,32)" fg:x="37" fg:w="1"/><text x="3.1520%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="2.9804%" y="549" width="0.0784%" height="15" fill="rgb(242,117,10)" fg:x="38" fg:w="1"/><text x="3.2304%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.9804%" y="533" width="0.0784%" height="15" fill="rgb(249,172,44)" fg:x="38" fg:w="1"/><text x="3.2304%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.9804%" y="517" width="0.0784%" height="15" fill="rgb(244,46,45)" fg:x="38" fg:w="1"/><text x="3.2304%" y="527.50"></text></g><g><title>engine::session::Session::flush (21 samples, 1.65%)</title><rect x="1.4902%" y="725" width="1.6471%" height="15" fill="rgb(206,43,17)" fg:x="19" fg:w="21"/><text x="1.7402%" y="735.50"></text></g><g><title>engine::session::state::State::close (20 samples, 1.57%)</title><rect x="1.5686%" y="709" width="1.5686%" height="15" fill="rgb(239,218,39)" fg:x="20" fg:w="20"/><text x="1.8186%" y="719.50"></text></g><g><title>engine::session::state::State::flush_entities (20 samples, 1.57%)</title><rect x="1.5686%" y="693" width="1.5686%" height="15" fill="rgb(208,169,54)" fg:x="20" fg:w="20"/><text x="1.8186%" y="703.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (20 samples, 1.57%)</title><rect x="1.5686%" y="677" width="1.5686%" height="15" fill="rgb(247,25,42)" fg:x="20" fg:w="20"/><text x="1.8186%" y="687.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (20 samples, 1.57%)</title><rect x="1.5686%" y="661" width="1.5686%" height="15" fill="rgb(226,23,31)" fg:x="20" fg:w="20"/><text x="1.8186%" y="671.50"></text></g><g><title>kernel::model::any_entity_changes (7 samples, 0.55%)</title><rect x="2.5882%" y="645" width="0.5490%" height="15" fill="rgb(247,16,28)" fg:x="33" fg:w="7"/><text x="2.8382%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.47%)</title><rect x="2.6667%" y="629" width="0.4706%" height="15" fill="rgb(231,147,38)" fg:x="34" fg:w="6"/><text x="2.9167%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.47%)</title><rect x="2.6667%" y="613" width="0.4706%" height="15" fill="rgb(253,81,48)" fg:x="34" fg:w="6"/><text x="2.9167%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="2.9020%" y="597" width="0.2353%" height="15" fill="rgb(249,222,43)" fg:x="37" fg:w="3"/><text x="3.1520%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="2.9020%" y="581" width="0.2353%" height="15" fill="rgb(221,3,27)" fg:x="37" fg:w="3"/><text x="3.1520%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="2.9020%" y="565" width="0.2353%" height="15" fill="rgb(228,180,5)" fg:x="37" fg:w="3"/><text x="3.1520%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="3.0588%" y="549" width="0.0784%" height="15" fill="rgb(227,131,42)" fg:x="39" fg:w="1"/><text x="3.3088%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="3.0588%" y="533" width="0.0784%" height="15" fill="rgb(212,3,39)" fg:x="39" fg:w="1"/><text x="3.3088%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="3.0588%" y="517" width="0.0784%" height="15" fill="rgb(226,45,5)" fg:x="39" fg:w="1"/><text x="3.3088%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="3.0588%" y="501" width="0.0784%" height="15" fill="rgb(215,167,45)" fg:x="39" fg:w="1"/><text x="3.3088%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="3.0588%" y="485" width="0.0784%" height="15" fill="rgb(250,218,53)" fg:x="39" fg:w="1"/><text x="3.3088%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="3.0588%" y="469" width="0.0784%" height="15" fill="rgb(207,140,0)" fg:x="39" fg:w="1"/><text x="3.3088%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="3.0588%" y="453" width="0.0784%" height="15" fill="rgb(238,133,51)" fg:x="39" fg:w="1"/><text x="3.3088%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="3.0588%" y="437" width="0.0784%" height="15" fill="rgb(218,203,53)" fg:x="39" fg:w="1"/><text x="3.3088%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="3.1373%" y="693" width="0.0784%" height="15" fill="rgb(226,184,25)" fg:x="40" fg:w="1"/><text x="3.3873%" y="703.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="3.1373%" y="677" width="0.0784%" height="15" fill="rgb(231,121,21)" fg:x="40" fg:w="1"/><text x="3.3873%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="3.1373%" y="661" width="0.0784%" height="15" fill="rgb(251,14,34)" fg:x="40" fg:w="1"/><text x="3.3873%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="3.1373%" y="645" width="0.0784%" height="15" fill="rgb(249,193,11)" fg:x="40" fg:w="1"/><text x="3.3873%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="3.1373%" y="629" width="0.0784%" height="15" fill="rgb(220,172,37)" fg:x="40" fg:w="1"/><text x="3.3873%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="3.1373%" y="613" width="0.0784%" height="15" fill="rgb(231,229,43)" fg:x="40" fg:w="1"/><text x="3.3873%" y="623.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="3.1373%" y="597" width="0.0784%" height="15" fill="rgb(250,161,5)" fg:x="40" fg:w="1"/><text x="3.3873%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.2157%" y="693" width="0.0784%" height="15" fill="rgb(218,225,18)" fg:x="41" fg:w="1"/><text x="3.4657%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.2157%" y="677" width="0.0784%" height="15" fill="rgb(245,45,42)" fg:x="41" fg:w="1"/><text x="3.4657%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.2157%" y="661" width="0.0784%" height="15" fill="rgb(211,115,1)" fg:x="41" fg:w="1"/><text x="3.4657%" y="671.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="3.2941%" y="677" width="0.0784%" height="15" fill="rgb(248,133,52)" fg:x="42" fg:w="1"/><text x="3.5441%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="3.2941%" y="661" width="0.0784%" height="15" fill="rgb(238,100,21)" fg:x="42" fg:w="1"/><text x="3.5441%" y="671.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="3.2941%" y="645" width="0.0784%" height="15" fill="rgb(247,144,11)" fg:x="42" fg:w="1"/><text x="3.5441%" y="655.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.2941%" y="629" width="0.0784%" height="15" fill="rgb(206,164,16)" fg:x="42" fg:w="1"/><text x="3.5441%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="3.2941%" y="613" width="0.0784%" height="15" fill="rgb(222,34,3)" fg:x="42" fg:w="1"/><text x="3.5441%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.2941%" y="597" width="0.0784%" height="15" fill="rgb(248,82,4)" fg:x="42" fg:w="1"/><text x="3.5441%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="3.2941%" y="581" width="0.0784%" height="15" fill="rgb(228,81,46)" fg:x="42" fg:w="1"/><text x="3.5441%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.2941%" y="565" width="0.0784%" height="15" fill="rgb(227,67,47)" fg:x="42" fg:w="1"/><text x="3.5441%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.3725%" y="661" width="0.0784%" height="15" fill="rgb(215,93,53)" fg:x="43" fg:w="1"/><text x="3.6225%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.3725%" y="645" width="0.0784%" height="15" fill="rgb(248,194,39)" fg:x="43" fg:w="1"/><text x="3.6225%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="3.3725%" y="629" width="0.0784%" height="15" fill="rgb(215,5,19)" fg:x="43" fg:w="1"/><text x="3.6225%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.3725%" y="613" width="0.0784%" height="15" fill="rgb(226,215,51)" fg:x="43" fg:w="1"/><text x="3.6225%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="3.2941%" y="693" width="0.2353%" height="15" fill="rgb(225,56,26)" fg:x="42" fg:w="3"/><text x="3.5441%" y="703.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="3.3725%" y="677" width="0.1569%" height="15" fill="rgb(222,75,29)" fg:x="43" fg:w="2"/><text x="3.6225%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.4510%" y="661" width="0.0784%" height="15" fill="rgb(236,139,6)" fg:x="44" fg:w="1"/><text x="3.7010%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="3.4510%" y="645" width="0.0784%" height="15" fill="rgb(223,137,36)" fg:x="44" fg:w="1"/><text x="3.7010%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.47%)</title><rect x="3.1373%" y="709" width="0.4706%" height="15" fill="rgb(226,99,2)" fg:x="40" fg:w="6"/><text x="3.3873%" y="719.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="3.5294%" y="693" width="0.0784%" height="15" fill="rgb(206,133,23)" fg:x="45" fg:w="1"/><text x="3.7794%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.5294%" y="677" width="0.0784%" height="15" fill="rgb(243,173,15)" fg:x="45" fg:w="1"/><text x="3.7794%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.5294%" y="661" width="0.0784%" height="15" fill="rgb(228,69,28)" fg:x="45" fg:w="1"/><text x="3.7794%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.5294%" y="645" width="0.0784%" height="15" fill="rgb(212,51,22)" fg:x="45" fg:w="1"/><text x="3.7794%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.5294%" y="629" width="0.0784%" height="15" fill="rgb(227,113,0)" fg:x="45" fg:w="1"/><text x="3.7794%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.5294%" y="613" width="0.0784%" height="15" fill="rgb(252,84,27)" fg:x="45" fg:w="1"/><text x="3.7794%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.5294%" y="597" width="0.0784%" height="15" fill="rgb(223,145,39)" fg:x="45" fg:w="1"/><text x="3.7794%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.5294%" y="581" width="0.0784%" height="15" fill="rgb(239,219,30)" fg:x="45" fg:w="1"/><text x="3.7794%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="3.5294%" y="565" width="0.0784%" height="15" fill="rgb(224,196,39)" fg:x="45" fg:w="1"/><text x="3.7794%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="3.5294%" y="549" width="0.0784%" height="15" fill="rgb(205,35,43)" fg:x="45" fg:w="1"/><text x="3.7794%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="3.5294%" y="533" width="0.0784%" height="15" fill="rgb(228,201,21)" fg:x="45" fg:w="1"/><text x="3.7794%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="3.5294%" y="517" width="0.0784%" height="15" fill="rgb(237,118,16)" fg:x="45" fg:w="1"/><text x="3.7794%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.5294%" y="501" width="0.0784%" height="15" fill="rgb(241,17,19)" fg:x="45" fg:w="1"/><text x="3.7794%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.6078%" y="613" width="0.0784%" height="15" fill="rgb(214,10,25)" fg:x="46" fg:w="1"/><text x="3.8578%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.6078%" y="597" width="0.0784%" height="15" fill="rgb(238,37,29)" fg:x="46" fg:w="1"/><text x="3.8578%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.6078%" y="581" width="0.0784%" height="15" fill="rgb(253,83,25)" fg:x="46" fg:w="1"/><text x="3.8578%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.6078%" y="565" width="0.0784%" height="15" fill="rgb(234,192,12)" fg:x="46" fg:w="1"/><text x="3.8578%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.6078%" y="549" width="0.0784%" height="15" fill="rgb(241,216,45)" fg:x="46" fg:w="1"/><text x="3.8578%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.6078%" y="533" width="0.0784%" height="15" fill="rgb(242,22,33)" fg:x="46" fg:w="1"/><text x="3.8578%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.6078%" y="517" width="0.0784%" height="15" fill="rgb(231,105,49)" fg:x="46" fg:w="1"/><text x="3.8578%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.6078%" y="501" width="0.0784%" height="15" fill="rgb(218,204,15)" fg:x="46" fg:w="1"/><text x="3.8578%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.6078%" y="485" width="0.0784%" height="15" fill="rgb(235,138,41)" fg:x="46" fg:w="1"/><text x="3.8578%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.6078%" y="469" width="0.0784%" height="15" fill="rgb(246,0,9)" fg:x="46" fg:w="1"/><text x="3.8578%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.6078%" y="453" width="0.0784%" height="15" fill="rgb(210,74,4)" fg:x="46" fg:w="1"/><text x="3.8578%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="3.6078%" y="437" width="0.0784%" height="15" fill="rgb(250,60,41)" fg:x="46" fg:w="1"/><text x="3.8578%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="3.6078%" y="421" width="0.0784%" height="15" fill="rgb(220,115,12)" fg:x="46" fg:w="1"/><text x="3.8578%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="3.6078%" y="405" width="0.0784%" height="15" fill="rgb(237,100,13)" fg:x="46" fg:w="1"/><text x="3.8578%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="3.6078%" y="389" width="0.0784%" height="15" fill="rgb(213,55,26)" fg:x="46" fg:w="1"/><text x="3.8578%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.6078%" y="373" width="0.0784%" height="15" fill="rgb(216,17,4)" fg:x="46" fg:w="1"/><text x="3.8578%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="3.6863%" y="517" width="0.0784%" height="15" fill="rgb(220,153,47)" fg:x="47" fg:w="1"/><text x="3.9363%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="3.6863%" y="501" width="0.0784%" height="15" fill="rgb(215,131,9)" fg:x="47" fg:w="1"/><text x="3.9363%" y="511.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="3.6078%" y="693" width="0.2353%" height="15" fill="rgb(233,46,42)" fg:x="46" fg:w="3"/><text x="3.8578%" y="703.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="3.6078%" y="677" width="0.2353%" height="15" fill="rgb(226,86,7)" fg:x="46" fg:w="3"/><text x="3.8578%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="3.6078%" y="661" width="0.2353%" height="15" fill="rgb(239,226,21)" fg:x="46" fg:w="3"/><text x="3.8578%" y="671.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="3.6078%" y="645" width="0.2353%" height="15" fill="rgb(244,137,22)" fg:x="46" fg:w="3"/><text x="3.8578%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="3.6078%" y="629" width="0.2353%" height="15" fill="rgb(211,139,35)" fg:x="46" fg:w="3"/><text x="3.8578%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="3.6863%" y="613" width="0.1569%" height="15" fill="rgb(214,62,50)" fg:x="47" fg:w="2"/><text x="3.9363%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="3.6863%" y="597" width="0.1569%" height="15" fill="rgb(212,113,44)" fg:x="47" fg:w="2"/><text x="3.9363%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="3.6863%" y="581" width="0.1569%" height="15" fill="rgb(226,150,43)" fg:x="47" fg:w="2"/><text x="3.9363%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="3.6863%" y="565" width="0.1569%" height="15" fill="rgb(250,71,37)" fg:x="47" fg:w="2"/><text x="3.9363%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="3.6863%" y="549" width="0.1569%" height="15" fill="rgb(219,76,19)" fg:x="47" fg:w="2"/><text x="3.9363%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="3.6863%" y="533" width="0.1569%" height="15" fill="rgb(250,39,11)" fg:x="47" fg:w="2"/><text x="3.9363%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.7647%" y="517" width="0.0784%" height="15" fill="rgb(230,64,31)" fg:x="48" fg:w="1"/><text x="4.0147%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.7647%" y="501" width="0.0784%" height="15" fill="rgb(208,222,23)" fg:x="48" fg:w="1"/><text x="4.0147%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.7647%" y="485" width="0.0784%" height="15" fill="rgb(227,125,18)" fg:x="48" fg:w="1"/><text x="4.0147%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.7647%" y="469" width="0.0784%" height="15" fill="rgb(234,210,9)" fg:x="48" fg:w="1"/><text x="4.0147%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="3.7647%" y="453" width="0.0784%" height="15" fill="rgb(217,127,24)" fg:x="48" fg:w="1"/><text x="4.0147%" y="463.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="3.7647%" y="437" width="0.0784%" height="15" fill="rgb(239,141,48)" fg:x="48" fg:w="1"/><text x="4.0147%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="3.8431%" y="597" width="0.1569%" height="15" fill="rgb(227,109,8)" fg:x="49" fg:w="2"/><text x="4.0931%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.9216%" y="581" width="0.0784%" height="15" fill="rgb(235,184,23)" fg:x="50" fg:w="1"/><text x="4.1716%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.9216%" y="565" width="0.0784%" height="15" fill="rgb(227,226,48)" fg:x="50" fg:w="1"/><text x="4.1716%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.9216%" y="549" width="0.0784%" height="15" fill="rgb(206,150,11)" fg:x="50" fg:w="1"/><text x="4.1716%" y="559.50"></text></g><g><title>plugins_core::build::Build::holding (12 samples, 0.94%)</title><rect x="3.1373%" y="725" width="0.9412%" height="15" fill="rgb(254,2,33)" fg:x="40" fg:w="12"/><text x="3.3873%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (6 samples, 0.47%)</title><rect x="3.6078%" y="709" width="0.4706%" height="15" fill="rgb(243,160,20)" fg:x="46" fg:w="6"/><text x="3.8578%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="3.8431%" y="693" width="0.2353%" height="15" fill="rgb(218,208,30)" fg:x="49" fg:w="3"/><text x="4.0931%" y="703.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="3.8431%" y="677" width="0.2353%" height="15" fill="rgb(224,120,49)" fg:x="49" fg:w="3"/><text x="4.0931%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="3.8431%" y="661" width="0.2353%" height="15" fill="rgb(246,12,2)" fg:x="49" fg:w="3"/><text x="4.0931%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="3.8431%" y="645" width="0.2353%" height="15" fill="rgb(236,117,3)" fg:x="49" fg:w="3"/><text x="4.0931%" y="655.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="3.8431%" y="629" width="0.2353%" height="15" fill="rgb(216,128,52)" fg:x="49" fg:w="3"/><text x="4.0931%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="3.8431%" y="613" width="0.2353%" height="15" fill="rgb(246,145,19)" fg:x="49" fg:w="3"/><text x="4.0931%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.0000%" y="597" width="0.0784%" height="15" fill="rgb(222,11,46)" fg:x="51" fg:w="1"/><text x="4.2500%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="4.0000%" y="581" width="0.0784%" height="15" fill="rgb(245,82,36)" fg:x="51" fg:w="1"/><text x="4.2500%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.0000%" y="565" width="0.0784%" height="15" fill="rgb(250,73,51)" fg:x="51" fg:w="1"/><text x="4.2500%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.0000%" y="549" width="0.0784%" height="15" fill="rgb(221,189,23)" fg:x="51" fg:w="1"/><text x="4.2500%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.0000%" y="533" width="0.0784%" height="15" fill="rgb(210,33,7)" fg:x="51" fg:w="1"/><text x="4.2500%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.0000%" y="517" width="0.0784%" height="15" fill="rgb(210,107,22)" fg:x="51" fg:w="1"/><text x="4.2500%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="4.0000%" y="501" width="0.0784%" height="15" fill="rgb(222,116,37)" fg:x="51" fg:w="1"/><text x="4.2500%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.0000%" y="485" width="0.0784%" height="15" fill="rgb(254,17,48)" fg:x="51" fg:w="1"/><text x="4.2500%" y="495.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="4.0784%" y="725" width="0.0784%" height="15" fill="rgb(224,36,32)" fg:x="52" fg:w="1"/><text x="4.3284%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="4.0784%" y="709" width="0.0784%" height="15" fill="rgb(232,90,46)" fg:x="52" fg:w="1"/><text x="4.3284%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="4.0784%" y="693" width="0.0784%" height="15" fill="rgb(241,66,40)" fg:x="52" fg:w="1"/><text x="4.3284%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.0784%" y="677" width="0.0784%" height="15" fill="rgb(249,184,29)" fg:x="52" fg:w="1"/><text x="4.3284%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.0784%" y="661" width="0.0784%" height="15" fill="rgb(231,181,1)" fg:x="52" fg:w="1"/><text x="4.3284%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.0784%" y="645" width="0.0784%" height="15" fill="rgb(224,94,2)" fg:x="52" fg:w="1"/><text x="4.3284%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.0784%" y="629" width="0.0784%" height="15" fill="rgb(229,170,15)" fg:x="52" fg:w="1"/><text x="4.3284%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.0784%" y="613" width="0.0784%" height="15" fill="rgb(240,127,35)" fg:x="52" fg:w="1"/><text x="4.3284%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.0784%" y="597" width="0.0784%" height="15" fill="rgb(248,196,34)" fg:x="52" fg:w="1"/><text x="4.3284%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.0784%" y="581" width="0.0784%" height="15" fill="rgb(236,137,7)" fg:x="52" fg:w="1"/><text x="4.3284%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="4.1569%" y="709" width="0.0784%" height="15" fill="rgb(235,127,16)" fg:x="53" fg:w="1"/><text x="4.4069%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="4.1569%" y="693" width="0.0784%" height="15" fill="rgb(250,192,54)" fg:x="53" fg:w="1"/><text x="4.4069%" y="703.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="4.1569%" y="677" width="0.0784%" height="15" fill="rgb(218,98,20)" fg:x="53" fg:w="1"/><text x="4.4069%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="4.1569%" y="661" width="0.0784%" height="15" fill="rgb(230,176,47)" fg:x="53" fg:w="1"/><text x="4.4069%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="4.1569%" y="645" width="0.0784%" height="15" fill="rgb(244,2,33)" fg:x="53" fg:w="1"/><text x="4.4069%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="4.1569%" y="629" width="0.0784%" height="15" fill="rgb(231,100,17)" fg:x="53" fg:w="1"/><text x="4.4069%" y="639.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="4.2353%" y="709" width="0.0784%" height="15" fill="rgb(245,23,12)" fg:x="54" fg:w="1"/><text x="4.4853%" y="719.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="4.2353%" y="693" width="0.0784%" height="15" fill="rgb(249,55,22)" fg:x="54" fg:w="1"/><text x="4.4853%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.2353%" y="677" width="0.0784%" height="15" fill="rgb(207,134,9)" fg:x="54" fg:w="1"/><text x="4.4853%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.2353%" y="661" width="0.0784%" height="15" fill="rgb(218,134,0)" fg:x="54" fg:w="1"/><text x="4.4853%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="4.2353%" y="645" width="0.0784%" height="15" fill="rgb(213,212,33)" fg:x="54" fg:w="1"/><text x="4.4853%" y="655.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="4.3922%" y="629" width="0.0784%" height="15" fill="rgb(252,106,18)" fg:x="56" fg:w="1"/><text x="4.6422%" y="639.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="4.3922%" y="613" width="0.0784%" height="15" fill="rgb(208,126,42)" fg:x="56" fg:w="1"/><text x="4.6422%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="4.3922%" y="597" width="0.0784%" height="15" fill="rgb(246,175,29)" fg:x="56" fg:w="1"/><text x="4.6422%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="4.3922%" y="581" width="0.0784%" height="15" fill="rgb(215,13,50)" fg:x="56" fg:w="1"/><text x="4.6422%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.3922%" y="565" width="0.0784%" height="15" fill="rgb(216,172,15)" fg:x="56" fg:w="1"/><text x="4.6422%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.4706%" y="581" width="0.0784%" height="15" fill="rgb(212,103,13)" fg:x="57" fg:w="1"/><text x="4.7206%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.4706%" y="565" width="0.0784%" height="15" fill="rgb(231,171,36)" fg:x="57" fg:w="1"/><text x="4.7206%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="4.4706%" y="549" width="0.0784%" height="15" fill="rgb(250,123,20)" fg:x="57" fg:w="1"/><text x="4.7206%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.4706%" y="533" width="0.0784%" height="15" fill="rgb(212,53,50)" fg:x="57" fg:w="1"/><text x="4.7206%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="4.4706%" y="517" width="0.0784%" height="15" fill="rgb(243,54,12)" fg:x="57" fg:w="1"/><text x="4.7206%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.4706%" y="501" width="0.0784%" height="15" fill="rgb(234,101,34)" fg:x="57" fg:w="1"/><text x="4.7206%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="4.4706%" y="485" width="0.0784%" height="15" fill="rgb(254,67,22)" fg:x="57" fg:w="1"/><text x="4.7206%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.4706%" y="469" width="0.0784%" height="15" fill="rgb(250,35,47)" fg:x="57" fg:w="1"/><text x="4.7206%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="4.4706%" y="453" width="0.0784%" height="15" fill="rgb(226,126,38)" fg:x="57" fg:w="1"/><text x="4.7206%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.4706%" y="437" width="0.0784%" height="15" fill="rgb(216,138,53)" fg:x="57" fg:w="1"/><text x="4.7206%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="4.4706%" y="421" width="0.0784%" height="15" fill="rgb(246,199,43)" fg:x="57" fg:w="1"/><text x="4.7206%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.4706%" y="405" width="0.0784%" height="15" fill="rgb(232,125,11)" fg:x="57" fg:w="1"/><text x="4.7206%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="4.3922%" y="645" width="0.2353%" height="15" fill="rgb(218,219,45)" fg:x="56" fg:w="3"/><text x="4.6422%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="4.4706%" y="629" width="0.1569%" height="15" fill="rgb(216,102,54)" fg:x="57" fg:w="2"/><text x="4.7206%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="4.4706%" y="613" width="0.1569%" height="15" fill="rgb(250,228,7)" fg:x="57" fg:w="2"/><text x="4.7206%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="4.4706%" y="597" width="0.1569%" height="15" fill="rgb(226,125,25)" fg:x="57" fg:w="2"/><text x="4.7206%" y="607.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="4.5490%" y="581" width="0.0784%" height="15" fill="rgb(224,165,27)" fg:x="58" fg:w="1"/><text x="4.7990%" y="591.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="4.5490%" y="565" width="0.0784%" height="15" fill="rgb(233,86,3)" fg:x="58" fg:w="1"/><text x="4.7990%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.5490%" y="549" width="0.0784%" height="15" fill="rgb(228,116,20)" fg:x="58" fg:w="1"/><text x="4.7990%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="4.5490%" y="533" width="0.0784%" height="15" fill="rgb(209,192,17)" fg:x="58" fg:w="1"/><text x="4.7990%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.5490%" y="517" width="0.0784%" height="15" fill="rgb(224,88,34)" fg:x="58" fg:w="1"/><text x="4.7990%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.5490%" y="501" width="0.0784%" height="15" fill="rgb(233,38,6)" fg:x="58" fg:w="1"/><text x="4.7990%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="4.5490%" y="485" width="0.0784%" height="15" fill="rgb(212,59,30)" fg:x="58" fg:w="1"/><text x="4.7990%" y="495.50"></text></g><g><title>core::iter::adapters::try_process (5 samples, 0.39%)</title><rect x="4.3137%" y="709" width="0.3922%" height="15" fill="rgb(213,80,3)" fg:x="55" fg:w="5"/><text x="4.5637%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.39%)</title><rect x="4.3137%" y="693" width="0.3922%" height="15" fill="rgb(251,178,7)" fg:x="55" fg:w="5"/><text x="4.5637%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (5 samples, 0.39%)</title><rect x="4.3137%" y="677" width="0.3922%" height="15" fill="rgb(213,154,26)" fg:x="55" fg:w="5"/><text x="4.5637%" y="687.50"></text></g><g><title>plugins_core::build::Build::leads_to (5 samples, 0.39%)</title><rect x="4.3137%" y="661" width="0.3922%" height="15" fill="rgb(238,165,49)" fg:x="55" fg:w="5"/><text x="4.5637%" y="671.50"></text></g><g><title>plugins_core::tools::leads_to (1 samples, 0.08%)</title><rect x="4.6275%" y="645" width="0.0784%" height="15" fill="rgb(248,91,46)" fg:x="59" fg:w="1"/><text x="4.8775%" y="655.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="4.6275%" y="629" width="0.0784%" height="15" fill="rgb(244,21,52)" fg:x="59" fg:w="1"/><text x="4.8775%" y="639.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="4.6275%" y="613" width="0.0784%" height="15" fill="rgb(247,122,20)" fg:x="59" fg:w="1"/><text x="4.8775%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="4.6275%" y="597" width="0.0784%" height="15" fill="rgb(218,27,9)" fg:x="59" fg:w="1"/><text x="4.8775%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.6275%" y="581" width="0.0784%" height="15" fill="rgb(246,7,6)" fg:x="59" fg:w="1"/><text x="4.8775%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.6275%" y="565" width="0.0784%" height="15" fill="rgb(227,135,54)" fg:x="59" fg:w="1"/><text x="4.8775%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.6275%" y="549" width="0.0784%" height="15" fill="rgb(247,14,11)" fg:x="59" fg:w="1"/><text x="4.8775%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.6275%" y="533" width="0.0784%" height="15" fill="rgb(206,149,34)" fg:x="59" fg:w="1"/><text x="4.8775%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.6275%" y="517" width="0.0784%" height="15" fill="rgb(227,228,4)" fg:x="59" fg:w="1"/><text x="4.8775%" y="527.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.7059%" y="645" width="0.0784%" height="15" fill="rgb(238,218,28)" fg:x="60" fg:w="1"/><text x="4.9559%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="4.7059%" y="629" width="0.0784%" height="15" fill="rgb(252,86,40)" fg:x="60" fg:w="1"/><text x="4.9559%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="4.7059%" y="613" width="0.0784%" height="15" fill="rgb(251,225,11)" fg:x="60" fg:w="1"/><text x="4.9559%" y="623.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="4.7843%" y="597" width="0.0784%" height="15" fill="rgb(206,46,49)" fg:x="61" fg:w="1"/><text x="5.0343%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.7843%" y="581" width="0.0784%" height="15" fill="rgb(245,128,24)" fg:x="61" fg:w="1"/><text x="5.0343%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.7843%" y="565" width="0.0784%" height="15" fill="rgb(219,177,34)" fg:x="61" fg:w="1"/><text x="5.0343%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="4.9412%" y="565" width="0.0784%" height="15" fill="rgb(218,60,48)" fg:x="63" fg:w="1"/><text x="5.1912%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.9412%" y="549" width="0.0784%" height="15" fill="rgb(221,11,5)" fg:x="63" fg:w="1"/><text x="5.1912%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.9412%" y="533" width="0.0784%" height="15" fill="rgb(220,148,13)" fg:x="63" fg:w="1"/><text x="5.1912%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.9412%" y="517" width="0.0784%" height="15" fill="rgb(210,16,3)" fg:x="63" fg:w="1"/><text x="5.1912%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.9412%" y="501" width="0.0784%" height="15" fill="rgb(236,80,2)" fg:x="63" fg:w="1"/><text x="5.1912%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="5.0196%" y="565" width="0.1569%" height="15" fill="rgb(239,129,19)" fg:x="64" fg:w="2"/><text x="5.2696%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="5.0196%" y="549" width="0.1569%" height="15" fill="rgb(220,106,35)" fg:x="64" fg:w="2"/><text x="5.2696%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="5.0196%" y="533" width="0.1569%" height="15" fill="rgb(252,139,45)" fg:x="64" fg:w="2"/><text x="5.2696%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="5.1765%" y="549" width="0.0784%" height="15" fill="rgb(229,8,36)" fg:x="66" fg:w="1"/><text x="5.4265%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.2549%" y="549" width="0.0784%" height="15" fill="rgb(230,126,33)" fg:x="67" fg:w="1"/><text x="5.5049%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.63%)</title><rect x="4.7843%" y="613" width="0.6275%" height="15" fill="rgb(239,140,21)" fg:x="61" fg:w="8"/><text x="5.0343%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.55%)</title><rect x="4.8627%" y="597" width="0.5490%" height="15" fill="rgb(254,104,9)" fg:x="62" fg:w="7"/><text x="5.1127%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.47%)</title><rect x="4.9412%" y="581" width="0.4706%" height="15" fill="rgb(239,52,14)" fg:x="63" fg:w="6"/><text x="5.1912%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="5.1765%" y="565" width="0.2353%" height="15" fill="rgb(208,227,44)" fg:x="66" fg:w="3"/><text x="5.4265%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.3333%" y="549" width="0.0784%" height="15" fill="rgb(246,18,19)" fg:x="68" fg:w="1"/><text x="5.5833%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.3333%" y="533" width="0.0784%" height="15" fill="rgb(235,228,25)" fg:x="68" fg:w="1"/><text x="5.5833%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.3333%" y="517" width="0.0784%" height="15" fill="rgb(240,156,20)" fg:x="68" fg:w="1"/><text x="5.5833%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.3333%" y="501" width="0.0784%" height="15" fill="rgb(224,8,20)" fg:x="68" fg:w="1"/><text x="5.5833%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.3333%" y="485" width="0.0784%" height="15" fill="rgb(214,12,52)" fg:x="68" fg:w="1"/><text x="5.5833%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.4118%" y="581" width="0.0784%" height="15" fill="rgb(211,220,47)" fg:x="69" fg:w="1"/><text x="5.6618%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.5686%" y="501" width="0.0784%" height="15" fill="rgb(250,173,5)" fg:x="71" fg:w="1"/><text x="5.8186%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.5686%" y="485" width="0.0784%" height="15" fill="rgb(250,125,52)" fg:x="71" fg:w="1"/><text x="5.8186%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.31%)</title><rect x="5.4118%" y="613" width="0.3137%" height="15" fill="rgb(209,133,18)" fg:x="69" fg:w="4"/><text x="5.6618%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.31%)</title><rect x="5.4118%" y="597" width="0.3137%" height="15" fill="rgb(216,173,22)" fg:x="69" fg:w="4"/><text x="5.6618%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="5.4902%" y="581" width="0.2353%" height="15" fill="rgb(205,3,22)" fg:x="70" fg:w="3"/><text x="5.7402%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="5.4902%" y="565" width="0.2353%" height="15" fill="rgb(248,22,20)" fg:x="70" fg:w="3"/><text x="5.7402%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="5.5686%" y="549" width="0.1569%" height="15" fill="rgb(233,6,29)" fg:x="71" fg:w="2"/><text x="5.8186%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="5.5686%" y="533" width="0.1569%" height="15" fill="rgb(240,22,54)" fg:x="71" fg:w="2"/><text x="5.8186%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="5.5686%" y="517" width="0.1569%" height="15" fill="rgb(231,133,32)" fg:x="71" fg:w="2"/><text x="5.8186%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.6471%" y="501" width="0.0784%" height="15" fill="rgb(248,193,4)" fg:x="72" fg:w="1"/><text x="5.8971%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.8039%" y="565" width="0.0784%" height="15" fill="rgb(211,178,46)" fg:x="74" fg:w="1"/><text x="6.0539%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="5.8824%" y="565" width="0.0784%" height="15" fill="rgb(224,5,42)" fg:x="75" fg:w="1"/><text x="6.1324%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.8824%" y="549" width="0.0784%" height="15" fill="rgb(239,176,25)" fg:x="75" fg:w="1"/><text x="6.1324%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.8824%" y="533" width="0.0784%" height="15" fill="rgb(245,187,50)" fg:x="75" fg:w="1"/><text x="6.1324%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="5.9608%" y="517" width="0.0784%" height="15" fill="rgb(248,24,15)" fg:x="76" fg:w="1"/><text x="6.2108%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.9608%" y="501" width="0.0784%" height="15" fill="rgb(205,166,13)" fg:x="76" fg:w="1"/><text x="6.2108%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.9608%" y="485" width="0.0784%" height="15" fill="rgb(208,114,23)" fg:x="76" fg:w="1"/><text x="6.2108%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.47%)</title><rect x="5.9608%" y="533" width="0.4706%" height="15" fill="rgb(239,127,18)" fg:x="76" fg:w="6"/><text x="6.2108%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.39%)</title><rect x="6.0392%" y="517" width="0.3922%" height="15" fill="rgb(219,154,28)" fg:x="77" fg:w="5"/><text x="6.2892%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="6.1961%" y="501" width="0.2353%" height="15" fill="rgb(225,157,23)" fg:x="79" fg:w="3"/><text x="6.4461%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.3529%" y="485" width="0.0784%" height="15" fill="rgb(219,8,6)" fg:x="81" fg:w="1"/><text x="6.6029%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="6.3529%" y="469" width="0.0784%" height="15" fill="rgb(212,47,6)" fg:x="81" fg:w="1"/><text x="6.6029%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.3529%" y="453" width="0.0784%" height="15" fill="rgb(224,190,4)" fg:x="81" fg:w="1"/><text x="6.6029%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="6.3529%" y="437" width="0.0784%" height="15" fill="rgb(239,183,29)" fg:x="81" fg:w="1"/><text x="6.6029%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.3529%" y="421" width="0.0784%" height="15" fill="rgb(213,57,7)" fg:x="81" fg:w="1"/><text x="6.6029%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="6.3529%" y="405" width="0.0784%" height="15" fill="rgb(216,148,1)" fg:x="81" fg:w="1"/><text x="6.6029%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.3529%" y="389" width="0.0784%" height="15" fill="rgb(236,182,29)" fg:x="81" fg:w="1"/><text x="6.6029%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.3529%" y="373" width="0.0784%" height="15" fill="rgb(244,120,48)" fg:x="81" fg:w="1"/><text x="6.6029%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.3529%" y="357" width="0.0784%" height="15" fill="rgb(206,71,34)" fg:x="81" fg:w="1"/><text x="6.6029%" y="367.50"></text></g><g><title>engine::session::Session::flush (23 samples, 1.80%)</title><rect x="4.7059%" y="709" width="1.8039%" height="15" fill="rgb(242,32,6)" fg:x="60" fg:w="23"/><text x="4.9559%" y="719.50">e..</text></g><g><title>engine::session::Session::save_changes (23 samples, 1.80%)</title><rect x="4.7059%" y="693" width="1.8039%" height="15" fill="rgb(241,35,3)" fg:x="60" fg:w="23"/><text x="4.9559%" y="703.50">e..</text></g><g><title>engine::session::state::State::close (23 samples, 1.80%)</title><rect x="4.7059%" y="677" width="1.8039%" height="15" fill="rgb(222,62,19)" fg:x="60" fg:w="23"/><text x="4.9559%" y="687.50">e..</text></g><g><title>engine::session::state::State::flush_entities (23 samples, 1.80%)</title><rect x="4.7059%" y="661" width="1.8039%" height="15" fill="rgb(223,110,41)" fg:x="60" fg:w="23"/><text x="4.9559%" y="671.50">e..</text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (22 samples, 1.73%)</title><rect x="4.7843%" y="645" width="1.7255%" height="15" fill="rgb(208,224,4)" fg:x="61" fg:w="22"/><text x="5.0343%" y="655.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (22 samples, 1.73%)</title><rect x="4.7843%" y="629" width="1.7255%" height="15" fill="rgb(241,137,19)" fg:x="61" fg:w="22"/><text x="5.0343%" y="639.50"></text></g><g><title>kernel::model::any_entity_changes (10 samples, 0.78%)</title><rect x="5.7255%" y="613" width="0.7843%" height="15" fill="rgb(244,24,17)" fg:x="73" fg:w="10"/><text x="5.9755%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (10 samples, 0.78%)</title><rect x="5.7255%" y="597" width="0.7843%" height="15" fill="rgb(245,178,49)" fg:x="73" fg:w="10"/><text x="5.9755%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.78%)</title><rect x="5.7255%" y="581" width="0.7843%" height="15" fill="rgb(219,160,38)" fg:x="73" fg:w="10"/><text x="5.9755%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.55%)</title><rect x="5.9608%" y="565" width="0.5490%" height="15" fill="rgb(228,137,14)" fg:x="76" fg:w="7"/><text x="6.2108%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.55%)</title><rect x="5.9608%" y="549" width="0.5490%" height="15" fill="rgb(237,134,11)" fg:x="76" fg:w="7"/><text x="6.2108%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="6.4314%" y="533" width="0.0784%" height="15" fill="rgb(211,126,44)" fg:x="82" fg:w="1"/><text x="6.6814%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.5098%" y="677" width="0.0784%" height="15" fill="rgb(226,171,33)" fg:x="83" fg:w="1"/><text x="6.7598%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="6.5098%" y="693" width="0.1569%" height="15" fill="rgb(253,99,13)" fg:x="83" fg:w="2"/><text x="6.7598%" y="703.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="6.5882%" y="677" width="0.0784%" height="15" fill="rgb(244,48,7)" fg:x="84" fg:w="1"/><text x="6.8382%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.6667%" y="597" width="0.0784%" height="15" fill="rgb(244,217,54)" fg:x="85" fg:w="1"/><text x="6.9167%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.6667%" y="581" width="0.0784%" height="15" fill="rgb(224,15,18)" fg:x="85" fg:w="1"/><text x="6.9167%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.6667%" y="565" width="0.0784%" height="15" fill="rgb(244,99,12)" fg:x="85" fg:w="1"/><text x="6.9167%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.6667%" y="549" width="0.0784%" height="15" fill="rgb(233,226,8)" fg:x="85" fg:w="1"/><text x="6.9167%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.6667%" y="533" width="0.0784%" height="15" fill="rgb(229,211,3)" fg:x="85" fg:w="1"/><text x="6.9167%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.6667%" y="517" width="0.0784%" height="15" fill="rgb(216,140,21)" fg:x="85" fg:w="1"/><text x="6.9167%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.6667%" y="501" width="0.0784%" height="15" fill="rgb(234,122,30)" fg:x="85" fg:w="1"/><text x="6.9167%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.6667%" y="485" width="0.0784%" height="15" fill="rgb(236,25,46)" fg:x="85" fg:w="1"/><text x="6.9167%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.6667%" y="469" width="0.0784%" height="15" fill="rgb(217,52,54)" fg:x="85" fg:w="1"/><text x="6.9167%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.6667%" y="453" width="0.0784%" height="15" fill="rgb(222,29,26)" fg:x="85" fg:w="1"/><text x="6.9167%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.6667%" y="437" width="0.0784%" height="15" fill="rgb(216,177,29)" fg:x="85" fg:w="1"/><text x="6.9167%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="6.6667%" y="421" width="0.0784%" height="15" fill="rgb(247,136,51)" fg:x="85" fg:w="1"/><text x="6.9167%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="6.6667%" y="405" width="0.0784%" height="15" fill="rgb(231,47,47)" fg:x="85" fg:w="1"/><text x="6.9167%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="6.6667%" y="389" width="0.0784%" height="15" fill="rgb(211,192,36)" fg:x="85" fg:w="1"/><text x="6.9167%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="6.6667%" y="373" width="0.0784%" height="15" fill="rgb(229,156,32)" fg:x="85" fg:w="1"/><text x="6.9167%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.6667%" y="357" width="0.0784%" height="15" fill="rgb(248,213,20)" fg:x="85" fg:w="1"/><text x="6.9167%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="6.6667%" y="645" width="0.1569%" height="15" fill="rgb(217,64,7)" fg:x="85" fg:w="2"/><text x="6.9167%" y="655.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="6.6667%" y="629" width="0.1569%" height="15" fill="rgb(232,142,8)" fg:x="85" fg:w="2"/><text x="6.9167%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="6.6667%" y="613" width="0.1569%" height="15" fill="rgb(224,92,44)" fg:x="85" fg:w="2"/><text x="6.9167%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.7451%" y="597" width="0.0784%" height="15" fill="rgb(214,169,17)" fg:x="86" fg:w="1"/><text x="6.9951%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.7451%" y="581" width="0.0784%" height="15" fill="rgb(210,59,37)" fg:x="86" fg:w="1"/><text x="6.9951%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.7451%" y="565" width="0.0784%" height="15" fill="rgb(214,116,48)" fg:x="86" fg:w="1"/><text x="6.9951%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.7451%" y="549" width="0.0784%" height="15" fill="rgb(244,191,6)" fg:x="86" fg:w="1"/><text x="6.9951%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="6.7451%" y="533" width="0.0784%" height="15" fill="rgb(241,50,52)" fg:x="86" fg:w="1"/><text x="6.9951%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.7451%" y="517" width="0.0784%" height="15" fill="rgb(236,75,39)" fg:x="86" fg:w="1"/><text x="6.9951%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.7451%" y="501" width="0.0784%" height="15" fill="rgb(236,99,0)" fg:x="86" fg:w="1"/><text x="6.9951%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.7451%" y="485" width="0.0784%" height="15" fill="rgb(207,202,15)" fg:x="86" fg:w="1"/><text x="6.9951%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.7451%" y="469" width="0.0784%" height="15" fill="rgb(233,207,14)" fg:x="86" fg:w="1"/><text x="6.9951%" y="479.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="6.6667%" y="677" width="0.2353%" height="15" fill="rgb(226,27,51)" fg:x="85" fg:w="3"/><text x="6.9167%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="6.6667%" y="661" width="0.2353%" height="15" fill="rgb(206,104,42)" fg:x="85" fg:w="3"/><text x="6.9167%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="6.8235%" y="645" width="0.0784%" height="15" fill="rgb(212,225,4)" fg:x="87" fg:w="1"/><text x="7.0735%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.8235%" y="629" width="0.0784%" height="15" fill="rgb(233,96,42)" fg:x="87" fg:w="1"/><text x="7.0735%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.8235%" y="613" width="0.0784%" height="15" fill="rgb(229,21,32)" fg:x="87" fg:w="1"/><text x="7.0735%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.8235%" y="597" width="0.0784%" height="15" fill="rgb(226,216,24)" fg:x="87" fg:w="1"/><text x="7.0735%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.8235%" y="581" width="0.0784%" height="15" fill="rgb(221,163,17)" fg:x="87" fg:w="1"/><text x="7.0735%" y="591.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="6.9020%" y="677" width="0.0784%" height="15" fill="rgb(216,216,42)" fg:x="88" fg:w="1"/><text x="7.1520%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.9020%" y="661" width="0.0784%" height="15" fill="rgb(240,118,7)" fg:x="88" fg:w="1"/><text x="7.1520%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.9804%" y="629" width="0.0784%" height="15" fill="rgb(221,67,37)" fg:x="89" fg:w="1"/><text x="7.2304%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.9804%" y="613" width="0.0784%" height="15" fill="rgb(241,32,44)" fg:x="89" fg:w="1"/><text x="7.2304%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.9804%" y="597" width="0.0784%" height="15" fill="rgb(235,204,43)" fg:x="89" fg:w="1"/><text x="7.2304%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.9804%" y="581" width="0.0784%" height="15" fill="rgb(213,116,10)" fg:x="89" fg:w="1"/><text x="7.2304%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.9804%" y="565" width="0.0784%" height="15" fill="rgb(239,15,48)" fg:x="89" fg:w="1"/><text x="7.2304%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.9804%" y="549" width="0.0784%" height="15" fill="rgb(207,123,36)" fg:x="89" fg:w="1"/><text x="7.2304%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.9804%" y="533" width="0.0784%" height="15" fill="rgb(209,103,30)" fg:x="89" fg:w="1"/><text x="7.2304%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="6.9804%" y="517" width="0.0784%" height="15" fill="rgb(238,100,19)" fg:x="89" fg:w="1"/><text x="7.2304%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.9804%" y="501" width="0.0784%" height="15" fill="rgb(244,30,14)" fg:x="89" fg:w="1"/><text x="7.2304%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.9804%" y="485" width="0.0784%" height="15" fill="rgb(249,174,6)" fg:x="89" fg:w="1"/><text x="7.2304%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.9804%" y="469" width="0.0784%" height="15" fill="rgb(235,213,41)" fg:x="89" fg:w="1"/><text x="7.2304%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.0588%" y="581" width="0.0784%" height="15" fill="rgb(213,118,6)" fg:x="90" fg:w="1"/><text x="7.3088%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.0588%" y="565" width="0.0784%" height="15" fill="rgb(235,44,51)" fg:x="90" fg:w="1"/><text x="7.3088%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.0588%" y="549" width="0.0784%" height="15" fill="rgb(217,9,53)" fg:x="90" fg:w="1"/><text x="7.3088%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.0588%" y="533" width="0.0784%" height="15" fill="rgb(237,172,34)" fg:x="90" fg:w="1"/><text x="7.3088%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.0588%" y="517" width="0.0784%" height="15" fill="rgb(206,206,11)" fg:x="90" fg:w="1"/><text x="7.3088%" y="527.50"></text></g><g><title>plugins_core::build::Build::holding (9 samples, 0.71%)</title><rect x="6.5098%" y="709" width="0.7059%" height="15" fill="rgb(214,149,29)" fg:x="83" fg:w="9"/><text x="6.7598%" y="719.50"></text></g><g><title>plugins_core::tools::set_container (7 samples, 0.55%)</title><rect x="6.6667%" y="693" width="0.5490%" height="15" fill="rgb(208,123,3)" fg:x="85" fg:w="7"/><text x="6.9167%" y="703.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="6.9804%" y="677" width="0.2353%" height="15" fill="rgb(229,126,4)" fg:x="89" fg:w="3"/><text x="7.2304%" y="687.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="6.9804%" y="661" width="0.2353%" height="15" fill="rgb(222,92,36)" fg:x="89" fg:w="3"/><text x="7.2304%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="6.9804%" y="645" width="0.2353%" height="15" fill="rgb(216,39,41)" fg:x="89" fg:w="3"/><text x="7.2304%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="7.0588%" y="629" width="0.1569%" height="15" fill="rgb(253,127,28)" fg:x="90" fg:w="2"/><text x="7.3088%" y="639.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="7.0588%" y="613" width="0.1569%" height="15" fill="rgb(249,152,51)" fg:x="90" fg:w="2"/><text x="7.3088%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="7.0588%" y="597" width="0.1569%" height="15" fill="rgb(209,123,42)" fg:x="90" fg:w="2"/><text x="7.3088%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.1373%" y="581" width="0.0784%" height="15" fill="rgb(241,118,22)" fg:x="91" fg:w="1"/><text x="7.3873%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.1373%" y="565" width="0.0784%" height="15" fill="rgb(208,25,7)" fg:x="91" fg:w="1"/><text x="7.3873%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.1373%" y="549" width="0.0784%" height="15" fill="rgb(243,144,39)" fg:x="91" fg:w="1"/><text x="7.3873%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.1373%" y="533" width="0.0784%" height="15" fill="rgb(250,50,5)" fg:x="91" fg:w="1"/><text x="7.3873%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.1373%" y="517" width="0.0784%" height="15" fill="rgb(207,67,11)" fg:x="91" fg:w="1"/><text x="7.3873%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.1373%" y="501" width="0.0784%" height="15" fill="rgb(245,204,40)" fg:x="91" fg:w="1"/><text x="7.3873%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.1373%" y="485" width="0.0784%" height="15" fill="rgb(238,228,24)" fg:x="91" fg:w="1"/><text x="7.3873%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.1373%" y="469" width="0.0784%" height="15" fill="rgb(217,116,22)" fg:x="91" fg:w="1"/><text x="7.3873%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.1373%" y="453" width="0.0784%" height="15" fill="rgb(234,98,12)" fg:x="91" fg:w="1"/><text x="7.3873%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.1373%" y="437" width="0.0784%" height="15" fill="rgb(242,170,50)" fg:x="91" fg:w="1"/><text x="7.3873%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.1373%" y="421" width="0.0784%" height="15" fill="rgb(235,7,5)" fg:x="91" fg:w="1"/><text x="7.3873%" y="431.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="7.2157%" y="709" width="0.0784%" height="15" fill="rgb(241,114,28)" fg:x="92" fg:w="1"/><text x="7.4657%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="7.2157%" y="693" width="0.0784%" height="15" fill="rgb(246,112,42)" fg:x="92" fg:w="1"/><text x="7.4657%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.2157%" y="677" width="0.0784%" height="15" fill="rgb(248,228,14)" fg:x="92" fg:w="1"/><text x="7.4657%" y="687.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.2157%" y="661" width="0.0784%" height="15" fill="rgb(208,133,18)" fg:x="92" fg:w="1"/><text x="7.4657%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.2157%" y="645" width="0.0784%" height="15" fill="rgb(207,35,49)" fg:x="92" fg:w="1"/><text x="7.4657%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.2157%" y="629" width="0.0784%" height="15" fill="rgb(205,68,36)" fg:x="92" fg:w="1"/><text x="7.4657%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.2157%" y="613" width="0.0784%" height="15" fill="rgb(245,62,40)" fg:x="92" fg:w="1"/><text x="7.4657%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.2157%" y="597" width="0.0784%" height="15" fill="rgb(228,27,24)" fg:x="92" fg:w="1"/><text x="7.4657%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.2157%" y="581" width="0.0784%" height="15" fill="rgb(253,19,12)" fg:x="92" fg:w="1"/><text x="7.4657%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.2157%" y="565" width="0.0784%" height="15" fill="rgb(232,28,20)" fg:x="92" fg:w="1"/><text x="7.4657%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.2157%" y="549" width="0.0784%" height="15" fill="rgb(218,35,51)" fg:x="92" fg:w="1"/><text x="7.4657%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.2157%" y="533" width="0.0784%" height="15" fill="rgb(212,90,40)" fg:x="92" fg:w="1"/><text x="7.4657%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.2157%" y="517" width="0.0784%" height="15" fill="rgb(220,172,12)" fg:x="92" fg:w="1"/><text x="7.4657%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.2157%" y="501" width="0.0784%" height="15" fill="rgb(226,159,20)" fg:x="92" fg:w="1"/><text x="7.4657%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.2157%" y="485" width="0.0784%" height="15" fill="rgb(234,205,16)" fg:x="92" fg:w="1"/><text x="7.4657%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.2157%" y="469" width="0.0784%" height="15" fill="rgb(207,9,39)" fg:x="92" fg:w="1"/><text x="7.4657%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="7.2157%" y="453" width="0.0784%" height="15" fill="rgb(249,143,15)" fg:x="92" fg:w="1"/><text x="7.4657%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="7.2157%" y="437" width="0.0784%" height="15" fill="rgb(253,133,29)" fg:x="92" fg:w="1"/><text x="7.4657%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="7.2157%" y="421" width="0.0784%" height="15" fill="rgb(221,187,0)" fg:x="92" fg:w="1"/><text x="7.4657%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="7.2157%" y="405" width="0.0784%" height="15" fill="rgb(205,204,26)" fg:x="92" fg:w="1"/><text x="7.4657%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.2157%" y="389" width="0.0784%" height="15" fill="rgb(224,68,54)" fg:x="92" fg:w="1"/><text x="7.4657%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.2941%" y="677" width="0.0784%" height="15" fill="rgb(209,67,4)" fg:x="93" fg:w="1"/><text x="7.5441%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="7.2941%" y="693" width="0.1569%" height="15" fill="rgb(228,229,18)" fg:x="93" fg:w="2"/><text x="7.5441%" y="703.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="7.3725%" y="677" width="0.0784%" height="15" fill="rgb(231,89,13)" fg:x="94" fg:w="1"/><text x="7.6225%" y="687.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="7.4510%" y="677" width="0.0784%" height="15" fill="rgb(210,182,18)" fg:x="95" fg:w="1"/><text x="7.7010%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="7.4510%" y="661" width="0.0784%" height="15" fill="rgb(240,105,2)" fg:x="95" fg:w="1"/><text x="7.7010%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.4510%" y="645" width="0.0784%" height="15" fill="rgb(207,170,50)" fg:x="95" fg:w="1"/><text x="7.7010%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.4510%" y="629" width="0.0784%" height="15" fill="rgb(232,133,24)" fg:x="95" fg:w="1"/><text x="7.7010%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.4510%" y="613" width="0.0784%" height="15" fill="rgb(235,166,27)" fg:x="95" fg:w="1"/><text x="7.7010%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.4510%" y="597" width="0.0784%" height="15" fill="rgb(209,19,13)" fg:x="95" fg:w="1"/><text x="7.7010%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.4510%" y="581" width="0.0784%" height="15" fill="rgb(226,79,39)" fg:x="95" fg:w="1"/><text x="7.7010%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.4510%" y="565" width="0.0784%" height="15" fill="rgb(222,163,10)" fg:x="95" fg:w="1"/><text x="7.7010%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.4510%" y="549" width="0.0784%" height="15" fill="rgb(214,44,19)" fg:x="95" fg:w="1"/><text x="7.7010%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.4510%" y="533" width="0.0784%" height="15" fill="rgb(210,217,13)" fg:x="95" fg:w="1"/><text x="7.7010%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.4510%" y="517" width="0.0784%" height="15" fill="rgb(237,61,54)" fg:x="95" fg:w="1"/><text x="7.7010%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.4510%" y="501" width="0.0784%" height="15" fill="rgb(226,184,24)" fg:x="95" fg:w="1"/><text x="7.7010%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.4510%" y="485" width="0.0784%" height="15" fill="rgb(223,226,4)" fg:x="95" fg:w="1"/><text x="7.7010%" y="495.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="7.4510%" y="469" width="0.0784%" height="15" fill="rgb(210,26,41)" fg:x="95" fg:w="1"/><text x="7.7010%" y="479.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="7.5294%" y="677" width="0.0784%" height="15" fill="rgb(220,221,6)" fg:x="96" fg:w="1"/><text x="7.7794%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="7.5294%" y="661" width="0.0784%" height="15" fill="rgb(225,89,49)" fg:x="96" fg:w="1"/><text x="7.7794%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_struct (1 samples, 0.08%)</title><rect x="7.5294%" y="645" width="0.0784%" height="15" fill="rgb(218,70,45)" fg:x="96" fg:w="1"/><text x="7.7794%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.6078%" y="629" width="0.0784%" height="15" fill="rgb(238,166,21)" fg:x="97" fg:w="1"/><text x="7.8578%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.6078%" y="613" width="0.0784%" height="15" fill="rgb(224,141,44)" fg:x="97" fg:w="1"/><text x="7.8578%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.6078%" y="597" width="0.0784%" height="15" fill="rgb(230,12,49)" fg:x="97" fg:w="1"/><text x="7.8578%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.6078%" y="581" width="0.0784%" height="15" fill="rgb(212,174,12)" fg:x="97" fg:w="1"/><text x="7.8578%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.6078%" y="565" width="0.0784%" height="15" fill="rgb(246,67,9)" fg:x="97" fg:w="1"/><text x="7.8578%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.6078%" y="549" width="0.0784%" height="15" fill="rgb(239,35,23)" fg:x="97" fg:w="1"/><text x="7.8578%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.6078%" y="533" width="0.0784%" height="15" fill="rgb(211,167,0)" fg:x="97" fg:w="1"/><text x="7.8578%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.6078%" y="517" width="0.0784%" height="15" fill="rgb(225,119,45)" fg:x="97" fg:w="1"/><text x="7.8578%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.6078%" y="501" width="0.0784%" height="15" fill="rgb(210,162,6)" fg:x="97" fg:w="1"/><text x="7.8578%" y="511.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (46 samples, 3.61%)</title><rect x="4.1569%" y="725" width="3.6078%" height="15" fill="rgb(208,118,35)" fg:x="53" fg:w="46"/><text x="4.4069%" y="735.50">plug..</text></g><g><title>plugins_core::build::Build::occupying (6 samples, 0.47%)</title><rect x="7.2941%" y="709" width="0.4706%" height="15" fill="rgb(239,4,53)" fg:x="93" fg:w="6"/><text x="7.5441%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (4 samples, 0.31%)</title><rect x="7.4510%" y="693" width="0.3137%" height="15" fill="rgb(213,130,21)" fg:x="95" fg:w="4"/><text x="7.7010%" y="703.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (2 samples, 0.16%)</title><rect x="7.6078%" y="677" width="0.1569%" height="15" fill="rgb(235,148,0)" fg:x="97" fg:w="2"/><text x="7.8578%" y="687.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="7.6078%" y="661" width="0.1569%" height="15" fill="rgb(244,224,18)" fg:x="97" fg:w="2"/><text x="7.8578%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="7.6078%" y="645" width="0.1569%" height="15" fill="rgb(211,214,4)" fg:x="97" fg:w="2"/><text x="7.8578%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="7.6863%" y="629" width="0.0784%" height="15" fill="rgb(206,119,25)" fg:x="98" fg:w="1"/><text x="7.9363%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.6863%" y="613" width="0.0784%" height="15" fill="rgb(243,93,47)" fg:x="98" fg:w="1"/><text x="7.9363%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.6863%" y="597" width="0.0784%" height="15" fill="rgb(224,194,6)" fg:x="98" fg:w="1"/><text x="7.9363%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.6863%" y="581" width="0.0784%" height="15" fill="rgb(243,229,6)" fg:x="98" fg:w="1"/><text x="7.9363%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.6863%" y="565" width="0.0784%" height="15" fill="rgb(207,23,50)" fg:x="98" fg:w="1"/><text x="7.9363%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.6863%" y="549" width="0.0784%" height="15" fill="rgb(253,192,32)" fg:x="98" fg:w="1"/><text x="7.9363%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="7.7647%" y="677" width="0.0784%" height="15" fill="rgb(213,21,6)" fg:x="99" fg:w="1"/><text x="8.0147%" y="687.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="7.7647%" y="661" width="0.0784%" height="15" fill="rgb(243,151,13)" fg:x="99" fg:w="1"/><text x="8.0147%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="7.7647%" y="645" width="0.0784%" height="15" fill="rgb(233,165,41)" fg:x="99" fg:w="1"/><text x="8.0147%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="7.7647%" y="629" width="0.0784%" height="15" fill="rgb(246,176,45)" fg:x="99" fg:w="1"/><text x="8.0147%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="7.7647%" y="613" width="0.0784%" height="15" fill="rgb(217,170,52)" fg:x="99" fg:w="1"/><text x="8.0147%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="7.7647%" y="597" width="0.0784%" height="15" fill="rgb(214,203,54)" fg:x="99" fg:w="1"/><text x="8.0147%" y="607.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="7.7647%" y="581" width="0.0784%" height="15" fill="rgb(248,215,49)" fg:x="99" fg:w="1"/><text x="8.0147%" y="591.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="7.7647%" y="565" width="0.0784%" height="15" fill="rgb(208,46,10)" fg:x="99" fg:w="1"/><text x="8.0147%" y="575.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="7.7647%" y="549" width="0.0784%" height="15" fill="rgb(254,5,31)" fg:x="99" fg:w="1"/><text x="8.0147%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="7.7647%" y="533" width="0.0784%" height="15" fill="rgb(222,104,33)" fg:x="99" fg:w="1"/><text x="8.0147%" y="543.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="7.7647%" y="517" width="0.0784%" height="15" fill="rgb(248,49,16)" fg:x="99" fg:w="1"/><text x="8.0147%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="7.7647%" y="501" width="0.0784%" height="15" fill="rgb(232,198,41)" fg:x="99" fg:w="1"/><text x="8.0147%" y="511.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="7.7647%" y="485" width="0.0784%" height="15" fill="rgb(214,125,3)" fg:x="99" fg:w="1"/><text x="8.0147%" y="495.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="7.7647%" y="469" width="0.0784%" height="15" fill="rgb(229,220,28)" fg:x="99" fg:w="1"/><text x="8.0147%" y="479.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.7647%" y="453" width="0.0784%" height="15" fill="rgb(222,64,37)" fg:x="99" fg:w="1"/><text x="8.0147%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.7647%" y="437" width="0.0784%" height="15" fill="rgb(249,184,13)" fg:x="99" fg:w="1"/><text x="8.0147%" y="447.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="7.7647%" y="421" width="0.0784%" height="15" fill="rgb(252,176,6)" fg:x="99" fg:w="1"/><text x="8.0147%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="7.7647%" y="405" width="0.0784%" height="15" fill="rgb(228,153,7)" fg:x="99" fg:w="1"/><text x="8.0147%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="7.7647%" y="389" width="0.0784%" height="15" fill="rgb(242,193,5)" fg:x="99" fg:w="1"/><text x="8.0147%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="7.7647%" y="373" width="0.0784%" height="15" fill="rgb(232,140,9)" fg:x="99" fg:w="1"/><text x="8.0147%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="7.7647%" y="357" width="0.0784%" height="15" fill="rgb(213,222,16)" fg:x="99" fg:w="1"/><text x="8.0147%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="7.7647%" y="341" width="0.0784%" height="15" fill="rgb(222,75,50)" fg:x="99" fg:w="1"/><text x="8.0147%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.7647%" y="325" width="0.0784%" height="15" fill="rgb(205,180,2)" fg:x="99" fg:w="1"/><text x="8.0147%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="7.7647%" y="309" width="0.0784%" height="15" fill="rgb(216,34,7)" fg:x="99" fg:w="1"/><text x="8.0147%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.7647%" y="293" width="0.0784%" height="15" fill="rgb(253,16,32)" fg:x="99" fg:w="1"/><text x="8.0147%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="7.7647%" y="277" width="0.0784%" height="15" fill="rgb(208,97,28)" fg:x="99" fg:w="1"/><text x="8.0147%" y="287.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="7.7647%" y="261" width="0.0784%" height="15" fill="rgb(225,92,11)" fg:x="99" fg:w="1"/><text x="8.0147%" y="271.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="7.7647%" y="245" width="0.0784%" height="15" fill="rgb(243,38,12)" fg:x="99" fg:w="1"/><text x="8.0147%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.7647%" y="229" width="0.0784%" height="15" fill="rgb(208,139,16)" fg:x="99" fg:w="1"/><text x="8.0147%" y="239.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.16%)</title><rect x="7.7647%" y="725" width="0.1569%" height="15" fill="rgb(227,24,9)" fg:x="99" fg:w="2"/><text x="8.0147%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="7.7647%" y="709" width="0.1569%" height="15" fill="rgb(206,62,11)" fg:x="99" fg:w="2"/><text x="8.0147%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="7.7647%" y="693" width="0.1569%" height="15" fill="rgb(228,134,27)" fg:x="99" fg:w="2"/><text x="8.0147%" y="703.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="7.8431%" y="677" width="0.0784%" height="15" fill="rgb(205,55,33)" fg:x="100" fg:w="1"/><text x="8.0931%" y="687.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="7.8431%" y="661" width="0.0784%" height="15" fill="rgb(243,75,43)" fg:x="100" fg:w="1"/><text x="8.0931%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.8431%" y="645" width="0.0784%" height="15" fill="rgb(223,27,42)" fg:x="100" fg:w="1"/><text x="8.0931%" y="655.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (84 samples, 6.59%)</title><rect x="1.4118%" y="741" width="6.5882%" height="15" fill="rgb(232,189,33)" fg:x="18" fg:w="84"/><text x="1.6618%" y="751.50">&lt;tests::H..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (1 samples, 0.08%)</title><rect x="7.9216%" y="725" width="0.0784%" height="15" fill="rgb(210,9,39)" fg:x="101" fg:w="1"/><text x="8.1716%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::build::Build&gt; (1 samples, 0.08%)</title><rect x="7.9216%" y="709" width="0.0784%" height="15" fill="rgb(242,85,26)" fg:x="101" fg:w="1"/><text x="8.1716%" y="719.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="8.0000%" y="725" width="0.0784%" height="15" fill="rgb(248,44,4)" fg:x="102" fg:w="1"/><text x="8.2500%" y="735.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="8.0000%" y="709" width="0.0784%" height="15" fill="rgb(250,96,46)" fg:x="102" fg:w="1"/><text x="8.2500%" y="719.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="8.0000%" y="693" width="0.0784%" height="15" fill="rgb(229,116,26)" fg:x="102" fg:w="1"/><text x="8.2500%" y="703.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="8.0000%" y="677" width="0.0784%" height="15" fill="rgb(246,94,34)" fg:x="102" fg:w="1"/><text x="8.2500%" y="687.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="8.0000%" y="661" width="0.0784%" height="15" fill="rgb(251,73,21)" fg:x="102" fg:w="1"/><text x="8.2500%" y="671.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="8.0000%" y="645" width="0.0784%" height="15" fill="rgb(254,121,25)" fg:x="102" fg:w="1"/><text x="8.2500%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="8.0000%" y="629" width="0.0784%" height="15" fill="rgb(215,161,49)" fg:x="102" fg:w="1"/><text x="8.2500%" y="639.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="8.0000%" y="613" width="0.0784%" height="15" fill="rgb(221,43,13)" fg:x="102" fg:w="1"/><text x="8.2500%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="8.0000%" y="597" width="0.0784%" height="15" fill="rgb(249,5,37)" fg:x="102" fg:w="1"/><text x="8.2500%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="8.0000%" y="581" width="0.0784%" height="15" fill="rgb(226,25,44)" fg:x="102" fg:w="1"/><text x="8.2500%" y="591.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.0000%" y="565" width="0.0784%" height="15" fill="rgb(238,189,16)" fg:x="102" fg:w="1"/><text x="8.2500%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.0000%" y="549" width="0.0784%" height="15" fill="rgb(251,186,8)" fg:x="102" fg:w="1"/><text x="8.2500%" y="559.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="8.0000%" y="533" width="0.0784%" height="15" fill="rgb(254,34,31)" fg:x="102" fg:w="1"/><text x="8.2500%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="8.0000%" y="517" width="0.0784%" height="15" fill="rgb(225,215,27)" fg:x="102" fg:w="1"/><text x="8.2500%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="8.0000%" y="501" width="0.0784%" height="15" fill="rgb(221,192,48)" fg:x="102" fg:w="1"/><text x="8.2500%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="8.0000%" y="485" width="0.0784%" height="15" fill="rgb(219,137,20)" fg:x="102" fg:w="1"/><text x="8.2500%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="8.0000%" y="469" width="0.0784%" height="15" fill="rgb(219,84,11)" fg:x="102" fg:w="1"/><text x="8.2500%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="8.0000%" y="453" width="0.0784%" height="15" fill="rgb(224,10,23)" fg:x="102" fg:w="1"/><text x="8.2500%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.0000%" y="437" width="0.0784%" height="15" fill="rgb(248,22,39)" fg:x="102" fg:w="1"/><text x="8.2500%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="8.0000%" y="421" width="0.0784%" height="15" fill="rgb(212,154,20)" fg:x="102" fg:w="1"/><text x="8.2500%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.0000%" y="405" width="0.0784%" height="15" fill="rgb(236,199,50)" fg:x="102" fg:w="1"/><text x="8.2500%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="8.0000%" y="389" width="0.0784%" height="15" fill="rgb(211,9,17)" fg:x="102" fg:w="1"/><text x="8.2500%" y="399.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="8.0000%" y="373" width="0.0784%" height="15" fill="rgb(243,216,36)" fg:x="102" fg:w="1"/><text x="8.2500%" y="383.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="8.0000%" y="357" width="0.0784%" height="15" fill="rgb(250,2,10)" fg:x="102" fg:w="1"/><text x="8.2500%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="8.0000%" y="341" width="0.0784%" height="15" fill="rgb(226,50,48)" fg:x="102" fg:w="1"/><text x="8.2500%" y="351.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="8.1569%" y="661" width="0.0784%" height="15" fill="rgb(243,81,16)" fg:x="104" fg:w="1"/><text x="8.4069%" y="671.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="8.1569%" y="645" width="0.0784%" height="15" fill="rgb(250,14,2)" fg:x="104" fg:w="1"/><text x="8.4069%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="8.1569%" y="629" width="0.0784%" height="15" fill="rgb(233,135,29)" fg:x="104" fg:w="1"/><text x="8.4069%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="8.1569%" y="613" width="0.0784%" height="15" fill="rgb(224,64,43)" fg:x="104" fg:w="1"/><text x="8.4069%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.1569%" y="597" width="0.0784%" height="15" fill="rgb(238,84,13)" fg:x="104" fg:w="1"/><text x="8.4069%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="8.3137%" y="645" width="0.1569%" height="15" fill="rgb(253,48,26)" fg:x="106" fg:w="2"/><text x="8.5637%" y="655.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="8.4706%" y="645" width="0.2353%" height="15" fill="rgb(205,223,31)" fg:x="108" fg:w="3"/><text x="8.7206%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="8.5490%" y="629" width="0.1569%" height="15" fill="rgb(221,41,32)" fg:x="109" fg:w="2"/><text x="8.7990%" y="639.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="8.5490%" y="613" width="0.1569%" height="15" fill="rgb(213,158,31)" fg:x="109" fg:w="2"/><text x="8.7990%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="8.5490%" y="597" width="0.1569%" height="15" fill="rgb(245,126,43)" fg:x="109" fg:w="2"/><text x="8.7990%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="8.5490%" y="581" width="0.1569%" height="15" fill="rgb(227,7,22)" fg:x="109" fg:w="2"/><text x="8.7990%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="8.5490%" y="565" width="0.1569%" height="15" fill="rgb(252,90,44)" fg:x="109" fg:w="2"/><text x="8.7990%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="8.5490%" y="549" width="0.1569%" height="15" fill="rgb(253,91,0)" fg:x="109" fg:w="2"/><text x="8.7990%" y="559.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="8.5490%" y="533" width="0.1569%" height="15" fill="rgb(252,175,49)" fg:x="109" fg:w="2"/><text x="8.7990%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.39%)</title><rect x="8.7059%" y="629" width="0.3922%" height="15" fill="rgb(246,150,1)" fg:x="111" fg:w="5"/><text x="8.9559%" y="639.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="8.8627%" y="613" width="0.2353%" height="15" fill="rgb(241,192,25)" fg:x="113" fg:w="3"/><text x="9.1127%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="8.8627%" y="597" width="0.2353%" height="15" fill="rgb(239,187,11)" fg:x="113" fg:w="3"/><text x="9.1127%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="8.9412%" y="581" width="0.1569%" height="15" fill="rgb(218,202,51)" fg:x="114" fg:w="2"/><text x="9.1912%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="8.9412%" y="565" width="0.1569%" height="15" fill="rgb(225,176,8)" fg:x="114" fg:w="2"/><text x="9.1912%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="9.0196%" y="549" width="0.0784%" height="15" fill="rgb(219,122,41)" fg:x="115" fg:w="1"/><text x="9.2696%" y="559.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="9.0196%" y="533" width="0.0784%" height="15" fill="rgb(248,140,20)" fg:x="115" fg:w="1"/><text x="9.2696%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.0980%" y="581" width="0.0784%" height="15" fill="rgb(245,41,37)" fg:x="116" fg:w="1"/><text x="9.3480%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.0980%" y="565" width="0.0784%" height="15" fill="rgb(235,82,39)" fg:x="116" fg:w="1"/><text x="9.3480%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.0980%" y="549" width="0.0784%" height="15" fill="rgb(230,108,42)" fg:x="116" fg:w="1"/><text x="9.3480%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.0980%" y="533" width="0.0784%" height="15" fill="rgb(215,150,50)" fg:x="116" fg:w="1"/><text x="9.3480%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="9.0980%" y="629" width="0.1569%" height="15" fill="rgb(233,212,5)" fg:x="116" fg:w="2"/><text x="9.3480%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="9.0980%" y="613" width="0.1569%" height="15" fill="rgb(245,80,22)" fg:x="116" fg:w="2"/><text x="9.3480%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="9.0980%" y="597" width="0.1569%" height="15" fill="rgb(238,129,16)" fg:x="116" fg:w="2"/><text x="9.3480%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="9.1765%" y="581" width="0.0784%" height="15" fill="rgb(240,19,0)" fg:x="117" fg:w="1"/><text x="9.4265%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.1765%" y="565" width="0.0784%" height="15" fill="rgb(232,42,35)" fg:x="117" fg:w="1"/><text x="9.4265%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.1765%" y="549" width="0.0784%" height="15" fill="rgb(223,130,24)" fg:x="117" fg:w="1"/><text x="9.4265%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.1765%" y="533" width="0.0784%" height="15" fill="rgb(237,16,22)" fg:x="117" fg:w="1"/><text x="9.4265%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (14 samples, 1.10%)</title><rect x="8.2353%" y="661" width="1.0980%" height="15" fill="rgb(248,192,20)" fg:x="105" fg:w="14"/><text x="8.4853%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.63%)</title><rect x="8.7059%" y="645" width="0.6275%" height="15" fill="rgb(233,167,2)" fg:x="111" fg:w="8"/><text x="8.9559%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.2549%" y="629" width="0.0784%" height="15" fill="rgb(252,71,44)" fg:x="118" fg:w="1"/><text x="9.5049%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.2549%" y="613" width="0.0784%" height="15" fill="rgb(238,37,47)" fg:x="118" fg:w="1"/><text x="9.5049%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.2549%" y="597" width="0.0784%" height="15" fill="rgb(214,202,54)" fg:x="118" fg:w="1"/><text x="9.5049%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.3333%" y="597" width="0.0784%" height="15" fill="rgb(254,165,40)" fg:x="119" fg:w="1"/><text x="9.5833%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.4118%" y="581" width="0.0784%" height="15" fill="rgb(246,173,38)" fg:x="120" fg:w="1"/><text x="9.6618%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="9.4902%" y="581" width="0.0784%" height="15" fill="rgb(215,3,27)" fg:x="121" fg:w="1"/><text x="9.7402%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="9.4902%" y="565" width="0.0784%" height="15" fill="rgb(239,169,51)" fg:x="121" fg:w="1"/><text x="9.7402%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.4902%" y="549" width="0.0784%" height="15" fill="rgb(212,5,25)" fg:x="121" fg:w="1"/><text x="9.7402%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.31%)</title><rect x="9.3333%" y="661" width="0.3137%" height="15" fill="rgb(243,45,17)" fg:x="119" fg:w="4"/><text x="9.5833%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.31%)</title><rect x="9.3333%" y="645" width="0.3137%" height="15" fill="rgb(242,97,9)" fg:x="119" fg:w="4"/><text x="9.5833%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.31%)</title><rect x="9.3333%" y="629" width="0.3137%" height="15" fill="rgb(228,71,31)" fg:x="119" fg:w="4"/><text x="9.5833%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.31%)</title><rect x="9.3333%" y="613" width="0.3137%" height="15" fill="rgb(252,184,16)" fg:x="119" fg:w="4"/><text x="9.5833%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="9.4118%" y="597" width="0.2353%" height="15" fill="rgb(236,169,46)" fg:x="120" fg:w="3"/><text x="9.6618%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.5686%" y="581" width="0.0784%" height="15" fill="rgb(207,17,47)" fg:x="122" fg:w="1"/><text x="9.8186%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.6471%" y="581" width="0.0784%" height="15" fill="rgb(206,201,28)" fg:x="123" fg:w="1"/><text x="9.8971%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.6471%" y="565" width="0.0784%" height="15" fill="rgb(224,184,23)" fg:x="123" fg:w="1"/><text x="9.8971%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.8039%" y="549" width="0.0784%" height="15" fill="rgb(208,139,48)" fg:x="125" fg:w="1"/><text x="10.0539%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.8039%" y="533" width="0.0784%" height="15" fill="rgb(208,130,10)" fg:x="125" fg:w="1"/><text x="10.0539%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.31%)</title><rect x="9.6471%" y="629" width="0.3137%" height="15" fill="rgb(211,213,45)" fg:x="123" fg:w="4"/><text x="9.8971%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.31%)</title><rect x="9.6471%" y="613" width="0.3137%" height="15" fill="rgb(235,100,30)" fg:x="123" fg:w="4"/><text x="9.8971%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.31%)</title><rect x="9.6471%" y="597" width="0.3137%" height="15" fill="rgb(206,144,31)" fg:x="123" fg:w="4"/><text x="9.8971%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="9.7255%" y="581" width="0.2353%" height="15" fill="rgb(224,200,26)" fg:x="124" fg:w="3"/><text x="9.9755%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="9.7255%" y="565" width="0.2353%" height="15" fill="rgb(247,104,53)" fg:x="124" fg:w="3"/><text x="9.9755%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.8824%" y="549" width="0.0784%" height="15" fill="rgb(220,14,17)" fg:x="126" fg:w="1"/><text x="10.1324%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.8824%" y="533" width="0.0784%" height="15" fill="rgb(230,140,40)" fg:x="126" fg:w="1"/><text x="10.1324%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.8824%" y="517" width="0.0784%" height="15" fill="rgb(229,2,41)" fg:x="126" fg:w="1"/><text x="10.1324%" y="527.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (3 samples, 0.24%)</title><rect x="10.1176%" y="565" width="0.2353%" height="15" fill="rgb(232,89,16)" fg:x="129" fg:w="3"/><text x="10.3676%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="10.1176%" y="549" width="0.2353%" height="15" fill="rgb(247,59,52)" fg:x="129" fg:w="3"/><text x="10.3676%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="10.2745%" y="533" width="0.0784%" height="15" fill="rgb(226,110,21)" fg:x="131" fg:w="1"/><text x="10.5245%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (10 samples, 0.78%)</title><rect x="9.6471%" y="645" width="0.7843%" height="15" fill="rgb(224,176,43)" fg:x="123" fg:w="10"/><text x="9.8971%" y="655.50"></text></g><g><title>treediff::diff::diff (6 samples, 0.47%)</title><rect x="9.9608%" y="629" width="0.4706%" height="15" fill="rgb(221,73,6)" fg:x="127" fg:w="6"/><text x="10.2108%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (6 samples, 0.47%)</title><rect x="9.9608%" y="613" width="0.4706%" height="15" fill="rgb(232,78,19)" fg:x="127" fg:w="6"/><text x="10.2108%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (6 samples, 0.47%)</title><rect x="9.9608%" y="597" width="0.4706%" height="15" fill="rgb(233,112,48)" fg:x="127" fg:w="6"/><text x="10.2108%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.31%)</title><rect x="10.1176%" y="581" width="0.3137%" height="15" fill="rgb(243,131,47)" fg:x="129" fg:w="4"/><text x="10.3676%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="10.3529%" y="565" width="0.0784%" height="15" fill="rgb(226,51,1)" fg:x="132" fg:w="1"/><text x="10.6029%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="10.5098%" y="549" width="0.0784%" height="15" fill="rgb(247,58,7)" fg:x="134" fg:w="1"/><text x="10.7598%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.5098%" y="533" width="0.0784%" height="15" fill="rgb(209,7,32)" fg:x="134" fg:w="1"/><text x="10.7598%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="10.5098%" y="565" width="0.1569%" height="15" fill="rgb(209,39,41)" fg:x="134" fg:w="2"/><text x="10.7598%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="10.5882%" y="549" width="0.0784%" height="15" fill="rgb(226,182,46)" fg:x="135" fg:w="1"/><text x="10.8382%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="10.5882%" y="533" width="0.0784%" height="15" fill="rgb(230,219,10)" fg:x="135" fg:w="1"/><text x="10.8382%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.5882%" y="517" width="0.0784%" height="15" fill="rgb(227,175,30)" fg:x="135" fg:w="1"/><text x="10.8382%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.5882%" y="501" width="0.0784%" height="15" fill="rgb(217,2,50)" fg:x="135" fg:w="1"/><text x="10.8382%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.9020%" y="501" width="0.0784%" height="15" fill="rgb(229,160,0)" fg:x="139" fg:w="1"/><text x="11.1520%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.9020%" y="485" width="0.0784%" height="15" fill="rgb(207,78,37)" fg:x="139" fg:w="1"/><text x="11.1520%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.9020%" y="469" width="0.0784%" height="15" fill="rgb(225,57,0)" fg:x="139" fg:w="1"/><text x="11.1520%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="10.9804%" y="485" width="0.0784%" height="15" fill="rgb(232,154,2)" fg:x="140" fg:w="1"/><text x="11.2304%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="10.9804%" y="469" width="0.0784%" height="15" fill="rgb(241,212,25)" fg:x="140" fg:w="1"/><text x="11.2304%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="10.9804%" y="453" width="0.0784%" height="15" fill="rgb(226,69,20)" fg:x="140" fg:w="1"/><text x="11.2304%" y="463.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.71%)</title><rect x="10.4314%" y="645" width="0.7059%" height="15" fill="rgb(247,184,54)" fg:x="133" fg:w="9"/><text x="10.6814%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.71%)</title><rect x="10.4314%" y="629" width="0.7059%" height="15" fill="rgb(210,145,0)" fg:x="133" fg:w="9"/><text x="10.6814%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (9 samples, 0.71%)</title><rect x="10.4314%" y="613" width="0.7059%" height="15" fill="rgb(253,82,12)" fg:x="133" fg:w="9"/><text x="10.6814%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (9 samples, 0.71%)</title><rect x="10.4314%" y="597" width="0.7059%" height="15" fill="rgb(245,42,11)" fg:x="133" fg:w="9"/><text x="10.6814%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.63%)</title><rect x="10.5098%" y="581" width="0.6275%" height="15" fill="rgb(219,147,32)" fg:x="134" fg:w="8"/><text x="10.7598%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.47%)</title><rect x="10.6667%" y="565" width="0.4706%" height="15" fill="rgb(246,12,7)" fg:x="136" fg:w="6"/><text x="10.9167%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.39%)</title><rect x="10.7451%" y="549" width="0.3922%" height="15" fill="rgb(243,50,9)" fg:x="137" fg:w="5"/><text x="10.9951%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.31%)</title><rect x="10.8235%" y="533" width="0.3137%" height="15" fill="rgb(219,149,6)" fg:x="138" fg:w="4"/><text x="11.0735%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="10.9020%" y="517" width="0.2353%" height="15" fill="rgb(241,51,42)" fg:x="139" fg:w="3"/><text x="11.1520%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="10.9804%" y="501" width="0.1569%" height="15" fill="rgb(226,128,27)" fg:x="140" fg:w="2"/><text x="11.2304%" y="511.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="11.0588%" y="485" width="0.0784%" height="15" fill="rgb(244,144,4)" fg:x="141" fg:w="1"/><text x="11.3088%" y="495.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="11.0588%" y="469" width="0.0784%" height="15" fill="rgb(221,4,13)" fg:x="141" fg:w="1"/><text x="11.3088%" y="479.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="11.4510%" y="453" width="0.0784%" height="15" fill="rgb(208,170,28)" fg:x="146" fg:w="1"/><text x="11.7010%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="11.4510%" y="501" width="0.1569%" height="15" fill="rgb(226,131,13)" fg:x="146" fg:w="2"/><text x="11.7010%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="11.4510%" y="485" width="0.1569%" height="15" fill="rgb(215,72,41)" fg:x="146" fg:w="2"/><text x="11.7010%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="11.4510%" y="469" width="0.1569%" height="15" fill="rgb(243,108,20)" fg:x="146" fg:w="2"/><text x="11.7010%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.5294%" y="453" width="0.0784%" height="15" fill="rgb(230,189,17)" fg:x="147" fg:w="1"/><text x="11.7794%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="11.6078%" y="485" width="0.0784%" height="15" fill="rgb(220,50,17)" fg:x="148" fg:w="1"/><text x="11.8578%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.6078%" y="469" width="0.0784%" height="15" fill="rgb(248,152,48)" fg:x="148" fg:w="1"/><text x="11.8578%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.6078%" y="453" width="0.0784%" height="15" fill="rgb(244,91,11)" fg:x="148" fg:w="1"/><text x="11.8578%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.31%)</title><rect x="11.4510%" y="517" width="0.3137%" height="15" fill="rgb(220,157,5)" fg:x="146" fg:w="4"/><text x="11.7010%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="11.6078%" y="501" width="0.1569%" height="15" fill="rgb(253,137,8)" fg:x="148" fg:w="2"/><text x="11.8578%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="11.6863%" y="485" width="0.0784%" height="15" fill="rgb(217,137,51)" fg:x="149" fg:w="1"/><text x="11.9363%" y="495.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="11.6863%" y="469" width="0.0784%" height="15" fill="rgb(218,209,53)" fg:x="149" fg:w="1"/><text x="11.9363%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.55%)</title><rect x="11.3725%" y="549" width="0.5490%" height="15" fill="rgb(249,137,25)" fg:x="145" fg:w="7"/><text x="11.6225%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.47%)</title><rect x="11.4510%" y="533" width="0.4706%" height="15" fill="rgb(239,155,26)" fg:x="146" fg:w="6"/><text x="11.7010%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="11.7647%" y="517" width="0.1569%" height="15" fill="rgb(227,85,46)" fg:x="150" fg:w="2"/><text x="12.0147%" y="527.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (2 samples, 0.16%)</title><rect x="11.7647%" y="501" width="0.1569%" height="15" fill="rgb(251,107,43)" fg:x="150" fg:w="2"/><text x="12.0147%" y="511.50"></text></g><g><title>engine::session::Session::close (51 samples, 4.00%)</title><rect x="8.0000%" y="741" width="4.0000%" height="15" fill="rgb(234,170,33)" fg:x="102" fg:w="51"/><text x="8.2500%" y="751.50">engi..</text></g><g><title>engine::session::state::State::close (50 samples, 3.92%)</title><rect x="8.0784%" y="725" width="3.9216%" height="15" fill="rgb(206,29,35)" fg:x="103" fg:w="50"/><text x="8.3284%" y="735.50">engi..</text></g><g><title>engine::session::state::State::flush_entities (50 samples, 3.92%)</title><rect x="8.0784%" y="709" width="3.9216%" height="15" fill="rgb(227,138,25)" fg:x="103" fg:w="50"/><text x="8.3284%" y="719.50">engi..</text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (50 samples, 3.92%)</title><rect x="8.0784%" y="693" width="3.9216%" height="15" fill="rgb(249,131,35)" fg:x="103" fg:w="50"/><text x="8.3284%" y="703.50">engi..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (49 samples, 3.84%)</title><rect x="8.1569%" y="677" width="3.8431%" height="15" fill="rgb(239,6,40)" fg:x="104" fg:w="49"/><text x="8.4069%" y="687.50">engi..</text></g><g><title>kernel::model::any_entity_changes (30 samples, 2.35%)</title><rect x="9.6471%" y="661" width="2.3529%" height="15" fill="rgb(246,136,47)" fg:x="123" fg:w="30"/><text x="9.8971%" y="671.50">k..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (11 samples, 0.86%)</title><rect x="11.1373%" y="645" width="0.8627%" height="15" fill="rgb(253,58,26)" fg:x="142" fg:w="11"/><text x="11.3873%" y="655.50"></text></g><g><title>serde_json::de::from_trait (11 samples, 0.86%)</title><rect x="11.1373%" y="629" width="0.8627%" height="15" fill="rgb(237,141,10)" fg:x="142" fg:w="11"/><text x="11.3873%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.86%)</title><rect x="11.1373%" y="613" width="0.8627%" height="15" fill="rgb(234,156,12)" fg:x="142" fg:w="11"/><text x="11.3873%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (10 samples, 0.78%)</title><rect x="11.2157%" y="597" width="0.7843%" height="15" fill="rgb(243,224,36)" fg:x="143" fg:w="10"/><text x="11.4657%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.71%)</title><rect x="11.2941%" y="581" width="0.7059%" height="15" fill="rgb(205,229,51)" fg:x="144" fg:w="9"/><text x="11.5441%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 0.71%)</title><rect x="11.2941%" y="565" width="0.7059%" height="15" fill="rgb(223,189,4)" fg:x="144" fg:w="9"/><text x="11.5441%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.9216%" y="549" width="0.0784%" height="15" fill="rgb(249,167,54)" fg:x="152" fg:w="1"/><text x="12.1716%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.9216%" y="533" width="0.0784%" height="15" fill="rgb(218,34,28)" fg:x="152" fg:w="1"/><text x="12.1716%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.9216%" y="517" width="0.0784%" height="15" fill="rgb(232,109,42)" fg:x="152" fg:w="1"/><text x="12.1716%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="12.1569%" y="677" width="0.0784%" height="15" fill="rgb(248,214,46)" fg:x="155" fg:w="1"/><text x="12.4069%" y="687.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="12.3137%" y="549" width="0.0784%" height="15" fill="rgb(244,216,40)" fg:x="157" fg:w="1"/><text x="12.5637%" y="559.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="12.3137%" y="533" width="0.0784%" height="15" fill="rgb(231,226,31)" fg:x="157" fg:w="1"/><text x="12.5637%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="12.3137%" y="517" width="0.0784%" height="15" fill="rgb(238,38,43)" fg:x="157" fg:w="1"/><text x="12.5637%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="12.3137%" y="501" width="0.0784%" height="15" fill="rgb(208,88,43)" fg:x="157" fg:w="1"/><text x="12.5637%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="12.3137%" y="485" width="0.0784%" height="15" fill="rgb(205,136,37)" fg:x="157" fg:w="1"/><text x="12.5637%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.3137%" y="469" width="0.0784%" height="15" fill="rgb(237,34,14)" fg:x="157" fg:w="1"/><text x="12.5637%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.3137%" y="453" width="0.0784%" height="15" fill="rgb(236,193,44)" fg:x="157" fg:w="1"/><text x="12.5637%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.3137%" y="437" width="0.0784%" height="15" fill="rgb(231,48,10)" fg:x="157" fg:w="1"/><text x="12.5637%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.3137%" y="421" width="0.0784%" height="15" fill="rgb(213,141,34)" fg:x="157" fg:w="1"/><text x="12.5637%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="12.3137%" y="405" width="0.0784%" height="15" fill="rgb(249,130,34)" fg:x="157" fg:w="1"/><text x="12.5637%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.3137%" y="389" width="0.0784%" height="15" fill="rgb(219,42,41)" fg:x="157" fg:w="1"/><text x="12.5637%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.3137%" y="373" width="0.0784%" height="15" fill="rgb(224,100,54)" fg:x="157" fg:w="1"/><text x="12.5637%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.3137%" y="357" width="0.0784%" height="15" fill="rgb(229,200,27)" fg:x="157" fg:w="1"/><text x="12.5637%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.3922%" y="485" width="0.0784%" height="15" fill="rgb(217,118,10)" fg:x="158" fg:w="1"/><text x="12.6422%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="12.4706%" y="453" width="0.0784%" height="15" fill="rgb(206,22,3)" fg:x="159" fg:w="1"/><text x="12.7206%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.4706%" y="437" width="0.0784%" height="15" fill="rgb(232,163,46)" fg:x="159" fg:w="1"/><text x="12.7206%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="12.5490%" y="389" width="0.0784%" height="15" fill="rgb(206,95,13)" fg:x="160" fg:w="1"/><text x="12.7990%" y="399.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="12.5490%" y="373" width="0.0784%" height="15" fill="rgb(253,154,18)" fg:x="160" fg:w="1"/><text x="12.7990%" y="383.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.31%)</title><rect x="12.3922%" y="533" width="0.3137%" height="15" fill="rgb(219,32,23)" fg:x="158" fg:w="4"/><text x="12.6422%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.31%)</title><rect x="12.3922%" y="517" width="0.3137%" height="15" fill="rgb(230,191,45)" fg:x="158" fg:w="4"/><text x="12.6422%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.31%)</title><rect x="12.3922%" y="501" width="0.3137%" height="15" fill="rgb(229,64,36)" fg:x="158" fg:w="4"/><text x="12.6422%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="12.4706%" y="485" width="0.2353%" height="15" fill="rgb(205,129,25)" fg:x="159" fg:w="3"/><text x="12.7206%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="12.4706%" y="469" width="0.2353%" height="15" fill="rgb(254,112,7)" fg:x="159" fg:w="3"/><text x="12.7206%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="12.5490%" y="453" width="0.1569%" height="15" fill="rgb(226,53,48)" fg:x="160" fg:w="2"/><text x="12.7990%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="12.5490%" y="437" width="0.1569%" height="15" fill="rgb(214,153,38)" fg:x="160" fg:w="2"/><text x="12.7990%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="12.5490%" y="421" width="0.1569%" height="15" fill="rgb(243,101,7)" fg:x="160" fg:w="2"/><text x="12.7990%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="12.5490%" y="405" width="0.1569%" height="15" fill="rgb(240,140,22)" fg:x="160" fg:w="2"/><text x="12.7990%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.6275%" y="389" width="0.0784%" height="15" fill="rgb(235,114,2)" fg:x="161" fg:w="1"/><text x="12.8775%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.6275%" y="373" width="0.0784%" height="15" fill="rgb(242,59,12)" fg:x="161" fg:w="1"/><text x="12.8775%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.6275%" y="357" width="0.0784%" height="15" fill="rgb(252,134,9)" fg:x="161" fg:w="1"/><text x="12.8775%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.6275%" y="341" width="0.0784%" height="15" fill="rgb(236,4,44)" fg:x="161" fg:w="1"/><text x="12.8775%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.6275%" y="325" width="0.0784%" height="15" fill="rgb(254,172,41)" fg:x="161" fg:w="1"/><text x="12.8775%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (5 samples, 0.39%)</title><rect x="12.3922%" y="549" width="0.3922%" height="15" fill="rgb(244,63,20)" fg:x="158" fg:w="5"/><text x="12.6422%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.7059%" y="533" width="0.0784%" height="15" fill="rgb(250,73,31)" fg:x="162" fg:w="1"/><text x="12.9559%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.7059%" y="517" width="0.0784%" height="15" fill="rgb(241,38,36)" fg:x="162" fg:w="1"/><text x="12.9559%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.7059%" y="501" width="0.0784%" height="15" fill="rgb(245,211,2)" fg:x="162" fg:w="1"/><text x="12.9559%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.7059%" y="485" width="0.0784%" height="15" fill="rgb(206,120,28)" fg:x="162" fg:w="1"/><text x="12.9559%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (8 samples, 0.63%)</title><rect x="12.2353%" y="597" width="0.6275%" height="15" fill="rgb(211,59,34)" fg:x="156" fg:w="8"/><text x="12.4853%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (7 samples, 0.55%)</title><rect x="12.3137%" y="581" width="0.5490%" height="15" fill="rgb(233,168,5)" fg:x="157" fg:w="7"/><text x="12.5637%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.55%)</title><rect x="12.3137%" y="565" width="0.5490%" height="15" fill="rgb(234,33,13)" fg:x="157" fg:w="7"/><text x="12.5637%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="12.7843%" y="549" width="0.0784%" height="15" fill="rgb(231,150,26)" fg:x="163" fg:w="1"/><text x="13.0343%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="12.7843%" y="533" width="0.0784%" height="15" fill="rgb(217,191,4)" fg:x="163" fg:w="1"/><text x="13.0343%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="12.7843%" y="517" width="0.0784%" height="15" fill="rgb(246,198,38)" fg:x="163" fg:w="1"/><text x="13.0343%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.7843%" y="501" width="0.0784%" height="15" fill="rgb(245,64,37)" fg:x="163" fg:w="1"/><text x="13.0343%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.7843%" y="485" width="0.0784%" height="15" fill="rgb(250,30,36)" fg:x="163" fg:w="1"/><text x="13.0343%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.7843%" y="469" width="0.0784%" height="15" fill="rgb(217,86,53)" fg:x="163" fg:w="1"/><text x="13.0343%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.7843%" y="453" width="0.0784%" height="15" fill="rgb(228,157,16)" fg:x="163" fg:w="1"/><text x="13.0343%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="12.7843%" y="437" width="0.0784%" height="15" fill="rgb(217,59,31)" fg:x="163" fg:w="1"/><text x="13.0343%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.7843%" y="421" width="0.0784%" height="15" fill="rgb(237,138,41)" fg:x="163" fg:w="1"/><text x="13.0343%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.7843%" y="405" width="0.0784%" height="15" fill="rgb(227,91,49)" fg:x="163" fg:w="1"/><text x="13.0343%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.7843%" y="389" width="0.0784%" height="15" fill="rgb(247,21,44)" fg:x="163" fg:w="1"/><text x="13.0343%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.7843%" y="373" width="0.0784%" height="15" fill="rgb(219,210,51)" fg:x="163" fg:w="1"/><text x="13.0343%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.7843%" y="357" width="0.0784%" height="15" fill="rgb(209,140,6)" fg:x="163" fg:w="1"/><text x="13.0343%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.7843%" y="341" width="0.0784%" height="15" fill="rgb(221,188,24)" fg:x="163" fg:w="1"/><text x="13.0343%" y="351.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (9 samples, 0.71%)</title><rect x="12.2353%" y="661" width="0.7059%" height="15" fill="rgb(232,154,20)" fg:x="156" fg:w="9"/><text x="12.4853%" y="671.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (9 samples, 0.71%)</title><rect x="12.2353%" y="645" width="0.7059%" height="15" fill="rgb(244,137,50)" fg:x="156" fg:w="9"/><text x="12.4853%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::scope (9 samples, 0.71%)</title><rect x="12.2353%" y="629" width="0.7059%" height="15" fill="rgb(225,185,43)" fg:x="156" fg:w="9"/><text x="12.4853%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (9 samples, 0.71%)</title><rect x="12.2353%" y="613" width="0.7059%" height="15" fill="rgb(213,205,38)" fg:x="156" fg:w="9"/><text x="12.4853%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.8627%" y="597" width="0.0784%" height="15" fill="rgb(236,73,12)" fg:x="164" fg:w="1"/><text x="13.1127%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.8627%" y="581" width="0.0784%" height="15" fill="rgb(235,219,13)" fg:x="164" fg:w="1"/><text x="13.1127%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.8627%" y="565" width="0.0784%" height="15" fill="rgb(218,59,36)" fg:x="164" fg:w="1"/><text x="13.1127%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.8627%" y="549" width="0.0784%" height="15" fill="rgb(205,110,39)" fg:x="164" fg:w="1"/><text x="13.1127%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="12.9412%" y="469" width="0.0784%" height="15" fill="rgb(218,206,42)" fg:x="165" fg:w="1"/><text x="13.1912%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.0196%" y="437" width="0.0784%" height="15" fill="rgb(248,125,24)" fg:x="166" fg:w="1"/><text x="13.2696%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.0196%" y="421" width="0.0784%" height="15" fill="rgb(242,28,27)" fg:x="166" fg:w="1"/><text x="13.2696%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.0196%" y="405" width="0.0784%" height="15" fill="rgb(216,228,15)" fg:x="166" fg:w="1"/><text x="13.2696%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.0196%" y="389" width="0.0784%" height="15" fill="rgb(235,116,46)" fg:x="166" fg:w="1"/><text x="13.2696%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.1765%" y="341" width="0.0784%" height="15" fill="rgb(224,18,32)" fg:x="168" fg:w="1"/><text x="13.4265%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.1765%" y="325" width="0.0784%" height="15" fill="rgb(252,5,12)" fg:x="168" fg:w="1"/><text x="13.4265%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="13.1765%" y="309" width="0.0784%" height="15" fill="rgb(251,36,5)" fg:x="168" fg:w="1"/><text x="13.4265%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.2549%" y="341" width="0.0784%" height="15" fill="rgb(217,53,14)" fg:x="169" fg:w="1"/><text x="13.5049%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.3333%" y="309" width="0.0784%" height="15" fill="rgb(215,86,45)" fg:x="170" fg:w="1"/><text x="13.5833%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (7 samples, 0.55%)</title><rect x="12.9412%" y="485" width="0.5490%" height="15" fill="rgb(242,169,11)" fg:x="165" fg:w="7"/><text x="13.1912%" y="495.50"></text></g><g><title>kernel::model::props::load_props (6 samples, 0.47%)</title><rect x="13.0196%" y="469" width="0.4706%" height="15" fill="rgb(211,213,45)" fg:x="166" fg:w="6"/><text x="13.2696%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (6 samples, 0.47%)</title><rect x="13.0196%" y="453" width="0.4706%" height="15" fill="rgb(205,88,11)" fg:x="166" fg:w="6"/><text x="13.2696%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.39%)</title><rect x="13.0980%" y="437" width="0.3922%" height="15" fill="rgb(252,69,26)" fg:x="167" fg:w="5"/><text x="13.3480%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.39%)</title><rect x="13.0980%" y="421" width="0.3922%" height="15" fill="rgb(246,123,37)" fg:x="167" fg:w="5"/><text x="13.3480%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.39%)</title><rect x="13.0980%" y="405" width="0.3922%" height="15" fill="rgb(212,205,5)" fg:x="167" fg:w="5"/><text x="13.3480%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.39%)</title><rect x="13.0980%" y="389" width="0.3922%" height="15" fill="rgb(253,148,0)" fg:x="167" fg:w="5"/><text x="13.3480%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.39%)</title><rect x="13.0980%" y="373" width="0.3922%" height="15" fill="rgb(239,22,4)" fg:x="167" fg:w="5"/><text x="13.3480%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.39%)</title><rect x="13.0980%" y="357" width="0.3922%" height="15" fill="rgb(226,26,53)" fg:x="167" fg:w="5"/><text x="13.3480%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="13.3333%" y="341" width="0.1569%" height="15" fill="rgb(225,229,45)" fg:x="170" fg:w="2"/><text x="13.5833%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="13.3333%" y="325" width="0.1569%" height="15" fill="rgb(220,60,37)" fg:x="170" fg:w="2"/><text x="13.5833%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.4118%" y="309" width="0.0784%" height="15" fill="rgb(217,180,35)" fg:x="171" fg:w="1"/><text x="13.6618%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.4118%" y="293" width="0.0784%" height="15" fill="rgb(229,7,53)" fg:x="171" fg:w="1"/><text x="13.6618%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.4118%" y="277" width="0.0784%" height="15" fill="rgb(254,137,3)" fg:x="171" fg:w="1"/><text x="13.6618%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.6471%" y="357" width="0.0784%" height="15" fill="rgb(215,140,41)" fg:x="174" fg:w="1"/><text x="13.8971%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.6471%" y="373" width="0.1569%" height="15" fill="rgb(250,80,15)" fg:x="174" fg:w="2"/><text x="13.8971%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.7255%" y="357" width="0.0784%" height="15" fill="rgb(252,191,6)" fg:x="175" fg:w="1"/><text x="13.9755%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.39%)</title><rect x="13.4902%" y="437" width="0.3922%" height="15" fill="rgb(246,217,18)" fg:x="172" fg:w="5"/><text x="13.7402%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.39%)</title><rect x="13.4902%" y="421" width="0.3922%" height="15" fill="rgb(223,93,7)" fg:x="172" fg:w="5"/><text x="13.7402%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.39%)</title><rect x="13.4902%" y="405" width="0.3922%" height="15" fill="rgb(225,55,52)" fg:x="172" fg:w="5"/><text x="13.7402%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.31%)</title><rect x="13.5686%" y="389" width="0.3137%" height="15" fill="rgb(240,31,24)" fg:x="173" fg:w="4"/><text x="13.8186%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.8039%" y="373" width="0.0784%" height="15" fill="rgb(205,56,52)" fg:x="176" fg:w="1"/><text x="14.0539%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="13.9608%" y="373" width="0.1569%" height="15" fill="rgb(246,146,12)" fg:x="178" fg:w="2"/><text x="14.2108%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="13.9608%" y="357" width="0.1569%" height="15" fill="rgb(239,84,36)" fg:x="178" fg:w="2"/><text x="14.2108%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="13.9608%" y="341" width="0.1569%" height="15" fill="rgb(207,41,40)" fg:x="178" fg:w="2"/><text x="14.2108%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="13.9608%" y="325" width="0.1569%" height="15" fill="rgb(241,179,25)" fg:x="178" fg:w="2"/><text x="14.2108%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="13.9608%" y="309" width="0.1569%" height="15" fill="rgb(210,0,34)" fg:x="178" fg:w="2"/><text x="14.2108%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="13.9608%" y="293" width="0.1569%" height="15" fill="rgb(225,217,29)" fg:x="178" fg:w="2"/><text x="14.2108%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.0392%" y="277" width="0.0784%" height="15" fill="rgb(216,191,38)" fg:x="179" fg:w="1"/><text x="14.2892%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (9 samples, 0.71%)</title><rect x="13.4902%" y="485" width="0.7059%" height="15" fill="rgb(232,140,52)" fg:x="172" fg:w="9"/><text x="13.7402%" y="495.50"></text></g><g><title>kernel::model::props::load_props (9 samples, 0.71%)</title><rect x="13.4902%" y="469" width="0.7059%" height="15" fill="rgb(223,158,51)" fg:x="172" fg:w="9"/><text x="13.7402%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (9 samples, 0.71%)</title><rect x="13.4902%" y="453" width="0.7059%" height="15" fill="rgb(235,29,51)" fg:x="172" fg:w="9"/><text x="13.7402%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.31%)</title><rect x="13.8824%" y="437" width="0.3137%" height="15" fill="rgb(215,181,18)" fg:x="177" fg:w="4"/><text x="14.1324%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.31%)</title><rect x="13.8824%" y="421" width="0.3137%" height="15" fill="rgb(227,125,34)" fg:x="177" fg:w="4"/><text x="14.1324%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.31%)</title><rect x="13.8824%" y="405" width="0.3137%" height="15" fill="rgb(230,197,49)" fg:x="177" fg:w="4"/><text x="14.1324%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.31%)</title><rect x="13.8824%" y="389" width="0.3137%" height="15" fill="rgb(239,141,16)" fg:x="177" fg:w="4"/><text x="14.1324%" y="399.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="14.1176%" y="373" width="0.0784%" height="15" fill="rgb(225,105,43)" fg:x="180" fg:w="1"/><text x="14.3676%" y="383.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="14.1961%" y="485" width="0.0784%" height="15" fill="rgb(214,131,14)" fg:x="181" fg:w="1"/><text x="14.4461%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="14.1961%" y="469" width="0.0784%" height="15" fill="rgb(229,177,11)" fg:x="181" fg:w="1"/><text x="14.4461%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.2745%" y="437" width="0.0784%" height="15" fill="rgb(231,180,14)" fg:x="182" fg:w="1"/><text x="14.5245%" y="447.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="14.3529%" y="437" width="0.0784%" height="15" fill="rgb(232,88,2)" fg:x="183" fg:w="1"/><text x="14.6029%" y="447.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="14.3529%" y="421" width="0.0784%" height="15" fill="rgb(205,220,8)" fg:x="183" fg:w="1"/><text x="14.6029%" y="431.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="14.3529%" y="405" width="0.0784%" height="15" fill="rgb(225,23,53)" fg:x="183" fg:w="1"/><text x="14.6029%" y="415.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="14.3529%" y="389" width="0.0784%" height="15" fill="rgb(213,62,29)" fg:x="183" fg:w="1"/><text x="14.6029%" y="399.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (2 samples, 0.16%)</title><rect x="14.5098%" y="421" width="0.1569%" height="15" fill="rgb(227,75,7)" fg:x="185" fg:w="2"/><text x="14.7598%" y="431.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (1 samples, 0.08%)</title><rect x="14.5882%" y="405" width="0.0784%" height="15" fill="rgb(207,105,14)" fg:x="186" fg:w="1"/><text x="14.8382%" y="415.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_uppercase (1 samples, 0.08%)</title><rect x="14.5882%" y="389" width="0.0784%" height="15" fill="rgb(245,62,29)" fg:x="186" fg:w="1"/><text x="14.8382%" y="399.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_lowercase (1 samples, 0.08%)</title><rect x="14.5882%" y="373" width="0.0784%" height="15" fill="rgb(236,202,4)" fg:x="186" fg:w="1"/><text x="14.8382%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="15.0588%" y="309" width="0.0784%" height="15" fill="rgb(250,67,1)" fg:x="192" fg:w="1"/><text x="15.3088%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="15.0588%" y="293" width="0.0784%" height="15" fill="rgb(253,115,44)" fg:x="192" fg:w="1"/><text x="15.3088%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="15.0588%" y="277" width="0.0784%" height="15" fill="rgb(251,139,18)" fg:x="192" fg:w="1"/><text x="15.3088%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (4 samples, 0.31%)</title><rect x="14.9020%" y="325" width="0.3137%" height="15" fill="rgb(218,22,32)" fg:x="190" fg:w="4"/><text x="15.1520%" y="335.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="15.1373%" y="309" width="0.0784%" height="15" fill="rgb(243,53,5)" fg:x="193" fg:w="1"/><text x="15.3873%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (8 samples, 0.63%)</title><rect x="14.8235%" y="341" width="0.6275%" height="15" fill="rgb(227,56,16)" fg:x="189" fg:w="8"/><text x="15.0735%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (3 samples, 0.24%)</title><rect x="15.2157%" y="325" width="0.2353%" height="15" fill="rgb(245,53,0)" fg:x="194" fg:w="3"/><text x="15.4657%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.3725%" y="309" width="0.0784%" height="15" fill="rgb(216,170,35)" fg:x="196" fg:w="1"/><text x="15.6225%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="15.4510%" y="325" width="0.0784%" height="15" fill="rgb(211,200,8)" fg:x="197" fg:w="1"/><text x="15.7010%" y="335.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="15.4510%" y="309" width="0.0784%" height="15" fill="rgb(228,204,44)" fg:x="197" fg:w="1"/><text x="15.7010%" y="319.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderMatches::into_nfa (1 samples, 0.08%)</title><rect x="15.4510%" y="293" width="0.0784%" height="15" fill="rgb(214,121,17)" fg:x="197" fg:w="1"/><text x="15.7010%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.78%)</title><rect x="14.8235%" y="405" width="0.7843%" height="15" fill="rgb(233,64,38)" fg:x="189" fg:w="10"/><text x="15.0735%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.78%)</title><rect x="14.8235%" y="389" width="0.7843%" height="15" fill="rgb(253,54,19)" fg:x="189" fg:w="10"/><text x="15.0735%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (10 samples, 0.78%)</title><rect x="14.8235%" y="373" width="0.7843%" height="15" fill="rgb(253,94,18)" fg:x="189" fg:w="10"/><text x="15.0735%" y="383.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (10 samples, 0.78%)</title><rect x="14.8235%" y="357" width="0.7843%" height="15" fill="rgb(227,57,52)" fg:x="189" fg:w="10"/><text x="15.0735%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (2 samples, 0.16%)</title><rect x="15.4510%" y="341" width="0.1569%" height="15" fill="rgb(230,228,50)" fg:x="197" fg:w="2"/><text x="15.7010%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="15.5294%" y="325" width="0.0784%" height="15" fill="rgb(217,205,27)" fg:x="198" fg:w="1"/><text x="15.7794%" y="335.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="15.5294%" y="309" width="0.0784%" height="15" fill="rgb(252,71,50)" fg:x="198" fg:w="1"/><text x="15.7794%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="15.6078%" y="357" width="0.0784%" height="15" fill="rgb(209,86,4)" fg:x="199" fg:w="1"/><text x="15.8578%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="15.6078%" y="341" width="0.0784%" height="15" fill="rgb(229,94,0)" fg:x="199" fg:w="1"/><text x="15.8578%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="15.6078%" y="373" width="0.1569%" height="15" fill="rgb(252,223,21)" fg:x="199" fg:w="2"/><text x="15.8578%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="15.6863%" y="357" width="0.0784%" height="15" fill="rgb(230,210,4)" fg:x="200" fg:w="1"/><text x="15.9363%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="15.6863%" y="341" width="0.0784%" height="15" fill="rgb(240,149,38)" fg:x="200" fg:w="1"/><text x="15.9363%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="15.6863%" y="325" width="0.0784%" height="15" fill="rgb(254,105,20)" fg:x="200" fg:w="1"/><text x="15.9363%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="15.7647%" y="357" width="0.1569%" height="15" fill="rgb(253,87,46)" fg:x="201" fg:w="2"/><text x="16.0147%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.8431%" y="341" width="0.0784%" height="15" fill="rgb(253,116,33)" fg:x="202" fg:w="1"/><text x="16.0931%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="16.0000%" y="341" width="0.0784%" height="15" fill="rgb(229,198,5)" fg:x="204" fg:w="1"/><text x="16.2500%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="16.0000%" y="325" width="0.0784%" height="15" fill="rgb(242,38,37)" fg:x="204" fg:w="1"/><text x="16.2500%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (7 samples, 0.55%)</title><rect x="15.6078%" y="405" width="0.5490%" height="15" fill="rgb(242,69,53)" fg:x="199" fg:w="7"/><text x="15.8578%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (7 samples, 0.55%)</title><rect x="15.6078%" y="389" width="0.5490%" height="15" fill="rgb(249,80,16)" fg:x="199" fg:w="7"/><text x="15.8578%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (5 samples, 0.39%)</title><rect x="15.7647%" y="373" width="0.3922%" height="15" fill="rgb(206,128,11)" fg:x="201" fg:w="5"/><text x="16.0147%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.24%)</title><rect x="15.9216%" y="357" width="0.2353%" height="15" fill="rgb(212,35,20)" fg:x="203" fg:w="3"/><text x="16.1716%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.0784%" y="341" width="0.0784%" height="15" fill="rgb(236,79,13)" fg:x="205" fg:w="1"/><text x="16.3284%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="16.1569%" y="389" width="0.0784%" height="15" fill="rgb(233,123,3)" fg:x="206" fg:w="1"/><text x="16.4069%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="16.1569%" y="373" width="0.0784%" height="15" fill="rgb(214,93,52)" fg:x="206" fg:w="1"/><text x="16.4069%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.3922%" y="357" width="0.0784%" height="15" fill="rgb(251,37,40)" fg:x="209" fg:w="1"/><text x="16.6422%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="16.4706%" y="357" width="0.0784%" height="15" fill="rgb(227,80,54)" fg:x="210" fg:w="1"/><text x="16.7206%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="16.4706%" y="341" width="0.0784%" height="15" fill="rgb(254,48,11)" fg:x="210" fg:w="1"/><text x="16.7206%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="16.4706%" y="325" width="0.0784%" height="15" fill="rgb(235,193,26)" fg:x="210" fg:w="1"/><text x="16.7206%" y="335.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="16.5490%" y="357" width="0.0784%" height="15" fill="rgb(229,99,21)" fg:x="211" fg:w="1"/><text x="16.7990%" y="367.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="16.5490%" y="341" width="0.0784%" height="15" fill="rgb(211,140,41)" fg:x="211" fg:w="1"/><text x="16.7990%" y="351.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="16.5490%" y="325" width="0.0784%" height="15" fill="rgb(240,227,30)" fg:x="211" fg:w="1"/><text x="16.7990%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.8627%" y="341" width="0.0784%" height="15" fill="rgb(215,224,45)" fg:x="215" fg:w="1"/><text x="17.1127%" y="351.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="16.9412%" y="325" width="0.2353%" height="15" fill="rgb(206,123,31)" fg:x="216" fg:w="3"/><text x="17.1912%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (23 samples, 1.80%)</title><rect x="16.9412%" y="341" width="1.8039%" height="15" fill="rgb(210,138,16)" fg:x="216" fg:w="23"/><text x="17.1912%" y="351.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (20 samples, 1.57%)</title><rect x="17.1765%" y="325" width="1.5686%" height="15" fill="rgb(228,57,28)" fg:x="219" fg:w="20"/><text x="17.4265%" y="335.50"></text></g><g><title>__libc_free (4 samples, 0.31%)</title><rect x="18.4314%" y="309" width="0.3137%" height="15" fill="rgb(242,170,10)" fg:x="235" fg:w="4"/><text x="18.6814%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.9804%" y="293" width="0.0784%" height="15" fill="rgb(228,214,39)" fg:x="242" fg:w="1"/><text x="19.2304%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.39%)</title><rect x="18.7451%" y="341" width="0.3922%" height="15" fill="rgb(218,179,33)" fg:x="239" fg:w="5"/><text x="18.9951%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.39%)</title><rect x="18.7451%" y="325" width="0.3922%" height="15" fill="rgb(235,193,39)" fg:x="239" fg:w="5"/><text x="18.9951%" y="335.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (2 samples, 0.16%)</title><rect x="18.9804%" y="309" width="0.1569%" height="15" fill="rgb(219,221,36)" fg:x="242" fg:w="2"/><text x="19.2304%" y="319.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="19.0588%" y="293" width="0.0784%" height="15" fill="rgb(248,218,19)" fg:x="243" fg:w="1"/><text x="19.3088%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="19.0588%" y="277" width="0.0784%" height="15" fill="rgb(205,50,9)" fg:x="243" fg:w="1"/><text x="19.3088%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="19.1373%" y="293" width="0.0784%" height="15" fill="rgb(238,81,28)" fg:x="244" fg:w="1"/><text x="19.3873%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="19.1373%" y="277" width="0.0784%" height="15" fill="rgb(235,110,19)" fg:x="244" fg:w="1"/><text x="19.3873%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="19.1373%" y="261" width="0.0784%" height="15" fill="rgb(214,7,14)" fg:x="244" fg:w="1"/><text x="19.3873%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.1373%" y="245" width="0.0784%" height="15" fill="rgb(211,77,3)" fg:x="244" fg:w="1"/><text x="19.3873%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="19.6078%" y="277" width="0.0784%" height="15" fill="rgb(229,5,9)" fg:x="250" fg:w="1"/><text x="19.8578%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.24%)</title><rect x="19.6863%" y="277" width="0.2353%" height="15" fill="rgb(225,90,11)" fg:x="251" fg:w="3"/><text x="19.9363%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="19.7647%" y="261" width="0.1569%" height="15" fill="rgb(242,56,8)" fg:x="252" fg:w="2"/><text x="20.0147%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="19.7647%" y="245" width="0.1569%" height="15" fill="rgb(249,212,39)" fg:x="252" fg:w="2"/><text x="20.0147%" y="255.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="19.7647%" y="229" width="0.1569%" height="15" fill="rgb(236,90,9)" fg:x="252" fg:w="2"/><text x="20.0147%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="20.0784%" y="245" width="0.0784%" height="15" fill="rgb(206,88,35)" fg:x="256" fg:w="1"/><text x="20.3284%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="20.0784%" y="229" width="0.0784%" height="15" fill="rgb(205,126,30)" fg:x="256" fg:w="1"/><text x="20.3284%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.0784%" y="213" width="0.0784%" height="15" fill="rgb(230,176,12)" fg:x="256" fg:w="1"/><text x="20.3284%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (5 samples, 0.39%)</title><rect x="19.9216%" y="277" width="0.3922%" height="15" fill="rgb(243,19,9)" fg:x="254" fg:w="5"/><text x="20.1716%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (5 samples, 0.39%)</title><rect x="19.9216%" y="261" width="0.3922%" height="15" fill="rgb(245,171,17)" fg:x="254" fg:w="5"/><text x="20.1716%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="20.1569%" y="245" width="0.1569%" height="15" fill="rgb(227,52,21)" fg:x="257" fg:w="2"/><text x="20.4069%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="20.1569%" y="229" width="0.1569%" height="15" fill="rgb(238,69,14)" fg:x="257" fg:w="2"/><text x="20.4069%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="20.3137%" y="277" width="0.0784%" height="15" fill="rgb(241,156,39)" fg:x="259" fg:w="1"/><text x="20.5637%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="20.3137%" y="261" width="0.0784%" height="15" fill="rgb(212,227,28)" fg:x="259" fg:w="1"/><text x="20.5637%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="20.3137%" y="245" width="0.0784%" height="15" fill="rgb(209,118,27)" fg:x="259" fg:w="1"/><text x="20.5637%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="20.3922%" y="261" width="0.0784%" height="15" fill="rgb(226,102,5)" fg:x="260" fg:w="1"/><text x="20.6422%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="20.3922%" y="245" width="0.0784%" height="15" fill="rgb(223,34,3)" fg:x="260" fg:w="1"/><text x="20.6422%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.3922%" y="229" width="0.0784%" height="15" fill="rgb(221,81,38)" fg:x="260" fg:w="1"/><text x="20.6422%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="20.4706%" y="261" width="0.0784%" height="15" fill="rgb(236,219,28)" fg:x="261" fg:w="1"/><text x="20.7206%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (100 samples, 7.84%)</title><rect x="20.3922%" y="277" width="7.8431%" height="15" fill="rgb(213,200,14)" fg:x="260" fg:w="100"/><text x="20.6422%" y="287.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (98 samples, 7.69%)</title><rect x="20.5490%" y="261" width="7.6863%" height="15" fill="rgb(240,33,19)" fg:x="262" fg:w="98"/><text x="20.7990%" y="271.50">regex_autom..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (98 samples, 7.69%)</title><rect x="20.5490%" y="245" width="7.6863%" height="15" fill="rgb(233,113,27)" fg:x="262" fg:w="98"/><text x="20.7990%" y="255.50">alloc::vec:..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (7 samples, 0.55%)</title><rect x="28.2353%" y="277" width="0.5490%" height="15" fill="rgb(220,221,18)" fg:x="360" fg:w="7"/><text x="28.4853%" y="287.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="28.5490%" y="261" width="0.2353%" height="15" fill="rgb(238,92,8)" fg:x="364" fg:w="3"/><text x="28.7990%" y="271.50"></text></g><g><title>regex_syntax::hir::ClassUnicode::is_ascii (1 samples, 0.08%)</title><rect x="28.7843%" y="277" width="0.0784%" height="15" fill="rgb(222,164,16)" fg:x="367" fg:w="1"/><text x="29.0343%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (125 samples, 9.80%)</title><rect x="19.1373%" y="325" width="9.8039%" height="15" fill="rgb(241,119,3)" fg:x="244" fg:w="125"/><text x="19.3873%" y="335.50">&lt;core::iter::a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (125 samples, 9.80%)</title><rect x="19.1373%" y="309" width="9.8039%" height="15" fill="rgb(241,44,8)" fg:x="244" fg:w="125"/><text x="19.3873%" y="319.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (124 samples, 9.73%)</title><rect x="19.2157%" y="293" width="9.7255%" height="15" fill="rgb(230,36,40)" fg:x="245" fg:w="124"/><text x="19.4657%" y="303.50">regex_automata..</text></g><g><title>regex_syntax::hir::ClassUnicodeRange::start (1 samples, 0.08%)</title><rect x="28.8627%" y="277" width="0.0784%" height="15" fill="rgb(243,16,36)" fg:x="368" fg:w="1"/><text x="29.1127%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="29.4118%" y="309" width="0.1569%" height="15" fill="rgb(231,4,26)" fg:x="375" fg:w="2"/><text x="29.6618%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="29.5686%" y="309" width="0.0784%" height="15" fill="rgb(240,9,31)" fg:x="377" fg:w="1"/><text x="29.8186%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.5686%" y="293" width="0.0784%" height="15" fill="rgb(207,173,15)" fg:x="377" fg:w="1"/><text x="29.8186%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.5686%" y="277" width="0.0784%" height="15" fill="rgb(224,192,53)" fg:x="377" fg:w="1"/><text x="29.8186%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="29.6471%" y="309" width="0.1569%" height="15" fill="rgb(223,67,28)" fg:x="378" fg:w="2"/><text x="29.8971%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="29.7255%" y="293" width="0.0784%" height="15" fill="rgb(211,20,47)" fg:x="379" fg:w="1"/><text x="29.9755%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.7255%" y="277" width="0.0784%" height="15" fill="rgb(240,228,2)" fg:x="379" fg:w="1"/><text x="29.9755%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="29.7255%" y="261" width="0.0784%" height="15" fill="rgb(248,151,12)" fg:x="379" fg:w="1"/><text x="29.9755%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (11 samples, 0.86%)</title><rect x="29.8039%" y="309" width="0.8627%" height="15" fill="rgb(244,8,39)" fg:x="380" fg:w="11"/><text x="30.0539%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="30.5098%" y="293" width="0.1569%" height="15" fill="rgb(222,26,8)" fg:x="389" fg:w="2"/><text x="30.7598%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="30.5098%" y="277" width="0.1569%" height="15" fill="rgb(213,106,44)" fg:x="389" fg:w="2"/><text x="30.7598%" y="287.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="30.5098%" y="261" width="0.1569%" height="15" fill="rgb(214,129,20)" fg:x="389" fg:w="2"/><text x="30.7598%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (24 samples, 1.88%)</title><rect x="28.9412%" y="325" width="1.8824%" height="15" fill="rgb(212,32,13)" fg:x="369" fg:w="24"/><text x="29.1912%" y="335.50">r..</text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="30.6667%" y="309" width="0.1569%" height="15" fill="rgb(208,168,33)" fg:x="391" fg:w="2"/><text x="30.9167%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="30.8235%" y="309" width="0.0784%" height="15" fill="rgb(231,207,8)" fg:x="393" fg:w="1"/><text x="31.0735%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (2 samples, 0.16%)</title><rect x="30.8235%" y="325" width="0.1569%" height="15" fill="rgb(235,219,23)" fg:x="393" fg:w="2"/><text x="31.0735%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="30.9020%" y="309" width="0.0784%" height="15" fill="rgb(226,216,26)" fg:x="394" fg:w="1"/><text x="31.1520%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="30.9020%" y="293" width="0.0784%" height="15" fill="rgb(239,137,16)" fg:x="394" fg:w="1"/><text x="31.1520%" y="303.50"></text></g><g><title>regex_syntax::hir::ClassBytes::empty (1 samples, 0.08%)</title><rect x="31.1373%" y="309" width="0.0784%" height="15" fill="rgb(207,12,36)" fg:x="397" fg:w="1"/><text x="31.3873%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,alloc::vec::into_iter::IntoIter&lt;T&gt;&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="31.1373%" y="293" width="0.0784%" height="15" fill="rgb(210,214,24)" fg:x="397" fg:w="1"/><text x="31.3873%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (155 samples, 12.16%)</title><rect x="19.1373%" y="341" width="12.1569%" height="15" fill="rgb(206,56,30)" fg:x="244" fg:w="155"/><text x="19.3873%" y="351.50">regex_automata::nf..</text></g><g><title>regex_syntax::hir::Hir::dot (4 samples, 0.31%)</title><rect x="30.9804%" y="325" width="0.3137%" height="15" fill="rgb(228,143,26)" fg:x="395" fg:w="4"/><text x="31.2304%" y="335.50"></text></g><g><title>regex_syntax::hir::ClassBytes::push (1 samples, 0.08%)</title><rect x="31.2157%" y="309" width="0.0784%" height="15" fill="rgb(216,218,46)" fg:x="398" fg:w="1"/><text x="31.4657%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="31.2157%" y="293" width="0.0784%" height="15" fill="rgb(206,6,19)" fg:x="398" fg:w="1"/><text x="31.4657%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.2157%" y="277" width="0.0784%" height="15" fill="rgb(239,177,51)" fg:x="398" fg:w="1"/><text x="31.4657%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="31.2941%" y="341" width="0.0784%" height="15" fill="rgb(216,55,25)" fg:x="399" fg:w="1"/><text x="31.5441%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="31.2941%" y="325" width="0.0784%" height="15" fill="rgb(231,163,29)" fg:x="399" fg:w="1"/><text x="31.5441%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="31.2941%" y="309" width="0.0784%" height="15" fill="rgb(232,149,50)" fg:x="399" fg:w="1"/><text x="31.5441%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="31.2941%" y="293" width="0.0784%" height="15" fill="rgb(223,142,48)" fg:x="399" fg:w="1"/><text x="31.5441%" y="303.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.08%)</title><rect x="31.3725%" y="325" width="0.0784%" height="15" fill="rgb(245,83,23)" fg:x="400" fg:w="1"/><text x="31.6225%" y="335.50"></text></g><g><title>regex_automata::meta::strategy::new (190 samples, 14.90%)</title><rect x="16.6275%" y="357" width="14.9020%" height="15" fill="rgb(224,63,2)" fg:x="212" fg:w="190"/><text x="16.8775%" y="367.50">regex_automata::meta::s..</text></g><g><title>regex_automata::util::prefilter::suffixes (2 samples, 0.16%)</title><rect x="31.3725%" y="341" width="0.1569%" height="15" fill="rgb(218,65,53)" fg:x="400" fg:w="2"/><text x="31.6225%" y="351.50"></text></g><g><title>regex_syntax::hir::literal::Seq::optimize_by_preference (1 samples, 0.08%)</title><rect x="31.4510%" y="325" width="0.0784%" height="15" fill="rgb(221,84,29)" fg:x="401" fg:w="1"/><text x="31.7010%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="31.6078%" y="309" width="0.0784%" height="15" fill="rgb(234,0,32)" fg:x="403" fg:w="1"/><text x="31.8578%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="31.6078%" y="293" width="0.0784%" height="15" fill="rgb(206,20,16)" fg:x="403" fg:w="1"/><text x="31.8578%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="31.6078%" y="277" width="0.0784%" height="15" fill="rgb(244,172,18)" fg:x="403" fg:w="1"/><text x="31.8578%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="31.6078%" y="261" width="0.0784%" height="15" fill="rgb(254,133,1)" fg:x="403" fg:w="1"/><text x="31.8578%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="31.6863%" y="309" width="0.0784%" height="15" fill="rgb(222,206,41)" fg:x="404" fg:w="1"/><text x="31.9363%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.39%)</title><rect x="31.5294%" y="357" width="0.3922%" height="15" fill="rgb(212,3,42)" fg:x="402" fg:w="5"/><text x="31.7794%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.39%)</title><rect x="31.5294%" y="341" width="0.3922%" height="15" fill="rgb(241,11,4)" fg:x="402" fg:w="5"/><text x="31.7794%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.31%)</title><rect x="31.6078%" y="325" width="0.3137%" height="15" fill="rgb(205,19,26)" fg:x="403" fg:w="4"/><text x="31.8578%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="31.7647%" y="309" width="0.1569%" height="15" fill="rgb(210,179,32)" fg:x="405" fg:w="2"/><text x="32.0147%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="31.8431%" y="293" width="0.0784%" height="15" fill="rgb(227,116,49)" fg:x="406" fg:w="1"/><text x="32.0931%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.8431%" y="277" width="0.0784%" height="15" fill="rgb(211,146,6)" fg:x="406" fg:w="1"/><text x="32.0931%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.8431%" y="261" width="0.0784%" height="15" fill="rgb(219,44,39)" fg:x="406" fg:w="1"/><text x="32.0931%" y="271.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="31.9216%" y="309" width="0.1569%" height="15" fill="rgb(234,128,11)" fg:x="407" fg:w="2"/><text x="32.1716%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="31.9216%" y="325" width="0.2353%" height="15" fill="rgb(220,183,53)" fg:x="407" fg:w="3"/><text x="32.1716%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="32.0784%" y="309" width="0.0784%" height="15" fill="rgb(213,219,32)" fg:x="409" fg:w="1"/><text x="32.3284%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="32.1569%" y="325" width="0.0784%" height="15" fill="rgb(232,156,16)" fg:x="410" fg:w="1"/><text x="32.4069%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (204 samples, 16.00%)</title><rect x="16.3137%" y="373" width="16.0000%" height="15" fill="rgb(246,135,34)" fg:x="208" fg:w="204"/><text x="16.5637%" y="383.50">regex_automata::meta::reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.39%)</title><rect x="31.9216%" y="357" width="0.3922%" height="15" fill="rgb(241,99,0)" fg:x="407" fg:w="5"/><text x="32.1716%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.39%)</title><rect x="31.9216%" y="341" width="0.3922%" height="15" fill="rgb(222,103,45)" fg:x="407" fg:w="5"/><text x="32.1716%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="32.2353%" y="325" width="0.0784%" height="15" fill="rgb(212,57,4)" fg:x="411" fg:w="1"/><text x="32.4853%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,alloc::vec::into_iter::IntoIter&lt;T&gt;&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="32.2353%" y="309" width="0.0784%" height="15" fill="rgb(215,68,47)" fg:x="411" fg:w="1"/><text x="32.4853%" y="319.50"></text></g><g><title>regex::regex::string::Regex::new (207 samples, 16.24%)</title><rect x="16.1569%" y="405" width="16.2353%" height="15" fill="rgb(230,84,2)" fg:x="206" fg:w="207"/><text x="16.4069%" y="415.50">regex::regex::string::Reg..</text></g><g><title>regex::builders::Builder::build_one_string (206 samples, 16.16%)</title><rect x="16.2353%" y="389" width="16.1569%" height="15" fill="rgb(220,102,14)" fg:x="207" fg:w="206"/><text x="16.4853%" y="399.50">regex::builders::Builder:..</text></g><g><title>regex_automata::meta::regex::Builder::configure (1 samples, 0.08%)</title><rect x="32.3137%" y="373" width="0.0784%" height="15" fill="rgb(240,10,32)" fg:x="412" fg:w="1"/><text x="32.5637%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (10 samples, 0.78%)</title><rect x="32.3922%" y="357" width="0.7843%" height="15" fill="rgb(215,47,27)" fg:x="413" fg:w="10"/><text x="32.6422%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (9 samples, 0.71%)</title><rect x="32.4706%" y="341" width="0.7059%" height="15" fill="rgb(233,188,43)" fg:x="414" fg:w="9"/><text x="32.7206%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="33.0196%" y="325" width="0.1569%" height="15" fill="rgb(253,190,1)" fg:x="421" fg:w="2"/><text x="33.2696%" y="335.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (238 samples, 18.67%)</title><rect x="14.6667%" y="421" width="18.6667%" height="15" fill="rgb(206,114,52)" fg:x="187" fg:w="238"/><text x="14.9167%" y="431.50">indefinite::helper::Helper::g..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (12 samples, 0.94%)</title><rect x="32.3922%" y="405" width="0.9412%" height="15" fill="rgb(233,120,37)" fg:x="413" fg:w="12"/><text x="32.6422%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (12 samples, 0.94%)</title><rect x="32.3922%" y="389" width="0.9412%" height="15" fill="rgb(214,52,39)" fg:x="413" fg:w="12"/><text x="32.6422%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (12 samples, 0.94%)</title><rect x="32.3922%" y="373" width="0.9412%" height="15" fill="rgb(223,80,29)" fg:x="413" fg:w="12"/><text x="32.6422%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (2 samples, 0.16%)</title><rect x="33.1765%" y="357" width="0.1569%" height="15" fill="rgb(230,101,40)" fg:x="423" fg:w="2"/><text x="33.4265%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (2 samples, 0.16%)</title><rect x="33.1765%" y="341" width="0.1569%" height="15" fill="rgb(219,211,8)" fg:x="423" fg:w="2"/><text x="33.4265%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="33.2549%" y="325" width="0.0784%" height="15" fill="rgb(252,126,28)" fg:x="424" fg:w="1"/><text x="33.5049%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;str&gt;&gt; (1 samples, 0.08%)</title><rect x="33.3333%" y="405" width="0.0784%" height="15" fill="rgb(215,56,38)" fg:x="425" fg:w="1"/><text x="33.5833%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="33.4902%" y="341" width="0.0784%" height="15" fill="rgb(249,55,44)" fg:x="427" fg:w="1"/><text x="33.7402%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="33.4118%" y="357" width="0.2353%" height="15" fill="rgb(220,221,32)" fg:x="426" fg:w="3"/><text x="33.6618%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.5686%" y="341" width="0.0784%" height="15" fill="rgb(212,216,41)" fg:x="428" fg:w="1"/><text x="33.8186%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="33.6471%" y="357" width="0.0784%" height="15" fill="rgb(228,213,43)" fg:x="429" fg:w="1"/><text x="33.8971%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.6471%" y="341" width="0.0784%" height="15" fill="rgb(211,31,26)" fg:x="429" fg:w="1"/><text x="33.8971%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (5 samples, 0.39%)</title><rect x="33.4118%" y="373" width="0.3922%" height="15" fill="rgb(229,202,19)" fg:x="426" fg:w="5"/><text x="33.6618%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="33.7255%" y="357" width="0.0784%" height="15" fill="rgb(229,105,46)" fg:x="430" fg:w="1"/><text x="33.9755%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="33.7255%" y="341" width="0.0784%" height="15" fill="rgb(235,108,1)" fg:x="430" fg:w="1"/><text x="33.9755%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.7255%" y="325" width="0.0784%" height="15" fill="rgb(245,111,35)" fg:x="430" fg:w="1"/><text x="33.9755%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="33.8039%" y="357" width="0.0784%" height="15" fill="rgb(219,185,31)" fg:x="431" fg:w="1"/><text x="34.0539%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.8039%" y="341" width="0.0784%" height="15" fill="rgb(214,4,43)" fg:x="431" fg:w="1"/><text x="34.0539%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (8 samples, 0.63%)</title><rect x="33.4118%" y="405" width="0.6275%" height="15" fill="rgb(235,227,40)" fg:x="426" fg:w="8"/><text x="33.6618%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (8 samples, 0.63%)</title><rect x="33.4118%" y="389" width="0.6275%" height="15" fill="rgb(230,88,30)" fg:x="426" fg:w="8"/><text x="33.6618%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="33.8039%" y="373" width="0.2353%" height="15" fill="rgb(216,217,1)" fg:x="431" fg:w="3"/><text x="34.0539%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (2 samples, 0.16%)</title><rect x="33.8824%" y="357" width="0.1569%" height="15" fill="rgb(248,139,50)" fg:x="432" fg:w="2"/><text x="34.1324%" y="367.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="33.8824%" y="341" width="0.1569%" height="15" fill="rgb(233,1,21)" fg:x="432" fg:w="2"/><text x="34.1324%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="34.0392%" y="357" width="0.0784%" height="15" fill="rgb(215,183,12)" fg:x="434" fg:w="1"/><text x="34.2892%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="34.0392%" y="341" width="0.0784%" height="15" fill="rgb(229,104,42)" fg:x="434" fg:w="1"/><text x="34.2892%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="34.0392%" y="389" width="0.1569%" height="15" fill="rgb(243,34,48)" fg:x="434" fg:w="2"/><text x="34.2892%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="34.0392%" y="373" width="0.1569%" height="15" fill="rgb(239,11,44)" fg:x="434" fg:w="2"/><text x="34.2892%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="34.1176%" y="357" width="0.0784%" height="15" fill="rgb(231,98,35)" fg:x="435" fg:w="1"/><text x="34.3676%" y="367.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="34.1176%" y="341" width="0.0784%" height="15" fill="rgb(233,28,25)" fg:x="435" fg:w="1"/><text x="34.3676%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="34.9020%" y="309" width="0.1569%" height="15" fill="rgb(234,123,11)" fg:x="445" fg:w="2"/><text x="35.1520%" y="319.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (17 samples, 1.33%)</title><rect x="34.0392%" y="405" width="1.3333%" height="15" fill="rgb(220,69,3)" fg:x="434" fg:w="17"/><text x="34.2892%" y="415.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (15 samples, 1.18%)</title><rect x="34.1961%" y="389" width="1.1765%" height="15" fill="rgb(214,64,36)" fg:x="436" fg:w="15"/><text x="34.4461%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (15 samples, 1.18%)</title><rect x="34.1961%" y="373" width="1.1765%" height="15" fill="rgb(211,138,32)" fg:x="436" fg:w="15"/><text x="34.4461%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (15 samples, 1.18%)</title><rect x="34.1961%" y="357" width="1.1765%" height="15" fill="rgb(213,118,47)" fg:x="436" fg:w="15"/><text x="34.4461%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (15 samples, 1.18%)</title><rect x="34.1961%" y="341" width="1.1765%" height="15" fill="rgb(243,124,49)" fg:x="436" fg:w="15"/><text x="34.4461%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (15 samples, 1.18%)</title><rect x="34.1961%" y="325" width="1.1765%" height="15" fill="rgb(221,30,28)" fg:x="436" fg:w="15"/><text x="34.4461%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (4 samples, 0.31%)</title><rect x="35.0588%" y="309" width="0.3137%" height="15" fill="rgb(246,37,13)" fg:x="447" fg:w="4"/><text x="35.3088%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="35.3725%" y="357" width="0.0784%" height="15" fill="rgb(249,66,14)" fg:x="451" fg:w="1"/><text x="35.6225%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="35.3725%" y="341" width="0.0784%" height="15" fill="rgb(213,166,5)" fg:x="451" fg:w="1"/><text x="35.6225%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.4510%" y="357" width="0.0784%" height="15" fill="rgb(221,66,24)" fg:x="452" fg:w="1"/><text x="35.7010%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="35.6863%" y="325" width="0.1569%" height="15" fill="rgb(210,132,17)" fg:x="455" fg:w="2"/><text x="35.9363%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="35.7647%" y="309" width="0.0784%" height="15" fill="rgb(243,202,5)" fg:x="456" fg:w="1"/><text x="36.0147%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.7647%" y="293" width="0.0784%" height="15" fill="rgb(233,70,48)" fg:x="456" fg:w="1"/><text x="36.0147%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="35.7647%" y="277" width="0.0784%" height="15" fill="rgb(238,41,26)" fg:x="456" fg:w="1"/><text x="36.0147%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (5 samples, 0.39%)</title><rect x="35.5294%" y="357" width="0.3922%" height="15" fill="rgb(241,19,31)" fg:x="453" fg:w="5"/><text x="35.7794%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (5 samples, 0.39%)</title><rect x="35.5294%" y="341" width="0.3922%" height="15" fill="rgb(214,76,10)" fg:x="453" fg:w="5"/><text x="35.7794%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.8431%" y="325" width="0.0784%" height="15" fill="rgb(254,202,22)" fg:x="457" fg:w="1"/><text x="36.0931%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.2353%" y="325" width="0.0784%" height="15" fill="rgb(214,72,24)" fg:x="462" fg:w="1"/><text x="36.4853%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (22 samples, 1.73%)</title><rect x="36.3137%" y="325" width="1.7255%" height="15" fill="rgb(221,92,46)" fg:x="463" fg:w="22"/><text x="36.5637%" y="335.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="37.8039%" y="309" width="0.2353%" height="15" fill="rgb(246,13,50)" fg:x="482" fg:w="3"/><text x="38.0539%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (26 samples, 2.04%)</title><rect x="36.0784%" y="341" width="2.0392%" height="15" fill="rgb(240,165,38)" fg:x="460" fg:w="26"/><text x="36.3284%" y="351.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="38.0392%" y="325" width="0.0784%" height="15" fill="rgb(241,24,51)" fg:x="485" fg:w="1"/><text x="38.2892%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (2 samples, 0.16%)</title><rect x="38.1176%" y="341" width="0.1569%" height="15" fill="rgb(227,51,44)" fg:x="486" fg:w="2"/><text x="38.3676%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.31%)</title><rect x="38.3529%" y="325" width="0.3137%" height="15" fill="rgb(231,121,3)" fg:x="489" fg:w="4"/><text x="38.6029%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.47%)</title><rect x="38.2745%" y="341" width="0.4706%" height="15" fill="rgb(245,3,41)" fg:x="488" fg:w="6"/><text x="38.5245%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="38.6667%" y="325" width="0.0784%" height="15" fill="rgb(214,13,26)" fg:x="493" fg:w="1"/><text x="38.9167%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="39.2941%" y="309" width="0.1569%" height="15" fill="rgb(252,75,11)" fg:x="501" fg:w="2"/><text x="39.5441%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="39.2941%" y="293" width="0.1569%" height="15" fill="rgb(218,226,17)" fg:x="501" fg:w="2"/><text x="39.5441%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="39.2941%" y="277" width="0.1569%" height="15" fill="rgb(248,89,38)" fg:x="501" fg:w="2"/><text x="39.5441%" y="287.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="39.2941%" y="261" width="0.1569%" height="15" fill="rgb(237,73,46)" fg:x="501" fg:w="2"/><text x="39.5441%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (10 samples, 0.78%)</title><rect x="39.4510%" y="309" width="0.7843%" height="15" fill="rgb(242,78,33)" fg:x="503" fg:w="10"/><text x="39.7010%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (5 samples, 0.39%)</title><rect x="39.8431%" y="293" width="0.3922%" height="15" fill="rgb(235,60,3)" fg:x="508" fg:w="5"/><text x="40.0931%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="40.1569%" y="277" width="0.0784%" height="15" fill="rgb(216,172,19)" fg:x="512" fg:w="1"/><text x="40.4069%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.1569%" y="261" width="0.0784%" height="15" fill="rgb(227,6,42)" fg:x="512" fg:w="1"/><text x="40.4069%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="40.1569%" y="245" width="0.0784%" height="15" fill="rgb(223,207,42)" fg:x="512" fg:w="1"/><text x="40.4069%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (7 samples, 0.55%)</title><rect x="40.2353%" y="309" width="0.5490%" height="15" fill="rgb(246,138,30)" fg:x="513" fg:w="7"/><text x="40.4853%" y="319.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (7 samples, 0.55%)</title><rect x="40.2353%" y="293" width="0.5490%" height="15" fill="rgb(251,199,47)" fg:x="513" fg:w="7"/><text x="40.4853%" y="303.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (7 samples, 0.55%)</title><rect x="40.2353%" y="277" width="0.5490%" height="15" fill="rgb(228,218,44)" fg:x="513" fg:w="7"/><text x="40.4853%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (24 samples, 1.88%)</title><rect x="38.9804%" y="325" width="1.8824%" height="15" fill="rgb(220,68,6)" fg:x="497" fg:w="24"/><text x="39.2304%" y="335.50">r..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="40.7843%" y="309" width="0.0784%" height="15" fill="rgb(240,60,26)" fg:x="520" fg:w="1"/><text x="41.0343%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (28 samples, 2.20%)</title><rect x="38.7451%" y="341" width="2.1961%" height="15" fill="rgb(211,200,19)" fg:x="494" fg:w="28"/><text x="38.9951%" y="351.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="40.8627%" y="325" width="0.0784%" height="15" fill="rgb(242,145,30)" fg:x="521" fg:w="1"/><text x="41.1127%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="40.8627%" y="309" width="0.0784%" height="15" fill="rgb(225,64,13)" fg:x="521" fg:w="1"/><text x="41.1127%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="40.8627%" y="293" width="0.0784%" height="15" fill="rgb(218,103,35)" fg:x="521" fg:w="1"/><text x="41.1127%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.8627%" y="277" width="0.0784%" height="15" fill="rgb(216,93,46)" fg:x="521" fg:w="1"/><text x="41.1127%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.8627%" y="261" width="0.0784%" height="15" fill="rgb(225,159,27)" fg:x="521" fg:w="1"/><text x="41.1127%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.8627%" y="245" width="0.0784%" height="15" fill="rgb(225,204,11)" fg:x="521" fg:w="1"/><text x="41.1127%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="40.9412%" y="341" width="0.0784%" height="15" fill="rgb(205,56,4)" fg:x="522" fg:w="1"/><text x="41.1912%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="40.9412%" y="325" width="0.0784%" height="15" fill="rgb(206,6,35)" fg:x="522" fg:w="1"/><text x="41.1912%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="40.9412%" y="309" width="0.0784%" height="15" fill="rgb(247,73,52)" fg:x="522" fg:w="1"/><text x="41.1912%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="41.0980%" y="293" width="0.0784%" height="15" fill="rgb(246,97,4)" fg:x="524" fg:w="1"/><text x="41.3480%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="41.2549%" y="277" width="0.0784%" height="15" fill="rgb(212,37,15)" fg:x="526" fg:w="1"/><text x="41.5049%" y="287.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.47%)</title><rect x="42.5098%" y="229" width="0.4706%" height="15" fill="rgb(208,130,40)" fg:x="542" fg:w="6"/><text x="42.7598%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="42.9804%" y="229" width="0.1569%" height="15" fill="rgb(236,55,29)" fg:x="548" fg:w="2"/><text x="43.2304%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (8 samples, 0.63%)</title><rect x="43.1373%" y="229" width="0.6275%" height="15" fill="rgb(209,156,45)" fg:x="550" fg:w="8"/><text x="43.3873%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.31%)</title><rect x="43.4510%" y="213" width="0.3137%" height="15" fill="rgb(249,107,4)" fg:x="554" fg:w="4"/><text x="43.7010%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.31%)</title><rect x="43.4510%" y="197" width="0.3137%" height="15" fill="rgb(227,7,13)" fg:x="554" fg:w="4"/><text x="43.7010%" y="207.50"></text></g><g><title>realloc (4 samples, 0.31%)</title><rect x="43.4510%" y="181" width="0.3137%" height="15" fill="rgb(250,129,14)" fg:x="554" fg:w="4"/><text x="43.7010%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (4 samples, 0.31%)</title><rect x="43.7647%" y="229" width="0.3137%" height="15" fill="rgb(229,92,13)" fg:x="558" fg:w="4"/><text x="44.0147%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="43.9216%" y="213" width="0.1569%" height="15" fill="rgb(245,98,39)" fg:x="560" fg:w="2"/><text x="44.1716%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="43.9216%" y="197" width="0.1569%" height="15" fill="rgb(234,135,48)" fg:x="560" fg:w="2"/><text x="44.1716%" y="207.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="43.9216%" y="181" width="0.1569%" height="15" fill="rgb(230,98,28)" fg:x="560" fg:w="2"/><text x="44.1716%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="44.3922%" y="197" width="0.0784%" height="15" fill="rgb(223,121,0)" fg:x="566" fg:w="1"/><text x="44.6422%" y="207.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="44.6275%" y="165" width="0.1569%" height="15" fill="rgb(234,173,33)" fg:x="569" fg:w="2"/><text x="44.8775%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.55%)</title><rect x="44.4706%" y="197" width="0.5490%" height="15" fill="rgb(245,47,8)" fg:x="567" fg:w="7"/><text x="44.7206%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.47%)</title><rect x="44.5490%" y="181" width="0.4706%" height="15" fill="rgb(205,17,20)" fg:x="568" fg:w="6"/><text x="44.7990%" y="191.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="44.7843%" y="165" width="0.2353%" height="15" fill="rgb(232,151,16)" fg:x="571" fg:w="3"/><text x="45.0343%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (19 samples, 1.49%)</title><rect x="44.0784%" y="229" width="1.4902%" height="15" fill="rgb(208,30,32)" fg:x="562" fg:w="19"/><text x="44.3284%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (19 samples, 1.49%)</title><rect x="44.0784%" y="213" width="1.4902%" height="15" fill="rgb(254,26,3)" fg:x="562" fg:w="19"/><text x="44.3284%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (7 samples, 0.55%)</title><rect x="45.0196%" y="197" width="0.5490%" height="15" fill="rgb(240,177,30)" fg:x="574" fg:w="7"/><text x="45.2696%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="45.5686%" y="213" width="0.0784%" height="15" fill="rgb(248,76,44)" fg:x="581" fg:w="1"/><text x="45.8186%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="45.5686%" y="197" width="0.0784%" height="15" fill="rgb(241,186,54)" fg:x="581" fg:w="1"/><text x="45.8186%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="45.5686%" y="181" width="0.0784%" height="15" fill="rgb(249,171,29)" fg:x="581" fg:w="1"/><text x="45.8186%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (96 samples, 7.53%)</title><rect x="45.5686%" y="229" width="7.5294%" height="15" fill="rgb(237,151,44)" fg:x="581" fg:w="96"/><text x="45.8186%" y="239.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (95 samples, 7.45%)</title><rect x="45.6471%" y="213" width="7.4510%" height="15" fill="rgb(228,174,30)" fg:x="582" fg:w="95"/><text x="45.8971%" y="223.50">regex_auto..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (95 samples, 7.45%)</title><rect x="45.6471%" y="197" width="7.4510%" height="15" fill="rgb(252,14,37)" fg:x="582" fg:w="95"/><text x="45.8971%" y="207.50">alloc::vec..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (6 samples, 0.47%)</title><rect x="53.0980%" y="229" width="0.4706%" height="15" fill="rgb(207,111,40)" fg:x="677" fg:w="6"/><text x="53.3480%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.4902%" y="213" width="0.0784%" height="15" fill="rgb(248,171,54)" fg:x="682" fg:w="1"/><text x="53.7402%" y="223.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="53.5686%" y="229" width="0.0784%" height="15" fill="rgb(211,127,2)" fg:x="683" fg:w="1"/><text x="53.8186%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="53.9608%" y="181" width="0.1569%" height="15" fill="rgb(236,87,47)" fg:x="688" fg:w="2"/><text x="54.2108%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (167 samples, 13.10%)</title><rect x="41.0980%" y="325" width="13.0980%" height="15" fill="rgb(223,190,45)" fg:x="524" fg:w="167"/><text x="41.3480%" y="335.50">&lt;core::iter::adapter..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (167 samples, 13.10%)</title><rect x="41.0980%" y="309" width="13.0980%" height="15" fill="rgb(215,5,16)" fg:x="524" fg:w="167"/><text x="41.3480%" y="319.50">regex_automata::nfa:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (166 samples, 13.02%)</title><rect x="41.1765%" y="293" width="13.0196%" height="15" fill="rgb(252,82,33)" fg:x="525" fg:w="166"/><text x="41.4265%" y="303.50">regex_automata::nfa:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (164 samples, 12.86%)</title><rect x="41.3333%" y="277" width="12.8627%" height="15" fill="rgb(247,213,44)" fg:x="527" fg:w="164"/><text x="41.5833%" y="287.50">regex_automata::nfa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (164 samples, 12.86%)</title><rect x="41.3333%" y="261" width="12.8627%" height="15" fill="rgb(205,196,44)" fg:x="527" fg:w="164"/><text x="41.5833%" y="271.50">regex_automata::nfa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (164 samples, 12.86%)</title><rect x="41.3333%" y="245" width="12.8627%" height="15" fill="rgb(237,96,54)" fg:x="527" fg:w="164"/><text x="41.5833%" y="255.50">regex_automata::nfa..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (7 samples, 0.55%)</title><rect x="53.6471%" y="229" width="0.5490%" height="15" fill="rgb(230,113,34)" fg:x="684" fg:w="7"/><text x="53.8971%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.39%)</title><rect x="53.8039%" y="213" width="0.3922%" height="15" fill="rgb(221,224,12)" fg:x="686" fg:w="5"/><text x="54.0539%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.31%)</title><rect x="53.8824%" y="197" width="0.3137%" height="15" fill="rgb(219,112,44)" fg:x="687" fg:w="4"/><text x="54.1324%" y="207.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="54.1176%" y="181" width="0.0784%" height="15" fill="rgb(210,31,13)" fg:x="690" fg:w="1"/><text x="54.3676%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="54.1176%" y="165" width="0.0784%" height="15" fill="rgb(230,25,16)" fg:x="690" fg:w="1"/><text x="54.3676%" y="175.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="54.2745%" y="309" width="0.0784%" height="15" fill="rgb(246,108,53)" fg:x="692" fg:w="1"/><text x="54.5245%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.3529%" y="309" width="0.0784%" height="15" fill="rgb(241,172,50)" fg:x="693" fg:w="1"/><text x="54.6029%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (7 samples, 0.55%)</title><rect x="54.4314%" y="309" width="0.5490%" height="15" fill="rgb(235,141,10)" fg:x="694" fg:w="7"/><text x="54.6814%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.31%)</title><rect x="54.6667%" y="293" width="0.3137%" height="15" fill="rgb(220,174,43)" fg:x="697" fg:w="4"/><text x="54.9167%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.31%)</title><rect x="54.6667%" y="277" width="0.3137%" height="15" fill="rgb(215,181,40)" fg:x="697" fg:w="4"/><text x="54.9167%" y="287.50"></text></g><g><title>realloc (4 samples, 0.31%)</title><rect x="54.6667%" y="261" width="0.3137%" height="15" fill="rgb(230,97,2)" fg:x="697" fg:w="4"/><text x="54.9167%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.5294%" y="293" width="0.0784%" height="15" fill="rgb(211,25,27)" fg:x="708" fg:w="1"/><text x="55.7794%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (9 samples, 0.71%)</title><rect x="54.9804%" y="309" width="0.7059%" height="15" fill="rgb(230,87,26)" fg:x="701" fg:w="9"/><text x="55.2304%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="55.6078%" y="293" width="0.0784%" height="15" fill="rgb(227,160,17)" fg:x="709" fg:w="1"/><text x="55.8578%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.6078%" y="277" width="0.0784%" height="15" fill="rgb(244,85,34)" fg:x="709" fg:w="1"/><text x="55.8578%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.6078%" y="261" width="0.0784%" height="15" fill="rgb(207,70,0)" fg:x="709" fg:w="1"/><text x="55.8578%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::new (253 samples, 19.84%)</title><rect x="35.9216%" y="357" width="19.8431%" height="15" fill="rgb(223,129,7)" fg:x="458" fg:w="253"/><text x="36.1716%" y="367.50">regex_automata::meta::strategy:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (188 samples, 14.75%)</title><rect x="41.0196%" y="341" width="14.7451%" height="15" fill="rgb(246,105,7)" fg:x="523" fg:w="188"/><text x="41.2696%" y="351.50">regex_automata::nfa::t..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (20 samples, 1.57%)</title><rect x="54.1961%" y="325" width="1.5686%" height="15" fill="rgb(215,154,42)" fg:x="691" fg:w="20"/><text x="54.4461%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="55.6863%" y="309" width="0.0784%" height="15" fill="rgb(220,215,30)" fg:x="710" fg:w="1"/><text x="55.9363%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="55.8431%" y="309" width="0.0784%" height="15" fill="rgb(228,81,51)" fg:x="712" fg:w="1"/><text x="56.0931%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="55.9216%" y="309" width="0.0784%" height="15" fill="rgb(247,71,54)" fg:x="713" fg:w="1"/><text x="56.1716%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="56.0000%" y="309" width="0.0784%" height="15" fill="rgb(234,176,34)" fg:x="714" fg:w="1"/><text x="56.2500%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="56.0000%" y="293" width="0.0784%" height="15" fill="rgb(241,103,54)" fg:x="714" fg:w="1"/><text x="56.2500%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="56.0784%" y="293" width="0.1569%" height="15" fill="rgb(228,22,34)" fg:x="715" fg:w="2"/><text x="56.3284%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="56.0784%" y="277" width="0.1569%" height="15" fill="rgb(241,179,48)" fg:x="715" fg:w="2"/><text x="56.3284%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="56.0784%" y="261" width="0.1569%" height="15" fill="rgb(235,167,37)" fg:x="715" fg:w="2"/><text x="56.3284%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.47%)</title><rect x="55.8431%" y="325" width="0.4706%" height="15" fill="rgb(213,109,30)" fg:x="712" fg:w="6"/><text x="56.0931%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="56.0784%" y="309" width="0.2353%" height="15" fill="rgb(222,172,16)" fg:x="715" fg:w="3"/><text x="56.3284%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="56.2353%" y="293" width="0.0784%" height="15" fill="rgb(233,192,5)" fg:x="717" fg:w="1"/><text x="56.4853%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="56.3137%" y="325" width="0.0784%" height="15" fill="rgb(247,189,41)" fg:x="718" fg:w="1"/><text x="56.5637%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="56.3922%" y="325" width="0.0784%" height="15" fill="rgb(218,134,47)" fg:x="719" fg:w="1"/><text x="56.6422%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="56.3922%" y="309" width="0.0784%" height="15" fill="rgb(216,29,3)" fg:x="719" fg:w="1"/><text x="56.6422%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (2 samples, 0.16%)</title><rect x="56.4706%" y="309" width="0.1569%" height="15" fill="rgb(246,140,12)" fg:x="720" fg:w="2"/><text x="56.7206%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="56.6275%" y="309" width="0.0784%" height="15" fill="rgb(230,136,11)" fg:x="722" fg:w="1"/><text x="56.8775%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (13 samples, 1.02%)</title><rect x="55.7647%" y="357" width="1.0196%" height="15" fill="rgb(247,22,47)" fg:x="711" fg:w="13"/><text x="56.0147%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (13 samples, 1.02%)</title><rect x="55.7647%" y="341" width="1.0196%" height="15" fill="rgb(218,84,22)" fg:x="711" fg:w="13"/><text x="56.0147%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.31%)</title><rect x="56.4706%" y="325" width="0.3137%" height="15" fill="rgb(216,87,39)" fg:x="720" fg:w="4"/><text x="56.7206%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.7059%" y="309" width="0.0784%" height="15" fill="rgb(221,178,8)" fg:x="723" fg:w="1"/><text x="56.9559%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.7059%" y="293" width="0.0784%" height="15" fill="rgb(230,42,11)" fg:x="723" fg:w="1"/><text x="56.9559%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.7059%" y="277" width="0.0784%" height="15" fill="rgb(237,229,4)" fg:x="723" fg:w="1"/><text x="56.9559%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.4118%" y="293" width="0.0784%" height="15" fill="rgb(222,31,33)" fg:x="732" fg:w="1"/><text x="57.6618%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.4118%" y="277" width="0.0784%" height="15" fill="rgb(210,17,39)" fg:x="732" fg:w="1"/><text x="57.6618%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="57.4118%" y="261" width="0.0784%" height="15" fill="rgb(244,93,20)" fg:x="732" fg:w="1"/><text x="57.6618%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (14 samples, 1.10%)</title><rect x="56.7843%" y="325" width="1.0980%" height="15" fill="rgb(210,40,47)" fg:x="724" fg:w="14"/><text x="57.0343%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (14 samples, 1.10%)</title><rect x="56.7843%" y="309" width="1.0980%" height="15" fill="rgb(239,211,47)" fg:x="724" fg:w="14"/><text x="57.0343%" y="319.50"></text></g><g><title>core::slice::sort::merge_sort (5 samples, 0.39%)</title><rect x="57.4902%" y="293" width="0.3922%" height="15" fill="rgb(251,223,49)" fg:x="733" fg:w="5"/><text x="57.7402%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.8039%" y="277" width="0.0784%" height="15" fill="rgb(221,149,5)" fg:x="737" fg:w="1"/><text x="58.0539%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.8824%" y="309" width="0.0784%" height="15" fill="rgb(219,224,51)" fg:x="738" fg:w="1"/><text x="58.1324%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="57.8824%" y="325" width="0.1569%" height="15" fill="rgb(223,7,8)" fg:x="738" fg:w="2"/><text x="58.1324%" y="335.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="57.9608%" y="309" width="0.0784%" height="15" fill="rgb(241,217,22)" fg:x="739" fg:w="1"/><text x="58.2108%" y="319.50"></text></g><g><title>indefinite::rules::number::Number::check (316 samples, 24.78%)</title><rect x="33.3333%" y="421" width="24.7843%" height="15" fill="rgb(248,209,0)" fg:x="425" fg:w="316"/><text x="33.5833%" y="431.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::new (290 samples, 22.75%)</title><rect x="35.3725%" y="405" width="22.7451%" height="15" fill="rgb(217,205,4)" fg:x="451" fg:w="290"/><text x="35.6225%" y="415.50">regex::regex::string::Regex::new</text></g><g><title>regex::builders::Builder::build_one_string (290 samples, 22.75%)</title><rect x="35.3725%" y="389" width="22.7451%" height="15" fill="rgb(228,124,39)" fg:x="451" fg:w="290"/><text x="35.6225%" y="399.50">regex::builders::Builder::build_one_..</text></g><g><title>regex_automata::meta::regex::Builder::build (290 samples, 22.75%)</title><rect x="35.3725%" y="373" width="22.7451%" height="15" fill="rgb(250,116,42)" fg:x="451" fg:w="290"/><text x="35.6225%" y="383.50">regex_automata::meta::regex::Builder..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (17 samples, 1.33%)</title><rect x="56.7843%" y="357" width="1.3333%" height="15" fill="rgb(223,202,9)" fg:x="724" fg:w="17"/><text x="57.0343%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (17 samples, 1.33%)</title><rect x="56.7843%" y="341" width="1.3333%" height="15" fill="rgb(242,222,40)" fg:x="724" fg:w="17"/><text x="57.0343%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="58.0392%" y="325" width="0.0784%" height="15" fill="rgb(229,99,46)" fg:x="740" fg:w="1"/><text x="58.2892%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="58.0392%" y="309" width="0.0784%" height="15" fill="rgb(225,56,46)" fg:x="740" fg:w="1"/><text x="58.2892%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.0392%" y="293" width="0.0784%" height="15" fill="rgb(227,94,5)" fg:x="740" fg:w="1"/><text x="58.2892%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.0392%" y="277" width="0.0784%" height="15" fill="rgb(205,112,38)" fg:x="740" fg:w="1"/><text x="58.2892%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="58.0392%" y="261" width="0.0784%" height="15" fill="rgb(231,133,46)" fg:x="740" fg:w="1"/><text x="58.2892%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="58.1961%" y="357" width="0.0784%" height="15" fill="rgb(217,16,9)" fg:x="742" fg:w="1"/><text x="58.4461%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="58.1961%" y="341" width="0.0784%" height="15" fill="rgb(249,173,9)" fg:x="742" fg:w="1"/><text x="58.4461%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="58.2745%" y="341" width="0.0784%" height="15" fill="rgb(205,163,53)" fg:x="743" fg:w="1"/><text x="58.5245%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (5 samples, 0.39%)</title><rect x="58.1176%" y="389" width="0.3922%" height="15" fill="rgb(217,54,41)" fg:x="741" fg:w="5"/><text x="58.3676%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (5 samples, 0.39%)</title><rect x="58.1176%" y="373" width="0.3922%" height="15" fill="rgb(228,216,12)" fg:x="741" fg:w="5"/><text x="58.3676%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (3 samples, 0.24%)</title><rect x="58.2745%" y="357" width="0.2353%" height="15" fill="rgb(244,228,15)" fg:x="743" fg:w="3"/><text x="58.5245%" y="367.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (2 samples, 0.16%)</title><rect x="58.3529%" y="341" width="0.1569%" height="15" fill="rgb(221,176,53)" fg:x="744" fg:w="2"/><text x="58.6029%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="58.3529%" y="325" width="0.1569%" height="15" fill="rgb(205,94,34)" fg:x="744" fg:w="2"/><text x="58.6029%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="58.3529%" y="309" width="0.1569%" height="15" fill="rgb(213,110,48)" fg:x="744" fg:w="2"/><text x="58.6029%" y="319.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="58.3529%" y="293" width="0.1569%" height="15" fill="rgb(236,142,28)" fg:x="744" fg:w="2"/><text x="58.6029%" y="303.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="58.5098%" y="357" width="0.1569%" height="15" fill="rgb(225,135,29)" fg:x="746" fg:w="2"/><text x="58.7598%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="58.6667%" y="325" width="0.0784%" height="15" fill="rgb(252,45,31)" fg:x="748" fg:w="1"/><text x="58.9167%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.6667%" y="309" width="0.0784%" height="15" fill="rgb(211,187,50)" fg:x="748" fg:w="1"/><text x="58.9167%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="58.6667%" y="341" width="0.1569%" height="15" fill="rgb(229,109,7)" fg:x="748" fg:w="2"/><text x="58.9167%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="58.7451%" y="325" width="0.0784%" height="15" fill="rgb(251,131,51)" fg:x="749" fg:w="1"/><text x="58.9951%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="58.6667%" y="357" width="0.2353%" height="15" fill="rgb(251,180,35)" fg:x="748" fg:w="3"/><text x="58.9167%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="58.8235%" y="341" width="0.0784%" height="15" fill="rgb(211,46,32)" fg:x="750" fg:w="1"/><text x="59.0735%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="58.9020%" y="341" width="0.0784%" height="15" fill="rgb(248,123,17)" fg:x="751" fg:w="1"/><text x="59.1520%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (8 samples, 0.63%)</title><rect x="58.5098%" y="389" width="0.6275%" height="15" fill="rgb(227,141,18)" fg:x="746" fg:w="8"/><text x="58.7598%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (8 samples, 0.63%)</title><rect x="58.5098%" y="373" width="0.6275%" height="15" fill="rgb(216,102,9)" fg:x="746" fg:w="8"/><text x="58.7598%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="58.9020%" y="357" width="0.2353%" height="15" fill="rgb(253,47,13)" fg:x="751" fg:w="3"/><text x="59.1520%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="58.9804%" y="341" width="0.1569%" height="15" fill="rgb(226,93,23)" fg:x="752" fg:w="2"/><text x="59.2304%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.0588%" y="325" width="0.0784%" height="15" fill="rgb(247,104,17)" fg:x="753" fg:w="1"/><text x="59.3088%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="59.1373%" y="373" width="0.0784%" height="15" fill="rgb(233,203,26)" fg:x="754" fg:w="1"/><text x="59.3873%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="59.1373%" y="357" width="0.0784%" height="15" fill="rgb(244,98,49)" fg:x="754" fg:w="1"/><text x="59.3873%" y="367.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="59.1373%" y="341" width="0.0784%" height="15" fill="rgb(235,134,22)" fg:x="754" fg:w="1"/><text x="59.3873%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="59.2941%" y="309" width="0.0784%" height="15" fill="rgb(221,70,32)" fg:x="756" fg:w="1"/><text x="59.5441%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="59.2941%" y="293" width="0.0784%" height="15" fill="rgb(238,15,50)" fg:x="756" fg:w="1"/><text x="59.5441%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.2941%" y="277" width="0.0784%" height="15" fill="rgb(215,221,48)" fg:x="756" fg:w="1"/><text x="59.5441%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="59.2941%" y="261" width="0.0784%" height="15" fill="rgb(236,73,3)" fg:x="756" fg:w="1"/><text x="59.5441%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="59.3725%" y="309" width="0.0784%" height="15" fill="rgb(250,107,11)" fg:x="757" fg:w="1"/><text x="59.6225%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="59.2941%" y="341" width="0.2353%" height="15" fill="rgb(242,39,14)" fg:x="756" fg:w="3"/><text x="59.5441%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="59.2941%" y="325" width="0.2353%" height="15" fill="rgb(248,164,37)" fg:x="756" fg:w="3"/><text x="59.5441%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.4510%" y="309" width="0.0784%" height="15" fill="rgb(217,60,12)" fg:x="758" fg:w="1"/><text x="59.7010%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="59.6078%" y="309" width="0.1569%" height="15" fill="rgb(240,125,29)" fg:x="760" fg:w="2"/><text x="59.8578%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="59.6078%" y="293" width="0.1569%" height="15" fill="rgb(208,207,28)" fg:x="760" fg:w="2"/><text x="59.8578%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.6863%" y="277" width="0.0784%" height="15" fill="rgb(209,159,27)" fg:x="761" fg:w="1"/><text x="59.9363%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="59.6863%" y="261" width="0.0784%" height="15" fill="rgb(251,176,53)" fg:x="761" fg:w="1"/><text x="59.9363%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="59.9216%" y="277" width="0.0784%" height="15" fill="rgb(211,85,7)" fg:x="764" fg:w="1"/><text x="60.1716%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="59.9216%" y="261" width="0.0784%" height="15" fill="rgb(216,64,54)" fg:x="764" fg:w="1"/><text x="60.1716%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (7 samples, 0.55%)</title><rect x="59.5294%" y="341" width="0.5490%" height="15" fill="rgb(217,54,24)" fg:x="759" fg:w="7"/><text x="59.7794%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (7 samples, 0.55%)</title><rect x="59.5294%" y="325" width="0.5490%" height="15" fill="rgb(208,206,53)" fg:x="759" fg:w="7"/><text x="59.7794%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (4 samples, 0.31%)</title><rect x="59.7647%" y="309" width="0.3137%" height="15" fill="rgb(251,74,39)" fg:x="762" fg:w="4"/><text x="60.0147%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (4 samples, 0.31%)</title><rect x="59.7647%" y="293" width="0.3137%" height="15" fill="rgb(226,47,5)" fg:x="762" fg:w="4"/><text x="60.0147%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="60.0000%" y="277" width="0.0784%" height="15" fill="rgb(234,111,33)" fg:x="765" fg:w="1"/><text x="60.2500%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.0000%" y="261" width="0.0784%" height="15" fill="rgb(251,14,10)" fg:x="765" fg:w="1"/><text x="60.2500%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.2353%" y="325" width="0.0784%" height="15" fill="rgb(232,43,0)" fg:x="768" fg:w="1"/><text x="60.4853%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="60.3137%" y="325" width="0.0784%" height="15" fill="rgb(222,68,43)" fg:x="769" fg:w="1"/><text x="60.5637%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.3137%" y="309" width="0.0784%" height="15" fill="rgb(217,24,23)" fg:x="769" fg:w="1"/><text x="60.5637%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (9 samples, 0.71%)</title><rect x="60.3922%" y="309" width="0.7059%" height="15" fill="rgb(229,209,14)" fg:x="770" fg:w="9"/><text x="60.6422%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (10 samples, 0.78%)</title><rect x="60.3922%" y="325" width="0.7843%" height="15" fill="rgb(250,149,48)" fg:x="770" fg:w="10"/><text x="60.6422%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="61.0980%" y="309" width="0.0784%" height="15" fill="rgb(210,120,37)" fg:x="779" fg:w="1"/><text x="61.3480%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="61.0980%" y="293" width="0.0784%" height="15" fill="rgb(210,21,8)" fg:x="779" fg:w="1"/><text x="61.3480%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="61.1765%" y="245" width="0.0784%" height="15" fill="rgb(243,145,7)" fg:x="780" fg:w="1"/><text x="61.4265%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="61.1765%" y="309" width="0.1569%" height="15" fill="rgb(238,178,32)" fg:x="780" fg:w="2"/><text x="61.4265%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="61.1765%" y="293" width="0.1569%" height="15" fill="rgb(222,4,10)" fg:x="780" fg:w="2"/><text x="61.4265%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="61.1765%" y="277" width="0.1569%" height="15" fill="rgb(239,7,37)" fg:x="780" fg:w="2"/><text x="61.4265%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="61.1765%" y="261" width="0.1569%" height="15" fill="rgb(215,31,37)" fg:x="780" fg:w="2"/><text x="61.4265%" y="271.50"></text></g><g><title>regex_syntax::hir::ClassUnicode::is_ascii (1 samples, 0.08%)</title><rect x="61.2549%" y="245" width="0.0784%" height="15" fill="rgb(224,83,33)" fg:x="781" fg:w="1"/><text x="61.5049%" y="255.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="61.6471%" y="293" width="0.0784%" height="15" fill="rgb(239,55,3)" fg:x="786" fg:w="1"/><text x="61.8971%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.7255%" y="293" width="0.0784%" height="15" fill="rgb(247,92,11)" fg:x="787" fg:w="1"/><text x="61.9755%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="61.8039%" y="293" width="0.2353%" height="15" fill="rgb(239,200,7)" fg:x="788" fg:w="3"/><text x="62.0539%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.9608%" y="277" width="0.0784%" height="15" fill="rgb(227,115,8)" fg:x="790" fg:w="1"/><text x="62.2108%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.9608%" y="261" width="0.0784%" height="15" fill="rgb(215,189,27)" fg:x="790" fg:w="1"/><text x="62.2108%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="61.9608%" y="245" width="0.0784%" height="15" fill="rgb(251,216,39)" fg:x="790" fg:w="1"/><text x="62.2108%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.31%)</title><rect x="62.0392%" y="293" width="0.3137%" height="15" fill="rgb(207,29,47)" fg:x="791" fg:w="4"/><text x="62.2892%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="62.2745%" y="277" width="0.0784%" height="15" fill="rgb(210,71,34)" fg:x="794" fg:w="1"/><text x="62.5245%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.2745%" y="261" width="0.0784%" height="15" fill="rgb(253,217,51)" fg:x="794" fg:w="1"/><text x="62.5245%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.2745%" y="245" width="0.0784%" height="15" fill="rgb(222,117,46)" fg:x="794" fg:w="1"/><text x="62.5245%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (31 samples, 2.43%)</title><rect x="60.0784%" y="341" width="2.4314%" height="15" fill="rgb(226,132,6)" fg:x="766" fg:w="31"/><text x="60.3284%" y="351.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (17 samples, 1.33%)</title><rect x="61.1765%" y="325" width="1.3333%" height="15" fill="rgb(254,145,51)" fg:x="780" fg:w="17"/><text x="61.4265%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (15 samples, 1.18%)</title><rect x="61.3333%" y="309" width="1.1765%" height="15" fill="rgb(231,199,27)" fg:x="782" fg:w="15"/><text x="61.5833%" y="319.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="62.3529%" y="293" width="0.1569%" height="15" fill="rgb(245,158,14)" fg:x="795" fg:w="2"/><text x="62.6029%" y="303.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="62.4314%" y="277" width="0.0784%" height="15" fill="rgb(240,113,14)" fg:x="796" fg:w="1"/><text x="62.6814%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="62.4314%" y="261" width="0.0784%" height="15" fill="rgb(210,20,13)" fg:x="796" fg:w="1"/><text x="62.6814%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.4314%" y="245" width="0.0784%" height="15" fill="rgb(241,144,13)" fg:x="796" fg:w="1"/><text x="62.6814%" y="255.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (4 samples, 0.31%)</title><rect x="62.9020%" y="293" width="0.3137%" height="15" fill="rgb(235,43,34)" fg:x="802" fg:w="4"/><text x="63.1520%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="63.0588%" y="277" width="0.1569%" height="15" fill="rgb(208,36,20)" fg:x="804" fg:w="2"/><text x="63.3088%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="63.0588%" y="261" width="0.1569%" height="15" fill="rgb(239,204,10)" fg:x="804" fg:w="2"/><text x="63.3088%" y="271.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="63.0588%" y="245" width="0.1569%" height="15" fill="rgb(217,84,43)" fg:x="804" fg:w="2"/><text x="63.3088%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (12 samples, 0.94%)</title><rect x="62.5098%" y="341" width="0.9412%" height="15" fill="rgb(241,170,50)" fg:x="797" fg:w="12"/><text x="62.7598%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (12 samples, 0.94%)</title><rect x="62.5098%" y="325" width="0.9412%" height="15" fill="rgb(226,205,29)" fg:x="797" fg:w="12"/><text x="62.7598%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (10 samples, 0.78%)</title><rect x="62.6667%" y="309" width="0.7843%" height="15" fill="rgb(233,113,1)" fg:x="799" fg:w="10"/><text x="62.9167%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="63.2157%" y="293" width="0.2353%" height="15" fill="rgb(253,98,13)" fg:x="806" fg:w="3"/><text x="63.4657%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="63.2941%" y="277" width="0.1569%" height="15" fill="rgb(211,115,12)" fg:x="807" fg:w="2"/><text x="63.5441%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="63.2941%" y="261" width="0.1569%" height="15" fill="rgb(208,12,16)" fg:x="807" fg:w="2"/><text x="63.5441%" y="271.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="63.2941%" y="245" width="0.1569%" height="15" fill="rgb(237,193,54)" fg:x="807" fg:w="2"/><text x="63.5441%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (6 samples, 0.47%)</title><rect x="63.6078%" y="309" width="0.4706%" height="15" fill="rgb(243,22,42)" fg:x="811" fg:w="6"/><text x="63.8578%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="63.9216%" y="293" width="0.1569%" height="15" fill="rgb(233,151,36)" fg:x="815" fg:w="2"/><text x="64.1716%" y="303.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="64.0784%" y="293" width="0.0784%" height="15" fill="rgb(237,57,45)" fg:x="817" fg:w="1"/><text x="64.3284%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.0784%" y="277" width="0.0784%" height="15" fill="rgb(221,88,17)" fg:x="817" fg:w="1"/><text x="64.3284%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="64.0784%" y="309" width="0.1569%" height="15" fill="rgb(230,79,15)" fg:x="817" fg:w="2"/><text x="64.3284%" y="319.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::pop (1 samples, 0.08%)</title><rect x="64.1569%" y="293" width="0.0784%" height="15" fill="rgb(213,57,13)" fg:x="818" fg:w="1"/><text x="64.4069%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (65 samples, 5.10%)</title><rect x="59.2157%" y="357" width="5.0980%" height="15" fill="rgb(222,116,39)" fg:x="755" fg:w="65"/><text x="59.4657%" y="367.50">regex_..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (11 samples, 0.86%)</title><rect x="63.4510%" y="341" width="0.8627%" height="15" fill="rgb(245,107,2)" fg:x="809" fg:w="11"/><text x="63.7010%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (11 samples, 0.86%)</title><rect x="63.4510%" y="325" width="0.8627%" height="15" fill="rgb(238,1,10)" fg:x="809" fg:w="11"/><text x="63.7010%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="64.2353%" y="309" width="0.0784%" height="15" fill="rgb(249,4,48)" fg:x="819" fg:w="1"/><text x="64.4853%" y="319.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="64.2353%" y="293" width="0.0784%" height="15" fill="rgb(223,151,18)" fg:x="819" fg:w="1"/><text x="64.4853%" y="303.50"></text></g><g><title>regex::regex::string::Regex::new (67 samples, 5.25%)</title><rect x="59.1373%" y="389" width="5.2549%" height="15" fill="rgb(227,65,43)" fg:x="754" fg:w="67"/><text x="59.3873%" y="399.50">regex:..</text></g><g><title>regex::builders::Builder::build_one_string (66 samples, 5.18%)</title><rect x="59.2157%" y="373" width="5.1765%" height="15" fill="rgb(218,40,45)" fg:x="755" fg:w="66"/><text x="59.4657%" y="383.50">regex:..</text></g><g><title>regex_automata::meta::regex::Builder::configure (1 samples, 0.08%)</title><rect x="64.3137%" y="357" width="0.0784%" height="15" fill="rgb(252,121,31)" fg:x="820" fg:w="1"/><text x="64.5637%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.4706%" y="325" width="0.0784%" height="15" fill="rgb(219,158,43)" fg:x="822" fg:w="1"/><text x="64.7206%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="64.4706%" y="309" width="0.0784%" height="15" fill="rgb(231,162,42)" fg:x="822" fg:w="1"/><text x="64.7206%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="64.8627%" y="309" width="0.0784%" height="15" fill="rgb(217,179,25)" fg:x="827" fg:w="1"/><text x="65.1127%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.8627%" y="293" width="0.0784%" height="15" fill="rgb(206,212,31)" fg:x="827" fg:w="1"/><text x="65.1127%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.8627%" y="277" width="0.0784%" height="15" fill="rgb(235,144,12)" fg:x="827" fg:w="1"/><text x="65.1127%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.47%)</title><rect x="64.5490%" y="325" width="0.4706%" height="15" fill="rgb(213,51,10)" fg:x="823" fg:w="6"/><text x="64.7990%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="64.9412%" y="309" width="0.0784%" height="15" fill="rgb(231,145,14)" fg:x="828" fg:w="1"/><text x="65.1912%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (8 samples, 0.63%)</title><rect x="64.4706%" y="341" width="0.6275%" height="15" fill="rgb(235,15,28)" fg:x="822" fg:w="8"/><text x="64.7206%" y="351.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="65.0196%" y="325" width="0.0784%" height="15" fill="rgb(237,206,10)" fg:x="829" fg:w="1"/><text x="65.2696%" y="335.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (90 samples, 7.06%)</title><rect x="58.1176%" y="405" width="7.0588%" height="15" fill="rgb(236,227,27)" fg:x="741" fg:w="90"/><text x="58.3676%" y="415.50">indefinit..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (10 samples, 0.78%)</title><rect x="64.3922%" y="389" width="0.7843%" height="15" fill="rgb(246,83,35)" fg:x="821" fg:w="10"/><text x="64.6422%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (10 samples, 0.78%)</title><rect x="64.3922%" y="373" width="0.7843%" height="15" fill="rgb(220,136,24)" fg:x="821" fg:w="10"/><text x="64.6422%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (10 samples, 0.78%)</title><rect x="64.3922%" y="357" width="0.7843%" height="15" fill="rgb(217,3,25)" fg:x="821" fg:w="10"/><text x="64.6422%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="65.0980%" y="341" width="0.0784%" height="15" fill="rgb(239,24,14)" fg:x="830" fg:w="1"/><text x="65.3480%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="65.0980%" y="325" width="0.0784%" height="15" fill="rgb(244,16,53)" fg:x="830" fg:w="1"/><text x="65.3480%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="65.0980%" y="309" width="0.0784%" height="15" fill="rgb(208,175,44)" fg:x="830" fg:w="1"/><text x="65.3480%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.0980%" y="293" width="0.0784%" height="15" fill="rgb(252,18,48)" fg:x="830" fg:w="1"/><text x="65.3480%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.0980%" y="277" width="0.0784%" height="15" fill="rgb(234,199,32)" fg:x="830" fg:w="1"/><text x="65.3480%" y="287.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (673 samples, 52.78%)</title><rect x="12.9412%" y="501" width="52.7843%" height="15" fill="rgb(225,77,54)" fg:x="165" fg:w="673"/><text x="13.1912%" y="511.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::Observe..</text></g><g><title>plugins_core::looking::model::qualify_name (656 samples, 51.45%)</title><rect x="14.2745%" y="485" width="51.4510%" height="15" fill="rgb(225,42,25)" fg:x="182" fg:w="656"/><text x="14.5245%" y="495.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (656 samples, 51.45%)</title><rect x="14.2745%" y="469" width="51.4510%" height="15" fill="rgb(242,227,46)" fg:x="182" fg:w="656"/><text x="14.5245%" y="479.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (656 samples, 51.45%)</title><rect x="14.2745%" y="453" width="51.4510%" height="15" fill="rgb(246,197,35)" fg:x="182" fg:w="656"/><text x="14.5245%" y="463.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (654 samples, 51.29%)</title><rect x="14.4314%" y="437" width="51.2941%" height="15" fill="rgb(215,159,26)" fg:x="184" fg:w="654"/><text x="14.6814%" y="447.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (97 samples, 7.61%)</title><rect x="58.1176%" y="421" width="7.6078%" height="15" fill="rgb(212,194,50)" fg:x="741" fg:w="97"/><text x="58.3676%" y="431.50">indefinite..</text></g><g><title>indefinite::irregular::Irregular::check (7 samples, 0.55%)</title><rect x="65.1765%" y="405" width="0.5490%" height="15" fill="rgb(246,132,1)" fg:x="831" fg:w="7"/><text x="65.4265%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::to_entry (1 samples, 0.08%)</title><rect x="65.7255%" y="501" width="0.0784%" height="15" fill="rgb(217,71,7)" fg:x="838" fg:w="1"/><text x="65.9755%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="65.7255%" y="485" width="0.0784%" height="15" fill="rgb(252,59,32)" fg:x="838" fg:w="1"/><text x="65.9755%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="65.7255%" y="469" width="0.0784%" height="15" fill="rgb(253,204,25)" fg:x="838" fg:w="1"/><text x="65.9755%" y="479.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="65.7255%" y="453" width="0.0784%" height="15" fill="rgb(232,21,16)" fg:x="838" fg:w="1"/><text x="65.9755%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="65.7255%" y="437" width="0.0784%" height="15" fill="rgb(248,90,29)" fg:x="838" fg:w="1"/><text x="65.9755%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="65.7255%" y="421" width="0.0784%" height="15" fill="rgb(249,223,7)" fg:x="838" fg:w="1"/><text x="65.9755%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="65.7255%" y="405" width="0.0784%" height="15" fill="rgb(231,119,42)" fg:x="838" fg:w="1"/><text x="65.9755%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="65.7255%" y="389" width="0.0784%" height="15" fill="rgb(215,41,35)" fg:x="838" fg:w="1"/><text x="65.9755%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScope&lt;plugins_core::carrying::model::Containing&gt;&gt; (2 samples, 0.16%)</title><rect x="65.8039%" y="501" width="0.1569%" height="15" fill="rgb(220,44,45)" fg:x="839" fg:w="2"/><text x="66.0539%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="65.8824%" y="485" width="0.0784%" height="15" fill="rgb(253,197,36)" fg:x="840" fg:w="1"/><text x="66.1324%" y="495.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.9608%" y="469" width="0.0784%" height="15" fill="rgb(245,225,54)" fg:x="841" fg:w="1"/><text x="66.2108%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.9608%" y="453" width="0.0784%" height="15" fill="rgb(239,94,37)" fg:x="841" fg:w="1"/><text x="66.2108%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.9608%" y="437" width="0.0784%" height="15" fill="rgb(242,217,10)" fg:x="841" fg:w="1"/><text x="66.2108%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.9608%" y="421" width="0.0784%" height="15" fill="rgb(250,193,7)" fg:x="841" fg:w="1"/><text x="66.2108%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.9608%" y="405" width="0.0784%" height="15" fill="rgb(230,104,19)" fg:x="841" fg:w="1"/><text x="66.2108%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.9608%" y="389" width="0.0784%" height="15" fill="rgb(230,181,4)" fg:x="841" fg:w="1"/><text x="66.2108%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="65.9608%" y="373" width="0.0784%" height="15" fill="rgb(216,219,49)" fg:x="841" fg:w="1"/><text x="66.2108%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="65.9608%" y="357" width="0.0784%" height="15" fill="rgb(254,144,0)" fg:x="841" fg:w="1"/><text x="66.2108%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="65.9608%" y="341" width="0.0784%" height="15" fill="rgb(205,209,38)" fg:x="841" fg:w="1"/><text x="66.2108%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.9608%" y="325" width="0.0784%" height="15" fill="rgb(240,21,42)" fg:x="841" fg:w="1"/><text x="66.2108%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.9608%" y="309" width="0.0784%" height="15" fill="rgb(241,132,3)" fg:x="841" fg:w="1"/><text x="66.2108%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="65.9608%" y="293" width="0.0784%" height="15" fill="rgb(225,14,2)" fg:x="841" fg:w="1"/><text x="66.2108%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="65.9608%" y="277" width="0.0784%" height="15" fill="rgb(210,141,35)" fg:x="841" fg:w="1"/><text x="66.2108%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="65.9608%" y="261" width="0.0784%" height="15" fill="rgb(251,14,44)" fg:x="841" fg:w="1"/><text x="66.2108%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="65.9608%" y="245" width="0.0784%" height="15" fill="rgb(247,48,18)" fg:x="841" fg:w="1"/><text x="66.2108%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.9608%" y="229" width="0.0784%" height="15" fill="rgb(225,0,40)" fg:x="841" fg:w="1"/><text x="66.2108%" y="239.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="66.0392%" y="373" width="0.0784%" height="15" fill="rgb(221,31,33)" fg:x="842" fg:w="1"/><text x="66.2892%" y="383.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="66.0392%" y="357" width="0.0784%" height="15" fill="rgb(237,42,40)" fg:x="842" fg:w="1"/><text x="66.2892%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="66.0392%" y="341" width="0.0784%" height="15" fill="rgb(233,51,29)" fg:x="842" fg:w="1"/><text x="66.2892%" y="351.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="66.0392%" y="325" width="0.0784%" height="15" fill="rgb(226,58,20)" fg:x="842" fg:w="1"/><text x="66.2892%" y="335.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="66.0392%" y="309" width="0.0784%" height="15" fill="rgb(208,98,7)" fg:x="842" fg:w="1"/><text x="66.2892%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.2745%" y="309" width="0.0784%" height="15" fill="rgb(228,143,44)" fg:x="845" fg:w="1"/><text x="66.5245%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.4314%" y="245" width="0.0784%" height="15" fill="rgb(246,55,38)" fg:x="847" fg:w="1"/><text x="66.6814%" y="255.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.4314%" y="229" width="0.0784%" height="15" fill="rgb(247,87,16)" fg:x="847" fg:w="1"/><text x="66.6814%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.4314%" y="213" width="0.0784%" height="15" fill="rgb(234,129,42)" fg:x="847" fg:w="1"/><text x="66.6814%" y="223.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.47%)</title><rect x="66.1176%" y="357" width="0.4706%" height="15" fill="rgb(220,82,16)" fg:x="843" fg:w="6"/><text x="66.3676%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (6 samples, 0.47%)</title><rect x="66.1176%" y="341" width="0.4706%" height="15" fill="rgb(211,88,4)" fg:x="843" fg:w="6"/><text x="66.3676%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.39%)</title><rect x="66.1961%" y="325" width="0.3922%" height="15" fill="rgb(248,151,21)" fg:x="844" fg:w="5"/><text x="66.4461%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="66.3529%" y="309" width="0.2353%" height="15" fill="rgb(238,163,6)" fg:x="846" fg:w="3"/><text x="66.6029%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="66.3529%" y="293" width="0.2353%" height="15" fill="rgb(209,183,11)" fg:x="846" fg:w="3"/><text x="66.6029%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="66.3529%" y="277" width="0.2353%" height="15" fill="rgb(219,37,20)" fg:x="846" fg:w="3"/><text x="66.6029%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="66.4314%" y="261" width="0.1569%" height="15" fill="rgb(210,158,4)" fg:x="847" fg:w="2"/><text x="66.6814%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="66.5098%" y="245" width="0.0784%" height="15" fill="rgb(221,167,53)" fg:x="848" fg:w="1"/><text x="66.7598%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.5098%" y="229" width="0.0784%" height="15" fill="rgb(237,151,45)" fg:x="848" fg:w="1"/><text x="66.7598%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="66.5098%" y="213" width="0.0784%" height="15" fill="rgb(231,39,3)" fg:x="848" fg:w="1"/><text x="66.7598%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.5098%" y="197" width="0.0784%" height="15" fill="rgb(212,167,28)" fg:x="848" fg:w="1"/><text x="66.7598%" y="207.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.5098%" y="181" width="0.0784%" height="15" fill="rgb(232,178,8)" fg:x="848" fg:w="1"/><text x="66.7598%" y="191.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.5098%" y="165" width="0.0784%" height="15" fill="rgb(225,151,20)" fg:x="848" fg:w="1"/><text x="66.7598%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.7451%" y="293" width="0.0784%" height="15" fill="rgb(238,3,37)" fg:x="851" fg:w="1"/><text x="66.9951%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="66.7451%" y="277" width="0.0784%" height="15" fill="rgb(251,147,42)" fg:x="851" fg:w="1"/><text x="66.9951%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="66.7451%" y="261" width="0.0784%" height="15" fill="rgb(208,173,10)" fg:x="851" fg:w="1"/><text x="66.9951%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="66.8235%" y="213" width="0.0784%" height="15" fill="rgb(246,225,4)" fg:x="852" fg:w="1"/><text x="67.0735%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.8235%" y="197" width="0.0784%" height="15" fill="rgb(248,102,6)" fg:x="852" fg:w="1"/><text x="67.0735%" y="207.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="66.8235%" y="181" width="0.0784%" height="15" fill="rgb(232,6,21)" fg:x="852" fg:w="1"/><text x="67.0735%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="66.8235%" y="165" width="0.0784%" height="15" fill="rgb(221,179,22)" fg:x="852" fg:w="1"/><text x="67.0735%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.8235%" y="149" width="0.0784%" height="15" fill="rgb(252,50,20)" fg:x="852" fg:w="1"/><text x="67.0735%" y="159.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="66.8235%" y="133" width="0.0784%" height="15" fill="rgb(222,56,38)" fg:x="852" fg:w="1"/><text x="67.0735%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="66.8235%" y="117" width="0.0784%" height="15" fill="rgb(206,193,29)" fg:x="852" fg:w="1"/><text x="67.0735%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.8235%" y="101" width="0.0784%" height="15" fill="rgb(239,192,45)" fg:x="852" fg:w="1"/><text x="67.0735%" y="111.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="66.8235%" y="277" width="0.1569%" height="15" fill="rgb(254,18,36)" fg:x="852" fg:w="2"/><text x="67.0735%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="66.8235%" y="261" width="0.1569%" height="15" fill="rgb(221,127,11)" fg:x="852" fg:w="2"/><text x="67.0735%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="66.8235%" y="245" width="0.1569%" height="15" fill="rgb(234,146,35)" fg:x="852" fg:w="2"/><text x="67.0735%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="66.8235%" y="229" width="0.1569%" height="15" fill="rgb(254,201,37)" fg:x="852" fg:w="2"/><text x="67.0735%" y="239.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="66.9020%" y="213" width="0.0784%" height="15" fill="rgb(211,202,23)" fg:x="853" fg:w="1"/><text x="67.1520%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="66.9020%" y="197" width="0.0784%" height="15" fill="rgb(237,91,2)" fg:x="853" fg:w="1"/><text x="67.1520%" y="207.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (12 samples, 0.94%)</title><rect x="66.1176%" y="373" width="0.9412%" height="15" fill="rgb(226,228,36)" fg:x="843" fg:w="12"/><text x="66.3676%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.47%)</title><rect x="66.5882%" y="357" width="0.4706%" height="15" fill="rgb(213,63,50)" fg:x="849" fg:w="6"/><text x="66.8382%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.47%)</title><rect x="66.5882%" y="341" width="0.4706%" height="15" fill="rgb(235,194,19)" fg:x="849" fg:w="6"/><text x="66.8382%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.31%)</title><rect x="66.7451%" y="325" width="0.3137%" height="15" fill="rgb(207,204,18)" fg:x="851" fg:w="4"/><text x="66.9951%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.31%)</title><rect x="66.7451%" y="309" width="0.3137%" height="15" fill="rgb(248,8,7)" fg:x="851" fg:w="4"/><text x="66.9951%" y="319.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="66.8235%" y="293" width="0.2353%" height="15" fill="rgb(223,145,47)" fg:x="852" fg:w="3"/><text x="67.0735%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.9804%" y="277" width="0.0784%" height="15" fill="rgb(228,84,11)" fg:x="854" fg:w="1"/><text x="67.2304%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.9804%" y="261" width="0.0784%" height="15" fill="rgb(218,76,45)" fg:x="854" fg:w="1"/><text x="67.2304%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="66.9804%" y="245" width="0.0784%" height="15" fill="rgb(223,80,15)" fg:x="854" fg:w="1"/><text x="67.2304%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.9804%" y="229" width="0.0784%" height="15" fill="rgb(219,218,33)" fg:x="854" fg:w="1"/><text x="67.2304%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.9804%" y="213" width="0.0784%" height="15" fill="rgb(208,51,11)" fg:x="854" fg:w="1"/><text x="67.2304%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="66.9804%" y="197" width="0.0784%" height="15" fill="rgb(229,165,39)" fg:x="854" fg:w="1"/><text x="67.2304%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.9804%" y="181" width="0.0784%" height="15" fill="rgb(241,100,24)" fg:x="854" fg:w="1"/><text x="67.2304%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.9804%" y="165" width="0.0784%" height="15" fill="rgb(228,14,23)" fg:x="854" fg:w="1"/><text x="67.2304%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="66.9804%" y="149" width="0.0784%" height="15" fill="rgb(247,116,52)" fg:x="854" fg:w="1"/><text x="67.2304%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.9804%" y="133" width="0.0784%" height="15" fill="rgb(216,149,33)" fg:x="854" fg:w="1"/><text x="67.2304%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.9804%" y="117" width="0.0784%" height="15" fill="rgb(238,142,29)" fg:x="854" fg:w="1"/><text x="67.2304%" y="127.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="66.9804%" y="101" width="0.0784%" height="15" fill="rgb(224,83,40)" fg:x="854" fg:w="1"/><text x="67.2304%" y="111.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.0588%" y="325" width="0.0784%" height="15" fill="rgb(234,165,11)" fg:x="855" fg:w="1"/><text x="67.3088%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.0588%" y="309" width="0.0784%" height="15" fill="rgb(215,96,23)" fg:x="855" fg:w="1"/><text x="67.3088%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.0588%" y="293" width="0.0784%" height="15" fill="rgb(233,179,26)" fg:x="855" fg:w="1"/><text x="67.3088%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.0588%" y="277" width="0.0784%" height="15" fill="rgb(225,129,33)" fg:x="855" fg:w="1"/><text x="67.3088%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.0588%" y="261" width="0.0784%" height="15" fill="rgb(237,49,13)" fg:x="855" fg:w="1"/><text x="67.3088%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.0588%" y="245" width="0.0784%" height="15" fill="rgb(211,3,31)" fg:x="855" fg:w="1"/><text x="67.3088%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.0588%" y="229" width="0.0784%" height="15" fill="rgb(216,152,19)" fg:x="855" fg:w="1"/><text x="67.3088%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.0588%" y="213" width="0.0784%" height="15" fill="rgb(251,121,35)" fg:x="855" fg:w="1"/><text x="67.3088%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.0588%" y="197" width="0.0784%" height="15" fill="rgb(210,217,47)" fg:x="855" fg:w="1"/><text x="67.3088%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.0588%" y="181" width="0.0784%" height="15" fill="rgb(244,116,22)" fg:x="855" fg:w="1"/><text x="67.3088%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.0588%" y="165" width="0.0784%" height="15" fill="rgb(228,17,21)" fg:x="855" fg:w="1"/><text x="67.3088%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="67.0588%" y="149" width="0.0784%" height="15" fill="rgb(240,149,34)" fg:x="855" fg:w="1"/><text x="67.3088%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="67.0588%" y="133" width="0.0784%" height="15" fill="rgb(208,125,47)" fg:x="855" fg:w="1"/><text x="67.3088%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="67.0588%" y="117" width="0.0784%" height="15" fill="rgb(249,186,39)" fg:x="855" fg:w="1"/><text x="67.3088%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="67.0588%" y="101" width="0.0784%" height="15" fill="rgb(240,220,33)" fg:x="855" fg:w="1"/><text x="67.3088%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.0588%" y="85" width="0.0784%" height="15" fill="rgb(243,110,23)" fg:x="855" fg:w="1"/><text x="67.3088%" y="95.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="67.0588%" y="373" width="0.1569%" height="15" fill="rgb(219,163,46)" fg:x="855" fg:w="2"/><text x="67.3088%" y="383.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="67.0588%" y="357" width="0.1569%" height="15" fill="rgb(216,126,30)" fg:x="855" fg:w="2"/><text x="67.3088%" y="367.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="67.0588%" y="341" width="0.1569%" height="15" fill="rgb(208,139,11)" fg:x="855" fg:w="2"/><text x="67.3088%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.1373%" y="325" width="0.0784%" height="15" fill="rgb(213,118,36)" fg:x="856" fg:w="1"/><text x="67.3873%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.1373%" y="309" width="0.0784%" height="15" fill="rgb(226,43,17)" fg:x="856" fg:w="1"/><text x="67.3873%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.1373%" y="293" width="0.0784%" height="15" fill="rgb(254,217,4)" fg:x="856" fg:w="1"/><text x="67.3873%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.1373%" y="277" width="0.0784%" height="15" fill="rgb(210,134,47)" fg:x="856" fg:w="1"/><text x="67.3873%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="67.1373%" y="261" width="0.0784%" height="15" fill="rgb(237,24,49)" fg:x="856" fg:w="1"/><text x="67.3873%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.1373%" y="245" width="0.0784%" height="15" fill="rgb(251,39,46)" fg:x="856" fg:w="1"/><text x="67.3873%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::size_hint (1 samples, 0.08%)</title><rect x="67.1373%" y="229" width="0.0784%" height="15" fill="rgb(251,220,3)" fg:x="856" fg:w="1"/><text x="67.3873%" y="239.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (17 samples, 1.33%)</title><rect x="66.0392%" y="405" width="1.3333%" height="15" fill="rgb(228,105,12)" fg:x="842" fg:w="17"/><text x="66.2892%" y="415.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (17 samples, 1.33%)</title><rect x="66.0392%" y="389" width="1.3333%" height="15" fill="rgb(215,196,1)" fg:x="842" fg:w="17"/><text x="66.2892%" y="399.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="67.2157%" y="373" width="0.1569%" height="15" fill="rgb(214,33,39)" fg:x="857" fg:w="2"/><text x="67.4657%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="67.2157%" y="357" width="0.1569%" height="15" fill="rgb(220,19,52)" fg:x="857" fg:w="2"/><text x="67.4657%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.16%)</title><rect x="67.2157%" y="341" width="0.1569%" height="15" fill="rgb(221,78,38)" fg:x="857" fg:w="2"/><text x="67.4657%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="67.2157%" y="325" width="0.1569%" height="15" fill="rgb(253,30,16)" fg:x="857" fg:w="2"/><text x="67.4657%" y="335.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="67.2157%" y="309" width="0.1569%" height="15" fill="rgb(242,65,0)" fg:x="857" fg:w="2"/><text x="67.4657%" y="319.50"></text></g><g><title>core::iter::adapters::try_process (18 samples, 1.41%)</title><rect x="66.0392%" y="453" width="1.4118%" height="15" fill="rgb(235,201,12)" fg:x="842" fg:w="18"/><text x="66.2892%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (18 samples, 1.41%)</title><rect x="66.0392%" y="437" width="1.4118%" height="15" fill="rgb(233,161,9)" fg:x="842" fg:w="18"/><text x="66.2892%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (18 samples, 1.41%)</title><rect x="66.0392%" y="421" width="1.4118%" height="15" fill="rgb(241,207,41)" fg:x="842" fg:w="18"/><text x="66.2892%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.3725%" y="405" width="0.0784%" height="15" fill="rgb(212,69,46)" fg:x="859" fg:w="1"/><text x="67.6225%" y="415.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (19 samples, 1.49%)</title><rect x="66.0392%" y="469" width="1.4902%" height="15" fill="rgb(239,69,45)" fg:x="842" fg:w="19"/><text x="66.2892%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="67.4510%" y="453" width="0.0784%" height="15" fill="rgb(242,117,48)" fg:x="860" fg:w="1"/><text x="67.7010%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.4510%" y="437" width="0.0784%" height="15" fill="rgb(228,41,36)" fg:x="860" fg:w="1"/><text x="67.7010%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="67.6863%" y="357" width="0.0784%" height="15" fill="rgb(212,3,32)" fg:x="863" fg:w="1"/><text x="67.9363%" y="367.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (700 samples, 54.90%)</title><rect x="12.9412%" y="533" width="54.9020%" height="15" fill="rgb(233,41,49)" fg:x="165" fg:w="700"/><text x="13.1912%" y="543.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (700 samples, 54.90%)</title><rect x="12.9412%" y="517" width="54.9020%" height="15" fill="rgb(252,170,49)" fg:x="165" fg:w="700"/><text x="13.1912%" y="527.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (24 samples, 1.88%)</title><rect x="65.9608%" y="501" width="1.8824%" height="15" fill="rgb(229,53,26)" fg:x="841" fg:w="24"/><text x="66.2108%" y="511.50">k..</text></g><g><title>kernel::model::scopes::Scopes::load_scope (24 samples, 1.88%)</title><rect x="65.9608%" y="485" width="1.8824%" height="15" fill="rgb(217,157,12)" fg:x="841" fg:w="24"/><text x="66.2108%" y="495.50">k..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.31%)</title><rect x="67.5294%" y="469" width="0.3137%" height="15" fill="rgb(227,17,9)" fg:x="861" fg:w="4"/><text x="67.7794%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.31%)</title><rect x="67.5294%" y="453" width="0.3137%" height="15" fill="rgb(218,84,12)" fg:x="861" fg:w="4"/><text x="67.7794%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (3 samples, 0.24%)</title><rect x="67.6078%" y="437" width="0.2353%" height="15" fill="rgb(212,79,24)" fg:x="862" fg:w="3"/><text x="67.8578%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (3 samples, 0.24%)</title><rect x="67.6078%" y="421" width="0.2353%" height="15" fill="rgb(217,222,37)" fg:x="862" fg:w="3"/><text x="67.8578%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 0.24%)</title><rect x="67.6078%" y="405" width="0.2353%" height="15" fill="rgb(246,208,8)" fg:x="862" fg:w="3"/><text x="67.8578%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="67.6078%" y="389" width="0.2353%" height="15" fill="rgb(244,133,10)" fg:x="862" fg:w="3"/><text x="67.8578%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="67.6078%" y="373" width="0.2353%" height="15" fill="rgb(209,219,41)" fg:x="862" fg:w="3"/><text x="67.8578%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="67.7647%" y="357" width="0.0784%" height="15" fill="rgb(253,175,45)" fg:x="864" fg:w="1"/><text x="68.0147%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (712 samples, 55.84%)</title><rect x="12.0784%" y="725" width="55.8431%" height="15" fill="rgb(235,100,37)" fg:x="154" fg:w="712"/><text x="12.3284%" y="735.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (712 samples, 55.84%)</title><rect x="12.0784%" y="709" width="55.8431%" height="15" fill="rgb(225,87,19)" fg:x="154" fg:w="712"/><text x="12.3284%" y="719.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (711 samples, 55.76%)</title><rect x="12.1569%" y="693" width="55.7647%" height="15" fill="rgb(217,152,17)" fg:x="155" fg:w="711"/><text x="12.4069%" y="703.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (710 samples, 55.69%)</title><rect x="12.2353%" y="677" width="55.6863%" height="15" fill="rgb(235,72,13)" fg:x="156" fg:w="710"/><text x="12.4853%" y="687.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (701 samples, 54.98%)</title><rect x="12.9412%" y="661" width="54.9804%" height="15" fill="rgb(233,140,18)" fg:x="165" fg:w="701"/><text x="13.1912%" y="671.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (701 samples, 54.98%)</title><rect x="12.9412%" y="645" width="54.9804%" height="15" fill="rgb(207,212,28)" fg:x="165" fg:w="701"/><text x="13.1912%" y="655.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (701 samples, 54.98%)</title><rect x="12.9412%" y="629" width="54.9804%" height="15" fill="rgb(220,130,25)" fg:x="165" fg:w="701"/><text x="13.1912%" y="639.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (701 samples, 54.98%)</title><rect x="12.9412%" y="613" width="54.9804%" height="15" fill="rgb(205,55,34)" fg:x="165" fg:w="701"/><text x="13.1912%" y="623.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (701 samples, 54.98%)</title><rect x="12.9412%" y="597" width="54.9804%" height="15" fill="rgb(237,54,35)" fg:x="165" fg:w="701"/><text x="13.1912%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (701 samples, 54.98%)</title><rect x="12.9412%" y="581" width="54.9804%" height="15" fill="rgb(208,67,23)" fg:x="165" fg:w="701"/><text x="13.1912%" y="591.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (701 samples, 54.98%)</title><rect x="12.9412%" y="565" width="54.9804%" height="15" fill="rgb(206,207,50)" fg:x="165" fg:w="701"/><text x="13.1912%" y="575.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (701 samples, 54.98%)</title><rect x="12.9412%" y="549" width="54.9804%" height="15" fill="rgb(213,211,42)" fg:x="165" fg:w="701"/><text x="13.1912%" y="559.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform</text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="67.8431%" y="533" width="0.0784%" height="15" fill="rgb(252,197,50)" fg:x="865" fg:w="1"/><text x="68.0931%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.8431%" y="517" width="0.0784%" height="15" fill="rgb(251,211,41)" fg:x="865" fg:w="1"/><text x="68.0931%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.9216%" y="565" width="0.0784%" height="15" fill="rgb(229,211,5)" fg:x="866" fg:w="1"/><text x="68.1716%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.9216%" y="549" width="0.0784%" height="15" fill="rgb(239,36,31)" fg:x="866" fg:w="1"/><text x="68.1716%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.9216%" y="533" width="0.0784%" height="15" fill="rgb(248,67,31)" fg:x="866" fg:w="1"/><text x="68.1716%" y="543.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="67.9216%" y="677" width="0.1569%" height="15" fill="rgb(249,55,44)" fg:x="866" fg:w="2"/><text x="68.1716%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="67.9216%" y="661" width="0.1569%" height="15" fill="rgb(216,82,12)" fg:x="866" fg:w="2"/><text x="68.1716%" y="671.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="67.9216%" y="645" width="0.1569%" height="15" fill="rgb(242,174,1)" fg:x="866" fg:w="2"/><text x="68.1716%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="67.9216%" y="629" width="0.1569%" height="15" fill="rgb(208,120,29)" fg:x="866" fg:w="2"/><text x="68.1716%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="67.9216%" y="613" width="0.1569%" height="15" fill="rgb(221,105,43)" fg:x="866" fg:w="2"/><text x="68.1716%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="67.9216%" y="597" width="0.1569%" height="15" fill="rgb(234,124,22)" fg:x="866" fg:w="2"/><text x="68.1716%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="67.9216%" y="581" width="0.1569%" height="15" fill="rgb(212,23,30)" fg:x="866" fg:w="2"/><text x="68.1716%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.0000%" y="565" width="0.0784%" height="15" fill="rgb(219,122,53)" fg:x="867" fg:w="1"/><text x="68.2500%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.0000%" y="549" width="0.0784%" height="15" fill="rgb(248,84,24)" fg:x="867" fg:w="1"/><text x="68.2500%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.0000%" y="533" width="0.0784%" height="15" fill="rgb(245,115,18)" fg:x="867" fg:w="1"/><text x="68.2500%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.0000%" y="517" width="0.0784%" height="15" fill="rgb(227,176,51)" fg:x="867" fg:w="1"/><text x="68.2500%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.0000%" y="501" width="0.0784%" height="15" fill="rgb(229,63,42)" fg:x="867" fg:w="1"/><text x="68.2500%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (4 samples, 0.31%)</title><rect x="67.9216%" y="693" width="0.3137%" height="15" fill="rgb(247,202,24)" fg:x="866" fg:w="4"/><text x="68.1716%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="68.0784%" y="677" width="0.1569%" height="15" fill="rgb(244,173,20)" fg:x="868" fg:w="2"/><text x="68.3284%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.0784%" y="661" width="0.1569%" height="15" fill="rgb(242,81,47)" fg:x="868" fg:w="2"/><text x="68.3284%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="68.1569%" y="645" width="0.0784%" height="15" fill="rgb(231,185,54)" fg:x="869" fg:w="1"/><text x="68.4069%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.1569%" y="629" width="0.0784%" height="15" fill="rgb(243,55,32)" fg:x="869" fg:w="1"/><text x="68.4069%" y="639.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.1569%" y="613" width="0.0784%" height="15" fill="rgb(208,167,19)" fg:x="869" fg:w="1"/><text x="68.4069%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.1569%" y="597" width="0.0784%" height="15" fill="rgb(231,72,35)" fg:x="869" fg:w="1"/><text x="68.4069%" y="607.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.1569%" y="581" width="0.0784%" height="15" fill="rgb(250,173,51)" fg:x="869" fg:w="1"/><text x="68.4069%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="68.1569%" y="565" width="0.0784%" height="15" fill="rgb(209,5,22)" fg:x="869" fg:w="1"/><text x="68.4069%" y="575.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="68.1569%" y="549" width="0.0784%" height="15" fill="rgb(250,174,19)" fg:x="869" fg:w="1"/><text x="68.4069%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="68.1569%" y="533" width="0.0784%" height="15" fill="rgb(217,3,49)" fg:x="869" fg:w="1"/><text x="68.4069%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.1569%" y="517" width="0.0784%" height="15" fill="rgb(218,225,5)" fg:x="869" fg:w="1"/><text x="68.4069%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.1569%" y="501" width="0.0784%" height="15" fill="rgb(236,89,11)" fg:x="869" fg:w="1"/><text x="68.4069%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="68.1569%" y="485" width="0.0784%" height="15" fill="rgb(206,33,28)" fg:x="869" fg:w="1"/><text x="68.4069%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (5 samples, 0.39%)</title><rect x="67.9216%" y="725" width="0.3922%" height="15" fill="rgb(241,56,42)" fg:x="866" fg:w="5"/><text x="68.1716%" y="735.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.39%)</title><rect x="67.9216%" y="709" width="0.3922%" height="15" fill="rgb(222,44,11)" fg:x="866" fg:w="5"/><text x="68.1716%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="68.2353%" y="693" width="0.0784%" height="15" fill="rgb(234,111,20)" fg:x="870" fg:w="1"/><text x="68.4853%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="68.2353%" y="677" width="0.0784%" height="15" fill="rgb(237,77,6)" fg:x="870" fg:w="1"/><text x="68.4853%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="68.2353%" y="661" width="0.0784%" height="15" fill="rgb(235,111,23)" fg:x="870" fg:w="1"/><text x="68.4853%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.2353%" y="645" width="0.0784%" height="15" fill="rgb(251,135,29)" fg:x="870" fg:w="1"/><text x="68.4853%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.2353%" y="629" width="0.0784%" height="15" fill="rgb(217,57,1)" fg:x="870" fg:w="1"/><text x="68.4853%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.2353%" y="613" width="0.0784%" height="15" fill="rgb(249,119,31)" fg:x="870" fg:w="1"/><text x="68.4853%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.2353%" y="597" width="0.0784%" height="15" fill="rgb(233,164,33)" fg:x="870" fg:w="1"/><text x="68.4853%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="68.2353%" y="581" width="0.0784%" height="15" fill="rgb(250,217,43)" fg:x="870" fg:w="1"/><text x="68.4853%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.2353%" y="565" width="0.0784%" height="15" fill="rgb(232,154,50)" fg:x="870" fg:w="1"/><text x="68.4853%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="68.2353%" y="549" width="0.0784%" height="15" fill="rgb(227,190,8)" fg:x="870" fg:w="1"/><text x="68.4853%" y="559.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.3137%" y="677" width="0.0784%" height="15" fill="rgb(209,217,32)" fg:x="871" fg:w="1"/><text x="68.5637%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.3137%" y="661" width="0.0784%" height="15" fill="rgb(243,203,50)" fg:x="871" fg:w="1"/><text x="68.5637%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.3137%" y="645" width="0.0784%" height="15" fill="rgb(232,152,27)" fg:x="871" fg:w="1"/><text x="68.5637%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.3137%" y="629" width="0.0784%" height="15" fill="rgb(240,34,29)" fg:x="871" fg:w="1"/><text x="68.5637%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.3137%" y="613" width="0.0784%" height="15" fill="rgb(215,185,52)" fg:x="871" fg:w="1"/><text x="68.5637%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.3137%" y="597" width="0.0784%" height="15" fill="rgb(240,89,49)" fg:x="871" fg:w="1"/><text x="68.5637%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.3137%" y="581" width="0.0784%" height="15" fill="rgb(225,12,52)" fg:x="871" fg:w="1"/><text x="68.5637%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.3137%" y="565" width="0.0784%" height="15" fill="rgb(239,128,45)" fg:x="871" fg:w="1"/><text x="68.5637%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.3137%" y="549" width="0.0784%" height="15" fill="rgb(211,78,47)" fg:x="871" fg:w="1"/><text x="68.5637%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.3137%" y="533" width="0.0784%" height="15" fill="rgb(232,31,21)" fg:x="871" fg:w="1"/><text x="68.5637%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.3137%" y="517" width="0.0784%" height="15" fill="rgb(222,168,14)" fg:x="871" fg:w="1"/><text x="68.5637%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.3137%" y="501" width="0.0784%" height="15" fill="rgb(209,128,24)" fg:x="871" fg:w="1"/><text x="68.5637%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.3137%" y="485" width="0.0784%" height="15" fill="rgb(249,35,13)" fg:x="871" fg:w="1"/><text x="68.5637%" y="495.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="68.3922%" y="661" width="0.1569%" height="15" fill="rgb(218,7,2)" fg:x="872" fg:w="2"/><text x="68.6422%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="68.3922%" y="645" width="0.1569%" height="15" fill="rgb(238,107,27)" fg:x="872" fg:w="2"/><text x="68.6422%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.3922%" y="629" width="0.1569%" height="15" fill="rgb(217,88,38)" fg:x="872" fg:w="2"/><text x="68.6422%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="68.3922%" y="613" width="0.1569%" height="15" fill="rgb(230,207,0)" fg:x="872" fg:w="2"/><text x="68.6422%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.3922%" y="597" width="0.1569%" height="15" fill="rgb(249,64,54)" fg:x="872" fg:w="2"/><text x="68.6422%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="68.3922%" y="581" width="0.1569%" height="15" fill="rgb(231,7,11)" fg:x="872" fg:w="2"/><text x="68.6422%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.4706%" y="565" width="0.0784%" height="15" fill="rgb(205,149,21)" fg:x="873" fg:w="1"/><text x="68.7206%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.4706%" y="549" width="0.0784%" height="15" fill="rgb(215,126,34)" fg:x="873" fg:w="1"/><text x="68.7206%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.4706%" y="533" width="0.0784%" height="15" fill="rgb(241,132,45)" fg:x="873" fg:w="1"/><text x="68.7206%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.4706%" y="517" width="0.0784%" height="15" fill="rgb(252,69,32)" fg:x="873" fg:w="1"/><text x="68.7206%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.4706%" y="501" width="0.0784%" height="15" fill="rgb(232,204,19)" fg:x="873" fg:w="1"/><text x="68.7206%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.4706%" y="485" width="0.0784%" height="15" fill="rgb(249,15,47)" fg:x="873" fg:w="1"/><text x="68.7206%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.4706%" y="469" width="0.0784%" height="15" fill="rgb(209,227,23)" fg:x="873" fg:w="1"/><text x="68.7206%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.4706%" y="453" width="0.0784%" height="15" fill="rgb(248,92,24)" fg:x="873" fg:w="1"/><text x="68.7206%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.4706%" y="437" width="0.0784%" height="15" fill="rgb(247,59,2)" fg:x="873" fg:w="1"/><text x="68.7206%" y="447.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="68.4706%" y="421" width="0.0784%" height="15" fill="rgb(221,30,5)" fg:x="873" fg:w="1"/><text x="68.7206%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="68.6275%" y="517" width="0.0784%" height="15" fill="rgb(208,108,53)" fg:x="875" fg:w="1"/><text x="68.8775%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.6275%" y="501" width="0.0784%" height="15" fill="rgb(211,183,26)" fg:x="875" fg:w="1"/><text x="68.8775%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (6 samples, 0.47%)</title><rect x="68.3137%" y="725" width="0.4706%" height="15" fill="rgb(232,132,4)" fg:x="871" fg:w="6"/><text x="68.5637%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (6 samples, 0.47%)</title><rect x="68.3137%" y="709" width="0.4706%" height="15" fill="rgb(253,128,37)" fg:x="871" fg:w="6"/><text x="68.5637%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.47%)</title><rect x="68.3137%" y="693" width="0.4706%" height="15" fill="rgb(221,58,24)" fg:x="871" fg:w="6"/><text x="68.5637%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (5 samples, 0.39%)</title><rect x="68.3922%" y="677" width="0.3922%" height="15" fill="rgb(230,54,45)" fg:x="872" fg:w="5"/><text x="68.6422%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="68.5490%" y="661" width="0.2353%" height="15" fill="rgb(254,21,18)" fg:x="874" fg:w="3"/><text x="68.7990%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="68.5490%" y="645" width="0.2353%" height="15" fill="rgb(221,108,0)" fg:x="874" fg:w="3"/><text x="68.7990%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="68.6275%" y="629" width="0.1569%" height="15" fill="rgb(206,95,1)" fg:x="875" fg:w="2"/><text x="68.8775%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.6275%" y="613" width="0.1569%" height="15" fill="rgb(237,52,5)" fg:x="875" fg:w="2"/><text x="68.8775%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="68.6275%" y="597" width="0.1569%" height="15" fill="rgb(218,150,34)" fg:x="875" fg:w="2"/><text x="68.8775%" y="607.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="68.6275%" y="581" width="0.1569%" height="15" fill="rgb(235,194,28)" fg:x="875" fg:w="2"/><text x="68.8775%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.6275%" y="565" width="0.1569%" height="15" fill="rgb(245,92,18)" fg:x="875" fg:w="2"/><text x="68.8775%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="68.6275%" y="549" width="0.1569%" height="15" fill="rgb(253,203,53)" fg:x="875" fg:w="2"/><text x="68.8775%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.6275%" y="533" width="0.1569%" height="15" fill="rgb(249,185,47)" fg:x="875" fg:w="2"/><text x="68.8775%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.7059%" y="517" width="0.0784%" height="15" fill="rgb(252,194,52)" fg:x="876" fg:w="1"/><text x="68.9559%" y="527.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (725 samples, 56.86%)</title><rect x="12.0000%" y="741" width="56.8627%" height="15" fill="rgb(210,53,36)" fg:x="153" fg:w="725"/><text x="12.2500%" y="751.50">engine::session::Session::evaluate_and_perform</text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="68.7843%" y="725" width="0.0784%" height="15" fill="rgb(237,37,25)" fg:x="877" fg:w="1"/><text x="69.0343%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="68.7843%" y="709" width="0.0784%" height="15" fill="rgb(242,116,27)" fg:x="877" fg:w="1"/><text x="69.0343%" y="719.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="68.7843%" y="693" width="0.0784%" height="15" fill="rgb(213,185,26)" fg:x="877" fg:w="1"/><text x="69.0343%" y="703.50"></text></g><g><title>&lt;plugins_core::looking::parser::LookActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="68.7843%" y="677" width="0.0784%" height="15" fill="rgb(225,204,8)" fg:x="877" fg:w="1"/><text x="69.0343%" y="687.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="68.7843%" y="661" width="0.0784%" height="15" fill="rgb(254,111,37)" fg:x="877" fg:w="1"/><text x="69.0343%" y="671.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="68.7843%" y="645" width="0.0784%" height="15" fill="rgb(242,35,9)" fg:x="877" fg:w="1"/><text x="69.0343%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (879 samples, 68.94%)</title><rect x="0.0000%" y="789" width="68.9412%" height="15" fill="rgb(232,138,49)" fg:x="0" fg:w="879"/><text x="0.2500%" y="799.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (879 samples, 68.94%)</title><rect x="0.0000%" y="773" width="68.9412%" height="15" fill="rgb(247,56,4)" fg:x="0" fg:w="879"/><text x="0.2500%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (879 samples, 68.94%)</title><rect x="0.0000%" y="757" width="68.9412%" height="15" fill="rgb(226,179,17)" fg:x="0" fg:w="879"/><text x="0.2500%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="68.8627%" y="741" width="0.0784%" height="15" fill="rgb(216,163,45)" fg:x="878" fg:w="1"/><text x="69.1127%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="68.8627%" y="725" width="0.0784%" height="15" fill="rgb(211,157,3)" fg:x="878" fg:w="1"/><text x="69.1127%" y="735.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.8627%" y="709" width="0.0784%" height="15" fill="rgb(234,44,20)" fg:x="878" fg:w="1"/><text x="69.1127%" y="719.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="68.8627%" y="693" width="0.0784%" height="15" fill="rgb(254,138,23)" fg:x="878" fg:w="1"/><text x="69.1127%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="68.9412%" y="677" width="0.0784%" height="15" fill="rgb(206,119,39)" fg:x="879" fg:w="1"/><text x="69.1912%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="68.9412%" y="661" width="0.0784%" height="15" fill="rgb(231,105,52)" fg:x="879" fg:w="1"/><text x="69.1912%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="68.9412%" y="645" width="0.0784%" height="15" fill="rgb(250,20,5)" fg:x="879" fg:w="1"/><text x="69.1912%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.9412%" y="629" width="0.0784%" height="15" fill="rgb(215,198,30)" fg:x="879" fg:w="1"/><text x="69.1912%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.9412%" y="613" width="0.0784%" height="15" fill="rgb(246,142,8)" fg:x="879" fg:w="1"/><text x="69.1912%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.9412%" y="597" width="0.0784%" height="15" fill="rgb(243,26,38)" fg:x="879" fg:w="1"/><text x="69.1912%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.9412%" y="581" width="0.0784%" height="15" fill="rgb(205,133,28)" fg:x="879" fg:w="1"/><text x="69.1912%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="68.9412%" y="741" width="0.1569%" height="15" fill="rgb(212,34,0)" fg:x="879" fg:w="2"/><text x="69.1912%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (2 samples, 0.16%)</title><rect x="68.9412%" y="725" width="0.1569%" height="15" fill="rgb(251,226,22)" fg:x="879" fg:w="2"/><text x="69.1912%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="68.9412%" y="709" width="0.1569%" height="15" fill="rgb(252,119,9)" fg:x="879" fg:w="2"/><text x="69.1912%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (2 samples, 0.16%)</title><rect x="68.9412%" y="693" width="0.1569%" height="15" fill="rgb(213,150,50)" fg:x="879" fg:w="2"/><text x="69.1912%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.0196%" y="677" width="0.0784%" height="15" fill="rgb(212,24,39)" fg:x="880" fg:w="1"/><text x="69.2696%" y="687.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (4 samples, 0.31%)</title><rect x="69.0980%" y="677" width="0.3137%" height="15" fill="rgb(213,46,39)" fg:x="881" fg:w="4"/><text x="69.3480%" y="687.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.31%)</title><rect x="69.0980%" y="661" width="0.3137%" height="15" fill="rgb(239,106,12)" fg:x="881" fg:w="4"/><text x="69.3480%" y="671.50"></text></g><g><title>libloading::safe::Library::new (4 samples, 0.31%)</title><rect x="69.0980%" y="645" width="0.3137%" height="15" fill="rgb(249,229,21)" fg:x="881" fg:w="4"/><text x="69.3480%" y="655.50"></text></g><g><title>dlopen (4 samples, 0.31%)</title><rect x="69.0980%" y="629" width="0.3137%" height="15" fill="rgb(212,158,3)" fg:x="881" fg:w="4"/><text x="69.3480%" y="639.50"></text></g><g><title>_dl_catch_error (4 samples, 0.31%)</title><rect x="69.0980%" y="613" width="0.3137%" height="15" fill="rgb(253,26,48)" fg:x="881" fg:w="4"/><text x="69.3480%" y="623.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.31%)</title><rect x="69.0980%" y="597" width="0.3137%" height="15" fill="rgb(238,178,20)" fg:x="881" fg:w="4"/><text x="69.3480%" y="607.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.31%)</title><rect x="69.0980%" y="581" width="0.3137%" height="15" fill="rgb(208,86,15)" fg:x="881" fg:w="4"/><text x="69.3480%" y="591.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="69.1765%" y="565" width="0.2353%" height="15" fill="rgb(239,42,53)" fg:x="882" fg:w="3"/><text x="69.4265%" y="575.50"></text></g><g><title>_dl_signal_error (1 samples, 0.08%)</title><rect x="69.3333%" y="549" width="0.0784%" height="15" fill="rgb(245,226,8)" fg:x="884" fg:w="1"/><text x="69.5833%" y="559.50"></text></g><g><title>_dl_exception_create (1 samples, 0.08%)</title><rect x="69.3333%" y="533" width="0.0784%" height="15" fill="rgb(216,176,32)" fg:x="884" fg:w="1"/><text x="69.5833%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.3333%" y="517" width="0.0784%" height="15" fill="rgb(231,186,21)" fg:x="884" fg:w="1"/><text x="69.5833%" y="527.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (5 samples, 0.39%)</title><rect x="69.0980%" y="741" width="0.3922%" height="15" fill="rgb(205,95,49)" fg:x="881" fg:w="5"/><text x="69.3480%" y="751.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (5 samples, 0.39%)</title><rect x="69.0980%" y="725" width="0.3922%" height="15" fill="rgb(217,145,8)" fg:x="881" fg:w="5"/><text x="69.3480%" y="735.50"></text></g><g><title>engine::session::Session::new (5 samples, 0.39%)</title><rect x="69.0980%" y="709" width="0.3922%" height="15" fill="rgb(239,144,48)" fg:x="881" fg:w="5"/><text x="69.3480%" y="719.50"></text></g><g><title>engine::session::Session::initialize (5 samples, 0.39%)</title><rect x="69.0980%" y="693" width="0.3922%" height="15" fill="rgb(214,189,23)" fg:x="881" fg:w="5"/><text x="69.3480%" y="703.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="69.4118%" y="677" width="0.0784%" height="15" fill="rgb(229,157,17)" fg:x="885" fg:w="1"/><text x="69.6618%" y="687.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="69.4118%" y="661" width="0.0784%" height="15" fill="rgb(230,5,48)" fg:x="885" fg:w="1"/><text x="69.6618%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="69.4118%" y="645" width="0.0784%" height="15" fill="rgb(224,156,48)" fg:x="885" fg:w="1"/><text x="69.6618%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="69.4118%" y="629" width="0.0784%" height="15" fill="rgb(223,14,29)" fg:x="885" fg:w="1"/><text x="69.6618%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.4118%" y="613" width="0.0784%" height="15" fill="rgb(229,96,36)" fg:x="885" fg:w="1"/><text x="69.6618%" y="623.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="69.4118%" y="597" width="0.0784%" height="15" fill="rgb(231,102,53)" fg:x="885" fg:w="1"/><text x="69.6618%" y="607.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="69.4902%" y="677" width="0.0784%" height="15" fill="rgb(210,77,38)" fg:x="886" fg:w="1"/><text x="69.7402%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="69.4902%" y="661" width="0.0784%" height="15" fill="rgb(235,131,6)" fg:x="886" fg:w="1"/><text x="69.7402%" y="671.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="69.4902%" y="645" width="0.0784%" height="15" fill="rgb(252,55,38)" fg:x="886" fg:w="1"/><text x="69.7402%" y="655.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="69.5686%" y="645" width="0.1569%" height="15" fill="rgb(246,38,14)" fg:x="887" fg:w="2"/><text x="69.8186%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="69.5686%" y="629" width="0.1569%" height="15" fill="rgb(242,27,5)" fg:x="887" fg:w="2"/><text x="69.8186%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="69.5686%" y="613" width="0.1569%" height="15" fill="rgb(228,65,35)" fg:x="887" fg:w="2"/><text x="69.8186%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="69.5686%" y="597" width="0.1569%" height="15" fill="rgb(245,93,11)" fg:x="887" fg:w="2"/><text x="69.8186%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="69.6471%" y="581" width="0.0784%" height="15" fill="rgb(213,1,31)" fg:x="888" fg:w="1"/><text x="69.8971%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="69.6471%" y="565" width="0.0784%" height="15" fill="rgb(237,205,14)" fg:x="888" fg:w="1"/><text x="69.8971%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.7255%" y="645" width="0.0784%" height="15" fill="rgb(232,118,45)" fg:x="889" fg:w="1"/><text x="69.9755%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="69.7255%" y="629" width="0.0784%" height="15" fill="rgb(218,5,6)" fg:x="889" fg:w="1"/><text x="69.9755%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.7255%" y="613" width="0.0784%" height="15" fill="rgb(251,87,51)" fg:x="889" fg:w="1"/><text x="69.9755%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.7255%" y="597" width="0.0784%" height="15" fill="rgb(207,225,20)" fg:x="889" fg:w="1"/><text x="69.9755%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.7255%" y="581" width="0.0784%" height="15" fill="rgb(222,78,54)" fg:x="889" fg:w="1"/><text x="69.9755%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="69.8039%" y="533" width="0.0784%" height="15" fill="rgb(232,85,16)" fg:x="890" fg:w="1"/><text x="70.0539%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="69.8039%" y="517" width="0.0784%" height="15" fill="rgb(244,25,33)" fg:x="890" fg:w="1"/><text x="70.0539%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="69.8039%" y="501" width="0.0784%" height="15" fill="rgb(233,24,36)" fg:x="890" fg:w="1"/><text x="70.0539%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="69.8039%" y="485" width="0.0784%" height="15" fill="rgb(253,49,54)" fg:x="890" fg:w="1"/><text x="70.0539%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="69.8039%" y="469" width="0.0784%" height="15" fill="rgb(245,12,22)" fg:x="890" fg:w="1"/><text x="70.0539%" y="479.50"></text></g><g><title>engine::session::Session::flush (6 samples, 0.47%)</title><rect x="69.4902%" y="725" width="0.4706%" height="15" fill="rgb(253,141,28)" fg:x="886" fg:w="6"/><text x="69.7402%" y="735.50"></text></g><g><title>engine::session::state::State::close (6 samples, 0.47%)</title><rect x="69.4902%" y="709" width="0.4706%" height="15" fill="rgb(225,207,27)" fg:x="886" fg:w="6"/><text x="69.7402%" y="719.50"></text></g><g><title>engine::session::state::State::flush_entities (6 samples, 0.47%)</title><rect x="69.4902%" y="693" width="0.4706%" height="15" fill="rgb(220,84,2)" fg:x="886" fg:w="6"/><text x="69.7402%" y="703.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (5 samples, 0.39%)</title><rect x="69.5686%" y="677" width="0.3922%" height="15" fill="rgb(224,37,37)" fg:x="887" fg:w="5"/><text x="69.8186%" y="687.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (5 samples, 0.39%)</title><rect x="69.5686%" y="661" width="0.3922%" height="15" fill="rgb(220,143,18)" fg:x="887" fg:w="5"/><text x="69.8186%" y="671.50"></text></g><g><title>kernel::model::any_entity_changes (2 samples, 0.16%)</title><rect x="69.8039%" y="645" width="0.1569%" height="15" fill="rgb(210,88,33)" fg:x="890" fg:w="2"/><text x="70.0539%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="69.8039%" y="629" width="0.1569%" height="15" fill="rgb(219,87,51)" fg:x="890" fg:w="2"/><text x="70.0539%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="69.8039%" y="613" width="0.1569%" height="15" fill="rgb(211,7,35)" fg:x="890" fg:w="2"/><text x="70.0539%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="69.8039%" y="597" width="0.1569%" height="15" fill="rgb(232,77,2)" fg:x="890" fg:w="2"/><text x="70.0539%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="69.8039%" y="581" width="0.1569%" height="15" fill="rgb(249,94,25)" fg:x="890" fg:w="2"/><text x="70.0539%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="69.8039%" y="565" width="0.1569%" height="15" fill="rgb(215,112,2)" fg:x="890" fg:w="2"/><text x="70.0539%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="69.8039%" y="549" width="0.1569%" height="15" fill="rgb(226,115,48)" fg:x="890" fg:w="2"/><text x="70.0539%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.8824%" y="533" width="0.0784%" height="15" fill="rgb(249,196,10)" fg:x="891" fg:w="1"/><text x="70.1324%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="69.9608%" y="709" width="0.1569%" height="15" fill="rgb(237,109,14)" fg:x="892" fg:w="2"/><text x="70.2108%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="69.9608%" y="693" width="0.1569%" height="15" fill="rgb(217,103,53)" fg:x="892" fg:w="2"/><text x="70.2108%" y="703.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="69.9608%" y="677" width="0.1569%" height="15" fill="rgb(244,137,9)" fg:x="892" fg:w="2"/><text x="70.2108%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="69.9608%" y="661" width="0.1569%" height="15" fill="rgb(227,201,3)" fg:x="892" fg:w="2"/><text x="70.2108%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.16%)</title><rect x="69.9608%" y="645" width="0.1569%" height="15" fill="rgb(243,94,6)" fg:x="892" fg:w="2"/><text x="70.2108%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="69.9608%" y="629" width="0.1569%" height="15" fill="rgb(235,118,5)" fg:x="892" fg:w="2"/><text x="70.2108%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.0392%" y="613" width="0.0784%" height="15" fill="rgb(247,10,30)" fg:x="893" fg:w="1"/><text x="70.2892%" y="623.50"></text></g><g><title>plugins_core::build::Build::holding (3 samples, 0.24%)</title><rect x="69.9608%" y="725" width="0.2353%" height="15" fill="rgb(205,26,28)" fg:x="892" fg:w="3"/><text x="70.2108%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="70.1176%" y="709" width="0.0784%" height="15" fill="rgb(206,99,35)" fg:x="894" fg:w="1"/><text x="70.3676%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="70.1176%" y="693" width="0.0784%" height="15" fill="rgb(238,130,40)" fg:x="894" fg:w="1"/><text x="70.3676%" y="703.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="70.1176%" y="677" width="0.0784%" height="15" fill="rgb(224,126,31)" fg:x="894" fg:w="1"/><text x="70.3676%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="70.1176%" y="661" width="0.0784%" height="15" fill="rgb(254,105,17)" fg:x="894" fg:w="1"/><text x="70.3676%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="70.1176%" y="645" width="0.0784%" height="15" fill="rgb(216,87,36)" fg:x="894" fg:w="1"/><text x="70.3676%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="70.1176%" y="629" width="0.0784%" height="15" fill="rgb(240,21,12)" fg:x="894" fg:w="1"/><text x="70.3676%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="70.1176%" y="613" width="0.0784%" height="15" fill="rgb(245,192,34)" fg:x="894" fg:w="1"/><text x="70.3676%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.1176%" y="597" width="0.0784%" height="15" fill="rgb(226,100,49)" fg:x="894" fg:w="1"/><text x="70.3676%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.1176%" y="581" width="0.0784%" height="15" fill="rgb(245,188,27)" fg:x="894" fg:w="1"/><text x="70.3676%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.1176%" y="565" width="0.0784%" height="15" fill="rgb(212,170,8)" fg:x="894" fg:w="1"/><text x="70.3676%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.1176%" y="549" width="0.0784%" height="15" fill="rgb(217,113,29)" fg:x="894" fg:w="1"/><text x="70.3676%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="70.1176%" y="533" width="0.0784%" height="15" fill="rgb(237,30,3)" fg:x="894" fg:w="1"/><text x="70.3676%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.1176%" y="517" width="0.0784%" height="15" fill="rgb(227,19,28)" fg:x="894" fg:w="1"/><text x="70.3676%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.1176%" y="501" width="0.0784%" height="15" fill="rgb(239,172,45)" fg:x="894" fg:w="1"/><text x="70.3676%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.1176%" y="485" width="0.0784%" height="15" fill="rgb(254,55,39)" fg:x="894" fg:w="1"/><text x="70.3676%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.1176%" y="469" width="0.0784%" height="15" fill="rgb(249,208,12)" fg:x="894" fg:w="1"/><text x="70.3676%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="70.1961%" y="709" width="0.0784%" height="15" fill="rgb(240,52,13)" fg:x="895" fg:w="1"/><text x="70.4461%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="70.1961%" y="693" width="0.0784%" height="15" fill="rgb(252,149,13)" fg:x="895" fg:w="1"/><text x="70.4461%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="70.1961%" y="677" width="0.0784%" height="15" fill="rgb(232,81,48)" fg:x="895" fg:w="1"/><text x="70.4461%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="70.1961%" y="661" width="0.0784%" height="15" fill="rgb(222,144,2)" fg:x="895" fg:w="1"/><text x="70.4461%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.1961%" y="645" width="0.0784%" height="15" fill="rgb(216,81,32)" fg:x="895" fg:w="1"/><text x="70.4461%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.1961%" y="629" width="0.0784%" height="15" fill="rgb(244,78,51)" fg:x="895" fg:w="1"/><text x="70.4461%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.1961%" y="613" width="0.0784%" height="15" fill="rgb(217,66,21)" fg:x="895" fg:w="1"/><text x="70.4461%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.1961%" y="597" width="0.0784%" height="15" fill="rgb(247,101,42)" fg:x="895" fg:w="1"/><text x="70.4461%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.1961%" y="581" width="0.0784%" height="15" fill="rgb(227,81,39)" fg:x="895" fg:w="1"/><text x="70.4461%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.1961%" y="565" width="0.0784%" height="15" fill="rgb(220,223,44)" fg:x="895" fg:w="1"/><text x="70.4461%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.1961%" y="549" width="0.0784%" height="15" fill="rgb(205,218,2)" fg:x="895" fg:w="1"/><text x="70.4461%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="70.1961%" y="533" width="0.0784%" height="15" fill="rgb(212,207,28)" fg:x="895" fg:w="1"/><text x="70.4461%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="70.1961%" y="517" width="0.0784%" height="15" fill="rgb(224,12,41)" fg:x="895" fg:w="1"/><text x="70.4461%" y="527.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="70.2745%" y="709" width="0.1569%" height="15" fill="rgb(216,118,12)" fg:x="896" fg:w="2"/><text x="70.5245%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="70.2745%" y="693" width="0.1569%" height="15" fill="rgb(252,97,46)" fg:x="896" fg:w="2"/><text x="70.5245%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="70.3529%" y="677" width="0.0784%" height="15" fill="rgb(244,206,19)" fg:x="897" fg:w="1"/><text x="70.6029%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="70.3529%" y="661" width="0.0784%" height="15" fill="rgb(231,84,31)" fg:x="897" fg:w="1"/><text x="70.6029%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="70.3529%" y="645" width="0.0784%" height="15" fill="rgb(244,133,0)" fg:x="897" fg:w="1"/><text x="70.6029%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="70.3529%" y="629" width="0.0784%" height="15" fill="rgb(223,15,50)" fg:x="897" fg:w="1"/><text x="70.6029%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="70.4314%" y="581" width="0.0784%" height="15" fill="rgb(250,118,49)" fg:x="898" fg:w="1"/><text x="70.6814%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="70.4314%" y="565" width="0.0784%" height="15" fill="rgb(248,25,38)" fg:x="898" fg:w="1"/><text x="70.6814%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="70.4314%" y="549" width="0.0784%" height="15" fill="rgb(215,70,14)" fg:x="898" fg:w="1"/><text x="70.6814%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="70.5098%" y="565" width="0.0784%" height="15" fill="rgb(215,28,15)" fg:x="899" fg:w="1"/><text x="70.7598%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="70.5882%" y="533" width="0.0784%" height="15" fill="rgb(243,6,28)" fg:x="900" fg:w="1"/><text x="70.8382%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="70.5882%" y="517" width="0.0784%" height="15" fill="rgb(222,130,1)" fg:x="900" fg:w="1"/><text x="70.8382%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="70.5882%" y="501" width="0.0784%" height="15" fill="rgb(236,166,44)" fg:x="900" fg:w="1"/><text x="70.8382%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="70.5882%" y="485" width="0.0784%" height="15" fill="rgb(221,108,14)" fg:x="900" fg:w="1"/><text x="70.8382%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="70.6667%" y="517" width="0.0784%" height="15" fill="rgb(252,3,45)" fg:x="901" fg:w="1"/><text x="70.9167%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="70.7451%" y="501" width="0.0784%" height="15" fill="rgb(237,68,30)" fg:x="902" fg:w="1"/><text x="70.9951%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="70.7451%" y="485" width="0.0784%" height="15" fill="rgb(211,79,22)" fg:x="902" fg:w="1"/><text x="70.9951%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.47%)</title><rect x="70.4314%" y="613" width="0.4706%" height="15" fill="rgb(252,185,21)" fg:x="898" fg:w="6"/><text x="70.6814%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.47%)</title><rect x="70.4314%" y="597" width="0.4706%" height="15" fill="rgb(225,189,26)" fg:x="898" fg:w="6"/><text x="70.6814%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.39%)</title><rect x="70.5098%" y="581" width="0.3922%" height="15" fill="rgb(241,30,40)" fg:x="899" fg:w="5"/><text x="70.7598%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.31%)</title><rect x="70.5882%" y="565" width="0.3137%" height="15" fill="rgb(235,215,44)" fg:x="900" fg:w="4"/><text x="70.8382%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.31%)</title><rect x="70.5882%" y="549" width="0.3137%" height="15" fill="rgb(205,8,29)" fg:x="900" fg:w="4"/><text x="70.8382%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="70.6667%" y="533" width="0.2353%" height="15" fill="rgb(241,137,42)" fg:x="901" fg:w="3"/><text x="70.9167%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="70.7451%" y="517" width="0.1569%" height="15" fill="rgb(237,155,2)" fg:x="902" fg:w="2"/><text x="70.9951%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="70.8235%" y="501" width="0.0784%" height="15" fill="rgb(245,29,42)" fg:x="903" fg:w="1"/><text x="71.0735%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.9020%" y="565" width="0.0784%" height="15" fill="rgb(234,101,35)" fg:x="904" fg:w="1"/><text x="71.1520%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.9804%" y="549" width="0.0784%" height="15" fill="rgb(228,64,37)" fg:x="905" fg:w="1"/><text x="71.2304%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.9804%" y="533" width="0.0784%" height="15" fill="rgb(217,214,36)" fg:x="905" fg:w="1"/><text x="71.2304%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="70.9020%" y="613" width="0.2353%" height="15" fill="rgb(243,70,3)" fg:x="904" fg:w="3"/><text x="71.1520%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="70.9020%" y="597" width="0.2353%" height="15" fill="rgb(253,158,52)" fg:x="904" fg:w="3"/><text x="71.1520%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="70.9020%" y="581" width="0.2353%" height="15" fill="rgb(234,111,54)" fg:x="904" fg:w="3"/><text x="71.1520%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="70.9804%" y="565" width="0.1569%" height="15" fill="rgb(217,70,32)" fg:x="905" fg:w="2"/><text x="71.2304%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.0588%" y="549" width="0.0784%" height="15" fill="rgb(234,18,33)" fg:x="906" fg:w="1"/><text x="71.3088%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="71.0588%" y="533" width="0.0784%" height="15" fill="rgb(234,12,49)" fg:x="906" fg:w="1"/><text x="71.3088%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="71.0588%" y="517" width="0.0784%" height="15" fill="rgb(236,10,21)" fg:x="906" fg:w="1"/><text x="71.3088%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.0588%" y="501" width="0.0784%" height="15" fill="rgb(248,182,45)" fg:x="906" fg:w="1"/><text x="71.3088%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="71.1373%" y="565" width="0.0784%" height="15" fill="rgb(217,95,36)" fg:x="907" fg:w="1"/><text x="71.3873%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.1373%" y="549" width="0.0784%" height="15" fill="rgb(212,110,31)" fg:x="907" fg:w="1"/><text x="71.3873%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.1373%" y="533" width="0.0784%" height="15" fill="rgb(206,32,53)" fg:x="907" fg:w="1"/><text x="71.3873%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="71.2157%" y="533" width="0.0784%" height="15" fill="rgb(246,141,37)" fg:x="908" fg:w="1"/><text x="71.4657%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="71.2157%" y="517" width="0.0784%" height="15" fill="rgb(219,16,7)" fg:x="908" fg:w="1"/><text x="71.4657%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="71.2157%" y="501" width="0.0784%" height="15" fill="rgb(230,205,45)" fg:x="908" fg:w="1"/><text x="71.4657%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="71.2157%" y="485" width="0.0784%" height="15" fill="rgb(231,43,49)" fg:x="908" fg:w="1"/><text x="71.4657%" y="495.50"></text></g><g><title>engine::session::Session::flush (12 samples, 0.94%)</title><rect x="70.4314%" y="709" width="0.9412%" height="15" fill="rgb(212,106,34)" fg:x="898" fg:w="12"/><text x="70.6814%" y="719.50"></text></g><g><title>engine::session::Session::save_changes (12 samples, 0.94%)</title><rect x="70.4314%" y="693" width="0.9412%" height="15" fill="rgb(206,83,17)" fg:x="898" fg:w="12"/><text x="70.6814%" y="703.50"></text></g><g><title>engine::session::state::State::close (12 samples, 0.94%)</title><rect x="70.4314%" y="677" width="0.9412%" height="15" fill="rgb(244,154,49)" fg:x="898" fg:w="12"/><text x="70.6814%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (12 samples, 0.94%)</title><rect x="70.4314%" y="661" width="0.9412%" height="15" fill="rgb(244,149,49)" fg:x="898" fg:w="12"/><text x="70.6814%" y="671.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (12 samples, 0.94%)</title><rect x="70.4314%" y="645" width="0.9412%" height="15" fill="rgb(227,134,18)" fg:x="898" fg:w="12"/><text x="70.6814%" y="655.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (12 samples, 0.94%)</title><rect x="70.4314%" y="629" width="0.9412%" height="15" fill="rgb(237,116,36)" fg:x="898" fg:w="12"/><text x="70.6814%" y="639.50"></text></g><g><title>kernel::model::any_entity_changes (3 samples, 0.24%)</title><rect x="71.1373%" y="613" width="0.2353%" height="15" fill="rgb(205,129,40)" fg:x="907" fg:w="3"/><text x="71.3873%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="71.1373%" y="597" width="0.2353%" height="15" fill="rgb(236,178,4)" fg:x="907" fg:w="3"/><text x="71.3873%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="71.1373%" y="581" width="0.2353%" height="15" fill="rgb(251,76,53)" fg:x="907" fg:w="3"/><text x="71.3873%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="71.2157%" y="565" width="0.1569%" height="15" fill="rgb(242,92,40)" fg:x="908" fg:w="2"/><text x="71.4657%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="71.2157%" y="549" width="0.1569%" height="15" fill="rgb(209,45,30)" fg:x="908" fg:w="2"/><text x="71.4657%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="71.2941%" y="533" width="0.0784%" height="15" fill="rgb(218,157,36)" fg:x="909" fg:w="1"/><text x="71.5441%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.2941%" y="517" width="0.0784%" height="15" fill="rgb(222,186,16)" fg:x="909" fg:w="1"/><text x="71.5441%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="71.3725%" y="693" width="0.0784%" height="15" fill="rgb(254,72,35)" fg:x="910" fg:w="1"/><text x="71.6225%" y="703.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="71.3725%" y="677" width="0.0784%" height="15" fill="rgb(224,25,35)" fg:x="910" fg:w="1"/><text x="71.6225%" y="687.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="71.3725%" y="661" width="0.0784%" height="15" fill="rgb(206,135,52)" fg:x="910" fg:w="1"/><text x="71.6225%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="71.3725%" y="645" width="0.0784%" height="15" fill="rgb(229,174,47)" fg:x="910" fg:w="1"/><text x="71.6225%" y="655.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.3725%" y="629" width="0.0784%" height="15" fill="rgb(242,184,21)" fg:x="910" fg:w="1"/><text x="71.6225%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.3725%" y="613" width="0.0784%" height="15" fill="rgb(213,22,45)" fg:x="910" fg:w="1"/><text x="71.6225%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.4510%" y="597" width="0.0784%" height="15" fill="rgb(237,81,54)" fg:x="911" fg:w="1"/><text x="71.7010%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.4510%" y="581" width="0.0784%" height="15" fill="rgb(248,177,18)" fg:x="911" fg:w="1"/><text x="71.7010%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.4510%" y="565" width="0.0784%" height="15" fill="rgb(254,31,16)" fg:x="911" fg:w="1"/><text x="71.7010%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.4510%" y="549" width="0.0784%" height="15" fill="rgb(235,20,31)" fg:x="911" fg:w="1"/><text x="71.7010%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.4510%" y="533" width="0.0784%" height="15" fill="rgb(240,56,43)" fg:x="911" fg:w="1"/><text x="71.7010%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.4510%" y="517" width="0.0784%" height="15" fill="rgb(237,197,51)" fg:x="911" fg:w="1"/><text x="71.7010%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.4510%" y="501" width="0.0784%" height="15" fill="rgb(241,162,44)" fg:x="911" fg:w="1"/><text x="71.7010%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.4510%" y="485" width="0.0784%" height="15" fill="rgb(224,23,20)" fg:x="911" fg:w="1"/><text x="71.7010%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.4510%" y="469" width="0.0784%" height="15" fill="rgb(250,109,34)" fg:x="911" fg:w="1"/><text x="71.7010%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.4510%" y="453" width="0.0784%" height="15" fill="rgb(214,175,50)" fg:x="911" fg:w="1"/><text x="71.7010%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.4510%" y="437" width="0.0784%" height="15" fill="rgb(213,182,5)" fg:x="911" fg:w="1"/><text x="71.7010%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.4510%" y="421" width="0.0784%" height="15" fill="rgb(209,199,19)" fg:x="911" fg:w="1"/><text x="71.7010%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.4510%" y="405" width="0.0784%" height="15" fill="rgb(236,224,42)" fg:x="911" fg:w="1"/><text x="71.7010%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="71.4510%" y="645" width="0.1569%" height="15" fill="rgb(246,226,29)" fg:x="911" fg:w="2"/><text x="71.7010%" y="655.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="71.4510%" y="629" width="0.1569%" height="15" fill="rgb(227,223,11)" fg:x="911" fg:w="2"/><text x="71.7010%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="71.4510%" y="613" width="0.1569%" height="15" fill="rgb(219,7,51)" fg:x="911" fg:w="2"/><text x="71.7010%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.5294%" y="597" width="0.0784%" height="15" fill="rgb(245,167,10)" fg:x="912" fg:w="1"/><text x="71.7794%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.5294%" y="581" width="0.0784%" height="15" fill="rgb(237,224,16)" fg:x="912" fg:w="1"/><text x="71.7794%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.6078%" y="581" width="0.0784%" height="15" fill="rgb(226,132,13)" fg:x="913" fg:w="1"/><text x="71.8578%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.6078%" y="565" width="0.0784%" height="15" fill="rgb(214,140,3)" fg:x="913" fg:w="1"/><text x="71.8578%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.6078%" y="549" width="0.0784%" height="15" fill="rgb(221,177,4)" fg:x="913" fg:w="1"/><text x="71.8578%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.6078%" y="533" width="0.0784%" height="15" fill="rgb(238,139,3)" fg:x="913" fg:w="1"/><text x="71.8578%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.6078%" y="517" width="0.0784%" height="15" fill="rgb(216,17,39)" fg:x="913" fg:w="1"/><text x="71.8578%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.6078%" y="501" width="0.0784%" height="15" fill="rgb(238,120,9)" fg:x="913" fg:w="1"/><text x="71.8578%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.6078%" y="485" width="0.0784%" height="15" fill="rgb(244,92,53)" fg:x="913" fg:w="1"/><text x="71.8578%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.6078%" y="469" width="0.0784%" height="15" fill="rgb(224,148,33)" fg:x="913" fg:w="1"/><text x="71.8578%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.6078%" y="453" width="0.0784%" height="15" fill="rgb(243,6,36)" fg:x="913" fg:w="1"/><text x="71.8578%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.6078%" y="437" width="0.0784%" height="15" fill="rgb(230,102,11)" fg:x="913" fg:w="1"/><text x="71.8578%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.6078%" y="421" width="0.0784%" height="15" fill="rgb(234,148,36)" fg:x="913" fg:w="1"/><text x="71.8578%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.6078%" y="405" width="0.0784%" height="15" fill="rgb(251,153,25)" fg:x="913" fg:w="1"/><text x="71.8578%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.6078%" y="389" width="0.0784%" height="15" fill="rgb(215,129,8)" fg:x="913" fg:w="1"/><text x="71.8578%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.6078%" y="373" width="0.0784%" height="15" fill="rgb(224,128,35)" fg:x="913" fg:w="1"/><text x="71.8578%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.6078%" y="597" width="0.1569%" height="15" fill="rgb(237,56,52)" fg:x="913" fg:w="2"/><text x="71.8578%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.6863%" y="581" width="0.0784%" height="15" fill="rgb(234,213,19)" fg:x="914" fg:w="1"/><text x="71.9363%" y="591.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (5 samples, 0.39%)</title><rect x="71.4510%" y="677" width="0.3922%" height="15" fill="rgb(252,82,23)" fg:x="911" fg:w="5"/><text x="71.7010%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (5 samples, 0.39%)</title><rect x="71.4510%" y="661" width="0.3922%" height="15" fill="rgb(254,201,21)" fg:x="911" fg:w="5"/><text x="71.7010%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="71.6078%" y="645" width="0.2353%" height="15" fill="rgb(250,186,11)" fg:x="913" fg:w="3"/><text x="71.8578%" y="655.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="71.6078%" y="629" width="0.2353%" height="15" fill="rgb(211,174,5)" fg:x="913" fg:w="3"/><text x="71.8578%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="71.6078%" y="613" width="0.2353%" height="15" fill="rgb(214,121,10)" fg:x="913" fg:w="3"/><text x="71.8578%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.7647%" y="597" width="0.0784%" height="15" fill="rgb(241,66,2)" fg:x="915" fg:w="1"/><text x="72.0147%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="71.7647%" y="581" width="0.0784%" height="15" fill="rgb(220,167,19)" fg:x="915" fg:w="1"/><text x="72.0147%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.7647%" y="565" width="0.0784%" height="15" fill="rgb(231,54,50)" fg:x="915" fg:w="1"/><text x="72.0147%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.7647%" y="549" width="0.0784%" height="15" fill="rgb(239,217,53)" fg:x="915" fg:w="1"/><text x="72.0147%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.7647%" y="533" width="0.0784%" height="15" fill="rgb(248,8,0)" fg:x="915" fg:w="1"/><text x="72.0147%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.7647%" y="517" width="0.0784%" height="15" fill="rgb(229,118,37)" fg:x="915" fg:w="1"/><text x="72.0147%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="71.8431%" y="677" width="0.0784%" height="15" fill="rgb(253,223,43)" fg:x="916" fg:w="1"/><text x="72.0931%" y="687.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::ops::deref::Deref&gt;::deref (1 samples, 0.08%)</title><rect x="71.8431%" y="661" width="0.0784%" height="15" fill="rgb(211,77,36)" fg:x="916" fg:w="1"/><text x="72.0931%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.9216%" y="645" width="0.0784%" height="15" fill="rgb(219,3,53)" fg:x="917" fg:w="1"/><text x="72.1716%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.9216%" y="629" width="0.0784%" height="15" fill="rgb(244,45,42)" fg:x="917" fg:w="1"/><text x="72.1716%" y="639.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="71.9216%" y="677" width="0.1569%" height="15" fill="rgb(225,95,27)" fg:x="917" fg:w="2"/><text x="72.1716%" y="687.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (2 samples, 0.16%)</title><rect x="71.9216%" y="661" width="0.1569%" height="15" fill="rgb(207,74,8)" fg:x="917" fg:w="2"/><text x="72.1716%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_struct (1 samples, 0.08%)</title><rect x="72.0000%" y="645" width="0.0784%" height="15" fill="rgb(243,63,36)" fg:x="918" fg:w="1"/><text x="72.2500%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="72.0784%" y="629" width="0.0784%" height="15" fill="rgb(211,180,12)" fg:x="919" fg:w="1"/><text x="72.3284%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="72.0784%" y="613" width="0.0784%" height="15" fill="rgb(254,166,49)" fg:x="919" fg:w="1"/><text x="72.3284%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="72.0784%" y="597" width="0.0784%" height="15" fill="rgb(205,19,0)" fg:x="919" fg:w="1"/><text x="72.3284%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.0784%" y="581" width="0.0784%" height="15" fill="rgb(224,172,32)" fg:x="919" fg:w="1"/><text x="72.3284%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.0784%" y="565" width="0.0784%" height="15" fill="rgb(254,136,30)" fg:x="919" fg:w="1"/><text x="72.3284%" y="575.50"></text></g><g><title>plugins_core::build::Build::holding (11 samples, 0.86%)</title><rect x="71.3725%" y="709" width="0.8627%" height="15" fill="rgb(246,19,35)" fg:x="910" fg:w="11"/><text x="71.6225%" y="719.50"></text></g><g><title>plugins_core::tools::set_container (10 samples, 0.78%)</title><rect x="71.4510%" y="693" width="0.7843%" height="15" fill="rgb(219,24,36)" fg:x="911" fg:w="10"/><text x="71.7010%" y="703.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="72.0784%" y="677" width="0.1569%" height="15" fill="rgb(251,55,1)" fg:x="919" fg:w="2"/><text x="72.3284%" y="687.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="72.0784%" y="661" width="0.1569%" height="15" fill="rgb(218,117,39)" fg:x="919" fg:w="2"/><text x="72.3284%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="72.0784%" y="645" width="0.1569%" height="15" fill="rgb(248,169,11)" fg:x="919" fg:w="2"/><text x="72.3284%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="72.1569%" y="629" width="0.0784%" height="15" fill="rgb(244,40,44)" fg:x="920" fg:w="1"/><text x="72.4069%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="72.1569%" y="613" width="0.0784%" height="15" fill="rgb(234,62,37)" fg:x="920" fg:w="1"/><text x="72.4069%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="72.1569%" y="597" width="0.0784%" height="15" fill="rgb(207,117,42)" fg:x="920" fg:w="1"/><text x="72.4069%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.1569%" y="581" width="0.0784%" height="15" fill="rgb(213,43,2)" fg:x="920" fg:w="1"/><text x="72.4069%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.1569%" y="565" width="0.0784%" height="15" fill="rgb(244,202,51)" fg:x="920" fg:w="1"/><text x="72.4069%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.1569%" y="549" width="0.0784%" height="15" fill="rgb(253,174,46)" fg:x="920" fg:w="1"/><text x="72.4069%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.1569%" y="533" width="0.0784%" height="15" fill="rgb(251,23,1)" fg:x="920" fg:w="1"/><text x="72.4069%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.1569%" y="517" width="0.0784%" height="15" fill="rgb(253,26,1)" fg:x="920" fg:w="1"/><text x="72.4069%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="72.2353%" y="693" width="0.0784%" height="15" fill="rgb(216,89,31)" fg:x="921" fg:w="1"/><text x="72.4853%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="72.2353%" y="677" width="0.0784%" height="15" fill="rgb(209,109,5)" fg:x="921" fg:w="1"/><text x="72.4853%" y="687.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="72.2353%" y="661" width="0.0784%" height="15" fill="rgb(229,63,13)" fg:x="921" fg:w="1"/><text x="72.4853%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="72.2353%" y="645" width="0.0784%" height="15" fill="rgb(238,137,54)" fg:x="921" fg:w="1"/><text x="72.4853%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="72.2353%" y="629" width="0.0784%" height="15" fill="rgb(228,1,9)" fg:x="921" fg:w="1"/><text x="72.4853%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="72.3137%" y="677" width="0.0784%" height="15" fill="rgb(249,120,48)" fg:x="922" fg:w="1"/><text x="72.5637%" y="687.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.3137%" y="661" width="0.0784%" height="15" fill="rgb(209,72,36)" fg:x="922" fg:w="1"/><text x="72.5637%" y="671.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (29 samples, 2.27%)</title><rect x="70.1961%" y="725" width="2.2745%" height="15" fill="rgb(247,98,49)" fg:x="895" fg:w="29"/><text x="70.4461%" y="735.50">p..</text></g><g><title>plugins_core::build::Build::occupying (3 samples, 0.24%)</title><rect x="72.2353%" y="709" width="0.2353%" height="15" fill="rgb(233,75,36)" fg:x="921" fg:w="3"/><text x="72.4853%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="72.3137%" y="693" width="0.1569%" height="15" fill="rgb(225,14,24)" fg:x="922" fg:w="2"/><text x="72.5637%" y="703.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (1 samples, 0.08%)</title><rect x="72.3922%" y="677" width="0.0784%" height="15" fill="rgb(237,193,20)" fg:x="923" fg:w="1"/><text x="72.6422%" y="687.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="72.3922%" y="661" width="0.0784%" height="15" fill="rgb(239,122,19)" fg:x="923" fg:w="1"/><text x="72.6422%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="72.3922%" y="645" width="0.0784%" height="15" fill="rgb(231,220,10)" fg:x="923" fg:w="1"/><text x="72.6422%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="72.3922%" y="629" width="0.0784%" height="15" fill="rgb(220,66,15)" fg:x="923" fg:w="1"/><text x="72.6422%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="72.3922%" y="613" width="0.0784%" height="15" fill="rgb(215,171,52)" fg:x="923" fg:w="1"/><text x="72.6422%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="72.3922%" y="597" width="0.0784%" height="15" fill="rgb(241,169,50)" fg:x="923" fg:w="1"/><text x="72.6422%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="72.4706%" y="677" width="0.0784%" height="15" fill="rgb(236,189,0)" fg:x="924" fg:w="1"/><text x="72.7206%" y="687.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="72.4706%" y="661" width="0.0784%" height="15" fill="rgb(217,147,20)" fg:x="924" fg:w="1"/><text x="72.7206%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="72.4706%" y="645" width="0.0784%" height="15" fill="rgb(206,188,39)" fg:x="924" fg:w="1"/><text x="72.7206%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.4706%" y="629" width="0.0784%" height="15" fill="rgb(227,118,25)" fg:x="924" fg:w="1"/><text x="72.7206%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.4706%" y="613" width="0.0784%" height="15" fill="rgb(248,171,40)" fg:x="924" fg:w="1"/><text x="72.7206%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.4706%" y="597" width="0.0784%" height="15" fill="rgb(251,90,54)" fg:x="924" fg:w="1"/><text x="72.7206%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.4706%" y="581" width="0.0784%" height="15" fill="rgb(234,11,46)" fg:x="924" fg:w="1"/><text x="72.7206%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="72.4706%" y="565" width="0.0784%" height="15" fill="rgb(229,134,13)" fg:x="924" fg:w="1"/><text x="72.7206%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.4706%" y="549" width="0.0784%" height="15" fill="rgb(223,129,3)" fg:x="924" fg:w="1"/><text x="72.7206%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.4706%" y="533" width="0.0784%" height="15" fill="rgb(221,124,13)" fg:x="924" fg:w="1"/><text x="72.7206%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.4706%" y="517" width="0.0784%" height="15" fill="rgb(234,3,18)" fg:x="924" fg:w="1"/><text x="72.7206%" y="527.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.16%)</title><rect x="72.4706%" y="725" width="0.1569%" height="15" fill="rgb(249,199,20)" fg:x="924" fg:w="2"/><text x="72.7206%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="72.4706%" y="709" width="0.1569%" height="15" fill="rgb(224,134,6)" fg:x="924" fg:w="2"/><text x="72.7206%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="72.4706%" y="693" width="0.1569%" height="15" fill="rgb(254,83,26)" fg:x="924" fg:w="2"/><text x="72.7206%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="72.5490%" y="677" width="0.0784%" height="15" fill="rgb(217,88,9)" fg:x="925" fg:w="1"/><text x="72.7990%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="72.5490%" y="661" width="0.0784%" height="15" fill="rgb(225,73,2)" fg:x="925" fg:w="1"/><text x="72.7990%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="72.5490%" y="645" width="0.0784%" height="15" fill="rgb(226,44,39)" fg:x="925" fg:w="1"/><text x="72.7990%" y="655.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="72.5490%" y="629" width="0.0784%" height="15" fill="rgb(228,53,17)" fg:x="925" fg:w="1"/><text x="72.7990%" y="639.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="72.5490%" y="613" width="0.0784%" height="15" fill="rgb(212,27,27)" fg:x="925" fg:w="1"/><text x="72.7990%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="72.5490%" y="597" width="0.0784%" height="15" fill="rgb(241,50,6)" fg:x="925" fg:w="1"/><text x="72.7990%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="72.5490%" y="581" width="0.0784%" height="15" fill="rgb(225,28,51)" fg:x="925" fg:w="1"/><text x="72.7990%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="72.5490%" y="565" width="0.0784%" height="15" fill="rgb(215,33,16)" fg:x="925" fg:w="1"/><text x="72.7990%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="72.5490%" y="549" width="0.0784%" height="15" fill="rgb(243,40,39)" fg:x="925" fg:w="1"/><text x="72.7990%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="72.5490%" y="533" width="0.0784%" height="15" fill="rgb(225,11,42)" fg:x="925" fg:w="1"/><text x="72.7990%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="72.5490%" y="517" width="0.0784%" height="15" fill="rgb(241,220,38)" fg:x="925" fg:w="1"/><text x="72.7990%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.5490%" y="501" width="0.0784%" height="15" fill="rgb(244,52,35)" fg:x="925" fg:w="1"/><text x="72.7990%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="72.5490%" y="485" width="0.0784%" height="15" fill="rgb(246,42,46)" fg:x="925" fg:w="1"/><text x="72.7990%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.5490%" y="469" width="0.0784%" height="15" fill="rgb(205,184,13)" fg:x="925" fg:w="1"/><text x="72.7990%" y="479.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="72.6275%" y="693" width="0.0784%" height="15" fill="rgb(209,48,36)" fg:x="926" fg:w="1"/><text x="72.8775%" y="703.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="72.6275%" y="677" width="0.0784%" height="15" fill="rgb(244,34,51)" fg:x="926" fg:w="1"/><text x="72.8775%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="72.6275%" y="709" width="0.1569%" height="15" fill="rgb(221,107,33)" fg:x="926" fg:w="2"/><text x="72.8775%" y="719.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="72.7059%" y="693" width="0.0784%" height="15" fill="rgb(224,203,12)" fg:x="927" fg:w="1"/><text x="72.9559%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.7059%" y="677" width="0.0784%" height="15" fill="rgb(230,215,18)" fg:x="927" fg:w="1"/><text x="72.9559%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.7059%" y="661" width="0.0784%" height="15" fill="rgb(206,185,35)" fg:x="927" fg:w="1"/><text x="72.9559%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.7059%" y="645" width="0.0784%" height="15" fill="rgb(228,140,34)" fg:x="927" fg:w="1"/><text x="72.9559%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.7059%" y="629" width="0.0784%" height="15" fill="rgb(208,93,13)" fg:x="927" fg:w="1"/><text x="72.9559%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.7059%" y="613" width="0.0784%" height="15" fill="rgb(221,193,39)" fg:x="927" fg:w="1"/><text x="72.9559%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.7059%" y="597" width="0.0784%" height="15" fill="rgb(241,132,34)" fg:x="927" fg:w="1"/><text x="72.9559%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.7059%" y="581" width="0.0784%" height="15" fill="rgb(221,141,10)" fg:x="927" fg:w="1"/><text x="72.9559%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="72.7059%" y="565" width="0.0784%" height="15" fill="rgb(226,90,31)" fg:x="927" fg:w="1"/><text x="72.9559%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="72.7059%" y="549" width="0.0784%" height="15" fill="rgb(243,75,5)" fg:x="927" fg:w="1"/><text x="72.9559%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="72.7059%" y="533" width="0.0784%" height="15" fill="rgb(227,156,21)" fg:x="927" fg:w="1"/><text x="72.9559%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="72.7059%" y="517" width="0.0784%" height="15" fill="rgb(250,195,8)" fg:x="927" fg:w="1"/><text x="72.9559%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.7059%" y="501" width="0.0784%" height="15" fill="rgb(220,134,5)" fg:x="927" fg:w="1"/><text x="72.9559%" y="511.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (43 samples, 3.37%)</title><rect x="69.4902%" y="741" width="3.3725%" height="15" fill="rgb(246,106,34)" fg:x="886" fg:w="43"/><text x="69.7402%" y="751.50">&lt;te..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (3 samples, 0.24%)</title><rect x="72.6275%" y="725" width="0.2353%" height="15" fill="rgb(205,1,4)" fg:x="926" fg:w="3"/><text x="72.8775%" y="735.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="72.7843%" y="709" width="0.0784%" height="15" fill="rgb(224,151,29)" fg:x="928" fg:w="1"/><text x="73.0343%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="72.7843%" y="693" width="0.0784%" height="15" fill="rgb(251,196,0)" fg:x="928" fg:w="1"/><text x="73.0343%" y="703.50"></text></g><g><title>kernel::model::props::Props::set_property (1 samples, 0.08%)</title><rect x="72.7843%" y="677" width="0.0784%" height="15" fill="rgb(212,127,0)" fg:x="928" fg:w="1"/><text x="73.0343%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.7843%" y="661" width="0.0784%" height="15" fill="rgb(236,71,53)" fg:x="928" fg:w="1"/><text x="73.0343%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.7843%" y="645" width="0.0784%" height="15" fill="rgb(227,99,0)" fg:x="928" fg:w="1"/><text x="73.0343%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="72.7843%" y="629" width="0.0784%" height="15" fill="rgb(239,89,21)" fg:x="928" fg:w="1"/><text x="73.0343%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="72.8627%" y="725" width="0.0784%" height="15" fill="rgb(243,122,19)" fg:x="929" fg:w="1"/><text x="73.1127%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.8627%" y="709" width="0.0784%" height="15" fill="rgb(229,192,45)" fg:x="929" fg:w="1"/><text x="73.1127%" y="719.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="72.9412%" y="725" width="0.0784%" height="15" fill="rgb(235,165,35)" fg:x="930" fg:w="1"/><text x="73.1912%" y="735.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="72.9412%" y="709" width="0.0784%" height="15" fill="rgb(253,202,0)" fg:x="930" fg:w="1"/><text x="73.1912%" y="719.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="72.9412%" y="693" width="0.0784%" height="15" fill="rgb(235,51,20)" fg:x="930" fg:w="1"/><text x="73.1912%" y="703.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="72.9412%" y="677" width="0.0784%" height="15" fill="rgb(218,95,46)" fg:x="930" fg:w="1"/><text x="73.1912%" y="687.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="72.9412%" y="661" width="0.0784%" height="15" fill="rgb(212,81,10)" fg:x="930" fg:w="1"/><text x="73.1912%" y="671.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="72.9412%" y="645" width="0.0784%" height="15" fill="rgb(240,59,0)" fg:x="930" fg:w="1"/><text x="73.1912%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="72.9412%" y="629" width="0.0784%" height="15" fill="rgb(212,191,42)" fg:x="930" fg:w="1"/><text x="73.1912%" y="639.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="72.9412%" y="613" width="0.0784%" height="15" fill="rgb(233,140,3)" fg:x="930" fg:w="1"/><text x="73.1912%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="72.9412%" y="597" width="0.0784%" height="15" fill="rgb(215,69,23)" fg:x="930" fg:w="1"/><text x="73.1912%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="73.0196%" y="693" width="0.0784%" height="15" fill="rgb(240,202,20)" fg:x="931" fg:w="1"/><text x="73.2696%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="73.0196%" y="677" width="0.0784%" height="15" fill="rgb(209,146,50)" fg:x="931" fg:w="1"/><text x="73.2696%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="73.0196%" y="661" width="0.0784%" height="15" fill="rgb(253,102,54)" fg:x="931" fg:w="1"/><text x="73.2696%" y="671.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="73.0196%" y="645" width="0.0784%" height="15" fill="rgb(250,173,47)" fg:x="931" fg:w="1"/><text x="73.2696%" y="655.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="73.0980%" y="693" width="0.0784%" height="15" fill="rgb(232,142,7)" fg:x="932" fg:w="1"/><text x="73.3480%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="73.0980%" y="677" width="0.0784%" height="15" fill="rgb(230,157,47)" fg:x="932" fg:w="1"/><text x="73.3480%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="73.0980%" y="661" width="0.0784%" height="15" fill="rgb(214,177,35)" fg:x="932" fg:w="1"/><text x="73.3480%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.0980%" y="645" width="0.0784%" height="15" fill="rgb(234,119,46)" fg:x="932" fg:w="1"/><text x="73.3480%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.0980%" y="629" width="0.0784%" height="15" fill="rgb(241,180,50)" fg:x="932" fg:w="1"/><text x="73.3480%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.0980%" y="613" width="0.0784%" height="15" fill="rgb(221,54,25)" fg:x="932" fg:w="1"/><text x="73.3480%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.0980%" y="597" width="0.0784%" height="15" fill="rgb(209,157,44)" fg:x="932" fg:w="1"/><text x="73.3480%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.0980%" y="581" width="0.0784%" height="15" fill="rgb(246,115,41)" fg:x="932" fg:w="1"/><text x="73.3480%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.0980%" y="565" width="0.0784%" height="15" fill="rgb(229,86,1)" fg:x="932" fg:w="1"/><text x="73.3480%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.0980%" y="549" width="0.0784%" height="15" fill="rgb(240,108,53)" fg:x="932" fg:w="1"/><text x="73.3480%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.0980%" y="533" width="0.0784%" height="15" fill="rgb(227,134,2)" fg:x="932" fg:w="1"/><text x="73.3480%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.0980%" y="517" width="0.0784%" height="15" fill="rgb(213,129,25)" fg:x="932" fg:w="1"/><text x="73.3480%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.0980%" y="501" width="0.0784%" height="15" fill="rgb(226,35,21)" fg:x="932" fg:w="1"/><text x="73.3480%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.0980%" y="485" width="0.0784%" height="15" fill="rgb(208,129,26)" fg:x="932" fg:w="1"/><text x="73.3480%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.0980%" y="469" width="0.0784%" height="15" fill="rgb(224,83,6)" fg:x="932" fg:w="1"/><text x="73.3480%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="73.1765%" y="645" width="0.1569%" height="15" fill="rgb(227,52,39)" fg:x="933" fg:w="2"/><text x="73.4265%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="73.1765%" y="629" width="0.1569%" height="15" fill="rgb(241,30,17)" fg:x="933" fg:w="2"/><text x="73.4265%" y="639.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="73.1765%" y="613" width="0.1569%" height="15" fill="rgb(246,186,42)" fg:x="933" fg:w="2"/><text x="73.4265%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.2549%" y="597" width="0.0784%" height="15" fill="rgb(221,169,15)" fg:x="934" fg:w="1"/><text x="73.5049%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="73.3333%" y="629" width="0.0784%" height="15" fill="rgb(235,108,21)" fg:x="935" fg:w="1"/><text x="73.5833%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="73.4118%" y="613" width="0.0784%" height="15" fill="rgb(219,148,30)" fg:x="936" fg:w="1"/><text x="73.6618%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="73.4902%" y="565" width="0.0784%" height="15" fill="rgb(220,109,5)" fg:x="937" fg:w="1"/><text x="73.7402%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="73.4118%" y="629" width="0.2353%" height="15" fill="rgb(213,203,48)" fg:x="936" fg:w="3"/><text x="73.6618%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="73.4902%" y="613" width="0.1569%" height="15" fill="rgb(244,71,33)" fg:x="937" fg:w="2"/><text x="73.7402%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="73.4902%" y="597" width="0.1569%" height="15" fill="rgb(209,23,2)" fg:x="937" fg:w="2"/><text x="73.7402%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="73.4902%" y="581" width="0.1569%" height="15" fill="rgb(219,97,7)" fg:x="937" fg:w="2"/><text x="73.7402%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="73.5686%" y="565" width="0.0784%" height="15" fill="rgb(216,161,23)" fg:x="938" fg:w="1"/><text x="73.8186%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.5686%" y="549" width="0.0784%" height="15" fill="rgb(207,45,42)" fg:x="938" fg:w="1"/><text x="73.8186%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.5686%" y="533" width="0.0784%" height="15" fill="rgb(241,61,4)" fg:x="938" fg:w="1"/><text x="73.8186%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.5686%" y="517" width="0.0784%" height="15" fill="rgb(236,170,1)" fg:x="938" fg:w="1"/><text x="73.8186%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="73.5686%" y="501" width="0.0784%" height="15" fill="rgb(239,72,5)" fg:x="938" fg:w="1"/><text x="73.8186%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="73.5686%" y="485" width="0.0784%" height="15" fill="rgb(214,13,50)" fg:x="938" fg:w="1"/><text x="73.8186%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="73.5686%" y="469" width="0.0784%" height="15" fill="rgb(224,88,9)" fg:x="938" fg:w="1"/><text x="73.8186%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.55%)</title><rect x="73.1765%" y="661" width="0.5490%" height="15" fill="rgb(238,192,34)" fg:x="933" fg:w="7"/><text x="73.4265%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.39%)</title><rect x="73.3333%" y="645" width="0.3922%" height="15" fill="rgb(217,203,50)" fg:x="935" fg:w="5"/><text x="73.5833%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.6471%" y="629" width="0.0784%" height="15" fill="rgb(241,123,32)" fg:x="939" fg:w="1"/><text x="73.8971%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.7255%" y="661" width="0.0784%" height="15" fill="rgb(248,151,39)" fg:x="940" fg:w="1"/><text x="73.9755%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="73.7255%" y="645" width="0.0784%" height="15" fill="rgb(208,89,6)" fg:x="940" fg:w="1"/><text x="73.9755%" y="655.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="73.8039%" y="645" width="0.1569%" height="15" fill="rgb(254,43,26)" fg:x="941" fg:w="2"/><text x="74.0539%" y="655.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="73.8039%" y="629" width="0.1569%" height="15" fill="rgb(216,158,13)" fg:x="941" fg:w="2"/><text x="74.0539%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="73.8039%" y="613" width="0.1569%" height="15" fill="rgb(212,47,37)" fg:x="941" fg:w="2"/><text x="74.0539%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="73.8039%" y="597" width="0.1569%" height="15" fill="rgb(254,16,10)" fg:x="941" fg:w="2"/><text x="74.0539%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="73.8824%" y="581" width="0.0784%" height="15" fill="rgb(223,228,16)" fg:x="942" fg:w="1"/><text x="74.1324%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.9608%" y="613" width="0.0784%" height="15" fill="rgb(249,108,50)" fg:x="943" fg:w="1"/><text x="74.2108%" y="623.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="74.0392%" y="613" width="0.0784%" height="15" fill="rgb(208,220,5)" fg:x="944" fg:w="1"/><text x="74.2892%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.0392%" y="597" width="0.0784%" height="15" fill="rgb(217,89,48)" fg:x="944" fg:w="1"/><text x="74.2892%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.0392%" y="581" width="0.0784%" height="15" fill="rgb(212,113,41)" fg:x="944" fg:w="1"/><text x="74.2892%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="74.1176%" y="613" width="0.0784%" height="15" fill="rgb(231,127,5)" fg:x="945" fg:w="1"/><text x="74.3676%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.1176%" y="597" width="0.0784%" height="15" fill="rgb(217,141,17)" fg:x="945" fg:w="1"/><text x="74.3676%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.1176%" y="581" width="0.0784%" height="15" fill="rgb(245,125,54)" fg:x="945" fg:w="1"/><text x="74.3676%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="74.2745%" y="565" width="0.0784%" height="15" fill="rgb(248,125,3)" fg:x="947" fg:w="1"/><text x="74.5245%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="74.2745%" y="549" width="0.0784%" height="15" fill="rgb(236,119,51)" fg:x="947" fg:w="1"/><text x="74.5245%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="74.2745%" y="533" width="0.0784%" height="15" fill="rgb(239,99,8)" fg:x="947" fg:w="1"/><text x="74.5245%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.2745%" y="517" width="0.0784%" height="15" fill="rgb(224,228,4)" fg:x="947" fg:w="1"/><text x="74.5245%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.2745%" y="501" width="0.0784%" height="15" fill="rgb(220,131,45)" fg:x="947" fg:w="1"/><text x="74.5245%" y="511.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="74.2745%" y="485" width="0.0784%" height="15" fill="rgb(215,62,5)" fg:x="947" fg:w="1"/><text x="74.5245%" y="495.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="74.2745%" y="469" width="0.0784%" height="15" fill="rgb(253,12,24)" fg:x="947" fg:w="1"/><text x="74.5245%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.4314%" y="469" width="0.0784%" height="15" fill="rgb(248,120,50)" fg:x="949" fg:w="1"/><text x="74.6814%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.31%)</title><rect x="74.2745%" y="597" width="0.3137%" height="15" fill="rgb(245,194,10)" fg:x="947" fg:w="4"/><text x="74.5245%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.31%)</title><rect x="74.2745%" y="581" width="0.3137%" height="15" fill="rgb(241,149,38)" fg:x="947" fg:w="4"/><text x="74.5245%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="74.3529%" y="565" width="0.2353%" height="15" fill="rgb(219,215,7)" fg:x="948" fg:w="3"/><text x="74.6029%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="74.3529%" y="549" width="0.2353%" height="15" fill="rgb(208,120,31)" fg:x="948" fg:w="3"/><text x="74.6029%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="74.3529%" y="533" width="0.2353%" height="15" fill="rgb(244,30,8)" fg:x="948" fg:w="3"/><text x="74.6029%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="74.3529%" y="517" width="0.2353%" height="15" fill="rgb(238,35,44)" fg:x="948" fg:w="3"/><text x="74.6029%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="74.4314%" y="501" width="0.1569%" height="15" fill="rgb(243,218,37)" fg:x="949" fg:w="2"/><text x="74.6814%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="74.4314%" y="485" width="0.1569%" height="15" fill="rgb(218,169,10)" fg:x="949" fg:w="2"/><text x="74.6814%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="74.5098%" y="469" width="0.0784%" height="15" fill="rgb(221,144,10)" fg:x="950" fg:w="1"/><text x="74.7598%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="74.5098%" y="453" width="0.0784%" height="15" fill="rgb(226,41,38)" fg:x="950" fg:w="1"/><text x="74.7598%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.5098%" y="437" width="0.0784%" height="15" fill="rgb(228,3,1)" fg:x="950" fg:w="1"/><text x="74.7598%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.5098%" y="421" width="0.0784%" height="15" fill="rgb(209,129,12)" fg:x="950" fg:w="1"/><text x="74.7598%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.5098%" y="405" width="0.0784%" height="15" fill="rgb(213,136,33)" fg:x="950" fg:w="1"/><text x="74.7598%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.5882%" y="597" width="0.0784%" height="15" fill="rgb(209,181,29)" fg:x="951" fg:w="1"/><text x="74.8382%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (10 samples, 0.78%)</title><rect x="73.9608%" y="645" width="0.7843%" height="15" fill="rgb(234,173,18)" fg:x="943" fg:w="10"/><text x="74.2108%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.78%)</title><rect x="73.9608%" y="629" width="0.7843%" height="15" fill="rgb(227,73,47)" fg:x="943" fg:w="10"/><text x="74.2108%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.55%)</title><rect x="74.1961%" y="613" width="0.5490%" height="15" fill="rgb(234,9,34)" fg:x="946" fg:w="7"/><text x="74.4461%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.6667%" y="597" width="0.0784%" height="15" fill="rgb(235,172,15)" fg:x="952" fg:w="1"/><text x="74.9167%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.7451%" y="421" width="0.0784%" height="15" fill="rgb(245,61,2)" fg:x="953" fg:w="1"/><text x="74.9951%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="74.7451%" y="549" width="0.1569%" height="15" fill="rgb(238,39,47)" fg:x="953" fg:w="2"/><text x="74.9951%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.7451%" y="533" width="0.1569%" height="15" fill="rgb(234,37,24)" fg:x="953" fg:w="2"/><text x="74.9951%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="74.7451%" y="517" width="0.1569%" height="15" fill="rgb(248,223,24)" fg:x="953" fg:w="2"/><text x="74.9951%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.7451%" y="501" width="0.1569%" height="15" fill="rgb(223,12,15)" fg:x="953" fg:w="2"/><text x="74.9951%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="74.7451%" y="485" width="0.1569%" height="15" fill="rgb(249,6,3)" fg:x="953" fg:w="2"/><text x="74.9951%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.7451%" y="469" width="0.1569%" height="15" fill="rgb(237,105,33)" fg:x="953" fg:w="2"/><text x="74.9951%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="74.7451%" y="453" width="0.1569%" height="15" fill="rgb(252,208,35)" fg:x="953" fg:w="2"/><text x="74.9951%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="74.7451%" y="437" width="0.1569%" height="15" fill="rgb(215,181,35)" fg:x="953" fg:w="2"/><text x="74.9951%" y="447.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="74.8235%" y="421" width="0.0784%" height="15" fill="rgb(246,212,3)" fg:x="954" fg:w="1"/><text x="75.0735%" y="431.50"></text></g><g><title>engine::session::Session::close (27 samples, 2.12%)</title><rect x="72.8627%" y="741" width="2.1176%" height="15" fill="rgb(247,156,24)" fg:x="929" fg:w="27"/><text x="73.1127%" y="751.50">e..</text></g><g><title>engine::session::state::State::close (25 samples, 1.96%)</title><rect x="73.0196%" y="725" width="1.9608%" height="15" fill="rgb(248,9,31)" fg:x="931" fg:w="25"/><text x="73.2696%" y="735.50">e..</text></g><g><title>engine::session::state::State::flush_entities (25 samples, 1.96%)</title><rect x="73.0196%" y="709" width="1.9608%" height="15" fill="rgb(234,26,45)" fg:x="931" fg:w="25"/><text x="73.2696%" y="719.50">e..</text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (23 samples, 1.80%)</title><rect x="73.1765%" y="693" width="1.8039%" height="15" fill="rgb(249,11,32)" fg:x="933" fg:w="23"/><text x="73.4265%" y="703.50">e..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (23 samples, 1.80%)</title><rect x="73.1765%" y="677" width="1.8039%" height="15" fill="rgb(249,162,33)" fg:x="933" fg:w="23"/><text x="73.4265%" y="687.50">e..</text></g><g><title>kernel::model::any_entity_changes (15 samples, 1.18%)</title><rect x="73.8039%" y="661" width="1.1765%" height="15" fill="rgb(232,4,32)" fg:x="941" fg:w="15"/><text x="74.0539%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="74.7451%" y="645" width="0.2353%" height="15" fill="rgb(212,5,45)" fg:x="953" fg:w="3"/><text x="74.9951%" y="655.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="74.7451%" y="629" width="0.2353%" height="15" fill="rgb(227,95,13)" fg:x="953" fg:w="3"/><text x="74.9951%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="74.7451%" y="613" width="0.2353%" height="15" fill="rgb(223,205,10)" fg:x="953" fg:w="3"/><text x="74.9951%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="74.7451%" y="597" width="0.2353%" height="15" fill="rgb(222,178,8)" fg:x="953" fg:w="3"/><text x="74.9951%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="74.7451%" y="581" width="0.2353%" height="15" fill="rgb(216,13,22)" fg:x="953" fg:w="3"/><text x="74.9951%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="74.7451%" y="565" width="0.2353%" height="15" fill="rgb(240,167,12)" fg:x="953" fg:w="3"/><text x="74.9951%" y="575.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.9020%" y="549" width="0.0784%" height="15" fill="rgb(235,68,35)" fg:x="955" fg:w="1"/><text x="75.1520%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.9020%" y="533" width="0.0784%" height="15" fill="rgb(253,40,27)" fg:x="955" fg:w="1"/><text x="75.1520%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="75.0588%" y="453" width="0.0784%" height="15" fill="rgb(214,19,28)" fg:x="957" fg:w="1"/><text x="75.3088%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.0588%" y="437" width="0.0784%" height="15" fill="rgb(210,167,45)" fg:x="957" fg:w="1"/><text x="75.3088%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="75.0588%" y="421" width="0.0784%" height="15" fill="rgb(232,97,40)" fg:x="957" fg:w="1"/><text x="75.3088%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="75.0588%" y="405" width="0.0784%" height="15" fill="rgb(250,35,23)" fg:x="957" fg:w="1"/><text x="75.3088%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.0588%" y="389" width="0.0784%" height="15" fill="rgb(248,47,53)" fg:x="957" fg:w="1"/><text x="75.3088%" y="399.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (2 samples, 0.16%)</title><rect x="75.0588%" y="645" width="0.1569%" height="15" fill="rgb(226,58,50)" fg:x="957" fg:w="2"/><text x="75.3088%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="75.0588%" y="629" width="0.1569%" height="15" fill="rgb(217,105,26)" fg:x="957" fg:w="2"/><text x="75.3088%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="75.0588%" y="613" width="0.1569%" height="15" fill="rgb(208,64,1)" fg:x="957" fg:w="2"/><text x="75.3088%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="75.0588%" y="597" width="0.1569%" height="15" fill="rgb(214,80,1)" fg:x="957" fg:w="2"/><text x="75.3088%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="75.0588%" y="581" width="0.1569%" height="15" fill="rgb(206,175,26)" fg:x="957" fg:w="2"/><text x="75.3088%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="75.0588%" y="565" width="0.1569%" height="15" fill="rgb(235,156,37)" fg:x="957" fg:w="2"/><text x="75.3088%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (2 samples, 0.16%)</title><rect x="75.0588%" y="549" width="0.1569%" height="15" fill="rgb(213,100,9)" fg:x="957" fg:w="2"/><text x="75.3088%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="75.0588%" y="533" width="0.1569%" height="15" fill="rgb(241,15,13)" fg:x="957" fg:w="2"/><text x="75.3088%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.0588%" y="517" width="0.1569%" height="15" fill="rgb(205,97,43)" fg:x="957" fg:w="2"/><text x="75.3088%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="75.0588%" y="501" width="0.1569%" height="15" fill="rgb(216,106,32)" fg:x="957" fg:w="2"/><text x="75.3088%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.0588%" y="485" width="0.1569%" height="15" fill="rgb(226,200,8)" fg:x="957" fg:w="2"/><text x="75.3088%" y="495.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="75.0588%" y="469" width="0.1569%" height="15" fill="rgb(244,54,29)" fg:x="957" fg:w="2"/><text x="75.3088%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.1373%" y="453" width="0.0784%" height="15" fill="rgb(252,169,12)" fg:x="958" fg:w="1"/><text x="75.3873%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.1373%" y="437" width="0.0784%" height="15" fill="rgb(231,199,11)" fg:x="958" fg:w="1"/><text x="75.3873%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="75.1373%" y="421" width="0.0784%" height="15" fill="rgb(233,191,18)" fg:x="958" fg:w="1"/><text x="75.3873%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.1373%" y="405" width="0.0784%" height="15" fill="rgb(215,83,47)" fg:x="958" fg:w="1"/><text x="75.3873%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.1373%" y="389" width="0.0784%" height="15" fill="rgb(251,67,19)" fg:x="958" fg:w="1"/><text x="75.3873%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="75.1373%" y="373" width="0.0784%" height="15" fill="rgb(240,7,20)" fg:x="958" fg:w="1"/><text x="75.3873%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.1373%" y="357" width="0.0784%" height="15" fill="rgb(210,150,26)" fg:x="958" fg:w="1"/><text x="75.3873%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.1373%" y="341" width="0.0784%" height="15" fill="rgb(228,75,42)" fg:x="958" fg:w="1"/><text x="75.3873%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="75.1373%" y="325" width="0.0784%" height="15" fill="rgb(237,134,48)" fg:x="958" fg:w="1"/><text x="75.3873%" y="335.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (3 samples, 0.24%)</title><rect x="75.0588%" y="661" width="0.2353%" height="15" fill="rgb(205,80,50)" fg:x="957" fg:w="3"/><text x="75.3088%" y="671.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="75.2157%" y="645" width="0.0784%" height="15" fill="rgb(217,74,48)" fg:x="959" fg:w="1"/><text x="75.4657%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="75.2941%" y="405" width="0.1569%" height="15" fill="rgb(205,82,50)" fg:x="960" fg:w="2"/><text x="75.5441%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="75.2941%" y="389" width="0.1569%" height="15" fill="rgb(228,1,33)" fg:x="960" fg:w="2"/><text x="75.5441%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.3725%" y="373" width="0.0784%" height="15" fill="rgb(214,50,23)" fg:x="961" fg:w="1"/><text x="75.6225%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="75.2941%" y="437" width="0.2353%" height="15" fill="rgb(210,62,9)" fg:x="960" fg:w="3"/><text x="75.5441%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="75.2941%" y="421" width="0.2353%" height="15" fill="rgb(210,104,37)" fg:x="960" fg:w="3"/><text x="75.5441%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.4510%" y="405" width="0.0784%" height="15" fill="rgb(232,104,43)" fg:x="962" fg:w="1"/><text x="75.7010%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.4510%" y="389" width="0.0784%" height="15" fill="rgb(244,52,6)" fg:x="962" fg:w="1"/><text x="75.7010%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="75.4510%" y="373" width="0.0784%" height="15" fill="rgb(211,174,52)" fg:x="962" fg:w="1"/><text x="75.7010%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="75.4510%" y="357" width="0.0784%" height="15" fill="rgb(229,48,4)" fg:x="962" fg:w="1"/><text x="75.7010%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="75.4510%" y="341" width="0.0784%" height="15" fill="rgb(205,155,16)" fg:x="962" fg:w="1"/><text x="75.7010%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="75.4510%" y="325" width="0.0784%" height="15" fill="rgb(211,141,53)" fg:x="962" fg:w="1"/><text x="75.7010%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="75.4510%" y="309" width="0.0784%" height="15" fill="rgb(240,148,11)" fg:x="962" fg:w="1"/><text x="75.7010%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.5294%" y="437" width="0.0784%" height="15" fill="rgb(214,45,23)" fg:x="963" fg:w="1"/><text x="75.7794%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="75.5294%" y="421" width="0.0784%" height="15" fill="rgb(248,74,26)" fg:x="963" fg:w="1"/><text x="75.7794%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.5294%" y="405" width="0.0784%" height="15" fill="rgb(218,121,16)" fg:x="963" fg:w="1"/><text x="75.7794%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.5294%" y="389" width="0.0784%" height="15" fill="rgb(218,10,47)" fg:x="963" fg:w="1"/><text x="75.7794%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (5 samples, 0.39%)</title><rect x="75.2941%" y="485" width="0.3922%" height="15" fill="rgb(227,99,14)" fg:x="960" fg:w="5"/><text x="75.5441%" y="495.50"></text></g><g><title>kernel::model::props::load_props (5 samples, 0.39%)</title><rect x="75.2941%" y="469" width="0.3922%" height="15" fill="rgb(229,83,46)" fg:x="960" fg:w="5"/><text x="75.5441%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (5 samples, 0.39%)</title><rect x="75.2941%" y="453" width="0.3922%" height="15" fill="rgb(228,25,1)" fg:x="960" fg:w="5"/><text x="75.5441%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.6078%" y="437" width="0.0784%" height="15" fill="rgb(252,190,15)" fg:x="964" fg:w="1"/><text x="75.8578%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.6078%" y="421" width="0.0784%" height="15" fill="rgb(213,103,51)" fg:x="964" fg:w="1"/><text x="75.8578%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.6078%" y="405" width="0.0784%" height="15" fill="rgb(220,38,44)" fg:x="964" fg:w="1"/><text x="75.8578%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.6078%" y="389" width="0.0784%" height="15" fill="rgb(210,45,26)" fg:x="964" fg:w="1"/><text x="75.8578%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="75.6078%" y="373" width="0.0784%" height="15" fill="rgb(205,95,48)" fg:x="964" fg:w="1"/><text x="75.8578%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.6078%" y="357" width="0.0784%" height="15" fill="rgb(225,179,37)" fg:x="964" fg:w="1"/><text x="75.8578%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.6078%" y="341" width="0.0784%" height="15" fill="rgb(230,209,3)" fg:x="964" fg:w="1"/><text x="75.8578%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.6078%" y="325" width="0.0784%" height="15" fill="rgb(248,12,46)" fg:x="964" fg:w="1"/><text x="75.8578%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.6078%" y="309" width="0.0784%" height="15" fill="rgb(234,18,0)" fg:x="964" fg:w="1"/><text x="75.8578%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.6863%" y="373" width="0.0784%" height="15" fill="rgb(238,197,14)" fg:x="965" fg:w="1"/><text x="75.9363%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.6863%" y="357" width="0.0784%" height="15" fill="rgb(251,162,48)" fg:x="965" fg:w="1"/><text x="75.9363%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="75.6863%" y="389" width="0.1569%" height="15" fill="rgb(237,73,42)" fg:x="965" fg:w="2"/><text x="75.9363%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.7647%" y="373" width="0.0784%" height="15" fill="rgb(211,108,8)" fg:x="966" fg:w="1"/><text x="76.0147%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.7647%" y="357" width="0.0784%" height="15" fill="rgb(213,45,22)" fg:x="966" fg:w="1"/><text x="76.0147%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="75.7647%" y="341" width="0.0784%" height="15" fill="rgb(252,154,5)" fg:x="966" fg:w="1"/><text x="76.0147%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="75.7647%" y="325" width="0.0784%" height="15" fill="rgb(221,79,52)" fg:x="966" fg:w="1"/><text x="76.0147%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="75.7647%" y="309" width="0.0784%" height="15" fill="rgb(229,220,36)" fg:x="966" fg:w="1"/><text x="76.0147%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.7647%" y="293" width="0.0784%" height="15" fill="rgb(211,17,16)" fg:x="966" fg:w="1"/><text x="76.0147%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.7647%" y="277" width="0.0784%" height="15" fill="rgb(222,55,31)" fg:x="966" fg:w="1"/><text x="76.0147%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="75.7647%" y="261" width="0.0784%" height="15" fill="rgb(221,221,31)" fg:x="966" fg:w="1"/><text x="76.0147%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="75.7647%" y="245" width="0.0784%" height="15" fill="rgb(227,168,26)" fg:x="966" fg:w="1"/><text x="76.0147%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="75.7647%" y="229" width="0.0784%" height="15" fill="rgb(224,139,9)" fg:x="966" fg:w="1"/><text x="76.0147%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="75.7647%" y="213" width="0.0784%" height="15" fill="rgb(254,172,0)" fg:x="966" fg:w="1"/><text x="76.0147%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.7647%" y="197" width="0.0784%" height="15" fill="rgb(235,203,1)" fg:x="966" fg:w="1"/><text x="76.0147%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="75.6863%" y="437" width="0.2353%" height="15" fill="rgb(216,205,24)" fg:x="965" fg:w="3"/><text x="75.9363%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="75.6863%" y="421" width="0.2353%" height="15" fill="rgb(233,24,6)" fg:x="965" fg:w="3"/><text x="75.9363%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="75.6863%" y="405" width="0.2353%" height="15" fill="rgb(244,110,9)" fg:x="965" fg:w="3"/><text x="75.9363%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.8431%" y="389" width="0.0784%" height="15" fill="rgb(239,222,42)" fg:x="967" fg:w="1"/><text x="76.0931%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (4 samples, 0.31%)</title><rect x="75.6863%" y="485" width="0.3137%" height="15" fill="rgb(218,145,13)" fg:x="965" fg:w="4"/><text x="75.9363%" y="495.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.31%)</title><rect x="75.6863%" y="469" width="0.3137%" height="15" fill="rgb(207,69,11)" fg:x="965" fg:w="4"/><text x="75.9363%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.31%)</title><rect x="75.6863%" y="453" width="0.3137%" height="15" fill="rgb(220,223,22)" fg:x="965" fg:w="4"/><text x="75.9363%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.9216%" y="437" width="0.0784%" height="15" fill="rgb(245,102,5)" fg:x="968" fg:w="1"/><text x="76.1716%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.9216%" y="421" width="0.0784%" height="15" fill="rgb(211,148,2)" fg:x="968" fg:w="1"/><text x="76.1716%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.9216%" y="405" width="0.0784%" height="15" fill="rgb(241,13,44)" fg:x="968" fg:w="1"/><text x="76.1716%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.9216%" y="389" width="0.0784%" height="15" fill="rgb(219,137,21)" fg:x="968" fg:w="1"/><text x="76.1716%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="75.9216%" y="373" width="0.0784%" height="15" fill="rgb(242,206,5)" fg:x="968" fg:w="1"/><text x="76.1716%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.9216%" y="357" width="0.0784%" height="15" fill="rgb(217,114,22)" fg:x="968" fg:w="1"/><text x="76.1716%" y="367.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="76.0000%" y="437" width="0.0784%" height="15" fill="rgb(253,206,42)" fg:x="969" fg:w="1"/><text x="76.2500%" y="447.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="76.0000%" y="421" width="0.0784%" height="15" fill="rgb(236,102,18)" fg:x="969" fg:w="1"/><text x="76.2500%" y="431.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="76.0000%" y="405" width="0.0784%" height="15" fill="rgb(208,59,49)" fg:x="969" fg:w="1"/><text x="76.2500%" y="415.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="76.0000%" y="389" width="0.0784%" height="15" fill="rgb(215,194,28)" fg:x="969" fg:w="1"/><text x="76.2500%" y="399.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="76.0784%" y="421" width="0.0784%" height="15" fill="rgb(243,207,11)" fg:x="970" fg:w="1"/><text x="76.3284%" y="431.50"></text></g><g><title>alloc::str::convert_while_ascii (1 samples, 0.08%)</title><rect x="76.0784%" y="405" width="0.0784%" height="15" fill="rgb(254,179,35)" fg:x="970" fg:w="1"/><text x="76.3284%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="76.0784%" y="389" width="0.0784%" height="15" fill="rgb(235,97,3)" fg:x="970" fg:w="1"/><text x="76.3284%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.0784%" y="373" width="0.0784%" height="15" fill="rgb(215,155,33)" fg:x="970" fg:w="1"/><text x="76.3284%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.0784%" y="357" width="0.0784%" height="15" fill="rgb(223,128,12)" fg:x="970" fg:w="1"/><text x="76.3284%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.0784%" y="341" width="0.0784%" height="15" fill="rgb(208,157,18)" fg:x="970" fg:w="1"/><text x="76.3284%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.0784%" y="325" width="0.0784%" height="15" fill="rgb(249,70,54)" fg:x="970" fg:w="1"/><text x="76.3284%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.0784%" y="309" width="0.0784%" height="15" fill="rgb(244,118,24)" fg:x="970" fg:w="1"/><text x="76.3284%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.0784%" y="293" width="0.0784%" height="15" fill="rgb(211,54,0)" fg:x="970" fg:w="1"/><text x="76.3284%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.0784%" y="277" width="0.0784%" height="15" fill="rgb(245,137,45)" fg:x="970" fg:w="1"/><text x="76.3284%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="76.1569%" y="341" width="0.2353%" height="15" fill="rgb(232,154,31)" fg:x="971" fg:w="3"/><text x="76.4069%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="76.2353%" y="325" width="0.1569%" height="15" fill="rgb(253,6,39)" fg:x="972" fg:w="2"/><text x="76.4853%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="76.3137%" y="309" width="0.0784%" height="15" fill="rgb(234,183,24)" fg:x="973" fg:w="1"/><text x="76.5637%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="76.3137%" y="293" width="0.0784%" height="15" fill="rgb(252,84,40)" fg:x="973" fg:w="1"/><text x="76.5637%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.31%)</title><rect x="76.1569%" y="405" width="0.3137%" height="15" fill="rgb(224,65,2)" fg:x="971" fg:w="4"/><text x="76.4069%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.31%)</title><rect x="76.1569%" y="389" width="0.3137%" height="15" fill="rgb(229,38,24)" fg:x="971" fg:w="4"/><text x="76.4069%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (4 samples, 0.31%)</title><rect x="76.1569%" y="373" width="0.3137%" height="15" fill="rgb(218,131,50)" fg:x="971" fg:w="4"/><text x="76.4069%" y="383.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (4 samples, 0.31%)</title><rect x="76.1569%" y="357" width="0.3137%" height="15" fill="rgb(233,106,18)" fg:x="971" fg:w="4"/><text x="76.4069%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1 samples, 0.08%)</title><rect x="76.3922%" y="341" width="0.0784%" height="15" fill="rgb(220,216,11)" fg:x="974" fg:w="1"/><text x="76.6422%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="76.3922%" y="325" width="0.0784%" height="15" fill="rgb(251,100,45)" fg:x="974" fg:w="1"/><text x="76.6422%" y="335.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="76.3922%" y="309" width="0.0784%" height="15" fill="rgb(235,143,32)" fg:x="974" fg:w="1"/><text x="76.6422%" y="319.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="76.3922%" y="293" width="0.0784%" height="15" fill="rgb(248,124,34)" fg:x="974" fg:w="1"/><text x="76.6422%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.4706%" y="389" width="0.0784%" height="15" fill="rgb(225,221,4)" fg:x="975" fg:w="1"/><text x="76.7206%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="76.5490%" y="373" width="0.1569%" height="15" fill="rgb(242,27,43)" fg:x="976" fg:w="2"/><text x="76.7990%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (2 samples, 0.16%)</title><rect x="76.5490%" y="357" width="0.1569%" height="15" fill="rgb(227,54,8)" fg:x="976" fg:w="2"/><text x="76.7990%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.6275%" y="341" width="0.0784%" height="15" fill="rgb(253,139,49)" fg:x="977" fg:w="1"/><text x="76.8775%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="76.7059%" y="357" width="0.0784%" height="15" fill="rgb(231,26,43)" fg:x="978" fg:w="1"/><text x="76.9559%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.47%)</title><rect x="76.4706%" y="405" width="0.4706%" height="15" fill="rgb(207,121,39)" fg:x="975" fg:w="6"/><text x="76.7206%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (5 samples, 0.39%)</title><rect x="76.5490%" y="389" width="0.3922%" height="15" fill="rgb(223,101,35)" fg:x="976" fg:w="5"/><text x="76.7990%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="76.7059%" y="373" width="0.2353%" height="15" fill="rgb(232,87,23)" fg:x="978" fg:w="3"/><text x="76.9559%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="76.7843%" y="357" width="0.1569%" height="15" fill="rgb(225,180,29)" fg:x="979" fg:w="2"/><text x="77.0343%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.8627%" y="341" width="0.0784%" height="15" fill="rgb(225,25,17)" fg:x="980" fg:w="1"/><text x="77.1127%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.0196%" y="357" width="0.0784%" height="15" fill="rgb(223,8,52)" fg:x="982" fg:w="1"/><text x="77.2696%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="77.0196%" y="341" width="0.0784%" height="15" fill="rgb(246,42,21)" fg:x="982" fg:w="1"/><text x="77.2696%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.0980%" y="357" width="0.0784%" height="15" fill="rgb(205,64,43)" fg:x="983" fg:w="1"/><text x="77.3480%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.2549%" y="341" width="0.0784%" height="15" fill="rgb(221,160,13)" fg:x="985" fg:w="1"/><text x="77.5049%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.3333%" y="325" width="0.0784%" height="15" fill="rgb(239,58,35)" fg:x="986" fg:w="1"/><text x="77.5833%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (10 samples, 0.78%)</title><rect x="77.3333%" y="341" width="0.7843%" height="15" fill="rgb(251,26,40)" fg:x="986" fg:w="10"/><text x="77.5833%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (9 samples, 0.71%)</title><rect x="77.4118%" y="325" width="0.7059%" height="15" fill="rgb(247,0,4)" fg:x="987" fg:w="9"/><text x="77.6618%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.31%)</title><rect x="78.1176%" y="341" width="0.3137%" height="15" fill="rgb(218,130,10)" fg:x="996" fg:w="4"/><text x="78.3676%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="78.1961%" y="325" width="0.2353%" height="15" fill="rgb(239,32,7)" fg:x="997" fg:w="3"/><text x="78.4461%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.3529%" y="309" width="0.0784%" height="15" fill="rgb(210,192,24)" fg:x="999" fg:w="1"/><text x="78.6029%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="78.4314%" y="277" width="0.2353%" height="15" fill="rgb(226,212,17)" fg:x="1000" fg:w="3"/><text x="78.6814%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="78.5098%" y="261" width="0.1569%" height="15" fill="rgb(219,201,28)" fg:x="1001" fg:w="2"/><text x="78.7598%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="78.5098%" y="245" width="0.1569%" height="15" fill="rgb(235,207,41)" fg:x="1001" fg:w="2"/><text x="78.7598%" y="255.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="78.5098%" y="229" width="0.1569%" height="15" fill="rgb(241,95,54)" fg:x="1001" fg:w="2"/><text x="78.7598%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="78.7451%" y="245" width="0.0784%" height="15" fill="rgb(248,12,23)" fg:x="1004" fg:w="1"/><text x="78.9951%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.7451%" y="229" width="0.0784%" height="15" fill="rgb(228,173,4)" fg:x="1004" fg:w="1"/><text x="78.9951%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.7451%" y="213" width="0.0784%" height="15" fill="rgb(254,99,5)" fg:x="1004" fg:w="1"/><text x="78.9951%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.31%)</title><rect x="78.6667%" y="277" width="0.3137%" height="15" fill="rgb(212,184,17)" fg:x="1003" fg:w="4"/><text x="78.9167%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.31%)</title><rect x="78.6667%" y="261" width="0.3137%" height="15" fill="rgb(252,174,1)" fg:x="1003" fg:w="4"/><text x="78.9167%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="78.8235%" y="245" width="0.1569%" height="15" fill="rgb(241,118,51)" fg:x="1005" fg:w="2"/><text x="79.0735%" y="255.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="78.8235%" y="229" width="0.1569%" height="15" fill="rgb(227,94,47)" fg:x="1005" fg:w="2"/><text x="79.0735%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="78.9804%" y="261" width="0.0784%" height="15" fill="rgb(229,104,2)" fg:x="1007" fg:w="1"/><text x="79.2304%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.0588%" y="245" width="0.0784%" height="15" fill="rgb(219,28,31)" fg:x="1008" fg:w="1"/><text x="79.3088%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (30 samples, 2.35%)</title><rect x="78.9804%" y="277" width="2.3529%" height="15" fill="rgb(233,109,36)" fg:x="1007" fg:w="30"/><text x="79.2304%" y="287.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (29 samples, 2.27%)</title><rect x="79.0588%" y="261" width="2.2745%" height="15" fill="rgb(246,88,11)" fg:x="1008" fg:w="29"/><text x="79.3088%" y="271.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (28 samples, 2.20%)</title><rect x="79.1373%" y="245" width="2.1961%" height="15" fill="rgb(209,212,17)" fg:x="1009" fg:w="28"/><text x="79.3873%" y="255.50">a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="81.3333%" y="277" width="0.1569%" height="15" fill="rgb(243,59,29)" fg:x="1037" fg:w="2"/><text x="81.5833%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 3.14%)</title><rect x="78.4314%" y="325" width="3.1373%" height="15" fill="rgb(244,205,48)" fg:x="1000" fg:w="40"/><text x="78.6814%" y="335.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (40 samples, 3.14%)</title><rect x="78.4314%" y="309" width="3.1373%" height="15" fill="rgb(227,30,6)" fg:x="1000" fg:w="40"/><text x="78.6814%" y="319.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (40 samples, 3.14%)</title><rect x="78.4314%" y="293" width="3.1373%" height="15" fill="rgb(220,205,48)" fg:x="1000" fg:w="40"/><text x="78.6814%" y="303.50">reg..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="81.4902%" y="277" width="0.0784%" height="15" fill="rgb(250,94,14)" fg:x="1039" fg:w="1"/><text x="81.7402%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="81.4902%" y="261" width="0.0784%" height="15" fill="rgb(216,119,42)" fg:x="1039" fg:w="1"/><text x="81.7402%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.4902%" y="245" width="0.0784%" height="15" fill="rgb(232,155,0)" fg:x="1039" fg:w="1"/><text x="81.7402%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.4902%" y="229" width="0.0784%" height="15" fill="rgb(212,24,32)" fg:x="1039" fg:w="1"/><text x="81.7402%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.8039%" y="309" width="0.0784%" height="15" fill="rgb(216,69,20)" fg:x="1043" fg:w="1"/><text x="82.0539%" y="319.50"></text></g><g><title>regex_automata::meta::strategy::new (67 samples, 5.25%)</title><rect x="77.1765%" y="357" width="5.2549%" height="15" fill="rgb(229,73,31)" fg:x="984" fg:w="67"/><text x="77.4265%" y="367.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (51 samples, 4.00%)</title><rect x="78.4314%" y="341" width="4.0000%" height="15" fill="rgb(224,219,20)" fg:x="1000" fg:w="51"/><text x="78.6814%" y="351.50">rege..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.86%)</title><rect x="81.5686%" y="325" width="0.8627%" height="15" fill="rgb(215,146,41)" fg:x="1040" fg:w="11"/><text x="81.8186%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.55%)</title><rect x="81.8824%" y="309" width="0.5490%" height="15" fill="rgb(244,71,31)" fg:x="1044" fg:w="7"/><text x="82.1324%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="82.4314%" y="309" width="0.0784%" height="15" fill="rgb(224,24,11)" fg:x="1051" fg:w="1"/><text x="82.6814%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="82.4314%" y="293" width="0.0784%" height="15" fill="rgb(229,76,15)" fg:x="1051" fg:w="1"/><text x="82.6814%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="82.4314%" y="277" width="0.0784%" height="15" fill="rgb(209,93,2)" fg:x="1051" fg:w="1"/><text x="82.6814%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="82.4314%" y="261" width="0.0784%" height="15" fill="rgb(216,200,50)" fg:x="1051" fg:w="1"/><text x="82.6814%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.31%)</title><rect x="82.4314%" y="325" width="0.3137%" height="15" fill="rgb(211,67,34)" fg:x="1051" fg:w="4"/><text x="82.6814%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="82.5098%" y="309" width="0.2353%" height="15" fill="rgb(225,87,47)" fg:x="1052" fg:w="3"/><text x="82.7598%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="82.5098%" y="293" width="0.2353%" height="15" fill="rgb(217,185,16)" fg:x="1052" fg:w="3"/><text x="82.7598%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="82.5098%" y="277" width="0.2353%" height="15" fill="rgb(205,0,0)" fg:x="1052" fg:w="3"/><text x="82.7598%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="82.5882%" y="261" width="0.1569%" height="15" fill="rgb(207,116,45)" fg:x="1053" fg:w="2"/><text x="82.8382%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.39%)</title><rect x="82.4314%" y="357" width="0.3922%" height="15" fill="rgb(221,156,26)" fg:x="1051" fg:w="5"/><text x="82.6814%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.39%)</title><rect x="82.4314%" y="341" width="0.3922%" height="15" fill="rgb(213,140,4)" fg:x="1051" fg:w="5"/><text x="82.6814%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="82.7451%" y="325" width="0.0784%" height="15" fill="rgb(231,224,15)" fg:x="1055" fg:w="1"/><text x="82.9951%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="82.7451%" y="309" width="0.0784%" height="15" fill="rgb(244,76,20)" fg:x="1055" fg:w="1"/><text x="82.9951%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.7451%" y="293" width="0.0784%" height="15" fill="rgb(238,117,7)" fg:x="1055" fg:w="1"/><text x="82.9951%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.7451%" y="277" width="0.0784%" height="15" fill="rgb(235,1,10)" fg:x="1055" fg:w="1"/><text x="82.9951%" y="287.50"></text></g><g><title>regex::regex::string::Regex::new (76 samples, 5.96%)</title><rect x="76.9412%" y="405" width="5.9608%" height="15" fill="rgb(216,165,6)" fg:x="981" fg:w="76"/><text x="77.1912%" y="415.50">regex::r..</text></g><g><title>regex::builders::Builder::build_one_string (75 samples, 5.88%)</title><rect x="77.0196%" y="389" width="5.8824%" height="15" fill="rgb(246,91,35)" fg:x="982" fg:w="75"/><text x="77.2696%" y="399.50">regex::..</text></g><g><title>regex_automata::meta::regex::Builder::build (75 samples, 5.88%)</title><rect x="77.0196%" y="373" width="5.8824%" height="15" fill="rgb(228,96,24)" fg:x="982" fg:w="75"/><text x="77.2696%" y="383.50">regex_a..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="82.8235%" y="357" width="0.0784%" height="15" fill="rgb(254,217,53)" fg:x="1056" fg:w="1"/><text x="83.0735%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="82.8235%" y="341" width="0.0784%" height="15" fill="rgb(209,60,0)" fg:x="1056" fg:w="1"/><text x="83.0735%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="82.8235%" y="325" width="0.0784%" height="15" fill="rgb(250,93,26)" fg:x="1056" fg:w="1"/><text x="83.0735%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="82.8235%" y="309" width="0.0784%" height="15" fill="rgb(211,9,40)" fg:x="1056" fg:w="1"/><text x="83.0735%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="83.2941%" y="325" width="0.0784%" height="15" fill="rgb(242,57,20)" fg:x="1062" fg:w="1"/><text x="83.5441%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.55%)</title><rect x="82.9020%" y="341" width="0.5490%" height="15" fill="rgb(248,85,48)" fg:x="1057" fg:w="7"/><text x="83.1520%" y="351.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="83.3725%" y="325" width="0.0784%" height="15" fill="rgb(212,117,2)" fg:x="1063" fg:w="1"/><text x="83.6225%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.3725%" y="309" width="0.0784%" height="15" fill="rgb(243,19,3)" fg:x="1063" fg:w="1"/><text x="83.6225%" y="319.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (95 samples, 7.45%)</title><rect x="76.1569%" y="421" width="7.4510%" height="15" fill="rgb(232,217,24)" fg:x="971" fg:w="95"/><text x="76.4069%" y="431.50">indefinite..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (9 samples, 0.71%)</title><rect x="82.9020%" y="405" width="0.7059%" height="15" fill="rgb(224,175,40)" fg:x="1057" fg:w="9"/><text x="83.1520%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (9 samples, 0.71%)</title><rect x="82.9020%" y="389" width="0.7059%" height="15" fill="rgb(212,162,32)" fg:x="1057" fg:w="9"/><text x="83.1520%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (9 samples, 0.71%)</title><rect x="82.9020%" y="373" width="0.7059%" height="15" fill="rgb(215,9,4)" fg:x="1057" fg:w="9"/><text x="83.1520%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.71%)</title><rect x="82.9020%" y="357" width="0.7059%" height="15" fill="rgb(242,42,7)" fg:x="1057" fg:w="9"/><text x="83.1520%" y="367.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="83.4510%" y="341" width="0.1569%" height="15" fill="rgb(242,184,45)" fg:x="1064" fg:w="2"/><text x="83.7010%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="83.4510%" y="325" width="0.1569%" height="15" fill="rgb(228,111,51)" fg:x="1064" fg:w="2"/><text x="83.7010%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.5294%" y="309" width="0.0784%" height="15" fill="rgb(236,147,17)" fg:x="1065" fg:w="1"/><text x="83.7794%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.5294%" y="293" width="0.0784%" height="15" fill="rgb(210,75,22)" fg:x="1065" fg:w="1"/><text x="83.7794%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.8431%" y="373" width="0.0784%" height="15" fill="rgb(217,159,45)" fg:x="1069" fg:w="1"/><text x="84.0931%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="83.9216%" y="373" width="0.0784%" height="15" fill="rgb(245,165,53)" fg:x="1070" fg:w="1"/><text x="84.1716%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="83.9216%" y="357" width="0.0784%" height="15" fill="rgb(251,190,50)" fg:x="1070" fg:w="1"/><text x="84.1716%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="83.9216%" y="341" width="0.0784%" height="15" fill="rgb(208,203,29)" fg:x="1070" fg:w="1"/><text x="84.1716%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="83.9216%" y="325" width="0.0784%" height="15" fill="rgb(207,209,35)" fg:x="1070" fg:w="1"/><text x="84.1716%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.47%)</title><rect x="83.6078%" y="405" width="0.4706%" height="15" fill="rgb(230,144,49)" fg:x="1066" fg:w="6"/><text x="83.8578%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (6 samples, 0.47%)</title><rect x="83.6078%" y="389" width="0.4706%" height="15" fill="rgb(229,31,6)" fg:x="1066" fg:w="6"/><text x="83.8578%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="84.0000%" y="373" width="0.0784%" height="15" fill="rgb(251,129,24)" fg:x="1071" fg:w="1"/><text x="84.2500%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="84.0000%" y="357" width="0.0784%" height="15" fill="rgb(235,105,15)" fg:x="1071" fg:w="1"/><text x="84.2500%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.2353%" y="325" width="0.0784%" height="15" fill="rgb(216,52,43)" fg:x="1074" fg:w="1"/><text x="84.4853%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="84.7843%" y="309" width="0.0784%" height="15" fill="rgb(238,144,41)" fg:x="1081" fg:w="1"/><text x="85.0343%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.7843%" y="293" width="0.0784%" height="15" fill="rgb(243,63,9)" fg:x="1081" fg:w="1"/><text x="85.0343%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="84.7843%" y="277" width="0.0784%" height="15" fill="rgb(246,208,1)" fg:x="1081" fg:w="1"/><text x="85.0343%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.8627%" y="309" width="0.0784%" height="15" fill="rgb(233,182,18)" fg:x="1082" fg:w="1"/><text x="85.1127%" y="319.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (13 samples, 1.02%)</title><rect x="84.0784%" y="405" width="1.0196%" height="15" fill="rgb(242,224,8)" fg:x="1072" fg:w="13"/><text x="84.3284%" y="415.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (12 samples, 0.94%)</title><rect x="84.1569%" y="389" width="0.9412%" height="15" fill="rgb(243,54,37)" fg:x="1073" fg:w="12"/><text x="84.4069%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (12 samples, 0.94%)</title><rect x="84.1569%" y="373" width="0.9412%" height="15" fill="rgb(233,192,12)" fg:x="1073" fg:w="12"/><text x="84.4069%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (12 samples, 0.94%)</title><rect x="84.1569%" y="357" width="0.9412%" height="15" fill="rgb(251,192,53)" fg:x="1073" fg:w="12"/><text x="84.4069%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (11 samples, 0.86%)</title><rect x="84.2353%" y="341" width="0.8627%" height="15" fill="rgb(246,141,26)" fg:x="1074" fg:w="11"/><text x="84.4853%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (10 samples, 0.78%)</title><rect x="84.3137%" y="325" width="0.7843%" height="15" fill="rgb(239,195,19)" fg:x="1075" fg:w="10"/><text x="84.5637%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="84.9412%" y="309" width="0.1569%" height="15" fill="rgb(241,16,39)" fg:x="1083" fg:w="2"/><text x="85.1912%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.1765%" y="341" width="0.0784%" height="15" fill="rgb(223,13,53)" fg:x="1086" fg:w="1"/><text x="85.4265%" y="351.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="85.2549%" y="325" width="0.1569%" height="15" fill="rgb(214,227,0)" fg:x="1087" fg:w="2"/><text x="85.5049%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (15 samples, 1.18%)</title><rect x="85.2549%" y="341" width="1.1765%" height="15" fill="rgb(228,103,26)" fg:x="1087" fg:w="15"/><text x="85.5049%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (13 samples, 1.02%)</title><rect x="85.4118%" y="325" width="1.0196%" height="15" fill="rgb(254,177,53)" fg:x="1089" fg:w="13"/><text x="85.6618%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.3529%" y="309" width="0.0784%" height="15" fill="rgb(208,201,34)" fg:x="1101" fg:w="1"/><text x="86.6029%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="86.4314%" y="341" width="0.2353%" height="15" fill="rgb(212,39,5)" fg:x="1102" fg:w="3"/><text x="86.6814%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="86.5098%" y="325" width="0.1569%" height="15" fill="rgb(246,117,3)" fg:x="1103" fg:w="2"/><text x="86.7598%" y="335.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="86.5882%" y="309" width="0.0784%" height="15" fill="rgb(244,118,39)" fg:x="1104" fg:w="1"/><text x="86.8382%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="86.5882%" y="293" width="0.0784%" height="15" fill="rgb(241,64,10)" fg:x="1104" fg:w="1"/><text x="86.8382%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="86.9020%" y="293" width="0.1569%" height="15" fill="rgb(229,39,44)" fg:x="1108" fg:w="2"/><text x="87.1520%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="86.9020%" y="277" width="0.1569%" height="15" fill="rgb(230,226,3)" fg:x="1108" fg:w="2"/><text x="87.1520%" y="287.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="86.9020%" y="261" width="0.1569%" height="15" fill="rgb(222,13,42)" fg:x="1108" fg:w="2"/><text x="87.1520%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="86.9020%" y="309" width="0.2353%" height="15" fill="rgb(247,180,54)" fg:x="1108" fg:w="3"/><text x="87.1520%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.0588%" y="293" width="0.0784%" height="15" fill="rgb(205,96,16)" fg:x="1110" fg:w="1"/><text x="87.3088%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.0588%" y="277" width="0.0784%" height="15" fill="rgb(205,100,21)" fg:x="1110" fg:w="1"/><text x="87.3088%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.0588%" y="261" width="0.0784%" height="15" fill="rgb(248,51,4)" fg:x="1110" fg:w="1"/><text x="87.3088%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (3 samples, 0.24%)</title><rect x="87.1373%" y="309" width="0.2353%" height="15" fill="rgb(217,197,30)" fg:x="1111" fg:w="3"/><text x="87.3873%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="87.2941%" y="293" width="0.0784%" height="15" fill="rgb(240,179,40)" fg:x="1113" fg:w="1"/><text x="87.5441%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="87.2941%" y="277" width="0.0784%" height="15" fill="rgb(212,185,35)" fg:x="1113" fg:w="1"/><text x="87.5441%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.2941%" y="261" width="0.0784%" height="15" fill="rgb(251,222,31)" fg:x="1113" fg:w="1"/><text x="87.5441%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="87.2941%" y="245" width="0.0784%" height="15" fill="rgb(208,140,36)" fg:x="1113" fg:w="1"/><text x="87.5441%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (5 samples, 0.39%)</title><rect x="87.3725%" y="309" width="0.3922%" height="15" fill="rgb(220,148,1)" fg:x="1114" fg:w="5"/><text x="87.6225%" y="319.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (5 samples, 0.39%)</title><rect x="87.3725%" y="293" width="0.3922%" height="15" fill="rgb(254,4,28)" fg:x="1114" fg:w="5"/><text x="87.6225%" y="303.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (5 samples, 0.39%)</title><rect x="87.3725%" y="277" width="0.3922%" height="15" fill="rgb(222,185,44)" fg:x="1114" fg:w="5"/><text x="87.6225%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (15 samples, 1.18%)</title><rect x="86.6667%" y="325" width="1.1765%" height="15" fill="rgb(215,74,39)" fg:x="1105" fg:w="15"/><text x="86.9167%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="87.7647%" y="309" width="0.0784%" height="15" fill="rgb(247,86,4)" fg:x="1119" fg:w="1"/><text x="88.0147%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (16 samples, 1.25%)</title><rect x="86.6667%" y="341" width="1.2549%" height="15" fill="rgb(231,105,32)" fg:x="1105" fg:w="16"/><text x="86.9167%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="87.8431%" y="325" width="0.0784%" height="15" fill="rgb(222,65,35)" fg:x="1120" fg:w="1"/><text x="88.0931%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="87.8431%" y="309" width="0.0784%" height="15" fill="rgb(218,145,35)" fg:x="1120" fg:w="1"/><text x="88.0931%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="87.8431%" y="293" width="0.0784%" height="15" fill="rgb(208,7,15)" fg:x="1120" fg:w="1"/><text x="88.0931%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.8431%" y="277" width="0.0784%" height="15" fill="rgb(209,83,13)" fg:x="1120" fg:w="1"/><text x="88.0931%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="87.9216%" y="341" width="0.0784%" height="15" fill="rgb(218,3,10)" fg:x="1121" fg:w="1"/><text x="88.1716%" y="351.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.63%)</title><rect x="88.7059%" y="229" width="0.6275%" height="15" fill="rgb(211,219,4)" fg:x="1131" fg:w="8"/><text x="88.9559%" y="239.50"></text></g><g><title>__libc_free (4 samples, 0.31%)</title><rect x="89.3333%" y="229" width="0.3137%" height="15" fill="rgb(228,194,12)" fg:x="1139" fg:w="4"/><text x="89.5833%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="89.6471%" y="229" width="0.1569%" height="15" fill="rgb(210,175,7)" fg:x="1143" fg:w="2"/><text x="89.8971%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.7255%" y="213" width="0.0784%" height="15" fill="rgb(243,132,6)" fg:x="1144" fg:w="1"/><text x="89.9755%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.7255%" y="197" width="0.0784%" height="15" fill="rgb(207,72,18)" fg:x="1144" fg:w="1"/><text x="89.9755%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="89.7255%" y="181" width="0.0784%" height="15" fill="rgb(236,1,18)" fg:x="1144" fg:w="1"/><text x="89.9755%" y="191.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="89.8824%" y="197" width="0.1569%" height="15" fill="rgb(227,0,18)" fg:x="1146" fg:w="2"/><text x="90.1324%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.0392%" y="165" width="0.0784%" height="15" fill="rgb(247,37,5)" fg:x="1148" fg:w="1"/><text x="90.2892%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.1176%" y="165" width="0.0784%" height="15" fill="rgb(237,179,24)" fg:x="1149" fg:w="1"/><text x="90.3676%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="90.0392%" y="197" width="0.2353%" height="15" fill="rgb(226,53,20)" fg:x="1148" fg:w="3"/><text x="90.2892%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="90.0392%" y="181" width="0.2353%" height="15" fill="rgb(247,75,7)" fg:x="1148" fg:w="3"/><text x="90.2892%" y="191.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="90.1961%" y="165" width="0.0784%" height="15" fill="rgb(233,96,12)" fg:x="1150" fg:w="1"/><text x="90.4461%" y="175.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="90.1961%" y="149" width="0.0784%" height="15" fill="rgb(224,125,0)" fg:x="1150" fg:w="1"/><text x="90.4461%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.5882%" y="181" width="0.0784%" height="15" fill="rgb(224,92,25)" fg:x="1155" fg:w="1"/><text x="90.8382%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (12 samples, 0.94%)</title><rect x="89.8039%" y="229" width="0.9412%" height="15" fill="rgb(224,42,24)" fg:x="1145" fg:w="12"/><text x="90.0539%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (11 samples, 0.86%)</title><rect x="89.8824%" y="213" width="0.8627%" height="15" fill="rgb(234,132,49)" fg:x="1146" fg:w="11"/><text x="90.1324%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (6 samples, 0.47%)</title><rect x="90.2745%" y="197" width="0.4706%" height="15" fill="rgb(248,100,35)" fg:x="1151" fg:w="6"/><text x="90.5245%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="90.6667%" y="181" width="0.0784%" height="15" fill="rgb(239,94,40)" fg:x="1156" fg:w="1"/><text x="90.9167%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.6667%" y="165" width="0.0784%" height="15" fill="rgb(235,139,28)" fg:x="1156" fg:w="1"/><text x="90.9167%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.6667%" y="149" width="0.0784%" height="15" fill="rgb(217,144,7)" fg:x="1156" fg:w="1"/><text x="90.9167%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.6667%" y="133" width="0.0784%" height="15" fill="rgb(227,55,4)" fg:x="1156" fg:w="1"/><text x="90.9167%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="90.7451%" y="229" width="0.0784%" height="15" fill="rgb(252,82,54)" fg:x="1157" fg:w="1"/><text x="90.9951%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="90.7451%" y="213" width="0.0784%" height="15" fill="rgb(245,172,4)" fg:x="1157" fg:w="1"/><text x="90.9951%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.7451%" y="197" width="0.0784%" height="15" fill="rgb(207,26,27)" fg:x="1157" fg:w="1"/><text x="90.9951%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (30 samples, 2.35%)</title><rect x="90.8235%" y="229" width="2.3529%" height="15" fill="rgb(252,98,18)" fg:x="1158" fg:w="30"/><text x="91.0735%" y="239.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (30 samples, 2.35%)</title><rect x="90.8235%" y="213" width="2.3529%" height="15" fill="rgb(244,8,26)" fg:x="1158" fg:w="30"/><text x="91.0735%" y="223.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (30 samples, 2.35%)</title><rect x="90.8235%" y="197" width="2.3529%" height="15" fill="rgb(237,173,45)" fg:x="1158" fg:w="30"/><text x="91.0735%" y="207.50">a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.31%)</title><rect x="93.1765%" y="229" width="0.3137%" height="15" fill="rgb(208,213,49)" fg:x="1188" fg:w="4"/><text x="93.4265%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (75 samples, 5.88%)</title><rect x="88.0000%" y="325" width="5.8824%" height="15" fill="rgb(212,122,37)" fg:x="1122" fg:w="75"/><text x="88.2500%" y="335.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (75 samples, 5.88%)</title><rect x="88.0000%" y="309" width="5.8824%" height="15" fill="rgb(213,80,17)" fg:x="1122" fg:w="75"/><text x="88.2500%" y="319.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (75 samples, 5.88%)</title><rect x="88.0000%" y="293" width="5.8824%" height="15" fill="rgb(206,210,43)" fg:x="1122" fg:w="75"/><text x="88.2500%" y="303.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (75 samples, 5.88%)</title><rect x="88.0000%" y="277" width="5.8824%" height="15" fill="rgb(229,214,3)" fg:x="1122" fg:w="75"/><text x="88.2500%" y="287.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (75 samples, 5.88%)</title><rect x="88.0000%" y="261" width="5.8824%" height="15" fill="rgb(235,213,29)" fg:x="1122" fg:w="75"/><text x="88.2500%" y="271.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (75 samples, 5.88%)</title><rect x="88.0000%" y="245" width="5.8824%" height="15" fill="rgb(248,135,26)" fg:x="1122" fg:w="75"/><text x="88.2500%" y="255.50">regex_a..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (5 samples, 0.39%)</title><rect x="93.4902%" y="229" width="0.3922%" height="15" fill="rgb(242,188,12)" fg:x="1192" fg:w="5"/><text x="93.7402%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="93.7255%" y="213" width="0.1569%" height="15" fill="rgb(245,38,12)" fg:x="1195" fg:w="2"/><text x="93.9755%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.8039%" y="197" width="0.0784%" height="15" fill="rgb(218,42,13)" fg:x="1196" fg:w="1"/><text x="94.0539%" y="207.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="94.0392%" y="309" width="0.0784%" height="15" fill="rgb(238,132,49)" fg:x="1199" fg:w="1"/><text x="94.2892%" y="319.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="94.1176%" y="309" width="0.1569%" height="15" fill="rgb(209,196,19)" fg:x="1200" fg:w="2"/><text x="94.3676%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="94.2745%" y="309" width="0.0784%" height="15" fill="rgb(244,131,22)" fg:x="1202" fg:w="1"/><text x="94.5245%" y="319.50"></text></g><g><title>regex_automata::meta::strategy::new (120 samples, 9.41%)</title><rect x="85.0980%" y="357" width="9.4118%" height="15" fill="rgb(223,18,34)" fg:x="1085" fg:w="120"/><text x="85.3480%" y="367.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (83 samples, 6.51%)</title><rect x="88.0000%" y="341" width="6.5098%" height="15" fill="rgb(252,124,54)" fg:x="1122" fg:w="83"/><text x="88.2500%" y="351.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.63%)</title><rect x="93.8824%" y="325" width="0.6275%" height="15" fill="rgb(229,106,42)" fg:x="1197" fg:w="8"/><text x="94.1324%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="94.3529%" y="309" width="0.1569%" height="15" fill="rgb(221,129,1)" fg:x="1203" fg:w="2"/><text x="94.6029%" y="319.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="94.5882%" y="309" width="0.0784%" height="15" fill="rgb(229,74,15)" fg:x="1206" fg:w="1"/><text x="94.8382%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="94.6667%" y="309" width="0.0784%" height="15" fill="rgb(210,206,50)" fg:x="1207" fg:w="1"/><text x="94.9167%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="94.6667%" y="293" width="0.0784%" height="15" fill="rgb(251,114,31)" fg:x="1207" fg:w="1"/><text x="94.9167%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="94.6667%" y="277" width="0.0784%" height="15" fill="rgb(215,225,28)" fg:x="1207" fg:w="1"/><text x="94.9167%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="94.6667%" y="261" width="0.0784%" height="15" fill="rgb(237,109,14)" fg:x="1207" fg:w="1"/><text x="94.9167%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.39%)</title><rect x="94.5098%" y="325" width="0.3922%" height="15" fill="rgb(230,13,37)" fg:x="1205" fg:w="5"/><text x="94.7598%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="94.7451%" y="309" width="0.1569%" height="15" fill="rgb(231,40,28)" fg:x="1208" fg:w="2"/><text x="94.9951%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="94.7451%" y="293" width="0.1569%" height="15" fill="rgb(231,202,18)" fg:x="1208" fg:w="2"/><text x="94.9951%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="94.7451%" y="277" width="0.1569%" height="15" fill="rgb(225,33,18)" fg:x="1208" fg:w="2"/><text x="94.9951%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="94.7451%" y="261" width="0.1569%" height="15" fill="rgb(223,64,47)" fg:x="1208" fg:w="2"/><text x="94.9951%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.47%)</title><rect x="94.5098%" y="357" width="0.4706%" height="15" fill="rgb(234,114,13)" fg:x="1205" fg:w="6"/><text x="94.7598%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.47%)</title><rect x="94.5098%" y="341" width="0.4706%" height="15" fill="rgb(248,56,40)" fg:x="1205" fg:w="6"/><text x="94.7598%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="94.9020%" y="325" width="0.0784%" height="15" fill="rgb(221,194,21)" fg:x="1210" fg:w="1"/><text x="95.1520%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="94.9020%" y="309" width="0.0784%" height="15" fill="rgb(242,108,46)" fg:x="1210" fg:w="1"/><text x="95.1520%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.9804%" y="309" width="0.0784%" height="15" fill="rgb(220,106,10)" fg:x="1211" fg:w="1"/><text x="95.2304%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.9804%" y="293" width="0.0784%" height="15" fill="rgb(211,88,4)" fg:x="1211" fg:w="1"/><text x="95.2304%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.9804%" y="277" width="0.0784%" height="15" fill="rgb(214,95,34)" fg:x="1211" fg:w="1"/><text x="95.2304%" y="287.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (7 samples, 0.55%)</title><rect x="95.0588%" y="309" width="0.5490%" height="15" fill="rgb(250,160,33)" fg:x="1212" fg:w="7"/><text x="95.3088%" y="319.50"></text></g><g><title>core::slice::sort::merge_sort (3 samples, 0.24%)</title><rect x="95.3725%" y="293" width="0.2353%" height="15" fill="rgb(225,29,10)" fg:x="1216" fg:w="3"/><text x="95.6225%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (9 samples, 0.71%)</title><rect x="94.9804%" y="325" width="0.7059%" height="15" fill="rgb(224,28,30)" fg:x="1211" fg:w="9"/><text x="95.2304%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="95.6078%" y="309" width="0.0784%" height="15" fill="rgb(231,77,4)" fg:x="1219" fg:w="1"/><text x="95.8578%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="95.6078%" y="293" width="0.0784%" height="15" fill="rgb(209,63,21)" fg:x="1219" fg:w="1"/><text x="95.8578%" y="303.50"></text></g><g><title>indefinite::rules::number::Number::check (156 samples, 12.24%)</title><rect x="83.6078%" y="421" width="12.2353%" height="15" fill="rgb(226,22,11)" fg:x="1066" fg:w="156"/><text x="83.8578%" y="431.50">indefinite::rules:..</text></g><g><title>regex::regex::string::Regex::new (137 samples, 10.75%)</title><rect x="85.0980%" y="405" width="10.7451%" height="15" fill="rgb(216,82,30)" fg:x="1085" fg:w="137"/><text x="85.3480%" y="415.50">regex::regex::st..</text></g><g><title>regex::builders::Builder::build_one_string (137 samples, 10.75%)</title><rect x="85.0980%" y="389" width="10.7451%" height="15" fill="rgb(246,227,38)" fg:x="1085" fg:w="137"/><text x="85.3480%" y="399.50">regex::builders:..</text></g><g><title>regex_automata::meta::regex::Builder::build (137 samples, 10.75%)</title><rect x="85.0980%" y="373" width="10.7451%" height="15" fill="rgb(251,203,53)" fg:x="1085" fg:w="137"/><text x="85.3480%" y="383.50">regex_automata::..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (11 samples, 0.86%)</title><rect x="94.9804%" y="357" width="0.8627%" height="15" fill="rgb(254,101,1)" fg:x="1211" fg:w="11"/><text x="95.2304%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (11 samples, 0.86%)</title><rect x="94.9804%" y="341" width="0.8627%" height="15" fill="rgb(241,180,5)" fg:x="1211" fg:w="11"/><text x="95.2304%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="95.6863%" y="325" width="0.1569%" height="15" fill="rgb(218,168,4)" fg:x="1220" fg:w="2"/><text x="95.9363%" y="335.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="95.7647%" y="309" width="0.0784%" height="15" fill="rgb(224,223,32)" fg:x="1221" fg:w="1"/><text x="96.0147%" y="319.50"></text></g><g><title>regex_syntax::hir::ClassUnicode::literal (1 samples, 0.08%)</title><rect x="95.7647%" y="293" width="0.0784%" height="15" fill="rgb(236,106,22)" fg:x="1221" fg:w="1"/><text x="96.0147%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="95.8431%" y="389" width="0.0784%" height="15" fill="rgb(206,121,5)" fg:x="1222" fg:w="1"/><text x="96.0931%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="95.8431%" y="373" width="0.0784%" height="15" fill="rgb(233,87,28)" fg:x="1222" fg:w="1"/><text x="96.0931%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="95.8431%" y="357" width="0.0784%" height="15" fill="rgb(236,137,17)" fg:x="1222" fg:w="1"/><text x="96.0931%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="95.8431%" y="341" width="0.0784%" height="15" fill="rgb(209,183,38)" fg:x="1222" fg:w="1"/><text x="96.0931%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="95.9216%" y="389" width="0.0784%" height="15" fill="rgb(206,162,44)" fg:x="1223" fg:w="1"/><text x="96.1716%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="95.9216%" y="373" width="0.0784%" height="15" fill="rgb(237,70,39)" fg:x="1223" fg:w="1"/><text x="96.1716%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.9216%" y="357" width="0.0784%" height="15" fill="rgb(212,176,5)" fg:x="1223" fg:w="1"/><text x="96.1716%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="95.9216%" y="341" width="0.0784%" height="15" fill="rgb(232,95,16)" fg:x="1223" fg:w="1"/><text x="96.1716%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.9216%" y="325" width="0.0784%" height="15" fill="rgb(219,115,35)" fg:x="1223" fg:w="1"/><text x="96.1716%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.9216%" y="309" width="0.0784%" height="15" fill="rgb(251,67,27)" fg:x="1223" fg:w="1"/><text x="96.1716%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="96.0784%" y="341" width="0.1569%" height="15" fill="rgb(222,95,40)" fg:x="1225" fg:w="2"/><text x="96.3284%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.1569%" y="325" width="0.0784%" height="15" fill="rgb(250,35,16)" fg:x="1226" fg:w="1"/><text x="96.4069%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.1569%" y="309" width="0.0784%" height="15" fill="rgb(224,86,44)" fg:x="1226" fg:w="1"/><text x="96.4069%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.3922%" y="325" width="0.0784%" height="15" fill="rgb(237,53,53)" fg:x="1229" fg:w="1"/><text x="96.6422%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="96.4706%" y="325" width="0.0784%" height="15" fill="rgb(208,171,33)" fg:x="1230" fg:w="1"/><text x="96.7206%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.4706%" y="309" width="0.0784%" height="15" fill="rgb(222,64,27)" fg:x="1230" fg:w="1"/><text x="96.7206%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="96.5490%" y="325" width="0.2353%" height="15" fill="rgb(221,121,35)" fg:x="1231" fg:w="3"/><text x="96.7990%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="96.6275%" y="309" width="0.1569%" height="15" fill="rgb(228,137,42)" fg:x="1232" fg:w="2"/><text x="96.8775%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (1 samples, 0.08%)</title><rect x="96.7843%" y="325" width="0.0784%" height="15" fill="rgb(227,54,21)" fg:x="1234" fg:w="1"/><text x="97.0343%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="96.8627%" y="325" width="0.0784%" height="15" fill="rgb(240,168,33)" fg:x="1235" fg:w="1"/><text x="97.1127%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="96.9412%" y="309" width="0.0784%" height="15" fill="rgb(243,159,6)" fg:x="1236" fg:w="1"/><text x="97.1912%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="96.9412%" y="293" width="0.0784%" height="15" fill="rgb(205,211,41)" fg:x="1236" fg:w="1"/><text x="97.1912%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="96.9412%" y="277" width="0.0784%" height="15" fill="rgb(253,30,1)" fg:x="1236" fg:w="1"/><text x="97.1912%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="96.9412%" y="261" width="0.0784%" height="15" fill="rgb(226,80,18)" fg:x="1236" fg:w="1"/><text x="97.1912%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="96.9412%" y="245" width="0.0784%" height="15" fill="rgb(253,156,46)" fg:x="1236" fg:w="1"/><text x="97.1912%" y="255.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="97.0980%" y="293" width="0.0784%" height="15" fill="rgb(248,87,27)" fg:x="1238" fg:w="1"/><text x="97.3480%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (13 samples, 1.02%)</title><rect x="96.2353%" y="341" width="1.0196%" height="15" fill="rgb(227,122,2)" fg:x="1227" fg:w="13"/><text x="96.4853%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (4 samples, 0.31%)</title><rect x="96.9412%" y="325" width="0.3137%" height="15" fill="rgb(229,94,39)" fg:x="1236" fg:w="4"/><text x="97.1912%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="97.0196%" y="309" width="0.2353%" height="15" fill="rgb(225,173,31)" fg:x="1237" fg:w="3"/><text x="97.2696%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="97.1765%" y="293" width="0.0784%" height="15" fill="rgb(239,176,30)" fg:x="1239" fg:w="1"/><text x="97.4265%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="97.4902%" y="293" width="0.0784%" height="15" fill="rgb(212,104,21)" fg:x="1243" fg:w="1"/><text x="97.7402%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (3 samples, 0.24%)</title><rect x="97.5686%" y="293" width="0.2353%" height="15" fill="rgb(240,209,40)" fg:x="1244" fg:w="3"/><text x="97.8186%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (2 samples, 0.16%)</title><rect x="97.6471%" y="277" width="0.1569%" height="15" fill="rgb(234,195,5)" fg:x="1245" fg:w="2"/><text x="97.8971%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (2 samples, 0.16%)</title><rect x="97.6471%" y="261" width="0.1569%" height="15" fill="rgb(238,213,1)" fg:x="1245" fg:w="2"/><text x="97.8971%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.63%)</title><rect x="97.2549%" y="341" width="0.6275%" height="15" fill="rgb(235,182,54)" fg:x="1240" fg:w="8"/><text x="97.5049%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.63%)</title><rect x="97.2549%" y="325" width="0.6275%" height="15" fill="rgb(229,50,46)" fg:x="1240" fg:w="8"/><text x="97.5049%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.39%)</title><rect x="97.4902%" y="309" width="0.3922%" height="15" fill="rgb(219,145,13)" fg:x="1243" fg:w="5"/><text x="97.7402%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="97.8039%" y="293" width="0.0784%" height="15" fill="rgb(220,226,10)" fg:x="1247" fg:w="1"/><text x="98.0539%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (25 samples, 1.96%)</title><rect x="96.0000%" y="357" width="1.9608%" height="15" fill="rgb(248,47,30)" fg:x="1224" fg:w="25"/><text x="96.2500%" y="367.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="97.8824%" y="341" width="0.0784%" height="15" fill="rgb(231,209,44)" fg:x="1248" fg:w="1"/><text x="98.1324%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="97.8824%" y="325" width="0.0784%" height="15" fill="rgb(209,80,30)" fg:x="1248" fg:w="1"/><text x="98.1324%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="97.8824%" y="309" width="0.0784%" height="15" fill="rgb(232,9,14)" fg:x="1248" fg:w="1"/><text x="98.1324%" y="319.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="97.8824%" y="293" width="0.0784%" height="15" fill="rgb(243,91,43)" fg:x="1248" fg:w="1"/><text x="98.1324%" y="303.50"></text></g><g><title>regex::regex::string::Regex::new (26 samples, 2.04%)</title><rect x="96.0000%" y="389" width="2.0392%" height="15" fill="rgb(231,90,52)" fg:x="1224" fg:w="26"/><text x="96.2500%" y="399.50">r..</text></g><g><title>regex::builders::Builder::build_one_string (26 samples, 2.04%)</title><rect x="96.0000%" y="373" width="2.0392%" height="15" fill="rgb(253,192,44)" fg:x="1224" fg:w="26"/><text x="96.2500%" y="383.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="97.9608%" y="357" width="0.0784%" height="15" fill="rgb(241,66,31)" fg:x="1249" fg:w="1"/><text x="98.2108%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="98.3529%" y="309" width="0.1569%" height="15" fill="rgb(235,81,37)" fg:x="1254" fg:w="2"/><text x="98.6029%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.55%)</title><rect x="98.0392%" y="325" width="0.5490%" height="15" fill="rgb(223,221,9)" fg:x="1250" fg:w="7"/><text x="98.2892%" y="335.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="98.5098%" y="309" width="0.0784%" height="15" fill="rgb(242,180,7)" fg:x="1256" fg:w="1"/><text x="98.7598%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="98.5098%" y="293" width="0.0784%" height="15" fill="rgb(243,78,19)" fg:x="1256" fg:w="1"/><text x="98.7598%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.5098%" y="277" width="0.0784%" height="15" fill="rgb(233,23,17)" fg:x="1256" fg:w="1"/><text x="98.7598%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.5098%" y="261" width="0.0784%" height="15" fill="rgb(252,122,45)" fg:x="1256" fg:w="1"/><text x="98.7598%" y="271.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (36 samples, 2.82%)</title><rect x="95.8431%" y="405" width="2.8235%" height="15" fill="rgb(247,108,20)" fg:x="1222" fg:w="36"/><text x="96.0931%" y="415.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.63%)</title><rect x="98.0392%" y="389" width="0.6275%" height="15" fill="rgb(235,84,21)" fg:x="1250" fg:w="8"/><text x="98.2892%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.63%)</title><rect x="98.0392%" y="373" width="0.6275%" height="15" fill="rgb(247,129,10)" fg:x="1250" fg:w="8"/><text x="98.2892%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.63%)</title><rect x="98.0392%" y="357" width="0.6275%" height="15" fill="rgb(208,173,14)" fg:x="1250" fg:w="8"/><text x="98.2892%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (8 samples, 0.63%)</title><rect x="98.0392%" y="341" width="0.6275%" height="15" fill="rgb(236,31,38)" fg:x="1250" fg:w="8"/><text x="98.2892%" y="351.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="98.5882%" y="325" width="0.0784%" height="15" fill="rgb(232,65,17)" fg:x="1257" fg:w="1"/><text x="98.8382%" y="335.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (299 samples, 23.45%)</title><rect x="75.2941%" y="501" width="23.4510%" height="15" fill="rgb(224,45,49)" fg:x="960" fg:w="299"/><text x="75.5441%" y="511.50">&lt;&amp;kernel::model::entry::Entry as plug..</text></g><g><title>plugins_core::looking::model::qualify_name (290 samples, 22.75%)</title><rect x="76.0000%" y="485" width="22.7451%" height="15" fill="rgb(225,2,53)" fg:x="969" fg:w="290"/><text x="76.2500%" y="495.50">plugins_core::looking::model::qualif..</text></g><g><title>indefinite::indefinite (290 samples, 22.75%)</title><rect x="76.0000%" y="469" width="22.7451%" height="15" fill="rgb(248,210,53)" fg:x="969" fg:w="290"/><text x="76.2500%" y="479.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (290 samples, 22.75%)</title><rect x="76.0000%" y="453" width="22.7451%" height="15" fill="rgb(211,1,30)" fg:x="969" fg:w="290"/><text x="76.2500%" y="463.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (289 samples, 22.67%)</title><rect x="76.0784%" y="437" width="22.6667%" height="15" fill="rgb(224,96,15)" fg:x="970" fg:w="289"/><text x="76.3284%" y="447.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (37 samples, 2.90%)</title><rect x="95.8431%" y="421" width="2.9020%" height="15" fill="rgb(252,45,11)" fg:x="1222" fg:w="37"/><text x="96.0931%" y="431.50">in..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="98.6667%" y="405" width="0.0784%" height="15" fill="rgb(220,125,38)" fg:x="1258" fg:w="1"/><text x="98.9167%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::to_entry (1 samples, 0.08%)</title><rect x="98.7451%" y="501" width="0.0784%" height="15" fill="rgb(243,161,33)" fg:x="1259" fg:w="1"/><text x="98.9951%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="98.7451%" y="485" width="0.0784%" height="15" fill="rgb(248,197,34)" fg:x="1259" fg:w="1"/><text x="98.9951%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="98.7451%" y="469" width="0.0784%" height="15" fill="rgb(228,165,23)" fg:x="1259" fg:w="1"/><text x="98.9951%" y="479.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="98.7451%" y="453" width="0.0784%" height="15" fill="rgb(236,94,38)" fg:x="1259" fg:w="1"/><text x="98.9951%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="98.7451%" y="437" width="0.0784%" height="15" fill="rgb(220,13,23)" fg:x="1259" fg:w="1"/><text x="98.9951%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="98.7451%" y="421" width="0.0784%" height="15" fill="rgb(234,26,39)" fg:x="1259" fg:w="1"/><text x="98.9951%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="98.7451%" y="405" width="0.0784%" height="15" fill="rgb(205,117,44)" fg:x="1259" fg:w="1"/><text x="98.9951%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="98.7451%" y="389" width="0.0784%" height="15" fill="rgb(250,42,2)" fg:x="1259" fg:w="1"/><text x="98.9951%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="98.7451%" y="373" width="0.0784%" height="15" fill="rgb(223,83,14)" fg:x="1259" fg:w="1"/><text x="98.9951%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="98.7451%" y="357" width="0.0784%" height="15" fill="rgb(241,147,50)" fg:x="1259" fg:w="1"/><text x="98.9951%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="98.7451%" y="341" width="0.0784%" height="15" fill="rgb(218,90,6)" fg:x="1259" fg:w="1"/><text x="98.9951%" y="351.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="98.7451%" y="325" width="0.0784%" height="15" fill="rgb(210,191,5)" fg:x="1259" fg:w="1"/><text x="98.9951%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="98.8235%" y="325" width="0.0784%" height="15" fill="rgb(225,139,19)" fg:x="1260" fg:w="1"/><text x="99.0735%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.8235%" y="309" width="0.0784%" height="15" fill="rgb(210,1,33)" fg:x="1260" fg:w="1"/><text x="99.0735%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="98.8235%" y="341" width="0.1569%" height="15" fill="rgb(213,50,3)" fg:x="1260" fg:w="2"/><text x="99.0735%" y="351.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="98.9020%" y="325" width="0.0784%" height="15" fill="rgb(234,227,4)" fg:x="1261" fg:w="1"/><text x="99.1520%" y="335.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="98.9020%" y="309" width="0.0784%" height="15" fill="rgb(246,63,5)" fg:x="1261" fg:w="1"/><text x="99.1520%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.9020%" y="293" width="0.0784%" height="15" fill="rgb(245,136,27)" fg:x="1261" fg:w="1"/><text x="99.1520%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.9020%" y="277" width="0.0784%" height="15" fill="rgb(247,199,27)" fg:x="1261" fg:w="1"/><text x="99.1520%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.9020%" y="261" width="0.0784%" height="15" fill="rgb(252,158,49)" fg:x="1261" fg:w="1"/><text x="99.1520%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.9020%" y="245" width="0.0784%" height="15" fill="rgb(254,73,1)" fg:x="1261" fg:w="1"/><text x="99.1520%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.9020%" y="229" width="0.0784%" height="15" fill="rgb(248,93,19)" fg:x="1261" fg:w="1"/><text x="99.1520%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.9020%" y="213" width="0.0784%" height="15" fill="rgb(206,67,5)" fg:x="1261" fg:w="1"/><text x="99.1520%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.9020%" y="197" width="0.0784%" height="15" fill="rgb(209,210,4)" fg:x="1261" fg:w="1"/><text x="99.1520%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.9020%" y="181" width="0.0784%" height="15" fill="rgb(214,185,36)" fg:x="1261" fg:w="1"/><text x="99.1520%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.9020%" y="165" width="0.0784%" height="15" fill="rgb(233,191,26)" fg:x="1261" fg:w="1"/><text x="99.1520%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.9020%" y="149" width="0.0784%" height="15" fill="rgb(248,94,17)" fg:x="1261" fg:w="1"/><text x="99.1520%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.9020%" y="133" width="0.0784%" height="15" fill="rgb(250,64,4)" fg:x="1261" fg:w="1"/><text x="99.1520%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.9020%" y="117" width="0.0784%" height="15" fill="rgb(218,41,53)" fg:x="1261" fg:w="1"/><text x="99.1520%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.9020%" y="101" width="0.0784%" height="15" fill="rgb(251,176,28)" fg:x="1261" fg:w="1"/><text x="99.1520%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.9020%" y="85" width="0.0784%" height="15" fill="rgb(247,22,9)" fg:x="1261" fg:w="1"/><text x="99.1520%" y="95.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.9020%" y="69" width="0.0784%" height="15" fill="rgb(218,201,14)" fg:x="1261" fg:w="1"/><text x="99.1520%" y="79.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="98.9020%" y="53" width="0.0784%" height="15" fill="rgb(218,94,10)" fg:x="1261" fg:w="1"/><text x="99.1520%" y="63.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="98.9020%" y="37" width="0.0784%" height="15" fill="rgb(222,183,52)" fg:x="1261" fg:w="1"/><text x="99.1520%" y="47.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (3 samples, 0.24%)</title><rect x="98.8235%" y="373" width="0.2353%" height="15" fill="rgb(242,140,25)" fg:x="1260" fg:w="3"/><text x="99.0735%" y="383.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="98.8235%" y="357" width="0.2353%" height="15" fill="rgb(235,197,38)" fg:x="1260" fg:w="3"/><text x="99.0735%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="98.9804%" y="341" width="0.0784%" height="15" fill="rgb(237,136,15)" fg:x="1262" fg:w="1"/><text x="99.2304%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.0588%" y="277" width="0.0784%" height="15" fill="rgb(223,44,49)" fg:x="1263" fg:w="1"/><text x="99.3088%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.1373%" y="277" width="0.0784%" height="15" fill="rgb(227,71,15)" fg:x="1264" fg:w="1"/><text x="99.3873%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.1373%" y="261" width="0.0784%" height="15" fill="rgb(225,153,20)" fg:x="1264" fg:w="1"/><text x="99.3873%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.1373%" y="245" width="0.0784%" height="15" fill="rgb(210,190,26)" fg:x="1264" fg:w="1"/><text x="99.3873%" y="255.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.2157%" y="245" width="0.0784%" height="15" fill="rgb(223,147,5)" fg:x="1265" fg:w="1"/><text x="99.4657%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.2157%" y="229" width="0.0784%" height="15" fill="rgb(207,14,23)" fg:x="1265" fg:w="1"/><text x="99.4657%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.39%)</title><rect x="99.0588%" y="293" width="0.3922%" height="15" fill="rgb(211,195,53)" fg:x="1263" fg:w="5"/><text x="99.3088%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="99.2157%" y="277" width="0.2353%" height="15" fill="rgb(237,75,46)" fg:x="1265" fg:w="3"/><text x="99.4657%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="99.2157%" y="261" width="0.2353%" height="15" fill="rgb(254,55,14)" fg:x="1265" fg:w="3"/><text x="99.4657%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.2941%" y="245" width="0.1569%" height="15" fill="rgb(230,185,30)" fg:x="1266" fg:w="2"/><text x="99.5441%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.2941%" y="229" width="0.1569%" height="15" fill="rgb(220,14,11)" fg:x="1266" fg:w="2"/><text x="99.5441%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.2941%" y="213" width="0.1569%" height="15" fill="rgb(215,169,44)" fg:x="1266" fg:w="2"/><text x="99.5441%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.2941%" y="197" width="0.1569%" height="15" fill="rgb(253,203,20)" fg:x="1266" fg:w="2"/><text x="99.5441%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.2941%" y="181" width="0.1569%" height="15" fill="rgb(229,225,17)" fg:x="1266" fg:w="2"/><text x="99.5441%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.2941%" y="165" width="0.1569%" height="15" fill="rgb(236,76,26)" fg:x="1266" fg:w="2"/><text x="99.5441%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.3725%" y="149" width="0.0784%" height="15" fill="rgb(234,15,30)" fg:x="1267" fg:w="1"/><text x="99.6225%" y="159.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.3725%" y="133" width="0.0784%" height="15" fill="rgb(211,113,48)" fg:x="1267" fg:w="1"/><text x="99.6225%" y="143.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.47%)</title><rect x="99.0588%" y="357" width="0.4706%" height="15" fill="rgb(221,31,36)" fg:x="1263" fg:w="6"/><text x="99.3088%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (6 samples, 0.47%)</title><rect x="99.0588%" y="341" width="0.4706%" height="15" fill="rgb(215,118,52)" fg:x="1263" fg:w="6"/><text x="99.3088%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.47%)</title><rect x="99.0588%" y="325" width="0.4706%" height="15" fill="rgb(241,151,27)" fg:x="1263" fg:w="6"/><text x="99.3088%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (6 samples, 0.47%)</title><rect x="99.0588%" y="309" width="0.4706%" height="15" fill="rgb(253,51,3)" fg:x="1263" fg:w="6"/><text x="99.3088%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.4510%" y="293" width="0.0784%" height="15" fill="rgb(216,201,24)" fg:x="1268" fg:w="1"/><text x="99.7010%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5294%" y="277" width="0.0784%" height="15" fill="rgb(231,107,4)" fg:x="1269" fg:w="1"/><text x="99.7794%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5294%" y="261" width="0.0784%" height="15" fill="rgb(243,97,54)" fg:x="1269" fg:w="1"/><text x="99.7794%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5294%" y="245" width="0.0784%" height="15" fill="rgb(221,32,51)" fg:x="1269" fg:w="1"/><text x="99.7794%" y="255.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (11 samples, 0.86%)</title><rect x="98.8235%" y="469" width="0.8627%" height="15" fill="rgb(218,171,35)" fg:x="1260" fg:w="11"/><text x="99.0735%" y="479.50"></text></g><g><title>core::iter::adapters::try_process (11 samples, 0.86%)</title><rect x="98.8235%" y="453" width="0.8627%" height="15" fill="rgb(214,20,53)" fg:x="1260" fg:w="11"/><text x="99.0735%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (11 samples, 0.86%)</title><rect x="98.8235%" y="437" width="0.8627%" height="15" fill="rgb(239,9,52)" fg:x="1260" fg:w="11"/><text x="99.0735%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (11 samples, 0.86%)</title><rect x="98.8235%" y="421" width="0.8627%" height="15" fill="rgb(215,114,45)" fg:x="1260" fg:w="11"/><text x="99.0735%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (11 samples, 0.86%)</title><rect x="98.8235%" y="405" width="0.8627%" height="15" fill="rgb(208,118,9)" fg:x="1260" fg:w="11"/><text x="99.0735%" y="415.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (11 samples, 0.86%)</title><rect x="98.8235%" y="389" width="0.8627%" height="15" fill="rgb(235,7,39)" fg:x="1260" fg:w="11"/><text x="99.0735%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (8 samples, 0.63%)</title><rect x="99.0588%" y="373" width="0.6275%" height="15" fill="rgb(243,225,15)" fg:x="1263" fg:w="8"/><text x="99.3088%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.5294%" y="357" width="0.1569%" height="15" fill="rgb(225,216,18)" fg:x="1269" fg:w="2"/><text x="99.7794%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.5294%" y="341" width="0.1569%" height="15" fill="rgb(233,36,38)" fg:x="1269" fg:w="2"/><text x="99.7794%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.5294%" y="325" width="0.1569%" height="15" fill="rgb(239,88,23)" fg:x="1269" fg:w="2"/><text x="99.7794%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.5294%" y="309" width="0.1569%" height="15" fill="rgb(219,181,35)" fg:x="1269" fg:w="2"/><text x="99.7794%" y="319.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.5294%" y="293" width="0.1569%" height="15" fill="rgb(215,18,46)" fg:x="1269" fg:w="2"/><text x="99.7794%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.6078%" y="277" width="0.0784%" height="15" fill="rgb(241,38,11)" fg:x="1270" fg:w="1"/><text x="99.8578%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.6078%" y="261" width="0.0784%" height="15" fill="rgb(248,169,45)" fg:x="1270" fg:w="1"/><text x="99.8578%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.6078%" y="245" width="0.0784%" height="15" fill="rgb(239,50,49)" fg:x="1270" fg:w="1"/><text x="99.8578%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.6078%" y="229" width="0.0784%" height="15" fill="rgb(231,96,31)" fg:x="1270" fg:w="1"/><text x="99.8578%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.6078%" y="213" width="0.0784%" height="15" fill="rgb(224,193,37)" fg:x="1270" fg:w="1"/><text x="99.8578%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.6078%" y="197" width="0.0784%" height="15" fill="rgb(227,153,50)" fg:x="1270" fg:w="1"/><text x="99.8578%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.6078%" y="181" width="0.0784%" height="15" fill="rgb(249,228,3)" fg:x="1270" fg:w="1"/><text x="99.8578%" y="191.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (317 samples, 24.86%)</title><rect x="74.9804%" y="725" width="24.8627%" height="15" fill="rgb(219,164,43)" fg:x="956" fg:w="317"/><text x="75.2304%" y="735.50">&lt;engine::session::Session as kernel::act..</text></g><g><title>kernel::plugins::mw::apply_middleware (317 samples, 24.86%)</title><rect x="74.9804%" y="709" width="24.8627%" height="15" fill="rgb(216,45,41)" fg:x="956" fg:w="317"/><text x="75.2304%" y="719.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (317 samples, 24.86%)</title><rect x="74.9804%" y="693" width="24.8627%" height="15" fill="rgb(210,226,51)" fg:x="956" fg:w="317"/><text x="75.2304%" y="703.50">kernel::plugins::mw::MiddlewareNext::han..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (317 samples, 24.86%)</title><rect x="74.9804%" y="677" width="24.8627%" height="15" fill="rgb(209,117,49)" fg:x="956" fg:w="317"/><text x="75.2304%" y="687.50">&lt;engine::session::ExpandSurroundingsMidd..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (313 samples, 24.55%)</title><rect x="75.2941%" y="661" width="24.5490%" height="15" fill="rgb(206,196,24)" fg:x="960" fg:w="313"/><text x="75.5441%" y="671.50">kernel::plugins::mw::MiddlewareNext::ha..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (313 samples, 24.55%)</title><rect x="75.2941%" y="645" width="24.5490%" height="15" fill="rgb(253,218,3)" fg:x="960" fg:w="313"/><text x="75.5441%" y="655.50">&lt;plugins_dynlib::DynamicMiddleware as k..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (313 samples, 24.55%)</title><rect x="75.2941%" y="629" width="24.5490%" height="15" fill="rgb(252,166,2)" fg:x="960" fg:w="313"/><text x="75.5441%" y="639.50">kernel::plugins::mw::MiddlewareNext::ha..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (313 samples, 24.55%)</title><rect x="75.2941%" y="613" width="24.5490%" height="15" fill="rgb(236,218,26)" fg:x="960" fg:w="313"/><text x="75.5441%" y="623.50">core::ops::function::FnOnce::call_once{..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (313 samples, 24.55%)</title><rect x="75.2941%" y="597" width="24.5490%" height="15" fill="rgb(254,84,19)" fg:x="960" fg:w="313"/><text x="75.5441%" y="607.50">kernel::plugins::mw::MiddlewareNext::ha..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (313 samples, 24.55%)</title><rect x="75.2941%" y="581" width="24.5490%" height="15" fill="rgb(219,137,29)" fg:x="960" fg:w="313"/><text x="75.5441%" y="591.50">core::ops::function::FnOnce::call_once{..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (313 samples, 24.55%)</title><rect x="75.2941%" y="565" width="24.5490%" height="15" fill="rgb(227,47,52)" fg:x="960" fg:w="313"/><text x="75.5441%" y="575.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::f..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (313 samples, 24.55%)</title><rect x="75.2941%" y="549" width="24.5490%" height="15" fill="rgb(229,167,24)" fg:x="960" fg:w="313"/><text x="75.5441%" y="559.50">&lt;engine::session::state::State as kerne..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (313 samples, 24.55%)</title><rect x="75.2941%" y="533" width="24.5490%" height="15" fill="rgb(233,164,1)" fg:x="960" fg:w="313"/><text x="75.5441%" y="543.50">&lt;plugins_core::looking::actions::LookAc..</text></g><g><title>plugins_core::looking::model::new_area_observation (313 samples, 24.55%)</title><rect x="75.2941%" y="517" width="24.5490%" height="15" fill="rgb(218,88,48)" fg:x="960" fg:w="313"/><text x="75.5441%" y="527.50">plugins_core::looking::model::new_area_..</text></g><g><title>kernel::model::entry::Entry::scope (13 samples, 1.02%)</title><rect x="98.8235%" y="501" width="1.0196%" height="15" fill="rgb(226,214,24)" fg:x="1260" fg:w="13"/><text x="99.0735%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (13 samples, 1.02%)</title><rect x="98.8235%" y="485" width="1.0196%" height="15" fill="rgb(233,29,12)" fg:x="1260" fg:w="13"/><text x="99.0735%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.6863%" y="469" width="0.1569%" height="15" fill="rgb(219,120,34)" fg:x="1271" fg:w="2"/><text x="99.9363%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.6863%" y="453" width="0.1569%" height="15" fill="rgb(226,78,44)" fg:x="1271" fg:w="2"/><text x="99.9363%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.7647%" y="437" width="0.0784%" height="15" fill="rgb(240,15,48)" fg:x="1272" fg:w="1"/><text x="100.0147%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7647%" y="421" width="0.0784%" height="15" fill="rgb(253,176,7)" fg:x="1272" fg:w="1"/><text x="100.0147%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="99.7647%" y="405" width="0.0784%" height="15" fill="rgb(206,166,28)" fg:x="1272" fg:w="1"/><text x="100.0147%" y="415.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="99.7647%" y="389" width="0.0784%" height="15" fill="rgb(241,53,51)" fg:x="1272" fg:w="1"/><text x="100.0147%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="99.8431%" y="725" width="0.0784%" height="15" fill="rgb(249,112,30)" fg:x="1273" fg:w="1"/><text x="100.0931%" y="735.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="99.8431%" y="709" width="0.0784%" height="15" fill="rgb(217,85,30)" fg:x="1273" fg:w="1"/><text x="100.0931%" y="719.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.8431%" y="693" width="0.0784%" height="15" fill="rgb(233,49,7)" fg:x="1273" fg:w="1"/><text x="100.0931%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.8431%" y="677" width="0.0784%" height="15" fill="rgb(234,109,9)" fg:x="1273" fg:w="1"/><text x="100.0931%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.8431%" y="661" width="0.0784%" height="15" fill="rgb(253,95,22)" fg:x="1273" fg:w="1"/><text x="100.0931%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.8431%" y="645" width="0.0784%" height="15" fill="rgb(233,176,25)" fg:x="1273" fg:w="1"/><text x="100.0931%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.8431%" y="629" width="0.0784%" height="15" fill="rgb(236,33,39)" fg:x="1273" fg:w="1"/><text x="100.0931%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.8431%" y="613" width="0.0784%" height="15" fill="rgb(223,226,42)" fg:x="1273" fg:w="1"/><text x="100.0931%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.8431%" y="597" width="0.0784%" height="15" fill="rgb(216,99,33)" fg:x="1273" fg:w="1"/><text x="100.0931%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.8431%" y="581" width="0.0784%" height="15" fill="rgb(235,84,23)" fg:x="1273" fg:w="1"/><text x="100.0931%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.8431%" y="565" width="0.0784%" height="15" fill="rgb(232,2,27)" fg:x="1273" fg:w="1"/><text x="100.0931%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.8431%" y="549" width="0.0784%" height="15" fill="rgb(241,23,22)" fg:x="1273" fg:w="1"/><text x="100.0931%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.8431%" y="533" width="0.0784%" height="15" fill="rgb(211,73,27)" fg:x="1273" fg:w="1"/><text x="100.0931%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.8431%" y="517" width="0.0784%" height="15" fill="rgb(235,109,49)" fg:x="1273" fg:w="1"/><text x="100.0931%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.8431%" y="501" width="0.0784%" height="15" fill="rgb(230,99,29)" fg:x="1273" fg:w="1"/><text x="100.0931%" y="511.50"></text></g><g><title>all (1,275 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(245,199,7)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="1103.50"></text></g><g><title>simple-484c7248 (1,275 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(217,179,10)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="1087.50">simple-484c7248</text></g><g><title>_start (1,275 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(254,99,47)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="1071.50">_start</text></g><g><title>__libc_start_main (1,275 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(251,121,7)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="1055.50">__libc_start_main</text></g><g><title>main (1,275 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(250,177,26)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="1039.50">main</text></g><g><title>std::rt::lang_start_internal (1,275 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(232,88,15)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="1023.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,275 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(251,54,54)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="1007.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,275 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(208,177,15)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="991.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,275 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(205,97,32)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="975.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,275 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(217,192,13)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="959.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,275 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(215,163,41)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,275 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(246,83,29)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,275 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(219,2,45)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="911.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,275 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(242,215,33)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="895.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,275 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(217,1,6)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="879.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,275 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(207,85,52)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="863.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,275 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(231,171,19)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="847.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,275 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(207,128,4)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="831.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,275 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(219,208,4)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="815.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (396 samples, 31.06%)</title><rect x="68.9412%" y="789" width="31.0588%" height="15" fill="rgb(235,161,42)" fg:x="879" fg:w="396"/><text x="69.1912%" y="799.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion:..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (396 samples, 31.06%)</title><rect x="68.9412%" y="773" width="31.0588%" height="15" fill="rgb(247,218,18)" fg:x="879" fg:w="396"/><text x="69.1912%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (396 samples, 31.06%)</title><rect x="68.9412%" y="757" width="31.0588%" height="15" fill="rgb(232,114,51)" fg:x="879" fg:w="396"/><text x="69.1912%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (319 samples, 25.02%)</title><rect x="74.9804%" y="741" width="25.0196%" height="15" fill="rgb(222,95,3)" fg:x="956" fg:w="319"/><text x="75.2304%" y="751.50">engine::session::Session::evaluate_and_p..</text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="99.9216%" y="725" width="0.0784%" height="15" fill="rgb(240,65,29)" fg:x="1274" fg:w="1"/><text x="100.1716%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="99.9216%" y="709" width="0.0784%" height="15" fill="rgb(249,209,20)" fg:x="1274" fg:w="1"/><text x="100.1716%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="99.9216%" y="693" width="0.0784%" height="15" fill="rgb(241,48,37)" fg:x="1274" fg:w="1"/><text x="100.1716%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (1 samples, 0.08%)</title><rect x="99.9216%" y="677" width="0.0784%" height="15" fill="rgb(230,140,42)" fg:x="1274" fg:w="1"/><text x="100.1716%" y="687.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.9216%" y="661" width="0.0784%" height="15" fill="rgb(230,176,45)" fg:x="1274" fg:w="1"/><text x="100.1716%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.9216%" y="645" width="0.0784%" height="15" fill="rgb(245,112,21)" fg:x="1274" fg:w="1"/><text x="100.1716%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9216%" y="629" width="0.0784%" height="15" fill="rgb(207,183,35)" fg:x="1274" fg:w="1"/><text x="100.1716%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.9216%" y="613" width="0.0784%" height="15" fill="rgb(227,44,33)" fg:x="1274" fg:w="1"/><text x="100.1716%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9216%" y="597" width="0.0784%" height="15" fill="rgb(246,120,21)" fg:x="1274" fg:w="1"/><text x="100.1716%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.9216%" y="581" width="0.0784%" height="15" fill="rgb(235,57,52)" fg:x="1274" fg:w="1"/><text x="100.1716%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9216%" y="565" width="0.0784%" height="15" fill="rgb(238,84,10)" fg:x="1274" fg:w="1"/><text x="100.1716%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.9216%" y="549" width="0.0784%" height="15" fill="rgb(251,200,32)" fg:x="1274" fg:w="1"/><text x="100.1716%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9216%" y="533" width="0.0784%" height="15" fill="rgb(247,159,13)" fg:x="1274" fg:w="1"/><text x="100.1716%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.9216%" y="517" width="0.0784%" height="15" fill="rgb(238,64,4)" fg:x="1274" fg:w="1"/><text x="100.1716%" y="527.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.9216%" y="501" width="0.0784%" height="15" fill="rgb(221,131,51)" fg:x="1274" fg:w="1"/><text x="100.1716%" y="511.50"></text></g></svg></svg>