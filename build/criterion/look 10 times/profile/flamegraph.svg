<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1125.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="1254"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0000%" y="725" width="0.0797%" height="15" fill="rgb(208,130,10)" fg:x="0" fg:w="1"/><text x="0.2500%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="0.3987%" y="693" width="0.0797%" height="15" fill="rgb(211,213,45)" fg:x="5" fg:w="1"/><text x="0.6487%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.08%)</title><rect x="0.3987%" y="677" width="0.0797%" height="15" fill="rgb(235,100,30)" fg:x="5" fg:w="1"/><text x="0.6487%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="0.3987%" y="661" width="0.0797%" height="15" fill="rgb(206,144,31)" fg:x="5" fg:w="1"/><text x="0.6487%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (6 samples, 0.48%)</title><rect x="0.0797%" y="725" width="0.4785%" height="15" fill="rgb(224,200,26)" fg:x="1" fg:w="6"/><text x="0.3297%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="0.0797%" y="709" width="0.4785%" height="15" fill="rgb(247,104,53)" fg:x="1" fg:w="6"/><text x="0.3297%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_dynlib::DynamicPlugin&gt; (1 samples, 0.08%)</title><rect x="0.4785%" y="693" width="0.0797%" height="15" fill="rgb(220,14,17)" fg:x="6" fg:w="1"/><text x="0.7285%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.5582%" y="613" width="0.0797%" height="15" fill="rgb(230,140,40)" fg:x="7" fg:w="1"/><text x="0.8082%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="0.6380%" y="613" width="0.1595%" height="15" fill="rgb(229,2,41)" fg:x="8" fg:w="2"/><text x="0.8880%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.7177%" y="597" width="0.0797%" height="15" fill="rgb(232,89,16)" fg:x="9" fg:w="1"/><text x="0.9677%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="0.7974%" y="597" width="0.0797%" height="15" fill="rgb(247,59,52)" fg:x="10" fg:w="1"/><text x="1.0474%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="0.7974%" y="581" width="0.0797%" height="15" fill="rgb(226,110,21)" fg:x="10" fg:w="1"/><text x="1.0474%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.7974%" y="565" width="0.0797%" height="15" fill="rgb(224,176,43)" fg:x="10" fg:w="1"/><text x="1.0474%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.8772%" y="581" width="0.0797%" height="15" fill="rgb(221,73,6)" fg:x="11" fg:w="1"/><text x="1.1272%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="0.5582%" y="661" width="0.5582%" height="15" fill="rgb(232,78,19)" fg:x="7" fg:w="7"/><text x="0.8082%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (7 samples, 0.56%)</title><rect x="0.5582%" y="645" width="0.5582%" height="15" fill="rgb(233,112,48)" fg:x="7" fg:w="7"/><text x="0.8082%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.56%)</title><rect x="0.5582%" y="629" width="0.5582%" height="15" fill="rgb(243,131,47)" fg:x="7" fg:w="7"/><text x="0.8082%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="0.7974%" y="613" width="0.3190%" height="15" fill="rgb(226,51,1)" fg:x="10" fg:w="4"/><text x="1.0474%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="0.8772%" y="597" width="0.2392%" height="15" fill="rgb(247,58,7)" fg:x="11" fg:w="3"/><text x="1.1272%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="0.9569%" y="581" width="0.1595%" height="15" fill="rgb(209,7,32)" fg:x="12" fg:w="2"/><text x="1.2069%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.0367%" y="565" width="0.0797%" height="15" fill="rgb(209,39,41)" fg:x="13" fg:w="1"/><text x="1.2867%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.1962%" y="645" width="0.1595%" height="15" fill="rgb(226,182,46)" fg:x="15" fg:w="2"/><text x="1.4462%" y="655.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.4354%" y="629" width="0.1595%" height="15" fill="rgb(230,219,10)" fg:x="18" fg:w="2"/><text x="1.6854%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.5949%" y="629" width="0.0797%" height="15" fill="rgb(227,175,30)" fg:x="20" fg:w="1"/><text x="1.8449%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.5949%" y="613" width="0.0797%" height="15" fill="rgb(217,2,50)" fg:x="20" fg:w="1"/><text x="1.8449%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.6746%" y="613" width="0.0797%" height="15" fill="rgb(229,160,0)" fg:x="21" fg:w="1"/><text x="1.9246%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.7544%" y="613" width="0.0797%" height="15" fill="rgb(207,78,37)" fg:x="22" fg:w="1"/><text x="2.0044%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.8341%" y="597" width="0.0797%" height="15" fill="rgb(225,57,0)" fg:x="23" fg:w="1"/><text x="2.0841%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.9139%" y="581" width="0.0797%" height="15" fill="rgb(232,154,2)" fg:x="24" fg:w="1"/><text x="2.1639%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="1.9936%" y="581" width="0.1595%" height="15" fill="rgb(241,212,25)" fg:x="25" fg:w="2"/><text x="2.2436%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 1.67%)</title><rect x="0.5582%" y="709" width="1.6746%" height="15" fill="rgb(226,69,20)" fg:x="7" fg:w="21"/><text x="0.8082%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (21 samples, 1.67%)</title><rect x="0.5582%" y="693" width="1.6746%" height="15" fill="rgb(247,184,54)" fg:x="7" fg:w="21"/><text x="0.8082%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 1.67%)</title><rect x="0.5582%" y="677" width="1.6746%" height="15" fill="rgb(210,145,0)" fg:x="7" fg:w="21"/><text x="0.8082%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (14 samples, 1.12%)</title><rect x="1.1164%" y="661" width="1.1164%" height="15" fill="rgb(253,82,12)" fg:x="14" fg:w="14"/><text x="1.3664%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (11 samples, 0.88%)</title><rect x="1.3557%" y="645" width="0.8772%" height="15" fill="rgb(245,42,11)" fg:x="17" fg:w="11"/><text x="1.6057%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="1.6746%" y="629" width="0.5582%" height="15" fill="rgb(219,147,32)" fg:x="21" fg:w="7"/><text x="1.9246%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="1.8341%" y="613" width="0.3987%" height="15" fill="rgb(246,12,7)" fg:x="23" fg:w="5"/><text x="2.0841%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="1.9139%" y="597" width="0.3190%" height="15" fill="rgb(243,50,9)" fg:x="24" fg:w="4"/><text x="2.1639%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.1531%" y="581" width="0.0797%" height="15" fill="rgb(219,149,6)" fg:x="27" fg:w="1"/><text x="2.4031%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 2.31%)</title><rect x="0.0000%" y="741" width="2.3126%" height="15" fill="rgb(241,51,42)" fg:x="0" fg:w="29"/><text x="0.2500%" y="751.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (22 samples, 1.75%)</title><rect x="0.5582%" y="725" width="1.7544%" height="15" fill="rgb(226,128,27)" fg:x="7" fg:w="22"/><text x="0.8082%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.2329%" y="709" width="0.0797%" height="15" fill="rgb(244,144,4)" fg:x="28" fg:w="1"/><text x="2.4829%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.3126%" y="677" width="0.0797%" height="15" fill="rgb(221,4,13)" fg:x="29" fg:w="1"/><text x="2.5626%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.8708%" y="613" width="0.0797%" height="15" fill="rgb(208,170,28)" fg:x="36" fg:w="1"/><text x="3.1208%" y="623.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="2.8708%" y="645" width="0.1595%" height="15" fill="rgb(226,131,13)" fg:x="36" fg:w="2"/><text x="3.1208%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="2.8708%" y="629" width="0.1595%" height="15" fill="rgb(215,72,41)" fg:x="36" fg:w="2"/><text x="3.1208%" y="639.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="2.9506%" y="613" width="0.0797%" height="15" fill="rgb(243,108,20)" fg:x="37" fg:w="1"/><text x="3.2006%" y="623.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="3.0303%" y="613" width="0.0797%" height="15" fill="rgb(230,189,17)" fg:x="38" fg:w="1"/><text x="3.2803%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="3.0303%" y="597" width="0.0797%" height="15" fill="rgb(220,50,17)" fg:x="38" fg:w="1"/><text x="3.2803%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="3.0303%" y="581" width="0.0797%" height="15" fill="rgb(248,152,48)" fg:x="38" fg:w="1"/><text x="3.2803%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.0303%" y="565" width="0.0797%" height="15" fill="rgb(244,91,11)" fg:x="38" fg:w="1"/><text x="3.2803%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.0303%" y="549" width="0.0797%" height="15" fill="rgb(220,157,5)" fg:x="38" fg:w="1"/><text x="3.2803%" y="559.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="3.0303%" y="645" width="0.1595%" height="15" fill="rgb(253,137,8)" fg:x="38" fg:w="2"/><text x="3.2803%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="3.0303%" y="629" width="0.1595%" height="15" fill="rgb(217,137,51)" fg:x="38" fg:w="2"/><text x="3.2803%" y="639.50"></text></g><g><title>&lt;plugins_core::carrying::actions::TakeOutAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="3.1100%" y="613" width="0.0797%" height="15" fill="rgb(218,209,53)" fg:x="39" fg:w="1"/><text x="3.3600%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="3.1100%" y="597" width="0.0797%" height="15" fill="rgb(249,137,25)" fg:x="39" fg:w="1"/><text x="3.3600%" y="607.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="3.1898%" y="645" width="0.0797%" height="15" fill="rgb(239,155,26)" fg:x="40" fg:w="1"/><text x="3.4398%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="3.1898%" y="629" width="0.0797%" height="15" fill="rgb(227,85,46)" fg:x="40" fg:w="1"/><text x="3.4398%" y="639.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="3.1898%" y="613" width="0.0797%" height="15" fill="rgb(251,107,43)" fg:x="40" fg:w="1"/><text x="3.4398%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.1898%" y="597" width="0.0797%" height="15" fill="rgb(234,170,33)" fg:x="40" fg:w="1"/><text x="3.4398%" y="607.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="3.2695%" y="645" width="0.1595%" height="15" fill="rgb(206,29,35)" fg:x="41" fg:w="2"/><text x="3.5195%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="3.2695%" y="629" width="0.1595%" height="15" fill="rgb(227,138,25)" fg:x="41" fg:w="2"/><text x="3.5195%" y="639.50"></text></g><g><title>&lt;plugins_core::fashion::actions::RemoveAction as kernel::plugins::HasActionSchema&gt;::action_schema (2 samples, 0.16%)</title><rect x="3.2695%" y="613" width="0.1595%" height="15" fill="rgb(249,131,35)" fg:x="41" fg:w="2"/><text x="3.5195%" y="623.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="3.2695%" y="597" width="0.1595%" height="15" fill="rgb(239,6,40)" fg:x="41" fg:w="2"/><text x="3.5195%" y="607.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="3.4290%" y="645" width="0.0797%" height="15" fill="rgb(246,136,47)" fg:x="43" fg:w="1"/><text x="3.6790%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="3.4290%" y="629" width="0.0797%" height="15" fill="rgb(253,58,26)" fg:x="43" fg:w="1"/><text x="3.6790%" y="639.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="3.4290%" y="613" width="0.0797%" height="15" fill="rgb(237,141,10)" fg:x="43" fg:w="1"/><text x="3.6790%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.4290%" y="597" width="0.0797%" height="15" fill="rgb(234,156,12)" fg:x="43" fg:w="1"/><text x="3.6790%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.4290%" y="581" width="0.0797%" height="15" fill="rgb(243,224,36)" fg:x="43" fg:w="1"/><text x="3.6790%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.4290%" y="565" width="0.0797%" height="15" fill="rgb(205,229,51)" fg:x="43" fg:w="1"/><text x="3.6790%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.4290%" y="549" width="0.0797%" height="15" fill="rgb(223,189,4)" fg:x="43" fg:w="1"/><text x="3.6790%" y="559.50"></text></g><g><title>&lt;plugins_core::moving::actions::AddRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="3.5088%" y="613" width="0.0797%" height="15" fill="rgb(249,167,54)" fg:x="44" fg:w="1"/><text x="3.7588%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="3.5088%" y="597" width="0.0797%" height="15" fill="rgb(218,34,28)" fg:x="44" fg:w="1"/><text x="3.7588%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.5088%" y="581" width="0.0797%" height="15" fill="rgb(232,109,42)" fg:x="44" fg:w="1"/><text x="3.7588%" y="591.50"></text></g><g><title>&lt;plugins_core::moving::actions::RemoveRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="3.5885%" y="613" width="0.0797%" height="15" fill="rgb(248,214,46)" fg:x="45" fg:w="1"/><text x="3.8385%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="3.5885%" y="597" width="0.0797%" height="15" fill="rgb(244,216,40)" fg:x="45" fg:w="1"/><text x="3.8385%" y="607.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (3 samples, 0.24%)</title><rect x="3.5088%" y="645" width="0.2392%" height="15" fill="rgb(231,226,31)" fg:x="44" fg:w="3"/><text x="3.7588%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (3 samples, 0.24%)</title><rect x="3.5088%" y="629" width="0.2392%" height="15" fill="rgb(238,38,43)" fg:x="44" fg:w="3"/><text x="3.7588%" y="639.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="3.6683%" y="613" width="0.0797%" height="15" fill="rgb(208,88,43)" fg:x="46" fg:w="1"/><text x="3.9183%" y="623.50"></text></g><g><title>&lt;plugins_rune::actions::RuneAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="3.7480%" y="613" width="0.0797%" height="15" fill="rgb(205,136,37)" fg:x="47" fg:w="1"/><text x="3.9980%" y="623.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="3.7480%" y="645" width="0.1595%" height="15" fill="rgb(237,34,14)" fg:x="47" fg:w="2"/><text x="3.9980%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="3.7480%" y="629" width="0.1595%" height="15" fill="rgb(236,193,44)" fg:x="47" fg:w="2"/><text x="3.9980%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="3.8278%" y="613" width="0.0797%" height="15" fill="rgb(231,48,10)" fg:x="48" fg:w="1"/><text x="4.0778%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.8278%" y="597" width="0.0797%" height="15" fill="rgb(213,141,34)" fg:x="48" fg:w="1"/><text x="4.0778%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.9075%" y="645" width="0.0797%" height="15" fill="rgb(249,130,34)" fg:x="49" fg:w="1"/><text x="4.1575%" y="655.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (21 samples, 1.67%)</title><rect x="2.3923%" y="661" width="1.6746%" height="15" fill="rgb(219,42,41)" fg:x="30" fg:w="21"/><text x="2.6423%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="3.9872%" y="645" width="0.0797%" height="15" fill="rgb(224,100,54)" fg:x="50" fg:w="1"/><text x="4.2372%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.2265%" y="645" width="0.0797%" height="15" fill="rgb(229,200,27)" fg:x="53" fg:w="1"/><text x="4.4765%" y="655.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="4.3062%" y="629" width="0.0797%" height="15" fill="rgb(217,118,10)" fg:x="54" fg:w="1"/><text x="4.5562%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="4.3062%" y="613" width="0.0797%" height="15" fill="rgb(206,22,3)" fg:x="54" fg:w="1"/><text x="4.5562%" y="623.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="4.3062%" y="597" width="0.0797%" height="15" fill="rgb(232,163,46)" fg:x="54" fg:w="1"/><text x="4.5562%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="4.3062%" y="581" width="0.0797%" height="15" fill="rgb(206,95,13)" fg:x="54" fg:w="1"/><text x="4.5562%" y="591.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="4.3062%" y="565" width="0.0797%" height="15" fill="rgb(253,154,18)" fg:x="54" fg:w="1"/><text x="4.5562%" y="575.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="4.3062%" y="645" width="0.1595%" height="15" fill="rgb(219,32,23)" fg:x="54" fg:w="2"/><text x="4.5562%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="4.3860%" y="629" width="0.0797%" height="15" fill="rgb(230,191,45)" fg:x="55" fg:w="1"/><text x="4.6360%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="4.3860%" y="613" width="0.0797%" height="15" fill="rgb(229,64,36)" fg:x="55" fg:w="1"/><text x="4.6360%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="4.3860%" y="597" width="0.0797%" height="15" fill="rgb(205,129,25)" fg:x="55" fg:w="1"/><text x="4.6360%" y="607.50"></text></g><g><title>libloading::library_filename (1 samples, 0.08%)</title><rect x="4.4657%" y="645" width="0.0797%" height="15" fill="rgb(254,112,7)" fg:x="56" fg:w="1"/><text x="4.7157%" y="655.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (1 samples, 0.08%)</title><rect x="4.4657%" y="629" width="0.0797%" height="15" fill="rgb(226,53,48)" fg:x="56" fg:w="1"/><text x="4.7157%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="4.4657%" y="613" width="0.0797%" height="15" fill="rgb(214,153,38)" fg:x="56" fg:w="1"/><text x="4.7157%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="4.4657%" y="597" width="0.0797%" height="15" fill="rgb(243,101,7)" fg:x="56" fg:w="1"/><text x="4.7157%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="4.4657%" y="581" width="0.0797%" height="15" fill="rgb(240,140,22)" fg:x="56" fg:w="1"/><text x="4.7157%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="4.4657%" y="565" width="0.0797%" height="15" fill="rgb(235,114,2)" fg:x="56" fg:w="1"/><text x="4.7157%" y="575.50"></text></g><g><title>core::ffi::c_str::CStr::from_bytes_with_nul (1 samples, 0.08%)</title><rect x="4.5455%" y="597" width="0.0797%" height="15" fill="rgb(242,59,12)" fg:x="57" fg:w="1"/><text x="4.7955%" y="607.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.08%)</title><rect x="4.5455%" y="581" width="0.0797%" height="15" fill="rgb(252,134,9)" fg:x="57" fg:w="1"/><text x="4.7955%" y="591.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1 samples, 0.08%)</title><rect x="4.5455%" y="565" width="0.0797%" height="15" fill="rgb(236,4,44)" fg:x="57" fg:w="1"/><text x="4.7955%" y="575.50"></text></g><g><title>core::slice::memchr::memchr_naive (1 samples, 0.08%)</title><rect x="4.5455%" y="549" width="0.0797%" height="15" fill="rgb(254,172,41)" fg:x="57" fg:w="1"/><text x="4.7955%" y="559.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (9 samples, 0.72%)</title><rect x="4.0670%" y="661" width="0.7177%" height="15" fill="rgb(244,63,20)" fg:x="51" fg:w="9"/><text x="4.3170%" y="671.50"></text></g><g><title>std::sys::unix::fs::stat (3 samples, 0.24%)</title><rect x="4.5455%" y="645" width="0.2392%" height="15" fill="rgb(250,73,31)" fg:x="57" fg:w="3"/><text x="4.7955%" y="655.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (3 samples, 0.24%)</title><rect x="4.5455%" y="629" width="0.2392%" height="15" fill="rgb(241,38,36)" fg:x="57" fg:w="3"/><text x="4.7955%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 0.24%)</title><rect x="4.5455%" y="613" width="0.2392%" height="15" fill="rgb(245,211,2)" fg:x="57" fg:w="3"/><text x="4.7955%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (2 samples, 0.16%)</title><rect x="4.6252%" y="597" width="0.1595%" height="15" fill="rgb(206,120,28)" fg:x="58" fg:w="2"/><text x="4.8752%" y="607.50"></text></g><g><title>std::sys::unix::fs::try_statx (2 samples, 0.16%)</title><rect x="4.6252%" y="581" width="0.1595%" height="15" fill="rgb(211,59,34)" fg:x="58" fg:w="2"/><text x="4.8752%" y="591.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.16%)</title><rect x="4.6252%" y="565" width="0.1595%" height="15" fill="rgb(233,168,5)" fg:x="58" fg:w="2"/><text x="4.8752%" y="575.50"></text></g><g><title>statx (2 samples, 0.16%)</title><rect x="4.6252%" y="549" width="0.1595%" height="15" fill="rgb(234,33,13)" fg:x="58" fg:w="2"/><text x="4.8752%" y="559.50"></text></g><g><title>plugins_rune::runner::SharedRunners::add_runners_for (1 samples, 0.08%)</title><rect x="4.7847%" y="645" width="0.0797%" height="15" fill="rgb(231,150,26)" fg:x="60" fg:w="1"/><text x="5.0347%" y="655.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="4.7847%" y="629" width="0.0797%" height="15" fill="rgb(217,191,4)" fg:x="60" fg:w="1"/><text x="5.0347%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.0239%" y="613" width="0.0797%" height="15" fill="rgb(246,198,38)" fg:x="63" fg:w="1"/><text x="5.2739%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.0239%" y="597" width="0.0797%" height="15" fill="rgb(245,64,37)" fg:x="63" fg:w="1"/><text x="5.2739%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.0239%" y="581" width="0.0797%" height="15" fill="rgb(250,30,36)" fg:x="63" fg:w="1"/><text x="5.2739%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.0239%" y="565" width="0.0797%" height="15" fill="rgb(217,86,53)" fg:x="63" fg:w="1"/><text x="5.2739%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.0239%" y="549" width="0.0797%" height="15" fill="rgb(228,157,16)" fg:x="63" fg:w="1"/><text x="5.2739%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="5.0239%" y="533" width="0.0797%" height="15" fill="rgb(217,59,31)" fg:x="63" fg:w="1"/><text x="5.2739%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="5.0239%" y="517" width="0.0797%" height="15" fill="rgb(237,138,41)" fg:x="63" fg:w="1"/><text x="5.2739%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.3429%" y="517" width="0.0797%" height="15" fill="rgb(227,91,49)" fg:x="67" fg:w="1"/><text x="5.5929%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.3429%" y="501" width="0.0797%" height="15" fill="rgb(247,21,44)" fg:x="67" fg:w="1"/><text x="5.5929%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="5.3429%" y="485" width="0.0797%" height="15" fill="rgb(219,210,51)" fg:x="67" fg:w="1"/><text x="5.5929%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="5.3429%" y="469" width="0.0797%" height="15" fill="rgb(209,140,6)" fg:x="67" fg:w="1"/><text x="5.5929%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="5.3429%" y="453" width="0.0797%" height="15" fill="rgb(221,188,24)" fg:x="67" fg:w="1"/><text x="5.5929%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="5.3429%" y="437" width="0.0797%" height="15" fill="rgb(232,154,20)" fg:x="67" fg:w="1"/><text x="5.5929%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.3429%" y="421" width="0.0797%" height="15" fill="rgb(244,137,50)" fg:x="67" fg:w="1"/><text x="5.5929%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="5.2632%" y="597" width="0.2392%" height="15" fill="rgb(225,185,43)" fg:x="66" fg:w="3"/><text x="5.5132%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="5.2632%" y="581" width="0.2392%" height="15" fill="rgb(213,205,38)" fg:x="66" fg:w="3"/><text x="5.5132%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.24%)</title><rect x="5.2632%" y="565" width="0.2392%" height="15" fill="rgb(236,73,12)" fg:x="66" fg:w="3"/><text x="5.5132%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.24%)</title><rect x="5.2632%" y="549" width="0.2392%" height="15" fill="rgb(235,219,13)" fg:x="66" fg:w="3"/><text x="5.5132%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.24%)</title><rect x="5.2632%" y="533" width="0.2392%" height="15" fill="rgb(218,59,36)" fg:x="66" fg:w="3"/><text x="5.5132%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="5.4226%" y="517" width="0.0797%" height="15" fill="rgb(205,110,39)" fg:x="68" fg:w="1"/><text x="5.6726%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="5.4226%" y="501" width="0.0797%" height="15" fill="rgb(218,206,42)" fg:x="68" fg:w="1"/><text x="5.6726%" y="511.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (9 samples, 0.72%)</title><rect x="4.8644%" y="645" width="0.7177%" height="15" fill="rgb(248,125,24)" fg:x="61" fg:w="9"/><text x="5.1144%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.72%)</title><rect x="4.8644%" y="629" width="0.7177%" height="15" fill="rgb(242,28,27)" fg:x="61" fg:w="9"/><text x="5.1144%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.48%)</title><rect x="5.1037%" y="613" width="0.4785%" height="15" fill="rgb(216,228,15)" fg:x="64" fg:w="6"/><text x="5.3537%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.5024%" y="597" width="0.0797%" height="15" fill="rgb(235,116,46)" fg:x="69" fg:w="1"/><text x="5.7524%" y="607.50"></text></g><g><title>glob::is_dir (7 samples, 0.56%)</title><rect x="5.5821%" y="597" width="0.5582%" height="15" fill="rgb(224,18,32)" fg:x="70" fg:w="7"/><text x="5.8321%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (7 samples, 0.56%)</title><rect x="5.5821%" y="581" width="0.5582%" height="15" fill="rgb(252,5,12)" fg:x="70" fg:w="7"/><text x="5.8321%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (7 samples, 0.56%)</title><rect x="5.5821%" y="565" width="0.5582%" height="15" fill="rgb(251,36,5)" fg:x="70" fg:w="7"/><text x="5.8321%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (7 samples, 0.56%)</title><rect x="5.5821%" y="549" width="0.5582%" height="15" fill="rgb(217,53,14)" fg:x="70" fg:w="7"/><text x="5.8321%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (7 samples, 0.56%)</title><rect x="5.5821%" y="533" width="0.5582%" height="15" fill="rgb(215,86,45)" fg:x="70" fg:w="7"/><text x="5.8321%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (7 samples, 0.56%)</title><rect x="5.5821%" y="517" width="0.5582%" height="15" fill="rgb(242,169,11)" fg:x="70" fg:w="7"/><text x="5.8321%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (7 samples, 0.56%)</title><rect x="5.5821%" y="501" width="0.5582%" height="15" fill="rgb(211,213,45)" fg:x="70" fg:w="7"/><text x="5.8321%" y="511.50"></text></g><g><title>statx (7 samples, 0.56%)</title><rect x="5.5821%" y="485" width="0.5582%" height="15" fill="rgb(205,88,11)" fg:x="70" fg:w="7"/><text x="5.8321%" y="495.50"></text></g><g><title>core::ffi::c_str::CStr::from_bytes_with_nul (1 samples, 0.08%)</title><rect x="6.1404%" y="549" width="0.0797%" height="15" fill="rgb(252,69,26)" fg:x="77" fg:w="1"/><text x="6.3904%" y="559.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.96%)</title><rect x="5.5821%" y="629" width="0.9569%" height="15" fill="rgb(246,123,37)" fg:x="70" fg:w="12"/><text x="5.8321%" y="639.50"></text></g><g><title>glob::fill_todo (12 samples, 0.96%)</title><rect x="5.5821%" y="613" width="0.9569%" height="15" fill="rgb(212,205,5)" fg:x="70" fg:w="12"/><text x="5.8321%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat (5 samples, 0.40%)</title><rect x="6.1404%" y="597" width="0.3987%" height="15" fill="rgb(253,148,0)" fg:x="77" fg:w="5"/><text x="6.3904%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (5 samples, 0.40%)</title><rect x="6.1404%" y="581" width="0.3987%" height="15" fill="rgb(239,22,4)" fg:x="77" fg:w="5"/><text x="6.3904%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (5 samples, 0.40%)</title><rect x="6.1404%" y="565" width="0.3987%" height="15" fill="rgb(226,26,53)" fg:x="77" fg:w="5"/><text x="6.3904%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (4 samples, 0.32%)</title><rect x="6.2201%" y="549" width="0.3190%" height="15" fill="rgb(225,229,45)" fg:x="78" fg:w="4"/><text x="6.4701%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx (4 samples, 0.32%)</title><rect x="6.2201%" y="533" width="0.3190%" height="15" fill="rgb(220,60,37)" fg:x="78" fg:w="4"/><text x="6.4701%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (4 samples, 0.32%)</title><rect x="6.2201%" y="517" width="0.3190%" height="15" fill="rgb(217,180,35)" fg:x="78" fg:w="4"/><text x="6.4701%" y="527.50"></text></g><g><title>statx (4 samples, 0.32%)</title><rect x="6.2201%" y="501" width="0.3190%" height="15" fill="rgb(229,7,53)" fg:x="78" fg:w="4"/><text x="6.4701%" y="511.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="6.5391%" y="597" width="0.0797%" height="15" fill="rgb(254,137,3)" fg:x="82" fg:w="1"/><text x="6.7891%" y="607.50"></text></g><g><title>std::path::Components::include_cur_dir (1 samples, 0.08%)</title><rect x="6.5391%" y="581" width="0.0797%" height="15" fill="rgb(215,140,41)" fg:x="82" fg:w="1"/><text x="6.7891%" y="591.50"></text></g><g><title>std::path::Components::prefix_remaining (1 samples, 0.08%)</title><rect x="6.5391%" y="565" width="0.0797%" height="15" fill="rgb(250,80,15)" fg:x="82" fg:w="1"/><text x="6.7891%" y="575.50"></text></g><g><title>&lt;std::path::State as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="6.5391%" y="549" width="0.0797%" height="15" fill="rgb(252,191,6)" fg:x="82" fg:w="1"/><text x="6.7891%" y="559.50"></text></g><g><title>&lt;std::path::PathBuf as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="6.6188%" y="597" width="0.0797%" height="15" fill="rgb(246,217,18)" fg:x="83" fg:w="1"/><text x="6.8688%" y="607.50"></text></g><g><title>std::path::PathBuf::_push (1 samples, 0.08%)</title><rect x="6.6188%" y="581" width="0.0797%" height="15" fill="rgb(223,93,7)" fg:x="83" fg:w="1"/><text x="6.8688%" y="591.50"></text></g><g><title>std::ffi::os_str::OsString::push (1 samples, 0.08%)</title><rect x="6.6188%" y="565" width="0.0797%" height="15" fill="rgb(225,55,52)" fg:x="83" fg:w="1"/><text x="6.8688%" y="575.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (1 samples, 0.08%)</title><rect x="6.6188%" y="549" width="0.0797%" height="15" fill="rgb(240,31,24)" fg:x="83" fg:w="1"/><text x="6.8688%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="6.6188%" y="533" width="0.0797%" height="15" fill="rgb(205,56,52)" fg:x="83" fg:w="1"/><text x="6.8688%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="6.6188%" y="517" width="0.0797%" height="15" fill="rgb(246,146,12)" fg:x="83" fg:w="1"/><text x="6.8688%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="6.6188%" y="501" width="0.0797%" height="15" fill="rgb(239,84,36)" fg:x="83" fg:w="1"/><text x="6.8688%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="6.6188%" y="485" width="0.0797%" height="15" fill="rgb(207,41,40)" fg:x="83" fg:w="1"/><text x="6.8688%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="6.6188%" y="469" width="0.0797%" height="15" fill="rgb(241,179,25)" fg:x="83" fg:w="1"/><text x="6.8688%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.6188%" y="453" width="0.0797%" height="15" fill="rgb(210,0,34)" fg:x="83" fg:w="1"/><text x="6.8688%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="6.6188%" y="437" width="0.0797%" height="15" fill="rgb(225,217,29)" fg:x="83" fg:w="1"/><text x="6.8688%" y="447.50"></text></g><g><title>glob::Pattern::new (1 samples, 0.08%)</title><rect x="6.6986%" y="597" width="0.0797%" height="15" fill="rgb(216,191,38)" fg:x="84" fg:w="1"/><text x="6.9486%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="6.6986%" y="581" width="0.0797%" height="15" fill="rgb(232,140,52)" fg:x="84" fg:w="1"/><text x="6.9486%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.6986%" y="565" width="0.0797%" height="15" fill="rgb(223,158,51)" fg:x="84" fg:w="1"/><text x="6.9486%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.6986%" y="549" width="0.0797%" height="15" fill="rgb(235,29,51)" fg:x="84" fg:w="1"/><text x="6.9486%" y="559.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="6.6986%" y="533" width="0.0797%" height="15" fill="rgb(215,181,18)" fg:x="84" fg:w="1"/><text x="6.9486%" y="543.50"></text></g><g><title>std::path::Path::components (1 samples, 0.08%)</title><rect x="6.7783%" y="597" width="0.0797%" height="15" fill="rgb(227,125,34)" fg:x="85" fg:w="1"/><text x="7.0283%" y="607.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (27 samples, 2.15%)</title><rect x="4.7847%" y="661" width="2.1531%" height="15" fill="rgb(230,197,49)" fg:x="60" fg:w="27"/><text x="5.0347%" y="671.50">&lt;..</text></g><g><title>plugins_rune::sources::load_directory_sources (17 samples, 1.36%)</title><rect x="5.5821%" y="645" width="1.3557%" height="15" fill="rgb(239,141,16)" fg:x="70" fg:w="17"/><text x="5.8321%" y="655.50"></text></g><g><title>glob::glob (5 samples, 0.40%)</title><rect x="6.5391%" y="629" width="0.3987%" height="15" fill="rgb(225,105,43)" fg:x="82" fg:w="5"/><text x="6.7891%" y="639.50"></text></g><g><title>glob::glob_with (5 samples, 0.40%)</title><rect x="6.5391%" y="613" width="0.3987%" height="15" fill="rgb(214,131,14)" fg:x="82" fg:w="5"/><text x="6.7891%" y="623.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_owned (1 samples, 0.08%)</title><rect x="6.8581%" y="597" width="0.0797%" height="15" fill="rgb(229,177,11)" fg:x="86" fg:w="1"/><text x="7.1081%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.8581%" y="581" width="0.0797%" height="15" fill="rgb(231,180,14)" fg:x="86" fg:w="1"/><text x="7.1081%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.8581%" y="565" width="0.0797%" height="15" fill="rgb(232,88,2)" fg:x="86" fg:w="1"/><text x="7.1081%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.8581%" y="549" width="0.0797%" height="15" fill="rgb(205,220,8)" fg:x="86" fg:w="1"/><text x="7.1081%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.8581%" y="533" width="0.0797%" height="15" fill="rgb(225,23,53)" fg:x="86" fg:w="1"/><text x="7.1081%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="6.8581%" y="517" width="0.0797%" height="15" fill="rgb(213,62,29)" fg:x="86" fg:w="1"/><text x="7.1081%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="6.8581%" y="501" width="0.0797%" height="15" fill="rgb(227,75,7)" fg:x="86" fg:w="1"/><text x="7.1081%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.9378%" y="661" width="0.0797%" height="15" fill="rgb(207,105,14)" fg:x="87" fg:w="1"/><text x="7.1878%" y="671.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="7.0175%" y="645" width="0.2392%" height="15" fill="rgb(245,62,29)" fg:x="88" fg:w="3"/><text x="7.2675%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (4 samples, 0.32%)</title><rect x="7.0175%" y="661" width="0.3190%" height="15" fill="rgb(236,202,4)" fg:x="88" fg:w="4"/><text x="7.2675%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="7.2568%" y="645" width="0.0797%" height="15" fill="rgb(250,67,1)" fg:x="91" fg:w="1"/><text x="7.5068%" y="655.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (63 samples, 5.02%)</title><rect x="2.3923%" y="677" width="5.0239%" height="15" fill="rgb(253,115,44)" fg:x="30" fg:w="63"/><text x="2.6423%" y="687.50">kernel..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="7.3365%" y="661" width="0.0797%" height="15" fill="rgb(251,139,18)" fg:x="92" fg:w="1"/><text x="7.5865%" y="671.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="7.3365%" y="645" width="0.0797%" height="15" fill="rgb(218,22,32)" fg:x="92" fg:w="1"/><text x="7.5865%" y="655.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (66 samples, 5.26%)</title><rect x="2.3126%" y="741" width="5.2632%" height="15" fill="rgb(243,53,5)" fg:x="29" fg:w="66"/><text x="2.5626%" y="751.50">&lt;engin..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (66 samples, 5.26%)</title><rect x="2.3126%" y="725" width="5.2632%" height="15" fill="rgb(227,56,16)" fg:x="29" fg:w="66"/><text x="2.5626%" y="735.50">engine..</text></g><g><title>engine::session::Session::new (66 samples, 5.26%)</title><rect x="2.3126%" y="709" width="5.2632%" height="15" fill="rgb(245,53,0)" fg:x="29" fg:w="66"/><text x="2.5626%" y="719.50">engine..</text></g><g><title>engine::session::Session::initialize (66 samples, 5.26%)</title><rect x="2.3126%" y="693" width="5.2632%" height="15" fill="rgb(216,170,35)" fg:x="29" fg:w="66"/><text x="2.5626%" y="703.50">engine..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (2 samples, 0.16%)</title><rect x="7.4163%" y="677" width="0.1595%" height="15" fill="rgb(211,200,8)" fg:x="93" fg:w="2"/><text x="7.6663%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="7.4163%" y="661" width="0.1595%" height="15" fill="rgb(228,204,44)" fg:x="93" fg:w="2"/><text x="7.6663%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.4960%" y="645" width="0.0797%" height="15" fill="rgb(214,121,17)" fg:x="94" fg:w="1"/><text x="7.7460%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.4960%" y="629" width="0.0797%" height="15" fill="rgb(233,64,38)" fg:x="94" fg:w="1"/><text x="7.7460%" y="639.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.4960%" y="613" width="0.0797%" height="15" fill="rgb(253,54,19)" fg:x="94" fg:w="1"/><text x="7.7460%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::build::BuildSurroundings&gt; (3 samples, 0.24%)</title><rect x="7.6555%" y="725" width="0.2392%" height="15" fill="rgb(253,94,18)" fg:x="96" fg:w="3"/><text x="7.9055%" y="735.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="7.7352%" y="709" width="0.1595%" height="15" fill="rgb(227,57,52)" fg:x="97" fg:w="2"/><text x="7.9852%" y="719.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.32%)</title><rect x="7.9745%" y="613" width="0.3190%" height="15" fill="rgb(230,228,50)" fg:x="100" fg:w="4"/><text x="8.2245%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="8.0542%" y="597" width="0.2392%" height="15" fill="rgb(217,205,27)" fg:x="101" fg:w="3"/><text x="8.3042%" y="607.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="8.0542%" y="581" width="0.2392%" height="15" fill="rgb(252,71,50)" fg:x="101" fg:w="3"/><text x="8.3042%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="8.0542%" y="565" width="0.2392%" height="15" fill="rgb(209,86,4)" fg:x="101" fg:w="3"/><text x="8.3042%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="8.1340%" y="549" width="0.1595%" height="15" fill="rgb(229,94,0)" fg:x="102" fg:w="2"/><text x="8.3840%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="8.1340%" y="533" width="0.1595%" height="15" fill="rgb(252,223,21)" fg:x="102" fg:w="2"/><text x="8.3840%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.2137%" y="517" width="0.0797%" height="15" fill="rgb(230,210,4)" fg:x="103" fg:w="1"/><text x="8.4637%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="8.2137%" y="501" width="0.0797%" height="15" fill="rgb(240,149,38)" fg:x="103" fg:w="1"/><text x="8.4637%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="8.3732%" y="597" width="0.0797%" height="15" fill="rgb(254,105,20)" fg:x="105" fg:w="1"/><text x="8.6232%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.3732%" y="581" width="0.0797%" height="15" fill="rgb(253,87,46)" fg:x="105" fg:w="1"/><text x="8.6232%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.3732%" y="565" width="0.0797%" height="15" fill="rgb(253,116,33)" fg:x="105" fg:w="1"/><text x="8.6232%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.4530%" y="597" width="0.0797%" height="15" fill="rgb(229,198,5)" fg:x="106" fg:w="1"/><text x="8.7030%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.4530%" y="581" width="0.0797%" height="15" fill="rgb(242,38,37)" fg:x="106" fg:w="1"/><text x="8.7030%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.4530%" y="565" width="0.0797%" height="15" fill="rgb(242,69,53)" fg:x="106" fg:w="1"/><text x="8.7030%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.4530%" y="549" width="0.0797%" height="15" fill="rgb(249,80,16)" fg:x="106" fg:w="1"/><text x="8.7030%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.4530%" y="533" width="0.0797%" height="15" fill="rgb(206,128,11)" fg:x="106" fg:w="1"/><text x="8.7030%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.4530%" y="517" width="0.0797%" height="15" fill="rgb(212,35,20)" fg:x="106" fg:w="1"/><text x="8.7030%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.5327%" y="549" width="0.0797%" height="15" fill="rgb(236,79,13)" fg:x="107" fg:w="1"/><text x="8.7827%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.5327%" y="533" width="0.0797%" height="15" fill="rgb(233,123,3)" fg:x="107" fg:w="1"/><text x="8.7827%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.5327%" y="517" width="0.0797%" height="15" fill="rgb(214,93,52)" fg:x="107" fg:w="1"/><text x="8.7827%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.5327%" y="501" width="0.0797%" height="15" fill="rgb(251,37,40)" fg:x="107" fg:w="1"/><text x="8.7827%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.5327%" y="485" width="0.0797%" height="15" fill="rgb(227,80,54)" fg:x="107" fg:w="1"/><text x="8.7827%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.5327%" y="469" width="0.0797%" height="15" fill="rgb(254,48,11)" fg:x="107" fg:w="1"/><text x="8.7827%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="8.5327%" y="453" width="0.0797%" height="15" fill="rgb(235,193,26)" fg:x="107" fg:w="1"/><text x="8.7827%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="8.5327%" y="581" width="0.1595%" height="15" fill="rgb(229,99,21)" fg:x="107" fg:w="2"/><text x="8.7827%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="8.5327%" y="565" width="0.1595%" height="15" fill="rgb(211,140,41)" fg:x="107" fg:w="2"/><text x="8.7827%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.6124%" y="549" width="0.0797%" height="15" fill="rgb(240,227,30)" fg:x="108" fg:w="1"/><text x="8.8624%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.6124%" y="533" width="0.0797%" height="15" fill="rgb(215,224,45)" fg:x="108" fg:w="1"/><text x="8.8624%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.6124%" y="517" width="0.0797%" height="15" fill="rgb(206,123,31)" fg:x="108" fg:w="1"/><text x="8.8624%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="8.6922%" y="581" width="0.2392%" height="15" fill="rgb(210,138,16)" fg:x="109" fg:w="3"/><text x="8.9422%" y="591.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="8.6922%" y="565" width="0.2392%" height="15" fill="rgb(228,57,28)" fg:x="109" fg:w="3"/><text x="8.9422%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="8.7719%" y="549" width="0.1595%" height="15" fill="rgb(242,170,10)" fg:x="110" fg:w="2"/><text x="9.0219%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="8.7719%" y="533" width="0.1595%" height="15" fill="rgb(228,214,39)" fg:x="110" fg:w="2"/><text x="9.0219%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="8.9314%" y="549" width="0.1595%" height="15" fill="rgb(218,179,33)" fg:x="112" fg:w="2"/><text x="9.1814%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.0112%" y="533" width="0.0797%" height="15" fill="rgb(235,193,39)" fg:x="113" fg:w="1"/><text x="9.2612%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.0112%" y="517" width="0.0797%" height="15" fill="rgb(219,221,36)" fg:x="113" fg:w="1"/><text x="9.2612%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.0112%" y="501" width="0.0797%" height="15" fill="rgb(248,218,19)" fg:x="113" fg:w="1"/><text x="9.2612%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.0909%" y="533" width="0.0797%" height="15" fill="rgb(205,50,9)" fg:x="114" fg:w="1"/><text x="9.3409%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="9.0909%" y="549" width="0.1595%" height="15" fill="rgb(238,81,28)" fg:x="114" fg:w="2"/><text x="9.3409%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.1707%" y="533" width="0.0797%" height="15" fill="rgb(235,110,19)" fg:x="115" fg:w="1"/><text x="9.4207%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.1707%" y="517" width="0.0797%" height="15" fill="rgb(214,7,14)" fg:x="115" fg:w="1"/><text x="9.4207%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.1707%" y="501" width="0.0797%" height="15" fill="rgb(211,77,3)" fg:x="115" fg:w="1"/><text x="9.4207%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="8.9314%" y="565" width="0.4785%" height="15" fill="rgb(229,5,9)" fg:x="112" fg:w="6"/><text x="9.1814%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="9.2504%" y="549" width="0.1595%" height="15" fill="rgb(225,90,11)" fg:x="116" fg:w="2"/><text x="9.5004%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.3301%" y="533" width="0.0797%" height="15" fill="rgb(242,56,8)" fg:x="117" fg:w="1"/><text x="9.5801%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.3301%" y="517" width="0.0797%" height="15" fill="rgb(249,212,39)" fg:x="117" fg:w="1"/><text x="9.5801%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.96%)</title><rect x="8.5327%" y="597" width="0.9569%" height="15" fill="rgb(236,90,9)" fg:x="107" fg:w="12"/><text x="8.7827%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="8.9314%" y="581" width="0.5582%" height="15" fill="rgb(206,88,35)" fg:x="112" fg:w="7"/><text x="9.1814%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.4099%" y="565" width="0.0797%" height="15" fill="rgb(205,126,30)" fg:x="118" fg:w="1"/><text x="9.6599%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.4099%" y="549" width="0.0797%" height="15" fill="rgb(230,176,12)" fg:x="118" fg:w="1"/><text x="9.6599%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.4099%" y="533" width="0.0797%" height="15" fill="rgb(243,19,9)" fg:x="118" fg:w="1"/><text x="9.6599%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (20 samples, 1.59%)</title><rect x="7.9745%" y="629" width="1.5949%" height="15" fill="rgb(245,171,17)" fg:x="100" fg:w="20"/><text x="8.2245%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (16 samples, 1.28%)</title><rect x="8.2935%" y="613" width="1.2759%" height="15" fill="rgb(227,52,21)" fg:x="104" fg:w="16"/><text x="8.5435%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.4896%" y="597" width="0.0797%" height="15" fill="rgb(238,69,14)" fg:x="119" fg:w="1"/><text x="9.7396%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.6491%" y="581" width="0.0797%" height="15" fill="rgb(241,156,39)" fg:x="121" fg:w="1"/><text x="9.8991%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="9.7289%" y="565" width="0.0797%" height="15" fill="rgb(212,227,28)" fg:x="122" fg:w="1"/><text x="9.9789%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="9.5694%" y="629" width="0.3987%" height="15" fill="rgb(209,118,27)" fg:x="120" fg:w="5"/><text x="9.8194%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="9.5694%" y="613" width="0.3987%" height="15" fill="rgb(226,102,5)" fg:x="120" fg:w="5"/><text x="9.8194%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="9.5694%" y="597" width="0.3987%" height="15" fill="rgb(223,34,3)" fg:x="120" fg:w="5"/><text x="9.8194%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="9.7289%" y="581" width="0.2392%" height="15" fill="rgb(221,81,38)" fg:x="122" fg:w="3"/><text x="9.9789%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="9.8086%" y="565" width="0.1595%" height="15" fill="rgb(236,219,28)" fg:x="123" fg:w="2"/><text x="10.0586%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.8884%" y="549" width="0.0797%" height="15" fill="rgb(213,200,14)" fg:x="124" fg:w="1"/><text x="10.1384%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.8884%" y="533" width="0.0797%" height="15" fill="rgb(240,33,19)" fg:x="124" fg:w="1"/><text x="10.1384%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.8884%" y="517" width="0.0797%" height="15" fill="rgb(233,113,27)" fg:x="124" fg:w="1"/><text x="10.1384%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.1276%" y="597" width="0.0797%" height="15" fill="rgb(220,221,18)" fg:x="127" fg:w="1"/><text x="10.3776%" y="607.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="10.2073%" y="597" width="0.0797%" height="15" fill="rgb(238,92,8)" fg:x="128" fg:w="1"/><text x="10.4573%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="10.2073%" y="581" width="0.0797%" height="15" fill="rgb(222,164,16)" fg:x="128" fg:w="1"/><text x="10.4573%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.2073%" y="565" width="0.0797%" height="15" fill="rgb(241,119,3)" fg:x="128" fg:w="1"/><text x="10.4573%" y="575.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (5 samples, 0.40%)</title><rect x="9.9681%" y="613" width="0.3987%" height="15" fill="rgb(241,44,8)" fg:x="125" fg:w="5"/><text x="10.2181%" y="623.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="10.2871%" y="597" width="0.0797%" height="15" fill="rgb(230,36,40)" fg:x="129" fg:w="1"/><text x="10.5371%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.5263%" y="581" width="0.0797%" height="15" fill="rgb(243,16,36)" fg:x="132" fg:w="1"/><text x="10.7763%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="10.6061%" y="565" width="0.0797%" height="15" fill="rgb(231,4,26)" fg:x="133" fg:w="1"/><text x="10.8561%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (2 samples, 0.16%)</title><rect x="10.6061%" y="581" width="0.1595%" height="15" fill="rgb(240,9,31)" fg:x="133" fg:w="2"/><text x="10.8561%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.6858%" y="565" width="0.0797%" height="15" fill="rgb(207,173,15)" fg:x="134" fg:w="1"/><text x="10.9358%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.6858%" y="549" width="0.0797%" height="15" fill="rgb(224,192,53)" fg:x="134" fg:w="1"/><text x="10.9358%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="10.8453%" y="549" width="0.0797%" height="15" fill="rgb(223,67,28)" fg:x="136" fg:w="1"/><text x="11.0953%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="10.9250%" y="533" width="0.2392%" height="15" fill="rgb(211,20,47)" fg:x="137" fg:w="3"/><text x="11.1750%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="10.9250%" y="517" width="0.2392%" height="15" fill="rgb(240,228,2)" fg:x="137" fg:w="3"/><text x="11.1750%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="11.0048%" y="501" width="0.1595%" height="15" fill="rgb(248,151,12)" fg:x="138" fg:w="2"/><text x="11.2548%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.0845%" y="485" width="0.0797%" height="15" fill="rgb(244,8,39)" fg:x="139" fg:w="1"/><text x="11.3345%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="11.0845%" y="469" width="0.0797%" height="15" fill="rgb(222,26,8)" fg:x="139" fg:w="1"/><text x="11.3345%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.1643%" y="469" width="0.0797%" height="15" fill="rgb(213,106,44)" fg:x="140" fg:w="1"/><text x="11.4143%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="11.1643%" y="485" width="0.1595%" height="15" fill="rgb(214,129,20)" fg:x="140" fg:w="2"/><text x="11.4143%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="11.2440%" y="469" width="0.0797%" height="15" fill="rgb(212,32,13)" fg:x="141" fg:w="1"/><text x="11.4940%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.2440%" y="453" width="0.0797%" height="15" fill="rgb(208,168,33)" fg:x="141" fg:w="1"/><text x="11.4940%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.56%)</title><rect x="10.9250%" y="549" width="0.5582%" height="15" fill="rgb(231,207,8)" fg:x="137" fg:w="7"/><text x="11.1750%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="11.1643%" y="533" width="0.3190%" height="15" fill="rgb(235,219,23)" fg:x="140" fg:w="4"/><text x="11.4143%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="11.1643%" y="517" width="0.3190%" height="15" fill="rgb(226,216,26)" fg:x="140" fg:w="4"/><text x="11.4143%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="11.1643%" y="501" width="0.3190%" height="15" fill="rgb(239,137,16)" fg:x="140" fg:w="4"/><text x="11.4143%" y="511.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="11.3238%" y="485" width="0.1595%" height="15" fill="rgb(207,12,36)" fg:x="142" fg:w="2"/><text x="11.5738%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (9 samples, 0.72%)</title><rect x="10.8453%" y="565" width="0.7177%" height="15" fill="rgb(210,214,24)" fg:x="136" fg:w="9"/><text x="11.0953%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="11.4833%" y="549" width="0.0797%" height="15" fill="rgb(206,56,30)" fg:x="144" fg:w="1"/><text x="11.7333%" y="559.50"></text></g><g><title>engine::session::Session::flush (47 samples, 3.75%)</title><rect x="7.8947%" y="725" width="3.7480%" height="15" fill="rgb(228,143,26)" fg:x="99" fg:w="47"/><text x="8.1447%" y="735.50">engi..</text></g><g><title>engine::session::state::State::close (47 samples, 3.75%)</title><rect x="7.8947%" y="709" width="3.7480%" height="15" fill="rgb(216,218,46)" fg:x="99" fg:w="47"/><text x="8.1447%" y="719.50">engi..</text></g><g><title>engine::session::state::State::flush_entities (46 samples, 3.67%)</title><rect x="7.9745%" y="693" width="3.6683%" height="15" fill="rgb(206,6,19)" fg:x="100" fg:w="46"/><text x="8.2245%" y="703.50">engi..</text></g><g><title>core::iter::adapters::try_process (46 samples, 3.67%)</title><rect x="7.9745%" y="677" width="3.6683%" height="15" fill="rgb(239,177,51)" fg:x="100" fg:w="46"/><text x="8.2245%" y="687.50">core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (46 samples, 3.67%)</title><rect x="7.9745%" y="661" width="3.6683%" height="15" fill="rgb(216,55,25)" fg:x="100" fg:w="46"/><text x="8.2245%" y="671.50">&lt;all..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (46 samples, 3.67%)</title><rect x="7.9745%" y="645" width="3.6683%" height="15" fill="rgb(231,163,29)" fg:x="100" fg:w="46"/><text x="8.2245%" y="655.50">engi..</text></g><g><title>kernel::model::any_entity_changes (21 samples, 1.67%)</title><rect x="9.9681%" y="629" width="1.6746%" height="15" fill="rgb(232,149,50)" fg:x="125" fg:w="21"/><text x="10.2181%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (16 samples, 1.28%)</title><rect x="10.3668%" y="613" width="1.2759%" height="15" fill="rgb(223,142,48)" fg:x="130" fg:w="16"/><text x="10.6168%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (16 samples, 1.28%)</title><rect x="10.3668%" y="597" width="1.2759%" height="15" fill="rgb(245,83,23)" fg:x="130" fg:w="16"/><text x="10.6168%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (11 samples, 0.88%)</title><rect x="10.7656%" y="581" width="0.8772%" height="15" fill="rgb(224,63,2)" fg:x="135" fg:w="11"/><text x="11.0156%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.5630%" y="565" width="0.0797%" height="15" fill="rgb(218,65,53)" fg:x="145" fg:w="1"/><text x="11.8130%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="11.6427%" y="693" width="0.0797%" height="15" fill="rgb(221,84,29)" fg:x="146" fg:w="1"/><text x="11.8927%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.6427%" y="677" width="0.0797%" height="15" fill="rgb(234,0,32)" fg:x="146" fg:w="1"/><text x="11.8927%" y="687.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="11.6427%" y="725" width="0.1595%" height="15" fill="rgb(206,20,16)" fg:x="146" fg:w="2"/><text x="11.8927%" y="735.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="11.6427%" y="709" width="0.1595%" height="15" fill="rgb(244,172,18)" fg:x="146" fg:w="2"/><text x="11.8927%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.7225%" y="693" width="0.0797%" height="15" fill="rgb(254,133,1)" fg:x="147" fg:w="1"/><text x="11.9725%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="11.8022%" y="677" width="0.1595%" height="15" fill="rgb(222,206,41)" fg:x="148" fg:w="2"/><text x="12.0522%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.8820%" y="661" width="0.0797%" height="15" fill="rgb(212,3,42)" fg:x="149" fg:w="1"/><text x="12.1320%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.8820%" y="645" width="0.0797%" height="15" fill="rgb(241,11,4)" fg:x="149" fg:w="1"/><text x="12.1320%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.8820%" y="629" width="0.0797%" height="15" fill="rgb(205,19,26)" fg:x="149" fg:w="1"/><text x="12.1320%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.8820%" y="613" width="0.0797%" height="15" fill="rgb(210,179,32)" fg:x="149" fg:w="1"/><text x="12.1320%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.8820%" y="597" width="0.0797%" height="15" fill="rgb(227,116,49)" fg:x="149" fg:w="1"/><text x="12.1320%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.8820%" y="581" width="0.0797%" height="15" fill="rgb(211,146,6)" fg:x="149" fg:w="1"/><text x="12.1320%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.8820%" y="565" width="0.0797%" height="15" fill="rgb(219,44,39)" fg:x="149" fg:w="1"/><text x="12.1320%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="11.8820%" y="549" width="0.0797%" height="15" fill="rgb(234,128,11)" fg:x="149" fg:w="1"/><text x="12.1320%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="11.8820%" y="533" width="0.0797%" height="15" fill="rgb(220,183,53)" fg:x="149" fg:w="1"/><text x="12.1320%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="11.8820%" y="517" width="0.0797%" height="15" fill="rgb(213,219,32)" fg:x="149" fg:w="1"/><text x="12.1320%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="11.8820%" y="501" width="0.0797%" height="15" fill="rgb(232,156,16)" fg:x="149" fg:w="1"/><text x="12.1320%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.8820%" y="485" width="0.0797%" height="15" fill="rgb(246,135,34)" fg:x="149" fg:w="1"/><text x="12.1320%" y="495.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="11.8022%" y="709" width="0.2392%" height="15" fill="rgb(241,99,0)" fg:x="148" fg:w="3"/><text x="12.0522%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="11.8022%" y="693" width="0.2392%" height="15" fill="rgb(222,103,45)" fg:x="148" fg:w="3"/><text x="12.0522%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.9617%" y="677" width="0.0797%" height="15" fill="rgb(212,57,4)" fg:x="150" fg:w="1"/><text x="12.2117%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.9617%" y="661" width="0.0797%" height="15" fill="rgb(215,68,47)" fg:x="150" fg:w="1"/><text x="12.2117%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="11.9617%" y="645" width="0.0797%" height="15" fill="rgb(230,84,2)" fg:x="150" fg:w="1"/><text x="12.2117%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.9617%" y="629" width="0.0797%" height="15" fill="rgb(220,102,14)" fg:x="150" fg:w="1"/><text x="12.2117%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.9617%" y="613" width="0.0797%" height="15" fill="rgb(240,10,32)" fg:x="150" fg:w="1"/><text x="12.2117%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="12.0415%" y="677" width="0.0797%" height="15" fill="rgb(215,47,27)" fg:x="151" fg:w="1"/><text x="12.2915%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.0415%" y="661" width="0.0797%" height="15" fill="rgb(233,188,43)" fg:x="151" fg:w="1"/><text x="12.2915%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="12.0415%" y="693" width="0.1595%" height="15" fill="rgb(253,190,1)" fg:x="151" fg:w="2"/><text x="12.2915%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.1212%" y="677" width="0.0797%" height="15" fill="rgb(206,114,52)" fg:x="152" fg:w="1"/><text x="12.3712%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.1212%" y="661" width="0.0797%" height="15" fill="rgb(233,120,37)" fg:x="152" fg:w="1"/><text x="12.3712%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="12.1212%" y="645" width="0.0797%" height="15" fill="rgb(214,52,39)" fg:x="152" fg:w="1"/><text x="12.3712%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.1212%" y="629" width="0.0797%" height="15" fill="rgb(223,80,29)" fg:x="152" fg:w="1"/><text x="12.3712%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.1212%" y="613" width="0.0797%" height="15" fill="rgb(230,101,40)" fg:x="152" fg:w="1"/><text x="12.3712%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.1212%" y="597" width="0.0797%" height="15" fill="rgb(219,211,8)" fg:x="152" fg:w="1"/><text x="12.3712%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="12.2807%" y="597" width="0.1595%" height="15" fill="rgb(252,126,28)" fg:x="154" fg:w="2"/><text x="12.5307%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.3604%" y="581" width="0.0797%" height="15" fill="rgb(215,56,38)" fg:x="155" fg:w="1"/><text x="12.6104%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.3604%" y="565" width="0.0797%" height="15" fill="rgb(249,55,44)" fg:x="155" fg:w="1"/><text x="12.6104%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.3604%" y="549" width="0.0797%" height="15" fill="rgb(220,221,32)" fg:x="155" fg:w="1"/><text x="12.6104%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.3604%" y="533" width="0.0797%" height="15" fill="rgb(212,216,41)" fg:x="155" fg:w="1"/><text x="12.6104%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.3604%" y="517" width="0.0797%" height="15" fill="rgb(228,213,43)" fg:x="155" fg:w="1"/><text x="12.6104%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.3604%" y="501" width="0.0797%" height="15" fill="rgb(211,31,26)" fg:x="155" fg:w="1"/><text x="12.6104%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.3604%" y="485" width="0.0797%" height="15" fill="rgb(229,202,19)" fg:x="155" fg:w="1"/><text x="12.6104%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.3604%" y="469" width="0.0797%" height="15" fill="rgb(229,105,46)" fg:x="155" fg:w="1"/><text x="12.6104%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.3604%" y="453" width="0.0797%" height="15" fill="rgb(235,108,1)" fg:x="155" fg:w="1"/><text x="12.6104%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.3604%" y="437" width="0.0797%" height="15" fill="rgb(245,111,35)" fg:x="155" fg:w="1"/><text x="12.6104%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.3604%" y="421" width="0.0797%" height="15" fill="rgb(219,185,31)" fg:x="155" fg:w="1"/><text x="12.6104%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.3604%" y="405" width="0.0797%" height="15" fill="rgb(214,4,43)" fg:x="155" fg:w="1"/><text x="12.6104%" y="415.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (4 samples, 0.32%)</title><rect x="12.2010%" y="677" width="0.3190%" height="15" fill="rgb(235,227,40)" fg:x="153" fg:w="4"/><text x="12.4510%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (4 samples, 0.32%)</title><rect x="12.2010%" y="661" width="0.3190%" height="15" fill="rgb(230,88,30)" fg:x="153" fg:w="4"/><text x="12.4510%" y="671.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (4 samples, 0.32%)</title><rect x="12.2010%" y="645" width="0.3190%" height="15" fill="rgb(216,217,1)" fg:x="153" fg:w="4"/><text x="12.4510%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="12.2010%" y="629" width="0.3190%" height="15" fill="rgb(248,139,50)" fg:x="153" fg:w="4"/><text x="12.4510%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="12.2807%" y="613" width="0.2392%" height="15" fill="rgb(233,1,21)" fg:x="154" fg:w="3"/><text x="12.5307%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.4402%" y="597" width="0.0797%" height="15" fill="rgb(215,183,12)" fg:x="156" fg:w="1"/><text x="12.6902%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.4402%" y="581" width="0.0797%" height="15" fill="rgb(229,104,42)" fg:x="156" fg:w="1"/><text x="12.6902%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.4402%" y="565" width="0.0797%" height="15" fill="rgb(243,34,48)" fg:x="156" fg:w="1"/><text x="12.6902%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.4402%" y="549" width="0.0797%" height="15" fill="rgb(239,11,44)" fg:x="156" fg:w="1"/><text x="12.6902%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.4402%" y="533" width="0.0797%" height="15" fill="rgb(231,98,35)" fg:x="156" fg:w="1"/><text x="12.6902%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="12.4402%" y="517" width="0.0797%" height="15" fill="rgb(233,28,25)" fg:x="156" fg:w="1"/><text x="12.6902%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="12.4402%" y="501" width="0.0797%" height="15" fill="rgb(234,123,11)" fg:x="156" fg:w="1"/><text x="12.6902%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.40%)</title><rect x="12.2010%" y="693" width="0.3987%" height="15" fill="rgb(220,69,3)" fg:x="153" fg:w="5"/><text x="12.4510%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="12.5199%" y="677" width="0.0797%" height="15" fill="rgb(214,64,36)" fg:x="157" fg:w="1"/><text x="12.7699%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.5199%" y="661" width="0.0797%" height="15" fill="rgb(211,138,32)" fg:x="157" fg:w="1"/><text x="12.7699%" y="671.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="12.5199%" y="645" width="0.0797%" height="15" fill="rgb(213,118,47)" fg:x="157" fg:w="1"/><text x="12.7699%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.5199%" y="629" width="0.0797%" height="15" fill="rgb(243,124,49)" fg:x="157" fg:w="1"/><text x="12.7699%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="12.5199%" y="613" width="0.0797%" height="15" fill="rgb(221,30,28)" fg:x="157" fg:w="1"/><text x="12.7699%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (9 samples, 0.72%)</title><rect x="12.0415%" y="709" width="0.7177%" height="15" fill="rgb(246,37,13)" fg:x="151" fg:w="9"/><text x="12.2915%" y="719.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (2 samples, 0.16%)</title><rect x="12.5997%" y="693" width="0.1595%" height="15" fill="rgb(249,66,14)" fg:x="158" fg:w="2"/><text x="12.8497%" y="703.50"></text></g><g><title>engine::session::Session::load_entity (2 samples, 0.16%)</title><rect x="12.5997%" y="677" width="0.1595%" height="15" fill="rgb(213,166,5)" fg:x="158" fg:w="2"/><text x="12.8497%" y="687.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="12.6794%" y="661" width="0.0797%" height="15" fill="rgb(221,66,24)" fg:x="159" fg:w="1"/><text x="12.9294%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="12.6794%" y="645" width="0.0797%" height="15" fill="rgb(210,132,17)" fg:x="159" fg:w="1"/><text x="12.9294%" y="655.50"></text></g><g><title>plugins_core::build::Build::save (13 samples, 1.04%)</title><rect x="11.8022%" y="725" width="1.0367%" height="15" fill="rgb(243,202,5)" fg:x="148" fg:w="13"/><text x="12.0522%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.7592%" y="709" width="0.0797%" height="15" fill="rgb(233,70,48)" fg:x="160" fg:w="1"/><text x="13.0092%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.7592%" y="693" width="0.0797%" height="15" fill="rgb(238,41,26)" fg:x="160" fg:w="1"/><text x="13.0092%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.7592%" y="677" width="0.0797%" height="15" fill="rgb(241,19,31)" fg:x="160" fg:w="1"/><text x="13.0092%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.7592%" y="661" width="0.0797%" height="15" fill="rgb(214,76,10)" fg:x="160" fg:w="1"/><text x="13.0092%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.7592%" y="645" width="0.0797%" height="15" fill="rgb(254,202,22)" fg:x="160" fg:w="1"/><text x="13.0092%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.7592%" y="629" width="0.0797%" height="15" fill="rgb(214,72,24)" fg:x="160" fg:w="1"/><text x="13.0092%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.7592%" y="613" width="0.0797%" height="15" fill="rgb(221,92,46)" fg:x="160" fg:w="1"/><text x="13.0092%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.7592%" y="597" width="0.0797%" height="15" fill="rgb(246,13,50)" fg:x="160" fg:w="1"/><text x="13.0092%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.7592%" y="581" width="0.0797%" height="15" fill="rgb(240,165,38)" fg:x="160" fg:w="1"/><text x="13.0092%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.7592%" y="565" width="0.0797%" height="15" fill="rgb(241,24,51)" fg:x="160" fg:w="1"/><text x="13.0092%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.7592%" y="549" width="0.0797%" height="15" fill="rgb(227,51,44)" fg:x="160" fg:w="1"/><text x="13.0092%" y="559.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.7592%" y="533" width="0.0797%" height="15" fill="rgb(231,121,3)" fg:x="160" fg:w="1"/><text x="13.0092%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.7592%" y="517" width="0.0797%" height="15" fill="rgb(245,3,41)" fg:x="160" fg:w="1"/><text x="13.0092%" y="527.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (1 samples, 0.08%)</title><rect x="12.8389%" y="725" width="0.0797%" height="15" fill="rgb(214,13,26)" fg:x="161" fg:w="1"/><text x="13.0889%" y="735.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="12.8389%" y="709" width="0.0797%" height="15" fill="rgb(252,75,11)" fg:x="161" fg:w="1"/><text x="13.0889%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="12.8389%" y="693" width="0.0797%" height="15" fill="rgb(218,226,17)" fg:x="161" fg:w="1"/><text x="13.0889%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (1 samples, 0.08%)</title><rect x="12.8389%" y="677" width="0.0797%" height="15" fill="rgb(248,89,38)" fg:x="161" fg:w="1"/><text x="13.0889%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.8389%" y="661" width="0.0797%" height="15" fill="rgb(237,73,46)" fg:x="161" fg:w="1"/><text x="13.0889%" y="671.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Kind&gt;::serialize (1 samples, 0.08%)</title><rect x="12.8389%" y="645" width="0.0797%" height="15" fill="rgb(242,78,33)" fg:x="161" fg:w="1"/><text x="13.0889%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.8389%" y="629" width="0.0797%" height="15" fill="rgb(235,60,3)" fg:x="161" fg:w="1"/><text x="13.0889%" y="639.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="12.9984%" y="693" width="0.0797%" height="15" fill="rgb(216,172,19)" fg:x="163" fg:w="1"/><text x="13.2484%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="12.9984%" y="677" width="0.0797%" height="15" fill="rgb(227,6,42)" fg:x="163" fg:w="1"/><text x="13.2484%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="12.9984%" y="661" width="0.0797%" height="15" fill="rgb(223,207,42)" fg:x="163" fg:w="1"/><text x="13.2484%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="12.9984%" y="645" width="0.0797%" height="15" fill="rgb(246,138,30)" fg:x="163" fg:w="1"/><text x="13.2484%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.9984%" y="629" width="0.0797%" height="15" fill="rgb(251,199,47)" fg:x="163" fg:w="1"/><text x="13.2484%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.9984%" y="613" width="0.0797%" height="15" fill="rgb(228,218,44)" fg:x="163" fg:w="1"/><text x="13.2484%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.9984%" y="597" width="0.0797%" height="15" fill="rgb(220,68,6)" fg:x="163" fg:w="1"/><text x="13.2484%" y="607.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="13.0781%" y="693" width="0.1595%" height="15" fill="rgb(240,60,26)" fg:x="164" fg:w="2"/><text x="13.3281%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="13.0781%" y="677" width="0.1595%" height="15" fill="rgb(211,200,19)" fg:x="164" fg:w="2"/><text x="13.3281%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="13.0781%" y="661" width="0.1595%" height="15" fill="rgb(242,145,30)" fg:x="164" fg:w="2"/><text x="13.3281%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="13.0781%" y="645" width="0.1595%" height="15" fill="rgb(225,64,13)" fg:x="164" fg:w="2"/><text x="13.3281%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="13.1579%" y="629" width="0.0797%" height="15" fill="rgb(218,103,35)" fg:x="165" fg:w="1"/><text x="13.4079%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.1579%" y="613" width="0.0797%" height="15" fill="rgb(216,93,46)" fg:x="165" fg:w="1"/><text x="13.4079%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.1579%" y="597" width="0.0797%" height="15" fill="rgb(225,159,27)" fg:x="165" fg:w="1"/><text x="13.4079%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.1579%" y="581" width="0.0797%" height="15" fill="rgb(225,204,11)" fg:x="165" fg:w="1"/><text x="13.4079%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.1579%" y="565" width="0.0797%" height="15" fill="rgb(205,56,4)" fg:x="165" fg:w="1"/><text x="13.4079%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="13.1579%" y="549" width="0.0797%" height="15" fill="rgb(206,6,35)" fg:x="165" fg:w="1"/><text x="13.4079%" y="559.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (5 samples, 0.40%)</title><rect x="12.9187%" y="725" width="0.3987%" height="15" fill="rgb(247,73,52)" fg:x="162" fg:w="5"/><text x="13.1687%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.40%)</title><rect x="12.9187%" y="709" width="0.3987%" height="15" fill="rgb(246,97,4)" fg:x="162" fg:w="5"/><text x="13.1687%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="13.2376%" y="693" width="0.0797%" height="15" fill="rgb(212,37,15)" fg:x="166" fg:w="1"/><text x="13.4876%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="13.2376%" y="677" width="0.0797%" height="15" fill="rgb(208,130,40)" fg:x="166" fg:w="1"/><text x="13.4876%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="13.3174%" y="709" width="0.0797%" height="15" fill="rgb(236,55,29)" fg:x="167" fg:w="1"/><text x="13.5674%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.3174%" y="693" width="0.0797%" height="15" fill="rgb(209,156,45)" fg:x="167" fg:w="1"/><text x="13.5674%" y="703.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="13.3971%" y="677" width="0.0797%" height="15" fill="rgb(249,107,4)" fg:x="168" fg:w="1"/><text x="13.6471%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="13.3971%" y="661" width="0.0797%" height="15" fill="rgb(227,7,13)" fg:x="168" fg:w="1"/><text x="13.6471%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.3971%" y="645" width="0.0797%" height="15" fill="rgb(250,129,14)" fg:x="168" fg:w="1"/><text x="13.6471%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="13.3971%" y="629" width="0.0797%" height="15" fill="rgb(229,92,13)" fg:x="168" fg:w="1"/><text x="13.6471%" y="639.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (2 samples, 0.16%)</title><rect x="13.3971%" y="709" width="0.1595%" height="15" fill="rgb(245,98,39)" fg:x="168" fg:w="2"/><text x="13.6471%" y="719.50"></text></g><g><title>engine::users::model::add_username_to_key (2 samples, 0.16%)</title><rect x="13.3971%" y="693" width="0.1595%" height="15" fill="rgb(234,135,48)" fg:x="168" fg:w="2"/><text x="13.6471%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="13.4769%" y="677" width="0.0797%" height="15" fill="rgb(230,98,28)" fg:x="169" fg:w="1"/><text x="13.7269%" y="687.50"></text></g><g><title>engine::users::model::_::&lt;impl serde::ser::Serialize for engine::users::model::Usernames&gt;::serialize (1 samples, 0.08%)</title><rect x="13.4769%" y="661" width="0.0797%" height="15" fill="rgb(223,121,0)" fg:x="169" fg:w="1"/><text x="13.7269%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.4769%" y="645" width="0.0797%" height="15" fill="rgb(234,173,33)" fg:x="169" fg:w="1"/><text x="13.7269%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="13.4769%" y="629" width="0.0797%" height="15" fill="rgb(245,47,8)" fg:x="169" fg:w="1"/><text x="13.7269%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.4769%" y="613" width="0.0797%" height="15" fill="rgb(205,17,20)" fg:x="169" fg:w="1"/><text x="13.7269%" y="623.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="13.5566%" y="709" width="0.0797%" height="15" fill="rgb(232,151,16)" fg:x="170" fg:w="1"/><text x="13.8066%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="13.5566%" y="693" width="0.0797%" height="15" fill="rgb(208,30,32)" fg:x="170" fg:w="1"/><text x="13.8066%" y="703.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="13.6364%" y="693" width="0.0797%" height="15" fill="rgb(254,26,3)" fg:x="171" fg:w="1"/><text x="13.8864%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.6364%" y="677" width="0.0797%" height="15" fill="rgb(240,177,30)" fg:x="171" fg:w="1"/><text x="13.8864%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="13.6364%" y="661" width="0.0797%" height="15" fill="rgb(248,76,44)" fg:x="171" fg:w="1"/><text x="13.8864%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="13.7161%" y="645" width="0.0797%" height="15" fill="rgb(241,186,54)" fg:x="172" fg:w="1"/><text x="13.9661%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="13.7959%" y="613" width="0.0797%" height="15" fill="rgb(249,171,29)" fg:x="173" fg:w="1"/><text x="14.0459%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="13.7959%" y="597" width="0.0797%" height="15" fill="rgb(237,151,44)" fg:x="173" fg:w="1"/><text x="14.0459%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="13.7959%" y="581" width="0.0797%" height="15" fill="rgb(228,174,30)" fg:x="173" fg:w="1"/><text x="14.0459%" y="591.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="13.7959%" y="565" width="0.0797%" height="15" fill="rgb(252,14,37)" fg:x="173" fg:w="1"/><text x="14.0459%" y="575.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="13.7959%" y="645" width="0.1595%" height="15" fill="rgb(207,111,40)" fg:x="173" fg:w="2"/><text x="14.0459%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="13.7959%" y="629" width="0.1595%" height="15" fill="rgb(248,171,54)" fg:x="173" fg:w="2"/><text x="14.0459%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="13.8756%" y="613" width="0.0797%" height="15" fill="rgb(211,127,2)" fg:x="174" fg:w="1"/><text x="14.1256%" y="623.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="13.8756%" y="597" width="0.0797%" height="15" fill="rgb(236,87,47)" fg:x="174" fg:w="1"/><text x="14.1256%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (6 samples, 0.48%)</title><rect x="14.0351%" y="565" width="0.4785%" height="15" fill="rgb(223,190,45)" fg:x="176" fg:w="6"/><text x="14.2851%" y="575.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="14.1946%" y="549" width="0.3190%" height="15" fill="rgb(215,5,16)" fg:x="178" fg:w="4"/><text x="14.4446%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="14.3541%" y="533" width="0.1595%" height="15" fill="rgb(252,82,33)" fg:x="180" fg:w="2"/><text x="14.6041%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="14.3541%" y="517" width="0.1595%" height="15" fill="rgb(247,213,44)" fg:x="180" fg:w="2"/><text x="14.6041%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="14.4338%" y="501" width="0.0797%" height="15" fill="rgb(205,196,44)" fg:x="181" fg:w="1"/><text x="14.6838%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="14.4338%" y="485" width="0.0797%" height="15" fill="rgb(237,96,54)" fg:x="181" fg:w="1"/><text x="14.6838%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="14.4338%" y="469" width="0.0797%" height="15" fill="rgb(230,113,34)" fg:x="181" fg:w="1"/><text x="14.6838%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (7 samples, 0.56%)</title><rect x="14.0351%" y="581" width="0.5582%" height="15" fill="rgb(221,224,12)" fg:x="176" fg:w="7"/><text x="14.2851%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="14.5136%" y="565" width="0.0797%" height="15" fill="rgb(219,112,44)" fg:x="182" fg:w="1"/><text x="14.7636%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="14.5136%" y="549" width="0.0797%" height="15" fill="rgb(210,31,13)" fg:x="182" fg:w="1"/><text x="14.7636%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.5136%" y="533" width="0.0797%" height="15" fill="rgb(230,25,16)" fg:x="182" fg:w="1"/><text x="14.7636%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="14.5933%" y="565" width="0.1595%" height="15" fill="rgb(246,108,53)" fg:x="183" fg:w="2"/><text x="14.8433%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="14.5933%" y="549" width="0.1595%" height="15" fill="rgb(241,172,50)" fg:x="183" fg:w="2"/><text x="14.8433%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="14.5933%" y="533" width="0.1595%" height="15" fill="rgb(235,141,10)" fg:x="183" fg:w="2"/><text x="14.8433%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="14.5933%" y="517" width="0.1595%" height="15" fill="rgb(220,174,43)" fg:x="183" fg:w="2"/><text x="14.8433%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="14.5933%" y="501" width="0.1595%" height="15" fill="rgb(215,181,40)" fg:x="183" fg:w="2"/><text x="14.8433%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="14.5933%" y="485" width="0.1595%" height="15" fill="rgb(230,97,2)" fg:x="183" fg:w="2"/><text x="14.8433%" y="495.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="14.5933%" y="469" width="0.1595%" height="15" fill="rgb(211,25,27)" fg:x="183" fg:w="2"/><text x="14.8433%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="14.8325%" y="549" width="0.0797%" height="15" fill="rgb(230,87,26)" fg:x="186" fg:w="1"/><text x="15.0825%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="14.8325%" y="533" width="0.0797%" height="15" fill="rgb(227,160,17)" fg:x="186" fg:w="1"/><text x="15.0825%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="14.8325%" y="517" width="0.0797%" height="15" fill="rgb(244,85,34)" fg:x="186" fg:w="1"/><text x="15.0825%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.8325%" y="501" width="0.0797%" height="15" fill="rgb(207,70,0)" fg:x="186" fg:w="1"/><text x="15.0825%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="14.9123%" y="549" width="0.2392%" height="15" fill="rgb(223,129,7)" fg:x="187" fg:w="3"/><text x="15.1623%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.0718%" y="533" width="0.0797%" height="15" fill="rgb(246,105,7)" fg:x="189" fg:w="1"/><text x="15.3218%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="15.0718%" y="517" width="0.0797%" height="15" fill="rgb(215,154,42)" fg:x="189" fg:w="1"/><text x="15.3218%" y="527.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::classify (1 samples, 0.08%)</title><rect x="15.1515%" y="533" width="0.0797%" height="15" fill="rgb(220,215,30)" fg:x="190" fg:w="1"/><text x="15.4015%" y="543.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::partial_classify (1 samples, 0.08%)</title><rect x="15.1515%" y="517" width="0.0797%" height="15" fill="rgb(228,81,51)" fg:x="190" fg:w="1"/><text x="15.4015%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="15.2313%" y="533" width="0.0797%" height="15" fill="rgb(247,71,54)" fg:x="191" fg:w="1"/><text x="15.4813%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.2313%" y="517" width="0.0797%" height="15" fill="rgb(234,176,34)" fg:x="191" fg:w="1"/><text x="15.4813%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="15.3110%" y="533" width="0.2392%" height="15" fill="rgb(241,103,54)" fg:x="192" fg:w="3"/><text x="15.5610%" y="543.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="15.3110%" y="517" width="0.2392%" height="15" fill="rgb(228,22,34)" fg:x="192" fg:w="3"/><text x="15.5610%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="15.3110%" y="501" width="0.2392%" height="15" fill="rgb(241,179,48)" fg:x="192" fg:w="3"/><text x="15.5610%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="15.3110%" y="485" width="0.2392%" height="15" fill="rgb(235,167,37)" fg:x="192" fg:w="3"/><text x="15.5610%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="15.3907%" y="469" width="0.1595%" height="15" fill="rgb(213,109,30)" fg:x="193" fg:w="2"/><text x="15.6407%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="15.3907%" y="453" width="0.1595%" height="15" fill="rgb(222,172,16)" fg:x="193" fg:w="2"/><text x="15.6407%" y="463.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="15.3907%" y="437" width="0.1595%" height="15" fill="rgb(233,192,5)" fg:x="193" fg:w="2"/><text x="15.6407%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="15.1515%" y="549" width="0.5582%" height="15" fill="rgb(247,189,41)" fg:x="190" fg:w="7"/><text x="15.4015%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="15.5502%" y="533" width="0.1595%" height="15" fill="rgb(218,134,47)" fg:x="195" fg:w="2"/><text x="15.8002%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="15.5502%" y="517" width="0.1595%" height="15" fill="rgb(216,29,3)" fg:x="195" fg:w="2"/><text x="15.8002%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="15.5502%" y="501" width="0.1595%" height="15" fill="rgb(246,140,12)" fg:x="195" fg:w="2"/><text x="15.8002%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="15.5502%" y="485" width="0.1595%" height="15" fill="rgb(230,136,11)" fg:x="195" fg:w="2"/><text x="15.8002%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="15.5502%" y="469" width="0.1595%" height="15" fill="rgb(247,22,47)" fg:x="195" fg:w="2"/><text x="15.8002%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="15.5502%" y="453" width="0.1595%" height="15" fill="rgb(218,84,22)" fg:x="195" fg:w="2"/><text x="15.8002%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="15.5502%" y="437" width="0.1595%" height="15" fill="rgb(216,87,39)" fg:x="195" fg:w="2"/><text x="15.8002%" y="447.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="15.5502%" y="421" width="0.1595%" height="15" fill="rgb(221,178,8)" fg:x="195" fg:w="2"/><text x="15.8002%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (23 samples, 1.83%)</title><rect x="13.9553%" y="597" width="1.8341%" height="15" fill="rgb(230,42,11)" fg:x="175" fg:w="23"/><text x="14.2053%" y="607.50">&lt;..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (15 samples, 1.20%)</title><rect x="14.5933%" y="581" width="1.1962%" height="15" fill="rgb(237,229,4)" fg:x="183" fg:w="15"/><text x="14.8433%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (13 samples, 1.04%)</title><rect x="14.7528%" y="565" width="1.0367%" height="15" fill="rgb(222,31,33)" fg:x="185" fg:w="13"/><text x="15.0028%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.7097%" y="549" width="0.0797%" height="15" fill="rgb(210,17,39)" fg:x="197" fg:w="1"/><text x="15.9597%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.7895%" y="565" width="0.0797%" height="15" fill="rgb(244,93,20)" fg:x="198" fg:w="1"/><text x="16.0395%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.8692%" y="565" width="0.0797%" height="15" fill="rgb(210,40,47)" fg:x="199" fg:w="1"/><text x="16.1192%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.1085%" y="549" width="0.0797%" height="15" fill="rgb(239,211,47)" fg:x="202" fg:w="1"/><text x="16.3585%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="16.1882%" y="549" width="0.2392%" height="15" fill="rgb(251,223,49)" fg:x="203" fg:w="3"/><text x="16.4382%" y="559.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="16.2679%" y="533" width="0.1595%" height="15" fill="rgb(221,149,5)" fg:x="204" fg:w="2"/><text x="16.5179%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.4274%" y="533" width="0.0797%" height="15" fill="rgb(219,224,51)" fg:x="206" fg:w="1"/><text x="16.6774%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.5869%" y="517" width="0.0797%" height="15" fill="rgb(223,7,8)" fg:x="208" fg:w="1"/><text x="16.8369%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.6667%" y="485" width="0.0797%" height="15" fill="rgb(241,217,22)" fg:x="209" fg:w="1"/><text x="16.9167%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="16.6667%" y="517" width="0.1595%" height="15" fill="rgb(248,209,0)" fg:x="209" fg:w="2"/><text x="16.9167%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="16.6667%" y="501" width="0.1595%" height="15" fill="rgb(217,205,4)" fg:x="209" fg:w="2"/><text x="16.9167%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.7464%" y="485" width="0.0797%" height="15" fill="rgb(228,124,39)" fg:x="210" fg:w="1"/><text x="16.9964%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.7464%" y="469" width="0.0797%" height="15" fill="rgb(250,116,42)" fg:x="210" fg:w="1"/><text x="16.9964%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (15 samples, 1.20%)</title><rect x="15.7895%" y="597" width="1.1962%" height="15" fill="rgb(223,202,9)" fg:x="198" fg:w="15"/><text x="16.0395%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (15 samples, 1.20%)</title><rect x="15.7895%" y="581" width="1.1962%" height="15" fill="rgb(242,222,40)" fg:x="198" fg:w="15"/><text x="16.0395%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (13 samples, 1.04%)</title><rect x="15.9490%" y="565" width="1.0367%" height="15" fill="rgb(229,99,46)" fg:x="200" fg:w="13"/><text x="16.1990%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="16.4274%" y="549" width="0.5582%" height="15" fill="rgb(225,56,46)" fg:x="206" fg:w="7"/><text x="16.6774%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="16.5072%" y="533" width="0.4785%" height="15" fill="rgb(227,94,5)" fg:x="207" fg:w="6"/><text x="16.7572%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="16.8262%" y="517" width="0.1595%" height="15" fill="rgb(205,112,38)" fg:x="211" fg:w="2"/><text x="17.0762%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.9059%" y="501" width="0.0797%" height="15" fill="rgb(231,133,46)" fg:x="212" fg:w="1"/><text x="17.1559%" y="511.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPaths as core::convert::Into&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::into (1 samples, 0.08%)</title><rect x="17.0654%" y="565" width="0.0797%" height="15" fill="rgb(217,16,9)" fg:x="214" fg:w="1"/><text x="17.3154%" y="575.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="17.0654%" y="549" width="0.0797%" height="15" fill="rgb(249,173,9)" fg:x="214" fg:w="1"/><text x="17.3154%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="17.0654%" y="533" width="0.0797%" height="15" fill="rgb(205,163,53)" fg:x="214" fg:w="1"/><text x="17.3154%" y="543.50"></text></g><g><title>alloc::str::join_generic_copy (1 samples, 0.08%)</title><rect x="17.0654%" y="517" width="0.0797%" height="15" fill="rgb(217,54,41)" fg:x="214" fg:w="1"/><text x="17.3154%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="17.1451%" y="533" width="0.0797%" height="15" fill="rgb(228,216,12)" fg:x="215" fg:w="1"/><text x="17.3951%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (4 samples, 0.32%)</title><rect x="16.9856%" y="581" width="0.3190%" height="15" fill="rgb(244,228,15)" fg:x="213" fg:w="4"/><text x="17.2356%" y="591.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (2 samples, 0.16%)</title><rect x="17.1451%" y="565" width="0.1595%" height="15" fill="rgb(221,176,53)" fg:x="215" fg:w="2"/><text x="17.3951%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="17.1451%" y="549" width="0.1595%" height="15" fill="rgb(205,94,34)" fg:x="215" fg:w="2"/><text x="17.3951%" y="559.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="17.2249%" y="533" width="0.0797%" height="15" fill="rgb(213,110,48)" fg:x="216" fg:w="1"/><text x="17.4749%" y="543.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="17.2249%" y="517" width="0.0797%" height="15" fill="rgb(236,142,28)" fg:x="216" fg:w="1"/><text x="17.4749%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="17.5439%" y="549" width="0.1595%" height="15" fill="rgb(225,135,29)" fg:x="220" fg:w="2"/><text x="17.7939%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="17.6236%" y="533" width="0.0797%" height="15" fill="rgb(252,45,31)" fg:x="221" fg:w="1"/><text x="17.8736%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="17.7033%" y="533" width="0.0797%" height="15" fill="rgb(211,187,50)" fg:x="222" fg:w="1"/><text x="17.9533%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (3 samples, 0.24%)</title><rect x="17.7033%" y="549" width="0.2392%" height="15" fill="rgb(229,109,7)" fg:x="222" fg:w="3"/><text x="17.9533%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="17.7831%" y="533" width="0.1595%" height="15" fill="rgb(251,131,51)" fg:x="223" fg:w="2"/><text x="18.0331%" y="543.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="17.7831%" y="517" width="0.1595%" height="15" fill="rgb(251,180,35)" fg:x="223" fg:w="2"/><text x="18.0331%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.9426%" y="501" width="0.0797%" height="15" fill="rgb(211,46,32)" fg:x="225" fg:w="1"/><text x="18.1926%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="18.1021%" y="485" width="0.0797%" height="15" fill="rgb(248,123,17)" fg:x="227" fg:w="1"/><text x="18.3521%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="18.1021%" y="469" width="0.0797%" height="15" fill="rgb(227,141,18)" fg:x="227" fg:w="1"/><text x="18.3521%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="18.1021%" y="453" width="0.0797%" height="15" fill="rgb(216,102,9)" fg:x="227" fg:w="1"/><text x="18.3521%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.1021%" y="437" width="0.0797%" height="15" fill="rgb(253,47,13)" fg:x="227" fg:w="1"/><text x="18.3521%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="17.9426%" y="517" width="0.3190%" height="15" fill="rgb(226,93,23)" fg:x="225" fg:w="4"/><text x="18.1926%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="18.0223%" y="501" width="0.2392%" height="15" fill="rgb(247,104,17)" fg:x="226" fg:w="3"/><text x="18.2723%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.1818%" y="485" width="0.0797%" height="15" fill="rgb(233,203,26)" fg:x="228" fg:w="1"/><text x="18.4318%" y="495.50"></text></g><g><title>engine::session::Session::flush (60 samples, 4.78%)</title><rect x="13.6364%" y="709" width="4.7847%" height="15" fill="rgb(244,98,49)" fg:x="171" fg:w="60"/><text x="13.8864%" y="719.50">engine..</text></g><g><title>engine::session::Session::save_changes (59 samples, 4.70%)</title><rect x="13.7161%" y="693" width="4.7049%" height="15" fill="rgb(235,134,22)" fg:x="172" fg:w="59"/><text x="13.9661%" y="703.50">engin..</text></g><g><title>engine::session::state::State::close (59 samples, 4.70%)</title><rect x="13.7161%" y="677" width="4.7049%" height="15" fill="rgb(221,70,32)" fg:x="172" fg:w="59"/><text x="13.9661%" y="687.50">engin..</text></g><g><title>engine::session::state::State::flush_entities (59 samples, 4.70%)</title><rect x="13.7161%" y="661" width="4.7049%" height="15" fill="rgb(238,15,50)" fg:x="172" fg:w="59"/><text x="13.9661%" y="671.50">engin..</text></g><g><title>core::iter::adapters::try_process (56 samples, 4.47%)</title><rect x="13.9553%" y="645" width="4.4657%" height="15" fill="rgb(215,221,48)" fg:x="175" fg:w="56"/><text x="14.2053%" y="655.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (56 samples, 4.47%)</title><rect x="13.9553%" y="629" width="4.4657%" height="15" fill="rgb(236,73,3)" fg:x="175" fg:w="56"/><text x="14.2053%" y="639.50">&lt;allo..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (56 samples, 4.47%)</title><rect x="13.9553%" y="613" width="4.4657%" height="15" fill="rgb(250,107,11)" fg:x="175" fg:w="56"/><text x="14.2053%" y="623.50">engin..</text></g><g><title>kernel::model::any_entity_changes (18 samples, 1.44%)</title><rect x="16.9856%" y="597" width="1.4354%" height="15" fill="rgb(242,39,14)" fg:x="213" fg:w="18"/><text x="17.2356%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (14 samples, 1.12%)</title><rect x="17.3046%" y="581" width="1.1164%" height="15" fill="rgb(248,164,37)" fg:x="217" fg:w="14"/><text x="17.5546%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (13 samples, 1.04%)</title><rect x="17.3844%" y="565" width="1.0367%" height="15" fill="rgb(217,60,12)" fg:x="218" fg:w="13"/><text x="17.6344%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.48%)</title><rect x="17.9426%" y="549" width="0.4785%" height="15" fill="rgb(240,125,29)" fg:x="225" fg:w="6"/><text x="18.1926%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="17.9426%" y="533" width="0.4785%" height="15" fill="rgb(208,207,28)" fg:x="225" fg:w="6"/><text x="18.1926%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="18.2616%" y="517" width="0.1595%" height="15" fill="rgb(209,159,27)" fg:x="229" fg:w="2"/><text x="18.5116%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.3413%" y="501" width="0.0797%" height="15" fill="rgb(251,176,53)" fg:x="230" fg:w="1"/><text x="18.5913%" y="511.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="18.4211%" y="709" width="0.0797%" height="15" fill="rgb(211,85,7)" fg:x="231" fg:w="1"/><text x="18.6711%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="18.4211%" y="693" width="0.0797%" height="15" fill="rgb(216,64,54)" fg:x="231" fg:w="1"/><text x="18.6711%" y="703.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="18.4211%" y="677" width="0.0797%" height="15" fill="rgb(217,54,24)" fg:x="231" fg:w="1"/><text x="18.6711%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="18.4211%" y="661" width="0.0797%" height="15" fill="rgb(208,206,53)" fg:x="231" fg:w="1"/><text x="18.6711%" y="671.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="18.4211%" y="645" width="0.0797%" height="15" fill="rgb(251,74,39)" fg:x="231" fg:w="1"/><text x="18.6711%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="18.4211%" y="629" width="0.0797%" height="15" fill="rgb(226,47,5)" fg:x="231" fg:w="1"/><text x="18.6711%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.4211%" y="613" width="0.0797%" height="15" fill="rgb(234,111,33)" fg:x="231" fg:w="1"/><text x="18.6711%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.4211%" y="597" width="0.0797%" height="15" fill="rgb(251,14,10)" fg:x="231" fg:w="1"/><text x="18.6711%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="18.4211%" y="581" width="0.0797%" height="15" fill="rgb(232,43,0)" fg:x="231" fg:w="1"/><text x="18.6711%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="18.4211%" y="565" width="0.0797%" height="15" fill="rgb(222,68,43)" fg:x="231" fg:w="1"/><text x="18.6711%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="18.4211%" y="549" width="0.0797%" height="15" fill="rgb(217,24,23)" fg:x="231" fg:w="1"/><text x="18.6711%" y="559.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="18.4211%" y="533" width="0.0797%" height="15" fill="rgb(229,209,14)" fg:x="231" fg:w="1"/><text x="18.6711%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.5008%" y="613" width="0.0797%" height="15" fill="rgb(250,149,48)" fg:x="232" fg:w="1"/><text x="18.7508%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.5008%" y="597" width="0.0797%" height="15" fill="rgb(210,120,37)" fg:x="232" fg:w="1"/><text x="18.7508%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="18.5008%" y="581" width="0.0797%" height="15" fill="rgb(210,21,8)" fg:x="232" fg:w="1"/><text x="18.7508%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="18.5008%" y="565" width="0.0797%" height="15" fill="rgb(243,145,7)" fg:x="232" fg:w="1"/><text x="18.7508%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="18.5008%" y="549" width="0.0797%" height="15" fill="rgb(238,178,32)" fg:x="232" fg:w="1"/><text x="18.7508%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.5008%" y="533" width="0.0797%" height="15" fill="rgb(222,4,10)" fg:x="232" fg:w="1"/><text x="18.7508%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.5008%" y="517" width="0.0797%" height="15" fill="rgb(239,7,37)" fg:x="232" fg:w="1"/><text x="18.7508%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="18.5008%" y="501" width="0.0797%" height="15" fill="rgb(215,31,37)" fg:x="232" fg:w="1"/><text x="18.7508%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="18.5008%" y="485" width="0.0797%" height="15" fill="rgb(224,83,33)" fg:x="232" fg:w="1"/><text x="18.7508%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="18.5008%" y="469" width="0.0797%" height="15" fill="rgb(239,55,3)" fg:x="232" fg:w="1"/><text x="18.7508%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="18.5008%" y="453" width="0.0797%" height="15" fill="rgb(247,92,11)" fg:x="232" fg:w="1"/><text x="18.7508%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.5008%" y="437" width="0.0797%" height="15" fill="rgb(239,200,7)" fg:x="232" fg:w="1"/><text x="18.7508%" y="447.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="18.5008%" y="693" width="0.1595%" height="15" fill="rgb(227,115,8)" fg:x="232" fg:w="2"/><text x="18.7508%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="18.5008%" y="677" width="0.1595%" height="15" fill="rgb(215,189,27)" fg:x="232" fg:w="2"/><text x="18.7508%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="18.5008%" y="661" width="0.1595%" height="15" fill="rgb(251,216,39)" fg:x="232" fg:w="2"/><text x="18.7508%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="18.5008%" y="645" width="0.1595%" height="15" fill="rgb(207,29,47)" fg:x="232" fg:w="2"/><text x="18.7508%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="18.5008%" y="629" width="0.1595%" height="15" fill="rgb(210,71,34)" fg:x="232" fg:w="2"/><text x="18.7508%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.5805%" y="613" width="0.0797%" height="15" fill="rgb(253,217,51)" fg:x="233" fg:w="1"/><text x="18.8305%" y="623.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="18.6603%" y="677" width="0.1595%" height="15" fill="rgb(222,117,46)" fg:x="234" fg:w="2"/><text x="18.9103%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="18.6603%" y="661" width="0.1595%" height="15" fill="rgb(226,132,6)" fg:x="234" fg:w="2"/><text x="18.9103%" y="671.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="18.6603%" y="645" width="0.1595%" height="15" fill="rgb(254,145,51)" fg:x="234" fg:w="2"/><text x="18.9103%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="18.6603%" y="629" width="0.1595%" height="15" fill="rgb(231,199,27)" fg:x="234" fg:w="2"/><text x="18.9103%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.7400%" y="613" width="0.0797%" height="15" fill="rgb(245,158,14)" fg:x="235" fg:w="1"/><text x="18.9900%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.8198%" y="613" width="0.0797%" height="15" fill="rgb(240,113,14)" fg:x="236" fg:w="1"/><text x="19.0698%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="18.8198%" y="661" width="0.1595%" height="15" fill="rgb(210,20,13)" fg:x="236" fg:w="2"/><text x="19.0698%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="18.8198%" y="645" width="0.1595%" height="15" fill="rgb(241,144,13)" fg:x="236" fg:w="2"/><text x="19.0698%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="18.8198%" y="629" width="0.1595%" height="15" fill="rgb(235,43,34)" fg:x="236" fg:w="2"/><text x="19.0698%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.8995%" y="613" width="0.0797%" height="15" fill="rgb(208,36,20)" fg:x="237" fg:w="1"/><text x="19.1495%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.8995%" y="597" width="0.0797%" height="15" fill="rgb(239,204,10)" fg:x="237" fg:w="1"/><text x="19.1495%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="18.8995%" y="581" width="0.0797%" height="15" fill="rgb(217,84,43)" fg:x="237" fg:w="1"/><text x="19.1495%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.8995%" y="565" width="0.0797%" height="15" fill="rgb(241,170,50)" fg:x="237" fg:w="1"/><text x="19.1495%" y="575.50"></text></g><g><title>plugins_core::build::Build::save (7 samples, 0.56%)</title><rect x="18.5008%" y="709" width="0.5582%" height="15" fill="rgb(226,205,29)" fg:x="232" fg:w="7"/><text x="18.7508%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="18.6603%" y="693" width="0.3987%" height="15" fill="rgb(233,113,1)" fg:x="234" fg:w="5"/><text x="18.9103%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="18.8198%" y="677" width="0.2392%" height="15" fill="rgb(253,98,13)" fg:x="236" fg:w="3"/><text x="19.0698%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="18.9793%" y="661" width="0.0797%" height="15" fill="rgb(211,115,12)" fg:x="238" fg:w="1"/><text x="19.2293%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.9793%" y="645" width="0.0797%" height="15" fill="rgb(208,12,16)" fg:x="238" fg:w="1"/><text x="19.2293%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="18.9793%" y="629" width="0.0797%" height="15" fill="rgb(237,193,54)" fg:x="238" fg:w="1"/><text x="19.2293%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="18.9793%" y="613" width="0.0797%" height="15" fill="rgb(243,22,42)" fg:x="238" fg:w="1"/><text x="19.2293%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="18.9793%" y="597" width="0.0797%" height="15" fill="rgb(233,151,36)" fg:x="238" fg:w="1"/><text x="19.2293%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="18.9793%" y="581" width="0.0797%" height="15" fill="rgb(237,57,45)" fg:x="238" fg:w="1"/><text x="19.2293%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="18.9793%" y="565" width="0.0797%" height="15" fill="rgb(221,88,17)" fg:x="238" fg:w="1"/><text x="19.2293%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="18.9793%" y="549" width="0.0797%" height="15" fill="rgb(230,79,15)" fg:x="238" fg:w="1"/><text x="19.2293%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="18.9793%" y="533" width="0.0797%" height="15" fill="rgb(213,57,13)" fg:x="238" fg:w="1"/><text x="19.2293%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.9793%" y="517" width="0.0797%" height="15" fill="rgb(222,116,39)" fg:x="238" fg:w="1"/><text x="19.2293%" y="527.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="19.0590%" y="677" width="0.0797%" height="15" fill="rgb(245,107,2)" fg:x="239" fg:w="1"/><text x="19.3090%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::new (1 samples, 0.08%)</title><rect x="19.0590%" y="661" width="0.0797%" height="15" fill="rgb(238,1,10)" fg:x="239" fg:w="1"/><text x="19.3090%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="19.1388%" y="629" width="0.0797%" height="15" fill="rgb(249,4,48)" fg:x="240" fg:w="1"/><text x="19.3888%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.1388%" y="613" width="0.0797%" height="15" fill="rgb(223,151,18)" fg:x="240" fg:w="1"/><text x="19.3888%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.1388%" y="597" width="0.0797%" height="15" fill="rgb(227,65,43)" fg:x="240" fg:w="1"/><text x="19.3888%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.1388%" y="581" width="0.0797%" height="15" fill="rgb(218,40,45)" fg:x="240" fg:w="1"/><text x="19.3888%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.1388%" y="565" width="0.0797%" height="15" fill="rgb(252,121,31)" fg:x="240" fg:w="1"/><text x="19.3888%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.1388%" y="549" width="0.0797%" height="15" fill="rgb(219,158,43)" fg:x="240" fg:w="1"/><text x="19.3888%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="19.1388%" y="533" width="0.0797%" height="15" fill="rgb(231,162,42)" fg:x="240" fg:w="1"/><text x="19.3888%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="19.1388%" y="517" width="0.0797%" height="15" fill="rgb(217,179,25)" fg:x="240" fg:w="1"/><text x="19.3888%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="19.1388%" y="501" width="0.0797%" height="15" fill="rgb(206,212,31)" fg:x="240" fg:w="1"/><text x="19.3888%" y="511.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="19.1388%" y="645" width="0.1595%" height="15" fill="rgb(235,144,12)" fg:x="240" fg:w="2"/><text x="19.3888%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.2185%" y="629" width="0.0797%" height="15" fill="rgb(213,51,10)" fg:x="241" fg:w="1"/><text x="19.4685%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.2982%" y="517" width="0.0797%" height="15" fill="rgb(231,145,14)" fg:x="242" fg:w="1"/><text x="19.5482%" y="527.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (5 samples, 0.40%)</title><rect x="19.0590%" y="709" width="0.3987%" height="15" fill="rgb(235,15,28)" fg:x="239" fg:w="5"/><text x="19.3090%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (5 samples, 0.40%)</title><rect x="19.0590%" y="693" width="0.3987%" height="15" fill="rgb(237,206,10)" fg:x="239" fg:w="5"/><text x="19.3090%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.32%)</title><rect x="19.1388%" y="677" width="0.3190%" height="15" fill="rgb(236,227,27)" fg:x="240" fg:w="4"/><text x="19.3888%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="19.1388%" y="661" width="0.3190%" height="15" fill="rgb(246,83,35)" fg:x="240" fg:w="4"/><text x="19.3888%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="19.2982%" y="645" width="0.1595%" height="15" fill="rgb(220,136,24)" fg:x="242" fg:w="2"/><text x="19.5482%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="19.2982%" y="629" width="0.1595%" height="15" fill="rgb(217,3,25)" fg:x="242" fg:w="2"/><text x="19.5482%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="19.2982%" y="613" width="0.1595%" height="15" fill="rgb(239,24,14)" fg:x="242" fg:w="2"/><text x="19.5482%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="19.2982%" y="597" width="0.1595%" height="15" fill="rgb(244,16,53)" fg:x="242" fg:w="2"/><text x="19.5482%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="19.2982%" y="581" width="0.1595%" height="15" fill="rgb(208,175,44)" fg:x="242" fg:w="2"/><text x="19.5482%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="19.2982%" y="565" width="0.1595%" height="15" fill="rgb(252,18,48)" fg:x="242" fg:w="2"/><text x="19.5482%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="19.2982%" y="549" width="0.1595%" height="15" fill="rgb(234,199,32)" fg:x="242" fg:w="2"/><text x="19.5482%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="19.2982%" y="533" width="0.1595%" height="15" fill="rgb(225,77,54)" fg:x="242" fg:w="2"/><text x="19.5482%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="19.3780%" y="517" width="0.0797%" height="15" fill="rgb(225,42,25)" fg:x="243" fg:w="1"/><text x="19.6280%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.3780%" y="501" width="0.0797%" height="15" fill="rgb(242,227,46)" fg:x="243" fg:w="1"/><text x="19.6280%" y="511.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="19.4577%" y="693" width="0.1595%" height="15" fill="rgb(246,197,35)" fg:x="244" fg:w="2"/><text x="19.7077%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="19.4577%" y="677" width="0.1595%" height="15" fill="rgb(215,159,26)" fg:x="244" fg:w="2"/><text x="19.7077%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="19.4577%" y="661" width="0.1595%" height="15" fill="rgb(212,194,50)" fg:x="244" fg:w="2"/><text x="19.7077%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="19.5375%" y="645" width="0.0797%" height="15" fill="rgb(246,132,1)" fg:x="245" fg:w="1"/><text x="19.7875%" y="655.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="19.5375%" y="629" width="0.0797%" height="15" fill="rgb(217,71,7)" fg:x="245" fg:w="1"/><text x="19.7875%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.5375%" y="613" width="0.0797%" height="15" fill="rgb(252,59,32)" fg:x="245" fg:w="1"/><text x="19.7875%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.6172%" y="693" width="0.0797%" height="15" fill="rgb(253,204,25)" fg:x="246" fg:w="1"/><text x="19.8672%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="19.6970%" y="613" width="0.0797%" height="15" fill="rgb(232,21,16)" fg:x="247" fg:w="1"/><text x="19.9470%" y="623.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="19.6970%" y="597" width="0.0797%" height="15" fill="rgb(248,90,29)" fg:x="247" fg:w="1"/><text x="19.9470%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="19.6970%" y="581" width="0.0797%" height="15" fill="rgb(249,223,7)" fg:x="247" fg:w="1"/><text x="19.9470%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.6970%" y="565" width="0.0797%" height="15" fill="rgb(231,119,42)" fg:x="247" fg:w="1"/><text x="19.9470%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.6970%" y="549" width="0.0797%" height="15" fill="rgb(215,41,35)" fg:x="247" fg:w="1"/><text x="19.9470%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.6970%" y="533" width="0.0797%" height="15" fill="rgb(220,44,45)" fg:x="247" fg:w="1"/><text x="19.9470%" y="543.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (5 samples, 0.40%)</title><rect x="19.4577%" y="709" width="0.3987%" height="15" fill="rgb(253,197,36)" fg:x="244" fg:w="5"/><text x="19.7077%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="19.6970%" y="693" width="0.1595%" height="15" fill="rgb(245,225,54)" fg:x="247" fg:w="2"/><text x="19.9470%" y="703.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (2 samples, 0.16%)</title><rect x="19.6970%" y="677" width="0.1595%" height="15" fill="rgb(239,94,37)" fg:x="247" fg:w="2"/><text x="19.9470%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="19.6970%" y="661" width="0.1595%" height="15" fill="rgb(242,217,10)" fg:x="247" fg:w="2"/><text x="19.9470%" y="671.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Route&gt;::serialize (2 samples, 0.16%)</title><rect x="19.6970%" y="645" width="0.1595%" height="15" fill="rgb(250,193,7)" fg:x="247" fg:w="2"/><text x="19.9470%" y="655.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::SimpleRoute&gt;::serialize (2 samples, 0.16%)</title><rect x="19.6970%" y="629" width="0.1595%" height="15" fill="rgb(230,104,19)" fg:x="247" fg:w="2"/><text x="19.9470%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_struct (1 samples, 0.08%)</title><rect x="19.7767%" y="613" width="0.0797%" height="15" fill="rgb(230,181,4)" fg:x="248" fg:w="1"/><text x="20.0267%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.8565%" y="629" width="0.0797%" height="15" fill="rgb(216,219,49)" fg:x="249" fg:w="1"/><text x="20.1065%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.8565%" y="613" width="0.0797%" height="15" fill="rgb(254,144,0)" fg:x="249" fg:w="1"/><text x="20.1065%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.8565%" y="597" width="0.0797%" height="15" fill="rgb(205,209,38)" fg:x="249" fg:w="1"/><text x="20.1065%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="19.8565%" y="581" width="0.0797%" height="15" fill="rgb(240,21,42)" fg:x="249" fg:w="1"/><text x="20.1065%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="19.8565%" y="565" width="0.0797%" height="15" fill="rgb(241,132,3)" fg:x="249" fg:w="1"/><text x="20.1065%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="19.8565%" y="549" width="0.0797%" height="15" fill="rgb(225,14,2)" fg:x="249" fg:w="1"/><text x="20.1065%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.8565%" y="533" width="0.0797%" height="15" fill="rgb(210,141,35)" fg:x="249" fg:w="1"/><text x="20.1065%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.8565%" y="517" width="0.0797%" height="15" fill="rgb(251,14,44)" fg:x="249" fg:w="1"/><text x="20.1065%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="19.8565%" y="501" width="0.0797%" height="15" fill="rgb(247,48,18)" fg:x="249" fg:w="1"/><text x="20.1065%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="19.8565%" y="485" width="0.0797%" height="15" fill="rgb(225,0,40)" fg:x="249" fg:w="1"/><text x="20.1065%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="19.8565%" y="469" width="0.0797%" height="15" fill="rgb(221,31,33)" fg:x="249" fg:w="1"/><text x="20.1065%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="19.8565%" y="453" width="0.0797%" height="15" fill="rgb(237,42,40)" fg:x="249" fg:w="1"/><text x="20.1065%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.8565%" y="437" width="0.0797%" height="15" fill="rgb(233,51,29)" fg:x="249" fg:w="1"/><text x="20.1065%" y="447.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="19.8565%" y="693" width="0.1595%" height="15" fill="rgb(226,58,20)" fg:x="249" fg:w="2"/><text x="20.1065%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="19.8565%" y="677" width="0.1595%" height="15" fill="rgb(208,98,7)" fg:x="249" fg:w="2"/><text x="20.1065%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="19.8565%" y="661" width="0.1595%" height="15" fill="rgb(228,143,44)" fg:x="249" fg:w="2"/><text x="20.1065%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="19.8565%" y="645" width="0.1595%" height="15" fill="rgb(246,55,38)" fg:x="249" fg:w="2"/><text x="20.1065%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.9362%" y="629" width="0.0797%" height="15" fill="rgb(247,87,16)" fg:x="250" fg:w="1"/><text x="20.1862%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.9362%" y="613" width="0.0797%" height="15" fill="rgb(234,129,42)" fg:x="250" fg:w="1"/><text x="20.1862%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="19.9362%" y="597" width="0.0797%" height="15" fill="rgb(220,82,16)" fg:x="250" fg:w="1"/><text x="20.1862%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.9362%" y="581" width="0.0797%" height="15" fill="rgb(211,88,4)" fg:x="250" fg:w="1"/><text x="20.1862%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="19.9362%" y="565" width="0.0797%" height="15" fill="rgb(248,151,21)" fg:x="250" fg:w="1"/><text x="20.1862%" y="575.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="20.0159%" y="693" width="0.0797%" height="15" fill="rgb(238,163,6)" fg:x="251" fg:w="1"/><text x="20.2659%" y="703.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="20.0159%" y="677" width="0.0797%" height="15" fill="rgb(209,183,11)" fg:x="251" fg:w="1"/><text x="20.2659%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.0159%" y="661" width="0.0797%" height="15" fill="rgb(219,37,20)" fg:x="251" fg:w="1"/><text x="20.2659%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.0159%" y="645" width="0.0797%" height="15" fill="rgb(210,158,4)" fg:x="251" fg:w="1"/><text x="20.2659%" y="655.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (86 samples, 6.86%)</title><rect x="13.3174%" y="725" width="6.8581%" height="15" fill="rgb(221,167,53)" fg:x="167" fg:w="86"/><text x="13.5674%" y="735.50">plugins_c..</text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="19.8565%" y="709" width="0.3190%" height="15" fill="rgb(237,151,45)" fg:x="249" fg:w="4"/><text x="20.1065%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="20.0957%" y="693" width="0.0797%" height="15" fill="rgb(231,39,3)" fg:x="252" fg:w="1"/><text x="20.3457%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="20.0957%" y="677" width="0.0797%" height="15" fill="rgb(212,167,28)" fg:x="252" fg:w="1"/><text x="20.3457%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="20.0957%" y="661" width="0.0797%" height="15" fill="rgb(232,178,8)" fg:x="252" fg:w="1"/><text x="20.3457%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.0957%" y="645" width="0.0797%" height="15" fill="rgb(225,151,20)" fg:x="252" fg:w="1"/><text x="20.3457%" y="655.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (1 samples, 0.08%)</title><rect x="20.0957%" y="629" width="0.0797%" height="15" fill="rgb(238,3,37)" fg:x="252" fg:w="1"/><text x="20.3457%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="20.2552%" y="693" width="0.0797%" height="15" fill="rgb(251,147,42)" fg:x="254" fg:w="1"/><text x="20.5052%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="20.3349%" y="677" width="0.0797%" height="15" fill="rgb(208,173,10)" fg:x="255" fg:w="1"/><text x="20.5849%" y="687.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="20.3349%" y="661" width="0.0797%" height="15" fill="rgb(246,225,4)" fg:x="255" fg:w="1"/><text x="20.5849%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="20.3349%" y="645" width="0.0797%" height="15" fill="rgb(248,102,6)" fg:x="255" fg:w="1"/><text x="20.5849%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="20.3349%" y="629" width="0.0797%" height="15" fill="rgb(232,6,21)" fg:x="255" fg:w="1"/><text x="20.5849%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="20.3349%" y="613" width="0.0797%" height="15" fill="rgb(221,179,22)" fg:x="255" fg:w="1"/><text x="20.5849%" y="623.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (4 samples, 0.32%)</title><rect x="20.1754%" y="725" width="0.3190%" height="15" fill="rgb(252,50,20)" fg:x="253" fg:w="4"/><text x="20.4254%" y="735.50"></text></g><g><title>plugins_core::build::Build::new (4 samples, 0.32%)</title><rect x="20.1754%" y="709" width="0.3190%" height="15" fill="rgb(222,56,38)" fg:x="253" fg:w="4"/><text x="20.4254%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="20.3349%" y="693" width="0.1595%" height="15" fill="rgb(206,193,29)" fg:x="255" fg:w="2"/><text x="20.5849%" y="703.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="20.4147%" y="677" width="0.0797%" height="15" fill="rgb(239,192,45)" fg:x="256" fg:w="1"/><text x="20.6647%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.4147%" y="661" width="0.0797%" height="15" fill="rgb(254,18,36)" fg:x="256" fg:w="1"/><text x="20.6647%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="20.4944%" y="693" width="0.1595%" height="15" fill="rgb(221,127,11)" fg:x="257" fg:w="2"/><text x="20.7444%" y="703.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="20.4944%" y="677" width="0.1595%" height="15" fill="rgb(234,146,35)" fg:x="257" fg:w="2"/><text x="20.7444%" y="687.50"></text></g><g><title>serde_json::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for serde_json::value::Value&gt;::from (1 samples, 0.08%)</title><rect x="20.5742%" y="661" width="0.0797%" height="15" fill="rgb(254,201,37)" fg:x="258" fg:w="1"/><text x="20.8242%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.6539%" y="645" width="0.0797%" height="15" fill="rgb(211,202,23)" fg:x="259" fg:w="1"/><text x="20.9039%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.7337%" y="645" width="0.0797%" height="15" fill="rgb(237,91,2)" fg:x="260" fg:w="1"/><text x="20.9837%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.7337%" y="629" width="0.0797%" height="15" fill="rgb(226,228,36)" fg:x="260" fg:w="1"/><text x="20.9837%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="20.6539%" y="677" width="0.2392%" height="15" fill="rgb(213,63,50)" fg:x="259" fg:w="3"/><text x="20.9039%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="20.6539%" y="661" width="0.2392%" height="15" fill="rgb(235,194,19)" fg:x="259" fg:w="3"/><text x="20.9039%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.8134%" y="645" width="0.0797%" height="15" fill="rgb(207,204,18)" fg:x="261" fg:w="1"/><text x="21.0634%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.8134%" y="629" width="0.0797%" height="15" fill="rgb(248,8,7)" fg:x="261" fg:w="1"/><text x="21.0634%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="20.8931%" y="661" width="0.0797%" height="15" fill="rgb(223,145,47)" fg:x="262" fg:w="1"/><text x="21.1431%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.8931%" y="645" width="0.0797%" height="15" fill="rgb(228,84,11)" fg:x="262" fg:w="1"/><text x="21.1431%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.8931%" y="629" width="0.0797%" height="15" fill="rgb(218,76,45)" fg:x="262" fg:w="1"/><text x="21.1431%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.8931%" y="613" width="0.0797%" height="15" fill="rgb(223,80,15)" fg:x="262" fg:w="1"/><text x="21.1431%" y="623.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="20.9729%" y="613" width="0.0797%" height="15" fill="rgb(219,218,33)" fg:x="263" fg:w="1"/><text x="21.2229%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.48%)</title><rect x="20.6539%" y="693" width="0.4785%" height="15" fill="rgb(208,51,11)" fg:x="259" fg:w="6"/><text x="20.9039%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="20.8931%" y="677" width="0.2392%" height="15" fill="rgb(229,165,39)" fg:x="262" fg:w="3"/><text x="21.1431%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="20.9729%" y="661" width="0.1595%" height="15" fill="rgb(241,100,24)" fg:x="263" fg:w="2"/><text x="21.2229%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="20.9729%" y="645" width="0.1595%" height="15" fill="rgb(228,14,23)" fg:x="263" fg:w="2"/><text x="21.2229%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="20.9729%" y="629" width="0.1595%" height="15" fill="rgb(247,116,52)" fg:x="263" fg:w="2"/><text x="21.2229%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="21.0526%" y="613" width="0.0797%" height="15" fill="rgb(216,149,33)" fg:x="264" fg:w="1"/><text x="21.3026%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="21.0526%" y="597" width="0.0797%" height="15" fill="rgb(238,142,29)" fg:x="264" fg:w="1"/><text x="21.3026%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="21.0526%" y="581" width="0.0797%" height="15" fill="rgb(224,83,40)" fg:x="264" fg:w="1"/><text x="21.3026%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="21.0526%" y="565" width="0.0797%" height="15" fill="rgb(234,165,11)" fg:x="264" fg:w="1"/><text x="21.3026%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="21.0526%" y="549" width="0.0797%" height="15" fill="rgb(215,96,23)" fg:x="264" fg:w="1"/><text x="21.3026%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="21.0526%" y="533" width="0.0797%" height="15" fill="rgb(233,179,26)" fg:x="264" fg:w="1"/><text x="21.3026%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="21.0526%" y="517" width="0.0797%" height="15" fill="rgb(225,129,33)" fg:x="264" fg:w="1"/><text x="21.3026%" y="527.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (9 samples, 0.72%)</title><rect x="20.4944%" y="725" width="0.7177%" height="15" fill="rgb(237,49,13)" fg:x="257" fg:w="9"/><text x="20.7444%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (9 samples, 0.72%)</title><rect x="20.4944%" y="709" width="0.7177%" height="15" fill="rgb(211,3,31)" fg:x="257" fg:w="9"/><text x="20.7444%" y="719.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (1 samples, 0.08%)</title><rect x="21.1324%" y="693" width="0.0797%" height="15" fill="rgb(216,152,19)" fg:x="265" fg:w="1"/><text x="21.3824%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="21.1324%" y="677" width="0.0797%" height="15" fill="rgb(251,121,35)" fg:x="265" fg:w="1"/><text x="21.3824%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="21.1324%" y="661" width="0.0797%" height="15" fill="rgb(210,217,47)" fg:x="265" fg:w="1"/><text x="21.3824%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.1324%" y="645" width="0.0797%" height="15" fill="rgb(244,116,22)" fg:x="265" fg:w="1"/><text x="21.3824%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="21.2121%" y="709" width="0.0797%" height="15" fill="rgb(228,17,21)" fg:x="266" fg:w="1"/><text x="21.4621%" y="719.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="21.2121%" y="693" width="0.0797%" height="15" fill="rgb(240,149,34)" fg:x="266" fg:w="1"/><text x="21.4621%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="21.2121%" y="677" width="0.0797%" height="15" fill="rgb(208,125,47)" fg:x="266" fg:w="1"/><text x="21.4621%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.2121%" y="661" width="0.0797%" height="15" fill="rgb(249,186,39)" fg:x="266" fg:w="1"/><text x="21.4621%" y="671.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.2121%" y="645" width="0.0797%" height="15" fill="rgb(240,220,33)" fg:x="266" fg:w="1"/><text x="21.4621%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.2121%" y="629" width="0.0797%" height="15" fill="rgb(243,110,23)" fg:x="266" fg:w="1"/><text x="21.4621%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="21.2919%" y="709" width="0.0797%" height="15" fill="rgb(219,163,46)" fg:x="267" fg:w="1"/><text x="21.5419%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="21.2919%" y="693" width="0.0797%" height="15" fill="rgb(216,126,30)" fg:x="267" fg:w="1"/><text x="21.5419%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="21.2919%" y="677" width="0.0797%" height="15" fill="rgb(208,139,11)" fg:x="267" fg:w="1"/><text x="21.5419%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="21.2919%" y="661" width="0.0797%" height="15" fill="rgb(213,118,36)" fg:x="267" fg:w="1"/><text x="21.5419%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.2919%" y="645" width="0.0797%" height="15" fill="rgb(226,43,17)" fg:x="267" fg:w="1"/><text x="21.5419%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="21.4514%" y="693" width="0.0797%" height="15" fill="rgb(254,217,4)" fg:x="269" fg:w="1"/><text x="21.7014%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="21.4514%" y="677" width="0.0797%" height="15" fill="rgb(210,134,47)" fg:x="269" fg:w="1"/><text x="21.7014%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="21.4514%" y="661" width="0.0797%" height="15" fill="rgb(237,24,49)" fg:x="269" fg:w="1"/><text x="21.7014%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.4514%" y="645" width="0.0797%" height="15" fill="rgb(251,39,46)" fg:x="269" fg:w="1"/><text x="21.7014%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="21.4514%" y="629" width="0.0797%" height="15" fill="rgb(251,220,3)" fg:x="269" fg:w="1"/><text x="21.7014%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.4514%" y="613" width="0.0797%" height="15" fill="rgb(228,105,12)" fg:x="269" fg:w="1"/><text x="21.7014%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="21.4514%" y="597" width="0.0797%" height="15" fill="rgb(215,196,1)" fg:x="269" fg:w="1"/><text x="21.7014%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="21.5311%" y="677" width="0.0797%" height="15" fill="rgb(214,33,39)" fg:x="270" fg:w="1"/><text x="21.7811%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="21.5311%" y="661" width="0.0797%" height="15" fill="rgb(220,19,52)" fg:x="270" fg:w="1"/><text x="21.7811%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.5311%" y="645" width="0.0797%" height="15" fill="rgb(221,78,38)" fg:x="270" fg:w="1"/><text x="21.7811%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="21.5311%" y="629" width="0.0797%" height="15" fill="rgb(253,30,16)" fg:x="270" fg:w="1"/><text x="21.7811%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.5311%" y="613" width="0.0797%" height="15" fill="rgb(242,65,0)" fg:x="270" fg:w="1"/><text x="21.7811%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="21.5311%" y="597" width="0.0797%" height="15" fill="rgb(235,201,12)" fg:x="270" fg:w="1"/><text x="21.7811%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.5311%" y="581" width="0.0797%" height="15" fill="rgb(233,161,9)" fg:x="270" fg:w="1"/><text x="21.7811%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.5311%" y="565" width="0.0797%" height="15" fill="rgb(241,207,41)" fg:x="270" fg:w="1"/><text x="21.7811%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.6906%" y="613" width="0.0797%" height="15" fill="rgb(212,69,46)" fg:x="272" fg:w="1"/><text x="21.9406%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.6906%" y="597" width="0.0797%" height="15" fill="rgb(239,69,45)" fg:x="272" fg:w="1"/><text x="21.9406%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.6906%" y="581" width="0.0797%" height="15" fill="rgb(242,117,48)" fg:x="272" fg:w="1"/><text x="21.9406%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.6906%" y="565" width="0.0797%" height="15" fill="rgb(228,41,36)" fg:x="272" fg:w="1"/><text x="21.9406%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="21.6108%" y="661" width="0.2392%" height="15" fill="rgb(212,3,32)" fg:x="271" fg:w="3"/><text x="21.8608%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.24%)</title><rect x="21.6108%" y="645" width="0.2392%" height="15" fill="rgb(233,41,49)" fg:x="271" fg:w="3"/><text x="21.8608%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="21.6906%" y="629" width="0.1595%" height="15" fill="rgb(252,170,49)" fg:x="272" fg:w="2"/><text x="21.9406%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="21.7703%" y="613" width="0.0797%" height="15" fill="rgb(229,53,26)" fg:x="273" fg:w="1"/><text x="22.0203%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.7703%" y="597" width="0.0797%" height="15" fill="rgb(217,157,12)" fg:x="273" fg:w="1"/><text x="22.0203%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="21.7703%" y="581" width="0.0797%" height="15" fill="rgb(227,17,9)" fg:x="273" fg:w="1"/><text x="22.0203%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.7703%" y="565" width="0.0797%" height="15" fill="rgb(218,84,12)" fg:x="273" fg:w="1"/><text x="22.0203%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.7703%" y="549" width="0.0797%" height="15" fill="rgb(212,79,24)" fg:x="273" fg:w="1"/><text x="22.0203%" y="559.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (180 samples, 14.35%)</title><rect x="7.5758%" y="741" width="14.3541%" height="15" fill="rgb(217,222,37)" fg:x="95" fg:w="180"/><text x="7.8258%" y="751.50">&lt;tests::HoldingKeyInVe..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (9 samples, 0.72%)</title><rect x="21.2121%" y="725" width="0.7177%" height="15" fill="rgb(246,208,8)" fg:x="266" fg:w="9"/><text x="21.4621%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (7 samples, 0.56%)</title><rect x="21.3716%" y="709" width="0.5582%" height="15" fill="rgb(244,133,10)" fg:x="268" fg:w="7"/><text x="21.6216%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="21.5311%" y="693" width="0.3987%" height="15" fill="rgb(209,219,41)" fg:x="270" fg:w="5"/><text x="21.7811%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="21.6108%" y="677" width="0.3190%" height="15" fill="rgb(253,175,45)" fg:x="271" fg:w="4"/><text x="21.8608%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="21.8501%" y="661" width="0.0797%" height="15" fill="rgb(235,100,37)" fg:x="274" fg:w="1"/><text x="22.1001%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="21.8501%" y="645" width="0.0797%" height="15" fill="rgb(225,87,19)" fg:x="274" fg:w="1"/><text x="22.1001%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="21.8501%" y="629" width="0.0797%" height="15" fill="rgb(217,152,17)" fg:x="274" fg:w="1"/><text x="22.1001%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="21.8501%" y="613" width="0.0797%" height="15" fill="rgb(235,72,13)" fg:x="274" fg:w="1"/><text x="22.1001%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="21.8501%" y="597" width="0.0797%" height="15" fill="rgb(233,140,18)" fg:x="274" fg:w="1"/><text x="22.1001%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="21.8501%" y="581" width="0.0797%" height="15" fill="rgb(207,212,28)" fg:x="274" fg:w="1"/><text x="22.1001%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.8501%" y="565" width="0.0797%" height="15" fill="rgb(220,130,25)" fg:x="274" fg:w="1"/><text x="22.1001%" y="575.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="21.9298%" y="741" width="0.0797%" height="15" fill="rgb(205,55,34)" fg:x="275" fg:w="1"/><text x="22.1798%" y="751.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.9298%" y="725" width="0.0797%" height="15" fill="rgb(237,54,35)" fg:x="275" fg:w="1"/><text x="22.1798%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="22.0096%" y="741" width="0.0797%" height="15" fill="rgb(208,67,23)" fg:x="276" fg:w="1"/><text x="22.2596%" y="751.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="22.0096%" y="725" width="0.0797%" height="15" fill="rgb(206,207,50)" fg:x="276" fg:w="1"/><text x="22.2596%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="22.0096%" y="709" width="0.0797%" height="15" fill="rgb(213,211,42)" fg:x="276" fg:w="1"/><text x="22.2596%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.0096%" y="693" width="0.0797%" height="15" fill="rgb(252,197,50)" fg:x="276" fg:w="1"/><text x="22.2596%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.0893%" y="709" width="0.0797%" height="15" fill="rgb(251,211,41)" fg:x="277" fg:w="1"/><text x="22.3393%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.2488%" y="661" width="0.0797%" height="15" fill="rgb(229,211,5)" fg:x="279" fg:w="1"/><text x="22.4988%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (4 samples, 0.32%)</title><rect x="22.0893%" y="741" width="0.3190%" height="15" fill="rgb(239,36,31)" fg:x="277" fg:w="4"/><text x="22.3393%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="22.0893%" y="725" width="0.3190%" height="15" fill="rgb(248,67,31)" fg:x="277" fg:w="4"/><text x="22.3393%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="22.1691%" y="709" width="0.2392%" height="15" fill="rgb(249,55,44)" fg:x="278" fg:w="3"/><text x="22.4191%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="22.2488%" y="693" width="0.1595%" height="15" fill="rgb(216,82,12)" fg:x="279" fg:w="2"/><text x="22.4988%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="22.2488%" y="677" width="0.1595%" height="15" fill="rgb(242,174,1)" fg:x="279" fg:w="2"/><text x="22.4988%" y="687.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="22.3285%" y="661" width="0.0797%" height="15" fill="rgb(208,120,29)" fg:x="280" fg:w="1"/><text x="22.5785%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.3285%" y="645" width="0.0797%" height="15" fill="rgb(221,105,43)" fg:x="280" fg:w="1"/><text x="22.5785%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="22.4083%" y="725" width="0.0797%" height="15" fill="rgb(234,124,22)" fg:x="281" fg:w="1"/><text x="22.6583%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="22.4083%" y="709" width="0.0797%" height="15" fill="rgb(212,23,30)" fg:x="281" fg:w="1"/><text x="22.6583%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="22.4083%" y="693" width="0.0797%" height="15" fill="rgb(219,122,53)" fg:x="281" fg:w="1"/><text x="22.6583%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="22.4083%" y="677" width="0.0797%" height="15" fill="rgb(248,84,24)" fg:x="281" fg:w="1"/><text x="22.6583%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="22.4083%" y="661" width="0.0797%" height="15" fill="rgb(245,115,18)" fg:x="281" fg:w="1"/><text x="22.6583%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="22.4083%" y="645" width="0.0797%" height="15" fill="rgb(227,176,51)" fg:x="281" fg:w="1"/><text x="22.6583%" y="655.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="22.4083%" y="629" width="0.0797%" height="15" fill="rgb(229,63,42)" fg:x="281" fg:w="1"/><text x="22.6583%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="22.4083%" y="613" width="0.0797%" height="15" fill="rgb(247,202,24)" fg:x="281" fg:w="1"/><text x="22.6583%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="22.5678%" y="693" width="0.0797%" height="15" fill="rgb(244,173,20)" fg:x="283" fg:w="1"/><text x="22.8178%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="22.7273%" y="661" width="0.0797%" height="15" fill="rgb(242,81,47)" fg:x="285" fg:w="1"/><text x="22.9773%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="22.7273%" y="645" width="0.0797%" height="15" fill="rgb(231,185,54)" fg:x="285" fg:w="1"/><text x="22.9773%" y="655.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="22.7273%" y="629" width="0.0797%" height="15" fill="rgb(243,55,32)" fg:x="285" fg:w="1"/><text x="22.9773%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="22.9665%" y="645" width="0.0797%" height="15" fill="rgb(208,167,19)" fg:x="288" fg:w="1"/><text x="23.2165%" y="655.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="22.9665%" y="629" width="0.0797%" height="15" fill="rgb(231,72,35)" fg:x="288" fg:w="1"/><text x="23.2165%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="22.9665%" y="613" width="0.0797%" height="15" fill="rgb(250,173,51)" fg:x="288" fg:w="1"/><text x="23.2165%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="22.9665%" y="597" width="0.0797%" height="15" fill="rgb(209,5,22)" fg:x="288" fg:w="1"/><text x="23.2165%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="22.9665%" y="581" width="0.0797%" height="15" fill="rgb(250,174,19)" fg:x="288" fg:w="1"/><text x="23.2165%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="22.9665%" y="565" width="0.0797%" height="15" fill="rgb(217,3,49)" fg:x="288" fg:w="1"/><text x="23.2165%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="22.9665%" y="549" width="0.0797%" height="15" fill="rgb(218,225,5)" fg:x="288" fg:w="1"/><text x="23.2165%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.9665%" y="533" width="0.0797%" height="15" fill="rgb(236,89,11)" fg:x="288" fg:w="1"/><text x="23.2165%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="23.0463%" y="613" width="0.3190%" height="15" fill="rgb(206,33,28)" fg:x="289" fg:w="4"/><text x="23.2963%" y="623.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="23.0463%" y="597" width="0.3190%" height="15" fill="rgb(241,56,42)" fg:x="289" fg:w="4"/><text x="23.2963%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="23.1260%" y="581" width="0.2392%" height="15" fill="rgb(222,44,11)" fg:x="290" fg:w="3"/><text x="23.3760%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="23.2057%" y="565" width="0.1595%" height="15" fill="rgb(234,111,20)" fg:x="291" fg:w="2"/><text x="23.4557%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="23.2057%" y="549" width="0.1595%" height="15" fill="rgb(237,77,6)" fg:x="291" fg:w="2"/><text x="23.4557%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="23.2057%" y="533" width="0.1595%" height="15" fill="rgb(235,111,23)" fg:x="291" fg:w="2"/><text x="23.4557%" y="543.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="23.2057%" y="517" width="0.1595%" height="15" fill="rgb(251,135,29)" fg:x="291" fg:w="2"/><text x="23.4557%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (6 samples, 0.48%)</title><rect x="23.0463%" y="629" width="0.4785%" height="15" fill="rgb(217,57,1)" fg:x="289" fg:w="6"/><text x="23.2963%" y="639.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="23.3652%" y="613" width="0.1595%" height="15" fill="rgb(249,119,31)" fg:x="293" fg:w="2"/><text x="23.6152%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="23.3652%" y="597" width="0.1595%" height="15" fill="rgb(233,164,33)" fg:x="293" fg:w="2"/><text x="23.6152%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="23.3652%" y="581" width="0.1595%" height="15" fill="rgb(250,217,43)" fg:x="293" fg:w="2"/><text x="23.6152%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="23.5247%" y="613" width="0.2392%" height="15" fill="rgb(232,154,50)" fg:x="295" fg:w="3"/><text x="23.7747%" y="623.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="23.5247%" y="597" width="0.2392%" height="15" fill="rgb(227,190,8)" fg:x="295" fg:w="3"/><text x="23.7747%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="23.6842%" y="581" width="0.0797%" height="15" fill="rgb(209,217,32)" fg:x="297" fg:w="1"/><text x="23.9342%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="23.6842%" y="565" width="0.0797%" height="15" fill="rgb(243,203,50)" fg:x="297" fg:w="1"/><text x="23.9342%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="23.7640%" y="597" width="0.0797%" height="15" fill="rgb(232,152,27)" fg:x="298" fg:w="1"/><text x="24.0140%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="23.7640%" y="581" width="0.0797%" height="15" fill="rgb(240,34,29)" fg:x="298" fg:w="1"/><text x="24.0140%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="23.7640%" y="565" width="0.0797%" height="15" fill="rgb(215,185,52)" fg:x="298" fg:w="1"/><text x="24.0140%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="23.7640%" y="549" width="0.0797%" height="15" fill="rgb(240,89,49)" fg:x="298" fg:w="1"/><text x="24.0140%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="23.7640%" y="533" width="0.0797%" height="15" fill="rgb(225,12,52)" fg:x="298" fg:w="1"/><text x="24.0140%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="23.7640%" y="517" width="0.0797%" height="15" fill="rgb(239,128,45)" fg:x="298" fg:w="1"/><text x="24.0140%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="23.7640%" y="501" width="0.0797%" height="15" fill="rgb(211,78,47)" fg:x="298" fg:w="1"/><text x="24.0140%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="24.0829%" y="549" width="0.0797%" height="15" fill="rgb(232,31,21)" fg:x="302" fg:w="1"/><text x="24.3329%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.40%)</title><rect x="23.8437%" y="597" width="0.3987%" height="15" fill="rgb(222,168,14)" fg:x="299" fg:w="5"/><text x="24.0937%" y="607.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="23.9234%" y="581" width="0.3190%" height="15" fill="rgb(209,128,24)" fg:x="300" fg:w="4"/><text x="24.1734%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="24.0032%" y="565" width="0.2392%" height="15" fill="rgb(249,35,13)" fg:x="301" fg:w="3"/><text x="24.2532%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="24.1627%" y="549" width="0.0797%" height="15" fill="rgb(218,7,2)" fg:x="303" fg:w="1"/><text x="24.4127%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="24.2424%" y="581" width="0.1595%" height="15" fill="rgb(238,107,27)" fg:x="304" fg:w="2"/><text x="24.4924%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="24.2424%" y="565" width="0.1595%" height="15" fill="rgb(217,88,38)" fg:x="304" fg:w="2"/><text x="24.4924%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="24.2424%" y="549" width="0.1595%" height="15" fill="rgb(230,207,0)" fg:x="304" fg:w="2"/><text x="24.4924%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="24.2424%" y="533" width="0.1595%" height="15" fill="rgb(249,64,54)" fg:x="304" fg:w="2"/><text x="24.4924%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="24.2424%" y="517" width="0.1595%" height="15" fill="rgb(231,7,11)" fg:x="304" fg:w="2"/><text x="24.4924%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="24.2424%" y="501" width="0.1595%" height="15" fill="rgb(205,149,21)" fg:x="304" fg:w="2"/><text x="24.4924%" y="511.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="24.2424%" y="485" width="0.1595%" height="15" fill="rgb(215,126,34)" fg:x="304" fg:w="2"/><text x="24.4924%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (8 samples, 0.64%)</title><rect x="24.4817%" y="565" width="0.6380%" height="15" fill="rgb(241,132,45)" fg:x="307" fg:w="8"/><text x="24.7317%" y="575.50"></text></g><g><title>std::io::Write::write_all (6 samples, 0.48%)</title><rect x="24.6411%" y="549" width="0.4785%" height="15" fill="rgb(252,69,32)" fg:x="309" fg:w="6"/><text x="24.8911%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.32%)</title><rect x="24.8006%" y="533" width="0.3190%" height="15" fill="rgb(232,204,19)" fg:x="311" fg:w="4"/><text x="25.0506%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.32%)</title><rect x="24.8006%" y="517" width="0.3190%" height="15" fill="rgb(249,15,47)" fg:x="311" fg:w="4"/><text x="25.0506%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="24.9601%" y="501" width="0.1595%" height="15" fill="rgb(209,227,23)" fg:x="313" fg:w="2"/><text x="25.2101%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="24.9601%" y="485" width="0.1595%" height="15" fill="rgb(248,92,24)" fg:x="313" fg:w="2"/><text x="25.2101%" y="495.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="24.9601%" y="469" width="0.1595%" height="15" fill="rgb(247,59,2)" fg:x="313" fg:w="2"/><text x="25.2101%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="25.1196%" y="549" width="0.1595%" height="15" fill="rgb(221,30,5)" fg:x="315" fg:w="2"/><text x="25.3696%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="25.1994%" y="533" width="0.0797%" height="15" fill="rgb(208,108,53)" fg:x="316" fg:w="1"/><text x="25.4494%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="25.1994%" y="517" width="0.0797%" height="15" fill="rgb(211,183,26)" fg:x="316" fg:w="1"/><text x="25.4494%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="25.1196%" y="565" width="0.2392%" height="15" fill="rgb(232,132,4)" fg:x="315" fg:w="3"/><text x="25.3696%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="25.2791%" y="549" width="0.0797%" height="15" fill="rgb(253,128,37)" fg:x="317" fg:w="1"/><text x="25.5291%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (13 samples, 1.04%)</title><rect x="24.4019%" y="581" width="1.0367%" height="15" fill="rgb(221,58,24)" fg:x="306" fg:w="13"/><text x="24.6519%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="25.3589%" y="565" width="0.0797%" height="15" fill="rgb(230,54,45)" fg:x="318" fg:w="1"/><text x="25.6089%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="25.3589%" y="549" width="0.0797%" height="15" fill="rgb(254,21,18)" fg:x="318" fg:w="1"/><text x="25.6089%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.3589%" y="533" width="0.0797%" height="15" fill="rgb(221,108,0)" fg:x="318" fg:w="1"/><text x="25.6089%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (16 samples, 1.28%)</title><rect x="24.2424%" y="597" width="1.2759%" height="15" fill="rgb(206,95,1)" fg:x="304" fg:w="16"/><text x="24.4924%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="25.4386%" y="581" width="0.0797%" height="15" fill="rgb(237,52,5)" fg:x="319" fg:w="1"/><text x="25.6886%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="25.4386%" y="565" width="0.0797%" height="15" fill="rgb(218,150,34)" fg:x="319" fg:w="1"/><text x="25.6886%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.4386%" y="549" width="0.0797%" height="15" fill="rgb(235,194,28)" fg:x="319" fg:w="1"/><text x="25.6886%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (32 samples, 2.55%)</title><rect x="23.0463%" y="645" width="2.5518%" height="15" fill="rgb(245,92,18)" fg:x="289" fg:w="32"/><text x="23.2963%" y="655.50">&lt;s..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (26 samples, 2.07%)</title><rect x="23.5247%" y="629" width="2.0734%" height="15" fill="rgb(253,203,53)" fg:x="295" fg:w="26"/><text x="23.7747%" y="639.50">s..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (23 samples, 1.83%)</title><rect x="23.7640%" y="613" width="1.8341%" height="15" fill="rgb(249,185,47)" fg:x="298" fg:w="23"/><text x="24.0140%" y="623.50">s..</text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="25.5183%" y="597" width="0.0797%" height="15" fill="rgb(252,194,52)" fg:x="320" fg:w="1"/><text x="25.7683%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="25.5183%" y="581" width="0.0797%" height="15" fill="rgb(210,53,36)" fg:x="320" fg:w="1"/><text x="25.7683%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.5183%" y="565" width="0.0797%" height="15" fill="rgb(237,37,25)" fg:x="320" fg:w="1"/><text x="25.7683%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.5981%" y="613" width="0.0797%" height="15" fill="rgb(242,116,27)" fg:x="321" fg:w="1"/><text x="25.8481%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.6778%" y="597" width="0.0797%" height="15" fill="rgb(213,185,26)" fg:x="322" fg:w="1"/><text x="25.9278%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="25.7576%" y="597" width="0.1595%" height="15" fill="rgb(225,204,8)" fg:x="323" fg:w="2"/><text x="26.0076%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.8373%" y="581" width="0.0797%" height="15" fill="rgb(254,111,37)" fg:x="324" fg:w="1"/><text x="26.0873%" y="591.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="26.0766%" y="581" width="0.1595%" height="15" fill="rgb(242,35,9)" fg:x="327" fg:w="2"/><text x="26.3266%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="26.2360%" y="565" width="0.0797%" height="15" fill="rgb(232,138,49)" fg:x="329" fg:w="1"/><text x="26.4860%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.2360%" y="549" width="0.0797%" height="15" fill="rgb(247,56,4)" fg:x="329" fg:w="1"/><text x="26.4860%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="26.3158%" y="565" width="0.0797%" height="15" fill="rgb(226,179,17)" fg:x="330" fg:w="1"/><text x="26.5658%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="26.3158%" y="549" width="0.0797%" height="15" fill="rgb(216,163,45)" fg:x="330" fg:w="1"/><text x="26.5658%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.3158%" y="533" width="0.0797%" height="15" fill="rgb(211,157,3)" fg:x="330" fg:w="1"/><text x="26.5658%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (11 samples, 0.88%)</title><rect x="25.5981%" y="645" width="0.8772%" height="15" fill="rgb(234,44,20)" fg:x="321" fg:w="11"/><text x="25.8481%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (11 samples, 0.88%)</title><rect x="25.5981%" y="629" width="0.8772%" height="15" fill="rgb(254,138,23)" fg:x="321" fg:w="11"/><text x="25.8481%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (10 samples, 0.80%)</title><rect x="25.6778%" y="613" width="0.7974%" height="15" fill="rgb(206,119,39)" fg:x="322" fg:w="10"/><text x="25.9278%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="25.9171%" y="597" width="0.5582%" height="15" fill="rgb(231,105,52)" fg:x="325" fg:w="7"/><text x="26.1671%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="26.2360%" y="581" width="0.2392%" height="15" fill="rgb(250,20,5)" fg:x="329" fg:w="3"/><text x="26.4860%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="26.3955%" y="565" width="0.0797%" height="15" fill="rgb(215,198,30)" fg:x="331" fg:w="1"/><text x="26.6455%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="26.4753%" y="581" width="0.1595%" height="15" fill="rgb(246,142,8)" fg:x="332" fg:w="2"/><text x="26.7253%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="26.6348%" y="581" width="0.0797%" height="15" fill="rgb(243,26,38)" fg:x="334" fg:w="1"/><text x="26.8848%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.6348%" y="565" width="0.0797%" height="15" fill="rgb(205,133,28)" fg:x="334" fg:w="1"/><text x="26.8848%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="26.7943%" y="565" width="0.1595%" height="15" fill="rgb(212,34,0)" fg:x="336" fg:w="2"/><text x="27.0443%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.9537%" y="549" width="0.0797%" height="15" fill="rgb(251,226,22)" fg:x="338" fg:w="1"/><text x="27.2037%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="27.0335%" y="549" width="0.0797%" height="15" fill="rgb(252,119,9)" fg:x="339" fg:w="1"/><text x="27.2835%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.0335%" y="533" width="0.0797%" height="15" fill="rgb(213,150,50)" fg:x="339" fg:w="1"/><text x="27.2835%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="27.1132%" y="549" width="0.1595%" height="15" fill="rgb(212,24,39)" fg:x="340" fg:w="2"/><text x="27.3632%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="27.1132%" y="533" width="0.1595%" height="15" fill="rgb(213,46,39)" fg:x="340" fg:w="2"/><text x="27.3632%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="27.1132%" y="517" width="0.1595%" height="15" fill="rgb(239,106,12)" fg:x="340" fg:w="2"/><text x="27.3632%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="27.1930%" y="501" width="0.0797%" height="15" fill="rgb(249,229,21)" fg:x="341" fg:w="1"/><text x="27.4430%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.96%)</title><rect x="26.4753%" y="613" width="0.9569%" height="15" fill="rgb(212,158,3)" fg:x="332" fg:w="12"/><text x="26.7253%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (12 samples, 0.96%)</title><rect x="26.4753%" y="597" width="0.9569%" height="15" fill="rgb(253,26,48)" fg:x="332" fg:w="12"/><text x="26.7253%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.72%)</title><rect x="26.7145%" y="581" width="0.7177%" height="15" fill="rgb(238,178,20)" fg:x="335" fg:w="9"/><text x="26.9645%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="26.9537%" y="565" width="0.4785%" height="15" fill="rgb(208,86,15)" fg:x="338" fg:w="6"/><text x="27.2037%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="27.2727%" y="549" width="0.1595%" height="15" fill="rgb(239,42,53)" fg:x="342" fg:w="2"/><text x="27.5227%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="27.3525%" y="533" width="0.0797%" height="15" fill="rgb(245,226,8)" fg:x="343" fg:w="1"/><text x="27.6025%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="27.4322%" y="613" width="0.0797%" height="15" fill="rgb(216,176,32)" fg:x="344" fg:w="1"/><text x="27.6822%" y="623.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPath as core::convert::From&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::from (1 samples, 0.08%)</title><rect x="27.4322%" y="597" width="0.0797%" height="15" fill="rgb(231,186,21)" fg:x="344" fg:w="1"/><text x="27.6822%" y="607.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPaths as core::convert::Into&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::into (1 samples, 0.08%)</title><rect x="27.5120%" y="613" width="0.0797%" height="15" fill="rgb(205,95,49)" fg:x="345" fg:w="1"/><text x="27.7620%" y="623.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="27.5120%" y="597" width="0.0797%" height="15" fill="rgb(217,145,8)" fg:x="345" fg:w="1"/><text x="27.7620%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="27.5120%" y="581" width="0.0797%" height="15" fill="rgb(239,144,48)" fg:x="345" fg:w="1"/><text x="27.7620%" y="591.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="27.5917%" y="613" width="0.0797%" height="15" fill="rgb(214,189,23)" fg:x="346" fg:w="1"/><text x="27.8417%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="27.5917%" y="597" width="0.0797%" height="15" fill="rgb(229,157,17)" fg:x="346" fg:w="1"/><text x="27.8417%" y="607.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="27.5917%" y="581" width="0.0797%" height="15" fill="rgb(230,5,48)" fg:x="346" fg:w="1"/><text x="27.8417%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="27.5917%" y="565" width="0.0797%" height="15" fill="rgb(224,156,48)" fg:x="346" fg:w="1"/><text x="27.8417%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="27.6715%" y="549" width="0.0797%" height="15" fill="rgb(223,14,29)" fg:x="347" fg:w="1"/><text x="27.9215%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="27.6715%" y="533" width="0.0797%" height="15" fill="rgb(229,96,36)" fg:x="347" fg:w="1"/><text x="27.9215%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="27.6715%" y="597" width="0.1595%" height="15" fill="rgb(231,102,53)" fg:x="347" fg:w="2"/><text x="27.9215%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="27.6715%" y="581" width="0.1595%" height="15" fill="rgb(210,77,38)" fg:x="347" fg:w="2"/><text x="27.9215%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="27.6715%" y="565" width="0.1595%" height="15" fill="rgb(235,131,6)" fg:x="347" fg:w="2"/><text x="27.9215%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="27.7512%" y="549" width="0.0797%" height="15" fill="rgb(252,55,38)" fg:x="348" fg:w="1"/><text x="28.0012%" y="559.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (18 samples, 1.44%)</title><rect x="26.4753%" y="629" width="1.4354%" height="15" fill="rgb(246,38,14)" fg:x="332" fg:w="18"/><text x="26.7253%" y="639.50"></text></g><g><title>treediff::diff::diff (3 samples, 0.24%)</title><rect x="27.6715%" y="613" width="0.2392%" height="15" fill="rgb(242,27,5)" fg:x="347" fg:w="3"/><text x="27.9215%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="27.8309%" y="597" width="0.0797%" height="15" fill="rgb(228,65,35)" fg:x="349" fg:w="1"/><text x="28.0809%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="27.8309%" y="581" width="0.0797%" height="15" fill="rgb(245,93,11)" fg:x="349" fg:w="1"/><text x="28.0809%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.8309%" y="565" width="0.0797%" height="15" fill="rgb(213,1,31)" fg:x="349" fg:w="1"/><text x="28.0809%" y="575.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="28.1499%" y="597" width="0.1595%" height="15" fill="rgb(237,205,14)" fg:x="353" fg:w="2"/><text x="28.3999%" y="607.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="28.3094%" y="597" width="0.0797%" height="15" fill="rgb(232,118,45)" fg:x="355" fg:w="1"/><text x="28.5594%" y="607.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="28.3094%" y="581" width="0.0797%" height="15" fill="rgb(218,5,6)" fg:x="355" fg:w="1"/><text x="28.5594%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.3892%" y="597" width="0.0797%" height="15" fill="rgb(251,87,51)" fg:x="356" fg:w="1"/><text x="28.6392%" y="607.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (3 samples, 0.24%)</title><rect x="28.4689%" y="597" width="0.2392%" height="15" fill="rgb(207,225,20)" fg:x="357" fg:w="3"/><text x="28.7189%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="28.5486%" y="581" width="0.1595%" height="15" fill="rgb(222,78,54)" fg:x="358" fg:w="2"/><text x="28.7986%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (3 samples, 0.24%)</title><rect x="28.7081%" y="597" width="0.2392%" height="15" fill="rgb(232,85,16)" fg:x="360" fg:w="3"/><text x="28.9581%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="28.7081%" y="581" width="0.2392%" height="15" fill="rgb(244,25,33)" fg:x="360" fg:w="3"/><text x="28.9581%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.8676%" y="565" width="0.0797%" height="15" fill="rgb(233,24,36)" fg:x="362" fg:w="1"/><text x="29.1176%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="29.1069%" y="565" width="0.1595%" height="15" fill="rgb(253,49,54)" fg:x="365" fg:w="2"/><text x="29.3569%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.2663%" y="533" width="0.0797%" height="15" fill="rgb(245,12,22)" fg:x="367" fg:w="1"/><text x="29.5163%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="29.2663%" y="549" width="0.1595%" height="15" fill="rgb(253,141,28)" fg:x="367" fg:w="2"/><text x="29.5163%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="29.3461%" y="533" width="0.0797%" height="15" fill="rgb(225,207,27)" fg:x="368" fg:w="1"/><text x="29.5961%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="29.5853%" y="517" width="0.0797%" height="15" fill="rgb(220,84,2)" fg:x="371" fg:w="1"/><text x="29.8353%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.6651%" y="501" width="0.0797%" height="15" fill="rgb(224,37,37)" fg:x="372" fg:w="1"/><text x="29.9151%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="29.6651%" y="517" width="0.1595%" height="15" fill="rgb(220,143,18)" fg:x="372" fg:w="2"/><text x="29.9151%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="29.7448%" y="501" width="0.0797%" height="15" fill="rgb(210,88,33)" fg:x="373" fg:w="1"/><text x="29.9948%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.7448%" y="485" width="0.0797%" height="15" fill="rgb(219,87,51)" fg:x="373" fg:w="1"/><text x="29.9948%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (6 samples, 0.48%)</title><rect x="29.4258%" y="549" width="0.4785%" height="15" fill="rgb(211,7,35)" fg:x="369" fg:w="6"/><text x="29.6758%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.48%)</title><rect x="29.4258%" y="533" width="0.4785%" height="15" fill="rgb(232,77,2)" fg:x="369" fg:w="6"/><text x="29.6758%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.8246%" y="517" width="0.0797%" height="15" fill="rgb(249,94,25)" fg:x="374" fg:w="1"/><text x="30.0746%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="30.0638%" y="517" width="0.1595%" height="15" fill="rgb(215,112,2)" fg:x="377" fg:w="2"/><text x="30.3138%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="30.4625%" y="501" width="0.0797%" height="15" fill="rgb(226,115,48)" fg:x="382" fg:w="1"/><text x="30.7125%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.4625%" y="485" width="0.0797%" height="15" fill="rgb(249,196,10)" fg:x="382" fg:w="1"/><text x="30.7125%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.64%)</title><rect x="30.0638%" y="533" width="0.6380%" height="15" fill="rgb(237,109,14)" fg:x="377" fg:w="8"/><text x="30.3138%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.48%)</title><rect x="30.2233%" y="517" width="0.4785%" height="15" fill="rgb(217,103,53)" fg:x="379" fg:w="6"/><text x="30.4733%" y="527.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="30.5423%" y="501" width="0.1595%" height="15" fill="rgb(244,137,9)" fg:x="383" fg:w="2"/><text x="30.7923%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (19 samples, 1.52%)</title><rect x="29.2663%" y="565" width="1.5152%" height="15" fill="rgb(227,201,3)" fg:x="367" fg:w="19"/><text x="29.5163%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (11 samples, 0.88%)</title><rect x="29.9043%" y="549" width="0.8772%" height="15" fill="rgb(243,94,6)" fg:x="375" fg:w="11"/><text x="30.1543%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.7018%" y="533" width="0.0797%" height="15" fill="rgb(235,118,5)" fg:x="385" fg:w="1"/><text x="30.9518%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (26 samples, 2.07%)</title><rect x="29.0271%" y="581" width="2.0734%" height="15" fill="rgb(247,10,30)" fg:x="364" fg:w="26"/><text x="29.2771%" y="591.50">&lt;..</text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.32%)</title><rect x="30.7815%" y="565" width="0.3190%" height="15" fill="rgb(205,26,28)" fg:x="386" fg:w="4"/><text x="31.0315%" y="575.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="30.9410%" y="549" width="0.1595%" height="15" fill="rgb(206,99,35)" fg:x="388" fg:w="2"/><text x="31.1910%" y="559.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="31.1005%" y="581" width="0.2392%" height="15" fill="rgb(238,130,40)" fg:x="390" fg:w="3"/><text x="31.3505%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (44 samples, 3.51%)</title><rect x="27.9107%" y="629" width="3.5088%" height="15" fill="rgb(224,126,31)" fg:x="350" fg:w="44"/><text x="28.1607%" y="639.50">ker..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (43 samples, 3.43%)</title><rect x="27.9904%" y="613" width="3.4290%" height="15" fill="rgb(254,105,17)" fg:x="351" fg:w="43"/><text x="28.2404%" y="623.50">&lt;se..</text></g><g><title>serde::ser::Serializer::collect_map (31 samples, 2.47%)</title><rect x="28.9474%" y="597" width="2.4721%" height="15" fill="rgb(216,87,36)" fg:x="363" fg:w="31"/><text x="29.1974%" y="607.50">se..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.3397%" y="581" width="0.0797%" height="15" fill="rgb(240,21,12)" fg:x="393" fg:w="1"/><text x="31.5897%" y="591.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="31.7384%" y="437" width="0.0797%" height="15" fill="rgb(245,192,34)" fg:x="398" fg:w="1"/><text x="31.9884%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="31.8182%" y="437" width="0.0797%" height="15" fill="rgb(226,100,49)" fg:x="399" fg:w="1"/><text x="32.0682%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.8182%" y="421" width="0.0797%" height="15" fill="rgb(245,188,27)" fg:x="399" fg:w="1"/><text x="32.0682%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.8182%" y="405" width="0.0797%" height="15" fill="rgb(212,170,8)" fg:x="399" fg:w="1"/><text x="32.0682%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.8182%" y="389" width="0.0797%" height="15" fill="rgb(217,113,29)" fg:x="399" fg:w="1"/><text x="32.0682%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="31.7384%" y="485" width="0.2392%" height="15" fill="rgb(237,30,3)" fg:x="398" fg:w="3"/><text x="31.9884%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="31.7384%" y="469" width="0.2392%" height="15" fill="rgb(227,19,28)" fg:x="398" fg:w="3"/><text x="31.9884%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="31.7384%" y="453" width="0.2392%" height="15" fill="rgb(239,172,45)" fg:x="398" fg:w="3"/><text x="31.9884%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.8979%" y="437" width="0.0797%" height="15" fill="rgb(254,55,39)" fg:x="400" fg:w="1"/><text x="32.1479%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="32.0574%" y="437" width="0.0797%" height="15" fill="rgb(249,208,12)" fg:x="402" fg:w="1"/><text x="32.3074%" y="447.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="32.0574%" y="421" width="0.0797%" height="15" fill="rgb(240,52,13)" fg:x="402" fg:w="1"/><text x="32.3074%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="31.9777%" y="469" width="0.2392%" height="15" fill="rgb(252,149,13)" fg:x="401" fg:w="3"/><text x="32.2277%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="31.9777%" y="453" width="0.2392%" height="15" fill="rgb(232,81,48)" fg:x="401" fg:w="3"/><text x="32.2277%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="32.1372%" y="437" width="0.0797%" height="15" fill="rgb(222,144,2)" fg:x="403" fg:w="1"/><text x="32.3872%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.1372%" y="421" width="0.0797%" height="15" fill="rgb(216,81,32)" fg:x="403" fg:w="1"/><text x="32.3872%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.24%)</title><rect x="32.2169%" y="469" width="0.2392%" height="15" fill="rgb(244,78,51)" fg:x="404" fg:w="3"/><text x="32.4669%" y="479.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="32.2967%" y="453" width="0.1595%" height="15" fill="rgb(217,66,21)" fg:x="405" fg:w="2"/><text x="32.5467%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.80%)</title><rect x="31.7384%" y="501" width="0.7974%" height="15" fill="rgb(247,101,42)" fg:x="398" fg:w="10"/><text x="31.9884%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="31.9777%" y="485" width="0.5582%" height="15" fill="rgb(227,81,39)" fg:x="401" fg:w="7"/><text x="32.2277%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.4561%" y="469" width="0.0797%" height="15" fill="rgb(220,223,44)" fg:x="407" fg:w="1"/><text x="32.7061%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.4561%" y="453" width="0.0797%" height="15" fill="rgb(205,218,2)" fg:x="407" fg:w="1"/><text x="32.7061%" y="463.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="32.4561%" y="437" width="0.0797%" height="15" fill="rgb(212,207,28)" fg:x="407" fg:w="1"/><text x="32.7061%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="32.5359%" y="501" width="0.1595%" height="15" fill="rgb(224,12,41)" fg:x="408" fg:w="2"/><text x="32.7859%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.6156%" y="485" width="0.0797%" height="15" fill="rgb(216,118,12)" fg:x="409" fg:w="1"/><text x="32.8656%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (15 samples, 1.20%)</title><rect x="31.6587%" y="533" width="1.1962%" height="15" fill="rgb(252,97,46)" fg:x="397" fg:w="15"/><text x="31.9087%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (14 samples, 1.12%)</title><rect x="31.7384%" y="517" width="1.1164%" height="15" fill="rgb(244,206,19)" fg:x="398" fg:w="14"/><text x="31.9884%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="32.6954%" y="501" width="0.1595%" height="15" fill="rgb(231,84,31)" fg:x="410" fg:w="2"/><text x="32.9454%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="32.6954%" y="485" width="0.1595%" height="15" fill="rgb(244,133,0)" fg:x="410" fg:w="2"/><text x="32.9454%" y="495.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="32.6954%" y="469" width="0.1595%" height="15" fill="rgb(223,15,50)" fg:x="410" fg:w="2"/><text x="32.9454%" y="479.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="32.9346%" y="517" width="0.0797%" height="15" fill="rgb(250,118,49)" fg:x="413" fg:w="1"/><text x="33.1846%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.24%)</title><rect x="32.8549%" y="533" width="0.2392%" height="15" fill="rgb(248,25,38)" fg:x="412" fg:w="3"/><text x="33.1049%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.0144%" y="517" width="0.0797%" height="15" fill="rgb(215,70,14)" fg:x="414" fg:w="1"/><text x="33.2644%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (23 samples, 1.83%)</title><rect x="31.4992%" y="565" width="1.8341%" height="15" fill="rgb(215,28,15)" fg:x="395" fg:w="23"/><text x="31.7492%" y="575.50">&lt;..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (23 samples, 1.83%)</title><rect x="31.4992%" y="549" width="1.8341%" height="15" fill="rgb(243,6,28)" fg:x="395" fg:w="23"/><text x="31.7492%" y="559.50">&lt;..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="33.0941%" y="533" width="0.2392%" height="15" fill="rgb(222,130,1)" fg:x="415" fg:w="3"/><text x="33.3441%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="33.0941%" y="517" width="0.2392%" height="15" fill="rgb(236,166,44)" fg:x="415" fg:w="3"/><text x="33.3441%" y="527.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="33.1738%" y="501" width="0.1595%" height="15" fill="rgb(221,108,14)" fg:x="416" fg:w="2"/><text x="33.4238%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="33.3333%" y="565" width="0.0797%" height="15" fill="rgb(252,3,45)" fg:x="418" fg:w="1"/><text x="33.5833%" y="575.50"></text></g><g><title>engine::session::state::State::close (138 samples, 11.00%)</title><rect x="22.4880%" y="725" width="11.0048%" height="15" fill="rgb(237,68,30)" fg:x="282" fg:w="138"/><text x="22.7380%" y="735.50">engine::session:..</text></g><g><title>engine::session::state::State::flush_entities (138 samples, 11.00%)</title><rect x="22.4880%" y="709" width="11.0048%" height="15" fill="rgb(211,79,22)" fg:x="282" fg:w="138"/><text x="22.7380%" y="719.50">engine::session:..</text></g><g><title>core::iter::adapters::try_process (136 samples, 10.85%)</title><rect x="22.6475%" y="693" width="10.8453%" height="15" fill="rgb(252,185,21)" fg:x="284" fg:w="136"/><text x="22.8975%" y="703.50">core::iter::adap..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (136 samples, 10.85%)</title><rect x="22.6475%" y="677" width="10.8453%" height="15" fill="rgb(225,189,26)" fg:x="284" fg:w="136"/><text x="22.8975%" y="687.50">&lt;alloc::vec::Vec..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (134 samples, 10.69%)</title><rect x="22.8070%" y="661" width="10.6858%" height="15" fill="rgb(241,30,40)" fg:x="286" fg:w="134"/><text x="23.0570%" y="671.50">engine::session:..</text></g><g><title>kernel::model::any_entity_changes (88 samples, 7.02%)</title><rect x="26.4753%" y="645" width="7.0175%" height="15" fill="rgb(235,215,44)" fg:x="332" fg:w="88"/><text x="26.7253%" y="655.50">kernel::m..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (26 samples, 2.07%)</title><rect x="31.4195%" y="629" width="2.0734%" height="15" fill="rgb(205,8,29)" fg:x="394" fg:w="26"/><text x="31.6695%" y="639.50">s..</text></g><g><title>serde_json::de::from_trait (26 samples, 2.07%)</title><rect x="31.4195%" y="613" width="2.0734%" height="15" fill="rgb(241,137,42)" fg:x="394" fg:w="26"/><text x="31.6695%" y="623.50">s..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (26 samples, 2.07%)</title><rect x="31.4195%" y="597" width="2.0734%" height="15" fill="rgb(237,155,2)" fg:x="394" fg:w="26"/><text x="31.6695%" y="607.50">&lt;..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (25 samples, 1.99%)</title><rect x="31.4992%" y="581" width="1.9936%" height="15" fill="rgb(245,29,42)" fg:x="395" fg:w="25"/><text x="31.7492%" y="591.50">&lt;..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="33.4131%" y="565" width="0.0797%" height="15" fill="rgb(234,101,35)" fg:x="419" fg:w="1"/><text x="33.6631%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="33.4131%" y="549" width="0.0797%" height="15" fill="rgb(228,64,37)" fg:x="419" fg:w="1"/><text x="33.6631%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="33.4131%" y="533" width="0.0797%" height="15" fill="rgb(217,214,36)" fg:x="419" fg:w="1"/><text x="33.6631%" y="543.50"></text></g><g><title>engine::session::Session::close (140 samples, 11.16%)</title><rect x="22.4083%" y="741" width="11.1643%" height="15" fill="rgb(243,70,3)" fg:x="281" fg:w="140"/><text x="22.6583%" y="751.50">engine::session:..</text></g><g><title>kernel::plugins::SessionPlugins::stop (1 samples, 0.08%)</title><rect x="33.4928%" y="725" width="0.0797%" height="15" fill="rgb(253,158,52)" fg:x="420" fg:w="1"/><text x="33.7428%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="33.5726%" y="693" width="0.0797%" height="15" fill="rgb(234,111,54)" fg:x="421" fg:w="1"/><text x="33.8226%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="33.5726%" y="677" width="0.0797%" height="15" fill="rgb(217,70,32)" fg:x="421" fg:w="1"/><text x="33.8226%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="33.5726%" y="661" width="0.0797%" height="15" fill="rgb(234,18,33)" fg:x="421" fg:w="1"/><text x="33.8226%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="33.5726%" y="645" width="0.0797%" height="15" fill="rgb(234,12,49)" fg:x="421" fg:w="1"/><text x="33.8226%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="33.5726%" y="629" width="0.0797%" height="15" fill="rgb(236,10,21)" fg:x="421" fg:w="1"/><text x="33.8226%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="33.5726%" y="613" width="0.0797%" height="15" fill="rgb(248,182,45)" fg:x="421" fg:w="1"/><text x="33.8226%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="33.5726%" y="597" width="0.0797%" height="15" fill="rgb(217,95,36)" fg:x="421" fg:w="1"/><text x="33.8226%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="33.5726%" y="581" width="0.0797%" height="15" fill="rgb(212,110,31)" fg:x="421" fg:w="1"/><text x="33.8226%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="33.5726%" y="565" width="0.0797%" height="15" fill="rgb(206,32,53)" fg:x="421" fg:w="1"/><text x="33.8226%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="33.5726%" y="549" width="0.0797%" height="15" fill="rgb(246,141,37)" fg:x="421" fg:w="1"/><text x="33.8226%" y="559.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="33.5726%" y="533" width="0.0797%" height="15" fill="rgb(219,16,7)" fg:x="421" fg:w="1"/><text x="33.8226%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.5726%" y="517" width="0.0797%" height="15" fill="rgb(230,205,45)" fg:x="421" fg:w="1"/><text x="33.8226%" y="527.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="33.6523%" y="693" width="0.0797%" height="15" fill="rgb(231,43,49)" fg:x="422" fg:w="1"/><text x="33.9023%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="33.6523%" y="677" width="0.0797%" height="15" fill="rgb(212,106,34)" fg:x="422" fg:w="1"/><text x="33.9023%" y="687.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="33.6523%" y="661" width="0.0797%" height="15" fill="rgb(206,83,17)" fg:x="422" fg:w="1"/><text x="33.9023%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="33.6523%" y="645" width="0.0797%" height="15" fill="rgb(244,154,49)" fg:x="422" fg:w="1"/><text x="33.9023%" y="655.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="33.6523%" y="629" width="0.0797%" height="15" fill="rgb(244,149,49)" fg:x="422" fg:w="1"/><text x="33.9023%" y="639.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (1 samples, 0.08%)</title><rect x="33.6523%" y="613" width="0.0797%" height="15" fill="rgb(227,134,18)" fg:x="422" fg:w="1"/><text x="33.9023%" y="623.50"></text></g><g><title>core::fmt::builders::debug_struct_new (1 samples, 0.08%)</title><rect x="33.6523%" y="597" width="0.0797%" height="15" fill="rgb(237,116,36)" fg:x="422" fg:w="1"/><text x="33.9023%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="33.6523%" y="581" width="0.0797%" height="15" fill="rgb(205,129,40)" fg:x="422" fg:w="1"/><text x="33.9023%" y="591.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="33.6523%" y="565" width="0.0797%" height="15" fill="rgb(236,178,4)" fg:x="422" fg:w="1"/><text x="33.9023%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="33.6523%" y="549" width="0.0797%" height="15" fill="rgb(251,76,53)" fg:x="422" fg:w="1"/><text x="33.9023%" y="559.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="33.6523%" y="533" width="0.0797%" height="15" fill="rgb(242,92,40)" fg:x="422" fg:w="1"/><text x="33.9023%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="33.6523%" y="517" width="0.0797%" height="15" fill="rgb(209,45,30)" fg:x="422" fg:w="1"/><text x="33.9023%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="33.6523%" y="501" width="0.0797%" height="15" fill="rgb(218,157,36)" fg:x="422" fg:w="1"/><text x="33.9023%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="33.6523%" y="485" width="0.0797%" height="15" fill="rgb(222,186,16)" fg:x="422" fg:w="1"/><text x="33.9023%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="33.6523%" y="469" width="0.0797%" height="15" fill="rgb(254,72,35)" fg:x="422" fg:w="1"/><text x="33.9023%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="33.6523%" y="453" width="0.0797%" height="15" fill="rgb(224,25,35)" fg:x="422" fg:w="1"/><text x="33.9023%" y="463.50"></text></g><g><title>chrono::offset::utc::Utc::now (1 samples, 0.08%)</title><rect x="33.7321%" y="677" width="0.0797%" height="15" fill="rgb(206,135,52)" fg:x="423" fg:w="1"/><text x="33.9821%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="33.7321%" y="661" width="0.0797%" height="15" fill="rgb(229,174,47)" fg:x="423" fg:w="1"/><text x="33.9821%" y="671.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="33.7321%" y="645" width="0.0797%" height="15" fill="rgb(242,184,21)" fg:x="423" fg:w="1"/><text x="33.9821%" y="655.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (1 samples, 0.08%)</title><rect x="33.8118%" y="645" width="0.0797%" height="15" fill="rgb(213,22,45)" fg:x="424" fg:w="1"/><text x="34.0618%" y="655.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (2 samples, 0.16%)</title><rect x="33.8118%" y="677" width="0.1595%" height="15" fill="rgb(237,81,54)" fg:x="424" fg:w="2"/><text x="34.0618%" y="687.50"></text></g><g><title>tracing_core::callsite::register_dispatch (2 samples, 0.16%)</title><rect x="33.8118%" y="661" width="0.1595%" height="15" fill="rgb(248,177,18)" fg:x="424" fg:w="2"/><text x="34.0618%" y="671.50"></text></g><g><title>tracing_core::callsite::dispatchers::Dispatchers::register_dispatch (1 samples, 0.08%)</title><rect x="33.8915%" y="645" width="0.0797%" height="15" fill="rgb(254,31,16)" fg:x="425" fg:w="1"/><text x="34.1415%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (1 samples, 0.08%)</title><rect x="33.8915%" y="629" width="0.0797%" height="15" fill="rgb(235,20,31)" fg:x="425" fg:w="1"/><text x="34.1415%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="34.2105%" y="565" width="0.1595%" height="15" fill="rgb(240,56,43)" fg:x="429" fg:w="2"/><text x="34.4605%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="34.2105%" y="549" width="0.1595%" height="15" fill="rgb(237,197,51)" fg:x="429" fg:w="2"/><text x="34.4605%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="34.2105%" y="533" width="0.1595%" height="15" fill="rgb(241,162,44)" fg:x="429" fg:w="2"/><text x="34.4605%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="34.2105%" y="517" width="0.1595%" height="15" fill="rgb(224,23,20)" fg:x="429" fg:w="2"/><text x="34.4605%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="34.2105%" y="501" width="0.1595%" height="15" fill="rgb(250,109,34)" fg:x="429" fg:w="2"/><text x="34.4605%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="34.5295%" y="469" width="0.1595%" height="15" fill="rgb(214,175,50)" fg:x="433" fg:w="2"/><text x="34.7795%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="34.5295%" y="453" width="0.1595%" height="15" fill="rgb(213,182,5)" fg:x="433" fg:w="2"/><text x="34.7795%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="34.5295%" y="437" width="0.1595%" height="15" fill="rgb(209,199,19)" fg:x="433" fg:w="2"/><text x="34.7795%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="34.5295%" y="421" width="0.1595%" height="15" fill="rgb(236,224,42)" fg:x="433" fg:w="2"/><text x="34.7795%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="34.6093%" y="405" width="0.0797%" height="15" fill="rgb(246,226,29)" fg:x="434" fg:w="1"/><text x="34.8593%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="34.6093%" y="389" width="0.0797%" height="15" fill="rgb(227,223,11)" fg:x="434" fg:w="1"/><text x="34.8593%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="34.6093%" y="373" width="0.0797%" height="15" fill="rgb(219,7,51)" fg:x="434" fg:w="1"/><text x="34.8593%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="34.6093%" y="357" width="0.0797%" height="15" fill="rgb(245,167,10)" fg:x="434" fg:w="1"/><text x="34.8593%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="34.6093%" y="341" width="0.0797%" height="15" fill="rgb(237,224,16)" fg:x="434" fg:w="1"/><text x="34.8593%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="34.6093%" y="325" width="0.0797%" height="15" fill="rgb(226,132,13)" fg:x="434" fg:w="1"/><text x="34.8593%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="34.6093%" y="309" width="0.0797%" height="15" fill="rgb(214,140,3)" fg:x="434" fg:w="1"/><text x="34.8593%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="34.5295%" y="501" width="0.2392%" height="15" fill="rgb(221,177,4)" fg:x="433" fg:w="3"/><text x="34.7795%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="34.5295%" y="485" width="0.2392%" height="15" fill="rgb(238,139,3)" fg:x="433" fg:w="3"/><text x="34.7795%" y="495.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="34.6890%" y="469" width="0.0797%" height="15" fill="rgb(216,17,39)" fg:x="435" fg:w="1"/><text x="34.9390%" y="479.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="34.6890%" y="453" width="0.0797%" height="15" fill="rgb(238,120,9)" fg:x="435" fg:w="1"/><text x="34.9390%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="34.7687%" y="501" width="0.0797%" height="15" fill="rgb(244,92,53)" fg:x="436" fg:w="1"/><text x="35.0187%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="34.7687%" y="485" width="0.0797%" height="15" fill="rgb(224,148,33)" fg:x="436" fg:w="1"/><text x="35.0187%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="34.7687%" y="469" width="0.0797%" height="15" fill="rgb(243,6,36)" fg:x="436" fg:w="1"/><text x="35.0187%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="34.7687%" y="453" width="0.0797%" height="15" fill="rgb(230,102,11)" fg:x="436" fg:w="1"/><text x="35.0187%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="34.7687%" y="437" width="0.0797%" height="15" fill="rgb(234,148,36)" fg:x="436" fg:w="1"/><text x="35.0187%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="34.7687%" y="421" width="0.0797%" height="15" fill="rgb(251,153,25)" fg:x="436" fg:w="1"/><text x="35.0187%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="34.7687%" y="405" width="0.0797%" height="15" fill="rgb(215,129,8)" fg:x="436" fg:w="1"/><text x="35.0187%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="34.9282%" y="453" width="0.1595%" height="15" fill="rgb(224,128,35)" fg:x="438" fg:w="2"/><text x="35.1782%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="35.0080%" y="437" width="0.0797%" height="15" fill="rgb(237,56,52)" fg:x="439" fg:w="1"/><text x="35.2580%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="35.0080%" y="421" width="0.0797%" height="15" fill="rgb(234,213,19)" fg:x="439" fg:w="1"/><text x="35.2580%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="35.0080%" y="405" width="0.0797%" height="15" fill="rgb(252,82,23)" fg:x="439" fg:w="1"/><text x="35.2580%" y="415.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="34.8485%" y="501" width="0.3190%" height="15" fill="rgb(254,201,21)" fg:x="437" fg:w="4"/><text x="35.0985%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="34.8485%" y="485" width="0.3190%" height="15" fill="rgb(250,186,11)" fg:x="437" fg:w="4"/><text x="35.0985%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="34.8485%" y="469" width="0.3190%" height="15" fill="rgb(211,174,5)" fg:x="437" fg:w="4"/><text x="35.0985%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="35.0877%" y="453" width="0.0797%" height="15" fill="rgb(214,121,10)" fg:x="440" fg:w="1"/><text x="35.3377%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="35.0877%" y="437" width="0.0797%" height="15" fill="rgb(241,66,2)" fg:x="440" fg:w="1"/><text x="35.3377%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="35.1675%" y="373" width="0.0797%" height="15" fill="rgb(220,167,19)" fg:x="441" fg:w="1"/><text x="35.4175%" y="383.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (15 samples, 1.20%)</title><rect x="34.1308%" y="581" width="1.1962%" height="15" fill="rgb(231,54,50)" fg:x="428" fg:w="15"/><text x="34.3808%" y="591.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (12 samples, 0.96%)</title><rect x="34.3700%" y="565" width="0.9569%" height="15" fill="rgb(239,217,53)" fg:x="431" fg:w="12"/><text x="34.6200%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (12 samples, 0.96%)</title><rect x="34.3700%" y="549" width="0.9569%" height="15" fill="rgb(248,8,0)" fg:x="431" fg:w="12"/><text x="34.6200%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (12 samples, 0.96%)</title><rect x="34.3700%" y="533" width="0.9569%" height="15" fill="rgb(229,118,37)" fg:x="431" fg:w="12"/><text x="34.6200%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (10 samples, 0.80%)</title><rect x="34.5295%" y="517" width="0.7974%" height="15" fill="rgb(253,223,43)" fg:x="433" fg:w="10"/><text x="34.7795%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="35.1675%" y="501" width="0.1595%" height="15" fill="rgb(211,77,36)" fg:x="441" fg:w="2"/><text x="35.4175%" y="511.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="35.1675%" y="485" width="0.1595%" height="15" fill="rgb(219,3,53)" fg:x="441" fg:w="2"/><text x="35.4175%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="35.1675%" y="469" width="0.1595%" height="15" fill="rgb(244,45,42)" fg:x="441" fg:w="2"/><text x="35.4175%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="35.1675%" y="453" width="0.1595%" height="15" fill="rgb(225,95,27)" fg:x="441" fg:w="2"/><text x="35.4175%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="35.1675%" y="437" width="0.1595%" height="15" fill="rgb(207,74,8)" fg:x="441" fg:w="2"/><text x="35.4175%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="35.1675%" y="421" width="0.1595%" height="15" fill="rgb(243,63,36)" fg:x="441" fg:w="2"/><text x="35.4175%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="35.1675%" y="405" width="0.1595%" height="15" fill="rgb(211,180,12)" fg:x="441" fg:w="2"/><text x="35.4175%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="35.1675%" y="389" width="0.1595%" height="15" fill="rgb(254,166,49)" fg:x="441" fg:w="2"/><text x="35.4175%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="35.2472%" y="373" width="0.0797%" height="15" fill="rgb(205,19,0)" fg:x="442" fg:w="1"/><text x="35.4972%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="35.2472%" y="357" width="0.0797%" height="15" fill="rgb(224,172,32)" fg:x="442" fg:w="1"/><text x="35.4972%" y="367.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (16 samples, 1.28%)</title><rect x="34.1308%" y="597" width="1.2759%" height="15" fill="rgb(254,136,30)" fg:x="428" fg:w="16"/><text x="34.3808%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="35.3270%" y="581" width="0.0797%" height="15" fill="rgb(246,19,35)" fg:x="443" fg:w="1"/><text x="35.5770%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="35.6459%" y="357" width="0.0797%" height="15" fill="rgb(219,24,36)" fg:x="447" fg:w="1"/><text x="35.8959%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="35.6459%" y="341" width="0.0797%" height="15" fill="rgb(251,55,1)" fg:x="447" fg:w="1"/><text x="35.8959%" y="351.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="35.6459%" y="325" width="0.0797%" height="15" fill="rgb(218,117,39)" fg:x="447" fg:w="1"/><text x="35.8959%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.8054%" y="325" width="0.0797%" height="15" fill="rgb(248,169,11)" fg:x="449" fg:w="1"/><text x="36.0554%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (4 samples, 0.32%)</title><rect x="35.7257%" y="357" width="0.3190%" height="15" fill="rgb(244,40,44)" fg:x="448" fg:w="4"/><text x="35.9757%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="35.8054%" y="341" width="0.2392%" height="15" fill="rgb(234,62,37)" fg:x="449" fg:w="3"/><text x="36.0554%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="35.8852%" y="325" width="0.1595%" height="15" fill="rgb(207,117,42)" fg:x="450" fg:w="2"/><text x="36.1352%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="35.9649%" y="309" width="0.0797%" height="15" fill="rgb(213,43,2)" fg:x="451" fg:w="1"/><text x="36.2149%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="36.0447%" y="341" width="0.0797%" height="15" fill="rgb(244,202,51)" fg:x="452" fg:w="1"/><text x="36.2947%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.0447%" y="325" width="0.0797%" height="15" fill="rgb(253,174,46)" fg:x="452" fg:w="1"/><text x="36.2947%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="36.1244%" y="341" width="0.0797%" height="15" fill="rgb(251,23,1)" fg:x="453" fg:w="1"/><text x="36.3744%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="36.1244%" y="325" width="0.0797%" height="15" fill="rgb(253,26,1)" fg:x="453" fg:w="1"/><text x="36.3744%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="36.1244%" y="309" width="0.0797%" height="15" fill="rgb(216,89,31)" fg:x="453" fg:w="1"/><text x="36.3744%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="36.1244%" y="293" width="0.0797%" height="15" fill="rgb(209,109,5)" fg:x="453" fg:w="1"/><text x="36.3744%" y="303.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="36.1244%" y="277" width="0.0797%" height="15" fill="rgb(229,63,13)" fg:x="453" fg:w="1"/><text x="36.3744%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.2041%" y="309" width="0.0797%" height="15" fill="rgb(238,137,54)" fg:x="454" fg:w="1"/><text x="36.4541%" y="319.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="36.2839%" y="309" width="0.0797%" height="15" fill="rgb(228,1,9)" fg:x="455" fg:w="1"/><text x="36.5339%" y="319.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (10 samples, 0.80%)</title><rect x="35.6459%" y="389" width="0.7974%" height="15" fill="rgb(249,120,48)" fg:x="447" fg:w="10"/><text x="35.8959%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.80%)</title><rect x="35.6459%" y="373" width="0.7974%" height="15" fill="rgb(209,72,36)" fg:x="447" fg:w="10"/><text x="35.8959%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (5 samples, 0.40%)</title><rect x="36.0447%" y="357" width="0.3987%" height="15" fill="rgb(247,98,49)" fg:x="452" fg:w="5"/><text x="36.2947%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (3 samples, 0.24%)</title><rect x="36.2041%" y="341" width="0.2392%" height="15" fill="rgb(233,75,36)" fg:x="454" fg:w="3"/><text x="36.4541%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (3 samples, 0.24%)</title><rect x="36.2041%" y="325" width="0.2392%" height="15" fill="rgb(225,14,24)" fg:x="454" fg:w="3"/><text x="36.4541%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="36.3636%" y="309" width="0.0797%" height="15" fill="rgb(237,193,20)" fg:x="456" fg:w="1"/><text x="36.6136%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="36.3636%" y="293" width="0.0797%" height="15" fill="rgb(239,122,19)" fg:x="456" fg:w="1"/><text x="36.6136%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.3636%" y="277" width="0.0797%" height="15" fill="rgb(231,220,10)" fg:x="456" fg:w="1"/><text x="36.6136%" y="287.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (12 samples, 0.96%)</title><rect x="35.6459%" y="405" width="0.9569%" height="15" fill="rgb(220,66,15)" fg:x="447" fg:w="12"/><text x="35.8959%" y="415.50"></text></g><g><title>replies::identifier_to_key (2 samples, 0.16%)</title><rect x="36.4434%" y="389" width="0.1595%" height="15" fill="rgb(215,171,52)" fg:x="457" fg:w="2"/><text x="36.6934%" y="399.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (13 samples, 1.04%)</title><rect x="35.6459%" y="421" width="1.0367%" height="15" fill="rgb(241,169,50)" fg:x="447" fg:w="13"/><text x="35.8959%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="36.6029%" y="405" width="0.0797%" height="15" fill="rgb(236,189,0)" fg:x="459" fg:w="1"/><text x="36.8529%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="36.6029%" y="389" width="0.0797%" height="15" fill="rgb(217,147,20)" fg:x="459" fg:w="1"/><text x="36.8529%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.6029%" y="373" width="0.0797%" height="15" fill="rgb(206,188,39)" fg:x="459" fg:w="1"/><text x="36.8529%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="36.9219%" y="341" width="0.0797%" height="15" fill="rgb(227,118,25)" fg:x="463" fg:w="1"/><text x="37.1719%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="36.9219%" y="325" width="0.0797%" height="15" fill="rgb(248,171,40)" fg:x="463" fg:w="1"/><text x="37.1719%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="36.9219%" y="309" width="0.0797%" height="15" fill="rgb(251,90,54)" fg:x="463" fg:w="1"/><text x="37.1719%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="36.9219%" y="293" width="0.0797%" height="15" fill="rgb(234,11,46)" fg:x="463" fg:w="1"/><text x="37.1719%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="36.9219%" y="277" width="0.0797%" height="15" fill="rgb(229,134,13)" fg:x="463" fg:w="1"/><text x="37.1719%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="36.9219%" y="261" width="0.0797%" height="15" fill="rgb(223,129,3)" fg:x="463" fg:w="1"/><text x="37.1719%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="36.9219%" y="245" width="0.0797%" height="15" fill="rgb(221,124,13)" fg:x="463" fg:w="1"/><text x="37.1719%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="36.9219%" y="229" width="0.0797%" height="15" fill="rgb(234,3,18)" fg:x="463" fg:w="1"/><text x="37.1719%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="36.9219%" y="213" width="0.0797%" height="15" fill="rgb(249,199,20)" fg:x="463" fg:w="1"/><text x="37.1719%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="36.9219%" y="197" width="0.0797%" height="15" fill="rgb(224,134,6)" fg:x="463" fg:w="1"/><text x="37.1719%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="36.9219%" y="181" width="0.0797%" height="15" fill="rgb(254,83,26)" fg:x="463" fg:w="1"/><text x="37.1719%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="36.9219%" y="165" width="0.0797%" height="15" fill="rgb(217,88,9)" fg:x="463" fg:w="1"/><text x="37.1719%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="36.9219%" y="149" width="0.0797%" height="15" fill="rgb(225,73,2)" fg:x="463" fg:w="1"/><text x="37.1719%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.9219%" y="133" width="0.0797%" height="15" fill="rgb(226,44,39)" fg:x="463" fg:w="1"/><text x="37.1719%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="37.0016%" y="341" width="0.0797%" height="15" fill="rgb(228,53,17)" fg:x="464" fg:w="1"/><text x="37.2516%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="37.0016%" y="325" width="0.0797%" height="15" fill="rgb(212,27,27)" fg:x="464" fg:w="1"/><text x="37.2516%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="37.0016%" y="309" width="0.0797%" height="15" fill="rgb(241,50,6)" fg:x="464" fg:w="1"/><text x="37.2516%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="37.0016%" y="293" width="0.0797%" height="15" fill="rgb(225,28,51)" fg:x="464" fg:w="1"/><text x="37.2516%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="37.0016%" y="277" width="0.0797%" height="15" fill="rgb(215,33,16)" fg:x="464" fg:w="1"/><text x="37.2516%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="37.0016%" y="261" width="0.0797%" height="15" fill="rgb(243,40,39)" fg:x="464" fg:w="1"/><text x="37.2516%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="37.0016%" y="245" width="0.0797%" height="15" fill="rgb(225,11,42)" fg:x="464" fg:w="1"/><text x="37.2516%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="37.0016%" y="229" width="0.0797%" height="15" fill="rgb(241,220,38)" fg:x="464" fg:w="1"/><text x="37.2516%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="37.0016%" y="213" width="0.0797%" height="15" fill="rgb(244,52,35)" fg:x="464" fg:w="1"/><text x="37.2516%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="37.0016%" y="197" width="0.0797%" height="15" fill="rgb(246,42,46)" fg:x="464" fg:w="1"/><text x="37.2516%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="37.0016%" y="181" width="0.0797%" height="15" fill="rgb(205,184,13)" fg:x="464" fg:w="1"/><text x="37.2516%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="36.9219%" y="357" width="0.2392%" height="15" fill="rgb(209,48,36)" fg:x="463" fg:w="3"/><text x="37.1719%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.0813%" y="341" width="0.0797%" height="15" fill="rgb(244,34,51)" fg:x="465" fg:w="1"/><text x="37.3313%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="37.1611%" y="357" width="0.0797%" height="15" fill="rgb(221,107,33)" fg:x="466" fg:w="1"/><text x="37.4111%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="37.1611%" y="341" width="0.0797%" height="15" fill="rgb(224,203,12)" fg:x="466" fg:w="1"/><text x="37.4111%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="37.1611%" y="325" width="0.0797%" height="15" fill="rgb(230,215,18)" fg:x="466" fg:w="1"/><text x="37.4111%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="37.1611%" y="309" width="0.0797%" height="15" fill="rgb(206,185,35)" fg:x="466" fg:w="1"/><text x="37.4111%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="37.1611%" y="293" width="0.0797%" height="15" fill="rgb(228,140,34)" fg:x="466" fg:w="1"/><text x="37.4111%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="37.1611%" y="277" width="0.0797%" height="15" fill="rgb(208,93,13)" fg:x="466" fg:w="1"/><text x="37.4111%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="37.1611%" y="261" width="0.0797%" height="15" fill="rgb(221,193,39)" fg:x="466" fg:w="1"/><text x="37.4111%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="37.1611%" y="245" width="0.0797%" height="15" fill="rgb(241,132,34)" fg:x="466" fg:w="1"/><text x="37.4111%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="37.1611%" y="229" width="0.0797%" height="15" fill="rgb(221,141,10)" fg:x="466" fg:w="1"/><text x="37.4111%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="37.1611%" y="213" width="0.0797%" height="15" fill="rgb(226,90,31)" fg:x="466" fg:w="1"/><text x="37.4111%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="37.1611%" y="197" width="0.0797%" height="15" fill="rgb(243,75,5)" fg:x="466" fg:w="1"/><text x="37.4111%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="37.1611%" y="181" width="0.0797%" height="15" fill="rgb(227,156,21)" fg:x="466" fg:w="1"/><text x="37.4111%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.1611%" y="165" width="0.0797%" height="15" fill="rgb(250,195,8)" fg:x="466" fg:w="1"/><text x="37.4111%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="37.2408%" y="357" width="0.0797%" height="15" fill="rgb(220,134,5)" fg:x="467" fg:w="1"/><text x="37.4908%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (7 samples, 0.56%)</title><rect x="36.8421%" y="373" width="0.5582%" height="15" fill="rgb(246,106,34)" fg:x="462" fg:w="7"/><text x="37.0921%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="37.3206%" y="357" width="0.0797%" height="15" fill="rgb(205,1,4)" fg:x="468" fg:w="1"/><text x="37.5706%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="37.3206%" y="341" width="0.0797%" height="15" fill="rgb(224,151,29)" fg:x="468" fg:w="1"/><text x="37.5706%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="37.3206%" y="325" width="0.0797%" height="15" fill="rgb(251,196,0)" fg:x="468" fg:w="1"/><text x="37.5706%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="37.3206%" y="309" width="0.0797%" height="15" fill="rgb(212,127,0)" fg:x="468" fg:w="1"/><text x="37.5706%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="37.3206%" y="293" width="0.0797%" height="15" fill="rgb(236,71,53)" fg:x="468" fg:w="1"/><text x="37.5706%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.3206%" y="277" width="0.0797%" height="15" fill="rgb(227,99,0)" fg:x="468" fg:w="1"/><text x="37.5706%" y="287.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (8 samples, 0.64%)</title><rect x="36.8421%" y="389" width="0.6380%" height="15" fill="rgb(239,89,21)" fg:x="462" fg:w="8"/><text x="37.0921%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.4003%" y="373" width="0.0797%" height="15" fill="rgb(243,122,19)" fg:x="469" fg:w="1"/><text x="37.6503%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="37.4801%" y="389" width="0.1595%" height="15" fill="rgb(229,192,45)" fg:x="470" fg:w="2"/><text x="37.7301%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="37.4801%" y="373" width="0.1595%" height="15" fill="rgb(235,165,35)" fg:x="470" fg:w="2"/><text x="37.7301%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="37.4801%" y="357" width="0.1595%" height="15" fill="rgb(253,202,0)" fg:x="470" fg:w="2"/><text x="37.7301%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="37.4801%" y="341" width="0.1595%" height="15" fill="rgb(235,51,20)" fg:x="470" fg:w="2"/><text x="37.7301%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="37.4801%" y="325" width="0.1595%" height="15" fill="rgb(218,95,46)" fg:x="470" fg:w="2"/><text x="37.7301%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="37.4801%" y="309" width="0.1595%" height="15" fill="rgb(212,81,10)" fg:x="470" fg:w="2"/><text x="37.7301%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="37.5598%" y="293" width="0.0797%" height="15" fill="rgb(240,59,0)" fg:x="471" fg:w="1"/><text x="37.8098%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="37.6396%" y="341" width="0.0797%" height="15" fill="rgb(212,191,42)" fg:x="472" fg:w="1"/><text x="37.8896%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="37.6396%" y="325" width="0.0797%" height="15" fill="rgb(233,140,3)" fg:x="472" fg:w="1"/><text x="37.8896%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="37.6396%" y="309" width="0.0797%" height="15" fill="rgb(215,69,23)" fg:x="472" fg:w="1"/><text x="37.8896%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="37.6396%" y="293" width="0.0797%" height="15" fill="rgb(240,202,20)" fg:x="472" fg:w="1"/><text x="37.8896%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="37.6396%" y="277" width="0.0797%" height="15" fill="rgb(209,146,50)" fg:x="472" fg:w="1"/><text x="37.8896%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="37.6396%" y="261" width="0.0797%" height="15" fill="rgb(253,102,54)" fg:x="472" fg:w="1"/><text x="37.8896%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="37.6396%" y="245" width="0.0797%" height="15" fill="rgb(250,173,47)" fg:x="472" fg:w="1"/><text x="37.8896%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="37.6396%" y="229" width="0.0797%" height="15" fill="rgb(232,142,7)" fg:x="472" fg:w="1"/><text x="37.8896%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="37.6396%" y="213" width="0.0797%" height="15" fill="rgb(230,157,47)" fg:x="472" fg:w="1"/><text x="37.8896%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="37.6396%" y="197" width="0.0797%" height="15" fill="rgb(214,177,35)" fg:x="472" fg:w="1"/><text x="37.8896%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="37.6396%" y="181" width="0.0797%" height="15" fill="rgb(234,119,46)" fg:x="472" fg:w="1"/><text x="37.8896%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="37.6396%" y="165" width="0.0797%" height="15" fill="rgb(241,180,50)" fg:x="472" fg:w="1"/><text x="37.8896%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.6396%" y="149" width="0.0797%" height="15" fill="rgb(221,54,25)" fg:x="472" fg:w="1"/><text x="37.8896%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="37.7193%" y="261" width="0.0797%" height="15" fill="rgb(209,157,44)" fg:x="473" fg:w="1"/><text x="37.9693%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="37.7193%" y="245" width="0.0797%" height="15" fill="rgb(246,115,41)" fg:x="473" fg:w="1"/><text x="37.9693%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="37.7193%" y="229" width="0.0797%" height="15" fill="rgb(229,86,1)" fg:x="473" fg:w="1"/><text x="37.9693%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="37.7193%" y="213" width="0.0797%" height="15" fill="rgb(240,108,53)" fg:x="473" fg:w="1"/><text x="37.9693%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="37.7193%" y="197" width="0.0797%" height="15" fill="rgb(227,134,2)" fg:x="473" fg:w="1"/><text x="37.9693%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="37.7193%" y="181" width="0.0797%" height="15" fill="rgb(213,129,25)" fg:x="473" fg:w="1"/><text x="37.9693%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.7193%" y="165" width="0.0797%" height="15" fill="rgb(226,35,21)" fg:x="473" fg:w="1"/><text x="37.9693%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="37.6396%" y="357" width="0.2392%" height="15" fill="rgb(208,129,26)" fg:x="472" fg:w="3"/><text x="37.8896%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="37.7193%" y="341" width="0.1595%" height="15" fill="rgb(224,83,6)" fg:x="473" fg:w="2"/><text x="37.9693%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="37.7193%" y="325" width="0.1595%" height="15" fill="rgb(227,52,39)" fg:x="473" fg:w="2"/><text x="37.9693%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="37.7193%" y="309" width="0.1595%" height="15" fill="rgb(241,30,17)" fg:x="473" fg:w="2"/><text x="37.9693%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="37.7193%" y="293" width="0.1595%" height="15" fill="rgb(246,186,42)" fg:x="473" fg:w="2"/><text x="37.9693%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="37.7193%" y="277" width="0.1595%" height="15" fill="rgb(221,169,15)" fg:x="473" fg:w="2"/><text x="37.9693%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="37.7990%" y="261" width="0.0797%" height="15" fill="rgb(235,108,21)" fg:x="474" fg:w="1"/><text x="38.0490%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="37.7990%" y="245" width="0.0797%" height="15" fill="rgb(219,148,30)" fg:x="474" fg:w="1"/><text x="38.0490%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="37.8788%" y="357" width="0.1595%" height="15" fill="rgb(220,109,5)" fg:x="475" fg:w="2"/><text x="38.1288%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.9585%" y="341" width="0.0797%" height="15" fill="rgb(213,203,48)" fg:x="476" fg:w="1"/><text x="38.2085%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="38.1978%" y="293" width="0.0797%" height="15" fill="rgb(244,71,33)" fg:x="479" fg:w="1"/><text x="38.4478%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (10 samples, 0.80%)</title><rect x="37.6396%" y="373" width="0.7974%" height="15" fill="rgb(209,23,2)" fg:x="472" fg:w="10"/><text x="37.8896%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="38.0383%" y="357" width="0.3987%" height="15" fill="rgb(219,97,7)" fg:x="477" fg:w="5"/><text x="38.2883%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="38.0383%" y="341" width="0.3987%" height="15" fill="rgb(216,161,23)" fg:x="477" fg:w="5"/><text x="38.2883%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="38.1180%" y="325" width="0.3190%" height="15" fill="rgb(207,45,42)" fg:x="478" fg:w="4"/><text x="38.3680%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="38.1180%" y="309" width="0.3190%" height="15" fill="rgb(241,61,4)" fg:x="478" fg:w="4"/><text x="38.3680%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="38.2775%" y="293" width="0.1595%" height="15" fill="rgb(236,170,1)" fg:x="480" fg:w="2"/><text x="38.5275%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="38.3573%" y="277" width="0.0797%" height="15" fill="rgb(239,72,5)" fg:x="481" fg:w="1"/><text x="38.6073%" y="287.50"></text></g><g><title>kernel::model::EntityPtr::gid (11 samples, 0.88%)</title><rect x="37.6396%" y="389" width="0.8772%" height="15" fill="rgb(214,13,50)" fg:x="472" fg:w="11"/><text x="37.8896%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.4370%" y="373" width="0.0797%" height="15" fill="rgb(224,88,9)" fg:x="482" fg:w="1"/><text x="38.6870%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.5167%" y="341" width="0.0797%" height="15" fill="rgb(238,192,34)" fg:x="483" fg:w="1"/><text x="38.7667%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.8357%" y="325" width="0.0797%" height="15" fill="rgb(217,203,50)" fg:x="487" fg:w="1"/><text x="39.0857%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="39.1547%" y="245" width="0.0797%" height="15" fill="rgb(241,123,32)" fg:x="491" fg:w="1"/><text x="39.4047%" y="255.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="39.1547%" y="229" width="0.0797%" height="15" fill="rgb(248,151,39)" fg:x="491" fg:w="1"/><text x="39.4047%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="39.1547%" y="213" width="0.0797%" height="15" fill="rgb(208,89,6)" fg:x="491" fg:w="1"/><text x="39.4047%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="38.9952%" y="309" width="0.3190%" height="15" fill="rgb(254,43,26)" fg:x="489" fg:w="4"/><text x="39.2452%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="38.9952%" y="293" width="0.3190%" height="15" fill="rgb(216,158,13)" fg:x="489" fg:w="4"/><text x="39.2452%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (3 samples, 0.24%)</title><rect x="39.0750%" y="277" width="0.2392%" height="15" fill="rgb(212,47,37)" fg:x="490" fg:w="3"/><text x="39.3250%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="39.0750%" y="261" width="0.2392%" height="15" fill="rgb(254,16,10)" fg:x="490" fg:w="3"/><text x="39.3250%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="39.2344%" y="245" width="0.0797%" height="15" fill="rgb(223,228,16)" fg:x="492" fg:w="1"/><text x="39.4844%" y="255.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="39.2344%" y="229" width="0.0797%" height="15" fill="rgb(249,108,50)" fg:x="492" fg:w="1"/><text x="39.4844%" y="239.50"></text></g><g><title>regex::builders::bytes::RegexBuilder::new (1 samples, 0.08%)</title><rect x="39.3142%" y="293" width="0.0797%" height="15" fill="rgb(208,220,5)" fg:x="493" fg:w="1"/><text x="39.5642%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="39.3142%" y="277" width="0.0797%" height="15" fill="rgb(217,89,48)" fg:x="493" fg:w="1"/><text x="39.5642%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="39.4737%" y="261" width="0.0797%" height="15" fill="rgb(212,113,41)" fg:x="495" fg:w="1"/><text x="39.7237%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.4737%" y="245" width="0.0797%" height="15" fill="rgb(231,127,5)" fg:x="495" fg:w="1"/><text x="39.7237%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (3 samples, 0.24%)</title><rect x="39.5534%" y="261" width="0.2392%" height="15" fill="rgb(217,141,17)" fg:x="496" fg:w="3"/><text x="39.8034%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="39.5534%" y="245" width="0.2392%" height="15" fill="rgb(245,125,54)" fg:x="496" fg:w="3"/><text x="39.8034%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="39.6332%" y="229" width="0.1595%" height="15" fill="rgb(248,125,3)" fg:x="497" fg:w="2"/><text x="39.8832%" y="239.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="39.7129%" y="213" width="0.0797%" height="15" fill="rgb(236,119,51)" fg:x="498" fg:w="1"/><text x="39.9629%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.8724%" y="245" width="0.0797%" height="15" fill="rgb(239,99,8)" fg:x="500" fg:w="1"/><text x="40.1224%" y="255.50"></text></g><g><title>__libc_free (4 samples, 0.32%)</title><rect x="40.0319%" y="229" width="0.3190%" height="15" fill="rgb(224,228,4)" fg:x="502" fg:w="4"/><text x="40.2819%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.48%)</title><rect x="40.3509%" y="229" width="0.4785%" height="15" fill="rgb(220,131,45)" fg:x="506" fg:w="6"/><text x="40.6009%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (12 samples, 0.96%)</title><rect x="39.9522%" y="245" width="0.9569%" height="15" fill="rgb(215,62,5)" fg:x="501" fg:w="12"/><text x="40.2022%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="40.8293%" y="229" width="0.0797%" height="15" fill="rgb(253,12,24)" fg:x="512" fg:w="1"/><text x="41.0793%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="40.9888%" y="229" width="0.0797%" height="15" fill="rgb(248,120,50)" fg:x="514" fg:w="1"/><text x="41.2388%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.08%)</title><rect x="40.9888%" y="213" width="0.0797%" height="15" fill="rgb(245,194,10)" fg:x="514" fg:w="1"/><text x="41.2388%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="41.0686%" y="229" width="0.0797%" height="15" fill="rgb(241,149,38)" fg:x="515" fg:w="1"/><text x="41.3186%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="40.9091%" y="245" width="0.3190%" height="15" fill="rgb(219,215,7)" fg:x="513" fg:w="4"/><text x="41.1591%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="41.1483%" y="229" width="0.0797%" height="15" fill="rgb(208,120,31)" fg:x="516" fg:w="1"/><text x="41.3983%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.3876%" y="181" width="0.0797%" height="15" fill="rgb(244,30,8)" fg:x="519" fg:w="1"/><text x="41.6376%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="41.4673%" y="181" width="0.0797%" height="15" fill="rgb(238,35,44)" fg:x="520" fg:w="1"/><text x="41.7173%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="41.4673%" y="165" width="0.0797%" height="15" fill="rgb(243,218,37)" fg:x="520" fg:w="1"/><text x="41.7173%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.4673%" y="149" width="0.0797%" height="15" fill="rgb(218,169,10)" fg:x="520" fg:w="1"/><text x="41.7173%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="41.4673%" y="133" width="0.0797%" height="15" fill="rgb(221,144,10)" fg:x="520" fg:w="1"/><text x="41.7173%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="41.5470%" y="181" width="0.1595%" height="15" fill="rgb(226,41,38)" fg:x="521" fg:w="2"/><text x="41.7970%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="41.5470%" y="165" width="0.1595%" height="15" fill="rgb(228,3,1)" fg:x="521" fg:w="2"/><text x="41.7970%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="41.5470%" y="149" width="0.1595%" height="15" fill="rgb(209,129,12)" fg:x="521" fg:w="2"/><text x="41.7970%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="41.6268%" y="133" width="0.0797%" height="15" fill="rgb(213,136,33)" fg:x="522" fg:w="1"/><text x="41.8768%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="41.8660%" y="149" width="0.1595%" height="15" fill="rgb(209,181,29)" fg:x="525" fg:w="2"/><text x="42.1160%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="41.8660%" y="133" width="0.1595%" height="15" fill="rgb(234,173,18)" fg:x="525" fg:w="2"/><text x="42.1160%" y="143.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="41.8660%" y="117" width="0.1595%" height="15" fill="rgb(227,73,47)" fg:x="525" fg:w="2"/><text x="42.1160%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (7 samples, 0.56%)</title><rect x="41.7065%" y="181" width="0.5582%" height="15" fill="rgb(234,9,34)" fg:x="523" fg:w="7"/><text x="41.9565%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (7 samples, 0.56%)</title><rect x="41.7065%" y="165" width="0.5582%" height="15" fill="rgb(235,172,15)" fg:x="523" fg:w="7"/><text x="41.9565%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="42.0255%" y="149" width="0.2392%" height="15" fill="rgb(245,61,2)" fg:x="527" fg:w="3"/><text x="42.2755%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="42.1850%" y="133" width="0.0797%" height="15" fill="rgb(238,39,47)" fg:x="529" fg:w="1"/><text x="42.4350%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.16%)</title><rect x="42.2648%" y="181" width="0.1595%" height="15" fill="rgb(234,37,24)" fg:x="530" fg:w="2"/><text x="42.5148%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="42.3445%" y="165" width="0.0797%" height="15" fill="rgb(248,223,24)" fg:x="531" fg:w="1"/><text x="42.5945%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (45 samples, 3.59%)</title><rect x="42.4242%" y="181" width="3.5885%" height="15" fill="rgb(223,12,15)" fg:x="532" fg:w="45"/><text x="42.6742%" y="191.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (45 samples, 3.59%)</title><rect x="42.4242%" y="165" width="3.5885%" height="15" fill="rgb(249,6,3)" fg:x="532" fg:w="45"/><text x="42.6742%" y="175.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (45 samples, 3.59%)</title><rect x="42.4242%" y="149" width="3.5885%" height="15" fill="rgb(237,105,33)" fg:x="532" fg:w="45"/><text x="42.6742%" y="159.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="46.0128%" y="181" width="0.1595%" height="15" fill="rgb(252,208,35)" fg:x="577" fg:w="2"/><text x="46.2628%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (63 samples, 5.02%)</title><rect x="41.2281%" y="229" width="5.0239%" height="15" fill="rgb(215,181,35)" fg:x="517" fg:w="63"/><text x="41.4781%" y="239.50">&lt;core:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (63 samples, 5.02%)</title><rect x="41.2281%" y="213" width="5.0239%" height="15" fill="rgb(246,212,3)" fg:x="517" fg:w="63"/><text x="41.4781%" y="223.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (63 samples, 5.02%)</title><rect x="41.2281%" y="197" width="5.0239%" height="15" fill="rgb(247,156,24)" fg:x="517" fg:w="63"/><text x="41.4781%" y="207.50">regex_..</text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="46.1722%" y="181" width="0.0797%" height="15" fill="rgb(248,9,31)" fg:x="579" fg:w="1"/><text x="46.4222%" y="191.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="46.5710%" y="213" width="0.0797%" height="15" fill="rgb(234,26,45)" fg:x="584" fg:w="1"/><text x="46.8210%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.08%)</title><rect x="46.6507%" y="213" width="0.0797%" height="15" fill="rgb(249,11,32)" fg:x="585" fg:w="1"/><text x="46.9007%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="46.7305%" y="213" width="0.3190%" height="15" fill="rgb(249,162,33)" fg:x="586" fg:w="4"/><text x="46.9805%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="47.0494%" y="213" width="0.0797%" height="15" fill="rgb(232,4,32)" fg:x="590" fg:w="1"/><text x="47.2994%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="47.1292%" y="197" width="0.0797%" height="15" fill="rgb(212,5,45)" fg:x="591" fg:w="1"/><text x="47.3792%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (13 samples, 1.04%)</title><rect x="46.2520%" y="229" width="1.0367%" height="15" fill="rgb(227,95,13)" fg:x="580" fg:w="13"/><text x="46.5020%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="47.1292%" y="213" width="0.1595%" height="15" fill="rgb(223,205,10)" fg:x="591" fg:w="2"/><text x="47.3792%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="47.2089%" y="197" width="0.0797%" height="15" fill="rgb(222,178,8)" fg:x="592" fg:w="1"/><text x="47.4589%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="47.2089%" y="181" width="0.0797%" height="15" fill="rgb(216,13,22)" fg:x="592" fg:w="1"/><text x="47.4589%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.2089%" y="165" width="0.0797%" height="15" fill="rgb(240,167,12)" fg:x="592" fg:w="1"/><text x="47.4589%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="47.2887%" y="229" width="0.0797%" height="15" fill="rgb(235,68,35)" fg:x="593" fg:w="1"/><text x="47.5387%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="47.2887%" y="213" width="0.0797%" height="15" fill="rgb(253,40,27)" fg:x="593" fg:w="1"/><text x="47.5387%" y="223.50"></text></g><g><title>regex_syntax::hir::ClassBytes::push (1 samples, 0.08%)</title><rect x="47.4482%" y="213" width="0.0797%" height="15" fill="rgb(214,19,28)" fg:x="595" fg:w="1"/><text x="47.6982%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="47.4482%" y="197" width="0.0797%" height="15" fill="rgb(210,167,45)" fg:x="595" fg:w="1"/><text x="47.6982%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (80 samples, 6.38%)</title><rect x="41.2281%" y="245" width="6.3796%" height="15" fill="rgb(232,97,40)" fg:x="517" fg:w="80"/><text x="41.4781%" y="255.50">regex_au..</text></g><g><title>regex_syntax::hir::Hir::dot (3 samples, 0.24%)</title><rect x="47.3684%" y="229" width="0.2392%" height="15" fill="rgb(250,35,23)" fg:x="594" fg:w="3"/><text x="47.6184%" y="239.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="47.5279%" y="213" width="0.0797%" height="15" fill="rgb(248,47,53)" fg:x="596" fg:w="1"/><text x="47.7779%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="47.6077%" y="245" width="0.0797%" height="15" fill="rgb(226,58,50)" fg:x="597" fg:w="1"/><text x="47.8577%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (102 samples, 8.13%)</title><rect x="39.7927%" y="261" width="8.1340%" height="15" fill="rgb(217,105,26)" fg:x="499" fg:w="102"/><text x="40.0427%" y="271.50">regex_autom..</text></g><g><title>regex_automata::util::prefilter::prefixes (3 samples, 0.24%)</title><rect x="47.6874%" y="245" width="0.2392%" height="15" fill="rgb(208,64,1)" fg:x="598" fg:w="3"/><text x="47.9374%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="48.1659%" y="213" width="0.0797%" height="15" fill="rgb(214,80,1)" fg:x="604" fg:w="1"/><text x="48.4159%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="48.1659%" y="197" width="0.0797%" height="15" fill="rgb(206,175,26)" fg:x="604" fg:w="1"/><text x="48.4159%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="48.1659%" y="181" width="0.0797%" height="15" fill="rgb(235,156,37)" fg:x="604" fg:w="1"/><text x="48.4159%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.40%)</title><rect x="47.9266%" y="261" width="0.3987%" height="15" fill="rgb(213,100,9)" fg:x="601" fg:w="5"/><text x="48.1766%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="47.9266%" y="245" width="0.3987%" height="15" fill="rgb(241,15,13)" fg:x="601" fg:w="5"/><text x="48.1766%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="48.1659%" y="229" width="0.1595%" height="15" fill="rgb(205,97,43)" fg:x="604" fg:w="2"/><text x="48.4159%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="48.2456%" y="213" width="0.0797%" height="15" fill="rgb(216,106,32)" fg:x="605" fg:w="1"/><text x="48.4956%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="48.2456%" y="197" width="0.0797%" height="15" fill="rgb(226,200,8)" fg:x="605" fg:w="1"/><text x="48.4956%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.2456%" y="181" width="0.0797%" height="15" fill="rgb(244,54,29)" fg:x="605" fg:w="1"/><text x="48.4956%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.2456%" y="165" width="0.0797%" height="15" fill="rgb(252,169,12)" fg:x="605" fg:w="1"/><text x="48.4956%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="48.3254%" y="229" width="0.1595%" height="15" fill="rgb(231,199,11)" fg:x="606" fg:w="2"/><text x="48.5754%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="48.4051%" y="213" width="0.0797%" height="15" fill="rgb(233,191,18)" fg:x="607" fg:w="1"/><text x="48.6551%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="48.4051%" y="197" width="0.0797%" height="15" fill="rgb(215,83,47)" fg:x="607" fg:w="1"/><text x="48.6551%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.4051%" y="181" width="0.0797%" height="15" fill="rgb(251,67,19)" fg:x="607" fg:w="1"/><text x="48.6551%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="48.4051%" y="165" width="0.0797%" height="15" fill="rgb(240,7,20)" fg:x="607" fg:w="1"/><text x="48.6551%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (116 samples, 9.25%)</title><rect x="39.3142%" y="309" width="9.2504%" height="15" fill="rgb(210,150,26)" fg:x="493" fg:w="116"/><text x="39.5642%" y="319.50">&lt;regex::regex..</text></g><g><title>regex::builders::string::RegexBuilder::build (115 samples, 9.17%)</title><rect x="39.3939%" y="293" width="9.1707%" height="15" fill="rgb(228,75,42)" fg:x="494" fg:w="115"/><text x="39.6439%" y="303.50">regex::builde..</text></g><g><title>regex_automata::meta::regex::Builder::build (115 samples, 9.17%)</title><rect x="39.3939%" y="277" width="9.1707%" height="15" fill="rgb(237,134,48)" fg:x="494" fg:w="115"/><text x="39.6439%" y="287.50">regex_automat..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="48.3254%" y="261" width="0.2392%" height="15" fill="rgb(205,80,50)" fg:x="606" fg:w="3"/><text x="48.5754%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="48.3254%" y="245" width="0.2392%" height="15" fill="rgb(217,74,48)" fg:x="606" fg:w="3"/><text x="48.5754%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="48.4848%" y="229" width="0.0797%" height="15" fill="rgb(205,82,50)" fg:x="608" fg:w="1"/><text x="48.7348%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="48.5646%" y="277" width="0.0797%" height="15" fill="rgb(228,1,33)" fg:x="609" fg:w="1"/><text x="48.8146%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="48.6443%" y="277" width="0.1595%" height="15" fill="rgb(214,50,23)" fg:x="610" fg:w="2"/><text x="48.8943%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (2 samples, 0.16%)</title><rect x="48.6443%" y="261" width="0.1595%" height="15" fill="rgb(210,62,9)" fg:x="610" fg:w="2"/><text x="48.8943%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="48.7241%" y="245" width="0.0797%" height="15" fill="rgb(210,104,37)" fg:x="611" fg:w="1"/><text x="48.9741%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.7241%" y="229" width="0.0797%" height="15" fill="rgb(232,104,43)" fg:x="611" fg:w="1"/><text x="48.9741%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="48.8038%" y="261" width="0.0797%" height="15" fill="rgb(244,52,6)" fg:x="612" fg:w="1"/><text x="49.0538%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.8038%" y="245" width="0.0797%" height="15" fill="rgb(211,174,52)" fg:x="612" fg:w="1"/><text x="49.0538%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="48.8836%" y="261" width="0.0797%" height="15" fill="rgb(229,48,4)" fg:x="613" fg:w="1"/><text x="49.1336%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.8836%" y="245" width="0.0797%" height="15" fill="rgb(205,155,16)" fg:x="613" fg:w="1"/><text x="49.1336%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.48%)</title><rect x="48.5646%" y="309" width="0.4785%" height="15" fill="rgb(211,141,53)" fg:x="609" fg:w="6"/><text x="48.8146%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (6 samples, 0.48%)</title><rect x="48.5646%" y="293" width="0.4785%" height="15" fill="rgb(240,148,11)" fg:x="609" fg:w="6"/><text x="48.8146%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="48.8038%" y="277" width="0.2392%" height="15" fill="rgb(214,45,23)" fg:x="612" fg:w="3"/><text x="49.0538%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="48.9633%" y="261" width="0.0797%" height="15" fill="rgb(248,74,26)" fg:x="614" fg:w="1"/><text x="49.2133%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="49.2026%" y="229" width="0.0797%" height="15" fill="rgb(218,121,16)" fg:x="617" fg:w="1"/><text x="49.4526%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="49.2026%" y="213" width="0.0797%" height="15" fill="rgb(218,10,47)" fg:x="617" fg:w="1"/><text x="49.4526%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="49.2026%" y="197" width="0.0797%" height="15" fill="rgb(227,99,14)" fg:x="617" fg:w="1"/><text x="49.4526%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="49.0431%" y="261" width="0.3190%" height="15" fill="rgb(229,83,46)" fg:x="615" fg:w="4"/><text x="49.2931%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="49.0431%" y="245" width="0.3190%" height="15" fill="rgb(228,25,1)" fg:x="615" fg:w="4"/><text x="49.2931%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="49.2823%" y="229" width="0.0797%" height="15" fill="rgb(252,190,15)" fg:x="618" fg:w="1"/><text x="49.5323%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (132 samples, 10.53%)</title><rect x="38.9155%" y="325" width="10.5263%" height="15" fill="rgb(213,103,51)" fg:x="488" fg:w="132"/><text x="39.1655%" y="335.50">indefinite::hel..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="49.0431%" y="309" width="0.3987%" height="15" fill="rgb(220,38,44)" fg:x="615" fg:w="5"/><text x="49.2931%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="49.0431%" y="293" width="0.3987%" height="15" fill="rgb(210,45,26)" fg:x="615" fg:w="5"/><text x="49.2931%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="49.0431%" y="277" width="0.3987%" height="15" fill="rgb(205,95,48)" fg:x="615" fg:w="5"/><text x="49.2931%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="49.3620%" y="261" width="0.0797%" height="15" fill="rgb(225,179,37)" fg:x="619" fg:w="1"/><text x="49.6120%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="49.3620%" y="245" width="0.0797%" height="15" fill="rgb(230,209,3)" fg:x="619" fg:w="1"/><text x="49.6120%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="49.3620%" y="229" width="0.0797%" height="15" fill="rgb(248,12,46)" fg:x="619" fg:w="1"/><text x="49.6120%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="49.4418%" y="261" width="0.2392%" height="15" fill="rgb(234,18,0)" fg:x="620" fg:w="3"/><text x="49.6918%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="49.4418%" y="245" width="0.2392%" height="15" fill="rgb(238,197,14)" fg:x="620" fg:w="3"/><text x="49.6918%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="49.6013%" y="229" width="0.0797%" height="15" fill="rgb(251,162,48)" fg:x="622" fg:w="1"/><text x="49.8513%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="49.6810%" y="261" width="0.1595%" height="15" fill="rgb(237,73,42)" fg:x="623" fg:w="2"/><text x="49.9310%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="49.6810%" y="245" width="0.1595%" height="15" fill="rgb(211,108,8)" fg:x="623" fg:w="2"/><text x="49.9310%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="49.7608%" y="229" width="0.0797%" height="15" fill="rgb(213,45,22)" fg:x="624" fg:w="1"/><text x="50.0108%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="49.7608%" y="213" width="0.0797%" height="15" fill="rgb(252,154,5)" fg:x="624" fg:w="1"/><text x="50.0108%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="49.7608%" y="197" width="0.0797%" height="15" fill="rgb(221,79,52)" fg:x="624" fg:w="1"/><text x="50.0108%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (6 samples, 0.48%)</title><rect x="49.9203%" y="245" width="0.4785%" height="15" fill="rgb(229,220,36)" fg:x="626" fg:w="6"/><text x="50.1703%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.48%)</title><rect x="49.9203%" y="229" width="0.4785%" height="15" fill="rgb(211,17,16)" fg:x="626" fg:w="6"/><text x="50.1703%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="50.4785%" y="229" width="0.3987%" height="15" fill="rgb(222,55,31)" fg:x="633" fg:w="5"/><text x="50.7285%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="50.7974%" y="213" width="0.0797%" height="15" fill="rgb(221,221,31)" fg:x="637" fg:w="1"/><text x="51.0474%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="50.7974%" y="197" width="0.0797%" height="15" fill="rgb(227,168,26)" fg:x="637" fg:w="1"/><text x="51.0474%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (7 samples, 0.56%)</title><rect x="50.3987%" y="245" width="0.5582%" height="15" fill="rgb(224,139,9)" fg:x="632" fg:w="7"/><text x="50.6487%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="50.8772%" y="229" width="0.0797%" height="15" fill="rgb(254,172,0)" fg:x="638" fg:w="1"/><text x="51.1272%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="50.8772%" y="213" width="0.0797%" height="15" fill="rgb(235,203,1)" fg:x="638" fg:w="1"/><text x="51.1272%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="50.9569%" y="229" width="0.0797%" height="15" fill="rgb(216,205,24)" fg:x="639" fg:w="1"/><text x="51.2069%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="50.9569%" y="213" width="0.0797%" height="15" fill="rgb(233,24,6)" fg:x="639" fg:w="1"/><text x="51.2069%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="51.1962%" y="213" width="0.0797%" height="15" fill="rgb(244,110,9)" fg:x="642" fg:w="1"/><text x="51.4462%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="51.1962%" y="197" width="0.0797%" height="15" fill="rgb(239,222,42)" fg:x="642" fg:w="1"/><text x="51.4462%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.1962%" y="181" width="0.0797%" height="15" fill="rgb(218,145,13)" fg:x="642" fg:w="1"/><text x="51.4462%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="51.1962%" y="165" width="0.0797%" height="15" fill="rgb(207,69,11)" fg:x="642" fg:w="1"/><text x="51.4462%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (4 samples, 0.32%)</title><rect x="51.2759%" y="213" width="0.3190%" height="15" fill="rgb(220,223,22)" fg:x="643" fg:w="4"/><text x="51.5259%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="51.3557%" y="197" width="0.2392%" height="15" fill="rgb(245,102,5)" fg:x="644" fg:w="3"/><text x="51.6057%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="51.4354%" y="181" width="0.1595%" height="15" fill="rgb(211,148,2)" fg:x="645" fg:w="2"/><text x="51.6854%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="51.4354%" y="165" width="0.1595%" height="15" fill="rgb(241,13,44)" fg:x="645" fg:w="2"/><text x="51.6854%" y="175.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="51.4354%" y="149" width="0.1595%" height="15" fill="rgb(219,137,21)" fg:x="645" fg:w="2"/><text x="51.6854%" y="159.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (7 samples, 0.56%)</title><rect x="51.5949%" y="197" width="0.5582%" height="15" fill="rgb(242,206,5)" fg:x="647" fg:w="7"/><text x="51.8449%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (7 samples, 0.56%)</title><rect x="51.5949%" y="181" width="0.5582%" height="15" fill="rgb(217,114,22)" fg:x="647" fg:w="7"/><text x="51.8449%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (16 samples, 1.28%)</title><rect x="50.9569%" y="245" width="1.2759%" height="15" fill="rgb(253,206,42)" fg:x="639" fg:w="16"/><text x="51.2069%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (15 samples, 1.20%)</title><rect x="51.0367%" y="229" width="1.1962%" height="15" fill="rgb(236,102,18)" fg:x="640" fg:w="15"/><text x="51.2867%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (8 samples, 0.64%)</title><rect x="51.5949%" y="213" width="0.6380%" height="15" fill="rgb(208,59,49)" fg:x="647" fg:w="8"/><text x="51.8449%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="52.1531%" y="197" width="0.0797%" height="15" fill="rgb(215,194,28)" fg:x="654" fg:w="1"/><text x="52.4031%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="52.2329%" y="181" width="0.0797%" height="15" fill="rgb(243,207,11)" fg:x="655" fg:w="1"/><text x="52.4829%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::ClassUnicodeIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="53.1100%" y="133" width="0.0797%" height="15" fill="rgb(254,179,35)" fg:x="666" fg:w="1"/><text x="53.3600%" y="143.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="53.1898%" y="133" width="0.3190%" height="15" fill="rgb(235,97,3)" fg:x="667" fg:w="4"/><text x="53.4398%" y="143.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="53.5088%" y="133" width="0.2392%" height="15" fill="rgb(215,155,33)" fg:x="671" fg:w="3"/><text x="53.7588%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="53.7480%" y="133" width="0.2392%" height="15" fill="rgb(223,128,12)" fg:x="674" fg:w="3"/><text x="53.9980%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="53.8278%" y="117" width="0.1595%" height="15" fill="rgb(208,157,18)" fg:x="675" fg:w="2"/><text x="54.0778%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="53.8278%" y="101" width="0.1595%" height="15" fill="rgb(249,70,54)" fg:x="675" fg:w="2"/><text x="54.0778%" y="111.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="53.8278%" y="85" width="0.1595%" height="15" fill="rgb(244,118,24)" fg:x="675" fg:w="2"/><text x="54.0778%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (6 samples, 0.48%)</title><rect x="53.9872%" y="133" width="0.4785%" height="15" fill="rgb(211,54,0)" fg:x="677" fg:w="6"/><text x="54.2372%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="54.3062%" y="117" width="0.1595%" height="15" fill="rgb(245,137,45)" fg:x="681" fg:w="2"/><text x="54.5562%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="54.3062%" y="101" width="0.1595%" height="15" fill="rgb(232,154,31)" fg:x="681" fg:w="2"/><text x="54.5562%" y="111.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="54.3062%" y="85" width="0.1595%" height="15" fill="rgb(253,6,39)" fg:x="681" fg:w="2"/><text x="54.5562%" y="95.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.6252%" y="101" width="0.0797%" height="15" fill="rgb(234,183,24)" fg:x="685" fg:w="1"/><text x="54.8752%" y="111.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="54.8644%" y="69" width="0.2392%" height="15" fill="rgb(252,84,40)" fg:x="688" fg:w="3"/><text x="55.1144%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.48%)</title><rect x="54.7049%" y="101" width="0.4785%" height="15" fill="rgb(224,65,2)" fg:x="686" fg:w="6"/><text x="54.9549%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="54.8644%" y="85" width="0.3190%" height="15" fill="rgb(229,38,24)" fg:x="688" fg:w="4"/><text x="55.1144%" y="95.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="55.1037%" y="69" width="0.0797%" height="15" fill="rgb(218,131,50)" fg:x="691" fg:w="1"/><text x="55.3537%" y="79.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="55.1037%" y="53" width="0.0797%" height="15" fill="rgb(233,106,18)" fg:x="691" fg:w="1"/><text x="55.3537%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (16 samples, 1.28%)</title><rect x="54.4657%" y="133" width="1.2759%" height="15" fill="rgb(220,216,11)" fg:x="683" fg:w="16"/><text x="54.7157%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (16 samples, 1.28%)</title><rect x="54.4657%" y="117" width="1.2759%" height="15" fill="rgb(251,100,45)" fg:x="683" fg:w="16"/><text x="54.7157%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (7 samples, 0.56%)</title><rect x="55.1834%" y="101" width="0.5582%" height="15" fill="rgb(235,143,32)" fg:x="692" fg:w="7"/><text x="55.4334%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="55.5024%" y="85" width="0.2392%" height="15" fill="rgb(248,124,34)" fg:x="696" fg:w="3"/><text x="55.7524%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="55.5024%" y="69" width="0.2392%" height="15" fill="rgb(225,221,4)" fg:x="696" fg:w="3"/><text x="55.7524%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="55.5024%" y="53" width="0.2392%" height="15" fill="rgb(242,27,43)" fg:x="696" fg:w="3"/><text x="55.7524%" y="63.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="55.5024%" y="37" width="0.2392%" height="15" fill="rgb(227,54,8)" fg:x="696" fg:w="3"/><text x="55.7524%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (36 samples, 2.87%)</title><rect x="55.7416%" y="133" width="2.8708%" height="15" fill="rgb(253,139,49)" fg:x="699" fg:w="36"/><text x="55.9916%" y="143.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (36 samples, 2.87%)</title><rect x="55.7416%" y="117" width="2.8708%" height="15" fill="rgb(231,26,43)" fg:x="699" fg:w="36"/><text x="55.9916%" y="127.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (36 samples, 2.87%)</title><rect x="55.7416%" y="101" width="2.8708%" height="15" fill="rgb(207,121,39)" fg:x="699" fg:w="36"/><text x="55.9916%" y="111.50">al..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="58.6124%" y="133" width="0.0797%" height="15" fill="rgb(223,101,35)" fg:x="735" fg:w="1"/><text x="58.8624%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.6124%" y="117" width="0.0797%" height="15" fill="rgb(232,87,23)" fg:x="735" fg:w="1"/><text x="58.8624%" y="127.50"></text></g><g><title>regex_syntax::hir::ClassUnicodeRange::start (1 samples, 0.08%)</title><rect x="58.6922%" y="133" width="0.0797%" height="15" fill="rgb(225,180,29)" fg:x="736" fg:w="1"/><text x="58.9422%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (83 samples, 6.62%)</title><rect x="52.3126%" y="165" width="6.6188%" height="15" fill="rgb(225,25,17)" fg:x="656" fg:w="83"/><text x="52.5626%" y="175.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (83 samples, 6.62%)</title><rect x="52.3126%" y="149" width="6.6188%" height="15" fill="rgb(223,8,52)" fg:x="656" fg:w="83"/><text x="52.5626%" y="159.50">regex_aut..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="58.7719%" y="133" width="0.1595%" height="15" fill="rgb(246,42,21)" fg:x="737" fg:w="2"/><text x="59.0219%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (85 samples, 6.78%)</title><rect x="52.2329%" y="229" width="6.7783%" height="15" fill="rgb(205,64,43)" fg:x="655" fg:w="85"/><text x="52.4829%" y="239.50">&lt;core::it..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (85 samples, 6.78%)</title><rect x="52.2329%" y="213" width="6.7783%" height="15" fill="rgb(221,160,13)" fg:x="655" fg:w="85"/><text x="52.4829%" y="223.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (85 samples, 6.78%)</title><rect x="52.2329%" y="197" width="6.7783%" height="15" fill="rgb(239,58,35)" fg:x="655" fg:w="85"/><text x="52.4829%" y="207.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (84 samples, 6.70%)</title><rect x="52.3126%" y="181" width="6.6986%" height="15" fill="rgb(251,26,40)" fg:x="656" fg:w="84"/><text x="52.5626%" y="191.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_bounded (1 samples, 0.08%)</title><rect x="58.9314%" y="165" width="0.0797%" height="15" fill="rgb(247,0,4)" fg:x="739" fg:w="1"/><text x="59.1814%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.1707%" y="213" width="0.0797%" height="15" fill="rgb(218,130,10)" fg:x="742" fg:w="1"/><text x="59.4207%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.2504%" y="213" width="0.0797%" height="15" fill="rgb(239,32,7)" fg:x="743" fg:w="1"/><text x="59.5004%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.2504%" y="197" width="0.0797%" height="15" fill="rgb(210,192,24)" fg:x="743" fg:w="1"/><text x="59.5004%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.2504%" y="181" width="0.0797%" height="15" fill="rgb(226,212,17)" fg:x="743" fg:w="1"/><text x="59.5004%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (7 samples, 0.56%)</title><rect x="59.3301%" y="213" width="0.5582%" height="15" fill="rgb(219,201,28)" fg:x="744" fg:w="7"/><text x="59.5801%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="59.4896%" y="197" width="0.3987%" height="15" fill="rgb(235,207,41)" fg:x="746" fg:w="5"/><text x="59.7396%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="59.5694%" y="181" width="0.3190%" height="15" fill="rgb(241,95,54)" fg:x="747" fg:w="4"/><text x="59.8194%" y="191.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="59.6491%" y="165" width="0.2392%" height="15" fill="rgb(248,12,23)" fg:x="748" fg:w="3"/><text x="59.8991%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (101 samples, 8.05%)</title><rect x="52.2329%" y="245" width="8.0542%" height="15" fill="rgb(228,173,4)" fg:x="655" fg:w="101"/><text x="52.4829%" y="255.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (16 samples, 1.28%)</title><rect x="59.0112%" y="229" width="1.2759%" height="15" fill="rgb(254,99,5)" fg:x="740" fg:w="16"/><text x="59.2612%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="59.8884%" y="213" width="0.3987%" height="15" fill="rgb(212,184,17)" fg:x="751" fg:w="5"/><text x="60.1384%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (132 samples, 10.53%)</title><rect x="49.8405%" y="261" width="10.5263%" height="15" fill="rgb(252,174,1)" fg:x="625" fg:w="132"/><text x="50.0905%" y="271.50">regex_automata:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="60.2871%" y="245" width="0.0797%" height="15" fill="rgb(241,118,51)" fg:x="756" fg:w="1"/><text x="60.5371%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="60.3668%" y="229" width="0.0797%" height="15" fill="rgb(227,94,47)" fg:x="757" fg:w="1"/><text x="60.6168%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="60.4466%" y="213" width="0.0797%" height="15" fill="rgb(229,104,2)" fg:x="758" fg:w="1"/><text x="60.6966%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="60.4466%" y="197" width="0.0797%" height="15" fill="rgb(219,28,31)" fg:x="758" fg:w="1"/><text x="60.6966%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.40%)</title><rect x="60.3668%" y="261" width="0.3987%" height="15" fill="rgb(233,109,36)" fg:x="757" fg:w="5"/><text x="60.6168%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="60.3668%" y="245" width="0.3987%" height="15" fill="rgb(246,88,11)" fg:x="757" fg:w="5"/><text x="60.6168%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="60.4466%" y="229" width="0.3190%" height="15" fill="rgb(209,212,17)" fg:x="758" fg:w="4"/><text x="60.6966%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="60.5263%" y="213" width="0.2392%" height="15" fill="rgb(243,59,29)" fg:x="759" fg:w="3"/><text x="60.7763%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="60.5263%" y="197" width="0.2392%" height="15" fill="rgb(244,205,48)" fg:x="759" fg:w="3"/><text x="60.7763%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="60.5263%" y="181" width="0.2392%" height="15" fill="rgb(227,30,6)" fg:x="759" fg:w="3"/><text x="60.7763%" y="191.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="60.5263%" y="165" width="0.2392%" height="15" fill="rgb(220,205,48)" fg:x="759" fg:w="3"/><text x="60.7763%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.8453%" y="213" width="0.0797%" height="15" fill="rgb(250,94,14)" fg:x="763" fg:w="1"/><text x="61.0953%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.8453%" y="197" width="0.0797%" height="15" fill="rgb(216,119,42)" fg:x="763" fg:w="1"/><text x="61.0953%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="60.8453%" y="181" width="0.0797%" height="15" fill="rgb(232,155,0)" fg:x="763" fg:w="1"/><text x="61.0953%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.0845%" y="197" width="0.0797%" height="15" fill="rgb(212,24,32)" fg:x="766" fg:w="1"/><text x="61.3345%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.1643%" y="197" width="0.0797%" height="15" fill="rgb(216,69,20)" fg:x="767" fg:w="1"/><text x="61.4143%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.1643%" y="181" width="0.0797%" height="15" fill="rgb(229,73,31)" fg:x="767" fg:w="1"/><text x="61.4143%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="61.1643%" y="165" width="0.0797%" height="15" fill="rgb(224,219,20)" fg:x="767" fg:w="1"/><text x="61.4143%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (9 samples, 0.72%)</title><rect x="60.7656%" y="229" width="0.7177%" height="15" fill="rgb(215,146,41)" fg:x="762" fg:w="9"/><text x="61.0156%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (7 samples, 0.56%)</title><rect x="60.9250%" y="213" width="0.5582%" height="15" fill="rgb(244,71,31)" fg:x="764" fg:w="7"/><text x="61.1750%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (3 samples, 0.24%)</title><rect x="61.2440%" y="197" width="0.2392%" height="15" fill="rgb(224,24,11)" fg:x="768" fg:w="3"/><text x="61.4940%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.4035%" y="181" width="0.0797%" height="15" fill="rgb(229,76,15)" fg:x="770" fg:w="1"/><text x="61.6535%" y="191.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="61.5630%" y="213" width="0.0797%" height="15" fill="rgb(209,93,2)" fg:x="772" fg:w="1"/><text x="61.8130%" y="223.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="61.5630%" y="197" width="0.0797%" height="15" fill="rgb(216,200,50)" fg:x="772" fg:w="1"/><text x="61.8130%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.5630%" y="181" width="0.0797%" height="15" fill="rgb(211,67,34)" fg:x="772" fg:w="1"/><text x="61.8130%" y="191.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2 samples, 0.16%)</title><rect x="61.6427%" y="213" width="0.1595%" height="15" fill="rgb(225,87,47)" fg:x="773" fg:w="2"/><text x="61.8927%" y="223.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="61.6427%" y="197" width="0.1595%" height="15" fill="rgb(217,185,16)" fg:x="773" fg:w="2"/><text x="61.8927%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (5 samples, 0.40%)</title><rect x="61.4833%" y="229" width="0.3987%" height="15" fill="rgb(205,0,0)" fg:x="771" fg:w="5"/><text x="61.7333%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="61.8022%" y="213" width="0.0797%" height="15" fill="rgb(207,116,45)" fg:x="775" fg:w="1"/><text x="62.0522%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (157 samples, 12.52%)</title><rect x="49.4418%" y="309" width="12.5199%" height="15" fill="rgb(221,156,26)" fg:x="620" fg:w="157"/><text x="49.6918%" y="319.50">&lt;regex::regex::stri..</text></g><g><title>regex::builders::string::RegexBuilder::build (157 samples, 12.52%)</title><rect x="49.4418%" y="293" width="12.5199%" height="15" fill="rgb(213,140,4)" fg:x="620" fg:w="157"/><text x="49.6918%" y="303.50">regex::builders::st..</text></g><g><title>regex_automata::meta::regex::Builder::build (157 samples, 12.52%)</title><rect x="49.4418%" y="277" width="12.5199%" height="15" fill="rgb(231,224,15)" fg:x="620" fg:w="157"/><text x="49.6918%" y="287.50">regex_automata::met..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (15 samples, 1.20%)</title><rect x="60.7656%" y="261" width="1.1962%" height="15" fill="rgb(244,76,20)" fg:x="762" fg:w="15"/><text x="61.0156%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (15 samples, 1.20%)</title><rect x="60.7656%" y="245" width="1.1962%" height="15" fill="rgb(238,117,7)" fg:x="762" fg:w="15"/><text x="61.0156%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="61.8820%" y="229" width="0.0797%" height="15" fill="rgb(235,1,10)" fg:x="776" fg:w="1"/><text x="62.1320%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.9617%" y="293" width="0.0797%" height="15" fill="rgb(216,165,6)" fg:x="777" fg:w="1"/><text x="62.2117%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="62.0415%" y="277" width="0.0797%" height="15" fill="rgb(246,91,35)" fg:x="778" fg:w="1"/><text x="62.2915%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.1212%" y="277" width="0.0797%" height="15" fill="rgb(228,96,24)" fg:x="779" fg:w="1"/><text x="62.3712%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="61.9617%" y="309" width="0.3190%" height="15" fill="rgb(254,217,53)" fg:x="777" fg:w="4"/><text x="62.2117%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="62.0415%" y="293" width="0.2392%" height="15" fill="rgb(209,60,0)" fg:x="778" fg:w="3"/><text x="62.2915%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="62.2010%" y="277" width="0.0797%" height="15" fill="rgb(250,93,26)" fg:x="780" fg:w="1"/><text x="62.4510%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="62.2010%" y="261" width="0.0797%" height="15" fill="rgb(211,9,40)" fg:x="780" fg:w="1"/><text x="62.4510%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="62.2010%" y="245" width="0.0797%" height="15" fill="rgb(242,57,20)" fg:x="780" fg:w="1"/><text x="62.4510%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="62.2010%" y="229" width="0.0797%" height="15" fill="rgb(248,85,48)" fg:x="780" fg:w="1"/><text x="62.4510%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="62.2807%" y="293" width="0.0797%" height="15" fill="rgb(212,117,2)" fg:x="781" fg:w="1"/><text x="62.5307%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="62.2807%" y="277" width="0.0797%" height="15" fill="rgb(243,19,3)" fg:x="781" fg:w="1"/><text x="62.5307%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="62.2807%" y="261" width="0.0797%" height="15" fill="rgb(232,217,24)" fg:x="781" fg:w="1"/><text x="62.5307%" y="271.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="62.2807%" y="245" width="0.0797%" height="15" fill="rgb(224,175,40)" fg:x="781" fg:w="1"/><text x="62.5307%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="62.2807%" y="229" width="0.0797%" height="15" fill="rgb(212,162,32)" fg:x="781" fg:w="1"/><text x="62.5307%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.2807%" y="213" width="0.0797%" height="15" fill="rgb(215,9,4)" fg:x="781" fg:w="1"/><text x="62.5307%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.2807%" y="197" width="0.0797%" height="15" fill="rgb(242,42,7)" fg:x="781" fg:w="1"/><text x="62.5307%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="62.7592%" y="213" width="0.0797%" height="15" fill="rgb(242,184,45)" fg:x="787" fg:w="1"/><text x="63.0092%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.7592%" y="197" width="0.0797%" height="15" fill="rgb(228,111,51)" fg:x="787" fg:w="1"/><text x="63.0092%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="62.7592%" y="181" width="0.0797%" height="15" fill="rgb(236,147,17)" fg:x="787" fg:w="1"/><text x="63.0092%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="62.8389%" y="213" width="0.0797%" height="15" fill="rgb(210,75,22)" fg:x="788" fg:w="1"/><text x="63.0889%" y="223.50"></text></g><g><title>indefinite::rules::number::Number::check (170 samples, 13.56%)</title><rect x="49.4418%" y="325" width="13.5566%" height="15" fill="rgb(217,159,45)" fg:x="620" fg:w="170"/><text x="49.6918%" y="335.50">indefinite::rules::n..</text></g><g><title>regex::regex::string::Regex::is_match_at (9 samples, 0.72%)</title><rect x="62.2807%" y="309" width="0.7177%" height="15" fill="rgb(245,165,53)" fg:x="781" fg:w="9"/><text x="62.5307%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.64%)</title><rect x="62.3604%" y="293" width="0.6380%" height="15" fill="rgb(251,190,50)" fg:x="782" fg:w="8"/><text x="62.6104%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.56%)</title><rect x="62.4402%" y="277" width="0.5582%" height="15" fill="rgb(208,203,29)" fg:x="783" fg:w="7"/><text x="62.6902%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.56%)</title><rect x="62.4402%" y="261" width="0.5582%" height="15" fill="rgb(207,209,35)" fg:x="783" fg:w="7"/><text x="62.6902%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.56%)</title><rect x="62.4402%" y="245" width="0.5582%" height="15" fill="rgb(230,144,49)" fg:x="783" fg:w="7"/><text x="62.6902%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.56%)</title><rect x="62.4402%" y="229" width="0.5582%" height="15" fill="rgb(229,31,6)" fg:x="783" fg:w="7"/><text x="62.6902%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="62.9187%" y="213" width="0.0797%" height="15" fill="rgb(251,129,24)" fg:x="789" fg:w="1"/><text x="63.1687%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.1579%" y="245" width="0.0797%" height="15" fill="rgb(235,105,15)" fg:x="792" fg:w="1"/><text x="63.4079%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.1579%" y="229" width="0.0797%" height="15" fill="rgb(216,52,43)" fg:x="792" fg:w="1"/><text x="63.4079%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.2376%" y="245" width="0.0797%" height="15" fill="rgb(238,144,41)" fg:x="793" fg:w="1"/><text x="63.4876%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="63.3174%" y="245" width="0.2392%" height="15" fill="rgb(243,63,9)" fg:x="794" fg:w="3"/><text x="63.5674%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="63.3174%" y="229" width="0.2392%" height="15" fill="rgb(246,208,1)" fg:x="794" fg:w="3"/><text x="63.5674%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="63.3971%" y="213" width="0.1595%" height="15" fill="rgb(233,182,18)" fg:x="795" fg:w="2"/><text x="63.6471%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="63.3971%" y="197" width="0.1595%" height="15" fill="rgb(242,224,8)" fg:x="795" fg:w="2"/><text x="63.6471%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="63.6364%" y="229" width="0.0797%" height="15" fill="rgb(243,54,37)" fg:x="798" fg:w="1"/><text x="63.8864%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="63.7161%" y="229" width="0.1595%" height="15" fill="rgb(233,192,12)" fg:x="799" fg:w="2"/><text x="63.9661%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="63.7161%" y="213" width="0.1595%" height="15" fill="rgb(251,192,53)" fg:x="799" fg:w="2"/><text x="63.9661%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="63.8756%" y="213" width="0.1595%" height="15" fill="rgb(246,141,26)" fg:x="801" fg:w="2"/><text x="64.1256%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="63.8756%" y="197" width="0.1595%" height="15" fill="rgb(239,195,19)" fg:x="801" fg:w="2"/><text x="64.1256%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="63.8756%" y="181" width="0.1595%" height="15" fill="rgb(241,16,39)" fg:x="801" fg:w="2"/><text x="64.1256%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="64.0351%" y="197" width="0.0797%" height="15" fill="rgb(223,13,53)" fg:x="803" fg:w="1"/><text x="64.2851%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.48%)</title><rect x="64.1148%" y="197" width="0.4785%" height="15" fill="rgb(214,227,0)" fg:x="804" fg:w="6"/><text x="64.3648%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (14 samples, 1.12%)</title><rect x="63.5566%" y="245" width="1.1164%" height="15" fill="rgb(228,103,26)" fg:x="797" fg:w="14"/><text x="63.8066%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (10 samples, 0.80%)</title><rect x="63.8756%" y="229" width="0.7974%" height="15" fill="rgb(254,177,53)" fg:x="801" fg:w="10"/><text x="64.1256%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.64%)</title><rect x="64.0351%" y="213" width="0.6380%" height="15" fill="rgb(208,201,34)" fg:x="803" fg:w="8"/><text x="64.2851%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="64.5933%" y="197" width="0.0797%" height="15" fill="rgb(212,39,5)" fg:x="810" fg:w="1"/><text x="64.8433%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="64.6730%" y="245" width="0.1595%" height="15" fill="rgb(246,117,3)" fg:x="811" fg:w="2"/><text x="64.9230%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="64.6730%" y="229" width="0.1595%" height="15" fill="rgb(244,118,39)" fg:x="811" fg:w="2"/><text x="64.9230%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="64.7528%" y="213" width="0.0797%" height="15" fill="rgb(241,64,10)" fg:x="812" fg:w="1"/><text x="65.0028%" y="223.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (26 samples, 2.07%)</title><rect x="63.0781%" y="261" width="2.0734%" height="15" fill="rgb(229,39,44)" fg:x="791" fg:w="26"/><text x="63.3281%" y="271.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="64.8325%" y="245" width="0.3190%" height="15" fill="rgb(230,226,3)" fg:x="813" fg:w="4"/><text x="65.0825%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="64.8325%" y="229" width="0.3190%" height="15" fill="rgb(222,13,42)" fg:x="813" fg:w="4"/><text x="65.0825%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="64.8325%" y="213" width="0.3190%" height="15" fill="rgb(247,180,54)" fg:x="813" fg:w="4"/><text x="65.0825%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (4 samples, 0.32%)</title><rect x="64.8325%" y="197" width="0.3190%" height="15" fill="rgb(205,96,16)" fg:x="813" fg:w="4"/><text x="65.0825%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (27 samples, 2.15%)</title><rect x="63.0781%" y="293" width="2.1531%" height="15" fill="rgb(205,100,21)" fg:x="791" fg:w="27"/><text x="63.3281%" y="303.50">&lt;..</text></g><g><title>regex::builders::string::RegexBuilder::build (27 samples, 2.15%)</title><rect x="63.0781%" y="277" width="2.1531%" height="15" fill="rgb(248,51,4)" fg:x="791" fg:w="27"/><text x="63.3281%" y="287.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="65.1515%" y="261" width="0.0797%" height="15" fill="rgb(217,197,30)" fg:x="817" fg:w="1"/><text x="65.4015%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.2313%" y="245" width="0.0797%" height="15" fill="rgb(240,179,40)" fg:x="818" fg:w="1"/><text x="65.4813%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="65.2313%" y="293" width="0.1595%" height="15" fill="rgb(212,185,35)" fg:x="818" fg:w="2"/><text x="65.4813%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="65.2313%" y="277" width="0.1595%" height="15" fill="rgb(251,222,31)" fg:x="818" fg:w="2"/><text x="65.4813%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="65.2313%" y="261" width="0.1595%" height="15" fill="rgb(208,140,36)" fg:x="818" fg:w="2"/><text x="65.4813%" y="271.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="65.3110%" y="245" width="0.0797%" height="15" fill="rgb(220,148,1)" fg:x="819" fg:w="1"/><text x="65.5610%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.3907%" y="261" width="0.0797%" height="15" fill="rgb(254,4,28)" fg:x="820" fg:w="1"/><text x="65.6407%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="65.3907%" y="293" width="0.1595%" height="15" fill="rgb(222,185,44)" fg:x="820" fg:w="2"/><text x="65.6407%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="65.3907%" y="277" width="0.1595%" height="15" fill="rgb(215,74,39)" fg:x="820" fg:w="2"/><text x="65.6407%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="65.4705%" y="261" width="0.0797%" height="15" fill="rgb(247,86,4)" fg:x="821" fg:w="1"/><text x="65.7205%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="65.4705%" y="245" width="0.0797%" height="15" fill="rgb(231,105,32)" fg:x="821" fg:w="1"/><text x="65.7205%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.9490%" y="181" width="0.0797%" height="15" fill="rgb(222,65,35)" fg:x="827" fg:w="1"/><text x="66.1990%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="65.9490%" y="213" width="0.1595%" height="15" fill="rgb(218,145,35)" fg:x="827" fg:w="2"/><text x="66.1990%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="65.9490%" y="197" width="0.1595%" height="15" fill="rgb(208,7,15)" fg:x="827" fg:w="2"/><text x="66.1990%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="66.0287%" y="181" width="0.0797%" height="15" fill="rgb(209,83,13)" fg:x="828" fg:w="1"/><text x="66.2787%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.1085%" y="213" width="0.0797%" height="15" fill="rgb(218,3,10)" fg:x="829" fg:w="1"/><text x="66.3585%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.64%)</title><rect x="65.6300%" y="229" width="0.6380%" height="15" fill="rgb(211,219,4)" fg:x="823" fg:w="8"/><text x="65.8800%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="66.1882%" y="213" width="0.0797%" height="15" fill="rgb(228,194,12)" fg:x="830" fg:w="1"/><text x="66.4382%" y="223.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (43 samples, 3.43%)</title><rect x="62.9984%" y="309" width="3.4290%" height="15" fill="rgb(210,175,7)" fg:x="790" fg:w="43"/><text x="63.2484%" y="319.50">ind..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (11 samples, 0.88%)</title><rect x="65.5502%" y="293" width="0.8772%" height="15" fill="rgb(243,132,6)" fg:x="822" fg:w="11"/><text x="65.8002%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (10 samples, 0.80%)</title><rect x="65.6300%" y="277" width="0.7974%" height="15" fill="rgb(207,72,18)" fg:x="823" fg:w="10"/><text x="65.8800%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (10 samples, 0.80%)</title><rect x="65.6300%" y="261" width="0.7974%" height="15" fill="rgb(236,1,18)" fg:x="823" fg:w="10"/><text x="65.8800%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (10 samples, 0.80%)</title><rect x="65.6300%" y="245" width="0.7974%" height="15" fill="rgb(227,0,18)" fg:x="823" fg:w="10"/><text x="65.8800%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="66.2679%" y="229" width="0.1595%" height="15" fill="rgb(247,37,5)" fg:x="831" fg:w="2"/><text x="66.5179%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="66.2679%" y="213" width="0.1595%" height="15" fill="rgb(237,179,24)" fg:x="831" fg:w="2"/><text x="66.5179%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="66.2679%" y="197" width="0.1595%" height="15" fill="rgb(226,53,20)" fg:x="831" fg:w="2"/><text x="66.5179%" y="207.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="66.2679%" y="181" width="0.1595%" height="15" fill="rgb(247,75,7)" fg:x="831" fg:w="2"/><text x="66.5179%" y="191.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (372 samples, 29.67%)</title><rect x="36.8421%" y="405" width="29.6651%" height="15" fill="rgb(233,96,12)" fg:x="462" fg:w="372"/><text x="37.0921%" y="415.50">&lt;&amp;kernel::model::EntityPtr as plugins_core::look..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (351 samples, 27.99%)</title><rect x="38.5167%" y="389" width="27.9904%" height="15" fill="rgb(224,125,0)" fg:x="483" fg:w="351"/><text x="38.7667%" y="399.50">plugins_core::looking::model::Unqualified::qu..</text></g><g><title>indefinite::indefinite (351 samples, 27.99%)</title><rect x="38.5167%" y="373" width="27.9904%" height="15" fill="rgb(224,92,25)" fg:x="483" fg:w="351"/><text x="38.7667%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (351 samples, 27.99%)</title><rect x="38.5167%" y="357" width="27.9904%" height="15" fill="rgb(224,42,24)" fg:x="483" fg:w="351"/><text x="38.7667%" y="367.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (350 samples, 27.91%)</title><rect x="38.5965%" y="341" width="27.9107%" height="15" fill="rgb(234,132,49)" fg:x="484" fg:w="350"/><text x="38.8465%" y="351.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (44 samples, 3.51%)</title><rect x="62.9984%" y="325" width="3.5088%" height="15" fill="rgb(248,100,35)" fg:x="790" fg:w="44"/><text x="63.2484%" y="335.50">ind..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="66.4274%" y="309" width="0.0797%" height="15" fill="rgb(239,94,40)" fg:x="833" fg:w="1"/><text x="66.6774%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.5072%" y="373" width="0.0797%" height="15" fill="rgb(235,139,28)" fg:x="834" fg:w="1"/><text x="66.7572%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.5072%" y="357" width="0.0797%" height="15" fill="rgb(217,144,7)" fg:x="834" fg:w="1"/><text x="66.7572%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="66.5072%" y="341" width="0.0797%" height="15" fill="rgb(227,55,4)" fg:x="834" fg:w="1"/><text x="66.7572%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="66.5072%" y="325" width="0.0797%" height="15" fill="rgb(252,82,54)" fg:x="834" fg:w="1"/><text x="66.7572%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="66.5072%" y="309" width="0.0797%" height="15" fill="rgb(245,172,4)" fg:x="834" fg:w="1"/><text x="66.7572%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.5072%" y="293" width="0.0797%" height="15" fill="rgb(207,26,27)" fg:x="834" fg:w="1"/><text x="66.7572%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.5072%" y="277" width="0.0797%" height="15" fill="rgb(252,98,18)" fg:x="834" fg:w="1"/><text x="66.7572%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="66.5072%" y="261" width="0.0797%" height="15" fill="rgb(244,8,26)" fg:x="834" fg:w="1"/><text x="66.7572%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="66.5072%" y="245" width="0.0797%" height="15" fill="rgb(237,173,45)" fg:x="834" fg:w="1"/><text x="66.7572%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="66.5072%" y="229" width="0.0797%" height="15" fill="rgb(208,213,49)" fg:x="834" fg:w="1"/><text x="66.7572%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="66.5072%" y="213" width="0.0797%" height="15" fill="rgb(212,122,37)" fg:x="834" fg:w="1"/><text x="66.7572%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.5072%" y="197" width="0.0797%" height="15" fill="rgb(213,80,17)" fg:x="834" fg:w="1"/><text x="66.7572%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.5869%" y="341" width="0.0797%" height="15" fill="rgb(206,210,43)" fg:x="835" fg:w="1"/><text x="66.8369%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.5869%" y="325" width="0.0797%" height="15" fill="rgb(229,214,3)" fg:x="835" fg:w="1"/><text x="66.8369%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.5869%" y="309" width="0.0797%" height="15" fill="rgb(235,213,29)" fg:x="835" fg:w="1"/><text x="66.8369%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="66.5072%" y="389" width="0.2392%" height="15" fill="rgb(248,135,26)" fg:x="834" fg:w="3"/><text x="66.7572%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="66.5869%" y="373" width="0.1595%" height="15" fill="rgb(242,188,12)" fg:x="835" fg:w="2"/><text x="66.8369%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="66.5869%" y="357" width="0.1595%" height="15" fill="rgb(245,38,12)" fg:x="835" fg:w="2"/><text x="66.8369%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.6667%" y="341" width="0.0797%" height="15" fill="rgb(218,42,13)" fg:x="836" fg:w="1"/><text x="66.9167%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.6667%" y="325" width="0.0797%" height="15" fill="rgb(238,132,49)" fg:x="836" fg:w="1"/><text x="66.9167%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="66.6667%" y="309" width="0.0797%" height="15" fill="rgb(209,196,19)" fg:x="836" fg:w="1"/><text x="66.9167%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="66.6667%" y="293" width="0.0797%" height="15" fill="rgb(244,131,22)" fg:x="836" fg:w="1"/><text x="66.9167%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="66.6667%" y="277" width="0.0797%" height="15" fill="rgb(223,18,34)" fg:x="836" fg:w="1"/><text x="66.9167%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.6667%" y="261" width="0.0797%" height="15" fill="rgb(252,124,54)" fg:x="836" fg:w="1"/><text x="66.9167%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.6667%" y="245" width="0.0797%" height="15" fill="rgb(229,106,42)" fg:x="836" fg:w="1"/><text x="66.9167%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="66.6667%" y="229" width="0.0797%" height="15" fill="rgb(221,129,1)" fg:x="836" fg:w="1"/><text x="66.9167%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="66.6667%" y="213" width="0.0797%" height="15" fill="rgb(229,74,15)" fg:x="836" fg:w="1"/><text x="66.9167%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="66.6667%" y="197" width="0.0797%" height="15" fill="rgb(210,206,50)" fg:x="836" fg:w="1"/><text x="66.9167%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="66.6667%" y="181" width="0.0797%" height="15" fill="rgb(251,114,31)" fg:x="836" fg:w="1"/><text x="66.9167%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.6667%" y="165" width="0.0797%" height="15" fill="rgb(215,225,28)" fg:x="836" fg:w="1"/><text x="66.9167%" y="175.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="66.7464%" y="389" width="0.0797%" height="15" fill="rgb(237,109,14)" fg:x="837" fg:w="1"/><text x="66.9964%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="66.7464%" y="373" width="0.0797%" height="15" fill="rgb(230,13,37)" fg:x="837" fg:w="1"/><text x="66.9964%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="66.7464%" y="357" width="0.0797%" height="15" fill="rgb(231,40,28)" fg:x="837" fg:w="1"/><text x="66.9964%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.8262%" y="357" width="0.0797%" height="15" fill="rgb(231,202,18)" fg:x="838" fg:w="1"/><text x="67.0762%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.8262%" y="341" width="0.0797%" height="15" fill="rgb(225,33,18)" fg:x="838" fg:w="1"/><text x="67.0762%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (3 samples, 0.24%)</title><rect x="66.9059%" y="357" width="0.2392%" height="15" fill="rgb(223,64,47)" fg:x="839" fg:w="3"/><text x="67.1559%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (3 samples, 0.24%)</title><rect x="66.9059%" y="341" width="0.2392%" height="15" fill="rgb(234,114,13)" fg:x="839" fg:w="3"/><text x="67.1559%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 0.24%)</title><rect x="66.9059%" y="325" width="0.2392%" height="15" fill="rgb(248,56,40)" fg:x="839" fg:w="3"/><text x="67.1559%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="66.9059%" y="309" width="0.2392%" height="15" fill="rgb(221,194,21)" fg:x="839" fg:w="3"/><text x="67.1559%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="66.9059%" y="293" width="0.2392%" height="15" fill="rgb(242,108,46)" fg:x="839" fg:w="3"/><text x="67.1559%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.0654%" y="277" width="0.0797%" height="15" fill="rgb(220,106,10)" fg:x="841" fg:w="1"/><text x="67.3154%" y="287.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (9 samples, 0.72%)</title><rect x="66.5072%" y="405" width="0.7177%" height="15" fill="rgb(211,88,4)" fg:x="834" fg:w="9"/><text x="66.7572%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="66.8262%" y="389" width="0.3987%" height="15" fill="rgb(214,95,34)" fg:x="838" fg:w="5"/><text x="67.0762%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="66.8262%" y="373" width="0.3987%" height="15" fill="rgb(250,160,33)" fg:x="838" fg:w="5"/><text x="67.0762%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.1451%" y="357" width="0.0797%" height="15" fill="rgb(225,29,10)" fg:x="842" fg:w="1"/><text x="67.3951%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.1451%" y="341" width="0.0797%" height="15" fill="rgb(224,28,30)" fg:x="842" fg:w="1"/><text x="67.3951%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="67.1451%" y="325" width="0.0797%" height="15" fill="rgb(231,77,4)" fg:x="842" fg:w="1"/><text x="67.3951%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="67.2249%" y="405" width="0.1595%" height="15" fill="rgb(209,63,21)" fg:x="843" fg:w="2"/><text x="67.4749%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.3046%" y="389" width="0.0797%" height="15" fill="rgb(226,22,11)" fg:x="844" fg:w="1"/><text x="67.5546%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="67.3844%" y="373" width="0.0797%" height="15" fill="rgb(216,82,30)" fg:x="845" fg:w="1"/><text x="67.6344%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="67.3844%" y="357" width="0.0797%" height="15" fill="rgb(246,227,38)" fg:x="845" fg:w="1"/><text x="67.6344%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="67.4641%" y="373" width="0.0797%" height="15" fill="rgb(251,203,53)" fg:x="846" fg:w="1"/><text x="67.7141%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="67.4641%" y="357" width="0.0797%" height="15" fill="rgb(254,101,1)" fg:x="846" fg:w="1"/><text x="67.7141%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.4641%" y="341" width="0.0797%" height="15" fill="rgb(241,180,5)" fg:x="846" fg:w="1"/><text x="67.7141%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="67.5439%" y="373" width="0.1595%" height="15" fill="rgb(218,168,4)" fg:x="847" fg:w="2"/><text x="67.7939%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.6236%" y="357" width="0.0797%" height="15" fill="rgb(224,223,32)" fg:x="848" fg:w="1"/><text x="67.8736%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.6236%" y="341" width="0.0797%" height="15" fill="rgb(236,106,22)" fg:x="848" fg:w="1"/><text x="67.8736%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="67.6236%" y="325" width="0.0797%" height="15" fill="rgb(206,121,5)" fg:x="848" fg:w="1"/><text x="67.8736%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.6236%" y="309" width="0.0797%" height="15" fill="rgb(233,87,28)" fg:x="848" fg:w="1"/><text x="67.8736%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.6236%" y="293" width="0.0797%" height="15" fill="rgb(236,137,17)" fg:x="848" fg:w="1"/><text x="67.8736%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.6236%" y="277" width="0.0797%" height="15" fill="rgb(209,183,38)" fg:x="848" fg:w="1"/><text x="67.8736%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="67.7033%" y="357" width="0.0797%" height="15" fill="rgb(206,162,44)" fg:x="849" fg:w="1"/><text x="67.9533%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.7033%" y="341" width="0.0797%" height="15" fill="rgb(237,70,39)" fg:x="849" fg:w="1"/><text x="67.9533%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.7033%" y="325" width="0.0797%" height="15" fill="rgb(212,176,5)" fg:x="849" fg:w="1"/><text x="67.9533%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.7033%" y="309" width="0.0797%" height="15" fill="rgb(232,95,16)" fg:x="849" fg:w="1"/><text x="67.9533%" y="319.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (6 samples, 0.48%)</title><rect x="67.3844%" y="389" width="0.4785%" height="15" fill="rgb(219,115,35)" fg:x="845" fg:w="6"/><text x="67.6344%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::gid (2 samples, 0.16%)</title><rect x="67.7033%" y="373" width="0.1595%" height="15" fill="rgb(251,67,27)" fg:x="849" fg:w="2"/><text x="67.9533%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.7831%" y="357" width="0.0797%" height="15" fill="rgb(222,95,40)" fg:x="850" fg:w="1"/><text x="68.0331%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="67.8628%" y="277" width="0.0797%" height="15" fill="rgb(250,35,16)" fg:x="851" fg:w="1"/><text x="68.1128%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="67.9426%" y="229" width="0.0797%" height="15" fill="rgb(224,86,44)" fg:x="852" fg:w="1"/><text x="68.1926%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.9426%" y="213" width="0.0797%" height="15" fill="rgb(237,53,53)" fg:x="852" fg:w="1"/><text x="68.1926%" y="223.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.9426%" y="197" width="0.0797%" height="15" fill="rgb(208,171,33)" fg:x="852" fg:w="1"/><text x="68.1926%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.72%)</title><rect x="67.3844%" y="405" width="0.7177%" height="15" fill="rgb(222,64,27)" fg:x="845" fg:w="9"/><text x="67.6344%" y="415.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (3 samples, 0.24%)</title><rect x="67.8628%" y="389" width="0.2392%" height="15" fill="rgb(221,121,35)" fg:x="851" fg:w="3"/><text x="68.1128%" y="399.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (3 samples, 0.24%)</title><rect x="67.8628%" y="373" width="0.2392%" height="15" fill="rgb(228,137,42)" fg:x="851" fg:w="3"/><text x="68.1128%" y="383.50"></text></g><g><title>engine::session::Session::load_entity (3 samples, 0.24%)</title><rect x="67.8628%" y="357" width="0.2392%" height="15" fill="rgb(227,54,21)" fg:x="851" fg:w="3"/><text x="68.1128%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="67.8628%" y="341" width="0.2392%" height="15" fill="rgb(240,168,33)" fg:x="851" fg:w="3"/><text x="68.1128%" y="351.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="67.8628%" y="325" width="0.2392%" height="15" fill="rgb(243,159,6)" fg:x="851" fg:w="3"/><text x="68.1128%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="67.8628%" y="309" width="0.2392%" height="15" fill="rgb(205,211,41)" fg:x="851" fg:w="3"/><text x="68.1128%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="67.8628%" y="293" width="0.2392%" height="15" fill="rgb(253,30,1)" fg:x="851" fg:w="3"/><text x="68.1128%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="67.9426%" y="277" width="0.1595%" height="15" fill="rgb(226,80,18)" fg:x="852" fg:w="2"/><text x="68.1926%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="67.9426%" y="261" width="0.1595%" height="15" fill="rgb(253,156,46)" fg:x="852" fg:w="2"/><text x="68.1926%" y="271.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="67.9426%" y="245" width="0.1595%" height="15" fill="rgb(248,87,27)" fg:x="852" fg:w="2"/><text x="68.1926%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.0223%" y="229" width="0.0797%" height="15" fill="rgb(227,122,2)" fg:x="853" fg:w="1"/><text x="68.2723%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.0223%" y="213" width="0.0797%" height="15" fill="rgb(229,94,39)" fg:x="853" fg:w="1"/><text x="68.2723%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="68.0223%" y="197" width="0.0797%" height="15" fill="rgb(225,173,31)" fg:x="853" fg:w="1"/><text x="68.2723%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.0223%" y="181" width="0.0797%" height="15" fill="rgb(239,176,30)" fg:x="853" fg:w="1"/><text x="68.2723%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.0223%" y="165" width="0.0797%" height="15" fill="rgb(212,104,21)" fg:x="853" fg:w="1"/><text x="68.2723%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="68.0223%" y="149" width="0.0797%" height="15" fill="rgb(240,209,40)" fg:x="853" fg:w="1"/><text x="68.2723%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.0223%" y="133" width="0.0797%" height="15" fill="rgb(234,195,5)" fg:x="853" fg:w="1"/><text x="68.2723%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.0223%" y="117" width="0.0797%" height="15" fill="rgb(238,213,1)" fg:x="853" fg:w="1"/><text x="68.2723%" y="127.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="68.0223%" y="101" width="0.0797%" height="15" fill="rgb(235,182,54)" fg:x="853" fg:w="1"/><text x="68.2723%" y="111.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (2 samples, 0.16%)</title><rect x="68.1021%" y="405" width="0.1595%" height="15" fill="rgb(229,50,46)" fg:x="854" fg:w="2"/><text x="68.3521%" y="415.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (2 samples, 0.16%)</title><rect x="68.1021%" y="389" width="0.1595%" height="15" fill="rgb(219,145,13)" fg:x="854" fg:w="2"/><text x="68.3521%" y="399.50"></text></g><g><title>engine::session::Session::load_entity (2 samples, 0.16%)</title><rect x="68.1021%" y="373" width="0.1595%" height="15" fill="rgb(220,226,10)" fg:x="854" fg:w="2"/><text x="68.3521%" y="383.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (2 samples, 0.16%)</title><rect x="68.1021%" y="357" width="0.1595%" height="15" fill="rgb(248,47,30)" fg:x="854" fg:w="2"/><text x="68.3521%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="68.1021%" y="341" width="0.1595%" height="15" fill="rgb(231,209,44)" fg:x="854" fg:w="2"/><text x="68.3521%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="68.2616%" y="405" width="0.0797%" height="15" fill="rgb(209,80,30)" fg:x="856" fg:w="1"/><text x="68.5116%" y="415.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (412 samples, 32.85%)</title><rect x="35.5662%" y="565" width="32.8549%" height="15" fill="rgb(232,9,14)" fg:x="446" fg:w="412"/><text x="35.8162%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (412 samples, 32.85%)</title><rect x="35.5662%" y="549" width="32.8549%" height="15" fill="rgb(243,91,43)" fg:x="446" fg:w="412"/><text x="35.8162%" y="559.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (412 samples, 32.85%)</title><rect x="35.5662%" y="533" width="32.8549%" height="15" fill="rgb(231,90,52)" fg:x="446" fg:w="412"/><text x="35.8162%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (412 samples, 32.85%)</title><rect x="35.5662%" y="517" width="32.8549%" height="15" fill="rgb(253,192,44)" fg:x="446" fg:w="412"/><text x="35.8162%" y="527.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (412 samples, 32.85%)</title><rect x="35.5662%" y="501" width="32.8549%" height="15" fill="rgb(241,66,31)" fg:x="446" fg:w="412"/><text x="35.8162%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (411 samples, 32.78%)</title><rect x="35.6459%" y="485" width="32.7751%" height="15" fill="rgb(235,81,37)" fg:x="447" fg:w="411"/><text x="35.8959%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (411 samples, 32.78%)</title><rect x="35.6459%" y="469" width="32.7751%" height="15" fill="rgb(223,221,9)" fg:x="447" fg:w="411"/><text x="35.8959%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnc..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (411 samples, 32.78%)</title><rect x="35.6459%" y="453" width="32.7751%" height="15" fill="rgb(242,180,7)" fg:x="447" fg:w="411"/><text x="35.8959%" y="463.50">&lt;engine::session::state::State as kernel::actions::Pe..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (411 samples, 32.78%)</title><rect x="35.6459%" y="437" width="32.7751%" height="15" fill="rgb(243,78,19)" fg:x="447" fg:w="411"/><text x="35.8959%" y="447.50">&lt;plugins_core::looking::actions::LookAction as kernel..</text></g><g><title>plugins_core::looking::model::new_area_observation (398 samples, 31.74%)</title><rect x="36.6826%" y="421" width="31.7384%" height="15" fill="rgb(233,23,17)" fg:x="460" fg:w="398"/><text x="36.9326%" y="431.50">plugins_core::looking::model::new_area_observation</text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="68.3413%" y="405" width="0.0797%" height="15" fill="rgb(252,122,45)" fg:x="857" fg:w="1"/><text x="68.5913%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.3413%" y="389" width="0.0797%" height="15" fill="rgb(247,108,20)" fg:x="857" fg:w="1"/><text x="68.5913%" y="399.50"></text></g><g><title>plugins_rune::runner::SharedRunners::after (3 samples, 0.24%)</title><rect x="68.4211%" y="565" width="0.2392%" height="15" fill="rgb(235,84,21)" fg:x="858" fg:w="3"/><text x="68.6711%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.8995%" y="533" width="0.0797%" height="15" fill="rgb(247,129,10)" fg:x="864" fg:w="1"/><text x="69.1495%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="68.9793%" y="533" width="0.1595%" height="15" fill="rgb(208,173,14)" fg:x="865" fg:w="2"/><text x="69.2293%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="68.9793%" y="517" width="0.1595%" height="15" fill="rgb(236,31,38)" fg:x="865" fg:w="2"/><text x="69.2293%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="69.0590%" y="501" width="0.0797%" height="15" fill="rgb(232,65,17)" fg:x="866" fg:w="1"/><text x="69.3090%" y="511.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="69.1388%" y="533" width="0.0797%" height="15" fill="rgb(224,45,49)" fg:x="867" fg:w="1"/><text x="69.3888%" y="543.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.1388%" y="517" width="0.0797%" height="15" fill="rgb(225,2,53)" fg:x="867" fg:w="1"/><text x="69.3888%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="69.3780%" y="373" width="0.1595%" height="15" fill="rgb(248,210,53)" fg:x="870" fg:w="2"/><text x="69.6280%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="69.3780%" y="357" width="0.1595%" height="15" fill="rgb(211,1,30)" fg:x="870" fg:w="2"/><text x="69.6280%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="69.3780%" y="341" width="0.1595%" height="15" fill="rgb(224,96,15)" fg:x="870" fg:w="2"/><text x="69.6280%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="69.3780%" y="325" width="0.1595%" height="15" fill="rgb(252,45,11)" fg:x="870" fg:w="2"/><text x="69.6280%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="69.3780%" y="309" width="0.1595%" height="15" fill="rgb(220,125,38)" fg:x="870" fg:w="2"/><text x="69.6280%" y="319.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="69.3780%" y="293" width="0.1595%" height="15" fill="rgb(243,161,33)" fg:x="870" fg:w="2"/><text x="69.6280%" y="303.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="69.3780%" y="277" width="0.1595%" height="15" fill="rgb(248,197,34)" fg:x="870" fg:w="2"/><text x="69.6280%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="69.2982%" y="501" width="0.3190%" height="15" fill="rgb(228,165,23)" fg:x="869" fg:w="4"/><text x="69.5482%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="69.3780%" y="485" width="0.2392%" height="15" fill="rgb(236,94,38)" fg:x="870" fg:w="3"/><text x="69.6280%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="69.3780%" y="469" width="0.2392%" height="15" fill="rgb(220,13,23)" fg:x="870" fg:w="3"/><text x="69.6280%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="69.3780%" y="453" width="0.2392%" height="15" fill="rgb(234,26,39)" fg:x="870" fg:w="3"/><text x="69.6280%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="69.3780%" y="437" width="0.2392%" height="15" fill="rgb(205,117,44)" fg:x="870" fg:w="3"/><text x="69.6280%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.24%)</title><rect x="69.3780%" y="421" width="0.2392%" height="15" fill="rgb(250,42,2)" fg:x="870" fg:w="3"/><text x="69.6280%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.24%)</title><rect x="69.3780%" y="405" width="0.2392%" height="15" fill="rgb(223,83,14)" fg:x="870" fg:w="3"/><text x="69.6280%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.24%)</title><rect x="69.3780%" y="389" width="0.2392%" height="15" fill="rgb(241,147,50)" fg:x="870" fg:w="3"/><text x="69.6280%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="69.5375%" y="373" width="0.0797%" height="15" fill="rgb(218,90,6)" fg:x="872" fg:w="1"/><text x="69.7875%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="69.5375%" y="357" width="0.0797%" height="15" fill="rgb(210,191,5)" fg:x="872" fg:w="1"/><text x="69.7875%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (7 samples, 0.56%)</title><rect x="69.2185%" y="517" width="0.5582%" height="15" fill="rgb(225,139,19)" fg:x="868" fg:w="7"/><text x="69.4685%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="69.6172%" y="501" width="0.1595%" height="15" fill="rgb(210,1,33)" fg:x="873" fg:w="2"/><text x="69.8672%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.6172%" y="485" width="0.1595%" height="15" fill="rgb(213,50,3)" fg:x="873" fg:w="2"/><text x="69.8672%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.6970%" y="469" width="0.0797%" height="15" fill="rgb(234,227,4)" fg:x="874" fg:w="1"/><text x="69.9470%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.6970%" y="453" width="0.0797%" height="15" fill="rgb(246,63,5)" fg:x="874" fg:w="1"/><text x="69.9470%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.6970%" y="437" width="0.0797%" height="15" fill="rgb(245,136,27)" fg:x="874" fg:w="1"/><text x="69.9470%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.6970%" y="421" width="0.0797%" height="15" fill="rgb(247,199,27)" fg:x="874" fg:w="1"/><text x="69.9470%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="69.7767%" y="405" width="0.2392%" height="15" fill="rgb(252,158,49)" fg:x="875" fg:w="3"/><text x="70.0267%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="69.8565%" y="389" width="0.1595%" height="15" fill="rgb(254,73,1)" fg:x="876" fg:w="2"/><text x="70.1065%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="69.8565%" y="373" width="0.1595%" height="15" fill="rgb(248,93,19)" fg:x="876" fg:w="2"/><text x="70.1065%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="69.8565%" y="357" width="0.1595%" height="15" fill="rgb(206,67,5)" fg:x="876" fg:w="2"/><text x="70.1065%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="69.8565%" y="341" width="0.1595%" height="15" fill="rgb(209,210,4)" fg:x="876" fg:w="2"/><text x="70.1065%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="69.8565%" y="325" width="0.1595%" height="15" fill="rgb(214,185,36)" fg:x="876" fg:w="2"/><text x="70.1065%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="69.8565%" y="309" width="0.1595%" height="15" fill="rgb(233,191,26)" fg:x="876" fg:w="2"/><text x="70.1065%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="69.8565%" y="293" width="0.1595%" height="15" fill="rgb(248,94,17)" fg:x="876" fg:w="2"/><text x="70.1065%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="69.8565%" y="277" width="0.1595%" height="15" fill="rgb(250,64,4)" fg:x="876" fg:w="2"/><text x="70.1065%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="69.8565%" y="261" width="0.1595%" height="15" fill="rgb(218,41,53)" fg:x="876" fg:w="2"/><text x="70.1065%" y="271.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="69.8565%" y="245" width="0.1595%" height="15" fill="rgb(251,176,28)" fg:x="876" fg:w="2"/><text x="70.1065%" y="255.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="69.8565%" y="229" width="0.1595%" height="15" fill="rgb(247,22,9)" fg:x="876" fg:w="2"/><text x="70.1065%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="69.7767%" y="421" width="0.3190%" height="15" fill="rgb(218,201,14)" fg:x="875" fg:w="4"/><text x="70.0267%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.0159%" y="405" width="0.0797%" height="15" fill="rgb(218,94,10)" fg:x="878" fg:w="1"/><text x="70.2659%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.0159%" y="389" width="0.0797%" height="15" fill="rgb(222,183,52)" fg:x="878" fg:w="1"/><text x="70.2659%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.40%)</title><rect x="69.7767%" y="453" width="0.3987%" height="15" fill="rgb(242,140,25)" fg:x="875" fg:w="5"/><text x="70.0267%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.40%)</title><rect x="69.7767%" y="437" width="0.3987%" height="15" fill="rgb(235,197,38)" fg:x="875" fg:w="5"/><text x="70.0267%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.0957%" y="421" width="0.0797%" height="15" fill="rgb(237,136,15)" fg:x="879" fg:w="1"/><text x="70.3457%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.0957%" y="405" width="0.0797%" height="15" fill="rgb(223,44,49)" fg:x="879" fg:w="1"/><text x="70.3457%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.0957%" y="389" width="0.0797%" height="15" fill="rgb(227,71,15)" fg:x="879" fg:w="1"/><text x="70.3457%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.0957%" y="373" width="0.0797%" height="15" fill="rgb(225,153,20)" fg:x="879" fg:w="1"/><text x="70.3457%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.0957%" y="357" width="0.0797%" height="15" fill="rgb(210,190,26)" fg:x="879" fg:w="1"/><text x="70.3457%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.0957%" y="341" width="0.0797%" height="15" fill="rgb(223,147,5)" fg:x="879" fg:w="1"/><text x="70.3457%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.0957%" y="325" width="0.0797%" height="15" fill="rgb(207,14,23)" fg:x="879" fg:w="1"/><text x="70.3457%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.0957%" y="309" width="0.0797%" height="15" fill="rgb(211,195,53)" fg:x="879" fg:w="1"/><text x="70.3457%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.0957%" y="293" width="0.0797%" height="15" fill="rgb(237,75,46)" fg:x="879" fg:w="1"/><text x="70.3457%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.0957%" y="277" width="0.0797%" height="15" fill="rgb(254,55,14)" fg:x="879" fg:w="1"/><text x="70.3457%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.0957%" y="261" width="0.0797%" height="15" fill="rgb(230,185,30)" fg:x="879" fg:w="1"/><text x="70.3457%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.1754%" y="357" width="0.0797%" height="15" fill="rgb(220,14,11)" fg:x="880" fg:w="1"/><text x="70.4254%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.1754%" y="341" width="0.0797%" height="15" fill="rgb(215,169,44)" fg:x="880" fg:w="1"/><text x="70.4254%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.1754%" y="325" width="0.0797%" height="15" fill="rgb(253,203,20)" fg:x="880" fg:w="1"/><text x="70.4254%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.1754%" y="309" width="0.0797%" height="15" fill="rgb(229,225,17)" fg:x="880" fg:w="1"/><text x="70.4254%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.1754%" y="293" width="0.0797%" height="15" fill="rgb(236,76,26)" fg:x="880" fg:w="1"/><text x="70.4254%" y="303.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="70.1754%" y="277" width="0.0797%" height="15" fill="rgb(234,15,30)" fg:x="880" fg:w="1"/><text x="70.4254%" y="287.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="70.1754%" y="453" width="0.1595%" height="15" fill="rgb(211,113,48)" fg:x="880" fg:w="2"/><text x="70.4254%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="70.1754%" y="437" width="0.1595%" height="15" fill="rgb(221,31,36)" fg:x="880" fg:w="2"/><text x="70.4254%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.1754%" y="421" width="0.1595%" height="15" fill="rgb(215,118,52)" fg:x="880" fg:w="2"/><text x="70.4254%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="70.1754%" y="405" width="0.1595%" height="15" fill="rgb(241,151,27)" fg:x="880" fg:w="2"/><text x="70.4254%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.1754%" y="389" width="0.1595%" height="15" fill="rgb(253,51,3)" fg:x="880" fg:w="2"/><text x="70.4254%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="70.1754%" y="373" width="0.1595%" height="15" fill="rgb(216,201,24)" fg:x="880" fg:w="2"/><text x="70.4254%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.2552%" y="357" width="0.0797%" height="15" fill="rgb(231,107,4)" fg:x="881" fg:w="1"/><text x="70.5052%" y="367.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="70.3349%" y="453" width="0.0797%" height="15" fill="rgb(243,97,54)" fg:x="882" fg:w="1"/><text x="70.5849%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.4944%" y="309" width="0.0797%" height="15" fill="rgb(221,32,51)" fg:x="884" fg:w="1"/><text x="70.7444%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.4944%" y="293" width="0.0797%" height="15" fill="rgb(218,171,35)" fg:x="884" fg:w="1"/><text x="70.7444%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.4944%" y="277" width="0.0797%" height="15" fill="rgb(214,20,53)" fg:x="884" fg:w="1"/><text x="70.7444%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.4944%" y="261" width="0.0797%" height="15" fill="rgb(239,9,52)" fg:x="884" fg:w="1"/><text x="70.7444%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="70.4147%" y="389" width="0.3190%" height="15" fill="rgb(215,114,45)" fg:x="883" fg:w="4"/><text x="70.6647%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="70.4147%" y="373" width="0.3190%" height="15" fill="rgb(208,118,9)" fg:x="883" fg:w="4"/><text x="70.6647%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="70.4147%" y="357" width="0.3190%" height="15" fill="rgb(235,7,39)" fg:x="883" fg:w="4"/><text x="70.6647%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="70.4944%" y="341" width="0.2392%" height="15" fill="rgb(243,225,15)" fg:x="884" fg:w="3"/><text x="70.7444%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="70.4944%" y="325" width="0.2392%" height="15" fill="rgb(225,216,18)" fg:x="884" fg:w="3"/><text x="70.7444%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="70.5742%" y="309" width="0.1595%" height="15" fill="rgb(233,36,38)" fg:x="885" fg:w="2"/><text x="70.8242%" y="319.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.6539%" y="293" width="0.0797%" height="15" fill="rgb(239,88,23)" fg:x="886" fg:w="1"/><text x="70.9039%" y="303.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="70.6539%" y="277" width="0.0797%" height="15" fill="rgb(219,181,35)" fg:x="886" fg:w="1"/><text x="70.9039%" y="287.50"></text></g><g><title>plugins_core::tools::contained_by (20 samples, 1.59%)</title><rect x="69.2185%" y="533" width="1.5949%" height="15" fill="rgb(215,18,46)" fg:x="868" fg:w="20"/><text x="69.4685%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (13 samples, 1.04%)</title><rect x="69.7767%" y="517" width="1.0367%" height="15" fill="rgb(241,38,11)" fg:x="875" fg:w="13"/><text x="70.0267%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (13 samples, 1.04%)</title><rect x="69.7767%" y="501" width="1.0367%" height="15" fill="rgb(248,169,45)" fg:x="875" fg:w="13"/><text x="70.0267%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (13 samples, 1.04%)</title><rect x="69.7767%" y="485" width="1.0367%" height="15" fill="rgb(239,50,49)" fg:x="875" fg:w="13"/><text x="70.0267%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (13 samples, 1.04%)</title><rect x="69.7767%" y="469" width="1.0367%" height="15" fill="rgb(231,96,31)" fg:x="875" fg:w="13"/><text x="70.0267%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.40%)</title><rect x="70.4147%" y="453" width="0.3987%" height="15" fill="rgb(224,193,37)" fg:x="883" fg:w="5"/><text x="70.6647%" y="463.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="70.4147%" y="437" width="0.3987%" height="15" fill="rgb(227,153,50)" fg:x="883" fg:w="5"/><text x="70.6647%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="70.4147%" y="421" width="0.3987%" height="15" fill="rgb(249,228,3)" fg:x="883" fg:w="5"/><text x="70.6647%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="70.4147%" y="405" width="0.3987%" height="15" fill="rgb(219,164,43)" fg:x="883" fg:w="5"/><text x="70.6647%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.7337%" y="389" width="0.0797%" height="15" fill="rgb(216,45,41)" fg:x="887" fg:w="1"/><text x="70.9837%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.8134%" y="501" width="0.0797%" height="15" fill="rgb(210,226,51)" fg:x="888" fg:w="1"/><text x="71.0634%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.8134%" y="485" width="0.0797%" height="15" fill="rgb(209,117,49)" fg:x="888" fg:w="1"/><text x="71.0634%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.8134%" y="469" width="0.0797%" height="15" fill="rgb(206,196,24)" fg:x="888" fg:w="1"/><text x="71.0634%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.8134%" y="453" width="0.0797%" height="15" fill="rgb(253,218,3)" fg:x="888" fg:w="1"/><text x="71.0634%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.8134%" y="437" width="0.0797%" height="15" fill="rgb(252,166,2)" fg:x="888" fg:w="1"/><text x="71.0634%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.8134%" y="421" width="0.0797%" height="15" fill="rgb(236,218,26)" fg:x="888" fg:w="1"/><text x="71.0634%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.8134%" y="405" width="0.0797%" height="15" fill="rgb(254,84,19)" fg:x="888" fg:w="1"/><text x="71.0634%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.8134%" y="389" width="0.0797%" height="15" fill="rgb(219,137,29)" fg:x="888" fg:w="1"/><text x="71.0634%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.8134%" y="373" width="0.0797%" height="15" fill="rgb(227,47,52)" fg:x="888" fg:w="1"/><text x="71.0634%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.8134%" y="357" width="0.0797%" height="15" fill="rgb(229,167,24)" fg:x="888" fg:w="1"/><text x="71.0634%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="70.8134%" y="341" width="0.0797%" height="15" fill="rgb(233,164,1)" fg:x="888" fg:w="1"/><text x="71.0634%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="70.8134%" y="325" width="0.0797%" height="15" fill="rgb(218,88,48)" fg:x="888" fg:w="1"/><text x="71.0634%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.9729%" y="469" width="0.0797%" height="15" fill="rgb(226,214,24)" fg:x="890" fg:w="1"/><text x="71.2229%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.9729%" y="453" width="0.0797%" height="15" fill="rgb(233,29,12)" fg:x="890" fg:w="1"/><text x="71.2229%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="71.0526%" y="469" width="0.0797%" height="15" fill="rgb(219,120,34)" fg:x="891" fg:w="1"/><text x="71.3026%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="71.0526%" y="453" width="0.0797%" height="15" fill="rgb(226,78,44)" fg:x="891" fg:w="1"/><text x="71.3026%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="71.0526%" y="437" width="0.0797%" height="15" fill="rgb(240,15,48)" fg:x="891" fg:w="1"/><text x="71.3026%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.0526%" y="421" width="0.0797%" height="15" fill="rgb(253,176,7)" fg:x="891" fg:w="1"/><text x="71.3026%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.0526%" y="405" width="0.0797%" height="15" fill="rgb(206,166,28)" fg:x="891" fg:w="1"/><text x="71.3026%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.0526%" y="389" width="0.0797%" height="15" fill="rgb(241,53,51)" fg:x="891" fg:w="1"/><text x="71.3026%" y="399.50"></text></g><g><title>plugins_core::tools::occupied_by (6 samples, 0.48%)</title><rect x="70.8134%" y="533" width="0.4785%" height="15" fill="rgb(249,112,30)" fg:x="888" fg:w="6"/><text x="71.0634%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (6 samples, 0.48%)</title><rect x="70.8134%" y="517" width="0.4785%" height="15" fill="rgb(217,85,30)" fg:x="888" fg:w="6"/><text x="71.0634%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="70.8931%" y="501" width="0.3987%" height="15" fill="rgb(233,49,7)" fg:x="889" fg:w="5"/><text x="71.1431%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="70.8931%" y="485" width="0.3987%" height="15" fill="rgb(234,109,9)" fg:x="889" fg:w="5"/><text x="71.1431%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.1324%" y="469" width="0.1595%" height="15" fill="rgb(253,95,22)" fg:x="892" fg:w="2"/><text x="71.3824%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.1324%" y="453" width="0.1595%" height="15" fill="rgb(233,176,25)" fg:x="892" fg:w="2"/><text x="71.3824%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="71.2121%" y="437" width="0.0797%" height="15" fill="rgb(236,33,39)" fg:x="893" fg:w="1"/><text x="71.4621%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="71.2919%" y="501" width="0.0797%" height="15" fill="rgb(223,226,42)" fg:x="894" fg:w="1"/><text x="71.5419%" y="511.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (33 samples, 2.63%)</title><rect x="68.8198%" y="549" width="2.6316%" height="15" fill="rgb(216,99,33)" fg:x="863" fg:w="33"/><text x="69.0698%" y="559.50">pl..</text></g><g><title>plugins_core::tools::worn_by (2 samples, 0.16%)</title><rect x="71.2919%" y="533" width="0.1595%" height="15" fill="rgb(235,84,23)" fg:x="894" fg:w="2"/><text x="71.5419%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="71.2919%" y="517" width="0.1595%" height="15" fill="rgb(232,2,27)" fg:x="894" fg:w="2"/><text x="71.5419%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.3716%" y="501" width="0.0797%" height="15" fill="rgb(241,23,22)" fg:x="895" fg:w="1"/><text x="71.6216%" y="511.50"></text></g><g><title>engine::session::Session::captured (476 samples, 37.96%)</title><rect x="33.5726%" y="709" width="37.9585%" height="15" fill="rgb(211,73,27)" fg:x="421" fg:w="476"/><text x="33.8226%" y="719.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (474 samples, 37.80%)</title><rect x="33.7321%" y="693" width="37.7990%" height="15" fill="rgb(235,109,49)" fg:x="423" fg:w="474"/><text x="33.9821%" y="703.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (471 samples, 37.56%)</title><rect x="33.9713%" y="677" width="37.5598%" height="15" fill="rgb(230,99,29)" fg:x="426" fg:w="471"/><text x="34.2213%" y="687.50">tracing_core::dispatcher::with_default</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (470 samples, 37.48%)</title><rect x="34.0510%" y="661" width="37.4801%" height="15" fill="rgb(245,199,7)" fg:x="427" fg:w="470"/><text x="34.3010%" y="671.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::per..</text></g><g><title>kernel::plugins::mw::apply_middleware (470 samples, 37.48%)</title><rect x="34.0510%" y="645" width="37.4801%" height="15" fill="rgb(217,179,10)" fg:x="427" fg:w="470"/><text x="34.3010%" y="655.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (469 samples, 37.40%)</title><rect x="34.1308%" y="629" width="37.4003%" height="15" fill="rgb(254,99,47)" fg:x="428" fg:w="469"/><text x="34.3808%" y="639.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (469 samples, 37.40%)</title><rect x="34.1308%" y="613" width="37.4003%" height="15" fill="rgb(251,121,7)" fg:x="428" fg:w="469"/><text x="34.3808%" y="623.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plu..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (453 samples, 36.12%)</title><rect x="35.4067%" y="597" width="36.1244%" height="15" fill="rgb(250,177,26)" fg:x="444" fg:w="453"/><text x="35.6567%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (452 samples, 36.04%)</title><rect x="35.4864%" y="581" width="36.0447%" height="15" fill="rgb(232,88,15)" fg:x="445" fg:w="452"/><text x="35.7364%" y="591.50">&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middl..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (36 samples, 2.87%)</title><rect x="68.6603%" y="565" width="2.8708%" height="15" fill="rgb(251,54,54)" fg:x="861" fg:w="36"/><text x="68.9103%" y="575.50">pl..</text></g><g><title>plugins_rune::sources::load_sources_from_entity (1 samples, 0.08%)</title><rect x="71.4514%" y="549" width="0.0797%" height="15" fill="rgb(208,177,15)" fg:x="896" fg:w="1"/><text x="71.7014%" y="559.50"></text></g><g><title>plugins_rune::sources::get_script (1 samples, 0.08%)</title><rect x="71.4514%" y="533" width="0.0797%" height="15" fill="rgb(205,97,32)" fg:x="896" fg:w="1"/><text x="71.7014%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="71.4514%" y="517" width="0.0797%" height="15" fill="rgb(217,192,13)" fg:x="896" fg:w="1"/><text x="71.7014%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="71.4514%" y="501" width="0.0797%" height="15" fill="rgb(215,163,41)" fg:x="896" fg:w="1"/><text x="71.7014%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="71.4514%" y="485" width="0.0797%" height="15" fill="rgb(246,83,29)" fg:x="896" fg:w="1"/><text x="71.7014%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.6108%" y="645" width="0.0797%" height="15" fill="rgb(219,2,45)" fg:x="898" fg:w="1"/><text x="71.8608%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.6108%" y="629" width="0.0797%" height="15" fill="rgb(242,215,33)" fg:x="898" fg:w="1"/><text x="71.8608%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.6108%" y="613" width="0.0797%" height="15" fill="rgb(217,1,6)" fg:x="898" fg:w="1"/><text x="71.8608%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.6108%" y="597" width="0.0797%" height="15" fill="rgb(207,85,52)" fg:x="898" fg:w="1"/><text x="71.8608%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.6108%" y="581" width="0.0797%" height="15" fill="rgb(231,171,19)" fg:x="898" fg:w="1"/><text x="71.8608%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.6108%" y="565" width="0.0797%" height="15" fill="rgb(207,128,4)" fg:x="898" fg:w="1"/><text x="71.8608%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.6108%" y="549" width="0.0797%" height="15" fill="rgb(219,208,4)" fg:x="898" fg:w="1"/><text x="71.8608%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.6108%" y="533" width="0.0797%" height="15" fill="rgb(235,161,42)" fg:x="898" fg:w="1"/><text x="71.8608%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.6108%" y="517" width="0.0797%" height="15" fill="rgb(247,218,18)" fg:x="898" fg:w="1"/><text x="71.8608%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.6108%" y="501" width="0.0797%" height="15" fill="rgb(232,114,51)" fg:x="898" fg:w="1"/><text x="71.8608%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.6108%" y="485" width="0.0797%" height="15" fill="rgb(222,95,3)" fg:x="898" fg:w="1"/><text x="71.8608%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.6108%" y="469" width="0.0797%" height="15" fill="rgb(240,65,29)" fg:x="898" fg:w="1"/><text x="71.8608%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.6108%" y="453" width="0.0797%" height="15" fill="rgb(249,209,20)" fg:x="898" fg:w="1"/><text x="71.8608%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.6108%" y="437" width="0.0797%" height="15" fill="rgb(241,48,37)" fg:x="898" fg:w="1"/><text x="71.8608%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.6108%" y="421" width="0.0797%" height="15" fill="rgb(230,140,42)" fg:x="898" fg:w="1"/><text x="71.8608%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.6108%" y="405" width="0.0797%" height="15" fill="rgb(230,176,45)" fg:x="898" fg:w="1"/><text x="71.8608%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.6108%" y="661" width="0.1595%" height="15" fill="rgb(245,112,21)" fg:x="898" fg:w="2"/><text x="71.8608%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.6906%" y="645" width="0.0797%" height="15" fill="rgb(207,183,35)" fg:x="899" fg:w="1"/><text x="71.9406%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.6906%" y="629" width="0.0797%" height="15" fill="rgb(227,44,33)" fg:x="899" fg:w="1"/><text x="71.9406%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.6906%" y="613" width="0.0797%" height="15" fill="rgb(246,120,21)" fg:x="899" fg:w="1"/><text x="71.9406%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.6906%" y="597" width="0.0797%" height="15" fill="rgb(235,57,52)" fg:x="899" fg:w="1"/><text x="71.9406%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.6906%" y="581" width="0.0797%" height="15" fill="rgb(238,84,10)" fg:x="899" fg:w="1"/><text x="71.9406%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.6906%" y="565" width="0.0797%" height="15" fill="rgb(251,200,32)" fg:x="899" fg:w="1"/><text x="71.9406%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.6906%" y="549" width="0.0797%" height="15" fill="rgb(247,159,13)" fg:x="899" fg:w="1"/><text x="71.9406%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.6906%" y="533" width="0.0797%" height="15" fill="rgb(238,64,4)" fg:x="899" fg:w="1"/><text x="71.9406%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.6906%" y="517" width="0.0797%" height="15" fill="rgb(221,131,51)" fg:x="899" fg:w="1"/><text x="71.9406%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.6906%" y="501" width="0.0797%" height="15" fill="rgb(242,5,29)" fg:x="899" fg:w="1"/><text x="71.9406%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.6906%" y="485" width="0.0797%" height="15" fill="rgb(214,130,32)" fg:x="899" fg:w="1"/><text x="71.9406%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.6906%" y="469" width="0.0797%" height="15" fill="rgb(244,210,16)" fg:x="899" fg:w="1"/><text x="71.9406%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.7703%" y="549" width="0.0797%" height="15" fill="rgb(234,48,26)" fg:x="900" fg:w="1"/><text x="72.0203%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.7703%" y="533" width="0.0797%" height="15" fill="rgb(231,82,38)" fg:x="900" fg:w="1"/><text x="72.0203%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.7703%" y="517" width="0.0797%" height="15" fill="rgb(254,128,41)" fg:x="900" fg:w="1"/><text x="72.0203%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.7703%" y="501" width="0.0797%" height="15" fill="rgb(212,73,49)" fg:x="900" fg:w="1"/><text x="72.0203%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.7703%" y="485" width="0.0797%" height="15" fill="rgb(205,62,54)" fg:x="900" fg:w="1"/><text x="72.0203%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.7703%" y="469" width="0.0797%" height="15" fill="rgb(228,0,8)" fg:x="900" fg:w="1"/><text x="72.0203%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="71.7703%" y="453" width="0.0797%" height="15" fill="rgb(251,28,17)" fg:x="900" fg:w="1"/><text x="72.0203%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="71.7703%" y="437" width="0.0797%" height="15" fill="rgb(238,105,27)" fg:x="900" fg:w="1"/><text x="72.0203%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.7703%" y="565" width="0.1595%" height="15" fill="rgb(237,216,33)" fg:x="900" fg:w="2"/><text x="72.0203%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.8501%" y="549" width="0.0797%" height="15" fill="rgb(229,228,25)" fg:x="901" fg:w="1"/><text x="72.1001%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.8501%" y="533" width="0.0797%" height="15" fill="rgb(233,75,23)" fg:x="901" fg:w="1"/><text x="72.1001%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.8501%" y="517" width="0.0797%" height="15" fill="rgb(231,207,16)" fg:x="901" fg:w="1"/><text x="72.1001%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.8501%" y="501" width="0.0797%" height="15" fill="rgb(231,191,45)" fg:x="901" fg:w="1"/><text x="72.1001%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.8501%" y="485" width="0.0797%" height="15" fill="rgb(224,133,17)" fg:x="901" fg:w="1"/><text x="72.1001%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.8501%" y="469" width="0.0797%" height="15" fill="rgb(209,178,27)" fg:x="901" fg:w="1"/><text x="72.1001%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.8501%" y="453" width="0.0797%" height="15" fill="rgb(218,37,11)" fg:x="901" fg:w="1"/><text x="72.1001%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.8501%" y="437" width="0.0797%" height="15" fill="rgb(251,226,25)" fg:x="901" fg:w="1"/><text x="72.1001%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.8501%" y="421" width="0.0797%" height="15" fill="rgb(209,222,27)" fg:x="901" fg:w="1"/><text x="72.1001%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.8501%" y="405" width="0.0797%" height="15" fill="rgb(238,22,21)" fg:x="901" fg:w="1"/><text x="72.1001%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.8501%" y="389" width="0.0797%" height="15" fill="rgb(233,161,25)" fg:x="901" fg:w="1"/><text x="72.1001%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.8501%" y="373" width="0.0797%" height="15" fill="rgb(226,122,53)" fg:x="901" fg:w="1"/><text x="72.1001%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.8501%" y="357" width="0.0797%" height="15" fill="rgb(220,123,17)" fg:x="901" fg:w="1"/><text x="72.1001%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.8501%" y="341" width="0.0797%" height="15" fill="rgb(230,224,35)" fg:x="901" fg:w="1"/><text x="72.1001%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="71.9298%" y="517" width="0.1595%" height="15" fill="rgb(246,83,8)" fg:x="902" fg:w="2"/><text x="72.1798%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="71.9298%" y="501" width="0.1595%" height="15" fill="rgb(230,214,17)" fg:x="902" fg:w="2"/><text x="72.1798%" y="511.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="71.9298%" y="485" width="0.1595%" height="15" fill="rgb(222,97,18)" fg:x="902" fg:w="2"/><text x="72.1798%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.0096%" y="469" width="0.0797%" height="15" fill="rgb(206,79,1)" fg:x="903" fg:w="1"/><text x="72.2596%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.0096%" y="453" width="0.0797%" height="15" fill="rgb(214,121,34)" fg:x="903" fg:w="1"/><text x="72.2596%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.0096%" y="437" width="0.0797%" height="15" fill="rgb(249,199,46)" fg:x="903" fg:w="1"/><text x="72.2596%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.0096%" y="421" width="0.0797%" height="15" fill="rgb(214,222,46)" fg:x="903" fg:w="1"/><text x="72.2596%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.0096%" y="405" width="0.0797%" height="15" fill="rgb(248,168,30)" fg:x="903" fg:w="1"/><text x="72.2596%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.0096%" y="389" width="0.0797%" height="15" fill="rgb(226,14,28)" fg:x="903" fg:w="1"/><text x="72.2596%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.0096%" y="373" width="0.0797%" height="15" fill="rgb(253,123,1)" fg:x="903" fg:w="1"/><text x="72.2596%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.0096%" y="357" width="0.0797%" height="15" fill="rgb(225,24,42)" fg:x="903" fg:w="1"/><text x="72.2596%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="72.0096%" y="341" width="0.0797%" height="15" fill="rgb(216,161,37)" fg:x="903" fg:w="1"/><text x="72.2596%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="72.0096%" y="325" width="0.0797%" height="15" fill="rgb(251,164,26)" fg:x="903" fg:w="1"/><text x="72.2596%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="72.0096%" y="309" width="0.0797%" height="15" fill="rgb(219,177,3)" fg:x="903" fg:w="1"/><text x="72.2596%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="72.0096%" y="293" width="0.0797%" height="15" fill="rgb(222,65,0)" fg:x="903" fg:w="1"/><text x="72.2596%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.0096%" y="277" width="0.0797%" height="15" fill="rgb(223,69,54)" fg:x="903" fg:w="1"/><text x="72.2596%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="71.7703%" y="613" width="0.3987%" height="15" fill="rgb(235,30,27)" fg:x="900" fg:w="5"/><text x="72.0203%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="71.7703%" y="597" width="0.3987%" height="15" fill="rgb(220,183,50)" fg:x="900" fg:w="5"/><text x="72.0203%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (5 samples, 0.40%)</title><rect x="71.7703%" y="581" width="0.3987%" height="15" fill="rgb(248,198,15)" fg:x="900" fg:w="5"/><text x="72.0203%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="71.9298%" y="565" width="0.2392%" height="15" fill="rgb(222,211,4)" fg:x="902" fg:w="3"/><text x="72.1798%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="71.9298%" y="549" width="0.2392%" height="15" fill="rgb(214,102,34)" fg:x="902" fg:w="3"/><text x="72.1798%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="71.9298%" y="533" width="0.2392%" height="15" fill="rgb(245,92,5)" fg:x="902" fg:w="3"/><text x="72.1798%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.0893%" y="517" width="0.0797%" height="15" fill="rgb(252,72,51)" fg:x="904" fg:w="1"/><text x="72.3393%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.0893%" y="501" width="0.0797%" height="15" fill="rgb(252,208,19)" fg:x="904" fg:w="1"/><text x="72.3393%" y="511.50"></text></g><g><title>engine::session::internal::Added::find_refs (8 samples, 0.64%)</title><rect x="71.6108%" y="693" width="0.6380%" height="15" fill="rgb(211,69,7)" fg:x="898" fg:w="8"/><text x="71.8608%" y="703.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (8 samples, 0.64%)</title><rect x="71.6108%" y="677" width="0.6380%" height="15" fill="rgb(211,27,16)" fg:x="898" fg:w="8"/><text x="71.8608%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="71.7703%" y="661" width="0.4785%" height="15" fill="rgb(219,216,14)" fg:x="900" fg:w="6"/><text x="72.0203%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.48%)</title><rect x="71.7703%" y="645" width="0.4785%" height="15" fill="rgb(219,71,8)" fg:x="900" fg:w="6"/><text x="72.0203%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (6 samples, 0.48%)</title><rect x="71.7703%" y="629" width="0.4785%" height="15" fill="rgb(223,170,53)" fg:x="900" fg:w="6"/><text x="72.0203%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.1691%" y="613" width="0.0797%" height="15" fill="rgb(246,21,26)" fg:x="905" fg:w="1"/><text x="72.4191%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.1691%" y="597" width="0.0797%" height="15" fill="rgb(248,20,46)" fg:x="905" fg:w="1"/><text x="72.4191%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="72.1691%" y="581" width="0.0797%" height="15" fill="rgb(252,94,11)" fg:x="905" fg:w="1"/><text x="72.4191%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.1691%" y="565" width="0.0797%" height="15" fill="rgb(236,163,8)" fg:x="905" fg:w="1"/><text x="72.4191%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="72.1691%" y="549" width="0.0797%" height="15" fill="rgb(217,221,45)" fg:x="905" fg:w="1"/><text x="72.4191%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="72.1691%" y="533" width="0.0797%" height="15" fill="rgb(238,38,17)" fg:x="905" fg:w="1"/><text x="72.4191%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.1691%" y="517" width="0.0797%" height="15" fill="rgb(242,210,23)" fg:x="905" fg:w="1"/><text x="72.4191%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="72.2488%" y="677" width="0.1595%" height="15" fill="rgb(250,86,53)" fg:x="906" fg:w="2"/><text x="72.4988%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="72.2488%" y="661" width="0.1595%" height="15" fill="rgb(223,168,25)" fg:x="906" fg:w="2"/><text x="72.4988%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="72.2488%" y="645" width="0.1595%" height="15" fill="rgb(251,189,4)" fg:x="906" fg:w="2"/><text x="72.4988%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="72.2488%" y="629" width="0.1595%" height="15" fill="rgb(245,19,28)" fg:x="906" fg:w="2"/><text x="72.4988%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="72.2488%" y="613" width="0.1595%" height="15" fill="rgb(207,10,34)" fg:x="906" fg:w="2"/><text x="72.4988%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.3285%" y="597" width="0.0797%" height="15" fill="rgb(235,153,31)" fg:x="907" fg:w="1"/><text x="72.5785%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.3285%" y="581" width="0.0797%" height="15" fill="rgb(228,72,37)" fg:x="907" fg:w="1"/><text x="72.5785%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.3285%" y="565" width="0.0797%" height="15" fill="rgb(215,15,16)" fg:x="907" fg:w="1"/><text x="72.5785%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.3285%" y="549" width="0.0797%" height="15" fill="rgb(250,119,29)" fg:x="907" fg:w="1"/><text x="72.5785%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.3285%" y="533" width="0.0797%" height="15" fill="rgb(214,59,1)" fg:x="907" fg:w="1"/><text x="72.5785%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.3285%" y="517" width="0.0797%" height="15" fill="rgb(223,109,25)" fg:x="907" fg:w="1"/><text x="72.5785%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.3285%" y="501" width="0.0797%" height="15" fill="rgb(230,198,22)" fg:x="907" fg:w="1"/><text x="72.5785%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="72.3285%" y="485" width="0.0797%" height="15" fill="rgb(245,184,46)" fg:x="907" fg:w="1"/><text x="72.5785%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="72.3285%" y="469" width="0.0797%" height="15" fill="rgb(253,73,16)" fg:x="907" fg:w="1"/><text x="72.5785%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="72.3285%" y="453" width="0.0797%" height="15" fill="rgb(206,94,45)" fg:x="907" fg:w="1"/><text x="72.5785%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="72.3285%" y="437" width="0.0797%" height="15" fill="rgb(236,83,27)" fg:x="907" fg:w="1"/><text x="72.5785%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.3285%" y="421" width="0.0797%" height="15" fill="rgb(220,196,8)" fg:x="907" fg:w="1"/><text x="72.5785%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.5678%" y="517" width="0.0797%" height="15" fill="rgb(254,185,14)" fg:x="910" fg:w="1"/><text x="72.8178%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.5678%" y="501" width="0.0797%" height="15" fill="rgb(226,50,22)" fg:x="910" fg:w="1"/><text x="72.8178%" y="511.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="72.6475%" y="517" width="0.0797%" height="15" fill="rgb(253,147,0)" fg:x="911" fg:w="1"/><text x="72.8975%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="72.6475%" y="501" width="0.0797%" height="15" fill="rgb(252,46,33)" fg:x="911" fg:w="1"/><text x="72.8975%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="72.5678%" y="549" width="0.2392%" height="15" fill="rgb(242,22,54)" fg:x="910" fg:w="3"/><text x="72.8178%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="72.5678%" y="533" width="0.2392%" height="15" fill="rgb(223,178,32)" fg:x="910" fg:w="3"/><text x="72.8178%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.7273%" y="517" width="0.0797%" height="15" fill="rgb(214,106,53)" fg:x="912" fg:w="1"/><text x="72.9773%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::from_value (6 samples, 0.48%)</title><rect x="72.4083%" y="677" width="0.4785%" height="15" fill="rgb(232,65,50)" fg:x="908" fg:w="6"/><text x="72.6583%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.48%)</title><rect x="72.4083%" y="661" width="0.4785%" height="15" fill="rgb(231,110,28)" fg:x="908" fg:w="6"/><text x="72.6583%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="72.4083%" y="645" width="0.4785%" height="15" fill="rgb(216,71,40)" fg:x="908" fg:w="6"/><text x="72.6583%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.40%)</title><rect x="72.4880%" y="629" width="0.3987%" height="15" fill="rgb(229,89,53)" fg:x="909" fg:w="5"/><text x="72.7380%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="72.4880%" y="613" width="0.3987%" height="15" fill="rgb(210,124,14)" fg:x="909" fg:w="5"/><text x="72.7380%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (5 samples, 0.40%)</title><rect x="72.4880%" y="597" width="0.3987%" height="15" fill="rgb(236,213,6)" fg:x="909" fg:w="5"/><text x="72.7380%" y="607.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="72.5678%" y="581" width="0.3190%" height="15" fill="rgb(228,41,5)" fg:x="910" fg:w="4"/><text x="72.8178%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="72.5678%" y="565" width="0.3190%" height="15" fill="rgb(221,167,25)" fg:x="910" fg:w="4"/><text x="72.8178%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.8070%" y="549" width="0.0797%" height="15" fill="rgb(228,144,37)" fg:x="913" fg:w="1"/><text x="73.0570%" y="559.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="72.8868%" y="677" width="0.0797%" height="15" fill="rgb(227,189,38)" fg:x="914" fg:w="1"/><text x="73.1368%" y="687.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.0463%" y="533" width="0.0797%" height="15" fill="rgb(218,8,2)" fg:x="916" fg:w="1"/><text x="73.2963%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.0463%" y="517" width="0.0797%" height="15" fill="rgb(209,61,28)" fg:x="916" fg:w="1"/><text x="73.2963%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="72.9665%" y="549" width="0.3190%" height="15" fill="rgb(233,140,39)" fg:x="915" fg:w="4"/><text x="73.2165%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.1260%" y="533" width="0.1595%" height="15" fill="rgb(251,66,48)" fg:x="917" fg:w="2"/><text x="73.3760%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.2057%" y="517" width="0.0797%" height="15" fill="rgb(210,44,45)" fg:x="918" fg:w="1"/><text x="73.4557%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.2057%" y="501" width="0.0797%" height="15" fill="rgb(214,136,46)" fg:x="918" fg:w="1"/><text x="73.4557%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.2057%" y="485" width="0.0797%" height="15" fill="rgb(207,130,50)" fg:x="918" fg:w="1"/><text x="73.4557%" y="495.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="73.2057%" y="469" width="0.0797%" height="15" fill="rgb(228,102,49)" fg:x="918" fg:w="1"/><text x="73.4557%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="72.9665%" y="581" width="0.3987%" height="15" fill="rgb(253,55,1)" fg:x="915" fg:w="5"/><text x="73.2165%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="72.9665%" y="565" width="0.3987%" height="15" fill="rgb(238,222,9)" fg:x="915" fg:w="5"/><text x="73.2165%" y="575.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.2855%" y="549" width="0.0797%" height="15" fill="rgb(246,99,6)" fg:x="919" fg:w="1"/><text x="73.5355%" y="559.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="73.2855%" y="533" width="0.0797%" height="15" fill="rgb(219,110,26)" fg:x="919" fg:w="1"/><text x="73.5355%" y="543.50"></text></g><g><title>engine::session::Session::load_entity (24 samples, 1.91%)</title><rect x="71.5311%" y="709" width="1.9139%" height="15" fill="rgb(239,160,33)" fg:x="897" fg:w="24"/><text x="71.7811%" y="719.50">e..</text></g><g><title>engine::session::internal::Entities::add_persisted (15 samples, 1.20%)</title><rect x="72.2488%" y="693" width="1.1962%" height="15" fill="rgb(220,202,23)" fg:x="906" fg:w="15"/><text x="72.4988%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (6 samples, 0.48%)</title><rect x="72.9665%" y="677" width="0.4785%" height="15" fill="rgb(208,80,26)" fg:x="915" fg:w="6"/><text x="73.2165%" y="687.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.48%)</title><rect x="72.9665%" y="661" width="0.4785%" height="15" fill="rgb(243,85,7)" fg:x="915" fg:w="6"/><text x="73.2165%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="72.9665%" y="645" width="0.4785%" height="15" fill="rgb(228,77,47)" fg:x="915" fg:w="6"/><text x="73.2165%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="72.9665%" y="629" width="0.4785%" height="15" fill="rgb(212,226,8)" fg:x="915" fg:w="6"/><text x="73.2165%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="72.9665%" y="613" width="0.4785%" height="15" fill="rgb(241,120,54)" fg:x="915" fg:w="6"/><text x="73.2165%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="72.9665%" y="597" width="0.4785%" height="15" fill="rgb(226,80,16)" fg:x="915" fg:w="6"/><text x="73.2165%" y="607.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.3652%" y="581" width="0.0797%" height="15" fill="rgb(240,76,13)" fg:x="920" fg:w="1"/><text x="73.6152%" y="591.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="73.3652%" y="565" width="0.0797%" height="15" fill="rgb(252,74,8)" fg:x="920" fg:w="1"/><text x="73.6152%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="73.4450%" y="677" width="0.0797%" height="15" fill="rgb(244,155,2)" fg:x="921" fg:w="1"/><text x="73.6950%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="73.4450%" y="693" width="0.2392%" height="15" fill="rgb(215,81,35)" fg:x="921" fg:w="3"/><text x="73.6950%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="73.5247%" y="677" width="0.1595%" height="15" fill="rgb(206,55,2)" fg:x="922" fg:w="2"/><text x="73.7747%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="73.5247%" y="661" width="0.1595%" height="15" fill="rgb(231,2,34)" fg:x="922" fg:w="2"/><text x="73.7747%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="73.5247%" y="645" width="0.1595%" height="15" fill="rgb(242,176,48)" fg:x="922" fg:w="2"/><text x="73.7747%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="73.5247%" y="629" width="0.1595%" height="15" fill="rgb(249,31,36)" fg:x="922" fg:w="2"/><text x="73.7747%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.6045%" y="613" width="0.0797%" height="15" fill="rgb(205,18,17)" fg:x="923" fg:w="1"/><text x="73.8545%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="73.6045%" y="597" width="0.0797%" height="15" fill="rgb(254,130,5)" fg:x="923" fg:w="1"/><text x="73.8545%" y="607.50"></text></g><g><title>engine::users::model::username_to_key (4 samples, 0.32%)</title><rect x="73.4450%" y="709" width="0.3190%" height="15" fill="rgb(229,42,45)" fg:x="921" fg:w="4"/><text x="73.6950%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.6842%" y="693" width="0.0797%" height="15" fill="rgb(245,95,25)" fg:x="924" fg:w="1"/><text x="73.9342%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.7640%" y="661" width="0.0797%" height="15" fill="rgb(249,193,38)" fg:x="925" fg:w="1"/><text x="74.0140%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.7640%" y="645" width="0.0797%" height="15" fill="rgb(241,140,43)" fg:x="925" fg:w="1"/><text x="74.0140%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.7640%" y="629" width="0.0797%" height="15" fill="rgb(245,78,48)" fg:x="925" fg:w="1"/><text x="74.0140%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.7640%" y="613" width="0.0797%" height="15" fill="rgb(214,92,39)" fg:x="925" fg:w="1"/><text x="74.0140%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.7640%" y="597" width="0.0797%" height="15" fill="rgb(211,189,14)" fg:x="925" fg:w="1"/><text x="74.0140%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.7640%" y="581" width="0.0797%" height="15" fill="rgb(218,7,24)" fg:x="925" fg:w="1"/><text x="74.0140%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.7640%" y="565" width="0.0797%" height="15" fill="rgb(224,200,49)" fg:x="925" fg:w="1"/><text x="74.0140%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.7640%" y="549" width="0.0797%" height="15" fill="rgb(218,210,14)" fg:x="925" fg:w="1"/><text x="74.0140%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.7640%" y="533" width="0.0797%" height="15" fill="rgb(234,142,31)" fg:x="925" fg:w="1"/><text x="74.0140%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.7640%" y="517" width="0.0797%" height="15" fill="rgb(227,165,2)" fg:x="925" fg:w="1"/><text x="74.0140%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.7640%" y="501" width="0.0797%" height="15" fill="rgb(232,44,46)" fg:x="925" fg:w="1"/><text x="74.0140%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.7640%" y="485" width="0.0797%" height="15" fill="rgb(236,149,47)" fg:x="925" fg:w="1"/><text x="74.0140%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.7640%" y="469" width="0.0797%" height="15" fill="rgb(227,45,31)" fg:x="925" fg:w="1"/><text x="74.0140%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="73.8437%" y="661" width="0.0797%" height="15" fill="rgb(240,176,51)" fg:x="926" fg:w="1"/><text x="74.0937%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.8437%" y="645" width="0.0797%" height="15" fill="rgb(249,146,41)" fg:x="926" fg:w="1"/><text x="74.0937%" y="655.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="73.9234%" y="661" width="0.0797%" height="15" fill="rgb(213,208,4)" fg:x="927" fg:w="1"/><text x="74.1734%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.9234%" y="645" width="0.0797%" height="15" fill="rgb(245,84,36)" fg:x="927" fg:w="1"/><text x="74.1734%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="73.9234%" y="629" width="0.0797%" height="15" fill="rgb(254,84,18)" fg:x="927" fg:w="1"/><text x="74.1734%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.0032%" y="581" width="0.0797%" height="15" fill="rgb(225,38,54)" fg:x="928" fg:w="1"/><text x="74.2532%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="74.0032%" y="565" width="0.0797%" height="15" fill="rgb(246,50,30)" fg:x="928" fg:w="1"/><text x="74.2532%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="74.0032%" y="549" width="0.0797%" height="15" fill="rgb(246,148,9)" fg:x="928" fg:w="1"/><text x="74.2532%" y="559.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="74.0032%" y="661" width="0.1595%" height="15" fill="rgb(223,75,4)" fg:x="928" fg:w="2"/><text x="74.2532%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="74.0032%" y="645" width="0.1595%" height="15" fill="rgb(239,148,41)" fg:x="928" fg:w="2"/><text x="74.2532%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.0032%" y="629" width="0.1595%" height="15" fill="rgb(205,195,3)" fg:x="928" fg:w="2"/><text x="74.2532%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="74.0032%" y="613" width="0.1595%" height="15" fill="rgb(254,161,1)" fg:x="928" fg:w="2"/><text x="74.2532%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.0032%" y="597" width="0.1595%" height="15" fill="rgb(211,229,8)" fg:x="928" fg:w="2"/><text x="74.2532%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.0829%" y="581" width="0.0797%" height="15" fill="rgb(220,97,9)" fg:x="929" fg:w="1"/><text x="74.3329%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.0829%" y="565" width="0.0797%" height="15" fill="rgb(240,218,8)" fg:x="929" fg:w="1"/><text x="74.3329%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.0829%" y="549" width="0.0797%" height="15" fill="rgb(250,44,0)" fg:x="929" fg:w="1"/><text x="74.3329%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="74.0829%" y="533" width="0.0797%" height="15" fill="rgb(236,41,53)" fg:x="929" fg:w="1"/><text x="74.3329%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="74.1627%" y="565" width="0.3190%" height="15" fill="rgb(218,227,13)" fg:x="930" fg:w="4"/><text x="74.4127%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="74.1627%" y="549" width="0.3190%" height="15" fill="rgb(217,94,32)" fg:x="930" fg:w="4"/><text x="74.4127%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="74.1627%" y="533" width="0.3190%" height="15" fill="rgb(213,217,12)" fg:x="930" fg:w="4"/><text x="74.4127%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="74.1627%" y="517" width="0.3190%" height="15" fill="rgb(229,13,46)" fg:x="930" fg:w="4"/><text x="74.4127%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="74.1627%" y="501" width="0.3190%" height="15" fill="rgb(243,139,5)" fg:x="930" fg:w="4"/><text x="74.4127%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="74.1627%" y="485" width="0.3190%" height="15" fill="rgb(249,38,45)" fg:x="930" fg:w="4"/><text x="74.4127%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.24%)</title><rect x="74.2424%" y="469" width="0.2392%" height="15" fill="rgb(216,70,11)" fg:x="931" fg:w="3"/><text x="74.4924%" y="479.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (3 samples, 0.24%)</title><rect x="74.2424%" y="453" width="0.2392%" height="15" fill="rgb(253,101,25)" fg:x="931" fg:w="3"/><text x="74.4924%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="74.1627%" y="597" width="0.3987%" height="15" fill="rgb(207,197,30)" fg:x="930" fg:w="5"/><text x="74.4127%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="74.1627%" y="581" width="0.3987%" height="15" fill="rgb(238,87,13)" fg:x="930" fg:w="5"/><text x="74.4127%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.4817%" y="565" width="0.0797%" height="15" fill="rgb(215,155,8)" fg:x="934" fg:w="1"/><text x="74.7317%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.4817%" y="549" width="0.0797%" height="15" fill="rgb(239,166,38)" fg:x="934" fg:w="1"/><text x="74.7317%" y="559.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (516 samples, 41.15%)</title><rect x="33.5726%" y="741" width="41.1483%" height="15" fill="rgb(240,194,35)" fg:x="421" fg:w="516"/><text x="33.8226%" y="751.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (516 samples, 41.15%)</title><rect x="33.5726%" y="725" width="41.1483%" height="15" fill="rgb(219,10,44)" fg:x="421" fg:w="516"/><text x="33.8226%" y="735.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (12 samples, 0.96%)</title><rect x="73.7640%" y="709" width="0.9569%" height="15" fill="rgb(251,220,35)" fg:x="925" fg:w="12"/><text x="74.0140%" y="719.50"></text></g><g><title>engine::session::Session::load_entity (12 samples, 0.96%)</title><rect x="73.7640%" y="693" width="0.9569%" height="15" fill="rgb(218,117,13)" fg:x="925" fg:w="12"/><text x="74.0140%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (12 samples, 0.96%)</title><rect x="73.7640%" y="677" width="0.9569%" height="15" fill="rgb(221,213,40)" fg:x="925" fg:w="12"/><text x="74.0140%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (7 samples, 0.56%)</title><rect x="74.1627%" y="661" width="0.5582%" height="15" fill="rgb(251,224,35)" fg:x="930" fg:w="7"/><text x="74.4127%" y="671.50"></text></g><g><title>serde_json::de::from_trait (7 samples, 0.56%)</title><rect x="74.1627%" y="645" width="0.5582%" height="15" fill="rgb(241,33,39)" fg:x="930" fg:w="7"/><text x="74.4127%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="74.1627%" y="629" width="0.5582%" height="15" fill="rgb(222,74,17)" fg:x="930" fg:w="7"/><text x="74.4127%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="74.1627%" y="613" width="0.5582%" height="15" fill="rgb(225,103,0)" fg:x="930" fg:w="7"/><text x="74.4127%" y="623.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="74.5614%" y="597" width="0.1595%" height="15" fill="rgb(240,0,12)" fg:x="935" fg:w="2"/><text x="74.8114%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.6411%" y="581" width="0.0797%" height="15" fill="rgb(233,213,37)" fg:x="936" fg:w="1"/><text x="74.8911%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (939 samples, 74.88%)</title><rect x="0.0000%" y="789" width="74.8804%" height="15" fill="rgb(225,84,52)" fg:x="0" fg:w="939"/><text x="0.2500%" y="799.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (939 samples, 74.88%)</title><rect x="0.0000%" y="773" width="74.8804%" height="15" fill="rgb(247,160,51)" fg:x="0" fg:w="939"/><text x="0.2500%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (939 samples, 74.88%)</title><rect x="0.0000%" y="757" width="74.8804%" height="15" fill="rgb(244,60,51)" fg:x="0" fg:w="939"/><text x="0.2500%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (2 samples, 0.16%)</title><rect x="74.7209%" y="741" width="0.1595%" height="15" fill="rgb(233,114,7)" fg:x="937" fg:w="2"/><text x="74.9709%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="74.8006%" y="725" width="0.0797%" height="15" fill="rgb(246,136,16)" fg:x="938" fg:w="1"/><text x="75.0506%" y="735.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="74.8006%" y="709" width="0.0797%" height="15" fill="rgb(243,114,45)" fg:x="938" fg:w="1"/><text x="75.0506%" y="719.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="74.8006%" y="693" width="0.0797%" height="15" fill="rgb(247,183,43)" fg:x="938" fg:w="1"/><text x="75.0506%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="74.8804%" y="725" width="0.0797%" height="15" fill="rgb(251,210,42)" fg:x="939" fg:w="1"/><text x="75.1304%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.8804%" y="709" width="0.0797%" height="15" fill="rgb(221,88,35)" fg:x="939" fg:w="1"/><text x="75.1304%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="74.8804%" y="693" width="0.0797%" height="15" fill="rgb(242,21,20)" fg:x="939" fg:w="1"/><text x="75.1304%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.08%)</title><rect x="74.8804%" y="677" width="0.0797%" height="15" fill="rgb(233,226,36)" fg:x="939" fg:w="1"/><text x="75.1304%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="74.8804%" y="661" width="0.0797%" height="15" fill="rgb(243,189,34)" fg:x="939" fg:w="1"/><text x="75.1304%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.8804%" y="645" width="0.0797%" height="15" fill="rgb(207,145,50)" fg:x="939" fg:w="1"/><text x="75.1304%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="74.9601%" y="613" width="0.1595%" height="15" fill="rgb(242,1,50)" fg:x="940" fg:w="2"/><text x="75.2101%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="75.1196%" y="597" width="0.1595%" height="15" fill="rgb(231,65,32)" fg:x="942" fg:w="2"/><text x="75.3696%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.1994%" y="581" width="0.0797%" height="15" fill="rgb(208,68,49)" fg:x="943" fg:w="1"/><text x="75.4494%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.2791%" y="565" width="0.0797%" height="15" fill="rgb(253,54,49)" fg:x="944" fg:w="1"/><text x="75.5291%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="74.9601%" y="661" width="0.4785%" height="15" fill="rgb(245,186,24)" fg:x="940" fg:w="6"/><text x="75.2101%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (6 samples, 0.48%)</title><rect x="74.9601%" y="645" width="0.4785%" height="15" fill="rgb(209,2,41)" fg:x="940" fg:w="6"/><text x="75.2101%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.48%)</title><rect x="74.9601%" y="629" width="0.4785%" height="15" fill="rgb(242,208,54)" fg:x="940" fg:w="6"/><text x="75.2101%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="75.1196%" y="613" width="0.3190%" height="15" fill="rgb(225,9,51)" fg:x="942" fg:w="4"/><text x="75.3696%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="75.2791%" y="597" width="0.1595%" height="15" fill="rgb(207,207,25)" fg:x="944" fg:w="2"/><text x="75.5291%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="75.2791%" y="581" width="0.1595%" height="15" fill="rgb(253,96,18)" fg:x="944" fg:w="2"/><text x="75.5291%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.3589%" y="565" width="0.0797%" height="15" fill="rgb(252,215,20)" fg:x="945" fg:w="1"/><text x="75.6089%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.3589%" y="549" width="0.0797%" height="15" fill="rgb(245,227,26)" fg:x="945" fg:w="1"/><text x="75.6089%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.3589%" y="533" width="0.0797%" height="15" fill="rgb(241,208,0)" fg:x="945" fg:w="1"/><text x="75.6089%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.5183%" y="629" width="0.0797%" height="15" fill="rgb(224,130,10)" fg:x="947" fg:w="1"/><text x="75.7683%" y="639.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.72%)</title><rect x="74.9601%" y="677" width="0.7177%" height="15" fill="rgb(237,29,0)" fg:x="940" fg:w="9"/><text x="75.2101%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="75.4386%" y="661" width="0.2392%" height="15" fill="rgb(219,27,41)" fg:x="946" fg:w="3"/><text x="75.6886%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="75.4386%" y="645" width="0.2392%" height="15" fill="rgb(245,101,19)" fg:x="946" fg:w="3"/><text x="75.6886%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.5981%" y="629" width="0.0797%" height="15" fill="rgb(243,44,37)" fg:x="948" fg:w="1"/><text x="75.8481%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.5981%" y="613" width="0.0797%" height="15" fill="rgb(228,213,43)" fg:x="948" fg:w="1"/><text x="75.8481%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="75.5981%" y="597" width="0.0797%" height="15" fill="rgb(219,163,21)" fg:x="948" fg:w="1"/><text x="75.8481%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="75.5981%" y="581" width="0.0797%" height="15" fill="rgb(234,86,24)" fg:x="948" fg:w="1"/><text x="75.8481%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.5981%" y="565" width="0.0797%" height="15" fill="rgb(225,10,24)" fg:x="948" fg:w="1"/><text x="75.8481%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.5981%" y="549" width="0.0797%" height="15" fill="rgb(218,109,7)" fg:x="948" fg:w="1"/><text x="75.8481%" y="559.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.88%)</title><rect x="74.8804%" y="741" width="0.8772%" height="15" fill="rgb(210,20,26)" fg:x="939" fg:w="11"/><text x="75.1304%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (10 samples, 0.80%)</title><rect x="74.9601%" y="725" width="0.7974%" height="15" fill="rgb(216,18,1)" fg:x="940" fg:w="10"/><text x="75.2101%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.80%)</title><rect x="74.9601%" y="709" width="0.7974%" height="15" fill="rgb(206,163,23)" fg:x="940" fg:w="10"/><text x="75.2101%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (10 samples, 0.80%)</title><rect x="74.9601%" y="693" width="0.7974%" height="15" fill="rgb(229,150,31)" fg:x="940" fg:w="10"/><text x="75.2101%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.6778%" y="677" width="0.0797%" height="15" fill="rgb(231,10,5)" fg:x="949" fg:w="1"/><text x="75.9278%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.8373%" y="613" width="0.0797%" height="15" fill="rgb(250,40,50)" fg:x="951" fg:w="1"/><text x="76.0873%" y="623.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="75.8373%" y="645" width="0.1595%" height="15" fill="rgb(217,119,7)" fg:x="951" fg:w="2"/><text x="76.0873%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="75.8373%" y="629" width="0.1595%" height="15" fill="rgb(245,214,40)" fg:x="951" fg:w="2"/><text x="76.0873%" y="639.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="75.9171%" y="613" width="0.0797%" height="15" fill="rgb(216,187,1)" fg:x="952" fg:w="1"/><text x="76.1671%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="76.0766%" y="613" width="0.1595%" height="15" fill="rgb(237,146,21)" fg:x="954" fg:w="2"/><text x="76.3266%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.1563%" y="597" width="0.0797%" height="15" fill="rgb(210,174,47)" fg:x="955" fg:w="1"/><text x="76.4063%" y="607.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="76.1563%" y="581" width="0.0797%" height="15" fill="rgb(218,111,39)" fg:x="955" fg:w="1"/><text x="76.4063%" y="591.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (4 samples, 0.32%)</title><rect x="75.9968%" y="645" width="0.3190%" height="15" fill="rgb(224,95,19)" fg:x="953" fg:w="4"/><text x="76.2468%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (4 samples, 0.32%)</title><rect x="75.9968%" y="629" width="0.3190%" height="15" fill="rgb(234,15,38)" fg:x="953" fg:w="4"/><text x="76.2468%" y="639.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="76.2360%" y="613" width="0.0797%" height="15" fill="rgb(246,56,12)" fg:x="956" fg:w="1"/><text x="76.4860%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.2360%" y="597" width="0.0797%" height="15" fill="rgb(247,16,17)" fg:x="956" fg:w="1"/><text x="76.4860%" y="607.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="76.3158%" y="645" width="0.0797%" height="15" fill="rgb(215,151,11)" fg:x="957" fg:w="1"/><text x="76.5658%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="76.3158%" y="629" width="0.0797%" height="15" fill="rgb(225,16,24)" fg:x="957" fg:w="1"/><text x="76.5658%" y="639.50"></text></g><g><title>&lt;plugins_core::chat::actions::SpeakAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="76.3158%" y="613" width="0.0797%" height="15" fill="rgb(217,117,5)" fg:x="957" fg:w="1"/><text x="76.5658%" y="623.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (8 samples, 0.64%)</title><rect x="75.8373%" y="661" width="0.6380%" height="15" fill="rgb(246,187,53)" fg:x="951" fg:w="8"/><text x="76.0873%" y="671.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="76.3955%" y="645" width="0.0797%" height="15" fill="rgb(241,71,40)" fg:x="958" fg:w="1"/><text x="76.6455%" y="655.50"></text></g><g><title>kernel::plugins::Schema::empty (1 samples, 0.08%)</title><rect x="76.3955%" y="629" width="0.0797%" height="15" fill="rgb(231,67,39)" fg:x="958" fg:w="1"/><text x="76.6455%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.4753%" y="613" width="0.0797%" height="15" fill="rgb(222,120,24)" fg:x="959" fg:w="1"/><text x="76.7253%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.4753%" y="597" width="0.0797%" height="15" fill="rgb(248,3,3)" fg:x="959" fg:w="1"/><text x="76.7253%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.4753%" y="581" width="0.0797%" height="15" fill="rgb(228,218,5)" fg:x="959" fg:w="1"/><text x="76.7253%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.4753%" y="565" width="0.0797%" height="15" fill="rgb(212,202,43)" fg:x="959" fg:w="1"/><text x="76.7253%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.4753%" y="549" width="0.0797%" height="15" fill="rgb(235,183,2)" fg:x="959" fg:w="1"/><text x="76.7253%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="76.4753%" y="533" width="0.0797%" height="15" fill="rgb(230,165,10)" fg:x="959" fg:w="1"/><text x="76.7253%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="76.4753%" y="517" width="0.0797%" height="15" fill="rgb(219,54,40)" fg:x="959" fg:w="1"/><text x="76.7253%" y="527.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (2 samples, 0.16%)</title><rect x="76.4753%" y="645" width="0.1595%" height="15" fill="rgb(244,73,9)" fg:x="959" fg:w="2"/><text x="76.7253%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="76.4753%" y="629" width="0.1595%" height="15" fill="rgb(212,32,45)" fg:x="959" fg:w="2"/><text x="76.7253%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.5550%" y="613" width="0.0797%" height="15" fill="rgb(205,58,31)" fg:x="960" fg:w="1"/><text x="76.8050%" y="623.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="76.6348%" y="629" width="0.1595%" height="15" fill="rgb(250,120,43)" fg:x="961" fg:w="2"/><text x="76.8848%" y="639.50"></text></g><g><title>glob::fill_todo (1 samples, 0.08%)</title><rect x="76.7145%" y="613" width="0.0797%" height="15" fill="rgb(235,13,10)" fg:x="962" fg:w="1"/><text x="76.9645%" y="623.50"></text></g><g><title>glob::is_dir (1 samples, 0.08%)</title><rect x="76.7145%" y="597" width="0.0797%" height="15" fill="rgb(232,219,31)" fg:x="962" fg:w="1"/><text x="76.9645%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="76.7145%" y="581" width="0.0797%" height="15" fill="rgb(218,157,51)" fg:x="962" fg:w="1"/><text x="76.9645%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="76.7145%" y="565" width="0.0797%" height="15" fill="rgb(211,91,52)" fg:x="962" fg:w="1"/><text x="76.9645%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="76.7145%" y="549" width="0.0797%" height="15" fill="rgb(240,173,1)" fg:x="962" fg:w="1"/><text x="76.9645%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="76.7145%" y="533" width="0.0797%" height="15" fill="rgb(248,20,47)" fg:x="962" fg:w="1"/><text x="76.9645%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="76.7145%" y="517" width="0.0797%" height="15" fill="rgb(217,221,40)" fg:x="962" fg:w="1"/><text x="76.9645%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="76.7145%" y="501" width="0.0797%" height="15" fill="rgb(226,149,51)" fg:x="962" fg:w="1"/><text x="76.9645%" y="511.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="76.7145%" y="485" width="0.0797%" height="15" fill="rgb(252,193,7)" fg:x="962" fg:w="1"/><text x="76.9645%" y="495.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (13 samples, 1.04%)</title><rect x="75.8373%" y="677" width="1.0367%" height="15" fill="rgb(205,123,0)" fg:x="951" fg:w="13"/><text x="76.0873%" y="687.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (5 samples, 0.40%)</title><rect x="76.4753%" y="661" width="0.3987%" height="15" fill="rgb(233,173,25)" fg:x="959" fg:w="5"/><text x="76.7253%" y="671.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (3 samples, 0.24%)</title><rect x="76.6348%" y="645" width="0.2392%" height="15" fill="rgb(216,63,32)" fg:x="961" fg:w="3"/><text x="76.8848%" y="655.50"></text></g><g><title>glob::glob (1 samples, 0.08%)</title><rect x="76.7943%" y="629" width="0.0797%" height="15" fill="rgb(209,56,45)" fg:x="963" fg:w="1"/><text x="77.0443%" y="639.50"></text></g><g><title>glob::glob_with (1 samples, 0.08%)</title><rect x="76.7943%" y="613" width="0.0797%" height="15" fill="rgb(226,111,49)" fg:x="963" fg:w="1"/><text x="77.0443%" y="623.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_owned (1 samples, 0.08%)</title><rect x="76.7943%" y="597" width="0.0797%" height="15" fill="rgb(244,181,21)" fg:x="963" fg:w="1"/><text x="77.0443%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.7943%" y="581" width="0.0797%" height="15" fill="rgb(222,126,15)" fg:x="963" fg:w="1"/><text x="77.0443%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.7943%" y="565" width="0.0797%" height="15" fill="rgb(222,95,17)" fg:x="963" fg:w="1"/><text x="77.0443%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.7943%" y="549" width="0.0797%" height="15" fill="rgb(254,46,5)" fg:x="963" fg:w="1"/><text x="77.0443%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.7943%" y="533" width="0.0797%" height="15" fill="rgb(236,216,35)" fg:x="963" fg:w="1"/><text x="77.0443%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="76.7943%" y="517" width="0.0797%" height="15" fill="rgb(217,187,26)" fg:x="963" fg:w="1"/><text x="77.0443%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="76.7943%" y="501" width="0.0797%" height="15" fill="rgb(207,192,25)" fg:x="963" fg:w="1"/><text x="77.0443%" y="511.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (16 samples, 1.28%)</title><rect x="75.7576%" y="741" width="1.2759%" height="15" fill="rgb(253,135,27)" fg:x="950" fg:w="16"/><text x="76.0076%" y="751.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (16 samples, 1.28%)</title><rect x="75.7576%" y="725" width="1.2759%" height="15" fill="rgb(211,122,29)" fg:x="950" fg:w="16"/><text x="76.0076%" y="735.50"></text></g><g><title>engine::session::Session::new (16 samples, 1.28%)</title><rect x="75.7576%" y="709" width="1.2759%" height="15" fill="rgb(233,162,40)" fg:x="950" fg:w="16"/><text x="76.0076%" y="719.50"></text></g><g><title>engine::session::Session::initialize (16 samples, 1.28%)</title><rect x="75.7576%" y="693" width="1.2759%" height="15" fill="rgb(222,184,47)" fg:x="950" fg:w="16"/><text x="76.0076%" y="703.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (2 samples, 0.16%)</title><rect x="76.8740%" y="677" width="0.1595%" height="15" fill="rgb(249,99,23)" fg:x="964" fg:w="2"/><text x="77.1240%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="76.8740%" y="661" width="0.1595%" height="15" fill="rgb(214,60,12)" fg:x="964" fg:w="2"/><text x="77.1240%" y="671.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="77.0335%" y="709" width="0.0797%" height="15" fill="rgb(250,229,36)" fg:x="966" fg:w="1"/><text x="77.2835%" y="719.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="77.0335%" y="693" width="0.0797%" height="15" fill="rgb(232,195,10)" fg:x="966" fg:w="1"/><text x="77.2835%" y="703.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="77.0335%" y="677" width="0.0797%" height="15" fill="rgb(205,213,31)" fg:x="966" fg:w="1"/><text x="77.2835%" y="687.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="77.0335%" y="661" width="0.0797%" height="15" fill="rgb(237,43,8)" fg:x="966" fg:w="1"/><text x="77.2835%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="77.1132%" y="677" width="0.0797%" height="15" fill="rgb(216,208,3)" fg:x="967" fg:w="1"/><text x="77.3632%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="77.1132%" y="661" width="0.0797%" height="15" fill="rgb(228,179,44)" fg:x="967" fg:w="1"/><text x="77.3632%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.1132%" y="645" width="0.0797%" height="15" fill="rgb(230,192,27)" fg:x="967" fg:w="1"/><text x="77.3632%" y="655.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="77.1132%" y="629" width="0.0797%" height="15" fill="rgb(251,30,38)" fg:x="967" fg:w="1"/><text x="77.3632%" y="639.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="77.1930%" y="613" width="0.0797%" height="15" fill="rgb(246,55,52)" fg:x="968" fg:w="1"/><text x="77.4430%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="77.1930%" y="597" width="0.0797%" height="15" fill="rgb(249,79,26)" fg:x="968" fg:w="1"/><text x="77.4430%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.1930%" y="581" width="0.0797%" height="15" fill="rgb(220,202,16)" fg:x="968" fg:w="1"/><text x="77.4430%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="77.2727%" y="597" width="0.0797%" height="15" fill="rgb(250,170,23)" fg:x="969" fg:w="1"/><text x="77.5227%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.2727%" y="581" width="0.0797%" height="15" fill="rgb(230,7,37)" fg:x="969" fg:w="1"/><text x="77.5227%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.2727%" y="565" width="0.0797%" height="15" fill="rgb(213,71,1)" fg:x="969" fg:w="1"/><text x="77.5227%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.2727%" y="549" width="0.0797%" height="15" fill="rgb(227,87,39)" fg:x="969" fg:w="1"/><text x="77.5227%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="77.3525%" y="581" width="0.2392%" height="15" fill="rgb(210,41,29)" fg:x="970" fg:w="3"/><text x="77.6025%" y="591.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="77.3525%" y="565" width="0.2392%" height="15" fill="rgb(206,191,31)" fg:x="970" fg:w="3"/><text x="77.6025%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="77.3525%" y="549" width="0.2392%" height="15" fill="rgb(247,75,54)" fg:x="970" fg:w="3"/><text x="77.6025%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="77.3525%" y="533" width="0.2392%" height="15" fill="rgb(208,54,50)" fg:x="970" fg:w="3"/><text x="77.6025%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="77.5917%" y="565" width="0.0797%" height="15" fill="rgb(214,90,37)" fg:x="973" fg:w="1"/><text x="77.8417%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.5917%" y="549" width="0.0797%" height="15" fill="rgb(220,132,6)" fg:x="973" fg:w="1"/><text x="77.8417%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.56%)</title><rect x="77.1930%" y="629" width="0.5582%" height="15" fill="rgb(213,167,7)" fg:x="968" fg:w="7"/><text x="77.4430%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="77.2727%" y="613" width="0.4785%" height="15" fill="rgb(243,36,27)" fg:x="969" fg:w="6"/><text x="77.5227%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="77.3525%" y="597" width="0.3987%" height="15" fill="rgb(235,147,12)" fg:x="970" fg:w="5"/><text x="77.6025%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="77.5917%" y="581" width="0.1595%" height="15" fill="rgb(212,198,44)" fg:x="973" fg:w="2"/><text x="77.8417%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.6715%" y="565" width="0.0797%" height="15" fill="rgb(218,68,50)" fg:x="974" fg:w="1"/><text x="77.9215%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.6715%" y="549" width="0.0797%" height="15" fill="rgb(224,79,48)" fg:x="974" fg:w="1"/><text x="77.9215%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.6715%" y="533" width="0.0797%" height="15" fill="rgb(213,191,50)" fg:x="974" fg:w="1"/><text x="77.9215%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="77.6715%" y="517" width="0.0797%" height="15" fill="rgb(254,146,10)" fg:x="974" fg:w="1"/><text x="77.9215%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.7512%" y="597" width="0.0797%" height="15" fill="rgb(215,175,11)" fg:x="975" fg:w="1"/><text x="78.0012%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.7512%" y="581" width="0.0797%" height="15" fill="rgb(207,49,7)" fg:x="975" fg:w="1"/><text x="78.0012%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="77.7512%" y="629" width="0.3190%" height="15" fill="rgb(234,144,29)" fg:x="975" fg:w="4"/><text x="78.0012%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="77.7512%" y="613" width="0.3190%" height="15" fill="rgb(213,222,48)" fg:x="975" fg:w="4"/><text x="78.0012%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="77.8309%" y="597" width="0.2392%" height="15" fill="rgb(222,8,6)" fg:x="976" fg:w="3"/><text x="78.0809%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="77.9107%" y="581" width="0.1595%" height="15" fill="rgb(221,114,49)" fg:x="977" fg:w="2"/><text x="78.1607%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.9904%" y="565" width="0.0797%" height="15" fill="rgb(250,140,42)" fg:x="978" fg:w="1"/><text x="78.2404%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="77.9904%" y="549" width="0.0797%" height="15" fill="rgb(250,150,27)" fg:x="978" fg:w="1"/><text x="78.2404%" y="559.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="78.0702%" y="581" width="0.0797%" height="15" fill="rgb(252,159,3)" fg:x="979" fg:w="1"/><text x="78.3202%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="78.0702%" y="565" width="0.0797%" height="15" fill="rgb(241,182,3)" fg:x="979" fg:w="1"/><text x="78.3202%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.1499%" y="549" width="0.0797%" height="15" fill="rgb(236,3,9)" fg:x="980" fg:w="1"/><text x="78.3999%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="78.1499%" y="581" width="0.1595%" height="15" fill="rgb(223,227,51)" fg:x="980" fg:w="2"/><text x="78.3999%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="78.1499%" y="565" width="0.1595%" height="15" fill="rgb(232,133,30)" fg:x="980" fg:w="2"/><text x="78.3999%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.2297%" y="549" width="0.0797%" height="15" fill="rgb(209,93,27)" fg:x="981" fg:w="1"/><text x="78.4797%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.3892%" y="533" width="0.0797%" height="15" fill="rgb(208,108,34)" fg:x="983" fg:w="1"/><text x="78.6392%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.3892%" y="517" width="0.0797%" height="15" fill="rgb(215,189,13)" fg:x="983" fg:w="1"/><text x="78.6392%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="78.4689%" y="517" width="0.0797%" height="15" fill="rgb(206,88,23)" fg:x="984" fg:w="1"/><text x="78.7189%" y="527.50"></text></g><g><title>engine::session::Session::flush (21 samples, 1.67%)</title><rect x="77.0335%" y="725" width="1.6746%" height="15" fill="rgb(240,173,0)" fg:x="966" fg:w="21"/><text x="77.2835%" y="735.50"></text></g><g><title>engine::session::state::State::close (20 samples, 1.59%)</title><rect x="77.1132%" y="709" width="1.5949%" height="15" fill="rgb(223,106,52)" fg:x="967" fg:w="20"/><text x="77.3632%" y="719.50"></text></g><g><title>engine::session::state::State::flush_entities (20 samples, 1.59%)</title><rect x="77.1132%" y="693" width="1.5949%" height="15" fill="rgb(206,130,16)" fg:x="967" fg:w="20"/><text x="77.3632%" y="703.50"></text></g><g><title>core::iter::adapters::try_process (19 samples, 1.52%)</title><rect x="77.1930%" y="677" width="1.5152%" height="15" fill="rgb(220,54,25)" fg:x="968" fg:w="19"/><text x="77.4430%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (19 samples, 1.52%)</title><rect x="77.1930%" y="661" width="1.5152%" height="15" fill="rgb(210,4,38)" fg:x="968" fg:w="19"/><text x="77.4430%" y="671.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (19 samples, 1.52%)</title><rect x="77.1930%" y="645" width="1.5152%" height="15" fill="rgb(238,94,39)" fg:x="968" fg:w="19"/><text x="77.4430%" y="655.50"></text></g><g><title>kernel::model::any_entity_changes (8 samples, 0.64%)</title><rect x="78.0702%" y="629" width="0.6380%" height="15" fill="rgb(234,124,34)" fg:x="979" fg:w="8"/><text x="78.3202%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.64%)</title><rect x="78.0702%" y="613" width="0.6380%" height="15" fill="rgb(221,91,40)" fg:x="979" fg:w="8"/><text x="78.3202%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.64%)</title><rect x="78.0702%" y="597" width="0.6380%" height="15" fill="rgb(246,53,28)" fg:x="979" fg:w="8"/><text x="78.3202%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="78.3094%" y="581" width="0.3987%" height="15" fill="rgb(229,109,7)" fg:x="982" fg:w="5"/><text x="78.5594%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.40%)</title><rect x="78.3094%" y="565" width="0.3987%" height="15" fill="rgb(249,117,8)" fg:x="982" fg:w="5"/><text x="78.5594%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="78.3892%" y="549" width="0.3190%" height="15" fill="rgb(210,181,1)" fg:x="983" fg:w="4"/><text x="78.6392%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="78.4689%" y="533" width="0.2392%" height="15" fill="rgb(211,66,1)" fg:x="984" fg:w="3"/><text x="78.7189%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="78.5486%" y="517" width="0.1595%" height="15" fill="rgb(221,90,14)" fg:x="985" fg:w="2"/><text x="78.7986%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="78.5486%" y="501" width="0.1595%" height="15" fill="rgb(219,222,44)" fg:x="985" fg:w="2"/><text x="78.7986%" y="511.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="78.5486%" y="485" width="0.1595%" height="15" fill="rgb(246,34,33)" fg:x="985" fg:w="2"/><text x="78.7986%" y="495.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="78.7081%" y="693" width="0.0797%" height="15" fill="rgb(227,135,41)" fg:x="987" fg:w="1"/><text x="78.9581%" y="703.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="78.7081%" y="677" width="0.0797%" height="15" fill="rgb(226,15,14)" fg:x="987" fg:w="1"/><text x="78.9581%" y="687.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.7081%" y="661" width="0.0797%" height="15" fill="rgb(236,148,47)" fg:x="987" fg:w="1"/><text x="78.9581%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.7081%" y="645" width="0.0797%" height="15" fill="rgb(233,162,52)" fg:x="987" fg:w="1"/><text x="78.9581%" y="655.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.7081%" y="629" width="0.0797%" height="15" fill="rgb(244,35,28)" fg:x="987" fg:w="1"/><text x="78.9581%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.7081%" y="613" width="0.0797%" height="15" fill="rgb(205,121,10)" fg:x="987" fg:w="1"/><text x="78.9581%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="78.7081%" y="597" width="0.0797%" height="15" fill="rgb(250,58,18)" fg:x="987" fg:w="1"/><text x="78.9581%" y="607.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="78.7081%" y="581" width="0.0797%" height="15" fill="rgb(216,37,13)" fg:x="987" fg:w="1"/><text x="78.9581%" y="591.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="78.7081%" y="725" width="0.2392%" height="15" fill="rgb(221,215,42)" fg:x="987" fg:w="3"/><text x="78.9581%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="78.7081%" y="709" width="0.2392%" height="15" fill="rgb(217,214,19)" fg:x="987" fg:w="3"/><text x="78.9581%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="78.7879%" y="693" width="0.1595%" height="15" fill="rgb(233,139,13)" fg:x="988" fg:w="2"/><text x="79.0379%" y="703.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="78.7879%" y="677" width="0.1595%" height="15" fill="rgb(247,168,23)" fg:x="988" fg:w="2"/><text x="79.0379%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.8676%" y="661" width="0.0797%" height="15" fill="rgb(207,202,1)" fg:x="989" fg:w="1"/><text x="79.1176%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="78.8676%" y="645" width="0.0797%" height="15" fill="rgb(220,155,48)" fg:x="989" fg:w="1"/><text x="79.1176%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="78.8676%" y="629" width="0.0797%" height="15" fill="rgb(250,43,26)" fg:x="989" fg:w="1"/><text x="79.1176%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="78.8676%" y="613" width="0.0797%" height="15" fill="rgb(212,190,23)" fg:x="989" fg:w="1"/><text x="79.1176%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="78.9474%" y="661" width="0.0797%" height="15" fill="rgb(216,39,24)" fg:x="990" fg:w="1"/><text x="79.1974%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="78.9474%" y="645" width="0.0797%" height="15" fill="rgb(252,113,16)" fg:x="990" fg:w="1"/><text x="79.1974%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.9474%" y="629" width="0.0797%" height="15" fill="rgb(208,113,19)" fg:x="990" fg:w="1"/><text x="79.1974%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.9474%" y="613" width="0.0797%" height="15" fill="rgb(234,107,25)" fg:x="990" fg:w="1"/><text x="79.1974%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="78.9474%" y="597" width="0.0797%" height="15" fill="rgb(234,217,51)" fg:x="990" fg:w="1"/><text x="79.1974%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.9474%" y="581" width="0.0797%" height="15" fill="rgb(251,29,42)" fg:x="990" fg:w="1"/><text x="79.1974%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="78.9474%" y="693" width="0.1595%" height="15" fill="rgb(221,62,51)" fg:x="990" fg:w="2"/><text x="79.1974%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="78.9474%" y="677" width="0.1595%" height="15" fill="rgb(240,192,43)" fg:x="990" fg:w="2"/><text x="79.1974%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="79.0271%" y="661" width="0.0797%" height="15" fill="rgb(224,157,47)" fg:x="991" fg:w="1"/><text x="79.2771%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="79.0271%" y="645" width="0.0797%" height="15" fill="rgb(226,84,45)" fg:x="991" fg:w="1"/><text x="79.2771%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.0271%" y="629" width="0.0797%" height="15" fill="rgb(208,207,23)" fg:x="991" fg:w="1"/><text x="79.2771%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.0271%" y="613" width="0.0797%" height="15" fill="rgb(253,34,51)" fg:x="991" fg:w="1"/><text x="79.2771%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.0271%" y="597" width="0.0797%" height="15" fill="rgb(227,26,34)" fg:x="991" fg:w="1"/><text x="79.2771%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.0271%" y="581" width="0.0797%" height="15" fill="rgb(245,75,19)" fg:x="991" fg:w="1"/><text x="79.2771%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.0271%" y="565" width="0.0797%" height="15" fill="rgb(250,191,31)" fg:x="991" fg:w="1"/><text x="79.2771%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.0271%" y="549" width="0.0797%" height="15" fill="rgb(224,11,50)" fg:x="991" fg:w="1"/><text x="79.2771%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.0271%" y="533" width="0.0797%" height="15" fill="rgb(231,171,7)" fg:x="991" fg:w="1"/><text x="79.2771%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.0271%" y="517" width="0.0797%" height="15" fill="rgb(252,214,10)" fg:x="991" fg:w="1"/><text x="79.2771%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.0271%" y="501" width="0.0797%" height="15" fill="rgb(249,45,46)" fg:x="991" fg:w="1"/><text x="79.2771%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.0271%" y="485" width="0.0797%" height="15" fill="rgb(240,173,7)" fg:x="991" fg:w="1"/><text x="79.2771%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="79.0271%" y="469" width="0.0797%" height="15" fill="rgb(235,214,13)" fg:x="991" fg:w="1"/><text x="79.2771%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="79.0271%" y="453" width="0.0797%" height="15" fill="rgb(245,156,8)" fg:x="991" fg:w="1"/><text x="79.2771%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="79.0271%" y="437" width="0.0797%" height="15" fill="rgb(235,46,12)" fg:x="991" fg:w="1"/><text x="79.2771%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="79.0271%" y="421" width="0.0797%" height="15" fill="rgb(221,81,14)" fg:x="991" fg:w="1"/><text x="79.2771%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.0271%" y="405" width="0.0797%" height="15" fill="rgb(238,207,9)" fg:x="991" fg:w="1"/><text x="79.2771%" y="415.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="79.1069%" y="693" width="0.0797%" height="15" fill="rgb(224,129,35)" fg:x="992" fg:w="1"/><text x="79.3569%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="79.1069%" y="677" width="0.0797%" height="15" fill="rgb(243,218,34)" fg:x="992" fg:w="1"/><text x="79.3569%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.1069%" y="661" width="0.0797%" height="15" fill="rgb(220,166,13)" fg:x="992" fg:w="1"/><text x="79.3569%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="79.1069%" y="645" width="0.0797%" height="15" fill="rgb(227,167,49)" fg:x="992" fg:w="1"/><text x="79.3569%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="79.1069%" y="629" width="0.0797%" height="15" fill="rgb(234,142,12)" fg:x="992" fg:w="1"/><text x="79.3569%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.1069%" y="613" width="0.0797%" height="15" fill="rgb(207,100,48)" fg:x="992" fg:w="1"/><text x="79.3569%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.1069%" y="597" width="0.0797%" height="15" fill="rgb(210,25,14)" fg:x="992" fg:w="1"/><text x="79.3569%" y="607.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="79.1866%" y="677" width="0.0797%" height="15" fill="rgb(246,116,27)" fg:x="993" fg:w="1"/><text x="79.4366%" y="687.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="79.1866%" y="693" width="0.1595%" height="15" fill="rgb(214,193,42)" fg:x="993" fg:w="2"/><text x="79.4366%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="79.2663%" y="677" width="0.0797%" height="15" fill="rgb(214,122,8)" fg:x="994" fg:w="1"/><text x="79.5163%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="79.2663%" y="661" width="0.0797%" height="15" fill="rgb(244,173,18)" fg:x="994" fg:w="1"/><text x="79.5163%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="79.2663%" y="645" width="0.0797%" height="15" fill="rgb(232,68,19)" fg:x="994" fg:w="1"/><text x="79.5163%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="79.2663%" y="629" width="0.0797%" height="15" fill="rgb(236,224,1)" fg:x="994" fg:w="1"/><text x="79.5163%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.2663%" y="613" width="0.0797%" height="15" fill="rgb(240,11,8)" fg:x="994" fg:w="1"/><text x="79.5163%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (6 samples, 0.48%)</title><rect x="78.9474%" y="725" width="0.4785%" height="15" fill="rgb(244,159,20)" fg:x="990" fg:w="6"/><text x="79.1974%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (6 samples, 0.48%)</title><rect x="78.9474%" y="709" width="0.4785%" height="15" fill="rgb(240,223,54)" fg:x="990" fg:w="6"/><text x="79.1974%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="79.3461%" y="693" width="0.0797%" height="15" fill="rgb(237,146,5)" fg:x="995" fg:w="1"/><text x="79.5961%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="79.3461%" y="677" width="0.0797%" height="15" fill="rgb(218,221,32)" fg:x="995" fg:w="1"/><text x="79.5961%" y="687.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="79.3461%" y="661" width="0.0797%" height="15" fill="rgb(244,96,26)" fg:x="995" fg:w="1"/><text x="79.5961%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.3461%" y="645" width="0.0797%" height="15" fill="rgb(245,184,37)" fg:x="995" fg:w="1"/><text x="79.5961%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="79.3461%" y="629" width="0.0797%" height="15" fill="rgb(248,91,47)" fg:x="995" fg:w="1"/><text x="79.5961%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.3461%" y="613" width="0.0797%" height="15" fill="rgb(243,199,8)" fg:x="995" fg:w="1"/><text x="79.5961%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.3461%" y="597" width="0.0797%" height="15" fill="rgb(249,12,15)" fg:x="995" fg:w="1"/><text x="79.5961%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.3461%" y="581" width="0.0797%" height="15" fill="rgb(245,97,12)" fg:x="995" fg:w="1"/><text x="79.5961%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="79.3461%" y="565" width="0.0797%" height="15" fill="rgb(244,61,1)" fg:x="995" fg:w="1"/><text x="79.5961%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="79.5056%" y="597" width="0.0797%" height="15" fill="rgb(222,194,10)" fg:x="997" fg:w="1"/><text x="79.7556%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="79.5056%" y="581" width="0.0797%" height="15" fill="rgb(226,178,8)" fg:x="997" fg:w="1"/><text x="79.7556%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="79.5056%" y="565" width="0.0797%" height="15" fill="rgb(241,32,34)" fg:x="997" fg:w="1"/><text x="79.7556%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="79.5056%" y="549" width="0.0797%" height="15" fill="rgb(254,26,6)" fg:x="997" fg:w="1"/><text x="79.7556%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.5056%" y="533" width="0.0797%" height="15" fill="rgb(249,71,11)" fg:x="997" fg:w="1"/><text x="79.7556%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="79.5056%" y="517" width="0.0797%" height="15" fill="rgb(232,170,27)" fg:x="997" fg:w="1"/><text x="79.7556%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.5056%" y="501" width="0.0797%" height="15" fill="rgb(214,223,17)" fg:x="997" fg:w="1"/><text x="79.7556%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.5056%" y="485" width="0.0797%" height="15" fill="rgb(250,18,15)" fg:x="997" fg:w="1"/><text x="79.7556%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="79.5853%" y="549" width="0.1595%" height="15" fill="rgb(212,153,51)" fg:x="998" fg:w="2"/><text x="79.8353%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.6651%" y="533" width="0.0797%" height="15" fill="rgb(219,194,12)" fg:x="999" fg:w="1"/><text x="79.9151%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.6651%" y="517" width="0.0797%" height="15" fill="rgb(212,58,17)" fg:x="999" fg:w="1"/><text x="79.9151%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.6651%" y="501" width="0.0797%" height="15" fill="rgb(254,5,10)" fg:x="999" fg:w="1"/><text x="79.9151%" y="511.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="79.7448%" y="533" width="0.0797%" height="15" fill="rgb(246,91,7)" fg:x="1000" fg:w="1"/><text x="79.9948%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="79.8246%" y="533" width="0.1595%" height="15" fill="rgb(218,108,49)" fg:x="1001" fg:w="2"/><text x="80.0746%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="79.8246%" y="517" width="0.1595%" height="15" fill="rgb(238,123,20)" fg:x="1001" fg:w="2"/><text x="80.0746%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="79.8246%" y="501" width="0.1595%" height="15" fill="rgb(231,69,23)" fg:x="1001" fg:w="2"/><text x="80.0746%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="79.8246%" y="485" width="0.1595%" height="15" fill="rgb(230,209,3)" fg:x="1001" fg:w="2"/><text x="80.0746%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="79.9043%" y="469" width="0.0797%" height="15" fill="rgb(231,19,0)" fg:x="1002" fg:w="1"/><text x="80.1543%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.9043%" y="453" width="0.0797%" height="15" fill="rgb(226,192,25)" fg:x="1002" fg:w="1"/><text x="80.1543%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="79.9043%" y="437" width="0.0797%" height="15" fill="rgb(223,175,53)" fg:x="1002" fg:w="1"/><text x="80.1543%" y="447.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.64%)</title><rect x="79.5853%" y="597" width="0.6380%" height="15" fill="rgb(248,35,51)" fg:x="998" fg:w="8"/><text x="79.8353%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="79.5853%" y="581" width="0.6380%" height="15" fill="rgb(230,37,26)" fg:x="998" fg:w="8"/><text x="79.8353%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="79.5853%" y="565" width="0.6380%" height="15" fill="rgb(206,120,22)" fg:x="998" fg:w="8"/><text x="79.8353%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="79.7448%" y="549" width="0.4785%" height="15" fill="rgb(207,165,28)" fg:x="1000" fg:w="6"/><text x="79.9948%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="79.9841%" y="533" width="0.2392%" height="15" fill="rgb(226,23,46)" fg:x="1003" fg:w="3"/><text x="80.2341%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="79.9841%" y="517" width="0.2392%" height="15" fill="rgb(208,130,44)" fg:x="1003" fg:w="3"/><text x="80.2341%" y="527.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="79.9841%" y="501" width="0.2392%" height="15" fill="rgb(231,67,8)" fg:x="1003" fg:w="3"/><text x="80.2341%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="80.0638%" y="485" width="0.1595%" height="15" fill="rgb(205,183,22)" fg:x="1004" fg:w="2"/><text x="80.3138%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="80.0638%" y="469" width="0.1595%" height="15" fill="rgb(224,47,9)" fg:x="1004" fg:w="2"/><text x="80.3138%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="80.1435%" y="453" width="0.0797%" height="15" fill="rgb(250,183,49)" fg:x="1005" fg:w="1"/><text x="80.3935%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.1435%" y="437" width="0.0797%" height="15" fill="rgb(220,151,39)" fg:x="1005" fg:w="1"/><text x="80.3935%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="80.1435%" y="421" width="0.0797%" height="15" fill="rgb(220,118,20)" fg:x="1005" fg:w="1"/><text x="80.3935%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.2233%" y="597" width="0.0797%" height="15" fill="rgb(231,65,51)" fg:x="1006" fg:w="1"/><text x="80.4733%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="80.2233%" y="581" width="0.0797%" height="15" fill="rgb(253,125,37)" fg:x="1006" fg:w="1"/><text x="80.4733%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.2233%" y="565" width="0.0797%" height="15" fill="rgb(232,102,6)" fg:x="1006" fg:w="1"/><text x="80.4733%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.2233%" y="549" width="0.0797%" height="15" fill="rgb(251,105,13)" fg:x="1006" fg:w="1"/><text x="80.4733%" y="559.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (3 samples, 0.24%)</title><rect x="80.3030%" y="581" width="0.2392%" height="15" fill="rgb(222,179,29)" fg:x="1007" fg:w="3"/><text x="80.5530%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="80.3828%" y="565" width="0.1595%" height="15" fill="rgb(229,180,53)" fg:x="1008" fg:w="2"/><text x="80.6328%" y="575.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="80.5423%" y="549" width="0.1595%" height="15" fill="rgb(238,104,13)" fg:x="1010" fg:w="2"/><text x="80.7923%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.7018%" y="549" width="0.0797%" height="15" fill="rgb(210,130,5)" fg:x="1012" fg:w="1"/><text x="80.9518%" y="559.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="80.7815%" y="549" width="0.0797%" height="15" fill="rgb(233,87,49)" fg:x="1013" fg:w="1"/><text x="81.0315%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.7815%" y="533" width="0.0797%" height="15" fill="rgb(243,34,9)" fg:x="1013" fg:w="1"/><text x="81.0315%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="80.7815%" y="517" width="0.0797%" height="15" fill="rgb(235,225,10)" fg:x="1013" fg:w="1"/><text x="81.0315%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="80.7815%" y="501" width="0.0797%" height="15" fill="rgb(212,0,30)" fg:x="1013" fg:w="1"/><text x="81.0315%" y="511.50"></text></g><g><title>engine::session::Session::flush (20 samples, 1.59%)</title><rect x="79.4258%" y="709" width="1.5949%" height="15" fill="rgb(211,177,0)" fg:x="996" fg:w="20"/><text x="79.6758%" y="719.50"></text></g><g><title>engine::session::Session::save_changes (19 samples, 1.52%)</title><rect x="79.5056%" y="693" width="1.5152%" height="15" fill="rgb(225,220,11)" fg:x="997" fg:w="19"/><text x="79.7556%" y="703.50"></text></g><g><title>engine::session::state::State::close (19 samples, 1.52%)</title><rect x="79.5056%" y="677" width="1.5152%" height="15" fill="rgb(215,10,13)" fg:x="997" fg:w="19"/><text x="79.7556%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (19 samples, 1.52%)</title><rect x="79.5056%" y="661" width="1.5152%" height="15" fill="rgb(240,177,14)" fg:x="997" fg:w="19"/><text x="79.7556%" y="671.50"></text></g><g><title>core::iter::adapters::try_process (19 samples, 1.52%)</title><rect x="79.5056%" y="645" width="1.5152%" height="15" fill="rgb(243,7,39)" fg:x="997" fg:w="19"/><text x="79.7556%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (19 samples, 1.52%)</title><rect x="79.5056%" y="629" width="1.5152%" height="15" fill="rgb(212,99,0)" fg:x="997" fg:w="19"/><text x="79.7556%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (19 samples, 1.52%)</title><rect x="79.5056%" y="613" width="1.5152%" height="15" fill="rgb(225,162,48)" fg:x="997" fg:w="19"/><text x="79.7556%" y="623.50"></text></g><g><title>kernel::model::any_entity_changes (9 samples, 0.72%)</title><rect x="80.3030%" y="597" width="0.7177%" height="15" fill="rgb(246,16,25)" fg:x="1007" fg:w="9"/><text x="80.5530%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.48%)</title><rect x="80.5423%" y="581" width="0.4785%" height="15" fill="rgb(220,150,2)" fg:x="1010" fg:w="6"/><text x="80.7923%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="80.5423%" y="565" width="0.4785%" height="15" fill="rgb(237,113,11)" fg:x="1010" fg:w="6"/><text x="80.7923%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="80.8612%" y="549" width="0.1595%" height="15" fill="rgb(236,70,20)" fg:x="1014" fg:w="2"/><text x="81.1112%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="80.9410%" y="533" width="0.0797%" height="15" fill="rgb(234,94,7)" fg:x="1015" fg:w="1"/><text x="81.1910%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="81.0207%" y="693" width="0.1595%" height="15" fill="rgb(250,221,0)" fg:x="1016" fg:w="2"/><text x="81.2707%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="81.1005%" y="677" width="0.0797%" height="15" fill="rgb(245,149,46)" fg:x="1017" fg:w="1"/><text x="81.3505%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="81.1005%" y="661" width="0.0797%" height="15" fill="rgb(215,37,27)" fg:x="1017" fg:w="1"/><text x="81.3505%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.1005%" y="645" width="0.0797%" height="15" fill="rgb(232,65,3)" fg:x="1017" fg:w="1"/><text x="81.3505%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="81.1005%" y="629" width="0.0797%" height="15" fill="rgb(214,2,16)" fg:x="1017" fg:w="1"/><text x="81.3505%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="81.1005%" y="613" width="0.0797%" height="15" fill="rgb(227,131,50)" fg:x="1017" fg:w="1"/><text x="81.3505%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="81.1005%" y="597" width="0.0797%" height="15" fill="rgb(247,131,45)" fg:x="1017" fg:w="1"/><text x="81.3505%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="81.1005%" y="581" width="0.0797%" height="15" fill="rgb(215,97,47)" fg:x="1017" fg:w="1"/><text x="81.3505%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="81.1005%" y="565" width="0.0797%" height="15" fill="rgb(233,143,12)" fg:x="1017" fg:w="1"/><text x="81.3505%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="81.1005%" y="549" width="0.0797%" height="15" fill="rgb(222,57,17)" fg:x="1017" fg:w="1"/><text x="81.3505%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="81.1005%" y="533" width="0.0797%" height="15" fill="rgb(214,119,38)" fg:x="1017" fg:w="1"/><text x="81.3505%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.1005%" y="517" width="0.0797%" height="15" fill="rgb(217,28,47)" fg:x="1017" fg:w="1"/><text x="81.3505%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.1005%" y="501" width="0.0797%" height="15" fill="rgb(231,14,52)" fg:x="1017" fg:w="1"/><text x="81.3505%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="81.1005%" y="485" width="0.0797%" height="15" fill="rgb(220,158,18)" fg:x="1017" fg:w="1"/><text x="81.3505%" y="495.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="81.0207%" y="709" width="0.2392%" height="15" fill="rgb(222,143,46)" fg:x="1016" fg:w="3"/><text x="81.2707%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.1802%" y="693" width="0.0797%" height="15" fill="rgb(227,165,5)" fg:x="1018" fg:w="1"/><text x="81.4302%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.1802%" y="677" width="0.0797%" height="15" fill="rgb(216,222,49)" fg:x="1018" fg:w="1"/><text x="81.4302%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.1802%" y="661" width="0.0797%" height="15" fill="rgb(238,73,39)" fg:x="1018" fg:w="1"/><text x="81.4302%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="81.1802%" y="645" width="0.0797%" height="15" fill="rgb(252,115,9)" fg:x="1018" fg:w="1"/><text x="81.4302%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="81.1802%" y="629" width="0.0797%" height="15" fill="rgb(238,202,4)" fg:x="1018" fg:w="1"/><text x="81.4302%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="81.1802%" y="613" width="0.0797%" height="15" fill="rgb(252,153,44)" fg:x="1018" fg:w="1"/><text x="81.4302%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="81.1802%" y="597" width="0.0797%" height="15" fill="rgb(235,128,27)" fg:x="1018" fg:w="1"/><text x="81.4302%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="81.1802%" y="581" width="0.0797%" height="15" fill="rgb(221,121,47)" fg:x="1018" fg:w="1"/><text x="81.4302%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="81.1802%" y="565" width="0.0797%" height="15" fill="rgb(247,211,47)" fg:x="1018" fg:w="1"/><text x="81.4302%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.2600%" y="677" width="0.0797%" height="15" fill="rgb(252,47,49)" fg:x="1019" fg:w="1"/><text x="81.5100%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="81.3397%" y="645" width="0.0797%" height="15" fill="rgb(219,119,53)" fg:x="1020" fg:w="1"/><text x="81.5897%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="81.3397%" y="629" width="0.0797%" height="15" fill="rgb(243,165,53)" fg:x="1020" fg:w="1"/><text x="81.5897%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="81.3397%" y="613" width="0.0797%" height="15" fill="rgb(230,12,35)" fg:x="1020" fg:w="1"/><text x="81.5897%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.3397%" y="597" width="0.0797%" height="15" fill="rgb(239,57,49)" fg:x="1020" fg:w="1"/><text x="81.5897%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="81.3397%" y="581" width="0.0797%" height="15" fill="rgb(231,154,7)" fg:x="1020" fg:w="1"/><text x="81.5897%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.3397%" y="565" width="0.0797%" height="15" fill="rgb(248,81,34)" fg:x="1020" fg:w="1"/><text x="81.5897%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="81.3397%" y="549" width="0.0797%" height="15" fill="rgb(247,9,5)" fg:x="1020" fg:w="1"/><text x="81.5897%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.3397%" y="533" width="0.0797%" height="15" fill="rgb(228,172,27)" fg:x="1020" fg:w="1"/><text x="81.5897%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="81.3397%" y="517" width="0.0797%" height="15" fill="rgb(230,57,44)" fg:x="1020" fg:w="1"/><text x="81.5897%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.3397%" y="501" width="0.0797%" height="15" fill="rgb(249,35,22)" fg:x="1020" fg:w="1"/><text x="81.5897%" y="511.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="81.3397%" y="677" width="0.1595%" height="15" fill="rgb(250,137,27)" fg:x="1020" fg:w="2"/><text x="81.5897%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="81.3397%" y="661" width="0.1595%" height="15" fill="rgb(251,57,31)" fg:x="1020" fg:w="2"/><text x="81.5897%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="81.4195%" y="645" width="0.0797%" height="15" fill="rgb(238,60,0)" fg:x="1021" fg:w="1"/><text x="81.6695%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="81.4195%" y="629" width="0.0797%" height="15" fill="rgb(242,185,39)" fg:x="1021" fg:w="1"/><text x="81.6695%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="81.4195%" y="613" width="0.0797%" height="15" fill="rgb(240,63,43)" fg:x="1021" fg:w="1"/><text x="81.6695%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.4195%" y="597" width="0.0797%" height="15" fill="rgb(236,155,6)" fg:x="1021" fg:w="1"/><text x="81.6695%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="81.4195%" y="581" width="0.0797%" height="15" fill="rgb(215,11,29)" fg:x="1021" fg:w="1"/><text x="81.6695%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.4195%" y="565" width="0.0797%" height="15" fill="rgb(228,180,48)" fg:x="1021" fg:w="1"/><text x="81.6695%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="81.4195%" y="549" width="0.0797%" height="15" fill="rgb(241,102,12)" fg:x="1021" fg:w="1"/><text x="81.6695%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.4195%" y="533" width="0.0797%" height="15" fill="rgb(246,213,4)" fg:x="1021" fg:w="1"/><text x="81.6695%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.4195%" y="517" width="0.0797%" height="15" fill="rgb(218,134,35)" fg:x="1021" fg:w="1"/><text x="81.6695%" y="527.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (4 samples, 0.32%)</title><rect x="81.2600%" y="709" width="0.3190%" height="15" fill="rgb(251,117,35)" fg:x="1019" fg:w="4"/><text x="81.5100%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (4 samples, 0.32%)</title><rect x="81.2600%" y="693" width="0.3190%" height="15" fill="rgb(206,156,45)" fg:x="1019" fg:w="4"/><text x="81.5100%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="81.4992%" y="677" width="0.0797%" height="15" fill="rgb(218,52,27)" fg:x="1022" fg:w="1"/><text x="81.7492%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="81.4992%" y="661" width="0.0797%" height="15" fill="rgb(238,83,36)" fg:x="1022" fg:w="1"/><text x="81.7492%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.4992%" y="645" width="0.0797%" height="15" fill="rgb(218,53,43)" fg:x="1022" fg:w="1"/><text x="81.7492%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="81.4992%" y="629" width="0.0797%" height="15" fill="rgb(239,54,39)" fg:x="1022" fg:w="1"/><text x="81.7492%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.4992%" y="613" width="0.0797%" height="15" fill="rgb(212,198,13)" fg:x="1022" fg:w="1"/><text x="81.7492%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (1 samples, 0.08%)</title><rect x="81.5789%" y="709" width="0.0797%" height="15" fill="rgb(234,54,46)" fg:x="1023" fg:w="1"/><text x="81.8289%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="81.5789%" y="693" width="0.0797%" height="15" fill="rgb(217,120,7)" fg:x="1023" fg:w="1"/><text x="81.8289%" y="703.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="81.5789%" y="677" width="0.0797%" height="15" fill="rgb(246,39,15)" fg:x="1023" fg:w="1"/><text x="81.8289%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="81.5789%" y="661" width="0.0797%" height="15" fill="rgb(242,143,31)" fg:x="1023" fg:w="1"/><text x="81.8289%" y="671.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Route&gt;::serialize (1 samples, 0.08%)</title><rect x="81.5789%" y="645" width="0.0797%" height="15" fill="rgb(252,60,24)" fg:x="1023" fg:w="1"/><text x="81.8289%" y="655.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="81.6587%" y="693" width="0.0797%" height="15" fill="rgb(249,220,7)" fg:x="1024" fg:w="1"/><text x="81.9087%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="81.6587%" y="677" width="0.0797%" height="15" fill="rgb(236,67,13)" fg:x="1024" fg:w="1"/><text x="81.9087%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.6587%" y="661" width="0.0797%" height="15" fill="rgb(210,62,39)" fg:x="1024" fg:w="1"/><text x="81.9087%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.6587%" y="645" width="0.0797%" height="15" fill="rgb(219,122,53)" fg:x="1024" fg:w="1"/><text x="81.9087%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="81.6587%" y="629" width="0.0797%" height="15" fill="rgb(218,87,25)" fg:x="1024" fg:w="1"/><text x="81.9087%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="81.6587%" y="613" width="0.0797%" height="15" fill="rgb(234,179,48)" fg:x="1024" fg:w="1"/><text x="81.9087%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="81.6587%" y="597" width="0.0797%" height="15" fill="rgb(248,90,0)" fg:x="1024" fg:w="1"/><text x="81.9087%" y="607.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="81.6587%" y="581" width="0.0797%" height="15" fill="rgb(207,228,37)" fg:x="1024" fg:w="1"/><text x="81.9087%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="81.6587%" y="565" width="0.0797%" height="15" fill="rgb(235,214,15)" fg:x="1024" fg:w="1"/><text x="81.9087%" y="575.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (30 samples, 2.39%)</title><rect x="79.4258%" y="725" width="2.3923%" height="15" fill="rgb(210,144,39)" fg:x="996" fg:w="30"/><text x="79.6758%" y="735.50">pl..</text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="81.6587%" y="709" width="0.1595%" height="15" fill="rgb(222,67,41)" fg:x="1024" fg:w="2"/><text x="81.9087%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="81.7384%" y="693" width="0.0797%" height="15" fill="rgb(205,35,37)" fg:x="1025" fg:w="1"/><text x="81.9884%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="81.7384%" y="677" width="0.0797%" height="15" fill="rgb(216,125,40)" fg:x="1025" fg:w="1"/><text x="81.9884%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="81.7384%" y="661" width="0.0797%" height="15" fill="rgb(228,227,20)" fg:x="1025" fg:w="1"/><text x="81.9884%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="81.7384%" y="645" width="0.0797%" height="15" fill="rgb(242,173,45)" fg:x="1025" fg:w="1"/><text x="81.9884%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.7384%" y="629" width="0.0797%" height="15" fill="rgb(215,79,24)" fg:x="1025" fg:w="1"/><text x="81.9884%" y="639.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (1 samples, 0.08%)</title><rect x="81.8182%" y="725" width="0.0797%" height="15" fill="rgb(238,164,38)" fg:x="1026" fg:w="1"/><text x="82.0682%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="81.8182%" y="709" width="0.0797%" height="15" fill="rgb(245,196,38)" fg:x="1026" fg:w="1"/><text x="82.0682%" y="719.50"></text></g><g><title>plugins_core::build::Build::save (1 samples, 0.08%)</title><rect x="81.8182%" y="693" width="0.0797%" height="15" fill="rgb(231,217,29)" fg:x="1026" fg:w="1"/><text x="82.0682%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="81.8182%" y="677" width="0.0797%" height="15" fill="rgb(245,6,4)" fg:x="1026" fg:w="1"/><text x="82.0682%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="81.8182%" y="661" width="0.0797%" height="15" fill="rgb(214,76,49)" fg:x="1026" fg:w="1"/><text x="82.0682%" y="671.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="81.8182%" y="645" width="0.0797%" height="15" fill="rgb(205,96,12)" fg:x="1026" fg:w="1"/><text x="82.0682%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="81.8182%" y="629" width="0.0797%" height="15" fill="rgb(243,131,4)" fg:x="1026" fg:w="1"/><text x="82.0682%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="81.8182%" y="613" width="0.0797%" height="15" fill="rgb(214,114,4)" fg:x="1026" fg:w="1"/><text x="82.0682%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="81.8182%" y="597" width="0.0797%" height="15" fill="rgb(234,215,15)" fg:x="1026" fg:w="1"/><text x="82.0682%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.8182%" y="581" width="0.0797%" height="15" fill="rgb(250,216,45)" fg:x="1026" fg:w="1"/><text x="82.0682%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="81.8182%" y="565" width="0.0797%" height="15" fill="rgb(236,128,4)" fg:x="1026" fg:w="1"/><text x="82.0682%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.8182%" y="549" width="0.0797%" height="15" fill="rgb(234,50,33)" fg:x="1026" fg:w="1"/><text x="82.0682%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="81.8182%" y="533" width="0.0797%" height="15" fill="rgb(253,131,37)" fg:x="1026" fg:w="1"/><text x="82.0682%" y="543.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="81.8979%" y="709" width="0.0797%" height="15" fill="rgb(218,55,27)" fg:x="1027" fg:w="1"/><text x="82.1479%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="81.8979%" y="693" width="0.0797%" height="15" fill="rgb(241,220,28)" fg:x="1027" fg:w="1"/><text x="82.1479%" y="703.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="81.8979%" y="677" width="0.0797%" height="15" fill="rgb(241,90,48)" fg:x="1027" fg:w="1"/><text x="82.1479%" y="687.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="81.8979%" y="661" width="0.0797%" height="15" fill="rgb(216,43,37)" fg:x="1027" fg:w="1"/><text x="82.1479%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="81.9777%" y="677" width="0.1595%" height="15" fill="rgb(207,173,9)" fg:x="1028" fg:w="2"/><text x="82.2277%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="81.9777%" y="661" width="0.1595%" height="15" fill="rgb(240,126,30)" fg:x="1028" fg:w="2"/><text x="82.2277%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="81.9777%" y="645" width="0.1595%" height="15" fill="rgb(228,178,53)" fg:x="1028" fg:w="2"/><text x="82.2277%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="81.9777%" y="629" width="0.1595%" height="15" fill="rgb(217,33,4)" fg:x="1028" fg:w="2"/><text x="82.2277%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="81.9777%" y="613" width="0.1595%" height="15" fill="rgb(206,124,34)" fg:x="1028" fg:w="2"/><text x="82.2277%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="81.9777%" y="597" width="0.1595%" height="15" fill="rgb(208,122,53)" fg:x="1028" fg:w="2"/><text x="82.2277%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="81.9777%" y="581" width="0.1595%" height="15" fill="rgb(215,202,26)" fg:x="1028" fg:w="2"/><text x="82.2277%" y="591.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (65 samples, 5.18%)</title><rect x="77.0335%" y="741" width="5.1834%" height="15" fill="rgb(232,198,31)" fg:x="966" fg:w="65"/><text x="77.2835%" y="751.50">&lt;tests..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (4 samples, 0.32%)</title><rect x="81.8979%" y="725" width="0.3190%" height="15" fill="rgb(222,23,35)" fg:x="1027" fg:w="4"/><text x="82.1479%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="81.9777%" y="709" width="0.2392%" height="15" fill="rgb(242,27,53)" fg:x="1028" fg:w="3"/><text x="82.2277%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="81.9777%" y="693" width="0.2392%" height="15" fill="rgb(210,216,42)" fg:x="1028" fg:w="3"/><text x="82.2277%" y="703.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="82.1372%" y="677" width="0.0797%" height="15" fill="rgb(234,39,38)" fg:x="1030" fg:w="1"/><text x="82.3872%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="82.2169%" y="741" width="0.0797%" height="15" fill="rgb(235,126,54)" fg:x="1031" fg:w="1"/><text x="82.4669%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="82.2169%" y="725" width="0.0797%" height="15" fill="rgb(235,150,33)" fg:x="1031" fg:w="1"/><text x="82.4669%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="82.2169%" y="709" width="0.0797%" height="15" fill="rgb(249,49,53)" fg:x="1031" fg:w="1"/><text x="82.4669%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="82.2169%" y="693" width="0.0797%" height="15" fill="rgb(238,60,50)" fg:x="1031" fg:w="1"/><text x="82.4669%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="82.2169%" y="677" width="0.0797%" height="15" fill="rgb(210,5,2)" fg:x="1031" fg:w="1"/><text x="82.4669%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="82.2169%" y="661" width="0.0797%" height="15" fill="rgb(214,207,24)" fg:x="1031" fg:w="1"/><text x="82.4669%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="82.2169%" y="645" width="0.0797%" height="15" fill="rgb(228,173,2)" fg:x="1031" fg:w="1"/><text x="82.4669%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.2169%" y="629" width="0.0797%" height="15" fill="rgb(244,26,8)" fg:x="1031" fg:w="1"/><text x="82.4669%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="82.3764%" y="725" width="0.0797%" height="15" fill="rgb(249,153,35)" fg:x="1033" fg:w="1"/><text x="82.6264%" y="735.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="82.3764%" y="709" width="0.0797%" height="15" fill="rgb(221,215,40)" fg:x="1033" fg:w="1"/><text x="82.6264%" y="719.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="82.3764%" y="693" width="0.0797%" height="15" fill="rgb(238,106,35)" fg:x="1033" fg:w="1"/><text x="82.6264%" y="703.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="82.3764%" y="677" width="0.0797%" height="15" fill="rgb(207,195,21)" fg:x="1033" fg:w="1"/><text x="82.6264%" y="687.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="82.3764%" y="661" width="0.0797%" height="15" fill="rgb(205,43,29)" fg:x="1033" fg:w="1"/><text x="82.6264%" y="671.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="82.3764%" y="645" width="0.0797%" height="15" fill="rgb(236,35,21)" fg:x="1033" fg:w="1"/><text x="82.6264%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="82.3764%" y="629" width="0.0797%" height="15" fill="rgb(244,74,8)" fg:x="1033" fg:w="1"/><text x="82.6264%" y="639.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="82.3764%" y="613" width="0.0797%" height="15" fill="rgb(241,229,7)" fg:x="1033" fg:w="1"/><text x="82.6264%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="82.3764%" y="597" width="0.0797%" height="15" fill="rgb(212,223,25)" fg:x="1033" fg:w="1"/><text x="82.6264%" y="607.50"></text></g><g><title>core::fmt::run (1 samples, 0.08%)</title><rect x="82.3764%" y="581" width="0.0797%" height="15" fill="rgb(234,58,53)" fg:x="1033" fg:w="1"/><text x="82.6264%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="82.3764%" y="565" width="0.0797%" height="15" fill="rgb(244,36,1)" fg:x="1033" fg:w="1"/><text x="82.6264%" y="575.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="82.3764%" y="549" width="0.0797%" height="15" fill="rgb(222,40,54)" fg:x="1033" fg:w="1"/><text x="82.6264%" y="559.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::count (1 samples, 0.08%)</title><rect x="82.3764%" y="533" width="0.0797%" height="15" fill="rgb(210,207,39)" fg:x="1033" fg:w="1"/><text x="82.6264%" y="543.50"></text></g><g><title>core::str::count::count_chars (1 samples, 0.08%)</title><rect x="82.3764%" y="517" width="0.0797%" height="15" fill="rgb(234,52,14)" fg:x="1033" fg:w="1"/><text x="82.6264%" y="527.50"></text></g><g><title>core::str::count::char_count_general_case (1 samples, 0.08%)</title><rect x="82.3764%" y="501" width="0.0797%" height="15" fill="rgb(239,108,46)" fg:x="1033" fg:w="1"/><text x="82.6264%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (1 samples, 0.08%)</title><rect x="82.3764%" y="485" width="0.0797%" height="15" fill="rgb(252,223,5)" fg:x="1033" fg:w="1"/><text x="82.6264%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="82.3764%" y="469" width="0.0797%" height="15" fill="rgb(227,181,11)" fg:x="1033" fg:w="1"/><text x="82.6264%" y="479.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="82.3764%" y="453" width="0.0797%" height="15" fill="rgb(248,126,40)" fg:x="1033" fg:w="1"/><text x="82.6264%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="82.3764%" y="437" width="0.0797%" height="15" fill="rgb(243,1,18)" fg:x="1033" fg:w="1"/><text x="82.6264%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="82.3764%" y="421" width="0.0797%" height="15" fill="rgb(214,145,23)" fg:x="1033" fg:w="1"/><text x="82.6264%" y="431.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="82.4561%" y="693" width="0.0797%" height="15" fill="rgb(241,218,11)" fg:x="1034" fg:w="1"/><text x="82.7061%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="82.4561%" y="677" width="0.0797%" height="15" fill="rgb(214,219,24)" fg:x="1034" fg:w="1"/><text x="82.7061%" y="687.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="82.4561%" y="661" width="0.0797%" height="15" fill="rgb(235,32,7)" fg:x="1034" fg:w="1"/><text x="82.7061%" y="671.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="82.4561%" y="645" width="0.0797%" height="15" fill="rgb(227,121,28)" fg:x="1034" fg:w="1"/><text x="82.7061%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.4561%" y="629" width="0.0797%" height="15" fill="rgb(216,129,49)" fg:x="1034" fg:w="1"/><text x="82.7061%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="82.6156%" y="565" width="0.0797%" height="15" fill="rgb(207,194,50)" fg:x="1036" fg:w="1"/><text x="82.8656%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.6156%" y="549" width="0.0797%" height="15" fill="rgb(207,4,18)" fg:x="1036" fg:w="1"/><text x="82.8656%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="82.6954%" y="565" width="0.1595%" height="15" fill="rgb(213,50,30)" fg:x="1037" fg:w="2"/><text x="82.9454%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="82.7751%" y="549" width="0.0797%" height="15" fill="rgb(208,77,22)" fg:x="1038" fg:w="1"/><text x="83.0251%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.7751%" y="533" width="0.0797%" height="15" fill="rgb(244,204,34)" fg:x="1038" fg:w="1"/><text x="83.0251%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="82.6156%" y="597" width="0.3190%" height="15" fill="rgb(230,20,17)" fg:x="1036" fg:w="4"/><text x="82.8656%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="82.6156%" y="581" width="0.3190%" height="15" fill="rgb(237,83,15)" fg:x="1036" fg:w="4"/><text x="82.8656%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.8549%" y="565" width="0.0797%" height="15" fill="rgb(221,109,25)" fg:x="1039" fg:w="1"/><text x="83.1049%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="82.8549%" y="549" width="0.0797%" height="15" fill="rgb(205,194,52)" fg:x="1039" fg:w="1"/><text x="83.1049%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="82.8549%" y="533" width="0.0797%" height="15" fill="rgb(244,173,54)" fg:x="1039" fg:w="1"/><text x="83.1049%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="82.9346%" y="597" width="0.0797%" height="15" fill="rgb(227,181,18)" fg:x="1040" fg:w="1"/><text x="83.1846%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.9346%" y="581" width="0.0797%" height="15" fill="rgb(238,36,30)" fg:x="1040" fg:w="1"/><text x="83.1846%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="82.9346%" y="565" width="0.0797%" height="15" fill="rgb(254,85,0)" fg:x="1040" fg:w="1"/><text x="83.1846%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="83.0144%" y="565" width="0.0797%" height="15" fill="rgb(247,63,33)" fg:x="1041" fg:w="1"/><text x="83.2644%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="83.0144%" y="549" width="0.0797%" height="15" fill="rgb(220,7,54)" fg:x="1041" fg:w="1"/><text x="83.2644%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="83.0144%" y="533" width="0.0797%" height="15" fill="rgb(238,227,21)" fg:x="1041" fg:w="1"/><text x="83.2644%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="83.0144%" y="517" width="0.0797%" height="15" fill="rgb(237,29,31)" fg:x="1041" fg:w="1"/><text x="83.2644%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="83.0144%" y="501" width="0.0797%" height="15" fill="rgb(211,21,50)" fg:x="1041" fg:w="1"/><text x="83.2644%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.0144%" y="485" width="0.0797%" height="15" fill="rgb(239,119,2)" fg:x="1041" fg:w="1"/><text x="83.2644%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="83.0144%" y="469" width="0.0797%" height="15" fill="rgb(250,2,39)" fg:x="1041" fg:w="1"/><text x="83.2644%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="83.0144%" y="581" width="0.2392%" height="15" fill="rgb(244,46,53)" fg:x="1041" fg:w="3"/><text x="83.2644%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="83.0941%" y="565" width="0.1595%" height="15" fill="rgb(209,21,19)" fg:x="1042" fg:w="2"/><text x="83.3441%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="83.0941%" y="549" width="0.1595%" height="15" fill="rgb(236,145,4)" fg:x="1042" fg:w="2"/><text x="83.3441%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="83.1738%" y="533" width="0.0797%" height="15" fill="rgb(220,133,36)" fg:x="1043" fg:w="1"/><text x="83.4238%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="83.1738%" y="517" width="0.0797%" height="15" fill="rgb(244,18,3)" fg:x="1043" fg:w="1"/><text x="83.4238%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.72%)</title><rect x="82.6156%" y="613" width="0.7177%" height="15" fill="rgb(232,171,48)" fg:x="1036" fg:w="9"/><text x="82.8656%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="83.0144%" y="597" width="0.3190%" height="15" fill="rgb(223,223,53)" fg:x="1041" fg:w="4"/><text x="83.2644%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="83.2536%" y="581" width="0.0797%" height="15" fill="rgb(246,92,13)" fg:x="1044" fg:w="1"/><text x="83.5036%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="83.2536%" y="565" width="0.0797%" height="15" fill="rgb(229,171,10)" fg:x="1044" fg:w="1"/><text x="83.5036%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.80%)</title><rect x="82.6156%" y="645" width="0.7974%" height="15" fill="rgb(213,131,26)" fg:x="1036" fg:w="10"/><text x="82.8656%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.80%)</title><rect x="82.6156%" y="629" width="0.7974%" height="15" fill="rgb(242,87,54)" fg:x="1036" fg:w="10"/><text x="82.8656%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="83.3333%" y="613" width="0.0797%" height="15" fill="rgb(237,21,35)" fg:x="1045" fg:w="1"/><text x="83.5833%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.4131%" y="597" width="0.0797%" height="15" fill="rgb(253,13,47)" fg:x="1046" fg:w="1"/><text x="83.6631%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="83.4928%" y="581" width="0.0797%" height="15" fill="rgb(215,122,49)" fg:x="1047" fg:w="1"/><text x="83.7428%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.4928%" y="565" width="0.0797%" height="15" fill="rgb(209,179,30)" fg:x="1047" fg:w="1"/><text x="83.7428%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="83.4131%" y="645" width="0.3190%" height="15" fill="rgb(235,100,24)" fg:x="1046" fg:w="4"/><text x="83.6631%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="83.4131%" y="629" width="0.3190%" height="15" fill="rgb(209,67,24)" fg:x="1046" fg:w="4"/><text x="83.6631%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="83.4131%" y="613" width="0.3190%" height="15" fill="rgb(206,74,32)" fg:x="1046" fg:w="4"/><text x="83.6631%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="83.4928%" y="597" width="0.2392%" height="15" fill="rgb(212,45,25)" fg:x="1047" fg:w="3"/><text x="83.7428%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="83.5726%" y="581" width="0.1595%" height="15" fill="rgb(239,26,3)" fg:x="1048" fg:w="2"/><text x="83.8226%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="83.5726%" y="565" width="0.1595%" height="15" fill="rgb(218,36,15)" fg:x="1048" fg:w="2"/><text x="83.8226%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="83.5726%" y="549" width="0.1595%" height="15" fill="rgb(206,108,24)" fg:x="1048" fg:w="2"/><text x="83.8226%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.6523%" y="533" width="0.0797%" height="15" fill="rgb(234,204,42)" fg:x="1049" fg:w="1"/><text x="83.9023%" y="543.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="83.7321%" y="613" width="0.0797%" height="15" fill="rgb(229,2,11)" fg:x="1050" fg:w="1"/><text x="83.9821%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.8118%" y="581" width="0.0797%" height="15" fill="rgb(221,20,48)" fg:x="1051" fg:w="1"/><text x="84.0618%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.9713%" y="549" width="0.0797%" height="15" fill="rgb(244,164,10)" fg:x="1053" fg:w="1"/><text x="84.2213%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.0510%" y="533" width="0.0797%" height="15" fill="rgb(243,229,2)" fg:x="1054" fg:w="1"/><text x="84.3010%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="83.8118%" y="613" width="0.3987%" height="15" fill="rgb(232,131,37)" fg:x="1051" fg:w="5"/><text x="84.0618%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="83.8118%" y="597" width="0.3987%" height="15" fill="rgb(217,156,11)" fg:x="1051" fg:w="5"/><text x="84.0618%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="83.8915%" y="581" width="0.3190%" height="15" fill="rgb(239,99,48)" fg:x="1052" fg:w="4"/><text x="84.1415%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="83.9713%" y="565" width="0.2392%" height="15" fill="rgb(231,209,9)" fg:x="1053" fg:w="3"/><text x="84.2213%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="84.0510%" y="549" width="0.1595%" height="15" fill="rgb(254,97,27)" fg:x="1054" fg:w="2"/><text x="84.3010%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="84.1308%" y="533" width="0.0797%" height="15" fill="rgb(223,151,38)" fg:x="1055" fg:w="1"/><text x="84.3808%" y="543.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::iter (1 samples, 0.08%)</title><rect x="84.2105%" y="613" width="0.0797%" height="15" fill="rgb(219,206,35)" fg:x="1056" fg:w="1"/><text x="84.4605%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="84.2903%" y="597" width="0.0797%" height="15" fill="rgb(216,130,31)" fg:x="1057" fg:w="1"/><text x="84.5403%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="84.2903%" y="581" width="0.0797%" height="15" fill="rgb(251,97,34)" fg:x="1057" fg:w="1"/><text x="84.5403%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="84.2903%" y="565" width="0.0797%" height="15" fill="rgb(246,159,47)" fg:x="1057" fg:w="1"/><text x="84.5403%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="84.2903%" y="549" width="0.0797%" height="15" fill="rgb(232,87,10)" fg:x="1057" fg:w="1"/><text x="84.5403%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="84.2903%" y="533" width="0.0797%" height="15" fill="rgb(249,1,37)" fg:x="1057" fg:w="1"/><text x="84.5403%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (9 samples, 0.72%)</title><rect x="83.7321%" y="629" width="0.7177%" height="15" fill="rgb(239,135,14)" fg:x="1050" fg:w="9"/><text x="83.9821%" y="639.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="84.2903%" y="613" width="0.1595%" height="15" fill="rgb(253,116,46)" fg:x="1057" fg:w="2"/><text x="84.5403%" y="623.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="84.3700%" y="597" width="0.0797%" height="15" fill="rgb(222,217,37)" fg:x="1058" fg:w="1"/><text x="84.6200%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.3700%" y="581" width="0.0797%" height="15" fill="rgb(252,96,8)" fg:x="1058" fg:w="1"/><text x="84.6200%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="84.5295%" y="597" width="0.0797%" height="15" fill="rgb(254,103,41)" fg:x="1060" fg:w="1"/><text x="84.7795%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="84.5295%" y="581" width="0.0797%" height="15" fill="rgb(218,213,19)" fg:x="1060" fg:w="1"/><text x="84.7795%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.6093%" y="549" width="0.0797%" height="15" fill="rgb(253,95,21)" fg:x="1061" fg:w="1"/><text x="84.8593%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.6093%" y="533" width="0.0797%" height="15" fill="rgb(229,26,28)" fg:x="1061" fg:w="1"/><text x="84.8593%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="84.6890%" y="549" width="0.0797%" height="15" fill="rgb(230,129,16)" fg:x="1062" fg:w="1"/><text x="84.9390%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="84.6890%" y="533" width="0.0797%" height="15" fill="rgb(236,126,17)" fg:x="1062" fg:w="1"/><text x="84.9390%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="84.6890%" y="517" width="0.0797%" height="15" fill="rgb(209,33,33)" fg:x="1062" fg:w="1"/><text x="84.9390%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.6890%" y="501" width="0.0797%" height="15" fill="rgb(227,85,29)" fg:x="1062" fg:w="1"/><text x="84.9390%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="84.7687%" y="533" width="0.0797%" height="15" fill="rgb(241,53,46)" fg:x="1063" fg:w="1"/><text x="85.0187%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="84.8485%" y="533" width="0.2392%" height="15" fill="rgb(228,167,53)" fg:x="1064" fg:w="3"/><text x="85.0985%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="84.9282%" y="517" width="0.1595%" height="15" fill="rgb(238,195,45)" fg:x="1065" fg:w="2"/><text x="85.1782%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="84.9282%" y="501" width="0.1595%" height="15" fill="rgb(252,124,45)" fg:x="1065" fg:w="2"/><text x="85.1782%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="84.9282%" y="485" width="0.1595%" height="15" fill="rgb(251,38,35)" fg:x="1065" fg:w="2"/><text x="85.1782%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.0080%" y="469" width="0.0797%" height="15" fill="rgb(227,33,2)" fg:x="1066" fg:w="1"/><text x="85.2580%" y="479.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.72%)</title><rect x="84.4498%" y="629" width="0.7177%" height="15" fill="rgb(223,157,46)" fg:x="1059" fg:w="9"/><text x="84.6998%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.72%)</title><rect x="84.4498%" y="613" width="0.7177%" height="15" fill="rgb(222,78,41)" fg:x="1059" fg:w="9"/><text x="84.6998%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.56%)</title><rect x="84.6093%" y="597" width="0.5582%" height="15" fill="rgb(248,176,11)" fg:x="1061" fg:w="7"/><text x="84.8593%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.56%)</title><rect x="84.6093%" y="581" width="0.5582%" height="15" fill="rgb(241,221,18)" fg:x="1061" fg:w="7"/><text x="84.8593%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.56%)</title><rect x="84.6093%" y="565" width="0.5582%" height="15" fill="rgb(218,85,22)" fg:x="1061" fg:w="7"/><text x="84.8593%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="84.7687%" y="549" width="0.3987%" height="15" fill="rgb(222,223,7)" fg:x="1063" fg:w="5"/><text x="85.0187%" y="559.50"></text></g><g><title>serde_json::value::from::&lt;impl core::convert::From&lt;f64&gt; for serde_json::value::Value&gt;::from (1 samples, 0.08%)</title><rect x="85.0877%" y="533" width="0.0797%" height="15" fill="rgb(254,59,39)" fg:x="1067" fg:w="1"/><text x="85.3377%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="85.0877%" y="517" width="0.0797%" height="15" fill="rgb(247,100,27)" fg:x="1067" fg:w="1"/><text x="85.3377%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="85.1675%" y="469" width="0.0797%" height="15" fill="rgb(237,207,10)" fg:x="1068" fg:w="1"/><text x="85.4175%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="85.1675%" y="453" width="0.0797%" height="15" fill="rgb(220,121,28)" fg:x="1068" fg:w="1"/><text x="85.4175%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="85.1675%" y="437" width="0.0797%" height="15" fill="rgb(213,223,20)" fg:x="1068" fg:w="1"/><text x="85.4175%" y="447.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="85.1675%" y="421" width="0.0797%" height="15" fill="rgb(205,121,27)" fg:x="1068" fg:w="1"/><text x="85.4175%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="85.1675%" y="501" width="0.1595%" height="15" fill="rgb(253,24,53)" fg:x="1068" fg:w="2"/><text x="85.4175%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="85.1675%" y="485" width="0.1595%" height="15" fill="rgb(224,224,47)" fg:x="1068" fg:w="2"/><text x="85.4175%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.2472%" y="469" width="0.0797%" height="15" fill="rgb(250,125,36)" fg:x="1069" fg:w="1"/><text x="85.4972%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.2472%" y="453" width="0.0797%" height="15" fill="rgb(240,144,38)" fg:x="1069" fg:w="1"/><text x="85.4972%" y="463.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="85.2472%" y="437" width="0.0797%" height="15" fill="rgb(250,15,50)" fg:x="1069" fg:w="1"/><text x="85.4972%" y="447.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="85.4067%" y="485" width="0.0797%" height="15" fill="rgb(210,24,26)" fg:x="1071" fg:w="1"/><text x="85.6567%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (4 samples, 0.32%)</title><rect x="85.3270%" y="501" width="0.3190%" height="15" fill="rgb(234,53,53)" fg:x="1070" fg:w="4"/><text x="85.5770%" y="511.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="85.4864%" y="485" width="0.1595%" height="15" fill="rgb(208,108,28)" fg:x="1072" fg:w="2"/><text x="85.7364%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="85.1675%" y="533" width="0.5582%" height="15" fill="rgb(227,143,7)" fg:x="1068" fg:w="7"/><text x="85.4175%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="85.1675%" y="517" width="0.5582%" height="15" fill="rgb(238,189,38)" fg:x="1068" fg:w="7"/><text x="85.4175%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.6459%" y="501" width="0.0797%" height="15" fill="rgb(222,69,15)" fg:x="1074" fg:w="1"/><text x="85.8959%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="85.7257%" y="533" width="0.1595%" height="15" fill="rgb(213,169,7)" fg:x="1075" fg:w="2"/><text x="85.9757%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.8054%" y="517" width="0.0797%" height="15" fill="rgb(251,219,4)" fg:x="1076" fg:w="1"/><text x="86.0554%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.80%)</title><rect x="85.1675%" y="565" width="0.7974%" height="15" fill="rgb(241,55,40)" fg:x="1068" fg:w="10"/><text x="85.4175%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (10 samples, 0.80%)</title><rect x="85.1675%" y="549" width="0.7974%" height="15" fill="rgb(243,57,30)" fg:x="1068" fg:w="10"/><text x="85.4175%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.8852%" y="533" width="0.0797%" height="15" fill="rgb(234,50,30)" fg:x="1077" fg:w="1"/><text x="86.1352%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.8852%" y="517" width="0.0797%" height="15" fill="rgb(239,23,42)" fg:x="1077" fg:w="1"/><text x="86.1352%" y="527.50"></text></g><g><title>engine::session::Session::close (47 samples, 3.75%)</title><rect x="82.2967%" y="741" width="3.7480%" height="15" fill="rgb(217,38,19)" fg:x="1032" fg:w="47"/><text x="82.5467%" y="751.50">engi..</text></g><g><title>engine::session::state::State::close (45 samples, 3.59%)</title><rect x="82.4561%" y="725" width="3.5885%" height="15" fill="rgb(215,179,16)" fg:x="1034" fg:w="45"/><text x="82.7061%" y="735.50">engi..</text></g><g><title>engine::session::state::State::flush_entities (45 samples, 3.59%)</title><rect x="82.4561%" y="709" width="3.5885%" height="15" fill="rgb(254,21,37)" fg:x="1034" fg:w="45"/><text x="82.7061%" y="719.50">engi..</text></g><g><title>core::iter::adapters::try_process (44 samples, 3.51%)</title><rect x="82.5359%" y="693" width="3.5088%" height="15" fill="rgb(219,207,48)" fg:x="1035" fg:w="44"/><text x="82.7859%" y="703.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (44 samples, 3.51%)</title><rect x="82.5359%" y="677" width="3.5088%" height="15" fill="rgb(227,225,41)" fg:x="1035" fg:w="44"/><text x="82.7859%" y="687.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (44 samples, 3.51%)</title><rect x="82.5359%" y="661" width="3.5088%" height="15" fill="rgb(223,130,1)" fg:x="1035" fg:w="44"/><text x="82.7859%" y="671.50">eng..</text></g><g><title>kernel::model::any_entity_changes (29 samples, 2.31%)</title><rect x="83.7321%" y="645" width="2.3126%" height="15" fill="rgb(249,54,42)" fg:x="1050" fg:w="29"/><text x="83.9821%" y="655.50">k..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (11 samples, 0.88%)</title><rect x="85.1675%" y="629" width="0.8772%" height="15" fill="rgb(248,69,25)" fg:x="1068" fg:w="11"/><text x="85.4175%" y="639.50"></text></g><g><title>serde_json::de::from_trait (11 samples, 0.88%)</title><rect x="85.1675%" y="613" width="0.8772%" height="15" fill="rgb(234,21,32)" fg:x="1068" fg:w="11"/><text x="85.4175%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.88%)</title><rect x="85.1675%" y="597" width="0.8772%" height="15" fill="rgb(252,136,6)" fg:x="1068" fg:w="11"/><text x="85.4175%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (11 samples, 0.88%)</title><rect x="85.1675%" y="581" width="0.8772%" height="15" fill="rgb(245,87,12)" fg:x="1068" fg:w="11"/><text x="85.4175%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.9649%" y="565" width="0.0797%" height="15" fill="rgb(208,12,15)" fg:x="1078" fg:w="1"/><text x="86.2149%" y="575.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="86.0447%" y="709" width="0.0797%" height="15" fill="rgb(250,98,2)" fg:x="1079" fg:w="1"/><text x="86.2947%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="86.0447%" y="693" width="0.0797%" height="15" fill="rgb(205,213,15)" fg:x="1079" fg:w="1"/><text x="86.2947%" y="703.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="86.0447%" y="677" width="0.0797%" height="15" fill="rgb(248,192,44)" fg:x="1079" fg:w="1"/><text x="86.2947%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="86.1244%" y="693" width="0.0797%" height="15" fill="rgb(221,89,17)" fg:x="1080" fg:w="1"/><text x="86.3744%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="86.1244%" y="677" width="0.0797%" height="15" fill="rgb(209,55,3)" fg:x="1080" fg:w="1"/><text x="86.3744%" y="687.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="86.1244%" y="661" width="0.0797%" height="15" fill="rgb(247,23,45)" fg:x="1080" fg:w="1"/><text x="86.3744%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="86.1244%" y="645" width="0.0797%" height="15" fill="rgb(235,152,23)" fg:x="1080" fg:w="1"/><text x="86.3744%" y="655.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="86.1244%" y="629" width="0.0797%" height="15" fill="rgb(244,63,13)" fg:x="1080" fg:w="1"/><text x="86.3744%" y="639.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (1 samples, 0.08%)</title><rect x="86.1244%" y="613" width="0.0797%" height="15" fill="rgb(227,30,37)" fg:x="1080" fg:w="1"/><text x="86.3744%" y="623.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="86.1244%" y="597" width="0.0797%" height="15" fill="rgb(224,49,42)" fg:x="1080" fg:w="1"/><text x="86.3744%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="86.1244%" y="581" width="0.0797%" height="15" fill="rgb(218,129,5)" fg:x="1080" fg:w="1"/><text x="86.3744%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="86.1244%" y="565" width="0.0797%" height="15" fill="rgb(240,199,54)" fg:x="1080" fg:w="1"/><text x="86.3744%" y="575.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="86.1244%" y="549" width="0.0797%" height="15" fill="rgb(234,31,13)" fg:x="1080" fg:w="1"/><text x="86.3744%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="86.1244%" y="533" width="0.0797%" height="15" fill="rgb(219,73,54)" fg:x="1080" fg:w="1"/><text x="86.3744%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::actions::PerformAction&gt; (1 samples, 0.08%)</title><rect x="86.2041%" y="693" width="0.0797%" height="15" fill="rgb(251,162,10)" fg:x="1081" fg:w="1"/><text x="86.4541%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.4434%" y="549" width="0.0797%" height="15" fill="rgb(240,138,47)" fg:x="1084" fg:w="1"/><text x="86.6934%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="86.3636%" y="565" width="0.2392%" height="15" fill="rgb(216,138,26)" fg:x="1083" fg:w="3"/><text x="86.6136%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="86.5231%" y="549" width="0.0797%" height="15" fill="rgb(243,17,35)" fg:x="1085" fg:w="1"/><text x="86.7731%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="86.5231%" y="533" width="0.0797%" height="15" fill="rgb(241,60,18)" fg:x="1085" fg:w="1"/><text x="86.7731%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="86.5231%" y="517" width="0.0797%" height="15" fill="rgb(234,2,44)" fg:x="1085" fg:w="1"/><text x="86.7731%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="86.5231%" y="501" width="0.0797%" height="15" fill="rgb(225,225,33)" fg:x="1085" fg:w="1"/><text x="86.7731%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="86.6029%" y="501" width="0.0797%" height="15" fill="rgb(234,50,31)" fg:x="1086" fg:w="1"/><text x="86.8529%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="86.6029%" y="485" width="0.0797%" height="15" fill="rgb(249,6,25)" fg:x="1086" fg:w="1"/><text x="86.8529%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="86.6029%" y="469" width="0.0797%" height="15" fill="rgb(241,5,17)" fg:x="1086" fg:w="1"/><text x="86.8529%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="86.6029%" y="453" width="0.0797%" height="15" fill="rgb(207,116,10)" fg:x="1086" fg:w="1"/><text x="86.8529%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="86.6029%" y="437" width="0.0797%" height="15" fill="rgb(222,128,18)" fg:x="1086" fg:w="1"/><text x="86.8529%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="86.6029%" y="421" width="0.0797%" height="15" fill="rgb(229,109,25)" fg:x="1086" fg:w="1"/><text x="86.8529%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="86.6029%" y="405" width="0.0797%" height="15" fill="rgb(222,102,25)" fg:x="1086" fg:w="1"/><text x="86.8529%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="86.6029%" y="389" width="0.0797%" height="15" fill="rgb(239,211,5)" fg:x="1086" fg:w="1"/><text x="86.8529%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="86.6826%" y="405" width="0.0797%" height="15" fill="rgb(223,136,26)" fg:x="1087" fg:w="1"/><text x="86.9326%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="86.6826%" y="389" width="0.0797%" height="15" fill="rgb(227,30,15)" fg:x="1087" fg:w="1"/><text x="86.9326%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="86.6826%" y="453" width="0.1595%" height="15" fill="rgb(247,76,4)" fg:x="1087" fg:w="2"/><text x="86.9326%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="86.6826%" y="437" width="0.1595%" height="15" fill="rgb(245,38,48)" fg:x="1087" fg:w="2"/><text x="86.9326%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="86.6826%" y="421" width="0.1595%" height="15" fill="rgb(210,220,14)" fg:x="1087" fg:w="2"/><text x="86.9326%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="86.7624%" y="405" width="0.0797%" height="15" fill="rgb(224,60,51)" fg:x="1088" fg:w="1"/><text x="87.0124%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="86.7624%" y="389" width="0.0797%" height="15" fill="rgb(212,133,49)" fg:x="1088" fg:w="1"/><text x="87.0124%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="86.7624%" y="373" width="0.0797%" height="15" fill="rgb(231,39,22)" fg:x="1088" fg:w="1"/><text x="87.0124%" y="383.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="86.6826%" y="501" width="0.2392%" height="15" fill="rgb(236,173,22)" fg:x="1087" fg:w="3"/><text x="86.9326%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="86.6826%" y="485" width="0.2392%" height="15" fill="rgb(210,70,0)" fg:x="1087" fg:w="3"/><text x="86.9326%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="86.6826%" y="469" width="0.2392%" height="15" fill="rgb(215,170,11)" fg:x="1087" fg:w="3"/><text x="86.9326%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="86.8421%" y="453" width="0.0797%" height="15" fill="rgb(220,154,28)" fg:x="1089" fg:w="1"/><text x="87.0921%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="86.8421%" y="437" width="0.0797%" height="15" fill="rgb(240,160,41)" fg:x="1089" fg:w="1"/><text x="87.0921%" y="447.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (8 samples, 0.64%)</title><rect x="86.3636%" y="597" width="0.6380%" height="15" fill="rgb(243,215,41)" fg:x="1083" fg:w="8"/><text x="86.6136%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (8 samples, 0.64%)</title><rect x="86.3636%" y="581" width="0.6380%" height="15" fill="rgb(214,208,31)" fg:x="1083" fg:w="8"/><text x="86.6136%" y="591.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (5 samples, 0.40%)</title><rect x="86.6029%" y="565" width="0.3987%" height="15" fill="rgb(247,57,22)" fg:x="1086" fg:w="5"/><text x="86.8529%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (5 samples, 0.40%)</title><rect x="86.6029%" y="549" width="0.3987%" height="15" fill="rgb(228,73,52)" fg:x="1086" fg:w="5"/><text x="86.8529%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (5 samples, 0.40%)</title><rect x="86.6029%" y="533" width="0.3987%" height="15" fill="rgb(252,60,9)" fg:x="1086" fg:w="5"/><text x="86.8529%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="86.6029%" y="517" width="0.3987%" height="15" fill="rgb(233,9,51)" fg:x="1086" fg:w="5"/><text x="86.8529%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="86.9219%" y="501" width="0.0797%" height="15" fill="rgb(223,67,14)" fg:x="1090" fg:w="1"/><text x="87.1719%" y="511.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="86.9219%" y="485" width="0.0797%" height="15" fill="rgb(222,86,2)" fg:x="1090" fg:w="1"/><text x="87.1719%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="86.9219%" y="469" width="0.0797%" height="15" fill="rgb(243,58,54)" fg:x="1090" fg:w="1"/><text x="87.1719%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="86.9219%" y="453" width="0.0797%" height="15" fill="rgb(210,200,39)" fg:x="1090" fg:w="1"/><text x="87.1719%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="86.9219%" y="437" width="0.0797%" height="15" fill="rgb(238,135,9)" fg:x="1090" fg:w="1"/><text x="87.1719%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="86.9219%" y="421" width="0.0797%" height="15" fill="rgb(232,179,7)" fg:x="1090" fg:w="1"/><text x="87.1719%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="86.9219%" y="405" width="0.0797%" height="15" fill="rgb(245,65,41)" fg:x="1090" fg:w="1"/><text x="87.1719%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="86.9219%" y="389" width="0.0797%" height="15" fill="rgb(227,43,8)" fg:x="1090" fg:w="1"/><text x="87.1719%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="86.9219%" y="373" width="0.0797%" height="15" fill="rgb(235,91,14)" fg:x="1090" fg:w="1"/><text x="87.1719%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="86.9219%" y="357" width="0.0797%" height="15" fill="rgb(235,219,31)" fg:x="1090" fg:w="1"/><text x="87.1719%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="86.9219%" y="341" width="0.0797%" height="15" fill="rgb(227,121,25)" fg:x="1090" fg:w="1"/><text x="87.1719%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="86.9219%" y="325" width="0.0797%" height="15" fill="rgb(254,129,24)" fg:x="1090" fg:w="1"/><text x="87.1719%" y="335.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="86.9219%" y="309" width="0.0797%" height="15" fill="rgb(226,144,49)" fg:x="1090" fg:w="1"/><text x="87.1719%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.2408%" y="277" width="0.0797%" height="15" fill="rgb(214,187,32)" fg:x="1094" fg:w="1"/><text x="87.4908%" y="287.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (4 samples, 0.32%)</title><rect x="87.0813%" y="421" width="0.3190%" height="15" fill="rgb(243,129,46)" fg:x="1092" fg:w="4"/><text x="87.3313%" y="431.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (4 samples, 0.32%)</title><rect x="87.0813%" y="405" width="0.3190%" height="15" fill="rgb(221,185,35)" fg:x="1092" fg:w="4"/><text x="87.3313%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (4 samples, 0.32%)</title><rect x="87.0813%" y="389" width="0.3190%" height="15" fill="rgb(205,0,32)" fg:x="1092" fg:w="4"/><text x="87.3313%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="87.0813%" y="373" width="0.3190%" height="15" fill="rgb(229,179,12)" fg:x="1092" fg:w="4"/><text x="87.3313%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="87.2408%" y="357" width="0.1595%" height="15" fill="rgb(252,107,19)" fg:x="1094" fg:w="2"/><text x="87.4908%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (2 samples, 0.16%)</title><rect x="87.2408%" y="341" width="0.1595%" height="15" fill="rgb(220,95,27)" fg:x="1094" fg:w="2"/><text x="87.4908%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (2 samples, 0.16%)</title><rect x="87.2408%" y="325" width="0.1595%" height="15" fill="rgb(240,113,40)" fg:x="1094" fg:w="2"/><text x="87.4908%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="87.2408%" y="309" width="0.1595%" height="15" fill="rgb(208,4,43)" fg:x="1094" fg:w="2"/><text x="87.4908%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="87.2408%" y="293" width="0.1595%" height="15" fill="rgb(247,189,30)" fg:x="1094" fg:w="2"/><text x="87.4908%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="87.3206%" y="277" width="0.0797%" height="15" fill="rgb(231,157,17)" fg:x="1095" fg:w="1"/><text x="87.5706%" y="287.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="87.5598%" y="389" width="0.0797%" height="15" fill="rgb(224,139,6)" fg:x="1098" fg:w="1"/><text x="87.8098%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.5598%" y="373" width="0.0797%" height="15" fill="rgb(223,83,16)" fg:x="1098" fg:w="1"/><text x="87.8098%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.7193%" y="325" width="0.0797%" height="15" fill="rgb(232,211,20)" fg:x="1100" fg:w="1"/><text x="87.9693%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="87.7193%" y="309" width="0.0797%" height="15" fill="rgb(225,203,35)" fg:x="1100" fg:w="1"/><text x="87.9693%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="87.7193%" y="293" width="0.0797%" height="15" fill="rgb(215,211,44)" fg:x="1100" fg:w="1"/><text x="87.9693%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="87.7193%" y="277" width="0.0797%" height="15" fill="rgb(248,213,26)" fg:x="1100" fg:w="1"/><text x="87.9693%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="87.7193%" y="261" width="0.0797%" height="15" fill="rgb(214,23,52)" fg:x="1100" fg:w="1"/><text x="87.9693%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="87.7193%" y="245" width="0.0797%" height="15" fill="rgb(225,173,50)" fg:x="1100" fg:w="1"/><text x="87.9693%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="87.7193%" y="229" width="0.0797%" height="15" fill="rgb(206,150,22)" fg:x="1100" fg:w="1"/><text x="87.9693%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="87.7193%" y="213" width="0.0797%" height="15" fill="rgb(239,64,23)" fg:x="1100" fg:w="1"/><text x="87.9693%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="87.7193%" y="197" width="0.0797%" height="15" fill="rgb(242,50,38)" fg:x="1100" fg:w="1"/><text x="87.9693%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="87.7193%" y="181" width="0.0797%" height="15" fill="rgb(217,91,15)" fg:x="1100" fg:w="1"/><text x="87.9693%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="87.7193%" y="165" width="0.0797%" height="15" fill="rgb(230,172,6)" fg:x="1100" fg:w="1"/><text x="87.9693%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="87.7193%" y="149" width="0.0797%" height="15" fill="rgb(221,98,26)" fg:x="1100" fg:w="1"/><text x="87.9693%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.7193%" y="133" width="0.0797%" height="15" fill="rgb(227,210,45)" fg:x="1100" fg:w="1"/><text x="87.9693%" y="143.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="87.7193%" y="357" width="0.1595%" height="15" fill="rgb(206,8,30)" fg:x="1100" fg:w="2"/><text x="87.9693%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="87.7193%" y="341" width="0.1595%" height="15" fill="rgb(241,219,17)" fg:x="1100" fg:w="2"/><text x="87.9693%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="87.7990%" y="325" width="0.0797%" height="15" fill="rgb(247,121,29)" fg:x="1101" fg:w="1"/><text x="88.0490%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="87.7990%" y="309" width="0.0797%" height="15" fill="rgb(219,169,49)" fg:x="1101" fg:w="1"/><text x="88.0490%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="87.7990%" y="293" width="0.0797%" height="15" fill="rgb(253,49,49)" fg:x="1101" fg:w="1"/><text x="88.0490%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="87.7990%" y="277" width="0.0797%" height="15" fill="rgb(217,178,3)" fg:x="1101" fg:w="1"/><text x="88.0490%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="87.7990%" y="261" width="0.0797%" height="15" fill="rgb(234,73,37)" fg:x="1101" fg:w="1"/><text x="88.0490%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="87.7990%" y="245" width="0.0797%" height="15" fill="rgb(250,98,22)" fg:x="1101" fg:w="1"/><text x="88.0490%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="87.7990%" y="229" width="0.0797%" height="15" fill="rgb(220,108,37)" fg:x="1101" fg:w="1"/><text x="88.0490%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="87.7990%" y="213" width="0.0797%" height="15" fill="rgb(225,168,10)" fg:x="1101" fg:w="1"/><text x="88.0490%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="87.7990%" y="197" width="0.0797%" height="15" fill="rgb(247,215,21)" fg:x="1101" fg:w="1"/><text x="88.0490%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="87.7990%" y="181" width="0.0797%" height="15" fill="rgb(253,189,31)" fg:x="1101" fg:w="1"/><text x="88.0490%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="87.7990%" y="165" width="0.0797%" height="15" fill="rgb(241,54,22)" fg:x="1101" fg:w="1"/><text x="88.0490%" y="175.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.08%)</title><rect x="87.7990%" y="149" width="0.0797%" height="15" fill="rgb(211,87,4)" fg:x="1101" fg:w="1"/><text x="88.0490%" y="159.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="87.6396%" y="389" width="0.3190%" height="15" fill="rgb(245,112,24)" fg:x="1099" fg:w="4"/><text x="87.8896%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="87.6396%" y="373" width="0.3190%" height="15" fill="rgb(235,190,41)" fg:x="1099" fg:w="4"/><text x="87.8896%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="87.8788%" y="357" width="0.0797%" height="15" fill="rgb(214,89,8)" fg:x="1102" fg:w="1"/><text x="88.1288%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="87.8788%" y="341" width="0.0797%" height="15" fill="rgb(249,155,35)" fg:x="1102" fg:w="1"/><text x="88.1288%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="87.9585%" y="389" width="0.0797%" height="15" fill="rgb(249,88,26)" fg:x="1103" fg:w="1"/><text x="88.2085%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.9585%" y="373" width="0.0797%" height="15" fill="rgb(232,56,8)" fg:x="1103" fg:w="1"/><text x="88.2085%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="88.1180%" y="373" width="0.0797%" height="15" fill="rgb(240,95,3)" fg:x="1105" fg:w="1"/><text x="88.3680%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="88.1180%" y="357" width="0.0797%" height="15" fill="rgb(222,44,28)" fg:x="1105" fg:w="1"/><text x="88.3680%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="88.1180%" y="341" width="0.0797%" height="15" fill="rgb(234,16,30)" fg:x="1105" fg:w="1"/><text x="88.3680%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="88.1180%" y="325" width="0.0797%" height="15" fill="rgb(223,26,17)" fg:x="1105" fg:w="1"/><text x="88.3680%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="88.1180%" y="309" width="0.0797%" height="15" fill="rgb(239,187,47)" fg:x="1105" fg:w="1"/><text x="88.3680%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="88.1180%" y="293" width="0.0797%" height="15" fill="rgb(247,102,50)" fg:x="1105" fg:w="1"/><text x="88.3680%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="88.1180%" y="277" width="0.0797%" height="15" fill="rgb(231,216,22)" fg:x="1105" fg:w="1"/><text x="88.3680%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="88.1180%" y="261" width="0.0797%" height="15" fill="rgb(216,201,26)" fg:x="1105" fg:w="1"/><text x="88.3680%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="88.1180%" y="245" width="0.0797%" height="15" fill="rgb(214,186,23)" fg:x="1105" fg:w="1"/><text x="88.3680%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="88.1180%" y="229" width="0.0797%" height="15" fill="rgb(235,184,4)" fg:x="1105" fg:w="1"/><text x="88.3680%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="88.1180%" y="213" width="0.0797%" height="15" fill="rgb(244,46,17)" fg:x="1105" fg:w="1"/><text x="88.3680%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="88.1180%" y="197" width="0.0797%" height="15" fill="rgb(248,74,46)" fg:x="1105" fg:w="1"/><text x="88.3680%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="88.1180%" y="181" width="0.0797%" height="15" fill="rgb(243,79,5)" fg:x="1105" fg:w="1"/><text x="88.3680%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="88.1180%" y="165" width="0.0797%" height="15" fill="rgb(213,148,1)" fg:x="1105" fg:w="1"/><text x="88.3680%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.1180%" y="149" width="0.0797%" height="15" fill="rgb(221,30,0)" fg:x="1105" fg:w="1"/><text x="88.3680%" y="159.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="88.0383%" y="389" width="0.3190%" height="15" fill="rgb(207,85,29)" fg:x="1104" fg:w="4"/><text x="88.2883%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="88.1978%" y="373" width="0.1595%" height="15" fill="rgb(239,31,46)" fg:x="1106" fg:w="2"/><text x="88.4478%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="88.1978%" y="357" width="0.1595%" height="15" fill="rgb(219,6,1)" fg:x="1106" fg:w="2"/><text x="88.4478%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="88.1978%" y="341" width="0.1595%" height="15" fill="rgb(229,90,29)" fg:x="1106" fg:w="2"/><text x="88.4478%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="88.1978%" y="325" width="0.1595%" height="15" fill="rgb(242,201,42)" fg:x="1106" fg:w="2"/><text x="88.4478%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="88.1978%" y="309" width="0.1595%" height="15" fill="rgb(243,80,54)" fg:x="1106" fg:w="2"/><text x="88.4478%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="88.1978%" y="293" width="0.1595%" height="15" fill="rgb(223,166,15)" fg:x="1106" fg:w="2"/><text x="88.4478%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.2775%" y="277" width="0.0797%" height="15" fill="rgb(238,78,27)" fg:x="1107" fg:w="1"/><text x="88.5275%" y="287.50"></text></g><g><title>kernel::model::EntityPtr::gid (2 samples, 0.16%)</title><rect x="88.3573%" y="389" width="0.1595%" height="15" fill="rgb(235,28,43)" fg:x="1108" fg:w="2"/><text x="88.6073%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="88.3573%" y="373" width="0.1595%" height="15" fill="rgb(240,210,28)" fg:x="1108" fg:w="2"/><text x="88.6073%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.5167%" y="341" width="0.0797%" height="15" fill="rgb(253,6,46)" fg:x="1110" fg:w="1"/><text x="88.7667%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="88.5965%" y="309" width="0.0797%" height="15" fill="rgb(250,159,47)" fg:x="1111" fg:w="1"/><text x="88.8465%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="88.5965%" y="293" width="0.0797%" height="15" fill="rgb(216,139,2)" fg:x="1111" fg:w="1"/><text x="88.8465%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="88.5965%" y="277" width="0.0797%" height="15" fill="rgb(221,124,44)" fg:x="1111" fg:w="1"/><text x="88.8465%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="88.5965%" y="261" width="0.0797%" height="15" fill="rgb(205,37,22)" fg:x="1111" fg:w="1"/><text x="88.8465%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="88.5965%" y="245" width="0.0797%" height="15" fill="rgb(250,55,8)" fg:x="1111" fg:w="1"/><text x="88.8465%" y="255.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="88.5965%" y="229" width="0.0797%" height="15" fill="rgb(215,83,48)" fg:x="1111" fg:w="1"/><text x="88.8465%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (2 samples, 0.16%)</title><rect x="88.7560%" y="261" width="0.1595%" height="15" fill="rgb(253,2,32)" fg:x="1113" fg:w="2"/><text x="89.0060%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="88.7560%" y="245" width="0.1595%" height="15" fill="rgb(236,67,28)" fg:x="1113" fg:w="2"/><text x="89.0060%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="88.7560%" y="229" width="0.1595%" height="15" fill="rgb(252,55,15)" fg:x="1113" fg:w="2"/><text x="89.0060%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="88.7560%" y="213" width="0.1595%" height="15" fill="rgb(243,173,17)" fg:x="1113" fg:w="2"/><text x="89.0060%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="88.7560%" y="197" width="0.1595%" height="15" fill="rgb(215,212,13)" fg:x="1113" fg:w="2"/><text x="89.0060%" y="207.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="88.8357%" y="181" width="0.0797%" height="15" fill="rgb(253,176,6)" fg:x="1114" fg:w="1"/><text x="89.0857%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.9155%" y="229" width="0.0797%" height="15" fill="rgb(236,105,26)" fg:x="1115" fg:w="1"/><text x="89.1655%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (4 samples, 0.32%)</title><rect x="88.9155%" y="245" width="0.3190%" height="15" fill="rgb(239,226,32)" fg:x="1115" fg:w="4"/><text x="89.1655%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (3 samples, 0.24%)</title><rect x="88.9952%" y="229" width="0.2392%" height="15" fill="rgb(236,104,51)" fg:x="1116" fg:w="3"/><text x="89.2452%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.1547%" y="213" width="0.0797%" height="15" fill="rgb(220,172,33)" fg:x="1118" fg:w="1"/><text x="89.4047%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="89.2344%" y="245" width="0.4785%" height="15" fill="rgb(224,182,25)" fg:x="1119" fg:w="6"/><text x="89.4844%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (6 samples, 0.48%)</title><rect x="89.2344%" y="229" width="0.4785%" height="15" fill="rgb(236,184,24)" fg:x="1119" fg:w="6"/><text x="89.4844%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="89.6332%" y="213" width="0.0797%" height="15" fill="rgb(241,221,14)" fg:x="1124" fg:w="1"/><text x="89.8832%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (1 samples, 0.08%)</title><rect x="89.7129%" y="245" width="0.0797%" height="15" fill="rgb(227,146,5)" fg:x="1125" fg:w="1"/><text x="89.9629%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="89.7927%" y="181" width="0.1595%" height="15" fill="rgb(214,15,23)" fg:x="1126" fg:w="2"/><text x="90.0427%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="89.7927%" y="165" width="0.1595%" height="15" fill="rgb(233,157,31)" fg:x="1126" fg:w="2"/><text x="90.0427%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="89.7927%" y="149" width="0.1595%" height="15" fill="rgb(211,27,52)" fg:x="1126" fg:w="2"/><text x="90.0427%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="89.8724%" y="133" width="0.0797%" height="15" fill="rgb(212,223,15)" fg:x="1127" fg:w="1"/><text x="90.1224%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="89.9522%" y="181" width="0.0797%" height="15" fill="rgb(254,211,0)" fg:x="1128" fg:w="1"/><text x="90.2022%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="89.9522%" y="165" width="0.0797%" height="15" fill="rgb(205,43,38)" fg:x="1128" fg:w="1"/><text x="90.2022%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="89.9522%" y="149" width="0.0797%" height="15" fill="rgb(242,206,46)" fg:x="1128" fg:w="1"/><text x="90.2022%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.9522%" y="133" width="0.0797%" height="15" fill="rgb(220,221,12)" fg:x="1128" fg:w="1"/><text x="90.2022%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 1.36%)</title><rect x="89.7927%" y="229" width="1.3557%" height="15" fill="rgb(217,156,35)" fg:x="1126" fg:w="17"/><text x="90.0427%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (17 samples, 1.36%)</title><rect x="89.7927%" y="213" width="1.3557%" height="15" fill="rgb(207,181,49)" fg:x="1126" fg:w="17"/><text x="90.0427%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (17 samples, 1.36%)</title><rect x="89.7927%" y="197" width="1.3557%" height="15" fill="rgb(235,103,47)" fg:x="1126" fg:w="17"/><text x="90.0427%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (14 samples, 1.12%)</title><rect x="90.0319%" y="181" width="1.1164%" height="15" fill="rgb(222,63,28)" fg:x="1129" fg:w="14"/><text x="90.2819%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (14 samples, 1.12%)</title><rect x="90.0319%" y="165" width="1.1164%" height="15" fill="rgb(244,137,21)" fg:x="1129" fg:w="14"/><text x="90.2819%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (14 samples, 1.12%)</title><rect x="90.0319%" y="149" width="1.1164%" height="15" fill="rgb(228,35,27)" fg:x="1129" fg:w="14"/><text x="90.2819%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="91.1483%" y="213" width="0.0797%" height="15" fill="rgb(226,191,41)" fg:x="1143" fg:w="1"/><text x="91.3983%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.1483%" y="197" width="0.0797%" height="15" fill="rgb(210,154,3)" fg:x="1143" fg:w="1"/><text x="91.3983%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.1483%" y="181" width="0.0797%" height="15" fill="rgb(216,60,49)" fg:x="1143" fg:w="1"/><text x="91.3983%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.1483%" y="165" width="0.0797%" height="15" fill="rgb(226,17,20)" fg:x="1143" fg:w="1"/><text x="91.3983%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="91.1483%" y="229" width="0.1595%" height="15" fill="rgb(206,115,35)" fg:x="1143" fg:w="2"/><text x="91.3983%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="91.2281%" y="213" width="0.0797%" height="15" fill="rgb(227,88,1)" fg:x="1144" fg:w="1"/><text x="91.4781%" y="223.50"></text></g><g><title>regex_syntax::hir::Class::literal (1 samples, 0.08%)</title><rect x="91.3078%" y="213" width="0.0797%" height="15" fill="rgb(230,222,24)" fg:x="1145" fg:w="1"/><text x="91.5578%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (32 samples, 2.55%)</title><rect x="88.9155%" y="261" width="2.5518%" height="15" fill="rgb(214,124,32)" fg:x="1115" fg:w="32"/><text x="89.1655%" y="271.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (21 samples, 1.67%)</title><rect x="89.7927%" y="245" width="1.6746%" height="15" fill="rgb(240,41,36)" fg:x="1126" fg:w="21"/><text x="90.0427%" y="255.50"></text></g><g><title>regex_syntax::hir::Hir::dot (2 samples, 0.16%)</title><rect x="91.3078%" y="229" width="0.1595%" height="15" fill="rgb(221,17,52)" fg:x="1145" fg:w="2"/><text x="91.5578%" y="239.50"></text></g><g><title>regex_syntax::hir::ClassBytes::empty (1 samples, 0.08%)</title><rect x="91.3876%" y="213" width="0.0797%" height="15" fill="rgb(252,70,16)" fg:x="1146" fg:w="1"/><text x="91.6376%" y="223.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="91.4673%" y="213" width="0.0797%" height="15" fill="rgb(250,177,4)" fg:x="1147" fg:w="1"/><text x="91.7173%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (37 samples, 2.95%)</title><rect x="88.6762%" y="309" width="2.9506%" height="15" fill="rgb(240,188,47)" fg:x="1112" fg:w="37"/><text x="88.9262%" y="319.50">&lt;re..</text></g><g><title>regex::builders::string::RegexBuilder::build (37 samples, 2.95%)</title><rect x="88.6762%" y="293" width="2.9506%" height="15" fill="rgb(215,92,12)" fg:x="1112" fg:w="37"/><text x="88.9262%" y="303.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (36 samples, 2.87%)</title><rect x="88.7560%" y="277" width="2.8708%" height="15" fill="rgb(242,110,29)" fg:x="1113" fg:w="36"/><text x="89.0060%" y="287.50">re..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="91.4673%" y="261" width="0.1595%" height="15" fill="rgb(208,211,26)" fg:x="1147" fg:w="2"/><text x="91.7173%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="91.4673%" y="245" width="0.1595%" height="15" fill="rgb(244,147,6)" fg:x="1147" fg:w="2"/><text x="91.7173%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="91.4673%" y="229" width="0.1595%" height="15" fill="rgb(211,130,42)" fg:x="1147" fg:w="2"/><text x="91.7173%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="91.5470%" y="213" width="0.0797%" height="15" fill="rgb(220,63,1)" fg:x="1148" fg:w="1"/><text x="91.7970%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.5470%" y="197" width="0.0797%" height="15" fill="rgb(241,212,30)" fg:x="1148" fg:w="1"/><text x="91.7970%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.5470%" y="181" width="0.0797%" height="15" fill="rgb(233,153,17)" fg:x="1148" fg:w="1"/><text x="91.7970%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.5470%" y="165" width="0.0797%" height="15" fill="rgb(236,3,10)" fg:x="1148" fg:w="1"/><text x="91.7970%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.6268%" y="293" width="0.0797%" height="15" fill="rgb(232,41,21)" fg:x="1149" fg:w="1"/><text x="91.8768%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="91.6268%" y="309" width="0.1595%" height="15" fill="rgb(206,63,51)" fg:x="1149" fg:w="2"/><text x="91.8768%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="91.7065%" y="293" width="0.0797%" height="15" fill="rgb(250,214,3)" fg:x="1150" fg:w="1"/><text x="91.9565%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.7065%" y="277" width="0.0797%" height="15" fill="rgb(254,89,27)" fg:x="1150" fg:w="1"/><text x="91.9565%" y="287.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (42 samples, 3.35%)</title><rect x="88.5965%" y="325" width="3.3493%" height="15" fill="rgb(249,41,14)" fg:x="1111" fg:w="42"/><text x="88.8465%" y="335.50">ind..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="91.7863%" y="309" width="0.1595%" height="15" fill="rgb(221,196,51)" fg:x="1151" fg:w="2"/><text x="92.0363%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="91.7863%" y="293" width="0.1595%" height="15" fill="rgb(214,116,26)" fg:x="1151" fg:w="2"/><text x="92.0363%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="91.7863%" y="277" width="0.1595%" height="15" fill="rgb(236,67,7)" fg:x="1151" fg:w="2"/><text x="92.0363%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="91.7863%" y="261" width="0.1595%" height="15" fill="rgb(253,179,32)" fg:x="1151" fg:w="2"/><text x="92.0363%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="91.7863%" y="245" width="0.1595%" height="15" fill="rgb(218,33,15)" fg:x="1151" fg:w="2"/><text x="92.0363%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="91.8660%" y="229" width="0.0797%" height="15" fill="rgb(217,202,41)" fg:x="1152" fg:w="1"/><text x="92.1160%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.8660%" y="213" width="0.0797%" height="15" fill="rgb(234,133,5)" fg:x="1152" fg:w="1"/><text x="92.1160%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.8660%" y="197" width="0.0797%" height="15" fill="rgb(240,47,40)" fg:x="1152" fg:w="1"/><text x="92.1160%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="91.9458%" y="261" width="0.0797%" height="15" fill="rgb(234,166,26)" fg:x="1153" fg:w="1"/><text x="92.1958%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="91.9458%" y="245" width="0.0797%" height="15" fill="rgb(244,125,51)" fg:x="1153" fg:w="1"/><text x="92.1958%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="91.9458%" y="229" width="0.0797%" height="15" fill="rgb(229,171,11)" fg:x="1153" fg:w="1"/><text x="92.1958%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="91.9458%" y="213" width="0.0797%" height="15" fill="rgb(224,38,45)" fg:x="1153" fg:w="1"/><text x="92.1958%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.9458%" y="197" width="0.0797%" height="15" fill="rgb(237,27,7)" fg:x="1153" fg:w="1"/><text x="92.1958%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.9458%" y="181" width="0.0797%" height="15" fill="rgb(216,52,7)" fg:x="1153" fg:w="1"/><text x="92.1958%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.0255%" y="261" width="0.0797%" height="15" fill="rgb(243,11,11)" fg:x="1154" fg:w="1"/><text x="92.2755%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="92.1053%" y="261" width="0.0797%" height="15" fill="rgb(253,167,20)" fg:x="1155" fg:w="1"/><text x="92.3553%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="92.1053%" y="245" width="0.0797%" height="15" fill="rgb(215,207,5)" fg:x="1155" fg:w="1"/><text x="92.3553%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.1053%" y="229" width="0.0797%" height="15" fill="rgb(252,127,31)" fg:x="1155" fg:w="1"/><text x="92.3553%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="92.1850%" y="245" width="0.1595%" height="15" fill="rgb(209,106,27)" fg:x="1156" fg:w="2"/><text x="92.4350%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (2 samples, 0.16%)</title><rect x="92.1850%" y="229" width="0.1595%" height="15" fill="rgb(214,220,18)" fg:x="1156" fg:w="2"/><text x="92.4350%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.2648%" y="213" width="0.0797%" height="15" fill="rgb(237,89,12)" fg:x="1157" fg:w="1"/><text x="92.5148%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="92.3445%" y="229" width="0.0797%" height="15" fill="rgb(209,167,36)" fg:x="1158" fg:w="1"/><text x="92.5945%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="92.3445%" y="245" width="0.1595%" height="15" fill="rgb(243,45,22)" fg:x="1158" fg:w="2"/><text x="92.5945%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="92.4242%" y="229" width="0.0797%" height="15" fill="rgb(239,2,46)" fg:x="1159" fg:w="1"/><text x="92.6742%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="92.4242%" y="213" width="0.0797%" height="15" fill="rgb(241,101,0)" fg:x="1159" fg:w="1"/><text x="92.6742%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="92.4242%" y="197" width="0.0797%" height="15" fill="rgb(244,34,31)" fg:x="1159" fg:w="1"/><text x="92.6742%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.4242%" y="181" width="0.0797%" height="15" fill="rgb(248,23,22)" fg:x="1159" fg:w="1"/><text x="92.6742%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.4242%" y="165" width="0.0797%" height="15" fill="rgb(218,27,48)" fg:x="1159" fg:w="1"/><text x="92.6742%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.4242%" y="149" width="0.0797%" height="15" fill="rgb(232,78,1)" fg:x="1159" fg:w="1"/><text x="92.6742%" y="159.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.5040%" y="213" width="0.0797%" height="15" fill="rgb(233,169,12)" fg:x="1160" fg:w="1"/><text x="92.7540%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="92.5837%" y="213" width="0.0797%" height="15" fill="rgb(225,222,54)" fg:x="1161" fg:w="1"/><text x="92.8337%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.5837%" y="197" width="0.0797%" height="15" fill="rgb(245,126,29)" fg:x="1161" fg:w="1"/><text x="92.8337%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.5837%" y="181" width="0.0797%" height="15" fill="rgb(241,63,48)" fg:x="1161" fg:w="1"/><text x="92.8337%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (3 samples, 0.24%)</title><rect x="92.6635%" y="213" width="0.2392%" height="15" fill="rgb(235,126,38)" fg:x="1162" fg:w="3"/><text x="92.9135%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="92.6635%" y="197" width="0.2392%" height="15" fill="rgb(232,96,49)" fg:x="1162" fg:w="3"/><text x="92.9135%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="92.6635%" y="181" width="0.2392%" height="15" fill="rgb(211,146,40)" fg:x="1162" fg:w="3"/><text x="92.9135%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="92.6635%" y="165" width="0.2392%" height="15" fill="rgb(247,93,44)" fg:x="1162" fg:w="3"/><text x="92.9135%" y="175.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="92.6635%" y="149" width="0.2392%" height="15" fill="rgb(251,41,49)" fg:x="1162" fg:w="3"/><text x="92.9135%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (8 samples, 0.64%)</title><rect x="92.5040%" y="245" width="0.6380%" height="15" fill="rgb(218,155,12)" fg:x="1160" fg:w="8"/><text x="92.7540%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (8 samples, 0.64%)</title><rect x="92.5040%" y="229" width="0.6380%" height="15" fill="rgb(221,161,30)" fg:x="1160" fg:w="8"/><text x="92.7540%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (3 samples, 0.24%)</title><rect x="92.9027%" y="213" width="0.2392%" height="15" fill="rgb(221,179,11)" fg:x="1165" fg:w="3"/><text x="93.1527%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (3 samples, 0.24%)</title><rect x="92.9027%" y="197" width="0.2392%" height="15" fill="rgb(224,170,48)" fg:x="1165" fg:w="3"/><text x="93.1527%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.16%)</title><rect x="92.9825%" y="181" width="0.1595%" height="15" fill="rgb(223,117,5)" fg:x="1166" fg:w="2"/><text x="93.2325%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.4609%" y="133" width="0.0797%" height="15" fill="rgb(209,52,20)" fg:x="1172" fg:w="1"/><text x="93.7109%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="93.5407%" y="133" width="0.1595%" height="15" fill="rgb(209,19,41)" fg:x="1173" fg:w="2"/><text x="93.7907%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="93.6204%" y="117" width="0.0797%" height="15" fill="rgb(210,177,12)" fg:x="1174" fg:w="1"/><text x="93.8704%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.6204%" y="101" width="0.0797%" height="15" fill="rgb(211,159,37)" fg:x="1174" fg:w="1"/><text x="93.8704%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.6204%" y="85" width="0.0797%" height="15" fill="rgb(209,20,2)" fg:x="1174" fg:w="1"/><text x="93.8704%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.6204%" y="69" width="0.0797%" height="15" fill="rgb(244,3,46)" fg:x="1174" fg:w="1"/><text x="93.8704%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.7002%" y="101" width="0.0797%" height="15" fill="rgb(220,94,38)" fg:x="1175" fg:w="1"/><text x="93.9502%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (11 samples, 0.88%)</title><rect x="93.7002%" y="133" width="0.8772%" height="15" fill="rgb(253,14,31)" fg:x="1175" fg:w="11"/><text x="93.9502%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (11 samples, 0.88%)</title><rect x="93.7002%" y="117" width="0.8772%" height="15" fill="rgb(234,176,13)" fg:x="1175" fg:w="11"/><text x="93.9502%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (10 samples, 0.80%)</title><rect x="93.7799%" y="101" width="0.7974%" height="15" fill="rgb(218,62,25)" fg:x="1176" fg:w="10"/><text x="94.0299%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="94.5774%" y="133" width="0.0797%" height="15" fill="rgb(216,124,40)" fg:x="1186" fg:w="1"/><text x="94.8274%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 1.52%)</title><rect x="93.2217%" y="229" width="1.5152%" height="15" fill="rgb(228,170,12)" fg:x="1169" fg:w="19"/><text x="93.4717%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (19 samples, 1.52%)</title><rect x="93.2217%" y="213" width="1.5152%" height="15" fill="rgb(231,226,5)" fg:x="1169" fg:w="19"/><text x="93.4717%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (19 samples, 1.52%)</title><rect x="93.2217%" y="197" width="1.5152%" height="15" fill="rgb(237,122,22)" fg:x="1169" fg:w="19"/><text x="93.4717%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (19 samples, 1.52%)</title><rect x="93.2217%" y="181" width="1.5152%" height="15" fill="rgb(209,185,25)" fg:x="1169" fg:w="19"/><text x="93.4717%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (19 samples, 1.52%)</title><rect x="93.2217%" y="165" width="1.5152%" height="15" fill="rgb(228,200,32)" fg:x="1169" fg:w="19"/><text x="93.4717%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (19 samples, 1.52%)</title><rect x="93.2217%" y="149" width="1.5152%" height="15" fill="rgb(217,140,10)" fg:x="1169" fg:w="19"/><text x="93.4717%" y="159.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="94.6571%" y="133" width="0.0797%" height="15" fill="rgb(253,17,24)" fg:x="1187" fg:w="1"/><text x="94.9071%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.6571%" y="117" width="0.0797%" height="15" fill="rgb(212,61,6)" fg:x="1187" fg:w="1"/><text x="94.9071%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.6571%" y="101" width="0.0797%" height="15" fill="rgb(205,14,25)" fg:x="1187" fg:w="1"/><text x="94.9071%" y="111.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="94.8166%" y="213" width="0.0797%" height="15" fill="rgb(232,69,41)" fg:x="1189" fg:w="1"/><text x="95.0666%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.8963%" y="213" width="0.0797%" height="15" fill="rgb(241,106,47)" fg:x="1190" fg:w="1"/><text x="95.1463%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (36 samples, 2.87%)</title><rect x="92.1850%" y="261" width="2.8708%" height="15" fill="rgb(210,213,53)" fg:x="1156" fg:w="36"/><text x="92.4350%" y="271.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (24 samples, 1.91%)</title><rect x="93.1419%" y="245" width="1.9139%" height="15" fill="rgb(253,175,27)" fg:x="1168" fg:w="24"/><text x="93.3919%" y="255.50">r..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="94.7368%" y="229" width="0.3190%" height="15" fill="rgb(211,171,24)" fg:x="1188" fg:w="4"/><text x="94.9868%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="94.9761%" y="213" width="0.0797%" height="15" fill="rgb(229,80,7)" fg:x="1191" fg:w="1"/><text x="95.2261%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="95.0558%" y="229" width="0.0797%" height="15" fill="rgb(212,46,39)" fg:x="1192" fg:w="1"/><text x="95.3058%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="95.0558%" y="261" width="0.1595%" height="15" fill="rgb(240,80,45)" fg:x="1192" fg:w="2"/><text x="95.3058%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="95.0558%" y="245" width="0.1595%" height="15" fill="rgb(253,177,40)" fg:x="1192" fg:w="2"/><text x="95.3058%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="95.1356%" y="229" width="0.0797%" height="15" fill="rgb(249,200,15)" fg:x="1193" fg:w="1"/><text x="95.3856%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="95.1356%" y="213" width="0.0797%" height="15" fill="rgb(217,78,26)" fg:x="1193" fg:w="1"/><text x="95.3856%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="95.2153%" y="229" width="0.1595%" height="15" fill="rgb(254,151,32)" fg:x="1194" fg:w="2"/><text x="95.4653%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="95.2153%" y="213" width="0.1595%" height="15" fill="rgb(226,165,27)" fg:x="1194" fg:w="2"/><text x="95.4653%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="95.2951%" y="197" width="0.0797%" height="15" fill="rgb(250,206,4)" fg:x="1195" fg:w="1"/><text x="95.5451%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (44 samples, 3.51%)</title><rect x="91.9458%" y="309" width="3.5088%" height="15" fill="rgb(231,229,27)" fg:x="1153" fg:w="44"/><text x="92.1958%" y="319.50">&lt;re..</text></g><g><title>regex::builders::string::RegexBuilder::build (44 samples, 3.51%)</title><rect x="91.9458%" y="293" width="3.5088%" height="15" fill="rgb(239,217,8)" fg:x="1153" fg:w="44"/><text x="92.1958%" y="303.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (44 samples, 3.51%)</title><rect x="91.9458%" y="277" width="3.5088%" height="15" fill="rgb(225,204,27)" fg:x="1153" fg:w="44"/><text x="92.1958%" y="287.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="95.2153%" y="261" width="0.2392%" height="15" fill="rgb(230,56,32)" fg:x="1194" fg:w="3"/><text x="95.4653%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="95.2153%" y="245" width="0.2392%" height="15" fill="rgb(222,56,27)" fg:x="1194" fg:w="3"/><text x="95.4653%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="95.3748%" y="229" width="0.0797%" height="15" fill="rgb(253,108,27)" fg:x="1196" fg:w="1"/><text x="95.6248%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="95.4545%" y="229" width="0.0797%" height="15" fill="rgb(212,87,36)" fg:x="1197" fg:w="1"/><text x="95.7045%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="95.4545%" y="213" width="0.0797%" height="15" fill="rgb(247,82,36)" fg:x="1197" fg:w="1"/><text x="95.7045%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="95.5343%" y="229" width="0.2392%" height="15" fill="rgb(222,143,9)" fg:x="1198" fg:w="3"/><text x="95.7843%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="95.6140%" y="213" width="0.1595%" height="15" fill="rgb(238,162,48)" fg:x="1199" fg:w="2"/><text x="95.8640%" y="223.50"></text></g><g><title>indefinite::rules::number::Number::check (49 samples, 3.91%)</title><rect x="91.9458%" y="325" width="3.9075%" height="15" fill="rgb(221,59,43)" fg:x="1153" fg:w="49"/><text x="92.1958%" y="335.50">inde..</text></g><g><title>regex::regex::string::Regex::is_match_at (5 samples, 0.40%)</title><rect x="95.4545%" y="309" width="0.3987%" height="15" fill="rgb(205,166,41)" fg:x="1197" fg:w="5"/><text x="95.7045%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="95.4545%" y="293" width="0.3987%" height="15" fill="rgb(241,186,40)" fg:x="1197" fg:w="5"/><text x="95.7045%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="95.4545%" y="277" width="0.3987%" height="15" fill="rgb(216,119,35)" fg:x="1197" fg:w="5"/><text x="95.7045%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="95.4545%" y="261" width="0.3987%" height="15" fill="rgb(208,68,38)" fg:x="1197" fg:w="5"/><text x="95.7045%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="95.4545%" y="245" width="0.3987%" height="15" fill="rgb(217,113,1)" fg:x="1197" fg:w="5"/><text x="95.7045%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="95.7735%" y="229" width="0.0797%" height="15" fill="rgb(242,153,3)" fg:x="1201" fg:w="1"/><text x="96.0235%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.8533%" y="245" width="0.0797%" height="15" fill="rgb(229,76,35)" fg:x="1202" fg:w="1"/><text x="96.1033%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.8533%" y="229" width="0.0797%" height="15" fill="rgb(229,125,34)" fg:x="1202" fg:w="1"/><text x="96.1033%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.8533%" y="213" width="0.0797%" height="15" fill="rgb(238,179,36)" fg:x="1202" fg:w="1"/><text x="96.1033%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="95.9330%" y="213" width="0.0797%" height="15" fill="rgb(244,183,19)" fg:x="1203" fg:w="1"/><text x="96.1830%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.9330%" y="197" width="0.0797%" height="15" fill="rgb(216,85,49)" fg:x="1203" fg:w="1"/><text x="96.1830%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.9330%" y="181" width="0.0797%" height="15" fill="rgb(208,161,47)" fg:x="1203" fg:w="1"/><text x="96.1830%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.9330%" y="165" width="0.0797%" height="15" fill="rgb(233,210,18)" fg:x="1203" fg:w="1"/><text x="96.1830%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="95.9330%" y="245" width="0.1595%" height="15" fill="rgb(205,104,42)" fg:x="1203" fg:w="2"/><text x="96.1830%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="95.9330%" y="229" width="0.1595%" height="15" fill="rgb(248,90,43)" fg:x="1203" fg:w="2"/><text x="96.1830%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="96.0128%" y="213" width="0.0797%" height="15" fill="rgb(206,198,11)" fg:x="1204" fg:w="1"/><text x="96.2628%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.0128%" y="197" width="0.0797%" height="15" fill="rgb(239,165,27)" fg:x="1204" fg:w="1"/><text x="96.2628%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="96.2520%" y="229" width="0.2392%" height="15" fill="rgb(246,44,32)" fg:x="1207" fg:w="3"/><text x="96.5020%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="96.2520%" y="213" width="0.2392%" height="15" fill="rgb(252,65,42)" fg:x="1207" fg:w="3"/><text x="96.5020%" y="223.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="96.4115%" y="197" width="0.0797%" height="15" fill="rgb(246,197,18)" fg:x="1209" fg:w="1"/><text x="96.6615%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (6 samples, 0.48%)</title><rect x="96.0925%" y="245" width="0.4785%" height="15" fill="rgb(216,192,4)" fg:x="1205" fg:w="6"/><text x="96.3425%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1 samples, 0.08%)</title><rect x="96.4912%" y="229" width="0.0797%" height="15" fill="rgb(208,117,10)" fg:x="1210" fg:w="1"/><text x="96.7412%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="96.4912%" y="213" width="0.0797%" height="15" fill="rgb(240,61,47)" fg:x="1210" fg:w="1"/><text x="96.7412%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="96.4912%" y="197" width="0.0797%" height="15" fill="rgb(228,178,21)" fg:x="1210" fg:w="1"/><text x="96.7412%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="96.4912%" y="181" width="0.0797%" height="15" fill="rgb(219,96,54)" fg:x="1210" fg:w="1"/><text x="96.7412%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="96.4912%" y="165" width="0.0797%" height="15" fill="rgb(250,177,24)" fg:x="1210" fg:w="1"/><text x="96.7412%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="96.4912%" y="149" width="0.0797%" height="15" fill="rgb(242,154,46)" fg:x="1210" fg:w="1"/><text x="96.7412%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.4912%" y="133" width="0.0797%" height="15" fill="rgb(226,176,29)" fg:x="1210" fg:w="1"/><text x="96.7412%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.4912%" y="117" width="0.0797%" height="15" fill="rgb(226,29,2)" fg:x="1210" fg:w="1"/><text x="96.7412%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.4912%" y="101" width="0.0797%" height="15" fill="rgb(237,104,14)" fg:x="1210" fg:w="1"/><text x="96.7412%" y="111.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="96.5710%" y="197" width="0.0797%" height="15" fill="rgb(245,207,31)" fg:x="1211" fg:w="1"/><text x="96.8210%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="96.5710%" y="213" width="0.1595%" height="15" fill="rgb(229,211,45)" fg:x="1211" fg:w="2"/><text x="96.8210%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="96.6507%" y="197" width="0.0797%" height="15" fill="rgb(229,113,15)" fg:x="1212" fg:w="1"/><text x="96.9007%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.6507%" y="181" width="0.0797%" height="15" fill="rgb(237,147,15)" fg:x="1212" fg:w="1"/><text x="96.9007%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.6507%" y="165" width="0.0797%" height="15" fill="rgb(244,120,12)" fg:x="1212" fg:w="1"/><text x="96.9007%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.6507%" y="149" width="0.0797%" height="15" fill="rgb(205,120,12)" fg:x="1212" fg:w="1"/><text x="96.9007%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="96.5710%" y="245" width="0.3190%" height="15" fill="rgb(231,26,45)" fg:x="1211" fg:w="4"/><text x="96.8210%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="96.5710%" y="229" width="0.3190%" height="15" fill="rgb(246,98,1)" fg:x="1211" fg:w="4"/><text x="96.8210%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="96.7305%" y="213" width="0.1595%" height="15" fill="rgb(207,68,45)" fg:x="1213" fg:w="2"/><text x="96.9805%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (14 samples, 1.12%)</title><rect x="95.8533%" y="293" width="1.1164%" height="15" fill="rgb(231,27,38)" fg:x="1202" fg:w="14"/><text x="96.1033%" y="303.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (14 samples, 1.12%)</title><rect x="95.8533%" y="277" width="1.1164%" height="15" fill="rgb(214,223,3)" fg:x="1202" fg:w="14"/><text x="96.1033%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (14 samples, 1.12%)</title><rect x="95.8533%" y="261" width="1.1164%" height="15" fill="rgb(228,195,46)" fg:x="1202" fg:w="14"/><text x="96.1033%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="96.8900%" y="245" width="0.0797%" height="15" fill="rgb(231,100,42)" fg:x="1215" fg:w="1"/><text x="97.1400%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="96.8900%" y="229" width="0.0797%" height="15" fill="rgb(236,53,4)" fg:x="1215" fg:w="1"/><text x="97.1400%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="96.8900%" y="213" width="0.0797%" height="15" fill="rgb(230,152,12)" fg:x="1215" fg:w="1"/><text x="97.1400%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="96.8900%" y="197" width="0.0797%" height="15" fill="rgb(226,101,19)" fg:x="1215" fg:w="1"/><text x="97.1400%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="96.9697%" y="261" width="0.0797%" height="15" fill="rgb(250,149,32)" fg:x="1216" fg:w="1"/><text x="97.2197%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="96.9697%" y="245" width="0.0797%" height="15" fill="rgb(232,178,12)" fg:x="1216" fg:w="1"/><text x="97.2197%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="96.9697%" y="293" width="0.1595%" height="15" fill="rgb(246,151,17)" fg:x="1216" fg:w="2"/><text x="97.2197%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="96.9697%" y="277" width="0.1595%" height="15" fill="rgb(252,17,51)" fg:x="1216" fg:w="2"/><text x="97.2197%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="97.0494%" y="261" width="0.0797%" height="15" fill="rgb(250,207,23)" fg:x="1217" fg:w="1"/><text x="97.2994%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="97.0494%" y="245" width="0.0797%" height="15" fill="rgb(205,27,5)" fg:x="1217" fg:w="1"/><text x="97.2994%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.0494%" y="229" width="0.0797%" height="15" fill="rgb(224,32,19)" fg:x="1217" fg:w="1"/><text x="97.2994%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.2887%" y="213" width="0.0797%" height="15" fill="rgb(247,214,40)" fg:x="1220" fg:w="1"/><text x="97.5387%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (125 samples, 9.97%)</title><rect x="87.5598%" y="405" width="9.9681%" height="15" fill="rgb(239,199,17)" fg:x="1098" fg:w="125"/><text x="87.8098%" y="415.50">&lt;&amp;kernel::mode..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (113 samples, 9.01%)</title><rect x="88.5167%" y="389" width="9.0112%" height="15" fill="rgb(251,159,9)" fg:x="1110" fg:w="113"/><text x="88.7667%" y="399.50">plugins_core:..</text></g><g><title>indefinite::indefinite (113 samples, 9.01%)</title><rect x="88.5167%" y="373" width="9.0112%" height="15" fill="rgb(225,78,32)" fg:x="1110" fg:w="113"/><text x="88.7667%" y="383.50">indefinite::i..</text></g><g><title>indefinite::methods::indefinite (113 samples, 9.01%)</title><rect x="88.5167%" y="357" width="9.0112%" height="15" fill="rgb(206,97,47)" fg:x="1110" fg:w="113"/><text x="88.7667%" y="367.50">indefinite::m..</text></g><g><title>indefinite::methods::apply_rules (112 samples, 8.93%)</title><rect x="88.5965%" y="341" width="8.9314%" height="15" fill="rgb(227,107,4)" fg:x="1111" fg:w="112"/><text x="88.8465%" y="351.50">indefinite::m..</text></g><g><title>indefinite::rules::other::Other::run (21 samples, 1.67%)</title><rect x="95.8533%" y="325" width="1.6746%" height="15" fill="rgb(241,146,50)" fg:x="1202" fg:w="21"/><text x="96.1033%" y="335.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (21 samples, 1.67%)</title><rect x="95.8533%" y="309" width="1.6746%" height="15" fill="rgb(232,92,30)" fg:x="1202" fg:w="21"/><text x="96.1033%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="97.1292%" y="293" width="0.3987%" height="15" fill="rgb(222,0,40)" fg:x="1218" fg:w="5"/><text x="97.3792%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="97.1292%" y="277" width="0.3987%" height="15" fill="rgb(219,54,33)" fg:x="1218" fg:w="5"/><text x="97.3792%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="97.1292%" y="261" width="0.3987%" height="15" fill="rgb(226,209,28)" fg:x="1218" fg:w="5"/><text x="97.3792%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="97.1292%" y="245" width="0.3987%" height="15" fill="rgb(254,205,35)" fg:x="1218" fg:w="5"/><text x="97.3792%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="97.1292%" y="229" width="0.3987%" height="15" fill="rgb(230,159,3)" fg:x="1218" fg:w="5"/><text x="97.3792%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="97.3684%" y="213" width="0.1595%" height="15" fill="rgb(232,190,24)" fg:x="1221" fg:w="2"/><text x="97.6184%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.5279%" y="389" width="0.0797%" height="15" fill="rgb(217,227,44)" fg:x="1223" fg:w="1"/><text x="97.7779%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.5279%" y="373" width="0.0797%" height="15" fill="rgb(236,211,1)" fg:x="1223" fg:w="1"/><text x="97.7779%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="97.6077%" y="357" width="0.0797%" height="15" fill="rgb(250,127,46)" fg:x="1224" fg:w="1"/><text x="97.8577%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.6077%" y="341" width="0.0797%" height="15" fill="rgb(229,213,6)" fg:x="1224" fg:w="1"/><text x="97.8577%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="97.5279%" y="405" width="0.2392%" height="15" fill="rgb(237,15,36)" fg:x="1223" fg:w="3"/><text x="97.7779%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="97.6077%" y="389" width="0.1595%" height="15" fill="rgb(213,131,41)" fg:x="1224" fg:w="2"/><text x="97.8577%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.6077%" y="373" width="0.1595%" height="15" fill="rgb(225,82,44)" fg:x="1224" fg:w="2"/><text x="97.8577%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="97.6874%" y="357" width="0.0797%" height="15" fill="rgb(249,42,11)" fg:x="1225" fg:w="1"/><text x="97.9374%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="97.6874%" y="341" width="0.0797%" height="15" fill="rgb(253,11,29)" fg:x="1225" fg:w="1"/><text x="97.9374%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="97.6874%" y="325" width="0.0797%" height="15" fill="rgb(206,8,54)" fg:x="1225" fg:w="1"/><text x="97.9374%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="97.7671%" y="405" width="0.0797%" height="15" fill="rgb(222,186,2)" fg:x="1226" fg:w="1"/><text x="98.0171%" y="415.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (1 samples, 0.08%)</title><rect x="97.8469%" y="389" width="0.0797%" height="15" fill="rgb(221,206,53)" fg:x="1227" fg:w="1"/><text x="98.0969%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::gid (1 samples, 0.08%)</title><rect x="97.8469%" y="373" width="0.0797%" height="15" fill="rgb(230,150,21)" fg:x="1227" fg:w="1"/><text x="98.0969%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="97.8469%" y="357" width="0.0797%" height="15" fill="rgb(253,202,10)" fg:x="1227" fg:w="1"/><text x="98.0969%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.8469%" y="341" width="0.0797%" height="15" fill="rgb(238,109,40)" fg:x="1227" fg:w="1"/><text x="98.0969%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.0064%" y="261" width="0.0797%" height="15" fill="rgb(247,120,22)" fg:x="1229" fg:w="1"/><text x="98.2564%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.0064%" y="245" width="0.0797%" height="15" fill="rgb(207,43,30)" fg:x="1229" fg:w="1"/><text x="98.2564%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.32%)</title><rect x="97.8469%" y="405" width="0.3190%" height="15" fill="rgb(213,211,24)" fg:x="1227" fg:w="4"/><text x="98.0969%" y="415.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (3 samples, 0.24%)</title><rect x="97.9266%" y="389" width="0.2392%" height="15" fill="rgb(239,73,39)" fg:x="1228" fg:w="3"/><text x="98.1766%" y="399.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (3 samples, 0.24%)</title><rect x="97.9266%" y="373" width="0.2392%" height="15" fill="rgb(245,182,19)" fg:x="1228" fg:w="3"/><text x="98.1766%" y="383.50"></text></g><g><title>engine::session::Session::load_entity (3 samples, 0.24%)</title><rect x="97.9266%" y="357" width="0.2392%" height="15" fill="rgb(247,143,26)" fg:x="1228" fg:w="3"/><text x="98.1766%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="97.9266%" y="341" width="0.2392%" height="15" fill="rgb(228,191,23)" fg:x="1228" fg:w="3"/><text x="98.1766%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="97.9266%" y="325" width="0.2392%" height="15" fill="rgb(253,165,31)" fg:x="1228" fg:w="3"/><text x="98.1766%" y="335.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="97.9266%" y="309" width="0.2392%" height="15" fill="rgb(234,138,20)" fg:x="1228" fg:w="3"/><text x="98.1766%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="97.9266%" y="293" width="0.2392%" height="15" fill="rgb(218,191,29)" fg:x="1228" fg:w="3"/><text x="98.1766%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="97.9266%" y="277" width="0.2392%" height="15" fill="rgb(221,157,19)" fg:x="1228" fg:w="3"/><text x="98.1766%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.0861%" y="261" width="0.0797%" height="15" fill="rgb(237,26,42)" fg:x="1230" fg:w="1"/><text x="98.3361%" y="271.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (140 samples, 11.16%)</title><rect x="87.0813%" y="565" width="11.1643%" height="15" fill="rgb(220,163,24)" fg:x="1092" fg:w="140"/><text x="87.3313%" y="575.50">kernel::plugins:..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (140 samples, 11.16%)</title><rect x="87.0813%" y="549" width="11.1643%" height="15" fill="rgb(242,115,20)" fg:x="1092" fg:w="140"/><text x="87.3313%" y="559.50">&lt;plugins_dynlib:..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (140 samples, 11.16%)</title><rect x="87.0813%" y="533" width="11.1643%" height="15" fill="rgb(210,206,9)" fg:x="1092" fg:w="140"/><text x="87.3313%" y="543.50">kernel::plugins:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (140 samples, 11.16%)</title><rect x="87.0813%" y="517" width="11.1643%" height="15" fill="rgb(208,71,17)" fg:x="1092" fg:w="140"/><text x="87.3313%" y="527.50">core::ops::funct..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (140 samples, 11.16%)</title><rect x="87.0813%" y="501" width="11.1643%" height="15" fill="rgb(233,7,5)" fg:x="1092" fg:w="140"/><text x="87.3313%" y="511.50">kernel::plugins:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (140 samples, 11.16%)</title><rect x="87.0813%" y="485" width="11.1643%" height="15" fill="rgb(207,92,33)" fg:x="1092" fg:w="140"/><text x="87.3313%" y="495.50">core::ops::funct..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (140 samples, 11.16%)</title><rect x="87.0813%" y="469" width="11.1643%" height="15" fill="rgb(218,87,9)" fg:x="1092" fg:w="140"/><text x="87.3313%" y="479.50">&lt;alloc::boxed::B..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (140 samples, 11.16%)</title><rect x="87.0813%" y="453" width="11.1643%" height="15" fill="rgb(219,47,37)" fg:x="1092" fg:w="140"/><text x="87.3313%" y="463.50">&lt;engine::session..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (140 samples, 11.16%)</title><rect x="87.0813%" y="437" width="11.1643%" height="15" fill="rgb(221,152,34)" fg:x="1092" fg:w="140"/><text x="87.3313%" y="447.50">&lt;plugins_core::l..</text></g><g><title>plugins_core::looking::model::new_area_observation (136 samples, 10.85%)</title><rect x="87.4003%" y="421" width="10.8453%" height="15" fill="rgb(235,176,21)" fg:x="1096" fg:w="136"/><text x="87.6503%" y="431.50">plugins_core::lo..</text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="98.1659%" y="405" width="0.0797%" height="15" fill="rgb(232,212,21)" fg:x="1231" fg:w="1"/><text x="98.4159%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="98.1659%" y="389" width="0.0797%" height="15" fill="rgb(245,82,39)" fg:x="1231" fg:w="1"/><text x="98.4159%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.1659%" y="373" width="0.0797%" height="15" fill="rgb(241,52,51)" fg:x="1231" fg:w="1"/><text x="98.4159%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.2456%" y="373" width="0.0797%" height="15" fill="rgb(219,91,24)" fg:x="1232" fg:w="1"/><text x="98.4956%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.3254%" y="357" width="0.0797%" height="15" fill="rgb(241,142,12)" fg:x="1233" fg:w="1"/><text x="98.5754%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.3254%" y="341" width="0.0797%" height="15" fill="rgb(230,27,9)" fg:x="1233" fg:w="1"/><text x="98.5754%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.3254%" y="325" width="0.0797%" height="15" fill="rgb(249,181,32)" fg:x="1233" fg:w="1"/><text x="98.5754%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.3254%" y="309" width="0.0797%" height="15" fill="rgb(230,107,3)" fg:x="1233" fg:w="1"/><text x="98.5754%" y="319.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="98.2456%" y="453" width="0.2392%" height="15" fill="rgb(246,204,14)" fg:x="1232" fg:w="3"/><text x="98.4956%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="98.2456%" y="437" width="0.2392%" height="15" fill="rgb(213,192,47)" fg:x="1232" fg:w="3"/><text x="98.4956%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="98.2456%" y="421" width="0.2392%" height="15" fill="rgb(240,44,36)" fg:x="1232" fg:w="3"/><text x="98.4956%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="98.2456%" y="405" width="0.2392%" height="15" fill="rgb(244,209,38)" fg:x="1232" fg:w="3"/><text x="98.4956%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="98.2456%" y="389" width="0.2392%" height="15" fill="rgb(219,34,37)" fg:x="1232" fg:w="3"/><text x="98.4956%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="98.3254%" y="373" width="0.1595%" height="15" fill="rgb(210,28,6)" fg:x="1233" fg:w="2"/><text x="98.5754%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.4051%" y="357" width="0.0797%" height="15" fill="rgb(244,110,52)" fg:x="1234" fg:w="1"/><text x="98.6551%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.4051%" y="341" width="0.0797%" height="15" fill="rgb(254,124,47)" fg:x="1234" fg:w="1"/><text x="98.6551%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="98.4051%" y="325" width="0.0797%" height="15" fill="rgb(254,110,13)" fg:x="1234" fg:w="1"/><text x="98.6551%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.4051%" y="309" width="0.0797%" height="15" fill="rgb(252,57,21)" fg:x="1234" fg:w="1"/><text x="98.6551%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.4051%" y="293" width="0.0797%" height="15" fill="rgb(242,60,45)" fg:x="1234" fg:w="1"/><text x="98.6551%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.4051%" y="277" width="0.0797%" height="15" fill="rgb(234,49,30)" fg:x="1234" fg:w="1"/><text x="98.6551%" y="287.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (5 samples, 0.40%)</title><rect x="98.2456%" y="517" width="0.3987%" height="15" fill="rgb(218,98,6)" fg:x="1232" fg:w="5"/><text x="98.4956%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (5 samples, 0.40%)</title><rect x="98.2456%" y="501" width="0.3987%" height="15" fill="rgb(220,174,29)" fg:x="1232" fg:w="5"/><text x="98.4956%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (5 samples, 0.40%)</title><rect x="98.2456%" y="485" width="0.3987%" height="15" fill="rgb(236,163,23)" fg:x="1232" fg:w="5"/><text x="98.4956%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="98.2456%" y="469" width="0.3987%" height="15" fill="rgb(242,114,45)" fg:x="1232" fg:w="5"/><text x="98.4956%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="98.4848%" y="453" width="0.1595%" height="15" fill="rgb(232,10,53)" fg:x="1235" fg:w="2"/><text x="98.7348%" y="463.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="98.4848%" y="437" width="0.1595%" height="15" fill="rgb(245,108,29)" fg:x="1235" fg:w="2"/><text x="98.7348%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.4848%" y="421" width="0.1595%" height="15" fill="rgb(240,89,53)" fg:x="1235" fg:w="2"/><text x="98.7348%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.4848%" y="405" width="0.1595%" height="15" fill="rgb(226,60,45)" fg:x="1235" fg:w="2"/><text x="98.7348%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.4848%" y="389" width="0.1595%" height="15" fill="rgb(230,41,44)" fg:x="1235" fg:w="2"/><text x="98.7348%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.4848%" y="373" width="0.1595%" height="15" fill="rgb(230,26,20)" fg:x="1235" fg:w="2"/><text x="98.7348%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.4848%" y="357" width="0.1595%" height="15" fill="rgb(237,170,32)" fg:x="1235" fg:w="2"/><text x="98.7348%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.4848%" y="341" width="0.1595%" height="15" fill="rgb(212,35,42)" fg:x="1235" fg:w="2"/><text x="98.7348%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.4848%" y="325" width="0.1595%" height="15" fill="rgb(227,31,34)" fg:x="1235" fg:w="2"/><text x="98.7348%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.5646%" y="309" width="0.0797%" height="15" fill="rgb(216,19,18)" fg:x="1236" fg:w="1"/><text x="98.8146%" y="319.50"></text></g><g><title>plugins_core::tools::contained_by (6 samples, 0.48%)</title><rect x="98.2456%" y="533" width="0.4785%" height="15" fill="rgb(211,133,42)" fg:x="1232" fg:w="6"/><text x="98.4956%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="98.6443%" y="517" width="0.0797%" height="15" fill="rgb(244,66,13)" fg:x="1237" fg:w="1"/><text x="98.8943%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.6443%" y="501" width="0.0797%" height="15" fill="rgb(218,185,50)" fg:x="1237" fg:w="1"/><text x="98.8943%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.7241%" y="501" width="0.1595%" height="15" fill="rgb(219,149,13)" fg:x="1238" fg:w="2"/><text x="98.9741%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="98.7241%" y="485" width="0.1595%" height="15" fill="rgb(221,125,0)" fg:x="1238" fg:w="2"/><text x="98.9741%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.7241%" y="469" width="0.1595%" height="15" fill="rgb(247,126,27)" fg:x="1238" fg:w="2"/><text x="98.9741%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.8038%" y="453" width="0.0797%" height="15" fill="rgb(250,138,30)" fg:x="1239" fg:w="1"/><text x="99.0538%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.8038%" y="437" width="0.0797%" height="15" fill="rgb(230,151,9)" fg:x="1239" fg:w="1"/><text x="99.0538%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.8038%" y="421" width="0.0797%" height="15" fill="rgb(233,80,38)" fg:x="1239" fg:w="1"/><text x="99.0538%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.8038%" y="405" width="0.0797%" height="15" fill="rgb(232,68,43)" fg:x="1239" fg:w="1"/><text x="99.0538%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.8038%" y="389" width="0.0797%" height="15" fill="rgb(254,5,50)" fg:x="1239" fg:w="1"/><text x="99.0538%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.8038%" y="373" width="0.0797%" height="15" fill="rgb(225,45,5)" fg:x="1239" fg:w="1"/><text x="99.0538%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.8038%" y="357" width="0.0797%" height="15" fill="rgb(239,22,3)" fg:x="1239" fg:w="1"/><text x="99.0538%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.8038%" y="341" width="0.0797%" height="15" fill="rgb(243,129,0)" fg:x="1239" fg:w="1"/><text x="99.0538%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.8038%" y="325" width="0.0797%" height="15" fill="rgb(223,164,0)" fg:x="1239" fg:w="1"/><text x="99.0538%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.8038%" y="309" width="0.0797%" height="15" fill="rgb(221,46,29)" fg:x="1239" fg:w="1"/><text x="99.0538%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.8038%" y="293" width="0.0797%" height="15" fill="rgb(205,97,47)" fg:x="1239" fg:w="1"/><text x="99.0538%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.8038%" y="277" width="0.0797%" height="15" fill="rgb(249,14,8)" fg:x="1239" fg:w="1"/><text x="99.0538%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="98.8836%" y="469" width="0.0797%" height="15" fill="rgb(216,77,3)" fg:x="1240" fg:w="1"/><text x="99.1336%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="98.8836%" y="453" width="0.0797%" height="15" fill="rgb(206,168,54)" fg:x="1240" fg:w="1"/><text x="99.1336%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="98.8836%" y="437" width="0.0797%" height="15" fill="rgb(236,3,41)" fg:x="1240" fg:w="1"/><text x="99.1336%" y="447.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.8836%" y="421" width="0.0797%" height="15" fill="rgb(231,132,24)" fg:x="1240" fg:w="1"/><text x="99.1336%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::EnumDeserializer as serde::de::EnumAccess&gt;::variant_seed (1 samples, 0.08%)</title><rect x="98.8836%" y="405" width="0.0797%" height="15" fill="rgb(227,221,40)" fg:x="1240" fg:w="1"/><text x="99.1336%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.8836%" y="389" width="0.0797%" height="15" fill="rgb(233,151,11)" fg:x="1240" fg:w="1"/><text x="99.1336%" y="399.50"></text></g><g><title>engine::session::Session::captured (162 samples, 12.92%)</title><rect x="86.1244%" y="709" width="12.9187%" height="15" fill="rgb(247,81,35)" fg:x="1080" fg:w="162"/><text x="86.3744%" y="719.50">engine::session::Se..</text></g><g><title>engine::session::logs::capture (160 samples, 12.76%)</title><rect x="86.2839%" y="693" width="12.7592%" height="15" fill="rgb(243,128,48)" fg:x="1082" fg:w="160"/><text x="86.5339%" y="703.50">engine::session::lo..</text></g><g><title>tracing_core::dispatcher::with_default (160 samples, 12.76%)</title><rect x="86.2839%" y="677" width="12.7592%" height="15" fill="rgb(253,16,10)" fg:x="1082" fg:w="160"/><text x="86.5339%" y="687.50">tracing_core::dispa..</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (160 samples, 12.76%)</title><rect x="86.2839%" y="661" width="12.7592%" height="15" fill="rgb(228,67,27)" fg:x="1082" fg:w="160"/><text x="86.5339%" y="671.50">&lt;engine::session::S..</text></g><g><title>kernel::plugins::mw::apply_middleware (160 samples, 12.76%)</title><rect x="86.2839%" y="645" width="12.7592%" height="15" fill="rgb(231,105,25)" fg:x="1082" fg:w="160"/><text x="86.5339%" y="655.50">kernel::plugins::mw..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (160 samples, 12.76%)</title><rect x="86.2839%" y="629" width="12.7592%" height="15" fill="rgb(213,166,47)" fg:x="1082" fg:w="160"/><text x="86.5339%" y="639.50">kernel::plugins::mw..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (160 samples, 12.76%)</title><rect x="86.2839%" y="613" width="12.7592%" height="15" fill="rgb(209,27,10)" fg:x="1082" fg:w="160"/><text x="86.5339%" y="623.50">&lt;engine::session::E..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (151 samples, 12.04%)</title><rect x="87.0016%" y="597" width="12.0415%" height="15" fill="rgb(241,44,30)" fg:x="1091" fg:w="151"/><text x="87.2516%" y="607.50">kernel::plugins::m..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (151 samples, 12.04%)</title><rect x="87.0016%" y="581" width="12.0415%" height="15" fill="rgb(223,216,15)" fg:x="1091" fg:w="151"/><text x="87.2516%" y="591.50">&lt;plugins_rune::Run..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (10 samples, 0.80%)</title><rect x="98.2456%" y="565" width="0.7974%" height="15" fill="rgb(227,14,7)" fg:x="1232" fg:w="10"/><text x="98.4956%" y="575.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (10 samples, 0.80%)</title><rect x="98.2456%" y="549" width="0.7974%" height="15" fill="rgb(237,14,5)" fg:x="1232" fg:w="10"/><text x="98.4956%" y="559.50"></text></g><g><title>plugins_core::tools::occupied_by (4 samples, 0.32%)</title><rect x="98.7241%" y="533" width="0.3190%" height="15" fill="rgb(232,14,36)" fg:x="1238" fg:w="4"/><text x="98.9741%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="98.7241%" y="517" width="0.3190%" height="15" fill="rgb(234,0,38)" fg:x="1238" fg:w="4"/><text x="98.9741%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.8836%" y="501" width="0.1595%" height="15" fill="rgb(207,170,14)" fg:x="1240" fg:w="2"/><text x="99.1336%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.8836%" y="485" width="0.1595%" height="15" fill="rgb(252,45,13)" fg:x="1240" fg:w="2"/><text x="99.1336%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.9633%" y="469" width="0.0797%" height="15" fill="rgb(213,142,7)" fg:x="1241" fg:w="1"/><text x="99.2133%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.9633%" y="453" width="0.0797%" height="15" fill="rgb(216,157,23)" fg:x="1241" fg:w="1"/><text x="99.2133%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.0431%" y="613" width="0.0797%" height="15" fill="rgb(212,145,33)" fg:x="1242" fg:w="1"/><text x="99.2931%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.0431%" y="597" width="0.0797%" height="15" fill="rgb(233,26,13)" fg:x="1242" fg:w="1"/><text x="99.2931%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="99.0431%" y="581" width="0.0797%" height="15" fill="rgb(219,196,19)" fg:x="1242" fg:w="1"/><text x="99.2931%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.0431%" y="565" width="0.0797%" height="15" fill="rgb(246,56,21)" fg:x="1242" fg:w="1"/><text x="99.2931%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.0431%" y="549" width="0.0797%" height="15" fill="rgb(222,28,53)" fg:x="1242" fg:w="1"/><text x="99.2931%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="99.0431%" y="533" width="0.0797%" height="15" fill="rgb(224,5,27)" fg:x="1242" fg:w="1"/><text x="99.2931%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.0431%" y="517" width="0.0797%" height="15" fill="rgb(220,153,33)" fg:x="1242" fg:w="1"/><text x="99.2931%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.0431%" y="501" width="0.0797%" height="15" fill="rgb(226,58,19)" fg:x="1242" fg:w="1"/><text x="99.2931%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="99.0431%" y="485" width="0.0797%" height="15" fill="rgb(239,112,23)" fg:x="1242" fg:w="1"/><text x="99.2931%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (1 samples, 0.08%)</title><rect x="99.0431%" y="469" width="0.0797%" height="15" fill="rgb(251,213,20)" fg:x="1242" fg:w="1"/><text x="99.2931%" y="479.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (1 samples, 0.08%)</title><rect x="99.0431%" y="453" width="0.0797%" height="15" fill="rgb(215,181,21)" fg:x="1242" fg:w="1"/><text x="99.2931%" y="463.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (1 samples, 0.08%)</title><rect x="99.0431%" y="437" width="0.0797%" height="15" fill="rgb(240,8,35)" fg:x="1242" fg:w="1"/><text x="99.2931%" y="447.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="99.0431%" y="421" width="0.0797%" height="15" fill="rgb(232,203,3)" fg:x="1242" fg:w="1"/><text x="99.2931%" y="431.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="99.0431%" y="405" width="0.0797%" height="15" fill="rgb(214,202,43)" fg:x="1242" fg:w="1"/><text x="99.2931%" y="415.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.0431%" y="389" width="0.0797%" height="15" fill="rgb(254,35,11)" fg:x="1242" fg:w="1"/><text x="99.2931%" y="399.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="99.0431%" y="373" width="0.0797%" height="15" fill="rgb(239,173,13)" fg:x="1242" fg:w="1"/><text x="99.2931%" y="383.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="99.0431%" y="357" width="0.0797%" height="15" fill="rgb(220,141,0)" fg:x="1242" fg:w="1"/><text x="99.2931%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="99.0431%" y="661" width="0.1595%" height="15" fill="rgb(210,98,12)" fg:x="1242" fg:w="2"/><text x="99.2931%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="99.0431%" y="645" width="0.1595%" height="15" fill="rgb(254,153,22)" fg:x="1242" fg:w="2"/><text x="99.2931%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="99.0431%" y="629" width="0.1595%" height="15" fill="rgb(247,223,17)" fg:x="1242" fg:w="2"/><text x="99.2931%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.1228%" y="613" width="0.0797%" height="15" fill="rgb(246,56,7)" fg:x="1243" fg:w="1"/><text x="99.3728%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.1228%" y="597" width="0.0797%" height="15" fill="rgb(240,226,12)" fg:x="1243" fg:w="1"/><text x="99.3728%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.1228%" y="581" width="0.0797%" height="15" fill="rgb(205,87,46)" fg:x="1243" fg:w="1"/><text x="99.3728%" y="591.50"></text></g><g><title>engine::session::internal::Added::find_refs (3 samples, 0.24%)</title><rect x="99.0431%" y="693" width="0.2392%" height="15" fill="rgb(245,214,51)" fg:x="1242" fg:w="3"/><text x="99.2931%" y="703.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="99.0431%" y="677" width="0.2392%" height="15" fill="rgb(223,172,33)" fg:x="1242" fg:w="3"/><text x="99.2931%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.2026%" y="661" width="0.0797%" height="15" fill="rgb(227,203,34)" fg:x="1244" fg:w="1"/><text x="99.4526%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.2026%" y="645" width="0.0797%" height="15" fill="rgb(248,143,44)" fg:x="1244" fg:w="1"/><text x="99.4526%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.2026%" y="629" width="0.0797%" height="15" fill="rgb(226,162,5)" fg:x="1244" fg:w="1"/><text x="99.4526%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="99.2026%" y="613" width="0.0797%" height="15" fill="rgb(211,143,1)" fg:x="1244" fg:w="1"/><text x="99.4526%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.2026%" y="597" width="0.0797%" height="15" fill="rgb(224,96,15)" fg:x="1244" fg:w="1"/><text x="99.4526%" y="607.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="99.2823%" y="677" width="0.0797%" height="15" fill="rgb(222,4,38)" fg:x="1245" fg:w="1"/><text x="99.5323%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="99.3620%" y="677" width="0.0797%" height="15" fill="rgb(253,228,15)" fg:x="1246" fg:w="1"/><text x="99.6120%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.3620%" y="661" width="0.0797%" height="15" fill="rgb(242,194,12)" fg:x="1246" fg:w="1"/><text x="99.6120%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.3620%" y="645" width="0.0797%" height="15" fill="rgb(214,177,31)" fg:x="1246" fg:w="1"/><text x="99.6120%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.3620%" y="629" width="0.0797%" height="15" fill="rgb(226,58,51)" fg:x="1246" fg:w="1"/><text x="99.6120%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.3620%" y="613" width="0.0797%" height="15" fill="rgb(250,119,16)" fg:x="1246" fg:w="1"/><text x="99.6120%" y="623.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.48%)</title><rect x="99.0431%" y="709" width="0.4785%" height="15" fill="rgb(223,128,53)" fg:x="1242" fg:w="6"/><text x="99.2931%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="99.2823%" y="693" width="0.2392%" height="15" fill="rgb(251,199,15)" fg:x="1245" fg:w="3"/><text x="99.5323%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="99.4418%" y="677" width="0.0797%" height="15" fill="rgb(235,168,42)" fg:x="1247" fg:w="1"/><text x="99.6918%" y="687.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.4418%" y="661" width="0.0797%" height="15" fill="rgb(250,210,17)" fg:x="1247" fg:w="1"/><text x="99.6918%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.4418%" y="645" width="0.0797%" height="15" fill="rgb(226,36,41)" fg:x="1247" fg:w="1"/><text x="99.6918%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.4418%" y="629" width="0.0797%" height="15" fill="rgb(225,87,10)" fg:x="1247" fg:w="1"/><text x="99.6918%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.4418%" y="613" width="0.0797%" height="15" fill="rgb(228,83,9)" fg:x="1247" fg:w="1"/><text x="99.6918%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.4418%" y="597" width="0.0797%" height="15" fill="rgb(225,16,36)" fg:x="1247" fg:w="1"/><text x="99.6918%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.4418%" y="581" width="0.0797%" height="15" fill="rgb(242,198,13)" fg:x="1247" fg:w="1"/><text x="99.6918%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.4418%" y="565" width="0.0797%" height="15" fill="rgb(239,25,51)" fg:x="1247" fg:w="1"/><text x="99.6918%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.4418%" y="549" width="0.0797%" height="15" fill="rgb(239,28,37)" fg:x="1247" fg:w="1"/><text x="99.6918%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.4418%" y="533" width="0.0797%" height="15" fill="rgb(234,70,17)" fg:x="1247" fg:w="1"/><text x="99.6918%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.4418%" y="517" width="0.0797%" height="15" fill="rgb(231,215,53)" fg:x="1247" fg:w="1"/><text x="99.6918%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.4418%" y="501" width="0.0797%" height="15" fill="rgb(218,140,42)" fg:x="1247" fg:w="1"/><text x="99.6918%" y="511.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::FutureStorage&gt;::query_futures_before (1 samples, 0.08%)</title><rect x="99.5215%" y="677" width="0.0797%" height="15" fill="rgb(233,227,45)" fg:x="1248" fg:w="1"/><text x="99.7715%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="99.6810%" y="661" width="0.0797%" height="15" fill="rgb(225,189,21)" fg:x="1250" fg:w="1"/><text x="99.9310%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.6810%" y="645" width="0.0797%" height="15" fill="rgb(237,176,54)" fg:x="1250" fg:w="1"/><text x="99.9310%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6810%" y="629" width="0.0797%" height="15" fill="rgb(215,131,46)" fg:x="1250" fg:w="1"/><text x="99.9310%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.6810%" y="613" width="0.0797%" height="15" fill="rgb(218,95,20)" fg:x="1250" fg:w="1"/><text x="99.9310%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6810%" y="597" width="0.0797%" height="15" fill="rgb(208,198,12)" fg:x="1250" fg:w="1"/><text x="99.9310%" y="607.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="99.6810%" y="581" width="0.0797%" height="15" fill="rgb(239,107,50)" fg:x="1250" fg:w="1"/><text x="99.9310%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.7608%" y="581" width="0.0797%" height="15" fill="rgb(240,217,37)" fg:x="1251" fg:w="1"/><text x="100.0108%" y="591.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (174 samples, 13.88%)</title><rect x="86.0447%" y="741" width="13.8756%" height="15" fill="rgb(242,197,49)" fg:x="1079" fg:w="174"/><text x="86.2947%" y="751.50">engine::session::Sess..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (174 samples, 13.88%)</title><rect x="86.0447%" y="725" width="13.8756%" height="15" fill="rgb(219,171,17)" fg:x="1079" fg:w="174"/><text x="86.2947%" y="735.50">engine::session::Sess..</text></g><g><title>kernel::model::EntityPtrResolver::world (5 samples, 0.40%)</title><rect x="99.5215%" y="709" width="0.3987%" height="15" fill="rgb(209,81,40)" fg:x="1248" fg:w="5"/><text x="99.7715%" y="719.50"></text></g><g><title>engine::session::Session::load_entity (5 samples, 0.40%)</title><rect x="99.5215%" y="693" width="0.3987%" height="15" fill="rgb(237,156,30)" fg:x="1248" fg:w="5"/><text x="99.7715%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="99.6013%" y="677" width="0.3190%" height="15" fill="rgb(212,127,16)" fg:x="1249" fg:w="4"/><text x="99.8513%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="99.7608%" y="661" width="0.1595%" height="15" fill="rgb(226,66,32)" fg:x="1251" fg:w="2"/><text x="100.0108%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.7608%" y="645" width="0.1595%" height="15" fill="rgb(245,22,46)" fg:x="1251" fg:w="2"/><text x="100.0108%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.7608%" y="629" width="0.1595%" height="15" fill="rgb(210,112,21)" fg:x="1251" fg:w="2"/><text x="100.0108%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.7608%" y="613" width="0.1595%" height="15" fill="rgb(207,118,39)" fg:x="1251" fg:w="2"/><text x="100.0108%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.7608%" y="597" width="0.1595%" height="15" fill="rgb(205,206,35)" fg:x="1251" fg:w="2"/><text x="100.0108%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.8405%" y="581" width="0.0797%" height="15" fill="rgb(222,120,2)" fg:x="1252" fg:w="1"/><text x="100.0905%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8405%" y="565" width="0.0797%" height="15" fill="rgb(205,38,18)" fg:x="1252" fg:w="1"/><text x="100.0905%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8405%" y="549" width="0.0797%" height="15" fill="rgb(226,61,2)" fg:x="1252" fg:w="1"/><text x="100.0905%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8405%" y="533" width="0.0797%" height="15" fill="rgb(242,161,23)" fg:x="1252" fg:w="1"/><text x="100.0905%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8405%" y="517" width="0.0797%" height="15" fill="rgb(213,13,52)" fg:x="1252" fg:w="1"/><text x="100.0905%" y="527.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.8405%" y="501" width="0.0797%" height="15" fill="rgb(246,209,47)" fg:x="1252" fg:w="1"/><text x="100.0905%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8405%" y="485" width="0.0797%" height="15" fill="rgb(214,41,3)" fg:x="1252" fg:w="1"/><text x="100.0905%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8405%" y="469" width="0.0797%" height="15" fill="rgb(236,119,38)" fg:x="1252" fg:w="1"/><text x="100.0905%" y="479.50"></text></g><g><title>all (1,254 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(218,50,11)" fg:x="0" fg:w="1254"/><text x="0.2500%" y="1103.50"></text></g><g><title>simple-490e2519 (1,254 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(228,38,11)" fg:x="0" fg:w="1254"/><text x="0.2500%" y="1087.50">simple-490e2519</text></g><g><title>_start (1,254 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(212,13,9)" fg:x="0" fg:w="1254"/><text x="0.2500%" y="1071.50">_start</text></g><g><title>__libc_start_main (1,254 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(208,211,9)" fg:x="0" fg:w="1254"/><text x="0.2500%" y="1055.50">__libc_start_main</text></g><g><title>main (1,254 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(239,39,32)" fg:x="0" fg:w="1254"/><text x="0.2500%" y="1039.50">main</text></g><g><title>std::rt::lang_start_internal (1,254 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(254,179,26)" fg:x="0" fg:w="1254"/><text x="0.2500%" y="1023.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,254 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(249,165,28)" fg:x="0" fg:w="1254"/><text x="0.2500%" y="1007.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,254 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(225,59,50)" fg:x="0" fg:w="1254"/><text x="0.2500%" y="991.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,254 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(209,122,5)" fg:x="0" fg:w="1254"/><text x="0.2500%" y="975.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,254 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(214,65,34)" fg:x="0" fg:w="1254"/><text x="0.2500%" y="959.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,254 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(249,183,32)" fg:x="0" fg:w="1254"/><text x="0.2500%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,254 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(218,122,24)" fg:x="0" fg:w="1254"/><text x="0.2500%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,254 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(224,109,18)" fg:x="0" fg:w="1254"/><text x="0.2500%" y="911.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,254 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(210,68,50)" fg:x="0" fg:w="1254"/><text x="0.2500%" y="895.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,254 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(212,184,34)" fg:x="0" fg:w="1254"/><text x="0.2500%" y="879.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,254 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(238,105,48)" fg:x="0" fg:w="1254"/><text x="0.2500%" y="863.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,254 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(222,134,54)" fg:x="0" fg:w="1254"/><text x="0.2500%" y="847.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,254 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(246,24,43)" fg:x="0" fg:w="1254"/><text x="0.2500%" y="831.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,254 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(227,169,22)" fg:x="0" fg:w="1254"/><text x="0.2500%" y="815.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (315 samples, 25.12%)</title><rect x="74.8804%" y="789" width="25.1196%" height="15" fill="rgb(253,152,4)" fg:x="939" fg:w="315"/><text x="75.1304%" y="799.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as ..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (315 samples, 25.12%)</title><rect x="74.8804%" y="773" width="25.1196%" height="15" fill="rgb(219,158,36)" fg:x="939" fg:w="315"/><text x="75.1304%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (315 samples, 25.12%)</title><rect x="74.8804%" y="757" width="25.1196%" height="15" fill="rgb(251,128,40)" fg:x="939" fg:w="315"/><text x="75.1304%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="99.9203%" y="741" width="0.0797%" height="15" fill="rgb(254,101,39)" fg:x="1253" fg:w="1"/><text x="100.1703%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="99.9203%" y="725" width="0.0797%" height="15" fill="rgb(221,168,40)" fg:x="1253" fg:w="1"/><text x="100.1703%" y="735.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="99.9203%" y="709" width="0.0797%" height="15" fill="rgb(221,14,27)" fg:x="1253" fg:w="1"/><text x="100.1703%" y="719.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="99.9203%" y="693" width="0.0797%" height="15" fill="rgb(207,36,43)" fg:x="1253" fg:w="1"/><text x="100.1703%" y="703.50"></text></g></svg></svg>