<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1062" onload="init(evt)" viewBox="0 0 1200 1062" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1062" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1045.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1045.00"> </text><svg id="frames" x="10" width="1180" total_samples="1263"><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0000%" y="629" width="0.0792%" height="15" fill="rgb(221,41,32)" fg:x="0" fg:w="1"/><text x="0.2500%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0000%" y="613" width="0.0792%" height="15" fill="rgb(213,158,31)" fg:x="0" fg:w="1"/><text x="0.2500%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0000%" y="597" width="0.0792%" height="15" fill="rgb(245,126,43)" fg:x="0" fg:w="1"/><text x="0.2500%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.0000%" y="661" width="0.1584%" height="15" fill="rgb(227,7,22)" fg:x="0" fg:w="2"/><text x="0.2500%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.0000%" y="645" width="0.1584%" height="15" fill="rgb(252,90,44)" fg:x="0" fg:w="2"/><text x="0.2500%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.0792%" y="629" width="0.0792%" height="15" fill="rgb(253,91,0)" fg:x="1" fg:w="1"/><text x="0.3292%" y="639.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="0.1584%" y="645" width="0.0792%" height="15" fill="rgb(252,175,49)" fg:x="2" fg:w="1"/><text x="0.4084%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.1584%" y="629" width="0.0792%" height="15" fill="rgb(246,150,1)" fg:x="2" fg:w="1"/><text x="0.4084%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2375%" y="613" width="0.0792%" height="15" fill="rgb(241,192,25)" fg:x="3" fg:w="1"/><text x="0.4875%" y="623.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.3959%" y="565" width="0.1584%" height="15" fill="rgb(239,187,11)" fg:x="5" fg:w="2"/><text x="0.6459%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.5542%" y="549" width="0.1584%" height="15" fill="rgb(218,202,51)" fg:x="7" fg:w="2"/><text x="0.8042%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.7126%" y="549" width="0.0792%" height="15" fill="rgb(225,176,8)" fg:x="9" fg:w="1"/><text x="0.9626%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.7126%" y="533" width="0.0792%" height="15" fill="rgb(219,122,41)" fg:x="9" fg:w="1"/><text x="0.9626%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.7918%" y="533" width="0.0792%" height="15" fill="rgb(248,140,20)" fg:x="10" fg:w="1"/><text x="1.0418%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.8709%" y="485" width="0.0792%" height="15" fill="rgb(245,41,37)" fg:x="11" fg:w="1"/><text x="1.1209%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.8709%" y="517" width="0.1584%" height="15" fill="rgb(235,82,39)" fg:x="11" fg:w="2"/><text x="1.1209%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.8709%" y="501" width="0.1584%" height="15" fill="rgb(230,108,42)" fg:x="11" fg:w="2"/><text x="1.1209%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.9501%" y="485" width="0.0792%" height="15" fill="rgb(215,150,50)" fg:x="12" fg:w="1"/><text x="1.2001%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.9501%" y="469" width="0.0792%" height="15" fill="rgb(233,212,5)" fg:x="12" fg:w="1"/><text x="1.2001%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.9501%" y="453" width="0.0792%" height="15" fill="rgb(245,80,22)" fg:x="12" fg:w="1"/><text x="1.2001%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.0293%" y="517" width="0.0792%" height="15" fill="rgb(238,129,16)" fg:x="13" fg:w="1"/><text x="1.2793%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.1085%" y="501" width="0.0792%" height="15" fill="rgb(240,19,0)" fg:x="14" fg:w="1"/><text x="1.3585%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.87%)</title><rect x="0.3959%" y="581" width="0.8709%" height="15" fill="rgb(232,42,35)" fg:x="5" fg:w="11"/><text x="0.6459%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.71%)</title><rect x="0.5542%" y="565" width="0.7126%" height="15" fill="rgb(223,130,24)" fg:x="7" fg:w="9"/><text x="0.8042%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="0.7918%" y="549" width="0.4751%" height="15" fill="rgb(237,16,22)" fg:x="10" fg:w="6"/><text x="1.0418%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="0.8709%" y="533" width="0.3959%" height="15" fill="rgb(248,192,20)" fg:x="11" fg:w="5"/><text x="1.1209%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.1085%" y="517" width="0.1584%" height="15" fill="rgb(233,167,2)" fg:x="14" fg:w="2"/><text x="1.3585%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.1876%" y="501" width="0.0792%" height="15" fill="rgb(252,71,44)" fg:x="15" fg:w="1"/><text x="1.4376%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.1876%" y="485" width="0.0792%" height="15" fill="rgb(238,37,47)" fg:x="15" fg:w="1"/><text x="1.4376%" y="495.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="1.3460%" y="549" width="0.2375%" height="15" fill="rgb(214,202,54)" fg:x="17" fg:w="3"/><text x="1.5960%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.5835%" y="549" width="0.0792%" height="15" fill="rgb(254,165,40)" fg:x="20" fg:w="1"/><text x="1.8335%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.8211%" y="533" width="0.0792%" height="15" fill="rgb(246,173,38)" fg:x="23" fg:w="1"/><text x="2.0711%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.71%)</title><rect x="1.2668%" y="581" width="0.7126%" height="15" fill="rgb(215,3,27)" fg:x="16" fg:w="9"/><text x="1.5168%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.71%)</title><rect x="1.2668%" y="565" width="0.7126%" height="15" fill="rgb(239,169,51)" fg:x="16" fg:w="9"/><text x="1.5168%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="1.6627%" y="549" width="0.3167%" height="15" fill="rgb(212,5,25)" fg:x="21" fg:w="4"/><text x="1.9127%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.9002%" y="533" width="0.0792%" height="15" fill="rgb(243,45,17)" fg:x="24" fg:w="1"/><text x="2.1502%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.9002%" y="517" width="0.0792%" height="15" fill="rgb(242,97,9)" fg:x="24" fg:w="1"/><text x="2.1502%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 1.82%)</title><rect x="0.2375%" y="629" width="1.8211%" height="15" fill="rgb(228,71,31)" fg:x="3" fg:w="23"/><text x="0.4875%" y="639.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (22 samples, 1.74%)</title><rect x="0.3167%" y="613" width="1.7419%" height="15" fill="rgb(252,184,16)" fg:x="4" fg:w="22"/><text x="0.5667%" y="623.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 1.74%)</title><rect x="0.3167%" y="597" width="1.7419%" height="15" fill="rgb(236,169,46)" fg:x="4" fg:w="22"/><text x="0.5667%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.9794%" y="581" width="0.0792%" height="15" fill="rgb(207,17,47)" fg:x="25" fg:w="1"/><text x="2.2294%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 1.98%)</title><rect x="0.1584%" y="661" width="1.9794%" height="15" fill="rgb(206,201,28)" fg:x="2" fg:w="25"/><text x="0.4084%" y="671.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (24 samples, 1.90%)</title><rect x="0.2375%" y="645" width="1.9002%" height="15" fill="rgb(224,184,23)" fg:x="3" fg:w="24"/><text x="0.4875%" y="655.50">c..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.0586%" y="629" width="0.0792%" height="15" fill="rgb(208,139,48)" fg:x="26" fg:w="1"/><text x="2.3086%" y="639.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new_cyclic (1 samples, 0.08%)</title><rect x="2.2169%" y="613" width="0.0792%" height="15" fill="rgb(208,130,10)" fg:x="28" fg:w="1"/><text x="2.4669%" y="623.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="2.4545%" y="565" width="0.0792%" height="15" fill="rgb(211,213,45)" fg:x="31" fg:w="1"/><text x="2.7045%" y="575.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="2.4545%" y="549" width="0.0792%" height="15" fill="rgb(235,100,30)" fg:x="31" fg:w="1"/><text x="2.7045%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="2.4545%" y="533" width="0.0792%" height="15" fill="rgb(206,144,31)" fg:x="31" fg:w="1"/><text x="2.7045%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="2.4545%" y="517" width="0.0792%" height="15" fill="rgb(224,200,26)" fg:x="31" fg:w="1"/><text x="2.7045%" y="527.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.4545%" y="501" width="0.0792%" height="15" fill="rgb(247,104,53)" fg:x="31" fg:w="1"/><text x="2.7045%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.4545%" y="485" width="0.0792%" height="15" fill="rgb(220,14,17)" fg:x="31" fg:w="1"/><text x="2.7045%" y="495.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="2.4545%" y="469" width="0.0792%" height="15" fill="rgb(230,140,40)" fg:x="31" fg:w="1"/><text x="2.7045%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="2.4545%" y="453" width="0.0792%" height="15" fill="rgb(229,2,41)" fg:x="31" fg:w="1"/><text x="2.7045%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="2.4545%" y="437" width="0.0792%" height="15" fill="rgb(232,89,16)" fg:x="31" fg:w="1"/><text x="2.7045%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="2.4545%" y="421" width="0.0792%" height="15" fill="rgb(247,59,52)" fg:x="31" fg:w="1"/><text x="2.7045%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="2.4545%" y="405" width="0.0792%" height="15" fill="rgb(226,110,21)" fg:x="31" fg:w="1"/><text x="2.7045%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="2.4545%" y="389" width="0.0792%" height="15" fill="rgb(224,176,43)" fg:x="31" fg:w="1"/><text x="2.7045%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.4545%" y="373" width="0.0792%" height="15" fill="rgb(221,73,6)" fg:x="31" fg:w="1"/><text x="2.7045%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="2.4545%" y="357" width="0.0792%" height="15" fill="rgb(232,78,19)" fg:x="31" fg:w="1"/><text x="2.7045%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.4545%" y="341" width="0.0792%" height="15" fill="rgb(233,112,48)" fg:x="31" fg:w="1"/><text x="2.7045%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="2.4545%" y="325" width="0.0792%" height="15" fill="rgb(243,131,47)" fg:x="31" fg:w="1"/><text x="2.7045%" y="335.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="2.4545%" y="309" width="0.0792%" height="15" fill="rgb(226,51,1)" fg:x="31" fg:w="1"/><text x="2.7045%" y="319.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="2.4545%" y="293" width="0.0792%" height="15" fill="rgb(247,58,7)" fg:x="31" fg:w="1"/><text x="2.7045%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.4545%" y="277" width="0.0792%" height="15" fill="rgb(209,7,32)" fg:x="31" fg:w="1"/><text x="2.7045%" y="287.50"></text></g><g><title>dlerror (4 samples, 0.32%)</title><rect x="2.6128%" y="549" width="0.3167%" height="15" fill="rgb(209,39,41)" fg:x="33" fg:w="4"/><text x="2.8628%" y="559.50"></text></g><g><title>__asprintf (3 samples, 0.24%)</title><rect x="2.6920%" y="533" width="0.2375%" height="15" fill="rgb(226,182,46)" fg:x="34" fg:w="3"/><text x="2.9420%" y="543.50"></text></g><g><title>libloading::safe::Library::new (21 samples, 1.66%)</title><rect x="2.5337%" y="565" width="1.6627%" height="15" fill="rgb(230,219,10)" fg:x="32" fg:w="21"/><text x="2.7837%" y="575.50"></text></g><g><title>dlopen (16 samples, 1.27%)</title><rect x="2.9295%" y="549" width="1.2668%" height="15" fill="rgb(227,175,30)" fg:x="37" fg:w="16"/><text x="3.1795%" y="559.50"></text></g><g><title>_dl_catch_error (15 samples, 1.19%)</title><rect x="3.0087%" y="533" width="1.1876%" height="15" fill="rgb(217,2,50)" fg:x="38" fg:w="15"/><text x="3.2587%" y="543.50"></text></g><g><title>_dl_catch_exception (15 samples, 1.19%)</title><rect x="3.0087%" y="517" width="1.1876%" height="15" fill="rgb(229,160,0)" fg:x="38" fg:w="15"/><text x="3.2587%" y="527.50"></text></g><g><title>_dl_catch_exception (15 samples, 1.19%)</title><rect x="3.0087%" y="501" width="1.1876%" height="15" fill="rgb(207,78,37)" fg:x="38" fg:w="15"/><text x="3.2587%" y="511.50"></text></g><g><title>_dl_catch_exception (15 samples, 1.19%)</title><rect x="3.0087%" y="485" width="1.1876%" height="15" fill="rgb(225,57,0)" fg:x="38" fg:w="15"/><text x="3.2587%" y="495.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (25 samples, 1.98%)</title><rect x="2.2961%" y="597" width="1.9794%" height="15" fill="rgb(232,154,2)" fg:x="29" fg:w="25"/><text x="2.5461%" y="607.50">k..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (24 samples, 1.90%)</title><rect x="2.3753%" y="581" width="1.9002%" height="15" fill="rgb(241,212,25)" fg:x="30" fg:w="24"/><text x="2.6253%" y="591.50">&lt;..</text></g><g><title>std::sys::unix::os_str::Slice::to_string_lossy (1 samples, 0.08%)</title><rect x="4.1964%" y="565" width="0.0792%" height="15" fill="rgb(226,69,20)" fg:x="53" fg:w="1"/><text x="4.4464%" y="575.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (1 samples, 0.08%)</title><rect x="4.1964%" y="549" width="0.0792%" height="15" fill="rgb(247,184,54)" fg:x="53" fg:w="1"/><text x="4.4464%" y="559.50"></text></g><g><title>engine::session::Session::initialize (26 samples, 2.06%)</title><rect x="2.2961%" y="613" width="2.0586%" height="15" fill="rgb(210,145,0)" fg:x="29" fg:w="26"/><text x="2.5461%" y="623.50">e..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="4.2755%" y="597" width="0.0792%" height="15" fill="rgb(253,82,12)" fg:x="54" fg:w="1"/><text x="4.5255%" y="607.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (29 samples, 2.30%)</title><rect x="2.1378%" y="661" width="2.2961%" height="15" fill="rgb(245,42,11)" fg:x="27" fg:w="29"/><text x="2.3878%" y="671.50">&lt;..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (29 samples, 2.30%)</title><rect x="2.1378%" y="645" width="2.2961%" height="15" fill="rgb(219,147,32)" fg:x="27" fg:w="29"/><text x="2.3878%" y="655.50">e..</text></g><g><title>engine::session::Session::new (29 samples, 2.30%)</title><rect x="2.1378%" y="629" width="2.2961%" height="15" fill="rgb(246,12,7)" fg:x="27" fg:w="29"/><text x="2.3878%" y="639.50">e..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="4.3547%" y="613" width="0.0792%" height="15" fill="rgb(243,50,9)" fg:x="55" fg:w="1"/><text x="4.6047%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.3547%" y="597" width="0.0792%" height="15" fill="rgb(219,149,6)" fg:x="55" fg:w="1"/><text x="4.6047%" y="607.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPluginFactory as kernel::plugins::PluginFactory&gt;::create_plugin (1 samples, 0.08%)</title><rect x="4.3547%" y="581" width="0.0792%" height="15" fill="rgb(241,51,42)" fg:x="55" fg:w="1"/><text x="4.6047%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.3547%" y="565" width="0.0792%" height="15" fill="rgb(226,128,27)" fg:x="55" fg:w="1"/><text x="4.6047%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="4.5131%" y="645" width="0.0792%" height="15" fill="rgb(244,144,4)" fg:x="57" fg:w="1"/><text x="4.7631%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.5131%" y="629" width="0.0792%" height="15" fill="rgb(221,4,13)" fg:x="57" fg:w="1"/><text x="4.7631%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="4.5922%" y="629" width="0.0792%" height="15" fill="rgb(208,170,28)" fg:x="58" fg:w="1"/><text x="4.8422%" y="639.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="4.6714%" y="629" width="0.0792%" height="15" fill="rgb(226,131,13)" fg:x="59" fg:w="1"/><text x="4.9214%" y="639.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="4.6714%" y="613" width="0.0792%" height="15" fill="rgb(215,72,41)" fg:x="59" fg:w="1"/><text x="4.9214%" y="623.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="4.6714%" y="597" width="0.0792%" height="15" fill="rgb(243,108,20)" fg:x="59" fg:w="1"/><text x="4.9214%" y="607.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="4.6714%" y="581" width="0.0792%" height="15" fill="rgb(230,189,17)" fg:x="59" fg:w="1"/><text x="4.9214%" y="591.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="4.6714%" y="565" width="0.0792%" height="15" fill="rgb(220,50,17)" fg:x="59" fg:w="1"/><text x="4.9214%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="4.6714%" y="549" width="0.0792%" height="15" fill="rgb(248,152,48)" fg:x="59" fg:w="1"/><text x="4.9214%" y="559.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="4.6714%" y="533" width="0.0792%" height="15" fill="rgb(244,91,11)" fg:x="59" fg:w="1"/><text x="4.9214%" y="543.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="4.6714%" y="517" width="0.0792%" height="15" fill="rgb(220,157,5)" fg:x="59" fg:w="1"/><text x="4.9214%" y="527.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="4.7506%" y="549" width="0.0792%" height="15" fill="rgb(253,137,8)" fg:x="60" fg:w="1"/><text x="5.0006%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="4.7506%" y="533" width="0.0792%" height="15" fill="rgb(217,137,51)" fg:x="60" fg:w="1"/><text x="5.0006%" y="543.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="4.7506%" y="517" width="0.0792%" height="15" fill="rgb(218,209,53)" fg:x="60" fg:w="1"/><text x="5.0006%" y="527.50"></text></g><g><title>core::fmt::Formatter::new (1 samples, 0.08%)</title><rect x="4.7506%" y="501" width="0.0792%" height="15" fill="rgb(249,137,25)" fg:x="60" fg:w="1"/><text x="5.0006%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="4.8298%" y="533" width="0.0792%" height="15" fill="rgb(239,155,26)" fg:x="61" fg:w="1"/><text x="5.0798%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.8298%" y="517" width="0.0792%" height="15" fill="rgb(227,85,46)" fg:x="61" fg:w="1"/><text x="5.0798%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.8298%" y="501" width="0.0792%" height="15" fill="rgb(251,107,43)" fg:x="61" fg:w="1"/><text x="5.0798%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.8298%" y="485" width="0.0792%" height="15" fill="rgb(234,170,33)" fg:x="61" fg:w="1"/><text x="5.0798%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.8298%" y="469" width="0.0792%" height="15" fill="rgb(206,29,35)" fg:x="61" fg:w="1"/><text x="5.0798%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="4.9089%" y="517" width="0.2375%" height="15" fill="rgb(227,138,25)" fg:x="62" fg:w="3"/><text x="5.1589%" y="527.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="4.9089%" y="501" width="0.2375%" height="15" fill="rgb(249,131,35)" fg:x="62" fg:w="3"/><text x="5.1589%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="4.9881%" y="485" width="0.1584%" height="15" fill="rgb(239,6,40)" fg:x="63" fg:w="2"/><text x="5.2381%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="4.9881%" y="469" width="0.1584%" height="15" fill="rgb(246,136,47)" fg:x="63" fg:w="2"/><text x="5.2381%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.1465%" y="469" width="0.0792%" height="15" fill="rgb(253,58,26)" fg:x="65" fg:w="1"/><text x="5.3965%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.1465%" y="453" width="0.0792%" height="15" fill="rgb(237,141,10)" fg:x="65" fg:w="1"/><text x="5.3965%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.1465%" y="437" width="0.0792%" height="15" fill="rgb(234,156,12)" fg:x="65" fg:w="1"/><text x="5.3965%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.1465%" y="421" width="0.0792%" height="15" fill="rgb(243,224,36)" fg:x="65" fg:w="1"/><text x="5.3965%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="5.2257%" y="453" width="0.1584%" height="15" fill="rgb(205,229,51)" fg:x="66" fg:w="2"/><text x="5.4757%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.3048%" y="437" width="0.0792%" height="15" fill="rgb(223,189,4)" fg:x="67" fg:w="1"/><text x="5.5548%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.3048%" y="421" width="0.0792%" height="15" fill="rgb(249,167,54)" fg:x="67" fg:w="1"/><text x="5.5548%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.3048%" y="405" width="0.0792%" height="15" fill="rgb(218,34,28)" fg:x="67" fg:w="1"/><text x="5.5548%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="5.1465%" y="501" width="0.3167%" height="15" fill="rgb(232,109,42)" fg:x="65" fg:w="4"/><text x="5.3965%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="5.1465%" y="485" width="0.3167%" height="15" fill="rgb(248,214,46)" fg:x="65" fg:w="4"/><text x="5.3965%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="5.2257%" y="469" width="0.2375%" height="15" fill="rgb(244,216,40)" fg:x="66" fg:w="3"/><text x="5.4757%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.3840%" y="453" width="0.0792%" height="15" fill="rgb(231,226,31)" fg:x="68" fg:w="1"/><text x="5.6340%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.3840%" y="437" width="0.0792%" height="15" fill="rgb(238,38,43)" fg:x="68" fg:w="1"/><text x="5.6340%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.4632%" y="501" width="0.0792%" height="15" fill="rgb(208,88,43)" fg:x="69" fg:w="1"/><text x="5.7132%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.4632%" y="485" width="0.0792%" height="15" fill="rgb(205,136,37)" fg:x="69" fg:w="1"/><text x="5.7132%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.4632%" y="469" width="0.0792%" height="15" fill="rgb(237,34,14)" fg:x="69" fg:w="1"/><text x="5.7132%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.4632%" y="453" width="0.0792%" height="15" fill="rgb(236,193,44)" fg:x="69" fg:w="1"/><text x="5.7132%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.4632%" y="437" width="0.0792%" height="15" fill="rgb(231,48,10)" fg:x="69" fg:w="1"/><text x="5.7132%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.4632%" y="421" width="0.0792%" height="15" fill="rgb(213,141,34)" fg:x="69" fg:w="1"/><text x="5.7132%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.4632%" y="405" width="0.0792%" height="15" fill="rgb(249,130,34)" fg:x="69" fg:w="1"/><text x="5.7132%" y="415.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::classify (1 samples, 0.08%)</title><rect x="5.6215%" y="485" width="0.0792%" height="15" fill="rgb(219,42,41)" fg:x="71" fg:w="1"/><text x="5.8715%" y="495.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::is_nan (1 samples, 0.08%)</title><rect x="5.6215%" y="469" width="0.0792%" height="15" fill="rgb(224,100,54)" fg:x="71" fg:w="1"/><text x="5.8715%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="5.7007%" y="485" width="0.1584%" height="15" fill="rgb(229,200,27)" fg:x="72" fg:w="2"/><text x="5.9507%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.7799%" y="469" width="0.0792%" height="15" fill="rgb(217,118,10)" fg:x="73" fg:w="1"/><text x="6.0299%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.7799%" y="453" width="0.0792%" height="15" fill="rgb(206,22,3)" fg:x="73" fg:w="1"/><text x="6.0299%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.7799%" y="437" width="0.0792%" height="15" fill="rgb(232,163,46)" fg:x="73" fg:w="1"/><text x="6.0299%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.7799%" y="421" width="0.0792%" height="15" fill="rgb(206,95,13)" fg:x="73" fg:w="1"/><text x="6.0299%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.7799%" y="405" width="0.0792%" height="15" fill="rgb(253,154,18)" fg:x="73" fg:w="1"/><text x="6.0299%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.7799%" y="389" width="0.0792%" height="15" fill="rgb(219,32,23)" fg:x="73" fg:w="1"/><text x="6.0299%" y="399.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.40%)</title><rect x="5.9382%" y="469" width="0.3959%" height="15" fill="rgb(230,191,45)" fg:x="75" fg:w="5"/><text x="6.1882%" y="479.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.40%)</title><rect x="5.9382%" y="453" width="0.3959%" height="15" fill="rgb(229,64,36)" fg:x="75" fg:w="5"/><text x="6.1882%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.32%)</title><rect x="6.0174%" y="437" width="0.3167%" height="15" fill="rgb(205,129,25)" fg:x="76" fg:w="4"/><text x="6.2674%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="6.1758%" y="421" width="0.1584%" height="15" fill="rgb(254,112,7)" fg:x="78" fg:w="2"/><text x="6.4258%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.2549%" y="405" width="0.0792%" height="15" fill="rgb(226,53,48)" fg:x="79" fg:w="1"/><text x="6.5049%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.2549%" y="389" width="0.0792%" height="15" fill="rgb(214,153,38)" fg:x="79" fg:w="1"/><text x="6.5049%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="6.2549%" y="373" width="0.0792%" height="15" fill="rgb(243,101,7)" fg:x="79" fg:w="1"/><text x="6.5049%" y="383.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.55%)</title><rect x="5.8591%" y="485" width="0.5542%" height="15" fill="rgb(240,140,22)" fg:x="74" fg:w="7"/><text x="6.1091%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="6.3341%" y="469" width="0.0792%" height="15" fill="rgb(235,114,2)" fg:x="80" fg:w="1"/><text x="6.5841%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.3341%" y="453" width="0.0792%" height="15" fill="rgb(242,59,12)" fg:x="80" fg:w="1"/><text x="6.5841%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.3341%" y="437" width="0.0792%" height="15" fill="rgb(252,134,9)" fg:x="80" fg:w="1"/><text x="6.5841%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.3341%" y="421" width="0.0792%" height="15" fill="rgb(236,4,44)" fg:x="80" fg:w="1"/><text x="6.5841%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.95%)</title><rect x="5.5424%" y="501" width="0.9501%" height="15" fill="rgb(254,172,41)" fg:x="70" fg:w="12"/><text x="5.7924%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.4133%" y="485" width="0.0792%" height="15" fill="rgb(244,63,20)" fg:x="81" fg:w="1"/><text x="6.6633%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.4133%" y="469" width="0.0792%" height="15" fill="rgb(250,73,31)" fg:x="81" fg:w="1"/><text x="6.6633%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.4133%" y="453" width="0.0792%" height="15" fill="rgb(241,38,36)" fg:x="81" fg:w="1"/><text x="6.6633%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (18 samples, 1.43%)</title><rect x="5.1465%" y="517" width="1.4252%" height="15" fill="rgb(245,211,2)" fg:x="65" fg:w="18"/><text x="5.3965%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.4925%" y="501" width="0.0792%" height="15" fill="rgb(206,120,28)" fg:x="82" fg:w="1"/><text x="6.7425%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.4925%" y="485" width="0.0792%" height="15" fill="rgb(211,59,34)" fg:x="82" fg:w="1"/><text x="6.7425%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.4925%" y="469" width="0.0792%" height="15" fill="rgb(233,168,5)" fg:x="82" fg:w="1"/><text x="6.7425%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (24 samples, 1.90%)</title><rect x="4.9089%" y="533" width="1.9002%" height="15" fill="rgb(234,33,13)" fg:x="62" fg:w="24"/><text x="5.1589%" y="543.50">s..</text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="6.5717%" y="517" width="0.2375%" height="15" fill="rgb(231,150,26)" fg:x="83" fg:w="3"/><text x="6.8217%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="6.6508%" y="501" width="0.1584%" height="15" fill="rgb(217,191,4)" fg:x="84" fg:w="2"/><text x="6.9008%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="6.6508%" y="485" width="0.1584%" height="15" fill="rgb(246,198,38)" fg:x="84" fg:w="2"/><text x="6.9008%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.7300%" y="469" width="0.0792%" height="15" fill="rgb(245,64,37)" fg:x="85" fg:w="1"/><text x="6.9800%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (27 samples, 2.14%)</title><rect x="4.8298%" y="549" width="2.1378%" height="15" fill="rgb(250,30,36)" fg:x="61" fg:w="27"/><text x="5.0798%" y="559.50">&lt;..</text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="6.8092%" y="533" width="0.1584%" height="15" fill="rgb(217,86,53)" fg:x="86" fg:w="2"/><text x="7.0592%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="6.8092%" y="517" width="0.1584%" height="15" fill="rgb(228,157,16)" fg:x="86" fg:w="2"/><text x="7.0592%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="6.8092%" y="501" width="0.1584%" height="15" fill="rgb(217,59,31)" fg:x="86" fg:w="2"/><text x="7.0592%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.8884%" y="485" width="0.0792%" height="15" fill="rgb(237,138,41)" fg:x="87" fg:w="1"/><text x="7.1384%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.8884%" y="469" width="0.0792%" height="15" fill="rgb(227,91,49)" fg:x="87" fg:w="1"/><text x="7.1384%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.8884%" y="453" width="0.0792%" height="15" fill="rgb(247,21,44)" fg:x="87" fg:w="1"/><text x="7.1384%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.9675%" y="501" width="0.0792%" height="15" fill="rgb(219,210,51)" fg:x="88" fg:w="1"/><text x="7.2175%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.9675%" y="485" width="0.0792%" height="15" fill="rgb(209,140,6)" fg:x="88" fg:w="1"/><text x="7.2175%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.1259%" y="485" width="0.0792%" height="15" fill="rgb(221,188,24)" fg:x="90" fg:w="1"/><text x="7.3759%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.1259%" y="469" width="0.0792%" height="15" fill="rgb(232,154,20)" fg:x="90" fg:w="1"/><text x="7.3759%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.2051%" y="469" width="0.0792%" height="15" fill="rgb(244,137,50)" fg:x="91" fg:w="1"/><text x="7.4551%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.55%)</title><rect x="6.9675%" y="549" width="0.5542%" height="15" fill="rgb(225,185,43)" fg:x="88" fg:w="7"/><text x="7.2175%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.55%)</title><rect x="6.9675%" y="533" width="0.5542%" height="15" fill="rgb(213,205,38)" fg:x="88" fg:w="7"/><text x="7.2175%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.55%)</title><rect x="6.9675%" y="517" width="0.5542%" height="15" fill="rgb(236,73,12)" fg:x="88" fg:w="7"/><text x="7.2175%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="7.0467%" y="501" width="0.4751%" height="15" fill="rgb(235,219,13)" fg:x="89" fg:w="6"/><text x="7.2967%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="7.2051%" y="485" width="0.3167%" height="15" fill="rgb(218,59,36)" fg:x="91" fg:w="4"/><text x="7.4551%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="7.2842%" y="469" width="0.2375%" height="15" fill="rgb(205,110,39)" fg:x="92" fg:w="3"/><text x="7.5342%" y="479.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="7.3634%" y="453" width="0.1584%" height="15" fill="rgb(218,206,42)" fg:x="93" fg:w="2"/><text x="7.6134%" y="463.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="7.6010%" y="533" width="0.1584%" height="15" fill="rgb(248,125,24)" fg:x="96" fg:w="2"/><text x="7.8510%" y="543.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="7.6010%" y="517" width="0.1584%" height="15" fill="rgb(242,28,27)" fg:x="96" fg:w="2"/><text x="7.8510%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4 samples, 0.32%)</title><rect x="7.7593%" y="501" width="0.3167%" height="15" fill="rgb(216,228,15)" fg:x="98" fg:w="4"/><text x="8.0093%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (4 samples, 0.32%)</title><rect x="7.7593%" y="485" width="0.3167%" height="15" fill="rgb(235,116,46)" fg:x="98" fg:w="4"/><text x="8.0093%" y="495.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="8.0760%" y="501" width="0.0792%" height="15" fill="rgb(224,18,32)" fg:x="102" fg:w="1"/><text x="8.3260%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.0760%" y="485" width="0.0792%" height="15" fill="rgb(252,5,12)" fg:x="102" fg:w="1"/><text x="8.3260%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="8.0760%" y="469" width="0.0792%" height="15" fill="rgb(251,36,5)" fg:x="102" fg:w="1"/><text x="8.3260%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (5 samples, 0.40%)</title><rect x="8.2344%" y="453" width="0.3959%" height="15" fill="rgb(217,53,14)" fg:x="104" fg:w="5"/><text x="8.4844%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (5 samples, 0.40%)</title><rect x="8.2344%" y="437" width="0.3959%" height="15" fill="rgb(215,86,45)" fg:x="104" fg:w="5"/><text x="8.4844%" y="447.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="8.3135%" y="421" width="0.3167%" height="15" fill="rgb(242,169,11)" fg:x="105" fg:w="4"/><text x="8.5635%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="8.6302%" y="453" width="0.0792%" height="15" fill="rgb(211,213,45)" fg:x="109" fg:w="1"/><text x="8.8802%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.6302%" y="437" width="0.0792%" height="15" fill="rgb(205,88,11)" fg:x="109" fg:w="1"/><text x="8.8802%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.6302%" y="421" width="0.0792%" height="15" fill="rgb(252,69,26)" fg:x="109" fg:w="1"/><text x="8.8802%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.6302%" y="405" width="0.0792%" height="15" fill="rgb(246,123,37)" fg:x="109" fg:w="1"/><text x="8.8802%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.6302%" y="389" width="0.0792%" height="15" fill="rgb(212,205,5)" fg:x="109" fg:w="1"/><text x="8.8802%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.6302%" y="373" width="0.0792%" height="15" fill="rgb(253,148,0)" fg:x="109" fg:w="1"/><text x="8.8802%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="8.7886%" y="421" width="0.2375%" height="15" fill="rgb(239,22,4)" fg:x="111" fg:w="3"/><text x="9.0386%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="8.8678%" y="405" width="0.1584%" height="15" fill="rgb(226,26,53)" fg:x="112" fg:w="2"/><text x="9.1178%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.9470%" y="389" width="0.0792%" height="15" fill="rgb(225,229,45)" fg:x="113" fg:w="1"/><text x="9.1970%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="9.0261%" y="405" width="0.0792%" height="15" fill="rgb(220,60,37)" fg:x="114" fg:w="1"/><text x="9.2761%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (12 samples, 0.95%)</title><rect x="8.2344%" y="485" width="0.9501%" height="15" fill="rgb(217,180,35)" fg:x="104" fg:w="12"/><text x="8.4844%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (12 samples, 0.95%)</title><rect x="8.2344%" y="469" width="0.9501%" height="15" fill="rgb(229,7,53)" fg:x="104" fg:w="12"/><text x="8.4844%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.48%)</title><rect x="8.7094%" y="453" width="0.4751%" height="15" fill="rgb(254,137,3)" fg:x="110" fg:w="6"/><text x="8.9594%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="8.7886%" y="437" width="0.3959%" height="15" fill="rgb(215,140,41)" fg:x="111" fg:w="5"/><text x="9.0386%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="9.0261%" y="421" width="0.1584%" height="15" fill="rgb(250,80,15)" fg:x="114" fg:w="2"/><text x="9.2761%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.1053%" y="405" width="0.0792%" height="15" fill="rgb(252,191,6)" fg:x="115" fg:w="1"/><text x="9.3553%" y="415.50"></text></g><g><title>engine::session::Session::flush (60 samples, 4.75%)</title><rect x="4.5922%" y="645" width="4.7506%" height="15" fill="rgb(246,217,18)" fg:x="58" fg:w="60"/><text x="4.8422%" y="655.50">engine..</text></g><g><title>engine::session::state::State::close (58 samples, 4.59%)</title><rect x="4.7506%" y="629" width="4.5922%" height="15" fill="rgb(223,93,7)" fg:x="60" fg:w="58"/><text x="5.0006%" y="639.50">engin..</text></g><g><title>engine::session::state::State::flush_entities (58 samples, 4.59%)</title><rect x="4.7506%" y="613" width="4.5922%" height="15" fill="rgb(225,55,52)" fg:x="60" fg:w="58"/><text x="5.0006%" y="623.50">engin..</text></g><g><title>core::iter::adapters::try_process (58 samples, 4.59%)</title><rect x="4.7506%" y="597" width="4.5922%" height="15" fill="rgb(240,31,24)" fg:x="60" fg:w="58"/><text x="5.0006%" y="607.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (58 samples, 4.59%)</title><rect x="4.7506%" y="581" width="4.5922%" height="15" fill="rgb(205,56,52)" fg:x="60" fg:w="58"/><text x="5.0006%" y="591.50">&lt;allo..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (58 samples, 4.59%)</title><rect x="4.7506%" y="565" width="4.5922%" height="15" fill="rgb(246,146,12)" fg:x="60" fg:w="58"/><text x="5.0006%" y="575.50">engin..</text></g><g><title>kernel::model::any_entity_changes (23 samples, 1.82%)</title><rect x="7.5218%" y="549" width="1.8211%" height="15" fill="rgb(239,84,36)" fg:x="95" fg:w="23"/><text x="7.7718%" y="559.50">k..</text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (20 samples, 1.58%)</title><rect x="7.7593%" y="533" width="1.5835%" height="15" fill="rgb(207,41,40)" fg:x="98" fg:w="20"/><text x="8.0093%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (20 samples, 1.58%)</title><rect x="7.7593%" y="517" width="1.5835%" height="15" fill="rgb(241,179,25)" fg:x="98" fg:w="20"/><text x="8.0093%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (15 samples, 1.19%)</title><rect x="8.1552%" y="501" width="1.1876%" height="15" fill="rgb(210,0,34)" fg:x="103" fg:w="15"/><text x="8.4052%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="9.1845%" y="485" width="0.1584%" height="15" fill="rgb(225,217,29)" fg:x="116" fg:w="2"/><text x="9.4345%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.2637%" y="469" width="0.0792%" height="15" fill="rgb(216,191,38)" fg:x="117" fg:w="1"/><text x="9.5137%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.2637%" y="453" width="0.0792%" height="15" fill="rgb(232,140,52)" fg:x="117" fg:w="1"/><text x="9.5137%" y="463.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="9.3428%" y="645" width="0.0792%" height="15" fill="rgb(223,158,51)" fg:x="118" fg:w="1"/><text x="9.5928%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="9.3428%" y="629" width="0.0792%" height="15" fill="rgb(235,29,51)" fg:x="118" fg:w="1"/><text x="9.5928%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.4220%" y="501" width="0.0792%" height="15" fill="rgb(215,181,18)" fg:x="119" fg:w="1"/><text x="9.6720%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="9.4220%" y="613" width="0.1584%" height="15" fill="rgb(227,125,34)" fg:x="119" fg:w="2"/><text x="9.6720%" y="623.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="9.4220%" y="597" width="0.1584%" height="15" fill="rgb(230,197,49)" fg:x="119" fg:w="2"/><text x="9.6720%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="9.4220%" y="581" width="0.1584%" height="15" fill="rgb(239,141,16)" fg:x="119" fg:w="2"/><text x="9.6720%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="9.4220%" y="565" width="0.1584%" height="15" fill="rgb(225,105,43)" fg:x="119" fg:w="2"/><text x="9.6720%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="9.4220%" y="549" width="0.1584%" height="15" fill="rgb(214,131,14)" fg:x="119" fg:w="2"/><text x="9.6720%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="9.4220%" y="533" width="0.1584%" height="15" fill="rgb(229,177,11)" fg:x="119" fg:w="2"/><text x="9.6720%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="9.4220%" y="517" width="0.1584%" height="15" fill="rgb(231,180,14)" fg:x="119" fg:w="2"/><text x="9.6720%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="9.5012%" y="501" width="0.0792%" height="15" fill="rgb(232,88,2)" fg:x="120" fg:w="1"/><text x="9.7512%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.5012%" y="485" width="0.0792%" height="15" fill="rgb(205,220,8)" fg:x="120" fg:w="1"/><text x="9.7512%" y="495.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="9.5804%" y="597" width="0.0792%" height="15" fill="rgb(225,23,53)" fg:x="121" fg:w="1"/><text x="9.8304%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.5804%" y="581" width="0.0792%" height="15" fill="rgb(213,62,29)" fg:x="121" fg:w="1"/><text x="9.8304%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.5804%" y="565" width="0.0792%" height="15" fill="rgb(227,75,7)" fg:x="121" fg:w="1"/><text x="9.8304%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.6595%" y="549" width="0.0792%" height="15" fill="rgb(207,105,14)" fg:x="122" fg:w="1"/><text x="9.9095%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.6595%" y="533" width="0.0792%" height="15" fill="rgb(245,62,29)" fg:x="122" fg:w="1"/><text x="9.9095%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="9.6595%" y="517" width="0.0792%" height="15" fill="rgb(236,202,4)" fg:x="122" fg:w="1"/><text x="9.9095%" y="527.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (3 samples, 0.24%)</title><rect x="9.5804%" y="613" width="0.2375%" height="15" fill="rgb(250,67,1)" fg:x="121" fg:w="3"/><text x="9.8304%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="9.6595%" y="597" width="0.1584%" height="15" fill="rgb(253,115,44)" fg:x="122" fg:w="2"/><text x="9.9095%" y="607.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (2 samples, 0.16%)</title><rect x="9.6595%" y="581" width="0.1584%" height="15" fill="rgb(251,139,18)" fg:x="122" fg:w="2"/><text x="9.9095%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="9.6595%" y="565" width="0.1584%" height="15" fill="rgb(218,22,32)" fg:x="122" fg:w="2"/><text x="9.9095%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="9.7387%" y="549" width="0.0792%" height="15" fill="rgb(243,53,5)" fg:x="123" fg:w="1"/><text x="9.9887%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.7387%" y="533" width="0.0792%" height="15" fill="rgb(227,56,16)" fg:x="123" fg:w="1"/><text x="9.9887%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.7387%" y="517" width="0.0792%" height="15" fill="rgb(245,53,0)" fg:x="123" fg:w="1"/><text x="9.9887%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.7387%" y="501" width="0.0792%" height="15" fill="rgb(216,170,35)" fg:x="123" fg:w="1"/><text x="9.9887%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.8179%" y="533" width="0.0792%" height="15" fill="rgb(211,200,8)" fg:x="124" fg:w="1"/><text x="10.0679%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.8179%" y="517" width="0.0792%" height="15" fill="rgb(228,204,44)" fg:x="124" fg:w="1"/><text x="10.0679%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.8179%" y="501" width="0.0792%" height="15" fill="rgb(214,121,17)" fg:x="124" fg:w="1"/><text x="10.0679%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.8179%" y="485" width="0.0792%" height="15" fill="rgb(233,64,38)" fg:x="124" fg:w="1"/><text x="10.0679%" y="495.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="9.8179%" y="565" width="0.1584%" height="15" fill="rgb(253,54,19)" fg:x="124" fg:w="2"/><text x="10.0679%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="9.8179%" y="549" width="0.1584%" height="15" fill="rgb(253,94,18)" fg:x="124" fg:w="2"/><text x="10.0679%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="9.8971%" y="533" width="0.0792%" height="15" fill="rgb(227,57,52)" fg:x="125" fg:w="1"/><text x="10.1471%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.8971%" y="517" width="0.0792%" height="15" fill="rgb(230,228,50)" fg:x="125" fg:w="1"/><text x="10.1471%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="9.8971%" y="501" width="0.0792%" height="15" fill="rgb(217,205,27)" fg:x="125" fg:w="1"/><text x="10.1471%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.8971%" y="485" width="0.0792%" height="15" fill="rgb(252,71,50)" fg:x="125" fg:w="1"/><text x="10.1471%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="9.8971%" y="469" width="0.0792%" height="15" fill="rgb(209,86,4)" fg:x="125" fg:w="1"/><text x="10.1471%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.8971%" y="453" width="0.0792%" height="15" fill="rgb(229,94,0)" fg:x="125" fg:w="1"/><text x="10.1471%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="9.9762%" y="549" width="0.0792%" height="15" fill="rgb(252,223,21)" fg:x="126" fg:w="1"/><text x="10.2262%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.9762%" y="533" width="0.0792%" height="15" fill="rgb(230,210,4)" fg:x="126" fg:w="1"/><text x="10.2262%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="9.9762%" y="517" width="0.0792%" height="15" fill="rgb(240,149,38)" fg:x="126" fg:w="1"/><text x="10.2262%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.9762%" y="501" width="0.0792%" height="15" fill="rgb(254,105,20)" fg:x="126" fg:w="1"/><text x="10.2262%" y="511.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (4 samples, 0.32%)</title><rect x="9.8179%" y="597" width="0.3167%" height="15" fill="rgb(253,87,46)" fg:x="124" fg:w="4"/><text x="10.0679%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (4 samples, 0.32%)</title><rect x="9.8179%" y="581" width="0.3167%" height="15" fill="rgb(253,116,33)" fg:x="124" fg:w="4"/><text x="10.0679%" y="591.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="9.9762%" y="565" width="0.1584%" height="15" fill="rgb(229,198,5)" fg:x="126" fg:w="2"/><text x="10.2262%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="10.0554%" y="549" width="0.0792%" height="15" fill="rgb(242,38,37)" fg:x="127" fg:w="1"/><text x="10.3054%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.0554%" y="533" width="0.0792%" height="15" fill="rgb(242,69,53)" fg:x="127" fg:w="1"/><text x="10.3054%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="10.0554%" y="517" width="0.0792%" height="15" fill="rgb(249,80,16)" fg:x="127" fg:w="1"/><text x="10.3054%" y="527.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="10.0554%" y="501" width="0.0792%" height="15" fill="rgb(206,128,11)" fg:x="127" fg:w="1"/><text x="10.3054%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.0554%" y="485" width="0.0792%" height="15" fill="rgb(212,35,20)" fg:x="127" fg:w="1"/><text x="10.3054%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.0554%" y="469" width="0.0792%" height="15" fill="rgb(236,79,13)" fg:x="127" fg:w="1"/><text x="10.3054%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (10 samples, 0.79%)</title><rect x="9.4220%" y="629" width="0.7918%" height="15" fill="rgb(233,123,3)" fg:x="119" fg:w="10"/><text x="9.6720%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.40%)</title><rect x="9.8179%" y="613" width="0.3959%" height="15" fill="rgb(214,93,52)" fg:x="124" fg:w="5"/><text x="10.0679%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.1346%" y="597" width="0.0792%" height="15" fill="rgb(251,37,40)" fg:x="128" fg:w="1"/><text x="10.3846%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.2138%" y="613" width="0.0792%" height="15" fill="rgb(227,80,54)" fg:x="129" fg:w="1"/><text x="10.4638%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.2138%" y="597" width="0.0792%" height="15" fill="rgb(254,48,11)" fg:x="129" fg:w="1"/><text x="10.4638%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="10.2138%" y="629" width="0.1584%" height="15" fill="rgb(235,193,26)" fg:x="129" fg:w="2"/><text x="10.4638%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.2930%" y="613" width="0.0792%" height="15" fill="rgb(229,99,21)" fg:x="130" fg:w="1"/><text x="10.5430%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.3721%" y="533" width="0.0792%" height="15" fill="rgb(211,140,41)" fg:x="131" fg:w="1"/><text x="10.6221%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="10.3721%" y="581" width="0.1584%" height="15" fill="rgb(240,227,30)" fg:x="131" fg:w="2"/><text x="10.6221%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="10.3721%" y="565" width="0.1584%" height="15" fill="rgb(215,224,45)" fg:x="131" fg:w="2"/><text x="10.6221%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="10.3721%" y="549" width="0.1584%" height="15" fill="rgb(206,123,31)" fg:x="131" fg:w="2"/><text x="10.6221%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.4513%" y="533" width="0.0792%" height="15" fill="rgb(210,138,16)" fg:x="132" fg:w="1"/><text x="10.7013%" y="543.50"></text></g><g><title>plugins_core::build::Build::save (15 samples, 1.19%)</title><rect x="9.4220%" y="645" width="1.1876%" height="15" fill="rgb(228,57,28)" fg:x="119" fg:w="15"/><text x="9.6720%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="10.3721%" y="629" width="0.2375%" height="15" fill="rgb(242,170,10)" fg:x="131" fg:w="3"/><text x="10.6221%" y="639.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="10.3721%" y="613" width="0.2375%" height="15" fill="rgb(228,214,39)" fg:x="131" fg:w="3"/><text x="10.6221%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="10.3721%" y="597" width="0.2375%" height="15" fill="rgb(218,179,33)" fg:x="131" fg:w="3"/><text x="10.6221%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.5305%" y="581" width="0.0792%" height="15" fill="rgb(235,193,39)" fg:x="133" fg:w="1"/><text x="10.7805%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.5305%" y="565" width="0.0792%" height="15" fill="rgb(219,221,36)" fg:x="133" fg:w="1"/><text x="10.7805%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.5305%" y="549" width="0.0792%" height="15" fill="rgb(248,218,19)" fg:x="133" fg:w="1"/><text x="10.7805%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.5305%" y="533" width="0.0792%" height="15" fill="rgb(205,50,9)" fg:x="133" fg:w="1"/><text x="10.7805%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.5305%" y="517" width="0.0792%" height="15" fill="rgb(238,81,28)" fg:x="133" fg:w="1"/><text x="10.7805%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.5305%" y="501" width="0.0792%" height="15" fill="rgb(235,110,19)" fg:x="133" fg:w="1"/><text x="10.7805%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.5305%" y="485" width="0.0792%" height="15" fill="rgb(214,7,14)" fg:x="133" fg:w="1"/><text x="10.7805%" y="495.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="10.6097%" y="613" width="0.1584%" height="15" fill="rgb(211,77,3)" fg:x="134" fg:w="2"/><text x="10.8597%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="10.6888%" y="597" width="0.0792%" height="15" fill="rgb(229,5,9)" fg:x="135" fg:w="1"/><text x="10.9388%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="10.6888%" y="581" width="0.0792%" height="15" fill="rgb(225,90,11)" fg:x="135" fg:w="1"/><text x="10.9388%" y="591.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (4 samples, 0.32%)</title><rect x="10.6097%" y="645" width="0.3167%" height="15" fill="rgb(242,56,8)" fg:x="134" fg:w="4"/><text x="10.8597%" y="655.50"></text></g><g><title>plugins_core::tools::set_quantity (4 samples, 0.32%)</title><rect x="10.6097%" y="629" width="0.3167%" height="15" fill="rgb(249,212,39)" fg:x="134" fg:w="4"/><text x="10.8597%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="10.7680%" y="613" width="0.1584%" height="15" fill="rgb(236,90,9)" fg:x="136" fg:w="2"/><text x="11.0180%" y="623.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (2 samples, 0.16%)</title><rect x="10.7680%" y="597" width="0.1584%" height="15" fill="rgb(206,88,35)" fg:x="136" fg:w="2"/><text x="11.0180%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="10.7680%" y="581" width="0.1584%" height="15" fill="rgb(205,126,30)" fg:x="136" fg:w="2"/><text x="11.0180%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Kind&gt;::serialize (1 samples, 0.08%)</title><rect x="10.8472%" y="565" width="0.0792%" height="15" fill="rgb(230,176,12)" fg:x="137" fg:w="1"/><text x="11.0972%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.8472%" y="549" width="0.0792%" height="15" fill="rgb(243,19,9)" fg:x="137" fg:w="1"/><text x="11.0972%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.8472%" y="533" width="0.0792%" height="15" fill="rgb(245,171,17)" fg:x="137" fg:w="1"/><text x="11.0972%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.8472%" y="517" width="0.0792%" height="15" fill="rgb(227,52,21)" fg:x="137" fg:w="1"/><text x="11.0972%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.8472%" y="501" width="0.0792%" height="15" fill="rgb(238,69,14)" fg:x="137" fg:w="1"/><text x="11.0972%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="10.9264%" y="613" width="0.0792%" height="15" fill="rgb(241,156,39)" fg:x="138" fg:w="1"/><text x="11.1764%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="11.0055%" y="597" width="0.0792%" height="15" fill="rgb(212,227,28)" fg:x="139" fg:w="1"/><text x="11.2555%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.0055%" y="581" width="0.0792%" height="15" fill="rgb(209,118,27)" fg:x="139" fg:w="1"/><text x="11.2555%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.0055%" y="565" width="0.0792%" height="15" fill="rgb(226,102,5)" fg:x="139" fg:w="1"/><text x="11.2555%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.0055%" y="549" width="0.0792%" height="15" fill="rgb(223,34,3)" fg:x="139" fg:w="1"/><text x="11.2555%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.0055%" y="533" width="0.0792%" height="15" fill="rgb(221,81,38)" fg:x="139" fg:w="1"/><text x="11.2555%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.0055%" y="517" width="0.0792%" height="15" fill="rgb(236,219,28)" fg:x="139" fg:w="1"/><text x="11.2555%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.0055%" y="501" width="0.0792%" height="15" fill="rgb(213,200,14)" fg:x="139" fg:w="1"/><text x="11.2555%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.0055%" y="485" width="0.0792%" height="15" fill="rgb(240,33,19)" fg:x="139" fg:w="1"/><text x="11.2555%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.0055%" y="469" width="0.0792%" height="15" fill="rgb(233,113,27)" fg:x="139" fg:w="1"/><text x="11.2555%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="11.0055%" y="453" width="0.0792%" height="15" fill="rgb(220,221,18)" fg:x="139" fg:w="1"/><text x="11.2555%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="11.0055%" y="437" width="0.0792%" height="15" fill="rgb(238,92,8)" fg:x="139" fg:w="1"/><text x="11.2555%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="11.0847%" y="565" width="0.0792%" height="15" fill="rgb(222,164,16)" fg:x="140" fg:w="1"/><text x="11.3347%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="11.0847%" y="549" width="0.0792%" height="15" fill="rgb(241,119,3)" fg:x="140" fg:w="1"/><text x="11.3347%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="11.0847%" y="533" width="0.0792%" height="15" fill="rgb(241,44,8)" fg:x="140" fg:w="1"/><text x="11.3347%" y="543.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="11.0055%" y="613" width="0.2375%" height="15" fill="rgb(230,36,40)" fg:x="139" fg:w="3"/><text x="11.2555%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="11.0847%" y="597" width="0.1584%" height="15" fill="rgb(243,16,36)" fg:x="140" fg:w="2"/><text x="11.3347%" y="607.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="11.0847%" y="581" width="0.1584%" height="15" fill="rgb(231,4,26)" fg:x="140" fg:w="2"/><text x="11.3347%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="11.1639%" y="565" width="0.0792%" height="15" fill="rgb(240,9,31)" fg:x="141" fg:w="1"/><text x="11.4139%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.1639%" y="549" width="0.0792%" height="15" fill="rgb(207,173,15)" fg:x="141" fg:w="1"/><text x="11.4139%" y="559.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (6 samples, 0.48%)</title><rect x="10.9264%" y="645" width="0.4751%" height="15" fill="rgb(224,192,53)" fg:x="138" fg:w="6"/><text x="11.1764%" y="655.50"></text></g><g><title>plugins_core::tools::set_container (6 samples, 0.48%)</title><rect x="10.9264%" y="629" width="0.4751%" height="15" fill="rgb(223,67,28)" fg:x="138" fg:w="6"/><text x="11.1764%" y="639.50"></text></g><g><title>plugins_core::location::Location::set (2 samples, 0.16%)</title><rect x="11.2431%" y="613" width="0.1584%" height="15" fill="rgb(211,20,47)" fg:x="142" fg:w="2"/><text x="11.4931%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="11.2431%" y="597" width="0.1584%" height="15" fill="rgb(240,228,2)" fg:x="142" fg:w="2"/><text x="11.4931%" y="607.50"></text></g><g><title>plugins_core::location::_::&lt;impl serde::ser::Serialize for plugins_core::location::Location&gt;::serialize (2 samples, 0.16%)</title><rect x="11.2431%" y="581" width="0.1584%" height="15" fill="rgb(248,151,12)" fg:x="142" fg:w="2"/><text x="11.4931%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="11.2431%" y="565" width="0.1584%" height="15" fill="rgb(244,8,39)" fg:x="142" fg:w="2"/><text x="11.4931%" y="575.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="11.3222%" y="549" width="0.0792%" height="15" fill="rgb(222,26,8)" fg:x="143" fg:w="1"/><text x="11.5722%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.3222%" y="533" width="0.0792%" height="15" fill="rgb(213,106,44)" fg:x="143" fg:w="1"/><text x="11.5722%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="11.4806%" y="629" width="0.0792%" height="15" fill="rgb(214,129,20)" fg:x="145" fg:w="1"/><text x="11.7306%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.4806%" y="613" width="0.0792%" height="15" fill="rgb(212,32,13)" fg:x="145" fg:w="1"/><text x="11.7306%" y="623.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="11.5598%" y="629" width="0.0792%" height="15" fill="rgb(208,168,33)" fg:x="146" fg:w="1"/><text x="11.8098%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="11.5598%" y="613" width="0.0792%" height="15" fill="rgb(231,207,8)" fg:x="146" fg:w="1"/><text x="11.8098%" y="623.50"></text></g><g><title>engine::users::model::_::&lt;impl serde::ser::Serialize for engine::users::model::Usernames&gt;::serialize (1 samples, 0.08%)</title><rect x="11.5598%" y="597" width="0.0792%" height="15" fill="rgb(235,219,23)" fg:x="146" fg:w="1"/><text x="11.8098%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.5598%" y="581" width="0.0792%" height="15" fill="rgb(226,216,26)" fg:x="146" fg:w="1"/><text x="11.8098%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="11.5598%" y="565" width="0.0792%" height="15" fill="rgb(239,137,16)" fg:x="146" fg:w="1"/><text x="11.8098%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="11.5598%" y="549" width="0.0792%" height="15" fill="rgb(207,12,36)" fg:x="146" fg:w="1"/><text x="11.8098%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="11.6390%" y="629" width="0.0792%" height="15" fill="rgb(210,214,24)" fg:x="147" fg:w="1"/><text x="11.8890%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="11.6390%" y="613" width="0.0792%" height="15" fill="rgb(206,56,30)" fg:x="147" fg:w="1"/><text x="11.8890%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="11.6390%" y="597" width="0.0792%" height="15" fill="rgb(228,143,26)" fg:x="147" fg:w="1"/><text x="11.8890%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.6390%" y="581" width="0.0792%" height="15" fill="rgb(216,218,46)" fg:x="147" fg:w="1"/><text x="11.8890%" y="591.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="11.7181%" y="629" width="0.0792%" height="15" fill="rgb(206,6,19)" fg:x="148" fg:w="1"/><text x="11.9681%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="11.7181%" y="613" width="0.0792%" height="15" fill="rgb(239,177,51)" fg:x="148" fg:w="1"/><text x="11.9681%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="11.7181%" y="597" width="0.0792%" height="15" fill="rgb(216,55,25)" fg:x="148" fg:w="1"/><text x="11.9681%" y="607.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="11.7181%" y="581" width="0.0792%" height="15" fill="rgb(231,163,29)" fg:x="148" fg:w="1"/><text x="11.9681%" y="591.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="11.7181%" y="565" width="0.0792%" height="15" fill="rgb(232,149,50)" fg:x="148" fg:w="1"/><text x="11.9681%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="11.7181%" y="549" width="0.0792%" height="15" fill="rgb(223,142,48)" fg:x="148" fg:w="1"/><text x="11.9681%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="11.7181%" y="533" width="0.0792%" height="15" fill="rgb(245,83,23)" fg:x="148" fg:w="1"/><text x="11.9681%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="11.7181%" y="517" width="0.0792%" height="15" fill="rgb(224,63,2)" fg:x="148" fg:w="1"/><text x="11.9681%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.7181%" y="501" width="0.0792%" height="15" fill="rgb(218,65,53)" fg:x="148" fg:w="1"/><text x="11.9681%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.7181%" y="485" width="0.0792%" height="15" fill="rgb(221,84,29)" fg:x="148" fg:w="1"/><text x="11.9681%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.7181%" y="469" width="0.0792%" height="15" fill="rgb(234,0,32)" fg:x="148" fg:w="1"/><text x="11.9681%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.7181%" y="453" width="0.0792%" height="15" fill="rgb(206,20,16)" fg:x="148" fg:w="1"/><text x="11.9681%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.7181%" y="437" width="0.0792%" height="15" fill="rgb(244,172,18)" fg:x="148" fg:w="1"/><text x="11.9681%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.7181%" y="421" width="0.0792%" height="15" fill="rgb(254,133,1)" fg:x="148" fg:w="1"/><text x="11.9681%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.7181%" y="405" width="0.0792%" height="15" fill="rgb(222,206,41)" fg:x="148" fg:w="1"/><text x="11.9681%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.7181%" y="389" width="0.0792%" height="15" fill="rgb(212,3,42)" fg:x="148" fg:w="1"/><text x="11.9681%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.7181%" y="373" width="0.0792%" height="15" fill="rgb(241,11,4)" fg:x="148" fg:w="1"/><text x="11.9681%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.7181%" y="357" width="0.0792%" height="15" fill="rgb(205,19,26)" fg:x="148" fg:w="1"/><text x="11.9681%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="11.7181%" y="341" width="0.0792%" height="15" fill="rgb(210,179,32)" fg:x="148" fg:w="1"/><text x="11.9681%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="11.7181%" y="325" width="0.0792%" height="15" fill="rgb(227,116,49)" fg:x="148" fg:w="1"/><text x="11.9681%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="11.7181%" y="309" width="0.0792%" height="15" fill="rgb(211,146,6)" fg:x="148" fg:w="1"/><text x="11.9681%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="11.7181%" y="293" width="0.0792%" height="15" fill="rgb(219,44,39)" fg:x="148" fg:w="1"/><text x="11.9681%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.7181%" y="277" width="0.0792%" height="15" fill="rgb(234,128,11)" fg:x="148" fg:w="1"/><text x="11.9681%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="11.7973%" y="629" width="0.0792%" height="15" fill="rgb(220,183,53)" fg:x="149" fg:w="1"/><text x="12.0473%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="11.8765%" y="533" width="0.0792%" height="15" fill="rgb(213,219,32)" fg:x="150" fg:w="1"/><text x="12.1265%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.8765%" y="517" width="0.0792%" height="15" fill="rgb(232,156,16)" fg:x="150" fg:w="1"/><text x="12.1265%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.8765%" y="501" width="0.0792%" height="15" fill="rgb(246,135,34)" fg:x="150" fg:w="1"/><text x="12.1265%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.8765%" y="485" width="0.0792%" height="15" fill="rgb(241,99,0)" fg:x="150" fg:w="1"/><text x="12.1265%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.8765%" y="469" width="0.0792%" height="15" fill="rgb(222,103,45)" fg:x="150" fg:w="1"/><text x="12.1265%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.8765%" y="453" width="0.0792%" height="15" fill="rgb(212,57,4)" fg:x="150" fg:w="1"/><text x="12.1265%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.8765%" y="437" width="0.0792%" height="15" fill="rgb(215,68,47)" fg:x="150" fg:w="1"/><text x="12.1265%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.8765%" y="421" width="0.0792%" height="15" fill="rgb(230,84,2)" fg:x="150" fg:w="1"/><text x="12.1265%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="11.8765%" y="405" width="0.0792%" height="15" fill="rgb(220,102,14)" fg:x="150" fg:w="1"/><text x="12.1265%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="11.8765%" y="389" width="0.0792%" height="15" fill="rgb(240,10,32)" fg:x="150" fg:w="1"/><text x="12.1265%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="11.8765%" y="373" width="0.0792%" height="15" fill="rgb(215,47,27)" fg:x="150" fg:w="1"/><text x="12.1265%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="11.8765%" y="357" width="0.0792%" height="15" fill="rgb(233,188,43)" fg:x="150" fg:w="1"/><text x="12.1265%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.8765%" y="341" width="0.0792%" height="15" fill="rgb(253,190,1)" fg:x="150" fg:w="1"/><text x="12.1265%" y="351.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="11.8765%" y="565" width="0.1584%" height="15" fill="rgb(206,114,52)" fg:x="150" fg:w="2"/><text x="12.1265%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="11.8765%" y="549" width="0.1584%" height="15" fill="rgb(233,120,37)" fg:x="150" fg:w="2"/><text x="12.1265%" y="559.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="11.9557%" y="533" width="0.0792%" height="15" fill="rgb(214,52,39)" fg:x="151" fg:w="1"/><text x="12.2057%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.9557%" y="517" width="0.0792%" height="15" fill="rgb(223,80,29)" fg:x="151" fg:w="1"/><text x="12.2057%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.32%)</title><rect x="12.1140%" y="501" width="0.3167%" height="15" fill="rgb(230,101,40)" fg:x="153" fg:w="4"/><text x="12.3640%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="12.1932%" y="485" width="0.2375%" height="15" fill="rgb(219,211,8)" fg:x="154" fg:w="3"/><text x="12.4432%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="12.3515%" y="469" width="0.0792%" height="15" fill="rgb(252,126,28)" fg:x="156" fg:w="1"/><text x="12.6015%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="12.3515%" y="453" width="0.0792%" height="15" fill="rgb(215,56,38)" fg:x="156" fg:w="1"/><text x="12.6015%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.3515%" y="437" width="0.0792%" height="15" fill="rgb(249,55,44)" fg:x="156" fg:w="1"/><text x="12.6015%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="12.4307%" y="485" width="0.3167%" height="15" fill="rgb(220,221,32)" fg:x="157" fg:w="4"/><text x="12.6807%" y="495.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="12.5099%" y="469" width="0.2375%" height="15" fill="rgb(212,216,41)" fg:x="158" fg:w="3"/><text x="12.7599%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="12.5891%" y="453" width="0.1584%" height="15" fill="rgb(228,213,43)" fg:x="159" fg:w="2"/><text x="12.8391%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="12.5891%" y="437" width="0.1584%" height="15" fill="rgb(211,31,26)" fg:x="159" fg:w="2"/><text x="12.8391%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="12.8266%" y="469" width="0.1584%" height="15" fill="rgb(229,202,19)" fg:x="162" fg:w="2"/><text x="13.0766%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="12.9058%" y="453" width="0.0792%" height="15" fill="rgb(229,105,46)" fg:x="163" fg:w="1"/><text x="13.1558%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="12.9058%" y="437" width="0.0792%" height="15" fill="rgb(235,108,1)" fg:x="163" fg:w="1"/><text x="13.1558%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="12.9058%" y="421" width="0.0792%" height="15" fill="rgb(245,111,35)" fg:x="163" fg:w="1"/><text x="13.1558%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="12.9058%" y="405" width="0.0792%" height="15" fill="rgb(219,185,31)" fg:x="163" fg:w="1"/><text x="13.1558%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="12.9850%" y="469" width="0.1584%" height="15" fill="rgb(214,4,43)" fg:x="164" fg:w="2"/><text x="13.2350%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.0641%" y="453" width="0.0792%" height="15" fill="rgb(235,227,40)" fg:x="165" fg:w="1"/><text x="13.3141%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.0641%" y="437" width="0.0792%" height="15" fill="rgb(230,88,30)" fg:x="165" fg:w="1"/><text x="13.3141%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.0641%" y="421" width="0.0792%" height="15" fill="rgb(216,217,1)" fg:x="165" fg:w="1"/><text x="13.3141%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="13.0641%" y="405" width="0.0792%" height="15" fill="rgb(248,139,50)" fg:x="165" fg:w="1"/><text x="13.3141%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="13.0641%" y="389" width="0.0792%" height="15" fill="rgb(233,1,21)" fg:x="165" fg:w="1"/><text x="13.3141%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="13.0641%" y="373" width="0.0792%" height="15" fill="rgb(215,183,12)" fg:x="165" fg:w="1"/><text x="13.3141%" y="383.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::classify (1 samples, 0.08%)</title><rect x="13.1433%" y="453" width="0.0792%" height="15" fill="rgb(229,104,42)" fg:x="166" fg:w="1"/><text x="13.3933%" y="463.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::partial_classify (1 samples, 0.08%)</title><rect x="13.1433%" y="437" width="0.0792%" height="15" fill="rgb(243,34,48)" fg:x="166" fg:w="1"/><text x="13.3933%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="13.2225%" y="437" width="0.0792%" height="15" fill="rgb(239,11,44)" fg:x="167" fg:w="1"/><text x="13.4725%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="13.3017%" y="437" width="0.0792%" height="15" fill="rgb(231,98,35)" fg:x="168" fg:w="1"/><text x="13.5517%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.3017%" y="421" width="0.0792%" height="15" fill="rgb(233,28,25)" fg:x="168" fg:w="1"/><text x="13.5517%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.3017%" y="405" width="0.0792%" height="15" fill="rgb(234,123,11)" fg:x="168" fg:w="1"/><text x="13.5517%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.3017%" y="389" width="0.0792%" height="15" fill="rgb(220,69,3)" fg:x="168" fg:w="1"/><text x="13.5517%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="13.1433%" y="469" width="0.3167%" height="15" fill="rgb(214,64,36)" fg:x="166" fg:w="4"/><text x="13.3933%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="13.2225%" y="453" width="0.2375%" height="15" fill="rgb(211,138,32)" fg:x="167" fg:w="3"/><text x="13.4725%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="13.3808%" y="437" width="0.0792%" height="15" fill="rgb(213,118,47)" fg:x="169" fg:w="1"/><text x="13.6308%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="13.3808%" y="421" width="0.0792%" height="15" fill="rgb(243,124,49)" fg:x="169" fg:w="1"/><text x="13.6308%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.3808%" y="405" width="0.0792%" height="15" fill="rgb(221,30,28)" fg:x="169" fg:w="1"/><text x="13.6308%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.3808%" y="389" width="0.0792%" height="15" fill="rgb(246,37,13)" fg:x="169" fg:w="1"/><text x="13.6308%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.79%)</title><rect x="12.7474%" y="485" width="0.7918%" height="15" fill="rgb(249,66,14)" fg:x="161" fg:w="10"/><text x="12.9974%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.4600%" y="469" width="0.0792%" height="15" fill="rgb(213,166,5)" fg:x="170" fg:w="1"/><text x="13.7100%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (22 samples, 1.74%)</title><rect x="12.1140%" y="517" width="1.7419%" height="15" fill="rgb(221,66,24)" fg:x="153" fg:w="22"/><text x="12.3640%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (18 samples, 1.43%)</title><rect x="12.4307%" y="501" width="1.4252%" height="15" fill="rgb(210,132,17)" fg:x="157" fg:w="18"/><text x="12.6807%" y="511.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="13.5392%" y="485" width="0.3167%" height="15" fill="rgb(243,202,5)" fg:x="171" fg:w="4"/><text x="13.7892%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="13.6975%" y="469" width="0.1584%" height="15" fill="rgb(233,70,48)" fg:x="173" fg:w="2"/><text x="13.9475%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="13.6975%" y="453" width="0.1584%" height="15" fill="rgb(238,41,26)" fg:x="173" fg:w="2"/><text x="13.9475%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="13.6975%" y="437" width="0.1584%" height="15" fill="rgb(241,19,31)" fg:x="173" fg:w="2"/><text x="13.9475%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="13.6975%" y="421" width="0.1584%" height="15" fill="rgb(214,76,10)" fg:x="173" fg:w="2"/><text x="13.9475%" y="431.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="13.6975%" y="405" width="0.1584%" height="15" fill="rgb(254,202,22)" fg:x="173" fg:w="2"/><text x="13.9475%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.9351%" y="485" width="0.0792%" height="15" fill="rgb(214,72,24)" fg:x="176" fg:w="1"/><text x="14.1851%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.0143%" y="485" width="0.0792%" height="15" fill="rgb(221,92,46)" fg:x="177" fg:w="1"/><text x="14.2643%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.1726%" y="453" width="0.0792%" height="15" fill="rgb(246,13,50)" fg:x="179" fg:w="1"/><text x="14.4226%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="13.8559%" y="517" width="0.4751%" height="15" fill="rgb(240,165,38)" fg:x="175" fg:w="6"/><text x="14.1059%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.48%)</title><rect x="13.8559%" y="501" width="0.4751%" height="15" fill="rgb(241,24,51)" fg:x="175" fg:w="6"/><text x="14.1059%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="14.0934%" y="485" width="0.2375%" height="15" fill="rgb(227,51,44)" fg:x="178" fg:w="3"/><text x="14.3434%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="14.0934%" y="469" width="0.2375%" height="15" fill="rgb(231,121,3)" fg:x="178" fg:w="3"/><text x="14.3434%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.2518%" y="453" width="0.0792%" height="15" fill="rgb(245,3,41)" fg:x="180" fg:w="1"/><text x="14.5018%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="14.2518%" y="437" width="0.0792%" height="15" fill="rgb(214,13,26)" fg:x="180" fg:w="1"/><text x="14.5018%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="14.2518%" y="421" width="0.0792%" height="15" fill="rgb(252,75,11)" fg:x="180" fg:w="1"/><text x="14.5018%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.2518%" y="405" width="0.0792%" height="15" fill="rgb(218,226,17)" fg:x="180" fg:w="1"/><text x="14.5018%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.2518%" y="389" width="0.0792%" height="15" fill="rgb(248,89,38)" fg:x="180" fg:w="1"/><text x="14.5018%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.6477%" y="469" width="0.0792%" height="15" fill="rgb(237,73,46)" fg:x="185" fg:w="1"/><text x="14.8977%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="14.7268%" y="437" width="0.0792%" height="15" fill="rgb(242,78,33)" fg:x="186" fg:w="1"/><text x="14.9768%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="14.8852%" y="357" width="0.0792%" height="15" fill="rgb(235,60,3)" fg:x="188" fg:w="1"/><text x="15.1352%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.8852%" y="341" width="0.0792%" height="15" fill="rgb(216,172,19)" fg:x="188" fg:w="1"/><text x="15.1352%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.8852%" y="325" width="0.0792%" height="15" fill="rgb(227,6,42)" fg:x="188" fg:w="1"/><text x="15.1352%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.8852%" y="309" width="0.0792%" height="15" fill="rgb(223,207,42)" fg:x="188" fg:w="1"/><text x="15.1352%" y="319.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="14.8060%" y="421" width="0.2375%" height="15" fill="rgb(246,138,30)" fg:x="187" fg:w="3"/><text x="15.0560%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="14.8060%" y="405" width="0.2375%" height="15" fill="rgb(251,199,47)" fg:x="187" fg:w="3"/><text x="15.0560%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="14.8852%" y="389" width="0.1584%" height="15" fill="rgb(228,218,44)" fg:x="188" fg:w="2"/><text x="15.1352%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="14.8852%" y="373" width="0.1584%" height="15" fill="rgb(220,68,6)" fg:x="188" fg:w="2"/><text x="15.1352%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.9644%" y="357" width="0.0792%" height="15" fill="rgb(240,60,26)" fg:x="189" fg:w="1"/><text x="15.2144%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="15.0435%" y="373" width="0.0792%" height="15" fill="rgb(211,200,19)" fg:x="190" fg:w="1"/><text x="15.2935%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.0435%" y="357" width="0.0792%" height="15" fill="rgb(242,145,30)" fg:x="190" fg:w="1"/><text x="15.2935%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.0435%" y="341" width="0.0792%" height="15" fill="rgb(225,64,13)" fg:x="190" fg:w="1"/><text x="15.2935%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.0435%" y="325" width="0.0792%" height="15" fill="rgb(218,103,35)" fg:x="190" fg:w="1"/><text x="15.2935%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="15.0435%" y="405" width="0.3167%" height="15" fill="rgb(216,93,46)" fg:x="190" fg:w="4"/><text x="15.2935%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="15.0435%" y="389" width="0.3167%" height="15" fill="rgb(225,159,27)" fg:x="190" fg:w="4"/><text x="15.2935%" y="399.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="15.1227%" y="373" width="0.2375%" height="15" fill="rgb(225,204,11)" fg:x="191" fg:w="3"/><text x="15.3727%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.63%)</title><rect x="14.8060%" y="437" width="0.6334%" height="15" fill="rgb(205,56,4)" fg:x="187" fg:w="8"/><text x="15.0560%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="15.0435%" y="421" width="0.3959%" height="15" fill="rgb(206,6,35)" fg:x="190" fg:w="5"/><text x="15.2935%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.3603%" y="405" width="0.0792%" height="15" fill="rgb(247,73,52)" fg:x="194" fg:w="1"/><text x="15.6103%" y="415.50"></text></g><g><title>engine::session::Session::flush (47 samples, 3.72%)</title><rect x="11.8765%" y="629" width="3.7213%" height="15" fill="rgb(246,97,4)" fg:x="150" fg:w="47"/><text x="12.1265%" y="639.50">engi..</text></g><g><title>engine::session::Session::save_changes (47 samples, 3.72%)</title><rect x="11.8765%" y="613" width="3.7213%" height="15" fill="rgb(212,37,15)" fg:x="150" fg:w="47"/><text x="12.1265%" y="623.50">engi..</text></g><g><title>engine::session::state::State::close (47 samples, 3.72%)</title><rect x="11.8765%" y="597" width="3.7213%" height="15" fill="rgb(208,130,40)" fg:x="150" fg:w="47"/><text x="12.1265%" y="607.50">engi..</text></g><g><title>engine::session::state::State::flush_entities (47 samples, 3.72%)</title><rect x="11.8765%" y="581" width="3.7213%" height="15" fill="rgb(236,55,29)" fg:x="150" fg:w="47"/><text x="12.1265%" y="591.50">engi..</text></g><g><title>core::iter::adapters::try_process (45 samples, 3.56%)</title><rect x="12.0348%" y="565" width="3.5629%" height="15" fill="rgb(209,156,45)" fg:x="152" fg:w="45"/><text x="12.2848%" y="575.50">core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (45 samples, 3.56%)</title><rect x="12.0348%" y="549" width="3.5629%" height="15" fill="rgb(249,107,4)" fg:x="152" fg:w="45"/><text x="12.2848%" y="559.50">&lt;all..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (44 samples, 3.48%)</title><rect x="12.1140%" y="533" width="3.4838%" height="15" fill="rgb(227,7,13)" fg:x="153" fg:w="44"/><text x="12.3640%" y="543.50">eng..</text></g><g><title>kernel::model::any_entity_changes (16 samples, 1.27%)</title><rect x="14.3310%" y="517" width="1.2668%" height="15" fill="rgb(250,129,14)" fg:x="181" fg:w="16"/><text x="14.5810%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (16 samples, 1.27%)</title><rect x="14.3310%" y="501" width="1.2668%" height="15" fill="rgb(229,92,13)" fg:x="181" fg:w="16"/><text x="14.5810%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (14 samples, 1.11%)</title><rect x="14.4893%" y="485" width="1.1085%" height="15" fill="rgb(245,98,39)" fg:x="183" fg:w="14"/><text x="14.7393%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (11 samples, 0.87%)</title><rect x="14.7268%" y="469" width="0.8709%" height="15" fill="rgb(234,135,48)" fg:x="186" fg:w="11"/><text x="14.9768%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (11 samples, 0.87%)</title><rect x="14.7268%" y="453" width="0.8709%" height="15" fill="rgb(230,98,28)" fg:x="186" fg:w="11"/><text x="14.9768%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="15.4394%" y="437" width="0.1584%" height="15" fill="rgb(223,121,0)" fg:x="195" fg:w="2"/><text x="15.6894%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.5186%" y="421" width="0.0792%" height="15" fill="rgb(234,173,33)" fg:x="196" fg:w="1"/><text x="15.7686%" y="431.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="15.5978%" y="597" width="0.0792%" height="15" fill="rgb(245,47,8)" fg:x="197" fg:w="1"/><text x="15.8478%" y="607.50"></text></g><g><title>serde_json::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for serde_json::value::Value&gt;::from (1 samples, 0.08%)</title><rect x="15.5978%" y="581" width="0.0792%" height="15" fill="rgb(205,17,20)" fg:x="197" fg:w="1"/><text x="15.8478%" y="591.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="15.5978%" y="629" width="0.1584%" height="15" fill="rgb(232,151,16)" fg:x="197" fg:w="2"/><text x="15.8478%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="15.5978%" y="613" width="0.1584%" height="15" fill="rgb(208,30,32)" fg:x="197" fg:w="2"/><text x="15.8478%" y="623.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="15.6770%" y="597" width="0.0792%" height="15" fill="rgb(254,26,3)" fg:x="198" fg:w="1"/><text x="15.9270%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="15.6770%" y="581" width="0.0792%" height="15" fill="rgb(240,177,30)" fg:x="198" fg:w="1"/><text x="15.9270%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.6770%" y="565" width="0.0792%" height="15" fill="rgb(248,76,44)" fg:x="198" fg:w="1"/><text x="15.9270%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.6770%" y="549" width="0.0792%" height="15" fill="rgb(241,186,54)" fg:x="198" fg:w="1"/><text x="15.9270%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.6770%" y="533" width="0.0792%" height="15" fill="rgb(249,171,29)" fg:x="198" fg:w="1"/><text x="15.9270%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.6770%" y="517" width="0.0792%" height="15" fill="rgb(237,151,44)" fg:x="198" fg:w="1"/><text x="15.9270%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="15.7561%" y="597" width="0.0792%" height="15" fill="rgb(228,174,30)" fg:x="199" fg:w="1"/><text x="16.0061%" y="607.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="15.7561%" y="581" width="0.0792%" height="15" fill="rgb(252,14,37)" fg:x="199" fg:w="1"/><text x="16.0061%" y="591.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="15.7561%" y="565" width="0.0792%" height="15" fill="rgb(207,111,40)" fg:x="199" fg:w="1"/><text x="16.0061%" y="575.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="15.7561%" y="549" width="0.0792%" height="15" fill="rgb(248,171,54)" fg:x="199" fg:w="1"/><text x="16.0061%" y="559.50"></text></g><g><title>plugins_core::build::Build::new (2 samples, 0.16%)</title><rect x="15.7561%" y="629" width="0.1584%" height="15" fill="rgb(211,127,2)" fg:x="199" fg:w="2"/><text x="16.0061%" y="639.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="15.7561%" y="613" width="0.1584%" height="15" fill="rgb(236,87,47)" fg:x="199" fg:w="2"/><text x="16.0061%" y="623.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="15.8353%" y="597" width="0.0792%" height="15" fill="rgb(223,190,45)" fg:x="200" fg:w="1"/><text x="16.0853%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.8353%" y="581" width="0.0792%" height="15" fill="rgb(215,5,16)" fg:x="200" fg:w="1"/><text x="16.0853%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.8353%" y="565" width="0.0792%" height="15" fill="rgb(252,82,33)" fg:x="200" fg:w="1"/><text x="16.0853%" y="575.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="15.9145%" y="597" width="0.1584%" height="15" fill="rgb(247,213,44)" fg:x="201" fg:w="2"/><text x="16.1645%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="15.9145%" y="581" width="0.1584%" height="15" fill="rgb(205,196,44)" fg:x="201" fg:w="2"/><text x="16.1645%" y="591.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (2 samples, 0.16%)</title><rect x="15.9145%" y="565" width="0.1584%" height="15" fill="rgb(237,96,54)" fg:x="201" fg:w="2"/><text x="16.1645%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.9937%" y="549" width="0.0792%" height="15" fill="rgb(230,113,34)" fg:x="202" fg:w="1"/><text x="16.2437%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.9937%" y="533" width="0.0792%" height="15" fill="rgb(221,224,12)" fg:x="202" fg:w="1"/><text x="16.2437%" y="543.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="16.0728%" y="581" width="0.0792%" height="15" fill="rgb(219,112,44)" fg:x="203" fg:w="1"/><text x="16.3228%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="16.0728%" y="565" width="0.0792%" height="15" fill="rgb(210,31,13)" fg:x="203" fg:w="1"/><text x="16.3228%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="16.0728%" y="549" width="0.0792%" height="15" fill="rgb(230,25,16)" fg:x="203" fg:w="1"/><text x="16.3228%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="16.0728%" y="533" width="0.0792%" height="15" fill="rgb(246,108,53)" fg:x="203" fg:w="1"/><text x="16.3228%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="16.0728%" y="517" width="0.0792%" height="15" fill="rgb(241,172,50)" fg:x="203" fg:w="1"/><text x="16.3228%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.0728%" y="501" width="0.0792%" height="15" fill="rgb(235,141,10)" fg:x="203" fg:w="1"/><text x="16.3228%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="16.0728%" y="485" width="0.0792%" height="15" fill="rgb(220,174,43)" fg:x="203" fg:w="1"/><text x="16.3228%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.0728%" y="469" width="0.0792%" height="15" fill="rgb(215,181,40)" fg:x="203" fg:w="1"/><text x="16.3228%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.0728%" y="453" width="0.0792%" height="15" fill="rgb(230,97,2)" fg:x="203" fg:w="1"/><text x="16.3228%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.0728%" y="437" width="0.0792%" height="15" fill="rgb(211,25,27)" fg:x="203" fg:w="1"/><text x="16.3228%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="16.1520%" y="565" width="0.0792%" height="15" fill="rgb(230,87,26)" fg:x="204" fg:w="1"/><text x="16.4020%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.3104%" y="549" width="0.0792%" height="15" fill="rgb(227,160,17)" fg:x="206" fg:w="1"/><text x="16.5604%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="16.3895%" y="549" width="0.0792%" height="15" fill="rgb(244,85,34)" fg:x="207" fg:w="1"/><text x="16.6395%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.3895%" y="533" width="0.0792%" height="15" fill="rgb(207,70,0)" fg:x="207" fg:w="1"/><text x="16.6395%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.3895%" y="517" width="0.0792%" height="15" fill="rgb(223,129,7)" fg:x="207" fg:w="1"/><text x="16.6395%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.3895%" y="501" width="0.0792%" height="15" fill="rgb(246,105,7)" fg:x="207" fg:w="1"/><text x="16.6395%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.3895%" y="485" width="0.0792%" height="15" fill="rgb(215,154,42)" fg:x="207" fg:w="1"/><text x="16.6395%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (9 samples, 0.71%)</title><rect x="15.9145%" y="613" width="0.7126%" height="15" fill="rgb(220,215,30)" fg:x="201" fg:w="9"/><text x="16.1645%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (7 samples, 0.55%)</title><rect x="16.0728%" y="597" width="0.5542%" height="15" fill="rgb(228,81,51)" fg:x="203" fg:w="7"/><text x="16.3228%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.48%)</title><rect x="16.1520%" y="581" width="0.4751%" height="15" fill="rgb(247,71,54)" fg:x="204" fg:w="6"/><text x="16.4020%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="16.2312%" y="565" width="0.3959%" height="15" fill="rgb(234,176,34)" fg:x="205" fg:w="5"/><text x="16.4812%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="16.4687%" y="549" width="0.1584%" height="15" fill="rgb(241,103,54)" fg:x="208" fg:w="2"/><text x="16.7187%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="16.4687%" y="533" width="0.1584%" height="15" fill="rgb(228,22,34)" fg:x="208" fg:w="2"/><text x="16.7187%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="16.4687%" y="517" width="0.1584%" height="15" fill="rgb(241,179,48)" fg:x="208" fg:w="2"/><text x="16.7187%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="16.4687%" y="501" width="0.1584%" height="15" fill="rgb(235,167,37)" fg:x="208" fg:w="2"/><text x="16.7187%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="16.4687%" y="485" width="0.1584%" height="15" fill="rgb(213,109,30)" fg:x="208" fg:w="2"/><text x="16.7187%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="16.4687%" y="469" width="0.1584%" height="15" fill="rgb(222,172,16)" fg:x="208" fg:w="2"/><text x="16.7187%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="16.4687%" y="453" width="0.1584%" height="15" fill="rgb(233,192,5)" fg:x="208" fg:w="2"/><text x="16.7187%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="16.4687%" y="437" width="0.1584%" height="15" fill="rgb(247,189,41)" fg:x="208" fg:w="2"/><text x="16.7187%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.5479%" y="421" width="0.0792%" height="15" fill="rgb(218,134,47)" fg:x="209" fg:w="1"/><text x="16.7979%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.5479%" y="405" width="0.0792%" height="15" fill="rgb(216,29,3)" fg:x="209" fg:w="1"/><text x="16.7979%" y="415.50"></text></g><g><title>plugins_core::build::Build::save (10 samples, 0.79%)</title><rect x="15.9145%" y="629" width="0.7918%" height="15" fill="rgb(246,140,12)" fg:x="201" fg:w="10"/><text x="16.1645%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="16.6271%" y="613" width="0.0792%" height="15" fill="rgb(230,136,11)" fg:x="210" fg:w="1"/><text x="16.8771%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="16.6271%" y="597" width="0.0792%" height="15" fill="rgb(247,22,47)" fg:x="210" fg:w="1"/><text x="16.8771%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="16.6271%" y="581" width="0.0792%" height="15" fill="rgb(218,84,22)" fg:x="210" fg:w="1"/><text x="16.8771%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.6271%" y="565" width="0.0792%" height="15" fill="rgb(216,87,39)" fg:x="210" fg:w="1"/><text x="16.8771%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.6271%" y="549" width="0.0792%" height="15" fill="rgb(221,178,8)" fg:x="210" fg:w="1"/><text x="16.8771%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.6271%" y="533" width="0.0792%" height="15" fill="rgb(230,42,11)" fg:x="210" fg:w="1"/><text x="16.8771%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.6271%" y="517" width="0.0792%" height="15" fill="rgb(237,229,4)" fg:x="210" fg:w="1"/><text x="16.8771%" y="527.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (1 samples, 0.08%)</title><rect x="16.7063%" y="629" width="0.0792%" height="15" fill="rgb(222,31,33)" fg:x="211" fg:w="1"/><text x="16.9563%" y="639.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="16.7063%" y="613" width="0.0792%" height="15" fill="rgb(210,17,39)" fg:x="211" fg:w="1"/><text x="16.9563%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="16.7063%" y="597" width="0.0792%" height="15" fill="rgb(244,93,20)" fg:x="211" fg:w="1"/><text x="16.9563%" y="607.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="16.7063%" y="581" width="0.0792%" height="15" fill="rgb(210,40,47)" fg:x="211" fg:w="1"/><text x="16.9563%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.7063%" y="565" width="0.0792%" height="15" fill="rgb(239,211,47)" fg:x="211" fg:w="1"/><text x="16.9563%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.7063%" y="549" width="0.0792%" height="15" fill="rgb(251,223,49)" fg:x="211" fg:w="1"/><text x="16.9563%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.7063%" y="533" width="0.0792%" height="15" fill="rgb(221,149,5)" fg:x="211" fg:w="1"/><text x="16.9563%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.7063%" y="517" width="0.0792%" height="15" fill="rgb(219,224,51)" fg:x="211" fg:w="1"/><text x="16.9563%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.8646%" y="549" width="0.0792%" height="15" fill="rgb(223,7,8)" fg:x="213" fg:w="1"/><text x="17.1146%" y="559.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (3 samples, 0.24%)</title><rect x="16.7854%" y="629" width="0.2375%" height="15" fill="rgb(241,217,22)" fg:x="212" fg:w="3"/><text x="17.0354%" y="639.50"></text></g><g><title>plugins_core::tools::set_occupying (3 samples, 0.24%)</title><rect x="16.7854%" y="613" width="0.2375%" height="15" fill="rgb(248,209,0)" fg:x="212" fg:w="3"/><text x="17.0354%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="16.8646%" y="597" width="0.1584%" height="15" fill="rgb(217,205,4)" fg:x="213" fg:w="2"/><text x="17.1146%" y="607.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (2 samples, 0.16%)</title><rect x="16.8646%" y="581" width="0.1584%" height="15" fill="rgb(228,124,39)" fg:x="213" fg:w="2"/><text x="17.1146%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="16.8646%" y="565" width="0.1584%" height="15" fill="rgb(250,116,42)" fg:x="213" fg:w="2"/><text x="17.1146%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="16.9438%" y="549" width="0.0792%" height="15" fill="rgb(223,202,9)" fg:x="214" fg:w="1"/><text x="17.1938%" y="559.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="16.9438%" y="533" width="0.0792%" height="15" fill="rgb(242,222,40)" fg:x="214" fg:w="1"/><text x="17.1938%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.9438%" y="517" width="0.0792%" height="15" fill="rgb(229,99,46)" fg:x="214" fg:w="1"/><text x="17.1938%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.1021%" y="597" width="0.0792%" height="15" fill="rgb(225,56,46)" fg:x="216" fg:w="1"/><text x="17.3521%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.1021%" y="581" width="0.0792%" height="15" fill="rgb(227,94,5)" fg:x="216" fg:w="1"/><text x="17.3521%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.1021%" y="565" width="0.0792%" height="15" fill="rgb(205,112,38)" fg:x="216" fg:w="1"/><text x="17.3521%" y="575.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="17.1021%" y="613" width="0.1584%" height="15" fill="rgb(231,133,46)" fg:x="216" fg:w="2"/><text x="17.3521%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.1813%" y="597" width="0.0792%" height="15" fill="rgb(217,16,9)" fg:x="217" fg:w="1"/><text x="17.4313%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.1813%" y="581" width="0.0792%" height="15" fill="rgb(249,173,9)" fg:x="217" fg:w="1"/><text x="17.4313%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (2 samples, 0.16%)</title><rect x="17.2605%" y="613" width="0.1584%" height="15" fill="rgb(205,163,53)" fg:x="218" fg:w="2"/><text x="17.5105%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (2 samples, 0.16%)</title><rect x="17.2605%" y="597" width="0.1584%" height="15" fill="rgb(217,54,41)" fg:x="218" fg:w="2"/><text x="17.5105%" y="607.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="17.2605%" y="581" width="0.1584%" height="15" fill="rgb(228,216,12)" fg:x="218" fg:w="2"/><text x="17.5105%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.4188%" y="501" width="0.0792%" height="15" fill="rgb(244,228,15)" fg:x="220" fg:w="1"/><text x="17.6688%" y="511.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (7 samples, 0.55%)</title><rect x="17.0230%" y="629" width="0.5542%" height="15" fill="rgb(221,176,53)" fg:x="215" fg:w="7"/><text x="17.2730%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="17.4188%" y="613" width="0.1584%" height="15" fill="rgb(205,94,34)" fg:x="220" fg:w="2"/><text x="17.6688%" y="623.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (2 samples, 0.16%)</title><rect x="17.4188%" y="597" width="0.1584%" height="15" fill="rgb(213,110,48)" fg:x="220" fg:w="2"/><text x="17.6688%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="17.4188%" y="581" width="0.1584%" height="15" fill="rgb(236,142,28)" fg:x="220" fg:w="2"/><text x="17.6688%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="17.4188%" y="565" width="0.1584%" height="15" fill="rgb(225,135,29)" fg:x="220" fg:w="2"/><text x="17.6688%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_variant (2 samples, 0.16%)</title><rect x="17.4188%" y="549" width="0.1584%" height="15" fill="rgb(252,45,31)" fg:x="220" fg:w="2"/><text x="17.6688%" y="559.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::SimpleRoute&gt;::serialize (2 samples, 0.16%)</title><rect x="17.4188%" y="533" width="0.1584%" height="15" fill="rgb(211,187,50)" fg:x="220" fg:w="2"/><text x="17.6688%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="17.4188%" y="517" width="0.1584%" height="15" fill="rgb(229,109,7)" fg:x="220" fg:w="2"/><text x="17.6688%" y="527.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="17.4980%" y="501" width="0.0792%" height="15" fill="rgb(251,131,51)" fg:x="221" fg:w="1"/><text x="17.7480%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.4980%" y="485" width="0.0792%" height="15" fill="rgb(251,180,35)" fg:x="221" fg:w="1"/><text x="17.7480%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.4980%" y="469" width="0.0792%" height="15" fill="rgb(211,46,32)" fg:x="221" fg:w="1"/><text x="17.7480%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.5772%" y="533" width="0.0792%" height="15" fill="rgb(248,123,17)" fg:x="222" fg:w="1"/><text x="17.8272%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.5772%" y="517" width="0.0792%" height="15" fill="rgb(227,141,18)" fg:x="222" fg:w="1"/><text x="17.8272%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.5772%" y="501" width="0.0792%" height="15" fill="rgb(216,102,9)" fg:x="222" fg:w="1"/><text x="17.8272%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="17.6564%" y="501" width="0.0792%" height="15" fill="rgb(253,47,13)" fg:x="223" fg:w="1"/><text x="17.9064%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="17.6564%" y="485" width="0.0792%" height="15" fill="rgb(226,93,23)" fg:x="223" fg:w="1"/><text x="17.9064%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="17.5772%" y="581" width="0.2375%" height="15" fill="rgb(247,104,17)" fg:x="222" fg:w="3"/><text x="17.8272%" y="591.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="17.5772%" y="565" width="0.2375%" height="15" fill="rgb(233,203,26)" fg:x="222" fg:w="3"/><text x="17.8272%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="17.5772%" y="549" width="0.2375%" height="15" fill="rgb(244,98,49)" fg:x="222" fg:w="3"/><text x="17.8272%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="17.6564%" y="533" width="0.1584%" height="15" fill="rgb(235,134,22)" fg:x="223" fg:w="2"/><text x="17.9064%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="17.6564%" y="517" width="0.1584%" height="15" fill="rgb(221,70,32)" fg:x="223" fg:w="2"/><text x="17.9064%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="17.7356%" y="501" width="0.0792%" height="15" fill="rgb(238,15,50)" fg:x="224" fg:w="1"/><text x="17.9856%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.7356%" y="485" width="0.0792%" height="15" fill="rgb(215,221,48)" fg:x="224" fg:w="1"/><text x="17.9856%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.7356%" y="469" width="0.0792%" height="15" fill="rgb(236,73,3)" fg:x="224" fg:w="1"/><text x="17.9856%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.8147%" y="533" width="0.0792%" height="15" fill="rgb(250,107,11)" fg:x="225" fg:w="1"/><text x="18.0647%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.8147%" y="517" width="0.0792%" height="15" fill="rgb(242,39,14)" fg:x="225" fg:w="1"/><text x="18.0647%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.8147%" y="501" width="0.0792%" height="15" fill="rgb(248,164,37)" fg:x="225" fg:w="1"/><text x="18.0647%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.8147%" y="485" width="0.0792%" height="15" fill="rgb(217,60,12)" fg:x="225" fg:w="1"/><text x="18.0647%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.8147%" y="469" width="0.0792%" height="15" fill="rgb(240,125,29)" fg:x="225" fg:w="1"/><text x="18.0647%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="17.8147%" y="453" width="0.0792%" height="15" fill="rgb(208,207,28)" fg:x="225" fg:w="1"/><text x="18.0647%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="17.8147%" y="437" width="0.0792%" height="15" fill="rgb(209,159,27)" fg:x="225" fg:w="1"/><text x="18.0647%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="17.8147%" y="421" width="0.0792%" height="15" fill="rgb(251,176,53)" fg:x="225" fg:w="1"/><text x="18.0647%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.8147%" y="405" width="0.0792%" height="15" fill="rgb(211,85,7)" fg:x="225" fg:w="1"/><text x="18.0647%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.8147%" y="389" width="0.0792%" height="15" fill="rgb(216,64,54)" fg:x="225" fg:w="1"/><text x="18.0647%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="17.8147%" y="373" width="0.0792%" height="15" fill="rgb(217,54,24)" fg:x="225" fg:w="1"/><text x="18.0647%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="17.8147%" y="357" width="0.0792%" height="15" fill="rgb(208,206,53)" fg:x="225" fg:w="1"/><text x="18.0647%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="17.8147%" y="341" width="0.0792%" height="15" fill="rgb(251,74,39)" fg:x="225" fg:w="1"/><text x="18.0647%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="17.8147%" y="325" width="0.0792%" height="15" fill="rgb(226,47,5)" fg:x="225" fg:w="1"/><text x="18.0647%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.8147%" y="309" width="0.0792%" height="15" fill="rgb(234,111,33)" fg:x="225" fg:w="1"/><text x="18.0647%" y="319.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (5 samples, 0.40%)</title><rect x="17.5772%" y="613" width="0.3959%" height="15" fill="rgb(251,14,10)" fg:x="222" fg:w="5"/><text x="17.8272%" y="623.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (5 samples, 0.40%)</title><rect x="17.5772%" y="597" width="0.3959%" height="15" fill="rgb(232,43,0)" fg:x="222" fg:w="5"/><text x="17.8272%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="17.8147%" y="581" width="0.1584%" height="15" fill="rgb(222,68,43)" fg:x="225" fg:w="2"/><text x="18.0647%" y="591.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="17.8147%" y="565" width="0.1584%" height="15" fill="rgb(217,24,23)" fg:x="225" fg:w="2"/><text x="18.0647%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="17.8147%" y="549" width="0.1584%" height="15" fill="rgb(229,209,14)" fg:x="225" fg:w="2"/><text x="18.0647%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="17.8939%" y="533" width="0.0792%" height="15" fill="rgb(250,149,48)" fg:x="226" fg:w="1"/><text x="18.1439%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.8939%" y="517" width="0.0792%" height="15" fill="rgb(210,120,37)" fg:x="226" fg:w="1"/><text x="18.1439%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="17.8939%" y="501" width="0.0792%" height="15" fill="rgb(210,21,8)" fg:x="226" fg:w="1"/><text x="18.1439%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.8939%" y="485" width="0.0792%" height="15" fill="rgb(243,145,7)" fg:x="226" fg:w="1"/><text x="18.1439%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="17.8939%" y="469" width="0.0792%" height="15" fill="rgb(238,178,32)" fg:x="226" fg:w="1"/><text x="18.1439%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.8939%" y="453" width="0.0792%" height="15" fill="rgb(222,4,10)" fg:x="226" fg:w="1"/><text x="18.1439%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.9731%" y="517" width="0.0792%" height="15" fill="rgb(239,7,37)" fg:x="227" fg:w="1"/><text x="18.2231%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.9731%" y="501" width="0.0792%" height="15" fill="rgb(215,31,37)" fg:x="227" fg:w="1"/><text x="18.2231%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.9731%" y="485" width="0.0792%" height="15" fill="rgb(224,83,33)" fg:x="227" fg:w="1"/><text x="18.2231%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.9731%" y="469" width="0.0792%" height="15" fill="rgb(239,55,3)" fg:x="227" fg:w="1"/><text x="18.2231%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.9731%" y="453" width="0.0792%" height="15" fill="rgb(247,92,11)" fg:x="227" fg:w="1"/><text x="18.2231%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="17.9731%" y="437" width="0.0792%" height="15" fill="rgb(239,200,7)" fg:x="227" fg:w="1"/><text x="18.2231%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="17.9731%" y="421" width="0.0792%" height="15" fill="rgb(227,115,8)" fg:x="227" fg:w="1"/><text x="18.2231%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="17.9731%" y="405" width="0.0792%" height="15" fill="rgb(215,189,27)" fg:x="227" fg:w="1"/><text x="18.2231%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.9731%" y="389" width="0.0792%" height="15" fill="rgb(251,216,39)" fg:x="227" fg:w="1"/><text x="18.2231%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.9731%" y="373" width="0.0792%" height="15" fill="rgb(207,29,47)" fg:x="227" fg:w="1"/><text x="18.2231%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="17.9731%" y="357" width="0.0792%" height="15" fill="rgb(210,71,34)" fg:x="227" fg:w="1"/><text x="18.2231%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="17.9731%" y="341" width="0.0792%" height="15" fill="rgb(253,217,51)" fg:x="227" fg:w="1"/><text x="18.2231%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="17.9731%" y="325" width="0.0792%" height="15" fill="rgb(222,117,46)" fg:x="227" fg:w="1"/><text x="18.2231%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="17.9731%" y="309" width="0.0792%" height="15" fill="rgb(226,132,6)" fg:x="227" fg:w="1"/><text x="18.2231%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.9731%" y="293" width="0.0792%" height="15" fill="rgb(254,145,51)" fg:x="227" fg:w="1"/><text x="18.2231%" y="303.50"></text></g><g><title>plugins_core::tools::set_container (7 samples, 0.55%)</title><rect x="17.5772%" y="629" width="0.5542%" height="15" fill="rgb(231,199,27)" fg:x="222" fg:w="7"/><text x="17.8272%" y="639.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="17.9731%" y="613" width="0.1584%" height="15" fill="rgb(245,158,14)" fg:x="227" fg:w="2"/><text x="18.2231%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="17.9731%" y="597" width="0.1584%" height="15" fill="rgb(240,113,14)" fg:x="227" fg:w="2"/><text x="18.2231%" y="607.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="17.9731%" y="581" width="0.1584%" height="15" fill="rgb(210,20,13)" fg:x="227" fg:w="2"/><text x="18.2231%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="17.9731%" y="565" width="0.1584%" height="15" fill="rgb(241,144,13)" fg:x="227" fg:w="2"/><text x="18.2231%" y="575.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="17.9731%" y="549" width="0.1584%" height="15" fill="rgb(235,43,34)" fg:x="227" fg:w="2"/><text x="18.2231%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="17.9731%" y="533" width="0.1584%" height="15" fill="rgb(208,36,20)" fg:x="227" fg:w="2"/><text x="18.2231%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="18.0523%" y="517" width="0.0792%" height="15" fill="rgb(239,204,10)" fg:x="228" fg:w="1"/><text x="18.3023%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.0523%" y="501" width="0.0792%" height="15" fill="rgb(217,84,43)" fg:x="228" fg:w="1"/><text x="18.3023%" y="511.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (86 samples, 6.81%)</title><rect x="11.4014%" y="645" width="6.8092%" height="15" fill="rgb(241,170,50)" fg:x="144" fg:w="86"/><text x="11.6514%" y="655.50">plugins_c..</text></g><g><title>plugins_core::tools::set_wearing (1 samples, 0.08%)</title><rect x="18.1314%" y="629" width="0.0792%" height="15" fill="rgb(226,205,29)" fg:x="229" fg:w="1"/><text x="18.3814%" y="639.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="18.1314%" y="613" width="0.0792%" height="15" fill="rgb(233,113,1)" fg:x="229" fg:w="1"/><text x="18.3814%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="18.1314%" y="597" width="0.0792%" height="15" fill="rgb(253,98,13)" fg:x="229" fg:w="1"/><text x="18.3814%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="18.1314%" y="581" width="0.0792%" height="15" fill="rgb(211,115,12)" fg:x="229" fg:w="1"/><text x="18.3814%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="18.1314%" y="565" width="0.0792%" height="15" fill="rgb(208,12,16)" fg:x="229" fg:w="1"/><text x="18.3814%" y="575.50"></text></g><g><title>plugins_core::build::BuildSurroundings::hands (2 samples, 0.16%)</title><rect x="18.2106%" y="645" width="0.1584%" height="15" fill="rgb(237,193,54)" fg:x="230" fg:w="2"/><text x="18.4606%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.2898%" y="629" width="0.0792%" height="15" fill="rgb(243,22,42)" fg:x="231" fg:w="1"/><text x="18.5398%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="18.3690%" y="613" width="0.0792%" height="15" fill="rgb(233,151,36)" fg:x="232" fg:w="1"/><text x="18.6190%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="18.3690%" y="597" width="0.0792%" height="15" fill="rgb(237,57,45)" fg:x="232" fg:w="1"/><text x="18.6190%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="18.3690%" y="581" width="0.0792%" height="15" fill="rgb(221,88,17)" fg:x="232" fg:w="1"/><text x="18.6190%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="18.3690%" y="565" width="0.0792%" height="15" fill="rgb(230,79,15)" fg:x="232" fg:w="1"/><text x="18.6190%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.3690%" y="549" width="0.0792%" height="15" fill="rgb(213,57,13)" fg:x="232" fg:w="1"/><text x="18.6190%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="18.3690%" y="533" width="0.0792%" height="15" fill="rgb(222,116,39)" fg:x="232" fg:w="1"/><text x="18.6190%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.4481%" y="597" width="0.0792%" height="15" fill="rgb(245,107,2)" fg:x="233" fg:w="1"/><text x="18.6981%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="18.5273%" y="581" width="0.0792%" height="15" fill="rgb(238,1,10)" fg:x="234" fg:w="1"/><text x="18.7773%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="18.5273%" y="565" width="0.0792%" height="15" fill="rgb(249,4,48)" fg:x="234" fg:w="1"/><text x="18.7773%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="18.5273%" y="549" width="0.0792%" height="15" fill="rgb(223,151,18)" fg:x="234" fg:w="1"/><text x="18.7773%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.5273%" y="533" width="0.0792%" height="15" fill="rgb(227,65,43)" fg:x="234" fg:w="1"/><text x="18.7773%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.5273%" y="517" width="0.0792%" height="15" fill="rgb(218,40,45)" fg:x="234" fg:w="1"/><text x="18.7773%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.5273%" y="501" width="0.0792%" height="15" fill="rgb(252,121,31)" fg:x="234" fg:w="1"/><text x="18.7773%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.5273%" y="485" width="0.0792%" height="15" fill="rgb(219,158,43)" fg:x="234" fg:w="1"/><text x="18.7773%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="18.5273%" y="469" width="0.0792%" height="15" fill="rgb(231,162,42)" fg:x="234" fg:w="1"/><text x="18.7773%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="18.5273%" y="453" width="0.0792%" height="15" fill="rgb(217,179,25)" fg:x="234" fg:w="1"/><text x="18.7773%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="18.5273%" y="437" width="0.0792%" height="15" fill="rgb(206,212,31)" fg:x="234" fg:w="1"/><text x="18.7773%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.5273%" y="421" width="0.0792%" height="15" fill="rgb(235,144,12)" fg:x="234" fg:w="1"/><text x="18.7773%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.5273%" y="405" width="0.0792%" height="15" fill="rgb(213,51,10)" fg:x="234" fg:w="1"/><text x="18.7773%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="18.5273%" y="389" width="0.0792%" height="15" fill="rgb(231,145,14)" fg:x="234" fg:w="1"/><text x="18.7773%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="18.5273%" y="373" width="0.0792%" height="15" fill="rgb(235,15,28)" fg:x="234" fg:w="1"/><text x="18.7773%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="18.5273%" y="357" width="0.0792%" height="15" fill="rgb(237,206,10)" fg:x="234" fg:w="1"/><text x="18.7773%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="18.5273%" y="341" width="0.0792%" height="15" fill="rgb(236,227,27)" fg:x="234" fg:w="1"/><text x="18.7773%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.5273%" y="325" width="0.0792%" height="15" fill="rgb(246,83,35)" fg:x="234" fg:w="1"/><text x="18.7773%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="18.6065%" y="517" width="0.0792%" height="15" fill="rgb(220,136,24)" fg:x="235" fg:w="1"/><text x="18.8565%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="18.6065%" y="501" width="0.0792%" height="15" fill="rgb(217,3,25)" fg:x="235" fg:w="1"/><text x="18.8565%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="18.6065%" y="485" width="0.0792%" height="15" fill="rgb(239,24,14)" fg:x="235" fg:w="1"/><text x="18.8565%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="18.6065%" y="469" width="0.0792%" height="15" fill="rgb(244,16,53)" fg:x="235" fg:w="1"/><text x="18.8565%" y="479.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="18.6065%" y="565" width="0.1584%" height="15" fill="rgb(208,175,44)" fg:x="235" fg:w="2"/><text x="18.8565%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="18.6065%" y="549" width="0.1584%" height="15" fill="rgb(252,18,48)" fg:x="235" fg:w="2"/><text x="18.8565%" y="559.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="18.6065%" y="533" width="0.1584%" height="15" fill="rgb(234,199,32)" fg:x="235" fg:w="2"/><text x="18.8565%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="18.6857%" y="517" width="0.0792%" height="15" fill="rgb(225,77,54)" fg:x="236" fg:w="1"/><text x="18.9357%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.6857%" y="501" width="0.0792%" height="15" fill="rgb(225,42,25)" fg:x="236" fg:w="1"/><text x="18.9357%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="18.6857%" y="485" width="0.0792%" height="15" fill="rgb(242,227,46)" fg:x="236" fg:w="1"/><text x="18.9357%" y="495.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="18.7648%" y="565" width="0.0792%" height="15" fill="rgb(246,197,35)" fg:x="237" fg:w="1"/><text x="19.0148%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.7648%" y="549" width="0.0792%" height="15" fill="rgb(215,159,26)" fg:x="237" fg:w="1"/><text x="19.0148%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.7648%" y="533" width="0.0792%" height="15" fill="rgb(212,194,50)" fg:x="237" fg:w="1"/><text x="19.0148%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="18.7648%" y="517" width="0.0792%" height="15" fill="rgb(246,132,1)" fg:x="237" fg:w="1"/><text x="19.0148%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="18.7648%" y="501" width="0.0792%" height="15" fill="rgb(217,71,7)" fg:x="237" fg:w="1"/><text x="19.0148%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="18.7648%" y="485" width="0.0792%" height="15" fill="rgb(252,59,32)" fg:x="237" fg:w="1"/><text x="19.0148%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="18.7648%" y="469" width="0.0792%" height="15" fill="rgb(253,204,25)" fg:x="237" fg:w="1"/><text x="19.0148%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="18.7648%" y="453" width="0.0792%" height="15" fill="rgb(232,21,16)" fg:x="237" fg:w="1"/><text x="19.0148%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="18.5273%" y="597" width="0.3959%" height="15" fill="rgb(248,90,29)" fg:x="234" fg:w="5"/><text x="18.7773%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="18.6065%" y="581" width="0.3167%" height="15" fill="rgb(249,223,7)" fg:x="235" fg:w="4"/><text x="18.8565%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="18.8440%" y="565" width="0.0792%" height="15" fill="rgb(231,119,42)" fg:x="238" fg:w="1"/><text x="19.0940%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.8440%" y="549" width="0.0792%" height="15" fill="rgb(215,41,35)" fg:x="238" fg:w="1"/><text x="19.0940%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.8440%" y="533" width="0.0792%" height="15" fill="rgb(220,44,45)" fg:x="238" fg:w="1"/><text x="19.0940%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.8440%" y="517" width="0.0792%" height="15" fill="rgb(253,197,36)" fg:x="238" fg:w="1"/><text x="19.0940%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.9232%" y="597" width="0.0792%" height="15" fill="rgb(245,225,54)" fg:x="239" fg:w="1"/><text x="19.1732%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.9232%" y="581" width="0.0792%" height="15" fill="rgb(239,94,37)" fg:x="239" fg:w="1"/><text x="19.1732%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.9232%" y="565" width="0.0792%" height="15" fill="rgb(242,217,10)" fg:x="239" fg:w="1"/><text x="19.1732%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.0024%" y="549" width="0.0792%" height="15" fill="rgb(250,193,7)" fg:x="240" fg:w="1"/><text x="19.2524%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.0024%" y="533" width="0.0792%" height="15" fill="rgb(230,104,19)" fg:x="240" fg:w="1"/><text x="19.2524%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.0024%" y="517" width="0.0792%" height="15" fill="rgb(230,181,4)" fg:x="240" fg:w="1"/><text x="19.2524%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="19.0816%" y="517" width="0.0792%" height="15" fill="rgb(216,219,49)" fg:x="241" fg:w="1"/><text x="19.3316%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.0816%" y="501" width="0.0792%" height="15" fill="rgb(254,144,0)" fg:x="241" fg:w="1"/><text x="19.3316%" y="511.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (11 samples, 0.87%)</title><rect x="18.3690%" y="645" width="0.8709%" height="15" fill="rgb(205,209,38)" fg:x="232" fg:w="11"/><text x="18.6190%" y="655.50"></text></g><g><title>plugins_core::build::QuickThing::make (11 samples, 0.87%)</title><rect x="18.3690%" y="629" width="0.8709%" height="15" fill="rgb(240,21,42)" fg:x="232" fg:w="11"/><text x="18.6190%" y="639.50"></text></g><g><title>plugins_core::build::Build::save (10 samples, 0.79%)</title><rect x="18.4481%" y="613" width="0.7918%" height="15" fill="rgb(241,132,3)" fg:x="233" fg:w="10"/><text x="18.6981%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="19.0024%" y="597" width="0.2375%" height="15" fill="rgb(225,14,2)" fg:x="240" fg:w="3"/><text x="19.2524%" y="607.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="19.0024%" y="581" width="0.2375%" height="15" fill="rgb(210,141,35)" fg:x="240" fg:w="3"/><text x="19.2524%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="19.0024%" y="565" width="0.2375%" height="15" fill="rgb(251,14,44)" fg:x="240" fg:w="3"/><text x="19.2524%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="19.0816%" y="549" width="0.1584%" height="15" fill="rgb(247,48,18)" fg:x="241" fg:w="2"/><text x="19.3316%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="19.0816%" y="533" width="0.1584%" height="15" fill="rgb(225,0,40)" fg:x="241" fg:w="2"/><text x="19.3316%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="19.1607%" y="517" width="0.0792%" height="15" fill="rgb(221,31,33)" fg:x="242" fg:w="1"/><text x="19.4107%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.1607%" y="501" width="0.0792%" height="15" fill="rgb(237,42,40)" fg:x="242" fg:w="1"/><text x="19.4107%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="19.1607%" y="485" width="0.0792%" height="15" fill="rgb(233,51,29)" fg:x="242" fg:w="1"/><text x="19.4107%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.1607%" y="469" width="0.0792%" height="15" fill="rgb(226,58,20)" fg:x="242" fg:w="1"/><text x="19.4107%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="19.1607%" y="453" width="0.0792%" height="15" fill="rgb(208,98,7)" fg:x="242" fg:w="1"/><text x="19.4107%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.1607%" y="437" width="0.0792%" height="15" fill="rgb(228,143,44)" fg:x="242" fg:w="1"/><text x="19.4107%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="19.3191%" y="629" width="0.0792%" height="15" fill="rgb(246,55,38)" fg:x="244" fg:w="1"/><text x="19.5691%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="19.3191%" y="613" width="0.0792%" height="15" fill="rgb(247,87,16)" fg:x="244" fg:w="1"/><text x="19.5691%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="19.3191%" y="597" width="0.0792%" height="15" fill="rgb(234,129,42)" fg:x="244" fg:w="1"/><text x="19.5691%" y="607.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="19.3983%" y="613" width="0.0792%" height="15" fill="rgb(220,82,16)" fg:x="245" fg:w="1"/><text x="19.6483%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.3983%" y="597" width="0.0792%" height="15" fill="rgb(211,88,4)" fg:x="245" fg:w="1"/><text x="19.6483%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.3983%" y="581" width="0.0792%" height="15" fill="rgb(248,151,21)" fg:x="245" fg:w="1"/><text x="19.6483%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="19.3983%" y="565" width="0.0792%" height="15" fill="rgb(238,163,6)" fg:x="245" fg:w="1"/><text x="19.6483%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.3983%" y="549" width="0.0792%" height="15" fill="rgb(209,183,11)" fg:x="245" fg:w="1"/><text x="19.6483%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="19.4774%" y="613" width="0.0792%" height="15" fill="rgb(219,37,20)" fg:x="246" fg:w="1"/><text x="19.7274%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="19.4774%" y="597" width="0.0792%" height="15" fill="rgb(210,158,4)" fg:x="246" fg:w="1"/><text x="19.7274%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="19.4774%" y="581" width="0.0792%" height="15" fill="rgb(221,167,53)" fg:x="246" fg:w="1"/><text x="19.7274%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.4774%" y="565" width="0.0792%" height="15" fill="rgb(237,151,45)" fg:x="246" fg:w="1"/><text x="19.7274%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="19.4774%" y="549" width="0.0792%" height="15" fill="rgb(231,39,3)" fg:x="246" fg:w="1"/><text x="19.7274%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.4774%" y="533" width="0.0792%" height="15" fill="rgb(212,167,28)" fg:x="246" fg:w="1"/><text x="19.7274%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="19.6358%" y="597" width="0.0792%" height="15" fill="rgb(232,178,8)" fg:x="248" fg:w="1"/><text x="19.8858%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.6358%" y="581" width="0.0792%" height="15" fill="rgb(225,151,20)" fg:x="248" fg:w="1"/><text x="19.8858%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (5 samples, 0.40%)</title><rect x="19.3983%" y="629" width="0.3959%" height="15" fill="rgb(238,3,37)" fg:x="245" fg:w="5"/><text x="19.6483%" y="639.50"></text></g><g><title>kernel::model::props::save_props (3 samples, 0.24%)</title><rect x="19.5566%" y="613" width="0.2375%" height="15" fill="rgb(251,147,42)" fg:x="247" fg:w="3"/><text x="19.8066%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="19.7150%" y="597" width="0.0792%" height="15" fill="rgb(208,173,10)" fg:x="249" fg:w="1"/><text x="19.9650%" y="607.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="19.7941%" y="613" width="0.0792%" height="15" fill="rgb(246,225,4)" fg:x="250" fg:w="1"/><text x="20.0441%" y="623.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="19.7941%" y="597" width="0.0792%" height="15" fill="rgb(248,102,6)" fg:x="250" fg:w="1"/><text x="20.0441%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="19.7941%" y="581" width="0.0792%" height="15" fill="rgb(232,6,21)" fg:x="250" fg:w="1"/><text x="20.0441%" y="591.50"></text></g><g><title>plugins_core::build::Build::new_world (2 samples, 0.16%)</title><rect x="19.7941%" y="629" width="0.1584%" height="15" fill="rgb(221,179,22)" fg:x="250" fg:w="2"/><text x="20.0441%" y="639.50"></text></g><g><title>kernel::model::builder::EntityBuilder::with_key (1 samples, 0.08%)</title><rect x="19.8733%" y="613" width="0.0792%" height="15" fill="rgb(252,50,20)" fg:x="251" fg:w="1"/><text x="20.1233%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.9525%" y="613" width="0.0792%" height="15" fill="rgb(222,56,38)" fg:x="252" fg:w="1"/><text x="20.2025%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="20.0317%" y="597" width="0.0792%" height="15" fill="rgb(206,193,29)" fg:x="253" fg:w="1"/><text x="20.2817%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="20.0317%" y="581" width="0.0792%" height="15" fill="rgb(239,192,45)" fg:x="253" fg:w="1"/><text x="20.2817%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="20.0317%" y="565" width="0.0792%" height="15" fill="rgb(254,18,36)" fg:x="253" fg:w="1"/><text x="20.2817%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="20.0317%" y="549" width="0.0792%" height="15" fill="rgb(221,127,11)" fg:x="253" fg:w="1"/><text x="20.2817%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.0317%" y="533" width="0.0792%" height="15" fill="rgb(234,146,35)" fg:x="253" fg:w="1"/><text x="20.2817%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="20.0317%" y="517" width="0.0792%" height="15" fill="rgb(254,201,37)" fg:x="253" fg:w="1"/><text x="20.2817%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.0317%" y="501" width="0.0792%" height="15" fill="rgb(211,202,23)" fg:x="253" fg:w="1"/><text x="20.2817%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="20.0317%" y="485" width="0.0792%" height="15" fill="rgb(237,91,2)" fg:x="253" fg:w="1"/><text x="20.2817%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.0317%" y="469" width="0.0792%" height="15" fill="rgb(226,228,36)" fg:x="253" fg:w="1"/><text x="20.2817%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="20.0317%" y="453" width="0.0792%" height="15" fill="rgb(213,63,50)" fg:x="253" fg:w="1"/><text x="20.2817%" y="463.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="20.1108%" y="581" width="0.0792%" height="15" fill="rgb(235,194,19)" fg:x="254" fg:w="1"/><text x="20.3608%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="20.1108%" y="565" width="0.0792%" height="15" fill="rgb(207,204,18)" fg:x="254" fg:w="1"/><text x="20.3608%" y="575.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="20.1108%" y="549" width="0.0792%" height="15" fill="rgb(248,8,7)" fg:x="254" fg:w="1"/><text x="20.3608%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="20.1108%" y="533" width="0.0792%" height="15" fill="rgb(223,145,47)" fg:x="254" fg:w="1"/><text x="20.3608%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="20.1108%" y="517" width="0.0792%" height="15" fill="rgb(228,84,11)" fg:x="254" fg:w="1"/><text x="20.3608%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="20.0317%" y="613" width="0.2375%" height="15" fill="rgb(218,76,45)" fg:x="253" fg:w="3"/><text x="20.2817%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="20.1108%" y="597" width="0.1584%" height="15" fill="rgb(223,80,15)" fg:x="254" fg:w="2"/><text x="20.3608%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="20.1900%" y="581" width="0.0792%" height="15" fill="rgb(219,218,33)" fg:x="255" fg:w="1"/><text x="20.4400%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="20.1900%" y="565" width="0.0792%" height="15" fill="rgb(208,51,11)" fg:x="255" fg:w="1"/><text x="20.4400%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.1900%" y="549" width="0.0792%" height="15" fill="rgb(229,165,39)" fg:x="255" fg:w="1"/><text x="20.4400%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.1900%" y="533" width="0.0792%" height="15" fill="rgb(241,100,24)" fg:x="255" fg:w="1"/><text x="20.4400%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="20.1900%" y="517" width="0.0792%" height="15" fill="rgb(228,14,23)" fg:x="255" fg:w="1"/><text x="20.4400%" y="527.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (201 samples, 15.91%)</title><rect x="4.4339%" y="661" width="15.9145%" height="15" fill="rgb(247,116,52)" fg:x="56" fg:w="201"/><text x="4.6839%" y="671.50">&lt;tests::HoldingKeyInVess..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (14 samples, 1.11%)</title><rect x="19.2399%" y="645" width="1.1085%" height="15" fill="rgb(216,149,33)" fg:x="243" fg:w="14"/><text x="19.4899%" y="655.50"></text></g><g><title>plugins_core::build::Build::save (5 samples, 0.40%)</title><rect x="19.9525%" y="629" width="0.3959%" height="15" fill="rgb(238,142,29)" fg:x="252" fg:w="5"/><text x="20.2025%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.2692%" y="613" width="0.0792%" height="15" fill="rgb(224,83,40)" fg:x="256" fg:w="1"/><text x="20.5192%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.2692%" y="597" width="0.0792%" height="15" fill="rgb(234,165,11)" fg:x="256" fg:w="1"/><text x="20.5192%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.2692%" y="581" width="0.0792%" height="15" fill="rgb(215,96,23)" fg:x="256" fg:w="1"/><text x="20.5192%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="20.3484%" y="661" width="0.0792%" height="15" fill="rgb(233,179,26)" fg:x="257" fg:w="1"/><text x="20.5984%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="20.3484%" y="645" width="0.0792%" height="15" fill="rgb(225,129,33)" fg:x="257" fg:w="1"/><text x="20.5984%" y="655.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="20.3484%" y="629" width="0.0792%" height="15" fill="rgb(237,49,13)" fg:x="257" fg:w="1"/><text x="20.5984%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="20.3484%" y="613" width="0.0792%" height="15" fill="rgb(211,3,31)" fg:x="257" fg:w="1"/><text x="20.5984%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.3484%" y="597" width="0.0792%" height="15" fill="rgb(216,152,19)" fg:x="257" fg:w="1"/><text x="20.5984%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="20.5067%" y="645" width="0.0792%" height="15" fill="rgb(251,121,35)" fg:x="259" fg:w="1"/><text x="20.7567%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="20.5859%" y="645" width="0.1584%" height="15" fill="rgb(210,217,47)" fg:x="260" fg:w="2"/><text x="20.8359%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="20.5859%" y="629" width="0.1584%" height="15" fill="rgb(244,116,22)" fg:x="260" fg:w="2"/><text x="20.8359%" y="639.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="20.5859%" y="613" width="0.1584%" height="15" fill="rgb(228,17,21)" fg:x="260" fg:w="2"/><text x="20.8359%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="20.5859%" y="597" width="0.1584%" height="15" fill="rgb(240,149,34)" fg:x="260" fg:w="2"/><text x="20.8359%" y="607.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="20.5859%" y="581" width="0.1584%" height="15" fill="rgb(208,125,47)" fg:x="260" fg:w="2"/><text x="20.8359%" y="591.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (2 samples, 0.16%)</title><rect x="20.5859%" y="565" width="0.1584%" height="15" fill="rgb(249,186,39)" fg:x="260" fg:w="2"/><text x="20.8359%" y="575.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="20.6651%" y="549" width="0.0792%" height="15" fill="rgb(240,220,33)" fg:x="261" fg:w="1"/><text x="20.9151%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="20.6651%" y="533" width="0.0792%" height="15" fill="rgb(243,110,23)" fg:x="261" fg:w="1"/><text x="20.9151%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="20.6651%" y="517" width="0.0792%" height="15" fill="rgb(219,163,46)" fg:x="261" fg:w="1"/><text x="20.9151%" y="527.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="20.6651%" y="501" width="0.0792%" height="15" fill="rgb(216,126,30)" fg:x="261" fg:w="1"/><text x="20.9151%" y="511.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="20.9818%" y="565" width="0.1584%" height="15" fill="rgb(208,139,11)" fg:x="265" fg:w="2"/><text x="21.2318%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="20.9818%" y="549" width="0.1584%" height="15" fill="rgb(213,118,36)" fg:x="265" fg:w="2"/><text x="21.2318%" y="559.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="20.9818%" y="533" width="0.1584%" height="15" fill="rgb(226,43,17)" fg:x="265" fg:w="2"/><text x="21.2318%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="20.9818%" y="517" width="0.1584%" height="15" fill="rgb(254,217,4)" fg:x="265" fg:w="2"/><text x="21.2318%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="20.9818%" y="501" width="0.1584%" height="15" fill="rgb(210,134,47)" fg:x="265" fg:w="2"/><text x="21.2318%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="20.9818%" y="485" width="0.1584%" height="15" fill="rgb(237,24,49)" fg:x="265" fg:w="2"/><text x="21.2318%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="20.9818%" y="469" width="0.1584%" height="15" fill="rgb(251,39,46)" fg:x="265" fg:w="2"/><text x="21.2318%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.0610%" y="453" width="0.0792%" height="15" fill="rgb(251,220,3)" fg:x="266" fg:w="1"/><text x="21.3110%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.40%)</title><rect x="21.1401%" y="533" width="0.3959%" height="15" fill="rgb(228,105,12)" fg:x="267" fg:w="5"/><text x="21.3901%" y="543.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.40%)</title><rect x="21.1401%" y="517" width="0.3959%" height="15" fill="rgb(215,196,1)" fg:x="267" fg:w="5"/><text x="21.3901%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.32%)</title><rect x="21.2193%" y="501" width="0.3167%" height="15" fill="rgb(214,33,39)" fg:x="268" fg:w="4"/><text x="21.4693%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="21.2985%" y="485" width="0.2375%" height="15" fill="rgb(220,19,52)" fg:x="269" fg:w="3"/><text x="21.5485%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="21.3777%" y="469" width="0.1584%" height="15" fill="rgb(221,78,38)" fg:x="270" fg:w="2"/><text x="21.6277%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="21.4568%" y="453" width="0.0792%" height="15" fill="rgb(253,30,16)" fg:x="271" fg:w="1"/><text x="21.7068%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="21.4568%" y="437" width="0.0792%" height="15" fill="rgb(242,65,0)" fg:x="271" fg:w="1"/><text x="21.7068%" y="447.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (8 samples, 0.63%)</title><rect x="21.1401%" y="549" width="0.6334%" height="15" fill="rgb(235,201,12)" fg:x="267" fg:w="8"/><text x="21.3901%" y="559.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="21.5360%" y="533" width="0.2375%" height="15" fill="rgb(233,161,9)" fg:x="272" fg:w="3"/><text x="21.7860%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="21.7736%" y="533" width="0.0792%" height="15" fill="rgb(241,207,41)" fg:x="275" fg:w="1"/><text x="22.0236%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="21.8527%" y="533" width="0.1584%" height="15" fill="rgb(212,69,46)" fg:x="276" fg:w="2"/><text x="22.1027%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="22.0903%" y="485" width="0.0792%" height="15" fill="rgb(239,69,45)" fg:x="279" fg:w="1"/><text x="22.3403%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="22.0903%" y="469" width="0.0792%" height="15" fill="rgb(242,117,48)" fg:x="279" fg:w="1"/><text x="22.3403%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="22.0903%" y="453" width="0.0792%" height="15" fill="rgb(228,41,36)" fg:x="279" fg:w="1"/><text x="22.3403%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="22.0903%" y="437" width="0.0792%" height="15" fill="rgb(212,3,32)" fg:x="279" fg:w="1"/><text x="22.3403%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="22.0903%" y="421" width="0.0792%" height="15" fill="rgb(233,41,49)" fg:x="279" fg:w="1"/><text x="22.3403%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="22.0903%" y="501" width="0.1584%" height="15" fill="rgb(252,170,49)" fg:x="279" fg:w="2"/><text x="22.3403%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="22.1694%" y="485" width="0.0792%" height="15" fill="rgb(229,53,26)" fg:x="280" fg:w="1"/><text x="22.4194%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="22.0903%" y="517" width="0.2375%" height="15" fill="rgb(217,157,12)" fg:x="279" fg:w="3"/><text x="22.3403%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="22.2486%" y="501" width="0.0792%" height="15" fill="rgb(227,17,9)" fg:x="281" fg:w="1"/><text x="22.4986%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.40%)</title><rect x="22.3278%" y="517" width="0.3959%" height="15" fill="rgb(218,84,12)" fg:x="282" fg:w="5"/><text x="22.5778%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="22.5653%" y="501" width="0.1584%" height="15" fill="rgb(212,79,24)" fg:x="285" fg:w="2"/><text x="22.8153%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="22.5653%" y="485" width="0.1584%" height="15" fill="rgb(217,222,37)" fg:x="285" fg:w="2"/><text x="22.8153%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="22.6445%" y="469" width="0.0792%" height="15" fill="rgb(246,208,8)" fg:x="286" fg:w="1"/><text x="22.8945%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="22.7237%" y="501" width="0.0792%" height="15" fill="rgb(244,133,10)" fg:x="287" fg:w="1"/><text x="22.9737%" y="511.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="22.8029%" y="501" width="0.0792%" height="15" fill="rgb(209,219,41)" fg:x="288" fg:w="1"/><text x="23.0529%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="22.8820%" y="501" width="0.0792%" height="15" fill="rgb(253,175,45)" fg:x="289" fg:w="1"/><text x="23.1320%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="22.8820%" y="485" width="0.0792%" height="15" fill="rgb(235,100,37)" fg:x="289" fg:w="1"/><text x="23.1320%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="22.8820%" y="469" width="0.0792%" height="15" fill="rgb(225,87,19)" fg:x="289" fg:w="1"/><text x="23.1320%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="22.8820%" y="453" width="0.0792%" height="15" fill="rgb(217,152,17)" fg:x="289" fg:w="1"/><text x="23.1320%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="22.9612%" y="485" width="0.1584%" height="15" fill="rgb(235,72,13)" fg:x="290" fg:w="2"/><text x="23.2112%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="23.0404%" y="469" width="0.0792%" height="15" fill="rgb(233,140,18)" fg:x="291" fg:w="1"/><text x="23.2904%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="22.9612%" y="501" width="0.2375%" height="15" fill="rgb(207,212,28)" fg:x="290" fg:w="3"/><text x="23.2112%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="23.1196%" y="485" width="0.0792%" height="15" fill="rgb(220,130,25)" fg:x="292" fg:w="1"/><text x="23.3696%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.55%)</title><rect x="22.7237%" y="517" width="0.5542%" height="15" fill="rgb(205,55,34)" fg:x="287" fg:w="7"/><text x="22.9737%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="23.1987%" y="501" width="0.0792%" height="15" fill="rgb(237,54,35)" fg:x="293" fg:w="1"/><text x="23.4487%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (17 samples, 1.35%)</title><rect x="22.0111%" y="533" width="1.3460%" height="15" fill="rgb(208,67,23)" fg:x="278" fg:w="17"/><text x="22.2611%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="23.2779%" y="517" width="0.0792%" height="15" fill="rgb(206,207,50)" fg:x="294" fg:w="1"/><text x="23.5279%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="23.2779%" y="501" width="0.0792%" height="15" fill="rgb(213,211,42)" fg:x="294" fg:w="1"/><text x="23.5279%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (30 samples, 2.38%)</title><rect x="21.1401%" y="565" width="2.3753%" height="15" fill="rgb(252,197,50)" fg:x="267" fg:w="30"/><text x="21.3901%" y="575.50">&lt;s..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (22 samples, 1.74%)</title><rect x="21.7736%" y="549" width="1.7419%" height="15" fill="rgb(251,211,41)" fg:x="275" fg:w="22"/><text x="22.0236%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="23.3571%" y="533" width="0.1584%" height="15" fill="rgb(229,211,5)" fg:x="295" fg:w="2"/><text x="23.6071%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="23.4363%" y="517" width="0.0792%" height="15" fill="rgb(239,36,31)" fg:x="296" fg:w="1"/><text x="23.6863%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="23.5154%" y="533" width="0.1584%" height="15" fill="rgb(248,67,31)" fg:x="297" fg:w="2"/><text x="23.7654%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.5946%" y="517" width="0.0792%" height="15" fill="rgb(249,55,44)" fg:x="298" fg:w="1"/><text x="23.8446%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.7530%" y="517" width="0.0792%" height="15" fill="rgb(216,82,12)" fg:x="300" fg:w="1"/><text x="24.0030%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.8321%" y="501" width="0.0792%" height="15" fill="rgb(242,174,1)" fg:x="301" fg:w="1"/><text x="24.0821%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="23.9113%" y="501" width="0.0792%" height="15" fill="rgb(208,120,29)" fg:x="302" fg:w="1"/><text x="24.1613%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.9113%" y="485" width="0.0792%" height="15" fill="rgb(221,105,43)" fg:x="302" fg:w="1"/><text x="24.1613%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="23.9905%" y="501" width="0.0792%" height="15" fill="rgb(234,124,22)" fg:x="303" fg:w="1"/><text x="24.2405%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="24.1489%" y="485" width="0.0792%" height="15" fill="rgb(212,23,30)" fg:x="305" fg:w="1"/><text x="24.3989%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.1489%" y="469" width="0.0792%" height="15" fill="rgb(219,122,53)" fg:x="305" fg:w="1"/><text x="24.3989%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (10 samples, 0.79%)</title><rect x="23.5154%" y="565" width="0.7918%" height="15" fill="rgb(248,84,24)" fg:x="297" fg:w="10"/><text x="23.7654%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (10 samples, 0.79%)</title><rect x="23.5154%" y="549" width="0.7918%" height="15" fill="rgb(245,115,18)" fg:x="297" fg:w="10"/><text x="23.7654%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.63%)</title><rect x="23.6738%" y="533" width="0.6334%" height="15" fill="rgb(227,176,51)" fg:x="299" fg:w="8"/><text x="23.9238%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="23.8321%" y="517" width="0.4751%" height="15" fill="rgb(229,63,42)" fg:x="301" fg:w="6"/><text x="24.0821%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="24.0697%" y="501" width="0.2375%" height="15" fill="rgb(247,202,24)" fg:x="304" fg:w="3"/><text x="24.3197%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="24.2280%" y="485" width="0.0792%" height="15" fill="rgb(244,173,20)" fg:x="306" fg:w="1"/><text x="24.4780%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="24.2280%" y="469" width="0.0792%" height="15" fill="rgb(242,81,47)" fg:x="306" fg:w="1"/><text x="24.4780%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.2280%" y="453" width="0.0792%" height="15" fill="rgb(231,185,54)" fg:x="306" fg:w="1"/><text x="24.4780%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="24.4656%" y="533" width="0.0792%" height="15" fill="rgb(243,55,32)" fg:x="309" fg:w="1"/><text x="24.7156%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.5447%" y="501" width="0.0792%" height="15" fill="rgb(208,167,19)" fg:x="310" fg:w="1"/><text x="24.7947%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="24.6239%" y="501" width="0.0792%" height="15" fill="rgb(231,72,35)" fg:x="311" fg:w="1"/><text x="24.8739%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.7031%" y="485" width="0.0792%" height="15" fill="rgb(250,173,51)" fg:x="312" fg:w="1"/><text x="24.9531%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="24.7823%" y="485" width="0.1584%" height="15" fill="rgb(209,5,22)" fg:x="313" fg:w="2"/><text x="25.0323%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="25.1781%" y="469" width="0.2375%" height="15" fill="rgb(250,174,19)" fg:x="318" fg:w="3"/><text x="25.4281%" y="479.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="25.2573%" y="453" width="0.1584%" height="15" fill="rgb(217,3,49)" fg:x="319" fg:w="2"/><text x="25.5073%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="25.4157%" y="421" width="0.0792%" height="15" fill="rgb(218,225,5)" fg:x="321" fg:w="1"/><text x="25.6657%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="25.4157%" y="453" width="0.1584%" height="15" fill="rgb(236,89,11)" fg:x="321" fg:w="2"/><text x="25.6657%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="25.4157%" y="437" width="0.1584%" height="15" fill="rgb(206,33,28)" fg:x="321" fg:w="2"/><text x="25.6657%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="25.4949%" y="421" width="0.0792%" height="15" fill="rgb(241,56,42)" fg:x="322" fg:w="1"/><text x="25.7449%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="25.4949%" y="405" width="0.0792%" height="15" fill="rgb(222,44,11)" fg:x="322" fg:w="1"/><text x="25.7449%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.4949%" y="389" width="0.0792%" height="15" fill="rgb(234,111,20)" fg:x="322" fg:w="1"/><text x="25.7449%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (14 samples, 1.11%)</title><rect x="24.5447%" y="533" width="1.1085%" height="15" fill="rgb(237,77,6)" fg:x="310" fg:w="14"/><text x="24.7947%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (14 samples, 1.11%)</title><rect x="24.5447%" y="517" width="1.1085%" height="15" fill="rgb(235,111,23)" fg:x="310" fg:w="14"/><text x="24.7947%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (12 samples, 0.95%)</title><rect x="24.7031%" y="501" width="0.9501%" height="15" fill="rgb(251,135,29)" fg:x="312" fg:w="12"/><text x="24.9531%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.71%)</title><rect x="24.9406%" y="485" width="0.7126%" height="15" fill="rgb(217,57,1)" fg:x="315" fg:w="9"/><text x="25.1906%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="25.4157%" y="469" width="0.2375%" height="15" fill="rgb(249,119,31)" fg:x="321" fg:w="3"/><text x="25.6657%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="25.5740%" y="453" width="0.0792%" height="15" fill="rgb(233,164,33)" fg:x="323" fg:w="1"/><text x="25.8240%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.5740%" y="437" width="0.0792%" height="15" fill="rgb(250,217,43)" fg:x="323" fg:w="1"/><text x="25.8240%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="25.7324%" y="517" width="0.0792%" height="15" fill="rgb(232,154,50)" fg:x="325" fg:w="1"/><text x="25.9824%" y="527.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="25.7324%" y="501" width="0.0792%" height="15" fill="rgb(227,190,8)" fg:x="325" fg:w="1"/><text x="25.9824%" y="511.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (19 samples, 1.50%)</title><rect x="24.3864%" y="549" width="1.5044%" height="15" fill="rgb(209,217,32)" fg:x="308" fg:w="19"/><text x="24.6364%" y="559.50"></text></g><g><title>treediff::diff::diff (3 samples, 0.24%)</title><rect x="25.6532%" y="533" width="0.2375%" height="15" fill="rgb(243,203,50)" fg:x="324" fg:w="3"/><text x="25.9032%" y="543.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="25.8116%" y="517" width="0.0792%" height="15" fill="rgb(232,152,27)" fg:x="326" fg:w="1"/><text x="26.0616%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.8116%" y="501" width="0.0792%" height="15" fill="rgb(240,34,29)" fg:x="326" fg:w="1"/><text x="26.0616%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="26.2074%" y="517" width="0.1584%" height="15" fill="rgb(215,185,52)" fg:x="331" fg:w="2"/><text x="26.4574%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.2866%" y="501" width="0.0792%" height="15" fill="rgb(240,89,49)" fg:x="332" fg:w="1"/><text x="26.5366%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="26.3658%" y="517" width="0.0792%" height="15" fill="rgb(225,12,52)" fg:x="333" fg:w="1"/><text x="26.6158%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="26.3658%" y="501" width="0.0792%" height="15" fill="rgb(239,128,45)" fg:x="333" fg:w="1"/><text x="26.6158%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.3658%" y="485" width="0.0792%" height="15" fill="rgb(211,78,47)" fg:x="333" fg:w="1"/><text x="26.6158%" y="495.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="26.4450%" y="517" width="0.0792%" height="15" fill="rgb(232,31,21)" fg:x="334" fg:w="1"/><text x="26.6950%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="26.4450%" y="501" width="0.0792%" height="15" fill="rgb(222,168,14)" fg:x="334" fg:w="1"/><text x="26.6950%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.4450%" y="485" width="0.0792%" height="15" fill="rgb(209,128,24)" fg:x="334" fg:w="1"/><text x="26.6950%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="26.8409%" y="485" width="0.0792%" height="15" fill="rgb(249,35,13)" fg:x="339" fg:w="1"/><text x="27.0909%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="26.9200%" y="485" width="0.0792%" height="15" fill="rgb(218,7,2)" fg:x="340" fg:w="1"/><text x="27.1700%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="27.0784%" y="469" width="0.2375%" height="15" fill="rgb(238,107,27)" fg:x="342" fg:w="3"/><text x="27.3284%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="27.0784%" y="453" width="0.2375%" height="15" fill="rgb(217,88,38)" fg:x="342" fg:w="3"/><text x="27.3284%" y="463.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="27.0784%" y="437" width="0.2375%" height="15" fill="rgb(230,207,0)" fg:x="342" fg:w="3"/><text x="27.3284%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="27.3159%" y="405" width="0.0792%" height="15" fill="rgb(249,64,54)" fg:x="345" fg:w="1"/><text x="27.5659%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="27.3159%" y="389" width="0.0792%" height="15" fill="rgb(231,7,11)" fg:x="345" fg:w="1"/><text x="27.5659%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="27.3159%" y="373" width="0.0792%" height="15" fill="rgb(205,149,21)" fg:x="345" fg:w="1"/><text x="27.5659%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="27.3159%" y="469" width="0.2375%" height="15" fill="rgb(215,126,34)" fg:x="345" fg:w="3"/><text x="27.5659%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="27.3159%" y="453" width="0.2375%" height="15" fill="rgb(241,132,45)" fg:x="345" fg:w="3"/><text x="27.5659%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="27.3159%" y="437" width="0.2375%" height="15" fill="rgb(252,69,32)" fg:x="345" fg:w="3"/><text x="27.5659%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="27.3159%" y="421" width="0.2375%" height="15" fill="rgb(232,204,19)" fg:x="345" fg:w="3"/><text x="27.5659%" y="431.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="27.3951%" y="405" width="0.1584%" height="15" fill="rgb(249,15,47)" fg:x="346" fg:w="2"/><text x="27.6451%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="27.7118%" y="453" width="0.0792%" height="15" fill="rgb(209,227,23)" fg:x="350" fg:w="1"/><text x="27.9618%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="27.9493%" y="437" width="0.1584%" height="15" fill="rgb(248,92,24)" fg:x="353" fg:w="2"/><text x="28.1993%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="27.9493%" y="421" width="0.1584%" height="15" fill="rgb(247,59,2)" fg:x="353" fg:w="2"/><text x="28.1993%" y="431.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="27.9493%" y="405" width="0.1584%" height="15" fill="rgb(221,30,5)" fg:x="353" fg:w="2"/><text x="28.1993%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="27.7910%" y="453" width="0.4751%" height="15" fill="rgb(208,108,53)" fg:x="351" fg:w="6"/><text x="28.0410%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="28.1077%" y="437" width="0.1584%" height="15" fill="rgb(211,183,26)" fg:x="355" fg:w="2"/><text x="28.3577%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="28.1869%" y="421" width="0.0792%" height="15" fill="rgb(232,132,4)" fg:x="356" fg:w="1"/><text x="28.4369%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (17 samples, 1.35%)</title><rect x="26.9992%" y="485" width="1.3460%" height="15" fill="rgb(253,128,37)" fg:x="341" fg:w="17"/><text x="27.2492%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (10 samples, 0.79%)</title><rect x="27.5534%" y="469" width="0.7918%" height="15" fill="rgb(221,58,24)" fg:x="348" fg:w="10"/><text x="27.8034%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.2660%" y="453" width="0.0792%" height="15" fill="rgb(230,54,45)" fg:x="357" fg:w="1"/><text x="28.5160%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (22 samples, 1.74%)</title><rect x="26.6825%" y="501" width="1.7419%" height="15" fill="rgb(254,21,18)" fg:x="337" fg:w="22"/><text x="26.9325%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="28.3452%" y="485" width="0.0792%" height="15" fill="rgb(221,108,0)" fg:x="358" fg:w="1"/><text x="28.5952%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.3452%" y="469" width="0.0792%" height="15" fill="rgb(206,95,1)" fg:x="358" fg:w="1"/><text x="28.5952%" y="479.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (34 samples, 2.69%)</title><rect x="25.8907%" y="549" width="2.6920%" height="15" fill="rgb(237,52,5)" fg:x="327" fg:w="34"/><text x="26.1407%" y="559.50">ke..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (32 samples, 2.53%)</title><rect x="26.0491%" y="533" width="2.5337%" height="15" fill="rgb(218,150,34)" fg:x="329" fg:w="32"/><text x="26.2991%" y="543.50">&lt;s..</text></g><g><title>serde::ser::Serializer::collect_map (26 samples, 2.06%)</title><rect x="26.5241%" y="517" width="2.0586%" height="15" fill="rgb(235,194,28)" fg:x="335" fg:w="26"/><text x="26.7741%" y="527.50">s..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="28.4244%" y="501" width="0.1584%" height="15" fill="rgb(245,92,18)" fg:x="359" fg:w="2"/><text x="28.6744%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="28.4244%" y="485" width="0.1584%" height="15" fill="rgb(253,203,53)" fg:x="359" fg:w="2"/><text x="28.6744%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.5036%" y="469" width="0.0792%" height="15" fill="rgb(249,185,47)" fg:x="360" fg:w="1"/><text x="28.7536%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="28.9786%" y="421" width="0.0792%" height="15" fill="rgb(252,194,52)" fg:x="366" fg:w="1"/><text x="29.2286%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="28.9786%" y="405" width="0.0792%" height="15" fill="rgb(210,53,36)" fg:x="366" fg:w="1"/><text x="29.2286%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="28.9786%" y="389" width="0.0792%" height="15" fill="rgb(237,37,25)" fg:x="366" fg:w="1"/><text x="29.2286%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="28.9786%" y="373" width="0.0792%" height="15" fill="rgb(242,116,27)" fg:x="366" fg:w="1"/><text x="29.2286%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.9786%" y="357" width="0.0792%" height="15" fill="rgb(213,185,26)" fg:x="366" fg:w="1"/><text x="29.2286%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="29.0578%" y="421" width="0.0792%" height="15" fill="rgb(225,204,8)" fg:x="367" fg:w="1"/><text x="29.3078%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="28.8994%" y="437" width="0.3167%" height="15" fill="rgb(254,111,37)" fg:x="365" fg:w="4"/><text x="29.1494%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.1370%" y="421" width="0.0792%" height="15" fill="rgb(242,35,9)" fg:x="368" fg:w="1"/><text x="29.3870%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.1370%" y="405" width="0.0792%" height="15" fill="rgb(232,138,49)" fg:x="368" fg:w="1"/><text x="29.3870%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.1370%" y="389" width="0.0792%" height="15" fill="rgb(247,56,4)" fg:x="368" fg:w="1"/><text x="29.3870%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="28.8994%" y="453" width="0.3959%" height="15" fill="rgb(226,179,17)" fg:x="365" fg:w="5"/><text x="29.1494%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.2162%" y="437" width="0.0792%" height="15" fill="rgb(216,163,45)" fg:x="369" fg:w="1"/><text x="29.4662%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="29.2953%" y="453" width="0.0792%" height="15" fill="rgb(211,157,3)" fg:x="370" fg:w="1"/><text x="29.5453%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (13 samples, 1.03%)</title><rect x="28.6619%" y="485" width="1.0293%" height="15" fill="rgb(234,44,20)" fg:x="362" fg:w="13"/><text x="28.9119%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (11 samples, 0.87%)</title><rect x="28.8203%" y="469" width="0.8709%" height="15" fill="rgb(254,138,23)" fg:x="364" fg:w="11"/><text x="29.0703%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4 samples, 0.32%)</title><rect x="29.3745%" y="453" width="0.3167%" height="15" fill="rgb(206,119,39)" fg:x="371" fg:w="4"/><text x="29.6245%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="29.4537%" y="437" width="0.2375%" height="15" fill="rgb(231,105,52)" fg:x="372" fg:w="3"/><text x="29.7037%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="29.5329%" y="421" width="0.1584%" height="15" fill="rgb(250,20,5)" fg:x="373" fg:w="2"/><text x="29.7829%" y="431.50"></text></g><g><title>engine::session::Session::close (118 samples, 9.34%)</title><rect x="20.4276%" y="661" width="9.3428%" height="15" fill="rgb(215,198,30)" fg:x="258" fg:w="118"/><text x="20.6776%" y="671.50">engine::sessi..</text></g><g><title>engine::session::state::State::close (114 samples, 9.03%)</title><rect x="20.7443%" y="645" width="9.0261%" height="15" fill="rgb(246,142,8)" fg:x="262" fg:w="114"/><text x="20.9943%" y="655.50">engine::sessi..</text></g><g><title>engine::session::state::State::flush_entities (113 samples, 8.95%)</title><rect x="20.8234%" y="629" width="8.9470%" height="15" fill="rgb(243,26,38)" fg:x="263" fg:w="113"/><text x="21.0734%" y="639.50">engine::sessi..</text></g><g><title>core::iter::adapters::try_process (113 samples, 8.95%)</title><rect x="20.8234%" y="613" width="8.9470%" height="15" fill="rgb(205,133,28)" fg:x="263" fg:w="113"/><text x="21.0734%" y="623.50">core::iter::a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (113 samples, 8.95%)</title><rect x="20.8234%" y="597" width="8.9470%" height="15" fill="rgb(212,34,0)" fg:x="263" fg:w="113"/><text x="21.0734%" y="607.50">&lt;alloc::vec::..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (112 samples, 8.87%)</title><rect x="20.9026%" y="581" width="8.8678%" height="15" fill="rgb(251,226,22)" fg:x="264" fg:w="112"/><text x="21.1526%" y="591.50">engine::sessi..</text></g><g><title>kernel::model::any_entity_changes (69 samples, 5.46%)</title><rect x="24.3072%" y="565" width="5.4632%" height="15" fill="rgb(252,119,9)" fg:x="307" fg:w="69"/><text x="24.5572%" y="575.50">kernel:..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (15 samples, 1.19%)</title><rect x="28.5827%" y="549" width="1.1876%" height="15" fill="rgb(213,150,50)" fg:x="361" fg:w="15"/><text x="28.8327%" y="559.50"></text></g><g><title>serde_json::de::from_trait (15 samples, 1.19%)</title><rect x="28.5827%" y="533" width="1.1876%" height="15" fill="rgb(212,24,39)" fg:x="361" fg:w="15"/><text x="28.8327%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (15 samples, 1.19%)</title><rect x="28.5827%" y="517" width="1.1876%" height="15" fill="rgb(213,46,39)" fg:x="361" fg:w="15"/><text x="28.8327%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (15 samples, 1.19%)</title><rect x="28.5827%" y="501" width="1.1876%" height="15" fill="rgb(239,106,12)" fg:x="361" fg:w="15"/><text x="28.8327%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.6912%" y="485" width="0.0792%" height="15" fill="rgb(249,229,21)" fg:x="375" fg:w="1"/><text x="29.9412%" y="495.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="29.8496%" y="533" width="0.0792%" height="15" fill="rgb(212,158,3)" fg:x="377" fg:w="1"/><text x="30.0996%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="29.8496%" y="517" width="0.0792%" height="15" fill="rgb(253,26,48)" fg:x="377" fg:w="1"/><text x="30.0996%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="29.8496%" y="501" width="0.0792%" height="15" fill="rgb(238,178,20)" fg:x="377" fg:w="1"/><text x="30.0996%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="29.8496%" y="485" width="0.0792%" height="15" fill="rgb(208,86,15)" fg:x="377" fg:w="1"/><text x="30.0996%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="29.8496%" y="469" width="0.0792%" height="15" fill="rgb(239,42,53)" fg:x="377" fg:w="1"/><text x="30.0996%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.8496%" y="453" width="0.0792%" height="15" fill="rgb(245,226,8)" fg:x="377" fg:w="1"/><text x="30.0996%" y="463.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="29.9287%" y="485" width="0.0792%" height="15" fill="rgb(216,176,32)" fg:x="378" fg:w="1"/><text x="30.1787%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="30.0079%" y="469" width="0.0792%" height="15" fill="rgb(231,186,21)" fg:x="379" fg:w="1"/><text x="30.2579%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="30.0079%" y="453" width="0.0792%" height="15" fill="rgb(205,95,49)" fg:x="379" fg:w="1"/><text x="30.2579%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="30.0079%" y="437" width="0.0792%" height="15" fill="rgb(217,145,8)" fg:x="379" fg:w="1"/><text x="30.2579%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="30.0079%" y="421" width="0.0792%" height="15" fill="rgb(239,144,48)" fg:x="379" fg:w="1"/><text x="30.2579%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="30.0079%" y="405" width="0.0792%" height="15" fill="rgb(214,189,23)" fg:x="379" fg:w="1"/><text x="30.2579%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="30.0079%" y="389" width="0.0792%" height="15" fill="rgb(229,157,17)" fg:x="379" fg:w="1"/><text x="30.2579%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="30.0079%" y="373" width="0.0792%" height="15" fill="rgb(230,5,48)" fg:x="379" fg:w="1"/><text x="30.2579%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="30.0079%" y="357" width="0.0792%" height="15" fill="rgb(224,156,48)" fg:x="379" fg:w="1"/><text x="30.2579%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="30.0871%" y="421" width="0.0792%" height="15" fill="rgb(223,14,29)" fg:x="380" fg:w="1"/><text x="30.3371%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="30.0871%" y="405" width="0.0792%" height="15" fill="rgb(229,96,36)" fg:x="380" fg:w="1"/><text x="30.3371%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="30.0871%" y="389" width="0.0792%" height="15" fill="rgb(231,102,53)" fg:x="380" fg:w="1"/><text x="30.3371%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.0871%" y="373" width="0.0792%" height="15" fill="rgb(210,77,38)" fg:x="380" fg:w="1"/><text x="30.3371%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="30.0871%" y="469" width="0.1584%" height="15" fill="rgb(235,131,6)" fg:x="380" fg:w="2"/><text x="30.3371%" y="479.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="30.0871%" y="453" width="0.1584%" height="15" fill="rgb(252,55,38)" fg:x="380" fg:w="2"/><text x="30.3371%" y="463.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="30.0871%" y="437" width="0.1584%" height="15" fill="rgb(246,38,14)" fg:x="380" fg:w="2"/><text x="30.3371%" y="447.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="30.1663%" y="421" width="0.0792%" height="15" fill="rgb(242,27,5)" fg:x="381" fg:w="1"/><text x="30.4163%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="30.1663%" y="405" width="0.0792%" height="15" fill="rgb(228,65,35)" fg:x="381" fg:w="1"/><text x="30.4163%" y="415.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="30.1663%" y="389" width="0.0792%" height="15" fill="rgb(245,93,11)" fg:x="381" fg:w="1"/><text x="30.4163%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="30.1663%" y="373" width="0.0792%" height="15" fill="rgb(213,1,31)" fg:x="381" fg:w="1"/><text x="30.4163%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="30.4038%" y="341" width="0.0792%" height="15" fill="rgb(237,205,14)" fg:x="384" fg:w="1"/><text x="30.6538%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="30.3246%" y="373" width="0.3167%" height="15" fill="rgb(232,118,45)" fg:x="383" fg:w="4"/><text x="30.5746%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="30.4038%" y="357" width="0.2375%" height="15" fill="rgb(218,5,6)" fg:x="384" fg:w="3"/><text x="30.6538%" y="367.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="30.4830%" y="341" width="0.1584%" height="15" fill="rgb(251,87,51)" fg:x="385" fg:w="2"/><text x="30.7330%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="30.5622%" y="325" width="0.0792%" height="15" fill="rgb(207,225,20)" fg:x="386" fg:w="1"/><text x="30.8122%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="30.5622%" y="309" width="0.0792%" height="15" fill="rgb(222,78,54)" fg:x="386" fg:w="1"/><text x="30.8122%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="30.5622%" y="293" width="0.0792%" height="15" fill="rgb(232,85,16)" fg:x="386" fg:w="1"/><text x="30.8122%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="30.5622%" y="277" width="0.0792%" height="15" fill="rgb(244,25,33)" fg:x="386" fg:w="1"/><text x="30.8122%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="30.5622%" y="261" width="0.0792%" height="15" fill="rgb(233,24,36)" fg:x="386" fg:w="1"/><text x="30.8122%" y="271.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="30.5622%" y="245" width="0.0792%" height="15" fill="rgb(253,49,54)" fg:x="386" fg:w="1"/><text x="30.8122%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="30.5622%" y="229" width="0.0792%" height="15" fill="rgb(245,12,22)" fg:x="386" fg:w="1"/><text x="30.8122%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="30.5622%" y="213" width="0.0792%" height="15" fill="rgb(253,141,28)" fg:x="386" fg:w="1"/><text x="30.8122%" y="223.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.5622%" y="197" width="0.0792%" height="15" fill="rgb(225,207,27)" fg:x="386" fg:w="1"/><text x="30.8122%" y="207.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.5622%" y="181" width="0.0792%" height="15" fill="rgb(220,84,2)" fg:x="386" fg:w="1"/><text x="30.8122%" y="191.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="30.5622%" y="165" width="0.0792%" height="15" fill="rgb(224,37,37)" fg:x="386" fg:w="1"/><text x="30.8122%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="30.7205%" y="341" width="0.1584%" height="15" fill="rgb(220,143,18)" fg:x="388" fg:w="2"/><text x="30.9705%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.8789%" y="293" width="0.0792%" height="15" fill="rgb(210,88,33)" fg:x="390" fg:w="1"/><text x="31.1289%" y="303.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="30.8789%" y="325" width="0.1584%" height="15" fill="rgb(219,87,51)" fg:x="390" fg:w="2"/><text x="31.1289%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="30.8789%" y="309" width="0.1584%" height="15" fill="rgb(211,7,35)" fg:x="390" fg:w="2"/><text x="31.1289%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="30.9580%" y="293" width="0.0792%" height="15" fill="rgb(232,77,2)" fg:x="391" fg:w="1"/><text x="31.2080%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="30.9580%" y="277" width="0.0792%" height="15" fill="rgb(249,94,25)" fg:x="391" fg:w="1"/><text x="31.2080%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="30.9580%" y="261" width="0.0792%" height="15" fill="rgb(215,112,2)" fg:x="391" fg:w="1"/><text x="31.2080%" y="271.50"></text></g><g><title>kernel::model::entity::Entity::from_value (11 samples, 0.87%)</title><rect x="30.2454%" y="469" width="0.8709%" height="15" fill="rgb(226,115,48)" fg:x="382" fg:w="11"/><text x="30.4954%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (11 samples, 0.87%)</title><rect x="30.2454%" y="453" width="0.8709%" height="15" fill="rgb(249,196,10)" fg:x="382" fg:w="11"/><text x="30.4954%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (11 samples, 0.87%)</title><rect x="30.2454%" y="437" width="0.8709%" height="15" fill="rgb(237,109,14)" fg:x="382" fg:w="11"/><text x="30.4954%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (10 samples, 0.79%)</title><rect x="30.3246%" y="421" width="0.7918%" height="15" fill="rgb(217,103,53)" fg:x="383" fg:w="10"/><text x="30.5746%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (10 samples, 0.79%)</title><rect x="30.3246%" y="405" width="0.7918%" height="15" fill="rgb(244,137,9)" fg:x="383" fg:w="10"/><text x="30.5746%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (10 samples, 0.79%)</title><rect x="30.3246%" y="389" width="0.7918%" height="15" fill="rgb(227,201,3)" fg:x="383" fg:w="10"/><text x="30.5746%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="30.6413%" y="373" width="0.4751%" height="15" fill="rgb(243,94,6)" fg:x="387" fg:w="6"/><text x="30.8913%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="30.6413%" y="357" width="0.4751%" height="15" fill="rgb(235,118,5)" fg:x="387" fg:w="6"/><text x="30.8913%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (3 samples, 0.24%)</title><rect x="30.8789%" y="341" width="0.2375%" height="15" fill="rgb(247,10,30)" fg:x="390" fg:w="3"/><text x="31.1289%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="31.0372%" y="325" width="0.0792%" height="15" fill="rgb(205,26,28)" fg:x="392" fg:w="1"/><text x="31.2872%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="31.0372%" y="309" width="0.0792%" height="15" fill="rgb(206,99,35)" fg:x="392" fg:w="1"/><text x="31.2872%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="31.0372%" y="293" width="0.0792%" height="15" fill="rgb(238,130,40)" fg:x="392" fg:w="1"/><text x="31.2872%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="31.0372%" y="277" width="0.0792%" height="15" fill="rgb(224,126,31)" fg:x="392" fg:w="1"/><text x="31.2872%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="31.0372%" y="261" width="0.0792%" height="15" fill="rgb(254,105,17)" fg:x="392" fg:w="1"/><text x="31.2872%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="31.0372%" y="245" width="0.0792%" height="15" fill="rgb(216,87,36)" fg:x="392" fg:w="1"/><text x="31.2872%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="31.0372%" y="229" width="0.0792%" height="15" fill="rgb(240,21,12)" fg:x="392" fg:w="1"/><text x="31.2872%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="31.2747%" y="277" width="0.0792%" height="15" fill="rgb(245,192,34)" fg:x="395" fg:w="1"/><text x="31.5247%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="31.2747%" y="261" width="0.0792%" height="15" fill="rgb(226,100,49)" fg:x="395" fg:w="1"/><text x="31.5247%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="31.2747%" y="245" width="0.0792%" height="15" fill="rgb(245,188,27)" fg:x="395" fg:w="1"/><text x="31.5247%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="31.1956%" y="325" width="0.2375%" height="15" fill="rgb(212,170,8)" fg:x="394" fg:w="3"/><text x="31.4456%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="31.2747%" y="309" width="0.1584%" height="15" fill="rgb(217,113,29)" fg:x="395" fg:w="2"/><text x="31.5247%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="31.2747%" y="293" width="0.1584%" height="15" fill="rgb(237,30,3)" fg:x="395" fg:w="2"/><text x="31.5247%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.3539%" y="277" width="0.0792%" height="15" fill="rgb(227,19,28)" fg:x="396" fg:w="1"/><text x="31.6039%" y="287.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_location (21 samples, 1.66%)</title><rect x="29.8496%" y="549" width="1.6627%" height="15" fill="rgb(239,172,45)" fg:x="377" fg:w="21"/><text x="30.0996%" y="559.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (20 samples, 1.58%)</title><rect x="29.9287%" y="533" width="1.5835%" height="15" fill="rgb(254,55,39)" fg:x="378" fg:w="20"/><text x="30.1787%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (20 samples, 1.58%)</title><rect x="29.9287%" y="517" width="1.5835%" height="15" fill="rgb(249,208,12)" fg:x="378" fg:w="20"/><text x="30.1787%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (20 samples, 1.58%)</title><rect x="29.9287%" y="501" width="1.5835%" height="15" fill="rgb(240,52,13)" fg:x="378" fg:w="20"/><text x="30.1787%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (19 samples, 1.50%)</title><rect x="30.0079%" y="485" width="1.5044%" height="15" fill="rgb(252,149,13)" fg:x="379" fg:w="19"/><text x="30.2579%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.40%)</title><rect x="31.1164%" y="469" width="0.3959%" height="15" fill="rgb(232,81,48)" fg:x="393" fg:w="5"/><text x="31.3664%" y="479.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="31.1164%" y="453" width="0.3959%" height="15" fill="rgb(222,144,2)" fg:x="393" fg:w="5"/><text x="31.3664%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="31.1164%" y="437" width="0.3959%" height="15" fill="rgb(216,81,32)" fg:x="393" fg:w="5"/><text x="31.3664%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="31.1164%" y="421" width="0.3959%" height="15" fill="rgb(244,78,51)" fg:x="393" fg:w="5"/><text x="31.3664%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="31.1164%" y="405" width="0.3959%" height="15" fill="rgb(217,66,21)" fg:x="393" fg:w="5"/><text x="31.3664%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="31.1164%" y="389" width="0.3959%" height="15" fill="rgb(247,101,42)" fg:x="393" fg:w="5"/><text x="31.3664%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="31.1164%" y="373" width="0.3959%" height="15" fill="rgb(227,81,39)" fg:x="393" fg:w="5"/><text x="31.3664%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="31.1164%" y="357" width="0.3959%" height="15" fill="rgb(220,223,44)" fg:x="393" fg:w="5"/><text x="31.3664%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="31.1956%" y="341" width="0.3167%" height="15" fill="rgb(205,218,2)" fg:x="394" fg:w="4"/><text x="31.4456%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="31.4331%" y="325" width="0.0792%" height="15" fill="rgb(212,207,28)" fg:x="397" fg:w="1"/><text x="31.6831%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="31.4331%" y="309" width="0.0792%" height="15" fill="rgb(224,12,41)" fg:x="397" fg:w="1"/><text x="31.6831%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="31.4331%" y="293" width="0.0792%" height="15" fill="rgb(216,118,12)" fg:x="397" fg:w="1"/><text x="31.6831%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="31.4331%" y="277" width="0.0792%" height="15" fill="rgb(252,97,46)" fg:x="397" fg:w="1"/><text x="31.6831%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.4331%" y="261" width="0.0792%" height="15" fill="rgb(244,206,19)" fg:x="397" fg:w="1"/><text x="31.6831%" y="271.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (22 samples, 1.74%)</title><rect x="29.8496%" y="565" width="1.7419%" height="15" fill="rgb(231,84,31)" fg:x="377" fg:w="22"/><text x="30.0996%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="31.5123%" y="549" width="0.0792%" height="15" fill="rgb(244,133,0)" fg:x="398" fg:w="1"/><text x="31.7623%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="31.7498%" y="389" width="0.0792%" height="15" fill="rgb(223,15,50)" fg:x="401" fg:w="1"/><text x="31.9998%" y="399.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="31.9873%" y="357" width="0.0792%" height="15" fill="rgb(250,118,49)" fg:x="404" fg:w="1"/><text x="32.2373%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.0665%" y="325" width="0.0792%" height="15" fill="rgb(248,25,38)" fg:x="405" fg:w="1"/><text x="32.3165%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="32.0665%" y="357" width="0.1584%" height="15" fill="rgb(215,70,14)" fg:x="405" fg:w="2"/><text x="32.3165%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="32.0665%" y="341" width="0.1584%" height="15" fill="rgb(215,28,15)" fg:x="405" fg:w="2"/><text x="32.3165%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.1457%" y="325" width="0.0792%" height="15" fill="rgb(243,6,28)" fg:x="406" fg:w="1"/><text x="32.3957%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="32.2249%" y="325" width="0.0792%" height="15" fill="rgb(222,130,1)" fg:x="407" fg:w="1"/><text x="32.4749%" y="335.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (8 samples, 0.63%)</title><rect x="31.7498%" y="421" width="0.6334%" height="15" fill="rgb(236,166,44)" fg:x="401" fg:w="8"/><text x="31.9998%" y="431.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (8 samples, 0.63%)</title><rect x="31.7498%" y="405" width="0.6334%" height="15" fill="rgb(221,108,14)" fg:x="401" fg:w="8"/><text x="31.9998%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (7 samples, 0.55%)</title><rect x="31.8290%" y="389" width="0.5542%" height="15" fill="rgb(252,3,45)" fg:x="402" fg:w="7"/><text x="32.0790%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="31.9082%" y="373" width="0.4751%" height="15" fill="rgb(237,68,30)" fg:x="403" fg:w="6"/><text x="32.1582%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="32.2249%" y="357" width="0.1584%" height="15" fill="rgb(211,79,22)" fg:x="407" fg:w="2"/><text x="32.4749%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="32.2249%" y="341" width="0.1584%" height="15" fill="rgb(252,185,21)" fg:x="407" fg:w="2"/><text x="32.4749%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="32.3040%" y="325" width="0.0792%" height="15" fill="rgb(225,189,26)" fg:x="408" fg:w="1"/><text x="32.5540%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.3040%" y="309" width="0.0792%" height="15" fill="rgb(241,30,40)" fg:x="408" fg:w="1"/><text x="32.5540%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="32.6999%" y="373" width="0.0792%" height="15" fill="rgb(235,215,44)" fg:x="413" fg:w="1"/><text x="32.9499%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.6999%" y="357" width="0.0792%" height="15" fill="rgb(205,8,29)" fg:x="413" fg:w="1"/><text x="32.9499%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="32.7791%" y="373" width="0.0792%" height="15" fill="rgb(241,137,42)" fg:x="414" fg:w="1"/><text x="33.0291%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="32.7791%" y="357" width="0.0792%" height="15" fill="rgb(237,155,2)" fg:x="414" fg:w="1"/><text x="33.0291%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="32.6999%" y="389" width="0.2375%" height="15" fill="rgb(245,29,42)" fg:x="413" fg:w="3"/><text x="32.9499%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="32.8583%" y="373" width="0.0792%" height="15" fill="rgb(234,101,35)" fg:x="415" fg:w="1"/><text x="33.1083%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="32.8583%" y="357" width="0.0792%" height="15" fill="rgb(228,64,37)" fg:x="415" fg:w="1"/><text x="33.1083%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="32.8583%" y="341" width="0.0792%" height="15" fill="rgb(217,214,36)" fg:x="415" fg:w="1"/><text x="33.1083%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="32.8583%" y="325" width="0.0792%" height="15" fill="rgb(243,70,3)" fg:x="415" fg:w="1"/><text x="33.1083%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="32.8583%" y="309" width="0.0792%" height="15" fill="rgb(253,158,52)" fg:x="415" fg:w="1"/><text x="33.1083%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.8583%" y="293" width="0.0792%" height="15" fill="rgb(234,111,54)" fg:x="415" fg:w="1"/><text x="33.1083%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="32.9375%" y="373" width="0.0792%" height="15" fill="rgb(217,70,32)" fg:x="416" fg:w="1"/><text x="33.1875%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.9375%" y="357" width="0.0792%" height="15" fill="rgb(234,18,33)" fg:x="416" fg:w="1"/><text x="33.1875%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="33.0166%" y="341" width="0.0792%" height="15" fill="rgb(234,12,49)" fg:x="417" fg:w="1"/><text x="33.2666%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="33.0166%" y="325" width="0.0792%" height="15" fill="rgb(236,10,21)" fg:x="417" fg:w="1"/><text x="33.2666%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="33.0958%" y="341" width="0.0792%" height="15" fill="rgb(248,182,45)" fg:x="418" fg:w="1"/><text x="33.3458%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="33.0958%" y="325" width="0.0792%" height="15" fill="rgb(217,95,36)" fg:x="418" fg:w="1"/><text x="33.3458%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (4 samples, 0.32%)</title><rect x="32.9375%" y="389" width="0.3167%" height="15" fill="rgb(212,110,31)" fg:x="416" fg:w="4"/><text x="33.1875%" y="399.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="33.0166%" y="373" width="0.2375%" height="15" fill="rgb(206,32,53)" fg:x="417" fg:w="3"/><text x="33.2666%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="33.0166%" y="357" width="0.2375%" height="15" fill="rgb(246,141,37)" fg:x="417" fg:w="3"/><text x="33.2666%" y="367.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="33.1750%" y="341" width="0.0792%" height="15" fill="rgb(219,16,7)" fg:x="419" fg:w="1"/><text x="33.4250%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="33.1750%" y="325" width="0.0792%" height="15" fill="rgb(230,205,45)" fg:x="419" fg:w="1"/><text x="33.4250%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="33.1750%" y="309" width="0.0792%" height="15" fill="rgb(231,43,49)" fg:x="419" fg:w="1"/><text x="33.4250%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="33.1750%" y="293" width="0.0792%" height="15" fill="rgb(212,106,34)" fg:x="419" fg:w="1"/><text x="33.4250%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="33.1750%" y="277" width="0.0792%" height="15" fill="rgb(206,83,17)" fg:x="419" fg:w="1"/><text x="33.4250%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="33.1750%" y="261" width="0.0792%" height="15" fill="rgb(244,154,49)" fg:x="419" fg:w="1"/><text x="33.4250%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="33.4125%" y="373" width="0.0792%" height="15" fill="rgb(244,149,49)" fg:x="422" fg:w="1"/><text x="33.6625%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="33.4917%" y="341" width="0.0792%" height="15" fill="rgb(227,134,18)" fg:x="423" fg:w="1"/><text x="33.7417%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="33.4917%" y="325" width="0.0792%" height="15" fill="rgb(237,116,36)" fg:x="423" fg:w="1"/><text x="33.7417%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="33.4917%" y="309" width="0.0792%" height="15" fill="rgb(205,129,40)" fg:x="423" fg:w="1"/><text x="33.7417%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="33.4917%" y="293" width="0.0792%" height="15" fill="rgb(236,178,4)" fg:x="423" fg:w="1"/><text x="33.7417%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="33.4917%" y="277" width="0.0792%" height="15" fill="rgb(251,76,53)" fg:x="423" fg:w="1"/><text x="33.7417%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="33.4917%" y="261" width="0.0792%" height="15" fill="rgb(242,92,40)" fg:x="423" fg:w="1"/><text x="33.7417%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="33.4917%" y="245" width="0.0792%" height="15" fill="rgb(209,45,30)" fg:x="423" fg:w="1"/><text x="33.7417%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="33.4917%" y="229" width="0.0792%" height="15" fill="rgb(218,157,36)" fg:x="423" fg:w="1"/><text x="33.7417%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="33.4917%" y="213" width="0.0792%" height="15" fill="rgb(222,186,16)" fg:x="423" fg:w="1"/><text x="33.7417%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="33.4917%" y="197" width="0.0792%" height="15" fill="rgb(254,72,35)" fg:x="423" fg:w="1"/><text x="33.7417%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="33.4917%" y="181" width="0.0792%" height="15" fill="rgb(224,25,35)" fg:x="423" fg:w="1"/><text x="33.7417%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="33.4917%" y="165" width="0.0792%" height="15" fill="rgb(206,135,52)" fg:x="423" fg:w="1"/><text x="33.7417%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="33.4917%" y="149" width="0.0792%" height="15" fill="rgb(229,174,47)" fg:x="423" fg:w="1"/><text x="33.7417%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="33.4917%" y="133" width="0.0792%" height="15" fill="rgb(242,184,21)" fg:x="423" fg:w="1"/><text x="33.7417%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.4917%" y="117" width="0.0792%" height="15" fill="rgb(213,22,45)" fg:x="423" fg:w="1"/><text x="33.7417%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="33.6500%" y="277" width="0.0792%" height="15" fill="rgb(237,81,54)" fg:x="425" fg:w="1"/><text x="33.9000%" y="287.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (5 samples, 0.40%)</title><rect x="33.5709%" y="341" width="0.3959%" height="15" fill="rgb(248,177,18)" fg:x="424" fg:w="5"/><text x="33.8209%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="33.5709%" y="325" width="0.3959%" height="15" fill="rgb(254,31,16)" fg:x="424" fg:w="5"/><text x="33.8209%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (4 samples, 0.32%)</title><rect x="33.6500%" y="309" width="0.3167%" height="15" fill="rgb(235,20,31)" fg:x="425" fg:w="4"/><text x="33.9000%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="33.6500%" y="293" width="0.3167%" height="15" fill="rgb(240,56,43)" fg:x="425" fg:w="4"/><text x="33.9000%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (3 samples, 0.24%)</title><rect x="33.7292%" y="277" width="0.2375%" height="15" fill="rgb(237,197,51)" fg:x="426" fg:w="3"/><text x="33.9792%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="33.7292%" y="261" width="0.2375%" height="15" fill="rgb(241,162,44)" fg:x="426" fg:w="3"/><text x="33.9792%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.8876%" y="245" width="0.0792%" height="15" fill="rgb(224,23,20)" fg:x="428" fg:w="1"/><text x="34.1376%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (10 samples, 0.79%)</title><rect x="33.2542%" y="389" width="0.7918%" height="15" fill="rgb(250,109,34)" fg:x="420" fg:w="10"/><text x="33.5042%" y="399.50"></text></g><g><title>kernel::model::props::load_props (7 samples, 0.55%)</title><rect x="33.4917%" y="373" width="0.5542%" height="15" fill="rgb(214,175,50)" fg:x="423" fg:w="7"/><text x="33.7417%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (7 samples, 0.55%)</title><rect x="33.4917%" y="357" width="0.5542%" height="15" fill="rgb(213,182,5)" fg:x="423" fg:w="7"/><text x="33.7417%" y="367.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="33.9667%" y="341" width="0.0792%" height="15" fill="rgb(209,199,19)" fg:x="429" fg:w="1"/><text x="34.2167%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="34.1251%" y="357" width="0.0792%" height="15" fill="rgb(236,224,42)" fg:x="431" fg:w="1"/><text x="34.3751%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.1251%" y="341" width="0.0792%" height="15" fill="rgb(246,226,29)" fg:x="431" fg:w="1"/><text x="34.3751%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="34.2043%" y="357" width="0.0792%" height="15" fill="rgb(227,223,11)" fg:x="432" fg:w="1"/><text x="34.4543%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="34.4418%" y="325" width="0.0792%" height="15" fill="rgb(219,7,51)" fg:x="435" fg:w="1"/><text x="34.6918%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="34.6793%" y="261" width="0.0792%" height="15" fill="rgb(245,167,10)" fg:x="438" fg:w="1"/><text x="34.9293%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="34.8377%" y="245" width="0.0792%" height="15" fill="rgb(237,224,16)" fg:x="440" fg:w="1"/><text x="35.0877%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.24%)</title><rect x="34.7585%" y="261" width="0.2375%" height="15" fill="rgb(226,132,13)" fg:x="439" fg:w="3"/><text x="35.0085%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="34.9169%" y="245" width="0.0792%" height="15" fill="rgb(214,140,3)" fg:x="441" fg:w="1"/><text x="35.1669%" y="255.50"></text></g><g><title>kernel::model::EntityPtr::gid (13 samples, 1.03%)</title><rect x="34.0459%" y="389" width="1.0293%" height="15" fill="rgb(221,177,4)" fg:x="430" fg:w="13"/><text x="34.2959%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (13 samples, 1.03%)</title><rect x="34.0459%" y="373" width="1.0293%" height="15" fill="rgb(238,139,3)" fg:x="430" fg:w="13"/><text x="34.2959%" y="383.50"></text></g><g><title>kernel::model::props::load_props (10 samples, 0.79%)</title><rect x="34.2835%" y="357" width="0.7918%" height="15" fill="rgb(216,17,39)" fg:x="433" fg:w="10"/><text x="34.5335%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (9 samples, 0.71%)</title><rect x="34.3626%" y="341" width="0.7126%" height="15" fill="rgb(238,120,9)" fg:x="434" fg:w="9"/><text x="34.6126%" y="351.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (7 samples, 0.55%)</title><rect x="34.5210%" y="325" width="0.5542%" height="15" fill="rgb(244,92,53)" fg:x="436" fg:w="7"/><text x="34.7710%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.55%)</title><rect x="34.5210%" y="309" width="0.5542%" height="15" fill="rgb(224,148,33)" fg:x="436" fg:w="7"/><text x="34.7710%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (7 samples, 0.55%)</title><rect x="34.5210%" y="293" width="0.5542%" height="15" fill="rgb(243,6,36)" fg:x="436" fg:w="7"/><text x="34.7710%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.55%)</title><rect x="34.5210%" y="277" width="0.5542%" height="15" fill="rgb(230,102,11)" fg:x="436" fg:w="7"/><text x="34.7710%" y="287.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="34.9960%" y="261" width="0.0792%" height="15" fill="rgb(234,148,36)" fg:x="442" fg:w="1"/><text x="35.2460%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="34.9960%" y="245" width="0.0792%" height="15" fill="rgb(251,153,25)" fg:x="442" fg:w="1"/><text x="35.2460%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="34.9960%" y="229" width="0.0792%" height="15" fill="rgb(215,129,8)" fg:x="442" fg:w="1"/><text x="35.2460%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="34.9960%" y="213" width="0.0792%" height="15" fill="rgb(224,128,35)" fg:x="442" fg:w="1"/><text x="35.2460%" y="223.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="35.1544%" y="341" width="0.0792%" height="15" fill="rgb(237,56,52)" fg:x="444" fg:w="1"/><text x="35.4044%" y="351.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="35.1544%" y="325" width="0.0792%" height="15" fill="rgb(234,213,19)" fg:x="444" fg:w="1"/><text x="35.4044%" y="335.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="35.1544%" y="309" width="0.0792%" height="15" fill="rgb(252,82,23)" fg:x="444" fg:w="1"/><text x="35.4044%" y="319.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="35.1544%" y="293" width="0.0792%" height="15" fill="rgb(254,201,21)" fg:x="444" fg:w="1"/><text x="35.4044%" y="303.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="35.1544%" y="277" width="0.0792%" height="15" fill="rgb(250,186,11)" fg:x="444" fg:w="1"/><text x="35.4044%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="35.1544%" y="261" width="0.0792%" height="15" fill="rgb(211,174,5)" fg:x="444" fg:w="1"/><text x="35.4044%" y="271.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="35.1544%" y="245" width="0.0792%" height="15" fill="rgb(214,121,10)" fg:x="444" fg:w="1"/><text x="35.4044%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="35.1544%" y="229" width="0.0792%" height="15" fill="rgb(241,66,2)" fg:x="444" fg:w="1"/><text x="35.4044%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="35.1544%" y="213" width="0.0792%" height="15" fill="rgb(220,167,19)" fg:x="444" fg:w="1"/><text x="35.4044%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="35.1544%" y="197" width="0.0792%" height="15" fill="rgb(231,54,50)" fg:x="444" fg:w="1"/><text x="35.4044%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="35.1544%" y="181" width="0.0792%" height="15" fill="rgb(239,217,53)" fg:x="444" fg:w="1"/><text x="35.4044%" y="191.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="35.2336%" y="325" width="0.0792%" height="15" fill="rgb(248,8,0)" fg:x="445" fg:w="1"/><text x="35.4836%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="35.3919%" y="309" width="0.2375%" height="15" fill="rgb(229,118,37)" fg:x="447" fg:w="3"/><text x="35.6419%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="35.3919%" y="293" width="0.2375%" height="15" fill="rgb(253,223,43)" fg:x="447" fg:w="3"/><text x="35.6419%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (3 samples, 0.24%)</title><rect x="35.3919%" y="277" width="0.2375%" height="15" fill="rgb(211,77,36)" fg:x="447" fg:w="3"/><text x="35.6419%" y="287.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (3 samples, 0.24%)</title><rect x="35.3919%" y="261" width="0.2375%" height="15" fill="rgb(219,3,53)" fg:x="447" fg:w="3"/><text x="35.6419%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="35.3919%" y="245" width="0.2375%" height="15" fill="rgb(244,45,42)" fg:x="447" fg:w="3"/><text x="35.6419%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="35.5503%" y="229" width="0.0792%" height="15" fill="rgb(225,95,27)" fg:x="449" fg:w="1"/><text x="35.8003%" y="239.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="35.5503%" y="213" width="0.0792%" height="15" fill="rgb(207,74,8)" fg:x="449" fg:w="1"/><text x="35.8003%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="35.6295%" y="293" width="0.0792%" height="15" fill="rgb(243,63,36)" fg:x="450" fg:w="1"/><text x="35.8795%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="35.6295%" y="277" width="0.0792%" height="15" fill="rgb(211,180,12)" fg:x="450" fg:w="1"/><text x="35.8795%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.6295%" y="261" width="0.0792%" height="15" fill="rgb(254,166,49)" fg:x="450" fg:w="1"/><text x="35.8795%" y="271.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="35.6295%" y="245" width="0.0792%" height="15" fill="rgb(205,19,0)" fg:x="450" fg:w="1"/><text x="35.8795%" y="255.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="35.6295%" y="229" width="0.0792%" height="15" fill="rgb(224,172,32)" fg:x="450" fg:w="1"/><text x="35.8795%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.7086%" y="277" width="0.0792%" height="15" fill="rgb(254,136,30)" fg:x="451" fg:w="1"/><text x="35.9586%" y="287.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="35.7878%" y="261" width="0.1584%" height="15" fill="rgb(246,19,35)" fg:x="452" fg:w="2"/><text x="36.0378%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="35.9462%" y="261" width="0.0792%" height="15" fill="rgb(219,24,36)" fg:x="454" fg:w="1"/><text x="36.1962%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (2 samples, 0.16%)</title><rect x="36.0253%" y="261" width="0.1584%" height="15" fill="rgb(251,55,1)" fg:x="455" fg:w="2"/><text x="36.2753%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="36.0253%" y="245" width="0.1584%" height="15" fill="rgb(218,117,39)" fg:x="455" fg:w="2"/><text x="36.2753%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="36.1045%" y="229" width="0.0792%" height="15" fill="rgb(248,169,11)" fg:x="456" fg:w="1"/><text x="36.3545%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="36.1045%" y="213" width="0.0792%" height="15" fill="rgb(244,40,44)" fg:x="456" fg:w="1"/><text x="36.3545%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="36.1045%" y="197" width="0.0792%" height="15" fill="rgb(234,62,37)" fg:x="456" fg:w="1"/><text x="36.3545%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="36.1045%" y="181" width="0.0792%" height="15" fill="rgb(207,117,42)" fg:x="456" fg:w="1"/><text x="36.3545%" y="191.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="36.1837%" y="261" width="0.0792%" height="15" fill="rgb(213,43,2)" fg:x="457" fg:w="1"/><text x="36.4337%" y="271.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="36.4212%" y="245" width="0.1584%" height="15" fill="rgb(244,202,51)" fg:x="460" fg:w="2"/><text x="36.6712%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (6 samples, 0.48%)</title><rect x="36.5796%" y="245" width="0.4751%" height="15" fill="rgb(253,174,46)" fg:x="462" fg:w="6"/><text x="36.8296%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.48%)</title><rect x="36.5796%" y="229" width="0.4751%" height="15" fill="rgb(251,23,1)" fg:x="462" fg:w="6"/><text x="36.8296%" y="239.50"></text></g><g><title>regex_automata::meta::reverse_inner::extract (1 samples, 0.08%)</title><rect x="37.0546%" y="245" width="0.0792%" height="15" fill="rgb(253,26,1)" fg:x="468" fg:w="1"/><text x="37.3046%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="37.1338%" y="229" width="0.0792%" height="15" fill="rgb(216,89,31)" fg:x="469" fg:w="1"/><text x="37.3838%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (2 samples, 0.16%)</title><rect x="37.1338%" y="245" width="0.1584%" height="15" fill="rgb(209,109,5)" fg:x="469" fg:w="2"/><text x="37.3838%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="37.2130%" y="229" width="0.0792%" height="15" fill="rgb(229,63,13)" fg:x="470" fg:w="1"/><text x="37.4630%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.40%)</title><rect x="37.2922%" y="245" width="0.3959%" height="15" fill="rgb(238,137,54)" fg:x="471" fg:w="5"/><text x="37.5422%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="37.3713%" y="229" width="0.3167%" height="15" fill="rgb(228,1,9)" fg:x="472" fg:w="4"/><text x="37.6213%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="37.6089%" y="213" width="0.0792%" height="15" fill="rgb(249,120,48)" fg:x="475" fg:w="1"/><text x="37.8589%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (3 samples, 0.24%)</title><rect x="37.6880%" y="245" width="0.2375%" height="15" fill="rgb(209,72,36)" fg:x="476" fg:w="3"/><text x="37.9380%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="37.8464%" y="229" width="0.0792%" height="15" fill="rgb(247,98,49)" fg:x="478" fg:w="1"/><text x="38.0964%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="38.0048%" y="197" width="0.0792%" height="15" fill="rgb(233,75,36)" fg:x="480" fg:w="1"/><text x="38.2548%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.0048%" y="181" width="0.0792%" height="15" fill="rgb(225,14,24)" fg:x="480" fg:w="1"/><text x="38.2548%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.0048%" y="165" width="0.0792%" height="15" fill="rgb(237,193,20)" fg:x="480" fg:w="1"/><text x="38.2548%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.0048%" y="149" width="0.0792%" height="15" fill="rgb(239,122,19)" fg:x="480" fg:w="1"/><text x="38.2548%" y="159.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="38.1631%" y="181" width="0.1584%" height="15" fill="rgb(231,220,10)" fg:x="482" fg:w="2"/><text x="38.4131%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="38.3215%" y="181" width="0.1584%" height="15" fill="rgb(220,66,15)" fg:x="484" fg:w="2"/><text x="38.5715%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.4006%" y="165" width="0.0792%" height="15" fill="rgb(215,171,52)" fg:x="485" fg:w="1"/><text x="38.6506%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.4006%" y="149" width="0.0792%" height="15" fill="rgb(241,169,50)" fg:x="485" fg:w="1"/><text x="38.6506%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="38.4006%" y="133" width="0.0792%" height="15" fill="rgb(236,189,0)" fg:x="485" fg:w="1"/><text x="38.6506%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.24%)</title><rect x="38.4798%" y="181" width="0.2375%" height="15" fill="rgb(217,147,20)" fg:x="486" fg:w="3"/><text x="38.7298%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.6382%" y="165" width="0.0792%" height="15" fill="rgb(206,188,39)" fg:x="488" fg:w="1"/><text x="38.8882%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.6382%" y="149" width="0.0792%" height="15" fill="rgb(227,118,25)" fg:x="488" fg:w="1"/><text x="38.8882%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="38.6382%" y="133" width="0.0792%" height="15" fill="rgb(248,171,40)" fg:x="488" fg:w="1"/><text x="38.8882%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="38.7173%" y="181" width="0.1584%" height="15" fill="rgb(251,90,54)" fg:x="489" fg:w="2"/><text x="38.9673%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="38.7965%" y="165" width="0.0792%" height="15" fill="rgb(234,11,46)" fg:x="490" fg:w="1"/><text x="39.0465%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="38.7965%" y="149" width="0.0792%" height="15" fill="rgb(229,134,13)" fg:x="490" fg:w="1"/><text x="39.0465%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="38.7965%" y="133" width="0.0792%" height="15" fill="rgb(223,129,3)" fg:x="490" fg:w="1"/><text x="39.0465%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.7965%" y="117" width="0.0792%" height="15" fill="rgb(221,124,13)" fg:x="490" fg:w="1"/><text x="39.0465%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.7965%" y="101" width="0.0792%" height="15" fill="rgb(234,3,18)" fg:x="490" fg:w="1"/><text x="39.0465%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="38.7965%" y="85" width="0.0792%" height="15" fill="rgb(249,199,20)" fg:x="490" fg:w="1"/><text x="39.0465%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="38.8757%" y="181" width="0.0792%" height="15" fill="rgb(224,134,6)" fg:x="491" fg:w="1"/><text x="39.1257%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="38.8757%" y="165" width="0.0792%" height="15" fill="rgb(254,83,26)" fg:x="491" fg:w="1"/><text x="39.1257%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="38.8757%" y="149" width="0.0792%" height="15" fill="rgb(217,88,9)" fg:x="491" fg:w="1"/><text x="39.1257%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="38.9549%" y="165" width="0.0792%" height="15" fill="rgb(225,73,2)" fg:x="492" fg:w="1"/><text x="39.2049%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.9549%" y="149" width="0.0792%" height="15" fill="rgb(226,44,39)" fg:x="492" fg:w="1"/><text x="39.2049%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.9549%" y="133" width="0.0792%" height="15" fill="rgb(228,53,17)" fg:x="492" fg:w="1"/><text x="39.2049%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="38.9549%" y="117" width="0.0792%" height="15" fill="rgb(212,27,27)" fg:x="492" fg:w="1"/><text x="39.2049%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (33 samples, 2.61%)</title><rect x="38.9549%" y="181" width="2.6128%" height="15" fill="rgb(241,50,6)" fg:x="492" fg:w="33"/><text x="39.2049%" y="191.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (32 samples, 2.53%)</title><rect x="39.0340%" y="165" width="2.5337%" height="15" fill="rgb(225,28,51)" fg:x="493" fg:w="32"/><text x="39.2840%" y="175.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (32 samples, 2.53%)</title><rect x="39.0340%" y="149" width="2.5337%" height="15" fill="rgb(215,33,16)" fg:x="493" fg:w="32"/><text x="39.2840%" y="159.50">al..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (6 samples, 0.48%)</title><rect x="41.5677%" y="181" width="0.4751%" height="15" fill="rgb(243,40,39)" fg:x="525" fg:w="6"/><text x="41.8177%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="41.8844%" y="165" width="0.1584%" height="15" fill="rgb(225,11,42)" fg:x="529" fg:w="2"/><text x="42.1344%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (53 samples, 4.20%)</title><rect x="38.0048%" y="229" width="4.1964%" height="15" fill="rgb(241,220,38)" fg:x="480" fg:w="53"/><text x="38.2548%" y="239.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (53 samples, 4.20%)</title><rect x="38.0048%" y="213" width="4.1964%" height="15" fill="rgb(244,52,35)" fg:x="480" fg:w="53"/><text x="38.2548%" y="223.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (52 samples, 4.12%)</title><rect x="38.0839%" y="197" width="4.1172%" height="15" fill="rgb(246,42,46)" fg:x="481" fg:w="52"/><text x="38.3339%" y="207.50">rege..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="42.0428%" y="181" width="0.1584%" height="15" fill="rgb(205,184,13)" fg:x="531" fg:w="2"/><text x="42.2928%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="42.0428%" y="165" width="0.1584%" height="15" fill="rgb(209,48,36)" fg:x="531" fg:w="2"/><text x="42.2928%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="42.1219%" y="149" width="0.0792%" height="15" fill="rgb(244,34,51)" fg:x="532" fg:w="1"/><text x="42.3719%" y="159.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="42.1219%" y="133" width="0.0792%" height="15" fill="rgb(221,107,33)" fg:x="532" fg:w="1"/><text x="42.3719%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="42.1219%" y="117" width="0.0792%" height="15" fill="rgb(224,203,12)" fg:x="532" fg:w="1"/><text x="42.3719%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="42.2011%" y="213" width="0.2375%" height="15" fill="rgb(230,215,18)" fg:x="533" fg:w="3"/><text x="42.4511%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="42.3595%" y="197" width="0.0792%" height="15" fill="rgb(206,185,35)" fg:x="535" fg:w="1"/><text x="42.6095%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="42.3595%" y="181" width="0.0792%" height="15" fill="rgb(228,140,34)" fg:x="535" fg:w="1"/><text x="42.6095%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="42.3595%" y="165" width="0.0792%" height="15" fill="rgb(208,93,13)" fg:x="535" fg:w="1"/><text x="42.6095%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="42.7553%" y="197" width="0.1584%" height="15" fill="rgb(221,193,39)" fg:x="540" fg:w="2"/><text x="43.0053%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="42.7553%" y="181" width="0.1584%" height="15" fill="rgb(241,132,34)" fg:x="540" fg:w="2"/><text x="43.0053%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="42.7553%" y="165" width="0.1584%" height="15" fill="rgb(221,141,10)" fg:x="540" fg:w="2"/><text x="43.0053%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.55%)</title><rect x="42.4386%" y="213" width="0.5542%" height="15" fill="rgb(226,90,31)" fg:x="536" fg:w="7"/><text x="42.6886%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="42.9137%" y="197" width="0.0792%" height="15" fill="rgb(243,75,5)" fg:x="542" fg:w="1"/><text x="43.1637%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="42.9929%" y="213" width="0.1584%" height="15" fill="rgb(227,156,21)" fg:x="543" fg:w="2"/><text x="43.2429%" y="223.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="43.2304%" y="197" width="0.1584%" height="15" fill="rgb(250,195,8)" fg:x="546" fg:w="2"/><text x="43.4804%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (16 samples, 1.27%)</title><rect x="42.2011%" y="229" width="1.2668%" height="15" fill="rgb(220,134,5)" fg:x="533" fg:w="16"/><text x="42.4511%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (4 samples, 0.32%)</title><rect x="43.1512%" y="213" width="0.3167%" height="15" fill="rgb(246,106,34)" fg:x="545" fg:w="4"/><text x="43.4012%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::fixup_slot_ranges (1 samples, 0.08%)</title><rect x="43.3888%" y="197" width="0.0792%" height="15" fill="rgb(205,1,4)" fg:x="548" fg:w="1"/><text x="43.6388%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="43.4679%" y="229" width="0.0792%" height="15" fill="rgb(224,151,29)" fg:x="549" fg:w="1"/><text x="43.7179%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="43.5471%" y="213" width="0.0792%" height="15" fill="rgb(251,196,0)" fg:x="550" fg:w="1"/><text x="43.7971%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (73 samples, 5.78%)</title><rect x="37.9256%" y="245" width="5.7799%" height="15" fill="rgb(212,127,0)" fg:x="479" fg:w="73"/><text x="38.1756%" y="255.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (2 samples, 0.16%)</title><rect x="43.5471%" y="229" width="0.1584%" height="15" fill="rgb(236,71,53)" fg:x="550" fg:w="2"/><text x="43.7971%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="43.6263%" y="213" width="0.0792%" height="15" fill="rgb(227,99,0)" fg:x="551" fg:w="1"/><text x="43.8763%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="43.7055%" y="245" width="0.0792%" height="15" fill="rgb(239,89,21)" fg:x="552" fg:w="1"/><text x="43.9555%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="43.7055%" y="229" width="0.0792%" height="15" fill="rgb(243,122,19)" fg:x="552" fg:w="1"/><text x="43.9555%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="43.7055%" y="213" width="0.0792%" height="15" fill="rgb(229,192,45)" fg:x="552" fg:w="1"/><text x="43.9555%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (98 samples, 7.76%)</title><rect x="36.2629%" y="261" width="7.7593%" height="15" fill="rgb(235,165,35)" fg:x="458" fg:w="98"/><text x="36.5129%" y="271.50">regex_autom..</text></g><g><title>regex_automata::util::prefilter::suffixes (3 samples, 0.24%)</title><rect x="43.7846%" y="245" width="0.2375%" height="15" fill="rgb(253,202,0)" fg:x="553" fg:w="3"/><text x="44.0346%" y="255.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (3 samples, 0.24%)</title><rect x="43.7846%" y="229" width="0.2375%" height="15" fill="rgb(235,51,20)" fg:x="553" fg:w="3"/><text x="44.0346%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="44.0222%" y="197" width="0.1584%" height="15" fill="rgb(218,95,46)" fg:x="556" fg:w="2"/><text x="44.2722%" y="207.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="44.1013%" y="181" width="0.0792%" height="15" fill="rgb(212,81,10)" fg:x="557" fg:w="1"/><text x="44.3513%" y="191.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="44.1805%" y="197" width="0.0792%" height="15" fill="rgb(240,59,0)" fg:x="558" fg:w="1"/><text x="44.4305%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (4 samples, 0.32%)</title><rect x="44.0222%" y="213" width="0.3167%" height="15" fill="rgb(212,191,42)" fg:x="556" fg:w="4"/><text x="44.2722%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="44.2597%" y="197" width="0.0792%" height="15" fill="rgb(233,140,3)" fg:x="559" fg:w="1"/><text x="44.5097%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (7 samples, 0.55%)</title><rect x="44.0222%" y="229" width="0.5542%" height="15" fill="rgb(215,69,23)" fg:x="556" fg:w="7"/><text x="44.2722%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="44.3389%" y="213" width="0.2375%" height="15" fill="rgb(240,202,20)" fg:x="560" fg:w="3"/><text x="44.5889%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="44.3389%" y="197" width="0.2375%" height="15" fill="rgb(209,146,50)" fg:x="560" fg:w="3"/><text x="44.5889%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="44.4181%" y="181" width="0.1584%" height="15" fill="rgb(253,102,54)" fg:x="561" fg:w="2"/><text x="44.6681%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="44.4181%" y="165" width="0.1584%" height="15" fill="rgb(250,173,47)" fg:x="561" fg:w="2"/><text x="44.6681%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.63%)</title><rect x="44.0222%" y="261" width="0.6334%" height="15" fill="rgb(232,142,7)" fg:x="556" fg:w="8"/><text x="44.2722%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.63%)</title><rect x="44.0222%" y="245" width="0.6334%" height="15" fill="rgb(230,157,47)" fg:x="556" fg:w="8"/><text x="44.2722%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="44.5764%" y="229" width="0.0792%" height="15" fill="rgb(214,177,35)" fg:x="563" fg:w="1"/><text x="44.8264%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="44.5764%" y="213" width="0.0792%" height="15" fill="rgb(234,119,46)" fg:x="563" fg:w="1"/><text x="44.8264%" y="223.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (115 samples, 9.11%)</title><rect x="35.7878%" y="277" width="9.1053%" height="15" fill="rgb(241,180,50)" fg:x="452" fg:w="115"/><text x="36.0378%" y="287.50">regex_automat..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="44.6556%" y="261" width="0.2375%" height="15" fill="rgb(221,54,25)" fg:x="564" fg:w="3"/><text x="44.9056%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="44.6556%" y="245" width="0.2375%" height="15" fill="rgb(209,157,44)" fg:x="564" fg:w="3"/><text x="44.9056%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="44.6556%" y="229" width="0.2375%" height="15" fill="rgb(246,115,41)" fg:x="564" fg:w="3"/><text x="44.9056%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (2 samples, 0.16%)</title><rect x="44.7348%" y="213" width="0.1584%" height="15" fill="rgb(229,86,1)" fg:x="565" fg:w="2"/><text x="44.9848%" y="223.50"></text></g><g><title>regex_syntax::unicode::perl_space (1 samples, 0.08%)</title><rect x="44.8139%" y="197" width="0.0792%" height="15" fill="rgb(240,108,53)" fg:x="566" fg:w="1"/><text x="45.0639%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.8139%" y="181" width="0.0792%" height="15" fill="rgb(227,134,2)" fg:x="566" fg:w="1"/><text x="45.0639%" y="191.50"></text></g><g><title>regex_automata::meta::regex::Builder::configure (1 samples, 0.08%)</title><rect x="44.8931%" y="277" width="0.0792%" height="15" fill="rgb(213,129,25)" fg:x="567" fg:w="1"/><text x="45.1431%" y="287.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (119 samples, 9.42%)</title><rect x="35.6295%" y="309" width="9.4220%" height="15" fill="rgb(226,35,21)" fg:x="450" fg:w="119"/><text x="35.8795%" y="319.50">&lt;regex::regex..</text></g><g><title>regex::builders::Builder::build_one_string (118 samples, 9.34%)</title><rect x="35.7086%" y="293" width="9.3428%" height="15" fill="rgb(208,129,26)" fg:x="451" fg:w="118"/><text x="35.9586%" y="303.50">regex::builde..</text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="44.9723%" y="277" width="0.0792%" height="15" fill="rgb(224,83,6)" fg:x="568" fg:w="1"/><text x="45.2223%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="45.0515%" y="229" width="0.0792%" height="15" fill="rgb(227,52,39)" fg:x="569" fg:w="1"/><text x="45.3015%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.0515%" y="213" width="0.0792%" height="15" fill="rgb(241,30,17)" fg:x="569" fg:w="1"/><text x="45.3015%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="45.0515%" y="277" width="0.1584%" height="15" fill="rgb(246,186,42)" fg:x="569" fg:w="2"/><text x="45.3015%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="45.0515%" y="261" width="0.1584%" height="15" fill="rgb(221,169,15)" fg:x="569" fg:w="2"/><text x="45.3015%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="45.0515%" y="245" width="0.1584%" height="15" fill="rgb(235,108,21)" fg:x="569" fg:w="2"/><text x="45.3015%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.1306%" y="229" width="0.0792%" height="15" fill="rgb(219,148,30)" fg:x="570" fg:w="1"/><text x="45.3806%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="45.0515%" y="309" width="0.2375%" height="15" fill="rgb(220,109,5)" fg:x="569" fg:w="3"/><text x="45.3015%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="45.0515%" y="293" width="0.2375%" height="15" fill="rgb(213,203,48)" fg:x="569" fg:w="3"/><text x="45.3015%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="45.2098%" y="277" width="0.0792%" height="15" fill="rgb(244,71,33)" fg:x="571" fg:w="1"/><text x="45.4598%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="45.2098%" y="261" width="0.0792%" height="15" fill="rgb(209,23,2)" fg:x="571" fg:w="1"/><text x="45.4598%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="45.7641%" y="229" width="0.2375%" height="15" fill="rgb(219,97,7)" fg:x="578" fg:w="3"/><text x="46.0141%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="45.8432%" y="213" width="0.1584%" height="15" fill="rgb(216,161,23)" fg:x="579" fg:w="2"/><text x="46.0932%" y="223.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="45.8432%" y="197" width="0.1584%" height="15" fill="rgb(207,45,42)" fg:x="579" fg:w="2"/><text x="46.0932%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="46.0016%" y="229" width="0.1584%" height="15" fill="rgb(241,61,4)" fg:x="581" fg:w="2"/><text x="46.2516%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="46.0808%" y="213" width="0.0792%" height="15" fill="rgb(236,170,1)" fg:x="582" fg:w="1"/><text x="46.3308%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="46.0808%" y="197" width="0.0792%" height="15" fill="rgb(239,72,5)" fg:x="582" fg:w="1"/><text x="46.3308%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (12 samples, 0.95%)</title><rect x="45.2890%" y="261" width="0.9501%" height="15" fill="rgb(214,13,50)" fg:x="572" fg:w="12"/><text x="45.5390%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (11 samples, 0.87%)</title><rect x="45.3682%" y="245" width="0.8709%" height="15" fill="rgb(224,88,9)" fg:x="573" fg:w="11"/><text x="45.6182%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="46.1599%" y="229" width="0.0792%" height="15" fill="rgb(238,192,34)" fg:x="583" fg:w="1"/><text x="46.4099%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (139 samples, 11.01%)</title><rect x="35.3127%" y="325" width="11.0055%" height="15" fill="rgb(217,203,50)" fg:x="446" fg:w="139"/><text x="35.5627%" y="335.50">indefinite::help..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (13 samples, 1.03%)</title><rect x="45.2890%" y="309" width="1.0293%" height="15" fill="rgb(241,123,32)" fg:x="572" fg:w="13"/><text x="45.5390%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (13 samples, 1.03%)</title><rect x="45.2890%" y="293" width="1.0293%" height="15" fill="rgb(248,151,39)" fg:x="572" fg:w="13"/><text x="45.5390%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (13 samples, 1.03%)</title><rect x="45.2890%" y="277" width="1.0293%" height="15" fill="rgb(208,89,6)" fg:x="572" fg:w="13"/><text x="45.5390%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="46.2391%" y="261" width="0.0792%" height="15" fill="rgb(254,43,26)" fg:x="584" fg:w="1"/><text x="46.4891%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="46.2391%" y="245" width="0.0792%" height="15" fill="rgb(216,158,13)" fg:x="584" fg:w="1"/><text x="46.4891%" y="255.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="46.3975%" y="293" width="0.0792%" height="15" fill="rgb(212,47,37)" fg:x="586" fg:w="1"/><text x="46.6475%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="46.5558%" y="229" width="0.0792%" height="15" fill="rgb(254,16,10)" fg:x="588" fg:w="1"/><text x="46.8058%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="46.5558%" y="261" width="0.1584%" height="15" fill="rgb(223,228,16)" fg:x="588" fg:w="2"/><text x="46.8058%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="46.5558%" y="245" width="0.1584%" height="15" fill="rgb(249,108,50)" fg:x="588" fg:w="2"/><text x="46.8058%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::hir::Hir&gt;&gt; (1 samples, 0.08%)</title><rect x="46.6350%" y="229" width="0.0792%" height="15" fill="rgb(208,220,5)" fg:x="589" fg:w="1"/><text x="46.8850%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="46.6350%" y="213" width="0.0792%" height="15" fill="rgb(217,89,48)" fg:x="589" fg:w="1"/><text x="46.8850%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="46.7142%" y="261" width="0.0792%" height="15" fill="rgb(212,113,41)" fg:x="590" fg:w="1"/><text x="46.9642%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="46.8725%" y="229" width="0.0792%" height="15" fill="rgb(231,127,5)" fg:x="592" fg:w="1"/><text x="47.1225%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="46.8725%" y="213" width="0.0792%" height="15" fill="rgb(217,141,17)" fg:x="592" fg:w="1"/><text x="47.1225%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.8725%" y="197" width="0.0792%" height="15" fill="rgb(245,125,54)" fg:x="592" fg:w="1"/><text x="47.1225%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="46.8725%" y="181" width="0.0792%" height="15" fill="rgb(248,125,3)" fg:x="592" fg:w="1"/><text x="47.1225%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="46.9517%" y="229" width="0.0792%" height="15" fill="rgb(236,119,51)" fg:x="593" fg:w="1"/><text x="47.2017%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="46.9517%" y="213" width="0.0792%" height="15" fill="rgb(239,99,8)" fg:x="593" fg:w="1"/><text x="47.2017%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="46.9517%" y="197" width="0.0792%" height="15" fill="rgb(224,228,4)" fg:x="593" fg:w="1"/><text x="47.2017%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.32%)</title><rect x="46.7933%" y="261" width="0.3167%" height="15" fill="rgb(220,131,45)" fg:x="591" fg:w="4"/><text x="47.0433%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="46.7933%" y="245" width="0.3167%" height="15" fill="rgb(215,62,5)" fg:x="591" fg:w="4"/><text x="47.0433%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="47.0309%" y="229" width="0.0792%" height="15" fill="rgb(253,12,24)" fg:x="594" fg:w="1"/><text x="47.2809%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="47.0309%" y="213" width="0.0792%" height="15" fill="rgb(248,120,50)" fg:x="594" fg:w="1"/><text x="47.2809%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="47.0309%" y="197" width="0.0792%" height="15" fill="rgb(245,194,10)" fg:x="594" fg:w="1"/><text x="47.2809%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="47.0309%" y="181" width="0.0792%" height="15" fill="rgb(241,149,38)" fg:x="594" fg:w="1"/><text x="47.2809%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.0309%" y="165" width="0.0792%" height="15" fill="rgb(219,215,7)" fg:x="594" fg:w="1"/><text x="47.2809%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="47.0309%" y="149" width="0.0792%" height="15" fill="rgb(208,120,31)" fg:x="594" fg:w="1"/><text x="47.2809%" y="159.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.1101%" y="229" width="0.0792%" height="15" fill="rgb(244,30,8)" fg:x="595" fg:w="1"/><text x="47.3601%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (10 samples, 0.79%)</title><rect x="47.1101%" y="245" width="0.7918%" height="15" fill="rgb(238,35,44)" fg:x="595" fg:w="10"/><text x="47.3601%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (9 samples, 0.71%)</title><rect x="47.1892%" y="229" width="0.7126%" height="15" fill="rgb(243,218,37)" fg:x="596" fg:w="9"/><text x="47.4392%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="47.9810%" y="229" width="0.3167%" height="15" fill="rgb(218,169,10)" fg:x="606" fg:w="4"/><text x="48.2310%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="48.2185%" y="213" width="0.0792%" height="15" fill="rgb(221,144,10)" fg:x="609" fg:w="1"/><text x="48.4685%" y="223.50"></text></g><g><title>alloc::sync::arcinner_layout_for_value_layout (1 samples, 0.08%)</title><rect x="48.2185%" y="197" width="0.0792%" height="15" fill="rgb(226,41,38)" fg:x="609" fg:w="1"/><text x="48.4685%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::pad_to_align (1 samples, 0.08%)</title><rect x="48.2185%" y="181" width="0.0792%" height="15" fill="rgb(228,3,1)" fg:x="609" fg:w="1"/><text x="48.4685%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::padding_needed_for (1 samples, 0.08%)</title><rect x="48.2185%" y="165" width="0.0792%" height="15" fill="rgb(209,129,12)" fg:x="609" fg:w="1"/><text x="48.4685%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.08%)</title><rect x="48.2185%" y="149" width="0.0792%" height="15" fill="rgb(213,136,33)" fg:x="609" fg:w="1"/><text x="48.4685%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="47.9018%" y="245" width="0.4751%" height="15" fill="rgb(209,181,29)" fg:x="605" fg:w="6"/><text x="48.1518%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="48.2977%" y="229" width="0.0792%" height="15" fill="rgb(234,173,18)" fg:x="610" fg:w="1"/><text x="48.5477%" y="239.50"></text></g><g><title>regex_syntax::parser::ParserBuilder::new (1 samples, 0.08%)</title><rect x="48.2977%" y="213" width="0.0792%" height="15" fill="rgb(227,73,47)" fg:x="610" fg:w="1"/><text x="48.5477%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="48.4561%" y="213" width="0.0792%" height="15" fill="rgb(234,9,34)" fg:x="612" fg:w="1"/><text x="48.7061%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.4561%" y="197" width="0.0792%" height="15" fill="rgb(235,172,15)" fg:x="612" fg:w="1"/><text x="48.7061%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="48.5352%" y="213" width="0.1584%" height="15" fill="rgb(245,61,2)" fg:x="613" fg:w="2"/><text x="48.7852%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="48.5352%" y="197" width="0.1584%" height="15" fill="rgb(238,39,47)" fg:x="613" fg:w="2"/><text x="48.7852%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="48.5352%" y="181" width="0.1584%" height="15" fill="rgb(234,37,24)" fg:x="613" fg:w="2"/><text x="48.7852%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="48.5352%" y="165" width="0.1584%" height="15" fill="rgb(248,223,24)" fg:x="613" fg:w="2"/><text x="48.7852%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (10 samples, 0.79%)</title><rect x="48.6936%" y="213" width="0.7918%" height="15" fill="rgb(223,12,15)" fg:x="615" fg:w="10"/><text x="48.9436%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (6 samples, 0.48%)</title><rect x="49.0103%" y="197" width="0.4751%" height="15" fill="rgb(249,6,3)" fg:x="619" fg:w="6"/><text x="49.2603%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.40%)</title><rect x="49.0895%" y="181" width="0.3959%" height="15" fill="rgb(237,105,33)" fg:x="620" fg:w="5"/><text x="49.3395%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="49.0895%" y="165" width="0.3959%" height="15" fill="rgb(252,208,35)" fg:x="620" fg:w="5"/><text x="49.3395%" y="175.50"></text></g><g><title>realloc (5 samples, 0.40%)</title><rect x="49.0895%" y="149" width="0.3959%" height="15" fill="rgb(215,181,35)" fg:x="620" fg:w="5"/><text x="49.3395%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="49.4854%" y="181" width="0.0792%" height="15" fill="rgb(246,212,3)" fg:x="625" fg:w="1"/><text x="49.7354%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (23 samples, 1.82%)</title><rect x="48.3769%" y="245" width="1.8211%" height="15" fill="rgb(247,156,24)" fg:x="611" fg:w="23"/><text x="48.6269%" y="255.50">r..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (23 samples, 1.82%)</title><rect x="48.3769%" y="229" width="1.8211%" height="15" fill="rgb(248,9,31)" fg:x="611" fg:w="23"/><text x="48.6269%" y="239.50">r..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (9 samples, 0.71%)</title><rect x="49.4854%" y="213" width="0.7126%" height="15" fill="rgb(234,26,45)" fg:x="625" fg:w="9"/><text x="49.7354%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (9 samples, 0.71%)</title><rect x="49.4854%" y="197" width="0.7126%" height="15" fill="rgb(249,11,32)" fg:x="625" fg:w="9"/><text x="49.7354%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (8 samples, 0.63%)</title><rect x="49.5645%" y="181" width="0.6334%" height="15" fill="rgb(249,162,33)" fg:x="626" fg:w="8"/><text x="49.8145%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="50.1979%" y="181" width="0.1584%" height="15" fill="rgb(232,4,32)" fg:x="634" fg:w="2"/><text x="50.4479%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="50.1979%" y="165" width="0.1584%" height="15" fill="rgb(212,5,45)" fg:x="634" fg:w="2"/><text x="50.4479%" y="175.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="50.1979%" y="149" width="0.1584%" height="15" fill="rgb(227,95,13)" fg:x="634" fg:w="2"/><text x="50.4479%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (3 samples, 0.24%)</title><rect x="50.1979%" y="197" width="0.2375%" height="15" fill="rgb(223,205,10)" fg:x="634" fg:w="3"/><text x="50.4479%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="50.3563%" y="181" width="0.0792%" height="15" fill="rgb(222,178,8)" fg:x="636" fg:w="1"/><text x="50.6063%" y="191.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="51.1481%" y="133" width="0.2375%" height="15" fill="rgb(216,13,22)" fg:x="646" fg:w="3"/><text x="51.3981%" y="143.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="51.3856%" y="133" width="0.1584%" height="15" fill="rgb(240,167,12)" fg:x="649" fg:w="2"/><text x="51.6356%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="51.5439%" y="133" width="0.2375%" height="15" fill="rgb(235,68,35)" fg:x="651" fg:w="3"/><text x="51.7939%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="51.7023%" y="117" width="0.0792%" height="15" fill="rgb(253,40,27)" fg:x="653" fg:w="1"/><text x="51.9523%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.7023%" y="101" width="0.0792%" height="15" fill="rgb(214,19,28)" fg:x="653" fg:w="1"/><text x="51.9523%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="51.7023%" y="85" width="0.0792%" height="15" fill="rgb(210,167,45)" fg:x="653" fg:w="1"/><text x="51.9523%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.24%)</title><rect x="51.7815%" y="133" width="0.2375%" height="15" fill="rgb(232,97,40)" fg:x="654" fg:w="3"/><text x="52.0315%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="51.9398%" y="117" width="0.0792%" height="15" fill="rgb(250,35,23)" fg:x="656" fg:w="1"/><text x="52.1898%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.9398%" y="101" width="0.0792%" height="15" fill="rgb(248,47,53)" fg:x="656" fg:w="1"/><text x="52.1898%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="51.9398%" y="85" width="0.0792%" height="15" fill="rgb(226,58,50)" fg:x="656" fg:w="1"/><text x="52.1898%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.4941%" y="69" width="0.0792%" height="15" fill="rgb(217,105,26)" fg:x="663" fg:w="1"/><text x="52.7441%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="52.4941%" y="101" width="0.1584%" height="15" fill="rgb(208,64,1)" fg:x="663" fg:w="2"/><text x="52.7441%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="52.4941%" y="85" width="0.1584%" height="15" fill="rgb(214,80,1)" fg:x="663" fg:w="2"/><text x="52.7441%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="52.5732%" y="69" width="0.0792%" height="15" fill="rgb(206,175,26)" fg:x="664" fg:w="1"/><text x="52.8232%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.8899%" y="85" width="0.0792%" height="15" fill="rgb(235,156,37)" fg:x="668" fg:w="1"/><text x="53.1399%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (15 samples, 1.19%)</title><rect x="52.0190%" y="133" width="1.1876%" height="15" fill="rgb(213,100,9)" fg:x="657" fg:w="15"/><text x="52.2690%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (13 samples, 1.03%)</title><rect x="52.1774%" y="117" width="1.0293%" height="15" fill="rgb(241,15,13)" fg:x="659" fg:w="13"/><text x="52.4274%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (7 samples, 0.55%)</title><rect x="52.6524%" y="101" width="0.5542%" height="15" fill="rgb(205,97,43)" fg:x="665" fg:w="7"/><text x="52.9024%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="52.9691%" y="85" width="0.2375%" height="15" fill="rgb(216,106,32)" fg:x="669" fg:w="3"/><text x="53.2191%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="53.0483%" y="69" width="0.1584%" height="15" fill="rgb(226,200,8)" fg:x="670" fg:w="2"/><text x="53.2983%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="53.0483%" y="53" width="0.1584%" height="15" fill="rgb(244,54,29)" fg:x="670" fg:w="2"/><text x="53.2983%" y="63.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="53.0483%" y="37" width="0.1584%" height="15" fill="rgb(252,169,12)" fg:x="670" fg:w="2"/><text x="53.2983%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="53.2067%" y="133" width="0.0792%" height="15" fill="rgb(231,199,11)" fg:x="672" fg:w="1"/><text x="53.4567%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="53.2067%" y="117" width="0.0792%" height="15" fill="rgb(233,191,18)" fg:x="672" fg:w="1"/><text x="53.4567%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="53.2067%" y="101" width="0.0792%" height="15" fill="rgb(215,83,47)" fg:x="672" fg:w="1"/><text x="53.4567%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (57 samples, 4.51%)</title><rect x="53.2858%" y="133" width="4.5131%" height="15" fill="rgb(251,67,19)" fg:x="673" fg:w="57"/><text x="53.5358%" y="143.50">regex..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (57 samples, 4.51%)</title><rect x="53.2858%" y="117" width="4.5131%" height="15" fill="rgb(240,7,20)" fg:x="673" fg:w="57"/><text x="53.5358%" y="127.50">regex..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (57 samples, 4.51%)</title><rect x="53.2858%" y="101" width="4.5131%" height="15" fill="rgb(210,150,26)" fg:x="673" fg:w="57"/><text x="53.5358%" y="111.50">alloc..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (5 samples, 0.40%)</title><rect x="57.7989%" y="133" width="0.3959%" height="15" fill="rgb(228,75,42)" fg:x="730" fg:w="5"/><text x="58.0489%" y="143.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="58.1948%" y="133" width="0.0792%" height="15" fill="rgb(237,134,48)" fg:x="735" fg:w="1"/><text x="58.4448%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (105 samples, 8.31%)</title><rect x="50.1979%" y="229" width="8.3135%" height="15" fill="rgb(205,80,50)" fg:x="634" fg:w="105"/><text x="50.4479%" y="239.50">&lt;core::iter:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (105 samples, 8.31%)</title><rect x="50.1979%" y="213" width="8.3135%" height="15" fill="rgb(217,74,48)" fg:x="634" fg:w="105"/><text x="50.4479%" y="223.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (102 samples, 8.08%)</title><rect x="50.4355%" y="197" width="8.0760%" height="15" fill="rgb(205,82,50)" fg:x="637" fg:w="102"/><text x="50.6855%" y="207.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (101 samples, 8.00%)</title><rect x="50.5146%" y="181" width="7.9968%" height="15" fill="rgb(228,1,33)" fg:x="638" fg:w="101"/><text x="50.7646%" y="191.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (101 samples, 8.00%)</title><rect x="50.5146%" y="165" width="7.9968%" height="15" fill="rgb(214,50,23)" fg:x="638" fg:w="101"/><text x="50.7646%" y="175.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (101 samples, 8.00%)</title><rect x="50.5146%" y="149" width="7.9968%" height="15" fill="rgb(210,62,9)" fg:x="638" fg:w="101"/><text x="50.7646%" y="159.50">regex_autom..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.24%)</title><rect x="58.2740%" y="133" width="0.2375%" height="15" fill="rgb(210,104,37)" fg:x="736" fg:w="3"/><text x="58.5240%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.4323%" y="117" width="0.0792%" height="15" fill="rgb(232,104,43)" fg:x="738" fg:w="1"/><text x="58.6823%" y="127.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.7490%" y="213" width="0.0792%" height="15" fill="rgb(244,52,6)" fg:x="742" fg:w="1"/><text x="58.9990%" y="223.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="58.8282%" y="213" width="0.1584%" height="15" fill="rgb(211,174,52)" fg:x="743" fg:w="2"/><text x="59.0782%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (9 samples, 0.71%)</title><rect x="58.9865%" y="213" width="0.7126%" height="15" fill="rgb(229,48,4)" fg:x="745" fg:w="9"/><text x="59.2365%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="59.4616%" y="197" width="0.2375%" height="15" fill="rgb(205,155,16)" fg:x="751" fg:w="3"/><text x="59.7116%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="59.4616%" y="181" width="0.2375%" height="15" fill="rgb(211,141,53)" fg:x="751" fg:w="3"/><text x="59.7116%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="59.5408%" y="165" width="0.1584%" height="15" fill="rgb(240,148,11)" fg:x="752" fg:w="2"/><text x="59.7908%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="59.6991%" y="213" width="0.2375%" height="15" fill="rgb(214,45,23)" fg:x="754" fg:w="3"/><text x="59.9491%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (124 samples, 9.82%)</title><rect x="50.1979%" y="245" width="9.8179%" height="15" fill="rgb(248,74,26)" fg:x="634" fg:w="124"/><text x="50.4479%" y="255.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (19 samples, 1.50%)</title><rect x="58.5115%" y="229" width="1.5044%" height="15" fill="rgb(218,121,16)" fg:x="739" fg:w="19"/><text x="58.7615%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="59.9367%" y="213" width="0.0792%" height="15" fill="rgb(218,10,47)" fg:x="757" fg:w="1"/><text x="60.1867%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.9367%" y="197" width="0.0792%" height="15" fill="rgb(227,99,14)" fg:x="757" fg:w="1"/><text x="60.1867%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.9367%" y="181" width="0.0792%" height="15" fill="rgb(229,83,46)" fg:x="757" fg:w="1"/><text x="60.1867%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="59.9367%" y="165" width="0.0792%" height="15" fill="rgb(228,25,1)" fg:x="757" fg:w="1"/><text x="60.1867%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (164 samples, 12.98%)</title><rect x="47.1101%" y="261" width="12.9850%" height="15" fill="rgb(252,190,15)" fg:x="595" fg:w="164"/><text x="47.3601%" y="271.50">regex_automata::meta..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="60.0158%" y="245" width="0.0792%" height="15" fill="rgb(213,103,51)" fg:x="758" fg:w="1"/><text x="60.2658%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="60.1742%" y="213" width="0.0792%" height="15" fill="rgb(220,38,44)" fg:x="760" fg:w="1"/><text x="60.4242%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="60.1742%" y="229" width="0.2375%" height="15" fill="rgb(210,45,26)" fg:x="760" fg:w="3"/><text x="60.4242%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="60.2534%" y="213" width="0.1584%" height="15" fill="rgb(205,95,48)" fg:x="761" fg:w="2"/><text x="60.5034%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="60.2534%" y="197" width="0.1584%" height="15" fill="rgb(225,179,37)" fg:x="761" fg:w="2"/><text x="60.5034%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="60.2534%" y="181" width="0.1584%" height="15" fill="rgb(230,209,3)" fg:x="761" fg:w="2"/><text x="60.5034%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="60.2534%" y="165" width="0.1584%" height="15" fill="rgb(248,12,46)" fg:x="761" fg:w="2"/><text x="60.5034%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="60.4117%" y="229" width="0.0792%" height="15" fill="rgb(234,18,0)" fg:x="763" fg:w="1"/><text x="60.6617%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="60.0950%" y="261" width="0.4751%" height="15" fill="rgb(238,197,14)" fg:x="759" fg:w="6"/><text x="60.3450%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.48%)</title><rect x="60.0950%" y="245" width="0.4751%" height="15" fill="rgb(251,162,48)" fg:x="759" fg:w="6"/><text x="60.3450%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="60.4909%" y="229" width="0.0792%" height="15" fill="rgb(237,73,42)" fg:x="764" fg:w="1"/><text x="60.7409%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (5 samples, 0.40%)</title><rect x="60.6492%" y="213" width="0.3959%" height="15" fill="rgb(211,108,8)" fg:x="766" fg:w="5"/><text x="60.8992%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.16%)</title><rect x="60.8868%" y="197" width="0.1584%" height="15" fill="rgb(213,45,22)" fg:x="769" fg:w="2"/><text x="61.1368%" y="207.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="60.8868%" y="181" width="0.1584%" height="15" fill="rgb(252,154,5)" fg:x="769" fg:w="2"/><text x="61.1368%" y="191.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="61.0451%" y="213" width="0.0792%" height="15" fill="rgb(221,79,52)" fg:x="771" fg:w="1"/><text x="61.2951%" y="223.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="61.0451%" y="197" width="0.0792%" height="15" fill="rgb(229,220,36)" fg:x="771" fg:w="1"/><text x="61.2951%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="61.0451%" y="181" width="0.0792%" height="15" fill="rgb(211,17,16)" fg:x="771" fg:w="1"/><text x="61.2951%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (8 samples, 0.63%)</title><rect x="60.5701%" y="229" width="0.6334%" height="15" fill="rgb(222,55,31)" fg:x="765" fg:w="8"/><text x="60.8201%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="61.1243%" y="213" width="0.0792%" height="15" fill="rgb(221,221,31)" fg:x="772" fg:w="1"/><text x="61.3743%" y="223.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (191 samples, 15.12%)</title><rect x="46.4766%" y="277" width="15.1227%" height="15" fill="rgb(227,168,26)" fg:x="587" fg:w="191"/><text x="46.7266%" y="287.50">regex_automata::meta::r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (13 samples, 1.03%)</title><rect x="60.5701%" y="261" width="1.0293%" height="15" fill="rgb(224,139,9)" fg:x="765" fg:w="13"/><text x="60.8201%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (13 samples, 1.03%)</title><rect x="60.5701%" y="245" width="1.0293%" height="15" fill="rgb(254,172,0)" fg:x="765" fg:w="13"/><text x="60.8201%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (5 samples, 0.40%)</title><rect x="61.2035%" y="229" width="0.3959%" height="15" fill="rgb(235,203,1)" fg:x="773" fg:w="5"/><text x="61.4535%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="61.5202%" y="213" width="0.0792%" height="15" fill="rgb(216,205,24)" fg:x="777" fg:w="1"/><text x="61.7702%" y="223.50"></text></g><g><title>regex_syntax::hir::ClassUnicode::literal (1 samples, 0.08%)</title><rect x="61.5202%" y="197" width="0.0792%" height="15" fill="rgb(233,24,6)" fg:x="777" fg:w="1"/><text x="61.7702%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (193 samples, 15.28%)</title><rect x="46.3975%" y="309" width="15.2811%" height="15" fill="rgb(244,110,9)" fg:x="586" fg:w="193"/><text x="46.6475%" y="319.50">&lt;regex::regex::string::..</text></g><g><title>regex::builders::Builder::build_one_string (192 samples, 15.20%)</title><rect x="46.4766%" y="293" width="15.2019%" height="15" fill="rgb(239,222,42)" fg:x="587" fg:w="192"/><text x="46.7266%" y="303.50">regex::builders::Builde..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="61.5994%" y="277" width="0.0792%" height="15" fill="rgb(218,145,13)" fg:x="778" fg:w="1"/><text x="61.8494%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="61.7577%" y="261" width="0.0792%" height="15" fill="rgb(207,69,11)" fg:x="780" fg:w="1"/><text x="62.0077%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.7577%" y="245" width="0.0792%" height="15" fill="rgb(220,223,22)" fg:x="780" fg:w="1"/><text x="62.0077%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="61.7577%" y="277" width="0.1584%" height="15" fill="rgb(245,102,5)" fg:x="780" fg:w="2"/><text x="62.0077%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="61.8369%" y="261" width="0.0792%" height="15" fill="rgb(211,148,2)" fg:x="781" fg:w="1"/><text x="62.0869%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="61.8369%" y="245" width="0.0792%" height="15" fill="rgb(241,13,44)" fg:x="781" fg:w="1"/><text x="62.0869%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.8369%" y="229" width="0.0792%" height="15" fill="rgb(219,137,21)" fg:x="781" fg:w="1"/><text x="62.0869%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="61.6785%" y="309" width="0.3167%" height="15" fill="rgb(242,206,5)" fg:x="779" fg:w="4"/><text x="61.9285%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="61.6785%" y="293" width="0.3167%" height="15" fill="rgb(217,114,22)" fg:x="779" fg:w="4"/><text x="61.9285%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="61.9161%" y="277" width="0.0792%" height="15" fill="rgb(253,206,42)" fg:x="782" fg:w="1"/><text x="62.1661%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="61.9161%" y="261" width="0.0792%" height="15" fill="rgb(236,102,18)" fg:x="782" fg:w="1"/><text x="62.1661%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (4 samples, 0.32%)</title><rect x="61.9952%" y="293" width="0.3167%" height="15" fill="rgb(208,59,49)" fg:x="783" fg:w="4"/><text x="62.2452%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.32%)</title><rect x="61.9952%" y="277" width="0.3167%" height="15" fill="rgb(215,194,28)" fg:x="783" fg:w="4"/><text x="62.2452%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="62.2328%" y="261" width="0.0792%" height="15" fill="rgb(243,207,11)" fg:x="786" fg:w="1"/><text x="62.4828%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (11 samples, 0.87%)</title><rect x="62.3120%" y="245" width="0.8709%" height="15" fill="rgb(254,179,35)" fg:x="787" fg:w="11"/><text x="62.5620%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (11 samples, 0.87%)</title><rect x="62.3120%" y="229" width="0.8709%" height="15" fill="rgb(235,97,3)" fg:x="787" fg:w="11"/><text x="62.5620%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="62.9454%" y="213" width="0.2375%" height="15" fill="rgb(215,155,33)" fg:x="795" fg:w="3"/><text x="63.1954%" y="223.50"></text></g><g><title>indefinite::rules::number::Number::check (215 samples, 17.02%)</title><rect x="46.3183%" y="325" width="17.0230%" height="15" fill="rgb(223,128,12)" fg:x="585" fg:w="215"/><text x="46.5683%" y="335.50">indefinite::rules::number:..</text></g><g><title>regex::regex::string::Regex::is_match_at (17 samples, 1.35%)</title><rect x="61.9952%" y="309" width="1.3460%" height="15" fill="rgb(208,157,18)" fg:x="783" fg:w="17"/><text x="62.2452%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (13 samples, 1.03%)</title><rect x="62.3120%" y="293" width="1.0293%" height="15" fill="rgb(249,70,54)" fg:x="787" fg:w="13"/><text x="62.5620%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (13 samples, 1.03%)</title><rect x="62.3120%" y="277" width="1.0293%" height="15" fill="rgb(244,118,24)" fg:x="787" fg:w="13"/><text x="62.5620%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (13 samples, 1.03%)</title><rect x="62.3120%" y="261" width="1.0293%" height="15" fill="rgb(211,54,0)" fg:x="787" fg:w="13"/><text x="62.5620%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (2 samples, 0.16%)</title><rect x="63.1829%" y="245" width="0.1584%" height="15" fill="rgb(245,137,45)" fg:x="798" fg:w="2"/><text x="63.4329%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="63.3413%" y="277" width="0.0792%" height="15" fill="rgb(232,154,31)" fg:x="800" fg:w="1"/><text x="63.5913%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="63.3413%" y="261" width="0.0792%" height="15" fill="rgb(253,6,39)" fg:x="800" fg:w="1"/><text x="63.5913%" y="271.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="63.3413%" y="245" width="0.0792%" height="15" fill="rgb(234,183,24)" fg:x="800" fg:w="1"/><text x="63.5913%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="63.3413%" y="229" width="0.0792%" height="15" fill="rgb(252,84,40)" fg:x="800" fg:w="1"/><text x="63.5913%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="63.4204%" y="245" width="0.0792%" height="15" fill="rgb(224,65,2)" fg:x="801" fg:w="1"/><text x="63.6704%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.4204%" y="229" width="0.0792%" height="15" fill="rgb(229,38,24)" fg:x="801" fg:w="1"/><text x="63.6704%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.5788%" y="229" width="0.0792%" height="15" fill="rgb(218,131,50)" fg:x="803" fg:w="1"/><text x="63.8288%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="63.6580%" y="229" width="0.0792%" height="15" fill="rgb(233,106,18)" fg:x="804" fg:w="1"/><text x="63.9080%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.6580%" y="213" width="0.0792%" height="15" fill="rgb(220,216,11)" fg:x="804" fg:w="1"/><text x="63.9080%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="63.7371%" y="229" width="0.1584%" height="15" fill="rgb(251,100,45)" fg:x="805" fg:w="2"/><text x="63.9871%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="63.8163%" y="213" width="0.0792%" height="15" fill="rgb(235,143,32)" fg:x="806" fg:w="1"/><text x="64.0663%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="63.8955%" y="229" width="0.0792%" height="15" fill="rgb(248,124,34)" fg:x="807" fg:w="1"/><text x="64.1455%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="63.9747%" y="213" width="0.0792%" height="15" fill="rgb(225,221,4)" fg:x="808" fg:w="1"/><text x="64.2247%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="63.9747%" y="197" width="0.0792%" height="15" fill="rgb(242,27,43)" fg:x="808" fg:w="1"/><text x="64.2247%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="63.9747%" y="181" width="0.0792%" height="15" fill="rgb(227,54,8)" fg:x="808" fg:w="1"/><text x="64.2247%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="63.9747%" y="165" width="0.0792%" height="15" fill="rgb(253,139,49)" fg:x="808" fg:w="1"/><text x="64.2247%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (11 samples, 0.87%)</title><rect x="63.4996%" y="245" width="0.8709%" height="15" fill="rgb(231,26,43)" fg:x="802" fg:w="11"/><text x="63.7496%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (5 samples, 0.40%)</title><rect x="63.9747%" y="229" width="0.3959%" height="15" fill="rgb(207,121,39)" fg:x="808" fg:w="5"/><text x="64.2247%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="64.0538%" y="213" width="0.3167%" height="15" fill="rgb(223,101,35)" fg:x="809" fg:w="4"/><text x="64.3038%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="64.1330%" y="197" width="0.2375%" height="15" fill="rgb(232,87,23)" fg:x="810" fg:w="3"/><text x="64.3830%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="64.2914%" y="181" width="0.0792%" height="15" fill="rgb(225,180,29)" fg:x="812" fg:w="1"/><text x="64.5414%" y="191.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="64.6081%" y="197" width="0.0792%" height="15" fill="rgb(225,25,17)" fg:x="816" fg:w="1"/><text x="64.8581%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="64.6873%" y="197" width="0.0792%" height="15" fill="rgb(223,8,52)" fg:x="817" fg:w="1"/><text x="64.9373%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="64.6873%" y="181" width="0.0792%" height="15" fill="rgb(246,42,21)" fg:x="817" fg:w="1"/><text x="64.9373%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="64.3705%" y="245" width="0.4751%" height="15" fill="rgb(205,64,43)" fg:x="813" fg:w="6"/><text x="64.6205%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.48%)</title><rect x="64.3705%" y="229" width="0.4751%" height="15" fill="rgb(221,160,13)" fg:x="813" fg:w="6"/><text x="64.6205%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.48%)</title><rect x="64.3705%" y="213" width="0.4751%" height="15" fill="rgb(239,58,35)" fg:x="813" fg:w="6"/><text x="64.6205%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="64.7664%" y="197" width="0.0792%" height="15" fill="rgb(251,26,40)" fg:x="818" fg:w="1"/><text x="65.0164%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.7664%" y="181" width="0.0792%" height="15" fill="rgb(247,0,4)" fg:x="818" fg:w="1"/><text x="65.0164%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.7664%" y="165" width="0.0792%" height="15" fill="rgb(218,130,10)" fg:x="818" fg:w="1"/><text x="65.0164%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.7664%" y="149" width="0.0792%" height="15" fill="rgb(239,32,7)" fg:x="818" fg:w="1"/><text x="65.0164%" y="159.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="65.0040%" y="213" width="0.1584%" height="15" fill="rgb(210,192,24)" fg:x="821" fg:w="2"/><text x="65.2540%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="65.0831%" y="197" width="0.0792%" height="15" fill="rgb(226,212,17)" fg:x="822" fg:w="1"/><text x="65.3331%" y="207.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="65.0831%" y="181" width="0.0792%" height="15" fill="rgb(219,201,28)" fg:x="822" fg:w="1"/><text x="65.3331%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (25 samples, 1.98%)</title><rect x="63.3413%" y="293" width="1.9794%" height="15" fill="rgb(235,207,41)" fg:x="800" fg:w="25"/><text x="63.5913%" y="303.50">&lt;..</text></g><g><title>regex::builders::Builder::build_one_string (24 samples, 1.90%)</title><rect x="63.4204%" y="277" width="1.9002%" height="15" fill="rgb(241,95,54)" fg:x="801" fg:w="24"/><text x="63.6704%" y="287.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (24 samples, 1.90%)</title><rect x="63.4204%" y="261" width="1.9002%" height="15" fill="rgb(248,12,23)" fg:x="801" fg:w="24"/><text x="63.6704%" y="271.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.48%)</title><rect x="64.8456%" y="245" width="0.4751%" height="15" fill="rgb(228,173,4)" fg:x="819" fg:w="6"/><text x="65.0956%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.48%)</title><rect x="64.8456%" y="229" width="0.4751%" height="15" fill="rgb(254,99,5)" fg:x="819" fg:w="6"/><text x="65.0956%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="65.1623%" y="213" width="0.1584%" height="15" fill="rgb(212,184,17)" fg:x="823" fg:w="2"/><text x="65.4123%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="65.2415%" y="197" width="0.0792%" height="15" fill="rgb(252,174,1)" fg:x="824" fg:w="1"/><text x="65.4915%" y="207.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="65.3207%" y="293" width="0.0792%" height="15" fill="rgb(241,118,51)" fg:x="825" fg:w="1"/><text x="65.5707%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="65.3207%" y="277" width="0.0792%" height="15" fill="rgb(227,94,47)" fg:x="825" fg:w="1"/><text x="65.5707%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="65.3207%" y="261" width="0.0792%" height="15" fill="rgb(229,104,2)" fg:x="825" fg:w="1"/><text x="65.5707%" y="271.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="65.3207%" y="245" width="0.0792%" height="15" fill="rgb(219,28,31)" fg:x="825" fg:w="1"/><text x="65.5707%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.3998%" y="261" width="0.0792%" height="15" fill="rgb(233,109,36)" fg:x="826" fg:w="1"/><text x="65.6498%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="65.4790%" y="261" width="0.0792%" height="15" fill="rgb(246,88,11)" fg:x="827" fg:w="1"/><text x="65.7290%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="65.4790%" y="245" width="0.0792%" height="15" fill="rgb(209,212,17)" fg:x="827" fg:w="1"/><text x="65.7290%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.4790%" y="229" width="0.0792%" height="15" fill="rgb(243,59,29)" fg:x="827" fg:w="1"/><text x="65.7290%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="65.3998%" y="293" width="0.3167%" height="15" fill="rgb(244,205,48)" fg:x="826" fg:w="4"/><text x="65.6498%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="65.3998%" y="277" width="0.3167%" height="15" fill="rgb(227,30,6)" fg:x="826" fg:w="4"/><text x="65.6498%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="65.5582%" y="261" width="0.1584%" height="15" fill="rgb(220,205,48)" fg:x="828" fg:w="2"/><text x="65.8082%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="65.5582%" y="245" width="0.1584%" height="15" fill="rgb(250,94,14)" fg:x="828" fg:w="2"/><text x="65.8082%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.6374%" y="229" width="0.0792%" height="15" fill="rgb(216,119,42)" fg:x="829" fg:w="1"/><text x="65.8874%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.6374%" y="213" width="0.0792%" height="15" fill="rgb(232,155,0)" fg:x="829" fg:w="1"/><text x="65.8874%" y="223.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::props_union (1 samples, 0.08%)</title><rect x="65.7165%" y="293" width="0.0792%" height="15" fill="rgb(212,24,32)" fg:x="830" fg:w="1"/><text x="65.9665%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="65.7957%" y="229" width="0.2375%" height="15" fill="rgb(216,69,20)" fg:x="831" fg:w="3"/><text x="66.0457%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="65.9541%" y="213" width="0.0792%" height="15" fill="rgb(229,73,31)" fg:x="833" fg:w="1"/><text x="66.2041%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.9541%" y="197" width="0.0792%" height="15" fill="rgb(224,219,20)" fg:x="833" fg:w="1"/><text x="66.2041%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="65.7957%" y="245" width="0.3167%" height="15" fill="rgb(215,146,41)" fg:x="831" fg:w="4"/><text x="66.0457%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="66.0333%" y="229" width="0.0792%" height="15" fill="rgb(244,71,31)" fg:x="834" fg:w="1"/><text x="66.2833%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.0333%" y="213" width="0.0792%" height="15" fill="rgb(224,24,11)" fg:x="834" fg:w="1"/><text x="66.2833%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (426 samples, 33.73%)</title><rect x="32.5416%" y="405" width="33.7292%" height="15" fill="rgb(229,76,15)" fg:x="411" fg:w="426"/><text x="32.7916%" y="415.50">&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::mo..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (394 samples, 31.20%)</title><rect x="35.0752%" y="389" width="31.1956%" height="15" fill="rgb(209,93,2)" fg:x="443" fg:w="394"/><text x="35.3252%" y="399.50">plugins_core::looking::model::Unqualified::qualify</text></g><g><title>indefinite::indefinite (393 samples, 31.12%)</title><rect x="35.1544%" y="373" width="31.1164%" height="15" fill="rgb(216,200,50)" fg:x="444" fg:w="393"/><text x="35.4044%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (393 samples, 31.12%)</title><rect x="35.1544%" y="357" width="31.1164%" height="15" fill="rgb(211,67,34)" fg:x="444" fg:w="393"/><text x="35.4044%" y="367.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (392 samples, 31.04%)</title><rect x="35.2336%" y="341" width="31.0372%" height="15" fill="rgb(225,87,47)" fg:x="445" fg:w="392"/><text x="35.4836%" y="351.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (37 samples, 2.93%)</title><rect x="63.3413%" y="325" width="2.9295%" height="15" fill="rgb(217,185,16)" fg:x="800" fg:w="37"/><text x="63.5913%" y="335.50">in..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (37 samples, 2.93%)</title><rect x="63.3413%" y="309" width="2.9295%" height="15" fill="rgb(205,0,0)" fg:x="800" fg:w="37"/><text x="63.5913%" y="319.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.48%)</title><rect x="65.7957%" y="293" width="0.4751%" height="15" fill="rgb(207,116,45)" fg:x="831" fg:w="6"/><text x="66.0457%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.48%)</title><rect x="65.7957%" y="277" width="0.4751%" height="15" fill="rgb(221,156,26)" fg:x="831" fg:w="6"/><text x="66.0457%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.48%)</title><rect x="65.7957%" y="261" width="0.4751%" height="15" fill="rgb(213,140,4)" fg:x="831" fg:w="6"/><text x="66.0457%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (2 samples, 0.16%)</title><rect x="66.1124%" y="245" width="0.1584%" height="15" fill="rgb(231,224,15)" fg:x="835" fg:w="2"/><text x="66.3624%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (2 samples, 0.16%)</title><rect x="66.1124%" y="229" width="0.1584%" height="15" fill="rgb(244,76,20)" fg:x="835" fg:w="2"/><text x="66.3624%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="66.1124%" y="213" width="0.1584%" height="15" fill="rgb(238,117,7)" fg:x="835" fg:w="2"/><text x="66.3624%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="66.1124%" y="197" width="0.1584%" height="15" fill="rgb(235,1,10)" fg:x="835" fg:w="2"/><text x="66.3624%" y="207.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="66.1124%" y="181" width="0.1584%" height="15" fill="rgb(216,165,6)" fg:x="835" fg:w="2"/><text x="66.3624%" y="191.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="66.2708%" y="389" width="0.0792%" height="15" fill="rgb(246,91,35)" fg:x="837" fg:w="1"/><text x="66.5208%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="66.2708%" y="373" width="0.0792%" height="15" fill="rgb(228,96,24)" fg:x="837" fg:w="1"/><text x="66.5208%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.4291%" y="357" width="0.0792%" height="15" fill="rgb(254,217,53)" fg:x="839" fg:w="1"/><text x="66.6791%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="66.5083%" y="357" width="0.0792%" height="15" fill="rgb(209,60,0)" fg:x="840" fg:w="1"/><text x="66.7583%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.5083%" y="341" width="0.0792%" height="15" fill="rgb(250,93,26)" fg:x="840" fg:w="1"/><text x="66.7583%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="66.5875%" y="357" width="0.0792%" height="15" fill="rgb(211,9,40)" fg:x="841" fg:w="1"/><text x="66.8375%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="66.5875%" y="341" width="0.0792%" height="15" fill="rgb(242,57,20)" fg:x="841" fg:w="1"/><text x="66.8375%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="66.5875%" y="325" width="0.0792%" height="15" fill="rgb(248,85,48)" fg:x="841" fg:w="1"/><text x="66.8375%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.5875%" y="309" width="0.0792%" height="15" fill="rgb(212,117,2)" fg:x="841" fg:w="1"/><text x="66.8375%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.5875%" y="293" width="0.0792%" height="15" fill="rgb(243,19,3)" fg:x="841" fg:w="1"/><text x="66.8375%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.5875%" y="277" width="0.0792%" height="15" fill="rgb(232,217,24)" fg:x="841" fg:w="1"/><text x="66.8375%" y="287.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (6 samples, 0.48%)</title><rect x="66.2708%" y="405" width="0.4751%" height="15" fill="rgb(224,175,40)" fg:x="837" fg:w="6"/><text x="66.5208%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="66.3500%" y="389" width="0.3959%" height="15" fill="rgb(212,162,32)" fg:x="838" fg:w="5"/><text x="66.6000%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="66.3500%" y="373" width="0.3959%" height="15" fill="rgb(215,9,4)" fg:x="838" fg:w="5"/><text x="66.6000%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.6667%" y="357" width="0.0792%" height="15" fill="rgb(242,42,7)" fg:x="842" fg:w="1"/><text x="66.9167%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.6667%" y="341" width="0.0792%" height="15" fill="rgb(242,184,45)" fg:x="842" fg:w="1"/><text x="66.9167%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="66.6667%" y="325" width="0.0792%" height="15" fill="rgb(228,111,51)" fg:x="842" fg:w="1"/><text x="66.9167%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="66.6667%" y="309" width="0.0792%" height="15" fill="rgb(236,147,17)" fg:x="842" fg:w="1"/><text x="66.9167%" y="319.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="66.6667%" y="293" width="0.0792%" height="15" fill="rgb(210,75,22)" fg:x="842" fg:w="1"/><text x="66.9167%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="66.7458%" y="341" width="0.0792%" height="15" fill="rgb(217,159,45)" fg:x="843" fg:w="1"/><text x="66.9958%" y="351.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="66.7458%" y="325" width="0.0792%" height="15" fill="rgb(245,165,53)" fg:x="843" fg:w="1"/><text x="66.9958%" y="335.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="66.8250%" y="341" width="0.0792%" height="15" fill="rgb(251,190,50)" fg:x="844" fg:w="1"/><text x="67.0750%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.8250%" y="325" width="0.0792%" height="15" fill="rgb(208,203,29)" fg:x="844" fg:w="1"/><text x="67.0750%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.8250%" y="309" width="0.0792%" height="15" fill="rgb(207,209,35)" fg:x="844" fg:w="1"/><text x="67.0750%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="66.9834%" y="245" width="0.0792%" height="15" fill="rgb(230,144,49)" fg:x="846" fg:w="1"/><text x="67.2334%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.9834%" y="229" width="0.0792%" height="15" fill="rgb(229,31,6)" fg:x="846" fg:w="1"/><text x="67.2334%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="66.9834%" y="213" width="0.0792%" height="15" fill="rgb(251,129,24)" fg:x="846" fg:w="1"/><text x="67.2334%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.9834%" y="197" width="0.0792%" height="15" fill="rgb(235,105,15)" fg:x="846" fg:w="1"/><text x="67.2334%" y="207.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="66.9834%" y="181" width="0.0792%" height="15" fill="rgb(216,52,43)" fg:x="846" fg:w="1"/><text x="67.2334%" y="191.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1 samples, 0.08%)</title><rect x="66.9834%" y="165" width="0.0792%" height="15" fill="rgb(238,144,41)" fg:x="846" fg:w="1"/><text x="67.2334%" y="175.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="66.9042%" y="293" width="0.2375%" height="15" fill="rgb(243,63,9)" fg:x="845" fg:w="3"/><text x="67.1542%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="66.9042%" y="277" width="0.2375%" height="15" fill="rgb(246,208,1)" fg:x="845" fg:w="3"/><text x="67.1542%" y="287.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="66.9834%" y="261" width="0.1584%" height="15" fill="rgb(233,182,18)" fg:x="846" fg:w="2"/><text x="67.2334%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.0625%" y="245" width="0.0792%" height="15" fill="rgb(242,224,8)" fg:x="847" fg:w="1"/><text x="67.3125%" y="255.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="66.9042%" y="341" width="0.3167%" height="15" fill="rgb(243,54,37)" fg:x="845" fg:w="4"/><text x="67.1542%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="66.9042%" y="325" width="0.3167%" height="15" fill="rgb(233,192,12)" fg:x="845" fg:w="4"/><text x="67.1542%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="66.9042%" y="309" width="0.3167%" height="15" fill="rgb(251,192,53)" fg:x="845" fg:w="4"/><text x="67.1542%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.1417%" y="293" width="0.0792%" height="15" fill="rgb(246,141,26)" fg:x="848" fg:w="1"/><text x="67.3917%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.1417%" y="277" width="0.0792%" height="15" fill="rgb(239,195,19)" fg:x="848" fg:w="1"/><text x="67.3917%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="67.2209%" y="197" width="0.0792%" height="15" fill="rgb(241,16,39)" fg:x="849" fg:w="1"/><text x="67.4709%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.2209%" y="181" width="0.0792%" height="15" fill="rgb(223,13,53)" fg:x="849" fg:w="1"/><text x="67.4709%" y="191.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="67.2209%" y="165" width="0.0792%" height="15" fill="rgb(214,227,0)" fg:x="849" fg:w="1"/><text x="67.4709%" y="175.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="67.2209%" y="149" width="0.0792%" height="15" fill="rgb(228,103,26)" fg:x="849" fg:w="1"/><text x="67.4709%" y="159.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="67.3001%" y="181" width="0.0792%" height="15" fill="rgb(254,177,53)" fg:x="850" fg:w="1"/><text x="67.5501%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.3001%" y="165" width="0.0792%" height="15" fill="rgb(208,201,34)" fg:x="850" fg:w="1"/><text x="67.5501%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.3001%" y="149" width="0.0792%" height="15" fill="rgb(212,39,5)" fg:x="850" fg:w="1"/><text x="67.5501%" y="159.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.3001%" y="133" width="0.0792%" height="15" fill="rgb(246,117,3)" fg:x="850" fg:w="1"/><text x="67.5501%" y="143.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="67.3001%" y="117" width="0.0792%" height="15" fill="rgb(244,118,39)" fg:x="850" fg:w="1"/><text x="67.5501%" y="127.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="67.2209%" y="277" width="0.2375%" height="15" fill="rgb(241,64,10)" fg:x="849" fg:w="3"/><text x="67.4709%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="67.2209%" y="261" width="0.2375%" height="15" fill="rgb(229,39,44)" fg:x="849" fg:w="3"/><text x="67.4709%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="67.2209%" y="245" width="0.2375%" height="15" fill="rgb(230,226,3)" fg:x="849" fg:w="3"/><text x="67.4709%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="67.2209%" y="229" width="0.2375%" height="15" fill="rgb(222,13,42)" fg:x="849" fg:w="3"/><text x="67.4709%" y="239.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="67.2209%" y="213" width="0.2375%" height="15" fill="rgb(247,180,54)" fg:x="849" fg:w="3"/><text x="67.4709%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="67.3001%" y="197" width="0.1584%" height="15" fill="rgb(205,96,16)" fg:x="850" fg:w="2"/><text x="67.5501%" y="207.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="67.3793%" y="181" width="0.0792%" height="15" fill="rgb(205,100,21)" fg:x="851" fg:w="1"/><text x="67.6293%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.3793%" y="165" width="0.0792%" height="15" fill="rgb(248,51,4)" fg:x="851" fg:w="1"/><text x="67.6293%" y="175.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (10 samples, 0.79%)</title><rect x="66.7458%" y="405" width="0.7918%" height="15" fill="rgb(217,197,30)" fg:x="843" fg:w="10"/><text x="66.9958%" y="415.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (10 samples, 0.79%)</title><rect x="66.7458%" y="389" width="0.7918%" height="15" fill="rgb(240,179,40)" fg:x="843" fg:w="10"/><text x="66.9958%" y="399.50"></text></g><g><title>engine::session::Session::load_entity (10 samples, 0.79%)</title><rect x="66.7458%" y="373" width="0.7918%" height="15" fill="rgb(212,185,35)" fg:x="843" fg:w="10"/><text x="66.9958%" y="383.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (10 samples, 0.79%)</title><rect x="66.7458%" y="357" width="0.7918%" height="15" fill="rgb(251,222,31)" fg:x="843" fg:w="10"/><text x="66.9958%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="67.2209%" y="341" width="0.3167%" height="15" fill="rgb(208,140,36)" fg:x="849" fg:w="4"/><text x="67.4709%" y="351.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="67.2209%" y="325" width="0.3167%" height="15" fill="rgb(220,148,1)" fg:x="849" fg:w="4"/><text x="67.4709%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="67.2209%" y="309" width="0.3167%" height="15" fill="rgb(254,4,28)" fg:x="849" fg:w="4"/><text x="67.4709%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="67.2209%" y="293" width="0.3167%" height="15" fill="rgb(222,185,44)" fg:x="849" fg:w="4"/><text x="67.4709%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.4584%" y="277" width="0.0792%" height="15" fill="rgb(215,74,39)" fg:x="852" fg:w="1"/><text x="67.7084%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.4584%" y="261" width="0.0792%" height="15" fill="rgb(247,86,4)" fg:x="852" fg:w="1"/><text x="67.7084%" y="271.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (478 samples, 37.85%)</title><rect x="29.7704%" y="629" width="37.8464%" height="15" fill="rgb(231,105,32)" fg:x="376" fg:w="478"/><text x="30.0204%" y="639.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perf..</text></g><g><title>kernel::plugins::mw::apply_middleware (478 samples, 37.85%)</title><rect x="29.7704%" y="613" width="37.8464%" height="15" fill="rgb(222,65,35)" fg:x="376" fg:w="478"/><text x="30.0204%" y="623.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (477 samples, 37.77%)</title><rect x="29.8496%" y="597" width="37.7672%" height="15" fill="rgb(218,145,35)" fg:x="377" fg:w="477"/><text x="30.0996%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (477 samples, 37.77%)</title><rect x="29.8496%" y="581" width="37.7672%" height="15" fill="rgb(208,7,15)" fg:x="377" fg:w="477"/><text x="30.0996%" y="591.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plug..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (455 samples, 36.03%)</title><rect x="31.5914%" y="565" width="36.0253%" height="15" fill="rgb(209,83,13)" fg:x="399" fg:w="455"/><text x="31.8414%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (455 samples, 36.03%)</title><rect x="31.5914%" y="549" width="36.0253%" height="15" fill="rgb(218,3,10)" fg:x="399" fg:w="455"/><text x="31.8414%" y="559.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (455 samples, 36.03%)</title><rect x="31.5914%" y="533" width="36.0253%" height="15" fill="rgb(211,219,4)" fg:x="399" fg:w="455"/><text x="31.8414%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (455 samples, 36.03%)</title><rect x="31.5914%" y="517" width="36.0253%" height="15" fill="rgb(228,194,12)" fg:x="399" fg:w="455"/><text x="31.8414%" y="527.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (455 samples, 36.03%)</title><rect x="31.5914%" y="501" width="36.0253%" height="15" fill="rgb(210,175,7)" fg:x="399" fg:w="455"/><text x="31.8414%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (455 samples, 36.03%)</title><rect x="31.5914%" y="485" width="36.0253%" height="15" fill="rgb(243,132,6)" fg:x="399" fg:w="455"/><text x="31.8414%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (454 samples, 35.95%)</title><rect x="31.6706%" y="469" width="35.9462%" height="15" fill="rgb(207,72,18)" fg:x="400" fg:w="454"/><text x="31.9206%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Arg..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (454 samples, 35.95%)</title><rect x="31.6706%" y="453" width="35.9462%" height="15" fill="rgb(236,1,18)" fg:x="400" fg:w="454"/><text x="31.9206%" y="463.50">&lt;engine::session::state::State as kernel::actions::Perform..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (454 samples, 35.95%)</title><rect x="31.6706%" y="437" width="35.9462%" height="15" fill="rgb(227,0,18)" fg:x="400" fg:w="454"/><text x="31.9206%" y="447.50">&lt;plugins_core::looking::actions::LookAction as kernel::act..</text></g><g><title>plugins_core::looking::model::new_area_observation (445 samples, 35.23%)</title><rect x="32.3832%" y="421" width="35.2336%" height="15" fill="rgb(247,37,5)" fg:x="409" fg:w="445"/><text x="32.6332%" y="431.50">plugins_core::looking::model::new_area_observation</text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="67.5376%" y="405" width="0.0792%" height="15" fill="rgb(237,179,24)" fg:x="853" fg:w="1"/><text x="67.7876%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.5376%" y="389" width="0.0792%" height="15" fill="rgb(226,53,20)" fg:x="853" fg:w="1"/><text x="67.7876%" y="399.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (1 samples, 0.08%)</title><rect x="67.6168%" y="629" width="0.0792%" height="15" fill="rgb(247,75,7)" fg:x="854" fg:w="1"/><text x="67.8668%" y="639.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="67.6168%" y="613" width="0.0792%" height="15" fill="rgb(233,96,12)" fg:x="854" fg:w="1"/><text x="67.8668%" y="623.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="67.6960%" y="629" width="0.1584%" height="15" fill="rgb(224,125,0)" fg:x="855" fg:w="2"/><text x="67.9460%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="67.7751%" y="613" width="0.0792%" height="15" fill="rgb(224,92,25)" fg:x="856" fg:w="1"/><text x="68.0251%" y="623.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="67.7751%" y="597" width="0.0792%" height="15" fill="rgb(224,42,24)" fg:x="856" fg:w="1"/><text x="68.0251%" y="607.50"></text></g><g><title>&lt;(A,B,C) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.08%)</title><rect x="67.7751%" y="581" width="0.0792%" height="15" fill="rgb(234,132,49)" fg:x="856" fg:w="1"/><text x="68.0251%" y="591.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="67.7751%" y="565" width="0.0792%" height="15" fill="rgb(248,100,35)" fg:x="856" fg:w="1"/><text x="68.0251%" y="575.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="67.7751%" y="549" width="0.0792%" height="15" fill="rgb(239,94,40)" fg:x="856" fg:w="1"/><text x="68.0251%" y="559.50"></text></g><g><title>plugins_core::library::parser::spaces (1 samples, 0.08%)</title><rect x="67.7751%" y="533" width="0.0792%" height="15" fill="rgb(235,139,28)" fg:x="856" fg:w="1"/><text x="68.0251%" y="543.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="67.8543%" y="597" width="0.0792%" height="15" fill="rgb(217,144,7)" fg:x="857" fg:w="1"/><text x="68.1043%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="67.8543%" y="581" width="0.0792%" height="15" fill="rgb(227,55,4)" fg:x="857" fg:w="1"/><text x="68.1043%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.9335%" y="533" width="0.0792%" height="15" fill="rgb(252,82,54)" fg:x="858" fg:w="1"/><text x="68.1835%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.9335%" y="517" width="0.0792%" height="15" fill="rgb(245,172,4)" fg:x="858" fg:w="1"/><text x="68.1835%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.9335%" y="501" width="0.0792%" height="15" fill="rgb(207,26,27)" fg:x="858" fg:w="1"/><text x="68.1835%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.9335%" y="485" width="0.0792%" height="15" fill="rgb(252,98,18)" fg:x="858" fg:w="1"/><text x="68.1835%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.9335%" y="469" width="0.0792%" height="15" fill="rgb(244,8,26)" fg:x="858" fg:w="1"/><text x="68.1835%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.9335%" y="453" width="0.0792%" height="15" fill="rgb(237,173,45)" fg:x="858" fg:w="1"/><text x="68.1835%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="67.9335%" y="549" width="0.1584%" height="15" fill="rgb(208,213,49)" fg:x="858" fg:w="2"/><text x="68.1835%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.0127%" y="533" width="0.0792%" height="15" fill="rgb(212,122,37)" fg:x="859" fg:w="1"/><text x="68.2627%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.0127%" y="517" width="0.0792%" height="15" fill="rgb(213,80,17)" fg:x="859" fg:w="1"/><text x="68.2627%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.0127%" y="501" width="0.0792%" height="15" fill="rgb(206,210,43)" fg:x="859" fg:w="1"/><text x="68.2627%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.0127%" y="485" width="0.0792%" height="15" fill="rgb(229,214,3)" fg:x="859" fg:w="1"/><text x="68.2627%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.0127%" y="469" width="0.0792%" height="15" fill="rgb(235,213,29)" fg:x="859" fg:w="1"/><text x="68.2627%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.0127%" y="453" width="0.0792%" height="15" fill="rgb(248,135,26)" fg:x="859" fg:w="1"/><text x="68.2627%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.0127%" y="437" width="0.0792%" height="15" fill="rgb(242,188,12)" fg:x="859" fg:w="1"/><text x="68.2627%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.0127%" y="421" width="0.0792%" height="15" fill="rgb(245,38,12)" fg:x="859" fg:w="1"/><text x="68.2627%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.0127%" y="405" width="0.0792%" height="15" fill="rgb(218,42,13)" fg:x="859" fg:w="1"/><text x="68.2627%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.0127%" y="389" width="0.0792%" height="15" fill="rgb(238,132,49)" fg:x="859" fg:w="1"/><text x="68.2627%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.0127%" y="373" width="0.0792%" height="15" fill="rgb(209,196,19)" fg:x="859" fg:w="1"/><text x="68.2627%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.0127%" y="357" width="0.0792%" height="15" fill="rgb(244,131,22)" fg:x="859" fg:w="1"/><text x="68.2627%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.0127%" y="341" width="0.0792%" height="15" fill="rgb(223,18,34)" fg:x="859" fg:w="1"/><text x="68.2627%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.0127%" y="325" width="0.0792%" height="15" fill="rgb(252,124,54)" fg:x="859" fg:w="1"/><text x="68.2627%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="67.9335%" y="581" width="0.2375%" height="15" fill="rgb(229,106,42)" fg:x="858" fg:w="3"/><text x="68.1835%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="67.9335%" y="565" width="0.2375%" height="15" fill="rgb(221,129,1)" fg:x="858" fg:w="3"/><text x="68.1835%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.0918%" y="549" width="0.0792%" height="15" fill="rgb(229,74,15)" fg:x="860" fg:w="1"/><text x="68.3418%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.2502%" y="533" width="0.0792%" height="15" fill="rgb(210,206,50)" fg:x="862" fg:w="1"/><text x="68.5002%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.2502%" y="517" width="0.0792%" height="15" fill="rgb(251,114,31)" fg:x="862" fg:w="1"/><text x="68.5002%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.2502%" y="501" width="0.0792%" height="15" fill="rgb(215,225,28)" fg:x="862" fg:w="1"/><text x="68.5002%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.2502%" y="485" width="0.0792%" height="15" fill="rgb(237,109,14)" fg:x="862" fg:w="1"/><text x="68.5002%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.2502%" y="469" width="0.0792%" height="15" fill="rgb(230,13,37)" fg:x="862" fg:w="1"/><text x="68.5002%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.3294%" y="485" width="0.1584%" height="15" fill="rgb(231,40,28)" fg:x="863" fg:w="2"/><text x="68.5794%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.3294%" y="469" width="0.1584%" height="15" fill="rgb(231,202,18)" fg:x="863" fg:w="2"/><text x="68.5794%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.3294%" y="453" width="0.1584%" height="15" fill="rgb(225,33,18)" fg:x="863" fg:w="2"/><text x="68.5794%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.5669%" y="293" width="0.0792%" height="15" fill="rgb(223,64,47)" fg:x="866" fg:w="1"/><text x="68.8169%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.5669%" y="277" width="0.0792%" height="15" fill="rgb(234,114,13)" fg:x="866" fg:w="1"/><text x="68.8169%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.5669%" y="261" width="0.0792%" height="15" fill="rgb(248,56,40)" fg:x="866" fg:w="1"/><text x="68.8169%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.5669%" y="245" width="0.0792%" height="15" fill="rgb(221,194,21)" fg:x="866" fg:w="1"/><text x="68.8169%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.5669%" y="229" width="0.0792%" height="15" fill="rgb(242,108,46)" fg:x="866" fg:w="1"/><text x="68.8169%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.5669%" y="213" width="0.0792%" height="15" fill="rgb(220,106,10)" fg:x="866" fg:w="1"/><text x="68.8169%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.5669%" y="197" width="0.0792%" height="15" fill="rgb(211,88,4)" fg:x="866" fg:w="1"/><text x="68.8169%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="68.5669%" y="437" width="0.1584%" height="15" fill="rgb(214,95,34)" fg:x="866" fg:w="2"/><text x="68.8169%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="68.5669%" y="421" width="0.1584%" height="15" fill="rgb(250,160,33)" fg:x="866" fg:w="2"/><text x="68.8169%" y="431.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="68.5669%" y="405" width="0.1584%" height="15" fill="rgb(225,29,10)" fg:x="866" fg:w="2"/><text x="68.8169%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.5669%" y="389" width="0.1584%" height="15" fill="rgb(224,28,30)" fg:x="866" fg:w="2"/><text x="68.8169%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="68.5669%" y="373" width="0.1584%" height="15" fill="rgb(231,77,4)" fg:x="866" fg:w="2"/><text x="68.8169%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="68.5669%" y="357" width="0.1584%" height="15" fill="rgb(209,63,21)" fg:x="866" fg:w="2"/><text x="68.8169%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="68.5669%" y="341" width="0.1584%" height="15" fill="rgb(226,22,11)" fg:x="866" fg:w="2"/><text x="68.8169%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="68.5669%" y="325" width="0.1584%" height="15" fill="rgb(216,82,30)" fg:x="866" fg:w="2"/><text x="68.8169%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="68.5669%" y="309" width="0.1584%" height="15" fill="rgb(246,227,38)" fg:x="866" fg:w="2"/><text x="68.8169%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="68.6461%" y="293" width="0.0792%" height="15" fill="rgb(251,203,53)" fg:x="867" fg:w="1"/><text x="68.8961%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="68.6461%" y="277" width="0.0792%" height="15" fill="rgb(254,101,1)" fg:x="867" fg:w="1"/><text x="68.8961%" y="287.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="68.8044%" y="293" width="0.0792%" height="15" fill="rgb(241,180,5)" fg:x="869" fg:w="1"/><text x="69.0544%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="68.8044%" y="277" width="0.0792%" height="15" fill="rgb(218,168,4)" fg:x="869" fg:w="1"/><text x="69.0544%" y="287.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="68.8044%" y="261" width="0.0792%" height="15" fill="rgb(224,223,32)" fg:x="869" fg:w="1"/><text x="69.0544%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="68.8044%" y="245" width="0.0792%" height="15" fill="rgb(236,106,22)" fg:x="869" fg:w="1"/><text x="69.0544%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="68.8044%" y="229" width="0.0792%" height="15" fill="rgb(206,121,5)" fg:x="869" fg:w="1"/><text x="69.0544%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="68.8044%" y="213" width="0.0792%" height="15" fill="rgb(233,87,28)" fg:x="869" fg:w="1"/><text x="69.0544%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="68.8044%" y="197" width="0.0792%" height="15" fill="rgb(236,137,17)" fg:x="869" fg:w="1"/><text x="69.0544%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="68.4877%" y="485" width="0.4751%" height="15" fill="rgb(209,183,38)" fg:x="865" fg:w="6"/><text x="68.7377%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.48%)</title><rect x="68.4877%" y="469" width="0.4751%" height="15" fill="rgb(206,162,44)" fg:x="865" fg:w="6"/><text x="68.7377%" y="479.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (6 samples, 0.48%)</title><rect x="68.4877%" y="453" width="0.4751%" height="15" fill="rgb(237,70,39)" fg:x="865" fg:w="6"/><text x="68.7377%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="68.7253%" y="437" width="0.2375%" height="15" fill="rgb(212,176,5)" fg:x="868" fg:w="3"/><text x="68.9753%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="68.7253%" y="421" width="0.2375%" height="15" fill="rgb(232,95,16)" fg:x="868" fg:w="3"/><text x="68.9753%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (2 samples, 0.16%)</title><rect x="68.8044%" y="405" width="0.1584%" height="15" fill="rgb(219,115,35)" fg:x="869" fg:w="2"/><text x="69.0544%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (2 samples, 0.16%)</title><rect x="68.8044%" y="389" width="0.1584%" height="15" fill="rgb(251,67,27)" fg:x="869" fg:w="2"/><text x="69.0544%" y="399.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (2 samples, 0.16%)</title><rect x="68.8044%" y="373" width="0.1584%" height="15" fill="rgb(222,95,40)" fg:x="869" fg:w="2"/><text x="69.0544%" y="383.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (2 samples, 0.16%)</title><rect x="68.8044%" y="357" width="0.1584%" height="15" fill="rgb(250,35,16)" fg:x="869" fg:w="2"/><text x="69.0544%" y="367.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="68.8044%" y="341" width="0.1584%" height="15" fill="rgb(224,86,44)" fg:x="869" fg:w="2"/><text x="69.0544%" y="351.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="68.8044%" y="325" width="0.1584%" height="15" fill="rgb(237,53,53)" fg:x="869" fg:w="2"/><text x="69.0544%" y="335.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="68.8044%" y="309" width="0.1584%" height="15" fill="rgb(208,171,33)" fg:x="869" fg:w="2"/><text x="69.0544%" y="319.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="68.8836%" y="293" width="0.0792%" height="15" fill="rgb(222,64,27)" fg:x="870" fg:w="1"/><text x="69.1336%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.71%)</title><rect x="68.3294%" y="533" width="0.7126%" height="15" fill="rgb(221,121,35)" fg:x="863" fg:w="9"/><text x="68.5794%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.71%)</title><rect x="68.3294%" y="517" width="0.7126%" height="15" fill="rgb(228,137,42)" fg:x="863" fg:w="9"/><text x="68.5794%" y="527.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (9 samples, 0.71%)</title><rect x="68.3294%" y="501" width="0.7126%" height="15" fill="rgb(227,54,21)" fg:x="863" fg:w="9"/><text x="68.5794%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.9628%" y="485" width="0.0792%" height="15" fill="rgb(240,168,33)" fg:x="871" fg:w="1"/><text x="69.2128%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.9628%" y="469" width="0.0792%" height="15" fill="rgb(243,159,6)" fg:x="871" fg:w="1"/><text x="69.2128%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.9628%" y="453" width="0.0792%" height="15" fill="rgb(205,211,41)" fg:x="871" fg:w="1"/><text x="69.2128%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.0420%" y="501" width="0.0792%" height="15" fill="rgb(253,30,1)" fg:x="872" fg:w="1"/><text x="69.2920%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (13 samples, 1.03%)</title><rect x="68.1710%" y="581" width="1.0293%" height="15" fill="rgb(226,80,18)" fg:x="861" fg:w="13"/><text x="68.4210%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 1.03%)</title><rect x="68.1710%" y="565" width="1.0293%" height="15" fill="rgb(253,156,46)" fg:x="861" fg:w="13"/><text x="68.4210%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (12 samples, 0.95%)</title><rect x="68.2502%" y="549" width="0.9501%" height="15" fill="rgb(248,87,27)" fg:x="862" fg:w="12"/><text x="68.5002%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="69.0420%" y="533" width="0.1584%" height="15" fill="rgb(227,122,2)" fg:x="872" fg:w="2"/><text x="69.2920%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.0420%" y="517" width="0.1584%" height="15" fill="rgb(229,94,39)" fg:x="872" fg:w="2"/><text x="69.2920%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="69.1211%" y="501" width="0.0792%" height="15" fill="rgb(225,173,31)" fg:x="873" fg:w="1"/><text x="69.3711%" y="511.50"></text></g><g><title>engine::session::internal::Added::find_refs (18 samples, 1.43%)</title><rect x="67.8543%" y="613" width="1.4252%" height="15" fill="rgb(239,176,30)" fg:x="857" fg:w="18"/><text x="68.1043%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (17 samples, 1.35%)</title><rect x="67.9335%" y="597" width="1.3460%" height="15" fill="rgb(212,104,21)" fg:x="858" fg:w="17"/><text x="68.1835%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.2003%" y="581" width="0.0792%" height="15" fill="rgb(240,209,40)" fg:x="874" fg:w="1"/><text x="69.4503%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.2003%" y="565" width="0.0792%" height="15" fill="rgb(234,195,5)" fg:x="874" fg:w="1"/><text x="69.4503%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.2003%" y="549" width="0.0792%" height="15" fill="rgb(238,213,1)" fg:x="874" fg:w="1"/><text x="69.4503%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="69.2003%" y="533" width="0.0792%" height="15" fill="rgb(235,182,54)" fg:x="874" fg:w="1"/><text x="69.4503%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.2003%" y="517" width="0.0792%" height="15" fill="rgb(229,50,46)" fg:x="874" fg:w="1"/><text x="69.4503%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.2003%" y="501" width="0.0792%" height="15" fill="rgb(219,145,13)" fg:x="874" fg:w="1"/><text x="69.4503%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.2795%" y="597" width="0.0792%" height="15" fill="rgb(220,226,10)" fg:x="875" fg:w="1"/><text x="69.5295%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.2795%" y="581" width="0.0792%" height="15" fill="rgb(248,47,30)" fg:x="875" fg:w="1"/><text x="69.5295%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.2795%" y="565" width="0.0792%" height="15" fill="rgb(231,209,44)" fg:x="875" fg:w="1"/><text x="69.5295%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.2795%" y="549" width="0.0792%" height="15" fill="rgb(209,80,30)" fg:x="875" fg:w="1"/><text x="69.5295%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.2795%" y="533" width="0.0792%" height="15" fill="rgb(232,9,14)" fg:x="875" fg:w="1"/><text x="69.5295%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.2795%" y="517" width="0.0792%" height="15" fill="rgb(243,91,43)" fg:x="875" fg:w="1"/><text x="69.5295%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.2795%" y="501" width="0.0792%" height="15" fill="rgb(231,90,52)" fg:x="875" fg:w="1"/><text x="69.5295%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.2795%" y="485" width="0.0792%" height="15" fill="rgb(253,192,44)" fg:x="875" fg:w="1"/><text x="69.5295%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.2795%" y="469" width="0.0792%" height="15" fill="rgb(241,66,31)" fg:x="875" fg:w="1"/><text x="69.5295%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.2795%" y="453" width="0.0792%" height="15" fill="rgb(235,81,37)" fg:x="875" fg:w="1"/><text x="69.5295%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.2795%" y="437" width="0.0792%" height="15" fill="rgb(223,221,9)" fg:x="875" fg:w="1"/><text x="69.5295%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.2795%" y="421" width="0.0792%" height="15" fill="rgb(242,180,7)" fg:x="875" fg:w="1"/><text x="69.5295%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.2795%" y="405" width="0.0792%" height="15" fill="rgb(243,78,19)" fg:x="875" fg:w="1"/><text x="69.5295%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.2795%" y="389" width="0.0792%" height="15" fill="rgb(233,23,17)" fg:x="875" fg:w="1"/><text x="69.5295%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.2795%" y="373" width="0.0792%" height="15" fill="rgb(252,122,45)" fg:x="875" fg:w="1"/><text x="69.5295%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.2795%" y="357" width="0.0792%" height="15" fill="rgb(247,108,20)" fg:x="875" fg:w="1"/><text x="69.5295%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.2795%" y="341" width="0.0792%" height="15" fill="rgb(235,84,21)" fg:x="875" fg:w="1"/><text x="69.5295%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.5170%" y="437" width="0.0792%" height="15" fill="rgb(247,129,10)" fg:x="878" fg:w="1"/><text x="69.7670%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="69.3587%" y="501" width="0.3167%" height="15" fill="rgb(208,173,14)" fg:x="876" fg:w="4"/><text x="69.6087%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="69.3587%" y="485" width="0.3167%" height="15" fill="rgb(236,31,38)" fg:x="876" fg:w="4"/><text x="69.6087%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="69.5170%" y="469" width="0.1584%" height="15" fill="rgb(232,65,17)" fg:x="878" fg:w="2"/><text x="69.7670%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.5170%" y="453" width="0.1584%" height="15" fill="rgb(224,45,49)" fg:x="878" fg:w="2"/><text x="69.7670%" y="463.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="69.5962%" y="437" width="0.0792%" height="15" fill="rgb(225,2,53)" fg:x="879" fg:w="1"/><text x="69.8462%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.5962%" y="421" width="0.0792%" height="15" fill="rgb(248,210,53)" fg:x="879" fg:w="1"/><text x="69.8462%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.5962%" y="405" width="0.0792%" height="15" fill="rgb(211,1,30)" fg:x="879" fg:w="1"/><text x="69.8462%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.5962%" y="389" width="0.0792%" height="15" fill="rgb(224,96,15)" fg:x="879" fg:w="1"/><text x="69.8462%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.6754%" y="469" width="0.0792%" height="15" fill="rgb(252,45,11)" fg:x="880" fg:w="1"/><text x="69.9254%" y="479.50"></text></g><g><title>serde_json::value::de::BorrowedCowStrDeserializer::new (1 samples, 0.08%)</title><rect x="69.6754%" y="453" width="0.0792%" height="15" fill="rgb(220,125,38)" fg:x="880" fg:w="1"/><text x="69.9254%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (6 samples, 0.48%)</title><rect x="69.3587%" y="549" width="0.4751%" height="15" fill="rgb(243,161,33)" fg:x="876" fg:w="6"/><text x="69.6087%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="69.3587%" y="533" width="0.4751%" height="15" fill="rgb(248,197,34)" fg:x="876" fg:w="6"/><text x="69.6087%" y="543.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (6 samples, 0.48%)</title><rect x="69.3587%" y="517" width="0.4751%" height="15" fill="rgb(228,165,23)" fg:x="876" fg:w="6"/><text x="69.6087%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.6754%" y="501" width="0.1584%" height="15" fill="rgb(236,94,38)" fg:x="880" fg:w="2"/><text x="69.9254%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.6754%" y="485" width="0.1584%" height="15" fill="rgb(220,13,23)" fg:x="880" fg:w="2"/><text x="69.9254%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="69.7546%" y="469" width="0.0792%" height="15" fill="rgb(234,26,39)" fg:x="881" fg:w="1"/><text x="70.0046%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="69.7546%" y="453" width="0.0792%" height="15" fill="rgb(205,117,44)" fg:x="881" fg:w="1"/><text x="70.0046%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="69.7546%" y="437" width="0.0792%" height="15" fill="rgb(250,42,2)" fg:x="881" fg:w="1"/><text x="70.0046%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.7546%" y="421" width="0.0792%" height="15" fill="rgb(223,83,14)" fg:x="881" fg:w="1"/><text x="70.0046%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.7546%" y="405" width="0.0792%" height="15" fill="rgb(241,147,50)" fg:x="881" fg:w="1"/><text x="70.0046%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="69.7546%" y="389" width="0.0792%" height="15" fill="rgb(218,90,6)" fg:x="881" fg:w="1"/><text x="70.0046%" y="399.50"></text></g><g><title>kernel::model::entity::Entity::from_value (7 samples, 0.55%)</title><rect x="69.3587%" y="597" width="0.5542%" height="15" fill="rgb(210,191,5)" fg:x="876" fg:w="7"/><text x="69.6087%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (7 samples, 0.55%)</title><rect x="69.3587%" y="581" width="0.5542%" height="15" fill="rgb(225,139,19)" fg:x="876" fg:w="7"/><text x="69.6087%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.55%)</title><rect x="69.3587%" y="565" width="0.5542%" height="15" fill="rgb(210,1,33)" fg:x="876" fg:w="7"/><text x="69.6087%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.8337%" y="549" width="0.0792%" height="15" fill="rgb(213,50,3)" fg:x="882" fg:w="1"/><text x="70.0837%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (30 samples, 2.38%)</title><rect x="67.8543%" y="629" width="2.3753%" height="15" fill="rgb(234,227,4)" fg:x="857" fg:w="30"/><text x="68.1043%" y="639.50">en..</text></g><g><title>engine::session::internal::Entities::add_persisted (12 samples, 0.95%)</title><rect x="69.2795%" y="613" width="0.9501%" height="15" fill="rgb(246,63,5)" fg:x="875" fg:w="12"/><text x="69.5295%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="69.9129%" y="597" width="0.3167%" height="15" fill="rgb(245,136,27)" fg:x="883" fg:w="4"/><text x="70.1629%" y="607.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="69.9129%" y="581" width="0.3167%" height="15" fill="rgb(247,199,27)" fg:x="883" fg:w="4"/><text x="70.1629%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="69.9129%" y="565" width="0.3167%" height="15" fill="rgb(252,158,49)" fg:x="883" fg:w="4"/><text x="70.1629%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="69.9129%" y="549" width="0.3167%" height="15" fill="rgb(254,73,1)" fg:x="883" fg:w="4"/><text x="70.1629%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="69.9129%" y="533" width="0.3167%" height="15" fill="rgb(248,93,19)" fg:x="883" fg:w="4"/><text x="70.1629%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="69.9129%" y="517" width="0.3167%" height="15" fill="rgb(206,67,5)" fg:x="883" fg:w="4"/><text x="70.1629%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="69.9129%" y="501" width="0.3167%" height="15" fill="rgb(209,210,4)" fg:x="883" fg:w="4"/><text x="70.1629%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="69.9921%" y="485" width="0.2375%" height="15" fill="rgb(214,185,36)" fg:x="884" fg:w="3"/><text x="70.2421%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.1504%" y="469" width="0.0792%" height="15" fill="rgb(233,191,26)" fg:x="886" fg:w="1"/><text x="70.4004%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.1504%" y="453" width="0.0792%" height="15" fill="rgb(248,94,17)" fg:x="886" fg:w="1"/><text x="70.4004%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.1504%" y="437" width="0.0792%" height="15" fill="rgb(250,64,4)" fg:x="886" fg:w="1"/><text x="70.4004%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.2296%" y="565" width="0.0792%" height="15" fill="rgb(218,41,53)" fg:x="887" fg:w="1"/><text x="70.4796%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.2296%" y="549" width="0.0792%" height="15" fill="rgb(251,176,28)" fg:x="887" fg:w="1"/><text x="70.4796%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.2296%" y="533" width="0.0792%" height="15" fill="rgb(247,22,9)" fg:x="887" fg:w="1"/><text x="70.4796%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.2296%" y="517" width="0.0792%" height="15" fill="rgb(218,201,14)" fg:x="887" fg:w="1"/><text x="70.4796%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.2296%" y="501" width="0.0792%" height="15" fill="rgb(218,94,10)" fg:x="887" fg:w="1"/><text x="70.4796%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.2296%" y="485" width="0.0792%" height="15" fill="rgb(222,183,52)" fg:x="887" fg:w="1"/><text x="70.4796%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.2296%" y="469" width="0.0792%" height="15" fill="rgb(242,140,25)" fg:x="887" fg:w="1"/><text x="70.4796%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.2296%" y="453" width="0.0792%" height="15" fill="rgb(235,197,38)" fg:x="887" fg:w="1"/><text x="70.4796%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.2296%" y="437" width="0.0792%" height="15" fill="rgb(237,136,15)" fg:x="887" fg:w="1"/><text x="70.4796%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.2296%" y="421" width="0.0792%" height="15" fill="rgb(223,44,49)" fg:x="887" fg:w="1"/><text x="70.4796%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.2296%" y="405" width="0.0792%" height="15" fill="rgb(227,71,15)" fg:x="887" fg:w="1"/><text x="70.4796%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.2296%" y="389" width="0.0792%" height="15" fill="rgb(225,153,20)" fg:x="887" fg:w="1"/><text x="70.4796%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.2296%" y="373" width="0.0792%" height="15" fill="rgb(210,190,26)" fg:x="887" fg:w="1"/><text x="70.4796%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.2296%" y="357" width="0.0792%" height="15" fill="rgb(223,147,5)" fg:x="887" fg:w="1"/><text x="70.4796%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.2296%" y="341" width="0.0792%" height="15" fill="rgb(207,14,23)" fg:x="887" fg:w="1"/><text x="70.4796%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.2296%" y="325" width="0.0792%" height="15" fill="rgb(211,195,53)" fg:x="887" fg:w="1"/><text x="70.4796%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="70.2296%" y="581" width="0.1584%" height="15" fill="rgb(237,75,46)" fg:x="887" fg:w="2"/><text x="70.4796%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.3088%" y="565" width="0.0792%" height="15" fill="rgb(254,55,14)" fg:x="888" fg:w="1"/><text x="70.5588%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.3088%" y="549" width="0.0792%" height="15" fill="rgb(230,185,30)" fg:x="888" fg:w="1"/><text x="70.5588%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.3088%" y="533" width="0.0792%" height="15" fill="rgb(220,14,11)" fg:x="888" fg:w="1"/><text x="70.5588%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.3088%" y="517" width="0.0792%" height="15" fill="rgb(215,169,44)" fg:x="888" fg:w="1"/><text x="70.5588%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.3088%" y="501" width="0.0792%" height="15" fill="rgb(253,203,20)" fg:x="888" fg:w="1"/><text x="70.5588%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.3088%" y="485" width="0.0792%" height="15" fill="rgb(229,225,17)" fg:x="888" fg:w="1"/><text x="70.5588%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.3088%" y="469" width="0.0792%" height="15" fill="rgb(236,76,26)" fg:x="888" fg:w="1"/><text x="70.5588%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.3088%" y="453" width="0.0792%" height="15" fill="rgb(234,15,30)" fg:x="888" fg:w="1"/><text x="70.5588%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.3088%" y="437" width="0.0792%" height="15" fill="rgb(211,113,48)" fg:x="888" fg:w="1"/><text x="70.5588%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.3088%" y="421" width="0.0792%" height="15" fill="rgb(221,31,36)" fg:x="888" fg:w="1"/><text x="70.5588%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.3088%" y="405" width="0.0792%" height="15" fill="rgb(215,118,52)" fg:x="888" fg:w="1"/><text x="70.5588%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="70.3880%" y="565" width="0.0792%" height="15" fill="rgb(241,151,27)" fg:x="889" fg:w="1"/><text x="70.6380%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.3880%" y="549" width="0.0792%" height="15" fill="rgb(253,51,3)" fg:x="889" fg:w="1"/><text x="70.6380%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="70.4671%" y="549" width="0.1584%" height="15" fill="rgb(216,201,24)" fg:x="890" fg:w="2"/><text x="70.7171%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.5463%" y="533" width="0.0792%" height="15" fill="rgb(231,107,4)" fg:x="891" fg:w="1"/><text x="70.7963%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.5463%" y="517" width="0.0792%" height="15" fill="rgb(243,97,54)" fg:x="891" fg:w="1"/><text x="70.7963%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (4 samples, 0.32%)</title><rect x="70.3880%" y="581" width="0.3167%" height="15" fill="rgb(221,32,51)" fg:x="889" fg:w="4"/><text x="70.6380%" y="591.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="70.4671%" y="565" width="0.2375%" height="15" fill="rgb(218,171,35)" fg:x="890" fg:w="3"/><text x="70.7171%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.6255%" y="549" width="0.0792%" height="15" fill="rgb(214,20,53)" fg:x="892" fg:w="1"/><text x="70.8755%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="70.8630%" y="533" width="0.0792%" height="15" fill="rgb(239,9,52)" fg:x="895" fg:w="1"/><text x="71.1130%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="70.9422%" y="485" width="0.2375%" height="15" fill="rgb(215,114,45)" fg:x="896" fg:w="3"/><text x="71.1922%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="70.9422%" y="469" width="0.2375%" height="15" fill="rgb(208,118,9)" fg:x="896" fg:w="3"/><text x="71.1922%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="70.9422%" y="453" width="0.2375%" height="15" fill="rgb(235,7,39)" fg:x="896" fg:w="3"/><text x="71.1922%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="70.9422%" y="437" width="0.2375%" height="15" fill="rgb(243,225,15)" fg:x="896" fg:w="3"/><text x="71.1922%" y="447.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="71.0214%" y="421" width="0.1584%" height="15" fill="rgb(225,216,18)" fg:x="897" fg:w="2"/><text x="71.2714%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="71.0214%" y="405" width="0.1584%" height="15" fill="rgb(233,36,38)" fg:x="897" fg:w="2"/><text x="71.2714%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="71.0214%" y="389" width="0.1584%" height="15" fill="rgb(239,88,23)" fg:x="897" fg:w="2"/><text x="71.2714%" y="399.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="71.0214%" y="373" width="0.1584%" height="15" fill="rgb(219,181,35)" fg:x="897" fg:w="2"/><text x="71.2714%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.1006%" y="357" width="0.0792%" height="15" fill="rgb(215,18,46)" fg:x="898" fg:w="1"/><text x="71.3506%" y="367.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="71.1006%" y="341" width="0.0792%" height="15" fill="rgb(241,38,11)" fg:x="898" fg:w="1"/><text x="71.3506%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="71.1006%" y="325" width="0.0792%" height="15" fill="rgb(248,169,45)" fg:x="898" fg:w="1"/><text x="71.3506%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.40%)</title><rect x="70.9422%" y="533" width="0.3959%" height="15" fill="rgb(239,50,49)" fg:x="896" fg:w="5"/><text x="71.1922%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="70.9422%" y="517" width="0.3959%" height="15" fill="rgb(231,96,31)" fg:x="896" fg:w="5"/><text x="71.1922%" y="527.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (5 samples, 0.40%)</title><rect x="70.9422%" y="501" width="0.3959%" height="15" fill="rgb(224,193,37)" fg:x="896" fg:w="5"/><text x="71.1922%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.1797%" y="485" width="0.1584%" height="15" fill="rgb(227,153,50)" fg:x="899" fg:w="2"/><text x="71.4297%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="71.1797%" y="469" width="0.1584%" height="15" fill="rgb(249,228,3)" fg:x="899" fg:w="2"/><text x="71.4297%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="71.1797%" y="453" width="0.1584%" height="15" fill="rgb(219,164,43)" fg:x="899" fg:w="2"/><text x="71.4297%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.1797%" y="437" width="0.1584%" height="15" fill="rgb(216,45,41)" fg:x="899" fg:w="2"/><text x="71.4297%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.2589%" y="421" width="0.0792%" height="15" fill="rgb(210,226,51)" fg:x="900" fg:w="1"/><text x="71.5089%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="71.2589%" y="405" width="0.0792%" height="15" fill="rgb(209,117,49)" fg:x="900" fg:w="1"/><text x="71.5089%" y="415.50"></text></g><g><title>kernel::model::entity::Entity::from_value (9 samples, 0.71%)</title><rect x="70.7047%" y="581" width="0.7126%" height="15" fill="rgb(206,196,24)" fg:x="893" fg:w="9"/><text x="70.9547%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (9 samples, 0.71%)</title><rect x="70.7047%" y="565" width="0.7126%" height="15" fill="rgb(253,218,3)" fg:x="893" fg:w="9"/><text x="70.9547%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (9 samples, 0.71%)</title><rect x="70.7047%" y="549" width="0.7126%" height="15" fill="rgb(252,166,2)" fg:x="893" fg:w="9"/><text x="70.9547%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.3381%" y="533" width="0.0792%" height="15" fill="rgb(236,218,26)" fg:x="901" fg:w="1"/><text x="71.5881%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.3381%" y="517" width="0.0792%" height="15" fill="rgb(254,84,19)" fg:x="901" fg:w="1"/><text x="71.5881%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="71.3381%" y="501" width="0.0792%" height="15" fill="rgb(219,137,29)" fg:x="901" fg:w="1"/><text x="71.5881%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.4964%" y="453" width="0.0792%" height="15" fill="rgb(227,47,52)" fg:x="903" fg:w="1"/><text x="71.7464%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.4964%" y="437" width="0.0792%" height="15" fill="rgb(229,167,24)" fg:x="903" fg:w="1"/><text x="71.7464%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.4964%" y="421" width="0.0792%" height="15" fill="rgb(233,164,1)" fg:x="903" fg:w="1"/><text x="71.7464%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.4964%" y="405" width="0.0792%" height="15" fill="rgb(218,88,48)" fg:x="903" fg:w="1"/><text x="71.7464%" y="415.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (18 samples, 1.43%)</title><rect x="70.2296%" y="597" width="1.4252%" height="15" fill="rgb(226,214,24)" fg:x="887" fg:w="18"/><text x="70.4796%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="71.4173%" y="581" width="0.2375%" height="15" fill="rgb(233,29,12)" fg:x="902" fg:w="3"/><text x="71.6673%" y="591.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="71.4173%" y="565" width="0.2375%" height="15" fill="rgb(219,120,34)" fg:x="902" fg:w="3"/><text x="71.6673%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="71.4173%" y="549" width="0.2375%" height="15" fill="rgb(226,78,44)" fg:x="902" fg:w="3"/><text x="71.6673%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="71.4173%" y="533" width="0.2375%" height="15" fill="rgb(240,15,48)" fg:x="902" fg:w="3"/><text x="71.6673%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="71.4173%" y="517" width="0.2375%" height="15" fill="rgb(253,176,7)" fg:x="902" fg:w="3"/><text x="71.6673%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="71.4173%" y="501" width="0.2375%" height="15" fill="rgb(206,166,28)" fg:x="902" fg:w="3"/><text x="71.6673%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="71.4173%" y="485" width="0.2375%" height="15" fill="rgb(241,53,51)" fg:x="902" fg:w="3"/><text x="71.6673%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="71.4964%" y="469" width="0.1584%" height="15" fill="rgb(249,112,30)" fg:x="903" fg:w="2"/><text x="71.7464%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="71.5756%" y="453" width="0.0792%" height="15" fill="rgb(217,85,30)" fg:x="904" fg:w="1"/><text x="71.8256%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.5756%" y="437" width="0.0792%" height="15" fill="rgb(233,49,7)" fg:x="904" fg:w="1"/><text x="71.8256%" y="447.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (531 samples, 42.04%)</title><rect x="29.7704%" y="661" width="42.0428%" height="15" fill="rgb(234,109,9)" fg:x="376" fg:w="531"/><text x="30.0204%" y="671.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (531 samples, 42.04%)</title><rect x="29.7704%" y="645" width="42.0428%" height="15" fill="rgb(253,95,22)" fg:x="376" fg:w="531"/><text x="30.0204%" y="655.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (20 samples, 1.58%)</title><rect x="70.2296%" y="629" width="1.5835%" height="15" fill="rgb(233,176,25)" fg:x="887" fg:w="20"/><text x="70.4796%" y="639.50"></text></g><g><title>engine::session::Session::load_entity (20 samples, 1.58%)</title><rect x="70.2296%" y="613" width="1.5835%" height="15" fill="rgb(236,33,39)" fg:x="887" fg:w="20"/><text x="70.4796%" y="623.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (2 samples, 0.16%)</title><rect x="71.6548%" y="597" width="0.1584%" height="15" fill="rgb(223,226,42)" fg:x="905" fg:w="2"/><text x="71.9048%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (908 samples, 71.89%)</title><rect x="0.0000%" y="709" width="71.8923%" height="15" fill="rgb(216,99,33)" fg:x="0" fg:w="908"/><text x="0.2500%" y="719.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (908 samples, 71.89%)</title><rect x="0.0000%" y="693" width="71.8923%" height="15" fill="rgb(235,84,23)" fg:x="0" fg:w="908"/><text x="0.2500%" y="703.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (908 samples, 71.89%)</title><rect x="0.0000%" y="677" width="71.8923%" height="15" fill="rgb(232,2,27)" fg:x="0" fg:w="908"/><text x="0.2500%" y="687.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="71.8131%" y="661" width="0.0792%" height="15" fill="rgb(241,23,22)" fg:x="907" fg:w="1"/><text x="72.0631%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="71.8131%" y="645" width="0.0792%" height="15" fill="rgb(211,73,27)" fg:x="907" fg:w="1"/><text x="72.0631%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.8131%" y="629" width="0.0792%" height="15" fill="rgb(235,109,49)" fg:x="907" fg:w="1"/><text x="72.0631%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.8131%" y="613" width="0.0792%" height="15" fill="rgb(230,99,29)" fg:x="907" fg:w="1"/><text x="72.0631%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="71.8923%" y="661" width="0.0792%" height="15" fill="rgb(245,199,7)" fg:x="908" fg:w="1"/><text x="72.1423%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.8923%" y="645" width="0.0792%" height="15" fill="rgb(217,179,10)" fg:x="908" fg:w="1"/><text x="72.1423%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.8923%" y="629" width="0.0792%" height="15" fill="rgb(254,99,47)" fg:x="908" fg:w="1"/><text x="72.1423%" y="639.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="71.9715%" y="565" width="0.1584%" height="15" fill="rgb(251,121,7)" fg:x="909" fg:w="2"/><text x="72.2215%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="71.9715%" y="581" width="0.2375%" height="15" fill="rgb(250,177,26)" fg:x="909" fg:w="3"/><text x="72.2215%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.1298%" y="565" width="0.0792%" height="15" fill="rgb(232,88,15)" fg:x="911" fg:w="1"/><text x="72.3798%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.1298%" y="549" width="0.0792%" height="15" fill="rgb(251,54,54)" fg:x="911" fg:w="1"/><text x="72.3798%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.1298%" y="533" width="0.0792%" height="15" fill="rgb(208,177,15)" fg:x="911" fg:w="1"/><text x="72.3798%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.1298%" y="517" width="0.0792%" height="15" fill="rgb(205,97,32)" fg:x="911" fg:w="1"/><text x="72.3798%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.1298%" y="501" width="0.0792%" height="15" fill="rgb(217,192,13)" fg:x="911" fg:w="1"/><text x="72.3798%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.2090%" y="549" width="0.0792%" height="15" fill="rgb(215,163,41)" fg:x="912" fg:w="1"/><text x="72.4590%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.2090%" y="533" width="0.0792%" height="15" fill="rgb(246,83,29)" fg:x="912" fg:w="1"/><text x="72.4590%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="72.2882%" y="533" width="0.0792%" height="15" fill="rgb(219,2,45)" fg:x="913" fg:w="1"/><text x="72.5382%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="72.2882%" y="517" width="0.0792%" height="15" fill="rgb(242,215,33)" fg:x="913" fg:w="1"/><text x="72.5382%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.2882%" y="501" width="0.0792%" height="15" fill="rgb(217,1,6)" fg:x="913" fg:w="1"/><text x="72.5382%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.2882%" y="485" width="0.0792%" height="15" fill="rgb(207,85,52)" fg:x="913" fg:w="1"/><text x="72.5382%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.2882%" y="469" width="0.0792%" height="15" fill="rgb(231,171,19)" fg:x="913" fg:w="1"/><text x="72.5382%" y="479.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="71.9715%" y="597" width="0.4751%" height="15" fill="rgb(207,128,4)" fg:x="909" fg:w="6"/><text x="72.2215%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="72.2090%" y="581" width="0.2375%" height="15" fill="rgb(219,208,4)" fg:x="912" fg:w="3"/><text x="72.4590%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="72.2090%" y="565" width="0.2375%" height="15" fill="rgb(235,161,42)" fg:x="912" fg:w="3"/><text x="72.4590%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="72.2882%" y="549" width="0.1584%" height="15" fill="rgb(247,218,18)" fg:x="913" fg:w="2"/><text x="72.5382%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.3674%" y="533" width="0.0792%" height="15" fill="rgb(232,114,51)" fg:x="914" fg:w="1"/><text x="72.6174%" y="543.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.55%)</title><rect x="71.9715%" y="661" width="0.5542%" height="15" fill="rgb(222,95,3)" fg:x="909" fg:w="7"/><text x="72.2215%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (7 samples, 0.55%)</title><rect x="71.9715%" y="645" width="0.5542%" height="15" fill="rgb(240,65,29)" fg:x="909" fg:w="7"/><text x="72.2215%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.55%)</title><rect x="71.9715%" y="629" width="0.5542%" height="15" fill="rgb(249,209,20)" fg:x="909" fg:w="7"/><text x="72.2215%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (7 samples, 0.55%)</title><rect x="71.9715%" y="613" width="0.5542%" height="15" fill="rgb(241,48,37)" fg:x="909" fg:w="7"/><text x="72.2215%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.4466%" y="597" width="0.0792%" height="15" fill="rgb(230,140,42)" fg:x="915" fg:w="1"/><text x="72.6966%" y="607.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new_cyclic (1 samples, 0.08%)</title><rect x="72.5257%" y="613" width="0.0792%" height="15" fill="rgb(230,176,45)" fg:x="916" fg:w="1"/><text x="72.7757%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.5257%" y="597" width="0.0792%" height="15" fill="rgb(245,112,21)" fg:x="916" fg:w="1"/><text x="72.7757%" y="607.50"></text></g><g><title>anyhow::error::object_drop (1 samples, 0.08%)</title><rect x="72.6049%" y="565" width="0.0792%" height="15" fill="rgb(207,183,35)" fg:x="917" fg:w="1"/><text x="72.8549%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;libloading::error::Error&gt; (1 samples, 0.08%)</title><rect x="72.6049%" y="549" width="0.0792%" height="15" fill="rgb(227,44,33)" fg:x="917" fg:w="1"/><text x="72.8549%" y="559.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="72.7633%" y="549" width="0.0792%" height="15" fill="rgb(246,120,21)" fg:x="919" fg:w="1"/><text x="73.0133%" y="559.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="72.7633%" y="533" width="0.0792%" height="15" fill="rgb(235,57,52)" fg:x="919" fg:w="1"/><text x="73.0133%" y="543.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (8 samples, 0.63%)</title><rect x="72.6049%" y="597" width="0.6334%" height="15" fill="rgb(238,84,10)" fg:x="917" fg:w="8"/><text x="72.8549%" y="607.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (8 samples, 0.63%)</title><rect x="72.6049%" y="581" width="0.6334%" height="15" fill="rgb(251,200,32)" fg:x="917" fg:w="8"/><text x="72.8549%" y="591.50"></text></g><g><title>libloading::safe::Library::new (7 samples, 0.55%)</title><rect x="72.6841%" y="565" width="0.5542%" height="15" fill="rgb(247,159,13)" fg:x="918" fg:w="7"/><text x="72.9341%" y="575.50"></text></g><g><title>dlopen (5 samples, 0.40%)</title><rect x="72.8424%" y="549" width="0.3959%" height="15" fill="rgb(238,64,4)" fg:x="920" fg:w="5"/><text x="73.0924%" y="559.50"></text></g><g><title>_dl_catch_error (5 samples, 0.40%)</title><rect x="72.8424%" y="533" width="0.3959%" height="15" fill="rgb(221,131,51)" fg:x="920" fg:w="5"/><text x="73.0924%" y="543.50"></text></g><g><title>_dl_catch_exception (5 samples, 0.40%)</title><rect x="72.8424%" y="517" width="0.3959%" height="15" fill="rgb(242,5,29)" fg:x="920" fg:w="5"/><text x="73.0924%" y="527.50"></text></g><g><title>_dl_catch_exception (5 samples, 0.40%)</title><rect x="72.8424%" y="501" width="0.3959%" height="15" fill="rgb(214,130,32)" fg:x="920" fg:w="5"/><text x="73.0924%" y="511.50"></text></g><g><title>_dl_catch_exception (5 samples, 0.40%)</title><rect x="72.8424%" y="485" width="0.3959%" height="15" fill="rgb(244,210,16)" fg:x="920" fg:w="5"/><text x="73.0924%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.1591%" y="469" width="0.0792%" height="15" fill="rgb(234,48,26)" fg:x="924" fg:w="1"/><text x="73.4091%" y="479.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (10 samples, 0.79%)</title><rect x="72.5257%" y="661" width="0.7918%" height="15" fill="rgb(231,82,38)" fg:x="916" fg:w="10"/><text x="72.7757%" y="671.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (10 samples, 0.79%)</title><rect x="72.5257%" y="645" width="0.7918%" height="15" fill="rgb(254,128,41)" fg:x="916" fg:w="10"/><text x="72.7757%" y="655.50"></text></g><g><title>engine::session::Session::new (10 samples, 0.79%)</title><rect x="72.5257%" y="629" width="0.7918%" height="15" fill="rgb(212,73,49)" fg:x="916" fg:w="10"/><text x="72.7757%" y="639.50"></text></g><g><title>engine::session::Session::initialize (9 samples, 0.71%)</title><rect x="72.6049%" y="613" width="0.7126%" height="15" fill="rgb(205,62,54)" fg:x="917" fg:w="9"/><text x="72.8549%" y="623.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="73.2383%" y="597" width="0.0792%" height="15" fill="rgb(228,0,8)" fg:x="925" fg:w="1"/><text x="73.4883%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="73.2383%" y="581" width="0.0792%" height="15" fill="rgb(251,28,17)" fg:x="925" fg:w="1"/><text x="73.4883%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="73.2383%" y="565" width="0.0792%" height="15" fill="rgb(238,105,27)" fg:x="925" fg:w="1"/><text x="73.4883%" y="575.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.2383%" y="549" width="0.0792%" height="15" fill="rgb(237,216,33)" fg:x="925" fg:w="1"/><text x="73.4883%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="73.3175%" y="645" width="0.0792%" height="15" fill="rgb(229,228,25)" fg:x="926" fg:w="1"/><text x="73.5675%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.3175%" y="629" width="0.0792%" height="15" fill="rgb(233,75,23)" fg:x="926" fg:w="1"/><text x="73.5675%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="73.4759%" y="517" width="0.0792%" height="15" fill="rgb(231,207,16)" fg:x="928" fg:w="1"/><text x="73.7259%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.4759%" y="501" width="0.0792%" height="15" fill="rgb(231,191,45)" fg:x="928" fg:w="1"/><text x="73.7259%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.4759%" y="485" width="0.0792%" height="15" fill="rgb(224,133,17)" fg:x="928" fg:w="1"/><text x="73.7259%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.4759%" y="469" width="0.0792%" height="15" fill="rgb(209,178,27)" fg:x="928" fg:w="1"/><text x="73.7259%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="73.4759%" y="453" width="0.0792%" height="15" fill="rgb(218,37,11)" fg:x="928" fg:w="1"/><text x="73.7259%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="73.4759%" y="437" width="0.0792%" height="15" fill="rgb(251,226,25)" fg:x="928" fg:w="1"/><text x="73.7259%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="73.4759%" y="421" width="0.0792%" height="15" fill="rgb(209,222,27)" fg:x="928" fg:w="1"/><text x="73.7259%" y="431.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="73.4759%" y="533" width="0.1584%" height="15" fill="rgb(238,22,21)" fg:x="928" fg:w="2"/><text x="73.7259%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.5550%" y="517" width="0.0792%" height="15" fill="rgb(233,161,25)" fg:x="929" fg:w="1"/><text x="73.8050%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="73.6342%" y="517" width="0.0792%" height="15" fill="rgb(226,122,53)" fg:x="930" fg:w="1"/><text x="73.8842%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.6342%" y="501" width="0.0792%" height="15" fill="rgb(220,123,17)" fg:x="930" fg:w="1"/><text x="73.8842%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.6342%" y="485" width="0.0792%" height="15" fill="rgb(230,224,35)" fg:x="930" fg:w="1"/><text x="73.8842%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="73.7134%" y="501" width="0.0792%" height="15" fill="rgb(246,83,8)" fg:x="931" fg:w="1"/><text x="73.9634%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="73.7134%" y="485" width="0.0792%" height="15" fill="rgb(230,214,17)" fg:x="931" fg:w="1"/><text x="73.9634%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="73.7134%" y="469" width="0.0792%" height="15" fill="rgb(222,97,18)" fg:x="931" fg:w="1"/><text x="73.9634%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="73.7134%" y="453" width="0.0792%" height="15" fill="rgb(206,79,1)" fg:x="931" fg:w="1"/><text x="73.9634%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.7134%" y="437" width="0.0792%" height="15" fill="rgb(214,121,34)" fg:x="931" fg:w="1"/><text x="73.9634%" y="447.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="73.7926%" y="485" width="0.0792%" height="15" fill="rgb(249,199,46)" fg:x="932" fg:w="1"/><text x="74.0426%" y="495.50"></text></g><g><title>ryu::d2s::d2d (1 samples, 0.08%)</title><rect x="73.7926%" y="469" width="0.0792%" height="15" fill="rgb(214,222,46)" fg:x="932" fg:w="1"/><text x="74.0426%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="73.8717%" y="485" width="0.0792%" height="15" fill="rgb(248,168,30)" fg:x="933" fg:w="1"/><text x="74.1217%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.8717%" y="469" width="0.0792%" height="15" fill="rgb(226,14,28)" fg:x="933" fg:w="1"/><text x="74.1217%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="73.9509%" y="469" width="0.0792%" height="15" fill="rgb(253,123,1)" fg:x="934" fg:w="1"/><text x="74.2009%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.9509%" y="453" width="0.0792%" height="15" fill="rgb(225,24,42)" fg:x="934" fg:w="1"/><text x="74.2009%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.9509%" y="437" width="0.0792%" height="15" fill="rgb(216,161,37)" fg:x="934" fg:w="1"/><text x="74.2009%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.9509%" y="421" width="0.0792%" height="15" fill="rgb(251,164,26)" fg:x="934" fg:w="1"/><text x="74.2009%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.0301%" y="469" width="0.0792%" height="15" fill="rgb(219,177,3)" fg:x="935" fg:w="1"/><text x="74.2801%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="74.0301%" y="453" width="0.0792%" height="15" fill="rgb(222,65,0)" fg:x="935" fg:w="1"/><text x="74.2801%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="73.7134%" y="517" width="0.4751%" height="15" fill="rgb(223,69,54)" fg:x="931" fg:w="6"/><text x="73.9634%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="73.7926%" y="501" width="0.3959%" height="15" fill="rgb(235,30,27)" fg:x="932" fg:w="5"/><text x="74.0426%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="73.9509%" y="485" width="0.2375%" height="15" fill="rgb(220,183,50)" fg:x="934" fg:w="3"/><text x="74.2009%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.1093%" y="469" width="0.0792%" height="15" fill="rgb(248,198,15)" fg:x="936" fg:w="1"/><text x="74.3593%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (11 samples, 0.87%)</title><rect x="73.4759%" y="549" width="0.8709%" height="15" fill="rgb(222,211,4)" fg:x="928" fg:w="11"/><text x="73.7259%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.71%)</title><rect x="73.6342%" y="533" width="0.7126%" height="15" fill="rgb(214,102,34)" fg:x="930" fg:w="9"/><text x="73.8842%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="74.1884%" y="517" width="0.1584%" height="15" fill="rgb(245,92,5)" fg:x="937" fg:w="2"/><text x="74.4384%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.2676%" y="501" width="0.0792%" height="15" fill="rgb(252,72,51)" fg:x="938" fg:w="1"/><text x="74.5176%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.2676%" y="485" width="0.0792%" height="15" fill="rgb(252,208,19)" fg:x="938" fg:w="1"/><text x="74.5176%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="74.2676%" y="469" width="0.0792%" height="15" fill="rgb(211,69,7)" fg:x="938" fg:w="1"/><text x="74.5176%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="74.2676%" y="453" width="0.0792%" height="15" fill="rgb(211,27,16)" fg:x="938" fg:w="1"/><text x="74.5176%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="74.2676%" y="437" width="0.0792%" height="15" fill="rgb(219,216,14)" fg:x="938" fg:w="1"/><text x="74.5176%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="74.4260%" y="469" width="0.0792%" height="15" fill="rgb(219,71,8)" fg:x="940" fg:w="1"/><text x="74.6760%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="74.4260%" y="453" width="0.0792%" height="15" fill="rgb(223,170,53)" fg:x="940" fg:w="1"/><text x="74.6760%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.4260%" y="437" width="0.0792%" height="15" fill="rgb(246,21,26)" fg:x="940" fg:w="1"/><text x="74.6760%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="74.3468%" y="549" width="0.2375%" height="15" fill="rgb(248,20,46)" fg:x="939" fg:w="3"/><text x="74.5968%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="74.3468%" y="533" width="0.2375%" height="15" fill="rgb(252,94,11)" fg:x="939" fg:w="3"/><text x="74.5968%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="74.3468%" y="517" width="0.2375%" height="15" fill="rgb(236,163,8)" fg:x="939" fg:w="3"/><text x="74.5968%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="74.3468%" y="501" width="0.2375%" height="15" fill="rgb(217,221,45)" fg:x="939" fg:w="3"/><text x="74.5968%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="74.3468%" y="485" width="0.2375%" height="15" fill="rgb(238,38,17)" fg:x="939" fg:w="3"/><text x="74.5968%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.5051%" y="469" width="0.0792%" height="15" fill="rgb(242,210,23)" fg:x="941" fg:w="1"/><text x="74.7551%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="74.5843%" y="501" width="0.1584%" height="15" fill="rgb(250,86,53)" fg:x="942" fg:w="2"/><text x="74.8343%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="74.7427%" y="453" width="0.0792%" height="15" fill="rgb(223,168,25)" fg:x="944" fg:w="1"/><text x="74.9927%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="74.7427%" y="437" width="0.0792%" height="15" fill="rgb(251,189,4)" fg:x="944" fg:w="1"/><text x="74.9927%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="74.7427%" y="421" width="0.0792%" height="15" fill="rgb(245,19,28)" fg:x="944" fg:w="1"/><text x="74.9927%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="74.7427%" y="405" width="0.0792%" height="15" fill="rgb(207,10,34)" fg:x="944" fg:w="1"/><text x="74.9927%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="74.8219%" y="437" width="0.0792%" height="15" fill="rgb(235,153,31)" fg:x="945" fg:w="1"/><text x="75.0719%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="74.8219%" y="421" width="0.0792%" height="15" fill="rgb(228,72,37)" fg:x="945" fg:w="1"/><text x="75.0719%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.8219%" y="405" width="0.0792%" height="15" fill="rgb(215,15,16)" fg:x="945" fg:w="1"/><text x="75.0719%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="74.7427%" y="485" width="0.3167%" height="15" fill="rgb(250,119,29)" fg:x="944" fg:w="4"/><text x="74.9927%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="74.7427%" y="469" width="0.3167%" height="15" fill="rgb(214,59,1)" fg:x="944" fg:w="4"/><text x="74.9927%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="74.8219%" y="453" width="0.2375%" height="15" fill="rgb(223,109,25)" fg:x="945" fg:w="3"/><text x="75.0719%" y="463.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="74.9010%" y="437" width="0.1584%" height="15" fill="rgb(230,198,22)" fg:x="946" fg:w="2"/><text x="75.1510%" y="447.50"></text></g><g><title>engine::session::Session::flush (22 samples, 1.74%)</title><rect x="73.3967%" y="645" width="1.7419%" height="15" fill="rgb(245,184,46)" fg:x="927" fg:w="22"/><text x="73.6467%" y="655.50"></text></g><g><title>engine::session::state::State::close (22 samples, 1.74%)</title><rect x="73.3967%" y="629" width="1.7419%" height="15" fill="rgb(253,73,16)" fg:x="927" fg:w="22"/><text x="73.6467%" y="639.50"></text></g><g><title>engine::session::state::State::flush_entities (21 samples, 1.66%)</title><rect x="73.4759%" y="613" width="1.6627%" height="15" fill="rgb(206,94,45)" fg:x="928" fg:w="21"/><text x="73.7259%" y="623.50"></text></g><g><title>core::iter::adapters::try_process (21 samples, 1.66%)</title><rect x="73.4759%" y="597" width="1.6627%" height="15" fill="rgb(236,83,27)" fg:x="928" fg:w="21"/><text x="73.7259%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (21 samples, 1.66%)</title><rect x="73.4759%" y="581" width="1.6627%" height="15" fill="rgb(220,196,8)" fg:x="928" fg:w="21"/><text x="73.7259%" y="591.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (21 samples, 1.66%)</title><rect x="73.4759%" y="565" width="1.6627%" height="15" fill="rgb(254,185,14)" fg:x="928" fg:w="21"/><text x="73.7259%" y="575.50"></text></g><g><title>kernel::model::any_entity_changes (7 samples, 0.55%)</title><rect x="74.5843%" y="549" width="0.5542%" height="15" fill="rgb(226,50,22)" fg:x="942" fg:w="7"/><text x="74.8343%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.55%)</title><rect x="74.5843%" y="533" width="0.5542%" height="15" fill="rgb(253,147,0)" fg:x="942" fg:w="7"/><text x="74.8343%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.55%)</title><rect x="74.5843%" y="517" width="0.5542%" height="15" fill="rgb(252,46,33)" fg:x="942" fg:w="7"/><text x="74.8343%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="74.7427%" y="501" width="0.3959%" height="15" fill="rgb(242,22,54)" fg:x="944" fg:w="5"/><text x="74.9927%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.0594%" y="485" width="0.0792%" height="15" fill="rgb(223,178,32)" fg:x="948" fg:w="1"/><text x="75.3094%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.0594%" y="469" width="0.0792%" height="15" fill="rgb(214,106,53)" fg:x="948" fg:w="1"/><text x="75.3094%" y="479.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="75.0594%" y="453" width="0.0792%" height="15" fill="rgb(232,65,50)" fg:x="948" fg:w="1"/><text x="75.3094%" y="463.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="75.0594%" y="437" width="0.0792%" height="15" fill="rgb(231,110,28)" fg:x="948" fg:w="1"/><text x="75.3094%" y="447.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="75.1386%" y="645" width="0.0792%" height="15" fill="rgb(216,71,40)" fg:x="949" fg:w="1"/><text x="75.3886%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="75.1386%" y="629" width="0.0792%" height="15" fill="rgb(229,89,53)" fg:x="949" fg:w="1"/><text x="75.3886%" y="639.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="75.1386%" y="613" width="0.0792%" height="15" fill="rgb(210,124,14)" fg:x="949" fg:w="1"/><text x="75.3886%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="75.1386%" y="597" width="0.0792%" height="15" fill="rgb(236,213,6)" fg:x="949" fg:w="1"/><text x="75.3886%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.1386%" y="581" width="0.0792%" height="15" fill="rgb(228,41,5)" fg:x="949" fg:w="1"/><text x="75.3886%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="75.1386%" y="565" width="0.0792%" height="15" fill="rgb(221,167,25)" fg:x="949" fg:w="1"/><text x="75.3886%" y="575.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="75.1386%" y="549" width="0.0792%" height="15" fill="rgb(228,144,37)" fg:x="949" fg:w="1"/><text x="75.3886%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="75.1386%" y="533" width="0.0792%" height="15" fill="rgb(227,189,38)" fg:x="949" fg:w="1"/><text x="75.3886%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.1386%" y="517" width="0.0792%" height="15" fill="rgb(218,8,2)" fg:x="949" fg:w="1"/><text x="75.3886%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.1386%" y="501" width="0.0792%" height="15" fill="rgb(209,61,28)" fg:x="949" fg:w="1"/><text x="75.3886%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="75.1386%" y="485" width="0.0792%" height="15" fill="rgb(233,140,39)" fg:x="949" fg:w="1"/><text x="75.3886%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="75.2177%" y="613" width="0.0792%" height="15" fill="rgb(251,66,48)" fg:x="950" fg:w="1"/><text x="75.4677%" y="623.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="75.2177%" y="597" width="0.0792%" height="15" fill="rgb(210,44,45)" fg:x="950" fg:w="1"/><text x="75.4677%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="75.2177%" y="581" width="0.0792%" height="15" fill="rgb(214,136,46)" fg:x="950" fg:w="1"/><text x="75.4677%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="75.2177%" y="565" width="0.0792%" height="15" fill="rgb(207,130,50)" fg:x="950" fg:w="1"/><text x="75.4677%" y="575.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="75.2969%" y="613" width="0.0792%" height="15" fill="rgb(228,102,49)" fg:x="951" fg:w="1"/><text x="75.5469%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="75.2969%" y="597" width="0.0792%" height="15" fill="rgb(253,55,1)" fg:x="951" fg:w="1"/><text x="75.5469%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="75.2969%" y="581" width="0.0792%" height="15" fill="rgb(238,222,9)" fg:x="951" fg:w="1"/><text x="75.5469%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.2969%" y="565" width="0.0792%" height="15" fill="rgb(246,99,6)" fg:x="951" fg:w="1"/><text x="75.5469%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="75.3761%" y="597" width="0.0792%" height="15" fill="rgb(219,110,26)" fg:x="952" fg:w="1"/><text x="75.6261%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="75.3761%" y="581" width="0.0792%" height="15" fill="rgb(239,160,33)" fg:x="952" fg:w="1"/><text x="75.6261%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="75.3761%" y="565" width="0.0792%" height="15" fill="rgb(220,202,23)" fg:x="952" fg:w="1"/><text x="75.6261%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="75.3761%" y="549" width="0.0792%" height="15" fill="rgb(208,80,26)" fg:x="952" fg:w="1"/><text x="75.6261%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.3761%" y="533" width="0.0792%" height="15" fill="rgb(243,85,7)" fg:x="952" fg:w="1"/><text x="75.6261%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.3761%" y="517" width="0.0792%" height="15" fill="rgb(228,77,47)" fg:x="952" fg:w="1"/><text x="75.6261%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="75.2177%" y="629" width="0.3167%" height="15" fill="rgb(212,226,8)" fg:x="950" fg:w="4"/><text x="75.4677%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="75.3761%" y="613" width="0.1584%" height="15" fill="rgb(241,120,54)" fg:x="952" fg:w="2"/><text x="75.6261%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="75.4553%" y="597" width="0.0792%" height="15" fill="rgb(226,80,16)" fg:x="953" fg:w="1"/><text x="75.7053%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.4553%" y="581" width="0.0792%" height="15" fill="rgb(240,76,13)" fg:x="953" fg:w="1"/><text x="75.7053%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="75.4553%" y="565" width="0.0792%" height="15" fill="rgb(252,74,8)" fg:x="953" fg:w="1"/><text x="75.7053%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="75.4553%" y="549" width="0.0792%" height="15" fill="rgb(244,155,2)" fg:x="953" fg:w="1"/><text x="75.7053%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="75.4553%" y="533" width="0.0792%" height="15" fill="rgb(215,81,35)" fg:x="953" fg:w="1"/><text x="75.7053%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="75.4553%" y="517" width="0.0792%" height="15" fill="rgb(206,55,2)" fg:x="953" fg:w="1"/><text x="75.7053%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="75.4553%" y="501" width="0.0792%" height="15" fill="rgb(231,2,34)" fg:x="953" fg:w="1"/><text x="75.7053%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="75.4553%" y="485" width="0.0792%" height="15" fill="rgb(242,176,48)" fg:x="953" fg:w="1"/><text x="75.7053%" y="495.50"></text></g><g><title>plugins_core::build::Build::save (5 samples, 0.40%)</title><rect x="75.2177%" y="645" width="0.3959%" height="15" fill="rgb(249,31,36)" fg:x="950" fg:w="5"/><text x="75.4677%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="75.5344%" y="629" width="0.0792%" height="15" fill="rgb(205,18,17)" fg:x="954" fg:w="1"/><text x="75.7844%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="75.5344%" y="613" width="0.0792%" height="15" fill="rgb(254,130,5)" fg:x="954" fg:w="1"/><text x="75.7844%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="75.5344%" y="597" width="0.0792%" height="15" fill="rgb(229,42,45)" fg:x="954" fg:w="1"/><text x="75.7844%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.5344%" y="581" width="0.0792%" height="15" fill="rgb(245,95,25)" fg:x="954" fg:w="1"/><text x="75.7844%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.5344%" y="565" width="0.0792%" height="15" fill="rgb(249,193,38)" fg:x="954" fg:w="1"/><text x="75.7844%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.5344%" y="549" width="0.0792%" height="15" fill="rgb(241,140,43)" fg:x="954" fg:w="1"/><text x="75.7844%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.5344%" y="533" width="0.0792%" height="15" fill="rgb(245,78,48)" fg:x="954" fg:w="1"/><text x="75.7844%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.5344%" y="517" width="0.0792%" height="15" fill="rgb(214,92,39)" fg:x="954" fg:w="1"/><text x="75.7844%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.5344%" y="501" width="0.0792%" height="15" fill="rgb(211,189,14)" fg:x="954" fg:w="1"/><text x="75.7844%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.5344%" y="485" width="0.0792%" height="15" fill="rgb(218,7,24)" fg:x="954" fg:w="1"/><text x="75.7844%" y="495.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (1 samples, 0.08%)</title><rect x="75.6136%" y="645" width="0.0792%" height="15" fill="rgb(224,200,49)" fg:x="955" fg:w="1"/><text x="75.8636%" y="655.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="75.6136%" y="629" width="0.0792%" height="15" fill="rgb(218,210,14)" fg:x="955" fg:w="1"/><text x="75.8636%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="75.6136%" y="613" width="0.0792%" height="15" fill="rgb(234,142,31)" fg:x="955" fg:w="1"/><text x="75.8636%" y="623.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="75.6136%" y="597" width="0.0792%" height="15" fill="rgb(227,165,2)" fg:x="955" fg:w="1"/><text x="75.8636%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.6136%" y="581" width="0.0792%" height="15" fill="rgb(232,44,46)" fg:x="955" fg:w="1"/><text x="75.8636%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="75.6136%" y="565" width="0.0792%" height="15" fill="rgb(236,149,47)" fg:x="955" fg:w="1"/><text x="75.8636%" y="575.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="75.6136%" y="549" width="0.0792%" height="15" fill="rgb(227,45,31)" fg:x="955" fg:w="1"/><text x="75.8636%" y="559.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="75.6928%" y="629" width="0.0792%" height="15" fill="rgb(240,176,51)" fg:x="956" fg:w="1"/><text x="75.9428%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="75.6928%" y="613" width="0.0792%" height="15" fill="rgb(249,146,41)" fg:x="956" fg:w="1"/><text x="75.9428%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="75.6928%" y="597" width="0.0792%" height="15" fill="rgb(213,208,4)" fg:x="956" fg:w="1"/><text x="75.9428%" y="607.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="75.6928%" y="581" width="0.0792%" height="15" fill="rgb(245,84,36)" fg:x="956" fg:w="1"/><text x="75.9428%" y="591.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="75.6928%" y="565" width="0.0792%" height="15" fill="rgb(254,84,18)" fg:x="956" fg:w="1"/><text x="75.9428%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="75.6928%" y="549" width="0.0792%" height="15" fill="rgb(225,38,54)" fg:x="956" fg:w="1"/><text x="75.9428%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="75.6928%" y="533" width="0.0792%" height="15" fill="rgb(246,50,30)" fg:x="956" fg:w="1"/><text x="75.9428%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="75.6928%" y="517" width="0.0792%" height="15" fill="rgb(246,148,9)" fg:x="956" fg:w="1"/><text x="75.9428%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.6928%" y="501" width="0.0792%" height="15" fill="rgb(223,75,4)" fg:x="956" fg:w="1"/><text x="75.9428%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.6928%" y="485" width="0.0792%" height="15" fill="rgb(239,148,41)" fg:x="956" fg:w="1"/><text x="75.9428%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.6928%" y="469" width="0.0792%" height="15" fill="rgb(205,195,3)" fg:x="956" fg:w="1"/><text x="75.9428%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="75.7720%" y="501" width="0.2375%" height="15" fill="rgb(254,161,1)" fg:x="957" fg:w="3"/><text x="76.0220%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="75.8511%" y="485" width="0.1584%" height="15" fill="rgb(211,229,8)" fg:x="958" fg:w="2"/><text x="76.1011%" y="495.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="75.8511%" y="469" width="0.1584%" height="15" fill="rgb(220,97,9)" fg:x="958" fg:w="2"/><text x="76.1011%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="75.8511%" y="453" width="0.1584%" height="15" fill="rgb(240,218,8)" fg:x="958" fg:w="2"/><text x="76.1011%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="75.8511%" y="437" width="0.1584%" height="15" fill="rgb(250,44,0)" fg:x="958" fg:w="2"/><text x="76.1011%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="75.9303%" y="421" width="0.0792%" height="15" fill="rgb(236,41,53)" fg:x="959" fg:w="1"/><text x="76.1803%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.9303%" y="405" width="0.0792%" height="15" fill="rgb(218,227,13)" fg:x="959" fg:w="1"/><text x="76.1803%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="75.9303%" y="389" width="0.0792%" height="15" fill="rgb(217,94,32)" fg:x="959" fg:w="1"/><text x="76.1803%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="76.0095%" y="469" width="0.0792%" height="15" fill="rgb(213,217,12)" fg:x="960" fg:w="1"/><text x="76.2595%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.0095%" y="453" width="0.0792%" height="15" fill="rgb(229,13,46)" fg:x="960" fg:w="1"/><text x="76.2595%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.0095%" y="437" width="0.0792%" height="15" fill="rgb(243,139,5)" fg:x="960" fg:w="1"/><text x="76.2595%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="76.0887%" y="469" width="0.0792%" height="15" fill="rgb(249,38,45)" fg:x="961" fg:w="1"/><text x="76.3387%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="76.1679%" y="453" width="0.0792%" height="15" fill="rgb(216,70,11)" fg:x="962" fg:w="1"/><text x="76.4179%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="76.2470%" y="453" width="0.1584%" height="15" fill="rgb(253,101,25)" fg:x="963" fg:w="2"/><text x="76.4970%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="76.2470%" y="437" width="0.1584%" height="15" fill="rgb(207,197,30)" fg:x="963" fg:w="2"/><text x="76.4970%" y="447.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="76.2470%" y="421" width="0.1584%" height="15" fill="rgb(238,87,13)" fg:x="963" fg:w="2"/><text x="76.4970%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.3262%" y="405" width="0.0792%" height="15" fill="rgb(215,155,8)" fg:x="964" fg:w="1"/><text x="76.5762%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.3262%" y="389" width="0.0792%" height="15" fill="rgb(239,166,38)" fg:x="964" fg:w="1"/><text x="76.5762%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="76.3262%" y="373" width="0.0792%" height="15" fill="rgb(240,194,35)" fg:x="964" fg:w="1"/><text x="76.5762%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.3262%" y="357" width="0.0792%" height="15" fill="rgb(219,10,44)" fg:x="964" fg:w="1"/><text x="76.5762%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="76.3262%" y="341" width="0.0792%" height="15" fill="rgb(251,220,35)" fg:x="964" fg:w="1"/><text x="76.5762%" y="351.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.79%)</title><rect x="75.7720%" y="517" width="0.7918%" height="15" fill="rgb(218,117,13)" fg:x="957" fg:w="10"/><text x="76.0220%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.55%)</title><rect x="76.0095%" y="501" width="0.5542%" height="15" fill="rgb(221,213,40)" fg:x="960" fg:w="7"/><text x="76.2595%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.55%)</title><rect x="76.0095%" y="485" width="0.5542%" height="15" fill="rgb(251,224,35)" fg:x="960" fg:w="7"/><text x="76.2595%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="76.1679%" y="469" width="0.3959%" height="15" fill="rgb(241,33,39)" fg:x="962" fg:w="5"/><text x="76.4179%" y="479.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="76.4054%" y="453" width="0.1584%" height="15" fill="rgb(222,74,17)" fg:x="965" fg:w="2"/><text x="76.6554%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.4846%" y="437" width="0.0792%" height="15" fill="rgb(225,103,0)" fg:x="966" fg:w="1"/><text x="76.7346%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.4846%" y="421" width="0.0792%" height="15" fill="rgb(240,0,12)" fg:x="966" fg:w="1"/><text x="76.7346%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.5637%" y="469" width="0.0792%" height="15" fill="rgb(233,213,37)" fg:x="967" fg:w="1"/><text x="76.8137%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="76.5637%" y="517" width="0.1584%" height="15" fill="rgb(225,84,52)" fg:x="967" fg:w="2"/><text x="76.8137%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="76.5637%" y="501" width="0.1584%" height="15" fill="rgb(247,160,51)" fg:x="967" fg:w="2"/><text x="76.8137%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="76.5637%" y="485" width="0.1584%" height="15" fill="rgb(244,60,51)" fg:x="967" fg:w="2"/><text x="76.8137%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.6429%" y="469" width="0.0792%" height="15" fill="rgb(233,114,7)" fg:x="968" fg:w="1"/><text x="76.8929%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.6429%" y="453" width="0.0792%" height="15" fill="rgb(246,136,16)" fg:x="968" fg:w="1"/><text x="76.8929%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.6429%" y="437" width="0.0792%" height="15" fill="rgb(243,114,45)" fg:x="968" fg:w="1"/><text x="76.8929%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.6429%" y="421" width="0.0792%" height="15" fill="rgb(247,183,43)" fg:x="968" fg:w="1"/><text x="76.8929%" y="431.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="76.7221%" y="501" width="0.0792%" height="15" fill="rgb(251,210,42)" fg:x="969" fg:w="1"/><text x="76.9721%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;treediff::tools::record::Recorder&lt;treediff::value::shared::Key,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="76.7221%" y="485" width="0.0792%" height="15" fill="rgb(221,88,35)" fg:x="969" fg:w="1"/><text x="76.9721%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="76.8013%" y="437" width="0.0792%" height="15" fill="rgb(242,21,20)" fg:x="970" fg:w="1"/><text x="77.0513%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="76.8804%" y="437" width="0.1584%" height="15" fill="rgb(233,226,36)" fg:x="971" fg:w="2"/><text x="77.1304%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="76.8804%" y="421" width="0.1584%" height="15" fill="rgb(243,189,34)" fg:x="971" fg:w="2"/><text x="77.1304%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.9596%" y="405" width="0.0792%" height="15" fill="rgb(207,145,50)" fg:x="972" fg:w="1"/><text x="77.2096%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.9596%" y="389" width="0.0792%" height="15" fill="rgb(242,1,50)" fg:x="972" fg:w="1"/><text x="77.2096%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.9596%" y="373" width="0.0792%" height="15" fill="rgb(231,65,32)" fg:x="972" fg:w="1"/><text x="77.2096%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.9596%" y="357" width="0.0792%" height="15" fill="rgb(208,68,49)" fg:x="972" fg:w="1"/><text x="77.2096%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.9596%" y="341" width="0.0792%" height="15" fill="rgb(253,54,49)" fg:x="972" fg:w="1"/><text x="77.2096%" y="351.50"></text></g><g><title>engine::session::Session::flush (17 samples, 1.35%)</title><rect x="75.7720%" y="629" width="1.3460%" height="15" fill="rgb(245,186,24)" fg:x="957" fg:w="17"/><text x="76.0220%" y="639.50"></text></g><g><title>engine::session::Session::save_changes (17 samples, 1.35%)</title><rect x="75.7720%" y="613" width="1.3460%" height="15" fill="rgb(209,2,41)" fg:x="957" fg:w="17"/><text x="76.0220%" y="623.50"></text></g><g><title>engine::session::state::State::close (17 samples, 1.35%)</title><rect x="75.7720%" y="597" width="1.3460%" height="15" fill="rgb(242,208,54)" fg:x="957" fg:w="17"/><text x="76.0220%" y="607.50"></text></g><g><title>engine::session::state::State::flush_entities (17 samples, 1.35%)</title><rect x="75.7720%" y="581" width="1.3460%" height="15" fill="rgb(225,9,51)" fg:x="957" fg:w="17"/><text x="76.0220%" y="591.50"></text></g><g><title>core::iter::adapters::try_process (17 samples, 1.35%)</title><rect x="75.7720%" y="565" width="1.3460%" height="15" fill="rgb(207,207,25)" fg:x="957" fg:w="17"/><text x="76.0220%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (17 samples, 1.35%)</title><rect x="75.7720%" y="549" width="1.3460%" height="15" fill="rgb(253,96,18)" fg:x="957" fg:w="17"/><text x="76.0220%" y="559.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (17 samples, 1.35%)</title><rect x="75.7720%" y="533" width="1.3460%" height="15" fill="rgb(252,215,20)" fg:x="957" fg:w="17"/><text x="76.0220%" y="543.50"></text></g><g><title>kernel::model::any_entity_changes (5 samples, 0.40%)</title><rect x="76.7221%" y="517" width="0.3959%" height="15" fill="rgb(245,227,26)" fg:x="969" fg:w="5"/><text x="76.9721%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="76.8013%" y="501" width="0.3167%" height="15" fill="rgb(241,208,0)" fg:x="970" fg:w="4"/><text x="77.0513%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="76.8013%" y="485" width="0.3167%" height="15" fill="rgb(224,130,10)" fg:x="970" fg:w="4"/><text x="77.0513%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="76.8013%" y="469" width="0.3167%" height="15" fill="rgb(237,29,0)" fg:x="970" fg:w="4"/><text x="77.0513%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="76.8013%" y="453" width="0.3167%" height="15" fill="rgb(219,27,41)" fg:x="970" fg:w="4"/><text x="77.0513%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="77.0388%" y="437" width="0.0792%" height="15" fill="rgb(245,101,19)" fg:x="973" fg:w="1"/><text x="77.2888%" y="447.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="77.0388%" y="421" width="0.0792%" height="15" fill="rgb(243,44,37)" fg:x="973" fg:w="1"/><text x="77.2888%" y="431.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="77.0388%" y="405" width="0.0792%" height="15" fill="rgb(228,213,43)" fg:x="973" fg:w="1"/><text x="77.2888%" y="415.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="77.1180%" y="581" width="0.0792%" height="15" fill="rgb(219,163,21)" fg:x="974" fg:w="1"/><text x="77.3680%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.1180%" y="565" width="0.0792%" height="15" fill="rgb(234,86,24)" fg:x="974" fg:w="1"/><text x="77.3680%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.1180%" y="549" width="0.0792%" height="15" fill="rgb(225,10,24)" fg:x="974" fg:w="1"/><text x="77.3680%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.1180%" y="533" width="0.0792%" height="15" fill="rgb(218,109,7)" fg:x="974" fg:w="1"/><text x="77.3680%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="77.1180%" y="517" width="0.0792%" height="15" fill="rgb(210,20,26)" fg:x="974" fg:w="1"/><text x="77.3680%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="77.1180%" y="501" width="0.0792%" height="15" fill="rgb(216,18,1)" fg:x="974" fg:w="1"/><text x="77.3680%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="77.1180%" y="485" width="0.0792%" height="15" fill="rgb(206,163,23)" fg:x="974" fg:w="1"/><text x="77.3680%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.1180%" y="469" width="0.0792%" height="15" fill="rgb(229,150,31)" fg:x="974" fg:w="1"/><text x="77.3680%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.1180%" y="453" width="0.0792%" height="15" fill="rgb(231,10,5)" fg:x="974" fg:w="1"/><text x="77.3680%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="77.1180%" y="437" width="0.0792%" height="15" fill="rgb(250,40,50)" fg:x="974" fg:w="1"/><text x="77.3680%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="77.1180%" y="421" width="0.0792%" height="15" fill="rgb(217,119,7)" fg:x="974" fg:w="1"/><text x="77.3680%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="77.1180%" y="405" width="0.0792%" height="15" fill="rgb(245,214,40)" fg:x="974" fg:w="1"/><text x="77.3680%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="77.1180%" y="389" width="0.0792%" height="15" fill="rgb(216,187,1)" fg:x="974" fg:w="1"/><text x="77.3680%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.1180%" y="373" width="0.0792%" height="15" fill="rgb(237,146,21)" fg:x="974" fg:w="1"/><text x="77.3680%" y="383.50"></text></g><g><title>plugins_core::build::Build::save (2 samples, 0.16%)</title><rect x="77.1180%" y="629" width="0.1584%" height="15" fill="rgb(210,174,47)" fg:x="974" fg:w="2"/><text x="77.3680%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="77.1180%" y="613" width="0.1584%" height="15" fill="rgb(218,111,39)" fg:x="974" fg:w="2"/><text x="77.3680%" y="623.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="77.1180%" y="597" width="0.1584%" height="15" fill="rgb(224,95,19)" fg:x="974" fg:w="2"/><text x="77.3680%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="77.1971%" y="581" width="0.0792%" height="15" fill="rgb(234,15,38)" fg:x="975" fg:w="1"/><text x="77.4471%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="77.1971%" y="565" width="0.0792%" height="15" fill="rgb(246,56,12)" fg:x="975" fg:w="1"/><text x="77.4471%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.1971%" y="549" width="0.0792%" height="15" fill="rgb(247,16,17)" fg:x="975" fg:w="1"/><text x="77.4471%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="77.1971%" y="533" width="0.0792%" height="15" fill="rgb(215,151,11)" fg:x="975" fg:w="1"/><text x="77.4471%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.1971%" y="517" width="0.0792%" height="15" fill="rgb(225,16,24)" fg:x="975" fg:w="1"/><text x="77.4471%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.1971%" y="501" width="0.0792%" height="15" fill="rgb(217,117,5)" fg:x="975" fg:w="1"/><text x="77.4471%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="77.2763%" y="581" width="0.0792%" height="15" fill="rgb(246,187,53)" fg:x="976" fg:w="1"/><text x="77.5263%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.2763%" y="565" width="0.0792%" height="15" fill="rgb(241,71,40)" fg:x="976" fg:w="1"/><text x="77.5263%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="77.2763%" y="549" width="0.0792%" height="15" fill="rgb(231,67,39)" fg:x="976" fg:w="1"/><text x="77.5263%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="77.2763%" y="533" width="0.0792%" height="15" fill="rgb(222,120,24)" fg:x="976" fg:w="1"/><text x="77.5263%" y="543.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (2 samples, 0.16%)</title><rect x="77.2763%" y="629" width="0.1584%" height="15" fill="rgb(248,3,3)" fg:x="976" fg:w="2"/><text x="77.5263%" y="639.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="77.2763%" y="613" width="0.1584%" height="15" fill="rgb(228,218,5)" fg:x="976" fg:w="2"/><text x="77.5263%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="77.2763%" y="597" width="0.1584%" height="15" fill="rgb(212,202,43)" fg:x="976" fg:w="2"/><text x="77.5263%" y="607.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="77.3555%" y="581" width="0.0792%" height="15" fill="rgb(235,183,2)" fg:x="977" fg:w="1"/><text x="77.6055%" y="591.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="77.4347%" y="597" width="0.0792%" height="15" fill="rgb(230,165,10)" fg:x="978" fg:w="1"/><text x="77.6847%" y="607.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="77.4347%" y="581" width="0.0792%" height="15" fill="rgb(219,54,40)" fg:x="978" fg:w="1"/><text x="77.6847%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="77.5139%" y="597" width="0.0792%" height="15" fill="rgb(244,73,9)" fg:x="979" fg:w="1"/><text x="77.7639%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.5139%" y="581" width="0.0792%" height="15" fill="rgb(212,32,45)" fg:x="979" fg:w="1"/><text x="77.7639%" y="591.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (3 samples, 0.24%)</title><rect x="77.4347%" y="629" width="0.2375%" height="15" fill="rgb(205,58,31)" fg:x="978" fg:w="3"/><text x="77.6847%" y="639.50"></text></g><g><title>plugins_core::tools::set_occupying (3 samples, 0.24%)</title><rect x="77.4347%" y="613" width="0.2375%" height="15" fill="rgb(250,120,43)" fg:x="978" fg:w="3"/><text x="77.6847%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="77.5930%" y="597" width="0.0792%" height="15" fill="rgb(235,13,10)" fg:x="980" fg:w="1"/><text x="77.8430%" y="607.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="77.5930%" y="581" width="0.0792%" height="15" fill="rgb(232,219,31)" fg:x="980" fg:w="1"/><text x="77.8430%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.5930%" y="565" width="0.0792%" height="15" fill="rgb(218,157,51)" fg:x="980" fg:w="1"/><text x="77.8430%" y="575.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="77.5930%" y="549" width="0.0792%" height="15" fill="rgb(211,91,52)" fg:x="980" fg:w="1"/><text x="77.8430%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.5930%" y="533" width="0.0792%" height="15" fill="rgb(240,173,1)" fg:x="980" fg:w="1"/><text x="77.8430%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.5930%" y="517" width="0.0792%" height="15" fill="rgb(248,20,47)" fg:x="980" fg:w="1"/><text x="77.8430%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.5930%" y="501" width="0.0792%" height="15" fill="rgb(217,221,40)" fg:x="980" fg:w="1"/><text x="77.8430%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.5930%" y="485" width="0.0792%" height="15" fill="rgb(226,149,51)" fg:x="980" fg:w="1"/><text x="77.8430%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="77.6722%" y="581" width="0.0792%" height="15" fill="rgb(252,193,7)" fg:x="981" fg:w="1"/><text x="77.9222%" y="591.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="77.6722%" y="565" width="0.0792%" height="15" fill="rgb(205,123,0)" fg:x="981" fg:w="1"/><text x="77.9222%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="77.6722%" y="549" width="0.0792%" height="15" fill="rgb(233,173,25)" fg:x="981" fg:w="1"/><text x="77.9222%" y="559.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="77.6722%" y="613" width="0.1584%" height="15" fill="rgb(216,63,32)" fg:x="981" fg:w="2"/><text x="77.9222%" y="623.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="77.6722%" y="597" width="0.1584%" height="15" fill="rgb(209,56,45)" fg:x="981" fg:w="2"/><text x="77.9222%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="77.7514%" y="581" width="0.0792%" height="15" fill="rgb(226,111,49)" fg:x="982" fg:w="1"/><text x="78.0014%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="77.7514%" y="565" width="0.0792%" height="15" fill="rgb(244,181,21)" fg:x="982" fg:w="1"/><text x="78.0014%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="77.7514%" y="549" width="0.0792%" height="15" fill="rgb(222,126,15)" fg:x="982" fg:w="1"/><text x="78.0014%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.7514%" y="533" width="0.0792%" height="15" fill="rgb(222,95,17)" fg:x="982" fg:w="1"/><text x="78.0014%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.7514%" y="517" width="0.0792%" height="15" fill="rgb(254,46,5)" fg:x="982" fg:w="1"/><text x="78.0014%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.7514%" y="501" width="0.0792%" height="15" fill="rgb(236,216,35)" fg:x="982" fg:w="1"/><text x="78.0014%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.7514%" y="485" width="0.0792%" height="15" fill="rgb(217,187,26)" fg:x="982" fg:w="1"/><text x="78.0014%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.7514%" y="469" width="0.0792%" height="15" fill="rgb(207,192,25)" fg:x="982" fg:w="1"/><text x="78.0014%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="77.7514%" y="453" width="0.0792%" height="15" fill="rgb(253,135,27)" fg:x="982" fg:w="1"/><text x="78.0014%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="77.7514%" y="437" width="0.0792%" height="15" fill="rgb(211,122,29)" fg:x="982" fg:w="1"/><text x="78.0014%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="77.7514%" y="421" width="0.0792%" height="15" fill="rgb(233,162,40)" fg:x="982" fg:w="1"/><text x="78.0014%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.7514%" y="405" width="0.0792%" height="15" fill="rgb(222,184,47)" fg:x="982" fg:w="1"/><text x="78.0014%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.7514%" y="389" width="0.0792%" height="15" fill="rgb(249,99,23)" fg:x="982" fg:w="1"/><text x="78.0014%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="77.7514%" y="373" width="0.0792%" height="15" fill="rgb(214,60,12)" fg:x="982" fg:w="1"/><text x="78.0014%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="77.7514%" y="357" width="0.0792%" height="15" fill="rgb(250,229,36)" fg:x="982" fg:w="1"/><text x="78.0014%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="77.7514%" y="341" width="0.0792%" height="15" fill="rgb(232,195,10)" fg:x="982" fg:w="1"/><text x="78.0014%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="77.7514%" y="325" width="0.0792%" height="15" fill="rgb(205,213,31)" fg:x="982" fg:w="1"/><text x="78.0014%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.7514%" y="309" width="0.0792%" height="15" fill="rgb(237,43,8)" fg:x="982" fg:w="1"/><text x="78.0014%" y="319.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="77.6722%" y="629" width="0.2375%" height="15" fill="rgb(216,208,3)" fg:x="981" fg:w="3"/><text x="77.9222%" y="639.50"></text></g><g><title>plugins_core::location::Location::set (1 samples, 0.08%)</title><rect x="77.8306%" y="613" width="0.0792%" height="15" fill="rgb(228,179,44)" fg:x="983" fg:w="1"/><text x="78.0806%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="77.8306%" y="597" width="0.0792%" height="15" fill="rgb(230,192,27)" fg:x="983" fg:w="1"/><text x="78.0806%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="77.8306%" y="581" width="0.0792%" height="15" fill="rgb(251,30,38)" fg:x="983" fg:w="1"/><text x="78.0806%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.8306%" y="565" width="0.0792%" height="15" fill="rgb(246,55,52)" fg:x="983" fg:w="1"/><text x="78.0806%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.8306%" y="549" width="0.0792%" height="15" fill="rgb(249,79,26)" fg:x="983" fg:w="1"/><text x="78.0806%" y="559.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (29 samples, 2.30%)</title><rect x="75.6928%" y="645" width="2.2961%" height="15" fill="rgb(220,202,16)" fg:x="956" fg:w="29"/><text x="75.9428%" y="655.50">p..</text></g><g><title>plugins_core::tools::set_wearing (1 samples, 0.08%)</title><rect x="77.9097%" y="629" width="0.0792%" height="15" fill="rgb(250,170,23)" fg:x="984" fg:w="1"/><text x="78.1597%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="77.9097%" y="613" width="0.0792%" height="15" fill="rgb(230,7,37)" fg:x="984" fg:w="1"/><text x="78.1597%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="77.9097%" y="597" width="0.0792%" height="15" fill="rgb(213,71,1)" fg:x="984" fg:w="1"/><text x="78.1597%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="77.9097%" y="581" width="0.0792%" height="15" fill="rgb(227,87,39)" fg:x="984" fg:w="1"/><text x="78.1597%" y="591.50"></text></g><g><title>plugins_core::build::BuildSurroundings::hands (1 samples, 0.08%)</title><rect x="77.9889%" y="645" width="0.0792%" height="15" fill="rgb(210,41,29)" fg:x="985" fg:w="1"/><text x="78.2389%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="78.0681%" y="613" width="0.0792%" height="15" fill="rgb(206,191,31)" fg:x="986" fg:w="1"/><text x="78.3181%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.0681%" y="597" width="0.0792%" height="15" fill="rgb(247,75,54)" fg:x="986" fg:w="1"/><text x="78.3181%" y="607.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="78.1473%" y="597" width="0.0792%" height="15" fill="rgb(208,54,50)" fg:x="987" fg:w="1"/><text x="78.3973%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="78.1473%" y="581" width="0.0792%" height="15" fill="rgb(214,90,37)" fg:x="987" fg:w="1"/><text x="78.3973%" y="591.50"></text></g><g><title>plugins_core::build::Build::new (2 samples, 0.16%)</title><rect x="78.1473%" y="613" width="0.1584%" height="15" fill="rgb(220,132,6)" fg:x="987" fg:w="2"/><text x="78.3973%" y="623.50"></text></g><g><title>kernel::model::builder::EntityBuilder::with_key (1 samples, 0.08%)</title><rect x="78.2264%" y="597" width="0.0792%" height="15" fill="rgb(213,167,7)" fg:x="988" fg:w="1"/><text x="78.4764%" y="607.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (4 samples, 0.32%)</title><rect x="78.0681%" y="645" width="0.3167%" height="15" fill="rgb(243,36,27)" fg:x="986" fg:w="4"/><text x="78.3181%" y="655.50"></text></g><g><title>plugins_core::build::QuickThing::make (4 samples, 0.32%)</title><rect x="78.0681%" y="629" width="0.3167%" height="15" fill="rgb(235,147,12)" fg:x="986" fg:w="4"/><text x="78.3181%" y="639.50"></text></g><g><title>plugins_core::build::Build::save (1 samples, 0.08%)</title><rect x="78.3056%" y="613" width="0.0792%" height="15" fill="rgb(212,198,44)" fg:x="989" fg:w="1"/><text x="78.5556%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="78.3056%" y="597" width="0.0792%" height="15" fill="rgb(218,68,50)" fg:x="989" fg:w="1"/><text x="78.5556%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="78.3056%" y="581" width="0.0792%" height="15" fill="rgb(224,79,48)" fg:x="989" fg:w="1"/><text x="78.5556%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="78.3056%" y="565" width="0.0792%" height="15" fill="rgb(213,191,50)" fg:x="989" fg:w="1"/><text x="78.5556%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="78.3056%" y="549" width="0.0792%" height="15" fill="rgb(254,146,10)" fg:x="989" fg:w="1"/><text x="78.5556%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.3056%" y="533" width="0.0792%" height="15" fill="rgb(215,175,11)" fg:x="989" fg:w="1"/><text x="78.5556%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="78.3848%" y="613" width="0.0792%" height="15" fill="rgb(207,49,7)" fg:x="990" fg:w="1"/><text x="78.6348%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="78.3848%" y="597" width="0.0792%" height="15" fill="rgb(234,144,29)" fg:x="990" fg:w="1"/><text x="78.6348%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.3848%" y="581" width="0.0792%" height="15" fill="rgb(213,222,48)" fg:x="990" fg:w="1"/><text x="78.6348%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.3848%" y="565" width="0.0792%" height="15" fill="rgb(222,8,6)" fg:x="990" fg:w="1"/><text x="78.6348%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="78.3848%" y="629" width="0.1584%" height="15" fill="rgb(221,114,49)" fg:x="990" fg:w="2"/><text x="78.6348%" y="639.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="78.4640%" y="613" width="0.0792%" height="15" fill="rgb(250,140,42)" fg:x="991" fg:w="1"/><text x="78.7140%" y="623.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="78.5432%" y="613" width="0.0792%" height="15" fill="rgb(250,150,27)" fg:x="992" fg:w="1"/><text x="78.7932%" y="623.50"></text></g><g><title>plugins_core::build::Build::new_world (2 samples, 0.16%)</title><rect x="78.5432%" y="629" width="0.1584%" height="15" fill="rgb(252,159,3)" fg:x="992" fg:w="2"/><text x="78.7932%" y="639.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="78.6223%" y="613" width="0.0792%" height="15" fill="rgb(241,182,3)" fg:x="993" fg:w="1"/><text x="78.8723%" y="623.50"></text></g><g><title>kernel::model::builder::EntityBuilder::new (1 samples, 0.08%)</title><rect x="78.6223%" y="597" width="0.0792%" height="15" fill="rgb(236,3,9)" fg:x="993" fg:w="1"/><text x="78.8723%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="78.7015%" y="597" width="0.0792%" height="15" fill="rgb(223,227,51)" fg:x="994" fg:w="1"/><text x="78.9515%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="78.7015%" y="581" width="0.0792%" height="15" fill="rgb(232,133,30)" fg:x="994" fg:w="1"/><text x="78.9515%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="78.7015%" y="565" width="0.0792%" height="15" fill="rgb(209,93,27)" fg:x="994" fg:w="1"/><text x="78.9515%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.7015%" y="549" width="0.0792%" height="15" fill="rgb(208,108,34)" fg:x="994" fg:w="1"/><text x="78.9515%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.7015%" y="533" width="0.0792%" height="15" fill="rgb(215,189,13)" fg:x="994" fg:w="1"/><text x="78.9515%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.7015%" y="517" width="0.0792%" height="15" fill="rgb(206,88,23)" fg:x="994" fg:w="1"/><text x="78.9515%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.7015%" y="501" width="0.0792%" height="15" fill="rgb(240,173,0)" fg:x="994" fg:w="1"/><text x="78.9515%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.7015%" y="485" width="0.0792%" height="15" fill="rgb(223,106,52)" fg:x="994" fg:w="1"/><text x="78.9515%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.7015%" y="469" width="0.0792%" height="15" fill="rgb(206,130,16)" fg:x="994" fg:w="1"/><text x="78.9515%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="78.7015%" y="613" width="0.1584%" height="15" fill="rgb(220,54,25)" fg:x="994" fg:w="2"/><text x="78.9515%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="78.7807%" y="597" width="0.0792%" height="15" fill="rgb(210,4,38)" fg:x="995" fg:w="1"/><text x="79.0307%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="78.7807%" y="581" width="0.0792%" height="15" fill="rgb(238,94,39)" fg:x="995" fg:w="1"/><text x="79.0307%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="78.7807%" y="565" width="0.0792%" height="15" fill="rgb(234,124,34)" fg:x="995" fg:w="1"/><text x="79.0307%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="78.7807%" y="549" width="0.0792%" height="15" fill="rgb(221,91,40)" fg:x="995" fg:w="1"/><text x="79.0307%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="78.7807%" y="533" width="0.0792%" height="15" fill="rgb(246,53,28)" fg:x="995" fg:w="1"/><text x="79.0307%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="78.7807%" y="517" width="0.0792%" height="15" fill="rgb(229,109,7)" fg:x="995" fg:w="1"/><text x="79.0307%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="78.7807%" y="501" width="0.0792%" height="15" fill="rgb(249,117,8)" fg:x="995" fg:w="1"/><text x="79.0307%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="78.7807%" y="485" width="0.0792%" height="15" fill="rgb(210,181,1)" fg:x="995" fg:w="1"/><text x="79.0307%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="78.7807%" y="469" width="0.0792%" height="15" fill="rgb(211,66,1)" fg:x="995" fg:w="1"/><text x="79.0307%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="78.7807%" y="453" width="0.0792%" height="15" fill="rgb(221,90,14)" fg:x="995" fg:w="1"/><text x="79.0307%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.7807%" y="437" width="0.0792%" height="15" fill="rgb(219,222,44)" fg:x="995" fg:w="1"/><text x="79.0307%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.8599%" y="613" width="0.0792%" height="15" fill="rgb(246,34,33)" fg:x="996" fg:w="1"/><text x="79.1099%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.8599%" y="597" width="0.0792%" height="15" fill="rgb(227,135,41)" fg:x="996" fg:w="1"/><text x="79.1099%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="78.9390%" y="565" width="0.0792%" height="15" fill="rgb(226,15,14)" fg:x="997" fg:w="1"/><text x="79.1890%" y="575.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (73 samples, 5.78%)</title><rect x="73.3175%" y="661" width="5.7799%" height="15" fill="rgb(236,148,47)" fg:x="926" fg:w="73"/><text x="73.5675%" y="671.50">&lt;tests:..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (9 samples, 0.71%)</title><rect x="78.3848%" y="645" width="0.7126%" height="15" fill="rgb(233,162,52)" fg:x="990" fg:w="9"/><text x="78.6348%" y="655.50"></text></g><g><title>plugins_core::build::Build::save (5 samples, 0.40%)</title><rect x="78.7015%" y="629" width="0.3959%" height="15" fill="rgb(244,35,28)" fg:x="994" fg:w="5"/><text x="78.9515%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="78.9390%" y="613" width="0.1584%" height="15" fill="rgb(205,121,10)" fg:x="997" fg:w="2"/><text x="79.1890%" y="623.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="78.9390%" y="597" width="0.1584%" height="15" fill="rgb(250,58,18)" fg:x="997" fg:w="2"/><text x="79.1890%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="78.9390%" y="581" width="0.1584%" height="15" fill="rgb(216,37,13)" fg:x="997" fg:w="2"/><text x="79.1890%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="79.0182%" y="565" width="0.0792%" height="15" fill="rgb(221,215,42)" fg:x="998" fg:w="1"/><text x="79.2682%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.0182%" y="549" width="0.0792%" height="15" fill="rgb(217,214,19)" fg:x="998" fg:w="1"/><text x="79.2682%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="79.0182%" y="533" width="0.0792%" height="15" fill="rgb(233,139,13)" fg:x="998" fg:w="1"/><text x="79.2682%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.0182%" y="517" width="0.0792%" height="15" fill="rgb(247,168,23)" fg:x="998" fg:w="1"/><text x="79.2682%" y="527.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="79.0974%" y="613" width="0.0792%" height="15" fill="rgb(207,202,1)" fg:x="999" fg:w="1"/><text x="79.3474%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="79.0974%" y="597" width="0.0792%" height="15" fill="rgb(220,155,48)" fg:x="999" fg:w="1"/><text x="79.3474%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="79.0974%" y="581" width="0.0792%" height="15" fill="rgb(250,43,26)" fg:x="999" fg:w="1"/><text x="79.3474%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.1766%" y="533" width="0.0792%" height="15" fill="rgb(212,190,23)" fg:x="1000" fg:w="1"/><text x="79.4266%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.1766%" y="517" width="0.0792%" height="15" fill="rgb(216,39,24)" fg:x="1000" fg:w="1"/><text x="79.4266%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.1766%" y="501" width="0.0792%" height="15" fill="rgb(252,113,16)" fg:x="1000" fg:w="1"/><text x="79.4266%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.2557%" y="517" width="0.0792%" height="15" fill="rgb(208,113,19)" fg:x="1001" fg:w="1"/><text x="79.5057%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.2557%" y="501" width="0.0792%" height="15" fill="rgb(234,107,25)" fg:x="1001" fg:w="1"/><text x="79.5057%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.2557%" y="485" width="0.0792%" height="15" fill="rgb(234,217,51)" fg:x="1001" fg:w="1"/><text x="79.5057%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.4141%" y="501" width="0.0792%" height="15" fill="rgb(251,29,42)" fg:x="1003" fg:w="1"/><text x="79.6641%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.4141%" y="485" width="0.0792%" height="15" fill="rgb(221,62,51)" fg:x="1003" fg:w="1"/><text x="79.6641%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.4141%" y="469" width="0.0792%" height="15" fill="rgb(240,192,43)" fg:x="1003" fg:w="1"/><text x="79.6641%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.4141%" y="453" width="0.0792%" height="15" fill="rgb(224,157,47)" fg:x="1003" fg:w="1"/><text x="79.6641%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="79.4141%" y="437" width="0.0792%" height="15" fill="rgb(226,84,45)" fg:x="1003" fg:w="1"/><text x="79.6641%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.4141%" y="421" width="0.0792%" height="15" fill="rgb(208,207,23)" fg:x="1003" fg:w="1"/><text x="79.6641%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="79.4141%" y="405" width="0.0792%" height="15" fill="rgb(253,34,51)" fg:x="1003" fg:w="1"/><text x="79.6641%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="79.2557%" y="533" width="0.3167%" height="15" fill="rgb(227,26,34)" fg:x="1001" fg:w="4"/><text x="79.5057%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="79.3349%" y="517" width="0.2375%" height="15" fill="rgb(245,75,19)" fg:x="1002" fg:w="3"/><text x="79.5849%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="79.4933%" y="501" width="0.0792%" height="15" fill="rgb(250,191,31)" fg:x="1004" fg:w="1"/><text x="79.7433%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.4933%" y="485" width="0.0792%" height="15" fill="rgb(224,11,50)" fg:x="1004" fg:w="1"/><text x="79.7433%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.4933%" y="469" width="0.0792%" height="15" fill="rgb(231,171,7)" fg:x="1004" fg:w="1"/><text x="79.7433%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.55%)</title><rect x="79.1766%" y="565" width="0.5542%" height="15" fill="rgb(252,214,10)" fg:x="1000" fg:w="7"/><text x="79.4266%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.55%)</title><rect x="79.1766%" y="549" width="0.5542%" height="15" fill="rgb(249,45,46)" fg:x="1000" fg:w="7"/><text x="79.4266%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="79.5724%" y="533" width="0.1584%" height="15" fill="rgb(240,173,7)" fg:x="1005" fg:w="2"/><text x="79.8224%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="79.5724%" y="517" width="0.1584%" height="15" fill="rgb(235,214,13)" fg:x="1005" fg:w="2"/><text x="79.8224%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.7308%" y="533" width="0.0792%" height="15" fill="rgb(245,156,8)" fg:x="1007" fg:w="1"/><text x="79.9808%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="79.8100%" y="517" width="0.0792%" height="15" fill="rgb(235,46,12)" fg:x="1008" fg:w="1"/><text x="80.0600%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="79.7308%" y="565" width="0.2375%" height="15" fill="rgb(221,81,14)" fg:x="1007" fg:w="3"/><text x="79.9808%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="79.7308%" y="549" width="0.2375%" height="15" fill="rgb(238,207,9)" fg:x="1007" fg:w="3"/><text x="79.9808%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="79.8100%" y="533" width="0.1584%" height="15" fill="rgb(224,129,35)" fg:x="1008" fg:w="2"/><text x="80.0600%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.8892%" y="517" width="0.0792%" height="15" fill="rgb(243,218,34)" fg:x="1009" fg:w="1"/><text x="80.1392%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.8892%" y="501" width="0.0792%" height="15" fill="rgb(220,166,13)" fg:x="1009" fg:w="1"/><text x="80.1392%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="79.8892%" y="485" width="0.0792%" height="15" fill="rgb(227,167,49)" fg:x="1009" fg:w="1"/><text x="80.1392%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="79.8892%" y="469" width="0.0792%" height="15" fill="rgb(234,142,12)" fg:x="1009" fg:w="1"/><text x="80.1392%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="79.8892%" y="453" width="0.0792%" height="15" fill="rgb(207,100,48)" fg:x="1009" fg:w="1"/><text x="80.1392%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.1267%" y="485" width="0.0792%" height="15" fill="rgb(210,25,14)" fg:x="1012" fg:w="1"/><text x="80.3767%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="80.2059%" y="485" width="0.0792%" height="15" fill="rgb(246,116,27)" fg:x="1013" fg:w="1"/><text x="80.4559%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="80.2850%" y="469" width="0.0792%" height="15" fill="rgb(214,193,42)" fg:x="1014" fg:w="1"/><text x="80.5350%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="80.3642%" y="453" width="0.0792%" height="15" fill="rgb(214,122,8)" fg:x="1015" fg:w="1"/><text x="80.6142%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.3642%" y="437" width="0.0792%" height="15" fill="rgb(244,173,18)" fg:x="1015" fg:w="1"/><text x="80.6142%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.4434%" y="421" width="0.0792%" height="15" fill="rgb(232,68,19)" fg:x="1016" fg:w="1"/><text x="80.6934%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="80.4434%" y="453" width="0.1584%" height="15" fill="rgb(236,224,1)" fg:x="1016" fg:w="2"/><text x="80.6934%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="80.4434%" y="437" width="0.1584%" height="15" fill="rgb(240,11,8)" fg:x="1016" fg:w="2"/><text x="80.6934%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="80.5226%" y="421" width="0.0792%" height="15" fill="rgb(244,159,20)" fg:x="1017" fg:w="1"/><text x="80.7726%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.6017%" y="437" width="0.0792%" height="15" fill="rgb(240,223,54)" fg:x="1018" fg:w="1"/><text x="80.8517%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (10 samples, 0.79%)</title><rect x="79.9683%" y="533" width="0.7918%" height="15" fill="rgb(237,146,5)" fg:x="1010" fg:w="10"/><text x="80.2183%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (10 samples, 0.79%)</title><rect x="79.9683%" y="517" width="0.7918%" height="15" fill="rgb(218,221,32)" fg:x="1010" fg:w="10"/><text x="80.2183%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (10 samples, 0.79%)</title><rect x="79.9683%" y="501" width="0.7918%" height="15" fill="rgb(244,96,26)" fg:x="1010" fg:w="10"/><text x="80.2183%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="80.2850%" y="485" width="0.4751%" height="15" fill="rgb(245,184,37)" fg:x="1014" fg:w="6"/><text x="80.5350%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="80.3642%" y="469" width="0.3959%" height="15" fill="rgb(248,91,47)" fg:x="1015" fg:w="5"/><text x="80.6142%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="80.6017%" y="453" width="0.1584%" height="15" fill="rgb(243,199,8)" fg:x="1018" fg:w="2"/><text x="80.8517%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="80.6809%" y="437" width="0.0792%" height="15" fill="rgb(249,12,15)" fg:x="1019" fg:w="1"/><text x="80.9309%" y="447.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="80.7601%" y="469" width="0.0792%" height="15" fill="rgb(245,97,12)" fg:x="1020" fg:w="1"/><text x="81.0101%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="80.7601%" y="453" width="0.0792%" height="15" fill="rgb(244,61,1)" fg:x="1020" fg:w="1"/><text x="81.0101%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="80.7601%" y="517" width="0.1584%" height="15" fill="rgb(222,194,10)" fg:x="1020" fg:w="2"/><text x="81.0101%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="80.7601%" y="501" width="0.1584%" height="15" fill="rgb(226,178,8)" fg:x="1020" fg:w="2"/><text x="81.0101%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="80.7601%" y="485" width="0.1584%" height="15" fill="rgb(241,32,34)" fg:x="1020" fg:w="2"/><text x="81.0101%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="80.8393%" y="469" width="0.0792%" height="15" fill="rgb(254,26,6)" fg:x="1021" fg:w="1"/><text x="81.0893%" y="479.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (13 samples, 1.03%)</title><rect x="79.9683%" y="549" width="1.0293%" height="15" fill="rgb(249,71,11)" fg:x="1010" fg:w="13"/><text x="80.2183%" y="559.50"></text></g><g><title>treediff::diff::diff (3 samples, 0.24%)</title><rect x="80.7601%" y="533" width="0.2375%" height="15" fill="rgb(232,170,27)" fg:x="1020" fg:w="3"/><text x="81.0101%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="80.9184%" y="517" width="0.0792%" height="15" fill="rgb(214,223,17)" fg:x="1022" fg:w="1"/><text x="81.1684%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.9184%" y="501" width="0.0792%" height="15" fill="rgb(250,18,15)" fg:x="1022" fg:w="1"/><text x="81.1684%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.9184%" y="485" width="0.0792%" height="15" fill="rgb(212,153,51)" fg:x="1022" fg:w="1"/><text x="81.1684%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="80.9976%" y="517" width="0.1584%" height="15" fill="rgb(219,194,12)" fg:x="1023" fg:w="2"/><text x="81.2476%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="81.1560%" y="517" width="0.1584%" height="15" fill="rgb(212,58,17)" fg:x="1025" fg:w="2"/><text x="81.4060%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="81.1560%" y="501" width="0.1584%" height="15" fill="rgb(254,5,10)" fg:x="1025" fg:w="2"/><text x="81.4060%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.2352%" y="485" width="0.0792%" height="15" fill="rgb(246,91,7)" fg:x="1026" fg:w="1"/><text x="81.4852%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.2352%" y="469" width="0.0792%" height="15" fill="rgb(218,108,49)" fg:x="1026" fg:w="1"/><text x="81.4852%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.2352%" y="453" width="0.0792%" height="15" fill="rgb(238,123,20)" fg:x="1026" fg:w="1"/><text x="81.4852%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="81.3143%" y="485" width="0.0792%" height="15" fill="rgb(231,69,23)" fg:x="1027" fg:w="1"/><text x="81.5643%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="81.4727%" y="453" width="0.0792%" height="15" fill="rgb(230,209,3)" fg:x="1029" fg:w="1"/><text x="81.7227%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="81.3935%" y="485" width="0.2375%" height="15" fill="rgb(231,19,0)" fg:x="1028" fg:w="3"/><text x="81.6435%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="81.3935%" y="469" width="0.2375%" height="15" fill="rgb(226,192,25)" fg:x="1028" fg:w="3"/><text x="81.6435%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="81.5519%" y="453" width="0.0792%" height="15" fill="rgb(223,175,53)" fg:x="1030" fg:w="1"/><text x="81.8019%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.5519%" y="437" width="0.0792%" height="15" fill="rgb(248,35,51)" fg:x="1030" fg:w="1"/><text x="81.8019%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.5519%" y="421" width="0.0792%" height="15" fill="rgb(230,37,26)" fg:x="1030" fg:w="1"/><text x="81.8019%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.5519%" y="405" width="0.0792%" height="15" fill="rgb(206,120,22)" fg:x="1030" fg:w="1"/><text x="81.8019%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.40%)</title><rect x="81.3143%" y="501" width="0.3959%" height="15" fill="rgb(207,165,28)" fg:x="1027" fg:w="5"/><text x="81.5643%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="81.6310%" y="485" width="0.0792%" height="15" fill="rgb(226,23,46)" fg:x="1031" fg:w="1"/><text x="81.8810%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.6310%" y="469" width="0.0792%" height="15" fill="rgb(208,130,44)" fg:x="1031" fg:w="1"/><text x="81.8810%" y="479.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (11 samples, 0.87%)</title><rect x="80.9976%" y="549" width="0.8709%" height="15" fill="rgb(231,67,8)" fg:x="1023" fg:w="11"/><text x="81.2476%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (11 samples, 0.87%)</title><rect x="80.9976%" y="533" width="0.8709%" height="15" fill="rgb(205,183,22)" fg:x="1023" fg:w="11"/><text x="81.2476%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.55%)</title><rect x="81.3143%" y="517" width="0.5542%" height="15" fill="rgb(224,47,9)" fg:x="1027" fg:w="7"/><text x="81.5643%" y="527.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="81.7102%" y="501" width="0.1584%" height="15" fill="rgb(250,183,49)" fg:x="1032" fg:w="2"/><text x="81.9602%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="81.9477%" y="421" width="0.2375%" height="15" fill="rgb(220,151,39)" fg:x="1035" fg:w="3"/><text x="82.1977%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="82.0269%" y="405" width="0.1584%" height="15" fill="rgb(220,118,20)" fg:x="1036" fg:w="2"/><text x="82.2769%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="82.0269%" y="389" width="0.1584%" height="15" fill="rgb(231,65,51)" fg:x="1036" fg:w="2"/><text x="82.2769%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="82.0269%" y="373" width="0.1584%" height="15" fill="rgb(253,125,37)" fg:x="1036" fg:w="2"/><text x="82.2769%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.1061%" y="357" width="0.0792%" height="15" fill="rgb(232,102,6)" fg:x="1037" fg:w="1"/><text x="82.3561%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.1061%" y="341" width="0.0792%" height="15" fill="rgb(251,105,13)" fg:x="1037" fg:w="1"/><text x="82.3561%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.1061%" y="325" width="0.0792%" height="15" fill="rgb(222,179,29)" fg:x="1037" fg:w="1"/><text x="82.3561%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="81.9477%" y="453" width="0.3167%" height="15" fill="rgb(229,180,53)" fg:x="1035" fg:w="4"/><text x="82.1977%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="81.9477%" y="437" width="0.3167%" height="15" fill="rgb(238,104,13)" fg:x="1035" fg:w="4"/><text x="82.1977%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="82.1853%" y="421" width="0.0792%" height="15" fill="rgb(210,130,5)" fg:x="1038" fg:w="1"/><text x="82.4353%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="81.9477%" y="485" width="0.3959%" height="15" fill="rgb(233,87,49)" fg:x="1035" fg:w="5"/><text x="82.1977%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="81.9477%" y="469" width="0.3959%" height="15" fill="rgb(243,34,9)" fg:x="1035" fg:w="5"/><text x="82.1977%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="82.2644%" y="453" width="0.0792%" height="15" fill="rgb(235,225,10)" fg:x="1039" fg:w="1"/><text x="82.5144%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.2644%" y="437" width="0.0792%" height="15" fill="rgb(212,0,30)" fg:x="1039" fg:w="1"/><text x="82.5144%" y="447.50"></text></g><g><title>engine::session::Session::close (43 samples, 3.40%)</title><rect x="79.0974%" y="661" width="3.4046%" height="15" fill="rgb(211,177,0)" fg:x="999" fg:w="43"/><text x="79.3474%" y="671.50">eng..</text></g><g><title>engine::session::state::State::close (43 samples, 3.40%)</title><rect x="79.0974%" y="645" width="3.4046%" height="15" fill="rgb(225,220,11)" fg:x="999" fg:w="43"/><text x="79.3474%" y="655.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (43 samples, 3.40%)</title><rect x="79.0974%" y="629" width="3.4046%" height="15" fill="rgb(215,10,13)" fg:x="999" fg:w="43"/><text x="79.3474%" y="639.50">eng..</text></g><g><title>core::iter::adapters::try_process (42 samples, 3.33%)</title><rect x="79.1766%" y="613" width="3.3254%" height="15" fill="rgb(240,177,14)" fg:x="1000" fg:w="42"/><text x="79.4266%" y="623.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (42 samples, 3.33%)</title><rect x="79.1766%" y="597" width="3.3254%" height="15" fill="rgb(243,7,39)" fg:x="1000" fg:w="42"/><text x="79.4266%" y="607.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (42 samples, 3.33%)</title><rect x="79.1766%" y="581" width="3.3254%" height="15" fill="rgb(212,99,0)" fg:x="1000" fg:w="42"/><text x="79.4266%" y="591.50">eng..</text></g><g><title>kernel::model::any_entity_changes (32 samples, 2.53%)</title><rect x="79.9683%" y="565" width="2.5337%" height="15" fill="rgb(225,162,48)" fg:x="1010" fg:w="32"/><text x="80.2183%" y="575.50">ke..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (8 samples, 0.63%)</title><rect x="81.8686%" y="549" width="0.6334%" height="15" fill="rgb(246,16,25)" fg:x="1034" fg:w="8"/><text x="82.1186%" y="559.50"></text></g><g><title>serde_json::de::from_trait (8 samples, 0.63%)</title><rect x="81.8686%" y="533" width="0.6334%" height="15" fill="rgb(220,150,2)" fg:x="1034" fg:w="8"/><text x="82.1186%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.55%)</title><rect x="81.9477%" y="517" width="0.5542%" height="15" fill="rgb(237,113,11)" fg:x="1035" fg:w="7"/><text x="82.1977%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.55%)</title><rect x="81.9477%" y="501" width="0.5542%" height="15" fill="rgb(236,70,20)" fg:x="1035" fg:w="7"/><text x="82.1977%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="82.3436%" y="485" width="0.1584%" height="15" fill="rgb(234,94,7)" fg:x="1040" fg:w="2"/><text x="82.5936%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.4228%" y="469" width="0.0792%" height="15" fill="rgb(250,221,0)" fg:x="1041" fg:w="1"/><text x="82.6728%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.5812%" y="517" width="0.0792%" height="15" fill="rgb(245,149,46)" fg:x="1043" fg:w="1"/><text x="82.8312%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.5812%" y="501" width="0.0792%" height="15" fill="rgb(215,37,27)" fg:x="1043" fg:w="1"/><text x="82.8312%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="82.5812%" y="485" width="0.0792%" height="15" fill="rgb(232,65,3)" fg:x="1043" fg:w="1"/><text x="82.8312%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="82.5812%" y="469" width="0.0792%" height="15" fill="rgb(214,2,16)" fg:x="1043" fg:w="1"/><text x="82.8312%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="82.5812%" y="453" width="0.0792%" height="15" fill="rgb(227,131,50)" fg:x="1043" fg:w="1"/><text x="82.8312%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="82.5812%" y="437" width="0.0792%" height="15" fill="rgb(247,131,45)" fg:x="1043" fg:w="1"/><text x="82.8312%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="82.5812%" y="421" width="0.0792%" height="15" fill="rgb(215,97,47)" fg:x="1043" fg:w="1"/><text x="82.8312%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="82.5812%" y="405" width="0.0792%" height="15" fill="rgb(233,143,12)" fg:x="1043" fg:w="1"/><text x="82.8312%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="82.5812%" y="389" width="0.0792%" height="15" fill="rgb(222,57,17)" fg:x="1043" fg:w="1"/><text x="82.8312%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="82.5812%" y="373" width="0.0792%" height="15" fill="rgb(214,119,38)" fg:x="1043" fg:w="1"/><text x="82.8312%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="82.5812%" y="357" width="0.0792%" height="15" fill="rgb(217,28,47)" fg:x="1043" fg:w="1"/><text x="82.8312%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="82.5812%" y="341" width="0.0792%" height="15" fill="rgb(231,14,52)" fg:x="1043" fg:w="1"/><text x="82.8312%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="82.5812%" y="325" width="0.0792%" height="15" fill="rgb(220,158,18)" fg:x="1043" fg:w="1"/><text x="82.8312%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.5812%" y="309" width="0.0792%" height="15" fill="rgb(222,143,46)" fg:x="1043" fg:w="1"/><text x="82.8312%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="82.5812%" y="533" width="0.1584%" height="15" fill="rgb(227,165,5)" fg:x="1043" fg:w="2"/><text x="82.8312%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="82.6603%" y="517" width="0.0792%" height="15" fill="rgb(216,222,49)" fg:x="1044" fg:w="1"/><text x="82.9103%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.6603%" y="501" width="0.0792%" height="15" fill="rgb(238,73,39)" fg:x="1044" fg:w="1"/><text x="82.9103%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="82.6603%" y="485" width="0.0792%" height="15" fill="rgb(252,115,9)" fg:x="1044" fg:w="1"/><text x="82.9103%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.7395%" y="469" width="0.0792%" height="15" fill="rgb(238,202,4)" fg:x="1045" fg:w="1"/><text x="82.9895%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.7395%" y="453" width="0.0792%" height="15" fill="rgb(252,153,44)" fg:x="1045" fg:w="1"/><text x="82.9895%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.7395%" y="437" width="0.0792%" height="15" fill="rgb(235,128,27)" fg:x="1045" fg:w="1"/><text x="82.9895%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.7395%" y="421" width="0.0792%" height="15" fill="rgb(221,121,47)" fg:x="1045" fg:w="1"/><text x="82.9895%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="82.7395%" y="405" width="0.0792%" height="15" fill="rgb(247,211,47)" fg:x="1045" fg:w="1"/><text x="82.9895%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="82.8979%" y="373" width="0.0792%" height="15" fill="rgb(252,47,49)" fg:x="1047" fg:w="1"/><text x="83.1479%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="82.8979%" y="357" width="0.0792%" height="15" fill="rgb(219,119,53)" fg:x="1047" fg:w="1"/><text x="83.1479%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.8979%" y="341" width="0.0792%" height="15" fill="rgb(243,165,53)" fg:x="1047" fg:w="1"/><text x="83.1479%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.8979%" y="325" width="0.0792%" height="15" fill="rgb(230,12,35)" fg:x="1047" fg:w="1"/><text x="83.1479%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="82.9770%" y="373" width="0.1584%" height="15" fill="rgb(239,57,49)" fg:x="1048" fg:w="2"/><text x="83.2270%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="82.9770%" y="357" width="0.1584%" height="15" fill="rgb(231,154,7)" fg:x="1048" fg:w="2"/><text x="83.2270%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="82.9770%" y="341" width="0.1584%" height="15" fill="rgb(248,81,34)" fg:x="1048" fg:w="2"/><text x="83.2270%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="83.0562%" y="325" width="0.0792%" height="15" fill="rgb(247,9,5)" fg:x="1049" fg:w="1"/><text x="83.3062%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="83.0562%" y="309" width="0.0792%" height="15" fill="rgb(228,172,27)" fg:x="1049" fg:w="1"/><text x="83.3062%" y="319.50"></text></g><g><title>kernel::model::entity::Entity::from_value (6 samples, 0.48%)</title><rect x="82.8187%" y="469" width="0.4751%" height="15" fill="rgb(230,57,44)" fg:x="1046" fg:w="6"/><text x="83.0687%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.48%)</title><rect x="82.8187%" y="453" width="0.4751%" height="15" fill="rgb(249,35,22)" fg:x="1046" fg:w="6"/><text x="83.0687%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="82.8187%" y="437" width="0.4751%" height="15" fill="rgb(250,137,27)" fg:x="1046" fg:w="6"/><text x="83.0687%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.40%)</title><rect x="82.8979%" y="421" width="0.3959%" height="15" fill="rgb(251,57,31)" fg:x="1047" fg:w="5"/><text x="83.1479%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="82.8979%" y="405" width="0.3959%" height="15" fill="rgb(238,60,0)" fg:x="1047" fg:w="5"/><text x="83.1479%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (5 samples, 0.40%)</title><rect x="82.8979%" y="389" width="0.3959%" height="15" fill="rgb(242,185,39)" fg:x="1047" fg:w="5"/><text x="83.1479%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="83.1354%" y="373" width="0.1584%" height="15" fill="rgb(240,63,43)" fg:x="1050" fg:w="2"/><text x="83.3854%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="83.1354%" y="357" width="0.1584%" height="15" fill="rgb(236,155,6)" fg:x="1050" fg:w="2"/><text x="83.3854%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="83.1354%" y="341" width="0.1584%" height="15" fill="rgb(215,11,29)" fg:x="1050" fg:w="2"/><text x="83.3854%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="83.1354%" y="325" width="0.1584%" height="15" fill="rgb(228,180,48)" fg:x="1050" fg:w="2"/><text x="83.3854%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="83.1354%" y="309" width="0.1584%" height="15" fill="rgb(241,102,12)" fg:x="1050" fg:w="2"/><text x="83.3854%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="83.1354%" y="293" width="0.1584%" height="15" fill="rgb(246,213,4)" fg:x="1050" fg:w="2"/><text x="83.3854%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="83.1354%" y="277" width="0.1584%" height="15" fill="rgb(218,134,35)" fg:x="1050" fg:w="2"/><text x="83.3854%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="83.2146%" y="261" width="0.0792%" height="15" fill="rgb(251,117,35)" fg:x="1051" fg:w="1"/><text x="83.4646%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="83.2146%" y="245" width="0.0792%" height="15" fill="rgb(206,156,45)" fg:x="1051" fg:w="1"/><text x="83.4646%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="83.2146%" y="229" width="0.0792%" height="15" fill="rgb(218,52,27)" fg:x="1051" fg:w="1"/><text x="83.4646%" y="239.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="83.2937%" y="357" width="0.0792%" height="15" fill="rgb(238,83,36)" fg:x="1052" fg:w="1"/><text x="83.5437%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="83.4521%" y="325" width="0.0792%" height="15" fill="rgb(218,53,43)" fg:x="1054" fg:w="1"/><text x="83.7021%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="83.4521%" y="309" width="0.0792%" height="15" fill="rgb(239,54,39)" fg:x="1054" fg:w="1"/><text x="83.7021%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="83.4521%" y="293" width="0.0792%" height="15" fill="rgb(212,198,13)" fg:x="1054" fg:w="1"/><text x="83.7021%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="83.4521%" y="277" width="0.0792%" height="15" fill="rgb(234,54,46)" fg:x="1054" fg:w="1"/><text x="83.7021%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="83.4521%" y="261" width="0.0792%" height="15" fill="rgb(217,120,7)" fg:x="1054" fg:w="1"/><text x="83.7021%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="83.4521%" y="245" width="0.0792%" height="15" fill="rgb(246,39,15)" fg:x="1054" fg:w="1"/><text x="83.7021%" y="255.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="83.4521%" y="229" width="0.0792%" height="15" fill="rgb(242,143,31)" fg:x="1054" fg:w="1"/><text x="83.7021%" y="239.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (13 samples, 1.03%)</title><rect x="82.5812%" y="565" width="1.0293%" height="15" fill="rgb(252,60,24)" fg:x="1043" fg:w="13"/><text x="82.8312%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_location (13 samples, 1.03%)</title><rect x="82.5812%" y="549" width="1.0293%" height="15" fill="rgb(249,220,7)" fg:x="1043" fg:w="13"/><text x="82.8312%" y="559.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (11 samples, 0.87%)</title><rect x="82.7395%" y="533" width="0.8709%" height="15" fill="rgb(236,67,13)" fg:x="1045" fg:w="11"/><text x="82.9895%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (11 samples, 0.87%)</title><rect x="82.7395%" y="517" width="0.8709%" height="15" fill="rgb(210,62,39)" fg:x="1045" fg:w="11"/><text x="82.9895%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (11 samples, 0.87%)</title><rect x="82.7395%" y="501" width="0.8709%" height="15" fill="rgb(219,122,53)" fg:x="1045" fg:w="11"/><text x="82.9895%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (11 samples, 0.87%)</title><rect x="82.7395%" y="485" width="0.8709%" height="15" fill="rgb(218,87,25)" fg:x="1045" fg:w="11"/><text x="82.9895%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="83.2937%" y="469" width="0.3167%" height="15" fill="rgb(234,179,48)" fg:x="1052" fg:w="4"/><text x="83.5437%" y="479.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="83.2937%" y="453" width="0.3167%" height="15" fill="rgb(248,90,0)" fg:x="1052" fg:w="4"/><text x="83.5437%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="83.2937%" y="437" width="0.3167%" height="15" fill="rgb(207,228,37)" fg:x="1052" fg:w="4"/><text x="83.5437%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="83.2937%" y="421" width="0.3167%" height="15" fill="rgb(235,214,15)" fg:x="1052" fg:w="4"/><text x="83.5437%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="83.2937%" y="405" width="0.3167%" height="15" fill="rgb(210,144,39)" fg:x="1052" fg:w="4"/><text x="83.5437%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="83.2937%" y="389" width="0.3167%" height="15" fill="rgb(222,67,41)" fg:x="1052" fg:w="4"/><text x="83.5437%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="83.2937%" y="373" width="0.3167%" height="15" fill="rgb(205,35,37)" fg:x="1052" fg:w="4"/><text x="83.5437%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="83.3729%" y="357" width="0.2375%" height="15" fill="rgb(216,125,40)" fg:x="1053" fg:w="3"/><text x="83.6229%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="83.3729%" y="341" width="0.2375%" height="15" fill="rgb(228,227,20)" fg:x="1053" fg:w="3"/><text x="83.6229%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="83.5313%" y="325" width="0.0792%" height="15" fill="rgb(242,173,45)" fg:x="1055" fg:w="1"/><text x="83.7813%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.6105%" y="501" width="0.0792%" height="15" fill="rgb(215,79,24)" fg:x="1056" fg:w="1"/><text x="83.8605%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.6896%" y="357" width="0.0792%" height="15" fill="rgb(238,164,38)" fg:x="1057" fg:w="1"/><text x="83.9396%" y="367.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (2 samples, 0.16%)</title><rect x="83.6896%" y="421" width="0.1584%" height="15" fill="rgb(245,196,38)" fg:x="1057" fg:w="2"/><text x="83.9396%" y="431.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (2 samples, 0.16%)</title><rect x="83.6896%" y="405" width="0.1584%" height="15" fill="rgb(231,217,29)" fg:x="1057" fg:w="2"/><text x="83.9396%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (2 samples, 0.16%)</title><rect x="83.6896%" y="389" width="0.1584%" height="15" fill="rgb(245,6,4)" fg:x="1057" fg:w="2"/><text x="83.9396%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="83.6896%" y="373" width="0.1584%" height="15" fill="rgb(214,76,49)" fg:x="1057" fg:w="2"/><text x="83.9396%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="83.7688%" y="357" width="0.0792%" height="15" fill="rgb(205,96,12)" fg:x="1058" fg:w="1"/><text x="84.0188%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="83.8480%" y="389" width="0.0792%" height="15" fill="rgb(243,131,4)" fg:x="1059" fg:w="1"/><text x="84.0980%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="83.8480%" y="373" width="0.0792%" height="15" fill="rgb(214,114,4)" fg:x="1059" fg:w="1"/><text x="84.0980%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.8480%" y="357" width="0.0792%" height="15" fill="rgb(234,215,15)" fg:x="1059" fg:w="1"/><text x="84.0980%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="83.8480%" y="341" width="0.0792%" height="15" fill="rgb(250,216,45)" fg:x="1059" fg:w="1"/><text x="84.0980%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.8480%" y="325" width="0.0792%" height="15" fill="rgb(236,128,4)" fg:x="1059" fg:w="1"/><text x="84.0980%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="83.8480%" y="309" width="0.0792%" height="15" fill="rgb(234,50,33)" fg:x="1059" fg:w="1"/><text x="84.0980%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.8480%" y="293" width="0.0792%" height="15" fill="rgb(253,131,37)" fg:x="1059" fg:w="1"/><text x="84.0980%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="83.8480%" y="277" width="0.0792%" height="15" fill="rgb(218,55,27)" fg:x="1059" fg:w="1"/><text x="84.0980%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="83.9272%" y="373" width="0.0792%" height="15" fill="rgb(241,220,28)" fg:x="1060" fg:w="1"/><text x="84.1772%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.0063%" y="341" width="0.0792%" height="15" fill="rgb(241,90,48)" fg:x="1061" fg:w="1"/><text x="84.2563%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.0063%" y="325" width="0.0792%" height="15" fill="rgb(216,43,37)" fg:x="1061" fg:w="1"/><text x="84.2563%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (3 samples, 0.24%)</title><rect x="83.9272%" y="389" width="0.2375%" height="15" fill="rgb(207,173,9)" fg:x="1060" fg:w="3"/><text x="84.1772%" y="399.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="84.0063%" y="373" width="0.1584%" height="15" fill="rgb(240,126,30)" fg:x="1061" fg:w="2"/><text x="84.2563%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="84.0063%" y="357" width="0.1584%" height="15" fill="rgb(228,178,53)" fg:x="1061" fg:w="2"/><text x="84.2563%" y="367.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="84.0855%" y="341" width="0.0792%" height="15" fill="rgb(217,33,4)" fg:x="1062" fg:w="1"/><text x="84.3355%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.0855%" y="325" width="0.0792%" height="15" fill="rgb(206,124,34)" fg:x="1062" fg:w="1"/><text x="84.3355%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="84.0855%" y="309" width="0.0792%" height="15" fill="rgb(208,122,53)" fg:x="1062" fg:w="1"/><text x="84.3355%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.0855%" y="293" width="0.0792%" height="15" fill="rgb(215,202,26)" fg:x="1062" fg:w="1"/><text x="84.3355%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="84.0855%" y="277" width="0.0792%" height="15" fill="rgb(232,198,31)" fg:x="1062" fg:w="1"/><text x="84.3355%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.0855%" y="261" width="0.0792%" height="15" fill="rgb(222,23,35)" fg:x="1062" fg:w="1"/><text x="84.3355%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="84.0855%" y="245" width="0.0792%" height="15" fill="rgb(242,27,53)" fg:x="1062" fg:w="1"/><text x="84.3355%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="84.1647%" y="389" width="0.0792%" height="15" fill="rgb(210,216,42)" fg:x="1063" fg:w="1"/><text x="84.4147%" y="399.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="84.1647%" y="373" width="0.0792%" height="15" fill="rgb(234,39,38)" fg:x="1063" fg:w="1"/><text x="84.4147%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="84.1647%" y="357" width="0.0792%" height="15" fill="rgb(235,126,54)" fg:x="1063" fg:w="1"/><text x="84.4147%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.1647%" y="341" width="0.0792%" height="15" fill="rgb(235,150,33)" fg:x="1063" fg:w="1"/><text x="84.4147%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.1647%" y="325" width="0.0792%" height="15" fill="rgb(249,49,53)" fg:x="1063" fg:w="1"/><text x="84.4147%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.1647%" y="309" width="0.0792%" height="15" fill="rgb(238,60,50)" fg:x="1063" fg:w="1"/><text x="84.4147%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.2439%" y="325" width="0.0792%" height="15" fill="rgb(210,5,2)" fg:x="1064" fg:w="1"/><text x="84.4939%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.2439%" y="309" width="0.0792%" height="15" fill="rgb(214,207,24)" fg:x="1064" fg:w="1"/><text x="84.4939%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.2439%" y="293" width="0.0792%" height="15" fill="rgb(228,173,2)" fg:x="1064" fg:w="1"/><text x="84.4939%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.2439%" y="277" width="0.0792%" height="15" fill="rgb(244,26,8)" fg:x="1064" fg:w="1"/><text x="84.4939%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.2439%" y="261" width="0.0792%" height="15" fill="rgb(249,153,35)" fg:x="1064" fg:w="1"/><text x="84.4939%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="84.2439%" y="245" width="0.0792%" height="15" fill="rgb(221,215,40)" fg:x="1064" fg:w="1"/><text x="84.4939%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="84.2439%" y="229" width="0.0792%" height="15" fill="rgb(238,106,35)" fg:x="1064" fg:w="1"/><text x="84.4939%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="84.2439%" y="213" width="0.0792%" height="15" fill="rgb(207,195,21)" fg:x="1064" fg:w="1"/><text x="84.4939%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="84.2439%" y="197" width="0.0792%" height="15" fill="rgb(205,43,29)" fg:x="1064" fg:w="1"/><text x="84.4939%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="84.2439%" y="181" width="0.0792%" height="15" fill="rgb(236,35,21)" fg:x="1064" fg:w="1"/><text x="84.4939%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="84.2439%" y="165" width="0.0792%" height="15" fill="rgb(244,74,8)" fg:x="1064" fg:w="1"/><text x="84.4939%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="84.2439%" y="149" width="0.0792%" height="15" fill="rgb(241,229,7)" fg:x="1064" fg:w="1"/><text x="84.4939%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="84.2439%" y="133" width="0.0792%" height="15" fill="rgb(212,223,25)" fg:x="1064" fg:w="1"/><text x="84.4939%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="84.2439%" y="117" width="0.0792%" height="15" fill="rgb(234,58,53)" fg:x="1064" fg:w="1"/><text x="84.4939%" y="127.50"></text></g><g><title>kernel::model::EntityPtr::gid (2 samples, 0.16%)</title><rect x="84.2439%" y="389" width="0.1584%" height="15" fill="rgb(244,36,1)" fg:x="1064" fg:w="2"/><text x="84.4939%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="84.2439%" y="373" width="0.1584%" height="15" fill="rgb(222,40,54)" fg:x="1064" fg:w="2"/><text x="84.4939%" y="383.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="84.2439%" y="357" width="0.1584%" height="15" fill="rgb(210,207,39)" fg:x="1064" fg:w="2"/><text x="84.4939%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="84.2439%" y="341" width="0.1584%" height="15" fill="rgb(234,52,14)" fg:x="1064" fg:w="2"/><text x="84.4939%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.3230%" y="325" width="0.0792%" height="15" fill="rgb(239,108,46)" fg:x="1065" fg:w="1"/><text x="84.5730%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="84.4022%" y="229" width="0.0792%" height="15" fill="rgb(252,223,5)" fg:x="1066" fg:w="1"/><text x="84.6522%" y="239.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="84.4022%" y="213" width="0.0792%" height="15" fill="rgb(227,181,11)" fg:x="1066" fg:w="1"/><text x="84.6522%" y="223.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="84.4022%" y="197" width="0.0792%" height="15" fill="rgb(248,126,40)" fg:x="1066" fg:w="1"/><text x="84.6522%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="84.4022%" y="309" width="0.1584%" height="15" fill="rgb(243,1,18)" fg:x="1066" fg:w="2"/><text x="84.6522%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="84.4022%" y="293" width="0.1584%" height="15" fill="rgb(214,145,23)" fg:x="1066" fg:w="2"/><text x="84.6522%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="84.4022%" y="277" width="0.1584%" height="15" fill="rgb(241,218,11)" fg:x="1066" fg:w="2"/><text x="84.6522%" y="287.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (2 samples, 0.16%)</title><rect x="84.4022%" y="261" width="0.1584%" height="15" fill="rgb(214,219,24)" fg:x="1066" fg:w="2"/><text x="84.6522%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="84.4022%" y="245" width="0.1584%" height="15" fill="rgb(235,32,7)" fg:x="1066" fg:w="2"/><text x="84.6522%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="84.4814%" y="229" width="0.0792%" height="15" fill="rgb(227,121,28)" fg:x="1067" fg:w="1"/><text x="84.7314%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="84.4814%" y="213" width="0.0792%" height="15" fill="rgb(216,129,49)" fg:x="1067" fg:w="1"/><text x="84.7314%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.4814%" y="197" width="0.0792%" height="15" fill="rgb(207,194,50)" fg:x="1067" fg:w="1"/><text x="84.7314%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.4814%" y="181" width="0.0792%" height="15" fill="rgb(207,4,18)" fg:x="1067" fg:w="1"/><text x="84.7314%" y="191.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="84.5606%" y="293" width="0.0792%" height="15" fill="rgb(213,50,30)" fg:x="1068" fg:w="1"/><text x="84.8106%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Config::nfa_size_limit (1 samples, 0.08%)</title><rect x="84.5606%" y="277" width="0.0792%" height="15" fill="rgb(208,77,22)" fg:x="1068" fg:w="1"/><text x="84.8106%" y="287.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="84.7189%" y="261" width="0.0792%" height="15" fill="rgb(244,204,34)" fg:x="1070" fg:w="1"/><text x="84.9689%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="84.7981%" y="261" width="0.0792%" height="15" fill="rgb(230,20,17)" fg:x="1071" fg:w="1"/><text x="85.0481%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (3 samples, 0.24%)</title><rect x="85.1148%" y="229" width="0.2375%" height="15" fill="rgb(237,83,15)" fg:x="1075" fg:w="3"/><text x="85.3648%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.2732%" y="213" width="0.0792%" height="15" fill="rgb(221,109,25)" fg:x="1077" fg:w="1"/><text x="85.5232%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (4 samples, 0.32%)</title><rect x="85.1148%" y="245" width="0.3167%" height="15" fill="rgb(205,194,52)" fg:x="1075" fg:w="4"/><text x="85.3648%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="85.3523%" y="229" width="0.0792%" height="15" fill="rgb(244,173,54)" fg:x="1078" fg:w="1"/><text x="85.6023%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.3523%" y="213" width="0.0792%" height="15" fill="rgb(227,181,18)" fg:x="1078" fg:w="1"/><text x="85.6023%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="85.4315%" y="245" width="0.0792%" height="15" fill="rgb(238,36,30)" fg:x="1079" fg:w="1"/><text x="85.6815%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="85.4315%" y="229" width="0.0792%" height="15" fill="rgb(254,85,0)" fg:x="1079" fg:w="1"/><text x="85.6815%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="85.4315%" y="213" width="0.0792%" height="15" fill="rgb(247,63,33)" fg:x="1079" fg:w="1"/><text x="85.6815%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.4315%" y="197" width="0.0792%" height="15" fill="rgb(220,7,54)" fg:x="1079" fg:w="1"/><text x="85.6815%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="85.5107%" y="229" width="0.2375%" height="15" fill="rgb(238,227,21)" fg:x="1080" fg:w="3"/><text x="85.7607%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="85.5107%" y="245" width="0.3167%" height="15" fill="rgb(237,29,31)" fg:x="1080" fg:w="4"/><text x="85.7607%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="85.7482%" y="229" width="0.0792%" height="15" fill="rgb(211,21,50)" fg:x="1083" fg:w="1"/><text x="85.9982%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="85.7482%" y="213" width="0.0792%" height="15" fill="rgb(239,119,2)" fg:x="1083" fg:w="1"/><text x="85.9982%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="85.8274%" y="245" width="0.0792%" height="15" fill="rgb(250,2,39)" fg:x="1084" fg:w="1"/><text x="86.0774%" y="255.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="85.9066%" y="181" width="0.1584%" height="15" fill="rgb(244,46,53)" fg:x="1085" fg:w="2"/><text x="86.1566%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="86.0649%" y="181" width="0.0792%" height="15" fill="rgb(209,21,19)" fg:x="1087" fg:w="1"/><text x="86.3149%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.0649%" y="165" width="0.0792%" height="15" fill="rgb(236,145,4)" fg:x="1087" fg:w="1"/><text x="86.3149%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.0649%" y="149" width="0.0792%" height="15" fill="rgb(220,133,36)" fg:x="1087" fg:w="1"/><text x="86.3149%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="86.0649%" y="133" width="0.0792%" height="15" fill="rgb(244,18,3)" fg:x="1087" fg:w="1"/><text x="86.3149%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="86.1441%" y="181" width="0.1584%" height="15" fill="rgb(232,171,48)" fg:x="1088" fg:w="2"/><text x="86.3941%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.2233%" y="165" width="0.0792%" height="15" fill="rgb(223,223,53)" fg:x="1089" fg:w="1"/><text x="86.4733%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.2233%" y="149" width="0.0792%" height="15" fill="rgb(246,92,13)" fg:x="1089" fg:w="1"/><text x="86.4733%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="86.2233%" y="133" width="0.0792%" height="15" fill="rgb(229,171,10)" fg:x="1089" fg:w="1"/><text x="86.4733%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="86.3025%" y="181" width="0.0792%" height="15" fill="rgb(213,131,26)" fg:x="1090" fg:w="1"/><text x="86.5525%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="86.3025%" y="165" width="0.0792%" height="15" fill="rgb(242,87,54)" fg:x="1090" fg:w="1"/><text x="86.5525%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="86.3025%" y="149" width="0.0792%" height="15" fill="rgb(237,21,35)" fg:x="1090" fg:w="1"/><text x="86.5525%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="86.3025%" y="133" width="0.0792%" height="15" fill="rgb(253,13,47)" fg:x="1090" fg:w="1"/><text x="86.5525%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.3025%" y="117" width="0.0792%" height="15" fill="rgb(215,122,49)" fg:x="1090" fg:w="1"/><text x="86.5525%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.3025%" y="101" width="0.0792%" height="15" fill="rgb(209,179,30)" fg:x="1090" fg:w="1"/><text x="86.5525%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="86.3025%" y="85" width="0.0792%" height="15" fill="rgb(235,100,24)" fg:x="1090" fg:w="1"/><text x="86.5525%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="86.3816%" y="181" width="0.0792%" height="15" fill="rgb(209,67,24)" fg:x="1091" fg:w="1"/><text x="86.6316%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="86.3816%" y="165" width="0.0792%" height="15" fill="rgb(206,74,32)" fg:x="1091" fg:w="1"/><text x="86.6316%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.3816%" y="149" width="0.0792%" height="15" fill="rgb(212,45,25)" fg:x="1091" fg:w="1"/><text x="86.6316%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (20 samples, 1.58%)</title><rect x="86.4608%" y="181" width="1.5835%" height="15" fill="rgb(239,26,3)" fg:x="1092" fg:w="20"/><text x="86.7108%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (20 samples, 1.58%)</title><rect x="86.4608%" y="165" width="1.5835%" height="15" fill="rgb(218,36,15)" fg:x="1092" fg:w="20"/><text x="86.7108%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (20 samples, 1.58%)</title><rect x="86.4608%" y="149" width="1.5835%" height="15" fill="rgb(206,108,24)" fg:x="1092" fg:w="20"/><text x="86.7108%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 2.30%)</title><rect x="85.9066%" y="229" width="2.2961%" height="15" fill="rgb(234,204,42)" fg:x="1085" fg:w="29"/><text x="86.1566%" y="239.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (29 samples, 2.30%)</title><rect x="85.9066%" y="213" width="2.2961%" height="15" fill="rgb(229,2,11)" fg:x="1085" fg:w="29"/><text x="86.1566%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (29 samples, 2.30%)</title><rect x="85.9066%" y="197" width="2.2961%" height="15" fill="rgb(221,20,48)" fg:x="1085" fg:w="29"/><text x="86.1566%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="88.0443%" y="181" width="0.1584%" height="15" fill="rgb(244,164,10)" fg:x="1112" fg:w="2"/><text x="88.2943%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="88.2027%" y="213" width="0.0792%" height="15" fill="rgb(243,229,2)" fg:x="1114" fg:w="1"/><text x="88.4527%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.2027%" y="197" width="0.0792%" height="15" fill="rgb(232,131,37)" fg:x="1114" fg:w="1"/><text x="88.4527%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="88.2819%" y="213" width="0.0792%" height="15" fill="rgb(217,156,11)" fg:x="1115" fg:w="1"/><text x="88.5319%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="88.2027%" y="229" width="0.2375%" height="15" fill="rgb(239,99,48)" fg:x="1114" fg:w="3"/><text x="88.4527%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="88.3610%" y="213" width="0.0792%" height="15" fill="rgb(231,209,9)" fg:x="1116" fg:w="1"/><text x="88.6110%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="88.3610%" y="197" width="0.0792%" height="15" fill="rgb(254,97,27)" fg:x="1116" fg:w="1"/><text x="88.6110%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.3610%" y="181" width="0.0792%" height="15" fill="rgb(223,151,38)" fg:x="1116" fg:w="1"/><text x="88.6110%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.3610%" y="165" width="0.0792%" height="15" fill="rgb(219,206,35)" fg:x="1116" fg:w="1"/><text x="88.6110%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.3610%" y="149" width="0.0792%" height="15" fill="rgb(216,130,31)" fg:x="1116" fg:w="1"/><text x="88.6110%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="88.4402%" y="229" width="0.0792%" height="15" fill="rgb(251,97,34)" fg:x="1117" fg:w="1"/><text x="88.6902%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="88.4402%" y="213" width="0.0792%" height="15" fill="rgb(246,159,47)" fg:x="1117" fg:w="1"/><text x="88.6902%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (34 samples, 2.69%)</title><rect x="85.9066%" y="245" width="2.6920%" height="15" fill="rgb(232,87,10)" fg:x="1085" fg:w="34"/><text x="86.1566%" y="255.50">re..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="88.5194%" y="229" width="0.0792%" height="15" fill="rgb(249,1,37)" fg:x="1118" fg:w="1"/><text x="88.7694%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (49 samples, 3.88%)</title><rect x="84.8773%" y="261" width="3.8797%" height="15" fill="rgb(239,135,14)" fg:x="1072" fg:w="49"/><text x="85.1273%" y="271.50">rege..</text></g><g><title>regex_automata::util::prefilter::prefixes (2 samples, 0.16%)</title><rect x="88.5986%" y="245" width="0.1584%" height="15" fill="rgb(253,116,46)" fg:x="1119" fg:w="2"/><text x="88.8486%" y="255.50"></text></g><g><title>regex_syntax::hir::literal::Seq::optimize_by_preference (1 samples, 0.08%)</title><rect x="88.6778%" y="229" width="0.0792%" height="15" fill="rgb(222,217,37)" fg:x="1120" fg:w="1"/><text x="88.9278%" y="239.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="88.9153%" y="213" width="0.0792%" height="15" fill="rgb(252,96,8)" fg:x="1123" fg:w="1"/><text x="89.1653%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="88.9945%" y="213" width="0.0792%" height="15" fill="rgb(254,103,41)" fg:x="1124" fg:w="1"/><text x="89.2445%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="88.9945%" y="197" width="0.0792%" height="15" fill="rgb(218,213,19)" fg:x="1124" fg:w="1"/><text x="89.2445%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (7 samples, 0.55%)</title><rect x="88.8361%" y="229" width="0.5542%" height="15" fill="rgb(253,95,21)" fg:x="1122" fg:w="7"/><text x="89.0861%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (4 samples, 0.32%)</title><rect x="89.0736%" y="213" width="0.3167%" height="15" fill="rgb(229,26,28)" fg:x="1125" fg:w="4"/><text x="89.3236%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="89.0736%" y="197" width="0.3167%" height="15" fill="rgb(230,129,16)" fg:x="1125" fg:w="4"/><text x="89.3236%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="89.0736%" y="181" width="0.3167%" height="15" fill="rgb(236,126,17)" fg:x="1125" fg:w="4"/><text x="89.3236%" y="191.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="89.0736%" y="165" width="0.3167%" height="15" fill="rgb(209,33,33)" fg:x="1125" fg:w="4"/><text x="89.3236%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (62 samples, 4.91%)</title><rect x="84.5606%" y="309" width="4.9089%" height="15" fill="rgb(227,85,29)" fg:x="1068" fg:w="62"/><text x="84.8106%" y="319.50">&lt;regex..</text></g><g><title>regex::builders::Builder::build_one_string (61 samples, 4.83%)</title><rect x="84.6397%" y="293" width="4.8298%" height="15" fill="rgb(241,53,46)" fg:x="1069" fg:w="61"/><text x="84.8897%" y="303.50">regex:..</text></g><g><title>regex_automata::meta::regex::Builder::build (60 samples, 4.75%)</title><rect x="84.7189%" y="277" width="4.7506%" height="15" fill="rgb(228,167,53)" fg:x="1070" fg:w="60"/><text x="84.9689%" y="287.50">regex_..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (9 samples, 0.71%)</title><rect x="88.7569%" y="261" width="0.7126%" height="15" fill="rgb(238,195,45)" fg:x="1121" fg:w="9"/><text x="89.0069%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (9 samples, 0.71%)</title><rect x="88.7569%" y="245" width="0.7126%" height="15" fill="rgb(252,124,45)" fg:x="1121" fg:w="9"/><text x="89.0069%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="89.3903%" y="229" width="0.0792%" height="15" fill="rgb(251,38,35)" fg:x="1129" fg:w="1"/><text x="89.6403%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="89.4695%" y="309" width="0.0792%" height="15" fill="rgb(227,33,2)" fg:x="1130" fg:w="1"/><text x="89.7195%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="89.4695%" y="293" width="0.0792%" height="15" fill="rgb(223,157,46)" fg:x="1130" fg:w="1"/><text x="89.7195%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="89.4695%" y="277" width="0.0792%" height="15" fill="rgb(222,78,41)" fg:x="1130" fg:w="1"/><text x="89.7195%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="89.4695%" y="261" width="0.0792%" height="15" fill="rgb(248,176,11)" fg:x="1130" fg:w="1"/><text x="89.7195%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="89.5487%" y="245" width="0.2375%" height="15" fill="rgb(241,221,18)" fg:x="1131" fg:w="3"/><text x="89.7987%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="89.5487%" y="229" width="0.2375%" height="15" fill="rgb(218,85,22)" fg:x="1131" fg:w="3"/><text x="89.7987%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="89.5487%" y="261" width="0.3167%" height="15" fill="rgb(222,223,7)" fg:x="1131" fg:w="4"/><text x="89.7987%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="89.7862%" y="245" width="0.0792%" height="15" fill="rgb(254,59,39)" fg:x="1134" fg:w="1"/><text x="90.0362%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="89.7862%" y="229" width="0.0792%" height="15" fill="rgb(247,100,27)" fg:x="1134" fg:w="1"/><text x="90.0362%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.7862%" y="213" width="0.0792%" height="15" fill="rgb(237,207,10)" fg:x="1134" fg:w="1"/><text x="90.0362%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.7862%" y="197" width="0.0792%" height="15" fill="rgb(220,121,28)" fg:x="1134" fg:w="1"/><text x="90.0362%" y="207.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (70 samples, 5.54%)</title><rect x="84.4022%" y="325" width="5.5424%" height="15" fill="rgb(213,223,20)" fg:x="1066" fg:w="70"/><text x="84.6522%" y="335.50">indefin..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="89.5487%" y="309" width="0.3959%" height="15" fill="rgb(205,121,27)" fg:x="1131" fg:w="5"/><text x="89.7987%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="89.5487%" y="293" width="0.3959%" height="15" fill="rgb(253,24,53)" fg:x="1131" fg:w="5"/><text x="89.7987%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="89.5487%" y="277" width="0.3959%" height="15" fill="rgb(224,224,47)" fg:x="1131" fg:w="5"/><text x="89.7987%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="89.8654%" y="261" width="0.0792%" height="15" fill="rgb(250,125,36)" fg:x="1135" fg:w="1"/><text x="90.1154%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="89.8654%" y="245" width="0.0792%" height="15" fill="rgb(240,144,38)" fg:x="1135" fg:w="1"/><text x="90.1154%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="89.8654%" y="229" width="0.0792%" height="15" fill="rgb(250,15,50)" fg:x="1135" fg:w="1"/><text x="90.1154%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.8654%" y="213" width="0.0792%" height="15" fill="rgb(210,24,26)" fg:x="1135" fg:w="1"/><text x="90.1154%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.8654%" y="197" width="0.0792%" height="15" fill="rgb(234,53,53)" fg:x="1135" fg:w="1"/><text x="90.1154%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="89.9446%" y="261" width="0.0792%" height="15" fill="rgb(208,108,28)" fg:x="1136" fg:w="1"/><text x="90.1946%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (6 samples, 0.48%)</title><rect x="90.0238%" y="245" width="0.4751%" height="15" fill="rgb(227,143,7)" fg:x="1137" fg:w="6"/><text x="90.2738%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.48%)</title><rect x="90.0238%" y="229" width="0.4751%" height="15" fill="rgb(238,189,38)" fg:x="1137" fg:w="6"/><text x="90.2738%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="90.3405%" y="213" width="0.1584%" height="15" fill="rgb(222,69,15)" fg:x="1141" fg:w="2"/><text x="90.5905%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="90.5780%" y="229" width="0.0792%" height="15" fill="rgb(213,169,7)" fg:x="1144" fg:w="1"/><text x="90.8280%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="90.4988%" y="245" width="0.3167%" height="15" fill="rgb(251,219,4)" fg:x="1143" fg:w="4"/><text x="90.7488%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="90.6572%" y="229" width="0.1584%" height="15" fill="rgb(241,55,40)" fg:x="1145" fg:w="2"/><text x="90.9072%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="90.8947%" y="213" width="0.1584%" height="15" fill="rgb(243,57,30)" fg:x="1148" fg:w="2"/><text x="91.1447%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.9739%" y="197" width="0.0792%" height="15" fill="rgb(234,50,30)" fg:x="1149" fg:w="1"/><text x="91.2239%" y="207.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="90.9739%" y="181" width="0.0792%" height="15" fill="rgb(239,23,42)" fg:x="1149" fg:w="1"/><text x="91.2239%" y="191.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="90.9739%" y="165" width="0.0792%" height="15" fill="rgb(217,38,19)" fg:x="1149" fg:w="1"/><text x="91.2239%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (1 samples, 0.08%)</title><rect x="91.0530%" y="213" width="0.0792%" height="15" fill="rgb(215,179,16)" fg:x="1150" fg:w="1"/><text x="91.3030%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (8 samples, 0.63%)</title><rect x="90.8155%" y="245" width="0.6334%" height="15" fill="rgb(254,21,37)" fg:x="1147" fg:w="8"/><text x="91.0655%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (8 samples, 0.63%)</title><rect x="90.8155%" y="229" width="0.6334%" height="15" fill="rgb(219,207,48)" fg:x="1147" fg:w="8"/><text x="91.0655%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (4 samples, 0.32%)</title><rect x="91.1322%" y="213" width="0.3167%" height="15" fill="rgb(227,225,41)" fg:x="1151" fg:w="4"/><text x="91.3822%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (4 samples, 0.32%)</title><rect x="91.1322%" y="197" width="0.3167%" height="15" fill="rgb(223,130,1)" fg:x="1151" fg:w="4"/><text x="91.3822%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (4 samples, 0.32%)</title><rect x="91.1322%" y="181" width="0.3167%" height="15" fill="rgb(249,54,42)" fg:x="1151" fg:w="4"/><text x="91.3822%" y="191.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="91.5281%" y="133" width="0.3167%" height="15" fill="rgb(248,69,25)" fg:x="1156" fg:w="4"/><text x="91.7781%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="91.8448%" y="133" width="0.1584%" height="15" fill="rgb(234,21,32)" fg:x="1160" fg:w="2"/><text x="92.0948%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.1615%" y="69" width="0.0792%" height="15" fill="rgb(252,136,6)" fg:x="1164" fg:w="1"/><text x="92.4115%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="92.0823%" y="101" width="0.2375%" height="15" fill="rgb(245,87,12)" fg:x="1163" fg:w="3"/><text x="92.3323%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="92.1615%" y="85" width="0.1584%" height="15" fill="rgb(208,12,15)" fg:x="1164" fg:w="2"/><text x="92.4115%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="92.2407%" y="69" width="0.0792%" height="15" fill="rgb(250,98,2)" fg:x="1165" fg:w="1"/><text x="92.4907%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (6 samples, 0.48%)</title><rect x="92.0032%" y="133" width="0.4751%" height="15" fill="rgb(205,213,15)" fg:x="1162" fg:w="6"/><text x="92.2532%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (6 samples, 0.48%)</title><rect x="92.0032%" y="117" width="0.4751%" height="15" fill="rgb(248,192,44)" fg:x="1162" fg:w="6"/><text x="92.2532%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="92.3199%" y="101" width="0.1584%" height="15" fill="rgb(221,89,17)" fg:x="1166" fg:w="2"/><text x="92.5699%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="92.3990%" y="85" width="0.0792%" height="15" fill="rgb(209,55,3)" fg:x="1167" fg:w="1"/><text x="92.6490%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 2.77%)</title><rect x="91.4489%" y="229" width="2.7712%" height="15" fill="rgb(247,23,45)" fg:x="1155" fg:w="35"/><text x="91.6989%" y="239.50">&lt;c..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (35 samples, 2.77%)</title><rect x="91.4489%" y="213" width="2.7712%" height="15" fill="rgb(235,152,23)" fg:x="1155" fg:w="35"/><text x="91.6989%" y="223.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (35 samples, 2.77%)</title><rect x="91.4489%" y="197" width="2.7712%" height="15" fill="rgb(244,63,13)" fg:x="1155" fg:w="35"/><text x="91.6989%" y="207.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (35 samples, 2.77%)</title><rect x="91.4489%" y="181" width="2.7712%" height="15" fill="rgb(227,30,37)" fg:x="1155" fg:w="35"/><text x="91.6989%" y="191.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (35 samples, 2.77%)</title><rect x="91.4489%" y="165" width="2.7712%" height="15" fill="rgb(224,49,42)" fg:x="1155" fg:w="35"/><text x="91.6989%" y="175.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (35 samples, 2.77%)</title><rect x="91.4489%" y="149" width="2.7712%" height="15" fill="rgb(218,129,5)" fg:x="1155" fg:w="35"/><text x="91.6989%" y="159.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (22 samples, 1.74%)</title><rect x="92.4782%" y="133" width="1.7419%" height="15" fill="rgb(240,199,54)" fg:x="1168" fg:w="22"/><text x="92.7282%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (22 samples, 1.74%)</title><rect x="92.4782%" y="117" width="1.7419%" height="15" fill="rgb(234,31,13)" fg:x="1168" fg:w="22"/><text x="92.7282%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (22 samples, 1.74%)</title><rect x="92.4782%" y="101" width="1.7419%" height="15" fill="rgb(219,73,54)" fg:x="1168" fg:w="22"/><text x="92.7282%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.4576%" y="165" width="0.0792%" height="15" fill="rgb(251,162,10)" fg:x="1193" fg:w="1"/><text x="94.7076%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="94.3785%" y="213" width="0.2375%" height="15" fill="rgb(240,138,47)" fg:x="1192" fg:w="3"/><text x="94.6285%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="94.4576%" y="197" width="0.1584%" height="15" fill="rgb(216,138,26)" fg:x="1193" fg:w="2"/><text x="94.7076%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="94.4576%" y="181" width="0.1584%" height="15" fill="rgb(243,17,35)" fg:x="1193" fg:w="2"/><text x="94.7076%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.5368%" y="165" width="0.0792%" height="15" fill="rgb(241,60,18)" fg:x="1194" fg:w="1"/><text x="94.7868%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (60 samples, 4.75%)</title><rect x="90.0238%" y="261" width="4.7506%" height="15" fill="rgb(234,2,44)" fg:x="1137" fg:w="60"/><text x="90.2738%" y="271.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (42 samples, 3.33%)</title><rect x="91.4489%" y="245" width="3.3254%" height="15" fill="rgb(225,225,33)" fg:x="1155" fg:w="42"/><text x="91.6989%" y="255.50">reg..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.55%)</title><rect x="94.2201%" y="229" width="0.5542%" height="15" fill="rgb(234,50,31)" fg:x="1190" fg:w="7"/><text x="94.4701%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="94.6160%" y="213" width="0.1584%" height="15" fill="rgb(249,6,25)" fg:x="1195" fg:w="2"/><text x="94.8660%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.6952%" y="197" width="0.0792%" height="15" fill="rgb(241,5,17)" fg:x="1196" fg:w="1"/><text x="94.9452%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.6952%" y="181" width="0.0792%" height="15" fill="rgb(207,116,10)" fg:x="1196" fg:w="1"/><text x="94.9452%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.6952%" y="165" width="0.0792%" height="15" fill="rgb(222,128,18)" fg:x="1196" fg:w="1"/><text x="94.9452%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="94.7743%" y="229" width="0.1584%" height="15" fill="rgb(229,109,25)" fg:x="1197" fg:w="2"/><text x="95.0243%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="94.7743%" y="213" width="0.1584%" height="15" fill="rgb(222,102,25)" fg:x="1197" fg:w="2"/><text x="95.0243%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="94.8535%" y="197" width="0.0792%" height="15" fill="rgb(239,211,5)" fg:x="1198" fg:w="1"/><text x="95.1035%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="94.8535%" y="181" width="0.0792%" height="15" fill="rgb(223,136,26)" fg:x="1198" fg:w="1"/><text x="95.1035%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="94.8535%" y="165" width="0.0792%" height="15" fill="rgb(227,30,15)" fg:x="1198" fg:w="1"/><text x="95.1035%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="94.7743%" y="261" width="0.2375%" height="15" fill="rgb(247,76,4)" fg:x="1197" fg:w="3"/><text x="95.0243%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="94.7743%" y="245" width="0.2375%" height="15" fill="rgb(245,38,48)" fg:x="1197" fg:w="3"/><text x="95.0243%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="94.9327%" y="229" width="0.0792%" height="15" fill="rgb(210,220,14)" fg:x="1199" fg:w="1"/><text x="95.1827%" y="239.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (68 samples, 5.38%)</title><rect x="89.9446%" y="309" width="5.3840%" height="15" fill="rgb(224,60,51)" fg:x="1136" fg:w="68"/><text x="90.1946%" y="319.50">&lt;regex:..</text></g><g><title>regex::builders::Builder::build_one_string (68 samples, 5.38%)</title><rect x="89.9446%" y="293" width="5.3840%" height="15" fill="rgb(212,133,49)" fg:x="1136" fg:w="68"/><text x="90.1946%" y="303.50">regex::..</text></g><g><title>regex_automata::meta::regex::Builder::build (68 samples, 5.38%)</title><rect x="89.9446%" y="277" width="5.3840%" height="15" fill="rgb(231,39,22)" fg:x="1136" fg:w="68"/><text x="90.1946%" y="287.50">regex_a..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="95.0119%" y="261" width="0.3167%" height="15" fill="rgb(236,173,22)" fg:x="1200" fg:w="4"/><text x="95.2619%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="95.0119%" y="245" width="0.3167%" height="15" fill="rgb(210,70,0)" fg:x="1200" fg:w="4"/><text x="95.2619%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="95.0119%" y="229" width="0.3167%" height="15" fill="rgb(215,170,11)" fg:x="1200" fg:w="4"/><text x="95.2619%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (4 samples, 0.32%)</title><rect x="95.0119%" y="213" width="0.3167%" height="15" fill="rgb(220,154,28)" fg:x="1200" fg:w="4"/><text x="95.2619%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="95.3286%" y="229" width="0.3167%" height="15" fill="rgb(240,160,41)" fg:x="1204" fg:w="4"/><text x="95.5786%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="95.5661%" y="213" width="0.0792%" height="15" fill="rgb(243,215,41)" fg:x="1207" fg:w="1"/><text x="95.8161%" y="223.50"></text></g><g><title>indefinite::rules::number::Number::check (74 samples, 5.86%)</title><rect x="89.9446%" y="325" width="5.8591%" height="15" fill="rgb(214,208,31)" fg:x="1136" fg:w="74"/><text x="90.1946%" y="335.50">indefin..</text></g><g><title>regex::regex::string::Regex::is_match_at (6 samples, 0.48%)</title><rect x="95.3286%" y="309" width="0.4751%" height="15" fill="rgb(247,57,22)" fg:x="1204" fg:w="6"/><text x="95.5786%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.48%)</title><rect x="95.3286%" y="293" width="0.4751%" height="15" fill="rgb(228,73,52)" fg:x="1204" fg:w="6"/><text x="95.5786%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.48%)</title><rect x="95.3286%" y="277" width="0.4751%" height="15" fill="rgb(252,60,9)" fg:x="1204" fg:w="6"/><text x="95.5786%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.48%)</title><rect x="95.3286%" y="261" width="0.4751%" height="15" fill="rgb(233,9,51)" fg:x="1204" fg:w="6"/><text x="95.5786%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="95.3286%" y="245" width="0.4751%" height="15" fill="rgb(223,67,14)" fg:x="1204" fg:w="6"/><text x="95.5786%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="95.6453%" y="229" width="0.1584%" height="15" fill="rgb(222,86,2)" fg:x="1208" fg:w="2"/><text x="95.8953%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.7245%" y="213" width="0.0792%" height="15" fill="rgb(243,58,54)" fg:x="1209" fg:w="1"/><text x="95.9745%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="95.8828%" y="229" width="0.0792%" height="15" fill="rgb(210,200,39)" fg:x="1211" fg:w="1"/><text x="96.1328%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="95.8828%" y="213" width="0.0792%" height="15" fill="rgb(238,135,9)" fg:x="1211" fg:w="1"/><text x="96.1328%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="95.9620%" y="213" width="0.0792%" height="15" fill="rgb(232,179,7)" fg:x="1212" fg:w="1"/><text x="96.2120%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="95.9620%" y="197" width="0.0792%" height="15" fill="rgb(245,65,41)" fg:x="1212" fg:w="1"/><text x="96.2120%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.9620%" y="181" width="0.0792%" height="15" fill="rgb(227,43,8)" fg:x="1212" fg:w="1"/><text x="96.2120%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.9620%" y="165" width="0.0792%" height="15" fill="rgb(235,91,14)" fg:x="1212" fg:w="1"/><text x="96.2120%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="96.0412%" y="213" width="0.0792%" height="15" fill="rgb(235,219,31)" fg:x="1213" fg:w="1"/><text x="96.2912%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="96.1203%" y="197" width="0.0792%" height="15" fill="rgb(227,121,25)" fg:x="1214" fg:w="1"/><text x="96.3703%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (5 samples, 0.40%)</title><rect x="95.8828%" y="245" width="0.3959%" height="15" fill="rgb(254,129,24)" fg:x="1211" fg:w="5"/><text x="96.1328%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (4 samples, 0.32%)</title><rect x="95.9620%" y="229" width="0.3167%" height="15" fill="rgb(226,144,49)" fg:x="1212" fg:w="4"/><text x="96.2120%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="96.1203%" y="213" width="0.1584%" height="15" fill="rgb(214,187,32)" fg:x="1214" fg:w="2"/><text x="96.3703%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="96.1995%" y="197" width="0.0792%" height="15" fill="rgb(243,129,46)" fg:x="1215" fg:w="1"/><text x="96.4495%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="96.3579%" y="213" width="0.0792%" height="15" fill="rgb(221,185,35)" fg:x="1217" fg:w="1"/><text x="96.6079%" y="223.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="96.3579%" y="197" width="0.0792%" height="15" fill="rgb(205,0,32)" fg:x="1217" fg:w="1"/><text x="96.6079%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="96.2787%" y="245" width="0.2375%" height="15" fill="rgb(229,179,12)" fg:x="1216" fg:w="3"/><text x="96.5287%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="96.2787%" y="229" width="0.2375%" height="15" fill="rgb(252,107,19)" fg:x="1216" fg:w="3"/><text x="96.5287%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="96.4371%" y="213" width="0.0792%" height="15" fill="rgb(220,95,27)" fg:x="1218" fg:w="1"/><text x="96.6871%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="96.4371%" y="197" width="0.0792%" height="15" fill="rgb(240,113,40)" fg:x="1218" fg:w="1"/><text x="96.6871%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserBuilder::build (1 samples, 0.08%)</title><rect x="96.5162%" y="245" width="0.0792%" height="15" fill="rgb(208,4,43)" fg:x="1219" fg:w="1"/><text x="96.7662%" y="255.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (11 samples, 0.87%)</title><rect x="95.8036%" y="261" width="0.8709%" height="15" fill="rgb(247,189,30)" fg:x="1210" fg:w="11"/><text x="96.0536%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="96.5954%" y="245" width="0.0792%" height="15" fill="rgb(231,157,17)" fg:x="1220" fg:w="1"/><text x="96.8454%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="96.5954%" y="229" width="0.0792%" height="15" fill="rgb(224,139,6)" fg:x="1220" fg:w="1"/><text x="96.8454%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="96.5954%" y="213" width="0.0792%" height="15" fill="rgb(223,83,16)" fg:x="1220" fg:w="1"/><text x="96.8454%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="96.5954%" y="197" width="0.0792%" height="15" fill="rgb(232,211,20)" fg:x="1220" fg:w="1"/><text x="96.8454%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.5954%" y="181" width="0.0792%" height="15" fill="rgb(225,203,35)" fg:x="1220" fg:w="1"/><text x="96.8454%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (12 samples, 0.95%)</title><rect x="95.8036%" y="293" width="0.9501%" height="15" fill="rgb(215,211,44)" fg:x="1210" fg:w="12"/><text x="96.0536%" y="303.50"></text></g><g><title>regex::builders::Builder::build_one_string (12 samples, 0.95%)</title><rect x="95.8036%" y="277" width="0.9501%" height="15" fill="rgb(248,213,26)" fg:x="1210" fg:w="12"/><text x="96.0536%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::configure (1 samples, 0.08%)</title><rect x="96.6746%" y="261" width="0.0792%" height="15" fill="rgb(214,23,52)" fg:x="1221" fg:w="1"/><text x="96.9246%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="96.7538%" y="293" width="0.0792%" height="15" fill="rgb(225,173,50)" fg:x="1222" fg:w="1"/><text x="97.0038%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="96.7538%" y="277" width="0.0792%" height="15" fill="rgb(206,150,22)" fg:x="1222" fg:w="1"/><text x="97.0038%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="96.7538%" y="261" width="0.0792%" height="15" fill="rgb(239,64,23)" fg:x="1222" fg:w="1"/><text x="97.0038%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.8329%" y="245" width="0.0792%" height="15" fill="rgb(242,50,38)" fg:x="1223" fg:w="1"/><text x="97.0829%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="96.8329%" y="293" width="0.1584%" height="15" fill="rgb(217,91,15)" fg:x="1223" fg:w="2"/><text x="97.0829%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="96.8329%" y="277" width="0.1584%" height="15" fill="rgb(230,172,6)" fg:x="1223" fg:w="2"/><text x="97.0829%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="96.8329%" y="261" width="0.1584%" height="15" fill="rgb(221,98,26)" fg:x="1223" fg:w="2"/><text x="97.0829%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="96.9121%" y="245" width="0.0792%" height="15" fill="rgb(227,210,45)" fg:x="1224" fg:w="1"/><text x="97.1621%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.9121%" y="229" width="0.0792%" height="15" fill="rgb(206,8,30)" fg:x="1224" fg:w="1"/><text x="97.1621%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="96.9913%" y="213" width="0.0792%" height="15" fill="rgb(241,219,17)" fg:x="1225" fg:w="1"/><text x="97.2413%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="96.9913%" y="197" width="0.0792%" height="15" fill="rgb(247,121,29)" fg:x="1225" fg:w="1"/><text x="97.2413%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="96.9913%" y="229" width="0.1584%" height="15" fill="rgb(219,169,49)" fg:x="1225" fg:w="2"/><text x="97.2413%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="97.0705%" y="213" width="0.0792%" height="15" fill="rgb(253,49,49)" fg:x="1226" fg:w="1"/><text x="97.3205%" y="223.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (18 samples, 1.43%)</title><rect x="95.8036%" y="309" width="1.4252%" height="15" fill="rgb(217,178,3)" fg:x="1210" fg:w="18"/><text x="96.0536%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="96.9913%" y="293" width="0.2375%" height="15" fill="rgb(234,73,37)" fg:x="1225" fg:w="3"/><text x="97.2413%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="96.9913%" y="277" width="0.2375%" height="15" fill="rgb(250,98,22)" fg:x="1225" fg:w="3"/><text x="97.2413%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="96.9913%" y="261" width="0.2375%" height="15" fill="rgb(220,108,37)" fg:x="1225" fg:w="3"/><text x="97.2413%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="96.9913%" y="245" width="0.2375%" height="15" fill="rgb(225,168,10)" fg:x="1225" fg:w="3"/><text x="97.2413%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="97.1496%" y="229" width="0.0792%" height="15" fill="rgb(247,215,21)" fg:x="1227" fg:w="1"/><text x="97.3996%" y="239.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (170 samples, 13.46%)</title><rect x="83.8480%" y="405" width="13.4600%" height="15" fill="rgb(253,189,31)" fg:x="1059" fg:w="170"/><text x="84.0980%" y="415.50">&lt;&amp;kernel::model::Ent..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (163 samples, 12.91%)</title><rect x="84.4022%" y="389" width="12.9058%" height="15" fill="rgb(241,54,22)" fg:x="1066" fg:w="163"/><text x="84.6522%" y="399.50">plugins_core::looki..</text></g><g><title>indefinite::indefinite (163 samples, 12.91%)</title><rect x="84.4022%" y="373" width="12.9058%" height="15" fill="rgb(211,87,4)" fg:x="1066" fg:w="163"/><text x="84.6522%" y="383.50">indefinite::indefin..</text></g><g><title>indefinite::methods::indefinite (163 samples, 12.91%)</title><rect x="84.4022%" y="357" width="12.9058%" height="15" fill="rgb(245,112,24)" fg:x="1066" fg:w="163"/><text x="84.6522%" y="367.50">indefinite::methods..</text></g><g><title>indefinite::methods::apply_rules (163 samples, 12.91%)</title><rect x="84.4022%" y="341" width="12.9058%" height="15" fill="rgb(235,190,41)" fg:x="1066" fg:w="163"/><text x="84.6522%" y="351.50">indefinite::methods..</text></g><g><title>indefinite::rules::other::Other::run (19 samples, 1.50%)</title><rect x="95.8036%" y="325" width="1.5044%" height="15" fill="rgb(214,89,8)" fg:x="1210" fg:w="19"/><text x="96.0536%" y="335.50"></text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="97.2288%" y="309" width="0.0792%" height="15" fill="rgb(249,155,35)" fg:x="1228" fg:w="1"/><text x="97.4788%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="97.3080%" y="405" width="0.2375%" height="15" fill="rgb(249,88,26)" fg:x="1229" fg:w="3"/><text x="97.5580%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="97.3080%" y="389" width="0.2375%" height="15" fill="rgb(232,56,8)" fg:x="1229" fg:w="3"/><text x="97.5580%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="97.3080%" y="373" width="0.2375%" height="15" fill="rgb(240,95,3)" fg:x="1229" fg:w="3"/><text x="97.5580%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="97.4663%" y="357" width="0.0792%" height="15" fill="rgb(222,44,28)" fg:x="1231" fg:w="1"/><text x="97.7163%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="97.4663%" y="341" width="0.0792%" height="15" fill="rgb(234,16,30)" fg:x="1231" fg:w="1"/><text x="97.7163%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="97.4663%" y="325" width="0.0792%" height="15" fill="rgb(223,26,17)" fg:x="1231" fg:w="1"/><text x="97.7163%" y="335.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="97.5455%" y="341" width="0.0792%" height="15" fill="rgb(239,187,47)" fg:x="1232" fg:w="1"/><text x="97.7955%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.5455%" y="325" width="0.0792%" height="15" fill="rgb(247,102,50)" fg:x="1232" fg:w="1"/><text x="97.7955%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.5455%" y="309" width="0.0792%" height="15" fill="rgb(231,216,22)" fg:x="1232" fg:w="1"/><text x="97.7955%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="97.5455%" y="293" width="0.0792%" height="15" fill="rgb(216,201,26)" fg:x="1232" fg:w="1"/><text x="97.7955%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="97.5455%" y="277" width="0.0792%" height="15" fill="rgb(214,186,23)" fg:x="1232" fg:w="1"/><text x="97.7955%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="97.5455%" y="261" width="0.0792%" height="15" fill="rgb(235,184,4)" fg:x="1232" fg:w="1"/><text x="97.7955%" y="271.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="97.6247%" y="149" width="0.0792%" height="15" fill="rgb(244,46,17)" fg:x="1233" fg:w="1"/><text x="97.8747%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="97.6247%" y="181" width="0.1584%" height="15" fill="rgb(248,74,46)" fg:x="1233" fg:w="2"/><text x="97.8747%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="97.6247%" y="165" width="0.1584%" height="15" fill="rgb(243,79,5)" fg:x="1233" fg:w="2"/><text x="97.8747%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.7039%" y="149" width="0.0792%" height="15" fill="rgb(213,148,1)" fg:x="1234" fg:w="1"/><text x="97.9539%" y="159.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.7039%" y="133" width="0.0792%" height="15" fill="rgb(221,30,0)" fg:x="1234" fg:w="1"/><text x="97.9539%" y="143.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="97.7039%" y="117" width="0.0792%" height="15" fill="rgb(207,85,29)" fg:x="1234" fg:w="1"/><text x="97.9539%" y="127.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="97.6247%" y="245" width="0.2375%" height="15" fill="rgb(239,31,46)" fg:x="1233" fg:w="3"/><text x="97.8747%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="97.6247%" y="229" width="0.2375%" height="15" fill="rgb(219,6,1)" fg:x="1233" fg:w="3"/><text x="97.8747%" y="239.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (3 samples, 0.24%)</title><rect x="97.6247%" y="213" width="0.2375%" height="15" fill="rgb(229,90,29)" fg:x="1233" fg:w="3"/><text x="97.8747%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="97.6247%" y="197" width="0.2375%" height="15" fill="rgb(242,201,42)" fg:x="1233" fg:w="3"/><text x="97.8747%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="97.7831%" y="181" width="0.0792%" height="15" fill="rgb(243,80,54)" fg:x="1235" fg:w="1"/><text x="98.0331%" y="191.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="97.6247%" y="341" width="0.3167%" height="15" fill="rgb(223,166,15)" fg:x="1233" fg:w="4"/><text x="97.8747%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="97.6247%" y="325" width="0.3167%" height="15" fill="rgb(238,78,27)" fg:x="1233" fg:w="4"/><text x="97.8747%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="97.6247%" y="309" width="0.3167%" height="15" fill="rgb(235,28,43)" fg:x="1233" fg:w="4"/><text x="97.8747%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="97.6247%" y="293" width="0.3167%" height="15" fill="rgb(240,210,28)" fg:x="1233" fg:w="4"/><text x="97.8747%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="97.6247%" y="277" width="0.3167%" height="15" fill="rgb(253,6,46)" fg:x="1233" fg:w="4"/><text x="97.8747%" y="287.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="97.6247%" y="261" width="0.3167%" height="15" fill="rgb(250,159,47)" fg:x="1233" fg:w="4"/><text x="97.8747%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="97.8622%" y="245" width="0.0792%" height="15" fill="rgb(216,139,2)" fg:x="1236" fg:w="1"/><text x="98.1122%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.8622%" y="229" width="0.0792%" height="15" fill="rgb(221,124,44)" fg:x="1236" fg:w="1"/><text x="98.1122%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="97.8622%" y="213" width="0.0792%" height="15" fill="rgb(205,37,22)" fg:x="1236" fg:w="1"/><text x="98.1122%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="97.8622%" y="197" width="0.0792%" height="15" fill="rgb(250,55,8)" fg:x="1236" fg:w="1"/><text x="98.1122%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.8622%" y="181" width="0.0792%" height="15" fill="rgb(215,83,48)" fg:x="1236" fg:w="1"/><text x="98.1122%" y="191.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="97.5455%" y="357" width="0.4751%" height="15" fill="rgb(253,2,32)" fg:x="1232" fg:w="6"/><text x="97.7955%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="97.9414%" y="341" width="0.0792%" height="15" fill="rgb(236,67,28)" fg:x="1237" fg:w="1"/><text x="98.1914%" y="351.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="97.9414%" y="325" width="0.0792%" height="15" fill="rgb(252,55,15)" fg:x="1237" fg:w="1"/><text x="98.1914%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.9414%" y="309" width="0.0792%" height="15" fill="rgb(243,173,17)" fg:x="1237" fg:w="1"/><text x="98.1914%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.9414%" y="293" width="0.0792%" height="15" fill="rgb(215,212,13)" fg:x="1237" fg:w="1"/><text x="98.1914%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.9414%" y="277" width="0.0792%" height="15" fill="rgb(253,176,6)" fg:x="1237" fg:w="1"/><text x="98.1914%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.9414%" y="261" width="0.0792%" height="15" fill="rgb(236,105,26)" fg:x="1237" fg:w="1"/><text x="98.1914%" y="271.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.9414%" y="245" width="0.0792%" height="15" fill="rgb(239,226,32)" fg:x="1237" fg:w="1"/><text x="98.1914%" y="255.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (7 samples, 0.55%)</title><rect x="97.5455%" y="405" width="0.5542%" height="15" fill="rgb(236,104,51)" fg:x="1232" fg:w="7"/><text x="97.7955%" y="415.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (7 samples, 0.55%)</title><rect x="97.5455%" y="389" width="0.5542%" height="15" fill="rgb(220,172,33)" fg:x="1232" fg:w="7"/><text x="97.7955%" y="399.50"></text></g><g><title>engine::session::Session::load_entity (7 samples, 0.55%)</title><rect x="97.5455%" y="373" width="0.5542%" height="15" fill="rgb(224,182,25)" fg:x="1232" fg:w="7"/><text x="97.7955%" y="383.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="98.0206%" y="357" width="0.0792%" height="15" fill="rgb(236,184,24)" fg:x="1238" fg:w="1"/><text x="98.2706%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (197 samples, 15.60%)</title><rect x="82.5812%" y="629" width="15.5978%" height="15" fill="rgb(241,221,14)" fg:x="1043" fg:w="197"/><text x="82.8312%" y="639.50">&lt;engine::session::Sessio..</text></g><g><title>kernel::plugins::mw::apply_middleware (197 samples, 15.60%)</title><rect x="82.5812%" y="613" width="15.5978%" height="15" fill="rgb(227,146,5)" fg:x="1043" fg:w="197"/><text x="82.8312%" y="623.50">kernel::plugins::mw::app..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (197 samples, 15.60%)</title><rect x="82.5812%" y="597" width="15.5978%" height="15" fill="rgb(214,15,23)" fg:x="1043" fg:w="197"/><text x="82.8312%" y="607.50">kernel::plugins::mw::Mid..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (197 samples, 15.60%)</title><rect x="82.5812%" y="581" width="15.5978%" height="15" fill="rgb(233,157,31)" fg:x="1043" fg:w="197"/><text x="82.8312%" y="591.50">&lt;engine::session::Expand..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (184 samples, 14.57%)</title><rect x="83.6105%" y="565" width="14.5685%" height="15" fill="rgb(211,27,52)" fg:x="1056" fg:w="184"/><text x="83.8605%" y="575.50">kernel::plugins::mw::M..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (184 samples, 14.57%)</title><rect x="83.6105%" y="549" width="14.5685%" height="15" fill="rgb(212,223,15)" fg:x="1056" fg:w="184"/><text x="83.8605%" y="559.50">&lt;plugins_dynlib::Dynam..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (184 samples, 14.57%)</title><rect x="83.6105%" y="533" width="14.5685%" height="15" fill="rgb(254,211,0)" fg:x="1056" fg:w="184"/><text x="83.8605%" y="543.50">kernel::plugins::mw::M..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (184 samples, 14.57%)</title><rect x="83.6105%" y="517" width="14.5685%" height="15" fill="rgb(205,43,38)" fg:x="1056" fg:w="184"/><text x="83.8605%" y="527.50">core::ops::function::F..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (183 samples, 14.49%)</title><rect x="83.6896%" y="501" width="14.4893%" height="15" fill="rgb(242,206,46)" fg:x="1057" fg:w="183"/><text x="83.9396%" y="511.50">kernel::plugins::mw::M..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (183 samples, 14.49%)</title><rect x="83.6896%" y="485" width="14.4893%" height="15" fill="rgb(220,221,12)" fg:x="1057" fg:w="183"/><text x="83.9396%" y="495.50">core::ops::function::F..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (183 samples, 14.49%)</title><rect x="83.6896%" y="469" width="14.4893%" height="15" fill="rgb(217,156,35)" fg:x="1057" fg:w="183"/><text x="83.9396%" y="479.50">&lt;alloc::boxed::Box&lt;F,A..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (183 samples, 14.49%)</title><rect x="83.6896%" y="453" width="14.4893%" height="15" fill="rgb(207,181,49)" fg:x="1057" fg:w="183"/><text x="83.9396%" y="463.50">&lt;engine::session::stat..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (183 samples, 14.49%)</title><rect x="83.6896%" y="437" width="14.4893%" height="15" fill="rgb(235,103,47)" fg:x="1057" fg:w="183"/><text x="83.9396%" y="447.50">&lt;plugins_core::looking..</text></g><g><title>plugins_core::looking::model::new_area_observation (181 samples, 14.33%)</title><rect x="83.8480%" y="421" width="14.3310%" height="15" fill="rgb(222,63,28)" fg:x="1059" fg:w="181"/><text x="84.0980%" y="431.50">plugins_core::looking:..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.0998%" y="405" width="0.0792%" height="15" fill="rgb(244,137,21)" fg:x="1239" fg:w="1"/><text x="98.3498%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.1789%" y="581" width="0.1584%" height="15" fill="rgb(228,35,27)" fg:x="1240" fg:w="2"/><text x="98.4289%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2581%" y="565" width="0.0792%" height="15" fill="rgb(226,191,41)" fg:x="1241" fg:w="1"/><text x="98.5081%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2581%" y="549" width="0.0792%" height="15" fill="rgb(210,154,3)" fg:x="1241" fg:w="1"/><text x="98.5081%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2581%" y="533" width="0.0792%" height="15" fill="rgb(216,60,49)" fg:x="1241" fg:w="1"/><text x="98.5081%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2581%" y="517" width="0.0792%" height="15" fill="rgb(226,17,20)" fg:x="1241" fg:w="1"/><text x="98.5081%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.2581%" y="501" width="0.0792%" height="15" fill="rgb(206,115,35)" fg:x="1241" fg:w="1"/><text x="98.5081%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.2581%" y="485" width="0.0792%" height="15" fill="rgb(227,88,1)" fg:x="1241" fg:w="1"/><text x="98.5081%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.2581%" y="469" width="0.0792%" height="15" fill="rgb(230,222,24)" fg:x="1241" fg:w="1"/><text x="98.5081%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.2581%" y="453" width="0.0792%" height="15" fill="rgb(214,124,32)" fg:x="1241" fg:w="1"/><text x="98.5081%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.2581%" y="437" width="0.0792%" height="15" fill="rgb(240,41,36)" fg:x="1241" fg:w="1"/><text x="98.5081%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.2581%" y="421" width="0.0792%" height="15" fill="rgb(221,17,52)" fg:x="1241" fg:w="1"/><text x="98.5081%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.2581%" y="405" width="0.0792%" height="15" fill="rgb(252,70,16)" fg:x="1241" fg:w="1"/><text x="98.5081%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.2581%" y="389" width="0.0792%" height="15" fill="rgb(250,177,4)" fg:x="1241" fg:w="1"/><text x="98.5081%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.2581%" y="373" width="0.0792%" height="15" fill="rgb(240,188,47)" fg:x="1241" fg:w="1"/><text x="98.5081%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.2581%" y="357" width="0.0792%" height="15" fill="rgb(215,92,12)" fg:x="1241" fg:w="1"/><text x="98.5081%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.3373%" y="437" width="0.0792%" height="15" fill="rgb(242,110,29)" fg:x="1242" fg:w="1"/><text x="98.5873%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.3373%" y="421" width="0.0792%" height="15" fill="rgb(208,211,26)" fg:x="1242" fg:w="1"/><text x="98.5873%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="98.3373%" y="533" width="0.2375%" height="15" fill="rgb(244,147,6)" fg:x="1242" fg:w="3"/><text x="98.5873%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="98.3373%" y="517" width="0.2375%" height="15" fill="rgb(211,130,42)" fg:x="1242" fg:w="3"/><text x="98.5873%" y="527.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="98.3373%" y="501" width="0.2375%" height="15" fill="rgb(220,63,1)" fg:x="1242" fg:w="3"/><text x="98.5873%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="98.3373%" y="485" width="0.2375%" height="15" fill="rgb(241,212,30)" fg:x="1242" fg:w="3"/><text x="98.5873%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="98.3373%" y="469" width="0.2375%" height="15" fill="rgb(233,153,17)" fg:x="1242" fg:w="3"/><text x="98.5873%" y="479.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="98.3373%" y="453" width="0.2375%" height="15" fill="rgb(236,3,10)" fg:x="1242" fg:w="3"/><text x="98.5873%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.4165%" y="437" width="0.1584%" height="15" fill="rgb(232,41,21)" fg:x="1243" fg:w="2"/><text x="98.6665%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.4165%" y="421" width="0.1584%" height="15" fill="rgb(206,63,51)" fg:x="1243" fg:w="2"/><text x="98.6665%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="98.4956%" y="405" width="0.0792%" height="15" fill="rgb(250,214,3)" fg:x="1244" fg:w="1"/><text x="98.7456%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (1 samples, 0.08%)</title><rect x="98.4956%" y="389" width="0.0792%" height="15" fill="rgb(254,89,27)" fg:x="1244" fg:w="1"/><text x="98.7456%" y="399.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (1 samples, 0.08%)</title><rect x="98.4956%" y="373" width="0.0792%" height="15" fill="rgb(249,41,14)" fg:x="1244" fg:w="1"/><text x="98.7456%" y="383.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (1 samples, 0.08%)</title><rect x="98.4956%" y="357" width="0.0792%" height="15" fill="rgb(221,196,51)" fg:x="1244" fg:w="1"/><text x="98.7456%" y="367.50"></text></g><g><title>serde_json::error::make_error (1 samples, 0.08%)</title><rect x="98.4956%" y="341" width="0.0792%" height="15" fill="rgb(214,116,26)" fg:x="1244" fg:w="1"/><text x="98.7456%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.08%)</title><rect x="98.4956%" y="325" width="0.0792%" height="15" fill="rgb(236,67,7)" fg:x="1244" fg:w="1"/><text x="98.7456%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.5748%" y="501" width="0.0792%" height="15" fill="rgb(253,179,32)" fg:x="1245" fg:w="1"/><text x="98.8248%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="98.3373%" y="581" width="0.4751%" height="15" fill="rgb(218,33,15)" fg:x="1242" fg:w="6"/><text x="98.5873%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.48%)</title><rect x="98.3373%" y="565" width="0.4751%" height="15" fill="rgb(217,202,41)" fg:x="1242" fg:w="6"/><text x="98.5873%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (6 samples, 0.48%)</title><rect x="98.3373%" y="549" width="0.4751%" height="15" fill="rgb(234,133,5)" fg:x="1242" fg:w="6"/><text x="98.5873%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="98.5748%" y="533" width="0.2375%" height="15" fill="rgb(240,47,40)" fg:x="1245" fg:w="3"/><text x="98.8248%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="98.5748%" y="517" width="0.2375%" height="15" fill="rgb(234,166,26)" fg:x="1245" fg:w="3"/><text x="98.8248%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="98.6540%" y="501" width="0.1584%" height="15" fill="rgb(244,125,51)" fg:x="1246" fg:w="2"/><text x="98.9040%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="98.6540%" y="485" width="0.1584%" height="15" fill="rgb(229,171,11)" fg:x="1246" fg:w="2"/><text x="98.9040%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="98.6540%" y="469" width="0.1584%" height="15" fill="rgb(224,38,45)" fg:x="1246" fg:w="2"/><text x="98.9040%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.7332%" y="453" width="0.0792%" height="15" fill="rgb(237,27,7)" fg:x="1247" fg:w="1"/><text x="98.9832%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.7332%" y="437" width="0.0792%" height="15" fill="rgb(216,52,7)" fg:x="1247" fg:w="1"/><text x="98.9832%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.8915%" y="485" width="0.0792%" height="15" fill="rgb(243,11,11)" fg:x="1249" fg:w="1"/><text x="99.1415%" y="495.50"></text></g><g><title>engine::session::internal::Added::find_refs (11 samples, 0.87%)</title><rect x="98.1789%" y="613" width="0.8709%" height="15" fill="rgb(253,167,20)" fg:x="1240" fg:w="11"/><text x="98.4289%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (11 samples, 0.87%)</title><rect x="98.1789%" y="597" width="0.8709%" height="15" fill="rgb(215,207,5)" fg:x="1240" fg:w="11"/><text x="98.4289%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="98.8124%" y="581" width="0.2375%" height="15" fill="rgb(252,127,31)" fg:x="1248" fg:w="3"/><text x="99.0624%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="98.8124%" y="565" width="0.2375%" height="15" fill="rgb(209,106,27)" fg:x="1248" fg:w="3"/><text x="99.0624%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="98.8915%" y="549" width="0.1584%" height="15" fill="rgb(214,220,18)" fg:x="1249" fg:w="2"/><text x="99.1415%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="98.8915%" y="533" width="0.1584%" height="15" fill="rgb(237,89,12)" fg:x="1249" fg:w="2"/><text x="99.1415%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="98.8915%" y="517" width="0.1584%" height="15" fill="rgb(209,167,36)" fg:x="1249" fg:w="2"/><text x="99.1415%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="98.8915%" y="501" width="0.1584%" height="15" fill="rgb(243,45,22)" fg:x="1249" fg:w="2"/><text x="99.1415%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.9707%" y="485" width="0.0792%" height="15" fill="rgb(239,2,46)" fg:x="1250" fg:w="1"/><text x="99.2207%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.9707%" y="469" width="0.0792%" height="15" fill="rgb(241,101,0)" fg:x="1250" fg:w="1"/><text x="99.2207%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.0499%" y="597" width="0.0792%" height="15" fill="rgb(244,34,31)" fg:x="1251" fg:w="1"/><text x="99.2999%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.0499%" y="581" width="0.0792%" height="15" fill="rgb(248,23,22)" fg:x="1251" fg:w="1"/><text x="99.2999%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.0499%" y="565" width="0.0792%" height="15" fill="rgb(218,27,48)" fg:x="1251" fg:w="1"/><text x="99.2999%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.0499%" y="549" width="0.0792%" height="15" fill="rgb(232,78,1)" fg:x="1251" fg:w="1"/><text x="99.2999%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.0499%" y="533" width="0.0792%" height="15" fill="rgb(233,169,12)" fg:x="1251" fg:w="1"/><text x="99.2999%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.0499%" y="517" width="0.0792%" height="15" fill="rgb(225,222,54)" fg:x="1251" fg:w="1"/><text x="99.2999%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.0499%" y="501" width="0.0792%" height="15" fill="rgb(245,126,29)" fg:x="1251" fg:w="1"/><text x="99.2999%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.0499%" y="485" width="0.0792%" height="15" fill="rgb(241,63,48)" fg:x="1251" fg:w="1"/><text x="99.2999%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.0499%" y="469" width="0.0792%" height="15" fill="rgb(235,126,38)" fg:x="1251" fg:w="1"/><text x="99.2999%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.0499%" y="453" width="0.0792%" height="15" fill="rgb(232,96,49)" fg:x="1251" fg:w="1"/><text x="99.2999%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.0499%" y="437" width="0.0792%" height="15" fill="rgb(211,146,40)" fg:x="1251" fg:w="1"/><text x="99.2999%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.0499%" y="421" width="0.0792%" height="15" fill="rgb(247,93,44)" fg:x="1251" fg:w="1"/><text x="99.2999%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.0499%" y="405" width="0.0792%" height="15" fill="rgb(251,41,49)" fg:x="1251" fg:w="1"/><text x="99.2999%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.0499%" y="389" width="0.0792%" height="15" fill="rgb(218,155,12)" fg:x="1251" fg:w="1"/><text x="99.2999%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.0499%" y="373" width="0.0792%" height="15" fill="rgb(221,161,30)" fg:x="1251" fg:w="1"/><text x="99.2999%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.0499%" y="357" width="0.0792%" height="15" fill="rgb(221,179,11)" fg:x="1251" fg:w="1"/><text x="99.2999%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.0499%" y="341" width="0.0792%" height="15" fill="rgb(224,170,48)" fg:x="1251" fg:w="1"/><text x="99.2999%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="99.1291%" y="597" width="0.0792%" height="15" fill="rgb(223,117,5)" fg:x="1252" fg:w="1"/><text x="99.3791%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.1291%" y="581" width="0.0792%" height="15" fill="rgb(209,52,20)" fg:x="1252" fg:w="1"/><text x="99.3791%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="99.1291%" y="565" width="0.0792%" height="15" fill="rgb(209,19,41)" fg:x="1252" fg:w="1"/><text x="99.3791%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1291%" y="549" width="0.0792%" height="15" fill="rgb(210,177,12)" fg:x="1252" fg:w="1"/><text x="99.3791%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1291%" y="533" width="0.0792%" height="15" fill="rgb(211,159,37)" fg:x="1252" fg:w="1"/><text x="99.3791%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1291%" y="517" width="0.0792%" height="15" fill="rgb(209,20,2)" fg:x="1252" fg:w="1"/><text x="99.3791%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.2082%" y="517" width="0.0792%" height="15" fill="rgb(244,3,46)" fg:x="1253" fg:w="1"/><text x="99.4582%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="99.2082%" y="501" width="0.0792%" height="15" fill="rgb(220,94,38)" fg:x="1253" fg:w="1"/><text x="99.4582%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="99.2082%" y="485" width="0.0792%" height="15" fill="rgb(253,14,31)" fg:x="1253" fg:w="1"/><text x="99.4582%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.2874%" y="501" width="0.0792%" height="15" fill="rgb(234,176,13)" fg:x="1254" fg:w="1"/><text x="99.5374%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.2874%" y="485" width="0.0792%" height="15" fill="rgb(218,62,25)" fg:x="1254" fg:w="1"/><text x="99.5374%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.2874%" y="469" width="0.0792%" height="15" fill="rgb(216,124,40)" fg:x="1254" fg:w="1"/><text x="99.5374%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.2874%" y="453" width="0.0792%" height="15" fill="rgb(228,170,12)" fg:x="1254" fg:w="1"/><text x="99.5374%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.2874%" y="437" width="0.0792%" height="15" fill="rgb(231,226,5)" fg:x="1254" fg:w="1"/><text x="99.5374%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.2874%" y="421" width="0.0792%" height="15" fill="rgb(237,122,22)" fg:x="1254" fg:w="1"/><text x="99.5374%" y="431.50"></text></g><g><title>engine::session::Session::load_entity (16 samples, 1.27%)</title><rect x="98.1789%" y="629" width="1.2668%" height="15" fill="rgb(209,185,25)" fg:x="1240" fg:w="16"/><text x="98.4289%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="99.0499%" y="613" width="0.3959%" height="15" fill="rgb(228,200,32)" fg:x="1251" fg:w="5"/><text x="99.2999%" y="623.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="99.2082%" y="597" width="0.2375%" height="15" fill="rgb(217,140,10)" fg:x="1253" fg:w="3"/><text x="99.4582%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="99.2082%" y="581" width="0.2375%" height="15" fill="rgb(253,17,24)" fg:x="1253" fg:w="3"/><text x="99.4582%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="99.2082%" y="565" width="0.2375%" height="15" fill="rgb(212,61,6)" fg:x="1253" fg:w="3"/><text x="99.4582%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="99.2082%" y="549" width="0.2375%" height="15" fill="rgb(205,14,25)" fg:x="1253" fg:w="3"/><text x="99.4582%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="99.2082%" y="533" width="0.2375%" height="15" fill="rgb(232,69,41)" fg:x="1253" fg:w="3"/><text x="99.4582%" y="543.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.2874%" y="517" width="0.1584%" height="15" fill="rgb(241,106,47)" fg:x="1254" fg:w="2"/><text x="99.5374%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.3666%" y="501" width="0.0792%" height="15" fill="rgb(210,213,53)" fg:x="1255" fg:w="1"/><text x="99.6166%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3666%" y="485" width="0.0792%" height="15" fill="rgb(253,175,27)" fg:x="1255" fg:w="1"/><text x="99.6166%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.3666%" y="469" width="0.0792%" height="15" fill="rgb(211,171,24)" fg:x="1255" fg:w="1"/><text x="99.6166%" y="479.50"></text></g><g><title>serde_json::value::de::BorrowedCowStrDeserializer::new (1 samples, 0.08%)</title><rect x="99.3666%" y="453" width="0.0792%" height="15" fill="rgb(229,80,7)" fg:x="1255" fg:w="1"/><text x="99.6166%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.4458%" y="581" width="0.0792%" height="15" fill="rgb(212,46,39)" fg:x="1256" fg:w="1"/><text x="99.6958%" y="591.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="99.4458%" y="565" width="0.0792%" height="15" fill="rgb(240,80,45)" fg:x="1256" fg:w="1"/><text x="99.6958%" y="575.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="99.4458%" y="549" width="0.0792%" height="15" fill="rgb(253,177,40)" fg:x="1256" fg:w="1"/><text x="99.6958%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.5249%" y="533" width="0.0792%" height="15" fill="rgb(249,200,15)" fg:x="1257" fg:w="1"/><text x="99.7749%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.6833%" y="453" width="0.0792%" height="15" fill="rgb(217,78,26)" fg:x="1259" fg:w="1"/><text x="99.9333%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6833%" y="437" width="0.0792%" height="15" fill="rgb(254,151,32)" fg:x="1259" fg:w="1"/><text x="99.9333%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.6833%" y="421" width="0.0792%" height="15" fill="rgb(226,165,27)" fg:x="1259" fg:w="1"/><text x="99.9333%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6833%" y="405" width="0.0792%" height="15" fill="rgb(250,206,4)" fg:x="1259" fg:w="1"/><text x="99.9333%" y="415.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.6833%" y="389" width="0.0792%" height="15" fill="rgb(231,229,27)" fg:x="1259" fg:w="1"/><text x="99.9333%" y="399.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="99.5249%" y="581" width="0.3167%" height="15" fill="rgb(239,217,8)" fg:x="1257" fg:w="4"/><text x="99.7749%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="99.5249%" y="565" width="0.3167%" height="15" fill="rgb(225,204,27)" fg:x="1257" fg:w="4"/><text x="99.7749%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="99.5249%" y="549" width="0.3167%" height="15" fill="rgb(230,56,32)" fg:x="1257" fg:w="4"/><text x="99.7749%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="99.6041%" y="533" width="0.2375%" height="15" fill="rgb(222,56,27)" fg:x="1258" fg:w="3"/><text x="99.8541%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="99.6041%" y="517" width="0.2375%" height="15" fill="rgb(253,108,27)" fg:x="1258" fg:w="3"/><text x="99.8541%" y="527.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.6833%" y="501" width="0.1584%" height="15" fill="rgb(212,87,36)" fg:x="1259" fg:w="2"/><text x="99.9333%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.6833%" y="485" width="0.1584%" height="15" fill="rgb(247,82,36)" fg:x="1259" fg:w="2"/><text x="99.9333%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.6833%" y="469" width="0.1584%" height="15" fill="rgb(222,143,9)" fg:x="1259" fg:w="2"/><text x="99.9333%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="99.7625%" y="453" width="0.0792%" height="15" fill="rgb(238,162,48)" fg:x="1260" fg:w="1"/><text x="100.0125%" y="463.50"></text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (354 samples, 28.03%)</title><rect x="71.8923%" y="709" width="28.0285%" height="15" fill="rgb(221,59,43)" fg:x="908" fg:w="354"/><text x="72.1423%" y="719.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as crite..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (354 samples, 28.03%)</title><rect x="71.8923%" y="693" width="28.0285%" height="15" fill="rgb(205,166,41)" fg:x="908" fg:w="354"/><text x="72.1423%" y="703.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (354 samples, 28.03%)</title><rect x="71.8923%" y="677" width="28.0285%" height="15" fill="rgb(241,186,40)" fg:x="908" fg:w="354"/><text x="72.1423%" y="687.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (220 samples, 17.42%)</title><rect x="82.5020%" y="661" width="17.4188%" height="15" fill="rgb(216,119,35)" fg:x="1042" fg:w="220"/><text x="82.7520%" y="671.50">engine::session::Session::e..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (220 samples, 17.42%)</title><rect x="82.5020%" y="645" width="17.4188%" height="15" fill="rgb(208,68,38)" fg:x="1042" fg:w="220"/><text x="82.7520%" y="655.50">engine::session::Session::e..</text></g><g><title>kernel::model::EntityPtrResolver::world (6 samples, 0.48%)</title><rect x="99.4458%" y="629" width="0.4751%" height="15" fill="rgb(217,113,1)" fg:x="1256" fg:w="6"/><text x="99.6958%" y="639.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.48%)</title><rect x="99.4458%" y="613" width="0.4751%" height="15" fill="rgb(242,153,3)" fg:x="1256" fg:w="6"/><text x="99.6958%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="99.4458%" y="597" width="0.4751%" height="15" fill="rgb(229,76,35)" fg:x="1256" fg:w="6"/><text x="99.6958%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="99.8416%" y="581" width="0.0792%" height="15" fill="rgb(229,125,34)" fg:x="1261" fg:w="1"/><text x="100.0916%" y="591.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.8416%" y="565" width="0.0792%" height="15" fill="rgb(238,179,36)" fg:x="1261" fg:w="1"/><text x="100.0916%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8416%" y="549" width="0.0792%" height="15" fill="rgb(244,183,19)" fg:x="1261" fg:w="1"/><text x="100.0916%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8416%" y="533" width="0.0792%" height="15" fill="rgb(216,85,49)" fg:x="1261" fg:w="1"/><text x="100.0916%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8416%" y="517" width="0.0792%" height="15" fill="rgb(208,161,47)" fg:x="1261" fg:w="1"/><text x="100.0916%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8416%" y="501" width="0.0792%" height="15" fill="rgb(233,210,18)" fg:x="1261" fg:w="1"/><text x="100.0916%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8416%" y="485" width="0.0792%" height="15" fill="rgb(205,104,42)" fg:x="1261" fg:w="1"/><text x="100.0916%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8416%" y="469" width="0.0792%" height="15" fill="rgb(248,90,43)" fg:x="1261" fg:w="1"/><text x="100.0916%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8416%" y="453" width="0.0792%" height="15" fill="rgb(206,198,11)" fg:x="1261" fg:w="1"/><text x="100.0916%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8416%" y="437" width="0.0792%" height="15" fill="rgb(239,165,27)" fg:x="1261" fg:w="1"/><text x="100.0916%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8416%" y="421" width="0.0792%" height="15" fill="rgb(246,44,32)" fg:x="1261" fg:w="1"/><text x="100.0916%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8416%" y="405" width="0.0792%" height="15" fill="rgb(252,65,42)" fg:x="1261" fg:w="1"/><text x="100.0916%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.8416%" y="389" width="0.0792%" height="15" fill="rgb(246,197,18)" fg:x="1261" fg:w="1"/><text x="100.0916%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.8416%" y="373" width="0.0792%" height="15" fill="rgb(216,192,4)" fg:x="1261" fg:w="1"/><text x="100.0916%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.8416%" y="357" width="0.0792%" height="15" fill="rgb(208,117,10)" fg:x="1261" fg:w="1"/><text x="100.0916%" y="367.50"></text></g><g><title>all (1,263 samples, 100%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(240,61,47)" fg:x="0" fg:w="1263"/><text x="0.2500%" y="1023.50"></text></g><g><title>simple-e01ff2e0 (1,263 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(228,178,21)" fg:x="0" fg:w="1263"/><text x="0.2500%" y="1007.50">simple-e01ff2e0</text></g><g><title>_start (1,263 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(219,96,54)" fg:x="0" fg:w="1263"/><text x="0.2500%" y="991.50">_start</text></g><g><title>__libc_start_main (1,263 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(250,177,24)" fg:x="0" fg:w="1263"/><text x="0.2500%" y="975.50">__libc_start_main</text></g><g><title>main (1,263 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(242,154,46)" fg:x="0" fg:w="1263"/><text x="0.2500%" y="959.50">main</text></g><g><title>std::rt::lang_start_internal (1,263 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(226,176,29)" fg:x="0" fg:w="1263"/><text x="0.2500%" y="943.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,263 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(226,29,2)" fg:x="0" fg:w="1263"/><text x="0.2500%" y="927.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,263 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(237,104,14)" fg:x="0" fg:w="1263"/><text x="0.2500%" y="911.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,263 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(245,207,31)" fg:x="0" fg:w="1263"/><text x="0.2500%" y="895.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,263 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(229,211,45)" fg:x="0" fg:w="1263"/><text x="0.2500%" y="879.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,263 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(229,113,15)" fg:x="0" fg:w="1263"/><text x="0.2500%" y="863.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,263 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(237,147,15)" fg:x="0" fg:w="1263"/><text x="0.2500%" y="847.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,263 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(244,120,12)" fg:x="0" fg:w="1263"/><text x="0.2500%" y="831.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,263 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(205,120,12)" fg:x="0" fg:w="1263"/><text x="0.2500%" y="815.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,263 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(231,26,45)" fg:x="0" fg:w="1263"/><text x="0.2500%" y="799.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,263 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(246,98,1)" fg:x="0" fg:w="1263"/><text x="0.2500%" y="783.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,263 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(207,68,45)" fg:x="0" fg:w="1263"/><text x="0.2500%" y="767.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,263 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(231,27,38)" fg:x="0" fg:w="1263"/><text x="0.2500%" y="751.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,263 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(214,223,3)" fg:x="0" fg:w="1263"/><text x="0.2500%" y="735.50">criterion::routine::Routine::profile</text></g><g><title>&lt;pprof::criterion::PProfProfiler as criterion::profiler::Profiler&gt;::stop_profiling (1 samples, 0.08%)</title><rect x="99.9208%" y="709" width="0.0792%" height="15" fill="rgb(228,195,46)" fg:x="1262" fg:w="1"/><text x="100.1708%" y="719.50"></text></g><g><title>std::fs::DirBuilder::create_dir_all (1 samples, 0.08%)</title><rect x="99.9208%" y="693" width="0.0792%" height="15" fill="rgb(231,100,42)" fg:x="1262" fg:w="1"/><text x="100.1708%" y="703.50"></text></g><g><title>std::sys::unix::fs::DirBuilder::mkdir (1 samples, 0.08%)</title><rect x="99.9208%" y="677" width="0.0792%" height="15" fill="rgb(236,53,4)" fg:x="1262" fg:w="1"/><text x="100.1708%" y="687.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="99.9208%" y="661" width="0.0792%" height="15" fill="rgb(230,152,12)" fg:x="1262" fg:w="1"/><text x="100.1708%" y="671.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="99.9208%" y="645" width="0.0792%" height="15" fill="rgb(226,101,19)" fg:x="1262" fg:w="1"/><text x="100.1708%" y="655.50"></text></g><g><title>std::sys::unix::fs::DirBuilder::mkdir::{{closure}} (1 samples, 0.08%)</title><rect x="99.9208%" y="629" width="0.0792%" height="15" fill="rgb(250,149,32)" fg:x="1262" fg:w="1"/><text x="100.1708%" y="639.50"></text></g><g><title>mkdir (1 samples, 0.08%)</title><rect x="99.9208%" y="613" width="0.0792%" height="15" fill="rgb(232,178,12)" fg:x="1262" fg:w="1"/><text x="100.1708%" y="623.50"></text></g></svg></svg>