<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1125.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="1253"><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.0798%" y="725" width="0.0798%" height="15" fill="rgb(208,46,10)" fg:x="1" fg:w="1"/><text x="0.3298%" y="735.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.1596%" y="661" width="0.0798%" height="15" fill="rgb(254,5,31)" fg:x="2" fg:w="1"/><text x="0.4096%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.1596%" y="645" width="0.0798%" height="15" fill="rgb(222,104,33)" fg:x="2" fg:w="1"/><text x="0.4096%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="0.0000%" y="741" width="0.5587%" height="15" fill="rgb(248,49,16)" fg:x="0" fg:w="7"/><text x="0.2500%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="0.1596%" y="725" width="0.3990%" height="15" fill="rgb(232,198,41)" fg:x="2" fg:w="5"/><text x="0.4096%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (5 samples, 0.40%)</title><rect x="0.1596%" y="709" width="0.3990%" height="15" fill="rgb(214,125,3)" fg:x="2" fg:w="5"/><text x="0.4096%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="0.1596%" y="693" width="0.3990%" height="15" fill="rgb(229,220,28)" fg:x="2" fg:w="5"/><text x="0.4096%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="0.1596%" y="677" width="0.3990%" height="15" fill="rgb(222,64,37)" fg:x="2" fg:w="5"/><text x="0.4096%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="0.2394%" y="661" width="0.3192%" height="15" fill="rgb(249,184,13)" fg:x="3" fg:w="4"/><text x="0.4894%" y="671.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="0.3192%" y="645" width="0.2394%" height="15" fill="rgb(252,176,6)" fg:x="4" fg:w="3"/><text x="0.5692%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.6385%" y="661" width="0.0798%" height="15" fill="rgb(228,153,7)" fg:x="8" fg:w="1"/><text x="0.8885%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.32%)</title><rect x="0.6385%" y="725" width="0.3192%" height="15" fill="rgb(242,193,5)" fg:x="8" fg:w="4"/><text x="0.8885%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.6385%" y="709" width="0.3192%" height="15" fill="rgb(232,140,9)" fg:x="8" fg:w="4"/><text x="0.8885%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.32%)</title><rect x="0.6385%" y="693" width="0.3192%" height="15" fill="rgb(213,222,16)" fg:x="8" fg:w="4"/><text x="0.8885%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (4 samples, 0.32%)</title><rect x="0.6385%" y="677" width="0.3192%" height="15" fill="rgb(222,75,50)" fg:x="8" fg:w="4"/><text x="0.8885%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (3 samples, 0.24%)</title><rect x="0.7183%" y="661" width="0.2394%" height="15" fill="rgb(205,180,2)" fg:x="9" fg:w="3"/><text x="0.9683%" y="671.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.7981%" y="645" width="0.1596%" height="15" fill="rgb(216,34,7)" fg:x="10" fg:w="2"/><text x="1.0481%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.1971%" y="645" width="0.0798%" height="15" fill="rgb(253,16,32)" fg:x="15" fg:w="1"/><text x="1.4471%" y="655.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.2769%" y="629" width="0.1596%" height="15" fill="rgb(208,97,28)" fg:x="16" fg:w="2"/><text x="1.5269%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.4366%" y="629" width="0.0798%" height="15" fill="rgb(225,92,11)" fg:x="18" fg:w="1"/><text x="1.6866%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.5164%" y="613" width="0.0798%" height="15" fill="rgb(243,38,12)" fg:x="19" fg:w="1"/><text x="1.7664%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.5962%" y="613" width="0.0798%" height="15" fill="rgb(208,139,16)" fg:x="20" fg:w="1"/><text x="1.8462%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.5962%" y="597" width="0.0798%" height="15" fill="rgb(227,24,9)" fg:x="20" fg:w="1"/><text x="1.8462%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.7558%" y="597" width="0.0798%" height="15" fill="rgb(206,62,11)" fg:x="22" fg:w="1"/><text x="2.0058%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.7558%" y="581" width="0.0798%" height="15" fill="rgb(228,134,27)" fg:x="22" fg:w="1"/><text x="2.0058%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.72%)</title><rect x="1.1971%" y="661" width="0.7183%" height="15" fill="rgb(205,55,33)" fg:x="15" fg:w="9"/><text x="1.4471%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="1.2769%" y="645" width="0.6385%" height="15" fill="rgb(243,75,43)" fg:x="16" fg:w="8"/><text x="1.5269%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="1.5164%" y="629" width="0.3990%" height="15" fill="rgb(223,27,42)" fg:x="19" fg:w="5"/><text x="1.7664%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="1.6760%" y="613" width="0.2394%" height="15" fill="rgb(232,189,33)" fg:x="21" fg:w="3"/><text x="1.9260%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="1.8356%" y="597" width="0.0798%" height="15" fill="rgb(210,9,39)" fg:x="23" fg:w="1"/><text x="2.0856%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="1.8356%" y="581" width="0.0798%" height="15" fill="rgb(242,85,26)" fg:x="23" fg:w="1"/><text x="2.0856%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.8356%" y="565" width="0.0798%" height="15" fill="rgb(248,44,4)" fg:x="23" fg:w="1"/><text x="2.0856%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.8356%" y="549" width="0.0798%" height="15" fill="rgb(250,96,46)" fg:x="23" fg:w="1"/><text x="2.0856%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.8356%" y="533" width="0.0798%" height="15" fill="rgb(229,116,26)" fg:x="23" fg:w="1"/><text x="2.0856%" y="543.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.9952%" y="629" width="0.1596%" height="15" fill="rgb(246,94,34)" fg:x="25" fg:w="2"/><text x="2.2452%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.1548%" y="629" width="0.0798%" height="15" fill="rgb(251,73,21)" fg:x="27" fg:w="1"/><text x="2.4048%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.1548%" y="613" width="0.0798%" height="15" fill="rgb(254,121,25)" fg:x="27" fg:w="1"/><text x="2.4048%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.3144%" y="613" width="0.0798%" height="15" fill="rgb(215,161,49)" fg:x="29" fg:w="1"/><text x="2.5644%" y="623.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 1.76%)</title><rect x="1.1173%" y="677" width="1.7558%" height="15" fill="rgb(221,43,13)" fg:x="14" fg:w="22"/><text x="1.3673%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.96%)</title><rect x="1.9154%" y="661" width="0.9577%" height="15" fill="rgb(249,5,37)" fg:x="24" fg:w="12"/><text x="2.1654%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.96%)</title><rect x="1.9154%" y="645" width="0.9577%" height="15" fill="rgb(226,25,44)" fg:x="24" fg:w="12"/><text x="2.1654%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="2.2346%" y="629" width="0.6385%" height="15" fill="rgb(238,189,16)" fg:x="28" fg:w="8"/><text x="2.4846%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="2.3943%" y="613" width="0.4789%" height="15" fill="rgb(251,186,8)" fg:x="30" fg:w="6"/><text x="2.6443%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="2.7135%" y="597" width="0.1596%" height="15" fill="rgb(254,34,31)" fg:x="34" fg:w="2"/><text x="2.9635%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 2.39%)</title><rect x="0.5587%" y="741" width="2.3943%" height="15" fill="rgb(225,215,27)" fg:x="7" fg:w="30"/><text x="0.8087%" y="751.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (25 samples, 2.00%)</title><rect x="0.9577%" y="725" width="1.9952%" height="15" fill="rgb(221,192,48)" fg:x="12" fg:w="25"/><text x="1.2077%" y="735.50">c..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 1.92%)</title><rect x="1.0375%" y="709" width="1.9154%" height="15" fill="rgb(219,137,20)" fg:x="13" fg:w="24"/><text x="1.2875%" y="719.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (24 samples, 1.92%)</title><rect x="1.0375%" y="693" width="1.9154%" height="15" fill="rgb(219,84,11)" fg:x="13" fg:w="24"/><text x="1.2875%" y="703.50">c..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.8731%" y="677" width="0.0798%" height="15" fill="rgb(224,10,23)" fg:x="36" fg:w="1"/><text x="3.1231%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::begin (1 samples, 0.08%)</title><rect x="2.9529%" y="693" width="0.0798%" height="15" fill="rgb(248,22,39)" fg:x="37" fg:w="1"/><text x="3.2029%" y="703.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (3 samples, 0.24%)</title><rect x="3.0327%" y="661" width="0.2394%" height="15" fill="rgb(212,154,20)" fg:x="38" fg:w="3"/><text x="3.2827%" y="671.50"></text></g><g><title>std::sys::unix::fs::stat (2 samples, 0.16%)</title><rect x="3.1125%" y="645" width="0.1596%" height="15" fill="rgb(236,199,50)" fg:x="39" fg:w="2"/><text x="3.3625%" y="655.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.16%)</title><rect x="3.1125%" y="629" width="0.1596%" height="15" fill="rgb(211,9,17)" fg:x="39" fg:w="2"/><text x="3.3625%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.16%)</title><rect x="3.1125%" y="613" width="0.1596%" height="15" fill="rgb(243,216,36)" fg:x="39" fg:w="2"/><text x="3.3625%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (2 samples, 0.16%)</title><rect x="3.1125%" y="597" width="0.1596%" height="15" fill="rgb(250,2,10)" fg:x="39" fg:w="2"/><text x="3.3625%" y="607.50"></text></g><g><title>std::sys::unix::fs::try_statx (2 samples, 0.16%)</title><rect x="3.1125%" y="581" width="0.1596%" height="15" fill="rgb(226,50,48)" fg:x="39" fg:w="2"/><text x="3.3625%" y="591.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.16%)</title><rect x="3.1125%" y="565" width="0.1596%" height="15" fill="rgb(243,81,16)" fg:x="39" fg:w="2"/><text x="3.3625%" y="575.50"></text></g><g><title>statx (2 samples, 0.16%)</title><rect x="3.1125%" y="549" width="0.1596%" height="15" fill="rgb(250,14,2)" fg:x="39" fg:w="2"/><text x="3.3625%" y="559.50"></text></g><g><title>plugins_rune::runner::SharedRunners::add_runners_for (1 samples, 0.08%)</title><rect x="3.2721%" y="645" width="0.0798%" height="15" fill="rgb(233,135,29)" fg:x="41" fg:w="1"/><text x="3.5221%" y="655.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="3.2721%" y="629" width="0.0798%" height="15" fill="rgb(224,64,43)" fg:x="41" fg:w="1"/><text x="3.5221%" y="639.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (2 samples, 0.16%)</title><rect x="3.3520%" y="645" width="0.1596%" height="15" fill="rgb(238,84,13)" fg:x="42" fg:w="2"/><text x="3.6020%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="3.3520%" y="629" width="0.1596%" height="15" fill="rgb(253,48,26)" fg:x="42" fg:w="2"/><text x="3.6020%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.4318%" y="613" width="0.0798%" height="15" fill="rgb(205,223,31)" fg:x="43" fg:w="1"/><text x="3.6818%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.4318%" y="597" width="0.0798%" height="15" fill="rgb(221,41,32)" fg:x="43" fg:w="1"/><text x="3.6818%" y="607.50"></text></g><g><title>glob::is_dir (10 samples, 0.80%)</title><rect x="3.6712%" y="597" width="0.7981%" height="15" fill="rgb(213,158,31)" fg:x="46" fg:w="10"/><text x="3.9212%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (10 samples, 0.80%)</title><rect x="3.6712%" y="581" width="0.7981%" height="15" fill="rgb(245,126,43)" fg:x="46" fg:w="10"/><text x="3.9212%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (10 samples, 0.80%)</title><rect x="3.6712%" y="565" width="0.7981%" height="15" fill="rgb(227,7,22)" fg:x="46" fg:w="10"/><text x="3.9212%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (10 samples, 0.80%)</title><rect x="3.6712%" y="549" width="0.7981%" height="15" fill="rgb(252,90,44)" fg:x="46" fg:w="10"/><text x="3.9212%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (10 samples, 0.80%)</title><rect x="3.6712%" y="533" width="0.7981%" height="15" fill="rgb(253,91,0)" fg:x="46" fg:w="10"/><text x="3.9212%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (10 samples, 0.80%)</title><rect x="3.6712%" y="517" width="0.7981%" height="15" fill="rgb(252,175,49)" fg:x="46" fg:w="10"/><text x="3.9212%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (10 samples, 0.80%)</title><rect x="3.6712%" y="501" width="0.7981%" height="15" fill="rgb(246,150,1)" fg:x="46" fg:w="10"/><text x="3.9212%" y="511.50"></text></g><g><title>statx (10 samples, 0.80%)</title><rect x="3.6712%" y="485" width="0.7981%" height="15" fill="rgb(241,192,25)" fg:x="46" fg:w="10"/><text x="3.9212%" y="495.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 1.04%)</title><rect x="3.5116%" y="629" width="1.0375%" height="15" fill="rgb(239,187,11)" fg:x="44" fg:w="13"/><text x="3.7616%" y="639.50"></text></g><g><title>glob::fill_todo (13 samples, 1.04%)</title><rect x="3.5116%" y="613" width="1.0375%" height="15" fill="rgb(218,202,51)" fg:x="44" fg:w="13"/><text x="3.7616%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="4.4693%" y="597" width="0.0798%" height="15" fill="rgb(225,176,8)" fg:x="56" fg:w="1"/><text x="4.7193%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="4.4693%" y="581" width="0.0798%" height="15" fill="rgb(219,122,41)" fg:x="56" fg:w="1"/><text x="4.7193%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="4.4693%" y="565" width="0.0798%" height="15" fill="rgb(248,140,20)" fg:x="56" fg:w="1"/><text x="4.7193%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="4.4693%" y="549" width="0.0798%" height="15" fill="rgb(245,41,37)" fg:x="56" fg:w="1"/><text x="4.7193%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="4.4693%" y="533" width="0.0798%" height="15" fill="rgb(235,82,39)" fg:x="56" fg:w="1"/><text x="4.7193%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="4.4693%" y="517" width="0.0798%" height="15" fill="rgb(230,108,42)" fg:x="56" fg:w="1"/><text x="4.7193%" y="527.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="4.4693%" y="501" width="0.0798%" height="15" fill="rgb(215,150,50)" fg:x="56" fg:w="1"/><text x="4.7193%" y="511.50"></text></g><g><title>&lt;std::path::PathBuf as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.5491%" y="597" width="0.0798%" height="15" fill="rgb(233,212,5)" fg:x="57" fg:w="1"/><text x="4.7991%" y="607.50"></text></g><g><title>glob::Pattern::new (1 samples, 0.08%)</title><rect x="4.6289%" y="597" width="0.0798%" height="15" fill="rgb(245,80,22)" fg:x="58" fg:w="1"/><text x="4.8789%" y="607.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (19 samples, 1.52%)</title><rect x="3.2721%" y="661" width="1.5164%" height="15" fill="rgb(238,129,16)" fg:x="41" fg:w="19"/><text x="3.5221%" y="671.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (16 samples, 1.28%)</title><rect x="3.5116%" y="645" width="1.2769%" height="15" fill="rgb(240,19,0)" fg:x="44" fg:w="16"/><text x="3.7616%" y="655.50"></text></g><g><title>glob::glob (3 samples, 0.24%)</title><rect x="4.5491%" y="629" width="0.2394%" height="15" fill="rgb(232,42,35)" fg:x="57" fg:w="3"/><text x="4.7991%" y="639.50"></text></g><g><title>glob::glob_with (3 samples, 0.24%)</title><rect x="4.5491%" y="613" width="0.2394%" height="15" fill="rgb(223,130,24)" fg:x="57" fg:w="3"/><text x="4.7991%" y="623.50"></text></g><g><title>std::ffi::os_str::&lt;impl core::convert::TryFrom&lt;&amp;std::ffi::os_str::OsStr&gt; for &amp;str&gt;::try_from (1 samples, 0.08%)</title><rect x="4.7087%" y="597" width="0.0798%" height="15" fill="rgb(237,16,22)" fg:x="59" fg:w="1"/><text x="4.9587%" y="607.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_str (1 samples, 0.08%)</title><rect x="4.7087%" y="581" width="0.0798%" height="15" fill="rgb(248,192,20)" fg:x="59" fg:w="1"/><text x="4.9587%" y="591.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.08%)</title><rect x="4.7087%" y="565" width="0.0798%" height="15" fill="rgb(233,167,2)" fg:x="59" fg:w="1"/><text x="4.9587%" y="575.50"></text></g><g><title>core::str::validations::run_utf8_validation (1 samples, 0.08%)</title><rect x="4.7087%" y="549" width="0.0798%" height="15" fill="rgb(252,71,44)" fg:x="59" fg:w="1"/><text x="4.9587%" y="559.50"></text></g><g><title>&lt;plugins_core::building::actions::BidirectionalDigAction as kernel::plugins::HasActionSchema&gt;::action_schema (3 samples, 0.24%)</title><rect x="4.7885%" y="597" width="0.2394%" height="15" fill="rgb(238,37,47)" fg:x="60" fg:w="3"/><text x="5.0385%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (3 samples, 0.24%)</title><rect x="4.7885%" y="581" width="0.2394%" height="15" fill="rgb(214,202,54)" fg:x="60" fg:w="3"/><text x="5.0385%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.9481%" y="565" width="0.0798%" height="15" fill="rgb(254,165,40)" fg:x="62" fg:w="1"/><text x="5.1981%" y="575.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="5.0279%" y="597" width="0.0798%" height="15" fill="rgb(246,173,38)" fg:x="63" fg:w="1"/><text x="5.2779%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="5.0279%" y="581" width="0.0798%" height="15" fill="rgb(215,3,27)" fg:x="63" fg:w="1"/><text x="5.2779%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.0279%" y="565" width="0.0798%" height="15" fill="rgb(239,169,51)" fg:x="63" fg:w="1"/><text x="5.2779%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.0279%" y="549" width="0.0798%" height="15" fill="rgb(212,5,25)" fg:x="63" fg:w="1"/><text x="5.2779%" y="559.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="5.1077%" y="597" width="0.0798%" height="15" fill="rgb(243,45,17)" fg:x="64" fg:w="1"/><text x="5.3577%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.1077%" y="581" width="0.0798%" height="15" fill="rgb(242,97,9)" fg:x="64" fg:w="1"/><text x="5.3577%" y="591.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (6 samples, 0.48%)</title><rect x="4.7885%" y="629" width="0.4789%" height="15" fill="rgb(228,71,31)" fg:x="60" fg:w="6"/><text x="5.0385%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (6 samples, 0.48%)</title><rect x="4.7885%" y="613" width="0.4789%" height="15" fill="rgb(252,184,16)" fg:x="60" fg:w="6"/><text x="5.0385%" y="623.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="5.1875%" y="597" width="0.0798%" height="15" fill="rgb(236,169,46)" fg:x="65" fg:w="1"/><text x="5.4375%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.1875%" y="581" width="0.0798%" height="15" fill="rgb(207,17,47)" fg:x="65" fg:w="1"/><text x="5.4375%" y="591.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as replies::DeserializeTagged&gt;::from_tagged_json (1 samples, 0.08%)</title><rect x="5.2674%" y="597" width="0.0798%" height="15" fill="rgb(206,201,28)" fg:x="66" fg:w="1"/><text x="5.5174%" y="607.50"></text></g><g><title>&lt;plugins_core::carrying::actions::GiveToAction as kernel::plugins::HasActionSchema&gt;::action_schema (2 samples, 0.16%)</title><rect x="5.3472%" y="597" width="0.1596%" height="15" fill="rgb(224,184,23)" fg:x="67" fg:w="2"/><text x="5.5972%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (2 samples, 0.16%)</title><rect x="5.3472%" y="581" width="0.1596%" height="15" fill="rgb(208,139,48)" fg:x="67" fg:w="2"/><text x="5.5972%" y="591.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (4 samples, 0.32%)</title><rect x="5.2674%" y="629" width="0.3192%" height="15" fill="rgb(208,130,10)" fg:x="66" fg:w="4"/><text x="5.5174%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (4 samples, 0.32%)</title><rect x="5.2674%" y="613" width="0.3192%" height="15" fill="rgb(211,213,45)" fg:x="66" fg:w="4"/><text x="5.5174%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="5.5068%" y="597" width="0.0798%" height="15" fill="rgb(235,100,30)" fg:x="69" fg:w="1"/><text x="5.7568%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.5068%" y="581" width="0.0798%" height="15" fill="rgb(206,144,31)" fg:x="69" fg:w="1"/><text x="5.7568%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="5.6664%" y="597" width="0.0798%" height="15" fill="rgb(224,200,26)" fg:x="71" fg:w="1"/><text x="5.9164%" y="607.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (3 samples, 0.24%)</title><rect x="5.5866%" y="629" width="0.2394%" height="15" fill="rgb(247,104,53)" fg:x="70" fg:w="3"/><text x="5.8366%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (3 samples, 0.24%)</title><rect x="5.5866%" y="613" width="0.2394%" height="15" fill="rgb(220,14,17)" fg:x="70" fg:w="3"/><text x="5.8366%" y="623.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="5.7462%" y="597" width="0.0798%" height="15" fill="rgb(230,140,40)" fg:x="72" fg:w="1"/><text x="5.9962%" y="607.50"></text></g><g><title>&lt;plugins_rune::actions::RuneAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="5.8260%" y="597" width="0.0798%" height="15" fill="rgb(229,2,41)" fg:x="73" fg:w="1"/><text x="6.0760%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="5.8260%" y="581" width="0.0798%" height="15" fill="rgb(232,89,16)" fg:x="73" fg:w="1"/><text x="6.0760%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="5.8260%" y="565" width="0.0798%" height="15" fill="rgb(247,59,52)" fg:x="73" fg:w="1"/><text x="6.0760%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.8260%" y="549" width="0.0798%" height="15" fill="rgb(226,110,21)" fg:x="73" fg:w="1"/><text x="6.0760%" y="559.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="5.8260%" y="629" width="0.1596%" height="15" fill="rgb(224,176,43)" fg:x="73" fg:w="2"/><text x="6.0760%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="5.8260%" y="613" width="0.1596%" height="15" fill="rgb(221,73,6)" fg:x="73" fg:w="2"/><text x="6.0760%" y="623.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="5.9058%" y="597" width="0.0798%" height="15" fill="rgb(232,78,19)" fg:x="74" fg:w="1"/><text x="6.1558%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.9058%" y="581" width="0.0798%" height="15" fill="rgb(233,112,48)" fg:x="74" fg:w="1"/><text x="6.1558%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16 samples, 1.28%)</title><rect x="4.7885%" y="645" width="1.2769%" height="15" fill="rgb(243,131,47)" fg:x="60" fg:w="16"/><text x="5.0385%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.9856%" y="629" width="0.0798%" height="15" fill="rgb(226,51,1)" fg:x="75" fg:w="1"/><text x="6.2356%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="5.9856%" y="613" width="0.0798%" height="15" fill="rgb(247,58,7)" fg:x="75" fg:w="1"/><text x="6.2356%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (17 samples, 1.36%)</title><rect x="4.7885%" y="661" width="1.3567%" height="15" fill="rgb(209,7,32)" fg:x="60" fg:w="17"/><text x="5.0385%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="6.0654%" y="645" width="0.0798%" height="15" fill="rgb(209,39,41)" fg:x="76" fg:w="1"/><text x="6.3154%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.0654%" y="629" width="0.0798%" height="15" fill="rgb(226,182,46)" fg:x="76" fg:w="1"/><text x="6.3154%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.2251%" y="645" width="0.0798%" height="15" fill="rgb(230,219,10)" fg:x="78" fg:w="1"/><text x="6.4751%" y="655.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (44 samples, 3.51%)</title><rect x="3.0327%" y="677" width="3.5116%" height="15" fill="rgb(227,175,30)" fg:x="38" fg:w="44"/><text x="3.2827%" y="687.50">ker..</text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (5 samples, 0.40%)</title><rect x="6.1453%" y="661" width="0.3990%" height="15" fill="rgb(217,2,50)" fg:x="77" fg:w="5"/><text x="6.3953%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (3 samples, 0.24%)</title><rect x="6.3049%" y="645" width="0.2394%" height="15" fill="rgb(229,160,0)" fg:x="79" fg:w="3"/><text x="6.5549%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.4645%" y="629" width="0.0798%" height="15" fill="rgb(207,78,37)" fg:x="81" fg:w="1"/><text x="6.7145%" y="639.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::middleware (1 samples, 0.08%)</title><rect x="6.5443%" y="645" width="0.0798%" height="15" fill="rgb(225,57,0)" fg:x="82" fg:w="1"/><text x="6.7943%" y="655.50"></text></g><g><title>engine::session::Session::initialize (48 samples, 3.83%)</title><rect x="3.0327%" y="693" width="3.8308%" height="15" fill="rgb(232,154,2)" fg:x="38" fg:w="48"/><text x="3.2827%" y="703.50">engi..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (4 samples, 0.32%)</title><rect x="6.5443%" y="677" width="0.3192%" height="15" fill="rgb(241,212,25)" fg:x="82" fg:w="4"/><text x="6.7943%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="6.5443%" y="661" width="0.3192%" height="15" fill="rgb(226,69,20)" fg:x="82" fg:w="4"/><text x="6.7943%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="6.6241%" y="645" width="0.2394%" height="15" fill="rgb(247,184,54)" fg:x="83" fg:w="3"/><text x="6.8741%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="6.7039%" y="629" width="0.1596%" height="15" fill="rgb(210,145,0)" fg:x="84" fg:w="2"/><text x="6.9539%" y="639.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="6.7039%" y="613" width="0.1596%" height="15" fill="rgb(253,82,12)" fg:x="84" fg:w="2"/><text x="6.9539%" y="623.50"></text></g><g><title>&lt;plugins_core::emote::EmotePluginFactory as kernel::plugins::PluginFactory&gt;::create_plugin (1 samples, 0.08%)</title><rect x="6.9433%" y="661" width="0.0798%" height="15" fill="rgb(245,42,11)" fg:x="87" fg:w="1"/><text x="7.1933%" y="671.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (3 samples, 0.24%)</title><rect x="6.8635%" y="693" width="0.2394%" height="15" fill="rgb(219,147,32)" fg:x="86" fg:w="3"/><text x="7.1135%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="6.8635%" y="677" width="0.2394%" height="15" fill="rgb(246,12,7)" fg:x="86" fg:w="3"/><text x="7.1135%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.0231%" y="661" width="0.0798%" height="15" fill="rgb(243,50,9)" fg:x="88" fg:w="1"/><text x="7.2731%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.0231%" y="645" width="0.0798%" height="15" fill="rgb(219,149,6)" fg:x="88" fg:w="1"/><text x="7.2731%" y="655.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.0231%" y="629" width="0.0798%" height="15" fill="rgb(241,51,42)" fg:x="88" fg:w="1"/><text x="7.2731%" y="639.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (53 samples, 4.23%)</title><rect x="2.9529%" y="741" width="4.2298%" height="15" fill="rgb(226,128,27)" fg:x="37" fg:w="53"/><text x="3.2029%" y="751.50">&lt;engi..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (53 samples, 4.23%)</title><rect x="2.9529%" y="725" width="4.2298%" height="15" fill="rgb(244,144,4)" fg:x="37" fg:w="53"/><text x="3.2029%" y="735.50">engin..</text></g><g><title>engine::session::Session::new (53 samples, 4.23%)</title><rect x="2.9529%" y="709" width="4.2298%" height="15" fill="rgb(221,4,13)" fg:x="37" fg:w="53"/><text x="3.2029%" y="719.50">engin..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="7.1030%" y="693" width="0.0798%" height="15" fill="rgb(208,170,28)" fg:x="89" fg:w="1"/><text x="7.3530%" y="703.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="7.1030%" y="677" width="0.0798%" height="15" fill="rgb(226,131,13)" fg:x="89" fg:w="1"/><text x="7.3530%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="7.1828%" y="709" width="0.0798%" height="15" fill="rgb(215,72,41)" fg:x="90" fg:w="1"/><text x="7.4328%" y="719.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="7.1828%" y="693" width="0.0798%" height="15" fill="rgb(243,108,20)" fg:x="90" fg:w="1"/><text x="7.4328%" y="703.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="7.1828%" y="677" width="0.0798%" height="15" fill="rgb(230,189,17)" fg:x="90" fg:w="1"/><text x="7.4328%" y="687.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="7.1828%" y="661" width="0.0798%" height="15" fill="rgb(220,50,17)" fg:x="90" fg:w="1"/><text x="7.4328%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="7.2626%" y="677" width="0.0798%" height="15" fill="rgb(248,152,48)" fg:x="91" fg:w="1"/><text x="7.5126%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.3424%" y="645" width="0.0798%" height="15" fill="rgb(244,91,11)" fg:x="92" fg:w="1"/><text x="7.5924%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.3424%" y="629" width="0.0798%" height="15" fill="rgb(220,157,5)" fg:x="92" fg:w="1"/><text x="7.5924%" y="639.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.3424%" y="613" width="0.0798%" height="15" fill="rgb(253,137,8)" fg:x="92" fg:w="1"/><text x="7.5924%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="7.5020%" y="581" width="0.0798%" height="15" fill="rgb(217,137,51)" fg:x="94" fg:w="1"/><text x="7.7520%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="7.5020%" y="565" width="0.0798%" height="15" fill="rgb(218,209,53)" fg:x="94" fg:w="1"/><text x="7.7520%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.5020%" y="549" width="0.0798%" height="15" fill="rgb(249,137,25)" fg:x="94" fg:w="1"/><text x="7.7520%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.5818%" y="549" width="0.0798%" height="15" fill="rgb(239,155,26)" fg:x="95" fg:w="1"/><text x="7.8318%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="7.5020%" y="597" width="0.2394%" height="15" fill="rgb(227,85,46)" fg:x="94" fg:w="3"/><text x="7.7520%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="7.5818%" y="581" width="0.1596%" height="15" fill="rgb(251,107,43)" fg:x="95" fg:w="2"/><text x="7.8318%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="7.5818%" y="565" width="0.1596%" height="15" fill="rgb(234,170,33)" fg:x="95" fg:w="2"/><text x="7.8318%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.6616%" y="549" width="0.0798%" height="15" fill="rgb(206,29,35)" fg:x="96" fg:w="1"/><text x="7.9116%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="7.4222%" y="613" width="0.3990%" height="15" fill="rgb(227,138,25)" fg:x="93" fg:w="5"/><text x="7.6722%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.7414%" y="597" width="0.0798%" height="15" fill="rgb(249,131,35)" fg:x="97" fg:w="1"/><text x="7.9914%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="7.4222%" y="629" width="0.5587%" height="15" fill="rgb(239,6,40)" fg:x="93" fg:w="7"/><text x="7.6722%" y="639.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="7.8212%" y="613" width="0.1596%" height="15" fill="rgb(246,136,47)" fg:x="98" fg:w="2"/><text x="8.0712%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="7.9808%" y="629" width="0.0798%" height="15" fill="rgb(253,58,26)" fg:x="100" fg:w="1"/><text x="8.2308%" y="639.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="7.9808%" y="613" width="0.0798%" height="15" fill="rgb(237,141,10)" fg:x="100" fg:w="1"/><text x="8.2308%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="7.9808%" y="597" width="0.0798%" height="15" fill="rgb(234,156,12)" fg:x="100" fg:w="1"/><text x="8.2308%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="7.9808%" y="581" width="0.0798%" height="15" fill="rgb(243,224,36)" fg:x="100" fg:w="1"/><text x="8.2308%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.9808%" y="565" width="0.0798%" height="15" fill="rgb(205,229,51)" fg:x="100" fg:w="1"/><text x="8.2308%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.9808%" y="549" width="0.0798%" height="15" fill="rgb(223,189,4)" fg:x="100" fg:w="1"/><text x="8.2308%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.9808%" y="533" width="0.0798%" height="15" fill="rgb(249,167,54)" fg:x="100" fg:w="1"/><text x="8.2308%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.9808%" y="517" width="0.0798%" height="15" fill="rgb(218,34,28)" fg:x="100" fg:w="1"/><text x="8.2308%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="8.0607%" y="597" width="0.1596%" height="15" fill="rgb(232,109,42)" fg:x="101" fg:w="2"/><text x="8.3107%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="8.0607%" y="581" width="0.1596%" height="15" fill="rgb(248,214,46)" fg:x="101" fg:w="2"/><text x="8.3107%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="8.0607%" y="565" width="0.1596%" height="15" fill="rgb(244,216,40)" fg:x="101" fg:w="2"/><text x="8.3107%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="8.0607%" y="549" width="0.1596%" height="15" fill="rgb(231,226,31)" fg:x="101" fg:w="2"/><text x="8.3107%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.1405%" y="533" width="0.0798%" height="15" fill="rgb(238,38,43)" fg:x="102" fg:w="1"/><text x="8.3905%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.1405%" y="517" width="0.0798%" height="15" fill="rgb(208,88,43)" fg:x="102" fg:w="1"/><text x="8.3905%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="8.1405%" y="501" width="0.0798%" height="15" fill="rgb(205,136,37)" fg:x="102" fg:w="1"/><text x="8.3905%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="8.0607%" y="613" width="0.2394%" height="15" fill="rgb(237,34,14)" fg:x="101" fg:w="3"/><text x="8.3107%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.2203%" y="597" width="0.0798%" height="15" fill="rgb(236,193,44)" fg:x="103" fg:w="1"/><text x="8.4703%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.3001%" y="597" width="0.0798%" height="15" fill="rgb(231,48,10)" fg:x="104" fg:w="1"/><text x="8.5501%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.3001%" y="581" width="0.0798%" height="15" fill="rgb(213,141,34)" fg:x="104" fg:w="1"/><text x="8.5501%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.3001%" y="565" width="0.0798%" height="15" fill="rgb(249,130,34)" fg:x="104" fg:w="1"/><text x="8.5501%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="8.3001%" y="549" width="0.0798%" height="15" fill="rgb(219,42,41)" fg:x="104" fg:w="1"/><text x="8.5501%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.4597%" y="549" width="0.0798%" height="15" fill="rgb(224,100,54)" fg:x="106" fg:w="1"/><text x="8.7097%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.4597%" y="533" width="0.0798%" height="15" fill="rgb(229,200,27)" fg:x="106" fg:w="1"/><text x="8.7097%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.4597%" y="517" width="0.0798%" height="15" fill="rgb(217,118,10)" fg:x="106" fg:w="1"/><text x="8.7097%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.4597%" y="501" width="0.0798%" height="15" fill="rgb(206,22,3)" fg:x="106" fg:w="1"/><text x="8.7097%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.5395%" y="517" width="0.0798%" height="15" fill="rgb(232,163,46)" fg:x="107" fg:w="1"/><text x="8.7895%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.5395%" y="501" width="0.0798%" height="15" fill="rgb(206,95,13)" fg:x="107" fg:w="1"/><text x="8.7895%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.5395%" y="485" width="0.0798%" height="15" fill="rgb(253,154,18)" fg:x="107" fg:w="1"/><text x="8.7895%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.5395%" y="469" width="0.0798%" height="15" fill="rgb(219,32,23)" fg:x="107" fg:w="1"/><text x="8.7895%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="8.3799%" y="581" width="0.3192%" height="15" fill="rgb(230,191,45)" fg:x="105" fg:w="4"/><text x="8.6299%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="8.3799%" y="565" width="0.3192%" height="15" fill="rgb(229,64,36)" fg:x="105" fg:w="4"/><text x="8.6299%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="8.5395%" y="549" width="0.1596%" height="15" fill="rgb(205,129,25)" fg:x="107" fg:w="2"/><text x="8.7895%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="8.5395%" y="533" width="0.1596%" height="15" fill="rgb(254,112,7)" fg:x="107" fg:w="2"/><text x="8.7895%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.6193%" y="517" width="0.0798%" height="15" fill="rgb(226,53,48)" fg:x="108" fg:w="1"/><text x="8.8693%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="8.6991%" y="581" width="0.1596%" height="15" fill="rgb(214,153,38)" fg:x="109" fg:w="2"/><text x="8.9491%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.7789%" y="565" width="0.0798%" height="15" fill="rgb(243,101,7)" fg:x="110" fg:w="1"/><text x="9.0289%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.7789%" y="549" width="0.0798%" height="15" fill="rgb(240,140,22)" fg:x="110" fg:w="1"/><text x="9.0289%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.7789%" y="533" width="0.0798%" height="15" fill="rgb(235,114,2)" fg:x="110" fg:w="1"/><text x="9.0289%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.9385%" y="565" width="0.0798%" height="15" fill="rgb(242,59,12)" fg:x="112" fg:w="1"/><text x="9.1885%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.9385%" y="549" width="0.0798%" height="15" fill="rgb(252,134,9)" fg:x="112" fg:w="1"/><text x="9.1885%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.9385%" y="533" width="0.0798%" height="15" fill="rgb(236,4,44)" fg:x="112" fg:w="1"/><text x="9.1885%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="9.0184%" y="549" width="0.1596%" height="15" fill="rgb(254,172,41)" fg:x="113" fg:w="2"/><text x="9.2684%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.0982%" y="533" width="0.0798%" height="15" fill="rgb(244,63,20)" fg:x="114" fg:w="1"/><text x="9.3482%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.2578%" y="533" width="0.0798%" height="15" fill="rgb(250,73,31)" fg:x="116" fg:w="1"/><text x="9.5078%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="9.0184%" y="565" width="0.4789%" height="15" fill="rgb(241,38,36)" fg:x="113" fg:w="6"/><text x="9.2684%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="9.1780%" y="549" width="0.3192%" height="15" fill="rgb(245,211,2)" fg:x="115" fg:w="4"/><text x="9.4280%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="9.3376%" y="533" width="0.1596%" height="15" fill="rgb(206,120,28)" fg:x="117" fg:w="2"/><text x="9.5876%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.80%)</title><rect x="8.8587%" y="581" width="0.7981%" height="15" fill="rgb(211,59,34)" fg:x="111" fg:w="10"/><text x="9.1087%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="9.4972%" y="565" width="0.1596%" height="15" fill="rgb(233,168,5)" fg:x="119" fg:w="2"/><text x="9.7472%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.5770%" y="549" width="0.0798%" height="15" fill="rgb(234,33,13)" fg:x="120" fg:w="1"/><text x="9.8270%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.5770%" y="533" width="0.0798%" height="15" fill="rgb(231,150,26)" fg:x="120" fg:w="1"/><text x="9.8270%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (18 samples, 1.44%)</title><rect x="8.3799%" y="597" width="1.4366%" height="15" fill="rgb(217,191,4)" fg:x="105" fg:w="18"/><text x="8.6299%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="9.6568%" y="581" width="0.1596%" height="15" fill="rgb(246,198,38)" fg:x="121" fg:w="2"/><text x="9.9068%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.7366%" y="565" width="0.0798%" height="15" fill="rgb(245,64,37)" fg:x="122" fg:w="1"/><text x="9.9866%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.7366%" y="549" width="0.0798%" height="15" fill="rgb(250,30,36)" fg:x="122" fg:w="1"/><text x="9.9866%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (21 samples, 1.68%)</title><rect x="8.3001%" y="613" width="1.6760%" height="15" fill="rgb(217,86,53)" fg:x="104" fg:w="21"/><text x="8.5501%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="9.8164%" y="597" width="0.1596%" height="15" fill="rgb(228,157,16)" fg:x="123" fg:w="2"/><text x="10.0664%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="9.8164%" y="581" width="0.1596%" height="15" fill="rgb(217,59,31)" fg:x="123" fg:w="2"/><text x="10.0664%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="9.8164%" y="565" width="0.1596%" height="15" fill="rgb(237,138,41)" fg:x="123" fg:w="2"/><text x="10.0664%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="9.8962%" y="549" width="0.0798%" height="15" fill="rgb(227,91,49)" fg:x="124" fg:w="1"/><text x="10.1462%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="9.8962%" y="533" width="0.0798%" height="15" fill="rgb(247,21,44)" fg:x="124" fg:w="1"/><text x="10.1462%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (25 samples, 2.00%)</title><rect x="8.0607%" y="629" width="1.9952%" height="15" fill="rgb(219,210,51)" fg:x="101" fg:w="25"/><text x="8.3107%" y="639.50">&lt;..</text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.9761%" y="613" width="0.0798%" height="15" fill="rgb(209,140,6)" fg:x="125" fg:w="1"/><text x="10.2261%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.9761%" y="597" width="0.0798%" height="15" fill="rgb(221,188,24)" fg:x="125" fg:w="1"/><text x="10.2261%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.9761%" y="581" width="0.0798%" height="15" fill="rgb(232,154,20)" fg:x="125" fg:w="1"/><text x="10.2261%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.1357%" y="597" width="0.0798%" height="15" fill="rgb(244,137,50)" fg:x="127" fg:w="1"/><text x="10.3857%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.1357%" y="581" width="0.0798%" height="15" fill="rgb(225,185,43)" fg:x="127" fg:w="1"/><text x="10.3857%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="10.2155%" y="597" width="0.0798%" height="15" fill="rgb(213,205,38)" fg:x="128" fg:w="1"/><text x="10.4655%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="10.2155%" y="581" width="0.0798%" height="15" fill="rgb(236,73,12)" fg:x="128" fg:w="1"/><text x="10.4655%" y="591.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPaths as core::convert::Into&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::into (1 samples, 0.08%)</title><rect x="10.2953%" y="597" width="0.0798%" height="15" fill="rgb(235,219,13)" fg:x="129" fg:w="1"/><text x="10.5453%" y="607.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="10.2953%" y="581" width="0.0798%" height="15" fill="rgb(218,59,36)" fg:x="129" fg:w="1"/><text x="10.5453%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="10.2953%" y="565" width="0.0798%" height="15" fill="rgb(205,110,39)" fg:x="129" fg:w="1"/><text x="10.5453%" y="575.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (4 samples, 0.32%)</title><rect x="10.1357%" y="613" width="0.3192%" height="15" fill="rgb(218,206,42)" fg:x="127" fg:w="4"/><text x="10.3857%" y="623.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="10.3751%" y="597" width="0.0798%" height="15" fill="rgb(248,125,24)" fg:x="130" fg:w="1"/><text x="10.6251%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="10.3751%" y="581" width="0.0798%" height="15" fill="rgb(242,28,27)" fg:x="130" fg:w="1"/><text x="10.6251%" y="591.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="10.3751%" y="565" width="0.0798%" height="15" fill="rgb(216,228,15)" fg:x="130" fg:w="1"/><text x="10.6251%" y="575.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="10.3751%" y="549" width="0.0798%" height="15" fill="rgb(235,116,46)" fg:x="130" fg:w="1"/><text x="10.6251%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.5347%" y="581" width="0.1596%" height="15" fill="rgb(224,18,32)" fg:x="132" fg:w="2"/><text x="10.7847%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="10.6145%" y="565" width="0.0798%" height="15" fill="rgb(252,5,12)" fg:x="133" fg:w="1"/><text x="10.8645%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="10.6943%" y="581" width="0.1596%" height="15" fill="rgb(251,36,5)" fg:x="134" fg:w="2"/><text x="10.9443%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="10.6943%" y="565" width="0.1596%" height="15" fill="rgb(217,53,14)" fg:x="134" fg:w="2"/><text x="10.9443%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.6943%" y="549" width="0.1596%" height="15" fill="rgb(215,86,45)" fg:x="134" fg:w="2"/><text x="10.9443%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="10.7741%" y="533" width="0.0798%" height="15" fill="rgb(242,169,11)" fg:x="135" fg:w="1"/><text x="11.0241%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="10.9338%" y="549" width="0.0798%" height="15" fill="rgb(211,213,45)" fg:x="137" fg:w="1"/><text x="11.1838%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.0934%" y="533" width="0.0798%" height="15" fill="rgb(205,88,11)" fg:x="139" fg:w="1"/><text x="11.3434%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.1732%" y="501" width="0.0798%" height="15" fill="rgb(252,69,26)" fg:x="140" fg:w="1"/><text x="11.4232%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="11.1732%" y="485" width="0.0798%" height="15" fill="rgb(246,123,37)" fg:x="140" fg:w="1"/><text x="11.4232%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="11.1732%" y="517" width="0.1596%" height="15" fill="rgb(212,205,5)" fg:x="140" fg:w="2"/><text x="11.4232%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="11.2530%" y="501" width="0.0798%" height="15" fill="rgb(253,148,0)" fg:x="141" fg:w="1"/><text x="11.5030%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="11.2530%" y="485" width="0.0798%" height="15" fill="rgb(239,22,4)" fg:x="141" fg:w="1"/><text x="11.5030%" y="495.50"></text></g><g><title>engine::session::Session::flush (53 samples, 4.23%)</title><rect x="7.1828%" y="725" width="4.2298%" height="15" fill="rgb(226,26,53)" fg:x="90" fg:w="53"/><text x="7.4328%" y="735.50">engin..</text></g><g><title>engine::session::state::State::close (52 samples, 4.15%)</title><rect x="7.2626%" y="709" width="4.1500%" height="15" fill="rgb(225,229,45)" fg:x="91" fg:w="52"/><text x="7.5126%" y="719.50">engin..</text></g><g><title>engine::session::state::State::flush_entities (52 samples, 4.15%)</title><rect x="7.2626%" y="693" width="4.1500%" height="15" fill="rgb(220,60,37)" fg:x="91" fg:w="52"/><text x="7.5126%" y="703.50">engin..</text></g><g><title>core::iter::adapters::try_process (51 samples, 4.07%)</title><rect x="7.3424%" y="677" width="4.0702%" height="15" fill="rgb(217,180,35)" fg:x="92" fg:w="51"/><text x="7.5924%" y="687.50">core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (51 samples, 4.07%)</title><rect x="7.3424%" y="661" width="4.0702%" height="15" fill="rgb(229,7,53)" fg:x="92" fg:w="51"/><text x="7.5924%" y="671.50">&lt;all..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (50 samples, 3.99%)</title><rect x="7.4222%" y="645" width="3.9904%" height="15" fill="rgb(254,137,3)" fg:x="93" fg:w="50"/><text x="7.6722%" y="655.50">engi..</text></g><g><title>kernel::model::any_entity_changes (17 samples, 1.36%)</title><rect x="10.0559%" y="629" width="1.3567%" height="15" fill="rgb(215,140,41)" fg:x="126" fg:w="17"/><text x="10.3059%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (12 samples, 0.96%)</title><rect x="10.4549%" y="613" width="0.9577%" height="15" fill="rgb(250,80,15)" fg:x="131" fg:w="12"/><text x="10.7049%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (12 samples, 0.96%)</title><rect x="10.4549%" y="597" width="0.9577%" height="15" fill="rgb(252,191,6)" fg:x="131" fg:w="12"/><text x="10.7049%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.56%)</title><rect x="10.8540%" y="581" width="0.5587%" height="15" fill="rgb(246,217,18)" fg:x="136" fg:w="7"/><text x="11.1040%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="10.9338%" y="565" width="0.4789%" height="15" fill="rgb(223,93,7)" fg:x="137" fg:w="6"/><text x="11.1838%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="11.0136%" y="549" width="0.3990%" height="15" fill="rgb(225,55,52)" fg:x="138" fg:w="5"/><text x="11.2636%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="11.1732%" y="533" width="0.2394%" height="15" fill="rgb(240,31,24)" fg:x="140" fg:w="3"/><text x="11.4232%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.3328%" y="517" width="0.0798%" height="15" fill="rgb(205,56,52)" fg:x="142" fg:w="1"/><text x="11.5828%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="11.4126%" y="693" width="0.0798%" height="15" fill="rgb(246,146,12)" fg:x="143" fg:w="1"/><text x="11.6626%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="11.4126%" y="677" width="0.0798%" height="15" fill="rgb(239,84,36)" fg:x="143" fg:w="1"/><text x="11.6626%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="11.4126%" y="661" width="0.0798%" height="15" fill="rgb(207,41,40)" fg:x="143" fg:w="1"/><text x="11.6626%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="11.4126%" y="645" width="0.0798%" height="15" fill="rgb(241,179,25)" fg:x="143" fg:w="1"/><text x="11.6626%" y="655.50"></text></g><g><title>plugins_core::build::Build::named (3 samples, 0.24%)</title><rect x="11.4126%" y="725" width="0.2394%" height="15" fill="rgb(210,0,34)" fg:x="143" fg:w="3"/><text x="11.6626%" y="735.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (3 samples, 0.24%)</title><rect x="11.4126%" y="709" width="0.2394%" height="15" fill="rgb(225,217,29)" fg:x="143" fg:w="3"/><text x="11.6626%" y="719.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="11.4924%" y="693" width="0.1596%" height="15" fill="rgb(216,191,38)" fg:x="144" fg:w="2"/><text x="11.7424%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="11.4924%" y="677" width="0.1596%" height="15" fill="rgb(232,140,52)" fg:x="144" fg:w="2"/><text x="11.7424%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="11.4924%" y="661" width="0.1596%" height="15" fill="rgb(223,158,51)" fg:x="144" fg:w="2"/><text x="11.7424%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="11.5722%" y="645" width="0.0798%" height="15" fill="rgb(235,29,51)" fg:x="145" fg:w="1"/><text x="11.8222%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="11.5722%" y="629" width="0.0798%" height="15" fill="rgb(215,181,18)" fg:x="145" fg:w="1"/><text x="11.8222%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.5722%" y="613" width="0.0798%" height="15" fill="rgb(227,125,34)" fg:x="145" fg:w="1"/><text x="11.8222%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="11.6520%" y="709" width="0.1596%" height="15" fill="rgb(230,197,49)" fg:x="146" fg:w="2"/><text x="11.9020%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="11.6520%" y="693" width="0.1596%" height="15" fill="rgb(239,141,16)" fg:x="146" fg:w="2"/><text x="11.9020%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="11.6520%" y="677" width="0.1596%" height="15" fill="rgb(225,105,43)" fg:x="146" fg:w="2"/><text x="11.9020%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="11.6520%" y="661" width="0.1596%" height="15" fill="rgb(214,131,14)" fg:x="146" fg:w="2"/><text x="11.9020%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="11.6520%" y="645" width="0.1596%" height="15" fill="rgb(229,177,11)" fg:x="146" fg:w="2"/><text x="11.9020%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.7318%" y="629" width="0.0798%" height="15" fill="rgb(231,180,14)" fg:x="147" fg:w="1"/><text x="11.9818%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.7318%" y="613" width="0.0798%" height="15" fill="rgb(232,88,2)" fg:x="147" fg:w="1"/><text x="11.9818%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.7318%" y="597" width="0.0798%" height="15" fill="rgb(205,220,8)" fg:x="147" fg:w="1"/><text x="11.9818%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.7318%" y="581" width="0.0798%" height="15" fill="rgb(225,23,53)" fg:x="147" fg:w="1"/><text x="11.9818%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.7318%" y="565" width="0.0798%" height="15" fill="rgb(213,62,29)" fg:x="147" fg:w="1"/><text x="11.9818%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.7318%" y="549" width="0.0798%" height="15" fill="rgb(227,75,7)" fg:x="147" fg:w="1"/><text x="11.9818%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.7318%" y="533" width="0.0798%" height="15" fill="rgb(207,105,14)" fg:x="147" fg:w="1"/><text x="11.9818%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="11.7318%" y="517" width="0.0798%" height="15" fill="rgb(245,62,29)" fg:x="147" fg:w="1"/><text x="11.9818%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="11.7318%" y="501" width="0.0798%" height="15" fill="rgb(236,202,4)" fg:x="147" fg:w="1"/><text x="11.9818%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="11.7318%" y="485" width="0.0798%" height="15" fill="rgb(250,67,1)" fg:x="147" fg:w="1"/><text x="11.9818%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="11.7318%" y="469" width="0.0798%" height="15" fill="rgb(253,115,44)" fg:x="147" fg:w="1"/><text x="11.9818%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.7318%" y="453" width="0.0798%" height="15" fill="rgb(251,139,18)" fg:x="147" fg:w="1"/><text x="11.9818%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.8117%" y="709" width="0.0798%" height="15" fill="rgb(218,22,32)" fg:x="148" fg:w="1"/><text x="12.0617%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.8117%" y="693" width="0.0798%" height="15" fill="rgb(243,53,5)" fg:x="148" fg:w="1"/><text x="12.0617%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.8117%" y="677" width="0.0798%" height="15" fill="rgb(227,56,16)" fg:x="148" fg:w="1"/><text x="12.0617%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.8117%" y="661" width="0.0798%" height="15" fill="rgb(245,53,0)" fg:x="148" fg:w="1"/><text x="12.0617%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.8117%" y="645" width="0.0798%" height="15" fill="rgb(216,170,35)" fg:x="148" fg:w="1"/><text x="12.0617%" y="655.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="11.8117%" y="629" width="0.0798%" height="15" fill="rgb(211,200,8)" fg:x="148" fg:w="1"/><text x="12.0617%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="11.8117%" y="613" width="0.0798%" height="15" fill="rgb(228,204,44)" fg:x="148" fg:w="1"/><text x="12.0617%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.8915%" y="677" width="0.0798%" height="15" fill="rgb(214,121,17)" fg:x="149" fg:w="1"/><text x="12.1415%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.8915%" y="661" width="0.0798%" height="15" fill="rgb(233,64,38)" fg:x="149" fg:w="1"/><text x="12.1415%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.8915%" y="645" width="0.0798%" height="15" fill="rgb(253,54,19)" fg:x="149" fg:w="1"/><text x="12.1415%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.8915%" y="629" width="0.0798%" height="15" fill="rgb(253,94,18)" fg:x="149" fg:w="1"/><text x="12.1415%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.8915%" y="613" width="0.0798%" height="15" fill="rgb(227,57,52)" fg:x="149" fg:w="1"/><text x="12.1415%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.8915%" y="597" width="0.0798%" height="15" fill="rgb(230,228,50)" fg:x="149" fg:w="1"/><text x="12.1415%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.8915%" y="581" width="0.0798%" height="15" fill="rgb(217,205,27)" fg:x="149" fg:w="1"/><text x="12.1415%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.8915%" y="565" width="0.0798%" height="15" fill="rgb(252,71,50)" fg:x="149" fg:w="1"/><text x="12.1415%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="11.8915%" y="549" width="0.0798%" height="15" fill="rgb(209,86,4)" fg:x="149" fg:w="1"/><text x="12.1415%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="11.8915%" y="533" width="0.0798%" height="15" fill="rgb(229,94,0)" fg:x="149" fg:w="1"/><text x="12.1415%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="11.8915%" y="517" width="0.0798%" height="15" fill="rgb(252,223,21)" fg:x="149" fg:w="1"/><text x="12.1415%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="11.8915%" y="501" width="0.0798%" height="15" fill="rgb(230,210,4)" fg:x="149" fg:w="1"/><text x="12.1415%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="11.8915%" y="693" width="0.1596%" height="15" fill="rgb(240,149,38)" fg:x="149" fg:w="2"/><text x="12.1415%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.9713%" y="677" width="0.0798%" height="15" fill="rgb(254,105,20)" fg:x="150" fg:w="1"/><text x="12.2213%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.9713%" y="661" width="0.0798%" height="15" fill="rgb(253,87,46)" fg:x="150" fg:w="1"/><text x="12.2213%" y="671.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="12.0511%" y="693" width="0.0798%" height="15" fill="rgb(253,116,33)" fg:x="151" fg:w="1"/><text x="12.3011%" y="703.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="12.0511%" y="677" width="0.0798%" height="15" fill="rgb(229,198,5)" fg:x="151" fg:w="1"/><text x="12.3011%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.0511%" y="661" width="0.0798%" height="15" fill="rgb(242,38,37)" fg:x="151" fg:w="1"/><text x="12.3011%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.1309%" y="629" width="0.0798%" height="15" fill="rgb(242,69,53)" fg:x="152" fg:w="1"/><text x="12.3809%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.1309%" y="613" width="0.0798%" height="15" fill="rgb(249,80,16)" fg:x="152" fg:w="1"/><text x="12.3809%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.1309%" y="597" width="0.0798%" height="15" fill="rgb(206,128,11)" fg:x="152" fg:w="1"/><text x="12.3809%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.1309%" y="581" width="0.0798%" height="15" fill="rgb(212,35,20)" fg:x="152" fg:w="1"/><text x="12.3809%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.1309%" y="565" width="0.0798%" height="15" fill="rgb(236,79,13)" fg:x="152" fg:w="1"/><text x="12.3809%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.1309%" y="549" width="0.0798%" height="15" fill="rgb(233,123,3)" fg:x="152" fg:w="1"/><text x="12.3809%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.1309%" y="533" width="0.0798%" height="15" fill="rgb(214,93,52)" fg:x="152" fg:w="1"/><text x="12.3809%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.1309%" y="517" width="0.0798%" height="15" fill="rgb(251,37,40)" fg:x="152" fg:w="1"/><text x="12.3809%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.1309%" y="501" width="0.0798%" height="15" fill="rgb(227,80,54)" fg:x="152" fg:w="1"/><text x="12.3809%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.1309%" y="485" width="0.0798%" height="15" fill="rgb(254,48,11)" fg:x="152" fg:w="1"/><text x="12.3809%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.1309%" y="469" width="0.0798%" height="15" fill="rgb(235,193,26)" fg:x="152" fg:w="1"/><text x="12.3809%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.1309%" y="453" width="0.0798%" height="15" fill="rgb(229,99,21)" fg:x="152" fg:w="1"/><text x="12.3809%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.1309%" y="437" width="0.0798%" height="15" fill="rgb(211,140,41)" fg:x="152" fg:w="1"/><text x="12.3809%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.1309%" y="421" width="0.0798%" height="15" fill="rgb(240,227,30)" fg:x="152" fg:w="1"/><text x="12.3809%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.1309%" y="405" width="0.0798%" height="15" fill="rgb(215,224,45)" fg:x="152" fg:w="1"/><text x="12.3809%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.2107%" y="565" width="0.0798%" height="15" fill="rgb(206,123,31)" fg:x="153" fg:w="1"/><text x="12.4607%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.2107%" y="549" width="0.0798%" height="15" fill="rgb(210,138,16)" fg:x="153" fg:w="1"/><text x="12.4607%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.24%)</title><rect x="12.1309%" y="645" width="0.2394%" height="15" fill="rgb(228,57,28)" fg:x="152" fg:w="3"/><text x="12.3809%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="12.2107%" y="629" width="0.1596%" height="15" fill="rgb(242,170,10)" fg:x="153" fg:w="2"/><text x="12.4607%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="12.2107%" y="613" width="0.1596%" height="15" fill="rgb(228,214,39)" fg:x="153" fg:w="2"/><text x="12.4607%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="12.2107%" y="597" width="0.1596%" height="15" fill="rgb(218,179,33)" fg:x="153" fg:w="2"/><text x="12.4607%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="12.2107%" y="581" width="0.1596%" height="15" fill="rgb(235,193,39)" fg:x="153" fg:w="2"/><text x="12.4607%" y="591.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="12.2905%" y="565" width="0.0798%" height="15" fill="rgb(219,221,36)" fg:x="154" fg:w="1"/><text x="12.5405%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.3703%" y="645" width="0.0798%" height="15" fill="rgb(248,218,19)" fg:x="155" fg:w="1"/><text x="12.6203%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="12.4501%" y="581" width="0.0798%" height="15" fill="rgb(205,50,9)" fg:x="156" fg:w="1"/><text x="12.7001%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.4501%" y="565" width="0.0798%" height="15" fill="rgb(238,81,28)" fg:x="156" fg:w="1"/><text x="12.7001%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.4501%" y="549" width="0.0798%" height="15" fill="rgb(235,110,19)" fg:x="156" fg:w="1"/><text x="12.7001%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="12.4501%" y="533" width="0.0798%" height="15" fill="rgb(214,7,14)" fg:x="156" fg:w="1"/><text x="12.7001%" y="543.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (6 samples, 0.48%)</title><rect x="12.1309%" y="677" width="0.4789%" height="15" fill="rgb(211,77,3)" fg:x="152" fg:w="6"/><text x="12.3809%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (6 samples, 0.48%)</title><rect x="12.1309%" y="661" width="0.4789%" height="15" fill="rgb(229,5,9)" fg:x="152" fg:w="6"/><text x="12.3809%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="12.4501%" y="645" width="0.1596%" height="15" fill="rgb(225,90,11)" fg:x="156" fg:w="2"/><text x="12.7001%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="12.4501%" y="629" width="0.1596%" height="15" fill="rgb(242,56,8)" fg:x="156" fg:w="2"/><text x="12.7001%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="12.4501%" y="613" width="0.1596%" height="15" fill="rgb(249,212,39)" fg:x="156" fg:w="2"/><text x="12.7001%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="12.4501%" y="597" width="0.1596%" height="15" fill="rgb(236,90,9)" fg:x="156" fg:w="2"/><text x="12.7001%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="12.5299%" y="581" width="0.0798%" height="15" fill="rgb(206,88,35)" fg:x="157" fg:w="1"/><text x="12.7799%" y="591.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="12.6097%" y="677" width="0.0798%" height="15" fill="rgb(205,126,30)" fg:x="158" fg:w="1"/><text x="12.8597%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.6097%" y="661" width="0.0798%" height="15" fill="rgb(230,176,12)" fg:x="158" fg:w="1"/><text x="12.8597%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="12.6097%" y="645" width="0.0798%" height="15" fill="rgb(243,19,9)" fg:x="158" fg:w="1"/><text x="12.8597%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (11 samples, 0.88%)</title><rect x="11.8915%" y="709" width="0.8779%" height="15" fill="rgb(245,171,17)" fg:x="149" fg:w="11"/><text x="12.1415%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (8 samples, 0.64%)</title><rect x="12.1309%" y="693" width="0.6385%" height="15" fill="rgb(227,52,21)" fg:x="152" fg:w="8"/><text x="12.3809%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="12.6895%" y="677" width="0.0798%" height="15" fill="rgb(238,69,14)" fg:x="159" fg:w="1"/><text x="12.9395%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.6895%" y="661" width="0.0798%" height="15" fill="rgb(241,156,39)" fg:x="159" fg:w="1"/><text x="12.9395%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.6895%" y="645" width="0.0798%" height="15" fill="rgb(212,227,28)" fg:x="159" fg:w="1"/><text x="12.9395%" y="655.50"></text></g><g><title>plugins_core::build::Build::save (15 samples, 1.20%)</title><rect x="11.6520%" y="725" width="1.1971%" height="15" fill="rgb(209,118,27)" fg:x="146" fg:w="15"/><text x="11.9020%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.7694%" y="709" width="0.0798%" height="15" fill="rgb(226,102,5)" fg:x="160" fg:w="1"/><text x="13.0194%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.7694%" y="693" width="0.0798%" height="15" fill="rgb(223,34,3)" fg:x="160" fg:w="1"/><text x="13.0194%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.7694%" y="677" width="0.0798%" height="15" fill="rgb(221,81,38)" fg:x="160" fg:w="1"/><text x="13.0194%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.7694%" y="661" width="0.0798%" height="15" fill="rgb(236,219,28)" fg:x="160" fg:w="1"/><text x="13.0194%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.7694%" y="645" width="0.0798%" height="15" fill="rgb(213,200,14)" fg:x="160" fg:w="1"/><text x="13.0194%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.7694%" y="629" width="0.0798%" height="15" fill="rgb(240,33,19)" fg:x="160" fg:w="1"/><text x="13.0194%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.7694%" y="613" width="0.0798%" height="15" fill="rgb(233,113,27)" fg:x="160" fg:w="1"/><text x="13.0194%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.7694%" y="597" width="0.0798%" height="15" fill="rgb(220,221,18)" fg:x="160" fg:w="1"/><text x="13.0194%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.7694%" y="581" width="0.0798%" height="15" fill="rgb(238,92,8)" fg:x="160" fg:w="1"/><text x="13.0194%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.7694%" y="565" width="0.0798%" height="15" fill="rgb(222,164,16)" fg:x="160" fg:w="1"/><text x="13.0194%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.7694%" y="549" width="0.0798%" height="15" fill="rgb(241,119,3)" fg:x="160" fg:w="1"/><text x="13.0194%" y="559.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.7694%" y="533" width="0.0798%" height="15" fill="rgb(241,44,8)" fg:x="160" fg:w="1"/><text x="13.0194%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.7694%" y="517" width="0.0798%" height="15" fill="rgb(230,36,40)" fg:x="160" fg:w="1"/><text x="13.0194%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.8492%" y="629" width="0.0798%" height="15" fill="rgb(243,16,36)" fg:x="161" fg:w="1"/><text x="13.0992%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="12.8492%" y="661" width="0.1596%" height="15" fill="rgb(231,4,26)" fg:x="161" fg:w="2"/><text x="13.0992%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="12.8492%" y="645" width="0.1596%" height="15" fill="rgb(240,9,31)" fg:x="161" fg:w="2"/><text x="13.0992%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="12.9290%" y="629" width="0.0798%" height="15" fill="rgb(207,173,15)" fg:x="162" fg:w="1"/><text x="13.1790%" y="639.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="12.8492%" y="693" width="0.2394%" height="15" fill="rgb(224,192,53)" fg:x="161" fg:w="3"/><text x="13.0992%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="12.8492%" y="677" width="0.2394%" height="15" fill="rgb(223,67,28)" fg:x="161" fg:w="3"/><text x="13.0992%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="13.0088%" y="661" width="0.0798%" height="15" fill="rgb(211,20,47)" fg:x="163" fg:w="1"/><text x="13.2588%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="13.0088%" y="645" width="0.0798%" height="15" fill="rgb(240,228,2)" fg:x="163" fg:w="1"/><text x="13.2588%" y="655.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="13.0088%" y="629" width="0.0798%" height="15" fill="rgb(248,151,12)" fg:x="163" fg:w="1"/><text x="13.2588%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="13.0886%" y="693" width="0.0798%" height="15" fill="rgb(244,8,39)" fg:x="164" fg:w="1"/><text x="13.3386%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="13.0886%" y="677" width="0.0798%" height="15" fill="rgb(222,26,8)" fg:x="164" fg:w="1"/><text x="13.3386%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.0886%" y="661" width="0.0798%" height="15" fill="rgb(213,106,44)" fg:x="164" fg:w="1"/><text x="13.3386%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="13.0886%" y="645" width="0.0798%" height="15" fill="rgb(214,129,20)" fg:x="164" fg:w="1"/><text x="13.3386%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="13.0886%" y="629" width="0.0798%" height="15" fill="rgb(212,32,13)" fg:x="164" fg:w="1"/><text x="13.3386%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.0886%" y="613" width="0.0798%" height="15" fill="rgb(208,168,33)" fg:x="164" fg:w="1"/><text x="13.3386%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.0886%" y="597" width="0.0798%" height="15" fill="rgb(231,207,8)" fg:x="164" fg:w="1"/><text x="13.3386%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.2482%" y="613" width="0.0798%" height="15" fill="rgb(235,219,23)" fg:x="166" fg:w="1"/><text x="13.4982%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.2482%" y="597" width="0.0798%" height="15" fill="rgb(226,216,26)" fg:x="166" fg:w="1"/><text x="13.4982%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.2482%" y="581" width="0.0798%" height="15" fill="rgb(239,137,16)" fg:x="166" fg:w="1"/><text x="13.4982%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.2482%" y="565" width="0.0798%" height="15" fill="rgb(207,12,36)" fg:x="166" fg:w="1"/><text x="13.4982%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.2482%" y="549" width="0.0798%" height="15" fill="rgb(210,214,24)" fg:x="166" fg:w="1"/><text x="13.4982%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.2482%" y="533" width="0.0798%" height="15" fill="rgb(206,56,30)" fg:x="166" fg:w="1"/><text x="13.4982%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.2482%" y="517" width="0.0798%" height="15" fill="rgb(228,143,26)" fg:x="166" fg:w="1"/><text x="13.4982%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.2482%" y="501" width="0.0798%" height="15" fill="rgb(216,218,46)" fg:x="166" fg:w="1"/><text x="13.4982%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="13.2482%" y="485" width="0.0798%" height="15" fill="rgb(206,6,19)" fg:x="166" fg:w="1"/><text x="13.4982%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="13.2482%" y="469" width="0.0798%" height="15" fill="rgb(239,177,51)" fg:x="166" fg:w="1"/><text x="13.4982%" y="479.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="13.1684%" y="645" width="0.2394%" height="15" fill="rgb(216,55,25)" fg:x="165" fg:w="3"/><text x="13.4184%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="13.1684%" y="629" width="0.2394%" height="15" fill="rgb(231,163,29)" fg:x="165" fg:w="3"/><text x="13.4184%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.3280%" y="613" width="0.0798%" height="15" fill="rgb(232,149,50)" fg:x="167" fg:w="1"/><text x="13.5780%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.3280%" y="597" width="0.0798%" height="15" fill="rgb(223,142,48)" fg:x="167" fg:w="1"/><text x="13.5780%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.3280%" y="581" width="0.0798%" height="15" fill="rgb(245,83,23)" fg:x="167" fg:w="1"/><text x="13.5780%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.3280%" y="565" width="0.0798%" height="15" fill="rgb(224,63,2)" fg:x="167" fg:w="1"/><text x="13.5780%" y="575.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (4 samples, 0.32%)</title><rect x="13.1684%" y="693" width="0.3192%" height="15" fill="rgb(218,65,53)" fg:x="165" fg:w="4"/><text x="13.4184%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.32%)</title><rect x="13.1684%" y="677" width="0.3192%" height="15" fill="rgb(221,84,29)" fg:x="165" fg:w="4"/><text x="13.4184%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="13.1684%" y="661" width="0.3192%" height="15" fill="rgb(234,0,32)" fg:x="165" fg:w="4"/><text x="13.4184%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="13.4078%" y="645" width="0.0798%" height="15" fill="rgb(206,20,16)" fg:x="168" fg:w="1"/><text x="13.6578%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="13.4078%" y="629" width="0.0798%" height="15" fill="rgb(244,172,18)" fg:x="168" fg:w="1"/><text x="13.6578%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.4078%" y="613" width="0.0798%" height="15" fill="rgb(254,133,1)" fg:x="168" fg:w="1"/><text x="13.6578%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.4078%" y="597" width="0.0798%" height="15" fill="rgb(222,206,41)" fg:x="168" fg:w="1"/><text x="13.6578%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.4078%" y="581" width="0.0798%" height="15" fill="rgb(212,3,42)" fg:x="168" fg:w="1"/><text x="13.6578%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.4078%" y="565" width="0.0798%" height="15" fill="rgb(241,11,4)" fg:x="168" fg:w="1"/><text x="13.6578%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.4078%" y="549" width="0.0798%" height="15" fill="rgb(205,19,26)" fg:x="168" fg:w="1"/><text x="13.6578%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.4078%" y="533" width="0.0798%" height="15" fill="rgb(210,179,32)" fg:x="168" fg:w="1"/><text x="13.6578%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.4078%" y="517" width="0.0798%" height="15" fill="rgb(227,116,49)" fg:x="168" fg:w="1"/><text x="13.6578%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.4078%" y="501" width="0.0798%" height="15" fill="rgb(211,146,6)" fg:x="168" fg:w="1"/><text x="13.6578%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.4078%" y="485" width="0.0798%" height="15" fill="rgb(219,44,39)" fg:x="168" fg:w="1"/><text x="13.6578%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.4078%" y="469" width="0.0798%" height="15" fill="rgb(234,128,11)" fg:x="168" fg:w="1"/><text x="13.6578%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.4078%" y="453" width="0.0798%" height="15" fill="rgb(220,183,53)" fg:x="168" fg:w="1"/><text x="13.6578%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.4078%" y="437" width="0.0798%" height="15" fill="rgb(213,219,32)" fg:x="168" fg:w="1"/><text x="13.6578%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.4078%" y="421" width="0.0798%" height="15" fill="rgb(232,156,16)" fg:x="168" fg:w="1"/><text x="13.6578%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.4078%" y="405" width="0.0798%" height="15" fill="rgb(246,135,34)" fg:x="168" fg:w="1"/><text x="13.6578%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.4078%" y="389" width="0.0798%" height="15" fill="rgb(241,99,0)" fg:x="168" fg:w="1"/><text x="13.6578%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.4876%" y="629" width="0.0798%" height="15" fill="rgb(222,103,45)" fg:x="169" fg:w="1"/><text x="13.7376%" y="639.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.4876%" y="613" width="0.0798%" height="15" fill="rgb(212,57,4)" fg:x="169" fg:w="1"/><text x="13.7376%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.4876%" y="597" width="0.0798%" height="15" fill="rgb(215,68,47)" fg:x="169" fg:w="1"/><text x="13.7376%" y="607.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (10 samples, 0.80%)</title><rect x="12.8492%" y="725" width="0.7981%" height="15" fill="rgb(230,84,2)" fg:x="161" fg:w="10"/><text x="13.0992%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (10 samples, 0.80%)</title><rect x="12.8492%" y="709" width="0.7981%" height="15" fill="rgb(220,102,14)" fg:x="161" fg:w="10"/><text x="13.0992%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (2 samples, 0.16%)</title><rect x="13.4876%" y="693" width="0.1596%" height="15" fill="rgb(240,10,32)" fg:x="169" fg:w="2"/><text x="13.7376%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="13.4876%" y="677" width="0.1596%" height="15" fill="rgb(215,47,27)" fg:x="169" fg:w="2"/><text x="13.7376%" y="687.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (2 samples, 0.16%)</title><rect x="13.4876%" y="661" width="0.1596%" height="15" fill="rgb(233,188,43)" fg:x="169" fg:w="2"/><text x="13.7376%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="13.4876%" y="645" width="0.1596%" height="15" fill="rgb(253,190,1)" fg:x="169" fg:w="2"/><text x="13.7376%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="13.5674%" y="629" width="0.0798%" height="15" fill="rgb(206,114,52)" fg:x="170" fg:w="1"/><text x="13.8174%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.5674%" y="613" width="0.0798%" height="15" fill="rgb(233,120,37)" fg:x="170" fg:w="1"/><text x="13.8174%" y="623.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="13.5674%" y="597" width="0.0798%" height="15" fill="rgb(214,52,39)" fg:x="170" fg:w="1"/><text x="13.8174%" y="607.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="13.5674%" y="581" width="0.0798%" height="15" fill="rgb(223,80,29)" fg:x="170" fg:w="1"/><text x="13.8174%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="13.7271%" y="709" width="0.0798%" height="15" fill="rgb(230,101,40)" fg:x="172" fg:w="1"/><text x="13.9771%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.7271%" y="693" width="0.0798%" height="15" fill="rgb(219,211,8)" fg:x="172" fg:w="1"/><text x="13.9771%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.7271%" y="677" width="0.0798%" height="15" fill="rgb(252,126,28)" fg:x="172" fg:w="1"/><text x="13.9771%" y="687.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="13.8069%" y="709" width="0.0798%" height="15" fill="rgb(215,56,38)" fg:x="173" fg:w="1"/><text x="14.0569%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="13.8069%" y="693" width="0.0798%" height="15" fill="rgb(249,55,44)" fg:x="173" fg:w="1"/><text x="14.0569%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="13.8069%" y="677" width="0.0798%" height="15" fill="rgb(220,221,32)" fg:x="173" fg:w="1"/><text x="14.0569%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="13.8069%" y="661" width="0.0798%" height="15" fill="rgb(212,216,41)" fg:x="173" fg:w="1"/><text x="14.0569%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="13.8069%" y="645" width="0.0798%" height="15" fill="rgb(228,213,43)" fg:x="173" fg:w="1"/><text x="14.0569%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="13.8069%" y="629" width="0.0798%" height="15" fill="rgb(211,31,26)" fg:x="173" fg:w="1"/><text x="14.0569%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="13.8069%" y="613" width="0.0798%" height="15" fill="rgb(229,202,19)" fg:x="173" fg:w="1"/><text x="14.0569%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.8069%" y="597" width="0.0798%" height="15" fill="rgb(229,105,46)" fg:x="173" fg:w="1"/><text x="14.0569%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.8069%" y="581" width="0.0798%" height="15" fill="rgb(235,108,1)" fg:x="173" fg:w="1"/><text x="14.0569%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.8069%" y="565" width="0.0798%" height="15" fill="rgb(245,111,35)" fg:x="173" fg:w="1"/><text x="14.0569%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.8069%" y="549" width="0.0798%" height="15" fill="rgb(219,185,31)" fg:x="173" fg:w="1"/><text x="14.0569%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.8069%" y="533" width="0.0798%" height="15" fill="rgb(214,4,43)" fg:x="173" fg:w="1"/><text x="14.0569%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.8069%" y="517" width="0.0798%" height="15" fill="rgb(235,227,40)" fg:x="173" fg:w="1"/><text x="14.0569%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.8069%" y="501" width="0.0798%" height="15" fill="rgb(230,88,30)" fg:x="173" fg:w="1"/><text x="14.0569%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="13.8069%" y="485" width="0.0798%" height="15" fill="rgb(216,217,1)" fg:x="173" fg:w="1"/><text x="14.0569%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="13.8069%" y="469" width="0.0798%" height="15" fill="rgb(248,139,50)" fg:x="173" fg:w="1"/><text x="14.0569%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::model::EntityPtr&gt;&gt; (1 samples, 0.08%)</title><rect x="13.8867%" y="709" width="0.0798%" height="15" fill="rgb(233,1,21)" fg:x="174" fg:w="1"/><text x="14.1367%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="13.9665%" y="645" width="0.0798%" height="15" fill="rgb(215,183,12)" fg:x="175" fg:w="1"/><text x="14.2165%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="13.9665%" y="629" width="0.0798%" height="15" fill="rgb(229,104,42)" fg:x="175" fg:w="1"/><text x="14.2165%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="13.9665%" y="613" width="0.0798%" height="15" fill="rgb(243,34,48)" fg:x="175" fg:w="1"/><text x="14.2165%" y="623.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="13.9665%" y="597" width="0.0798%" height="15" fill="rgb(239,11,44)" fg:x="175" fg:w="1"/><text x="14.2165%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.0463%" y="597" width="0.0798%" height="15" fill="rgb(231,98,35)" fg:x="176" fg:w="1"/><text x="14.2963%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.0463%" y="581" width="0.0798%" height="15" fill="rgb(233,28,25)" fg:x="176" fg:w="1"/><text x="14.2963%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.0463%" y="565" width="0.0798%" height="15" fill="rgb(234,123,11)" fg:x="176" fg:w="1"/><text x="14.2963%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.0463%" y="549" width="0.0798%" height="15" fill="rgb(220,69,3)" fg:x="176" fg:w="1"/><text x="14.2963%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.0463%" y="533" width="0.0798%" height="15" fill="rgb(214,64,36)" fg:x="176" fg:w="1"/><text x="14.2963%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="14.0463%" y="517" width="0.0798%" height="15" fill="rgb(211,138,32)" fg:x="176" fg:w="1"/><text x="14.2963%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="14.0463%" y="501" width="0.0798%" height="15" fill="rgb(213,118,47)" fg:x="176" fg:w="1"/><text x="14.2963%" y="511.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="14.0463%" y="645" width="0.1596%" height="15" fill="rgb(243,124,49)" fg:x="176" fg:w="2"/><text x="14.2963%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="14.0463%" y="629" width="0.1596%" height="15" fill="rgb(221,30,28)" fg:x="176" fg:w="2"/><text x="14.2963%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (2 samples, 0.16%)</title><rect x="14.0463%" y="613" width="0.1596%" height="15" fill="rgb(246,37,13)" fg:x="176" fg:w="2"/><text x="14.2963%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="14.1261%" y="597" width="0.0798%" height="15" fill="rgb(249,66,14)" fg:x="177" fg:w="1"/><text x="14.3761%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="14.1261%" y="581" width="0.0798%" height="15" fill="rgb(213,166,5)" fg:x="177" fg:w="1"/><text x="14.3761%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.1261%" y="565" width="0.0798%" height="15" fill="rgb(221,66,24)" fg:x="177" fg:w="1"/><text x="14.3761%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.2857%" y="517" width="0.0798%" height="15" fill="rgb(210,132,17)" fg:x="179" fg:w="1"/><text x="14.5357%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="14.2857%" y="533" width="0.1596%" height="15" fill="rgb(243,202,5)" fg:x="179" fg:w="2"/><text x="14.5357%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.3655%" y="517" width="0.0798%" height="15" fill="rgb(233,70,48)" fg:x="180" fg:w="1"/><text x="14.6155%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="14.2857%" y="549" width="0.2394%" height="15" fill="rgb(238,41,26)" fg:x="179" fg:w="3"/><text x="14.5357%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.4453%" y="533" width="0.0798%" height="15" fill="rgb(241,19,31)" fg:x="181" fg:w="1"/><text x="14.6953%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.4453%" y="517" width="0.0798%" height="15" fill="rgb(214,76,10)" fg:x="181" fg:w="1"/><text x="14.6953%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.7646%" y="517" width="0.0798%" height="15" fill="rgb(254,202,22)" fg:x="185" fg:w="1"/><text x="15.0146%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.64%)</title><rect x="14.2857%" y="565" width="0.6385%" height="15" fill="rgb(214,72,24)" fg:x="179" fg:w="8"/><text x="14.5357%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (5 samples, 0.40%)</title><rect x="14.5251%" y="549" width="0.3990%" height="15" fill="rgb(221,92,46)" fg:x="182" fg:w="5"/><text x="14.7751%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="14.6049%" y="533" width="0.3192%" height="15" fill="rgb(246,13,50)" fg:x="183" fg:w="4"/><text x="14.8549%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.8444%" y="517" width="0.0798%" height="15" fill="rgb(240,165,38)" fg:x="186" fg:w="1"/><text x="15.0944%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.9242%" y="565" width="0.0798%" height="15" fill="rgb(241,24,51)" fg:x="187" fg:w="1"/><text x="15.1742%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.80%)</title><rect x="14.2857%" y="581" width="0.7981%" height="15" fill="rgb(227,51,44)" fg:x="179" fg:w="10"/><text x="14.5357%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.0040%" y="565" width="0.0798%" height="15" fill="rgb(231,121,3)" fg:x="188" fg:w="1"/><text x="15.2540%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.0040%" y="549" width="0.0798%" height="15" fill="rgb(245,3,41)" fg:x="188" fg:w="1"/><text x="15.2540%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.96%)</title><rect x="14.2857%" y="597" width="0.9577%" height="15" fill="rgb(214,13,26)" fg:x="179" fg:w="12"/><text x="14.5357%" y="607.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="15.0838%" y="581" width="0.1596%" height="15" fill="rgb(252,75,11)" fg:x="189" fg:w="2"/><text x="15.3338%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="15.2434%" y="565" width="0.3192%" height="15" fill="rgb(218,226,17)" fg:x="191" fg:w="4"/><text x="15.4934%" y="575.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="15.3232%" y="549" width="0.2394%" height="15" fill="rgb(248,89,38)" fg:x="192" fg:w="3"/><text x="15.5732%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="15.4030%" y="533" width="0.1596%" height="15" fill="rgb(237,73,46)" fg:x="193" fg:w="2"/><text x="15.6530%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="15.4030%" y="517" width="0.1596%" height="15" fill="rgb(242,78,33)" fg:x="193" fg:w="2"/><text x="15.6530%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="15.4828%" y="501" width="0.0798%" height="15" fill="rgb(235,60,3)" fg:x="194" fg:w="1"/><text x="15.7328%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="15.4828%" y="485" width="0.0798%" height="15" fill="rgb(216,172,19)" fg:x="194" fg:w="1"/><text x="15.7328%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="15.4828%" y="469" width="0.0798%" height="15" fill="rgb(227,6,42)" fg:x="194" fg:w="1"/><text x="15.7328%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (5 samples, 0.40%)</title><rect x="15.2434%" y="581" width="0.3990%" height="15" fill="rgb(223,207,42)" fg:x="191" fg:w="5"/><text x="15.4934%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.5626%" y="565" width="0.0798%" height="15" fill="rgb(246,138,30)" fg:x="195" fg:w="1"/><text x="15.8126%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="15.5626%" y="549" width="0.0798%" height="15" fill="rgb(251,199,47)" fg:x="195" fg:w="1"/><text x="15.8126%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.5626%" y="533" width="0.0798%" height="15" fill="rgb(228,218,44)" fg:x="195" fg:w="1"/><text x="15.8126%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.40%)</title><rect x="15.6425%" y="565" width="0.3990%" height="15" fill="rgb(220,68,6)" fg:x="196" fg:w="5"/><text x="15.8925%" y="575.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.40%)</title><rect x="15.6425%" y="549" width="0.3990%" height="15" fill="rgb(240,60,26)" fg:x="196" fg:w="5"/><text x="15.8925%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="15.8021%" y="533" width="0.2394%" height="15" fill="rgb(211,200,19)" fg:x="198" fg:w="3"/><text x="16.0521%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="15.8819%" y="517" width="0.1596%" height="15" fill="rgb(242,145,30)" fg:x="199" fg:w="2"/><text x="16.1319%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="15.8819%" y="501" width="0.1596%" height="15" fill="rgb(225,64,13)" fg:x="199" fg:w="2"/><text x="16.1319%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="15.8819%" y="485" width="0.1596%" height="15" fill="rgb(218,103,35)" fg:x="199" fg:w="2"/><text x="16.1319%" y="495.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="15.8819%" y="469" width="0.1596%" height="15" fill="rgb(216,93,46)" fg:x="199" fg:w="2"/><text x="16.1319%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="16.1213%" y="549" width="0.0798%" height="15" fill="rgb(225,159,27)" fg:x="202" fg:w="1"/><text x="16.3713%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="16.2011%" y="549" width="0.1596%" height="15" fill="rgb(225,204,11)" fg:x="203" fg:w="2"/><text x="16.4511%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="16.2809%" y="533" width="0.0798%" height="15" fill="rgb(205,56,4)" fg:x="204" fg:w="1"/><text x="16.5309%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="16.2809%" y="517" width="0.0798%" height="15" fill="rgb(206,6,35)" fg:x="204" fg:w="1"/><text x="16.5309%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="16.2809%" y="501" width="0.0798%" height="15" fill="rgb(247,73,52)" fg:x="204" fg:w="1"/><text x="16.5309%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="16.3607%" y="533" width="0.2394%" height="15" fill="rgb(246,97,4)" fg:x="205" fg:w="3"/><text x="16.6107%" y="543.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="16.3607%" y="517" width="0.2394%" height="15" fill="rgb(212,37,15)" fg:x="205" fg:w="3"/><text x="16.6107%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="16.3607%" y="501" width="0.2394%" height="15" fill="rgb(208,130,40)" fg:x="205" fg:w="3"/><text x="16.6107%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="16.3607%" y="485" width="0.2394%" height="15" fill="rgb(236,55,29)" fg:x="205" fg:w="3"/><text x="16.6107%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="16.3607%" y="469" width="0.2394%" height="15" fill="rgb(209,156,45)" fg:x="205" fg:w="3"/><text x="16.6107%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="16.3607%" y="453" width="0.2394%" height="15" fill="rgb(249,107,4)" fg:x="205" fg:w="3"/><text x="16.6107%" y="463.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="16.3607%" y="437" width="0.2394%" height="15" fill="rgb(227,7,13)" fg:x="205" fg:w="3"/><text x="16.6107%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="16.6002%" y="517" width="0.1596%" height="15" fill="rgb(250,129,14)" fg:x="208" fg:w="2"/><text x="16.8502%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="16.6800%" y="501" width="0.0798%" height="15" fill="rgb(229,92,13)" fg:x="209" fg:w="1"/><text x="16.9300%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="16.6800%" y="485" width="0.0798%" height="15" fill="rgb(245,98,39)" fg:x="209" fg:w="1"/><text x="16.9300%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="16.6800%" y="469" width="0.0798%" height="15" fill="rgb(234,135,48)" fg:x="209" fg:w="1"/><text x="16.9300%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="16.6800%" y="453" width="0.0798%" height="15" fill="rgb(230,98,28)" fg:x="209" fg:w="1"/><text x="16.9300%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="16.6800%" y="437" width="0.0798%" height="15" fill="rgb(223,121,0)" fg:x="209" fg:w="1"/><text x="16.9300%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="16.6800%" y="421" width="0.0798%" height="15" fill="rgb(234,173,33)" fg:x="209" fg:w="1"/><text x="16.9300%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="16.3607%" y="549" width="0.4789%" height="15" fill="rgb(245,47,8)" fg:x="205" fg:w="6"/><text x="16.6107%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="16.6002%" y="533" width="0.2394%" height="15" fill="rgb(205,17,20)" fg:x="208" fg:w="3"/><text x="16.8502%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="16.7598%" y="517" width="0.0798%" height="15" fill="rgb(232,151,16)" fg:x="210" fg:w="1"/><text x="17.0098%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="16.7598%" y="501" width="0.0798%" height="15" fill="rgb(208,30,32)" fg:x="210" fg:w="1"/><text x="17.0098%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="16.7598%" y="485" width="0.0798%" height="15" fill="rgb(254,26,3)" fg:x="210" fg:w="1"/><text x="17.0098%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="16.7598%" y="469" width="0.0798%" height="15" fill="rgb(240,177,30)" fg:x="210" fg:w="1"/><text x="17.0098%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.96%)</title><rect x="16.0415%" y="565" width="0.9577%" height="15" fill="rgb(248,76,44)" fg:x="201" fg:w="12"/><text x="16.2915%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="16.8396%" y="549" width="0.1596%" height="15" fill="rgb(241,186,54)" fg:x="211" fg:w="2"/><text x="17.0896%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="16.9194%" y="533" width="0.0798%" height="15" fill="rgb(249,171,29)" fg:x="212" fg:w="1"/><text x="17.1694%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (23 samples, 1.84%)</title><rect x="15.2434%" y="597" width="1.8356%" height="15" fill="rgb(237,151,44)" fg:x="191" fg:w="23"/><text x="15.4934%" y="607.50">&lt;..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (18 samples, 1.44%)</title><rect x="15.6425%" y="581" width="1.4366%" height="15" fill="rgb(228,174,30)" fg:x="196" fg:w="18"/><text x="15.8925%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="16.9992%" y="565" width="0.0798%" height="15" fill="rgb(252,14,37)" fg:x="213" fg:w="1"/><text x="17.2492%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="16.9992%" y="549" width="0.0798%" height="15" fill="rgb(207,111,40)" fg:x="213" fg:w="1"/><text x="17.2492%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="16.9992%" y="533" width="0.0798%" height="15" fill="rgb(248,171,54)" fg:x="213" fg:w="1"/><text x="17.2492%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="17.0790%" y="565" width="0.0798%" height="15" fill="rgb(211,127,2)" fg:x="214" fg:w="1"/><text x="17.3290%" y="575.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (2 samples, 0.16%)</title><rect x="17.1588%" y="565" width="0.1596%" height="15" fill="rgb(236,87,47)" fg:x="215" fg:w="2"/><text x="17.4088%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="17.1588%" y="549" width="0.1596%" height="15" fill="rgb(223,190,45)" fg:x="215" fg:w="2"/><text x="17.4088%" y="559.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="17.1588%" y="533" width="0.1596%" height="15" fill="rgb(215,5,16)" fg:x="215" fg:w="2"/><text x="17.4088%" y="543.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="17.2386%" y="517" width="0.0798%" height="15" fill="rgb(252,82,33)" fg:x="216" fg:w="1"/><text x="17.4886%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="17.2386%" y="501" width="0.0798%" height="15" fill="rgb(247,213,44)" fg:x="216" fg:w="1"/><text x="17.4886%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.2386%" y="485" width="0.0798%" height="15" fill="rgb(205,196,44)" fg:x="216" fg:w="1"/><text x="17.4886%" y="495.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (4 samples, 0.32%)</title><rect x="17.0790%" y="581" width="0.3192%" height="15" fill="rgb(237,96,54)" fg:x="214" fg:w="4"/><text x="17.3290%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;treediff::tools::record::Recorder&lt;treediff::value::shared::Key,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="17.3184%" y="565" width="0.0798%" height="15" fill="rgb(230,113,34)" fg:x="217" fg:w="1"/><text x="17.5684%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="17.4781%" y="549" width="0.1596%" height="15" fill="rgb(221,224,12)" fg:x="219" fg:w="2"/><text x="17.7281%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="17.5579%" y="533" width="0.0798%" height="15" fill="rgb(219,112,44)" fg:x="220" fg:w="1"/><text x="17.8079%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="17.6377%" y="549" width="0.0798%" height="15" fill="rgb(210,31,13)" fg:x="221" fg:w="1"/><text x="17.8877%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.6377%" y="533" width="0.0798%" height="15" fill="rgb(230,25,16)" fg:x="221" fg:w="1"/><text x="17.8877%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.6377%" y="517" width="0.0798%" height="15" fill="rgb(246,108,53)" fg:x="221" fg:w="1"/><text x="17.8877%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.7175%" y="501" width="0.0798%" height="15" fill="rgb(241,172,50)" fg:x="222" fg:w="1"/><text x="17.9675%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.7175%" y="485" width="0.0798%" height="15" fill="rgb(235,141,10)" fg:x="222" fg:w="1"/><text x="17.9675%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="17.7973%" y="501" width="0.0798%" height="15" fill="rgb(220,174,43)" fg:x="223" fg:w="1"/><text x="18.0473%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="17.7973%" y="485" width="0.0798%" height="15" fill="rgb(215,181,40)" fg:x="223" fg:w="1"/><text x="18.0473%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="17.7973%" y="469" width="0.0798%" height="15" fill="rgb(230,97,2)" fg:x="223" fg:w="1"/><text x="18.0473%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="17.7973%" y="453" width="0.0798%" height="15" fill="rgb(211,25,27)" fg:x="223" fg:w="1"/><text x="18.0473%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="17.7973%" y="437" width="0.0798%" height="15" fill="rgb(230,87,26)" fg:x="223" fg:w="1"/><text x="18.0473%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="17.7973%" y="421" width="0.0798%" height="15" fill="rgb(227,160,17)" fg:x="223" fg:w="1"/><text x="18.0473%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="17.7973%" y="405" width="0.0798%" height="15" fill="rgb(244,85,34)" fg:x="223" fg:w="1"/><text x="18.0473%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.7973%" y="389" width="0.0798%" height="15" fill="rgb(207,70,0)" fg:x="223" fg:w="1"/><text x="18.0473%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="17.9569%" y="485" width="0.0798%" height="15" fill="rgb(223,129,7)" fg:x="225" fg:w="1"/><text x="18.2069%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.1165%" y="469" width="0.0798%" height="15" fill="rgb(246,105,7)" fg:x="227" fg:w="1"/><text x="18.3665%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.1165%" y="453" width="0.0798%" height="15" fill="rgb(215,154,42)" fg:x="227" fg:w="1"/><text x="18.3665%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.56%)</title><rect x="17.7175%" y="533" width="0.5587%" height="15" fill="rgb(220,215,30)" fg:x="222" fg:w="7"/><text x="17.9675%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.56%)</title><rect x="17.7175%" y="517" width="0.5587%" height="15" fill="rgb(228,81,51)" fg:x="222" fg:w="7"/><text x="17.9675%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="17.8771%" y="501" width="0.3990%" height="15" fill="rgb(247,71,54)" fg:x="224" fg:w="5"/><text x="18.1271%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="18.0367%" y="485" width="0.2394%" height="15" fill="rgb(234,176,34)" fg:x="226" fg:w="3"/><text x="18.2867%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="18.1963%" y="469" width="0.0798%" height="15" fill="rgb(241,103,54)" fg:x="228" fg:w="1"/><text x="18.4463%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="18.1963%" y="453" width="0.0798%" height="15" fill="rgb(228,22,34)" fg:x="228" fg:w="1"/><text x="18.4463%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.1963%" y="437" width="0.0798%" height="15" fill="rgb(241,179,48)" fg:x="228" fg:w="1"/><text x="18.4463%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.1963%" y="421" width="0.0798%" height="15" fill="rgb(235,167,37)" fg:x="228" fg:w="1"/><text x="18.4463%" y="431.50"></text></g><g><title>engine::session::Session::flush (55 samples, 4.39%)</title><rect x="13.9665%" y="709" width="4.3895%" height="15" fill="rgb(213,109,30)" fg:x="175" fg:w="55"/><text x="14.2165%" y="719.50">engin..</text></g><g><title>engine::session::Session::save_changes (55 samples, 4.39%)</title><rect x="13.9665%" y="693" width="4.3895%" height="15" fill="rgb(222,172,16)" fg:x="175" fg:w="55"/><text x="14.2165%" y="703.50">engin..</text></g><g><title>engine::session::state::State::close (55 samples, 4.39%)</title><rect x="13.9665%" y="677" width="4.3895%" height="15" fill="rgb(233,192,5)" fg:x="175" fg:w="55"/><text x="14.2165%" y="687.50">engin..</text></g><g><title>engine::session::state::State::flush_entities (55 samples, 4.39%)</title><rect x="13.9665%" y="661" width="4.3895%" height="15" fill="rgb(247,189,41)" fg:x="175" fg:w="55"/><text x="14.2165%" y="671.50">engin..</text></g><g><title>core::iter::adapters::try_process (52 samples, 4.15%)</title><rect x="14.2059%" y="645" width="4.1500%" height="15" fill="rgb(218,134,47)" fg:x="178" fg:w="52"/><text x="14.4559%" y="655.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (52 samples, 4.15%)</title><rect x="14.2059%" y="629" width="4.1500%" height="15" fill="rgb(216,29,3)" fg:x="178" fg:w="52"/><text x="14.4559%" y="639.50">&lt;allo..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (52 samples, 4.15%)</title><rect x="14.2059%" y="613" width="4.1500%" height="15" fill="rgb(246,140,12)" fg:x="178" fg:w="52"/><text x="14.4559%" y="623.50">engin..</text></g><g><title>kernel::model::any_entity_changes (16 samples, 1.28%)</title><rect x="17.0790%" y="597" width="1.2769%" height="15" fill="rgb(230,136,11)" fg:x="214" fg:w="16"/><text x="17.3290%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (12 samples, 0.96%)</title><rect x="17.3982%" y="581" width="0.9577%" height="15" fill="rgb(247,22,47)" fg:x="218" fg:w="12"/><text x="17.6482%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (11 samples, 0.88%)</title><rect x="17.4781%" y="565" width="0.8779%" height="15" fill="rgb(218,84,22)" fg:x="219" fg:w="11"/><text x="17.7281%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.64%)</title><rect x="17.7175%" y="549" width="0.6385%" height="15" fill="rgb(216,87,39)" fg:x="222" fg:w="8"/><text x="17.9675%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.2761%" y="533" width="0.0798%" height="15" fill="rgb(221,178,8)" fg:x="229" fg:w="1"/><text x="18.5261%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="18.2761%" y="517" width="0.0798%" height="15" fill="rgb(230,42,11)" fg:x="229" fg:w="1"/><text x="18.5261%" y="527.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="18.3559%" y="709" width="0.0798%" height="15" fill="rgb(237,229,4)" fg:x="230" fg:w="1"/><text x="18.6059%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="18.3559%" y="693" width="0.0798%" height="15" fill="rgb(222,31,33)" fg:x="230" fg:w="1"/><text x="18.6059%" y="703.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="18.4358%" y="693" width="0.0798%" height="15" fill="rgb(210,17,39)" fg:x="231" fg:w="1"/><text x="18.6858%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="18.4358%" y="677" width="0.0798%" height="15" fill="rgb(244,93,20)" fg:x="231" fg:w="1"/><text x="18.6858%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.4358%" y="661" width="0.0798%" height="15" fill="rgb(210,40,47)" fg:x="231" fg:w="1"/><text x="18.6858%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.4358%" y="645" width="0.0798%" height="15" fill="rgb(239,211,47)" fg:x="231" fg:w="1"/><text x="18.6858%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="18.4358%" y="629" width="0.0798%" height="15" fill="rgb(251,223,49)" fg:x="231" fg:w="1"/><text x="18.6858%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.4358%" y="613" width="0.0798%" height="15" fill="rgb(221,149,5)" fg:x="231" fg:w="1"/><text x="18.6858%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="18.4358%" y="597" width="0.0798%" height="15" fill="rgb(219,224,51)" fg:x="231" fg:w="1"/><text x="18.6858%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="18.4358%" y="581" width="0.0798%" height="15" fill="rgb(223,7,8)" fg:x="231" fg:w="1"/><text x="18.6858%" y="591.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="18.5156%" y="677" width="0.0798%" height="15" fill="rgb(241,217,22)" fg:x="232" fg:w="1"/><text x="18.7656%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="18.5156%" y="661" width="0.0798%" height="15" fill="rgb(248,209,0)" fg:x="232" fg:w="1"/><text x="18.7656%" y="671.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="18.5156%" y="645" width="0.0798%" height="15" fill="rgb(217,205,4)" fg:x="232" fg:w="1"/><text x="18.7656%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.5156%" y="629" width="0.0798%" height="15" fill="rgb(228,124,39)" fg:x="232" fg:w="1"/><text x="18.7656%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.5156%" y="613" width="0.0798%" height="15" fill="rgb(250,116,42)" fg:x="232" fg:w="1"/><text x="18.7656%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="18.5954%" y="661" width="0.0798%" height="15" fill="rgb(223,202,9)" fg:x="233" fg:w="1"/><text x="18.8454%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="18.5954%" y="645" width="0.0798%" height="15" fill="rgb(242,222,40)" fg:x="233" fg:w="1"/><text x="18.8454%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="18.5954%" y="629" width="0.0798%" height="15" fill="rgb(229,99,46)" fg:x="233" fg:w="1"/><text x="18.8454%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.5954%" y="613" width="0.0798%" height="15" fill="rgb(225,56,46)" fg:x="233" fg:w="1"/><text x="18.8454%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.5954%" y="597" width="0.0798%" height="15" fill="rgb(227,94,5)" fg:x="233" fg:w="1"/><text x="18.8454%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.5954%" y="581" width="0.0798%" height="15" fill="rgb(205,112,38)" fg:x="233" fg:w="1"/><text x="18.8454%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.5954%" y="565" width="0.0798%" height="15" fill="rgb(231,133,46)" fg:x="233" fg:w="1"/><text x="18.8454%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.5954%" y="549" width="0.0798%" height="15" fill="rgb(217,16,9)" fg:x="233" fg:w="1"/><text x="18.8454%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="18.5954%" y="533" width="0.0798%" height="15" fill="rgb(249,173,9)" fg:x="233" fg:w="1"/><text x="18.8454%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="18.5954%" y="517" width="0.0798%" height="15" fill="rgb(205,163,53)" fg:x="233" fg:w="1"/><text x="18.8454%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="18.5954%" y="501" width="0.0798%" height="15" fill="rgb(217,54,41)" fg:x="233" fg:w="1"/><text x="18.8454%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.5954%" y="485" width="0.0798%" height="15" fill="rgb(228,216,12)" fg:x="233" fg:w="1"/><text x="18.8454%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.5954%" y="469" width="0.0798%" height="15" fill="rgb(244,228,15)" fg:x="233" fg:w="1"/><text x="18.8454%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="18.5954%" y="453" width="0.0798%" height="15" fill="rgb(221,176,53)" fg:x="233" fg:w="1"/><text x="18.8454%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="18.5954%" y="437" width="0.0798%" height="15" fill="rgb(205,94,34)" fg:x="233" fg:w="1"/><text x="18.8454%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="18.5954%" y="421" width="0.0798%" height="15" fill="rgb(213,110,48)" fg:x="233" fg:w="1"/><text x="18.8454%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="18.5954%" y="405" width="0.0798%" height="15" fill="rgb(236,142,28)" fg:x="233" fg:w="1"/><text x="18.8454%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.5954%" y="389" width="0.0798%" height="15" fill="rgb(225,135,29)" fg:x="233" fg:w="1"/><text x="18.8454%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.6752%" y="629" width="0.0798%" height="15" fill="rgb(252,45,31)" fg:x="234" fg:w="1"/><text x="18.9252%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.40%)</title><rect x="18.5954%" y="677" width="0.3990%" height="15" fill="rgb(211,187,50)" fg:x="233" fg:w="5"/><text x="18.8454%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="18.6752%" y="661" width="0.3192%" height="15" fill="rgb(229,109,7)" fg:x="234" fg:w="4"/><text x="18.9252%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="18.6752%" y="645" width="0.3192%" height="15" fill="rgb(251,131,51)" fg:x="234" fg:w="4"/><text x="18.9252%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="18.7550%" y="629" width="0.2394%" height="15" fill="rgb(251,180,35)" fg:x="235" fg:w="3"/><text x="19.0050%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="18.7550%" y="613" width="0.2394%" height="15" fill="rgb(211,46,32)" fg:x="235" fg:w="3"/><text x="19.0050%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="18.7550%" y="597" width="0.2394%" height="15" fill="rgb(248,123,17)" fg:x="235" fg:w="3"/><text x="19.0050%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="18.7550%" y="581" width="0.2394%" height="15" fill="rgb(227,141,18)" fg:x="235" fg:w="3"/><text x="19.0050%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="18.8348%" y="565" width="0.1596%" height="15" fill="rgb(216,102,9)" fg:x="236" fg:w="2"/><text x="19.0848%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="18.8348%" y="549" width="0.1596%" height="15" fill="rgb(253,47,13)" fg:x="236" fg:w="2"/><text x="19.0848%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="18.8348%" y="533" width="0.1596%" height="15" fill="rgb(226,93,23)" fg:x="236" fg:w="2"/><text x="19.0848%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="18.9146%" y="517" width="0.0798%" height="15" fill="rgb(247,104,17)" fg:x="237" fg:w="1"/><text x="19.1646%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.9146%" y="501" width="0.0798%" height="15" fill="rgb(233,203,26)" fg:x="237" fg:w="1"/><text x="19.1646%" y="511.50"></text></g><g><title>plugins_core::build::Build::save (8 samples, 0.64%)</title><rect x="18.4358%" y="709" width="0.6385%" height="15" fill="rgb(244,98,49)" fg:x="231" fg:w="8"/><text x="18.6858%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.56%)</title><rect x="18.5156%" y="693" width="0.5587%" height="15" fill="rgb(235,134,22)" fg:x="232" fg:w="7"/><text x="18.7656%" y="703.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="18.9944%" y="677" width="0.0798%" height="15" fill="rgb(221,70,32)" fg:x="238" fg:w="1"/><text x="19.2444%" y="687.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="18.9944%" y="661" width="0.0798%" height="15" fill="rgb(238,15,50)" fg:x="238" fg:w="1"/><text x="19.2444%" y="671.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="18.9944%" y="645" width="0.0798%" height="15" fill="rgb(215,221,48)" fg:x="238" fg:w="1"/><text x="19.2444%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.0742%" y="613" width="0.0798%" height="15" fill="rgb(236,73,3)" fg:x="239" fg:w="1"/><text x="19.3242%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.0742%" y="597" width="0.0798%" height="15" fill="rgb(250,107,11)" fg:x="239" fg:w="1"/><text x="19.3242%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="19.0742%" y="645" width="0.2394%" height="15" fill="rgb(242,39,14)" fg:x="239" fg:w="3"/><text x="19.3242%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="19.0742%" y="629" width="0.2394%" height="15" fill="rgb(248,164,37)" fg:x="239" fg:w="3"/><text x="19.3242%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="19.1540%" y="613" width="0.1596%" height="15" fill="rgb(217,60,12)" fg:x="240" fg:w="2"/><text x="19.4040%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="19.1540%" y="597" width="0.1596%" height="15" fill="rgb(240,125,29)" fg:x="240" fg:w="2"/><text x="19.4040%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="19.1540%" y="581" width="0.1596%" height="15" fill="rgb(208,207,28)" fg:x="240" fg:w="2"/><text x="19.4040%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="19.1540%" y="565" width="0.1596%" height="15" fill="rgb(209,159,27)" fg:x="240" fg:w="2"/><text x="19.4040%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="19.2338%" y="549" width="0.0798%" height="15" fill="rgb(251,176,53)" fg:x="241" fg:w="1"/><text x="19.4838%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="19.2338%" y="533" width="0.0798%" height="15" fill="rgb(211,85,7)" fg:x="241" fg:w="1"/><text x="19.4838%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.2338%" y="517" width="0.0798%" height="15" fill="rgb(216,64,54)" fg:x="241" fg:w="1"/><text x="19.4838%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="19.3136%" y="629" width="0.0798%" height="15" fill="rgb(217,54,24)" fg:x="242" fg:w="1"/><text x="19.5636%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.3136%" y="613" width="0.0798%" height="15" fill="rgb(208,206,53)" fg:x="242" fg:w="1"/><text x="19.5636%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.3136%" y="597" width="0.0798%" height="15" fill="rgb(251,74,39)" fg:x="242" fg:w="1"/><text x="19.5636%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.3136%" y="581" width="0.0798%" height="15" fill="rgb(226,47,5)" fg:x="242" fg:w="1"/><text x="19.5636%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.3136%" y="565" width="0.0798%" height="15" fill="rgb(234,111,33)" fg:x="242" fg:w="1"/><text x="19.5636%" y="575.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (5 samples, 0.40%)</title><rect x="19.0742%" y="677" width="0.3990%" height="15" fill="rgb(251,14,10)" fg:x="239" fg:w="5"/><text x="19.3242%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (5 samples, 0.40%)</title><rect x="19.0742%" y="661" width="0.3990%" height="15" fill="rgb(232,43,0)" fg:x="239" fg:w="5"/><text x="19.3242%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="19.3136%" y="645" width="0.1596%" height="15" fill="rgb(222,68,43)" fg:x="242" fg:w="2"/><text x="19.5636%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="19.3935%" y="629" width="0.0798%" height="15" fill="rgb(217,24,23)" fg:x="243" fg:w="1"/><text x="19.6435%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.3935%" y="613" width="0.0798%" height="15" fill="rgb(229,209,14)" fg:x="243" fg:w="1"/><text x="19.6435%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (8 samples, 0.64%)</title><rect x="19.0742%" y="709" width="0.6385%" height="15" fill="rgb(250,149,48)" fg:x="239" fg:w="8"/><text x="19.3242%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (8 samples, 0.64%)</title><rect x="19.0742%" y="693" width="0.6385%" height="15" fill="rgb(210,120,37)" fg:x="239" fg:w="8"/><text x="19.3242%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="19.4733%" y="677" width="0.2394%" height="15" fill="rgb(210,21,8)" fg:x="244" fg:w="3"/><text x="19.7233%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="19.5531%" y="661" width="0.1596%" height="15" fill="rgb(243,145,7)" fg:x="245" fg:w="2"/><text x="19.8031%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="19.5531%" y="645" width="0.1596%" height="15" fill="rgb(238,178,32)" fg:x="245" fg:w="2"/><text x="19.8031%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="19.5531%" y="629" width="0.1596%" height="15" fill="rgb(222,4,10)" fg:x="245" fg:w="2"/><text x="19.8031%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.6329%" y="613" width="0.0798%" height="15" fill="rgb(239,7,37)" fg:x="246" fg:w="1"/><text x="19.8829%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.7127%" y="677" width="0.0798%" height="15" fill="rgb(215,31,37)" fg:x="247" fg:w="1"/><text x="19.9627%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="19.7127%" y="693" width="0.1596%" height="15" fill="rgb(224,83,33)" fg:x="247" fg:w="2"/><text x="19.9627%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.7925%" y="677" width="0.0798%" height="15" fill="rgb(239,55,3)" fg:x="248" fg:w="1"/><text x="20.0425%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.7925%" y="661" width="0.0798%" height="15" fill="rgb(247,92,11)" fg:x="248" fg:w="1"/><text x="20.0425%" y="671.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (3 samples, 0.24%)</title><rect x="19.7127%" y="709" width="0.2394%" height="15" fill="rgb(239,200,7)" fg:x="247" fg:w="3"/><text x="19.9627%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="19.8723%" y="693" width="0.0798%" height="15" fill="rgb(227,115,8)" fg:x="249" fg:w="1"/><text x="20.1223%" y="703.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="19.8723%" y="677" width="0.0798%" height="15" fill="rgb(215,189,27)" fg:x="249" fg:w="1"/><text x="20.1223%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="19.9521%" y="693" width="0.0798%" height="15" fill="rgb(251,216,39)" fg:x="250" fg:w="1"/><text x="20.2021%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="19.9521%" y="677" width="0.0798%" height="15" fill="rgb(207,29,47)" fg:x="250" fg:w="1"/><text x="20.2021%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="19.9521%" y="661" width="0.0798%" height="15" fill="rgb(210,71,34)" fg:x="250" fg:w="1"/><text x="20.2021%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="19.9521%" y="645" width="0.0798%" height="15" fill="rgb(253,217,51)" fg:x="250" fg:w="1"/><text x="20.2021%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.9521%" y="629" width="0.0798%" height="15" fill="rgb(222,117,46)" fg:x="250" fg:w="1"/><text x="20.2021%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.9521%" y="613" width="0.0798%" height="15" fill="rgb(226,132,6)" fg:x="250" fg:w="1"/><text x="20.2021%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.9521%" y="597" width="0.0798%" height="15" fill="rgb(254,145,51)" fg:x="250" fg:w="1"/><text x="20.2021%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.0319%" y="597" width="0.0798%" height="15" fill="rgb(231,199,27)" fg:x="251" fg:w="1"/><text x="20.2819%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="20.0319%" y="693" width="0.1596%" height="15" fill="rgb(245,158,14)" fg:x="251" fg:w="2"/><text x="20.2819%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (2 samples, 0.16%)</title><rect x="20.0319%" y="677" width="0.1596%" height="15" fill="rgb(240,113,14)" fg:x="251" fg:w="2"/><text x="20.2819%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="20.0319%" y="661" width="0.1596%" height="15" fill="rgb(210,20,13)" fg:x="251" fg:w="2"/><text x="20.2819%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="20.0319%" y="645" width="0.1596%" height="15" fill="rgb(241,144,13)" fg:x="251" fg:w="2"/><text x="20.2819%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (2 samples, 0.16%)</title><rect x="20.0319%" y="629" width="0.1596%" height="15" fill="rgb(235,43,34)" fg:x="251" fg:w="2"/><text x="20.2819%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="20.0319%" y="613" width="0.1596%" height="15" fill="rgb(208,36,20)" fg:x="251" fg:w="2"/><text x="20.2819%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.1117%" y="597" width="0.0798%" height="15" fill="rgb(239,204,10)" fg:x="252" fg:w="1"/><text x="20.3617%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="20.1915%" y="645" width="0.0798%" height="15" fill="rgb(217,84,43)" fg:x="253" fg:w="1"/><text x="20.4415%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="20.1915%" y="629" width="0.0798%" height="15" fill="rgb(241,170,50)" fg:x="253" fg:w="1"/><text x="20.4415%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.1915%" y="613" width="0.0798%" height="15" fill="rgb(226,205,29)" fg:x="253" fg:w="1"/><text x="20.4415%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.1915%" y="597" width="0.0798%" height="15" fill="rgb(233,113,1)" fg:x="253" fg:w="1"/><text x="20.4415%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.1915%" y="581" width="0.0798%" height="15" fill="rgb(253,98,13)" fg:x="253" fg:w="1"/><text x="20.4415%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.2713%" y="613" width="0.0798%" height="15" fill="rgb(211,115,12)" fg:x="254" fg:w="1"/><text x="20.5213%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.2713%" y="597" width="0.0798%" height="15" fill="rgb(208,12,16)" fg:x="254" fg:w="1"/><text x="20.5213%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.3512%" y="613" width="0.0798%" height="15" fill="rgb(237,193,54)" fg:x="255" fg:w="1"/><text x="20.6012%" y="623.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (4 samples, 0.32%)</title><rect x="20.1915%" y="693" width="0.3192%" height="15" fill="rgb(243,22,42)" fg:x="253" fg:w="4"/><text x="20.4415%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.32%)</title><rect x="20.1915%" y="677" width="0.3192%" height="15" fill="rgb(233,151,36)" fg:x="253" fg:w="4"/><text x="20.4415%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="20.1915%" y="661" width="0.3192%" height="15" fill="rgb(237,57,45)" fg:x="253" fg:w="4"/><text x="20.4415%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="20.2713%" y="645" width="0.2394%" height="15" fill="rgb(221,88,17)" fg:x="254" fg:w="3"/><text x="20.5213%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="20.2713%" y="629" width="0.2394%" height="15" fill="rgb(230,79,15)" fg:x="254" fg:w="3"/><text x="20.5213%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.4310%" y="613" width="0.0798%" height="15" fill="rgb(213,57,13)" fg:x="256" fg:w="1"/><text x="20.6810%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.4310%" y="597" width="0.0798%" height="15" fill="rgb(222,116,39)" fg:x="256" fg:w="1"/><text x="20.6810%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="20.4310%" y="581" width="0.0798%" height="15" fill="rgb(245,107,2)" fg:x="256" fg:w="1"/><text x="20.6810%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.4310%" y="565" width="0.0798%" height="15" fill="rgb(238,1,10)" fg:x="256" fg:w="1"/><text x="20.6810%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.4310%" y="549" width="0.0798%" height="15" fill="rgb(249,4,48)" fg:x="256" fg:w="1"/><text x="20.6810%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.4310%" y="533" width="0.0798%" height="15" fill="rgb(223,151,18)" fg:x="256" fg:w="1"/><text x="20.6810%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="20.4310%" y="517" width="0.0798%" height="15" fill="rgb(227,65,43)" fg:x="256" fg:w="1"/><text x="20.6810%" y="527.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (87 samples, 6.94%)</title><rect x="13.6472%" y="725" width="6.9433%" height="15" fill="rgb(218,40,45)" fg:x="171" fg:w="87"/><text x="13.8972%" y="735.50">plugins_c..</text></g><g><title>plugins_core::tools::set_container (8 samples, 0.64%)</title><rect x="19.9521%" y="709" width="0.6385%" height="15" fill="rgb(252,121,31)" fg:x="250" fg:w="8"/><text x="20.2021%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="20.5108%" y="693" width="0.0798%" height="15" fill="rgb(219,158,43)" fg:x="257" fg:w="1"/><text x="20.7608%" y="703.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="20.5906%" y="693" width="0.0798%" height="15" fill="rgb(231,162,42)" fg:x="258" fg:w="1"/><text x="20.8406%" y="703.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="20.5906%" y="677" width="0.0798%" height="15" fill="rgb(217,179,25)" fg:x="258" fg:w="1"/><text x="20.8406%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="20.5906%" y="661" width="0.0798%" height="15" fill="rgb(206,212,31)" fg:x="258" fg:w="1"/><text x="20.8406%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="20.5906%" y="645" width="0.0798%" height="15" fill="rgb(235,144,12)" fg:x="258" fg:w="1"/><text x="20.8406%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.6704%" y="645" width="0.0798%" height="15" fill="rgb(213,51,10)" fg:x="259" fg:w="1"/><text x="20.9204%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.6704%" y="629" width="0.0798%" height="15" fill="rgb(231,145,14)" fg:x="259" fg:w="1"/><text x="20.9204%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.7502%" y="645" width="0.0798%" height="15" fill="rgb(235,15,28)" fg:x="260" fg:w="1"/><text x="21.0002%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="20.6704%" y="677" width="0.2394%" height="15" fill="rgb(237,206,10)" fg:x="259" fg:w="3"/><text x="20.9204%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="20.6704%" y="661" width="0.2394%" height="15" fill="rgb(236,227,27)" fg:x="259" fg:w="3"/><text x="20.9204%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.8300%" y="645" width="0.0798%" height="15" fill="rgb(246,83,35)" fg:x="261" fg:w="1"/><text x="21.0800%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.8300%" y="629" width="0.0798%" height="15" fill="rgb(220,136,24)" fg:x="261" fg:w="1"/><text x="21.0800%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="20.8300%" y="613" width="0.0798%" height="15" fill="rgb(217,3,25)" fg:x="261" fg:w="1"/><text x="21.0800%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.8300%" y="597" width="0.0798%" height="15" fill="rgb(239,24,14)" fg:x="261" fg:w="1"/><text x="21.0800%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.8300%" y="581" width="0.0798%" height="15" fill="rgb(244,16,53)" fg:x="261" fg:w="1"/><text x="21.0800%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.8300%" y="565" width="0.0798%" height="15" fill="rgb(208,175,44)" fg:x="261" fg:w="1"/><text x="21.0800%" y="575.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="20.8300%" y="549" width="0.0798%" height="15" fill="rgb(252,18,48)" fg:x="261" fg:w="1"/><text x="21.0800%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="20.9098%" y="661" width="0.0798%" height="15" fill="rgb(234,199,32)" fg:x="262" fg:w="1"/><text x="21.1598%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.9098%" y="645" width="0.0798%" height="15" fill="rgb(225,77,54)" fg:x="262" fg:w="1"/><text x="21.1598%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.9098%" y="629" width="0.0798%" height="15" fill="rgb(225,42,25)" fg:x="262" fg:w="1"/><text x="21.1598%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.9098%" y="613" width="0.0798%" height="15" fill="rgb(242,227,46)" fg:x="262" fg:w="1"/><text x="21.1598%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.9896%" y="581" width="0.0798%" height="15" fill="rgb(246,197,35)" fg:x="263" fg:w="1"/><text x="21.2396%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.9896%" y="565" width="0.0798%" height="15" fill="rgb(215,159,26)" fg:x="263" fg:w="1"/><text x="21.2396%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="20.9896%" y="597" width="0.1596%" height="15" fill="rgb(212,194,50)" fg:x="263" fg:w="2"/><text x="21.2396%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.0694%" y="581" width="0.0798%" height="15" fill="rgb(246,132,1)" fg:x="264" fg:w="1"/><text x="21.3194%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.0694%" y="565" width="0.0798%" height="15" fill="rgb(217,71,7)" fg:x="264" fg:w="1"/><text x="21.3194%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="21.0694%" y="549" width="0.0798%" height="15" fill="rgb(252,59,32)" fg:x="264" fg:w="1"/><text x="21.3194%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="21.0694%" y="533" width="0.0798%" height="15" fill="rgb(253,204,25)" fg:x="264" fg:w="1"/><text x="21.3194%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="21.0694%" y="517" width="0.0798%" height="15" fill="rgb(232,21,16)" fg:x="264" fg:w="1"/><text x="21.3194%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="21.0694%" y="501" width="0.0798%" height="15" fill="rgb(248,90,29)" fg:x="264" fg:w="1"/><text x="21.3194%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="21.0694%" y="485" width="0.0798%" height="15" fill="rgb(249,223,7)" fg:x="264" fg:w="1"/><text x="21.3194%" y="495.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="20.9896%" y="645" width="0.2394%" height="15" fill="rgb(231,119,42)" fg:x="263" fg:w="3"/><text x="21.2396%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.24%)</title><rect x="20.9896%" y="629" width="0.2394%" height="15" fill="rgb(215,41,35)" fg:x="263" fg:w="3"/><text x="21.2396%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.24%)</title><rect x="20.9896%" y="613" width="0.2394%" height="15" fill="rgb(220,44,45)" fg:x="263" fg:w="3"/><text x="21.2396%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="21.1492%" y="597" width="0.0798%" height="15" fill="rgb(253,197,36)" fg:x="265" fg:w="1"/><text x="21.3992%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.1492%" y="581" width="0.0798%" height="15" fill="rgb(245,225,54)" fg:x="265" fg:w="1"/><text x="21.3992%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="21.1492%" y="565" width="0.0798%" height="15" fill="rgb(239,94,37)" fg:x="265" fg:w="1"/><text x="21.3992%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.1492%" y="549" width="0.0798%" height="15" fill="rgb(242,217,10)" fg:x="265" fg:w="1"/><text x="21.3992%" y="559.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="20.9896%" y="661" width="0.3192%" height="15" fill="rgb(250,193,7)" fg:x="263" fg:w="4"/><text x="21.2396%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="21.2291%" y="645" width="0.0798%" height="15" fill="rgb(230,104,19)" fg:x="266" fg:w="1"/><text x="21.4791%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="21.2291%" y="629" width="0.0798%" height="15" fill="rgb(230,181,4)" fg:x="266" fg:w="1"/><text x="21.4791%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.2291%" y="613" width="0.0798%" height="15" fill="rgb(216,219,49)" fg:x="266" fg:w="1"/><text x="21.4791%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.48%)</title><rect x="20.9098%" y="677" width="0.4789%" height="15" fill="rgb(254,144,0)" fg:x="262" fg:w="6"/><text x="21.1598%" y="687.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="21.3089%" y="661" width="0.0798%" height="15" fill="rgb(205,209,38)" fg:x="267" fg:w="1"/><text x="21.5589%" y="671.50"></text></g><g><title>plugins_core::build::Build::save (10 samples, 0.80%)</title><rect x="20.6704%" y="693" width="0.7981%" height="15" fill="rgb(240,21,42)" fg:x="259" fg:w="10"/><text x="20.9204%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.3887%" y="677" width="0.0798%" height="15" fill="rgb(241,132,3)" fg:x="268" fg:w="1"/><text x="21.6387%" y="687.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (12 samples, 0.96%)</title><rect x="20.5906%" y="725" width="0.9577%" height="15" fill="rgb(225,14,2)" fg:x="258" fg:w="12"/><text x="20.8406%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (12 samples, 0.96%)</title><rect x="20.5906%" y="709" width="0.9577%" height="15" fill="rgb(210,141,35)" fg:x="258" fg:w="12"/><text x="20.8406%" y="719.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::into_entity (1 samples, 0.08%)</title><rect x="21.4685%" y="693" width="0.0798%" height="15" fill="rgb(251,14,44)" fg:x="269" fg:w="1"/><text x="21.7185%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="21.5483%" y="709" width="0.0798%" height="15" fill="rgb(247,48,18)" fg:x="270" fg:w="1"/><text x="21.7983%" y="719.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="21.6281%" y="709" width="0.0798%" height="15" fill="rgb(225,0,40)" fg:x="271" fg:w="1"/><text x="21.8781%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.7877%" y="613" width="0.0798%" height="15" fill="rgb(221,31,33)" fg:x="273" fg:w="1"/><text x="22.0377%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.7877%" y="597" width="0.0798%" height="15" fill="rgb(237,42,40)" fg:x="273" fg:w="1"/><text x="22.0377%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="21.7877%" y="581" width="0.0798%" height="15" fill="rgb(233,51,29)" fg:x="273" fg:w="1"/><text x="22.0377%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="21.7877%" y="565" width="0.0798%" height="15" fill="rgb(226,58,20)" fg:x="273" fg:w="1"/><text x="22.0377%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="21.7877%" y="549" width="0.0798%" height="15" fill="rgb(208,98,7)" fg:x="273" fg:w="1"/><text x="22.0377%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="21.7877%" y="533" width="0.0798%" height="15" fill="rgb(228,143,44)" fg:x="273" fg:w="1"/><text x="22.0377%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="21.7877%" y="517" width="0.0798%" height="15" fill="rgb(246,55,38)" fg:x="273" fg:w="1"/><text x="22.0377%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="21.7877%" y="501" width="0.0798%" height="15" fill="rgb(247,87,16)" fg:x="273" fg:w="1"/><text x="22.0377%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="21.7877%" y="485" width="0.0798%" height="15" fill="rgb(234,129,42)" fg:x="273" fg:w="1"/><text x="22.0377%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="21.7877%" y="469" width="0.0798%" height="15" fill="rgb(220,82,16)" fg:x="273" fg:w="1"/><text x="22.0377%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="21.7877%" y="453" width="0.0798%" height="15" fill="rgb(211,88,4)" fg:x="273" fg:w="1"/><text x="22.0377%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.7877%" y="437" width="0.0798%" height="15" fill="rgb(248,151,21)" fg:x="273" fg:w="1"/><text x="22.0377%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="21.7877%" y="661" width="0.1596%" height="15" fill="rgb(238,163,6)" fg:x="273" fg:w="2"/><text x="22.0377%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="21.7877%" y="645" width="0.1596%" height="15" fill="rgb(209,183,11)" fg:x="273" fg:w="2"/><text x="22.0377%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="21.7877%" y="629" width="0.1596%" height="15" fill="rgb(219,37,20)" fg:x="273" fg:w="2"/><text x="22.0377%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.8675%" y="613" width="0.0798%" height="15" fill="rgb(210,158,4)" fg:x="274" fg:w="1"/><text x="22.1175%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (4 samples, 0.32%)</title><rect x="21.7079%" y="693" width="0.3192%" height="15" fill="rgb(221,167,53)" fg:x="272" fg:w="4"/><text x="21.9579%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="21.7877%" y="677" width="0.2394%" height="15" fill="rgb(237,151,45)" fg:x="273" fg:w="3"/><text x="22.0377%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.9473%" y="661" width="0.0798%" height="15" fill="rgb(231,39,3)" fg:x="275" fg:w="1"/><text x="22.1973%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="22.1069%" y="677" width="0.0798%" height="15" fill="rgb(212,167,28)" fg:x="277" fg:w="1"/><text x="22.3569%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="22.1868%" y="677" width="0.0798%" height="15" fill="rgb(232,178,8)" fg:x="278" fg:w="1"/><text x="22.4368%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="22.1868%" y="661" width="0.0798%" height="15" fill="rgb(225,151,20)" fg:x="278" fg:w="1"/><text x="22.4368%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.1868%" y="645" width="0.0798%" height="15" fill="rgb(238,3,37)" fg:x="278" fg:w="1"/><text x="22.4368%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="22.1868%" y="629" width="0.0798%" height="15" fill="rgb(251,147,42)" fg:x="278" fg:w="1"/><text x="22.4368%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="22.2666%" y="661" width="0.0798%" height="15" fill="rgb(208,173,10)" fg:x="279" fg:w="1"/><text x="22.5166%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="22.2666%" y="645" width="0.0798%" height="15" fill="rgb(246,225,4)" fg:x="279" fg:w="1"/><text x="22.5166%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="22.2666%" y="629" width="0.0798%" height="15" fill="rgb(248,102,6)" fg:x="279" fg:w="1"/><text x="22.5166%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.2666%" y="613" width="0.0798%" height="15" fill="rgb(232,6,21)" fg:x="279" fg:w="1"/><text x="22.5166%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::new (1 samples, 0.08%)</title><rect x="22.3464%" y="661" width="0.0798%" height="15" fill="rgb(221,179,22)" fg:x="280" fg:w="1"/><text x="22.5964%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.3464%" y="645" width="0.0798%" height="15" fill="rgb(252,50,20)" fg:x="280" fg:w="1"/><text x="22.5964%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.4262%" y="629" width="0.0798%" height="15" fill="rgb(222,56,38)" fg:x="281" fg:w="1"/><text x="22.6762%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="22.5060%" y="629" width="0.0798%" height="15" fill="rgb(206,193,29)" fg:x="282" fg:w="1"/><text x="22.7560%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="22.5060%" y="613" width="0.0798%" height="15" fill="rgb(239,192,45)" fg:x="282" fg:w="1"/><text x="22.7560%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="22.5060%" y="597" width="0.0798%" height="15" fill="rgb(254,18,36)" fg:x="282" fg:w="1"/><text x="22.7560%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="22.5060%" y="581" width="0.0798%" height="15" fill="rgb(221,127,11)" fg:x="282" fg:w="1"/><text x="22.7560%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="22.5060%" y="565" width="0.0798%" height="15" fill="rgb(234,146,35)" fg:x="282" fg:w="1"/><text x="22.7560%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="22.5060%" y="549" width="0.0798%" height="15" fill="rgb(254,201,37)" fg:x="282" fg:w="1"/><text x="22.7560%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.5060%" y="533" width="0.0798%" height="15" fill="rgb(211,202,23)" fg:x="282" fg:w="1"/><text x="22.7560%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (8 samples, 0.64%)</title><rect x="22.0271%" y="693" width="0.6385%" height="15" fill="rgb(237,91,2)" fg:x="276" fg:w="8"/><text x="22.2771%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.40%)</title><rect x="22.2666%" y="677" width="0.3990%" height="15" fill="rgb(226,228,36)" fg:x="279" fg:w="5"/><text x="22.5166%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="22.4262%" y="661" width="0.2394%" height="15" fill="rgb(213,63,50)" fg:x="281" fg:w="3"/><text x="22.6762%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="22.4262%" y="645" width="0.2394%" height="15" fill="rgb(235,194,19)" fg:x="281" fg:w="3"/><text x="22.6762%" y="655.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="22.5858%" y="629" width="0.0798%" height="15" fill="rgb(207,204,18)" fg:x="283" fg:w="1"/><text x="22.8358%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="22.5858%" y="613" width="0.0798%" height="15" fill="rgb(248,8,7)" fg:x="283" fg:w="1"/><text x="22.8358%" y="623.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (195 samples, 15.56%)</title><rect x="7.1828%" y="741" width="15.5626%" height="15" fill="rgb(223,145,47)" fg:x="90" fg:w="195"/><text x="7.4328%" y="751.50">&lt;tests::HoldingKeyInVess..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (15 samples, 1.20%)</title><rect x="21.5483%" y="725" width="1.1971%" height="15" fill="rgb(228,84,11)" fg:x="270" fg:w="15"/><text x="21.7983%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (13 samples, 1.04%)</title><rect x="21.7079%" y="709" width="1.0375%" height="15" fill="rgb(218,76,45)" fg:x="272" fg:w="13"/><text x="21.9579%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="22.6656%" y="693" width="0.0798%" height="15" fill="rgb(223,80,15)" fg:x="284" fg:w="1"/><text x="22.9156%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="22.6656%" y="677" width="0.0798%" height="15" fill="rgb(219,218,33)" fg:x="284" fg:w="1"/><text x="22.9156%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.6656%" y="661" width="0.0798%" height="15" fill="rgb(208,51,11)" fg:x="284" fg:w="1"/><text x="22.9156%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="22.7454%" y="629" width="0.0798%" height="15" fill="rgb(229,165,39)" fg:x="285" fg:w="1"/><text x="22.9954%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="22.7454%" y="613" width="0.0798%" height="15" fill="rgb(241,100,24)" fg:x="285" fg:w="1"/><text x="22.9954%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="22.7454%" y="597" width="0.0798%" height="15" fill="rgb(228,14,23)" fg:x="285" fg:w="1"/><text x="22.9954%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="22.7454%" y="709" width="0.1596%" height="15" fill="rgb(247,116,52)" fg:x="285" fg:w="2"/><text x="22.9954%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="22.7454%" y="693" width="0.1596%" height="15" fill="rgb(216,149,33)" fg:x="285" fg:w="2"/><text x="22.9954%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="22.7454%" y="677" width="0.1596%" height="15" fill="rgb(238,142,29)" fg:x="285" fg:w="2"/><text x="22.9954%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="22.7454%" y="661" width="0.1596%" height="15" fill="rgb(224,83,40)" fg:x="285" fg:w="2"/><text x="22.9954%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="22.7454%" y="645" width="0.1596%" height="15" fill="rgb(234,165,11)" fg:x="285" fg:w="2"/><text x="22.9954%" y="655.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="22.8252%" y="629" width="0.0798%" height="15" fill="rgb(215,96,23)" fg:x="286" fg:w="1"/><text x="23.0752%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="22.8252%" y="613" width="0.0798%" height="15" fill="rgb(233,179,26)" fg:x="286" fg:w="1"/><text x="23.0752%" y="623.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (3 samples, 0.24%)</title><rect x="22.7454%" y="725" width="0.2394%" height="15" fill="rgb(225,129,33)" fg:x="285" fg:w="3"/><text x="22.9954%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.9050%" y="709" width="0.0798%" height="15" fill="rgb(237,49,13)" fg:x="287" fg:w="1"/><text x="23.1550%" y="719.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="22.9050%" y="693" width="0.0798%" height="15" fill="rgb(211,3,31)" fg:x="287" fg:w="1"/><text x="23.1550%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="22.9050%" y="677" width="0.0798%" height="15" fill="rgb(216,152,19)" fg:x="287" fg:w="1"/><text x="23.1550%" y="687.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="22.9848%" y="725" width="0.0798%" height="15" fill="rgb(251,121,35)" fg:x="288" fg:w="1"/><text x="23.2348%" y="735.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="22.9848%" y="709" width="0.0798%" height="15" fill="rgb(210,217,47)" fg:x="288" fg:w="1"/><text x="23.2348%" y="719.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="22.9848%" y="693" width="0.0798%" height="15" fill="rgb(244,116,22)" fg:x="288" fg:w="1"/><text x="23.2348%" y="703.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="22.9848%" y="677" width="0.0798%" height="15" fill="rgb(228,17,21)" fg:x="288" fg:w="1"/><text x="23.2348%" y="687.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="22.9848%" y="661" width="0.0798%" height="15" fill="rgb(240,149,34)" fg:x="288" fg:w="1"/><text x="23.2348%" y="671.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="22.9848%" y="645" width="0.0798%" height="15" fill="rgb(208,125,47)" fg:x="288" fg:w="1"/><text x="23.2348%" y="655.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="22.9848%" y="629" width="0.0798%" height="15" fill="rgb(249,186,39)" fg:x="288" fg:w="1"/><text x="23.2348%" y="639.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="22.9848%" y="613" width="0.0798%" height="15" fill="rgb(240,220,33)" fg:x="288" fg:w="1"/><text x="23.2348%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.1445%" y="693" width="0.0798%" height="15" fill="rgb(243,110,23)" fg:x="290" fg:w="1"/><text x="23.3945%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.1445%" y="677" width="0.0798%" height="15" fill="rgb(219,163,46)" fg:x="290" fg:w="1"/><text x="23.3945%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.1445%" y="661" width="0.0798%" height="15" fill="rgb(216,126,30)" fg:x="290" fg:w="1"/><text x="23.3945%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="23.1445%" y="645" width="0.0798%" height="15" fill="rgb(208,139,11)" fg:x="290" fg:w="1"/><text x="23.3945%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="23.1445%" y="629" width="0.0798%" height="15" fill="rgb(213,118,36)" fg:x="290" fg:w="1"/><text x="23.3945%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="23.1445%" y="613" width="0.0798%" height="15" fill="rgb(226,43,17)" fg:x="290" fg:w="1"/><text x="23.3945%" y="623.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="23.1445%" y="597" width="0.0798%" height="15" fill="rgb(254,217,4)" fg:x="290" fg:w="1"/><text x="23.3945%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="23.1445%" y="581" width="0.0798%" height="15" fill="rgb(210,134,47)" fg:x="290" fg:w="1"/><text x="23.3945%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="23.2243%" y="693" width="0.0798%" height="15" fill="rgb(237,24,49)" fg:x="291" fg:w="1"/><text x="23.4743%" y="703.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="23.3041%" y="693" width="0.1596%" height="15" fill="rgb(251,39,46)" fg:x="292" fg:w="2"/><text x="23.5541%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="23.3041%" y="677" width="0.1596%" height="15" fill="rgb(251,220,3)" fg:x="292" fg:w="2"/><text x="23.5541%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="23.3839%" y="661" width="0.0798%" height="15" fill="rgb(228,105,12)" fg:x="293" fg:w="1"/><text x="23.6339%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.4637%" y="661" width="0.0798%" height="15" fill="rgb(215,196,1)" fg:x="294" fg:w="1"/><text x="23.7137%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="23.5435%" y="661" width="0.1596%" height="15" fill="rgb(214,33,39)" fg:x="295" fg:w="2"/><text x="23.7935%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="23.5435%" y="645" width="0.1596%" height="15" fill="rgb(220,19,52)" fg:x="295" fg:w="2"/><text x="23.7935%" y="655.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="23.5435%" y="629" width="0.1596%" height="15" fill="rgb(221,78,38)" fg:x="295" fg:w="2"/><text x="23.7935%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="24.0223%" y="597" width="0.1596%" height="15" fill="rgb(253,30,16)" fg:x="301" fg:w="2"/><text x="24.2723%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.1022%" y="581" width="0.0798%" height="15" fill="rgb(242,65,0)" fg:x="302" fg:w="1"/><text x="24.3522%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="23.9425%" y="613" width="0.3192%" height="15" fill="rgb(235,201,12)" fg:x="300" fg:w="4"/><text x="24.1925%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="24.1820%" y="597" width="0.0798%" height="15" fill="rgb(233,161,9)" fg:x="303" fg:w="1"/><text x="24.4320%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="24.1820%" y="581" width="0.0798%" height="15" fill="rgb(241,207,41)" fg:x="303" fg:w="1"/><text x="24.4320%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.1820%" y="565" width="0.0798%" height="15" fill="rgb(212,69,46)" fg:x="303" fg:w="1"/><text x="24.4320%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="23.7829%" y="629" width="0.5587%" height="15" fill="rgb(239,69,45)" fg:x="298" fg:w="7"/><text x="24.0329%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.2618%" y="613" width="0.0798%" height="15" fill="rgb(242,117,48)" fg:x="304" fg:w="1"/><text x="24.5118%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.72%)</title><rect x="23.7829%" y="645" width="0.7183%" height="15" fill="rgb(228,41,36)" fg:x="298" fg:w="9"/><text x="24.0329%" y="655.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="24.3416%" y="629" width="0.1596%" height="15" fill="rgb(212,3,32)" fg:x="305" fg:w="2"/><text x="24.5916%" y="639.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="24.5012%" y="629" width="0.0798%" height="15" fill="rgb(233,41,49)" fg:x="307" fg:w="1"/><text x="24.7512%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="24.5012%" y="613" width="0.0798%" height="15" fill="rgb(252,170,49)" fg:x="307" fg:w="1"/><text x="24.7512%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="24.5012%" y="597" width="0.0798%" height="15" fill="rgb(229,53,26)" fg:x="307" fg:w="1"/><text x="24.7512%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="24.5810%" y="613" width="0.0798%" height="15" fill="rgb(217,157,12)" fg:x="308" fg:w="1"/><text x="24.8310%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="24.6608%" y="613" width="0.1596%" height="15" fill="rgb(227,17,9)" fg:x="309" fg:w="2"/><text x="24.9108%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="24.7406%" y="597" width="0.0798%" height="15" fill="rgb(218,84,12)" fg:x="310" fg:w="1"/><text x="24.9906%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="24.7406%" y="581" width="0.0798%" height="15" fill="rgb(212,79,24)" fg:x="310" fg:w="1"/><text x="24.9906%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="24.7406%" y="565" width="0.0798%" height="15" fill="rgb(217,222,37)" fg:x="310" fg:w="1"/><text x="24.9906%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="24.7406%" y="549" width="0.0798%" height="15" fill="rgb(246,208,8)" fg:x="310" fg:w="1"/><text x="24.9906%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="24.7406%" y="533" width="0.0798%" height="15" fill="rgb(244,133,10)" fg:x="310" fg:w="1"/><text x="24.9906%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="24.7406%" y="517" width="0.0798%" height="15" fill="rgb(209,219,41)" fg:x="310" fg:w="1"/><text x="24.9906%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="24.9002%" y="565" width="0.1596%" height="15" fill="rgb(253,175,45)" fg:x="312" fg:w="2"/><text x="25.1502%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="24.9002%" y="549" width="0.1596%" height="15" fill="rgb(235,100,37)" fg:x="312" fg:w="2"/><text x="25.1502%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="24.9002%" y="533" width="0.1596%" height="15" fill="rgb(225,87,19)" fg:x="312" fg:w="2"/><text x="25.1502%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="24.9002%" y="517" width="0.1596%" height="15" fill="rgb(217,152,17)" fg:x="312" fg:w="2"/><text x="25.1502%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="24.9800%" y="501" width="0.0798%" height="15" fill="rgb(235,72,13)" fg:x="313" fg:w="1"/><text x="25.2300%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="24.9800%" y="485" width="0.0798%" height="15" fill="rgb(233,140,18)" fg:x="313" fg:w="1"/><text x="25.2300%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="24.9800%" y="469" width="0.0798%" height="15" fill="rgb(207,212,28)" fg:x="313" fg:w="1"/><text x="25.2300%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="25.0599%" y="549" width="0.0798%" height="15" fill="rgb(220,130,25)" fg:x="314" fg:w="1"/><text x="25.3099%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="24.9002%" y="597" width="0.3192%" height="15" fill="rgb(205,55,34)" fg:x="312" fg:w="4"/><text x="25.1502%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="24.9002%" y="581" width="0.3192%" height="15" fill="rgb(237,54,35)" fg:x="312" fg:w="4"/><text x="25.1502%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="25.0599%" y="565" width="0.1596%" height="15" fill="rgb(208,67,23)" fg:x="314" fg:w="2"/><text x="25.3099%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="25.1397%" y="549" width="0.0798%" height="15" fill="rgb(206,207,50)" fg:x="315" fg:w="1"/><text x="25.3897%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="25.2195%" y="597" width="0.1596%" height="15" fill="rgb(213,211,42)" fg:x="316" fg:w="2"/><text x="25.4695%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="25.2993%" y="581" width="0.0798%" height="15" fill="rgb(252,197,50)" fg:x="317" fg:w="1"/><text x="25.5493%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="25.3791%" y="581" width="0.2394%" height="15" fill="rgb(251,211,41)" fg:x="318" fg:w="3"/><text x="25.6291%" y="591.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="25.3791%" y="565" width="0.2394%" height="15" fill="rgb(229,211,5)" fg:x="318" fg:w="3"/><text x="25.6291%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="25.3791%" y="549" width="0.2394%" height="15" fill="rgb(239,36,31)" fg:x="318" fg:w="3"/><text x="25.6291%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="25.4589%" y="533" width="0.1596%" height="15" fill="rgb(248,67,31)" fg:x="319" fg:w="2"/><text x="25.7089%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="25.4589%" y="517" width="0.1596%" height="15" fill="rgb(249,55,44)" fg:x="319" fg:w="2"/><text x="25.7089%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="25.4589%" y="501" width="0.1596%" height="15" fill="rgb(216,82,12)" fg:x="319" fg:w="2"/><text x="25.7089%" y="511.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="25.4589%" y="485" width="0.1596%" height="15" fill="rgb(242,174,1)" fg:x="319" fg:w="2"/><text x="25.7089%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.96%)</title><rect x="24.8204%" y="613" width="0.9577%" height="15" fill="rgb(208,120,29)" fg:x="311" fg:w="12"/><text x="25.0704%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="25.3791%" y="597" width="0.3990%" height="15" fill="rgb(221,105,43)" fg:x="318" fg:w="5"/><text x="25.6291%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="25.6185%" y="581" width="0.1596%" height="15" fill="rgb(234,124,22)" fg:x="321" fg:w="2"/><text x="25.8685%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="25.6983%" y="565" width="0.0798%" height="15" fill="rgb(212,23,30)" fg:x="322" fg:w="1"/><text x="25.9483%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (17 samples, 1.36%)</title><rect x="24.5810%" y="629" width="1.3567%" height="15" fill="rgb(219,122,53)" fg:x="308" fg:w="17"/><text x="24.8310%" y="639.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="25.7781%" y="613" width="0.1596%" height="15" fill="rgb(248,84,24)" fg:x="323" fg:w="2"/><text x="26.0281%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="25.7781%" y="597" width="0.1596%" height="15" fill="rgb(245,115,18)" fg:x="323" fg:w="2"/><text x="26.0281%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.8579%" y="581" width="0.0798%" height="15" fill="rgb(227,176,51)" fg:x="324" fg:w="1"/><text x="26.1079%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="25.8579%" y="565" width="0.0798%" height="15" fill="rgb(229,63,42)" fg:x="324" fg:w="1"/><text x="26.1079%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="25.8579%" y="549" width="0.0798%" height="15" fill="rgb(247,202,24)" fg:x="324" fg:w="1"/><text x="26.1079%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (19 samples, 1.52%)</title><rect x="24.5012%" y="645" width="1.5164%" height="15" fill="rgb(244,173,20)" fg:x="307" fg:w="19"/><text x="24.7512%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="25.9377%" y="629" width="0.0798%" height="15" fill="rgb(242,81,47)" fg:x="325" fg:w="1"/><text x="26.1877%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="25.9377%" y="613" width="0.0798%" height="15" fill="rgb(231,185,54)" fg:x="325" fg:w="1"/><text x="26.1877%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.9377%" y="597" width="0.0798%" height="15" fill="rgb(243,55,32)" fg:x="325" fg:w="1"/><text x="26.1877%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="25.9377%" y="581" width="0.0798%" height="15" fill="rgb(208,167,19)" fg:x="325" fg:w="1"/><text x="26.1877%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="25.9377%" y="565" width="0.0798%" height="15" fill="rgb(231,72,35)" fg:x="325" fg:w="1"/><text x="26.1877%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.9377%" y="549" width="0.0798%" height="15" fill="rgb(250,173,51)" fg:x="325" fg:w="1"/><text x="26.1877%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.0974%" y="581" width="0.0798%" height="15" fill="rgb(209,5,22)" fg:x="327" fg:w="1"/><text x="26.3474%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="26.2570%" y="565" width="0.1596%" height="15" fill="rgb(250,174,19)" fg:x="329" fg:w="2"/><text x="26.5070%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.3368%" y="549" width="0.0798%" height="15" fill="rgb(217,3,49)" fg:x="330" fg:w="1"/><text x="26.5868%" y="559.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="26.4964%" y="549" width="0.2394%" height="15" fill="rgb(218,225,5)" fg:x="332" fg:w="3"/><text x="26.7464%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="26.7358%" y="549" width="0.0798%" height="15" fill="rgb(236,89,11)" fg:x="335" fg:w="1"/><text x="26.9858%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.8955%" y="501" width="0.0798%" height="15" fill="rgb(206,33,28)" fg:x="337" fg:w="1"/><text x="27.1455%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="26.8955%" y="533" width="0.1596%" height="15" fill="rgb(241,56,42)" fg:x="337" fg:w="2"/><text x="27.1455%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="26.8955%" y="517" width="0.1596%" height="15" fill="rgb(222,44,11)" fg:x="337" fg:w="2"/><text x="27.1455%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="26.9753%" y="501" width="0.0798%" height="15" fill="rgb(234,111,20)" fg:x="338" fg:w="1"/><text x="27.2253%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="26.9753%" y="485" width="0.0798%" height="15" fill="rgb(237,77,6)" fg:x="338" fg:w="1"/><text x="27.2253%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 1.28%)</title><rect x="26.0176%" y="613" width="1.2769%" height="15" fill="rgb(235,111,23)" fg:x="326" fg:w="16"/><text x="26.2676%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (16 samples, 1.28%)</title><rect x="26.0176%" y="597" width="1.2769%" height="15" fill="rgb(251,135,29)" fg:x="326" fg:w="16"/><text x="26.2676%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (14 samples, 1.12%)</title><rect x="26.1772%" y="581" width="1.1173%" height="15" fill="rgb(217,57,1)" fg:x="328" fg:w="14"/><text x="26.4272%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (11 samples, 0.88%)</title><rect x="26.4166%" y="565" width="0.8779%" height="15" fill="rgb(249,119,31)" fg:x="331" fg:w="11"/><text x="26.6666%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="26.8156%" y="549" width="0.4789%" height="15" fill="rgb(233,164,33)" fg:x="336" fg:w="6"/><text x="27.0656%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="27.0551%" y="533" width="0.2394%" height="15" fill="rgb(250,217,43)" fg:x="339" fg:w="3"/><text x="27.3051%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="27.1349%" y="517" width="0.1596%" height="15" fill="rgb(232,154,50)" fg:x="340" fg:w="2"/><text x="27.3849%" y="527.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="27.1349%" y="501" width="0.1596%" height="15" fill="rgb(227,190,8)" fg:x="340" fg:w="2"/><text x="27.3849%" y="511.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="27.2945%" y="613" width="0.0798%" height="15" fill="rgb(209,217,32)" fg:x="342" fg:w="1"/><text x="27.5445%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="27.2945%" y="597" width="0.0798%" height="15" fill="rgb(243,203,50)" fg:x="342" fg:w="1"/><text x="27.5445%" y="607.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="27.2945%" y="581" width="0.0798%" height="15" fill="rgb(232,152,27)" fg:x="342" fg:w="1"/><text x="27.5445%" y="591.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="27.2945%" y="565" width="0.0798%" height="15" fill="rgb(240,34,29)" fg:x="342" fg:w="1"/><text x="27.5445%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="27.7733%" y="549" width="0.0798%" height="15" fill="rgb(215,185,52)" fg:x="348" fg:w="1"/><text x="28.0233%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="27.7733%" y="533" width="0.0798%" height="15" fill="rgb(240,89,49)" fg:x="348" fg:w="1"/><text x="28.0233%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (6 samples, 0.48%)</title><rect x="27.4541%" y="597" width="0.4789%" height="15" fill="rgb(225,12,52)" fg:x="344" fg:w="6"/><text x="27.7041%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (5 samples, 0.40%)</title><rect x="27.5339%" y="581" width="0.3990%" height="15" fill="rgb(239,128,45)" fg:x="345" fg:w="5"/><text x="27.7839%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="27.6935%" y="565" width="0.2394%" height="15" fill="rgb(211,78,47)" fg:x="347" fg:w="3"/><text x="27.9435%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="27.8532%" y="549" width="0.0798%" height="15" fill="rgb(232,31,21)" fg:x="349" fg:w="1"/><text x="28.1032%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="27.9330%" y="597" width="0.1596%" height="15" fill="rgb(222,168,14)" fg:x="350" fg:w="2"/><text x="28.1830%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="27.9330%" y="581" width="0.1596%" height="15" fill="rgb(209,128,24)" fg:x="350" fg:w="2"/><text x="28.1830%" y="591.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="27.9330%" y="565" width="0.1596%" height="15" fill="rgb(249,35,13)" fg:x="350" fg:w="2"/><text x="28.1830%" y="575.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (27 samples, 2.15%)</title><rect x="26.0176%" y="629" width="2.1548%" height="15" fill="rgb(218,7,2)" fg:x="326" fg:w="27"/><text x="26.2676%" y="639.50">&lt;..</text></g><g><title>treediff::diff::diff (10 samples, 0.80%)</title><rect x="27.3743%" y="613" width="0.7981%" height="15" fill="rgb(238,107,27)" fg:x="343" fg:w="10"/><text x="27.6243%" y="623.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="28.0926%" y="597" width="0.0798%" height="15" fill="rgb(217,88,38)" fg:x="352" fg:w="1"/><text x="28.3426%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="28.1724%" y="613" width="0.0798%" height="15" fill="rgb(230,207,0)" fg:x="353" fg:w="1"/><text x="28.4224%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="28.3320%" y="597" width="0.2394%" height="15" fill="rgb(249,64,54)" fg:x="355" fg:w="3"/><text x="28.5820%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="28.4916%" y="581" width="0.0798%" height="15" fill="rgb(231,7,11)" fg:x="357" fg:w="1"/><text x="28.7416%" y="591.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="28.5714%" y="597" width="0.1596%" height="15" fill="rgb(205,149,21)" fg:x="358" fg:w="2"/><text x="28.8214%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="28.6512%" y="581" width="0.0798%" height="15" fill="rgb(215,126,34)" fg:x="359" fg:w="1"/><text x="28.9012%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="28.7310%" y="581" width="0.0798%" height="15" fill="rgb(241,132,45)" fg:x="360" fg:w="1"/><text x="28.9810%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="28.7310%" y="597" width="0.1596%" height="15" fill="rgb(252,69,32)" fg:x="360" fg:w="2"/><text x="28.9810%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="28.8109%" y="581" width="0.0798%" height="15" fill="rgb(232,204,19)" fg:x="361" fg:w="1"/><text x="29.0609%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.8109%" y="565" width="0.0798%" height="15" fill="rgb(249,15,47)" fg:x="361" fg:w="1"/><text x="29.0609%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="28.8907%" y="581" width="0.0798%" height="15" fill="rgb(209,227,23)" fg:x="362" fg:w="1"/><text x="29.1407%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="29.1301%" y="549" width="0.2394%" height="15" fill="rgb(248,92,24)" fg:x="365" fg:w="3"/><text x="29.3801%" y="559.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="29.2099%" y="533" width="0.1596%" height="15" fill="rgb(247,59,2)" fg:x="366" fg:w="2"/><text x="29.4599%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (2 samples, 0.16%)</title><rect x="29.3695%" y="533" width="0.1596%" height="15" fill="rgb(221,30,5)" fg:x="368" fg:w="2"/><text x="29.6195%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.4493%" y="517" width="0.0798%" height="15" fill="rgb(208,108,53)" fg:x="369" fg:w="1"/><text x="29.6993%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="29.3695%" y="549" width="0.3192%" height="15" fill="rgb(211,183,26)" fg:x="368" fg:w="4"/><text x="29.6195%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="29.5291%" y="533" width="0.1596%" height="15" fill="rgb(232,132,4)" fg:x="370" fg:w="2"/><text x="29.7791%" y="543.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="29.6089%" y="517" width="0.0798%" height="15" fill="rgb(253,128,37)" fg:x="371" fg:w="1"/><text x="29.8589%" y="527.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="29.6089%" y="501" width="0.0798%" height="15" fill="rgb(221,58,24)" fg:x="371" fg:w="1"/><text x="29.8589%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="29.8484%" y="533" width="0.0798%" height="15" fill="rgb(230,54,45)" fg:x="374" fg:w="1"/><text x="30.0984%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="29.9282%" y="533" width="0.4789%" height="15" fill="rgb(254,21,18)" fg:x="375" fg:w="6"/><text x="30.1782%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="30.0080%" y="517" width="0.3990%" height="15" fill="rgb(221,108,0)" fg:x="376" fg:w="5"/><text x="30.2580%" y="527.50"></text></g><g><title>__libc_malloc (5 samples, 0.40%)</title><rect x="30.0080%" y="501" width="0.3990%" height="15" fill="rgb(206,95,1)" fg:x="376" fg:w="5"/><text x="30.2580%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (20 samples, 1.60%)</title><rect x="28.9705%" y="565" width="1.5962%" height="15" fill="rgb(237,52,5)" fg:x="363" fg:w="20"/><text x="29.2205%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (11 samples, 0.88%)</title><rect x="29.6887%" y="549" width="0.8779%" height="15" fill="rgb(218,150,34)" fg:x="372" fg:w="11"/><text x="29.9387%" y="559.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="30.4070%" y="533" width="0.1596%" height="15" fill="rgb(235,194,28)" fg:x="381" fg:w="2"/><text x="30.6570%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (22 samples, 1.76%)</title><rect x="28.9705%" y="581" width="1.7558%" height="15" fill="rgb(245,92,18)" fg:x="363" fg:w="22"/><text x="29.2205%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="30.5666%" y="565" width="0.1596%" height="15" fill="rgb(253,203,53)" fg:x="383" fg:w="2"/><text x="30.8166%" y="575.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="30.5666%" y="549" width="0.1596%" height="15" fill="rgb(249,185,47)" fg:x="383" fg:w="2"/><text x="30.8166%" y="559.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="30.7263%" y="581" width="0.1596%" height="15" fill="rgb(252,194,52)" fg:x="385" fg:w="2"/><text x="30.9763%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (35 samples, 2.79%)</title><rect x="28.1724%" y="629" width="2.7933%" height="15" fill="rgb(210,53,36)" fg:x="353" fg:w="35"/><text x="28.4224%" y="639.50">ke..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (34 samples, 2.71%)</title><rect x="28.2522%" y="613" width="2.7135%" height="15" fill="rgb(237,37,25)" fg:x="354" fg:w="34"/><text x="28.5022%" y="623.50">&lt;s..</text></g><g><title>serde::ser::Serializer::collect_map (26 samples, 2.08%)</title><rect x="28.8907%" y="597" width="2.0750%" height="15" fill="rgb(242,116,27)" fg:x="362" fg:w="26"/><text x="29.1407%" y="607.50">s..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.8859%" y="581" width="0.0798%" height="15" fill="rgb(213,185,26)" fg:x="387" fg:w="1"/><text x="31.1359%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="31.5243%" y="453" width="0.0798%" height="15" fill="rgb(225,204,8)" fg:x="395" fg:w="1"/><text x="31.7743%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="31.5243%" y="437" width="0.0798%" height="15" fill="rgb(254,111,37)" fg:x="395" fg:w="1"/><text x="31.7743%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="31.5243%" y="421" width="0.0798%" height="15" fill="rgb(242,35,9)" fg:x="395" fg:w="1"/><text x="31.7743%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="31.5243%" y="405" width="0.0798%" height="15" fill="rgb(232,138,49)" fg:x="395" fg:w="1"/><text x="31.7743%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="31.5243%" y="389" width="0.0798%" height="15" fill="rgb(247,56,4)" fg:x="395" fg:w="1"/><text x="31.7743%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.5243%" y="373" width="0.0798%" height="15" fill="rgb(226,179,17)" fg:x="395" fg:w="1"/><text x="31.7743%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="31.5243%" y="485" width="0.2394%" height="15" fill="rgb(216,163,45)" fg:x="395" fg:w="3"/><text x="31.7743%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="31.5243%" y="469" width="0.2394%" height="15" fill="rgb(211,157,3)" fg:x="395" fg:w="3"/><text x="31.7743%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="31.6042%" y="453" width="0.1596%" height="15" fill="rgb(234,44,20)" fg:x="396" fg:w="2"/><text x="31.8542%" y="463.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="31.6042%" y="437" width="0.1596%" height="15" fill="rgb(254,138,23)" fg:x="396" fg:w="2"/><text x="31.8542%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="31.7638%" y="437" width="0.0798%" height="15" fill="rgb(206,119,39)" fg:x="398" fg:w="1"/><text x="32.0138%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.7638%" y="421" width="0.0798%" height="15" fill="rgb(231,105,52)" fg:x="398" fg:w="1"/><text x="32.0138%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="31.7638%" y="469" width="0.1596%" height="15" fill="rgb(250,20,5)" fg:x="398" fg:w="2"/><text x="32.0138%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="31.7638%" y="453" width="0.1596%" height="15" fill="rgb(215,198,30)" fg:x="398" fg:w="2"/><text x="32.0138%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.8436%" y="437" width="0.0798%" height="15" fill="rgb(246,142,8)" fg:x="399" fg:w="1"/><text x="32.0936%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.8436%" y="421" width="0.0798%" height="15" fill="rgb(243,26,38)" fg:x="399" fg:w="1"/><text x="32.0936%" y="431.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="31.8436%" y="405" width="0.0798%" height="15" fill="rgb(205,133,28)" fg:x="399" fg:w="1"/><text x="32.0936%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="31.5243%" y="501" width="0.4789%" height="15" fill="rgb(212,34,0)" fg:x="395" fg:w="6"/><text x="31.7743%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="31.7638%" y="485" width="0.2394%" height="15" fill="rgb(251,226,22)" fg:x="398" fg:w="3"/><text x="32.0138%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="31.9234%" y="469" width="0.0798%" height="15" fill="rgb(252,119,9)" fg:x="400" fg:w="1"/><text x="32.1734%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.9234%" y="453" width="0.0798%" height="15" fill="rgb(213,150,50)" fg:x="400" fg:w="1"/><text x="32.1734%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="32.0032%" y="501" width="0.0798%" height="15" fill="rgb(212,24,39)" fg:x="401" fg:w="1"/><text x="32.2532%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.0032%" y="485" width="0.0798%" height="15" fill="rgb(213,46,39)" fg:x="401" fg:w="1"/><text x="32.2532%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.88%)</title><rect x="31.2849%" y="533" width="0.8779%" height="15" fill="rgb(239,106,12)" fg:x="392" fg:w="11"/><text x="31.5349%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 0.72%)</title><rect x="31.4445%" y="517" width="0.7183%" height="15" fill="rgb(249,229,21)" fg:x="394" fg:w="9"/><text x="31.6945%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.0830%" y="501" width="0.0798%" height="15" fill="rgb(212,158,3)" fg:x="402" fg:w="1"/><text x="32.3330%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.0830%" y="485" width="0.0798%" height="15" fill="rgb(253,26,48)" fg:x="402" fg:w="1"/><text x="32.3330%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.0830%" y="469" width="0.0798%" height="15" fill="rgb(238,178,20)" fg:x="402" fg:w="1"/><text x="32.3330%" y="479.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="32.1628%" y="517" width="0.0798%" height="15" fill="rgb(208,86,15)" fg:x="403" fg:w="1"/><text x="32.4128%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (19 samples, 1.52%)</title><rect x="30.9657%" y="565" width="1.5164%" height="15" fill="rgb(239,42,53)" fg:x="388" fg:w="19"/><text x="31.2157%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (17 samples, 1.36%)</title><rect x="31.1253%" y="549" width="1.3567%" height="15" fill="rgb(245,226,8)" fg:x="390" fg:w="17"/><text x="31.3753%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (4 samples, 0.32%)</title><rect x="32.1628%" y="533" width="0.3192%" height="15" fill="rgb(216,176,32)" fg:x="403" fg:w="4"/><text x="32.4128%" y="543.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="32.2426%" y="517" width="0.2394%" height="15" fill="rgb(231,186,21)" fg:x="404" fg:w="3"/><text x="32.4926%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="32.4820%" y="565" width="0.0798%" height="15" fill="rgb(205,95,49)" fg:x="407" fg:w="1"/><text x="32.7320%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.4820%" y="549" width="0.0798%" height="15" fill="rgb(217,145,8)" fg:x="407" fg:w="1"/><text x="32.7320%" y="559.50"></text></g><g><title>engine::session::state::State::close (121 samples, 9.66%)</title><rect x="23.0646%" y="725" width="9.6568%" height="15" fill="rgb(239,144,48)" fg:x="289" fg:w="121"/><text x="23.3146%" y="735.50">engine::sessio..</text></g><g><title>engine::session::state::State::flush_entities (121 samples, 9.66%)</title><rect x="23.0646%" y="709" width="9.6568%" height="15" fill="rgb(214,189,23)" fg:x="289" fg:w="121"/><text x="23.3146%" y="719.50">engine::sessio..</text></g><g><title>core::iter::adapters::try_process (116 samples, 9.26%)</title><rect x="23.4637%" y="693" width="9.2578%" height="15" fill="rgb(229,157,17)" fg:x="294" fg:w="116"/><text x="23.7137%" y="703.50">core::iter::a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (116 samples, 9.26%)</title><rect x="23.4637%" y="677" width="9.2578%" height="15" fill="rgb(230,5,48)" fg:x="294" fg:w="116"/><text x="23.7137%" y="687.50">&lt;alloc::vec::..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (113 samples, 9.02%)</title><rect x="23.7031%" y="661" width="9.0184%" height="15" fill="rgb(224,156,48)" fg:x="297" fg:w="113"/><text x="23.9531%" y="671.50">engine::sessi..</text></g><g><title>kernel::model::any_entity_changes (84 samples, 6.70%)</title><rect x="26.0176%" y="645" width="6.7039%" height="15" fill="rgb(223,14,29)" fg:x="326" fg:w="84"/><text x="26.2676%" y="655.50">kernel::m..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (22 samples, 1.76%)</title><rect x="30.9657%" y="629" width="1.7558%" height="15" fill="rgb(229,96,36)" fg:x="388" fg:w="22"/><text x="31.2157%" y="639.50"></text></g><g><title>serde_json::de::from_trait (22 samples, 1.76%)</title><rect x="30.9657%" y="613" width="1.7558%" height="15" fill="rgb(231,102,53)" fg:x="388" fg:w="22"/><text x="31.2157%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (22 samples, 1.76%)</title><rect x="30.9657%" y="597" width="1.7558%" height="15" fill="rgb(210,77,38)" fg:x="388" fg:w="22"/><text x="31.2157%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (22 samples, 1.76%)</title><rect x="30.9657%" y="581" width="1.7558%" height="15" fill="rgb(235,131,6)" fg:x="388" fg:w="22"/><text x="31.2157%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="32.5619%" y="565" width="0.1596%" height="15" fill="rgb(252,55,38)" fg:x="408" fg:w="2"/><text x="32.8119%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.6417%" y="549" width="0.0798%" height="15" fill="rgb(246,38,14)" fg:x="409" fg:w="1"/><text x="32.8917%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.6417%" y="533" width="0.0798%" height="15" fill="rgb(242,27,5)" fg:x="409" fg:w="1"/><text x="32.8917%" y="543.50"></text></g><g><title>engine::session::state::State::size (1 samples, 0.08%)</title><rect x="32.7215%" y="725" width="0.0798%" height="15" fill="rgb(228,65,35)" fg:x="410" fg:w="1"/><text x="32.9715%" y="735.50"></text></g><g><title>engine::session::Session::close (128 samples, 10.22%)</title><rect x="22.7454%" y="741" width="10.2155%" height="15" fill="rgb(245,93,11)" fg:x="285" fg:w="128"/><text x="22.9954%" y="751.50">engine::session..</text></g><g><title>kernel::plugins::SessionPlugins::stop (2 samples, 0.16%)</title><rect x="32.8013%" y="725" width="0.1596%" height="15" fill="rgb(213,1,31)" fg:x="411" fg:w="2"/><text x="33.0513%" y="735.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="33.2801%" y="613" width="0.0798%" height="15" fill="rgb(237,205,14)" fg:x="417" fg:w="1"/><text x="33.5301%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="33.2801%" y="597" width="0.0798%" height="15" fill="rgb(232,118,45)" fg:x="417" fg:w="1"/><text x="33.5301%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.2801%" y="581" width="0.0798%" height="15" fill="rgb(218,5,6)" fg:x="417" fg:w="1"/><text x="33.5301%" y="591.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (5 samples, 0.40%)</title><rect x="33.0407%" y="709" width="0.3990%" height="15" fill="rgb(251,87,51)" fg:x="414" fg:w="5"/><text x="33.2907%" y="719.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.40%)</title><rect x="33.0407%" y="693" width="0.3990%" height="15" fill="rgb(207,225,20)" fg:x="414" fg:w="5"/><text x="33.2907%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="33.1205%" y="677" width="0.3192%" height="15" fill="rgb(222,78,54)" fg:x="415" fg:w="4"/><text x="33.3705%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="33.1205%" y="661" width="0.3192%" height="15" fill="rgb(232,85,16)" fg:x="415" fg:w="4"/><text x="33.3705%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="33.2003%" y="645" width="0.2394%" height="15" fill="rgb(244,25,33)" fg:x="416" fg:w="3"/><text x="33.4503%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="33.2003%" y="629" width="0.2394%" height="15" fill="rgb(233,24,36)" fg:x="416" fg:w="3"/><text x="33.4503%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="33.3599%" y="613" width="0.0798%" height="15" fill="rgb(253,49,54)" fg:x="418" fg:w="1"/><text x="33.6099%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="33.4397%" y="709" width="0.0798%" height="15" fill="rgb(245,12,22)" fg:x="419" fg:w="1"/><text x="33.6897%" y="719.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.4397%" y="693" width="0.0798%" height="15" fill="rgb(253,141,28)" fg:x="419" fg:w="1"/><text x="33.6897%" y="703.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="33.5196%" y="693" width="0.0798%" height="15" fill="rgb(225,207,27)" fg:x="420" fg:w="1"/><text x="33.7696%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="33.5196%" y="677" width="0.0798%" height="15" fill="rgb(220,84,2)" fg:x="420" fg:w="1"/><text x="33.7696%" y="687.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="33.5196%" y="661" width="0.0798%" height="15" fill="rgb(224,37,37)" fg:x="420" fg:w="1"/><text x="33.7696%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="33.5196%" y="645" width="0.0798%" height="15" fill="rgb(220,143,18)" fg:x="420" fg:w="1"/><text x="33.7696%" y="655.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="33.5196%" y="629" width="0.0798%" height="15" fill="rgb(210,88,33)" fg:x="420" fg:w="1"/><text x="33.7696%" y="639.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (1 samples, 0.08%)</title><rect x="33.5196%" y="613" width="0.0798%" height="15" fill="rgb(219,87,51)" fg:x="420" fg:w="1"/><text x="33.7696%" y="623.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="33.5196%" y="597" width="0.0798%" height="15" fill="rgb(211,7,35)" fg:x="420" fg:w="1"/><text x="33.7696%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="33.5196%" y="581" width="0.0798%" height="15" fill="rgb(232,77,2)" fg:x="420" fg:w="1"/><text x="33.7696%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="33.5196%" y="565" width="0.0798%" height="15" fill="rgb(249,94,25)" fg:x="420" fg:w="1"/><text x="33.7696%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="33.5196%" y="549" width="0.0798%" height="15" fill="rgb(215,112,2)" fg:x="420" fg:w="1"/><text x="33.7696%" y="559.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="33.5196%" y="533" width="0.0798%" height="15" fill="rgb(226,115,48)" fg:x="420" fg:w="1"/><text x="33.7696%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="33.5196%" y="517" width="0.0798%" height="15" fill="rgb(249,196,10)" fg:x="420" fg:w="1"/><text x="33.7696%" y="527.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="33.5196%" y="501" width="0.0798%" height="15" fill="rgb(237,109,14)" fg:x="420" fg:w="1"/><text x="33.7696%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="33.5196%" y="485" width="0.0798%" height="15" fill="rgb(217,103,53)" fg:x="420" fg:w="1"/><text x="33.7696%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="33.5196%" y="469" width="0.0798%" height="15" fill="rgb(244,137,9)" fg:x="420" fg:w="1"/><text x="33.7696%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="33.5196%" y="453" width="0.0798%" height="15" fill="rgb(227,201,3)" fg:x="420" fg:w="1"/><text x="33.7696%" y="463.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="33.5994%" y="677" width="0.0798%" height="15" fill="rgb(243,94,6)" fg:x="421" fg:w="1"/><text x="33.8494%" y="687.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (5 samples, 0.40%)</title><rect x="33.6792%" y="677" width="0.3990%" height="15" fill="rgb(235,118,5)" fg:x="422" fg:w="5"/><text x="33.9292%" y="687.50"></text></g><g><title>tracing_core::callsite::register_dispatch (5 samples, 0.40%)</title><rect x="33.6792%" y="661" width="0.3990%" height="15" fill="rgb(247,10,30)" fg:x="422" fg:w="5"/><text x="33.9292%" y="671.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (5 samples, 0.40%)</title><rect x="33.6792%" y="645" width="0.3990%" height="15" fill="rgb(205,26,28)" fg:x="422" fg:w="5"/><text x="33.9292%" y="655.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (3 samples, 0.24%)</title><rect x="33.8388%" y="629" width="0.2394%" height="15" fill="rgb(206,99,35)" fg:x="424" fg:w="3"/><text x="34.0888%" y="639.50"></text></g><g><title>tracing_core::subscriber::Subscriber::register_callsite (1 samples, 0.08%)</title><rect x="33.9984%" y="613" width="0.0798%" height="15" fill="rgb(238,130,40)" fg:x="426" fg:w="1"/><text x="34.2484%" y="623.50"></text></g><g><title>&lt;engine::session::logs::SessionSubscriber as tracing_core::subscriber::Subscriber&gt;::enabled (1 samples, 0.08%)</title><rect x="33.9984%" y="597" width="0.0798%" height="15" fill="rgb(224,126,31)" fg:x="426" fg:w="1"/><text x="34.2484%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.1580%" y="629" width="0.0798%" height="15" fill="rgb(254,105,17)" fg:x="428" fg:w="1"/><text x="34.4080%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="34.2378%" y="549" width="0.0798%" height="15" fill="rgb(216,87,36)" fg:x="429" fg:w="1"/><text x="34.4878%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="34.2378%" y="533" width="0.0798%" height="15" fill="rgb(240,21,12)" fg:x="429" fg:w="1"/><text x="34.4878%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="34.2378%" y="517" width="0.0798%" height="15" fill="rgb(245,192,34)" fg:x="429" fg:w="1"/><text x="34.4878%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="34.2378%" y="501" width="0.0798%" height="15" fill="rgb(226,100,49)" fg:x="429" fg:w="1"/><text x="34.4878%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="34.2378%" y="485" width="0.0798%" height="15" fill="rgb(245,188,27)" fg:x="429" fg:w="1"/><text x="34.4878%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="34.2378%" y="469" width="0.0798%" height="15" fill="rgb(212,170,8)" fg:x="429" fg:w="1"/><text x="34.4878%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="34.2378%" y="453" width="0.0798%" height="15" fill="rgb(217,113,29)" fg:x="429" fg:w="1"/><text x="34.4878%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="34.2378%" y="437" width="0.0798%" height="15" fill="rgb(237,30,3)" fg:x="429" fg:w="1"/><text x="34.4878%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="34.2378%" y="421" width="0.0798%" height="15" fill="rgb(227,19,28)" fg:x="429" fg:w="1"/><text x="34.4878%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="34.2378%" y="405" width="0.0798%" height="15" fill="rgb(239,172,45)" fg:x="429" fg:w="1"/><text x="34.4878%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="34.2378%" y="389" width="0.0798%" height="15" fill="rgb(254,55,39)" fg:x="429" fg:w="1"/><text x="34.4878%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="34.2378%" y="373" width="0.0798%" height="15" fill="rgb(249,208,12)" fg:x="429" fg:w="1"/><text x="34.4878%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="34.2378%" y="357" width="0.0798%" height="15" fill="rgb(240,52,13)" fg:x="429" fg:w="1"/><text x="34.4878%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.2378%" y="341" width="0.0798%" height="15" fill="rgb(252,149,13)" fg:x="429" fg:w="1"/><text x="34.4878%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="34.2378%" y="565" width="0.1596%" height="15" fill="rgb(232,81,48)" fg:x="429" fg:w="2"/><text x="34.4878%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="34.3176%" y="549" width="0.0798%" height="15" fill="rgb(222,144,2)" fg:x="430" fg:w="1"/><text x="34.5676%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="34.3176%" y="533" width="0.0798%" height="15" fill="rgb(216,81,32)" fg:x="430" fg:w="1"/><text x="34.5676%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="34.3176%" y="517" width="0.0798%" height="15" fill="rgb(244,78,51)" fg:x="430" fg:w="1"/><text x="34.5676%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="34.3176%" y="501" width="0.0798%" height="15" fill="rgb(217,66,21)" fg:x="430" fg:w="1"/><text x="34.5676%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="34.3176%" y="485" width="0.0798%" height="15" fill="rgb(247,101,42)" fg:x="430" fg:w="1"/><text x="34.5676%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="34.3974%" y="501" width="0.1596%" height="15" fill="rgb(227,81,39)" fg:x="431" fg:w="2"/><text x="34.6474%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="34.3974%" y="485" width="0.1596%" height="15" fill="rgb(220,223,44)" fg:x="431" fg:w="2"/><text x="34.6474%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="34.4773%" y="469" width="0.0798%" height="15" fill="rgb(205,218,2)" fg:x="432" fg:w="1"/><text x="34.7273%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="34.4773%" y="453" width="0.0798%" height="15" fill="rgb(212,207,28)" fg:x="432" fg:w="1"/><text x="34.7273%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="34.4773%" y="437" width="0.0798%" height="15" fill="rgb(224,12,41)" fg:x="432" fg:w="1"/><text x="34.7273%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="34.4773%" y="421" width="0.0798%" height="15" fill="rgb(216,118,12)" fg:x="432" fg:w="1"/><text x="34.7273%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="34.5571%" y="501" width="0.0798%" height="15" fill="rgb(252,97,46)" fg:x="433" fg:w="1"/><text x="34.8071%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="34.5571%" y="485" width="0.0798%" height="15" fill="rgb(244,206,19)" fg:x="433" fg:w="1"/><text x="34.8071%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="34.5571%" y="469" width="0.0798%" height="15" fill="rgb(231,84,31)" fg:x="433" fg:w="1"/><text x="34.8071%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="34.5571%" y="453" width="0.0798%" height="15" fill="rgb(244,133,0)" fg:x="433" fg:w="1"/><text x="34.8071%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="34.5571%" y="437" width="0.0798%" height="15" fill="rgb(223,15,50)" fg:x="433" fg:w="1"/><text x="34.8071%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="34.5571%" y="421" width="0.0798%" height="15" fill="rgb(250,118,49)" fg:x="433" fg:w="1"/><text x="34.8071%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="34.5571%" y="405" width="0.0798%" height="15" fill="rgb(248,25,38)" fg:x="433" fg:w="1"/><text x="34.8071%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="34.5571%" y="389" width="0.0798%" height="15" fill="rgb(215,70,14)" fg:x="433" fg:w="1"/><text x="34.8071%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="34.5571%" y="373" width="0.0798%" height="15" fill="rgb(215,28,15)" fg:x="433" fg:w="1"/><text x="34.8071%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="34.5571%" y="357" width="0.0798%" height="15" fill="rgb(243,6,28)" fg:x="433" fg:w="1"/><text x="34.8071%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="34.5571%" y="341" width="0.0798%" height="15" fill="rgb(222,130,1)" fg:x="433" fg:w="1"/><text x="34.8071%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="34.5571%" y="325" width="0.0798%" height="15" fill="rgb(236,166,44)" fg:x="433" fg:w="1"/><text x="34.8071%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="34.5571%" y="309" width="0.0798%" height="15" fill="rgb(221,108,14)" fg:x="433" fg:w="1"/><text x="34.8071%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.5571%" y="293" width="0.0798%" height="15" fill="rgb(252,3,45)" fg:x="433" fg:w="1"/><text x="34.8071%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.6369%" y="453" width="0.0798%" height="15" fill="rgb(237,68,30)" fg:x="434" fg:w="1"/><text x="34.8869%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="34.7167%" y="421" width="0.0798%" height="15" fill="rgb(211,79,22)" fg:x="435" fg:w="1"/><text x="34.9667%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="34.7167%" y="405" width="0.0798%" height="15" fill="rgb(252,185,21)" fg:x="435" fg:w="1"/><text x="34.9667%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.7167%" y="389" width="0.0798%" height="15" fill="rgb(225,189,26)" fg:x="435" fg:w="1"/><text x="34.9667%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="34.7965%" y="309" width="0.0798%" height="15" fill="rgb(241,30,40)" fg:x="436" fg:w="1"/><text x="35.0465%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="34.7965%" y="293" width="0.0798%" height="15" fill="rgb(235,215,44)" fg:x="436" fg:w="1"/><text x="35.0465%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="34.7965%" y="277" width="0.0798%" height="15" fill="rgb(205,8,29)" fg:x="436" fg:w="1"/><text x="35.0465%" y="287.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="34.7965%" y="373" width="0.1596%" height="15" fill="rgb(241,137,42)" fg:x="436" fg:w="2"/><text x="35.0465%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="34.7965%" y="357" width="0.1596%" height="15" fill="rgb(237,155,2)" fg:x="436" fg:w="2"/><text x="35.0465%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="34.7965%" y="341" width="0.1596%" height="15" fill="rgb(245,29,42)" fg:x="436" fg:w="2"/><text x="35.0465%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="34.7965%" y="325" width="0.1596%" height="15" fill="rgb(234,101,35)" fg:x="436" fg:w="2"/><text x="35.0465%" y="335.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="34.8763%" y="309" width="0.0798%" height="15" fill="rgb(228,64,37)" fg:x="437" fg:w="1"/><text x="35.1263%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="34.7965%" y="405" width="0.2394%" height="15" fill="rgb(217,214,36)" fg:x="436" fg:w="3"/><text x="35.0465%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="34.7965%" y="389" width="0.2394%" height="15" fill="rgb(243,70,3)" fg:x="436" fg:w="3"/><text x="35.0465%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="34.9561%" y="373" width="0.0798%" height="15" fill="rgb(253,158,52)" fg:x="438" fg:w="1"/><text x="35.2061%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.40%)</title><rect x="34.7167%" y="453" width="0.3990%" height="15" fill="rgb(234,111,54)" fg:x="435" fg:w="5"/><text x="34.9667%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="34.7167%" y="437" width="0.3990%" height="15" fill="rgb(217,70,32)" fg:x="435" fg:w="5"/><text x="34.9667%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="34.7965%" y="421" width="0.3192%" height="15" fill="rgb(234,18,33)" fg:x="436" fg:w="4"/><text x="35.0465%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="35.0359%" y="405" width="0.0798%" height="15" fill="rgb(234,12,49)" fg:x="439" fg:w="1"/><text x="35.2859%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="35.0359%" y="389" width="0.0798%" height="15" fill="rgb(236,10,21)" fg:x="439" fg:w="1"/><text x="35.2859%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="35.0359%" y="373" width="0.0798%" height="15" fill="rgb(248,182,45)" fg:x="439" fg:w="1"/><text x="35.2859%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="35.0359%" y="357" width="0.0798%" height="15" fill="rgb(217,95,36)" fg:x="439" fg:w="1"/><text x="35.2859%" y="367.50"></text></g><g><title>kernel::model::entity::Entity::from_value (7 samples, 0.56%)</title><rect x="34.6369%" y="501" width="0.5587%" height="15" fill="rgb(212,110,31)" fg:x="434" fg:w="7"/><text x="34.8869%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (7 samples, 0.56%)</title><rect x="34.6369%" y="485" width="0.5587%" height="15" fill="rgb(206,32,53)" fg:x="434" fg:w="7"/><text x="34.8869%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.56%)</title><rect x="34.6369%" y="469" width="0.5587%" height="15" fill="rgb(246,141,37)" fg:x="434" fg:w="7"/><text x="34.8869%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="35.1157%" y="453" width="0.0798%" height="15" fill="rgb(219,16,7)" fg:x="440" fg:w="1"/><text x="35.3657%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="35.1157%" y="437" width="0.0798%" height="15" fill="rgb(230,205,45)" fg:x="440" fg:w="1"/><text x="35.3657%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="35.1157%" y="421" width="0.0798%" height="15" fill="rgb(231,43,49)" fg:x="440" fg:w="1"/><text x="35.3657%" y="431.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (13 samples, 1.04%)</title><rect x="34.2378%" y="581" width="1.0375%" height="15" fill="rgb(212,106,34)" fg:x="429" fg:w="13"/><text x="34.4878%" y="591.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (11 samples, 0.88%)</title><rect x="34.3974%" y="565" width="0.8779%" height="15" fill="rgb(206,83,17)" fg:x="431" fg:w="11"/><text x="34.6474%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (11 samples, 0.88%)</title><rect x="34.3974%" y="549" width="0.8779%" height="15" fill="rgb(244,154,49)" fg:x="431" fg:w="11"/><text x="34.6474%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (11 samples, 0.88%)</title><rect x="34.3974%" y="533" width="0.8779%" height="15" fill="rgb(244,149,49)" fg:x="431" fg:w="11"/><text x="34.6474%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (11 samples, 0.88%)</title><rect x="34.3974%" y="517" width="0.8779%" height="15" fill="rgb(227,134,18)" fg:x="431" fg:w="11"/><text x="34.6474%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="35.1955%" y="501" width="0.0798%" height="15" fill="rgb(237,116,36)" fg:x="441" fg:w="1"/><text x="35.4455%" y="511.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="35.1955%" y="485" width="0.0798%" height="15" fill="rgb(205,129,40)" fg:x="441" fg:w="1"/><text x="35.4455%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="35.1955%" y="469" width="0.0798%" height="15" fill="rgb(236,178,4)" fg:x="441" fg:w="1"/><text x="35.4455%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="35.1955%" y="453" width="0.0798%" height="15" fill="rgb(251,76,53)" fg:x="441" fg:w="1"/><text x="35.4455%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="35.1955%" y="437" width="0.0798%" height="15" fill="rgb(242,92,40)" fg:x="441" fg:w="1"/><text x="35.4455%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="35.1955%" y="421" width="0.0798%" height="15" fill="rgb(209,45,30)" fg:x="441" fg:w="1"/><text x="35.4455%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="35.1955%" y="405" width="0.0798%" height="15" fill="rgb(218,157,36)" fg:x="441" fg:w="1"/><text x="35.4455%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="35.1955%" y="389" width="0.0798%" height="15" fill="rgb(222,186,16)" fg:x="441" fg:w="1"/><text x="35.4455%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="35.1955%" y="373" width="0.0798%" height="15" fill="rgb(254,72,35)" fg:x="441" fg:w="1"/><text x="35.4455%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="35.1955%" y="357" width="0.0798%" height="15" fill="rgb(224,25,35)" fg:x="441" fg:w="1"/><text x="35.4455%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="35.1955%" y="341" width="0.0798%" height="15" fill="rgb(206,135,52)" fg:x="441" fg:w="1"/><text x="35.4455%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="35.1955%" y="325" width="0.0798%" height="15" fill="rgb(229,174,47)" fg:x="441" fg:w="1"/><text x="35.4455%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.1955%" y="309" width="0.0798%" height="15" fill="rgb(242,184,21)" fg:x="441" fg:w="1"/><text x="35.4455%" y="319.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (14 samples, 1.12%)</title><rect x="34.2378%" y="597" width="1.1173%" height="15" fill="rgb(213,22,45)" fg:x="429" fg:w="14"/><text x="34.4878%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="35.2753%" y="581" width="0.0798%" height="15" fill="rgb(237,81,54)" fg:x="442" fg:w="1"/><text x="35.5253%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.4350%" y="357" width="0.0798%" height="15" fill="rgb(248,177,18)" fg:x="444" fg:w="1"/><text x="35.6850%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="35.5148%" y="357" width="0.0798%" height="15" fill="rgb(254,31,16)" fg:x="445" fg:w="1"/><text x="35.7648%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="35.5148%" y="341" width="0.0798%" height="15" fill="rgb(235,20,31)" fg:x="445" fg:w="1"/><text x="35.7648%" y="351.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="35.5148%" y="325" width="0.0798%" height="15" fill="rgb(240,56,43)" fg:x="445" fg:w="1"/><text x="35.7648%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="35.5946%" y="357" width="0.0798%" height="15" fill="rgb(237,197,51)" fg:x="446" fg:w="1"/><text x="35.8446%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="35.5946%" y="341" width="0.0798%" height="15" fill="rgb(241,162,44)" fg:x="446" fg:w="1"/><text x="35.8446%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="35.5946%" y="325" width="0.0798%" height="15" fill="rgb(224,23,20)" fg:x="446" fg:w="1"/><text x="35.8446%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="35.5946%" y="309" width="0.0798%" height="15" fill="rgb(250,109,34)" fg:x="446" fg:w="1"/><text x="35.8446%" y="319.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="35.5946%" y="293" width="0.0798%" height="15" fill="rgb(214,175,50)" fg:x="446" fg:w="1"/><text x="35.8446%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="35.6744%" y="341" width="0.0798%" height="15" fill="rgb(213,182,5)" fg:x="447" fg:w="1"/><text x="35.9244%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.6744%" y="325" width="0.0798%" height="15" fill="rgb(209,199,19)" fg:x="447" fg:w="1"/><text x="35.9244%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="35.7542%" y="293" width="0.0798%" height="15" fill="rgb(236,224,42)" fg:x="448" fg:w="1"/><text x="36.0042%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (2 samples, 0.16%)</title><rect x="35.7542%" y="325" width="0.1596%" height="15" fill="rgb(246,226,29)" fg:x="448" fg:w="2"/><text x="36.0042%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="35.7542%" y="309" width="0.1596%" height="15" fill="rgb(227,223,11)" fg:x="448" fg:w="2"/><text x="36.0042%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="35.8340%" y="293" width="0.0798%" height="15" fill="rgb(219,7,51)" fg:x="449" fg:w="1"/><text x="36.0840%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.8340%" y="277" width="0.0798%" height="15" fill="rgb(245,167,10)" fg:x="449" fg:w="1"/><text x="36.0840%" y="287.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (7 samples, 0.56%)</title><rect x="35.4350%" y="389" width="0.5587%" height="15" fill="rgb(237,224,16)" fg:x="444" fg:w="7"/><text x="35.6850%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.56%)</title><rect x="35.4350%" y="373" width="0.5587%" height="15" fill="rgb(226,132,13)" fg:x="444" fg:w="7"/><text x="35.6850%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="35.6744%" y="357" width="0.3192%" height="15" fill="rgb(214,140,3)" fg:x="447" fg:w="4"/><text x="35.9244%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (3 samples, 0.24%)</title><rect x="35.7542%" y="341" width="0.2394%" height="15" fill="rgb(221,177,4)" fg:x="448" fg:w="3"/><text x="36.0042%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_struct_variant (1 samples, 0.08%)</title><rect x="35.9138%" y="325" width="0.0798%" height="15" fill="rgb(238,139,3)" fg:x="450" fg:w="1"/><text x="36.1638%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.9138%" y="309" width="0.0798%" height="15" fill="rgb(216,17,39)" fg:x="450" fg:w="1"/><text x="36.1638%" y="319.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (8 samples, 0.64%)</title><rect x="35.4350%" y="421" width="0.6385%" height="15" fill="rgb(238,120,9)" fg:x="444" fg:w="8"/><text x="35.6850%" y="431.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (8 samples, 0.64%)</title><rect x="35.4350%" y="405" width="0.6385%" height="15" fill="rgb(244,92,53)" fg:x="444" fg:w="8"/><text x="35.6850%" y="415.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="35.9936%" y="389" width="0.0798%" height="15" fill="rgb(224,148,33)" fg:x="451" fg:w="1"/><text x="36.2436%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="36.2330%" y="389" width="0.1596%" height="15" fill="rgb(243,6,36)" fg:x="454" fg:w="2"/><text x="36.4830%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="36.2330%" y="373" width="0.1596%" height="15" fill="rgb(230,102,11)" fg:x="454" fg:w="2"/><text x="36.4830%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="36.2330%" y="357" width="0.1596%" height="15" fill="rgb(234,148,36)" fg:x="454" fg:w="2"/><text x="36.4830%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="36.2330%" y="341" width="0.1596%" height="15" fill="rgb(251,153,25)" fg:x="454" fg:w="2"/><text x="36.4830%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="36.2330%" y="325" width="0.1596%" height="15" fill="rgb(215,129,8)" fg:x="454" fg:w="2"/><text x="36.4830%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="36.2330%" y="309" width="0.1596%" height="15" fill="rgb(224,128,35)" fg:x="454" fg:w="2"/><text x="36.4830%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="36.2330%" y="293" width="0.1596%" height="15" fill="rgb(237,56,52)" fg:x="454" fg:w="2"/><text x="36.4830%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.3128%" y="277" width="0.0798%" height="15" fill="rgb(234,213,19)" fg:x="455" fg:w="1"/><text x="36.5628%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="36.3927%" y="357" width="0.0798%" height="15" fill="rgb(252,82,23)" fg:x="456" fg:w="1"/><text x="36.6427%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="36.3927%" y="341" width="0.0798%" height="15" fill="rgb(254,201,21)" fg:x="456" fg:w="1"/><text x="36.6427%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.6321%" y="325" width="0.0798%" height="15" fill="rgb(250,186,11)" fg:x="459" fg:w="1"/><text x="36.8821%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (7 samples, 0.56%)</title><rect x="36.3927%" y="373" width="0.5587%" height="15" fill="rgb(211,174,5)" fg:x="456" fg:w="7"/><text x="36.6427%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.48%)</title><rect x="36.4725%" y="357" width="0.4789%" height="15" fill="rgb(214,121,10)" fg:x="457" fg:w="6"/><text x="36.7225%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="36.4725%" y="341" width="0.4789%" height="15" fill="rgb(241,66,2)" fg:x="457" fg:w="6"/><text x="36.7225%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="36.7119%" y="325" width="0.2394%" height="15" fill="rgb(220,167,19)" fg:x="460" fg:w="3"/><text x="36.9619%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="36.7119%" y="309" width="0.2394%" height="15" fill="rgb(231,54,50)" fg:x="460" fg:w="3"/><text x="36.9619%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="36.8715%" y="293" width="0.0798%" height="15" fill="rgb(239,217,53)" fg:x="462" fg:w="1"/><text x="37.1215%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="36.8715%" y="277" width="0.0798%" height="15" fill="rgb(248,8,0)" fg:x="462" fg:w="1"/><text x="37.1215%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="36.9513%" y="373" width="0.0798%" height="15" fill="rgb(229,118,37)" fg:x="463" fg:w="1"/><text x="37.2013%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.9513%" y="357" width="0.0798%" height="15" fill="rgb(253,223,43)" fg:x="463" fg:w="1"/><text x="37.2013%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="37.0311%" y="373" width="0.0798%" height="15" fill="rgb(211,77,36)" fg:x="464" fg:w="1"/><text x="37.2811%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::desc (10 samples, 0.80%)</title><rect x="36.3927%" y="389" width="0.7981%" height="15" fill="rgb(219,3,53)" fg:x="456" fg:w="10"/><text x="36.6427%" y="399.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="37.1109%" y="373" width="0.0798%" height="15" fill="rgb(244,45,42)" fg:x="465" fg:w="1"/><text x="37.3609%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="37.2706%" y="357" width="0.1596%" height="15" fill="rgb(225,95,27)" fg:x="467" fg:w="2"/><text x="37.5206%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="37.3504%" y="341" width="0.0798%" height="15" fill="rgb(207,74,8)" fg:x="468" fg:w="1"/><text x="37.6004%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="37.3504%" y="325" width="0.0798%" height="15" fill="rgb(243,63,36)" fg:x="468" fg:w="1"/><text x="37.6004%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="37.4302%" y="357" width="0.0798%" height="15" fill="rgb(211,180,12)" fg:x="469" fg:w="1"/><text x="37.6802%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="37.5100%" y="357" width="0.0798%" height="15" fill="rgb(254,166,49)" fg:x="470" fg:w="1"/><text x="37.7600%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.5100%" y="341" width="0.0798%" height="15" fill="rgb(205,19,0)" fg:x="470" fg:w="1"/><text x="37.7600%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="37.6696%" y="293" width="0.0798%" height="15" fill="rgb(224,172,32)" fg:x="472" fg:w="1"/><text x="37.9196%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (7 samples, 0.56%)</title><rect x="37.2706%" y="373" width="0.5587%" height="15" fill="rgb(254,136,30)" fg:x="467" fg:w="7"/><text x="37.5206%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="37.5898%" y="357" width="0.2394%" height="15" fill="rgb(246,19,35)" fg:x="471" fg:w="3"/><text x="37.8398%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="37.5898%" y="341" width="0.2394%" height="15" fill="rgb(219,24,36)" fg:x="471" fg:w="3"/><text x="37.8398%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="37.5898%" y="325" width="0.2394%" height="15" fill="rgb(251,55,1)" fg:x="471" fg:w="3"/><text x="37.8398%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="37.5898%" y="309" width="0.2394%" height="15" fill="rgb(218,117,39)" fg:x="471" fg:w="3"/><text x="37.8398%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="37.7494%" y="293" width="0.0798%" height="15" fill="rgb(248,169,11)" fg:x="473" fg:w="1"/><text x="37.9994%" y="303.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (9 samples, 0.72%)</title><rect x="37.1907%" y="389" width="0.7183%" height="15" fill="rgb(244,40,44)" fg:x="466" fg:w="9"/><text x="37.4407%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.8292%" y="373" width="0.0798%" height="15" fill="rgb(234,62,37)" fg:x="474" fg:w="1"/><text x="38.0792%" y="383.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="37.9090%" y="389" width="0.0798%" height="15" fill="rgb(207,117,42)" fg:x="475" fg:w="1"/><text x="38.1590%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="37.9090%" y="373" width="0.0798%" height="15" fill="rgb(213,43,2)" fg:x="475" fg:w="1"/><text x="38.1590%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="38.0686%" y="341" width="0.2394%" height="15" fill="rgb(244,202,51)" fg:x="477" fg:w="3"/><text x="38.3186%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="38.0686%" y="325" width="0.2394%" height="15" fill="rgb(253,174,46)" fg:x="477" fg:w="3"/><text x="38.3186%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.2283%" y="309" width="0.0798%" height="15" fill="rgb(251,23,1)" fg:x="479" fg:w="1"/><text x="38.4783%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="38.0686%" y="357" width="0.3192%" height="15" fill="rgb(253,26,1)" fg:x="477" fg:w="4"/><text x="38.3186%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.3081%" y="341" width="0.0798%" height="15" fill="rgb(216,89,31)" fg:x="480" fg:w="1"/><text x="38.5581%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="38.3879%" y="357" width="0.0798%" height="15" fill="rgb(209,109,5)" fg:x="481" fg:w="1"/><text x="38.6379%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.3879%" y="341" width="0.0798%" height="15" fill="rgb(229,63,13)" fg:x="481" fg:w="1"/><text x="38.6379%" y="351.50"></text></g><g><title>kernel::model::EntityPtr::gid (9 samples, 0.72%)</title><rect x="37.9888%" y="389" width="0.7183%" height="15" fill="rgb(238,137,54)" fg:x="476" fg:w="9"/><text x="38.2388%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (9 samples, 0.72%)</title><rect x="37.9888%" y="373" width="0.7183%" height="15" fill="rgb(228,1,9)" fg:x="476" fg:w="9"/><text x="38.2388%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="38.4677%" y="357" width="0.2394%" height="15" fill="rgb(249,120,48)" fg:x="482" fg:w="3"/><text x="38.7177%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="38.4677%" y="341" width="0.2394%" height="15" fill="rgb(209,72,36)" fg:x="482" fg:w="3"/><text x="38.7177%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="38.4677%" y="325" width="0.2394%" height="15" fill="rgb(247,98,49)" fg:x="482" fg:w="3"/><text x="38.7177%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="38.5475%" y="309" width="0.1596%" height="15" fill="rgb(233,75,36)" fg:x="483" fg:w="2"/><text x="38.7975%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="38.6273%" y="293" width="0.0798%" height="15" fill="rgb(225,14,24)" fg:x="484" fg:w="1"/><text x="38.8773%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="38.6273%" y="277" width="0.0798%" height="15" fill="rgb(237,193,20)" fg:x="484" fg:w="1"/><text x="38.8773%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="39.1061%" y="245" width="0.1596%" height="15" fill="rgb(239,122,19)" fg:x="490" fg:w="2"/><text x="39.3561%" y="255.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="39.1860%" y="229" width="0.0798%" height="15" fill="rgb(231,220,10)" fg:x="491" fg:w="1"/><text x="39.4360%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="38.9465%" y="309" width="0.3990%" height="15" fill="rgb(220,66,15)" fg:x="488" fg:w="5"/><text x="39.1965%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="38.9465%" y="293" width="0.3990%" height="15" fill="rgb(215,171,52)" fg:x="488" fg:w="5"/><text x="39.1965%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (5 samples, 0.40%)</title><rect x="38.9465%" y="277" width="0.3990%" height="15" fill="rgb(241,169,50)" fg:x="488" fg:w="5"/><text x="39.1965%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (5 samples, 0.40%)</title><rect x="38.9465%" y="261" width="0.3990%" height="15" fill="rgb(236,189,0)" fg:x="488" fg:w="5"/><text x="39.1965%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="39.2658%" y="245" width="0.0798%" height="15" fill="rgb(217,147,20)" fg:x="492" fg:w="1"/><text x="39.5158%" y="255.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="39.2658%" y="229" width="0.0798%" height="15" fill="rgb(206,188,39)" fg:x="492" fg:w="1"/><text x="39.5158%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.3456%" y="261" width="0.0798%" height="15" fill="rgb(227,118,25)" fg:x="493" fg:w="1"/><text x="39.5956%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="39.4254%" y="261" width="0.0798%" height="15" fill="rgb(248,171,40)" fg:x="494" fg:w="1"/><text x="39.6754%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.4254%" y="245" width="0.0798%" height="15" fill="rgb(251,90,54)" fg:x="494" fg:w="1"/><text x="39.6754%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.4254%" y="229" width="0.0798%" height="15" fill="rgb(234,11,46)" fg:x="494" fg:w="1"/><text x="39.6754%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="39.5052%" y="261" width="0.0798%" height="15" fill="rgb(229,134,13)" fg:x="495" fg:w="1"/><text x="39.7552%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="39.5052%" y="245" width="0.0798%" height="15" fill="rgb(223,129,3)" fg:x="495" fg:w="1"/><text x="39.7552%" y="255.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="39.7446%" y="245" width="0.1596%" height="15" fill="rgb(221,124,13)" fg:x="498" fg:w="2"/><text x="39.9946%" y="255.50"></text></g><g><title>__libc_free (5 samples, 0.40%)</title><rect x="39.9840%" y="229" width="0.3990%" height="15" fill="rgb(234,3,18)" fg:x="501" fg:w="5"/><text x="40.2340%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (12 samples, 0.96%)</title><rect x="39.9042%" y="245" width="0.9577%" height="15" fill="rgb(249,199,20)" fg:x="500" fg:w="12"/><text x="40.1542%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.48%)</title><rect x="40.3831%" y="229" width="0.4789%" height="15" fill="rgb(224,134,6)" fg:x="506" fg:w="6"/><text x="40.6331%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="40.9417%" y="229" width="0.0798%" height="15" fill="rgb(254,83,26)" fg:x="513" fg:w="1"/><text x="41.1917%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (7 samples, 0.56%)</title><rect x="40.8619%" y="245" width="0.5587%" height="15" fill="rgb(217,88,9)" fg:x="512" fg:w="7"/><text x="41.1119%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="41.0215%" y="229" width="0.3990%" height="15" fill="rgb(225,73,2)" fg:x="514" fg:w="5"/><text x="41.2715%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (2 samples, 0.16%)</title><rect x="41.2610%" y="213" width="0.1596%" height="15" fill="rgb(226,44,39)" fg:x="517" fg:w="2"/><text x="41.5110%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="41.3408%" y="197" width="0.0798%" height="15" fill="rgb(228,53,17)" fg:x="518" fg:w="1"/><text x="41.5908%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="41.4206%" y="213" width="0.0798%" height="15" fill="rgb(212,27,27)" fg:x="519" fg:w="1"/><text x="41.6706%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.5802%" y="181" width="0.0798%" height="15" fill="rgb(241,50,6)" fg:x="521" fg:w="1"/><text x="41.8302%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="41.6600%" y="181" width="0.0798%" height="15" fill="rgb(225,28,51)" fg:x="522" fg:w="1"/><text x="41.9100%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="41.6600%" y="165" width="0.0798%" height="15" fill="rgb(215,33,16)" fg:x="522" fg:w="1"/><text x="41.9100%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.6600%" y="149" width="0.0798%" height="15" fill="rgb(243,40,39)" fg:x="522" fg:w="1"/><text x="41.9100%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="41.6600%" y="133" width="0.0798%" height="15" fill="rgb(225,11,42)" fg:x="522" fg:w="1"/><text x="41.9100%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="41.7398%" y="181" width="0.1596%" height="15" fill="rgb(241,220,38)" fg:x="523" fg:w="2"/><text x="41.9898%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="41.8196%" y="165" width="0.0798%" height="15" fill="rgb(244,52,35)" fg:x="524" fg:w="1"/><text x="42.0696%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.8196%" y="149" width="0.0798%" height="15" fill="rgb(246,42,46)" fg:x="524" fg:w="1"/><text x="42.0696%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="41.8196%" y="133" width="0.0798%" height="15" fill="rgb(205,184,13)" fg:x="524" fg:w="1"/><text x="42.0696%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="42.1389%" y="149" width="0.2394%" height="15" fill="rgb(209,48,36)" fg:x="528" fg:w="3"/><text x="42.3889%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="42.1389%" y="133" width="0.2394%" height="15" fill="rgb(244,34,51)" fg:x="528" fg:w="3"/><text x="42.3889%" y="143.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="42.2187%" y="117" width="0.1596%" height="15" fill="rgb(221,107,33)" fg:x="529" fg:w="2"/><text x="42.4687%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (7 samples, 0.56%)</title><rect x="41.8994%" y="181" width="0.5587%" height="15" fill="rgb(224,203,12)" fg:x="525" fg:w="7"/><text x="42.1494%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (5 samples, 0.40%)</title><rect x="42.0591%" y="165" width="0.3990%" height="15" fill="rgb(230,215,18)" fg:x="527" fg:w="5"/><text x="42.3091%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="42.3783%" y="149" width="0.0798%" height="15" fill="rgb(206,185,35)" fg:x="531" fg:w="1"/><text x="42.6283%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.3783%" y="133" width="0.0798%" height="15" fill="rgb(228,140,34)" fg:x="531" fg:w="1"/><text x="42.6283%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="42.4581%" y="181" width="0.0798%" height="15" fill="rgb(208,93,13)" fg:x="532" fg:w="1"/><text x="42.7081%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="42.4581%" y="165" width="0.0798%" height="15" fill="rgb(221,193,39)" fg:x="532" fg:w="1"/><text x="42.7081%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="42.4581%" y="149" width="0.0798%" height="15" fill="rgb(241,132,34)" fg:x="532" fg:w="1"/><text x="42.7081%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.5379%" y="149" width="0.0798%" height="15" fill="rgb(221,141,10)" fg:x="533" fg:w="1"/><text x="42.7879%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (45 samples, 3.59%)</title><rect x="42.6177%" y="149" width="3.5914%" height="15" fill="rgb(226,90,31)" fg:x="534" fg:w="45"/><text x="42.8677%" y="159.50">allo..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (47 samples, 3.75%)</title><rect x="42.5379%" y="181" width="3.7510%" height="15" fill="rgb(243,75,5)" fg:x="533" fg:w="47"/><text x="42.7879%" y="191.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (47 samples, 3.75%)</title><rect x="42.5379%" y="165" width="3.7510%" height="15" fill="rgb(227,156,21)" fg:x="533" fg:w="47"/><text x="42.7879%" y="175.50">rege..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::sync::Arc&lt;str&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="46.2091%" y="149" width="0.0798%" height="15" fill="rgb(250,195,8)" fg:x="579" fg:w="1"/><text x="46.4591%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (5 samples, 0.40%)</title><rect x="46.2889%" y="181" width="0.3990%" height="15" fill="rgb(220,134,5)" fg:x="580" fg:w="5"/><text x="46.5389%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="46.6081%" y="165" width="0.0798%" height="15" fill="rgb(246,106,34)" fg:x="584" fg:w="1"/><text x="46.8581%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (67 samples, 5.35%)</title><rect x="41.4206%" y="229" width="5.3472%" height="15" fill="rgb(205,1,4)" fg:x="519" fg:w="67"/><text x="41.6706%" y="239.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (66 samples, 5.27%)</title><rect x="41.5004%" y="213" width="5.2674%" height="15" fill="rgb(224,151,29)" fg:x="520" fg:w="66"/><text x="41.7504%" y="223.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (66 samples, 5.27%)</title><rect x="41.5004%" y="197" width="5.2674%" height="15" fill="rgb(251,196,0)" fg:x="520" fg:w="66"/><text x="41.7504%" y="207.50">regex_..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="46.6879%" y="181" width="0.0798%" height="15" fill="rgb(212,127,0)" fg:x="585" fg:w="1"/><text x="46.9379%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="46.6879%" y="165" width="0.0798%" height="15" fill="rgb(236,71,53)" fg:x="585" fg:w="1"/><text x="46.9379%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.6879%" y="149" width="0.0798%" height="15" fill="rgb(227,99,0)" fg:x="585" fg:w="1"/><text x="46.9379%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="46.6879%" y="133" width="0.0798%" height="15" fill="rgb(239,89,21)" fg:x="585" fg:w="1"/><text x="46.9379%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.7678%" y="213" width="0.0798%" height="15" fill="rgb(243,122,19)" fg:x="586" fg:w="1"/><text x="47.0178%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="46.8476%" y="213" width="0.0798%" height="15" fill="rgb(229,192,45)" fg:x="587" fg:w="1"/><text x="47.0976%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (6 samples, 0.48%)</title><rect x="46.9274%" y="213" width="0.4789%" height="15" fill="rgb(235,165,35)" fg:x="588" fg:w="6"/><text x="47.1774%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.48%)</title><rect x="46.9274%" y="197" width="0.4789%" height="15" fill="rgb(253,202,0)" fg:x="588" fg:w="6"/><text x="47.1774%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="47.0072%" y="181" width="0.3990%" height="15" fill="rgb(235,51,20)" fg:x="589" fg:w="5"/><text x="47.2572%" y="191.50"></text></g><g><title>realloc (5 samples, 0.40%)</title><rect x="47.0072%" y="165" width="0.3990%" height="15" fill="rgb(218,95,46)" fg:x="589" fg:w="5"/><text x="47.2572%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.88%)</title><rect x="46.7678%" y="229" width="0.8779%" height="15" fill="rgb(212,81,10)" fg:x="586" fg:w="11"/><text x="47.0178%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="47.4062%" y="213" width="0.2394%" height="15" fill="rgb(240,59,0)" fg:x="594" fg:w="3"/><text x="47.6562%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="47.6457%" y="229" width="0.0798%" height="15" fill="rgb(212,191,42)" fg:x="597" fg:w="1"/><text x="47.8957%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="47.6457%" y="213" width="0.0798%" height="15" fill="rgb(233,140,3)" fg:x="597" fg:w="1"/><text x="47.8957%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (80 samples, 6.38%)</title><rect x="41.4206%" y="245" width="6.3847%" height="15" fill="rgb(215,69,23)" fg:x="519" fg:w="80"/><text x="41.6706%" y="255.50">regex_au..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="47.7255%" y="229" width="0.0798%" height="15" fill="rgb(240,202,20)" fg:x="598" fg:w="1"/><text x="47.9755%" y="239.50"></text></g><g><title>regex_syntax::hir::ClassBytes::empty (1 samples, 0.08%)</title><rect x="47.7255%" y="213" width="0.0798%" height="15" fill="rgb(209,146,50)" fg:x="598" fg:w="1"/><text x="47.9755%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (105 samples, 8.38%)</title><rect x="39.5850%" y="261" width="8.3799%" height="15" fill="rgb(253,102,54)" fg:x="496" fg:w="105"/><text x="39.8350%" y="271.50">regex_automa..</text></g><g><title>regex_automata::util::prefilter::prefixes (2 samples, 0.16%)</title><rect x="47.8053%" y="245" width="0.1596%" height="15" fill="rgb(250,173,47)" fg:x="599" fg:w="2"/><text x="48.0553%" y="255.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (2 samples, 0.16%)</title><rect x="47.8053%" y="229" width="0.1596%" height="15" fill="rgb(232,142,7)" fg:x="599" fg:w="2"/><text x="48.0553%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.64%)</title><rect x="47.9649%" y="261" width="0.6385%" height="15" fill="rgb(230,157,47)" fg:x="601" fg:w="8"/><text x="48.2149%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.64%)</title><rect x="47.9649%" y="245" width="0.6385%" height="15" fill="rgb(214,177,35)" fg:x="601" fg:w="8"/><text x="48.2149%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.48%)</title><rect x="48.1245%" y="229" width="0.4789%" height="15" fill="rgb(234,119,46)" fg:x="603" fg:w="6"/><text x="48.3745%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (6 samples, 0.48%)</title><rect x="48.1245%" y="213" width="0.4789%" height="15" fill="rgb(241,180,50)" fg:x="603" fg:w="6"/><text x="48.3745%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="48.2043%" y="197" width="0.3990%" height="15" fill="rgb(221,54,25)" fg:x="604" fg:w="5"/><text x="48.4543%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="48.2043%" y="181" width="0.3990%" height="15" fill="rgb(209,157,44)" fg:x="604" fg:w="5"/><text x="48.4543%" y="191.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="48.2841%" y="165" width="0.3192%" height="15" fill="rgb(246,115,41)" fg:x="605" fg:w="4"/><text x="48.5341%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserBuilder::build (1 samples, 0.08%)</title><rect x="48.6034%" y="261" width="0.0798%" height="15" fill="rgb(229,86,1)" fg:x="609" fg:w="1"/><text x="48.8534%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::finish (1 samples, 0.08%)</title><rect x="48.7630%" y="229" width="0.0798%" height="15" fill="rgb(240,108,53)" fg:x="611" fg:w="1"/><text x="49.0130%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::HirFrame::unwrap_expr (1 samples, 0.08%)</title><rect x="48.7630%" y="213" width="0.0798%" height="15" fill="rgb(227,134,2)" fg:x="611" fg:w="1"/><text x="49.0130%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="48.8428%" y="213" width="0.1596%" height="15" fill="rgb(213,129,25)" fg:x="612" fg:w="2"/><text x="49.0928%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="48.8428%" y="197" width="0.1596%" height="15" fill="rgb(226,35,21)" fg:x="612" fg:w="2"/><text x="49.0928%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="49.0024%" y="213" width="0.0798%" height="15" fill="rgb(208,129,26)" fg:x="614" fg:w="1"/><text x="49.2524%" y="223.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="49.0024%" y="197" width="0.0798%" height="15" fill="rgb(224,83,6)" fg:x="614" fg:w="1"/><text x="49.2524%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="48.8428%" y="229" width="0.3192%" height="15" fill="rgb(227,52,39)" fg:x="612" fg:w="4"/><text x="49.0928%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="49.0822%" y="213" width="0.0798%" height="15" fill="rgb(241,30,17)" fg:x="615" fg:w="1"/><text x="49.3322%" y="223.50"></text></g><g><title>regex_syntax::unicode::perl_space (1 samples, 0.08%)</title><rect x="49.0822%" y="197" width="0.0798%" height="15" fill="rgb(246,186,42)" fg:x="615" fg:w="1"/><text x="49.3322%" y="207.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (124 samples, 9.90%)</title><rect x="39.3456%" y="277" width="9.8962%" height="15" fill="rgb(221,169,15)" fg:x="493" fg:w="124"/><text x="39.5956%" y="287.50">regex_automata..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (7 samples, 0.56%)</title><rect x="48.6832%" y="261" width="0.5587%" height="15" fill="rgb(235,108,21)" fg:x="610" fg:w="7"/><text x="48.9332%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (7 samples, 0.56%)</title><rect x="48.6832%" y="245" width="0.5587%" height="15" fill="rgb(219,148,30)" fg:x="610" fg:w="7"/><text x="48.9332%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="49.1620%" y="229" width="0.0798%" height="15" fill="rgb(220,109,5)" fg:x="616" fg:w="1"/><text x="49.4120%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="49.1620%" y="213" width="0.0798%" height="15" fill="rgb(213,203,48)" fg:x="616" fg:w="1"/><text x="49.4120%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (125 samples, 9.98%)</title><rect x="39.3456%" y="309" width="9.9761%" height="15" fill="rgb(244,71,33)" fg:x="493" fg:w="125"/><text x="39.5956%" y="319.50">&lt;regex::regex:..</text></g><g><title>regex::builders::string::RegexBuilder::build (125 samples, 9.98%)</title><rect x="39.3456%" y="293" width="9.9761%" height="15" fill="rgb(209,23,2)" fg:x="493" fg:w="125"/><text x="39.5956%" y="303.50">regex::builder..</text></g><g><title>regex_automata::util::syntax::Config::utf8 (1 samples, 0.08%)</title><rect x="49.2418%" y="277" width="0.0798%" height="15" fill="rgb(219,97,7)" fg:x="617" fg:w="1"/><text x="49.4918%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="49.3216%" y="277" width="0.0798%" height="15" fill="rgb(216,161,23)" fg:x="618" fg:w="1"/><text x="49.5716%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="49.3216%" y="261" width="0.0798%" height="15" fill="rgb(207,45,42)" fg:x="618" fg:w="1"/><text x="49.5716%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="49.3216%" y="245" width="0.0798%" height="15" fill="rgb(241,61,4)" fg:x="618" fg:w="1"/><text x="49.5716%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.3216%" y="229" width="0.0798%" height="15" fill="rgb(236,170,1)" fg:x="618" fg:w="1"/><text x="49.5716%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="49.4014%" y="261" width="0.0798%" height="15" fill="rgb(239,72,5)" fg:x="619" fg:w="1"/><text x="49.6514%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.4014%" y="245" width="0.0798%" height="15" fill="rgb(214,13,50)" fg:x="619" fg:w="1"/><text x="49.6514%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="49.4812%" y="261" width="0.0798%" height="15" fill="rgb(224,88,9)" fg:x="620" fg:w="1"/><text x="49.7312%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="49.4812%" y="245" width="0.0798%" height="15" fill="rgb(238,192,34)" fg:x="620" fg:w="1"/><text x="49.7312%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="49.3216%" y="309" width="0.3192%" height="15" fill="rgb(217,203,50)" fg:x="618" fg:w="4"/><text x="49.5716%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="49.3216%" y="293" width="0.3192%" height="15" fill="rgb(241,123,32)" fg:x="618" fg:w="4"/><text x="49.5716%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="49.4014%" y="277" width="0.2394%" height="15" fill="rgb(248,151,39)" fg:x="619" fg:w="3"/><text x="49.6514%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="49.5611%" y="261" width="0.0798%" height="15" fill="rgb(208,89,6)" fg:x="621" fg:w="1"/><text x="49.8111%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.5611%" y="245" width="0.0798%" height="15" fill="rgb(254,43,26)" fg:x="621" fg:w="1"/><text x="49.8111%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="50.1197%" y="229" width="0.0798%" height="15" fill="rgb(216,158,13)" fg:x="628" fg:w="1"/><text x="50.3697%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.1197%" y="213" width="0.0798%" height="15" fill="rgb(212,47,37)" fg:x="628" fg:w="1"/><text x="50.3697%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="50.1197%" y="197" width="0.0798%" height="15" fill="rgb(254,16,10)" fg:x="628" fg:w="1"/><text x="50.3697%" y="207.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (143 samples, 11.41%)</title><rect x="38.9465%" y="325" width="11.4126%" height="15" fill="rgb(223,228,16)" fg:x="488" fg:w="143"/><text x="39.1965%" y="335.50">indefinite::helpe..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (9 samples, 0.72%)</title><rect x="49.6409%" y="309" width="0.7183%" height="15" fill="rgb(249,108,50)" fg:x="622" fg:w="9"/><text x="49.8909%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (9 samples, 0.72%)</title><rect x="49.6409%" y="293" width="0.7183%" height="15" fill="rgb(208,220,5)" fg:x="622" fg:w="9"/><text x="49.8909%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (9 samples, 0.72%)</title><rect x="49.6409%" y="277" width="0.7183%" height="15" fill="rgb(217,89,48)" fg:x="622" fg:w="9"/><text x="49.8909%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.72%)</title><rect x="49.6409%" y="261" width="0.7183%" height="15" fill="rgb(212,113,41)" fg:x="622" fg:w="9"/><text x="49.8909%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.56%)</title><rect x="49.8005%" y="245" width="0.5587%" height="15" fill="rgb(231,127,5)" fg:x="624" fg:w="7"/><text x="50.0505%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="50.1995%" y="229" width="0.1596%" height="15" fill="rgb(217,141,17)" fg:x="629" fg:w="2"/><text x="50.4495%" y="239.50"></text></g><g><title>alloc::sync::arcinner_layout_for_value_layout (1 samples, 0.08%)</title><rect x="50.3591%" y="277" width="0.0798%" height="15" fill="rgb(245,125,54)" fg:x="631" fg:w="1"/><text x="50.6091%" y="287.50"></text></g><g><title>core::alloc::layout::Layout::extend (1 samples, 0.08%)</title><rect x="50.3591%" y="261" width="0.0798%" height="15" fill="rgb(248,125,3)" fg:x="631" fg:w="1"/><text x="50.6091%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="50.4389%" y="261" width="0.0798%" height="15" fill="rgb(236,119,51)" fg:x="632" fg:w="1"/><text x="50.6889%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="50.4389%" y="245" width="0.0798%" height="15" fill="rgb(239,99,8)" fg:x="632" fg:w="1"/><text x="50.6889%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="50.4389%" y="229" width="0.0798%" height="15" fill="rgb(224,228,4)" fg:x="632" fg:w="1"/><text x="50.6889%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="50.4389%" y="213" width="0.0798%" height="15" fill="rgb(220,131,45)" fg:x="632" fg:w="1"/><text x="50.6889%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.4389%" y="197" width="0.0798%" height="15" fill="rgb(215,62,5)" fg:x="632" fg:w="1"/><text x="50.6889%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="50.4389%" y="181" width="0.0798%" height="15" fill="rgb(253,12,24)" fg:x="632" fg:w="1"/><text x="50.6889%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="50.5188%" y="261" width="0.0798%" height="15" fill="rgb(248,120,50)" fg:x="633" fg:w="1"/><text x="50.7688%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="50.5986%" y="261" width="0.0798%" height="15" fill="rgb(245,194,10)" fg:x="634" fg:w="1"/><text x="50.8486%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="50.5986%" y="245" width="0.0798%" height="15" fill="rgb(241,149,38)" fg:x="634" fg:w="1"/><text x="50.8486%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="50.5986%" y="229" width="0.0798%" height="15" fill="rgb(219,215,7)" fg:x="634" fg:w="1"/><text x="50.8486%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="50.5986%" y="213" width="0.0798%" height="15" fill="rgb(208,120,31)" fg:x="634" fg:w="1"/><text x="50.8486%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="50.5986%" y="197" width="0.0798%" height="15" fill="rgb(244,30,8)" fg:x="634" fg:w="1"/><text x="50.8486%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="50.7582%" y="245" width="0.0798%" height="15" fill="rgb(238,35,44)" fg:x="636" fg:w="1"/><text x="51.0082%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="50.8380%" y="245" width="0.0798%" height="15" fill="rgb(243,218,37)" fg:x="637" fg:w="1"/><text x="51.0880%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="50.9178%" y="229" width="0.2394%" height="15" fill="rgb(218,169,10)" fg:x="638" fg:w="3"/><text x="51.1678%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (3 samples, 0.24%)</title><rect x="50.9178%" y="213" width="0.2394%" height="15" fill="rgb(221,144,10)" fg:x="638" fg:w="3"/><text x="51.1678%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="50.9976%" y="197" width="0.1596%" height="15" fill="rgb(226,41,38)" fg:x="639" fg:w="2"/><text x="51.2476%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="51.0774%" y="181" width="0.0798%" height="15" fill="rgb(228,3,1)" fg:x="640" fg:w="1"/><text x="51.3274%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="51.0774%" y="165" width="0.0798%" height="15" fill="rgb(209,129,12)" fg:x="640" fg:w="1"/><text x="51.3274%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="51.0774%" y="149" width="0.0798%" height="15" fill="rgb(213,136,33)" fg:x="640" fg:w="1"/><text x="51.3274%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.0774%" y="133" width="0.0798%" height="15" fill="rgb(209,181,29)" fg:x="640" fg:w="1"/><text x="51.3274%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="51.0774%" y="117" width="0.0798%" height="15" fill="rgb(234,173,18)" fg:x="640" fg:w="1"/><text x="51.3274%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="51.2370%" y="213" width="0.1596%" height="15" fill="rgb(227,73,47)" fg:x="642" fg:w="2"/><text x="51.4870%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (10 samples, 0.80%)</title><rect x="50.6784%" y="261" width="0.7981%" height="15" fill="rgb(234,9,34)" fg:x="635" fg:w="10"/><text x="50.9284%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (7 samples, 0.56%)</title><rect x="50.9178%" y="245" width="0.5587%" height="15" fill="rgb(235,172,15)" fg:x="638" fg:w="7"/><text x="51.1678%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="51.1572%" y="229" width="0.3192%" height="15" fill="rgb(245,61,2)" fg:x="641" fg:w="4"/><text x="51.4072%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="51.3966%" y="213" width="0.0798%" height="15" fill="rgb(238,39,47)" fg:x="644" fg:w="1"/><text x="51.6466%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="51.3966%" y="197" width="0.0798%" height="15" fill="rgb(234,37,24)" fg:x="644" fg:w="1"/><text x="51.6466%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="51.3966%" y="181" width="0.0798%" height="15" fill="rgb(248,223,24)" fg:x="644" fg:w="1"/><text x="51.6466%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.3966%" y="165" width="0.0798%" height="15" fill="rgb(223,12,15)" fg:x="644" fg:w="1"/><text x="51.6466%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.3966%" y="149" width="0.0798%" height="15" fill="rgb(249,6,3)" fg:x="644" fg:w="1"/><text x="51.6466%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="51.7159%" y="213" width="0.0798%" height="15" fill="rgb(237,105,33)" fg:x="648" fg:w="1"/><text x="51.9659%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="51.7159%" y="197" width="0.0798%" height="15" fill="rgb(252,208,35)" fg:x="648" fg:w="1"/><text x="51.9659%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="51.7159%" y="181" width="0.0798%" height="15" fill="rgb(215,181,35)" fg:x="648" fg:w="1"/><text x="51.9659%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="51.7159%" y="165" width="0.0798%" height="15" fill="rgb(246,212,3)" fg:x="648" fg:w="1"/><text x="51.9659%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.40%)</title><rect x="51.4765%" y="261" width="0.3990%" height="15" fill="rgb(247,156,24)" fg:x="645" fg:w="5"/><text x="51.7265%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="51.4765%" y="245" width="0.3990%" height="15" fill="rgb(248,9,31)" fg:x="645" fg:w="5"/><text x="51.7265%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="51.5563%" y="229" width="0.3192%" height="15" fill="rgb(234,26,45)" fg:x="646" fg:w="4"/><text x="51.8063%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="51.7957%" y="213" width="0.0798%" height="15" fill="rgb(249,11,32)" fg:x="649" fg:w="1"/><text x="52.0457%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="51.7957%" y="197" width="0.0798%" height="15" fill="rgb(249,162,33)" fg:x="649" fg:w="1"/><text x="52.0457%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.7957%" y="181" width="0.0798%" height="15" fill="rgb(232,4,32)" fg:x="649" fg:w="1"/><text x="52.0457%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.7957%" y="165" width="0.0798%" height="15" fill="rgb(212,5,45)" fg:x="649" fg:w="1"/><text x="52.0457%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (22 samples, 1.76%)</title><rect x="50.3591%" y="309" width="1.7558%" height="15" fill="rgb(227,95,13)" fg:x="631" fg:w="22"/><text x="50.6091%" y="319.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (22 samples, 1.76%)</title><rect x="50.3591%" y="293" width="1.7558%" height="15" fill="rgb(223,205,10)" fg:x="631" fg:w="22"/><text x="50.6091%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (21 samples, 1.68%)</title><rect x="50.4389%" y="277" width="1.6760%" height="15" fill="rgb(222,178,8)" fg:x="632" fg:w="21"/><text x="50.6889%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="51.8755%" y="261" width="0.2394%" height="15" fill="rgb(216,13,22)" fg:x="650" fg:w="3"/><text x="52.1255%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="51.8755%" y="245" width="0.2394%" height="15" fill="rgb(240,167,12)" fg:x="650" fg:w="3"/><text x="52.1255%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="51.8755%" y="229" width="0.2394%" height="15" fill="rgb(235,68,35)" fg:x="650" fg:w="3"/><text x="52.1255%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="51.9553%" y="213" width="0.1596%" height="15" fill="rgb(253,40,27)" fg:x="651" fg:w="2"/><text x="52.2053%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="52.1149%" y="277" width="0.0798%" height="15" fill="rgb(214,19,28)" fg:x="653" fg:w="1"/><text x="52.3649%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="52.1149%" y="261" width="0.0798%" height="15" fill="rgb(210,167,45)" fg:x="653" fg:w="1"/><text x="52.3649%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="52.1149%" y="245" width="0.0798%" height="15" fill="rgb(232,97,40)" fg:x="653" fg:w="1"/><text x="52.3649%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="52.1149%" y="229" width="0.0798%" height="15" fill="rgb(250,35,23)" fg:x="653" fg:w="1"/><text x="52.3649%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="52.1149%" y="309" width="0.3192%" height="15" fill="rgb(248,47,53)" fg:x="653" fg:w="4"/><text x="52.3649%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="52.1149%" y="293" width="0.3192%" height="15" fill="rgb(226,58,50)" fg:x="653" fg:w="4"/><text x="52.3649%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="52.1947%" y="277" width="0.2394%" height="15" fill="rgb(217,105,26)" fg:x="654" fg:w="3"/><text x="52.4447%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.24%)</title><rect x="52.1947%" y="261" width="0.2394%" height="15" fill="rgb(208,64,1)" fg:x="654" fg:w="3"/><text x="52.4447%" y="271.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="52.1947%" y="245" width="0.2394%" height="15" fill="rgb(214,80,1)" fg:x="654" fg:w="3"/><text x="52.4447%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="52.4342%" y="245" width="0.0798%" height="15" fill="rgb(206,175,26)" fg:x="657" fg:w="1"/><text x="52.6842%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="52.4342%" y="229" width="0.0798%" height="15" fill="rgb(235,156,37)" fg:x="657" fg:w="1"/><text x="52.6842%" y="239.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (33 samples, 2.63%)</title><rect x="50.3591%" y="325" width="2.6337%" height="15" fill="rgb(213,100,9)" fg:x="631" fg:w="33"/><text x="50.6091%" y="335.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.56%)</title><rect x="52.4342%" y="309" width="0.5587%" height="15" fill="rgb(241,15,13)" fg:x="657" fg:w="7"/><text x="52.6842%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.56%)</title><rect x="52.4342%" y="293" width="0.5587%" height="15" fill="rgb(205,97,43)" fg:x="657" fg:w="7"/><text x="52.6842%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.56%)</title><rect x="52.4342%" y="277" width="0.5587%" height="15" fill="rgb(216,106,32)" fg:x="657" fg:w="7"/><text x="52.6842%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.56%)</title><rect x="52.4342%" y="261" width="0.5587%" height="15" fill="rgb(226,200,8)" fg:x="657" fg:w="7"/><text x="52.6842%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.48%)</title><rect x="52.5140%" y="245" width="0.4789%" height="15" fill="rgb(244,54,29)" fg:x="658" fg:w="6"/><text x="52.7640%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="53.0726%" y="229" width="0.0798%" height="15" fill="rgb(252,169,12)" fg:x="665" fg:w="1"/><text x="53.3226%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="52.9928%" y="261" width="0.2394%" height="15" fill="rgb(231,199,11)" fg:x="664" fg:w="3"/><text x="53.2428%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="52.9928%" y="245" width="0.2394%" height="15" fill="rgb(233,191,18)" fg:x="664" fg:w="3"/><text x="53.2428%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::hir::Hir&gt;&gt; (1 samples, 0.08%)</title><rect x="53.1524%" y="229" width="0.0798%" height="15" fill="rgb(215,83,47)" fg:x="666" fg:w="1"/><text x="53.4024%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="53.1524%" y="213" width="0.0798%" height="15" fill="rgb(251,67,19)" fg:x="666" fg:w="1"/><text x="53.4024%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.2322%" y="261" width="0.0798%" height="15" fill="rgb(240,7,20)" fg:x="667" fg:w="1"/><text x="53.4822%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="53.3919%" y="229" width="0.0798%" height="15" fill="rgb(210,150,26)" fg:x="669" fg:w="1"/><text x="53.6419%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="53.3121%" y="261" width="0.2394%" height="15" fill="rgb(228,75,42)" fg:x="668" fg:w="3"/><text x="53.5621%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="53.3121%" y="245" width="0.2394%" height="15" fill="rgb(237,134,48)" fg:x="668" fg:w="3"/><text x="53.5621%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="53.4717%" y="229" width="0.0798%" height="15" fill="rgb(205,80,50)" fg:x="670" fg:w="1"/><text x="53.7217%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="53.5515%" y="245" width="0.1596%" height="15" fill="rgb(217,74,48)" fg:x="671" fg:w="2"/><text x="53.8015%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="53.7909%" y="229" width="0.0798%" height="15" fill="rgb(205,82,50)" fg:x="674" fg:w="1"/><text x="54.0409%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (18 samples, 1.44%)</title><rect x="53.7111%" y="245" width="1.4366%" height="15" fill="rgb(228,1,33)" fg:x="673" fg:w="18"/><text x="53.9611%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (16 samples, 1.28%)</title><rect x="53.8707%" y="229" width="1.2769%" height="15" fill="rgb(214,50,23)" fg:x="675" fg:w="16"/><text x="54.1207%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (9 samples, 0.72%)</title><rect x="55.1476%" y="245" width="0.7183%" height="15" fill="rgb(210,62,9)" fg:x="691" fg:w="9"/><text x="55.3976%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (8 samples, 0.64%)</title><rect x="55.2275%" y="229" width="0.6385%" height="15" fill="rgb(210,104,37)" fg:x="692" fg:w="8"/><text x="55.4775%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.1852%" y="213" width="0.0798%" height="15" fill="rgb(232,104,43)" fg:x="704" fg:w="1"/><text x="56.4352%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.1852%" y="197" width="0.0798%" height="15" fill="rgb(244,52,6)" fg:x="704" fg:w="1"/><text x="56.4352%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.1852%" y="181" width="0.0798%" height="15" fill="rgb(211,174,52)" fg:x="704" fg:w="1"/><text x="56.4352%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="56.3448%" y="197" width="0.1596%" height="15" fill="rgb(229,48,4)" fg:x="706" fg:w="2"/><text x="56.5948%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="56.3448%" y="181" width="0.1596%" height="15" fill="rgb(205,155,16)" fg:x="706" fg:w="2"/><text x="56.5948%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="56.3448%" y="165" width="0.1596%" height="15" fill="rgb(211,141,53)" fg:x="706" fg:w="2"/><text x="56.5948%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (4 samples, 0.32%)</title><rect x="56.2650%" y="213" width="0.3192%" height="15" fill="rgb(240,148,11)" fg:x="705" fg:w="4"/><text x="56.5150%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.5044%" y="197" width="0.0798%" height="15" fill="rgb(214,45,23)" fg:x="708" fg:w="1"/><text x="56.7544%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.5044%" y="181" width="0.0798%" height="15" fill="rgb(248,74,26)" fg:x="708" fg:w="1"/><text x="56.7544%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.5044%" y="165" width="0.0798%" height="15" fill="rgb(218,121,16)" fg:x="708" fg:w="1"/><text x="56.7544%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (8 samples, 0.64%)</title><rect x="56.5842%" y="213" width="0.6385%" height="15" fill="rgb(218,10,47)" fg:x="709" fg:w="8"/><text x="56.8342%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="56.9832%" y="197" width="0.2394%" height="15" fill="rgb(227,99,14)" fg:x="714" fg:w="3"/><text x="57.2332%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="56.9832%" y="181" width="0.2394%" height="15" fill="rgb(229,83,46)" fg:x="714" fg:w="3"/><text x="57.2332%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="57.0630%" y="165" width="0.1596%" height="15" fill="rgb(228,25,1)" fg:x="715" fg:w="2"/><text x="57.3130%" y="175.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="57.0630%" y="149" width="0.1596%" height="15" fill="rgb(252,190,15)" fg:x="715" fg:w="2"/><text x="57.3130%" y="159.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (11 samples, 0.88%)</title><rect x="57.2227%" y="197" width="0.8779%" height="15" fill="rgb(213,103,51)" fg:x="717" fg:w="11"/><text x="57.4727%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (11 samples, 0.88%)</title><rect x="57.2227%" y="181" width="0.8779%" height="15" fill="rgb(220,38,44)" fg:x="717" fg:w="11"/><text x="57.4727%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (29 samples, 2.31%)</title><rect x="55.8659%" y="245" width="2.3144%" height="15" fill="rgb(210,45,26)" fg:x="700" fg:w="29"/><text x="56.1159%" y="255.50">r..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (28 samples, 2.23%)</title><rect x="55.9457%" y="229" width="2.2346%" height="15" fill="rgb(205,95,48)" fg:x="701" fg:w="28"/><text x="56.1957%" y="239.50">r..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (12 samples, 0.96%)</title><rect x="57.2227%" y="213" width="0.9577%" height="15" fill="rgb(225,179,37)" fg:x="717" fg:w="12"/><text x="57.4727%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="58.1006%" y="197" width="0.0798%" height="15" fill="rgb(230,209,3)" fg:x="728" fg:w="1"/><text x="58.3506%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="58.2602%" y="149" width="0.0798%" height="15" fill="rgb(248,12,46)" fg:x="730" fg:w="1"/><text x="58.5102%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.2602%" y="133" width="0.0798%" height="15" fill="rgb(234,18,0)" fg:x="730" fg:w="1"/><text x="58.5102%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.2602%" y="117" width="0.0798%" height="15" fill="rgb(238,197,14)" fg:x="730" fg:w="1"/><text x="58.5102%" y="127.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="58.8986%" y="133" width="0.1596%" height="15" fill="rgb(251,162,48)" fg:x="738" fg:w="2"/><text x="59.1486%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.0583%" y="133" width="0.0798%" height="15" fill="rgb(237,73,42)" fg:x="740" fg:w="1"/><text x="59.3083%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (4 samples, 0.32%)</title><rect x="59.1381%" y="133" width="0.3192%" height="15" fill="rgb(211,108,8)" fg:x="741" fg:w="4"/><text x="59.3881%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="59.2179%" y="117" width="0.2394%" height="15" fill="rgb(213,45,22)" fg:x="742" fg:w="3"/><text x="59.4679%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="59.2179%" y="101" width="0.2394%" height="15" fill="rgb(252,154,5)" fg:x="742" fg:w="3"/><text x="59.4679%" y="111.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="59.2179%" y="85" width="0.2394%" height="15" fill="rgb(221,79,52)" fg:x="742" fg:w="3"/><text x="59.4679%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="59.4573%" y="133" width="0.1596%" height="15" fill="rgb(229,220,36)" fg:x="745" fg:w="2"/><text x="59.7073%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="59.4573%" y="117" width="0.1596%" height="15" fill="rgb(211,17,16)" fg:x="745" fg:w="2"/><text x="59.7073%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.5371%" y="101" width="0.0798%" height="15" fill="rgb(222,55,31)" fg:x="746" fg:w="1"/><text x="59.7871%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="59.5371%" y="85" width="0.0798%" height="15" fill="rgb(221,221,31)" fg:x="746" fg:w="1"/><text x="59.7871%" y="95.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.0160%" y="101" width="0.0798%" height="15" fill="rgb(227,168,26)" fg:x="752" fg:w="1"/><text x="60.2660%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.1756%" y="69" width="0.0798%" height="15" fill="rgb(224,139,9)" fg:x="754" fg:w="1"/><text x="60.4256%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="60.0958%" y="101" width="0.2394%" height="15" fill="rgb(254,172,0)" fg:x="753" fg:w="3"/><text x="60.3458%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="60.1756%" y="85" width="0.1596%" height="15" fill="rgb(235,203,1)" fg:x="754" fg:w="2"/><text x="60.4256%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="60.2554%" y="69" width="0.0798%" height="15" fill="rgb(216,205,24)" fg:x="755" fg:w="1"/><text x="60.5054%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (13 samples, 1.04%)</title><rect x="59.6169%" y="133" width="1.0375%" height="15" fill="rgb(233,24,6)" fg:x="747" fg:w="13"/><text x="59.8669%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (10 samples, 0.80%)</title><rect x="59.8563%" y="117" width="0.7981%" height="15" fill="rgb(244,110,9)" fg:x="750" fg:w="10"/><text x="60.1063%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (4 samples, 0.32%)</title><rect x="60.3352%" y="101" width="0.3192%" height="15" fill="rgb(239,222,42)" fg:x="756" fg:w="4"/><text x="60.5852%" y="111.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="60.4948%" y="85" width="0.1596%" height="15" fill="rgb(218,145,13)" fg:x="758" fg:w="2"/><text x="60.7448%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (28 samples, 2.23%)</title><rect x="60.6544%" y="133" width="2.2346%" height="15" fill="rgb(207,69,11)" fg:x="760" fg:w="28"/><text x="60.9044%" y="143.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (28 samples, 2.23%)</title><rect x="60.6544%" y="117" width="2.2346%" height="15" fill="rgb(220,223,22)" fg:x="760" fg:w="28"/><text x="60.9044%" y="127.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (28 samples, 2.23%)</title><rect x="60.6544%" y="101" width="2.2346%" height="15" fill="rgb(245,102,5)" fg:x="760" fg:w="28"/><text x="60.9044%" y="111.50">a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="62.8891%" y="133" width="0.1596%" height="15" fill="rgb(211,148,2)" fg:x="788" fg:w="2"/><text x="63.1391%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.9689%" y="117" width="0.0798%" height="15" fill="rgb(241,13,44)" fg:x="789" fg:w="1"/><text x="63.2189%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (62 samples, 4.95%)</title><rect x="58.1804%" y="229" width="4.9481%" height="15" fill="rgb(219,137,21)" fg:x="729" fg:w="62"/><text x="58.4304%" y="239.50">&lt;core:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (62 samples, 4.95%)</title><rect x="58.1804%" y="213" width="4.9481%" height="15" fill="rgb(242,206,5)" fg:x="729" fg:w="62"/><text x="58.4304%" y="223.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (62 samples, 4.95%)</title><rect x="58.1804%" y="197" width="4.9481%" height="15" fill="rgb(217,114,22)" fg:x="729" fg:w="62"/><text x="58.4304%" y="207.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (61 samples, 4.87%)</title><rect x="58.2602%" y="181" width="4.8683%" height="15" fill="rgb(253,206,42)" fg:x="730" fg:w="61"/><text x="58.5102%" y="191.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (61 samples, 4.87%)</title><rect x="58.2602%" y="165" width="4.8683%" height="15" fill="rgb(236,102,18)" fg:x="730" fg:w="61"/><text x="58.5102%" y="175.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (60 samples, 4.79%)</title><rect x="58.3400%" y="149" width="4.7885%" height="15" fill="rgb(208,59,49)" fg:x="731" fg:w="60"/><text x="58.5900%" y="159.50">regex_..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="63.0487%" y="133" width="0.0798%" height="15" fill="rgb(215,194,28)" fg:x="790" fg:w="1"/><text x="63.2987%" y="143.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="63.2881%" y="213" width="0.0798%" height="15" fill="rgb(243,207,11)" fg:x="793" fg:w="1"/><text x="63.5381%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="63.5275%" y="197" width="0.2394%" height="15" fill="rgb(254,179,35)" fg:x="796" fg:w="3"/><text x="63.7775%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="63.5275%" y="181" width="0.2394%" height="15" fill="rgb(235,97,3)" fg:x="796" fg:w="3"/><text x="63.7775%" y="191.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="63.5275%" y="165" width="0.2394%" height="15" fill="rgb(215,155,33)" fg:x="796" fg:w="3"/><text x="63.7775%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (6 samples, 0.48%)</title><rect x="63.3679%" y="213" width="0.4789%" height="15" fill="rgb(223,128,12)" fg:x="794" fg:w="6"/><text x="63.6179%" y="223.50"></text></g><g><title>regex_automata::util::look::LookMatcher::add_to_byteset (1 samples, 0.08%)</title><rect x="63.7670%" y="197" width="0.0798%" height="15" fill="rgb(208,157,18)" fg:x="799" fg:w="1"/><text x="64.0170%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="63.8468%" y="213" width="0.3990%" height="15" fill="rgb(249,70,54)" fg:x="800" fg:w="5"/><text x="64.0968%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="64.2458%" y="213" width="0.1596%" height="15" fill="rgb(244,118,24)" fg:x="805" fg:w="2"/><text x="64.4958%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.4054%" y="197" width="0.0798%" height="15" fill="rgb(211,54,0)" fg:x="807" fg:w="1"/><text x="64.6554%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.4054%" y="181" width="0.0798%" height="15" fill="rgb(245,137,45)" fg:x="807" fg:w="1"/><text x="64.6554%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="64.4054%" y="165" width="0.0798%" height="15" fill="rgb(232,154,31)" fg:x="807" fg:w="1"/><text x="64.6554%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (80 samples, 6.38%)</title><rect x="58.1804%" y="245" width="6.3847%" height="15" fill="rgb(253,6,39)" fg:x="729" fg:w="80"/><text x="58.4304%" y="255.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (18 samples, 1.44%)</title><rect x="63.1285%" y="229" width="1.4366%" height="15" fill="rgb(234,183,24)" fg:x="791" fg:w="18"/><text x="63.3785%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="64.4054%" y="213" width="0.1596%" height="15" fill="rgb(252,84,40)" fg:x="807" fg:w="2"/><text x="64.6554%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="64.4852%" y="197" width="0.0798%" height="15" fill="rgb(224,65,2)" fg:x="808" fg:w="1"/><text x="64.7352%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.4852%" y="181" width="0.0798%" height="15" fill="rgb(229,38,24)" fg:x="808" fg:w="1"/><text x="64.7352%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.4852%" y="165" width="0.0798%" height="15" fill="rgb(218,131,50)" fg:x="808" fg:w="1"/><text x="64.7352%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.4852%" y="149" width="0.0798%" height="15" fill="rgb(233,106,18)" fg:x="808" fg:w="1"/><text x="64.7352%" y="159.50"></text></g><g><title>regex_automata::meta::strategy::new (139 samples, 11.09%)</title><rect x="53.5515%" y="261" width="11.0934%" height="15" fill="rgb(220,216,11)" fg:x="671" fg:w="139"/><text x="53.8015%" y="271.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="64.5650%" y="245" width="0.0798%" height="15" fill="rgb(251,100,45)" fg:x="809" fg:w="1"/><text x="64.8150%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="64.5650%" y="229" width="0.0798%" height="15" fill="rgb(235,143,32)" fg:x="809" fg:w="1"/><text x="64.8150%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="64.5650%" y="213" width="0.0798%" height="15" fill="rgb(248,124,34)" fg:x="809" fg:w="1"/><text x="64.8150%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.5650%" y="197" width="0.0798%" height="15" fill="rgb(225,221,4)" fg:x="809" fg:w="1"/><text x="64.8150%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.5650%" y="181" width="0.0798%" height="15" fill="rgb(242,27,43)" fg:x="809" fg:w="1"/><text x="64.8150%" y="191.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="64.5650%" y="165" width="0.0798%" height="15" fill="rgb(227,54,8)" fg:x="809" fg:w="1"/><text x="64.8150%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="64.5650%" y="149" width="0.0798%" height="15" fill="rgb(253,139,49)" fg:x="809" fg:w="1"/><text x="64.8150%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="64.8843%" y="213" width="0.0798%" height="15" fill="rgb(231,26,43)" fg:x="813" fg:w="1"/><text x="65.1343%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="64.8843%" y="197" width="0.0798%" height="15" fill="rgb(207,121,39)" fg:x="813" fg:w="1"/><text x="65.1343%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="64.8843%" y="181" width="0.0798%" height="15" fill="rgb(223,101,35)" fg:x="813" fg:w="1"/><text x="65.1343%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="64.8843%" y="165" width="0.0798%" height="15" fill="rgb(232,87,23)" fg:x="813" fg:w="1"/><text x="65.1343%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="64.7247%" y="229" width="0.3192%" height="15" fill="rgb(225,180,29)" fg:x="811" fg:w="4"/><text x="64.9747%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="64.9641%" y="213" width="0.0798%" height="15" fill="rgb(225,25,17)" fg:x="814" fg:w="1"/><text x="65.2141%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.9641%" y="197" width="0.0798%" height="15" fill="rgb(223,8,52)" fg:x="814" fg:w="1"/><text x="65.2141%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.9641%" y="181" width="0.0798%" height="15" fill="rgb(246,42,21)" fg:x="814" fg:w="1"/><text x="65.2141%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.9641%" y="165" width="0.0798%" height="15" fill="rgb(205,64,43)" fg:x="814" fg:w="1"/><text x="65.2141%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="65.0439%" y="229" width="0.0798%" height="15" fill="rgb(221,160,13)" fg:x="815" fg:w="1"/><text x="65.2939%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.0439%" y="213" width="0.0798%" height="15" fill="rgb(239,58,35)" fg:x="815" fg:w="1"/><text x="65.2939%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="65.1237%" y="229" width="0.0798%" height="15" fill="rgb(251,26,40)" fg:x="816" fg:w="1"/><text x="65.3737%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="65.1237%" y="213" width="0.0798%" height="15" fill="rgb(247,0,4)" fg:x="816" fg:w="1"/><text x="65.3737%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.64%)</title><rect x="64.6449%" y="261" width="0.6385%" height="15" fill="rgb(218,130,10)" fg:x="810" fg:w="8"/><text x="64.8949%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.64%)</title><rect x="64.6449%" y="245" width="0.6385%" height="15" fill="rgb(239,32,7)" fg:x="810" fg:w="8"/><text x="64.8949%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="65.2035%" y="229" width="0.0798%" height="15" fill="rgb(210,192,24)" fg:x="817" fg:w="1"/><text x="65.4535%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="65.3631%" y="213" width="0.1596%" height="15" fill="rgb(226,212,17)" fg:x="819" fg:w="2"/><text x="65.6131%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::case_fold_simple (1 samples, 0.08%)</title><rect x="65.5227%" y="213" width="0.0798%" height="15" fill="rgb(219,201,28)" fg:x="821" fg:w="1"/><text x="65.7727%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="65.3631%" y="229" width="0.3192%" height="15" fill="rgb(235,207,41)" fg:x="819" fg:w="4"/><text x="65.6131%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="65.6026%" y="213" width="0.0798%" height="15" fill="rgb(241,95,54)" fg:x="822" fg:w="1"/><text x="65.8526%" y="223.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="65.6026%" y="197" width="0.0798%" height="15" fill="rgb(248,12,23)" fg:x="822" fg:w="1"/><text x="65.8526%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.24%)</title><rect x="65.6824%" y="229" width="0.2394%" height="15" fill="rgb(228,173,4)" fg:x="823" fg:w="3"/><text x="65.9324%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::concat (3 samples, 0.24%)</title><rect x="65.6824%" y="213" width="0.2394%" height="15" fill="rgb(254,99,5)" fg:x="823" fg:w="3"/><text x="65.9324%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="65.8420%" y="197" width="0.0798%" height="15" fill="rgb(212,184,17)" fg:x="825" fg:w="1"/><text x="66.0920%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="65.8420%" y="181" width="0.0798%" height="15" fill="rgb(252,174,1)" fg:x="825" fg:w="1"/><text x="66.0920%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (163 samples, 13.01%)</title><rect x="52.9928%" y="309" width="13.0088%" height="15" fill="rgb(241,118,51)" fg:x="664" fg:w="163"/><text x="53.2428%" y="319.50">&lt;regex::regex::strin..</text></g><g><title>regex::builders::string::RegexBuilder::build (163 samples, 13.01%)</title><rect x="52.9928%" y="293" width="13.0088%" height="15" fill="rgb(227,94,47)" fg:x="664" fg:w="163"/><text x="53.2428%" y="303.50">regex::builders::str..</text></g><g><title>regex_automata::meta::regex::Builder::build (163 samples, 13.01%)</title><rect x="52.9928%" y="277" width="13.0088%" height="15" fill="rgb(229,104,2)" fg:x="664" fg:w="163"/><text x="53.2428%" y="287.50">regex_automata::meta..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (9 samples, 0.72%)</title><rect x="65.2833%" y="261" width="0.7183%" height="15" fill="rgb(219,28,31)" fg:x="818" fg:w="9"/><text x="65.5333%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (9 samples, 0.72%)</title><rect x="65.2833%" y="245" width="0.7183%" height="15" fill="rgb(233,109,36)" fg:x="818" fg:w="9"/><text x="65.5333%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.9218%" y="229" width="0.0798%" height="15" fill="rgb(246,88,11)" fg:x="826" fg:w="1"/><text x="66.1718%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="66.0016%" y="293" width="0.0798%" height="15" fill="rgb(209,212,17)" fg:x="827" fg:w="1"/><text x="66.2516%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="66.0814%" y="261" width="0.0798%" height="15" fill="rgb(243,59,29)" fg:x="828" fg:w="1"/><text x="66.3314%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.0814%" y="245" width="0.0798%" height="15" fill="rgb(244,205,48)" fg:x="828" fg:w="1"/><text x="66.3314%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="66.0814%" y="277" width="0.1596%" height="15" fill="rgb(227,30,6)" fg:x="828" fg:w="2"/><text x="66.3314%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="66.1612%" y="261" width="0.0798%" height="15" fill="rgb(220,205,48)" fg:x="829" fg:w="1"/><text x="66.4112%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="66.1612%" y="245" width="0.0798%" height="15" fill="rgb(250,94,14)" fg:x="829" fg:w="1"/><text x="66.4112%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="66.1612%" y="229" width="0.0798%" height="15" fill="rgb(216,119,42)" fg:x="829" fg:w="1"/><text x="66.4112%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.1612%" y="213" width="0.0798%" height="15" fill="rgb(232,155,0)" fg:x="829" fg:w="1"/><text x="66.4112%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (7 samples, 0.56%)</title><rect x="66.0016%" y="309" width="0.5587%" height="15" fill="rgb(212,24,32)" fg:x="827" fg:w="7"/><text x="66.2516%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (6 samples, 0.48%)</title><rect x="66.0814%" y="293" width="0.4789%" height="15" fill="rgb(216,69,20)" fg:x="828" fg:w="6"/><text x="66.3314%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (4 samples, 0.32%)</title><rect x="66.2410%" y="277" width="0.3192%" height="15" fill="rgb(229,73,31)" fg:x="830" fg:w="4"/><text x="66.4910%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (4 samples, 0.32%)</title><rect x="66.2410%" y="261" width="0.3192%" height="15" fill="rgb(224,219,20)" fg:x="830" fg:w="4"/><text x="66.4910%" y="271.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="66.3208%" y="245" width="0.2394%" height="15" fill="rgb(215,146,41)" fg:x="831" fg:w="3"/><text x="66.5708%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="66.5603%" y="293" width="0.0798%" height="15" fill="rgb(244,71,31)" fg:x="834" fg:w="1"/><text x="66.8103%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="66.5603%" y="277" width="0.0798%" height="15" fill="rgb(224,24,11)" fg:x="834" fg:w="1"/><text x="66.8103%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="66.5603%" y="261" width="0.0798%" height="15" fill="rgb(229,76,15)" fg:x="834" fg:w="1"/><text x="66.8103%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.5603%" y="245" width="0.0798%" height="15" fill="rgb(209,93,2)" fg:x="834" fg:w="1"/><text x="66.8103%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.8795%" y="181" width="0.0798%" height="15" fill="rgb(216,200,50)" fg:x="838" fg:w="1"/><text x="67.1295%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="66.8795%" y="213" width="0.2394%" height="15" fill="rgb(211,67,34)" fg:x="838" fg:w="3"/><text x="67.1295%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="66.8795%" y="197" width="0.2394%" height="15" fill="rgb(225,87,47)" fg:x="838" fg:w="3"/><text x="67.1295%" y="207.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="66.9593%" y="181" width="0.1596%" height="15" fill="rgb(217,185,16)" fg:x="839" fg:w="2"/><text x="67.2093%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.1189%" y="213" width="0.0798%" height="15" fill="rgb(205,0,0)" fg:x="841" fg:w="1"/><text x="67.3689%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="67.1189%" y="197" width="0.0798%" height="15" fill="rgb(207,116,45)" fg:x="841" fg:w="1"/><text x="67.3689%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="67.1189%" y="181" width="0.0798%" height="15" fill="rgb(221,156,26)" fg:x="841" fg:w="1"/><text x="67.3689%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (13 samples, 1.04%)</title><rect x="66.6401%" y="245" width="1.0375%" height="15" fill="rgb(213,140,4)" fg:x="835" fg:w="13"/><text x="66.8901%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (13 samples, 1.04%)</title><rect x="66.6401%" y="229" width="1.0375%" height="15" fill="rgb(231,224,15)" fg:x="835" fg:w="13"/><text x="66.8901%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (6 samples, 0.48%)</title><rect x="67.1987%" y="213" width="0.4789%" height="15" fill="rgb(244,76,20)" fg:x="842" fg:w="6"/><text x="67.4487%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (395 samples, 31.52%)</title><rect x="36.2330%" y="405" width="31.5243%" height="15" fill="rgb(238,117,7)" fg:x="454" fg:w="395"/><text x="36.4830%" y="415.50">&lt;&amp;kernel::model::EntityPtr as plugins_core::looking..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (364 samples, 29.05%)</title><rect x="38.7071%" y="389" width="29.0503%" height="15" fill="rgb(235,1,10)" fg:x="485" fg:w="364"/><text x="38.9571%" y="399.50">plugins_core::looking::model::Unqualified::qual..</text></g><g><title>indefinite::indefinite (364 samples, 29.05%)</title><rect x="38.7071%" y="373" width="29.0503%" height="15" fill="rgb(216,165,6)" fg:x="485" fg:w="364"/><text x="38.9571%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (364 samples, 29.05%)</title><rect x="38.7071%" y="357" width="29.0503%" height="15" fill="rgb(246,91,35)" fg:x="485" fg:w="364"/><text x="38.9571%" y="367.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (364 samples, 29.05%)</title><rect x="38.7071%" y="341" width="29.0503%" height="15" fill="rgb(228,96,24)" fg:x="485" fg:w="364"/><text x="38.9571%" y="351.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::number::Number::check (185 samples, 14.76%)</title><rect x="52.9928%" y="325" width="14.7646%" height="15" fill="rgb(254,217,53)" fg:x="664" fg:w="185"/><text x="53.2428%" y="335.50">indefinite::rules::numb..</text></g><g><title>regex::regex::string::Regex::is_match_at (15 samples, 1.20%)</title><rect x="66.5603%" y="309" width="1.1971%" height="15" fill="rgb(209,60,0)" fg:x="834" fg:w="15"/><text x="66.8103%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (14 samples, 1.12%)</title><rect x="66.6401%" y="293" width="1.1173%" height="15" fill="rgb(250,93,26)" fg:x="835" fg:w="14"/><text x="66.8901%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (14 samples, 1.12%)</title><rect x="66.6401%" y="277" width="1.1173%" height="15" fill="rgb(211,9,40)" fg:x="835" fg:w="14"/><text x="66.8901%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (14 samples, 1.12%)</title><rect x="66.6401%" y="261" width="1.1173%" height="15" fill="rgb(242,57,20)" fg:x="835" fg:w="14"/><text x="66.8901%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="67.6776%" y="245" width="0.0798%" height="15" fill="rgb(248,85,48)" fg:x="848" fg:w="1"/><text x="67.9276%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="67.6776%" y="229" width="0.0798%" height="15" fill="rgb(212,117,2)" fg:x="848" fg:w="1"/><text x="67.9276%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.6776%" y="213" width="0.0798%" height="15" fill="rgb(243,19,3)" fg:x="848" fg:w="1"/><text x="67.9276%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.6776%" y="197" width="0.0798%" height="15" fill="rgb(232,217,24)" fg:x="848" fg:w="1"/><text x="67.9276%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.6776%" y="181" width="0.0798%" height="15" fill="rgb(224,175,40)" fg:x="848" fg:w="1"/><text x="67.9276%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.7574%" y="389" width="0.0798%" height="15" fill="rgb(212,162,32)" fg:x="849" fg:w="1"/><text x="68.0074%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.7574%" y="373" width="0.0798%" height="15" fill="rgb(215,9,4)" fg:x="849" fg:w="1"/><text x="68.0074%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.7574%" y="357" width="0.0798%" height="15" fill="rgb(242,42,7)" fg:x="849" fg:w="1"/><text x="68.0074%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.7574%" y="341" width="0.0798%" height="15" fill="rgb(242,184,45)" fg:x="849" fg:w="1"/><text x="68.0074%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="67.8372%" y="325" width="0.0798%" height="15" fill="rgb(228,111,51)" fg:x="850" fg:w="1"/><text x="68.0872%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.8372%" y="309" width="0.0798%" height="15" fill="rgb(236,147,17)" fg:x="850" fg:w="1"/><text x="68.0872%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.8372%" y="293" width="0.0798%" height="15" fill="rgb(210,75,22)" fg:x="850" fg:w="1"/><text x="68.0872%" y="303.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="67.7574%" y="405" width="0.2394%" height="15" fill="rgb(217,159,45)" fg:x="849" fg:w="3"/><text x="68.0074%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="67.8372%" y="389" width="0.1596%" height="15" fill="rgb(245,165,53)" fg:x="850" fg:w="2"/><text x="68.0872%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="67.8372%" y="373" width="0.1596%" height="15" fill="rgb(251,190,50)" fg:x="850" fg:w="2"/><text x="68.0872%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="67.8372%" y="357" width="0.1596%" height="15" fill="rgb(208,203,29)" fg:x="850" fg:w="2"/><text x="68.0872%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="67.8372%" y="341" width="0.1596%" height="15" fill="rgb(207,209,35)" fg:x="850" fg:w="2"/><text x="68.0872%" y="351.50"></text></g><g><title>serde_json::value::de::SeqDeserializer::new (1 samples, 0.08%)</title><rect x="67.9170%" y="325" width="0.0798%" height="15" fill="rgb(230,144,49)" fg:x="851" fg:w="1"/><text x="68.1670%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.9968%" y="341" width="0.0798%" height="15" fill="rgb(229,31,6)" fg:x="852" fg:w="1"/><text x="68.2468%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.9968%" y="325" width="0.0798%" height="15" fill="rgb(251,129,24)" fg:x="852" fg:w="1"/><text x="68.2468%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.9968%" y="309" width="0.0798%" height="15" fill="rgb(235,105,15)" fg:x="852" fg:w="1"/><text x="68.2468%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="67.9968%" y="357" width="0.1596%" height="15" fill="rgb(216,52,43)" fg:x="852" fg:w="2"/><text x="68.2468%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.0766%" y="341" width="0.0798%" height="15" fill="rgb(238,144,41)" fg:x="853" fg:w="1"/><text x="68.3266%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.0766%" y="325" width="0.0798%" height="15" fill="rgb(243,63,9)" fg:x="853" fg:w="1"/><text x="68.3266%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="68.0766%" y="309" width="0.0798%" height="15" fill="rgb(246,208,1)" fg:x="853" fg:w="1"/><text x="68.3266%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.0766%" y="293" width="0.0798%" height="15" fill="rgb(233,182,18)" fg:x="853" fg:w="1"/><text x="68.3266%" y="303.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="67.9968%" y="373" width="0.2394%" height="15" fill="rgb(242,224,8)" fg:x="852" fg:w="3"/><text x="68.2468%" y="383.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="68.1564%" y="357" width="0.0798%" height="15" fill="rgb(243,54,37)" fg:x="854" fg:w="1"/><text x="68.4064%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="68.1564%" y="341" width="0.0798%" height="15" fill="rgb(233,192,12)" fg:x="854" fg:w="1"/><text x="68.4064%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="68.1564%" y="325" width="0.0798%" height="15" fill="rgb(251,192,53)" fg:x="854" fg:w="1"/><text x="68.4064%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="68.2362%" y="357" width="0.0798%" height="15" fill="rgb(246,141,26)" fg:x="855" fg:w="1"/><text x="68.4862%" y="367.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (5 samples, 0.40%)</title><rect x="67.9968%" y="389" width="0.3990%" height="15" fill="rgb(239,195,19)" fg:x="852" fg:w="5"/><text x="68.2468%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::gid (2 samples, 0.16%)</title><rect x="68.2362%" y="373" width="0.1596%" height="15" fill="rgb(241,16,39)" fg:x="855" fg:w="2"/><text x="68.4862%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="68.3160%" y="357" width="0.0798%" height="15" fill="rgb(223,13,53)" fg:x="856" fg:w="1"/><text x="68.5660%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.3160%" y="341" width="0.0798%" height="15" fill="rgb(214,227,0)" fg:x="856" fg:w="1"/><text x="68.5660%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.3160%" y="325" width="0.0798%" height="15" fill="rgb(228,103,26)" fg:x="856" fg:w="1"/><text x="68.5660%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="68.3160%" y="309" width="0.0798%" height="15" fill="rgb(254,177,53)" fg:x="856" fg:w="1"/><text x="68.5660%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.3160%" y="293" width="0.0798%" height="15" fill="rgb(208,201,34)" fg:x="856" fg:w="1"/><text x="68.5660%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="68.3160%" y="277" width="0.0798%" height="15" fill="rgb(212,39,5)" fg:x="856" fg:w="1"/><text x="68.5660%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="68.3958%" y="325" width="0.0798%" height="15" fill="rgb(246,117,3)" fg:x="857" fg:w="1"/><text x="68.6458%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.3958%" y="309" width="0.0798%" height="15" fill="rgb(244,118,39)" fg:x="857" fg:w="1"/><text x="68.6458%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.4757%" y="277" width="0.0798%" height="15" fill="rgb(241,64,10)" fg:x="858" fg:w="1"/><text x="68.7257%" y="287.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="68.4757%" y="325" width="0.1596%" height="15" fill="rgb(229,39,44)" fg:x="858" fg:w="2"/><text x="68.7257%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="68.4757%" y="309" width="0.1596%" height="15" fill="rgb(230,226,3)" fg:x="858" fg:w="2"/><text x="68.7257%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.4757%" y="293" width="0.1596%" height="15" fill="rgb(222,13,42)" fg:x="858" fg:w="2"/><text x="68.7257%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="68.5555%" y="277" width="0.0798%" height="15" fill="rgb(247,180,54)" fg:x="859" fg:w="1"/><text x="68.8055%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.5555%" y="261" width="0.0798%" height="15" fill="rgb(205,96,16)" fg:x="859" fg:w="1"/><text x="68.8055%" y="271.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.5555%" y="245" width="0.0798%" height="15" fill="rgb(205,100,21)" fg:x="859" fg:w="1"/><text x="68.8055%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.5555%" y="229" width="0.0798%" height="15" fill="rgb(248,51,4)" fg:x="859" fg:w="1"/><text x="68.8055%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.5555%" y="213" width="0.0798%" height="15" fill="rgb(217,197,30)" fg:x="859" fg:w="1"/><text x="68.8055%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.6353%" y="261" width="0.0798%" height="15" fill="rgb(240,179,40)" fg:x="860" fg:w="1"/><text x="68.8853%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.6353%" y="245" width="0.0798%" height="15" fill="rgb(212,185,35)" fg:x="860" fg:w="1"/><text x="68.8853%" y="255.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="68.7151%" y="261" width="0.0798%" height="15" fill="rgb(251,222,31)" fg:x="861" fg:w="1"/><text x="68.9651%" y="271.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="68.7151%" y="245" width="0.0798%" height="15" fill="rgb(208,140,36)" fg:x="861" fg:w="1"/><text x="68.9651%" y="255.50"></text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (422 samples, 33.68%)</title><rect x="35.3551%" y="453" width="33.6792%" height="15" fill="rgb(220,148,1)" fg:x="443" fg:w="422"/><text x="35.6051%" y="463.50">&lt;engine::session::state::State as kernel::actions::Perf..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (422 samples, 33.68%)</title><rect x="35.3551%" y="437" width="33.6792%" height="15" fill="rgb(254,4,28)" fg:x="443" fg:w="422"/><text x="35.6051%" y="447.50">&lt;plugins_core::looking::actions::LookAction as kernel::..</text></g><g><title>plugins_core::looking::model::new_area_observation (413 samples, 32.96%)</title><rect x="36.0734%" y="421" width="32.9609%" height="15" fill="rgb(222,185,44)" fg:x="452" fg:w="413"/><text x="36.3234%" y="431.50">plugins_core::looking::model::new_area_observation</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13 samples, 1.04%)</title><rect x="67.9968%" y="405" width="1.0375%" height="15" fill="rgb(215,74,39)" fg:x="852" fg:w="13"/><text x="68.2468%" y="415.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (8 samples, 0.64%)</title><rect x="68.3958%" y="389" width="0.6385%" height="15" fill="rgb(247,86,4)" fg:x="857" fg:w="8"/><text x="68.6458%" y="399.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (8 samples, 0.64%)</title><rect x="68.3958%" y="373" width="0.6385%" height="15" fill="rgb(231,105,32)" fg:x="857" fg:w="8"/><text x="68.6458%" y="383.50"></text></g><g><title>engine::session::Session::load_entity (8 samples, 0.64%)</title><rect x="68.3958%" y="357" width="0.6385%" height="15" fill="rgb(222,65,35)" fg:x="857" fg:w="8"/><text x="68.6458%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (8 samples, 0.64%)</title><rect x="68.3958%" y="341" width="0.6385%" height="15" fill="rgb(218,145,35)" fg:x="857" fg:w="8"/><text x="68.6458%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.40%)</title><rect x="68.6353%" y="325" width="0.3990%" height="15" fill="rgb(208,7,15)" fg:x="860" fg:w="5"/><text x="68.8853%" y="335.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="68.6353%" y="309" width="0.3990%" height="15" fill="rgb(209,83,13)" fg:x="860" fg:w="5"/><text x="68.8853%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="68.6353%" y="293" width="0.3990%" height="15" fill="rgb(218,3,10)" fg:x="860" fg:w="5"/><text x="68.8853%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="68.6353%" y="277" width="0.3990%" height="15" fill="rgb(211,219,4)" fg:x="860" fg:w="5"/><text x="68.8853%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="68.7949%" y="261" width="0.2394%" height="15" fill="rgb(228,194,12)" fg:x="862" fg:w="3"/><text x="69.0449%" y="271.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="68.8747%" y="245" width="0.1596%" height="15" fill="rgb(210,175,7)" fg:x="863" fg:w="2"/><text x="69.1247%" y="255.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="68.9545%" y="229" width="0.0798%" height="15" fill="rgb(243,132,6)" fg:x="864" fg:w="1"/><text x="69.2045%" y="239.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (423 samples, 33.76%)</title><rect x="35.3551%" y="565" width="33.7590%" height="15" fill="rgb(207,72,18)" fg:x="443" fg:w="423"/><text x="35.6051%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (423 samples, 33.76%)</title><rect x="35.3551%" y="549" width="33.7590%" height="15" fill="rgb(236,1,18)" fg:x="443" fg:w="423"/><text x="35.6051%" y="559.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (423 samples, 33.76%)</title><rect x="35.3551%" y="533" width="33.7590%" height="15" fill="rgb(227,0,18)" fg:x="443" fg:w="423"/><text x="35.6051%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (423 samples, 33.76%)</title><rect x="35.3551%" y="517" width="33.7590%" height="15" fill="rgb(247,37,5)" fg:x="443" fg:w="423"/><text x="35.6051%" y="527.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (423 samples, 33.76%)</title><rect x="35.3551%" y="501" width="33.7590%" height="15" fill="rgb(237,179,24)" fg:x="443" fg:w="423"/><text x="35.6051%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (423 samples, 33.76%)</title><rect x="35.3551%" y="485" width="33.7590%" height="15" fill="rgb(226,53,20)" fg:x="443" fg:w="423"/><text x="35.6051%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (423 samples, 33.76%)</title><rect x="35.3551%" y="469" width="33.7590%" height="15" fill="rgb(247,75,7)" fg:x="443" fg:w="423"/><text x="35.6051%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.0343%" y="453" width="0.0798%" height="15" fill="rgb(233,96,12)" fg:x="865" fg:w="1"/><text x="69.2843%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.1141%" y="501" width="0.0798%" height="15" fill="rgb(224,125,0)" fg:x="866" fg:w="1"/><text x="69.3641%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.1141%" y="485" width="0.0798%" height="15" fill="rgb(224,92,25)" fg:x="866" fg:w="1"/><text x="69.3641%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.1141%" y="469" width="0.0798%" height="15" fill="rgb(224,42,24)" fg:x="866" fg:w="1"/><text x="69.3641%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.1141%" y="453" width="0.0798%" height="15" fill="rgb(234,132,49)" fg:x="866" fg:w="1"/><text x="69.3641%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.1141%" y="437" width="0.0798%" height="15" fill="rgb(248,100,35)" fg:x="866" fg:w="1"/><text x="69.3641%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.1141%" y="421" width="0.0798%" height="15" fill="rgb(239,94,40)" fg:x="866" fg:w="1"/><text x="69.3641%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.1141%" y="405" width="0.0798%" height="15" fill="rgb(235,139,28)" fg:x="866" fg:w="1"/><text x="69.3641%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.1141%" y="389" width="0.0798%" height="15" fill="rgb(217,144,7)" fg:x="866" fg:w="1"/><text x="69.3641%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.1141%" y="373" width="0.0798%" height="15" fill="rgb(227,55,4)" fg:x="866" fg:w="1"/><text x="69.3641%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.1141%" y="357" width="0.0798%" height="15" fill="rgb(252,82,54)" fg:x="866" fg:w="1"/><text x="69.3641%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.1141%" y="341" width="0.0798%" height="15" fill="rgb(245,172,4)" fg:x="866" fg:w="1"/><text x="69.3641%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.1141%" y="325" width="0.0798%" height="15" fill="rgb(207,26,27)" fg:x="866" fg:w="1"/><text x="69.3641%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.1141%" y="309" width="0.0798%" height="15" fill="rgb(252,98,18)" fg:x="866" fg:w="1"/><text x="69.3641%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.40%)</title><rect x="69.1141%" y="517" width="0.3990%" height="15" fill="rgb(244,8,26)" fg:x="866" fg:w="5"/><text x="69.3641%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="69.1939%" y="501" width="0.3192%" height="15" fill="rgb(237,173,45)" fg:x="867" fg:w="4"/><text x="69.4439%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="69.1939%" y="485" width="0.3192%" height="15" fill="rgb(208,213,49)" fg:x="867" fg:w="4"/><text x="69.4439%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (3 samples, 0.24%)</title><rect x="69.2737%" y="469" width="0.2394%" height="15" fill="rgb(212,122,37)" fg:x="868" fg:w="3"/><text x="69.5237%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (3 samples, 0.24%)</title><rect x="69.2737%" y="453" width="0.2394%" height="15" fill="rgb(213,80,17)" fg:x="868" fg:w="3"/><text x="69.5237%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 0.24%)</title><rect x="69.2737%" y="437" width="0.2394%" height="15" fill="rgb(206,210,43)" fg:x="868" fg:w="3"/><text x="69.5237%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="69.3536%" y="421" width="0.1596%" height="15" fill="rgb(229,214,3)" fg:x="869" fg:w="2"/><text x="69.6036%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.3536%" y="405" width="0.1596%" height="15" fill="rgb(235,213,29)" fg:x="869" fg:w="2"/><text x="69.6036%" y="415.50"></text></g><g><title>serde_json::value::de::BorrowedCowStrDeserializer::new (1 samples, 0.08%)</title><rect x="69.4334%" y="389" width="0.0798%" height="15" fill="rgb(248,135,26)" fg:x="870" fg:w="1"/><text x="69.6834%" y="399.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="69.5132%" y="469" width="0.0798%" height="15" fill="rgb(242,188,12)" fg:x="871" fg:w="1"/><text x="69.7632%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.5132%" y="453" width="0.0798%" height="15" fill="rgb(245,38,12)" fg:x="871" fg:w="1"/><text x="69.7632%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.5132%" y="437" width="0.0798%" height="15" fill="rgb(218,42,13)" fg:x="871" fg:w="1"/><text x="69.7632%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.5132%" y="421" width="0.0798%" height="15" fill="rgb(238,132,49)" fg:x="871" fg:w="1"/><text x="69.7632%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.5132%" y="405" width="0.0798%" height="15" fill="rgb(209,196,19)" fg:x="871" fg:w="1"/><text x="69.7632%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.5132%" y="389" width="0.0798%" height="15" fill="rgb(244,131,22)" fg:x="871" fg:w="1"/><text x="69.7632%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="69.5132%" y="373" width="0.0798%" height="15" fill="rgb(223,18,34)" fg:x="871" fg:w="1"/><text x="69.7632%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="69.5132%" y="357" width="0.0798%" height="15" fill="rgb(252,124,54)" fg:x="871" fg:w="1"/><text x="69.7632%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.6728%" y="389" width="0.0798%" height="15" fill="rgb(229,106,42)" fg:x="873" fg:w="1"/><text x="69.9228%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.6728%" y="373" width="0.0798%" height="15" fill="rgb(221,129,1)" fg:x="873" fg:w="1"/><text x="69.9228%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.6728%" y="357" width="0.0798%" height="15" fill="rgb(229,74,15)" fg:x="873" fg:w="1"/><text x="69.9228%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.6728%" y="341" width="0.0798%" height="15" fill="rgb(210,206,50)" fg:x="873" fg:w="1"/><text x="69.9228%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.6728%" y="325" width="0.0798%" height="15" fill="rgb(251,114,31)" fg:x="873" fg:w="1"/><text x="69.9228%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.6728%" y="309" width="0.0798%" height="15" fill="rgb(215,225,28)" fg:x="873" fg:w="1"/><text x="69.9228%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.6728%" y="293" width="0.0798%" height="15" fill="rgb(237,109,14)" fg:x="873" fg:w="1"/><text x="69.9228%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.6728%" y="277" width="0.0798%" height="15" fill="rgb(230,13,37)" fg:x="873" fg:w="1"/><text x="69.9228%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.6728%" y="261" width="0.0798%" height="15" fill="rgb(231,40,28)" fg:x="873" fg:w="1"/><text x="69.9228%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.6728%" y="245" width="0.0798%" height="15" fill="rgb(231,202,18)" fg:x="873" fg:w="1"/><text x="69.9228%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.6728%" y="229" width="0.0798%" height="15" fill="rgb(225,33,18)" fg:x="873" fg:w="1"/><text x="69.9228%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.6728%" y="213" width="0.0798%" height="15" fill="rgb(223,64,47)" fg:x="873" fg:w="1"/><text x="69.9228%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.6728%" y="197" width="0.0798%" height="15" fill="rgb(234,114,13)" fg:x="873" fg:w="1"/><text x="69.9228%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.6728%" y="453" width="0.1596%" height="15" fill="rgb(248,56,40)" fg:x="873" fg:w="2"/><text x="69.9228%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.6728%" y="437" width="0.1596%" height="15" fill="rgb(221,194,21)" fg:x="873" fg:w="2"/><text x="69.9228%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.6728%" y="421" width="0.1596%" height="15" fill="rgb(242,108,46)" fg:x="873" fg:w="2"/><text x="69.9228%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.6728%" y="405" width="0.1596%" height="15" fill="rgb(220,106,10)" fg:x="873" fg:w="2"/><text x="69.9228%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.7526%" y="389" width="0.0798%" height="15" fill="rgb(211,88,4)" fg:x="874" fg:w="1"/><text x="70.0026%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.8324%" y="373" width="0.0798%" height="15" fill="rgb(214,95,34)" fg:x="875" fg:w="1"/><text x="70.0824%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="69.8324%" y="357" width="0.0798%" height="15" fill="rgb(250,160,33)" fg:x="875" fg:w="1"/><text x="70.0824%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.9122%" y="357" width="0.0798%" height="15" fill="rgb(225,29,10)" fg:x="876" fg:w="1"/><text x="70.1622%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.9122%" y="341" width="0.0798%" height="15" fill="rgb(224,28,30)" fg:x="876" fg:w="1"/><text x="70.1622%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.9122%" y="325" width="0.0798%" height="15" fill="rgb(231,77,4)" fg:x="876" fg:w="1"/><text x="70.1622%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.9122%" y="309" width="0.0798%" height="15" fill="rgb(209,63,21)" fg:x="876" fg:w="1"/><text x="70.1622%" y="319.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="69.9122%" y="293" width="0.0798%" height="15" fill="rgb(226,22,11)" fg:x="876" fg:w="1"/><text x="70.1622%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="69.9122%" y="277" width="0.0798%" height="15" fill="rgb(216,82,30)" fg:x="876" fg:w="1"/><text x="70.1622%" y="287.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="69.8324%" y="453" width="0.3192%" height="15" fill="rgb(246,227,38)" fg:x="875" fg:w="4"/><text x="70.0824%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="69.8324%" y="437" width="0.3192%" height="15" fill="rgb(251,203,53)" fg:x="875" fg:w="4"/><text x="70.0824%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="69.8324%" y="421" width="0.3192%" height="15" fill="rgb(254,101,1)" fg:x="875" fg:w="4"/><text x="70.0824%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="69.8324%" y="405" width="0.3192%" height="15" fill="rgb(241,180,5)" fg:x="875" fg:w="4"/><text x="70.0824%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="69.8324%" y="389" width="0.3192%" height="15" fill="rgb(218,168,4)" fg:x="875" fg:w="4"/><text x="70.0824%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="69.9122%" y="373" width="0.2394%" height="15" fill="rgb(224,223,32)" fg:x="876" fg:w="3"/><text x="70.1622%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="69.9920%" y="357" width="0.1596%" height="15" fill="rgb(236,106,22)" fg:x="877" fg:w="2"/><text x="70.2420%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="69.9920%" y="341" width="0.1596%" height="15" fill="rgb(206,121,5)" fg:x="877" fg:w="2"/><text x="70.2420%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="70.0718%" y="325" width="0.0798%" height="15" fill="rgb(233,87,28)" fg:x="878" fg:w="1"/><text x="70.3218%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.0718%" y="309" width="0.0798%" height="15" fill="rgb(236,137,17)" fg:x="878" fg:w="1"/><text x="70.3218%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.2314%" y="357" width="0.0798%" height="15" fill="rgb(209,183,38)" fg:x="880" fg:w="1"/><text x="70.4814%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.2314%" y="341" width="0.0798%" height="15" fill="rgb(206,162,44)" fg:x="880" fg:w="1"/><text x="70.4814%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.2314%" y="325" width="0.0798%" height="15" fill="rgb(237,70,39)" fg:x="880" fg:w="1"/><text x="70.4814%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.2314%" y="309" width="0.0798%" height="15" fill="rgb(212,176,5)" fg:x="880" fg:w="1"/><text x="70.4814%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.2314%" y="293" width="0.0798%" height="15" fill="rgb(232,95,16)" fg:x="880" fg:w="1"/><text x="70.4814%" y="303.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (10 samples, 0.80%)</title><rect x="69.5930%" y="469" width="0.7981%" height="15" fill="rgb(219,115,35)" fg:x="872" fg:w="10"/><text x="69.8430%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="70.1516%" y="453" width="0.2394%" height="15" fill="rgb(251,67,27)" fg:x="879" fg:w="3"/><text x="70.4016%" y="463.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="70.1516%" y="437" width="0.2394%" height="15" fill="rgb(222,95,40)" fg:x="879" fg:w="3"/><text x="70.4016%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="70.1516%" y="421" width="0.2394%" height="15" fill="rgb(250,35,16)" fg:x="879" fg:w="3"/><text x="70.4016%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="70.1516%" y="405" width="0.2394%" height="15" fill="rgb(224,86,44)" fg:x="879" fg:w="3"/><text x="70.4016%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="70.1516%" y="389" width="0.2394%" height="15" fill="rgb(237,53,53)" fg:x="879" fg:w="3"/><text x="70.4016%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="70.1516%" y="373" width="0.2394%" height="15" fill="rgb(208,171,33)" fg:x="879" fg:w="3"/><text x="70.4016%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.3113%" y="357" width="0.0798%" height="15" fill="rgb(222,64,27)" fg:x="881" fg:w="1"/><text x="70.5613%" y="367.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="70.3113%" y="341" width="0.0798%" height="15" fill="rgb(221,121,35)" fg:x="881" fg:w="1"/><text x="70.5613%" y="351.50"></text></g><g><title>plugins_core::tools::contained_by (17 samples, 1.36%)</title><rect x="69.1141%" y="533" width="1.3567%" height="15" fill="rgb(228,137,42)" fg:x="866" fg:w="17"/><text x="69.3641%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (12 samples, 0.96%)</title><rect x="69.5132%" y="517" width="0.9577%" height="15" fill="rgb(227,54,21)" fg:x="871" fg:w="12"/><text x="69.7632%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (12 samples, 0.96%)</title><rect x="69.5132%" y="501" width="0.9577%" height="15" fill="rgb(240,168,33)" fg:x="871" fg:w="12"/><text x="69.7632%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (12 samples, 0.96%)</title><rect x="69.5132%" y="485" width="0.9577%" height="15" fill="rgb(243,159,6)" fg:x="871" fg:w="12"/><text x="69.7632%" y="495.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="70.3911%" y="469" width="0.0798%" height="15" fill="rgb(205,211,41)" fg:x="882" fg:w="1"/><text x="70.6411%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="70.3911%" y="453" width="0.0798%" height="15" fill="rgb(253,30,1)" fg:x="882" fg:w="1"/><text x="70.6411%" y="463.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="70.4709%" y="517" width="0.2394%" height="15" fill="rgb(226,80,18)" fg:x="883" fg:w="3"/><text x="70.7209%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="70.5507%" y="501" width="0.1596%" height="15" fill="rgb(253,156,46)" fg:x="884" fg:w="2"/><text x="70.8007%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.5507%" y="485" width="0.1596%" height="15" fill="rgb(248,87,27)" fg:x="884" fg:w="2"/><text x="70.8007%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="70.6305%" y="469" width="0.0798%" height="15" fill="rgb(227,122,2)" fg:x="885" fg:w="1"/><text x="70.8805%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="70.6305%" y="453" width="0.0798%" height="15" fill="rgb(229,94,39)" fg:x="885" fg:w="1"/><text x="70.8805%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="70.6305%" y="437" width="0.0798%" height="15" fill="rgb(225,173,31)" fg:x="885" fg:w="1"/><text x="70.8805%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.6305%" y="421" width="0.0798%" height="15" fill="rgb(239,176,30)" fg:x="885" fg:w="1"/><text x="70.8805%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.6305%" y="405" width="0.0798%" height="15" fill="rgb(212,104,21)" fg:x="885" fg:w="1"/><text x="70.8805%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="70.6305%" y="389" width="0.0798%" height="15" fill="rgb(240,209,40)" fg:x="885" fg:w="1"/><text x="70.8805%" y="399.50"></text></g><g><title>plugins_core::tools::occupied_by (4 samples, 0.32%)</title><rect x="70.4709%" y="533" width="0.3192%" height="15" fill="rgb(234,195,5)" fg:x="883" fg:w="4"/><text x="70.7209%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="70.7103%" y="517" width="0.0798%" height="15" fill="rgb(238,213,1)" fg:x="886" fg:w="1"/><text x="70.9603%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="70.7103%" y="501" width="0.0798%" height="15" fill="rgb(235,182,54)" fg:x="886" fg:w="1"/><text x="70.9603%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.7103%" y="485" width="0.0798%" height="15" fill="rgb(229,50,46)" fg:x="886" fg:w="1"/><text x="70.9603%" y="495.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (22 samples, 1.76%)</title><rect x="69.1141%" y="549" width="1.7558%" height="15" fill="rgb(219,145,13)" fg:x="866" fg:w="22"/><text x="69.3641%" y="559.50"></text></g><g><title>plugins_core::tools::worn_by (1 samples, 0.08%)</title><rect x="70.7901%" y="533" width="0.0798%" height="15" fill="rgb(220,226,10)" fg:x="887" fg:w="1"/><text x="71.0401%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="70.7901%" y="517" width="0.0798%" height="15" fill="rgb(248,47,30)" fg:x="887" fg:w="1"/><text x="71.0401%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.7901%" y="501" width="0.0798%" height="15" fill="rgb(231,209,44)" fg:x="887" fg:w="1"/><text x="71.0401%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.7901%" y="485" width="0.0798%" height="15" fill="rgb(209,80,30)" fg:x="887" fg:w="1"/><text x="71.0401%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="70.7901%" y="469" width="0.0798%" height="15" fill="rgb(232,9,14)" fg:x="887" fg:w="1"/><text x="71.0401%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="70.7901%" y="453" width="0.0798%" height="15" fill="rgb(243,91,43)" fg:x="887" fg:w="1"/><text x="71.0401%" y="463.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::iter (1 samples, 0.08%)</title><rect x="70.8699%" y="549" width="0.0798%" height="15" fill="rgb(231,90,52)" fg:x="888" fg:w="1"/><text x="71.1199%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (462 samples, 36.87%)</title><rect x="34.1580%" y="661" width="36.8715%" height="15" fill="rgb(253,192,44)" fg:x="428" fg:w="462"/><text x="34.4080%" y="671.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::pe..</text></g><g><title>kernel::plugins::mw::apply_middleware (462 samples, 36.87%)</title><rect x="34.1580%" y="645" width="36.8715%" height="15" fill="rgb(241,66,31)" fg:x="428" fg:w="462"/><text x="34.4080%" y="655.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (461 samples, 36.79%)</title><rect x="34.2378%" y="629" width="36.7917%" height="15" fill="rgb(235,81,37)" fg:x="429" fg:w="461"/><text x="34.4878%" y="639.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (461 samples, 36.79%)</title><rect x="34.2378%" y="613" width="36.7917%" height="15" fill="rgb(223,221,9)" fg:x="429" fg:w="461"/><text x="34.4878%" y="623.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::pl..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (447 samples, 35.67%)</title><rect x="35.3551%" y="597" width="35.6744%" height="15" fill="rgb(242,180,7)" fg:x="443" fg:w="447"/><text x="35.6051%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (447 samples, 35.67%)</title><rect x="35.3551%" y="581" width="35.6744%" height="15" fill="rgb(243,78,19)" fg:x="443" fg:w="447"/><text x="35.6051%" y="591.50">&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Midd..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (24 samples, 1.92%)</title><rect x="69.1141%" y="565" width="1.9154%" height="15" fill="rgb(233,23,17)" fg:x="866" fg:w="24"/><text x="69.3641%" y="575.50">p..</text></g><g><title>plugins_rune::sources::load_sources_from_entity (1 samples, 0.08%)</title><rect x="70.9497%" y="549" width="0.0798%" height="15" fill="rgb(252,122,45)" fg:x="889" fg:w="1"/><text x="71.1997%" y="559.50"></text></g><g><title>plugins_rune::sources::get_script (1 samples, 0.08%)</title><rect x="70.9497%" y="533" width="0.0798%" height="15" fill="rgb(247,108,20)" fg:x="889" fg:w="1"/><text x="71.1997%" y="543.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::ops::deref::Deref&gt;::deref (1 samples, 0.08%)</title><rect x="70.9497%" y="517" width="0.0798%" height="15" fill="rgb(235,84,21)" fg:x="889" fg:w="1"/><text x="71.1997%" y="527.50"></text></g><g><title>engine::session::Session::captured (471 samples, 37.59%)</title><rect x="33.5196%" y="709" width="37.5898%" height="15" fill="rgb(247,129,10)" fg:x="420" fg:w="471"/><text x="33.7696%" y="719.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (470 samples, 37.51%)</title><rect x="33.5994%" y="693" width="37.5100%" height="15" fill="rgb(208,173,14)" fg:x="421" fg:w="470"/><text x="33.8494%" y="703.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (464 samples, 37.03%)</title><rect x="34.0782%" y="677" width="37.0311%" height="15" fill="rgb(236,31,38)" fg:x="427" fg:w="464"/><text x="34.3282%" y="687.50">tracing_core::dispatcher::with_default</text></g><g><title>core::ptr::drop_in_place&lt;tracing_core::dispatcher::DefaultGuard&gt; (1 samples, 0.08%)</title><rect x="71.0295%" y="661" width="0.0798%" height="15" fill="rgb(232,65,17)" fg:x="890" fg:w="1"/><text x="71.2795%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.1093%" y="613" width="0.0798%" height="15" fill="rgb(224,45,49)" fg:x="891" fg:w="1"/><text x="71.3593%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.1093%" y="597" width="0.0798%" height="15" fill="rgb(225,2,53)" fg:x="891" fg:w="1"/><text x="71.3593%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.1093%" y="581" width="0.0798%" height="15" fill="rgb(248,210,53)" fg:x="891" fg:w="1"/><text x="71.3593%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.1093%" y="565" width="0.0798%" height="15" fill="rgb(211,1,30)" fg:x="891" fg:w="1"/><text x="71.3593%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.1093%" y="549" width="0.0798%" height="15" fill="rgb(224,96,15)" fg:x="891" fg:w="1"/><text x="71.3593%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.1093%" y="533" width="0.0798%" height="15" fill="rgb(252,45,11)" fg:x="891" fg:w="1"/><text x="71.3593%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.1093%" y="517" width="0.0798%" height="15" fill="rgb(220,125,38)" fg:x="891" fg:w="1"/><text x="71.3593%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.1093%" y="501" width="0.0798%" height="15" fill="rgb(243,161,33)" fg:x="891" fg:w="1"/><text x="71.3593%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.1093%" y="485" width="0.0798%" height="15" fill="rgb(248,197,34)" fg:x="891" fg:w="1"/><text x="71.3593%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.1093%" y="469" width="0.0798%" height="15" fill="rgb(228,165,23)" fg:x="891" fg:w="1"/><text x="71.3593%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.1093%" y="453" width="0.0798%" height="15" fill="rgb(236,94,38)" fg:x="891" fg:w="1"/><text x="71.3593%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.1093%" y="437" width="0.0798%" height="15" fill="rgb(220,13,23)" fg:x="891" fg:w="1"/><text x="71.3593%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.1093%" y="421" width="0.0798%" height="15" fill="rgb(234,26,39)" fg:x="891" fg:w="1"/><text x="71.3593%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.1891%" y="613" width="0.0798%" height="15" fill="rgb(205,117,44)" fg:x="892" fg:w="1"/><text x="71.4391%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.1891%" y="597" width="0.0798%" height="15" fill="rgb(250,42,2)" fg:x="892" fg:w="1"/><text x="71.4391%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.1891%" y="581" width="0.0798%" height="15" fill="rgb(223,83,14)" fg:x="892" fg:w="1"/><text x="71.4391%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.1891%" y="565" width="0.0798%" height="15" fill="rgb(241,147,50)" fg:x="892" fg:w="1"/><text x="71.4391%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.1891%" y="549" width="0.0798%" height="15" fill="rgb(218,90,6)" fg:x="892" fg:w="1"/><text x="71.4391%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.1891%" y="533" width="0.0798%" height="15" fill="rgb(210,191,5)" fg:x="892" fg:w="1"/><text x="71.4391%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.1891%" y="517" width="0.0798%" height="15" fill="rgb(225,139,19)" fg:x="892" fg:w="1"/><text x="71.4391%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.1891%" y="501" width="0.0798%" height="15" fill="rgb(210,1,33)" fg:x="892" fg:w="1"/><text x="71.4391%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.1891%" y="485" width="0.0798%" height="15" fill="rgb(213,50,3)" fg:x="892" fg:w="1"/><text x="71.4391%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.1891%" y="469" width="0.0798%" height="15" fill="rgb(234,227,4)" fg:x="892" fg:w="1"/><text x="71.4391%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.1891%" y="453" width="0.0798%" height="15" fill="rgb(246,63,5)" fg:x="892" fg:w="1"/><text x="71.4391%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="71.1093%" y="645" width="0.2394%" height="15" fill="rgb(245,136,27)" fg:x="891" fg:w="3"/><text x="71.3593%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="71.1093%" y="629" width="0.2394%" height="15" fill="rgb(247,199,27)" fg:x="891" fg:w="3"/><text x="71.3593%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.2690%" y="613" width="0.0798%" height="15" fill="rgb(252,158,49)" fg:x="893" fg:w="1"/><text x="71.5190%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.2690%" y="597" width="0.0798%" height="15" fill="rgb(254,73,1)" fg:x="893" fg:w="1"/><text x="71.5190%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.2690%" y="581" width="0.0798%" height="15" fill="rgb(248,93,19)" fg:x="893" fg:w="1"/><text x="71.5190%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.2690%" y="565" width="0.0798%" height="15" fill="rgb(206,67,5)" fg:x="893" fg:w="1"/><text x="71.5190%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.2690%" y="549" width="0.0798%" height="15" fill="rgb(209,210,4)" fg:x="893" fg:w="1"/><text x="71.5190%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.2690%" y="533" width="0.0798%" height="15" fill="rgb(214,185,36)" fg:x="893" fg:w="1"/><text x="71.5190%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.2690%" y="517" width="0.0798%" height="15" fill="rgb(233,191,26)" fg:x="893" fg:w="1"/><text x="71.5190%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.2690%" y="501" width="0.0798%" height="15" fill="rgb(248,94,17)" fg:x="893" fg:w="1"/><text x="71.5190%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.2690%" y="485" width="0.0798%" height="15" fill="rgb(250,64,4)" fg:x="893" fg:w="1"/><text x="71.5190%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.2690%" y="469" width="0.0798%" height="15" fill="rgb(218,41,53)" fg:x="893" fg:w="1"/><text x="71.5190%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.2690%" y="453" width="0.0798%" height="15" fill="rgb(251,176,28)" fg:x="893" fg:w="1"/><text x="71.5190%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.2690%" y="437" width="0.0798%" height="15" fill="rgb(247,22,9)" fg:x="893" fg:w="1"/><text x="71.5190%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.2690%" y="421" width="0.0798%" height="15" fill="rgb(218,201,14)" fg:x="893" fg:w="1"/><text x="71.5190%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.2690%" y="405" width="0.0798%" height="15" fill="rgb(218,94,10)" fg:x="893" fg:w="1"/><text x="71.5190%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="71.1093%" y="661" width="0.3192%" height="15" fill="rgb(222,183,52)" fg:x="891" fg:w="4"/><text x="71.3593%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.3488%" y="645" width="0.0798%" height="15" fill="rgb(242,140,25)" fg:x="894" fg:w="1"/><text x="71.5988%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.3488%" y="629" width="0.0798%" height="15" fill="rgb(235,197,38)" fg:x="894" fg:w="1"/><text x="71.5988%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.3488%" y="613" width="0.0798%" height="15" fill="rgb(237,136,15)" fg:x="894" fg:w="1"/><text x="71.5988%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.3488%" y="597" width="0.0798%" height="15" fill="rgb(223,44,49)" fg:x="894" fg:w="1"/><text x="71.5988%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.3488%" y="581" width="0.0798%" height="15" fill="rgb(227,71,15)" fg:x="894" fg:w="1"/><text x="71.5988%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.3488%" y="565" width="0.0798%" height="15" fill="rgb(225,153,20)" fg:x="894" fg:w="1"/><text x="71.5988%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.3488%" y="549" width="0.0798%" height="15" fill="rgb(210,190,26)" fg:x="894" fg:w="1"/><text x="71.5988%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.3488%" y="533" width="0.0798%" height="15" fill="rgb(223,147,5)" fg:x="894" fg:w="1"/><text x="71.5988%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.3488%" y="517" width="0.0798%" height="15" fill="rgb(207,14,23)" fg:x="894" fg:w="1"/><text x="71.5988%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.3488%" y="501" width="0.0798%" height="15" fill="rgb(211,195,53)" fg:x="894" fg:w="1"/><text x="71.5988%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.3488%" y="485" width="0.0798%" height="15" fill="rgb(237,75,46)" fg:x="894" fg:w="1"/><text x="71.5988%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.3488%" y="469" width="0.0798%" height="15" fill="rgb(254,55,14)" fg:x="894" fg:w="1"/><text x="71.5988%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.5084%" y="613" width="0.0798%" height="15" fill="rgb(230,185,30)" fg:x="896" fg:w="1"/><text x="71.7584%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.5084%" y="597" width="0.0798%" height="15" fill="rgb(220,14,11)" fg:x="896" fg:w="1"/><text x="71.7584%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.5084%" y="581" width="0.0798%" height="15" fill="rgb(215,169,44)" fg:x="896" fg:w="1"/><text x="71.7584%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.5084%" y="565" width="0.0798%" height="15" fill="rgb(253,203,20)" fg:x="896" fg:w="1"/><text x="71.7584%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.5084%" y="549" width="0.0798%" height="15" fill="rgb(229,225,17)" fg:x="896" fg:w="1"/><text x="71.7584%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.5084%" y="533" width="0.0798%" height="15" fill="rgb(236,76,26)" fg:x="896" fg:w="1"/><text x="71.7584%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.5084%" y="517" width="0.0798%" height="15" fill="rgb(234,15,30)" fg:x="896" fg:w="1"/><text x="71.7584%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.5084%" y="501" width="0.0798%" height="15" fill="rgb(211,113,48)" fg:x="896" fg:w="1"/><text x="71.7584%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="71.5084%" y="485" width="0.0798%" height="15" fill="rgb(221,31,36)" fg:x="896" fg:w="1"/><text x="71.7584%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="71.5084%" y="469" width="0.0798%" height="15" fill="rgb(215,118,52)" fg:x="896" fg:w="1"/><text x="71.7584%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="71.6680%" y="517" width="0.0798%" height="15" fill="rgb(241,151,27)" fg:x="898" fg:w="1"/><text x="71.9180%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="71.6680%" y="501" width="0.0798%" height="15" fill="rgb(253,51,3)" fg:x="898" fg:w="1"/><text x="71.9180%" y="511.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="71.6680%" y="485" width="0.0798%" height="15" fill="rgb(216,201,24)" fg:x="898" fg:w="1"/><text x="71.9180%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.6680%" y="469" width="0.0798%" height="15" fill="rgb(231,107,4)" fg:x="898" fg:w="1"/><text x="71.9180%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.6680%" y="453" width="0.0798%" height="15" fill="rgb(243,97,54)" fg:x="898" fg:w="1"/><text x="71.9180%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.6680%" y="437" width="0.0798%" height="15" fill="rgb(221,32,51)" fg:x="898" fg:w="1"/><text x="71.9180%" y="447.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="71.7478%" y="421" width="0.1596%" height="15" fill="rgb(218,171,35)" fg:x="899" fg:w="2"/><text x="71.9978%" y="431.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="71.7478%" y="405" width="0.1596%" height="15" fill="rgb(214,20,53)" fg:x="899" fg:w="2"/><text x="71.9978%" y="415.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="71.7478%" y="389" width="0.1596%" height="15" fill="rgb(239,9,52)" fg:x="899" fg:w="2"/><text x="71.9978%" y="399.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="71.7478%" y="373" width="0.1596%" height="15" fill="rgb(215,114,45)" fg:x="899" fg:w="2"/><text x="71.9978%" y="383.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="71.7478%" y="357" width="0.1596%" height="15" fill="rgb(208,118,9)" fg:x="899" fg:w="2"/><text x="71.9978%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="71.7478%" y="341" width="0.1596%" height="15" fill="rgb(235,7,39)" fg:x="899" fg:w="2"/><text x="71.9978%" y="351.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.16%)</title><rect x="71.7478%" y="325" width="0.1596%" height="15" fill="rgb(243,225,15)" fg:x="899" fg:w="2"/><text x="71.9978%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.16%)</title><rect x="71.7478%" y="309" width="0.1596%" height="15" fill="rgb(225,216,18)" fg:x="899" fg:w="2"/><text x="71.9978%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="71.7478%" y="293" width="0.1596%" height="15" fill="rgb(233,36,38)" fg:x="899" fg:w="2"/><text x="71.9978%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.16%)</title><rect x="71.7478%" y="277" width="0.1596%" height="15" fill="rgb(239,88,23)" fg:x="899" fg:w="2"/><text x="71.9978%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.16%)</title><rect x="71.7478%" y="261" width="0.1596%" height="15" fill="rgb(219,181,35)" fg:x="899" fg:w="2"/><text x="71.9978%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.64%)</title><rect x="71.4286%" y="661" width="0.6385%" height="15" fill="rgb(215,18,46)" fg:x="895" fg:w="8"/><text x="71.6786%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.64%)</title><rect x="71.4286%" y="645" width="0.6385%" height="15" fill="rgb(241,38,11)" fg:x="895" fg:w="8"/><text x="71.6786%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (8 samples, 0.64%)</title><rect x="71.4286%" y="629" width="0.6385%" height="15" fill="rgb(248,169,45)" fg:x="895" fg:w="8"/><text x="71.6786%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="71.5882%" y="613" width="0.4789%" height="15" fill="rgb(239,50,49)" fg:x="897" fg:w="6"/><text x="71.8382%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.48%)</title><rect x="71.5882%" y="597" width="0.4789%" height="15" fill="rgb(231,96,31)" fg:x="897" fg:w="6"/><text x="71.8382%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (6 samples, 0.48%)</title><rect x="71.5882%" y="581" width="0.4789%" height="15" fill="rgb(224,193,37)" fg:x="897" fg:w="6"/><text x="71.8382%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="71.5882%" y="565" width="0.4789%" height="15" fill="rgb(227,153,50)" fg:x="897" fg:w="6"/><text x="71.8382%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.48%)</title><rect x="71.5882%" y="549" width="0.4789%" height="15" fill="rgb(249,228,3)" fg:x="897" fg:w="6"/><text x="71.8382%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (5 samples, 0.40%)</title><rect x="71.6680%" y="533" width="0.3990%" height="15" fill="rgb(219,164,43)" fg:x="898" fg:w="5"/><text x="71.9180%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="71.7478%" y="517" width="0.3192%" height="15" fill="rgb(216,45,41)" fg:x="899" fg:w="4"/><text x="71.9978%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="71.7478%" y="501" width="0.3192%" height="15" fill="rgb(210,226,51)" fg:x="899" fg:w="4"/><text x="71.9978%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (4 samples, 0.32%)</title><rect x="71.7478%" y="485" width="0.3192%" height="15" fill="rgb(209,117,49)" fg:x="899" fg:w="4"/><text x="71.9978%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (4 samples, 0.32%)</title><rect x="71.7478%" y="469" width="0.3192%" height="15" fill="rgb(206,196,24)" fg:x="899" fg:w="4"/><text x="71.9978%" y="479.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (4 samples, 0.32%)</title><rect x="71.7478%" y="453" width="0.3192%" height="15" fill="rgb(253,218,3)" fg:x="899" fg:w="4"/><text x="71.9978%" y="463.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (4 samples, 0.32%)</title><rect x="71.7478%" y="437" width="0.3192%" height="15" fill="rgb(252,166,2)" fg:x="899" fg:w="4"/><text x="71.9978%" y="447.50"></text></g><g><title>serde_json::error::make_error (2 samples, 0.16%)</title><rect x="71.9074%" y="421" width="0.1596%" height="15" fill="rgb(236,218,26)" fg:x="901" fg:w="2"/><text x="72.1574%" y="431.50"></text></g><g><title>engine::session::internal::Added::find_refs (13 samples, 1.04%)</title><rect x="71.1093%" y="693" width="1.0375%" height="15" fill="rgb(254,84,19)" fg:x="891" fg:w="13"/><text x="71.3593%" y="703.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (13 samples, 1.04%)</title><rect x="71.1093%" y="677" width="1.0375%" height="15" fill="rgb(219,137,29)" fg:x="891" fg:w="13"/><text x="71.3593%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.0670%" y="661" width="0.0798%" height="15" fill="rgb(227,47,52)" fg:x="903" fg:w="1"/><text x="72.3170%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.0670%" y="645" width="0.0798%" height="15" fill="rgb(229,167,24)" fg:x="903" fg:w="1"/><text x="72.3170%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="72.0670%" y="629" width="0.0798%" height="15" fill="rgb(233,164,1)" fg:x="903" fg:w="1"/><text x="72.3170%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="72.0670%" y="613" width="0.0798%" height="15" fill="rgb(218,88,48)" fg:x="903" fg:w="1"/><text x="72.3170%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.0670%" y="597" width="0.0798%" height="15" fill="rgb(226,214,24)" fg:x="903" fg:w="1"/><text x="72.3170%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.0670%" y="581" width="0.0798%" height="15" fill="rgb(233,29,12)" fg:x="903" fg:w="1"/><text x="72.3170%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.3065%" y="645" width="0.0798%" height="15" fill="rgb(219,120,34)" fg:x="906" fg:w="1"/><text x="72.5565%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.3065%" y="629" width="0.0798%" height="15" fill="rgb(226,78,44)" fg:x="906" fg:w="1"/><text x="72.5565%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="72.1468%" y="677" width="0.3192%" height="15" fill="rgb(240,15,48)" fg:x="904" fg:w="4"/><text x="72.3968%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="72.2267%" y="661" width="0.2394%" height="15" fill="rgb(253,176,7)" fg:x="905" fg:w="3"/><text x="72.4767%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.3863%" y="645" width="0.0798%" height="15" fill="rgb(206,166,28)" fg:x="907" fg:w="1"/><text x="72.6363%" y="655.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="72.5459%" y="581" width="0.1596%" height="15" fill="rgb(241,53,51)" fg:x="909" fg:w="2"/><text x="72.7959%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="72.5459%" y="565" width="0.1596%" height="15" fill="rgb(249,112,30)" fg:x="909" fg:w="2"/><text x="72.7959%" y="575.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="72.5459%" y="549" width="0.1596%" height="15" fill="rgb(217,85,30)" fg:x="909" fg:w="2"/><text x="72.7959%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="72.5459%" y="533" width="0.1596%" height="15" fill="rgb(233,49,7)" fg:x="909" fg:w="2"/><text x="72.7959%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="72.5459%" y="517" width="0.1596%" height="15" fill="rgb(234,109,9)" fg:x="909" fg:w="2"/><text x="72.7959%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.6257%" y="501" width="0.0798%" height="15" fill="rgb(253,95,22)" fg:x="910" fg:w="1"/><text x="72.8757%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.6257%" y="485" width="0.0798%" height="15" fill="rgb(233,176,25)" fg:x="910" fg:w="1"/><text x="72.8757%" y="495.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="72.4661%" y="677" width="0.3192%" height="15" fill="rgb(236,33,39)" fg:x="908" fg:w="4"/><text x="72.7161%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="72.4661%" y="661" width="0.3192%" height="15" fill="rgb(223,226,42)" fg:x="908" fg:w="4"/><text x="72.7161%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="72.4661%" y="645" width="0.3192%" height="15" fill="rgb(216,99,33)" fg:x="908" fg:w="4"/><text x="72.7161%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="72.5459%" y="629" width="0.2394%" height="15" fill="rgb(235,84,23)" fg:x="909" fg:w="3"/><text x="72.7959%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="72.5459%" y="613" width="0.2394%" height="15" fill="rgb(232,2,27)" fg:x="909" fg:w="3"/><text x="72.7959%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="72.5459%" y="597" width="0.2394%" height="15" fill="rgb(241,23,22)" fg:x="909" fg:w="3"/><text x="72.7959%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.7055%" y="581" width="0.0798%" height="15" fill="rgb(211,73,27)" fg:x="911" fg:w="1"/><text x="72.9555%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.7055%" y="565" width="0.0798%" height="15" fill="rgb(235,109,49)" fg:x="911" fg:w="1"/><text x="72.9555%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.7055%" y="549" width="0.0798%" height="15" fill="rgb(230,99,29)" fg:x="911" fg:w="1"/><text x="72.9555%" y="559.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="72.7853%" y="565" width="0.0798%" height="15" fill="rgb(245,199,7)" fg:x="912" fg:w="1"/><text x="73.0353%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.8651%" y="533" width="0.0798%" height="15" fill="rgb(217,179,10)" fg:x="913" fg:w="1"/><text x="73.1151%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.8651%" y="517" width="0.0798%" height="15" fill="rgb(254,99,47)" fg:x="913" fg:w="1"/><text x="73.1151%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.8651%" y="501" width="0.0798%" height="15" fill="rgb(251,121,7)" fg:x="913" fg:w="1"/><text x="73.1151%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.8651%" y="485" width="0.0798%" height="15" fill="rgb(250,177,26)" fg:x="913" fg:w="1"/><text x="73.1151%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="72.8651%" y="549" width="0.1596%" height="15" fill="rgb(232,88,15)" fg:x="913" fg:w="2"/><text x="73.1151%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.9449%" y="533" width="0.0798%" height="15" fill="rgb(251,54,54)" fg:x="914" fg:w="1"/><text x="73.1949%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.9449%" y="517" width="0.0798%" height="15" fill="rgb(208,177,15)" fg:x="914" fg:w="1"/><text x="73.1949%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.9449%" y="501" width="0.0798%" height="15" fill="rgb(205,97,32)" fg:x="914" fg:w="1"/><text x="73.1949%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="72.8651%" y="565" width="0.2394%" height="15" fill="rgb(217,192,13)" fg:x="913" fg:w="3"/><text x="73.1151%" y="575.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.0247%" y="549" width="0.0798%" height="15" fill="rgb(215,163,41)" fg:x="915" fg:w="1"/><text x="73.2747%" y="559.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="73.0247%" y="533" width="0.0798%" height="15" fill="rgb(246,83,29)" fg:x="915" fg:w="1"/><text x="73.2747%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="72.7853%" y="613" width="0.3990%" height="15" fill="rgb(219,2,45)" fg:x="912" fg:w="5"/><text x="73.0353%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="72.7853%" y="597" width="0.3990%" height="15" fill="rgb(242,215,33)" fg:x="912" fg:w="5"/><text x="73.0353%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="72.7853%" y="581" width="0.3990%" height="15" fill="rgb(217,1,6)" fg:x="912" fg:w="5"/><text x="73.0353%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.1045%" y="565" width="0.0798%" height="15" fill="rgb(207,85,52)" fg:x="916" fg:w="1"/><text x="73.3545%" y="575.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.1844%" y="613" width="0.0798%" height="15" fill="rgb(231,171,19)" fg:x="917" fg:w="1"/><text x="73.4344%" y="623.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="73.1844%" y="597" width="0.0798%" height="15" fill="rgb(207,128,4)" fg:x="917" fg:w="1"/><text x="73.4344%" y="607.50"></text></g><g><title>engine::session::Session::load_entity (28 samples, 2.23%)</title><rect x="71.1093%" y="709" width="2.2346%" height="15" fill="rgb(219,208,4)" fg:x="891" fg:w="28"/><text x="71.3593%" y="719.50">e..</text></g><g><title>engine::session::internal::Entities::add_persisted (15 samples, 1.20%)</title><rect x="72.1468%" y="693" width="1.1971%" height="15" fill="rgb(235,161,42)" fg:x="904" fg:w="15"/><text x="72.3968%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (7 samples, 0.56%)</title><rect x="72.7853%" y="677" width="0.5587%" height="15" fill="rgb(247,218,18)" fg:x="912" fg:w="7"/><text x="73.0353%" y="687.50"></text></g><g><title>serde_json::de::from_trait (7 samples, 0.56%)</title><rect x="72.7853%" y="661" width="0.5587%" height="15" fill="rgb(232,114,51)" fg:x="912" fg:w="7"/><text x="73.0353%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="72.7853%" y="645" width="0.5587%" height="15" fill="rgb(222,95,3)" fg:x="912" fg:w="7"/><text x="73.0353%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="72.7853%" y="629" width="0.5587%" height="15" fill="rgb(240,65,29)" fg:x="912" fg:w="7"/><text x="73.0353%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.2642%" y="613" width="0.0798%" height="15" fill="rgb(249,209,20)" fg:x="918" fg:w="1"/><text x="73.5142%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.2642%" y="597" width="0.0798%" height="15" fill="rgb(241,48,37)" fg:x="918" fg:w="1"/><text x="73.5142%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="73.2642%" y="581" width="0.0798%" height="15" fill="rgb(230,140,42)" fg:x="918" fg:w="1"/><text x="73.5142%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.3440%" y="661" width="0.0798%" height="15" fill="rgb(230,176,45)" fg:x="919" fg:w="1"/><text x="73.5940%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.3440%" y="645" width="0.0798%" height="15" fill="rgb(245,112,21)" fg:x="919" fg:w="1"/><text x="73.5940%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.3440%" y="629" width="0.0798%" height="15" fill="rgb(207,183,35)" fg:x="919" fg:w="1"/><text x="73.5940%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.3440%" y="613" width="0.0798%" height="15" fill="rgb(227,44,33)" fg:x="919" fg:w="1"/><text x="73.5940%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.3440%" y="597" width="0.0798%" height="15" fill="rgb(246,120,21)" fg:x="919" fg:w="1"/><text x="73.5940%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.3440%" y="581" width="0.0798%" height="15" fill="rgb(235,57,52)" fg:x="919" fg:w="1"/><text x="73.5940%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.3440%" y="565" width="0.0798%" height="15" fill="rgb(238,84,10)" fg:x="919" fg:w="1"/><text x="73.5940%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.3440%" y="549" width="0.0798%" height="15" fill="rgb(251,200,32)" fg:x="919" fg:w="1"/><text x="73.5940%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.3440%" y="533" width="0.0798%" height="15" fill="rgb(247,159,13)" fg:x="919" fg:w="1"/><text x="73.5940%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.3440%" y="517" width="0.0798%" height="15" fill="rgb(238,64,4)" fg:x="919" fg:w="1"/><text x="73.5940%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.3440%" y="501" width="0.0798%" height="15" fill="rgb(221,131,51)" fg:x="919" fg:w="1"/><text x="73.5940%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.3440%" y="485" width="0.0798%" height="15" fill="rgb(242,5,29)" fg:x="919" fg:w="1"/><text x="73.5940%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.4238%" y="613" width="0.0798%" height="15" fill="rgb(214,130,32)" fg:x="920" fg:w="1"/><text x="73.6738%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="73.4238%" y="661" width="0.1596%" height="15" fill="rgb(244,210,16)" fg:x="920" fg:w="2"/><text x="73.6738%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="73.4238%" y="645" width="0.1596%" height="15" fill="rgb(234,48,26)" fg:x="920" fg:w="2"/><text x="73.6738%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="73.4238%" y="629" width="0.1596%" height="15" fill="rgb(231,82,38)" fg:x="920" fg:w="2"/><text x="73.6738%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="73.5036%" y="613" width="0.0798%" height="15" fill="rgb(254,128,41)" fg:x="921" fg:w="1"/><text x="73.7536%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.5036%" y="597" width="0.0798%" height="15" fill="rgb(212,73,49)" fg:x="921" fg:w="1"/><text x="73.7536%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.5036%" y="581" width="0.0798%" height="15" fill="rgb(205,62,54)" fg:x="921" fg:w="1"/><text x="73.7536%" y="591.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="73.5834%" y="661" width="0.1596%" height="15" fill="rgb(228,0,8)" fg:x="922" fg:w="2"/><text x="73.8334%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="73.8228%" y="613" width="0.0798%" height="15" fill="rgb(251,28,17)" fg:x="925" fg:w="1"/><text x="74.0728%" y="623.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.9026%" y="565" width="0.1596%" height="15" fill="rgb(238,105,27)" fg:x="926" fg:w="2"/><text x="74.1526%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.9026%" y="549" width="0.1596%" height="15" fill="rgb(237,216,33)" fg:x="926" fg:w="2"/><text x="74.1526%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.9824%" y="533" width="0.0798%" height="15" fill="rgb(229,228,25)" fg:x="927" fg:w="1"/><text x="74.2324%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.9824%" y="517" width="0.0798%" height="15" fill="rgb(233,75,23)" fg:x="927" fg:w="1"/><text x="74.2324%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="73.9824%" y="501" width="0.0798%" height="15" fill="rgb(231,207,16)" fg:x="927" fg:w="1"/><text x="74.2324%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.0623%" y="565" width="0.0798%" height="15" fill="rgb(231,191,45)" fg:x="928" fg:w="1"/><text x="74.3123%" y="575.50"></text></g><g><title>kernel::model::entity::Entity::from_value (6 samples, 0.48%)</title><rect x="73.7430%" y="661" width="0.4789%" height="15" fill="rgb(224,133,17)" fg:x="924" fg:w="6"/><text x="73.9930%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="73.8228%" y="645" width="0.3990%" height="15" fill="rgb(209,178,27)" fg:x="925" fg:w="5"/><text x="74.0728%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="73.8228%" y="629" width="0.3990%" height="15" fill="rgb(218,37,11)" fg:x="925" fg:w="5"/><text x="74.0728%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="73.9026%" y="613" width="0.3192%" height="15" fill="rgb(251,226,25)" fg:x="926" fg:w="4"/><text x="74.1526%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="73.9026%" y="597" width="0.3192%" height="15" fill="rgb(209,222,27)" fg:x="926" fg:w="4"/><text x="74.1526%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="73.9026%" y="581" width="0.3192%" height="15" fill="rgb(238,22,21)" fg:x="926" fg:w="4"/><text x="74.1526%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.1421%" y="565" width="0.0798%" height="15" fill="rgb(233,161,25)" fg:x="929" fg:w="1"/><text x="74.3921%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.1421%" y="549" width="0.0798%" height="15" fill="rgb(226,122,53)" fg:x="929" fg:w="1"/><text x="74.3921%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="74.1421%" y="533" width="0.0798%" height="15" fill="rgb(220,123,17)" fg:x="929" fg:w="1"/><text x="74.3921%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.1421%" y="517" width="0.0798%" height="15" fill="rgb(230,224,35)" fg:x="929" fg:w="1"/><text x="74.3921%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.1421%" y="501" width="0.0798%" height="15" fill="rgb(246,83,8)" fg:x="929" fg:w="1"/><text x="74.3921%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.1421%" y="485" width="0.0798%" height="15" fill="rgb(230,214,17)" fg:x="929" fg:w="1"/><text x="74.3921%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.3017%" y="565" width="0.0798%" height="15" fill="rgb(222,97,18)" fg:x="931" fg:w="1"/><text x="74.5517%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.3017%" y="549" width="0.0798%" height="15" fill="rgb(206,79,1)" fg:x="931" fg:w="1"/><text x="74.5517%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.3017%" y="533" width="0.0798%" height="15" fill="rgb(214,121,34)" fg:x="931" fg:w="1"/><text x="74.5517%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.3017%" y="517" width="0.0798%" height="15" fill="rgb(249,199,46)" fg:x="931" fg:w="1"/><text x="74.5517%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.3017%" y="501" width="0.0798%" height="15" fill="rgb(214,222,46)" fg:x="931" fg:w="1"/><text x="74.5517%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.3017%" y="485" width="0.0798%" height="15" fill="rgb(248,168,30)" fg:x="931" fg:w="1"/><text x="74.5517%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.3017%" y="469" width="0.0798%" height="15" fill="rgb(226,14,28)" fg:x="931" fg:w="1"/><text x="74.5517%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.3815%" y="565" width="0.0798%" height="15" fill="rgb(253,123,1)" fg:x="932" fg:w="1"/><text x="74.6315%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="74.2219%" y="597" width="0.3192%" height="15" fill="rgb(225,24,42)" fg:x="930" fg:w="4"/><text x="74.4719%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="74.3017%" y="581" width="0.2394%" height="15" fill="rgb(216,161,37)" fg:x="931" fg:w="3"/><text x="74.5517%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.4613%" y="565" width="0.0798%" height="15" fill="rgb(251,164,26)" fg:x="933" fg:w="1"/><text x="74.7113%" y="575.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.5411%" y="597" width="0.0798%" height="15" fill="rgb(219,177,3)" fg:x="934" fg:w="1"/><text x="74.7911%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.5411%" y="581" width="0.0798%" height="15" fill="rgb(222,65,0)" fg:x="934" fg:w="1"/><text x="74.7911%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (936 samples, 74.70%)</title><rect x="0.0000%" y="789" width="74.7007%" height="15" fill="rgb(223,69,54)" fg:x="0" fg:w="936"/><text x="0.2500%" y="799.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (936 samples, 74.70%)</title><rect x="0.0000%" y="773" width="74.7007%" height="15" fill="rgb(235,30,27)" fg:x="0" fg:w="936"/><text x="0.2500%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (936 samples, 74.70%)</title><rect x="0.0000%" y="757" width="74.7007%" height="15" fill="rgb(220,183,50)" fg:x="0" fg:w="936"/><text x="0.2500%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (523 samples, 41.74%)</title><rect x="32.9609%" y="741" width="41.7398%" height="15" fill="rgb(248,198,15)" fg:x="413" fg:w="523"/><text x="33.2109%" y="751.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (523 samples, 41.74%)</title><rect x="32.9609%" y="725" width="41.7398%" height="15" fill="rgb(222,211,4)" fg:x="413" fg:w="523"/><text x="33.2109%" y="735.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (17 samples, 1.36%)</title><rect x="73.3440%" y="709" width="1.3567%" height="15" fill="rgb(214,102,34)" fg:x="919" fg:w="17"/><text x="73.5940%" y="719.50"></text></g><g><title>engine::session::Session::load_entity (17 samples, 1.36%)</title><rect x="73.3440%" y="693" width="1.3567%" height="15" fill="rgb(245,92,5)" fg:x="919" fg:w="17"/><text x="73.5940%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (17 samples, 1.36%)</title><rect x="73.3440%" y="677" width="1.3567%" height="15" fill="rgb(252,72,51)" fg:x="919" fg:w="17"/><text x="73.5940%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (6 samples, 0.48%)</title><rect x="74.2219%" y="661" width="0.4789%" height="15" fill="rgb(252,208,19)" fg:x="930" fg:w="6"/><text x="74.4719%" y="671.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.48%)</title><rect x="74.2219%" y="645" width="0.4789%" height="15" fill="rgb(211,69,7)" fg:x="930" fg:w="6"/><text x="74.4719%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="74.2219%" y="629" width="0.4789%" height="15" fill="rgb(211,27,16)" fg:x="930" fg:w="6"/><text x="74.4719%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="74.2219%" y="613" width="0.4789%" height="15" fill="rgb(219,216,14)" fg:x="930" fg:w="6"/><text x="74.4719%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.6209%" y="597" width="0.0798%" height="15" fill="rgb(219,71,8)" fg:x="935" fg:w="1"/><text x="74.8709%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.7805%" y="677" width="0.0798%" height="15" fill="rgb(223,170,53)" fg:x="937" fg:w="1"/><text x="75.0305%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="74.7805%" y="741" width="0.1596%" height="15" fill="rgb(246,21,26)" fg:x="937" fg:w="2"/><text x="75.0305%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.7805%" y="725" width="0.1596%" height="15" fill="rgb(248,20,46)" fg:x="937" fg:w="2"/><text x="75.0305%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="74.7805%" y="709" width="0.1596%" height="15" fill="rgb(252,94,11)" fg:x="937" fg:w="2"/><text x="75.0305%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="74.7805%" y="693" width="0.1596%" height="15" fill="rgb(236,163,8)" fg:x="937" fg:w="2"/><text x="75.0305%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.8603%" y="677" width="0.0798%" height="15" fill="rgb(217,221,45)" fg:x="938" fg:w="1"/><text x="75.1103%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.8603%" y="661" width="0.0798%" height="15" fill="rgb(238,38,17)" fg:x="938" fg:w="1"/><text x="75.1103%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.8603%" y="645" width="0.0798%" height="15" fill="rgb(242,210,23)" fg:x="938" fg:w="1"/><text x="75.1103%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.8603%" y="629" width="0.0798%" height="15" fill="rgb(250,86,53)" fg:x="938" fg:w="1"/><text x="75.1103%" y="639.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="75.0998%" y="725" width="0.1596%" height="15" fill="rgb(223,168,25)" fg:x="941" fg:w="2"/><text x="75.3498%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="75.0998%" y="709" width="0.1596%" height="15" fill="rgb(251,189,4)" fg:x="941" fg:w="2"/><text x="75.3498%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="75.0998%" y="693" width="0.1596%" height="15" fill="rgb(245,19,28)" fg:x="941" fg:w="2"/><text x="75.3498%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (2 samples, 0.16%)</title><rect x="75.0998%" y="677" width="0.1596%" height="15" fill="rgb(207,10,34)" fg:x="941" fg:w="2"/><text x="75.3498%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (2 samples, 0.16%)</title><rect x="75.0998%" y="661" width="0.1596%" height="15" fill="rgb(235,153,31)" fg:x="941" fg:w="2"/><text x="75.3498%" y="671.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="75.0998%" y="645" width="0.1596%" height="15" fill="rgb(228,72,37)" fg:x="941" fg:w="2"/><text x="75.3498%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.3392%" y="645" width="0.0798%" height="15" fill="rgb(215,15,16)" fg:x="944" fg:w="1"/><text x="75.5892%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.4190%" y="629" width="0.0798%" height="15" fill="rgb(250,119,29)" fg:x="945" fg:w="1"/><text x="75.6690%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.4988%" y="613" width="0.0798%" height="15" fill="rgb(214,59,1)" fg:x="946" fg:w="1"/><text x="75.7488%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.5786%" y="581" width="0.0798%" height="15" fill="rgb(223,109,25)" fg:x="947" fg:w="1"/><text x="75.8286%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="75.2594%" y="661" width="0.4789%" height="15" fill="rgb(230,198,22)" fg:x="943" fg:w="6"/><text x="75.5094%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="75.4190%" y="645" width="0.3192%" height="15" fill="rgb(245,184,46)" fg:x="945" fg:w="4"/><text x="75.6690%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="75.4988%" y="629" width="0.2394%" height="15" fill="rgb(253,73,16)" fg:x="946" fg:w="3"/><text x="75.7488%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.5786%" y="613" width="0.1596%" height="15" fill="rgb(206,94,45)" fg:x="947" fg:w="2"/><text x="75.8286%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.5786%" y="597" width="0.1596%" height="15" fill="rgb(236,83,27)" fg:x="947" fg:w="2"/><text x="75.8286%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.6584%" y="581" width="0.0798%" height="15" fill="rgb(220,196,8)" fg:x="948" fg:w="1"/><text x="75.9084%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.6584%" y="565" width="0.0798%" height="15" fill="rgb(254,185,14)" fg:x="948" fg:w="1"/><text x="75.9084%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.7382%" y="629" width="0.0798%" height="15" fill="rgb(226,50,22)" fg:x="949" fg:w="1"/><text x="75.9882%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.7382%" y="613" width="0.0798%" height="15" fill="rgb(253,147,0)" fg:x="949" fg:w="1"/><text x="75.9882%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="75.8180%" y="613" width="0.0798%" height="15" fill="rgb(252,46,33)" fg:x="950" fg:w="1"/><text x="76.0680%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.8180%" y="597" width="0.0798%" height="15" fill="rgb(242,22,54)" fg:x="950" fg:w="1"/><text x="76.0680%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.8180%" y="581" width="0.0798%" height="15" fill="rgb(223,178,32)" fg:x="950" fg:w="1"/><text x="76.0680%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.8180%" y="565" width="0.0798%" height="15" fill="rgb(214,106,53)" fg:x="950" fg:w="1"/><text x="76.0680%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.8180%" y="549" width="0.0798%" height="15" fill="rgb(232,65,50)" fg:x="950" fg:w="1"/><text x="76.0680%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="75.7382%" y="661" width="0.2394%" height="15" fill="rgb(231,110,28)" fg:x="949" fg:w="3"/><text x="75.9882%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="75.7382%" y="645" width="0.2394%" height="15" fill="rgb(216,71,40)" fg:x="949" fg:w="3"/><text x="75.9882%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.8180%" y="629" width="0.1596%" height="15" fill="rgb(229,89,53)" fg:x="950" fg:w="2"/><text x="76.0680%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.8978%" y="613" width="0.0798%" height="15" fill="rgb(210,124,14)" fg:x="951" fg:w="1"/><text x="76.1478%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.8978%" y="597" width="0.0798%" height="15" fill="rgb(236,213,6)" fg:x="951" fg:w="1"/><text x="76.1478%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.8978%" y="581" width="0.0798%" height="15" fill="rgb(228,41,5)" fg:x="951" fg:w="1"/><text x="76.1478%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 1.12%)</title><rect x="74.9401%" y="741" width="1.1173%" height="15" fill="rgb(221,167,25)" fg:x="939" fg:w="14"/><text x="75.1901%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (10 samples, 0.80%)</title><rect x="75.2594%" y="725" width="0.7981%" height="15" fill="rgb(228,144,37)" fg:x="943" fg:w="10"/><text x="75.5094%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.80%)</title><rect x="75.2594%" y="709" width="0.7981%" height="15" fill="rgb(227,189,38)" fg:x="943" fg:w="10"/><text x="75.5094%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (10 samples, 0.80%)</title><rect x="75.2594%" y="693" width="0.7981%" height="15" fill="rgb(218,8,2)" fg:x="943" fg:w="10"/><text x="75.5094%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.80%)</title><rect x="75.2594%" y="677" width="0.7981%" height="15" fill="rgb(209,61,28)" fg:x="943" fg:w="10"/><text x="75.5094%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.9777%" y="661" width="0.0798%" height="15" fill="rgb(233,140,39)" fg:x="952" fg:w="1"/><text x="76.2277%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.0575%" y="613" width="0.0798%" height="15" fill="rgb(251,66,48)" fg:x="953" fg:w="1"/><text x="76.3075%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.0575%" y="597" width="0.0798%" height="15" fill="rgb(210,44,45)" fg:x="953" fg:w="1"/><text x="76.3075%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.0575%" y="581" width="0.0798%" height="15" fill="rgb(214,136,46)" fg:x="953" fg:w="1"/><text x="76.3075%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.0575%" y="565" width="0.0798%" height="15" fill="rgb(207,130,50)" fg:x="953" fg:w="1"/><text x="76.3075%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.0575%" y="549" width="0.0798%" height="15" fill="rgb(228,102,49)" fg:x="953" fg:w="1"/><text x="76.3075%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.0575%" y="533" width="0.0798%" height="15" fill="rgb(253,55,1)" fg:x="953" fg:w="1"/><text x="76.3075%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.0575%" y="517" width="0.0798%" height="15" fill="rgb(238,222,9)" fg:x="953" fg:w="1"/><text x="76.3075%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.0575%" y="501" width="0.0798%" height="15" fill="rgb(246,99,6)" fg:x="953" fg:w="1"/><text x="76.3075%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.0575%" y="485" width="0.0798%" height="15" fill="rgb(219,110,26)" fg:x="953" fg:w="1"/><text x="76.3075%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.0575%" y="469" width="0.0798%" height="15" fill="rgb(239,160,33)" fg:x="953" fg:w="1"/><text x="76.3075%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.0575%" y="453" width="0.0798%" height="15" fill="rgb(220,202,23)" fg:x="953" fg:w="1"/><text x="76.3075%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.0575%" y="437" width="0.0798%" height="15" fill="rgb(208,80,26)" fg:x="953" fg:w="1"/><text x="76.3075%" y="447.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (3 samples, 0.24%)</title><rect x="76.0575%" y="645" width="0.2394%" height="15" fill="rgb(243,85,7)" fg:x="953" fg:w="3"/><text x="76.3075%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="76.0575%" y="629" width="0.2394%" height="15" fill="rgb(228,77,47)" fg:x="953" fg:w="3"/><text x="76.3075%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="76.1373%" y="613" width="0.1596%" height="15" fill="rgb(212,226,8)" fg:x="954" fg:w="2"/><text x="76.3873%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.2171%" y="597" width="0.0798%" height="15" fill="rgb(241,120,54)" fg:x="955" fg:w="1"/><text x="76.4671%" y="607.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.32%)</title><rect x="76.0575%" y="661" width="0.3192%" height="15" fill="rgb(226,80,16)" fg:x="953" fg:w="4"/><text x="76.3075%" y="671.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (1 samples, 0.08%)</title><rect x="76.2969%" y="645" width="0.0798%" height="15" fill="rgb(240,76,13)" fg:x="956" fg:w="1"/><text x="76.5469%" y="655.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="76.2969%" y="629" width="0.0798%" height="15" fill="rgb(252,74,8)" fg:x="956" fg:w="1"/><text x="76.5469%" y="639.50"></text></g><g><title>glob::fill_todo (1 samples, 0.08%)</title><rect x="76.2969%" y="613" width="0.0798%" height="15" fill="rgb(244,155,2)" fg:x="956" fg:w="1"/><text x="76.5469%" y="623.50"></text></g><g><title>glob::is_dir (1 samples, 0.08%)</title><rect x="76.2969%" y="597" width="0.0798%" height="15" fill="rgb(215,81,35)" fg:x="956" fg:w="1"/><text x="76.5469%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="76.2969%" y="581" width="0.0798%" height="15" fill="rgb(206,55,2)" fg:x="956" fg:w="1"/><text x="76.5469%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="76.2969%" y="565" width="0.0798%" height="15" fill="rgb(231,2,34)" fg:x="956" fg:w="1"/><text x="76.5469%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="76.2969%" y="549" width="0.0798%" height="15" fill="rgb(242,176,48)" fg:x="956" fg:w="1"/><text x="76.5469%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="76.2969%" y="533" width="0.0798%" height="15" fill="rgb(249,31,36)" fg:x="956" fg:w="1"/><text x="76.5469%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="76.2969%" y="517" width="0.0798%" height="15" fill="rgb(205,18,17)" fg:x="956" fg:w="1"/><text x="76.5469%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="76.2969%" y="501" width="0.0798%" height="15" fill="rgb(254,130,5)" fg:x="956" fg:w="1"/><text x="76.5469%" y="511.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="76.2969%" y="485" width="0.0798%" height="15" fill="rgb(229,42,45)" fg:x="956" fg:w="1"/><text x="76.5469%" y="495.50"></text></g><g><title>&lt;plugins_core::building::actions::BidirectionalDigAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="76.3767%" y="597" width="0.0798%" height="15" fill="rgb(245,95,25)" fg:x="957" fg:w="1"/><text x="76.6267%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="76.3767%" y="581" width="0.0798%" height="15" fill="rgb(249,193,38)" fg:x="957" fg:w="1"/><text x="76.6267%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="76.3767%" y="565" width="0.0798%" height="15" fill="rgb(241,140,43)" fg:x="957" fg:w="1"/><text x="76.6267%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.3767%" y="549" width="0.0798%" height="15" fill="rgb(245,78,48)" fg:x="957" fg:w="1"/><text x="76.6267%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.3767%" y="533" width="0.0798%" height="15" fill="rgb(214,92,39)" fg:x="957" fg:w="1"/><text x="76.6267%" y="543.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="76.3767%" y="629" width="0.1596%" height="15" fill="rgb(211,189,14)" fg:x="957" fg:w="2"/><text x="76.6267%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="76.3767%" y="613" width="0.1596%" height="15" fill="rgb(218,7,24)" fg:x="957" fg:w="2"/><text x="76.6267%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="76.4565%" y="597" width="0.0798%" height="15" fill="rgb(224,200,49)" fg:x="958" fg:w="1"/><text x="76.7065%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="76.4565%" y="581" width="0.0798%" height="15" fill="rgb(218,210,14)" fg:x="958" fg:w="1"/><text x="76.7065%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.4565%" y="565" width="0.0798%" height="15" fill="rgb(234,142,31)" fg:x="958" fg:w="1"/><text x="76.7065%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.4565%" y="549" width="0.0798%" height="15" fill="rgb(227,165,2)" fg:x="958" fg:w="1"/><text x="76.7065%" y="559.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="76.5363%" y="629" width="0.1596%" height="15" fill="rgb(232,44,46)" fg:x="959" fg:w="2"/><text x="76.7863%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="76.5363%" y="613" width="0.1596%" height="15" fill="rgb(236,149,47)" fg:x="959" fg:w="2"/><text x="76.7863%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="76.6161%" y="597" width="0.0798%" height="15" fill="rgb(227,45,31)" fg:x="960" fg:w="1"/><text x="76.8661%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.6161%" y="581" width="0.0798%" height="15" fill="rgb(240,176,51)" fg:x="960" fg:w="1"/><text x="76.8661%" y="591.50"></text></g><g><title>&lt;plugins_core::emote::EmotePlugin as kernel::plugins::Plugin&gt;::key (1 samples, 0.08%)</title><rect x="76.6959%" y="629" width="0.0798%" height="15" fill="rgb(249,146,41)" fg:x="961" fg:w="1"/><text x="76.9459%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.7757%" y="597" width="0.0798%" height="15" fill="rgb(213,208,4)" fg:x="962" fg:w="1"/><text x="77.0257%" y="607.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (7 samples, 0.56%)</title><rect x="76.3767%" y="661" width="0.5587%" height="15" fill="rgb(245,84,36)" fg:x="957" fg:w="7"/><text x="76.6267%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.56%)</title><rect x="76.3767%" y="645" width="0.5587%" height="15" fill="rgb(254,84,18)" fg:x="957" fg:w="7"/><text x="76.6267%" y="655.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="76.7757%" y="629" width="0.1596%" height="15" fill="rgb(225,38,54)" fg:x="962" fg:w="2"/><text x="77.0257%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="76.7757%" y="613" width="0.1596%" height="15" fill="rgb(246,50,30)" fg:x="962" fg:w="2"/><text x="77.0257%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="76.8555%" y="597" width="0.0798%" height="15" fill="rgb(246,148,9)" fg:x="963" fg:w="1"/><text x="77.1055%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.8555%" y="581" width="0.0798%" height="15" fill="rgb(223,75,4)" fg:x="963" fg:w="1"/><text x="77.1055%" y="591.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="76.8555%" y="565" width="0.0798%" height="15" fill="rgb(239,148,41)" fg:x="963" fg:w="1"/><text x="77.1055%" y="575.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (12 samples, 0.96%)</title><rect x="76.0575%" y="741" width="0.9577%" height="15" fill="rgb(205,195,3)" fg:x="953" fg:w="12"/><text x="76.3075%" y="751.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (12 samples, 0.96%)</title><rect x="76.0575%" y="725" width="0.9577%" height="15" fill="rgb(254,161,1)" fg:x="953" fg:w="12"/><text x="76.3075%" y="735.50"></text></g><g><title>engine::session::Session::new (12 samples, 0.96%)</title><rect x="76.0575%" y="709" width="0.9577%" height="15" fill="rgb(211,229,8)" fg:x="953" fg:w="12"/><text x="76.3075%" y="719.50"></text></g><g><title>engine::session::Session::initialize (12 samples, 0.96%)</title><rect x="76.0575%" y="693" width="0.9577%" height="15" fill="rgb(220,97,9)" fg:x="953" fg:w="12"/><text x="76.3075%" y="703.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (12 samples, 0.96%)</title><rect x="76.0575%" y="677" width="0.9577%" height="15" fill="rgb(240,218,8)" fg:x="953" fg:w="12"/><text x="76.3075%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (1 samples, 0.08%)</title><rect x="76.9354%" y="661" width="0.0798%" height="15" fill="rgb(250,44,0)" fg:x="964" fg:w="1"/><text x="77.1854%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.9354%" y="645" width="0.0798%" height="15" fill="rgb(236,41,53)" fg:x="964" fg:w="1"/><text x="77.1854%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="77.0152%" y="629" width="0.1596%" height="15" fill="rgb(218,227,13)" fg:x="965" fg:w="2"/><text x="77.2652%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="77.0152%" y="613" width="0.1596%" height="15" fill="rgb(217,94,32)" fg:x="965" fg:w="2"/><text x="77.2652%" y="623.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="77.0152%" y="597" width="0.1596%" height="15" fill="rgb(213,217,12)" fg:x="965" fg:w="2"/><text x="77.2652%" y="607.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="77.1748%" y="613" width="0.0798%" height="15" fill="rgb(229,13,46)" fg:x="967" fg:w="1"/><text x="77.4248%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="77.2546%" y="597" width="0.0798%" height="15" fill="rgb(243,139,5)" fg:x="968" fg:w="1"/><text x="77.5046%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.2546%" y="581" width="0.0798%" height="15" fill="rgb(249,38,45)" fg:x="968" fg:w="1"/><text x="77.5046%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.2546%" y="565" width="0.0798%" height="15" fill="rgb(216,70,11)" fg:x="968" fg:w="1"/><text x="77.5046%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.2546%" y="549" width="0.0798%" height="15" fill="rgb(253,101,25)" fg:x="968" fg:w="1"/><text x="77.5046%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="77.3344%" y="581" width="0.0798%" height="15" fill="rgb(207,197,30)" fg:x="969" fg:w="1"/><text x="77.5844%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="77.2546%" y="613" width="0.2394%" height="15" fill="rgb(238,87,13)" fg:x="968" fg:w="3"/><text x="77.5046%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="77.3344%" y="597" width="0.1596%" height="15" fill="rgb(215,155,8)" fg:x="969" fg:w="2"/><text x="77.5844%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.4142%" y="581" width="0.0798%" height="15" fill="rgb(239,166,38)" fg:x="970" fg:w="1"/><text x="77.6642%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="77.4142%" y="565" width="0.0798%" height="15" fill="rgb(240,194,35)" fg:x="970" fg:w="1"/><text x="77.6642%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.4142%" y="549" width="0.0798%" height="15" fill="rgb(219,10,44)" fg:x="970" fg:w="1"/><text x="77.6642%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.4142%" y="533" width="0.0798%" height="15" fill="rgb(251,220,35)" fg:x="970" fg:w="1"/><text x="77.6642%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.4142%" y="517" width="0.0798%" height="15" fill="rgb(218,117,13)" fg:x="970" fg:w="1"/><text x="77.6642%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.40%)</title><rect x="77.1748%" y="629" width="0.3990%" height="15" fill="rgb(221,213,40)" fg:x="967" fg:w="5"/><text x="77.4248%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.4940%" y="613" width="0.0798%" height="15" fill="rgb(251,224,35)" fg:x="971" fg:w="1"/><text x="77.7440%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.4940%" y="597" width="0.0798%" height="15" fill="rgb(241,33,39)" fg:x="971" fg:w="1"/><text x="77.7440%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.4940%" y="581" width="0.0798%" height="15" fill="rgb(222,74,17)" fg:x="971" fg:w="1"/><text x="77.7440%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="77.4940%" y="565" width="0.0798%" height="15" fill="rgb(225,103,0)" fg:x="971" fg:w="1"/><text x="77.7440%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.4940%" y="549" width="0.0798%" height="15" fill="rgb(240,0,12)" fg:x="971" fg:w="1"/><text x="77.7440%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.4940%" y="533" width="0.0798%" height="15" fill="rgb(233,213,37)" fg:x="971" fg:w="1"/><text x="77.7440%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="77.5738%" y="565" width="0.1596%" height="15" fill="rgb(225,84,52)" fg:x="972" fg:w="2"/><text x="77.8238%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.6536%" y="549" width="0.0798%" height="15" fill="rgb(247,160,51)" fg:x="973" fg:w="1"/><text x="77.9036%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.6536%" y="533" width="0.0798%" height="15" fill="rgb(244,60,51)" fg:x="973" fg:w="1"/><text x="77.9036%" y="543.50"></text></g><g><title>engine::session::Session::flush (10 samples, 0.80%)</title><rect x="77.0152%" y="725" width="0.7981%" height="15" fill="rgb(233,114,7)" fg:x="965" fg:w="10"/><text x="77.2652%" y="735.50"></text></g><g><title>engine::session::state::State::close (10 samples, 0.80%)</title><rect x="77.0152%" y="709" width="0.7981%" height="15" fill="rgb(246,136,16)" fg:x="965" fg:w="10"/><text x="77.2652%" y="719.50"></text></g><g><title>engine::session::state::State::flush_entities (10 samples, 0.80%)</title><rect x="77.0152%" y="693" width="0.7981%" height="15" fill="rgb(243,114,45)" fg:x="965" fg:w="10"/><text x="77.2652%" y="703.50"></text></g><g><title>core::iter::adapters::try_process (10 samples, 0.80%)</title><rect x="77.0152%" y="677" width="0.7981%" height="15" fill="rgb(247,183,43)" fg:x="965" fg:w="10"/><text x="77.2652%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.80%)</title><rect x="77.0152%" y="661" width="0.7981%" height="15" fill="rgb(251,210,42)" fg:x="965" fg:w="10"/><text x="77.2652%" y="671.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (10 samples, 0.80%)</title><rect x="77.0152%" y="645" width="0.7981%" height="15" fill="rgb(221,88,35)" fg:x="965" fg:w="10"/><text x="77.2652%" y="655.50"></text></g><g><title>kernel::model::any_entity_changes (3 samples, 0.24%)</title><rect x="77.5738%" y="629" width="0.2394%" height="15" fill="rgb(242,21,20)" fg:x="972" fg:w="3"/><text x="77.8238%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="77.5738%" y="613" width="0.2394%" height="15" fill="rgb(233,226,36)" fg:x="972" fg:w="3"/><text x="77.8238%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="77.5738%" y="597" width="0.2394%" height="15" fill="rgb(243,189,34)" fg:x="972" fg:w="3"/><text x="77.8238%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="77.5738%" y="581" width="0.2394%" height="15" fill="rgb(207,145,50)" fg:x="972" fg:w="3"/><text x="77.8238%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.7334%" y="565" width="0.0798%" height="15" fill="rgb(242,1,50)" fg:x="974" fg:w="1"/><text x="77.9834%" y="575.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="77.8132%" y="709" width="0.0798%" height="15" fill="rgb(231,65,32)" fg:x="975" fg:w="1"/><text x="78.0632%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="77.8132%" y="693" width="0.0798%" height="15" fill="rgb(208,68,49)" fg:x="975" fg:w="1"/><text x="78.0632%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.8132%" y="677" width="0.0798%" height="15" fill="rgb(253,54,49)" fg:x="975" fg:w="1"/><text x="78.0632%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.8132%" y="661" width="0.0798%" height="15" fill="rgb(245,186,24)" fg:x="975" fg:w="1"/><text x="78.0632%" y="671.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="77.8931%" y="677" width="0.1596%" height="15" fill="rgb(209,2,41)" fg:x="976" fg:w="2"/><text x="78.1431%" y="687.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (2 samples, 0.16%)</title><rect x="77.8931%" y="661" width="0.1596%" height="15" fill="rgb(242,208,54)" fg:x="976" fg:w="2"/><text x="78.1431%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="77.8931%" y="645" width="0.1596%" height="15" fill="rgb(225,9,51)" fg:x="976" fg:w="2"/><text x="78.1431%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.9729%" y="629" width="0.0798%" height="15" fill="rgb(207,207,25)" fg:x="977" fg:w="1"/><text x="78.2229%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="78.0527%" y="661" width="0.0798%" height="15" fill="rgb(253,96,18)" fg:x="978" fg:w="1"/><text x="78.3027%" y="671.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (4 samples, 0.32%)</title><rect x="77.8931%" y="693" width="0.3192%" height="15" fill="rgb(252,215,20)" fg:x="976" fg:w="4"/><text x="78.1431%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="78.0527%" y="677" width="0.1596%" height="15" fill="rgb(245,227,26)" fg:x="978" fg:w="2"/><text x="78.3027%" y="687.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="78.1325%" y="661" width="0.0798%" height="15" fill="rgb(241,208,0)" fg:x="979" fg:w="1"/><text x="78.3825%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="78.1325%" y="645" width="0.0798%" height="15" fill="rgb(224,130,10)" fg:x="979" fg:w="1"/><text x="78.3825%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.1325%" y="629" width="0.0798%" height="15" fill="rgb(237,29,0)" fg:x="979" fg:w="1"/><text x="78.3825%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="78.2123%" y="645" width="0.0798%" height="15" fill="rgb(219,27,41)" fg:x="980" fg:w="1"/><text x="78.4623%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.2123%" y="629" width="0.0798%" height="15" fill="rgb(245,101,19)" fg:x="980" fg:w="1"/><text x="78.4623%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.2123%" y="613" width="0.0798%" height="15" fill="rgb(243,44,37)" fg:x="980" fg:w="1"/><text x="78.4623%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="78.2123%" y="597" width="0.0798%" height="15" fill="rgb(228,213,43)" fg:x="980" fg:w="1"/><text x="78.4623%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.2123%" y="581" width="0.0798%" height="15" fill="rgb(219,163,21)" fg:x="980" fg:w="1"/><text x="78.4623%" y="591.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="78.2123%" y="565" width="0.0798%" height="15" fill="rgb(234,86,24)" fg:x="980" fg:w="1"/><text x="78.4623%" y="575.50"></text></g><g><title>plugins_core::build::Build::save (7 samples, 0.56%)</title><rect x="77.8132%" y="725" width="0.5587%" height="15" fill="rgb(225,10,24)" fg:x="975" fg:w="7"/><text x="78.0632%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.48%)</title><rect x="77.8931%" y="709" width="0.4789%" height="15" fill="rgb(218,109,7)" fg:x="976" fg:w="6"/><text x="78.1431%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="78.2123%" y="693" width="0.1596%" height="15" fill="rgb(210,20,26)" fg:x="980" fg:w="2"/><text x="78.4623%" y="703.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="78.2123%" y="677" width="0.1596%" height="15" fill="rgb(216,18,1)" fg:x="980" fg:w="2"/><text x="78.4623%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="78.2123%" y="661" width="0.1596%" height="15" fill="rgb(206,163,23)" fg:x="980" fg:w="2"/><text x="78.4623%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="78.2921%" y="645" width="0.0798%" height="15" fill="rgb(229,150,31)" fg:x="981" fg:w="1"/><text x="78.5421%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="78.2921%" y="629" width="0.0798%" height="15" fill="rgb(231,10,5)" fg:x="981" fg:w="1"/><text x="78.5421%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="78.2921%" y="613" width="0.0798%" height="15" fill="rgb(250,40,50)" fg:x="981" fg:w="1"/><text x="78.5421%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (1 samples, 0.08%)</title><rect x="78.3719%" y="725" width="0.0798%" height="15" fill="rgb(217,119,7)" fg:x="982" fg:w="1"/><text x="78.6219%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="78.3719%" y="709" width="0.0798%" height="15" fill="rgb(245,214,40)" fg:x="982" fg:w="1"/><text x="78.6219%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="78.3719%" y="693" width="0.0798%" height="15" fill="rgb(216,187,1)" fg:x="982" fg:w="1"/><text x="78.6219%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="78.3719%" y="677" width="0.0798%" height="15" fill="rgb(237,146,21)" fg:x="982" fg:w="1"/><text x="78.6219%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="78.3719%" y="661" width="0.0798%" height="15" fill="rgb(210,174,47)" fg:x="982" fg:w="1"/><text x="78.6219%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="78.3719%" y="645" width="0.0798%" height="15" fill="rgb(218,111,39)" fg:x="982" fg:w="1"/><text x="78.6219%" y="655.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="78.4517%" y="709" width="0.0798%" height="15" fill="rgb(224,95,19)" fg:x="983" fg:w="1"/><text x="78.7017%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="78.4517%" y="693" width="0.0798%" height="15" fill="rgb(234,15,38)" fg:x="983" fg:w="1"/><text x="78.7017%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="78.4517%" y="677" width="0.0798%" height="15" fill="rgb(246,56,12)" fg:x="983" fg:w="1"/><text x="78.7017%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="78.4517%" y="661" width="0.0798%" height="15" fill="rgb(247,16,17)" fg:x="983" fg:w="1"/><text x="78.7017%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="78.4517%" y="645" width="0.0798%" height="15" fill="rgb(215,151,11)" fg:x="983" fg:w="1"/><text x="78.7017%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="78.4517%" y="629" width="0.0798%" height="15" fill="rgb(225,16,24)" fg:x="983" fg:w="1"/><text x="78.7017%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="78.4517%" y="613" width="0.0798%" height="15" fill="rgb(217,117,5)" fg:x="983" fg:w="1"/><text x="78.7017%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.4517%" y="597" width="0.0798%" height="15" fill="rgb(246,187,53)" fg:x="983" fg:w="1"/><text x="78.7017%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.4517%" y="581" width="0.0798%" height="15" fill="rgb(241,71,40)" fg:x="983" fg:w="1"/><text x="78.7017%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="78.4517%" y="565" width="0.0798%" height="15" fill="rgb(231,67,39)" fg:x="983" fg:w="1"/><text x="78.7017%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.4517%" y="549" width="0.0798%" height="15" fill="rgb(222,120,24)" fg:x="983" fg:w="1"/><text x="78.7017%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.4517%" y="533" width="0.0798%" height="15" fill="rgb(248,3,3)" fg:x="983" fg:w="1"/><text x="78.7017%" y="543.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="78.5315%" y="693" width="0.0798%" height="15" fill="rgb(228,218,5)" fg:x="984" fg:w="1"/><text x="78.7815%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.5315%" y="677" width="0.0798%" height="15" fill="rgb(212,202,43)" fg:x="984" fg:w="1"/><text x="78.7815%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="78.5315%" y="661" width="0.0798%" height="15" fill="rgb(235,183,2)" fg:x="984" fg:w="1"/><text x="78.7815%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="78.5315%" y="645" width="0.0798%" height="15" fill="rgb(230,165,10)" fg:x="984" fg:w="1"/><text x="78.7815%" y="655.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="78.6113%" y="645" width="0.0798%" height="15" fill="rgb(219,54,40)" fg:x="985" fg:w="1"/><text x="78.8613%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="78.6113%" y="629" width="0.0798%" height="15" fill="rgb(244,73,9)" fg:x="985" fg:w="1"/><text x="78.8613%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="78.6113%" y="613" width="0.0798%" height="15" fill="rgb(212,32,45)" fg:x="985" fg:w="1"/><text x="78.8613%" y="623.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="78.6113%" y="597" width="0.0798%" height="15" fill="rgb(205,58,31)" fg:x="985" fg:w="1"/><text x="78.8613%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.6911%" y="549" width="0.0798%" height="15" fill="rgb(250,120,43)" fg:x="986" fg:w="1"/><text x="78.9411%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.6911%" y="533" width="0.0798%" height="15" fill="rgb(235,13,10)" fg:x="986" fg:w="1"/><text x="78.9411%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.6911%" y="517" width="0.0798%" height="15" fill="rgb(232,219,31)" fg:x="986" fg:w="1"/><text x="78.9411%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.6911%" y="501" width="0.0798%" height="15" fill="rgb(218,157,51)" fg:x="986" fg:w="1"/><text x="78.9411%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="78.6911%" y="565" width="0.1596%" height="15" fill="rgb(211,91,52)" fg:x="986" fg:w="2"/><text x="78.9411%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.7709%" y="549" width="0.0798%" height="15" fill="rgb(240,173,1)" fg:x="987" fg:w="1"/><text x="79.0209%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.8508%" y="565" width="0.0798%" height="15" fill="rgb(248,20,47)" fg:x="988" fg:w="1"/><text x="79.1008%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="78.6911%" y="597" width="0.3192%" height="15" fill="rgb(217,221,40)" fg:x="986" fg:w="4"/><text x="78.9411%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="78.6911%" y="581" width="0.3192%" height="15" fill="rgb(226,149,51)" fg:x="986" fg:w="4"/><text x="78.9411%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.9306%" y="565" width="0.0798%" height="15" fill="rgb(252,193,7)" fg:x="989" fg:w="1"/><text x="79.1806%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="79.0104%" y="549" width="0.2394%" height="15" fill="rgb(205,123,0)" fg:x="990" fg:w="3"/><text x="79.2604%" y="559.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="79.0104%" y="533" width="0.2394%" height="15" fill="rgb(233,173,25)" fg:x="990" fg:w="3"/><text x="79.2604%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="79.0104%" y="517" width="0.2394%" height="15" fill="rgb(216,63,32)" fg:x="990" fg:w="3"/><text x="79.2604%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.1700%" y="501" width="0.0798%" height="15" fill="rgb(209,56,45)" fg:x="992" fg:w="1"/><text x="79.4200%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="79.3296%" y="533" width="0.1596%" height="15" fill="rgb(226,111,49)" fg:x="994" fg:w="2"/><text x="79.5796%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="79.3296%" y="517" width="0.1596%" height="15" fill="rgb(244,181,21)" fg:x="994" fg:w="2"/><text x="79.5796%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="79.3296%" y="501" width="0.1596%" height="15" fill="rgb(222,126,15)" fg:x="994" fg:w="2"/><text x="79.5796%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.4094%" y="485" width="0.0798%" height="15" fill="rgb(222,95,17)" fg:x="995" fg:w="1"/><text x="79.6594%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="79.4094%" y="469" width="0.0798%" height="15" fill="rgb(254,46,5)" fg:x="995" fg:w="1"/><text x="79.6594%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.4094%" y="453" width="0.0798%" height="15" fill="rgb(236,216,35)" fg:x="995" fg:w="1"/><text x="79.6594%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="79.4094%" y="437" width="0.0798%" height="15" fill="rgb(217,187,26)" fg:x="995" fg:w="1"/><text x="79.6594%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="79.2498%" y="549" width="0.3192%" height="15" fill="rgb(207,192,25)" fg:x="993" fg:w="4"/><text x="79.4998%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="79.4892%" y="533" width="0.0798%" height="15" fill="rgb(253,135,27)" fg:x="996" fg:w="1"/><text x="79.7392%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="79.4892%" y="517" width="0.0798%" height="15" fill="rgb(211,122,29)" fg:x="996" fg:w="1"/><text x="79.7392%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.4892%" y="501" width="0.0798%" height="15" fill="rgb(233,162,40)" fg:x="996" fg:w="1"/><text x="79.7392%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.4892%" y="485" width="0.0798%" height="15" fill="rgb(222,184,47)" fg:x="996" fg:w="1"/><text x="79.7392%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.4892%" y="469" width="0.0798%" height="15" fill="rgb(249,99,23)" fg:x="996" fg:w="1"/><text x="79.7392%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.4892%" y="453" width="0.0798%" height="15" fill="rgb(214,60,12)" fg:x="996" fg:w="1"/><text x="79.7392%" y="463.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.64%)</title><rect x="79.0104%" y="597" width="0.6385%" height="15" fill="rgb(250,229,36)" fg:x="990" fg:w="8"/><text x="79.2604%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="79.0104%" y="581" width="0.6385%" height="15" fill="rgb(232,195,10)" fg:x="990" fg:w="8"/><text x="79.2604%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="79.0104%" y="565" width="0.6385%" height="15" fill="rgb(205,213,31)" fg:x="990" fg:w="8"/><text x="79.2604%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.5690%" y="549" width="0.0798%" height="15" fill="rgb(237,43,8)" fg:x="997" fg:w="1"/><text x="79.8190%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.5690%" y="533" width="0.0798%" height="15" fill="rgb(216,208,3)" fg:x="997" fg:w="1"/><text x="79.8190%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.5690%" y="517" width="0.0798%" height="15" fill="rgb(228,179,44)" fg:x="997" fg:w="1"/><text x="79.8190%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.6488%" y="565" width="0.0798%" height="15" fill="rgb(230,192,27)" fg:x="998" fg:w="1"/><text x="79.8988%" y="575.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (3 samples, 0.24%)</title><rect x="79.6488%" y="581" width="0.2394%" height="15" fill="rgb(251,30,38)" fg:x="998" fg:w="3"/><text x="79.8988%" y="591.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (2 samples, 0.16%)</title><rect x="79.7287%" y="565" width="0.1596%" height="15" fill="rgb(246,55,52)" fg:x="999" fg:w="2"/><text x="79.9787%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="79.8085%" y="549" width="0.0798%" height="15" fill="rgb(249,79,26)" fg:x="1000" fg:w="1"/><text x="80.0585%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.8085%" y="533" width="0.0798%" height="15" fill="rgb(220,202,16)" fg:x="1000" fg:w="1"/><text x="80.0585%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="79.8883%" y="549" width="0.0798%" height="15" fill="rgb(250,170,23)" fg:x="1001" fg:w="1"/><text x="80.1383%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.8883%" y="533" width="0.0798%" height="15" fill="rgb(230,7,37)" fg:x="1001" fg:w="1"/><text x="80.1383%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.8883%" y="517" width="0.0798%" height="15" fill="rgb(213,71,1)" fg:x="1001" fg:w="1"/><text x="80.1383%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="79.9681%" y="501" width="0.1596%" height="15" fill="rgb(227,87,39)" fg:x="1002" fg:w="2"/><text x="80.2181%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="79.9681%" y="485" width="0.1596%" height="15" fill="rgb(210,41,29)" fg:x="1002" fg:w="2"/><text x="80.2181%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.0479%" y="469" width="0.0798%" height="15" fill="rgb(206,191,31)" fg:x="1003" fg:w="1"/><text x="80.2979%" y="479.50"></text></g><g><title>engine::session::Session::flush (21 samples, 1.68%)</title><rect x="78.5315%" y="709" width="1.6760%" height="15" fill="rgb(247,75,54)" fg:x="984" fg:w="21"/><text x="78.7815%" y="719.50"></text></g><g><title>engine::session::Session::save_changes (20 samples, 1.60%)</title><rect x="78.6113%" y="693" width="1.5962%" height="15" fill="rgb(208,54,50)" fg:x="985" fg:w="20"/><text x="78.8613%" y="703.50"></text></g><g><title>engine::session::state::State::close (20 samples, 1.60%)</title><rect x="78.6113%" y="677" width="1.5962%" height="15" fill="rgb(214,90,37)" fg:x="985" fg:w="20"/><text x="78.8613%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (20 samples, 1.60%)</title><rect x="78.6113%" y="661" width="1.5962%" height="15" fill="rgb(220,132,6)" fg:x="985" fg:w="20"/><text x="78.8613%" y="671.50"></text></g><g><title>core::iter::adapters::try_process (19 samples, 1.52%)</title><rect x="78.6911%" y="645" width="1.5164%" height="15" fill="rgb(213,167,7)" fg:x="986" fg:w="19"/><text x="78.9411%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (19 samples, 1.52%)</title><rect x="78.6911%" y="629" width="1.5164%" height="15" fill="rgb(243,36,27)" fg:x="986" fg:w="19"/><text x="78.9411%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (19 samples, 1.52%)</title><rect x="78.6911%" y="613" width="1.5164%" height="15" fill="rgb(235,147,12)" fg:x="986" fg:w="19"/><text x="78.9411%" y="623.50"></text></g><g><title>kernel::model::any_entity_changes (7 samples, 0.56%)</title><rect x="79.6488%" y="597" width="0.5587%" height="15" fill="rgb(212,198,44)" fg:x="998" fg:w="7"/><text x="79.8988%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="79.8883%" y="581" width="0.3192%" height="15" fill="rgb(218,68,50)" fg:x="1001" fg:w="4"/><text x="80.1383%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="79.8883%" y="565" width="0.3192%" height="15" fill="rgb(224,79,48)" fg:x="1001" fg:w="4"/><text x="80.1383%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="79.9681%" y="549" width="0.2394%" height="15" fill="rgb(213,191,50)" fg:x="1002" fg:w="3"/><text x="80.2181%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="79.9681%" y="533" width="0.2394%" height="15" fill="rgb(254,146,10)" fg:x="1002" fg:w="3"/><text x="80.2181%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="79.9681%" y="517" width="0.2394%" height="15" fill="rgb(215,175,11)" fg:x="1002" fg:w="3"/><text x="80.2181%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.1277%" y="501" width="0.0798%" height="15" fill="rgb(207,49,7)" fg:x="1004" fg:w="1"/><text x="80.3777%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="80.1277%" y="485" width="0.0798%" height="15" fill="rgb(234,144,29)" fg:x="1004" fg:w="1"/><text x="80.3777%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.1277%" y="469" width="0.0798%" height="15" fill="rgb(213,222,48)" fg:x="1004" fg:w="1"/><text x="80.3777%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="80.1277%" y="453" width="0.0798%" height="15" fill="rgb(222,8,6)" fg:x="1004" fg:w="1"/><text x="80.3777%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.1277%" y="437" width="0.0798%" height="15" fill="rgb(221,114,49)" fg:x="1004" fg:w="1"/><text x="80.3777%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.1277%" y="421" width="0.0798%" height="15" fill="rgb(250,140,42)" fg:x="1004" fg:w="1"/><text x="80.3777%" y="431.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="80.2075%" y="709" width="0.0798%" height="15" fill="rgb(250,150,27)" fg:x="1005" fg:w="1"/><text x="80.4575%" y="719.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="80.2075%" y="693" width="0.0798%" height="15" fill="rgb(252,159,3)" fg:x="1005" fg:w="1"/><text x="80.4575%" y="703.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="80.2075%" y="677" width="0.0798%" height="15" fill="rgb(241,182,3)" fg:x="1005" fg:w="1"/><text x="80.4575%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.2075%" y="661" width="0.0798%" height="15" fill="rgb(236,3,9)" fg:x="1005" fg:w="1"/><text x="80.4575%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.2075%" y="645" width="0.0798%" height="15" fill="rgb(223,227,51)" fg:x="1005" fg:w="1"/><text x="80.4575%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="80.2075%" y="629" width="0.0798%" height="15" fill="rgb(232,133,30)" fg:x="1005" fg:w="1"/><text x="80.4575%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.2075%" y="613" width="0.0798%" height="15" fill="rgb(209,93,27)" fg:x="1005" fg:w="1"/><text x="80.4575%" y="623.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="80.2075%" y="597" width="0.0798%" height="15" fill="rgb(208,108,34)" fg:x="1005" fg:w="1"/><text x="80.4575%" y="607.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="80.2873%" y="709" width="0.0798%" height="15" fill="rgb(215,189,13)" fg:x="1006" fg:w="1"/><text x="80.5373%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="80.2873%" y="693" width="0.0798%" height="15" fill="rgb(206,88,23)" fg:x="1006" fg:w="1"/><text x="80.5373%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="80.2873%" y="677" width="0.0798%" height="15" fill="rgb(240,173,0)" fg:x="1006" fg:w="1"/><text x="80.5373%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="80.3671%" y="661" width="0.0798%" height="15" fill="rgb(223,106,52)" fg:x="1007" fg:w="1"/><text x="80.6171%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="80.3671%" y="645" width="0.0798%" height="15" fill="rgb(206,130,16)" fg:x="1007" fg:w="1"/><text x="80.6171%" y="655.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="80.3671%" y="709" width="0.2394%" height="15" fill="rgb(220,54,25)" fg:x="1007" fg:w="3"/><text x="80.6171%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="80.3671%" y="693" width="0.2394%" height="15" fill="rgb(210,4,38)" fg:x="1007" fg:w="3"/><text x="80.6171%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="80.3671%" y="677" width="0.2394%" height="15" fill="rgb(238,94,39)" fg:x="1007" fg:w="3"/><text x="80.6171%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="80.4469%" y="661" width="0.1596%" height="15" fill="rgb(234,124,34)" fg:x="1008" fg:w="2"/><text x="80.6969%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="80.4469%" y="645" width="0.1596%" height="15" fill="rgb(221,91,40)" fg:x="1008" fg:w="2"/><text x="80.6969%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="80.4469%" y="629" width="0.1596%" height="15" fill="rgb(246,53,28)" fg:x="1008" fg:w="2"/><text x="80.6969%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.6065%" y="613" width="0.0798%" height="15" fill="rgb(229,109,7)" fg:x="1010" fg:w="1"/><text x="80.8565%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.6065%" y="597" width="0.0798%" height="15" fill="rgb(249,117,8)" fg:x="1010" fg:w="1"/><text x="80.8565%" y="607.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (2 samples, 0.16%)</title><rect x="80.6065%" y="709" width="0.1596%" height="15" fill="rgb(210,181,1)" fg:x="1010" fg:w="2"/><text x="80.8565%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="80.6065%" y="693" width="0.1596%" height="15" fill="rgb(211,66,1)" fg:x="1010" fg:w="2"/><text x="80.8565%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="80.6065%" y="677" width="0.1596%" height="15" fill="rgb(221,90,14)" fg:x="1010" fg:w="2"/><text x="80.8565%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="80.6065%" y="661" width="0.1596%" height="15" fill="rgb(219,222,44)" fg:x="1010" fg:w="2"/><text x="80.8565%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="80.6065%" y="645" width="0.1596%" height="15" fill="rgb(246,34,33)" fg:x="1010" fg:w="2"/><text x="80.8565%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="80.6065%" y="629" width="0.1596%" height="15" fill="rgb(227,135,41)" fg:x="1010" fg:w="2"/><text x="80.8565%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.6864%" y="613" width="0.0798%" height="15" fill="rgb(226,15,14)" fg:x="1011" fg:w="1"/><text x="80.9364%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.6864%" y="597" width="0.0798%" height="15" fill="rgb(236,148,47)" fg:x="1011" fg:w="1"/><text x="80.9364%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="80.6864%" y="581" width="0.0798%" height="15" fill="rgb(233,162,52)" fg:x="1011" fg:w="1"/><text x="80.9364%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.6864%" y="565" width="0.0798%" height="15" fill="rgb(244,35,28)" fg:x="1011" fg:w="1"/><text x="80.9364%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.6864%" y="549" width="0.0798%" height="15" fill="rgb(205,121,10)" fg:x="1011" fg:w="1"/><text x="80.9364%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="80.6864%" y="533" width="0.0798%" height="15" fill="rgb(250,58,18)" fg:x="1011" fg:w="1"/><text x="80.9364%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.7662%" y="677" width="0.0798%" height="15" fill="rgb(216,37,13)" fg:x="1012" fg:w="1"/><text x="81.0162%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.7662%" y="661" width="0.0798%" height="15" fill="rgb(221,215,42)" fg:x="1012" fg:w="1"/><text x="81.0162%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.7662%" y="645" width="0.0798%" height="15" fill="rgb(217,214,19)" fg:x="1012" fg:w="1"/><text x="81.0162%" y="655.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (2 samples, 0.16%)</title><rect x="80.7662%" y="709" width="0.1596%" height="15" fill="rgb(233,139,13)" fg:x="1012" fg:w="2"/><text x="81.0162%" y="719.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="80.7662%" y="693" width="0.1596%" height="15" fill="rgb(247,168,23)" fg:x="1012" fg:w="2"/><text x="81.0162%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.8460%" y="677" width="0.0798%" height="15" fill="rgb(207,202,1)" fg:x="1013" fg:w="1"/><text x="81.0960%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.8460%" y="661" width="0.0798%" height="15" fill="rgb(220,155,48)" fg:x="1013" fg:w="1"/><text x="81.0960%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="80.9258%" y="693" width="0.0798%" height="15" fill="rgb(250,43,26)" fg:x="1014" fg:w="1"/><text x="81.1758%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="80.9258%" y="677" width="0.0798%" height="15" fill="rgb(212,190,23)" fg:x="1014" fg:w="1"/><text x="81.1758%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="80.9258%" y="661" width="0.0798%" height="15" fill="rgb(216,39,24)" fg:x="1014" fg:w="1"/><text x="81.1758%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="80.9258%" y="645" width="0.0798%" height="15" fill="rgb(252,113,16)" fg:x="1014" fg:w="1"/><text x="81.1758%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.9258%" y="629" width="0.0798%" height="15" fill="rgb(208,113,19)" fg:x="1014" fg:w="1"/><text x="81.1758%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.9258%" y="613" width="0.0798%" height="15" fill="rgb(234,107,25)" fg:x="1014" fg:w="1"/><text x="81.1758%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="80.9258%" y="597" width="0.0798%" height="15" fill="rgb(234,217,51)" fg:x="1014" fg:w="1"/><text x="81.1758%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.9258%" y="581" width="0.0798%" height="15" fill="rgb(251,29,42)" fg:x="1014" fg:w="1"/><text x="81.1758%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.9258%" y="565" width="0.0798%" height="15" fill="rgb(221,62,51)" fg:x="1014" fg:w="1"/><text x="81.1758%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.9258%" y="549" width="0.0798%" height="15" fill="rgb(240,192,43)" fg:x="1014" fg:w="1"/><text x="81.1758%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.9258%" y="533" width="0.0798%" height="15" fill="rgb(224,157,47)" fg:x="1014" fg:w="1"/><text x="81.1758%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="81.0056%" y="677" width="0.0798%" height="15" fill="rgb(226,84,45)" fg:x="1015" fg:w="1"/><text x="81.2556%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="81.0056%" y="661" width="0.0798%" height="15" fill="rgb(208,207,23)" fg:x="1015" fg:w="1"/><text x="81.2556%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.0056%" y="645" width="0.0798%" height="15" fill="rgb(253,34,51)" fg:x="1015" fg:w="1"/><text x="81.2556%" y="655.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (34 samples, 2.71%)</title><rect x="78.4517%" y="725" width="2.7135%" height="15" fill="rgb(227,26,34)" fg:x="983" fg:w="34"/><text x="78.7017%" y="735.50">pl..</text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="80.9258%" y="709" width="0.2394%" height="15" fill="rgb(245,75,19)" fg:x="1014" fg:w="3"/><text x="81.1758%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="81.0056%" y="693" width="0.1596%" height="15" fill="rgb(250,191,31)" fg:x="1015" fg:w="2"/><text x="81.2556%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="81.0854%" y="677" width="0.0798%" height="15" fill="rgb(224,11,50)" fg:x="1016" fg:w="1"/><text x="81.3354%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="81.0854%" y="661" width="0.0798%" height="15" fill="rgb(231,171,7)" fg:x="1016" fg:w="1"/><text x="81.3354%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="81.0854%" y="645" width="0.0798%" height="15" fill="rgb(252,214,10)" fg:x="1016" fg:w="1"/><text x="81.3354%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="81.0854%" y="629" width="0.0798%" height="15" fill="rgb(249,45,46)" fg:x="1016" fg:w="1"/><text x="81.3354%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.0854%" y="613" width="0.0798%" height="15" fill="rgb(240,173,7)" fg:x="1016" fg:w="1"/><text x="81.3354%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.0854%" y="597" width="0.0798%" height="15" fill="rgb(235,214,13)" fg:x="1016" fg:w="1"/><text x="81.3354%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.0854%" y="581" width="0.0798%" height="15" fill="rgb(245,156,8)" fg:x="1016" fg:w="1"/><text x="81.3354%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="81.0854%" y="565" width="0.0798%" height="15" fill="rgb(235,46,12)" fg:x="1016" fg:w="1"/><text x="81.3354%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="81.0854%" y="549" width="0.0798%" height="15" fill="rgb(221,81,14)" fg:x="1016" fg:w="1"/><text x="81.3354%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="81.0854%" y="533" width="0.0798%" height="15" fill="rgb(238,207,9)" fg:x="1016" fg:w="1"/><text x="81.3354%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="81.0854%" y="517" width="0.0798%" height="15" fill="rgb(224,129,35)" fg:x="1016" fg:w="1"/><text x="81.3354%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="81.0854%" y="501" width="0.0798%" height="15" fill="rgb(243,218,34)" fg:x="1016" fg:w="1"/><text x="81.3354%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="81.0854%" y="485" width="0.0798%" height="15" fill="rgb(220,166,13)" fg:x="1016" fg:w="1"/><text x="81.3354%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="81.0854%" y="469" width="0.0798%" height="15" fill="rgb(227,167,49)" fg:x="1016" fg:w="1"/><text x="81.3354%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="81.0854%" y="453" width="0.0798%" height="15" fill="rgb(234,142,12)" fg:x="1016" fg:w="1"/><text x="81.3354%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="81.0854%" y="437" width="0.0798%" height="15" fill="rgb(207,100,48)" fg:x="1016" fg:w="1"/><text x="81.3354%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.0854%" y="421" width="0.0798%" height="15" fill="rgb(210,25,14)" fg:x="1016" fg:w="1"/><text x="81.3354%" y="431.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="81.1652%" y="725" width="0.0798%" height="15" fill="rgb(246,116,27)" fg:x="1017" fg:w="1"/><text x="81.4152%" y="735.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="81.1652%" y="709" width="0.0798%" height="15" fill="rgb(214,193,42)" fg:x="1017" fg:w="1"/><text x="81.4152%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="81.1652%" y="693" width="0.0798%" height="15" fill="rgb(214,122,8)" fg:x="1017" fg:w="1"/><text x="81.4152%" y="703.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="81.2450%" y="693" width="0.0798%" height="15" fill="rgb(244,173,18)" fg:x="1018" fg:w="1"/><text x="81.4950%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="81.2450%" y="677" width="0.0798%" height="15" fill="rgb(232,68,19)" fg:x="1018" fg:w="1"/><text x="81.4950%" y="687.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="81.3248%" y="693" width="0.0798%" height="15" fill="rgb(236,224,1)" fg:x="1019" fg:w="1"/><text x="81.5748%" y="703.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="81.3248%" y="677" width="0.0798%" height="15" fill="rgb(240,11,8)" fg:x="1019" fg:w="1"/><text x="81.5748%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="81.3248%" y="661" width="0.0798%" height="15" fill="rgb(244,159,20)" fg:x="1019" fg:w="1"/><text x="81.5748%" y="671.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="81.3248%" y="645" width="0.0798%" height="15" fill="rgb(240,223,54)" fg:x="1019" fg:w="1"/><text x="81.5748%" y="655.50"></text></g><g><title>kernel::model::base::Identity::new (1 samples, 0.08%)</title><rect x="81.3248%" y="629" width="0.0798%" height="15" fill="rgb(237,146,5)" fg:x="1019" fg:w="1"/><text x="81.5748%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="81.4046%" y="661" width="0.1596%" height="15" fill="rgb(218,221,32)" fg:x="1020" fg:w="2"/><text x="81.6546%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="81.4046%" y="645" width="0.1596%" height="15" fill="rgb(244,96,26)" fg:x="1020" fg:w="2"/><text x="81.6546%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="81.4046%" y="629" width="0.1596%" height="15" fill="rgb(245,184,37)" fg:x="1020" fg:w="2"/><text x="81.6546%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="81.4046%" y="613" width="0.1596%" height="15" fill="rgb(248,91,47)" fg:x="1020" fg:w="2"/><text x="81.6546%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="81.4046%" y="597" width="0.1596%" height="15" fill="rgb(243,199,8)" fg:x="1020" fg:w="2"/><text x="81.6546%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="81.4844%" y="581" width="0.0798%" height="15" fill="rgb(249,12,15)" fg:x="1021" fg:w="1"/><text x="81.7344%" y="591.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="81.4046%" y="693" width="0.2394%" height="15" fill="rgb(245,97,12)" fg:x="1020" fg:w="3"/><text x="81.6546%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="81.4046%" y="677" width="0.2394%" height="15" fill="rgb(244,61,1)" fg:x="1020" fg:w="3"/><text x="81.6546%" y="687.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="81.5642%" y="661" width="0.0798%" height="15" fill="rgb(222,194,10)" fg:x="1022" fg:w="1"/><text x="81.8142%" y="671.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="81.5642%" y="645" width="0.0798%" height="15" fill="rgb(226,178,8)" fg:x="1022" fg:w="1"/><text x="81.8142%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.5642%" y="629" width="0.0798%" height="15" fill="rgb(241,32,34)" fg:x="1022" fg:w="1"/><text x="81.8142%" y="639.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (7 samples, 0.56%)</title><rect x="81.2450%" y="725" width="0.5587%" height="15" fill="rgb(254,26,6)" fg:x="1018" fg:w="7"/><text x="81.4950%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (7 samples, 0.56%)</title><rect x="81.2450%" y="709" width="0.5587%" height="15" fill="rgb(249,71,11)" fg:x="1018" fg:w="7"/><text x="81.4950%" y="719.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (2 samples, 0.16%)</title><rect x="81.6441%" y="693" width="0.1596%" height="15" fill="rgb(232,170,27)" fg:x="1023" fg:w="2"/><text x="81.8941%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="81.6441%" y="677" width="0.1596%" height="15" fill="rgb(214,223,17)" fg:x="1023" fg:w="2"/><text x="81.8941%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (2 samples, 0.16%)</title><rect x="81.6441%" y="661" width="0.1596%" height="15" fill="rgb(250,18,15)" fg:x="1023" fg:w="2"/><text x="81.8941%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="81.8037%" y="709" width="0.0798%" height="15" fill="rgb(212,153,51)" fg:x="1025" fg:w="1"/><text x="82.0537%" y="719.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="81.8037%" y="693" width="0.0798%" height="15" fill="rgb(219,194,12)" fg:x="1025" fg:w="1"/><text x="82.0537%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="81.8037%" y="677" width="0.0798%" height="15" fill="rgb(212,58,17)" fg:x="1025" fg:w="1"/><text x="82.0537%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.8037%" y="661" width="0.0798%" height="15" fill="rgb(254,5,10)" fg:x="1025" fg:w="1"/><text x="82.0537%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="81.8037%" y="645" width="0.0798%" height="15" fill="rgb(246,91,7)" fg:x="1025" fg:w="1"/><text x="82.0537%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="81.8835%" y="693" width="0.0798%" height="15" fill="rgb(218,108,49)" fg:x="1026" fg:w="1"/><text x="82.1335%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="81.9633%" y="677" width="0.0798%" height="15" fill="rgb(238,123,20)" fg:x="1027" fg:w="1"/><text x="82.2133%" y="687.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (64 samples, 5.11%)</title><rect x="77.0152%" y="741" width="5.1077%" height="15" fill="rgb(231,69,23)" fg:x="965" fg:w="64"/><text x="77.2652%" y="751.50">&lt;tests..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (4 samples, 0.32%)</title><rect x="81.8037%" y="725" width="0.3192%" height="15" fill="rgb(230,209,3)" fg:x="1025" fg:w="4"/><text x="82.0537%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="81.8835%" y="709" width="0.2394%" height="15" fill="rgb(231,19,0)" fg:x="1026" fg:w="3"/><text x="82.1335%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="81.9633%" y="693" width="0.1596%" height="15" fill="rgb(226,192,25)" fg:x="1027" fg:w="2"/><text x="82.2133%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="82.0431%" y="677" width="0.0798%" height="15" fill="rgb(223,175,53)" fg:x="1028" fg:w="1"/><text x="82.2931%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="82.0431%" y="661" width="0.0798%" height="15" fill="rgb(248,35,51)" fg:x="1028" fg:w="1"/><text x="82.2931%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="82.0431%" y="645" width="0.0798%" height="15" fill="rgb(230,37,26)" fg:x="1028" fg:w="1"/><text x="82.2931%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="82.0431%" y="629" width="0.0798%" height="15" fill="rgb(206,120,22)" fg:x="1028" fg:w="1"/><text x="82.2931%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.0431%" y="613" width="0.0798%" height="15" fill="rgb(207,165,28)" fg:x="1028" fg:w="1"/><text x="82.2931%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.0431%" y="597" width="0.0798%" height="15" fill="rgb(226,23,46)" fg:x="1028" fg:w="1"/><text x="82.2931%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.0431%" y="581" width="0.0798%" height="15" fill="rgb(208,130,44)" fg:x="1028" fg:w="1"/><text x="82.2931%" y="591.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="82.1229%" y="725" width="0.0798%" height="15" fill="rgb(231,67,8)" fg:x="1029" fg:w="1"/><text x="82.3729%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.1229%" y="709" width="0.0798%" height="15" fill="rgb(205,183,22)" fg:x="1029" fg:w="1"/><text x="82.3729%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.1229%" y="693" width="0.0798%" height="15" fill="rgb(224,47,9)" fg:x="1029" fg:w="1"/><text x="82.3729%" y="703.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="82.2027%" y="725" width="0.0798%" height="15" fill="rgb(250,183,49)" fg:x="1030" fg:w="1"/><text x="82.4527%" y="735.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="82.2027%" y="709" width="0.0798%" height="15" fill="rgb(220,151,39)" fg:x="1030" fg:w="1"/><text x="82.4527%" y="719.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="82.2027%" y="693" width="0.0798%" height="15" fill="rgb(220,118,20)" fg:x="1030" fg:w="1"/><text x="82.4527%" y="703.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="82.2027%" y="677" width="0.0798%" height="15" fill="rgb(231,65,51)" fg:x="1030" fg:w="1"/><text x="82.4527%" y="687.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="82.2027%" y="661" width="0.0798%" height="15" fill="rgb(253,125,37)" fg:x="1030" fg:w="1"/><text x="82.4527%" y="671.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="82.2027%" y="645" width="0.0798%" height="15" fill="rgb(232,102,6)" fg:x="1030" fg:w="1"/><text x="82.4527%" y="655.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="82.2027%" y="629" width="0.0798%" height="15" fill="rgb(251,105,13)" fg:x="1030" fg:w="1"/><text x="82.4527%" y="639.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="82.2027%" y="613" width="0.0798%" height="15" fill="rgb(222,179,29)" fg:x="1030" fg:w="1"/><text x="82.4527%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="82.5219%" y="581" width="0.0798%" height="15" fill="rgb(229,180,53)" fg:x="1034" fg:w="1"/><text x="82.7719%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.5219%" y="565" width="0.0798%" height="15" fill="rgb(238,104,13)" fg:x="1034" fg:w="1"/><text x="82.7719%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="82.5219%" y="613" width="0.1596%" height="15" fill="rgb(210,130,5)" fg:x="1034" fg:w="2"/><text x="82.7719%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="82.5219%" y="597" width="0.1596%" height="15" fill="rgb(233,87,49)" fg:x="1034" fg:w="2"/><text x="82.7719%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.6018%" y="581" width="0.0798%" height="15" fill="rgb(243,34,9)" fg:x="1035" fg:w="1"/><text x="82.8518%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="82.5219%" y="629" width="0.2394%" height="15" fill="rgb(235,225,10)" fg:x="1034" fg:w="3"/><text x="82.7719%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.6816%" y="613" width="0.0798%" height="15" fill="rgb(212,0,30)" fg:x="1036" fg:w="1"/><text x="82.9316%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="82.5219%" y="645" width="0.3192%" height="15" fill="rgb(211,177,0)" fg:x="1034" fg:w="4"/><text x="82.7719%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="82.7614%" y="629" width="0.0798%" height="15" fill="rgb(225,220,11)" fg:x="1037" fg:w="1"/><text x="83.0114%" y="639.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="82.8412%" y="629" width="0.2394%" height="15" fill="rgb(215,10,13)" fg:x="1038" fg:w="3"/><text x="83.0912%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="82.8412%" y="613" width="0.2394%" height="15" fill="rgb(240,177,14)" fg:x="1038" fg:w="3"/><text x="83.0912%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="83.0008%" y="597" width="0.0798%" height="15" fill="rgb(243,7,39)" fg:x="1040" fg:w="1"/><text x="83.2508%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="83.0008%" y="581" width="0.0798%" height="15" fill="rgb(212,99,0)" fg:x="1040" fg:w="1"/><text x="83.2508%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="83.0008%" y="565" width="0.0798%" height="15" fill="rgb(225,162,48)" fg:x="1040" fg:w="1"/><text x="83.2508%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="83.0806%" y="597" width="0.0798%" height="15" fill="rgb(246,16,25)" fg:x="1041" fg:w="1"/><text x="83.3306%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="83.0806%" y="581" width="0.0798%" height="15" fill="rgb(220,150,2)" fg:x="1041" fg:w="1"/><text x="83.3306%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="83.0806%" y="565" width="0.0798%" height="15" fill="rgb(237,113,11)" fg:x="1041" fg:w="1"/><text x="83.3306%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="83.0806%" y="549" width="0.0798%" height="15" fill="rgb(236,70,20)" fg:x="1041" fg:w="1"/><text x="83.3306%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="83.0806%" y="533" width="0.0798%" height="15" fill="rgb(234,94,7)" fg:x="1041" fg:w="1"/><text x="83.3306%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="83.0806%" y="517" width="0.0798%" height="15" fill="rgb(250,221,0)" fg:x="1041" fg:w="1"/><text x="83.3306%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="83.0806%" y="501" width="0.0798%" height="15" fill="rgb(245,149,46)" fg:x="1041" fg:w="1"/><text x="83.3306%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="83.0806%" y="613" width="0.1596%" height="15" fill="rgb(215,37,27)" fg:x="1041" fg:w="2"/><text x="83.3306%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="83.1604%" y="597" width="0.0798%" height="15" fill="rgb(232,65,3)" fg:x="1042" fg:w="1"/><text x="83.4104%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="83.1604%" y="581" width="0.0798%" height="15" fill="rgb(214,2,16)" fg:x="1042" fg:w="1"/><text x="83.4104%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="83.1604%" y="565" width="0.0798%" height="15" fill="rgb(227,131,50)" fg:x="1042" fg:w="1"/><text x="83.4104%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.56%)</title><rect x="82.8412%" y="645" width="0.5587%" height="15" fill="rgb(247,131,45)" fg:x="1038" fg:w="7"/><text x="83.0912%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="83.0806%" y="629" width="0.3192%" height="15" fill="rgb(215,97,47)" fg:x="1041" fg:w="4"/><text x="83.3306%" y="639.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="83.2402%" y="613" width="0.1596%" height="15" fill="rgb(233,143,12)" fg:x="1043" fg:w="2"/><text x="83.4902%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="83.3200%" y="597" width="0.0798%" height="15" fill="rgb(222,57,17)" fg:x="1044" fg:w="1"/><text x="83.5700%" y="607.50"></text></g><g><title>burrow_bon::perms::find_acls (1 samples, 0.08%)</title><rect x="83.3998%" y="645" width="0.0798%" height="15" fill="rgb(214,119,38)" fg:x="1045" fg:w="1"/><text x="83.6498%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.4796%" y="581" width="0.0798%" height="15" fill="rgb(217,28,47)" fg:x="1046" fg:w="1"/><text x="83.7296%" y="591.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="83.5595%" y="565" width="0.1596%" height="15" fill="rgb(231,14,52)" fg:x="1047" fg:w="2"/><text x="83.8095%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="83.4796%" y="613" width="0.3192%" height="15" fill="rgb(220,158,18)" fg:x="1046" fg:w="4"/><text x="83.7296%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="83.4796%" y="597" width="0.3192%" height="15" fill="rgb(222,143,46)" fg:x="1046" fg:w="4"/><text x="83.7296%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="83.5595%" y="581" width="0.2394%" height="15" fill="rgb(227,165,5)" fg:x="1047" fg:w="3"/><text x="83.8095%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="83.7191%" y="565" width="0.0798%" height="15" fill="rgb(216,222,49)" fg:x="1049" fg:w="1"/><text x="83.9691%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="83.7191%" y="549" width="0.0798%" height="15" fill="rgb(238,73,39)" fg:x="1049" fg:w="1"/><text x="83.9691%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="83.7191%" y="533" width="0.0798%" height="15" fill="rgb(252,115,9)" fg:x="1049" fg:w="1"/><text x="83.9691%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="83.7191%" y="517" width="0.0798%" height="15" fill="rgb(238,202,4)" fg:x="1049" fg:w="1"/><text x="83.9691%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.7191%" y="501" width="0.0798%" height="15" fill="rgb(252,153,44)" fg:x="1049" fg:w="1"/><text x="83.9691%" y="511.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (5 samples, 0.40%)</title><rect x="83.4796%" y="629" width="0.3990%" height="15" fill="rgb(235,128,27)" fg:x="1046" fg:w="5"/><text x="83.7296%" y="639.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="83.7989%" y="613" width="0.0798%" height="15" fill="rgb(221,121,47)" fg:x="1050" fg:w="1"/><text x="84.0489%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="83.7989%" y="597" width="0.0798%" height="15" fill="rgb(247,211,47)" fg:x="1050" fg:w="1"/><text x="84.0489%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="83.7989%" y="581" width="0.0798%" height="15" fill="rgb(252,47,49)" fg:x="1050" fg:w="1"/><text x="84.0489%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="83.7989%" y="565" width="0.0798%" height="15" fill="rgb(219,119,53)" fg:x="1050" fg:w="1"/><text x="84.0489%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="83.7989%" y="549" width="0.0798%" height="15" fill="rgb(243,165,53)" fg:x="1050" fg:w="1"/><text x="84.0489%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="83.7989%" y="533" width="0.0798%" height="15" fill="rgb(230,12,35)" fg:x="1050" fg:w="1"/><text x="84.0489%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.0383%" y="597" width="0.0798%" height="15" fill="rgb(239,57,49)" fg:x="1053" fg:w="1"/><text x="84.2883%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="84.1181%" y="597" width="0.0798%" height="15" fill="rgb(231,154,7)" fg:x="1054" fg:w="1"/><text x="84.3681%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="84.1181%" y="581" width="0.0798%" height="15" fill="rgb(248,81,34)" fg:x="1054" fg:w="1"/><text x="84.3681%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="84.2777%" y="533" width="0.1596%" height="15" fill="rgb(247,9,5)" fg:x="1056" fg:w="2"/><text x="84.5277%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="84.2777%" y="517" width="0.1596%" height="15" fill="rgb(228,172,27)" fg:x="1056" fg:w="2"/><text x="84.5277%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="84.3575%" y="501" width="0.0798%" height="15" fill="rgb(230,57,44)" fg:x="1057" fg:w="1"/><text x="84.6075%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="84.1979%" y="565" width="0.3192%" height="15" fill="rgb(249,35,22)" fg:x="1055" fg:w="4"/><text x="84.4479%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="84.2777%" y="549" width="0.2394%" height="15" fill="rgb(250,137,27)" fg:x="1056" fg:w="3"/><text x="84.5277%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.4374%" y="533" width="0.0798%" height="15" fill="rgb(251,57,31)" fg:x="1058" fg:w="1"/><text x="84.6874%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.72%)</title><rect x="83.8787%" y="629" width="0.7183%" height="15" fill="rgb(238,60,0)" fg:x="1051" fg:w="9"/><text x="84.1287%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.72%)</title><rect x="83.8787%" y="613" width="0.7183%" height="15" fill="rgb(242,185,39)" fg:x="1051" fg:w="9"/><text x="84.1287%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="84.1979%" y="597" width="0.3990%" height="15" fill="rgb(240,63,43)" fg:x="1055" fg:w="5"/><text x="84.4479%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.40%)</title><rect x="84.1979%" y="581" width="0.3990%" height="15" fill="rgb(236,155,6)" fg:x="1055" fg:w="5"/><text x="84.4479%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="84.5172%" y="565" width="0.0798%" height="15" fill="rgb(215,11,29)" fg:x="1059" fg:w="1"/><text x="84.7672%" y="575.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="84.7566%" y="453" width="0.0798%" height="15" fill="rgb(228,180,48)" fg:x="1062" fg:w="1"/><text x="85.0066%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.8364%" y="421" width="0.0798%" height="15" fill="rgb(241,102,12)" fg:x="1063" fg:w="1"/><text x="85.0864%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="84.8364%" y="437" width="0.1596%" height="15" fill="rgb(246,213,4)" fg:x="1063" fg:w="2"/><text x="85.0864%" y="447.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.08%)</title><rect x="84.9162%" y="421" width="0.0798%" height="15" fill="rgb(218,134,35)" fg:x="1064" fg:w="1"/><text x="85.1662%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="84.7566%" y="501" width="0.3192%" height="15" fill="rgb(251,117,35)" fg:x="1062" fg:w="4"/><text x="85.0066%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="84.7566%" y="485" width="0.3192%" height="15" fill="rgb(206,156,45)" fg:x="1062" fg:w="4"/><text x="85.0066%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="84.7566%" y="469" width="0.3192%" height="15" fill="rgb(218,52,27)" fg:x="1062" fg:w="4"/><text x="85.0066%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="84.8364%" y="453" width="0.2394%" height="15" fill="rgb(238,83,36)" fg:x="1063" fg:w="3"/><text x="85.0864%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.9960%" y="437" width="0.0798%" height="15" fill="rgb(218,53,43)" fg:x="1065" fg:w="1"/><text x="85.2460%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.9960%" y="421" width="0.0798%" height="15" fill="rgb(239,54,39)" fg:x="1065" fg:w="1"/><text x="85.2460%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.9960%" y="405" width="0.0798%" height="15" fill="rgb(212,198,13)" fg:x="1065" fg:w="1"/><text x="85.2460%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="84.5970%" y="565" width="0.5587%" height="15" fill="rgb(234,54,46)" fg:x="1060" fg:w="7"/><text x="84.8470%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="84.5970%" y="549" width="0.5587%" height="15" fill="rgb(217,120,7)" fg:x="1060" fg:w="7"/><text x="84.8470%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="84.6768%" y="533" width="0.4789%" height="15" fill="rgb(246,39,15)" fg:x="1061" fg:w="6"/><text x="84.9268%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="84.6768%" y="517" width="0.4789%" height="15" fill="rgb(242,143,31)" fg:x="1061" fg:w="6"/><text x="84.9268%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="85.0758%" y="501" width="0.0798%" height="15" fill="rgb(252,60,24)" fg:x="1066" fg:w="1"/><text x="85.3258%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.0758%" y="485" width="0.0798%" height="15" fill="rgb(249,220,7)" fg:x="1066" fg:w="1"/><text x="85.3258%" y="495.50"></text></g><g><title>engine::session::Session::close (39 samples, 3.11%)</title><rect x="82.1229%" y="741" width="3.1125%" height="15" fill="rgb(236,67,13)" fg:x="1029" fg:w="39"/><text x="82.3729%" y="751.50">eng..</text></g><g><title>engine::session::state::State::close (37 samples, 2.95%)</title><rect x="82.2825%" y="725" width="2.9529%" height="15" fill="rgb(210,62,39)" fg:x="1031" fg:w="37"/><text x="82.5325%" y="735.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (37 samples, 2.95%)</title><rect x="82.2825%" y="709" width="2.9529%" height="15" fill="rgb(219,122,53)" fg:x="1031" fg:w="37"/><text x="82.5325%" y="719.50">eng..</text></g><g><title>core::iter::adapters::try_process (36 samples, 2.87%)</title><rect x="82.3623%" y="693" width="2.8731%" height="15" fill="rgb(218,87,25)" fg:x="1032" fg:w="36"/><text x="82.6123%" y="703.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (36 samples, 2.87%)</title><rect x="82.3623%" y="677" width="2.8731%" height="15" fill="rgb(234,179,48)" fg:x="1032" fg:w="36"/><text x="82.6123%" y="687.50">&lt;a..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (36 samples, 2.87%)</title><rect x="82.3623%" y="661" width="2.8731%" height="15" fill="rgb(248,90,0)" fg:x="1032" fg:w="36"/><text x="82.6123%" y="671.50">en..</text></g><g><title>kernel::model::any_entity_changes (22 samples, 1.76%)</title><rect x="83.4796%" y="645" width="1.7558%" height="15" fill="rgb(207,228,37)" fg:x="1046" fg:w="22"/><text x="83.7296%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (8 samples, 0.64%)</title><rect x="84.5970%" y="629" width="0.6385%" height="15" fill="rgb(235,214,15)" fg:x="1060" fg:w="8"/><text x="84.8470%" y="639.50"></text></g><g><title>serde_json::de::from_trait (8 samples, 0.64%)</title><rect x="84.5970%" y="613" width="0.6385%" height="15" fill="rgb(210,144,39)" fg:x="1060" fg:w="8"/><text x="84.8470%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.64%)</title><rect x="84.5970%" y="597" width="0.6385%" height="15" fill="rgb(222,67,41)" fg:x="1060" fg:w="8"/><text x="84.8470%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.64%)</title><rect x="84.5970%" y="581" width="0.6385%" height="15" fill="rgb(205,35,37)" fg:x="1060" fg:w="8"/><text x="84.8470%" y="591.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="85.1556%" y="565" width="0.0798%" height="15" fill="rgb(216,125,40)" fg:x="1067" fg:w="1"/><text x="85.4056%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.1556%" y="549" width="0.0798%" height="15" fill="rgb(228,227,20)" fg:x="1067" fg:w="1"/><text x="85.4056%" y="559.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (1 samples, 0.08%)</title><rect x="85.3152%" y="709" width="0.0798%" height="15" fill="rgb(242,173,45)" fg:x="1069" fg:w="1"/><text x="85.5652%" y="719.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="85.3152%" y="693" width="0.0798%" height="15" fill="rgb(215,79,24)" fg:x="1069" fg:w="1"/><text x="85.5652%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="85.3152%" y="677" width="0.0798%" height="15" fill="rgb(238,164,38)" fg:x="1069" fg:w="1"/><text x="85.5652%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.3152%" y="661" width="0.0798%" height="15" fill="rgb(245,196,38)" fg:x="1069" fg:w="1"/><text x="85.5652%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="85.3152%" y="645" width="0.0798%" height="15" fill="rgb(231,217,29)" fg:x="1069" fg:w="1"/><text x="85.5652%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.3152%" y="629" width="0.0798%" height="15" fill="rgb(245,6,4)" fg:x="1069" fg:w="1"/><text x="85.5652%" y="639.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="85.3951%" y="709" width="0.0798%" height="15" fill="rgb(214,76,49)" fg:x="1070" fg:w="1"/><text x="85.6451%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="85.3951%" y="693" width="0.0798%" height="15" fill="rgb(205,96,12)" fg:x="1070" fg:w="1"/><text x="85.6451%" y="703.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="85.3951%" y="677" width="0.0798%" height="15" fill="rgb(243,131,4)" fg:x="1070" fg:w="1"/><text x="85.6451%" y="687.50"></text></g><g><title>&lt;(A,B,C) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.08%)</title><rect x="85.3951%" y="661" width="0.0798%" height="15" fill="rgb(214,114,4)" fg:x="1070" fg:w="1"/><text x="85.6451%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="85.5547%" y="677" width="0.0798%" height="15" fill="rgb(234,215,15)" fg:x="1072" fg:w="1"/><text x="85.8047%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::logs::SessionSubscriber&gt; (1 samples, 0.08%)</title><rect x="85.5547%" y="661" width="0.0798%" height="15" fill="rgb(250,216,45)" fg:x="1072" fg:w="1"/><text x="85.8047%" y="671.50"></text></g><g><title>chrono::offset::utc::Utc::now (1 samples, 0.08%)</title><rect x="85.6345%" y="677" width="0.0798%" height="15" fill="rgb(236,128,4)" fg:x="1073" fg:w="1"/><text x="85.8845%" y="687.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (1 samples, 0.08%)</title><rect x="85.7143%" y="677" width="0.0798%" height="15" fill="rgb(234,50,33)" fg:x="1074" fg:w="1"/><text x="85.9643%" y="687.50"></text></g><g><title>tracing_core::callsite::register_dispatch (1 samples, 0.08%)</title><rect x="85.7143%" y="661" width="0.0798%" height="15" fill="rgb(253,131,37)" fg:x="1074" fg:w="1"/><text x="85.9643%" y="671.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (1 samples, 0.08%)</title><rect x="85.7143%" y="645" width="0.0798%" height="15" fill="rgb(218,55,27)" fg:x="1074" fg:w="1"/><text x="85.9643%" y="655.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (1 samples, 0.08%)</title><rect x="85.7143%" y="629" width="0.0798%" height="15" fill="rgb(241,220,28)" fg:x="1074" fg:w="1"/><text x="85.9643%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.7941%" y="549" width="0.0798%" height="15" fill="rgb(241,90,48)" fg:x="1075" fg:w="1"/><text x="86.0441%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="85.7941%" y="565" width="0.1596%" height="15" fill="rgb(216,43,37)" fg:x="1075" fg:w="2"/><text x="86.0441%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="85.8739%" y="549" width="0.0798%" height="15" fill="rgb(207,173,9)" fg:x="1076" fg:w="1"/><text x="86.1239%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.8739%" y="533" width="0.0798%" height="15" fill="rgb(240,126,30)" fg:x="1076" fg:w="1"/><text x="86.1239%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="85.8739%" y="517" width="0.0798%" height="15" fill="rgb(228,178,53)" fg:x="1076" fg:w="1"/><text x="86.1239%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.8739%" y="501" width="0.0798%" height="15" fill="rgb(217,33,4)" fg:x="1076" fg:w="1"/><text x="86.1239%" y="511.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (3 samples, 0.24%)</title><rect x="85.7941%" y="597" width="0.2394%" height="15" fill="rgb(206,124,34)" fg:x="1075" fg:w="3"/><text x="86.0441%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (3 samples, 0.24%)</title><rect x="85.7941%" y="581" width="0.2394%" height="15" fill="rgb(208,122,53)" fg:x="1075" fg:w="3"/><text x="86.0441%" y="591.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (1 samples, 0.08%)</title><rect x="85.9537%" y="565" width="0.0798%" height="15" fill="rgb(215,202,26)" fg:x="1077" fg:w="1"/><text x="86.2037%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (1 samples, 0.08%)</title><rect x="85.9537%" y="549" width="0.0798%" height="15" fill="rgb(232,198,31)" fg:x="1077" fg:w="1"/><text x="86.2037%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="85.9537%" y="533" width="0.0798%" height="15" fill="rgb(222,23,35)" fg:x="1077" fg:w="1"/><text x="86.2037%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="85.9537%" y="517" width="0.0798%" height="15" fill="rgb(242,27,53)" fg:x="1077" fg:w="1"/><text x="86.2037%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="85.9537%" y="501" width="0.0798%" height="15" fill="rgb(210,216,42)" fg:x="1077" fg:w="1"/><text x="86.2037%" y="511.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="85.9537%" y="485" width="0.0798%" height="15" fill="rgb(234,39,38)" fg:x="1077" fg:w="1"/><text x="86.2037%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="85.9537%" y="469" width="0.0798%" height="15" fill="rgb(235,126,54)" fg:x="1077" fg:w="1"/><text x="86.2037%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="85.9537%" y="453" width="0.0798%" height="15" fill="rgb(235,150,33)" fg:x="1077" fg:w="1"/><text x="86.2037%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.4326%" y="325" width="0.0798%" height="15" fill="rgb(249,49,53)" fg:x="1083" fg:w="1"/><text x="86.6826%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (4 samples, 0.32%)</title><rect x="86.2729%" y="357" width="0.3192%" height="15" fill="rgb(238,60,50)" fg:x="1081" fg:w="4"/><text x="86.5229%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="86.2729%" y="341" width="0.3192%" height="15" fill="rgb(210,5,2)" fg:x="1081" fg:w="4"/><text x="86.5229%" y="351.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="86.5124%" y="325" width="0.0798%" height="15" fill="rgb(214,207,24)" fg:x="1084" fg:w="1"/><text x="86.7624%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="86.5124%" y="309" width="0.0798%" height="15" fill="rgb(228,173,2)" fg:x="1084" fg:w="1"/><text x="86.7624%" y="319.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (6 samples, 0.48%)</title><rect x="86.1931%" y="421" width="0.4789%" height="15" fill="rgb(244,26,8)" fg:x="1080" fg:w="6"/><text x="86.4431%" y="431.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (6 samples, 0.48%)</title><rect x="86.1931%" y="405" width="0.4789%" height="15" fill="rgb(249,153,35)" fg:x="1080" fg:w="6"/><text x="86.4431%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (6 samples, 0.48%)</title><rect x="86.1931%" y="389" width="0.4789%" height="15" fill="rgb(221,215,40)" fg:x="1080" fg:w="6"/><text x="86.4431%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="86.1931%" y="373" width="0.4789%" height="15" fill="rgb(238,106,35)" fg:x="1080" fg:w="6"/><text x="86.4431%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="86.5922%" y="357" width="0.0798%" height="15" fill="rgb(207,195,21)" fg:x="1085" fg:w="1"/><text x="86.8422%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="86.5922%" y="341" width="0.0798%" height="15" fill="rgb(205,43,29)" fg:x="1085" fg:w="1"/><text x="86.8422%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="86.6720%" y="373" width="0.0798%" height="15" fill="rgb(236,35,21)" fg:x="1086" fg:w="1"/><text x="86.9220%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="86.6720%" y="357" width="0.0798%" height="15" fill="rgb(244,74,8)" fg:x="1086" fg:w="1"/><text x="86.9220%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="86.6720%" y="341" width="0.0798%" height="15" fill="rgb(241,229,7)" fg:x="1086" fg:w="1"/><text x="86.9220%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="86.6720%" y="325" width="0.0798%" height="15" fill="rgb(212,223,25)" fg:x="1086" fg:w="1"/><text x="86.9220%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="86.6720%" y="309" width="0.0798%" height="15" fill="rgb(234,58,53)" fg:x="1086" fg:w="1"/><text x="86.9220%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="86.6720%" y="293" width="0.0798%" height="15" fill="rgb(244,36,1)" fg:x="1086" fg:w="1"/><text x="86.9220%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="86.6720%" y="277" width="0.0798%" height="15" fill="rgb(222,40,54)" fg:x="1086" fg:w="1"/><text x="86.9220%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="86.6720%" y="261" width="0.0798%" height="15" fill="rgb(210,207,39)" fg:x="1086" fg:w="1"/><text x="86.9220%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="86.6720%" y="245" width="0.0798%" height="15" fill="rgb(234,52,14)" fg:x="1086" fg:w="1"/><text x="86.9220%" y="255.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="86.6720%" y="389" width="0.1596%" height="15" fill="rgb(239,108,46)" fg:x="1086" fg:w="2"/><text x="86.9220%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="86.7518%" y="373" width="0.0798%" height="15" fill="rgb(252,223,5)" fg:x="1087" fg:w="1"/><text x="87.0018%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="86.7518%" y="357" width="0.0798%" height="15" fill="rgb(227,181,11)" fg:x="1087" fg:w="1"/><text x="87.0018%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="86.7518%" y="341" width="0.0798%" height="15" fill="rgb(248,126,40)" fg:x="1087" fg:w="1"/><text x="87.0018%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="86.7518%" y="325" width="0.0798%" height="15" fill="rgb(243,1,18)" fg:x="1087" fg:w="1"/><text x="87.0018%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.7518%" y="309" width="0.0798%" height="15" fill="rgb(214,145,23)" fg:x="1087" fg:w="1"/><text x="87.0018%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="86.8316%" y="357" width="0.0798%" height="15" fill="rgb(241,218,11)" fg:x="1088" fg:w="1"/><text x="87.0816%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="86.8316%" y="341" width="0.0798%" height="15" fill="rgb(214,219,24)" fg:x="1088" fg:w="1"/><text x="87.0816%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="86.8316%" y="325" width="0.0798%" height="15" fill="rgb(235,32,7)" fg:x="1088" fg:w="1"/><text x="87.0816%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="86.8316%" y="309" width="0.0798%" height="15" fill="rgb(227,121,28)" fg:x="1088" fg:w="1"/><text x="87.0816%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="86.9114%" y="293" width="0.0798%" height="15" fill="rgb(216,129,49)" fg:x="1089" fg:w="1"/><text x="87.1614%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="86.9912%" y="293" width="0.0798%" height="15" fill="rgb(207,194,50)" fg:x="1090" fg:w="1"/><text x="87.2412%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.9912%" y="277" width="0.0798%" height="15" fill="rgb(207,4,18)" fg:x="1090" fg:w="1"/><text x="87.2412%" y="287.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::desc (4 samples, 0.32%)</title><rect x="86.8316%" y="389" width="0.3192%" height="15" fill="rgb(213,50,30)" fg:x="1088" fg:w="4"/><text x="87.0816%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="86.8316%" y="373" width="0.3192%" height="15" fill="rgb(208,77,22)" fg:x="1088" fg:w="4"/><text x="87.0816%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="86.9114%" y="357" width="0.2394%" height="15" fill="rgb(244,204,34)" fg:x="1089" fg:w="3"/><text x="87.1614%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="86.9114%" y="341" width="0.2394%" height="15" fill="rgb(230,20,17)" fg:x="1089" fg:w="3"/><text x="87.1614%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="86.9114%" y="325" width="0.2394%" height="15" fill="rgb(237,83,15)" fg:x="1089" fg:w="3"/><text x="87.1614%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="86.9114%" y="309" width="0.2394%" height="15" fill="rgb(221,109,25)" fg:x="1089" fg:w="3"/><text x="87.1614%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="87.0710%" y="293" width="0.0798%" height="15" fill="rgb(205,194,52)" fg:x="1091" fg:w="1"/><text x="87.3210%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.0710%" y="277" width="0.0798%" height="15" fill="rgb(244,173,54)" fg:x="1091" fg:w="1"/><text x="87.3210%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.0710%" y="261" width="0.0798%" height="15" fill="rgb(227,181,18)" fg:x="1091" fg:w="1"/><text x="87.3210%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="87.2306%" y="357" width="0.0798%" height="15" fill="rgb(238,36,30)" fg:x="1093" fg:w="1"/><text x="87.4806%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="87.2306%" y="341" width="0.0798%" height="15" fill="rgb(254,85,0)" fg:x="1093" fg:w="1"/><text x="87.4806%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="87.2306%" y="325" width="0.0798%" height="15" fill="rgb(247,63,33)" fg:x="1093" fg:w="1"/><text x="87.4806%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="87.2306%" y="309" width="0.0798%" height="15" fill="rgb(220,7,54)" fg:x="1093" fg:w="1"/><text x="87.4806%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="87.2306%" y="293" width="0.0798%" height="15" fill="rgb(238,227,21)" fg:x="1093" fg:w="1"/><text x="87.4806%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="87.2306%" y="277" width="0.0798%" height="15" fill="rgb(237,29,31)" fg:x="1093" fg:w="1"/><text x="87.4806%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="87.2306%" y="261" width="0.0798%" height="15" fill="rgb(211,21,50)" fg:x="1093" fg:w="1"/><text x="87.4806%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="87.2306%" y="245" width="0.0798%" height="15" fill="rgb(239,119,2)" fg:x="1093" fg:w="1"/><text x="87.4806%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="87.3105%" y="325" width="0.0798%" height="15" fill="rgb(250,2,39)" fg:x="1094" fg:w="1"/><text x="87.5605%" y="335.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="87.1508%" y="389" width="0.3192%" height="15" fill="rgb(244,46,53)" fg:x="1092" fg:w="4"/><text x="87.4008%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="87.1508%" y="373" width="0.3192%" height="15" fill="rgb(209,21,19)" fg:x="1092" fg:w="4"/><text x="87.4008%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="87.3105%" y="357" width="0.1596%" height="15" fill="rgb(236,145,4)" fg:x="1094" fg:w="2"/><text x="87.5605%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="87.3105%" y="341" width="0.1596%" height="15" fill="rgb(220,133,36)" fg:x="1094" fg:w="2"/><text x="87.5605%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="87.3903%" y="325" width="0.0798%" height="15" fill="rgb(244,18,3)" fg:x="1095" fg:w="1"/><text x="87.6403%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.3903%" y="309" width="0.0798%" height="15" fill="rgb(232,171,48)" fg:x="1095" fg:w="1"/><text x="87.6403%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="87.3903%" y="293" width="0.0798%" height="15" fill="rgb(223,223,53)" fg:x="1095" fg:w="1"/><text x="87.6403%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="87.3903%" y="277" width="0.0798%" height="15" fill="rgb(246,92,13)" fg:x="1095" fg:w="1"/><text x="87.6403%" y="287.50"></text></g><g><title>kernel::model::EntityPtr::gid (3 samples, 0.24%)</title><rect x="87.4701%" y="389" width="0.2394%" height="15" fill="rgb(229,171,10)" fg:x="1096" fg:w="3"/><text x="87.7201%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="87.4701%" y="373" width="0.2394%" height="15" fill="rgb(213,131,26)" fg:x="1096" fg:w="3"/><text x="87.7201%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="87.6297%" y="357" width="0.0798%" height="15" fill="rgb(242,87,54)" fg:x="1098" fg:w="1"/><text x="87.8797%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="87.7893%" y="309" width="0.0798%" height="15" fill="rgb(237,21,35)" fg:x="1100" fg:w="1"/><text x="88.0393%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="87.7893%" y="293" width="0.0798%" height="15" fill="rgb(253,13,47)" fg:x="1100" fg:w="1"/><text x="88.0393%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="87.7893%" y="277" width="0.0798%" height="15" fill="rgb(215,122,49)" fg:x="1100" fg:w="1"/><text x="88.0393%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="87.7893%" y="261" width="0.0798%" height="15" fill="rgb(209,179,30)" fg:x="1100" fg:w="1"/><text x="88.0393%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="87.7893%" y="245" width="0.0798%" height="15" fill="rgb(235,100,24)" fg:x="1100" fg:w="1"/><text x="88.0393%" y="255.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="87.7893%" y="229" width="0.0798%" height="15" fill="rgb(209,67,24)" fg:x="1100" fg:w="1"/><text x="88.0393%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="87.8691%" y="229" width="0.0798%" height="15" fill="rgb(206,74,32)" fg:x="1101" fg:w="1"/><text x="88.1191%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="87.8691%" y="213" width="0.0798%" height="15" fill="rgb(212,45,25)" fg:x="1101" fg:w="1"/><text x="88.1191%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.8691%" y="197" width="0.0798%" height="15" fill="rgb(239,26,3)" fg:x="1101" fg:w="1"/><text x="88.1191%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="87.8691%" y="181" width="0.0798%" height="15" fill="rgb(218,36,15)" fg:x="1101" fg:w="1"/><text x="88.1191%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (2 samples, 0.16%)</title><rect x="87.8691%" y="261" width="0.1596%" height="15" fill="rgb(206,108,24)" fg:x="1101" fg:w="2"/><text x="88.1191%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="87.8691%" y="245" width="0.1596%" height="15" fill="rgb(234,204,42)" fg:x="1101" fg:w="2"/><text x="88.1191%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="87.9489%" y="229" width="0.0798%" height="15" fill="rgb(229,2,11)" fg:x="1102" fg:w="1"/><text x="88.1989%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="87.9489%" y="213" width="0.0798%" height="15" fill="rgb(221,20,48)" fg:x="1102" fg:w="1"/><text x="88.1989%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (4 samples, 0.32%)</title><rect x="88.0287%" y="245" width="0.3192%" height="15" fill="rgb(244,164,10)" fg:x="1103" fg:w="4"/><text x="88.2787%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (3 samples, 0.24%)</title><rect x="88.1085%" y="229" width="0.2394%" height="15" fill="rgb(243,229,2)" fg:x="1104" fg:w="3"/><text x="88.3585%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.2682%" y="213" width="0.0798%" height="15" fill="rgb(232,131,37)" fg:x="1106" fg:w="1"/><text x="88.5182%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="88.3480%" y="245" width="0.0798%" height="15" fill="rgb(217,156,11)" fg:x="1107" fg:w="1"/><text x="88.5980%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="88.3480%" y="229" width="0.0798%" height="15" fill="rgb(239,99,48)" fg:x="1107" fg:w="1"/><text x="88.5980%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="88.4278%" y="245" width="0.1596%" height="15" fill="rgb(231,209,9)" fg:x="1108" fg:w="2"/><text x="88.6778%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="88.4278%" y="229" width="0.1596%" height="15" fill="rgb(254,97,27)" fg:x="1108" fg:w="2"/><text x="88.6778%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.6672%" y="181" width="0.0798%" height="15" fill="rgb(223,151,38)" fg:x="1111" fg:w="1"/><text x="88.9172%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 1.44%)</title><rect x="88.5874%" y="229" width="1.4366%" height="15" fill="rgb(219,206,35)" fg:x="1110" fg:w="18"/><text x="88.8374%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (18 samples, 1.44%)</title><rect x="88.5874%" y="213" width="1.4366%" height="15" fill="rgb(216,130,31)" fg:x="1110" fg:w="18"/><text x="88.8374%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (17 samples, 1.36%)</title><rect x="88.6672%" y="197" width="1.3567%" height="15" fill="rgb(251,97,34)" fg:x="1111" fg:w="17"/><text x="88.9172%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (16 samples, 1.28%)</title><rect x="88.7470%" y="181" width="1.2769%" height="15" fill="rgb(246,159,47)" fg:x="1112" fg:w="16"/><text x="88.9970%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (16 samples, 1.28%)</title><rect x="88.7470%" y="165" width="1.2769%" height="15" fill="rgb(232,87,10)" fg:x="1112" fg:w="16"/><text x="88.9970%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (16 samples, 1.28%)</title><rect x="88.7470%" y="149" width="1.2769%" height="15" fill="rgb(249,1,37)" fg:x="1112" fg:w="16"/><text x="88.9970%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="90.0239%" y="213" width="0.0798%" height="15" fill="rgb(239,135,14)" fg:x="1128" fg:w="1"/><text x="90.2739%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.0239%" y="197" width="0.0798%" height="15" fill="rgb(253,116,46)" fg:x="1128" fg:w="1"/><text x="90.2739%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.0239%" y="181" width="0.0798%" height="15" fill="rgb(222,217,37)" fg:x="1128" fg:w="1"/><text x="90.2739%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.2634%" y="165" width="0.0798%" height="15" fill="rgb(252,96,8)" fg:x="1131" fg:w="1"/><text x="90.5134%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="90.0239%" y="229" width="0.3990%" height="15" fill="rgb(254,103,41)" fg:x="1128" fg:w="5"/><text x="90.2739%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="90.1038%" y="213" width="0.3192%" height="15" fill="rgb(218,213,19)" fg:x="1129" fg:w="4"/><text x="90.3538%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="90.2634%" y="197" width="0.1596%" height="15" fill="rgb(253,95,21)" fg:x="1131" fg:w="2"/><text x="90.5134%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="90.2634%" y="181" width="0.1596%" height="15" fill="rgb(229,26,28)" fg:x="1131" fg:w="2"/><text x="90.5134%" y="191.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="90.3432%" y="165" width="0.0798%" height="15" fill="rgb(230,129,16)" fg:x="1132" fg:w="1"/><text x="90.5932%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="90.3432%" y="149" width="0.0798%" height="15" fill="rgb(236,126,17)" fg:x="1132" fg:w="1"/><text x="90.5932%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="90.4230%" y="213" width="0.0798%" height="15" fill="rgb(209,33,33)" fg:x="1133" fg:w="1"/><text x="90.6730%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.4230%" y="197" width="0.0798%" height="15" fill="rgb(227,85,29)" fg:x="1133" fg:w="1"/><text x="90.6730%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.4230%" y="181" width="0.0798%" height="15" fill="rgb(241,53,46)" fg:x="1133" fg:w="1"/><text x="90.6730%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.4230%" y="165" width="0.0798%" height="15" fill="rgb(228,167,53)" fg:x="1133" fg:w="1"/><text x="90.6730%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (25 samples, 2.00%)</title><rect x="88.5874%" y="245" width="1.9952%" height="15" fill="rgb(238,195,45)" fg:x="1110" fg:w="25"/><text x="88.8374%" y="255.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (2 samples, 0.16%)</title><rect x="90.4230%" y="229" width="0.1596%" height="15" fill="rgb(252,124,45)" fg:x="1133" fg:w="2"/><text x="90.6730%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="90.5028%" y="213" width="0.0798%" height="15" fill="rgb(251,38,35)" fg:x="1134" fg:w="1"/><text x="90.7528%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::ClassBytesIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="90.5028%" y="197" width="0.0798%" height="15" fill="rgb(227,33,2)" fg:x="1134" fg:w="1"/><text x="90.7528%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (33 samples, 2.63%)</title><rect x="88.0287%" y="261" width="2.6337%" height="15" fill="rgb(223,157,46)" fg:x="1103" fg:w="33"/><text x="88.2787%" y="271.50">re..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="90.5826%" y="245" width="0.0798%" height="15" fill="rgb(222,78,41)" fg:x="1135" fg:w="1"/><text x="90.8326%" y="255.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.08%)</title><rect x="90.5826%" y="229" width="0.0798%" height="15" fill="rgb(248,176,11)" fg:x="1135" fg:w="1"/><text x="90.8326%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="90.6624%" y="213" width="0.0798%" height="15" fill="rgb(241,221,18)" fg:x="1136" fg:w="1"/><text x="90.9124%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="90.6624%" y="261" width="0.1596%" height="15" fill="rgb(218,85,22)" fg:x="1136" fg:w="2"/><text x="90.9124%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="90.6624%" y="245" width="0.1596%" height="15" fill="rgb(222,223,7)" fg:x="1136" fg:w="2"/><text x="90.9124%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="90.6624%" y="229" width="0.1596%" height="15" fill="rgb(254,59,39)" fg:x="1136" fg:w="2"/><text x="90.9124%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="90.7422%" y="213" width="0.0798%" height="15" fill="rgb(247,100,27)" fg:x="1137" fg:w="1"/><text x="90.9922%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.7422%" y="197" width="0.0798%" height="15" fill="rgb(237,207,10)" fg:x="1137" fg:w="1"/><text x="90.9922%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (38 samples, 3.03%)</title><rect x="87.8691%" y="309" width="3.0327%" height="15" fill="rgb(220,121,28)" fg:x="1101" fg:w="38"/><text x="88.1191%" y="319.50">&lt;re..</text></g><g><title>regex::builders::string::RegexBuilder::build (38 samples, 3.03%)</title><rect x="87.8691%" y="293" width="3.0327%" height="15" fill="rgb(213,223,20)" fg:x="1101" fg:w="38"/><text x="88.1191%" y="303.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (38 samples, 3.03%)</title><rect x="87.8691%" y="277" width="3.0327%" height="15" fill="rgb(205,121,27)" fg:x="1101" fg:w="38"/><text x="88.1191%" y="287.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="90.8220%" y="261" width="0.0798%" height="15" fill="rgb(253,24,53)" fg:x="1138" fg:w="1"/><text x="91.0720%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="90.8220%" y="245" width="0.0798%" height="15" fill="rgb(224,224,47)" fg:x="1138" fg:w="1"/><text x="91.0720%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.8220%" y="229" width="0.0798%" height="15" fill="rgb(250,125,36)" fg:x="1138" fg:w="1"/><text x="91.0720%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="90.9018%" y="293" width="0.0798%" height="15" fill="rgb(240,144,38)" fg:x="1139" fg:w="1"/><text x="91.1518%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="90.9018%" y="309" width="0.1596%" height="15" fill="rgb(250,15,50)" fg:x="1139" fg:w="2"/><text x="91.1518%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="90.9816%" y="293" width="0.0798%" height="15" fill="rgb(210,24,26)" fg:x="1140" fg:w="1"/><text x="91.2316%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="90.9816%" y="277" width="0.0798%" height="15" fill="rgb(234,53,53)" fg:x="1140" fg:w="1"/><text x="91.2316%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="90.9816%" y="261" width="0.0798%" height="15" fill="rgb(208,108,28)" fg:x="1140" fg:w="1"/><text x="91.2316%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.9816%" y="245" width="0.0798%" height="15" fill="rgb(227,143,7)" fg:x="1140" fg:w="1"/><text x="91.2316%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="91.0615%" y="261" width="0.1596%" height="15" fill="rgb(238,189,38)" fg:x="1141" fg:w="2"/><text x="91.3115%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="91.0615%" y="245" width="0.1596%" height="15" fill="rgb(222,69,15)" fg:x="1141" fg:w="2"/><text x="91.3115%" y="255.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (44 samples, 3.51%)</title><rect x="87.7893%" y="325" width="3.5116%" height="15" fill="rgb(213,169,7)" fg:x="1100" fg:w="44"/><text x="88.0393%" y="335.50">ind..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="91.0615%" y="309" width="0.2394%" height="15" fill="rgb(251,219,4)" fg:x="1141" fg:w="3"/><text x="91.3115%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="91.0615%" y="293" width="0.2394%" height="15" fill="rgb(241,55,40)" fg:x="1141" fg:w="3"/><text x="91.3115%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="91.0615%" y="277" width="0.2394%" height="15" fill="rgb(243,57,30)" fg:x="1141" fg:w="3"/><text x="91.3115%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="91.2211%" y="261" width="0.0798%" height="15" fill="rgb(234,50,30)" fg:x="1143" fg:w="1"/><text x="91.4711%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="91.3009%" y="261" width="0.0798%" height="15" fill="rgb(239,23,42)" fg:x="1144" fg:w="1"/><text x="91.5509%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="91.3009%" y="245" width="0.0798%" height="15" fill="rgb(217,38,19)" fg:x="1144" fg:w="1"/><text x="91.5509%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="91.3009%" y="229" width="0.0798%" height="15" fill="rgb(215,179,16)" fg:x="1144" fg:w="1"/><text x="91.5509%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="91.3009%" y="213" width="0.0798%" height="15" fill="rgb(254,21,37)" fg:x="1144" fg:w="1"/><text x="91.5509%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.3009%" y="197" width="0.0798%" height="15" fill="rgb(219,207,48)" fg:x="1144" fg:w="1"/><text x="91.5509%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.3009%" y="181" width="0.0798%" height="15" fill="rgb(227,225,41)" fg:x="1144" fg:w="1"/><text x="91.5509%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="91.3807%" y="245" width="0.0798%" height="15" fill="rgb(223,130,1)" fg:x="1145" fg:w="1"/><text x="91.6307%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="91.4605%" y="229" width="0.2394%" height="15" fill="rgb(249,54,42)" fg:x="1146" fg:w="3"/><text x="91.7105%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (3 samples, 0.24%)</title><rect x="91.4605%" y="213" width="0.2394%" height="15" fill="rgb(248,69,25)" fg:x="1146" fg:w="3"/><text x="91.7105%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="91.5403%" y="197" width="0.1596%" height="15" fill="rgb(234,21,32)" fg:x="1147" fg:w="2"/><text x="91.7903%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="91.6201%" y="181" width="0.0798%" height="15" fill="rgb(252,136,6)" fg:x="1148" fg:w="1"/><text x="91.8701%" y="191.50"></text></g><g><title>regex_syntax::hir::ClassUnicodeRange::start (1 samples, 0.08%)</title><rect x="91.6201%" y="165" width="0.0798%" height="15" fill="rgb(245,87,12)" fg:x="1148" fg:w="1"/><text x="91.8701%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="91.6999%" y="213" width="0.0798%" height="15" fill="rgb(208,12,15)" fg:x="1149" fg:w="1"/><text x="91.9499%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.6999%" y="197" width="0.0798%" height="15" fill="rgb(250,98,2)" fg:x="1149" fg:w="1"/><text x="91.9499%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.6999%" y="181" width="0.0798%" height="15" fill="rgb(205,213,15)" fg:x="1149" fg:w="1"/><text x="91.9499%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.6999%" y="165" width="0.0798%" height="15" fill="rgb(248,192,44)" fg:x="1149" fg:w="1"/><text x="91.9499%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (6 samples, 0.48%)</title><rect x="91.3807%" y="261" width="0.4789%" height="15" fill="rgb(221,89,17)" fg:x="1145" fg:w="6"/><text x="91.6307%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (5 samples, 0.40%)</title><rect x="91.4605%" y="245" width="0.3990%" height="15" fill="rgb(209,55,3)" fg:x="1146" fg:w="5"/><text x="91.7105%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="91.6999%" y="229" width="0.1596%" height="15" fill="rgb(247,23,45)" fg:x="1149" fg:w="2"/><text x="91.9499%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="91.7797%" y="213" width="0.0798%" height="15" fill="rgb(235,152,23)" fg:x="1150" fg:w="1"/><text x="92.0297%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (8 samples, 0.64%)</title><rect x="91.3009%" y="309" width="0.6385%" height="15" fill="rgb(244,63,13)" fg:x="1144" fg:w="8"/><text x="91.5509%" y="319.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (8 samples, 0.64%)</title><rect x="91.3009%" y="293" width="0.6385%" height="15" fill="rgb(227,30,37)" fg:x="1144" fg:w="8"/><text x="91.5509%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (8 samples, 0.64%)</title><rect x="91.3009%" y="277" width="0.6385%" height="15" fill="rgb(224,49,42)" fg:x="1144" fg:w="8"/><text x="91.5509%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="91.8595%" y="261" width="0.0798%" height="15" fill="rgb(218,129,5)" fg:x="1151" fg:w="1"/><text x="92.1095%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="91.8595%" y="245" width="0.0798%" height="15" fill="rgb(240,199,54)" fg:x="1151" fg:w="1"/><text x="92.1095%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="91.8595%" y="229" width="0.0798%" height="15" fill="rgb(234,31,13)" fg:x="1151" fg:w="1"/><text x="92.1095%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="91.8595%" y="213" width="0.0798%" height="15" fill="rgb(219,73,54)" fg:x="1151" fg:w="1"/><text x="92.1095%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.8595%" y="197" width="0.0798%" height="15" fill="rgb(251,162,10)" fg:x="1151" fg:w="1"/><text x="92.1095%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.8595%" y="181" width="0.0798%" height="15" fill="rgb(240,138,47)" fg:x="1151" fg:w="1"/><text x="92.1095%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.8595%" y="165" width="0.0798%" height="15" fill="rgb(216,138,26)" fg:x="1151" fg:w="1"/><text x="92.1095%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="91.9393%" y="309" width="0.0798%" height="15" fill="rgb(243,17,35)" fg:x="1152" fg:w="1"/><text x="92.1893%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="91.9393%" y="293" width="0.0798%" height="15" fill="rgb(241,60,18)" fg:x="1152" fg:w="1"/><text x="92.1893%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="91.9393%" y="277" width="0.0798%" height="15" fill="rgb(234,2,44)" fg:x="1152" fg:w="1"/><text x="92.1893%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="91.9393%" y="261" width="0.0798%" height="15" fill="rgb(225,225,33)" fg:x="1152" fg:w="1"/><text x="92.1893%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.9393%" y="245" width="0.0798%" height="15" fill="rgb(234,50,31)" fg:x="1152" fg:w="1"/><text x="92.1893%" y="255.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (11 samples, 0.88%)</title><rect x="91.3009%" y="325" width="0.8779%" height="15" fill="rgb(249,6,25)" fg:x="1144" fg:w="11"/><text x="91.5509%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="92.0192%" y="309" width="0.1596%" height="15" fill="rgb(241,5,17)" fg:x="1153" fg:w="2"/><text x="92.2692%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="92.0192%" y="293" width="0.1596%" height="15" fill="rgb(207,116,10)" fg:x="1153" fg:w="2"/><text x="92.2692%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="92.0192%" y="277" width="0.1596%" height="15" fill="rgb(222,128,18)" fg:x="1153" fg:w="2"/><text x="92.2692%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="92.0192%" y="261" width="0.1596%" height="15" fill="rgb(229,109,25)" fg:x="1153" fg:w="2"/><text x="92.2692%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="92.0990%" y="245" width="0.0798%" height="15" fill="rgb(222,102,25)" fg:x="1154" fg:w="1"/><text x="92.3490%" y="255.50"></text></g><g><title>regex::builders::bytes::RegexBuilder::new (1 samples, 0.08%)</title><rect x="92.1788%" y="293" width="0.0798%" height="15" fill="rgb(239,211,5)" fg:x="1155" fg:w="1"/><text x="92.4288%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="92.2586%" y="261" width="0.0798%" height="15" fill="rgb(223,136,26)" fg:x="1156" fg:w="1"/><text x="92.5086%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="92.2586%" y="245" width="0.0798%" height="15" fill="rgb(227,30,15)" fg:x="1156" fg:w="1"/><text x="92.5086%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.3384%" y="261" width="0.0798%" height="15" fill="rgb(247,76,4)" fg:x="1157" fg:w="1"/><text x="92.5884%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.4980%" y="229" width="0.0798%" height="15" fill="rgb(245,38,48)" fg:x="1159" fg:w="1"/><text x="92.7480%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (4 samples, 0.32%)</title><rect x="92.4980%" y="245" width="0.3192%" height="15" fill="rgb(210,220,14)" fg:x="1159" fg:w="4"/><text x="92.7480%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (3 samples, 0.24%)</title><rect x="92.5778%" y="229" width="0.2394%" height="15" fill="rgb(224,60,51)" fg:x="1160" fg:w="3"/><text x="92.8278%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.7374%" y="213" width="0.0798%" height="15" fill="rgb(212,133,49)" fg:x="1162" fg:w="1"/><text x="92.9874%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="92.8172%" y="213" width="0.0798%" height="15" fill="rgb(231,39,22)" fg:x="1163" fg:w="1"/><text x="93.0672%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="92.8172%" y="197" width="0.0798%" height="15" fill="rgb(236,173,22)" fg:x="1163" fg:w="1"/><text x="93.0672%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.8172%" y="181" width="0.0798%" height="15" fill="rgb(210,70,0)" fg:x="1163" fg:w="1"/><text x="93.0672%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="92.8172%" y="165" width="0.0798%" height="15" fill="rgb(215,170,11)" fg:x="1163" fg:w="1"/><text x="93.0672%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (1 samples, 0.08%)</title><rect x="92.8970%" y="213" width="0.0798%" height="15" fill="rgb(220,154,28)" fg:x="1164" fg:w="1"/><text x="93.1470%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (4 samples, 0.32%)</title><rect x="92.8172%" y="245" width="0.3192%" height="15" fill="rgb(240,160,41)" fg:x="1163" fg:w="4"/><text x="93.0672%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="92.8172%" y="229" width="0.3192%" height="15" fill="rgb(243,215,41)" fg:x="1163" fg:w="4"/><text x="93.0672%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (2 samples, 0.16%)</title><rect x="92.9769%" y="213" width="0.1596%" height="15" fill="rgb(214,208,31)" fg:x="1165" fg:w="2"/><text x="93.2269%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (2 samples, 0.16%)</title><rect x="92.9769%" y="197" width="0.1596%" height="15" fill="rgb(247,57,22)" fg:x="1165" fg:w="2"/><text x="93.2269%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.16%)</title><rect x="92.9769%" y="181" width="0.1596%" height="15" fill="rgb(228,73,52)" fg:x="1165" fg:w="2"/><text x="93.2269%" y="191.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="93.3759%" y="133" width="0.3192%" height="15" fill="rgb(252,60,9)" fg:x="1170" fg:w="4"/><text x="93.6259%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.6951%" y="133" width="0.0798%" height="15" fill="rgb(233,9,51)" fg:x="1174" fg:w="1"/><text x="93.9451%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="93.7749%" y="133" width="0.0798%" height="15" fill="rgb(223,67,14)" fg:x="1175" fg:w="1"/><text x="94.0249%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.7749%" y="117" width="0.0798%" height="15" fill="rgb(222,86,2)" fg:x="1175" fg:w="1"/><text x="94.0249%" y="127.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="94.1740%" y="101" width="0.1596%" height="15" fill="rgb(243,58,54)" fg:x="1180" fg:w="2"/><text x="94.4240%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (8 samples, 0.64%)</title><rect x="93.8547%" y="133" width="0.6385%" height="15" fill="rgb(210,200,39)" fg:x="1176" fg:w="8"/><text x="94.1047%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (7 samples, 0.56%)</title><rect x="93.9346%" y="117" width="0.5587%" height="15" fill="rgb(238,135,9)" fg:x="1177" fg:w="7"/><text x="94.1846%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="94.3336%" y="101" width="0.1596%" height="15" fill="rgb(232,179,7)" fg:x="1182" fg:w="2"/><text x="94.5836%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="94.3336%" y="85" width="0.1596%" height="15" fill="rgb(245,65,41)" fg:x="1182" fg:w="2"/><text x="94.5836%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.4134%" y="69" width="0.0798%" height="15" fill="rgb(227,43,8)" fg:x="1183" fg:w="1"/><text x="94.6634%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.4134%" y="53" width="0.0798%" height="15" fill="rgb(235,91,14)" fg:x="1183" fg:w="1"/><text x="94.6634%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.4134%" y="37" width="0.0798%" height="15" fill="rgb(235,219,31)" fg:x="1183" fg:w="1"/><text x="94.6634%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (6 samples, 0.48%)</title><rect x="94.4932%" y="133" width="0.4789%" height="15" fill="rgb(227,121,25)" fg:x="1184" fg:w="6"/><text x="94.7432%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (6 samples, 0.48%)</title><rect x="94.4932%" y="117" width="0.4789%" height="15" fill="rgb(254,129,24)" fg:x="1184" fg:w="6"/><text x="94.7432%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (6 samples, 0.48%)</title><rect x="94.4932%" y="101" width="0.4789%" height="15" fill="rgb(226,144,49)" fg:x="1184" fg:w="6"/><text x="94.7432%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.32%)</title><rect x="94.9721%" y="133" width="0.3192%" height="15" fill="rgb(214,187,32)" fg:x="1190" fg:w="4"/><text x="95.2221%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.2115%" y="117" width="0.0798%" height="15" fill="rgb(243,129,46)" fg:x="1193" fg:w="1"/><text x="95.4615%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 2.31%)</title><rect x="93.1365%" y="229" width="2.3144%" height="15" fill="rgb(221,185,35)" fg:x="1167" fg:w="29"/><text x="93.3865%" y="239.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (29 samples, 2.31%)</title><rect x="93.1365%" y="213" width="2.3144%" height="15" fill="rgb(205,0,32)" fg:x="1167" fg:w="29"/><text x="93.3865%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (29 samples, 2.31%)</title><rect x="93.1365%" y="197" width="2.3144%" height="15" fill="rgb(229,179,12)" fg:x="1167" fg:w="29"/><text x="93.3865%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (29 samples, 2.31%)</title><rect x="93.1365%" y="181" width="2.3144%" height="15" fill="rgb(252,107,19)" fg:x="1167" fg:w="29"/><text x="93.3865%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (29 samples, 2.31%)</title><rect x="93.1365%" y="165" width="2.3144%" height="15" fill="rgb(220,95,27)" fg:x="1167" fg:w="29"/><text x="93.3865%" y="175.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (29 samples, 2.31%)</title><rect x="93.1365%" y="149" width="2.3144%" height="15" fill="rgb(240,113,40)" fg:x="1167" fg:w="29"/><text x="93.3865%" y="159.50">r..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="95.2913%" y="133" width="0.1596%" height="15" fill="rgb(208,4,43)" fg:x="1194" fg:w="2"/><text x="95.5413%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="95.2913%" y="117" width="0.1596%" height="15" fill="rgb(247,189,30)" fg:x="1194" fg:w="2"/><text x="95.5413%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.3711%" y="101" width="0.0798%" height="15" fill="rgb(231,157,17)" fg:x="1195" fg:w="1"/><text x="95.6211%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="95.5307%" y="213" width="0.0798%" height="15" fill="rgb(224,139,6)" fg:x="1197" fg:w="1"/><text x="95.7807%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (32 samples, 2.55%)</title><rect x="93.1365%" y="245" width="2.5539%" height="15" fill="rgb(223,83,16)" fg:x="1167" fg:w="32"/><text x="93.3865%" y="255.50">re..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="95.4509%" y="229" width="0.2394%" height="15" fill="rgb(232,211,20)" fg:x="1196" fg:w="3"/><text x="95.7009%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="95.6105%" y="213" width="0.0798%" height="15" fill="rgb(225,203,35)" fg:x="1198" fg:w="1"/><text x="95.8605%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (42 samples, 3.35%)</title><rect x="92.4182%" y="261" width="3.3520%" height="15" fill="rgb(215,211,44)" fg:x="1158" fg:w="42"/><text x="92.6682%" y="271.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="95.6903%" y="245" width="0.0798%" height="15" fill="rgb(248,213,26)" fg:x="1199" fg:w="1"/><text x="95.9403%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="95.8500%" y="213" width="0.0798%" height="15" fill="rgb(214,23,52)" fg:x="1201" fg:w="1"/><text x="96.1000%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="95.8500%" y="197" width="0.0798%" height="15" fill="rgb(225,173,50)" fg:x="1201" fg:w="1"/><text x="96.1000%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.40%)</title><rect x="95.7702%" y="261" width="0.3990%" height="15" fill="rgb(206,150,22)" fg:x="1200" fg:w="5"/><text x="96.0202%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="95.7702%" y="245" width="0.3990%" height="15" fill="rgb(239,64,23)" fg:x="1200" fg:w="5"/><text x="96.0202%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="95.8500%" y="229" width="0.3192%" height="15" fill="rgb(242,50,38)" fg:x="1201" fg:w="4"/><text x="96.1000%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="95.9298%" y="213" width="0.2394%" height="15" fill="rgb(217,91,15)" fg:x="1202" fg:w="3"/><text x="96.1798%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="95.9298%" y="197" width="0.2394%" height="15" fill="rgb(230,172,6)" fg:x="1202" fg:w="3"/><text x="96.1798%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="95.9298%" y="181" width="0.2394%" height="15" fill="rgb(221,98,26)" fg:x="1202" fg:w="3"/><text x="96.1798%" y="191.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="95.9298%" y="165" width="0.2394%" height="15" fill="rgb(227,210,45)" fg:x="1202" fg:w="3"/><text x="96.1798%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (51 samples, 4.07%)</title><rect x="92.1788%" y="309" width="4.0702%" height="15" fill="rgb(206,8,30)" fg:x="1155" fg:w="51"/><text x="92.4288%" y="319.50">&lt;reg..</text></g><g><title>regex::builders::string::RegexBuilder::build (50 samples, 3.99%)</title><rect x="92.2586%" y="293" width="3.9904%" height="15" fill="rgb(241,219,17)" fg:x="1156" fg:w="50"/><text x="92.5086%" y="303.50">rege..</text></g><g><title>regex_automata::meta::regex::Builder::build (50 samples, 3.99%)</title><rect x="92.2586%" y="277" width="3.9904%" height="15" fill="rgb(247,121,29)" fg:x="1156" fg:w="50"/><text x="92.5086%" y="287.50">rege..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="96.1692%" y="261" width="0.0798%" height="15" fill="rgb(219,169,49)" fg:x="1205" fg:w="1"/><text x="96.4192%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="96.1692%" y="245" width="0.0798%" height="15" fill="rgb(253,49,49)" fg:x="1205" fg:w="1"/><text x="96.4192%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="96.1692%" y="229" width="0.0798%" height="15" fill="rgb(217,178,3)" fg:x="1205" fg:w="1"/><text x="96.4192%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="96.1692%" y="213" width="0.0798%" height="15" fill="rgb(234,73,37)" fg:x="1205" fg:w="1"/><text x="96.4192%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.1692%" y="197" width="0.0798%" height="15" fill="rgb(250,98,22)" fg:x="1205" fg:w="1"/><text x="96.4192%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.1692%" y="181" width="0.0798%" height="15" fill="rgb(220,108,37)" fg:x="1205" fg:w="1"/><text x="96.4192%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.1692%" y="165" width="0.0798%" height="15" fill="rgb(225,168,10)" fg:x="1205" fg:w="1"/><text x="96.4192%" y="175.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="96.2490%" y="293" width="0.1596%" height="15" fill="rgb(247,215,21)" fg:x="1206" fg:w="2"/><text x="96.4990%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="96.2490%" y="277" width="0.1596%" height="15" fill="rgb(253,189,31)" fg:x="1206" fg:w="2"/><text x="96.4990%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="96.2490%" y="261" width="0.1596%" height="15" fill="rgb(241,54,22)" fg:x="1206" fg:w="2"/><text x="96.4990%" y="271.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="96.3288%" y="245" width="0.0798%" height="15" fill="rgb(211,87,4)" fg:x="1207" fg:w="1"/><text x="96.5788%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.3288%" y="229" width="0.0798%" height="15" fill="rgb(245,112,24)" fg:x="1207" fg:w="1"/><text x="96.5788%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.3288%" y="213" width="0.0798%" height="15" fill="rgb(235,190,41)" fg:x="1207" fg:w="1"/><text x="96.5788%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.3288%" y="197" width="0.0798%" height="15" fill="rgb(214,89,8)" fg:x="1207" fg:w="1"/><text x="96.5788%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="96.6480%" y="213" width="0.0798%" height="15" fill="rgb(249,155,35)" fg:x="1211" fg:w="1"/><text x="96.8980%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.6480%" y="197" width="0.0798%" height="15" fill="rgb(249,88,26)" fg:x="1211" fg:w="1"/><text x="96.8980%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.6480%" y="181" width="0.0798%" height="15" fill="rgb(232,56,8)" fg:x="1211" fg:w="1"/><text x="96.8980%" y="191.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (127 samples, 10.14%)</title><rect x="86.6720%" y="405" width="10.1357%" height="15" fill="rgb(240,95,3)" fg:x="1086" fg:w="127"/><text x="86.9220%" y="415.50">&lt;&amp;kernel::model..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (114 samples, 9.10%)</title><rect x="87.7095%" y="389" width="9.0982%" height="15" fill="rgb(222,44,28)" fg:x="1099" fg:w="114"/><text x="87.9595%" y="399.50">plugins_core:..</text></g><g><title>indefinite::indefinite (113 samples, 9.02%)</title><rect x="87.7893%" y="373" width="9.0184%" height="15" fill="rgb(234,16,30)" fg:x="1100" fg:w="113"/><text x="88.0393%" y="383.50">indefinite::i..</text></g><g><title>indefinite::methods::indefinite (113 samples, 9.02%)</title><rect x="87.7893%" y="357" width="9.0184%" height="15" fill="rgb(223,26,17)" fg:x="1100" fg:w="113"/><text x="88.0393%" y="367.50">indefinite::m..</text></g><g><title>indefinite::methods::apply_rules (113 samples, 9.02%)</title><rect x="87.7893%" y="341" width="9.0184%" height="15" fill="rgb(239,187,47)" fg:x="1100" fg:w="113"/><text x="88.0393%" y="351.50">indefinite::m..</text></g><g><title>indefinite::rules::number::Number::check (58 samples, 4.63%)</title><rect x="92.1788%" y="325" width="4.6289%" height="15" fill="rgb(247,102,50)" fg:x="1155" fg:w="58"/><text x="92.4288%" y="335.50">indef..</text></g><g><title>regex::regex::string::Regex::is_match_at (7 samples, 0.56%)</title><rect x="96.2490%" y="309" width="0.5587%" height="15" fill="rgb(231,216,22)" fg:x="1206" fg:w="7"/><text x="96.4990%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="96.4086%" y="293" width="0.3990%" height="15" fill="rgb(216,201,26)" fg:x="1208" fg:w="5"/><text x="96.6586%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="96.4086%" y="277" width="0.3990%" height="15" fill="rgb(214,186,23)" fg:x="1208" fg:w="5"/><text x="96.6586%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="96.4884%" y="261" width="0.3192%" height="15" fill="rgb(235,184,4)" fg:x="1209" fg:w="4"/><text x="96.7384%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="96.4884%" y="245" width="0.3192%" height="15" fill="rgb(244,46,17)" fg:x="1209" fg:w="4"/><text x="96.7384%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="96.4884%" y="229" width="0.3192%" height="15" fill="rgb(248,74,46)" fg:x="1209" fg:w="4"/><text x="96.7384%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="96.7279%" y="213" width="0.0798%" height="15" fill="rgb(243,79,5)" fg:x="1212" fg:w="1"/><text x="96.9779%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="96.8077%" y="389" width="0.1596%" height="15" fill="rgb(213,148,1)" fg:x="1213" fg:w="2"/><text x="97.0577%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.8875%" y="373" width="0.0798%" height="15" fill="rgb(221,30,0)" fg:x="1214" fg:w="1"/><text x="97.1375%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.8875%" y="357" width="0.0798%" height="15" fill="rgb(207,85,29)" fg:x="1214" fg:w="1"/><text x="97.1375%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.8875%" y="341" width="0.0798%" height="15" fill="rgb(239,31,46)" fg:x="1214" fg:w="1"/><text x="97.1375%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.8875%" y="325" width="0.0798%" height="15" fill="rgb(219,6,1)" fg:x="1214" fg:w="1"/><text x="97.1375%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="96.8875%" y="309" width="0.0798%" height="15" fill="rgb(229,90,29)" fg:x="1214" fg:w="1"/><text x="97.1375%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="96.8875%" y="293" width="0.0798%" height="15" fill="rgb(242,201,42)" fg:x="1214" fg:w="1"/><text x="97.1375%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="96.8875%" y="277" width="0.0798%" height="15" fill="rgb(243,80,54)" fg:x="1214" fg:w="1"/><text x="97.1375%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.8875%" y="261" width="0.0798%" height="15" fill="rgb(223,166,15)" fg:x="1214" fg:w="1"/><text x="97.1375%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.8875%" y="245" width="0.0798%" height="15" fill="rgb(238,78,27)" fg:x="1214" fg:w="1"/><text x="97.1375%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="96.8875%" y="229" width="0.0798%" height="15" fill="rgb(235,28,43)" fg:x="1214" fg:w="1"/><text x="97.1375%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="96.8875%" y="213" width="0.0798%" height="15" fill="rgb(240,210,28)" fg:x="1214" fg:w="1"/><text x="97.1375%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="96.8875%" y="197" width="0.0798%" height="15" fill="rgb(253,6,46)" fg:x="1214" fg:w="1"/><text x="97.1375%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="96.8875%" y="181" width="0.0798%" height="15" fill="rgb(250,159,47)" fg:x="1214" fg:w="1"/><text x="97.1375%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.8875%" y="165" width="0.0798%" height="15" fill="rgb(216,139,2)" fg:x="1214" fg:w="1"/><text x="97.1375%" y="175.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="96.8077%" y="405" width="0.2394%" height="15" fill="rgb(221,124,44)" fg:x="1213" fg:w="3"/><text x="97.0577%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.9673%" y="389" width="0.0798%" height="15" fill="rgb(205,37,22)" fg:x="1215" fg:w="1"/><text x="97.2173%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.9673%" y="373" width="0.0798%" height="15" fill="rgb(250,55,8)" fg:x="1215" fg:w="1"/><text x="97.2173%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="96.9673%" y="357" width="0.0798%" height="15" fill="rgb(215,83,48)" fg:x="1215" fg:w="1"/><text x="97.2173%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="96.9673%" y="341" width="0.0798%" height="15" fill="rgb(253,2,32)" fg:x="1215" fg:w="1"/><text x="97.2173%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="96.9673%" y="325" width="0.0798%" height="15" fill="rgb(236,67,28)" fg:x="1215" fg:w="1"/><text x="97.2173%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.9673%" y="309" width="0.0798%" height="15" fill="rgb(252,55,15)" fg:x="1215" fg:w="1"/><text x="97.2173%" y="319.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (1 samples, 0.08%)</title><rect x="97.0471%" y="389" width="0.0798%" height="15" fill="rgb(243,173,17)" fg:x="1216" fg:w="1"/><text x="97.2971%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::gid (1 samples, 0.08%)</title><rect x="97.0471%" y="373" width="0.0798%" height="15" fill="rgb(215,212,13)" fg:x="1216" fg:w="1"/><text x="97.2971%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="97.0471%" y="357" width="0.0798%" height="15" fill="rgb(253,176,6)" fg:x="1216" fg:w="1"/><text x="97.2971%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.0471%" y="341" width="0.0798%" height="15" fill="rgb(236,105,26)" fg:x="1216" fg:w="1"/><text x="97.2971%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.0471%" y="325" width="0.0798%" height="15" fill="rgb(239,226,32)" fg:x="1216" fg:w="1"/><text x="97.2971%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.0471%" y="309" width="0.0798%" height="15" fill="rgb(236,104,51)" fg:x="1216" fg:w="1"/><text x="97.2971%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.0471%" y="293" width="0.0798%" height="15" fill="rgb(220,172,33)" fg:x="1216" fg:w="1"/><text x="97.2971%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.0471%" y="277" width="0.0798%" height="15" fill="rgb(224,182,25)" fg:x="1216" fg:w="1"/><text x="97.2971%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.0471%" y="261" width="0.0798%" height="15" fill="rgb(236,184,24)" fg:x="1216" fg:w="1"/><text x="97.2971%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.0471%" y="245" width="0.0798%" height="15" fill="rgb(241,221,14)" fg:x="1216" fg:w="1"/><text x="97.2971%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="97.0471%" y="229" width="0.0798%" height="15" fill="rgb(227,146,5)" fg:x="1216" fg:w="1"/><text x="97.2971%" y="239.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="97.1269%" y="325" width="0.0798%" height="15" fill="rgb(214,15,23)" fg:x="1217" fg:w="1"/><text x="97.3769%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.1269%" y="309" width="0.0798%" height="15" fill="rgb(233,157,31)" fg:x="1217" fg:w="1"/><text x="97.3769%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.1269%" y="293" width="0.0798%" height="15" fill="rgb(211,27,52)" fg:x="1217" fg:w="1"/><text x="97.3769%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.1269%" y="277" width="0.0798%" height="15" fill="rgb(212,223,15)" fg:x="1217" fg:w="1"/><text x="97.3769%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.1269%" y="261" width="0.0798%" height="15" fill="rgb(254,211,0)" fg:x="1217" fg:w="1"/><text x="97.3769%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.1269%" y="245" width="0.0798%" height="15" fill="rgb(205,43,38)" fg:x="1217" fg:w="1"/><text x="97.3769%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.1269%" y="229" width="0.0798%" height="15" fill="rgb(242,206,46)" fg:x="1217" fg:w="1"/><text x="97.3769%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.1269%" y="213" width="0.0798%" height="15" fill="rgb(220,221,12)" fg:x="1217" fg:w="1"/><text x="97.3769%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.1269%" y="197" width="0.0798%" height="15" fill="rgb(217,156,35)" fg:x="1217" fg:w="1"/><text x="97.3769%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.1269%" y="181" width="0.0798%" height="15" fill="rgb(207,181,49)" fg:x="1217" fg:w="1"/><text x="97.3769%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.1269%" y="165" width="0.0798%" height="15" fill="rgb(235,103,47)" fg:x="1217" fg:w="1"/><text x="97.3769%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.1269%" y="149" width="0.0798%" height="15" fill="rgb(222,63,28)" fg:x="1217" fg:w="1"/><text x="97.3769%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.1269%" y="133" width="0.0798%" height="15" fill="rgb(244,137,21)" fg:x="1217" fg:w="1"/><text x="97.3769%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.1269%" y="117" width="0.0798%" height="15" fill="rgb(228,35,27)" fg:x="1217" fg:w="1"/><text x="97.3769%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.1269%" y="101" width="0.0798%" height="15" fill="rgb(226,191,41)" fg:x="1217" fg:w="1"/><text x="97.3769%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.1269%" y="85" width="0.0798%" height="15" fill="rgb(210,154,3)" fg:x="1217" fg:w="1"/><text x="97.3769%" y="95.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.2067%" y="229" width="0.0798%" height="15" fill="rgb(216,60,49)" fg:x="1218" fg:w="1"/><text x="97.4567%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.2067%" y="213" width="0.0798%" height="15" fill="rgb(226,17,20)" fg:x="1218" fg:w="1"/><text x="97.4567%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.2067%" y="197" width="0.0798%" height="15" fill="rgb(206,115,35)" fg:x="1218" fg:w="1"/><text x="97.4567%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.2067%" y="181" width="0.0798%" height="15" fill="rgb(227,88,1)" fg:x="1218" fg:w="1"/><text x="97.4567%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.2067%" y="165" width="0.0798%" height="15" fill="rgb(230,222,24)" fg:x="1218" fg:w="1"/><text x="97.4567%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.2067%" y="149" width="0.0798%" height="15" fill="rgb(214,124,32)" fg:x="1218" fg:w="1"/><text x="97.4567%" y="159.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.2067%" y="133" width="0.0798%" height="15" fill="rgb(240,41,36)" fg:x="1218" fg:w="1"/><text x="97.4567%" y="143.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="97.2067%" y="325" width="0.1596%" height="15" fill="rgb(221,17,52)" fg:x="1218" fg:w="2"/><text x="97.4567%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="97.2067%" y="309" width="0.1596%" height="15" fill="rgb(252,70,16)" fg:x="1218" fg:w="2"/><text x="97.4567%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.2067%" y="293" width="0.1596%" height="15" fill="rgb(250,177,4)" fg:x="1218" fg:w="2"/><text x="97.4567%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="97.2067%" y="277" width="0.1596%" height="15" fill="rgb(240,188,47)" fg:x="1218" fg:w="2"/><text x="97.4567%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.2067%" y="261" width="0.1596%" height="15" fill="rgb(215,92,12)" fg:x="1218" fg:w="2"/><text x="97.4567%" y="271.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="97.2067%" y="245" width="0.1596%" height="15" fill="rgb(242,110,29)" fg:x="1218" fg:w="2"/><text x="97.4567%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="97.2865%" y="229" width="0.0798%" height="15" fill="rgb(208,211,26)" fg:x="1219" fg:w="1"/><text x="97.5365%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.2865%" y="213" width="0.0798%" height="15" fill="rgb(244,147,6)" fg:x="1219" fg:w="1"/><text x="97.5365%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="97.2865%" y="197" width="0.0798%" height="15" fill="rgb(211,130,42)" fg:x="1219" fg:w="1"/><text x="97.5365%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="97.2865%" y="181" width="0.0798%" height="15" fill="rgb(220,63,1)" fg:x="1219" fg:w="1"/><text x="97.5365%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.3663%" y="213" width="0.0798%" height="15" fill="rgb(241,212,30)" fg:x="1220" fg:w="1"/><text x="97.6163%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.3663%" y="197" width="0.0798%" height="15" fill="rgb(233,153,17)" fg:x="1220" fg:w="1"/><text x="97.6163%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.3663%" y="181" width="0.0798%" height="15" fill="rgb(236,3,10)" fg:x="1220" fg:w="1"/><text x="97.6163%" y="191.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.3663%" y="165" width="0.0798%" height="15" fill="rgb(232,41,21)" fg:x="1220" fg:w="1"/><text x="97.6163%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.3663%" y="149" width="0.0798%" height="15" fill="rgb(206,63,51)" fg:x="1220" fg:w="1"/><text x="97.6163%" y="159.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.3663%" y="133" width="0.0798%" height="15" fill="rgb(250,214,3)" fg:x="1220" fg:w="1"/><text x="97.6163%" y="143.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.3663%" y="117" width="0.0798%" height="15" fill="rgb(254,89,27)" fg:x="1220" fg:w="1"/><text x="97.6163%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.3663%" y="101" width="0.0798%" height="15" fill="rgb(249,41,14)" fg:x="1220" fg:w="1"/><text x="97.6163%" y="111.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="97.3663%" y="261" width="0.1596%" height="15" fill="rgb(221,196,51)" fg:x="1220" fg:w="2"/><text x="97.6163%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="97.3663%" y="245" width="0.1596%" height="15" fill="rgb(214,116,26)" fg:x="1220" fg:w="2"/><text x="97.6163%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="97.3663%" y="229" width="0.1596%" height="15" fill="rgb(236,67,7)" fg:x="1220" fg:w="2"/><text x="97.6163%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.4461%" y="213" width="0.0798%" height="15" fill="rgb(253,179,32)" fg:x="1221" fg:w="1"/><text x="97.6961%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.56%)</title><rect x="97.0471%" y="405" width="0.5587%" height="15" fill="rgb(218,33,15)" fg:x="1216" fg:w="7"/><text x="97.2971%" y="415.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (6 samples, 0.48%)</title><rect x="97.1269%" y="389" width="0.4789%" height="15" fill="rgb(217,202,41)" fg:x="1217" fg:w="6"/><text x="97.3769%" y="399.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (6 samples, 0.48%)</title><rect x="97.1269%" y="373" width="0.4789%" height="15" fill="rgb(234,133,5)" fg:x="1217" fg:w="6"/><text x="97.3769%" y="383.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.48%)</title><rect x="97.1269%" y="357" width="0.4789%" height="15" fill="rgb(240,47,40)" fg:x="1217" fg:w="6"/><text x="97.3769%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="97.1269%" y="341" width="0.4789%" height="15" fill="rgb(234,166,26)" fg:x="1217" fg:w="6"/><text x="97.3769%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="97.3663%" y="325" width="0.2394%" height="15" fill="rgb(244,125,51)" fg:x="1220" fg:w="3"/><text x="97.6163%" y="335.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="97.3663%" y="309" width="0.2394%" height="15" fill="rgb(229,171,11)" fg:x="1220" fg:w="3"/><text x="97.6163%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="97.3663%" y="293" width="0.2394%" height="15" fill="rgb(224,38,45)" fg:x="1220" fg:w="3"/><text x="97.6163%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="97.3663%" y="277" width="0.2394%" height="15" fill="rgb(237,27,7)" fg:x="1220" fg:w="3"/><text x="97.6163%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.5259%" y="261" width="0.0798%" height="15" fill="rgb(216,52,7)" fg:x="1222" fg:w="1"/><text x="97.7759%" y="271.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (145 samples, 11.57%)</title><rect x="86.1133%" y="565" width="11.5722%" height="15" fill="rgb(243,11,11)" fg:x="1079" fg:w="145"/><text x="86.3633%" y="575.50">kernel::plugins::..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (144 samples, 11.49%)</title><rect x="86.1931%" y="549" width="11.4924%" height="15" fill="rgb(253,167,20)" fg:x="1080" fg:w="144"/><text x="86.4431%" y="559.50">&lt;plugins_dynlib::..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (144 samples, 11.49%)</title><rect x="86.1931%" y="533" width="11.4924%" height="15" fill="rgb(215,207,5)" fg:x="1080" fg:w="144"/><text x="86.4431%" y="543.50">kernel::plugins::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (144 samples, 11.49%)</title><rect x="86.1931%" y="517" width="11.4924%" height="15" fill="rgb(252,127,31)" fg:x="1080" fg:w="144"/><text x="86.4431%" y="527.50">core::ops::functi..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (144 samples, 11.49%)</title><rect x="86.1931%" y="501" width="11.4924%" height="15" fill="rgb(209,106,27)" fg:x="1080" fg:w="144"/><text x="86.4431%" y="511.50">kernel::plugins::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (144 samples, 11.49%)</title><rect x="86.1931%" y="485" width="11.4924%" height="15" fill="rgb(214,220,18)" fg:x="1080" fg:w="144"/><text x="86.4431%" y="495.50">core::ops::functi..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (144 samples, 11.49%)</title><rect x="86.1931%" y="469" width="11.4924%" height="15" fill="rgb(237,89,12)" fg:x="1080" fg:w="144"/><text x="86.4431%" y="479.50">&lt;alloc::boxed::Bo..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (144 samples, 11.49%)</title><rect x="86.1931%" y="453" width="11.4924%" height="15" fill="rgb(209,167,36)" fg:x="1080" fg:w="144"/><text x="86.4431%" y="463.50">&lt;engine::session:..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (144 samples, 11.49%)</title><rect x="86.1931%" y="437" width="11.4924%" height="15" fill="rgb(243,45,22)" fg:x="1080" fg:w="144"/><text x="86.4431%" y="447.50">&lt;plugins_core::lo..</text></g><g><title>plugins_core::looking::model::new_area_observation (138 samples, 11.01%)</title><rect x="86.6720%" y="421" width="11.0136%" height="15" fill="rgb(239,2,46)" fg:x="1086" fg:w="138"/><text x="86.9220%" y="431.50">plugins_core::lo..</text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (1 samples, 0.08%)</title><rect x="97.6057%" y="405" width="0.0798%" height="15" fill="rgb(241,101,0)" fg:x="1223" fg:w="1"/><text x="97.8557%" y="415.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="97.7654%" y="549" width="0.0798%" height="15" fill="rgb(244,34,31)" fg:x="1225" fg:w="1"/><text x="98.0154%" y="559.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="97.8452%" y="533" width="0.0798%" height="15" fill="rgb(248,23,22)" fg:x="1226" fg:w="1"/><text x="98.0952%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.8452%" y="517" width="0.0798%" height="15" fill="rgb(218,27,48)" fg:x="1226" fg:w="1"/><text x="98.0952%" y="527.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="97.9250%" y="501" width="0.0798%" height="15" fill="rgb(232,78,1)" fg:x="1227" fg:w="1"/><text x="98.1750%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="97.9250%" y="517" width="0.1596%" height="15" fill="rgb(233,169,12)" fg:x="1227" fg:w="2"/><text x="98.1750%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.0048%" y="501" width="0.0798%" height="15" fill="rgb(225,222,54)" fg:x="1228" fg:w="1"/><text x="98.2548%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.0048%" y="485" width="0.0798%" height="15" fill="rgb(245,126,29)" fg:x="1228" fg:w="1"/><text x="98.2548%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.0846%" y="453" width="0.0798%" height="15" fill="rgb(241,63,48)" fg:x="1229" fg:w="1"/><text x="98.3346%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.0846%" y="437" width="0.0798%" height="15" fill="rgb(235,126,38)" fg:x="1229" fg:w="1"/><text x="98.3346%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.0846%" y="421" width="0.0798%" height="15" fill="rgb(232,96,49)" fg:x="1229" fg:w="1"/><text x="98.3346%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.0846%" y="405" width="0.0798%" height="15" fill="rgb(211,146,40)" fg:x="1229" fg:w="1"/><text x="98.3346%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.0846%" y="389" width="0.0798%" height="15" fill="rgb(247,93,44)" fg:x="1229" fg:w="1"/><text x="98.3346%" y="399.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="98.0846%" y="373" width="0.0798%" height="15" fill="rgb(251,41,49)" fg:x="1229" fg:w="1"/><text x="98.3346%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="98.0846%" y="357" width="0.0798%" height="15" fill="rgb(218,155,12)" fg:x="1229" fg:w="1"/><text x="98.3346%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="98.1644%" y="453" width="0.0798%" height="15" fill="rgb(221,161,30)" fg:x="1230" fg:w="1"/><text x="98.4144%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.1644%" y="437" width="0.0798%" height="15" fill="rgb(221,179,11)" fg:x="1230" fg:w="1"/><text x="98.4144%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.1644%" y="421" width="0.0798%" height="15" fill="rgb(224,170,48)" fg:x="1230" fg:w="1"/><text x="98.4144%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.1644%" y="405" width="0.0798%" height="15" fill="rgb(223,117,5)" fg:x="1230" fg:w="1"/><text x="98.4144%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.1644%" y="389" width="0.0798%" height="15" fill="rgb(209,52,20)" fg:x="1230" fg:w="1"/><text x="98.4144%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.1644%" y="373" width="0.0798%" height="15" fill="rgb(209,19,41)" fg:x="1230" fg:w="1"/><text x="98.4144%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.1644%" y="357" width="0.0798%" height="15" fill="rgb(210,177,12)" fg:x="1230" fg:w="1"/><text x="98.4144%" y="367.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="98.2442%" y="453" width="0.0798%" height="15" fill="rgb(211,159,37)" fg:x="1231" fg:w="1"/><text x="98.4942%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.2442%" y="437" width="0.0798%" height="15" fill="rgb(209,20,2)" fg:x="1231" fg:w="1"/><text x="98.4942%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="98.2442%" y="421" width="0.0798%" height="15" fill="rgb(244,3,46)" fg:x="1231" fg:w="1"/><text x="98.4942%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.2442%" y="405" width="0.0798%" height="15" fill="rgb(220,94,38)" fg:x="1231" fg:w="1"/><text x="98.4942%" y="415.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.3240%" y="405" width="0.0798%" height="15" fill="rgb(253,14,31)" fg:x="1232" fg:w="1"/><text x="98.5740%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.3240%" y="389" width="0.0798%" height="15" fill="rgb(234,176,13)" fg:x="1232" fg:w="1"/><text x="98.5740%" y="399.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="98.3240%" y="453" width="0.1596%" height="15" fill="rgb(218,62,25)" fg:x="1232" fg:w="2"/><text x="98.5740%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.3240%" y="437" width="0.1596%" height="15" fill="rgb(216,124,40)" fg:x="1232" fg:w="2"/><text x="98.5740%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.3240%" y="421" width="0.1596%" height="15" fill="rgb(228,170,12)" fg:x="1232" fg:w="2"/><text x="98.5740%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.4038%" y="405" width="0.0798%" height="15" fill="rgb(231,226,5)" fg:x="1233" fg:w="1"/><text x="98.6538%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.4038%" y="389" width="0.0798%" height="15" fill="rgb(237,122,22)" fg:x="1233" fg:w="1"/><text x="98.6538%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.4038%" y="373" width="0.0798%" height="15" fill="rgb(209,185,25)" fg:x="1233" fg:w="1"/><text x="98.6538%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.4038%" y="357" width="0.0798%" height="15" fill="rgb(228,200,32)" fg:x="1233" fg:w="1"/><text x="98.6538%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.4038%" y="341" width="0.0798%" height="15" fill="rgb(217,140,10)" fg:x="1233" fg:w="1"/><text x="98.6538%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="98.4038%" y="325" width="0.0798%" height="15" fill="rgb(253,17,24)" fg:x="1233" fg:w="1"/><text x="98.6538%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.4038%" y="309" width="0.0798%" height="15" fill="rgb(212,61,6)" fg:x="1233" fg:w="1"/><text x="98.6538%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.4038%" y="293" width="0.0798%" height="15" fill="rgb(205,14,25)" fg:x="1233" fg:w="1"/><text x="98.6538%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="98.4038%" y="277" width="0.0798%" height="15" fill="rgb(232,69,41)" fg:x="1233" fg:w="1"/><text x="98.6538%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.4038%" y="261" width="0.0798%" height="15" fill="rgb(241,106,47)" fg:x="1233" fg:w="1"/><text x="98.6538%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.4038%" y="245" width="0.0798%" height="15" fill="rgb(210,213,53)" fg:x="1233" fg:w="1"/><text x="98.6538%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.4038%" y="229" width="0.0798%" height="15" fill="rgb(253,175,27)" fg:x="1233" fg:w="1"/><text x="98.6538%" y="239.50"></text></g><g><title>plugins_core::tools::contained_by (8 samples, 0.64%)</title><rect x="97.9250%" y="533" width="0.6385%" height="15" fill="rgb(211,171,24)" fg:x="1227" fg:w="8"/><text x="98.1750%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (6 samples, 0.48%)</title><rect x="98.0846%" y="517" width="0.4789%" height="15" fill="rgb(229,80,7)" fg:x="1229" fg:w="6"/><text x="98.3346%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (6 samples, 0.48%)</title><rect x="98.0846%" y="501" width="0.4789%" height="15" fill="rgb(212,46,39)" fg:x="1229" fg:w="6"/><text x="98.3346%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.48%)</title><rect x="98.0846%" y="485" width="0.4789%" height="15" fill="rgb(240,80,45)" fg:x="1229" fg:w="6"/><text x="98.3346%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="98.0846%" y="469" width="0.4789%" height="15" fill="rgb(253,177,40)" fg:x="1229" fg:w="6"/><text x="98.3346%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="98.4836%" y="453" width="0.0798%" height="15" fill="rgb(249,200,15)" fg:x="1234" fg:w="1"/><text x="98.7336%" y="463.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="98.4836%" y="437" width="0.0798%" height="15" fill="rgb(217,78,26)" fg:x="1234" fg:w="1"/><text x="98.7336%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.4836%" y="421" width="0.0798%" height="15" fill="rgb(254,151,32)" fg:x="1234" fg:w="1"/><text x="98.7336%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.4836%" y="405" width="0.0798%" height="15" fill="rgb(226,165,27)" fg:x="1234" fg:w="1"/><text x="98.7336%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.4836%" y="389" width="0.0798%" height="15" fill="rgb(250,206,4)" fg:x="1234" fg:w="1"/><text x="98.7336%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.4836%" y="373" width="0.0798%" height="15" fill="rgb(231,229,27)" fg:x="1234" fg:w="1"/><text x="98.7336%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.4836%" y="357" width="0.0798%" height="15" fill="rgb(239,217,8)" fg:x="1234" fg:w="1"/><text x="98.7336%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.4836%" y="341" width="0.0798%" height="15" fill="rgb(225,204,27)" fg:x="1234" fg:w="1"/><text x="98.7336%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.4836%" y="325" width="0.0798%" height="15" fill="rgb(230,56,32)" fg:x="1234" fg:w="1"/><text x="98.7336%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.4836%" y="309" width="0.0798%" height="15" fill="rgb(222,56,27)" fg:x="1234" fg:w="1"/><text x="98.7336%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.4836%" y="293" width="0.0798%" height="15" fill="rgb(253,108,27)" fg:x="1234" fg:w="1"/><text x="98.7336%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.4836%" y="277" width="0.0798%" height="15" fill="rgb(212,87,36)" fg:x="1234" fg:w="1"/><text x="98.7336%" y="287.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.4836%" y="261" width="0.0798%" height="15" fill="rgb(247,82,36)" fg:x="1234" fg:w="1"/><text x="98.7336%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.4836%" y="245" width="0.0798%" height="15" fill="rgb(222,143,9)" fg:x="1234" fg:w="1"/><text x="98.7336%" y="255.50"></text></g><g><title>engine::session::Session::captured (165 samples, 13.17%)</title><rect x="85.4749%" y="709" width="13.1684%" height="15" fill="rgb(238,162,48)" fg:x="1071" fg:w="165"/><text x="85.7249%" y="719.50">engine::session::Ses..</text></g><g><title>engine::session::logs::capture (164 samples, 13.09%)</title><rect x="85.5547%" y="693" width="13.0886%" height="15" fill="rgb(221,59,43)" fg:x="1072" fg:w="164"/><text x="85.8047%" y="703.50">engine::session::log..</text></g><g><title>tracing_core::dispatcher::with_default (161 samples, 12.85%)</title><rect x="85.7941%" y="677" width="12.8492%" height="15" fill="rgb(205,166,41)" fg:x="1075" fg:w="161"/><text x="86.0441%" y="687.50">tracing_core::dispa..</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (161 samples, 12.85%)</title><rect x="85.7941%" y="661" width="12.8492%" height="15" fill="rgb(241,186,40)" fg:x="1075" fg:w="161"/><text x="86.0441%" y="671.50">&lt;engine::session::S..</text></g><g><title>kernel::plugins::mw::apply_middleware (161 samples, 12.85%)</title><rect x="85.7941%" y="645" width="12.8492%" height="15" fill="rgb(216,119,35)" fg:x="1075" fg:w="161"/><text x="86.0441%" y="655.50">kernel::plugins::mw..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (161 samples, 12.85%)</title><rect x="85.7941%" y="629" width="12.8492%" height="15" fill="rgb(208,68,38)" fg:x="1075" fg:w="161"/><text x="86.0441%" y="639.50">kernel::plugins::mw..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (161 samples, 12.85%)</title><rect x="85.7941%" y="613" width="12.8492%" height="15" fill="rgb(217,113,1)" fg:x="1075" fg:w="161"/><text x="86.0441%" y="623.50">&lt;engine::session::E..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (158 samples, 12.61%)</title><rect x="86.0335%" y="597" width="12.6097%" height="15" fill="rgb(242,153,3)" fg:x="1078" fg:w="158"/><text x="86.2835%" y="607.50">kernel::plugins::mw..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (158 samples, 12.61%)</title><rect x="86.0335%" y="581" width="12.6097%" height="15" fill="rgb(229,76,35)" fg:x="1078" fg:w="158"/><text x="86.2835%" y="591.50">&lt;plugins_rune::Rune..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (12 samples, 0.96%)</title><rect x="97.6856%" y="565" width="0.9577%" height="15" fill="rgb(229,125,34)" fg:x="1224" fg:w="12"/><text x="97.9356%" y="575.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (10 samples, 0.80%)</title><rect x="97.8452%" y="549" width="0.7981%" height="15" fill="rgb(238,179,36)" fg:x="1226" fg:w="10"/><text x="98.0952%" y="559.50"></text></g><g><title>plugins_core::tools::occupied_by (1 samples, 0.08%)</title><rect x="98.5634%" y="533" width="0.0798%" height="15" fill="rgb(244,183,19)" fg:x="1235" fg:w="1"/><text x="98.8134%" y="543.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="98.5634%" y="517" width="0.0798%" height="15" fill="rgb(216,85,49)" fg:x="1235" fg:w="1"/><text x="98.8134%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.5634%" y="501" width="0.0798%" height="15" fill="rgb(208,161,47)" fg:x="1235" fg:w="1"/><text x="98.8134%" y="511.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (1 samples, 0.08%)</title><rect x="98.5634%" y="485" width="0.0798%" height="15" fill="rgb(233,210,18)" fg:x="1235" fg:w="1"/><text x="98.8134%" y="495.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (1 samples, 0.08%)</title><rect x="98.5634%" y="469" width="0.0798%" height="15" fill="rgb(205,104,42)" fg:x="1235" fg:w="1"/><text x="98.8134%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="98.5634%" y="453" width="0.0798%" height="15" fill="rgb(248,90,43)" fg:x="1235" fg:w="1"/><text x="98.8134%" y="463.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="98.5634%" y="437" width="0.0798%" height="15" fill="rgb(206,198,11)" fg:x="1235" fg:w="1"/><text x="98.8134%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.5634%" y="421" width="0.0798%" height="15" fill="rgb(239,165,27)" fg:x="1235" fg:w="1"/><text x="98.8134%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.6433%" y="661" width="0.0798%" height="15" fill="rgb(246,44,32)" fg:x="1236" fg:w="1"/><text x="98.8933%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.6433%" y="645" width="0.0798%" height="15" fill="rgb(252,65,42)" fg:x="1236" fg:w="1"/><text x="98.8933%" y="655.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.7231%" y="581" width="0.0798%" height="15" fill="rgb(246,197,18)" fg:x="1237" fg:w="1"/><text x="98.9731%" y="591.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="98.8029%" y="421" width="0.0798%" height="15" fill="rgb(216,192,4)" fg:x="1238" fg:w="1"/><text x="99.0529%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="98.7231%" y="613" width="0.2394%" height="15" fill="rgb(208,117,10)" fg:x="1237" fg:w="3"/><text x="98.9731%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="98.7231%" y="597" width="0.2394%" height="15" fill="rgb(240,61,47)" fg:x="1237" fg:w="3"/><text x="98.9731%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="98.8029%" y="581" width="0.1596%" height="15" fill="rgb(228,178,21)" fg:x="1238" fg:w="2"/><text x="99.0529%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="98.8029%" y="565" width="0.1596%" height="15" fill="rgb(219,96,54)" fg:x="1238" fg:w="2"/><text x="99.0529%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="98.8029%" y="549" width="0.1596%" height="15" fill="rgb(250,177,24)" fg:x="1238" fg:w="2"/><text x="99.0529%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="98.8029%" y="533" width="0.1596%" height="15" fill="rgb(242,154,46)" fg:x="1238" fg:w="2"/><text x="99.0529%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.8029%" y="517" width="0.1596%" height="15" fill="rgb(226,176,29)" fg:x="1238" fg:w="2"/><text x="99.0529%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.8029%" y="501" width="0.1596%" height="15" fill="rgb(226,29,2)" fg:x="1238" fg:w="2"/><text x="99.0529%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (2 samples, 0.16%)</title><rect x="98.8029%" y="485" width="0.1596%" height="15" fill="rgb(237,104,14)" fg:x="1238" fg:w="2"/><text x="99.0529%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (2 samples, 0.16%)</title><rect x="98.8029%" y="469" width="0.1596%" height="15" fill="rgb(245,207,31)" fg:x="1238" fg:w="2"/><text x="99.0529%" y="479.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (2 samples, 0.16%)</title><rect x="98.8029%" y="453" width="0.1596%" height="15" fill="rgb(229,211,45)" fg:x="1238" fg:w="2"/><text x="99.0529%" y="463.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (2 samples, 0.16%)</title><rect x="98.8029%" y="437" width="0.1596%" height="15" fill="rgb(229,113,15)" fg:x="1238" fg:w="2"/><text x="99.0529%" y="447.50"></text></g><g><title>serde_json::error::make_error (1 samples, 0.08%)</title><rect x="98.8827%" y="421" width="0.0798%" height="15" fill="rgb(237,147,15)" fg:x="1239" fg:w="1"/><text x="99.1327%" y="431.50"></text></g><g><title>core::str::pattern::StrSearcher::new (1 samples, 0.08%)</title><rect x="98.8827%" y="405" width="0.0798%" height="15" fill="rgb(244,120,12)" fg:x="1239" fg:w="1"/><text x="99.1327%" y="415.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::new (1 samples, 0.08%)</title><rect x="98.8827%" y="389" width="0.0798%" height="15" fill="rgb(205,120,12)" fg:x="1239" fg:w="1"/><text x="99.1327%" y="399.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::maximal_suffix (1 samples, 0.08%)</title><rect x="98.8827%" y="373" width="0.0798%" height="15" fill="rgb(231,26,45)" fg:x="1239" fg:w="1"/><text x="99.1327%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.0423%" y="581" width="0.0798%" height="15" fill="rgb(246,98,1)" fg:x="1241" fg:w="1"/><text x="99.2923%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="99.0423%" y="565" width="0.0798%" height="15" fill="rgb(207,68,45)" fg:x="1241" fg:w="1"/><text x="99.2923%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="99.0423%" y="549" width="0.0798%" height="15" fill="rgb(231,27,38)" fg:x="1241" fg:w="1"/><text x="99.2923%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="99.0423%" y="533" width="0.0798%" height="15" fill="rgb(214,223,3)" fg:x="1241" fg:w="1"/><text x="99.2923%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.0423%" y="517" width="0.0798%" height="15" fill="rgb(228,195,46)" fg:x="1241" fg:w="1"/><text x="99.2923%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="98.7231%" y="661" width="0.4789%" height="15" fill="rgb(231,100,42)" fg:x="1237" fg:w="6"/><text x="98.9731%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.48%)</title><rect x="98.7231%" y="645" width="0.4789%" height="15" fill="rgb(236,53,4)" fg:x="1237" fg:w="6"/><text x="98.9731%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (6 samples, 0.48%)</title><rect x="98.7231%" y="629" width="0.4789%" height="15" fill="rgb(230,152,12)" fg:x="1237" fg:w="6"/><text x="98.9731%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="98.9625%" y="613" width="0.2394%" height="15" fill="rgb(226,101,19)" fg:x="1240" fg:w="3"/><text x="99.2125%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="98.9625%" y="597" width="0.2394%" height="15" fill="rgb(250,149,32)" fg:x="1240" fg:w="3"/><text x="99.2125%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="99.1221%" y="581" width="0.0798%" height="15" fill="rgb(232,178,12)" fg:x="1242" fg:w="1"/><text x="99.3721%" y="591.50"></text></g><g><title>engine::session::internal::Added::find_refs (8 samples, 0.64%)</title><rect x="98.6433%" y="693" width="0.6385%" height="15" fill="rgb(246,151,17)" fg:x="1236" fg:w="8"/><text x="98.8933%" y="703.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (8 samples, 0.64%)</title><rect x="98.6433%" y="677" width="0.6385%" height="15" fill="rgb(252,17,51)" fg:x="1236" fg:w="8"/><text x="98.8933%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.2019%" y="661" width="0.0798%" height="15" fill="rgb(250,207,23)" fg:x="1243" fg:w="1"/><text x="99.4519%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.2019%" y="645" width="0.0798%" height="15" fill="rgb(205,27,5)" fg:x="1243" fg:w="1"/><text x="99.4519%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.2019%" y="629" width="0.0798%" height="15" fill="rgb(224,32,19)" fg:x="1243" fg:w="1"/><text x="99.4519%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.2817%" y="677" width="0.0798%" height="15" fill="rgb(247,214,40)" fg:x="1244" fg:w="1"/><text x="99.5317%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.2817%" y="661" width="0.0798%" height="15" fill="rgb(239,199,17)" fg:x="1244" fg:w="1"/><text x="99.5317%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.2817%" y="645" width="0.0798%" height="15" fill="rgb(251,159,9)" fg:x="1244" fg:w="1"/><text x="99.5317%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.2817%" y="629" width="0.0798%" height="15" fill="rgb(225,78,32)" fg:x="1244" fg:w="1"/><text x="99.5317%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.2817%" y="613" width="0.0798%" height="15" fill="rgb(206,97,47)" fg:x="1244" fg:w="1"/><text x="99.5317%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.2817%" y="597" width="0.0798%" height="15" fill="rgb(227,107,4)" fg:x="1244" fg:w="1"/><text x="99.5317%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.2817%" y="581" width="0.0798%" height="15" fill="rgb(241,146,50)" fg:x="1244" fg:w="1"/><text x="99.5317%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.2817%" y="565" width="0.0798%" height="15" fill="rgb(232,92,30)" fg:x="1244" fg:w="1"/><text x="99.5317%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.2817%" y="549" width="0.0798%" height="15" fill="rgb(222,0,40)" fg:x="1244" fg:w="1"/><text x="99.5317%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.2817%" y="533" width="0.0798%" height="15" fill="rgb(219,54,33)" fg:x="1244" fg:w="1"/><text x="99.5317%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.2817%" y="517" width="0.0798%" height="15" fill="rgb(226,209,28)" fg:x="1244" fg:w="1"/><text x="99.5317%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.2817%" y="501" width="0.0798%" height="15" fill="rgb(254,205,35)" fg:x="1244" fg:w="1"/><text x="99.5317%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.2817%" y="485" width="0.0798%" height="15" fill="rgb(230,159,3)" fg:x="1244" fg:w="1"/><text x="99.5317%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.2817%" y="469" width="0.0798%" height="15" fill="rgb(232,190,24)" fg:x="1244" fg:w="1"/><text x="99.5317%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.2817%" y="453" width="0.0798%" height="15" fill="rgb(217,227,44)" fg:x="1244" fg:w="1"/><text x="99.5317%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.2817%" y="437" width="0.0798%" height="15" fill="rgb(236,211,1)" fg:x="1244" fg:w="1"/><text x="99.5317%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.2817%" y="421" width="0.0798%" height="15" fill="rgb(250,127,46)" fg:x="1244" fg:w="1"/><text x="99.5317%" y="431.50"></text></g><g><title>engine::session::Session::load_entity (10 samples, 0.80%)</title><rect x="98.6433%" y="709" width="0.7981%" height="15" fill="rgb(229,213,6)" fg:x="1236" fg:w="10"/><text x="98.8933%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="99.2817%" y="693" width="0.1596%" height="15" fill="rgb(237,15,36)" fg:x="1244" fg:w="2"/><text x="99.5317%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="99.3615%" y="677" width="0.0798%" height="15" fill="rgb(213,131,41)" fg:x="1245" fg:w="1"/><text x="99.6115%" y="687.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.3615%" y="661" width="0.0798%" height="15" fill="rgb(225,82,44)" fg:x="1245" fg:w="1"/><text x="99.6115%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.3615%" y="645" width="0.0798%" height="15" fill="rgb(249,42,11)" fg:x="1245" fg:w="1"/><text x="99.6115%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3615%" y="629" width="0.0798%" height="15" fill="rgb(253,11,29)" fg:x="1245" fg:w="1"/><text x="99.6115%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.3615%" y="613" width="0.0798%" height="15" fill="rgb(206,8,54)" fg:x="1245" fg:w="1"/><text x="99.6115%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3615%" y="597" width="0.0798%" height="15" fill="rgb(222,186,2)" fg:x="1245" fg:w="1"/><text x="99.6115%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.3615%" y="581" width="0.0798%" height="15" fill="rgb(221,206,53)" fg:x="1245" fg:w="1"/><text x="99.6115%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3615%" y="565" width="0.0798%" height="15" fill="rgb(230,150,21)" fg:x="1245" fg:w="1"/><text x="99.6115%" y="575.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.3615%" y="549" width="0.0798%" height="15" fill="rgb(253,202,10)" fg:x="1245" fg:w="1"/><text x="99.6115%" y="559.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.3615%" y="533" width="0.0798%" height="15" fill="rgb(238,109,40)" fg:x="1245" fg:w="1"/><text x="99.6115%" y="543.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="99.4413%" y="677" width="0.0798%" height="15" fill="rgb(247,120,22)" fg:x="1246" fg:w="1"/><text x="99.6913%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.4413%" y="661" width="0.0798%" height="15" fill="rgb(207,43,30)" fg:x="1246" fg:w="1"/><text x="99.6913%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.4413%" y="645" width="0.0798%" height="15" fill="rgb(213,211,24)" fg:x="1246" fg:w="1"/><text x="99.6913%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.4413%" y="629" width="0.0798%" height="15" fill="rgb(239,73,39)" fg:x="1246" fg:w="1"/><text x="99.6913%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.4413%" y="613" width="0.0798%" height="15" fill="rgb(245,182,19)" fg:x="1246" fg:w="1"/><text x="99.6913%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.4413%" y="597" width="0.0798%" height="15" fill="rgb(247,143,26)" fg:x="1246" fg:w="1"/><text x="99.6913%" y="607.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="99.4413%" y="581" width="0.0798%" height="15" fill="rgb(228,191,23)" fg:x="1246" fg:w="1"/><text x="99.6913%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="99.4413%" y="565" width="0.0798%" height="15" fill="rgb(253,165,31)" fg:x="1246" fg:w="1"/><text x="99.6913%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5211%" y="645" width="0.0798%" height="15" fill="rgb(234,138,20)" fg:x="1247" fg:w="1"/><text x="99.7711%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5211%" y="629" width="0.0798%" height="15" fill="rgb(218,191,29)" fg:x="1247" fg:w="1"/><text x="99.7711%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5211%" y="613" width="0.0798%" height="15" fill="rgb(221,157,19)" fg:x="1247" fg:w="1"/><text x="99.7711%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.5211%" y="597" width="0.0798%" height="15" fill="rgb(237,26,42)" fg:x="1247" fg:w="1"/><text x="99.7711%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="99.5211%" y="661" width="0.1596%" height="15" fill="rgb(220,163,24)" fg:x="1247" fg:w="2"/><text x="99.7711%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.6010%" y="645" width="0.0798%" height="15" fill="rgb(242,115,20)" fg:x="1248" fg:w="1"/><text x="99.8510%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6010%" y="629" width="0.0798%" height="15" fill="rgb(210,206,9)" fg:x="1248" fg:w="1"/><text x="99.8510%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.6010%" y="613" width="0.0798%" height="15" fill="rgb(208,71,17)" fg:x="1248" fg:w="1"/><text x="99.8510%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6010%" y="597" width="0.0798%" height="15" fill="rgb(233,7,5)" fg:x="1248" fg:w="1"/><text x="99.8510%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.6010%" y="581" width="0.0798%" height="15" fill="rgb(207,92,33)" fg:x="1248" fg:w="1"/><text x="99.8510%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6010%" y="565" width="0.0798%" height="15" fill="rgb(218,87,9)" fg:x="1248" fg:w="1"/><text x="99.8510%" y="575.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="99.6808%" y="661" width="0.1596%" height="15" fill="rgb(219,47,37)" fg:x="1249" fg:w="2"/><text x="99.9308%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="99.6808%" y="645" width="0.1596%" height="15" fill="rgb(221,152,34)" fg:x="1249" fg:w="2"/><text x="99.9308%" y="655.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (184 samples, 14.68%)</title><rect x="85.2354%" y="741" width="14.6848%" height="15" fill="rgb(235,176,21)" fg:x="1068" fg:w="184"/><text x="85.4854%" y="751.50">engine::session::Sessi..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (184 samples, 14.68%)</title><rect x="85.2354%" y="725" width="14.6848%" height="15" fill="rgb(232,212,21)" fg:x="1068" fg:w="184"/><text x="85.4854%" y="735.50">engine::session::Sessi..</text></g><g><title>kernel::model::EntityPtrResolver::world (6 samples, 0.48%)</title><rect x="99.4413%" y="709" width="0.4789%" height="15" fill="rgb(245,82,39)" fg:x="1246" fg:w="6"/><text x="99.6913%" y="719.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.48%)</title><rect x="99.4413%" y="693" width="0.4789%" height="15" fill="rgb(241,52,51)" fg:x="1246" fg:w="6"/><text x="99.6913%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="99.5211%" y="677" width="0.3990%" height="15" fill="rgb(219,91,24)" fg:x="1247" fg:w="5"/><text x="99.7711%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="99.8404%" y="661" width="0.0798%" height="15" fill="rgb(241,142,12)" fg:x="1251" fg:w="1"/><text x="100.0904%" y="671.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.8404%" y="645" width="0.0798%" height="15" fill="rgb(230,27,9)" fg:x="1251" fg:w="1"/><text x="100.0904%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8404%" y="629" width="0.0798%" height="15" fill="rgb(249,181,32)" fg:x="1251" fg:w="1"/><text x="100.0904%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8404%" y="613" width="0.0798%" height="15" fill="rgb(230,107,3)" fg:x="1251" fg:w="1"/><text x="100.0904%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.8404%" y="597" width="0.0798%" height="15" fill="rgb(246,204,14)" fg:x="1251" fg:w="1"/><text x="100.0904%" y="607.50"></text></g><g><title>all (1,253 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(213,192,47)" fg:x="0" fg:w="1253"/><text x="0.2500%" y="1103.50"></text></g><g><title>simple-9b79c65b (1,253 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(240,44,36)" fg:x="0" fg:w="1253"/><text x="0.2500%" y="1087.50">simple-9b79c65b</text></g><g><title>_start (1,253 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(244,209,38)" fg:x="0" fg:w="1253"/><text x="0.2500%" y="1071.50">_start</text></g><g><title>__libc_start_main (1,253 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(219,34,37)" fg:x="0" fg:w="1253"/><text x="0.2500%" y="1055.50">__libc_start_main</text></g><g><title>main (1,253 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(210,28,6)" fg:x="0" fg:w="1253"/><text x="0.2500%" y="1039.50">main</text></g><g><title>std::rt::lang_start_internal (1,253 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(244,110,52)" fg:x="0" fg:w="1253"/><text x="0.2500%" y="1023.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,253 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(254,124,47)" fg:x="0" fg:w="1253"/><text x="0.2500%" y="1007.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,253 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(254,110,13)" fg:x="0" fg:w="1253"/><text x="0.2500%" y="991.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,253 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(252,57,21)" fg:x="0" fg:w="1253"/><text x="0.2500%" y="975.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,253 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(242,60,45)" fg:x="0" fg:w="1253"/><text x="0.2500%" y="959.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,253 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(234,49,30)" fg:x="0" fg:w="1253"/><text x="0.2500%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,253 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(218,98,6)" fg:x="0" fg:w="1253"/><text x="0.2500%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,253 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(220,174,29)" fg:x="0" fg:w="1253"/><text x="0.2500%" y="911.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,253 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(236,163,23)" fg:x="0" fg:w="1253"/><text x="0.2500%" y="895.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,253 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(242,114,45)" fg:x="0" fg:w="1253"/><text x="0.2500%" y="879.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,253 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(232,10,53)" fg:x="0" fg:w="1253"/><text x="0.2500%" y="863.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,253 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(245,108,29)" fg:x="0" fg:w="1253"/><text x="0.2500%" y="847.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,253 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(240,89,53)" fg:x="0" fg:w="1253"/><text x="0.2500%" y="831.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,253 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(226,60,45)" fg:x="0" fg:w="1253"/><text x="0.2500%" y="815.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (317 samples, 25.30%)</title><rect x="74.7007%" y="789" width="25.2993%" height="15" fill="rgb(230,41,44)" fg:x="936" fg:w="317"/><text x="74.9507%" y="799.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as ..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (317 samples, 25.30%)</title><rect x="74.7007%" y="773" width="25.2993%" height="15" fill="rgb(230,26,20)" fg:x="936" fg:w="317"/><text x="74.9507%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (317 samples, 25.30%)</title><rect x="74.7007%" y="757" width="25.2993%" height="15" fill="rgb(237,170,32)" fg:x="936" fg:w="317"/><text x="74.9507%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="99.9202%" y="741" width="0.0798%" height="15" fill="rgb(212,35,42)" fg:x="1252" fg:w="1"/><text x="100.1702%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="99.9202%" y="725" width="0.0798%" height="15" fill="rgb(227,31,34)" fg:x="1252" fg:w="1"/><text x="100.1702%" y="735.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="99.9202%" y="709" width="0.0798%" height="15" fill="rgb(216,19,18)" fg:x="1252" fg:w="1"/><text x="100.1702%" y="719.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="99.9202%" y="693" width="0.0798%" height="15" fill="rgb(211,133,42)" fg:x="1252" fg:w="1"/><text x="100.1702%" y="703.50"></text></g></svg></svg>