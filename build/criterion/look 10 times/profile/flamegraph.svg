<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="934" onload="init(evt)" viewBox="0 0 1200 934" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="934" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="917.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="917.00"> </text><svg id="frames" x="10" width="1180" total_samples="1250"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0000%" y="485" width="0.0800%" height="15" fill="rgb(213,98,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (3 samples, 0.24%)</title><rect x="0.0000%" y="517" width="0.2400%" height="15" fill="rgb(250,136,47)" fg:x="0" fg:w="3"/><text x="0.2500%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="0.0000%" y="501" width="0.2400%" height="15" fill="rgb(251,124,27)" fg:x="0" fg:w="3"/><text x="0.2500%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (2 samples, 0.16%)</title><rect x="0.0800%" y="485" width="0.1600%" height="15" fill="rgb(229,180,14)" fg:x="1" fg:w="2"/><text x="0.3300%" y="495.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.0800%" y="469" width="0.1600%" height="15" fill="rgb(245,216,25)" fg:x="1" fg:w="2"/><text x="0.3300%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.0800%" y="453" width="0.1600%" height="15" fill="rgb(251,43,5)" fg:x="1" fg:w="2"/><text x="0.3300%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.1600%" y="437" width="0.0800%" height="15" fill="rgb(250,128,24)" fg:x="2" fg:w="1"/><text x="0.4100%" y="447.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.0000%" y="533" width="0.3200%" height="15" fill="rgb(217,117,27)" fg:x="0" fg:w="4"/><text x="0.2500%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::perform::StandardPerformer&gt;&gt; (1 samples, 0.08%)</title><rect x="0.2400%" y="517" width="0.0800%" height="15" fill="rgb(245,147,4)" fg:x="3" fg:w="1"/><text x="0.4900%" y="527.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="0.3200%" y="469" width="0.0800%" height="15" fill="rgb(242,201,35)" fg:x="4" fg:w="1"/><text x="0.5700%" y="479.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="0.4000%" y="469" width="0.0800%" height="15" fill="rgb(218,181,1)" fg:x="5" fg:w="1"/><text x="0.6500%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="0.4000%" y="453" width="0.0800%" height="15" fill="rgb(222,6,29)" fg:x="5" fg:w="1"/><text x="0.6500%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="0.4000%" y="437" width="0.0800%" height="15" fill="rgb(208,186,3)" fg:x="5" fg:w="1"/><text x="0.6500%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4800%" y="357" width="0.0800%" height="15" fill="rgb(216,36,26)" fg:x="6" fg:w="1"/><text x="0.7300%" y="367.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (3 samples, 0.24%)</title><rect x="0.4800%" y="453" width="0.2400%" height="15" fill="rgb(248,201,23)" fg:x="6" fg:w="3"/><text x="0.7300%" y="463.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (3 samples, 0.24%)</title><rect x="0.4800%" y="437" width="0.2400%" height="15" fill="rgb(251,170,31)" fg:x="6" fg:w="3"/><text x="0.7300%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="0.4800%" y="421" width="0.2400%" height="15" fill="rgb(207,110,25)" fg:x="6" fg:w="3"/><text x="0.7300%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="0.4800%" y="405" width="0.2400%" height="15" fill="rgb(250,54,15)" fg:x="6" fg:w="3"/><text x="0.7300%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="0.4800%" y="389" width="0.2400%" height="15" fill="rgb(227,68,33)" fg:x="6" fg:w="3"/><text x="0.7300%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="0.4800%" y="373" width="0.2400%" height="15" fill="rgb(238,34,41)" fg:x="6" fg:w="3"/><text x="0.7300%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="0.5600%" y="357" width="0.1600%" height="15" fill="rgb(220,11,15)" fg:x="7" fg:w="2"/><text x="0.8100%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="0.5600%" y="341" width="0.1600%" height="15" fill="rgb(246,111,35)" fg:x="7" fg:w="2"/><text x="0.8100%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="0.5600%" y="325" width="0.1600%" height="15" fill="rgb(209,88,53)" fg:x="7" fg:w="2"/><text x="0.8100%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="0.5600%" y="309" width="0.1600%" height="15" fill="rgb(231,185,47)" fg:x="7" fg:w="2"/><text x="0.8100%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.6400%" y="293" width="0.0800%" height="15" fill="rgb(233,154,1)" fg:x="8" fg:w="1"/><text x="0.8900%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.6400%" y="277" width="0.0800%" height="15" fill="rgb(225,15,46)" fg:x="8" fg:w="1"/><text x="0.8900%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="0.6400%" y="261" width="0.0800%" height="15" fill="rgb(211,135,41)" fg:x="8" fg:w="1"/><text x="0.8900%" y="271.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="0.6400%" y="245" width="0.0800%" height="15" fill="rgb(208,54,0)" fg:x="8" fg:w="1"/><text x="0.8900%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="0.7200%" y="405" width="0.0800%" height="15" fill="rgb(244,136,14)" fg:x="9" fg:w="1"/><text x="0.9700%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="0.8000%" y="373" width="0.0800%" height="15" fill="rgb(241,56,14)" fg:x="10" fg:w="1"/><text x="1.0500%" y="383.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="0.8000%" y="357" width="0.0800%" height="15" fill="rgb(205,80,24)" fg:x="10" fg:w="1"/><text x="1.0500%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="0.8800%" y="373" width="0.0800%" height="15" fill="rgb(220,57,4)" fg:x="11" fg:w="1"/><text x="1.1300%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (11 samples, 0.88%)</title><rect x="0.3200%" y="501" width="0.8800%" height="15" fill="rgb(226,193,50)" fg:x="4" fg:w="11"/><text x="0.5700%" y="511.50"></text></g><g><title>engine::internal::Entities::prepare_entity (11 samples, 0.88%)</title><rect x="0.3200%" y="485" width="0.8800%" height="15" fill="rgb(231,168,22)" fg:x="4" fg:w="11"/><text x="0.5700%" y="495.50"></text></g><g><title>kernel::model::deserialize_entity (9 samples, 0.72%)</title><rect x="0.4800%" y="469" width="0.7200%" height="15" fill="rgb(254,215,14)" fg:x="6" fg:w="9"/><text x="0.7300%" y="479.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.48%)</title><rect x="0.7200%" y="453" width="0.4800%" height="15" fill="rgb(211,115,16)" fg:x="9" fg:w="6"/><text x="0.9700%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (6 samples, 0.48%)</title><rect x="0.7200%" y="437" width="0.4800%" height="15" fill="rgb(236,210,16)" fg:x="9" fg:w="6"/><text x="0.9700%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="0.7200%" y="421" width="0.4800%" height="15" fill="rgb(221,94,12)" fg:x="9" fg:w="6"/><text x="0.9700%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (5 samples, 0.40%)</title><rect x="0.8000%" y="405" width="0.4000%" height="15" fill="rgb(235,218,49)" fg:x="10" fg:w="5"/><text x="1.0500%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="0.8000%" y="389" width="0.4000%" height="15" fill="rgb(217,114,14)" fg:x="10" fg:w="5"/><text x="1.0500%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="0.9600%" y="373" width="0.2400%" height="15" fill="rgb(216,145,22)" fg:x="12" fg:w="3"/><text x="1.2100%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="0.9600%" y="357" width="0.2400%" height="15" fill="rgb(217,112,39)" fg:x="12" fg:w="3"/><text x="1.2100%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="1.0400%" y="341" width="0.1600%" height="15" fill="rgb(225,85,32)" fg:x="13" fg:w="2"/><text x="1.2900%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="1.0400%" y="325" width="0.1600%" height="15" fill="rgb(245,209,47)" fg:x="13" fg:w="2"/><text x="1.2900%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="1.1200%" y="309" width="0.0800%" height="15" fill="rgb(218,220,15)" fg:x="14" fg:w="1"/><text x="1.3700%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="1.1200%" y="293" width="0.0800%" height="15" fill="rgb(222,202,31)" fg:x="14" fg:w="1"/><text x="1.3700%" y="303.50"></text></g><g><title>dlerror (2 samples, 0.16%)</title><rect x="1.2800%" y="437" width="0.1600%" height="15" fill="rgb(243,203,4)" fg:x="16" fg:w="2"/><text x="1.5300%" y="447.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="1.3600%" y="421" width="0.0800%" height="15" fill="rgb(237,92,17)" fg:x="17" fg:w="1"/><text x="1.6100%" y="431.50"></text></g><g><title>_dl_find_dso_for_object (1 samples, 0.08%)</title><rect x="1.6800%" y="357" width="0.0800%" height="15" fill="rgb(231,119,7)" fg:x="21" fg:w="1"/><text x="1.9300%" y="367.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (19 samples, 1.52%)</title><rect x="0.3200%" y="533" width="1.5200%" height="15" fill="rgb(237,82,41)" fg:x="4" fg:w="19"/><text x="0.5700%" y="543.50"></text></g><g><title>engine::session::Session::new (19 samples, 1.52%)</title><rect x="0.3200%" y="517" width="1.5200%" height="15" fill="rgb(226,81,48)" fg:x="4" fg:w="19"/><text x="0.5700%" y="527.50"></text></g><g><title>engine::session::Session::initialize (8 samples, 0.64%)</title><rect x="1.2000%" y="501" width="0.6400%" height="15" fill="rgb(234,70,51)" fg:x="15" fg:w="8"/><text x="1.4500%" y="511.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (8 samples, 0.64%)</title><rect x="1.2000%" y="485" width="0.6400%" height="15" fill="rgb(251,86,4)" fg:x="15" fg:w="8"/><text x="1.4500%" y="495.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (8 samples, 0.64%)</title><rect x="1.2000%" y="469" width="0.6400%" height="15" fill="rgb(244,144,28)" fg:x="15" fg:w="8"/><text x="1.4500%" y="479.50"></text></g><g><title>libloading::os::unix::Library::open (8 samples, 0.64%)</title><rect x="1.2000%" y="453" width="0.6400%" height="15" fill="rgb(232,161,39)" fg:x="15" fg:w="8"/><text x="1.4500%" y="463.50"></text></g><g><title>dlopen (5 samples, 0.40%)</title><rect x="1.4400%" y="437" width="0.4000%" height="15" fill="rgb(247,34,51)" fg:x="18" fg:w="5"/><text x="1.6900%" y="447.50"></text></g><g><title>_dl_catch_error (5 samples, 0.40%)</title><rect x="1.4400%" y="421" width="0.4000%" height="15" fill="rgb(225,132,2)" fg:x="18" fg:w="5"/><text x="1.6900%" y="431.50"></text></g><g><title>_dl_catch_exception (5 samples, 0.40%)</title><rect x="1.4400%" y="405" width="0.4000%" height="15" fill="rgb(209,159,44)" fg:x="18" fg:w="5"/><text x="1.6900%" y="415.50"></text></g><g><title>_dl_catch_exception (5 samples, 0.40%)</title><rect x="1.4400%" y="389" width="0.4000%" height="15" fill="rgb(251,214,1)" fg:x="18" fg:w="5"/><text x="1.6900%" y="399.50"></text></g><g><title>_dl_catch_exception (5 samples, 0.40%)</title><rect x="1.4400%" y="373" width="0.4000%" height="15" fill="rgb(247,84,47)" fg:x="18" fg:w="5"/><text x="1.6900%" y="383.50"></text></g><g><title>_dl_signal_error (1 samples, 0.08%)</title><rect x="1.7600%" y="357" width="0.0800%" height="15" fill="rgb(240,111,43)" fg:x="22" fg:w="1"/><text x="2.0100%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::surround::Surroundings&gt; (1 samples, 0.08%)</title><rect x="1.8400%" y="517" width="0.0800%" height="15" fill="rgb(215,214,35)" fg:x="23" fg:w="1"/><text x="2.0900%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.8400%" y="501" width="0.0800%" height="15" fill="rgb(248,207,23)" fg:x="23" fg:w="1"/><text x="2.0900%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.9200%" y="501" width="0.0800%" height="15" fill="rgb(214,186,4)" fg:x="24" fg:w="1"/><text x="2.1700%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::build::BuildSurroundings&gt; (2 samples, 0.16%)</title><rect x="1.9200%" y="517" width="0.1600%" height="15" fill="rgb(220,133,22)" fg:x="24" fg:w="2"/><text x="2.1700%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::build::QuickThing&gt; (1 samples, 0.08%)</title><rect x="2.0000%" y="501" width="0.0800%" height="15" fill="rgb(239,134,19)" fg:x="25" fg:w="1"/><text x="2.2500%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="2.0000%" y="485" width="0.0800%" height="15" fill="rgb(250,140,9)" fg:x="25" fg:w="1"/><text x="2.2500%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="2.0000%" y="469" width="0.0800%" height="15" fill="rgb(225,59,14)" fg:x="25" fg:w="1"/><text x="2.2500%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.0000%" y="453" width="0.0800%" height="15" fill="rgb(214,152,51)" fg:x="25" fg:w="1"/><text x="2.2500%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="2.0800%" y="485" width="0.0800%" height="15" fill="rgb(251,227,43)" fg:x="26" fg:w="1"/><text x="2.3300%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.0800%" y="469" width="0.0800%" height="15" fill="rgb(241,96,17)" fg:x="26" fg:w="1"/><text x="2.3300%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.0800%" y="453" width="0.0800%" height="15" fill="rgb(234,198,43)" fg:x="26" fg:w="1"/><text x="2.3300%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.0800%" y="437" width="0.0800%" height="15" fill="rgb(220,108,29)" fg:x="26" fg:w="1"/><text x="2.3300%" y="447.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="2.1600%" y="485" width="0.0800%" height="15" fill="rgb(226,163,33)" fg:x="27" fg:w="1"/><text x="2.4100%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.2400%" y="405" width="0.0800%" height="15" fill="rgb(205,194,45)" fg:x="28" fg:w="1"/><text x="2.4900%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.2400%" y="389" width="0.0800%" height="15" fill="rgb(206,143,44)" fg:x="28" fg:w="1"/><text x="2.4900%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="2.2400%" y="373" width="0.0800%" height="15" fill="rgb(236,136,36)" fg:x="28" fg:w="1"/><text x="2.4900%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="2.2400%" y="357" width="0.0800%" height="15" fill="rgb(249,172,42)" fg:x="28" fg:w="1"/><text x="2.4900%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="2.2400%" y="341" width="0.0800%" height="15" fill="rgb(216,139,23)" fg:x="28" fg:w="1"/><text x="2.4900%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="2.2400%" y="325" width="0.0800%" height="15" fill="rgb(207,166,20)" fg:x="28" fg:w="1"/><text x="2.4900%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="2.2400%" y="309" width="0.0800%" height="15" fill="rgb(210,209,22)" fg:x="28" fg:w="1"/><text x="2.4900%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="2.2400%" y="293" width="0.0800%" height="15" fill="rgb(232,118,20)" fg:x="28" fg:w="1"/><text x="2.4900%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="2.2400%" y="277" width="0.0800%" height="15" fill="rgb(238,113,42)" fg:x="28" fg:w="1"/><text x="2.4900%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="2.2400%" y="261" width="0.0800%" height="15" fill="rgb(231,42,5)" fg:x="28" fg:w="1"/><text x="2.4900%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="2.2400%" y="245" width="0.0800%" height="15" fill="rgb(243,166,24)" fg:x="28" fg:w="1"/><text x="2.4900%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.2400%" y="229" width="0.0800%" height="15" fill="rgb(237,226,12)" fg:x="28" fg:w="1"/><text x="2.4900%" y="239.50"></text></g><g><title>engine::identifiers::model::get_gid (2 samples, 0.16%)</title><rect x="2.2400%" y="485" width="0.1600%" height="15" fill="rgb(229,133,24)" fg:x="28" fg:w="2"/><text x="2.4900%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="2.2400%" y="469" width="0.1600%" height="15" fill="rgb(238,33,43)" fg:x="28" fg:w="2"/><text x="2.4900%" y="479.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="2.2400%" y="453" width="0.1600%" height="15" fill="rgb(227,59,38)" fg:x="28" fg:w="2"/><text x="2.4900%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="2.2400%" y="437" width="0.1600%" height="15" fill="rgb(230,97,0)" fg:x="28" fg:w="2"/><text x="2.4900%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="2.2400%" y="421" width="0.1600%" height="15" fill="rgb(250,173,50)" fg:x="28" fg:w="2"/><text x="2.4900%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.3200%" y="405" width="0.0800%" height="15" fill="rgb(240,15,50)" fg:x="29" fg:w="1"/><text x="2.5700%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="2.4000%" y="421" width="0.2400%" height="15" fill="rgb(221,93,22)" fg:x="30" fg:w="3"/><text x="2.6500%" y="431.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="2.4000%" y="405" width="0.2400%" height="15" fill="rgb(245,180,53)" fg:x="30" fg:w="3"/><text x="2.6500%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.5600%" y="389" width="0.0800%" height="15" fill="rgb(231,88,51)" fg:x="32" fg:w="1"/><text x="2.8100%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="2.5600%" y="373" width="0.0800%" height="15" fill="rgb(240,58,21)" fg:x="32" fg:w="1"/><text x="2.8100%" y="383.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.32%)</title><rect x="2.4000%" y="437" width="0.3200%" height="15" fill="rgb(237,21,10)" fg:x="30" fg:w="4"/><text x="2.6500%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.6400%" y="421" width="0.0800%" height="15" fill="rgb(218,43,11)" fg:x="33" fg:w="1"/><text x="2.8900%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.6400%" y="405" width="0.0800%" height="15" fill="rgb(218,221,29)" fg:x="33" fg:w="1"/><text x="2.8900%" y="415.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="2.6400%" y="389" width="0.0800%" height="15" fill="rgb(214,118,42)" fg:x="33" fg:w="1"/><text x="2.8900%" y="399.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="2.7200%" y="421" width="0.2400%" height="15" fill="rgb(251,200,26)" fg:x="34" fg:w="3"/><text x="2.9700%" y="431.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="2.8000%" y="405" width="0.1600%" height="15" fill="rgb(237,101,39)" fg:x="35" fg:w="2"/><text x="3.0500%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.8800%" y="389" width="0.0800%" height="15" fill="rgb(251,117,11)" fg:x="36" fg:w="1"/><text x="3.1300%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.8800%" y="373" width="0.0800%" height="15" fill="rgb(216,223,23)" fg:x="36" fg:w="1"/><text x="3.1300%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.8800%" y="357" width="0.0800%" height="15" fill="rgb(251,54,12)" fg:x="36" fg:w="1"/><text x="3.1300%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.8800%" y="341" width="0.0800%" height="15" fill="rgb(254,176,54)" fg:x="36" fg:w="1"/><text x="3.1300%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.8800%" y="325" width="0.0800%" height="15" fill="rgb(210,32,8)" fg:x="36" fg:w="1"/><text x="3.1300%" y="335.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.9600%" y="373" width="0.0800%" height="15" fill="rgb(235,52,38)" fg:x="37" fg:w="1"/><text x="3.2100%" y="383.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="2.9600%" y="421" width="0.1600%" height="15" fill="rgb(231,4,44)" fg:x="37" fg:w="2"/><text x="3.2100%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="2.9600%" y="405" width="0.1600%" height="15" fill="rgb(249,2,32)" fg:x="37" fg:w="2"/><text x="3.2100%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="2.9600%" y="389" width="0.1600%" height="15" fill="rgb(224,65,26)" fg:x="37" fg:w="2"/><text x="3.2100%" y="399.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.0400%" y="373" width="0.0800%" height="15" fill="rgb(250,73,40)" fg:x="38" fg:w="1"/><text x="3.2900%" y="383.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.0400%" y="357" width="0.0800%" height="15" fill="rgb(253,177,16)" fg:x="38" fg:w="1"/><text x="3.2900%" y="367.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (11 samples, 0.88%)</title><rect x="2.4000%" y="453" width="0.8800%" height="15" fill="rgb(217,32,34)" fg:x="30" fg:w="11"/><text x="2.6500%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="2.7200%" y="437" width="0.5600%" height="15" fill="rgb(212,7,10)" fg:x="34" fg:w="7"/><text x="2.9700%" y="447.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="3.1200%" y="421" width="0.1600%" height="15" fill="rgb(245,89,8)" fg:x="39" fg:w="2"/><text x="3.3700%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="3.1200%" y="405" width="0.1600%" height="15" fill="rgb(237,16,53)" fg:x="39" fg:w="2"/><text x="3.3700%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="3.1200%" y="389" width="0.1600%" height="15" fill="rgb(250,204,30)" fg:x="39" fg:w="2"/><text x="3.3700%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="3.1200%" y="373" width="0.1600%" height="15" fill="rgb(208,77,27)" fg:x="39" fg:w="2"/><text x="3.3700%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="3.1200%" y="357" width="0.1600%" height="15" fill="rgb(250,204,28)" fg:x="39" fg:w="2"/><text x="3.3700%" y="367.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="3.1200%" y="341" width="0.1600%" height="15" fill="rgb(244,63,21)" fg:x="39" fg:w="2"/><text x="3.3700%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="3.2800%" y="405" width="0.0800%" height="15" fill="rgb(236,85,44)" fg:x="41" fg:w="1"/><text x="3.5300%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="3.2800%" y="453" width="0.2400%" height="15" fill="rgb(215,98,4)" fg:x="41" fg:w="3"/><text x="3.5300%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="3.2800%" y="437" width="0.2400%" height="15" fill="rgb(235,38,11)" fg:x="41" fg:w="3"/><text x="3.5300%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="3.2800%" y="421" width="0.2400%" height="15" fill="rgb(254,186,25)" fg:x="41" fg:w="3"/><text x="3.5300%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="3.3600%" y="405" width="0.1600%" height="15" fill="rgb(225,55,31)" fg:x="42" fg:w="2"/><text x="3.6100%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.4400%" y="389" width="0.0800%" height="15" fill="rgb(211,15,21)" fg:x="43" fg:w="1"/><text x="3.6900%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.4400%" y="373" width="0.0800%" height="15" fill="rgb(215,187,41)" fg:x="43" fg:w="1"/><text x="3.6900%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="3.4400%" y="357" width="0.0800%" height="15" fill="rgb(248,69,32)" fg:x="43" fg:w="1"/><text x="3.6900%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="3.6000%" y="405" width="0.2400%" height="15" fill="rgb(252,102,52)" fg:x="45" fg:w="3"/><text x="3.8500%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="3.6800%" y="389" width="0.1600%" height="15" fill="rgb(253,140,32)" fg:x="46" fg:w="2"/><text x="3.9300%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.7600%" y="373" width="0.0800%" height="15" fill="rgb(216,56,42)" fg:x="47" fg:w="1"/><text x="4.0100%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.8400%" y="357" width="0.0800%" height="15" fill="rgb(216,184,14)" fg:x="48" fg:w="1"/><text x="4.0900%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.8400%" y="341" width="0.0800%" height="15" fill="rgb(237,187,27)" fg:x="48" fg:w="1"/><text x="4.0900%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.8400%" y="325" width="0.0800%" height="15" fill="rgb(219,65,3)" fg:x="48" fg:w="1"/><text x="4.0900%" y="335.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (2 samples, 0.16%)</title><rect x="3.8400%" y="405" width="0.1600%" height="15" fill="rgb(245,83,25)" fg:x="48" fg:w="2"/><text x="4.0900%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="3.8400%" y="389" width="0.1600%" height="15" fill="rgb(214,205,45)" fg:x="48" fg:w="2"/><text x="4.0900%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="3.8400%" y="373" width="0.1600%" height="15" fill="rgb(241,20,18)" fg:x="48" fg:w="2"/><text x="4.0900%" y="383.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="3.9200%" y="357" width="0.0800%" height="15" fill="rgb(232,163,23)" fg:x="49" fg:w="1"/><text x="4.1700%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.9200%" y="341" width="0.0800%" height="15" fill="rgb(214,5,46)" fg:x="49" fg:w="1"/><text x="4.1700%" y="351.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="3.9200%" y="325" width="0.0800%" height="15" fill="rgb(229,78,17)" fg:x="49" fg:w="1"/><text x="4.1700%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.9200%" y="309" width="0.0800%" height="15" fill="rgb(248,89,10)" fg:x="49" fg:w="1"/><text x="4.1700%" y="319.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="4.0000%" y="357" width="0.0800%" height="15" fill="rgb(248,54,15)" fg:x="50" fg:w="1"/><text x="4.2500%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="4.0000%" y="341" width="0.0800%" height="15" fill="rgb(223,116,6)" fg:x="50" fg:w="1"/><text x="4.2500%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="4.0000%" y="325" width="0.0800%" height="15" fill="rgb(205,125,38)" fg:x="50" fg:w="1"/><text x="4.2500%" y="335.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="4.0000%" y="309" width="0.0800%" height="15" fill="rgb(251,78,38)" fg:x="50" fg:w="1"/><text x="4.2500%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.0000%" y="293" width="0.0800%" height="15" fill="rgb(253,78,28)" fg:x="50" fg:w="1"/><text x="4.2500%" y="303.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (23 samples, 1.84%)</title><rect x="2.4000%" y="485" width="1.8400%" height="15" fill="rgb(209,120,3)" fg:x="30" fg:w="23"/><text x="2.6500%" y="495.50">e..</text></g><g><title>engine::session::Session::check_for_changes (23 samples, 1.84%)</title><rect x="2.4000%" y="469" width="1.8400%" height="15" fill="rgb(238,229,9)" fg:x="30" fg:w="23"/><text x="2.6500%" y="479.50">e..</text></g><g><title>kernel::compare::any_entity_changes (9 samples, 0.72%)</title><rect x="3.5200%" y="453" width="0.7200%" height="15" fill="rgb(253,159,18)" fg:x="44" fg:w="9"/><text x="3.7700%" y="463.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (9 samples, 0.72%)</title><rect x="3.5200%" y="437" width="0.7200%" height="15" fill="rgb(244,42,34)" fg:x="44" fg:w="9"/><text x="3.7700%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.72%)</title><rect x="3.5200%" y="421" width="0.7200%" height="15" fill="rgb(224,8,7)" fg:x="44" fg:w="9"/><text x="3.7700%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="4.0000%" y="405" width="0.2400%" height="15" fill="rgb(210,201,45)" fg:x="50" fg:w="3"/><text x="4.2500%" y="415.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (3 samples, 0.24%)</title><rect x="4.0000%" y="389" width="0.2400%" height="15" fill="rgb(252,185,21)" fg:x="50" fg:w="3"/><text x="4.2500%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="4.0000%" y="373" width="0.2400%" height="15" fill="rgb(223,131,1)" fg:x="50" fg:w="3"/><text x="4.2500%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="4.0800%" y="357" width="0.1600%" height="15" fill="rgb(245,141,16)" fg:x="51" fg:w="2"/><text x="4.3300%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="4.0800%" y="341" width="0.1600%" height="15" fill="rgb(229,55,45)" fg:x="51" fg:w="2"/><text x="4.3300%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="4.0800%" y="325" width="0.1600%" height="15" fill="rgb(208,92,15)" fg:x="51" fg:w="2"/><text x="4.3300%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.1600%" y="309" width="0.0800%" height="15" fill="rgb(234,185,47)" fg:x="52" fg:w="1"/><text x="4.4100%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.1600%" y="293" width="0.0800%" height="15" fill="rgb(253,104,50)" fg:x="52" fg:w="1"/><text x="4.4100%" y="303.50"></text></g><g><title>engine::session::Session::flush (28 samples, 2.24%)</title><rect x="2.0800%" y="517" width="2.2400%" height="15" fill="rgb(205,70,7)" fg:x="26" fg:w="28"/><text x="2.3300%" y="527.50">e..</text></g><g><title>engine::session::Session::save_entity_changes (28 samples, 2.24%)</title><rect x="2.0800%" y="501" width="2.2400%" height="15" fill="rgb(240,178,43)" fg:x="26" fg:w="28"/><text x="2.3300%" y="511.50">e..</text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="4.2400%" y="485" width="0.0800%" height="15" fill="rgb(214,112,2)" fg:x="53" fg:w="1"/><text x="4.4900%" y="495.50"></text></g><g><title>plugins_core::build::Build::holding (1 samples, 0.08%)</title><rect x="4.3200%" y="517" width="0.0800%" height="15" fill="rgb(206,46,17)" fg:x="54" fg:w="1"/><text x="4.5700%" y="527.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="4.3200%" y="501" width="0.0800%" height="15" fill="rgb(225,220,16)" fg:x="54" fg:w="1"/><text x="4.5700%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="4.3200%" y="485" width="0.0800%" height="15" fill="rgb(238,65,40)" fg:x="54" fg:w="1"/><text x="4.5700%" y="495.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.3200%" y="469" width="0.0800%" height="15" fill="rgb(230,151,21)" fg:x="54" fg:w="1"/><text x="4.5700%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.3200%" y="453" width="0.0800%" height="15" fill="rgb(218,58,49)" fg:x="54" fg:w="1"/><text x="4.5700%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.3200%" y="437" width="0.0800%" height="15" fill="rgb(219,179,14)" fg:x="54" fg:w="1"/><text x="4.5700%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.3200%" y="421" width="0.0800%" height="15" fill="rgb(223,72,1)" fg:x="54" fg:w="1"/><text x="4.5700%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.3200%" y="405" width="0.0800%" height="15" fill="rgb(238,126,10)" fg:x="54" fg:w="1"/><text x="4.5700%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.3200%" y="389" width="0.0800%" height="15" fill="rgb(224,206,38)" fg:x="54" fg:w="1"/><text x="4.5700%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.3200%" y="373" width="0.0800%" height="15" fill="rgb(212,201,54)" fg:x="54" fg:w="1"/><text x="4.5700%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.3200%" y="357" width="0.0800%" height="15" fill="rgb(218,154,48)" fg:x="54" fg:w="1"/><text x="4.5700%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="4.3200%" y="341" width="0.0800%" height="15" fill="rgb(232,93,24)" fg:x="54" fg:w="1"/><text x="4.5700%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="4.3200%" y="325" width="0.0800%" height="15" fill="rgb(245,30,21)" fg:x="54" fg:w="1"/><text x="4.5700%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="4.3200%" y="309" width="0.0800%" height="15" fill="rgb(242,148,29)" fg:x="54" fg:w="1"/><text x="4.5700%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="4.3200%" y="293" width="0.0800%" height="15" fill="rgb(244,153,54)" fg:x="54" fg:w="1"/><text x="4.5700%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.3200%" y="277" width="0.0800%" height="15" fill="rgb(252,87,22)" fg:x="54" fg:w="1"/><text x="4.5700%" y="287.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="4.4000%" y="517" width="0.0800%" height="15" fill="rgb(210,51,29)" fg:x="55" fg:w="1"/><text x="4.6500%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="4.4000%" y="501" width="0.0800%" height="15" fill="rgb(242,136,47)" fg:x="55" fg:w="1"/><text x="4.6500%" y="511.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="4.4000%" y="485" width="0.0800%" height="15" fill="rgb(238,68,4)" fg:x="55" fg:w="1"/><text x="4.6500%" y="495.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.4000%" y="469" width="0.0800%" height="15" fill="rgb(242,161,30)" fg:x="55" fg:w="1"/><text x="4.6500%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.4000%" y="453" width="0.0800%" height="15" fill="rgb(218,58,44)" fg:x="55" fg:w="1"/><text x="4.6500%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.4000%" y="437" width="0.0800%" height="15" fill="rgb(252,125,32)" fg:x="55" fg:w="1"/><text x="4.6500%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.4000%" y="421" width="0.0800%" height="15" fill="rgb(219,178,0)" fg:x="55" fg:w="1"/><text x="4.6500%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.4000%" y="405" width="0.0800%" height="15" fill="rgb(213,152,7)" fg:x="55" fg:w="1"/><text x="4.6500%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.4000%" y="389" width="0.0800%" height="15" fill="rgb(249,109,34)" fg:x="55" fg:w="1"/><text x="4.6500%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.4000%" y="373" width="0.0800%" height="15" fill="rgb(232,96,21)" fg:x="55" fg:w="1"/><text x="4.6500%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.4000%" y="357" width="0.0800%" height="15" fill="rgb(228,27,39)" fg:x="55" fg:w="1"/><text x="4.6500%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="4.4000%" y="341" width="0.0800%" height="15" fill="rgb(211,182,52)" fg:x="55" fg:w="1"/><text x="4.6500%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="4.4000%" y="325" width="0.0800%" height="15" fill="rgb(234,178,38)" fg:x="55" fg:w="1"/><text x="4.6500%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="4.4000%" y="309" width="0.0800%" height="15" fill="rgb(221,111,3)" fg:x="55" fg:w="1"/><text x="4.6500%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="4.4000%" y="293" width="0.0800%" height="15" fill="rgb(228,175,21)" fg:x="55" fg:w="1"/><text x="4.6500%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.4000%" y="277" width="0.0800%" height="15" fill="rgb(228,174,43)" fg:x="55" fg:w="1"/><text x="4.6500%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.5600%" y="421" width="0.0800%" height="15" fill="rgb(211,191,0)" fg:x="57" fg:w="1"/><text x="4.8100%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.5600%" y="405" width="0.0800%" height="15" fill="rgb(253,117,3)" fg:x="57" fg:w="1"/><text x="4.8100%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.5600%" y="389" width="0.0800%" height="15" fill="rgb(241,127,19)" fg:x="57" fg:w="1"/><text x="4.8100%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.5600%" y="373" width="0.0800%" height="15" fill="rgb(218,103,12)" fg:x="57" fg:w="1"/><text x="4.8100%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.5600%" y="357" width="0.0800%" height="15" fill="rgb(236,214,43)" fg:x="57" fg:w="1"/><text x="4.8100%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.5600%" y="341" width="0.0800%" height="15" fill="rgb(244,144,19)" fg:x="57" fg:w="1"/><text x="4.8100%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.5600%" y="325" width="0.0800%" height="15" fill="rgb(246,188,10)" fg:x="57" fg:w="1"/><text x="4.8100%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="4.5600%" y="309" width="0.0800%" height="15" fill="rgb(212,193,33)" fg:x="57" fg:w="1"/><text x="4.8100%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="4.5600%" y="293" width="0.0800%" height="15" fill="rgb(241,51,29)" fg:x="57" fg:w="1"/><text x="4.8100%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="4.5600%" y="277" width="0.0800%" height="15" fill="rgb(211,58,19)" fg:x="57" fg:w="1"/><text x="4.8100%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="4.5600%" y="261" width="0.0800%" height="15" fill="rgb(229,111,26)" fg:x="57" fg:w="1"/><text x="4.8100%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.5600%" y="245" width="0.0800%" height="15" fill="rgb(213,115,40)" fg:x="57" fg:w="1"/><text x="4.8100%" y="255.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="4.4800%" y="469" width="0.2400%" height="15" fill="rgb(209,56,44)" fg:x="56" fg:w="3"/><text x="4.7300%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.24%)</title><rect x="4.4800%" y="453" width="0.2400%" height="15" fill="rgb(230,108,32)" fg:x="56" fg:w="3"/><text x="4.7300%" y="463.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::save (3 samples, 0.24%)</title><rect x="4.4800%" y="437" width="0.2400%" height="15" fill="rgb(216,165,31)" fg:x="56" fg:w="3"/><text x="4.7300%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="4.6400%" y="421" width="0.0800%" height="15" fill="rgb(218,122,21)" fg:x="58" fg:w="1"/><text x="4.8900%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.6400%" y="405" width="0.0800%" height="15" fill="rgb(223,224,47)" fg:x="58" fg:w="1"/><text x="4.8900%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.6400%" y="389" width="0.0800%" height="15" fill="rgb(238,102,44)" fg:x="58" fg:w="1"/><text x="4.8900%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="4.8000%" y="421" width="0.0800%" height="15" fill="rgb(236,46,40)" fg:x="60" fg:w="1"/><text x="5.0500%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="4.8800%" y="405" width="0.0800%" height="15" fill="rgb(247,202,50)" fg:x="61" fg:w="1"/><text x="5.1300%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.9600%" y="405" width="0.0800%" height="15" fill="rgb(209,99,20)" fg:x="62" fg:w="1"/><text x="5.2100%" y="415.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.9600%" y="389" width="0.0800%" height="15" fill="rgb(252,27,34)" fg:x="62" fg:w="1"/><text x="5.2100%" y="399.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.9600%" y="373" width="0.0800%" height="15" fill="rgb(215,206,23)" fg:x="62" fg:w="1"/><text x="5.2100%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.9600%" y="357" width="0.0800%" height="15" fill="rgb(212,135,36)" fg:x="62" fg:w="1"/><text x="5.2100%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.9600%" y="341" width="0.0800%" height="15" fill="rgb(240,189,1)" fg:x="62" fg:w="1"/><text x="5.2100%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.9600%" y="325" width="0.0800%" height="15" fill="rgb(242,56,20)" fg:x="62" fg:w="1"/><text x="5.2100%" y="335.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.9600%" y="309" width="0.0800%" height="15" fill="rgb(247,132,33)" fg:x="62" fg:w="1"/><text x="5.2100%" y="319.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.0400%" y="389" width="0.0800%" height="15" fill="rgb(208,149,11)" fg:x="63" fg:w="1"/><text x="5.2900%" y="399.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.0400%" y="373" width="0.0800%" height="15" fill="rgb(211,33,11)" fg:x="63" fg:w="1"/><text x="5.2900%" y="383.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.0400%" y="357" width="0.0800%" height="15" fill="rgb(221,29,38)" fg:x="63" fg:w="1"/><text x="5.2900%" y="367.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="5.0400%" y="405" width="0.2400%" height="15" fill="rgb(206,182,49)" fg:x="63" fg:w="3"/><text x="5.2900%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="5.1200%" y="389" width="0.1600%" height="15" fill="rgb(216,140,1)" fg:x="64" fg:w="2"/><text x="5.3700%" y="399.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.2000%" y="373" width="0.0800%" height="15" fill="rgb(232,57,40)" fg:x="65" fg:w="1"/><text x="5.4500%" y="383.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.2000%" y="357" width="0.0800%" height="15" fill="rgb(224,186,18)" fg:x="65" fg:w="1"/><text x="5.4500%" y="367.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.2000%" y="341" width="0.0800%" height="15" fill="rgb(215,121,11)" fg:x="65" fg:w="1"/><text x="5.4500%" y="351.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="5.2000%" y="325" width="0.0800%" height="15" fill="rgb(245,147,10)" fg:x="65" fg:w="1"/><text x="5.4500%" y="335.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.56%)</title><rect x="4.8000%" y="437" width="0.5600%" height="15" fill="rgb(238,153,13)" fg:x="60" fg:w="7"/><text x="5.0500%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="4.8800%" y="421" width="0.4800%" height="15" fill="rgb(233,108,0)" fg:x="61" fg:w="6"/><text x="5.1300%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.2800%" y="405" width="0.0800%" height="15" fill="rgb(212,157,17)" fg:x="66" fg:w="1"/><text x="5.5300%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.2800%" y="389" width="0.0800%" height="15" fill="rgb(225,213,38)" fg:x="66" fg:w="1"/><text x="5.5300%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.2800%" y="373" width="0.0800%" height="15" fill="rgb(248,16,11)" fg:x="66" fg:w="1"/><text x="5.5300%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.2800%" y="357" width="0.0800%" height="15" fill="rgb(241,33,4)" fg:x="66" fg:w="1"/><text x="5.5300%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.2800%" y="341" width="0.0800%" height="15" fill="rgb(222,26,43)" fg:x="66" fg:w="1"/><text x="5.5300%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.2800%" y="325" width="0.0800%" height="15" fill="rgb(243,29,36)" fg:x="66" fg:w="1"/><text x="5.5300%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.3600%" y="405" width="0.0800%" height="15" fill="rgb(241,9,27)" fg:x="67" fg:w="1"/><text x="5.6100%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.6800%" y="373" width="0.0800%" height="15" fill="rgb(205,117,26)" fg:x="71" fg:w="1"/><text x="5.9300%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.6800%" y="357" width="0.0800%" height="15" fill="rgb(209,80,39)" fg:x="71" fg:w="1"/><text x="5.9300%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="5.7600%" y="357" width="0.1600%" height="15" fill="rgb(239,155,6)" fg:x="72" fg:w="2"/><text x="6.0100%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.8400%" y="341" width="0.0800%" height="15" fill="rgb(212,104,12)" fg:x="73" fg:w="1"/><text x="6.0900%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.9200%" y="325" width="0.0800%" height="15" fill="rgb(234,204,3)" fg:x="74" fg:w="1"/><text x="6.1700%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.72%)</title><rect x="5.3600%" y="437" width="0.7200%" height="15" fill="rgb(251,218,7)" fg:x="67" fg:w="9"/><text x="5.6100%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (9 samples, 0.72%)</title><rect x="5.3600%" y="421" width="0.7200%" height="15" fill="rgb(221,81,32)" fg:x="67" fg:w="9"/><text x="5.6100%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="5.4400%" y="405" width="0.6400%" height="15" fill="rgb(214,152,26)" fg:x="68" fg:w="8"/><text x="5.6900%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="5.6000%" y="389" width="0.4800%" height="15" fill="rgb(223,22,3)" fg:x="70" fg:w="6"/><text x="5.8500%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="5.7600%" y="373" width="0.3200%" height="15" fill="rgb(207,174,7)" fg:x="72" fg:w="4"/><text x="6.0100%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="5.9200%" y="357" width="0.1600%" height="15" fill="rgb(224,19,52)" fg:x="74" fg:w="2"/><text x="6.1700%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="5.9200%" y="341" width="0.1600%" height="15" fill="rgb(228,24,14)" fg:x="74" fg:w="2"/><text x="6.1700%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.0000%" y="325" width="0.0800%" height="15" fill="rgb(230,153,43)" fg:x="75" fg:w="1"/><text x="6.2500%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.0000%" y="309" width="0.0800%" height="15" fill="rgb(231,106,12)" fg:x="75" fg:w="1"/><text x="6.2500%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.0800%" y="357" width="0.0800%" height="15" fill="rgb(215,92,2)" fg:x="76" fg:w="1"/><text x="6.3300%" y="367.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (3 samples, 0.24%)</title><rect x="6.0800%" y="389" width="0.2400%" height="15" fill="rgb(249,143,25)" fg:x="76" fg:w="3"/><text x="6.3300%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="6.0800%" y="373" width="0.2400%" height="15" fill="rgb(252,7,35)" fg:x="76" fg:w="3"/><text x="6.3300%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="6.1600%" y="357" width="0.1600%" height="15" fill="rgb(216,69,40)" fg:x="77" fg:w="2"/><text x="6.4100%" y="367.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="6.1600%" y="341" width="0.1600%" height="15" fill="rgb(240,36,33)" fg:x="77" fg:w="2"/><text x="6.4100%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="6.1600%" y="325" width="0.1600%" height="15" fill="rgb(231,128,14)" fg:x="77" fg:w="2"/><text x="6.4100%" y="335.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="6.1600%" y="309" width="0.1600%" height="15" fill="rgb(245,143,14)" fg:x="77" fg:w="2"/><text x="6.4100%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.2400%" y="293" width="0.0800%" height="15" fill="rgb(222,130,28)" fg:x="78" fg:w="1"/><text x="6.4900%" y="303.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="6.2400%" y="277" width="0.0800%" height="15" fill="rgb(212,10,48)" fg:x="78" fg:w="1"/><text x="6.4900%" y="287.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Version&gt;::serialize (1 samples, 0.08%)</title><rect x="6.3200%" y="389" width="0.0800%" height="15" fill="rgb(254,118,45)" fg:x="79" fg:w="1"/><text x="6.5700%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="6.3200%" y="373" width="0.0800%" height="15" fill="rgb(228,6,45)" fg:x="79" fg:w="1"/><text x="6.5700%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="6.4000%" y="341" width="0.0800%" height="15" fill="rgb(241,18,35)" fg:x="80" fg:w="1"/><text x="6.6500%" y="351.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.4000%" y="325" width="0.0800%" height="15" fill="rgb(227,214,53)" fg:x="80" fg:w="1"/><text x="6.6500%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="6.4000%" y="309" width="0.0800%" height="15" fill="rgb(224,107,51)" fg:x="80" fg:w="1"/><text x="6.6500%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="6.4800%" y="325" width="0.0800%" height="15" fill="rgb(248,60,28)" fg:x="81" fg:w="1"/><text x="6.7300%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.4800%" y="309" width="0.0800%" height="15" fill="rgb(249,101,23)" fg:x="81" fg:w="1"/><text x="6.7300%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.4800%" y="293" width="0.0800%" height="15" fill="rgb(228,51,19)" fg:x="81" fg:w="1"/><text x="6.7300%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.4800%" y="277" width="0.0800%" height="15" fill="rgb(213,20,6)" fg:x="81" fg:w="1"/><text x="6.7300%" y="287.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="6.4000%" y="357" width="0.3200%" height="15" fill="rgb(212,124,10)" fg:x="80" fg:w="4"/><text x="6.6500%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="6.4800%" y="341" width="0.2400%" height="15" fill="rgb(248,3,40)" fg:x="81" fg:w="3"/><text x="6.7300%" y="351.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="6.5600%" y="325" width="0.1600%" height="15" fill="rgb(223,178,23)" fg:x="82" fg:w="2"/><text x="6.8100%" y="335.50"></text></g><g><title>kernel::compare::any_entity_changes (9 samples, 0.72%)</title><rect x="6.0800%" y="437" width="0.7200%" height="15" fill="rgb(240,132,45)" fg:x="76" fg:w="9"/><text x="6.3300%" y="447.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (9 samples, 0.72%)</title><rect x="6.0800%" y="421" width="0.7200%" height="15" fill="rgb(245,164,36)" fg:x="76" fg:w="9"/><text x="6.3300%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.72%)</title><rect x="6.0800%" y="405" width="0.7200%" height="15" fill="rgb(231,188,53)" fg:x="76" fg:w="9"/><text x="6.3300%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="6.4000%" y="389" width="0.4000%" height="15" fill="rgb(237,198,39)" fg:x="80" fg:w="5"/><text x="6.6500%" y="399.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (5 samples, 0.40%)</title><rect x="6.4000%" y="373" width="0.4000%" height="15" fill="rgb(223,120,35)" fg:x="80" fg:w="5"/><text x="6.6500%" y="383.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="6.7200%" y="357" width="0.0800%" height="15" fill="rgb(253,107,49)" fg:x="84" fg:w="1"/><text x="6.9700%" y="367.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (27 samples, 2.16%)</title><rect x="4.7200%" y="469" width="2.1600%" height="15" fill="rgb(216,44,31)" fg:x="59" fg:w="27"/><text x="4.9700%" y="479.50">e..</text></g><g><title>engine::session::Session::check_for_changes (27 samples, 2.16%)</title><rect x="4.7200%" y="453" width="2.1600%" height="15" fill="rgb(253,87,21)" fg:x="59" fg:w="27"/><text x="4.9700%" y="463.50">e..</text></g><g><title>kernel::model::Entity::set_gid (1 samples, 0.08%)</title><rect x="6.8000%" y="437" width="0.0800%" height="15" fill="rgb(226,18,2)" fg:x="85" fg:w="1"/><text x="7.0500%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.8000%" y="421" width="0.0800%" height="15" fill="rgb(216,8,46)" fg:x="85" fg:w="1"/><text x="7.0500%" y="431.50"></text></g><g><title>engine::session::Session::flush (31 samples, 2.48%)</title><rect x="4.4800%" y="501" width="2.4800%" height="15" fill="rgb(226,140,39)" fg:x="56" fg:w="31"/><text x="4.7300%" y="511.50">en..</text></g><g><title>engine::session::Session::save_entity_changes (31 samples, 2.48%)</title><rect x="4.4800%" y="485" width="2.4800%" height="15" fill="rgb(221,194,54)" fg:x="56" fg:w="31"/><text x="4.7300%" y="495.50">en..</text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="6.8800%" y="469" width="0.0800%" height="15" fill="rgb(213,92,11)" fg:x="86" fg:w="1"/><text x="7.1300%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="6.8800%" y="453" width="0.0800%" height="15" fill="rgb(229,162,46)" fg:x="86" fg:w="1"/><text x="7.1300%" y="463.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="6.8800%" y="437" width="0.0800%" height="15" fill="rgb(214,111,36)" fg:x="86" fg:w="1"/><text x="7.1300%" y="447.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="6.8800%" y="421" width="0.0800%" height="15" fill="rgb(207,6,21)" fg:x="86" fg:w="1"/><text x="7.1300%" y="431.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="6.8800%" y="405" width="0.0800%" height="15" fill="rgb(213,127,38)" fg:x="86" fg:w="1"/><text x="7.1300%" y="415.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="6.8800%" y="389" width="0.0800%" height="15" fill="rgb(238,118,32)" fg:x="86" fg:w="1"/><text x="7.1300%" y="399.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="6.8800%" y="373" width="0.0800%" height="15" fill="rgb(240,139,39)" fg:x="86" fg:w="1"/><text x="7.1300%" y="383.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="6.8800%" y="357" width="0.0800%" height="15" fill="rgb(235,10,37)" fg:x="86" fg:w="1"/><text x="7.1300%" y="367.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="6.8800%" y="341" width="0.0800%" height="15" fill="rgb(249,171,38)" fg:x="86" fg:w="1"/><text x="7.1300%" y="351.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="6.8800%" y="325" width="0.0800%" height="15" fill="rgb(242,144,32)" fg:x="86" fg:w="1"/><text x="7.1300%" y="335.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="6.8800%" y="309" width="0.0800%" height="15" fill="rgb(217,117,21)" fg:x="86" fg:w="1"/><text x="7.1300%" y="319.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="6.8800%" y="293" width="0.0800%" height="15" fill="rgb(249,87,1)" fg:x="86" fg:w="1"/><text x="7.1300%" y="303.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="6.8800%" y="277" width="0.0800%" height="15" fill="rgb(248,196,48)" fg:x="86" fg:w="1"/><text x="7.1300%" y="287.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="6.8800%" y="261" width="0.0800%" height="15" fill="rgb(251,206,33)" fg:x="86" fg:w="1"/><text x="7.1300%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.08%)</title><rect x="6.8800%" y="245" width="0.0800%" height="15" fill="rgb(232,141,28)" fg:x="86" fg:w="1"/><text x="7.1300%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.08%)</title><rect x="6.8800%" y="229" width="0.0800%" height="15" fill="rgb(209,167,14)" fg:x="86" fg:w="1"/><text x="7.1300%" y="239.50"></text></g><g><title>kernel::model::EntityPtr::set_name (1 samples, 0.08%)</title><rect x="6.9600%" y="501" width="0.0800%" height="15" fill="rgb(225,11,50)" fg:x="87" fg:w="1"/><text x="7.2100%" y="511.50"></text></g><g><title>kernel::model::EntityPtr::modified (1 samples, 0.08%)</title><rect x="6.9600%" y="485" width="0.0800%" height="15" fill="rgb(209,50,20)" fg:x="87" fg:w="1"/><text x="7.2100%" y="495.50"></text></g><g><title>kernel::model::Props::property_named (1 samples, 0.08%)</title><rect x="6.9600%" y="469" width="0.0800%" height="15" fill="rgb(212,17,46)" fg:x="87" fg:w="1"/><text x="7.2100%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="6.9600%" y="453" width="0.0800%" height="15" fill="rgb(216,101,39)" fg:x="87" fg:w="1"/><text x="7.2100%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="6.9600%" y="437" width="0.0800%" height="15" fill="rgb(212,228,48)" fg:x="87" fg:w="1"/><text x="7.2100%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="7.0400%" y="485" width="0.0800%" height="15" fill="rgb(250,6,50)" fg:x="88" fg:w="1"/><text x="7.2900%" y="495.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="7.0400%" y="469" width="0.0800%" height="15" fill="rgb(250,160,48)" fg:x="88" fg:w="1"/><text x="7.2900%" y="479.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="7.0400%" y="453" width="0.0800%" height="15" fill="rgb(244,216,33)" fg:x="88" fg:w="1"/><text x="7.2900%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (1 samples, 0.08%)</title><rect x="7.0400%" y="437" width="0.0800%" height="15" fill="rgb(207,157,5)" fg:x="88" fg:w="1"/><text x="7.2900%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.0400%" y="421" width="0.0800%" height="15" fill="rgb(228,199,8)" fg:x="88" fg:w="1"/><text x="7.2900%" y="431.50"></text></g><g><title>plugins_core::build::Build::holding (3 samples, 0.24%)</title><rect x="7.0400%" y="501" width="0.2400%" height="15" fill="rgb(227,80,20)" fg:x="88" fg:w="3"/><text x="7.2900%" y="511.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="7.1200%" y="485" width="0.1600%" height="15" fill="rgb(222,9,33)" fg:x="89" fg:w="2"/><text x="7.3700%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="7.2000%" y="469" width="0.0800%" height="15" fill="rgb(239,44,28)" fg:x="90" fg:w="1"/><text x="7.4500%" y="479.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.2000%" y="453" width="0.0800%" height="15" fill="rgb(249,187,43)" fg:x="90" fg:w="1"/><text x="7.4500%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.2000%" y="437" width="0.0800%" height="15" fill="rgb(216,141,28)" fg:x="90" fg:w="1"/><text x="7.4500%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.2000%" y="421" width="0.0800%" height="15" fill="rgb(230,154,53)" fg:x="90" fg:w="1"/><text x="7.4500%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.2000%" y="405" width="0.0800%" height="15" fill="rgb(227,82,4)" fg:x="90" fg:w="1"/><text x="7.4500%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.2000%" y="389" width="0.0800%" height="15" fill="rgb(220,107,16)" fg:x="90" fg:w="1"/><text x="7.4500%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.2000%" y="373" width="0.0800%" height="15" fill="rgb(207,187,2)" fg:x="90" fg:w="1"/><text x="7.4500%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="7.2000%" y="357" width="0.0800%" height="15" fill="rgb(210,162,52)" fg:x="90" fg:w="1"/><text x="7.4500%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="7.2000%" y="341" width="0.0800%" height="15" fill="rgb(217,216,49)" fg:x="90" fg:w="1"/><text x="7.4500%" y="351.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="7.2800%" y="501" width="0.0800%" height="15" fill="rgb(218,146,49)" fg:x="91" fg:w="1"/><text x="7.5300%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="7.2800%" y="485" width="0.0800%" height="15" fill="rgb(216,55,40)" fg:x="91" fg:w="1"/><text x="7.5300%" y="495.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="7.2800%" y="469" width="0.0800%" height="15" fill="rgb(208,196,21)" fg:x="91" fg:w="1"/><text x="7.5300%" y="479.50"></text></g><g><title>kernel::model::Entity::gid (1 samples, 0.08%)</title><rect x="7.2800%" y="453" width="0.0800%" height="15" fill="rgb(242,117,42)" fg:x="91" fg:w="1"/><text x="7.5300%" y="463.50"></text></g><g><title>kernel::model::Props::property_named (1 samples, 0.08%)</title><rect x="7.2800%" y="437" width="0.0800%" height="15" fill="rgb(210,11,23)" fg:x="91" fg:w="1"/><text x="7.5300%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="7.2800%" y="421" width="0.0800%" height="15" fill="rgb(217,110,2)" fg:x="91" fg:w="1"/><text x="7.5300%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="7.2800%" y="405" width="0.0800%" height="15" fill="rgb(229,77,54)" fg:x="91" fg:w="1"/><text x="7.5300%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScopeMut&lt;plugins_core::moving::model::Occupying&gt;&gt; (1 samples, 0.08%)</title><rect x="7.3600%" y="469" width="0.0800%" height="15" fill="rgb(218,53,16)" fg:x="92" fg:w="1"/><text x="7.6100%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::EntityRef&gt; (1 samples, 0.08%)</title><rect x="7.3600%" y="453" width="0.0800%" height="15" fill="rgb(215,38,13)" fg:x="92" fg:w="1"/><text x="7.6100%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.3600%" y="437" width="0.0800%" height="15" fill="rgb(235,42,18)" fg:x="92" fg:w="1"/><text x="7.6100%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.4400%" y="437" width="0.0800%" height="15" fill="rgb(219,66,54)" fg:x="93" fg:w="1"/><text x="7.6900%" y="447.50"></text></g><g><title>plugins_core::build::Build::occupying (3 samples, 0.24%)</title><rect x="7.3600%" y="501" width="0.2400%" height="15" fill="rgb(222,205,4)" fg:x="92" fg:w="3"/><text x="7.6100%" y="511.50"></text></g><g><title>plugins_core::tools::set_occupying (3 samples, 0.24%)</title><rect x="7.3600%" y="485" width="0.2400%" height="15" fill="rgb(227,213,46)" fg:x="92" fg:w="3"/><text x="7.6100%" y="495.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (2 samples, 0.16%)</title><rect x="7.4400%" y="469" width="0.1600%" height="15" fill="rgb(250,145,42)" fg:x="93" fg:w="2"/><text x="7.6900%" y="479.50"></text></g><g><title>kernel::model::Entity::replace_scope (2 samples, 0.16%)</title><rect x="7.4400%" y="453" width="0.1600%" height="15" fill="rgb(219,15,2)" fg:x="93" fg:w="2"/><text x="7.6900%" y="463.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="7.5200%" y="437" width="0.0800%" height="15" fill="rgb(231,181,52)" fg:x="94" fg:w="1"/><text x="7.7700%" y="447.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="7.5200%" y="421" width="0.0800%" height="15" fill="rgb(235,1,42)" fg:x="94" fg:w="1"/><text x="7.7700%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.5200%" y="405" width="0.0800%" height="15" fill="rgb(249,88,27)" fg:x="94" fg:w="1"/><text x="7.7700%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.5200%" y="389" width="0.0800%" height="15" fill="rgb(235,145,16)" fg:x="94" fg:w="1"/><text x="7.7700%" y="399.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (40 samples, 3.20%)</title><rect x="4.4800%" y="517" width="3.2000%" height="15" fill="rgb(237,114,19)" fg:x="56" fg:w="40"/><text x="4.7300%" y="527.50">plu..</text></g><g><title>plugins_core::build::Build::with_username (1 samples, 0.08%)</title><rect x="7.6000%" y="501" width="0.0800%" height="15" fill="rgb(238,51,50)" fg:x="95" fg:w="1"/><text x="7.8500%" y="511.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="7.6000%" y="485" width="0.0800%" height="15" fill="rgb(205,194,25)" fg:x="95" fg:w="1"/><text x="7.8500%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScopeMut&lt;engine::users::model::Usernames&gt;&gt; (1 samples, 0.08%)</title><rect x="7.6000%" y="469" width="0.0800%" height="15" fill="rgb(215,203,17)" fg:x="95" fg:w="1"/><text x="7.8500%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="7.6000%" y="453" width="0.0800%" height="15" fill="rgb(233,112,49)" fg:x="95" fg:w="1"/><text x="7.8500%" y="463.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="7.6800%" y="453" width="0.0800%" height="15" fill="rgb(241,130,26)" fg:x="96" fg:w="1"/><text x="7.9300%" y="463.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="7.6800%" y="437" width="0.0800%" height="15" fill="rgb(252,223,19)" fg:x="96" fg:w="1"/><text x="7.9300%" y="447.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (75 samples, 6.00%)</title><rect x="1.8400%" y="533" width="6.0000%" height="15" fill="rgb(211,95,25)" fg:x="23" fg:w="75"/><text x="2.0900%" y="543.50">&lt;tests::..</text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.16%)</title><rect x="7.6800%" y="517" width="0.1600%" height="15" fill="rgb(251,182,27)" fg:x="96" fg:w="2"/><text x="7.9300%" y="527.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="7.6800%" y="501" width="0.1600%" height="15" fill="rgb(238,24,4)" fg:x="96" fg:w="2"/><text x="7.9300%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="7.6800%" y="485" width="0.1600%" height="15" fill="rgb(224,220,25)" fg:x="96" fg:w="2"/><text x="7.9300%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="7.6800%" y="469" width="0.1600%" height="15" fill="rgb(239,133,26)" fg:x="96" fg:w="2"/><text x="7.9300%" y="479.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="7.7600%" y="453" width="0.0800%" height="15" fill="rgb(211,94,48)" fg:x="97" fg:w="1"/><text x="8.0100%" y="463.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="7.7600%" y="437" width="0.0800%" height="15" fill="rgb(239,87,6)" fg:x="97" fg:w="1"/><text x="8.0100%" y="447.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="7.7600%" y="421" width="0.0800%" height="15" fill="rgb(227,62,0)" fg:x="97" fg:w="1"/><text x="8.0100%" y="431.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="7.7600%" y="405" width="0.0800%" height="15" fill="rgb(211,226,4)" fg:x="97" fg:w="1"/><text x="8.0100%" y="415.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="7.7600%" y="389" width="0.0800%" height="15" fill="rgb(253,38,52)" fg:x="97" fg:w="1"/><text x="8.0100%" y="399.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="7.7600%" y="373" width="0.0800%" height="15" fill="rgb(229,126,40)" fg:x="97" fg:w="1"/><text x="8.0100%" y="383.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="7.7600%" y="357" width="0.0800%" height="15" fill="rgb(229,165,44)" fg:x="97" fg:w="1"/><text x="8.0100%" y="367.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="7.8400%" y="501" width="0.0800%" height="15" fill="rgb(247,95,47)" fg:x="98" fg:w="1"/><text x="8.0900%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.8400%" y="485" width="0.0800%" height="15" fill="rgb(216,140,30)" fg:x="98" fg:w="1"/><text x="8.0900%" y="495.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="7.9200%" y="501" width="0.1600%" height="15" fill="rgb(246,214,8)" fg:x="99" fg:w="2"/><text x="8.1700%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="8.0000%" y="485" width="0.0800%" height="15" fill="rgb(227,224,15)" fg:x="100" fg:w="1"/><text x="8.2500%" y="495.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="8.0000%" y="469" width="0.0800%" height="15" fill="rgb(233,175,4)" fg:x="100" fg:w="1"/><text x="8.2500%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.0800%" y="437" width="0.0800%" height="15" fill="rgb(221,66,45)" fg:x="101" fg:w="1"/><text x="8.3300%" y="447.50"></text></g><g><title>engine::identifiers::model::get_gid (2 samples, 0.16%)</title><rect x="8.0800%" y="501" width="0.1600%" height="15" fill="rgb(221,178,18)" fg:x="101" fg:w="2"/><text x="8.3300%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="8.0800%" y="485" width="0.1600%" height="15" fill="rgb(213,81,29)" fg:x="101" fg:w="2"/><text x="8.3300%" y="495.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="8.0800%" y="469" width="0.1600%" height="15" fill="rgb(220,89,49)" fg:x="101" fg:w="2"/><text x="8.3300%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="8.0800%" y="453" width="0.1600%" height="15" fill="rgb(227,60,33)" fg:x="101" fg:w="2"/><text x="8.3300%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.1600%" y="437" width="0.0800%" height="15" fill="rgb(205,113,12)" fg:x="102" fg:w="1"/><text x="8.4100%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="8.1600%" y="421" width="0.0800%" height="15" fill="rgb(211,32,1)" fg:x="102" fg:w="1"/><text x="8.4100%" y="431.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="8.2400%" y="453" width="0.0800%" height="15" fill="rgb(246,2,12)" fg:x="103" fg:w="1"/><text x="8.4900%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.2400%" y="437" width="0.0800%" height="15" fill="rgb(243,37,27)" fg:x="103" fg:w="1"/><text x="8.4900%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.2400%" y="421" width="0.0800%" height="15" fill="rgb(248,211,31)" fg:x="103" fg:w="1"/><text x="8.4900%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.2400%" y="405" width="0.0800%" height="15" fill="rgb(242,146,47)" fg:x="103" fg:w="1"/><text x="8.4900%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.2400%" y="389" width="0.0800%" height="15" fill="rgb(206,70,20)" fg:x="103" fg:w="1"/><text x="8.4900%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="8.3200%" y="421" width="0.0800%" height="15" fill="rgb(215,10,51)" fg:x="104" fg:w="1"/><text x="8.5700%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.3200%" y="405" width="0.0800%" height="15" fill="rgb(243,178,53)" fg:x="104" fg:w="1"/><text x="8.5700%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.3200%" y="389" width="0.0800%" height="15" fill="rgb(233,221,20)" fg:x="104" fg:w="1"/><text x="8.5700%" y="399.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.3200%" y="373" width="0.0800%" height="15" fill="rgb(218,95,35)" fg:x="104" fg:w="1"/><text x="8.5700%" y="383.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.3200%" y="357" width="0.0800%" height="15" fill="rgb(229,13,5)" fg:x="104" fg:w="1"/><text x="8.5700%" y="367.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.4000%" y="421" width="0.0800%" height="15" fill="rgb(252,164,30)" fg:x="105" fg:w="1"/><text x="8.6500%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.4000%" y="405" width="0.0800%" height="15" fill="rgb(232,68,36)" fg:x="105" fg:w="1"/><text x="8.6500%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.4800%" y="405" width="0.0800%" height="15" fill="rgb(219,59,54)" fg:x="106" fg:w="1"/><text x="8.7300%" y="415.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.4800%" y="389" width="0.0800%" height="15" fill="rgb(250,92,33)" fg:x="106" fg:w="1"/><text x="8.7300%" y="399.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.4800%" y="373" width="0.0800%" height="15" fill="rgb(229,162,54)" fg:x="106" fg:w="1"/><text x="8.7300%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="8.5600%" y="389" width="0.0800%" height="15" fill="rgb(244,114,52)" fg:x="107" fg:w="1"/><text x="8.8100%" y="399.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.5600%" y="373" width="0.0800%" height="15" fill="rgb(212,211,43)" fg:x="107" fg:w="1"/><text x="8.8100%" y="383.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.5600%" y="357" width="0.0800%" height="15" fill="rgb(226,147,8)" fg:x="107" fg:w="1"/><text x="8.8100%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.5600%" y="341" width="0.0800%" height="15" fill="rgb(226,23,13)" fg:x="107" fg:w="1"/><text x="8.8100%" y="351.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="8.4800%" y="421" width="0.2400%" height="15" fill="rgb(240,63,4)" fg:x="106" fg:w="3"/><text x="8.7300%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="8.5600%" y="405" width="0.1600%" height="15" fill="rgb(221,1,32)" fg:x="107" fg:w="2"/><text x="8.8100%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.6400%" y="389" width="0.0800%" height="15" fill="rgb(242,117,10)" fg:x="108" fg:w="1"/><text x="8.8900%" y="399.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.6400%" y="373" width="0.0800%" height="15" fill="rgb(249,172,44)" fg:x="108" fg:w="1"/><text x="8.8900%" y="383.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="8.3200%" y="437" width="0.4800%" height="15" fill="rgb(244,46,45)" fg:x="104" fg:w="6"/><text x="8.5700%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.7200%" y="421" width="0.0800%" height="15" fill="rgb(206,43,17)" fg:x="109" fg:w="1"/><text x="8.9700%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.64%)</title><rect x="8.2400%" y="469" width="0.6400%" height="15" fill="rgb(239,218,39)" fg:x="103" fg:w="8"/><text x="8.4900%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="8.3200%" y="453" width="0.5600%" height="15" fill="rgb(208,169,54)" fg:x="104" fg:w="7"/><text x="8.5700%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.8000%" y="437" width="0.0800%" height="15" fill="rgb(247,25,42)" fg:x="110" fg:w="1"/><text x="9.0500%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.8000%" y="421" width="0.0800%" height="15" fill="rgb(226,23,31)" fg:x="110" fg:w="1"/><text x="9.0500%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.8000%" y="405" width="0.0800%" height="15" fill="rgb(247,16,28)" fg:x="110" fg:w="1"/><text x="9.0500%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.9600%" y="437" width="0.0800%" height="15" fill="rgb(231,147,38)" fg:x="112" fg:w="1"/><text x="9.2100%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.0400%" y="389" width="0.0800%" height="15" fill="rgb(253,81,48)" fg:x="113" fg:w="1"/><text x="9.2900%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="8.8800%" y="469" width="0.3200%" height="15" fill="rgb(249,222,43)" fg:x="111" fg:w="4"/><text x="9.1300%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="8.8800%" y="453" width="0.3200%" height="15" fill="rgb(221,3,27)" fg:x="111" fg:w="4"/><text x="9.1300%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="9.0400%" y="437" width="0.1600%" height="15" fill="rgb(228,180,5)" fg:x="113" fg:w="2"/><text x="9.2900%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="9.0400%" y="421" width="0.1600%" height="15" fill="rgb(227,131,42)" fg:x="113" fg:w="2"/><text x="9.2900%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="9.0400%" y="405" width="0.1600%" height="15" fill="rgb(212,3,39)" fg:x="113" fg:w="2"/><text x="9.2900%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="9.1200%" y="389" width="0.0800%" height="15" fill="rgb(226,45,5)" fg:x="114" fg:w="1"/><text x="9.3700%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="9.1200%" y="373" width="0.0800%" height="15" fill="rgb(215,167,45)" fg:x="114" fg:w="1"/><text x="9.3700%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.1200%" y="357" width="0.0800%" height="15" fill="rgb(250,218,53)" fg:x="114" fg:w="1"/><text x="9.3700%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.1200%" y="341" width="0.0800%" height="15" fill="rgb(207,140,0)" fg:x="114" fg:w="1"/><text x="9.3700%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.2000%" y="421" width="0.0800%" height="15" fill="rgb(238,133,51)" fg:x="115" fg:w="1"/><text x="9.4500%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.2000%" y="405" width="0.0800%" height="15" fill="rgb(218,203,53)" fg:x="115" fg:w="1"/><text x="9.4500%" y="415.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="9.3600%" y="405" width="0.1600%" height="15" fill="rgb(226,184,25)" fg:x="117" fg:w="2"/><text x="9.6100%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.6000%" y="373" width="0.0800%" height="15" fill="rgb(231,121,21)" fg:x="120" fg:w="1"/><text x="9.8500%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.8400%" y="341" width="0.0800%" height="15" fill="rgb(251,14,34)" fg:x="123" fg:w="1"/><text x="10.0900%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (10 samples, 0.80%)</title><rect x="9.2000%" y="453" width="0.8000%" height="15" fill="rgb(249,193,11)" fg:x="115" fg:w="10"/><text x="9.4500%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (10 samples, 0.80%)</title><rect x="9.2000%" y="437" width="0.8000%" height="15" fill="rgb(220,172,37)" fg:x="115" fg:w="10"/><text x="9.4500%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.72%)</title><rect x="9.2800%" y="421" width="0.7200%" height="15" fill="rgb(231,229,43)" fg:x="116" fg:w="9"/><text x="9.5300%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="9.5200%" y="405" width="0.4800%" height="15" fill="rgb(250,161,5)" fg:x="119" fg:w="6"/><text x="9.7700%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="9.6000%" y="389" width="0.4000%" height="15" fill="rgb(218,225,18)" fg:x="120" fg:w="5"/><text x="9.8500%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="9.6800%" y="373" width="0.3200%" height="15" fill="rgb(245,45,42)" fg:x="121" fg:w="4"/><text x="9.9300%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="9.7600%" y="357" width="0.2400%" height="15" fill="rgb(211,115,1)" fg:x="122" fg:w="3"/><text x="10.0100%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.9200%" y="341" width="0.0800%" height="15" fill="rgb(248,133,52)" fg:x="124" fg:w="1"/><text x="10.1700%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.0800%" y="421" width="0.1600%" height="15" fill="rgb(238,100,21)" fg:x="126" fg:w="2"/><text x="10.3300%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.1600%" y="405" width="0.0800%" height="15" fill="rgb(247,144,11)" fg:x="127" fg:w="1"/><text x="10.4100%" y="415.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="10.1600%" y="389" width="0.0800%" height="15" fill="rgb(206,164,16)" fg:x="127" fg:w="1"/><text x="10.4100%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.3200%" y="373" width="0.1600%" height="15" fill="rgb(222,34,3)" fg:x="129" fg:w="2"/><text x="10.5700%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.3200%" y="357" width="0.1600%" height="15" fill="rgb(248,82,4)" fg:x="129" fg:w="2"/><text x="10.5700%" y="367.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="10.3200%" y="341" width="0.1600%" height="15" fill="rgb(228,81,46)" fg:x="129" fg:w="2"/><text x="10.5700%" y="351.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (4 samples, 0.32%)</title><rect x="10.2400%" y="421" width="0.3200%" height="15" fill="rgb(227,67,47)" fg:x="128" fg:w="4"/><text x="10.4900%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="10.2400%" y="405" width="0.3200%" height="15" fill="rgb(215,93,53)" fg:x="128" fg:w="4"/><text x="10.4900%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="10.2400%" y="389" width="0.3200%" height="15" fill="rgb(248,194,39)" fg:x="128" fg:w="4"/><text x="10.4900%" y="399.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="10.4800%" y="373" width="0.0800%" height="15" fill="rgb(215,5,19)" fg:x="131" fg:w="1"/><text x="10.7300%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.4800%" y="357" width="0.0800%" height="15" fill="rgb(226,215,51)" fg:x="131" fg:w="1"/><text x="10.7300%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.4800%" y="341" width="0.0800%" height="15" fill="rgb(225,56,26)" fg:x="131" fg:w="1"/><text x="10.7300%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.4800%" y="325" width="0.0800%" height="15" fill="rgb(222,75,29)" fg:x="131" fg:w="1"/><text x="10.7300%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.4800%" y="309" width="0.0800%" height="15" fill="rgb(236,139,6)" fg:x="131" fg:w="1"/><text x="10.7300%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="10.5600%" y="389" width="0.0800%" height="15" fill="rgb(223,137,36)" fg:x="132" fg:w="1"/><text x="10.8100%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="10.6400%" y="373" width="0.0800%" height="15" fill="rgb(226,99,2)" fg:x="133" fg:w="1"/><text x="10.8900%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="10.6400%" y="357" width="0.0800%" height="15" fill="rgb(206,133,23)" fg:x="133" fg:w="1"/><text x="10.8900%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="10.6400%" y="341" width="0.0800%" height="15" fill="rgb(243,173,15)" fg:x="133" fg:w="1"/><text x="10.8900%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.6400%" y="325" width="0.0800%" height="15" fill="rgb(228,69,28)" fg:x="133" fg:w="1"/><text x="10.8900%" y="335.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (12 samples, 0.96%)</title><rect x="10.0000%" y="453" width="0.9600%" height="15" fill="rgb(212,51,22)" fg:x="125" fg:w="12"/><text x="10.2500%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (12 samples, 0.96%)</title><rect x="10.0000%" y="437" width="0.9600%" height="15" fill="rgb(227,113,0)" fg:x="125" fg:w="12"/><text x="10.2500%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="10.5600%" y="421" width="0.4000%" height="15" fill="rgb(252,84,27)" fg:x="132" fg:w="5"/><text x="10.8100%" y="431.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (5 samples, 0.40%)</title><rect x="10.5600%" y="405" width="0.4000%" height="15" fill="rgb(223,145,39)" fg:x="132" fg:w="5"/><text x="10.8100%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="10.6400%" y="389" width="0.3200%" height="15" fill="rgb(239,219,30)" fg:x="133" fg:w="4"/><text x="10.8900%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="10.7200%" y="373" width="0.2400%" height="15" fill="rgb(224,196,39)" fg:x="134" fg:w="3"/><text x="10.9700%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="10.8800%" y="357" width="0.0800%" height="15" fill="rgb(205,35,43)" fg:x="136" fg:w="1"/><text x="11.1300%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="10.8800%" y="341" width="0.0800%" height="15" fill="rgb(228,201,21)" fg:x="136" fg:w="1"/><text x="11.1300%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="11.2000%" y="309" width="0.1600%" height="15" fill="rgb(237,118,16)" fg:x="140" fg:w="2"/><text x="11.4500%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="11.2000%" y="293" width="0.1600%" height="15" fill="rgb(241,17,19)" fg:x="140" fg:w="2"/><text x="11.4500%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="11.2000%" y="277" width="0.1600%" height="15" fill="rgb(214,10,25)" fg:x="140" fg:w="2"/><text x="11.4500%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.2800%" y="261" width="0.0800%" height="15" fill="rgb(238,37,29)" fg:x="141" fg:w="1"/><text x="11.5300%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="11.1200%" y="325" width="0.4000%" height="15" fill="rgb(253,83,25)" fg:x="139" fg:w="5"/><text x="11.3700%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="11.3600%" y="309" width="0.1600%" height="15" fill="rgb(234,192,12)" fg:x="142" fg:w="2"/><text x="11.6100%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.4400%" y="293" width="0.0800%" height="15" fill="rgb(241,216,45)" fg:x="143" fg:w="1"/><text x="11.6900%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.4400%" y="277" width="0.0800%" height="15" fill="rgb(242,22,33)" fg:x="143" fg:w="1"/><text x="11.6900%" y="287.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="11.4400%" y="261" width="0.0800%" height="15" fill="rgb(231,105,49)" fg:x="143" fg:w="1"/><text x="11.6900%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="11.0400%" y="357" width="0.5600%" height="15" fill="rgb(218,204,15)" fg:x="138" fg:w="7"/><text x="11.2900%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="11.1200%" y="341" width="0.4800%" height="15" fill="rgb(235,138,41)" fg:x="139" fg:w="6"/><text x="11.3700%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.5200%" y="325" width="0.0800%" height="15" fill="rgb(246,0,9)" fg:x="144" fg:w="1"/><text x="11.7700%" y="335.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="11.6000%" y="357" width="0.0800%" height="15" fill="rgb(210,74,4)" fg:x="145" fg:w="1"/><text x="11.8500%" y="367.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="11.6000%" y="341" width="0.0800%" height="15" fill="rgb(250,60,41)" fg:x="145" fg:w="1"/><text x="11.8500%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (12 samples, 0.96%)</title><rect x="10.9600%" y="453" width="0.9600%" height="15" fill="rgb(220,115,12)" fg:x="137" fg:w="12"/><text x="11.2100%" y="463.50"></text></g><g><title>serde_json::de::from_trait (12 samples, 0.96%)</title><rect x="10.9600%" y="437" width="0.9600%" height="15" fill="rgb(237,100,13)" fg:x="137" fg:w="12"/><text x="11.2100%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (12 samples, 0.96%)</title><rect x="10.9600%" y="421" width="0.9600%" height="15" fill="rgb(213,55,26)" fg:x="137" fg:w="12"/><text x="11.2100%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (12 samples, 0.96%)</title><rect x="10.9600%" y="405" width="0.9600%" height="15" fill="rgb(216,17,4)" fg:x="137" fg:w="12"/><text x="11.2100%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.88%)</title><rect x="11.0400%" y="389" width="0.8800%" height="15" fill="rgb(220,153,47)" fg:x="138" fg:w="11"/><text x="11.2900%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (11 samples, 0.88%)</title><rect x="11.0400%" y="373" width="0.8800%" height="15" fill="rgb(215,131,9)" fg:x="138" fg:w="11"/><text x="11.2900%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="11.6800%" y="357" width="0.2400%" height="15" fill="rgb(233,46,42)" fg:x="146" fg:w="3"/><text x="11.9300%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.8400%" y="341" width="0.0800%" height="15" fill="rgb(226,86,7)" fg:x="148" fg:w="1"/><text x="12.0900%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.8400%" y="325" width="0.0800%" height="15" fill="rgb(239,226,21)" fg:x="148" fg:w="1"/><text x="12.0900%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="12.0800%" y="389" width="0.0800%" height="15" fill="rgb(244,137,22)" fg:x="151" fg:w="1"/><text x="12.3300%" y="399.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (50 samples, 4.00%)</title><rect x="8.2400%" y="501" width="4.0000%" height="15" fill="rgb(211,139,35)" fg:x="103" fg:w="50"/><text x="8.4900%" y="511.50">engi..</text></g><g><title>engine::session::Session::check_for_changes (50 samples, 4.00%)</title><rect x="8.2400%" y="485" width="4.0000%" height="15" fill="rgb(214,62,50)" fg:x="103" fg:w="50"/><text x="8.4900%" y="495.50">engi..</text></g><g><title>kernel::compare::any_entity_changes (38 samples, 3.04%)</title><rect x="9.2000%" y="469" width="3.0400%" height="15" fill="rgb(212,113,44)" fg:x="115" fg:w="38"/><text x="9.4500%" y="479.50">ker..</text></g><g><title>treediff::diff::diff (4 samples, 0.32%)</title><rect x="11.9200%" y="453" width="0.3200%" height="15" fill="rgb(226,150,43)" fg:x="149" fg:w="4"/><text x="12.1700%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="12.0000%" y="437" width="0.2400%" height="15" fill="rgb(250,71,37)" fg:x="150" fg:w="3"/><text x="12.2500%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="12.0800%" y="421" width="0.1600%" height="15" fill="rgb(219,76,19)" fg:x="151" fg:w="2"/><text x="12.3300%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="12.0800%" y="405" width="0.1600%" height="15" fill="rgb(250,39,11)" fg:x="151" fg:w="2"/><text x="12.3300%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="12.1600%" y="389" width="0.0800%" height="15" fill="rgb(230,64,31)" fg:x="152" fg:w="1"/><text x="12.4100%" y="399.50"></text></g><g><title>engine::session::Session::close (57 samples, 4.56%)</title><rect x="7.8400%" y="533" width="4.5600%" height="15" fill="rgb(208,222,23)" fg:x="98" fg:w="57"/><text x="8.0900%" y="543.50">engin..</text></g><g><title>engine::session::Session::save_entity_changes (57 samples, 4.56%)</title><rect x="7.8400%" y="517" width="4.5600%" height="15" fill="rgb(227,125,18)" fg:x="98" fg:w="57"/><text x="8.0900%" y="527.50">engin..</text></g><g><title>engine::session::Session::world (2 samples, 0.16%)</title><rect x="12.2400%" y="501" width="0.1600%" height="15" fill="rgb(234,210,9)" fg:x="153" fg:w="2"/><text x="12.4900%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="12.2400%" y="485" width="0.1600%" height="15" fill="rgb(217,127,24)" fg:x="153" fg:w="2"/><text x="12.4900%" y="495.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="12.3200%" y="469" width="0.0800%" height="15" fill="rgb(239,141,48)" fg:x="154" fg:w="1"/><text x="12.5700%" y="479.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="12.3200%" y="453" width="0.0800%" height="15" fill="rgb(227,109,8)" fg:x="154" fg:w="1"/><text x="12.5700%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="12.3200%" y="437" width="0.0800%" height="15" fill="rgb(235,184,23)" fg:x="154" fg:w="1"/><text x="12.5700%" y="447.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="12.5600%" y="453" width="0.0800%" height="15" fill="rgb(227,226,48)" fg:x="157" fg:w="1"/><text x="12.8100%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.5600%" y="437" width="0.0800%" height="15" fill="rgb(206,150,11)" fg:x="157" fg:w="1"/><text x="12.8100%" y="447.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="12.6400%" y="437" width="0.0800%" height="15" fill="rgb(254,2,33)" fg:x="158" fg:w="1"/><text x="12.8900%" y="447.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="12.6400%" y="421" width="0.0800%" height="15" fill="rgb(243,160,20)" fg:x="158" fg:w="1"/><text x="12.8900%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.6400%" y="405" width="0.0800%" height="15" fill="rgb(218,208,30)" fg:x="158" fg:w="1"/><text x="12.8900%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.6400%" y="389" width="0.0800%" height="15" fill="rgb(224,120,49)" fg:x="158" fg:w="1"/><text x="12.8900%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="12.6400%" y="373" width="0.0800%" height="15" fill="rgb(246,12,2)" fg:x="158" fg:w="1"/><text x="12.8900%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.6400%" y="357" width="0.0800%" height="15" fill="rgb(236,117,3)" fg:x="158" fg:w="1"/><text x="12.8900%" y="367.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.6400%" y="341" width="0.0800%" height="15" fill="rgb(216,128,52)" fg:x="158" fg:w="1"/><text x="12.8900%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="12.6400%" y="325" width="0.0800%" height="15" fill="rgb(246,145,19)" fg:x="158" fg:w="1"/><text x="12.8900%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.6400%" y="309" width="0.0800%" height="15" fill="rgb(222,11,46)" fg:x="158" fg:w="1"/><text x="12.8900%" y="319.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="12.6400%" y="293" width="0.0800%" height="15" fill="rgb(245,82,36)" fg:x="158" fg:w="1"/><text x="12.8900%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="12.6400%" y="277" width="0.0800%" height="15" fill="rgb(250,73,51)" fg:x="158" fg:w="1"/><text x="12.8900%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="12.6400%" y="261" width="0.0800%" height="15" fill="rgb(221,189,23)" fg:x="158" fg:w="1"/><text x="12.8900%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.6400%" y="245" width="0.0800%" height="15" fill="rgb(210,33,7)" fg:x="158" fg:w="1"/><text x="12.8900%" y="255.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="12.6400%" y="229" width="0.0800%" height="15" fill="rgb(210,107,22)" fg:x="158" fg:w="1"/><text x="12.8900%" y="239.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (5 samples, 0.40%)</title><rect x="12.5600%" y="485" width="0.4000%" height="15" fill="rgb(222,116,37)" fg:x="157" fg:w="5"/><text x="12.8100%" y="495.50"></text></g><g><title>engine::internal::Entities::prepare_entity (5 samples, 0.40%)</title><rect x="12.5600%" y="469" width="0.4000%" height="15" fill="rgb(254,17,48)" fg:x="157" fg:w="5"/><text x="12.8100%" y="479.50"></text></g><g><title>kernel::model::deserialize_entity (4 samples, 0.32%)</title><rect x="12.6400%" y="453" width="0.3200%" height="15" fill="rgb(224,36,32)" fg:x="158" fg:w="4"/><text x="12.8900%" y="463.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="12.7200%" y="437" width="0.2400%" height="15" fill="rgb(232,90,46)" fg:x="159" fg:w="3"/><text x="12.9700%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="12.7200%" y="421" width="0.2400%" height="15" fill="rgb(241,66,40)" fg:x="159" fg:w="3"/><text x="12.9700%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="12.7200%" y="405" width="0.2400%" height="15" fill="rgb(249,184,29)" fg:x="159" fg:w="3"/><text x="12.9700%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="12.7200%" y="389" width="0.2400%" height="15" fill="rgb(231,181,1)" fg:x="159" fg:w="3"/><text x="12.9700%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="12.7200%" y="373" width="0.2400%" height="15" fill="rgb(224,94,2)" fg:x="159" fg:w="3"/><text x="12.9700%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="12.8000%" y="357" width="0.1600%" height="15" fill="rgb(229,170,15)" fg:x="160" fg:w="2"/><text x="13.0500%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.8800%" y="341" width="0.0800%" height="15" fill="rgb(240,127,35)" fg:x="161" fg:w="1"/><text x="13.1300%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.8800%" y="325" width="0.0800%" height="15" fill="rgb(248,196,34)" fg:x="161" fg:w="1"/><text x="13.1300%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.8800%" y="309" width="0.0800%" height="15" fill="rgb(236,137,7)" fg:x="161" fg:w="1"/><text x="13.1300%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.8800%" y="293" width="0.0800%" height="15" fill="rgb(235,127,16)" fg:x="161" fg:w="1"/><text x="13.1300%" y="303.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="12.8800%" y="277" width="0.0800%" height="15" fill="rgb(250,192,54)" fg:x="161" fg:w="1"/><text x="13.1300%" y="287.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living (9 samples, 0.72%)</title><rect x="12.4800%" y="501" width="0.7200%" height="15" fill="rgb(218,98,20)" fg:x="156" fg:w="9"/><text x="12.7300%" y="511.50"></text></g><g><title>engine::users::model::username_to_key (3 samples, 0.24%)</title><rect x="12.9600%" y="485" width="0.2400%" height="15" fill="rgb(230,176,47)" fg:x="162" fg:w="3"/><text x="13.2100%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="13.0400%" y="469" width="0.1600%" height="15" fill="rgb(244,2,33)" fg:x="163" fg:w="2"/><text x="13.2900%" y="479.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="13.0400%" y="453" width="0.1600%" height="15" fill="rgb(231,100,17)" fg:x="163" fg:w="2"/><text x="13.2900%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.1200%" y="437" width="0.0800%" height="15" fill="rgb(245,23,12)" fg:x="164" fg:w="1"/><text x="13.3700%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.1200%" y="421" width="0.0800%" height="15" fill="rgb(249,55,22)" fg:x="164" fg:w="1"/><text x="13.3700%" y="431.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="13.2000%" y="437" width="0.1600%" height="15" fill="rgb(207,134,9)" fg:x="165" fg:w="2"/><text x="13.4500%" y="447.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="13.2000%" y="421" width="0.1600%" height="15" fill="rgb(218,134,0)" fg:x="165" fg:w="2"/><text x="13.4500%" y="431.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (2 samples, 0.16%)</title><rect x="13.2000%" y="405" width="0.1600%" height="15" fill="rgb(213,212,33)" fg:x="165" fg:w="2"/><text x="13.4500%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (2 samples, 0.16%)</title><rect x="13.2000%" y="389" width="0.1600%" height="15" fill="rgb(252,106,18)" fg:x="165" fg:w="2"/><text x="13.4500%" y="399.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::Identity&gt;&gt;::following (2 samples, 0.16%)</title><rect x="13.2000%" y="373" width="0.1600%" height="15" fill="rgb(208,126,42)" fg:x="165" fg:w="2"/><text x="13.4500%" y="383.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="13.2000%" y="357" width="0.1600%" height="15" fill="rgb(246,175,29)" fg:x="165" fg:w="2"/><text x="13.4500%" y="367.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="13.2800%" y="341" width="0.0800%" height="15" fill="rgb(215,13,50)" fg:x="166" fg:w="1"/><text x="13.5300%" y="351.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="13.2800%" y="325" width="0.0800%" height="15" fill="rgb(216,172,15)" fg:x="166" fg:w="1"/><text x="13.5300%" y="335.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.2800%" y="309" width="0.0800%" height="15" fill="rgb(212,103,13)" fg:x="166" fg:w="1"/><text x="13.5300%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.2800%" y="293" width="0.0800%" height="15" fill="rgb(231,171,36)" fg:x="166" fg:w="1"/><text x="13.5300%" y="303.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="13.2800%" y="277" width="0.0800%" height="15" fill="rgb(250,123,20)" fg:x="166" fg:w="1"/><text x="13.5300%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="13.2800%" y="261" width="0.0800%" height="15" fill="rgb(212,53,50)" fg:x="166" fg:w="1"/><text x="13.5300%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="13.2800%" y="245" width="0.0800%" height="15" fill="rgb(243,54,12)" fg:x="166" fg:w="1"/><text x="13.5300%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="13.2800%" y="229" width="0.0800%" height="15" fill="rgb(234,101,34)" fg:x="166" fg:w="1"/><text x="13.5300%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="13.2800%" y="213" width="0.0800%" height="15" fill="rgb(254,67,22)" fg:x="166" fg:w="1"/><text x="13.5300%" y="223.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="13.3600%" y="389" width="0.1600%" height="15" fill="rgb(250,35,47)" fg:x="167" fg:w="2"/><text x="13.6100%" y="399.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="13.3600%" y="373" width="0.1600%" height="15" fill="rgb(226,126,38)" fg:x="167" fg:w="2"/><text x="13.6100%" y="383.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="13.3600%" y="357" width="0.1600%" height="15" fill="rgb(216,138,53)" fg:x="167" fg:w="2"/><text x="13.6100%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="13.3600%" y="341" width="0.1600%" height="15" fill="rgb(246,199,43)" fg:x="167" fg:w="2"/><text x="13.6100%" y="351.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.4400%" y="325" width="0.0800%" height="15" fill="rgb(232,125,11)" fg:x="168" fg:w="1"/><text x="13.6900%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.4400%" y="309" width="0.0800%" height="15" fill="rgb(218,219,45)" fg:x="168" fg:w="1"/><text x="13.6900%" y="319.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="13.4400%" y="293" width="0.0800%" height="15" fill="rgb(216,102,54)" fg:x="168" fg:w="1"/><text x="13.6900%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="13.4400%" y="277" width="0.0800%" height="15" fill="rgb(250,228,7)" fg:x="168" fg:w="1"/><text x="13.6900%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="13.4400%" y="261" width="0.0800%" height="15" fill="rgb(226,125,25)" fg:x="168" fg:w="1"/><text x="13.6900%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="13.4400%" y="245" width="0.0800%" height="15" fill="rgb(224,165,27)" fg:x="168" fg:w="1"/><text x="13.6900%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="13.4400%" y="229" width="0.0800%" height="15" fill="rgb(233,86,3)" fg:x="168" fg:w="1"/><text x="13.6900%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="13.4400%" y="213" width="0.0800%" height="15" fill="rgb(228,116,20)" fg:x="168" fg:w="1"/><text x="13.6900%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="13.4400%" y="197" width="0.0800%" height="15" fill="rgb(209,192,17)" fg:x="168" fg:w="1"/><text x="13.6900%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="13.4400%" y="181" width="0.0800%" height="15" fill="rgb(224,88,34)" fg:x="168" fg:w="1"/><text x="13.6900%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="13.4400%" y="165" width="0.0800%" height="15" fill="rgb(233,38,6)" fg:x="168" fg:w="1"/><text x="13.6900%" y="175.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="13.6800%" y="277" width="0.0800%" height="15" fill="rgb(212,59,30)" fg:x="171" fg:w="1"/><text x="13.9300%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="13.6800%" y="261" width="0.0800%" height="15" fill="rgb(213,80,3)" fg:x="171" fg:w="1"/><text x="13.9300%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="13.6800%" y="293" width="0.1600%" height="15" fill="rgb(251,178,7)" fg:x="171" fg:w="2"/><text x="13.9300%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="13.7600%" y="277" width="0.0800%" height="15" fill="rgb(213,154,26)" fg:x="172" fg:w="1"/><text x="14.0100%" y="287.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="13.7600%" y="261" width="0.0800%" height="15" fill="rgb(238,165,49)" fg:x="172" fg:w="1"/><text x="14.0100%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="13.6000%" y="357" width="0.4000%" height="15" fill="rgb(248,91,46)" fg:x="170" fg:w="5"/><text x="13.8500%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="13.6000%" y="341" width="0.4000%" height="15" fill="rgb(244,21,52)" fg:x="170" fg:w="5"/><text x="13.8500%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (4 samples, 0.32%)</title><rect x="13.6800%" y="325" width="0.3200%" height="15" fill="rgb(247,122,20)" fg:x="171" fg:w="4"/><text x="13.9300%" y="335.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (4 samples, 0.32%)</title><rect x="13.6800%" y="309" width="0.3200%" height="15" fill="rgb(218,27,9)" fg:x="171" fg:w="4"/><text x="13.9300%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (2 samples, 0.16%)</title><rect x="13.8400%" y="293" width="0.1600%" height="15" fill="rgb(246,7,6)" fg:x="173" fg:w="2"/><text x="14.0900%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="13.8400%" y="277" width="0.1600%" height="15" fill="rgb(227,135,54)" fg:x="173" fg:w="2"/><text x="14.0900%" y="287.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (2 samples, 0.16%)</title><rect x="13.8400%" y="261" width="0.1600%" height="15" fill="rgb(247,14,11)" fg:x="173" fg:w="2"/><text x="14.0900%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="14.0000%" y="341" width="0.0800%" height="15" fill="rgb(206,149,34)" fg:x="175" fg:w="1"/><text x="14.2500%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="14.0000%" y="325" width="0.0800%" height="15" fill="rgb(227,228,4)" fg:x="175" fg:w="1"/><text x="14.2500%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.0000%" y="309" width="0.0800%" height="15" fill="rgb(238,218,28)" fg:x="175" fg:w="1"/><text x="14.2500%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="14.0800%" y="277" width="0.0800%" height="15" fill="rgb(252,86,40)" fg:x="176" fg:w="1"/><text x="14.3300%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (2 samples, 0.16%)</title><rect x="14.0800%" y="309" width="0.1600%" height="15" fill="rgb(251,225,11)" fg:x="176" fg:w="2"/><text x="14.3300%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="14.0800%" y="293" width="0.1600%" height="15" fill="rgb(206,46,49)" fg:x="176" fg:w="2"/><text x="14.3300%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.1600%" y="277" width="0.0800%" height="15" fill="rgb(245,128,24)" fg:x="177" fg:w="1"/><text x="14.4100%" y="287.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="14.2400%" y="309" width="0.0800%" height="15" fill="rgb(219,177,34)" fg:x="178" fg:w="1"/><text x="14.4900%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.2400%" y="293" width="0.0800%" height="15" fill="rgb(218,60,48)" fg:x="178" fg:w="1"/><text x="14.4900%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.5600%" y="293" width="0.0800%" height="15" fill="rgb(221,11,5)" fg:x="182" fg:w="1"/><text x="14.8100%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.7200%" y="277" width="0.0800%" height="15" fill="rgb(220,148,13)" fg:x="184" fg:w="1"/><text x="14.9700%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (21 samples, 1.68%)</title><rect x="14.6400%" y="293" width="1.6800%" height="15" fill="rgb(210,16,3)" fg:x="183" fg:w="21"/><text x="14.8900%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (19 samples, 1.52%)</title><rect x="14.8000%" y="277" width="1.5200%" height="15" fill="rgb(236,80,2)" fg:x="185" fg:w="19"/><text x="15.0500%" y="287.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="16.0800%" y="261" width="0.2400%" height="15" fill="rgb(239,129,19)" fg:x="201" fg:w="3"/><text x="16.3300%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="16.3200%" y="293" width="0.0800%" height="15" fill="rgb(220,106,35)" fg:x="204" fg:w="1"/><text x="16.5700%" y="303.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="16.6400%" y="277" width="0.0800%" height="15" fill="rgb(252,139,45)" fg:x="208" fg:w="1"/><text x="16.8900%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="16.7200%" y="277" width="0.1600%" height="15" fill="rgb(229,8,36)" fg:x="209" fg:w="2"/><text x="16.9700%" y="287.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="16.8000%" y="261" width="0.0800%" height="15" fill="rgb(230,126,33)" fg:x="210" fg:w="1"/><text x="17.0500%" y="271.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderMatches::into_nfa (1 samples, 0.08%)</title><rect x="16.8000%" y="245" width="0.0800%" height="15" fill="rgb(239,140,21)" fg:x="210" fg:w="1"/><text x="17.0500%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (7 samples, 0.56%)</title><rect x="16.4000%" y="293" width="0.5600%" height="15" fill="rgb(254,104,9)" fg:x="205" fg:w="7"/><text x="16.6500%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="16.8800%" y="277" width="0.0800%" height="15" fill="rgb(239,52,14)" fg:x="211" fg:w="1"/><text x="17.1300%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="16.8800%" y="261" width="0.0800%" height="15" fill="rgb(208,227,44)" fg:x="211" fg:w="1"/><text x="17.1300%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="16.9600%" y="293" width="0.0800%" height="15" fill="rgb(246,18,19)" fg:x="212" fg:w="1"/><text x="17.2100%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="17.0400%" y="261" width="0.0800%" height="15" fill="rgb(235,228,25)" fg:x="213" fg:w="1"/><text x="17.2900%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="17.0400%" y="245" width="0.0800%" height="15" fill="rgb(240,156,20)" fg:x="213" fg:w="1"/><text x="17.2900%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::ClassUnicodeIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="17.2800%" y="229" width="0.0800%" height="15" fill="rgb(224,8,20)" fg:x="216" fg:w="1"/><text x="17.5300%" y="239.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="17.3600%" y="229" width="0.1600%" height="15" fill="rgb(214,12,52)" fg:x="217" fg:w="2"/><text x="17.6100%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.5200%" y="229" width="0.0800%" height="15" fill="rgb(211,220,47)" fg:x="219" fg:w="1"/><text x="17.7700%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="17.9200%" y="165" width="0.1600%" height="15" fill="rgb(250,173,5)" fg:x="224" fg:w="2"/><text x="18.1700%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="17.8400%" y="197" width="0.3200%" height="15" fill="rgb(250,125,52)" fg:x="223" fg:w="4"/><text x="18.0900%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="17.9200%" y="181" width="0.2400%" height="15" fill="rgb(209,133,18)" fg:x="224" fg:w="3"/><text x="18.1700%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="18.0800%" y="165" width="0.0800%" height="15" fill="rgb(216,173,22)" fg:x="226" fg:w="1"/><text x="18.3300%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.2400%" y="181" width="0.0800%" height="15" fill="rgb(205,3,22)" fg:x="228" fg:w="1"/><text x="18.4900%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (10 samples, 0.80%)</title><rect x="17.6000%" y="229" width="0.8000%" height="15" fill="rgb(248,22,20)" fg:x="220" fg:w="10"/><text x="17.8500%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (9 samples, 0.72%)</title><rect x="17.6800%" y="213" width="0.7200%" height="15" fill="rgb(233,6,29)" fg:x="221" fg:w="9"/><text x="17.9300%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="18.1600%" y="197" width="0.2400%" height="15" fill="rgb(240,22,54)" fg:x="227" fg:w="3"/><text x="18.4100%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="18.3200%" y="181" width="0.0800%" height="15" fill="rgb(231,133,32)" fg:x="229" fg:w="1"/><text x="18.5700%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="18.3200%" y="165" width="0.0800%" height="15" fill="rgb(248,193,4)" fg:x="229" fg:w="1"/><text x="18.5700%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="18.3200%" y="149" width="0.0800%" height="15" fill="rgb(211,178,46)" fg:x="229" fg:w="1"/><text x="18.5700%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="18.3200%" y="133" width="0.0800%" height="15" fill="rgb(224,5,42)" fg:x="229" fg:w="1"/><text x="18.5700%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (102 samples, 8.16%)</title><rect x="18.4000%" y="229" width="8.1600%" height="15" fill="rgb(239,176,25)" fg:x="230" fg:w="102"/><text x="18.6500%" y="239.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (102 samples, 8.16%)</title><rect x="18.4000%" y="213" width="8.1600%" height="15" fill="rgb(245,187,50)" fg:x="230" fg:w="102"/><text x="18.6500%" y="223.50">regex_autom..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (102 samples, 8.16%)</title><rect x="18.4000%" y="197" width="8.1600%" height="15" fill="rgb(248,24,15)" fg:x="230" fg:w="102"/><text x="18.6500%" y="207.50">alloc::vec:..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="26.5600%" y="229" width="0.0800%" height="15" fill="rgb(205,166,13)" fg:x="332" fg:w="1"/><text x="26.8100%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.5600%" y="213" width="0.0800%" height="15" fill="rgb(208,114,23)" fg:x="332" fg:w="1"/><text x="26.8100%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (122 samples, 9.76%)</title><rect x="17.0400%" y="277" width="9.7600%" height="15" fill="rgb(239,127,18)" fg:x="213" fg:w="122"/><text x="17.2900%" y="287.50">&lt;core::iter::a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (121 samples, 9.68%)</title><rect x="17.1200%" y="261" width="9.6800%" height="15" fill="rgb(219,154,28)" fg:x="214" fg:w="121"/><text x="17.3700%" y="271.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (121 samples, 9.68%)</title><rect x="17.1200%" y="245" width="9.6800%" height="15" fill="rgb(225,157,23)" fg:x="214" fg:w="121"/><text x="17.3700%" y="255.50">regex_automata..</text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (2 samples, 0.16%)</title><rect x="26.6400%" y="229" width="0.1600%" height="15" fill="rgb(219,8,6)" fg:x="333" fg:w="2"/><text x="26.8900%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.2000%" y="261" width="0.0800%" height="15" fill="rgb(212,47,6)" fg:x="340" fg:w="1"/><text x="27.4500%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.2800%" y="261" width="0.0800%" height="15" fill="rgb(224,190,4)" fg:x="341" fg:w="1"/><text x="27.5300%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="27.3600%" y="261" width="0.1600%" height="15" fill="rgb(239,183,29)" fg:x="342" fg:w="2"/><text x="27.6100%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.48%)</title><rect x="27.5200%" y="261" width="0.4800%" height="15" fill="rgb(213,57,7)" fg:x="344" fg:w="6"/><text x="27.7700%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="27.9200%" y="245" width="0.0800%" height="15" fill="rgb(216,148,1)" fg:x="349" fg:w="1"/><text x="28.1700%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="27.9200%" y="229" width="0.0800%" height="15" fill="rgb(236,182,29)" fg:x="349" fg:w="1"/><text x="28.1700%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.9200%" y="213" width="0.0800%" height="15" fill="rgb(244,120,48)" fg:x="349" fg:w="1"/><text x="28.1700%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (3 samples, 0.24%)</title><rect x="28.0000%" y="261" width="0.2400%" height="15" fill="rgb(206,71,34)" fg:x="350" fg:w="3"/><text x="28.2500%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (19 samples, 1.52%)</title><rect x="26.8000%" y="277" width="1.5200%" height="15" fill="rgb(242,32,6)" fg:x="335" fg:w="19"/><text x="27.0500%" y="287.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="28.2400%" y="261" width="0.0800%" height="15" fill="rgb(241,35,3)" fg:x="353" fg:w="1"/><text x="28.4900%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.2400%" y="245" width="0.0800%" height="15" fill="rgb(222,62,19)" fg:x="353" fg:w="1"/><text x="28.4900%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (142 samples, 11.36%)</title><rect x="17.0400%" y="293" width="11.3600%" height="15" fill="rgb(223,110,41)" fg:x="213" fg:w="142"/><text x="17.2900%" y="303.50">regex_automata::n..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="28.3200%" y="277" width="0.0800%" height="15" fill="rgb(208,224,4)" fg:x="354" fg:w="1"/><text x="28.5700%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="28.3200%" y="261" width="0.0800%" height="15" fill="rgb(241,137,19)" fg:x="354" fg:w="1"/><text x="28.5700%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::new (177 samples, 14.16%)</title><rect x="14.3200%" y="309" width="14.1600%" height="15" fill="rgb(244,24,17)" fg:x="179" fg:w="177"/><text x="14.5700%" y="319.50">regex_automata::meta::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="28.4000%" y="293" width="0.0800%" height="15" fill="rgb(245,178,49)" fg:x="355" fg:w="1"/><text x="28.6500%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="28.4000%" y="277" width="0.0800%" height="15" fill="rgb(219,160,38)" fg:x="355" fg:w="1"/><text x="28.6500%" y="287.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="28.5600%" y="261" width="0.0800%" height="15" fill="rgb(228,137,14)" fg:x="357" fg:w="1"/><text x="28.8100%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (2 samples, 0.16%)</title><rect x="28.6400%" y="261" width="0.1600%" height="15" fill="rgb(237,134,11)" fg:x="358" fg:w="2"/><text x="28.8900%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="28.8000%" y="261" width="0.1600%" height="15" fill="rgb(211,126,44)" fg:x="360" fg:w="2"/><text x="29.0500%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="28.8800%" y="245" width="0.0800%" height="15" fill="rgb(226,171,33)" fg:x="361" fg:w="1"/><text x="29.1300%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="28.8800%" y="229" width="0.0800%" height="15" fill="rgb(253,99,13)" fg:x="361" fg:w="1"/><text x="29.1300%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="29.0400%" y="245" width="0.3200%" height="15" fill="rgb(244,48,7)" fg:x="363" fg:w="4"/><text x="29.2900%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="29.0400%" y="229" width="0.3200%" height="15" fill="rgb(244,217,54)" fg:x="363" fg:w="4"/><text x="29.2900%" y="239.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="29.0400%" y="213" width="0.3200%" height="15" fill="rgb(224,15,18)" fg:x="363" fg:w="4"/><text x="29.2900%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (12 samples, 0.96%)</title><rect x="28.4800%" y="309" width="0.9600%" height="15" fill="rgb(244,99,12)" fg:x="356" fg:w="12"/><text x="28.7300%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (12 samples, 0.96%)</title><rect x="28.4800%" y="293" width="0.9600%" height="15" fill="rgb(233,226,8)" fg:x="356" fg:w="12"/><text x="28.7300%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (12 samples, 0.96%)</title><rect x="28.4800%" y="277" width="0.9600%" height="15" fill="rgb(229,211,3)" fg:x="356" fg:w="12"/><text x="28.7300%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (6 samples, 0.48%)</title><rect x="28.9600%" y="261" width="0.4800%" height="15" fill="rgb(216,140,21)" fg:x="362" fg:w="6"/><text x="29.2100%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="29.3600%" y="245" width="0.0800%" height="15" fill="rgb(234,122,30)" fg:x="367" fg:w="1"/><text x="29.6100%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="29.4400%" y="261" width="0.0800%" height="15" fill="rgb(236,25,46)" fg:x="368" fg:w="1"/><text x="29.6900%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.4400%" y="245" width="0.0800%" height="15" fill="rgb(217,52,54)" fg:x="368" fg:w="1"/><text x="29.6900%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="29.5200%" y="261" width="0.1600%" height="15" fill="rgb(222,29,26)" fg:x="369" fg:w="2"/><text x="29.7700%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="29.6000%" y="245" width="0.0800%" height="15" fill="rgb(216,177,29)" fg:x="370" fg:w="1"/><text x="29.8500%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.6000%" y="229" width="0.0800%" height="15" fill="rgb(247,136,51)" fg:x="370" fg:w="1"/><text x="29.8500%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="29.6000%" y="213" width="0.0800%" height="15" fill="rgb(231,47,47)" fg:x="370" fg:w="1"/><text x="29.8500%" y="223.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="29.6800%" y="261" width="0.0800%" height="15" fill="rgb(211,192,36)" fg:x="371" fg:w="1"/><text x="29.9300%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (5 samples, 0.40%)</title><rect x="29.4400%" y="277" width="0.4000%" height="15" fill="rgb(229,156,32)" fg:x="368" fg:w="5"/><text x="29.6900%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="29.7600%" y="261" width="0.0800%" height="15" fill="rgb(248,213,20)" fg:x="372" fg:w="1"/><text x="30.0100%" y="271.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (199 samples, 15.92%)</title><rect x="14.0000%" y="357" width="15.9200%" height="15" fill="rgb(217,64,7)" fg:x="175" fg:w="199"/><text x="14.2500%" y="367.50">&lt;regex::regex::string::R..</text></g><g><title>regex::builders::Builder::build_one_string (198 samples, 15.84%)</title><rect x="14.0800%" y="341" width="15.8400%" height="15" fill="rgb(232,142,8)" fg:x="176" fg:w="198"/><text x="14.3300%" y="351.50">regex::builders::Builder..</text></g><g><title>regex_automata::meta::regex::Builder::build (198 samples, 15.84%)</title><rect x="14.0800%" y="325" width="15.8400%" height="15" fill="rgb(224,92,44)" fg:x="176" fg:w="198"/><text x="14.3300%" y="335.50">regex_automata::meta::re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.48%)</title><rect x="29.4400%" y="309" width="0.4800%" height="15" fill="rgb(214,169,17)" fg:x="368" fg:w="6"/><text x="29.6900%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.48%)</title><rect x="29.4400%" y="293" width="0.4800%" height="15" fill="rgb(210,59,37)" fg:x="368" fg:w="6"/><text x="29.6900%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="29.8400%" y="277" width="0.0800%" height="15" fill="rgb(214,116,48)" fg:x="373" fg:w="1"/><text x="30.0900%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.9200%" y="341" width="0.0800%" height="15" fill="rgb(244,191,6)" fg:x="374" fg:w="1"/><text x="30.1700%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="30.0000%" y="309" width="0.0800%" height="15" fill="rgb(241,50,52)" fg:x="375" fg:w="1"/><text x="30.2500%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="30.0000%" y="293" width="0.0800%" height="15" fill="rgb(236,75,39)" fg:x="375" fg:w="1"/><text x="30.2500%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="30.0000%" y="325" width="0.1600%" height="15" fill="rgb(236,99,0)" fg:x="375" fg:w="2"/><text x="30.2500%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="30.0800%" y="309" width="0.0800%" height="15" fill="rgb(207,202,15)" fg:x="376" fg:w="1"/><text x="30.3300%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="30.0800%" y="293" width="0.0800%" height="15" fill="rgb(233,207,14)" fg:x="376" fg:w="1"/><text x="30.3300%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="30.0800%" y="277" width="0.0800%" height="15" fill="rgb(226,27,51)" fg:x="376" fg:w="1"/><text x="30.3300%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="30.1600%" y="293" width="0.0800%" height="15" fill="rgb(206,104,42)" fg:x="377" fg:w="1"/><text x="30.4100%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.40%)</title><rect x="29.9200%" y="357" width="0.4000%" height="15" fill="rgb(212,225,4)" fg:x="374" fg:w="5"/><text x="30.1700%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="30.0000%" y="341" width="0.3200%" height="15" fill="rgb(233,96,42)" fg:x="375" fg:w="4"/><text x="30.2500%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="30.1600%" y="325" width="0.1600%" height="15" fill="rgb(229,21,32)" fg:x="377" fg:w="2"/><text x="30.4100%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="30.1600%" y="309" width="0.1600%" height="15" fill="rgb(226,216,24)" fg:x="377" fg:w="2"/><text x="30.4100%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="30.2400%" y="293" width="0.0800%" height="15" fill="rgb(221,163,17)" fg:x="378" fg:w="1"/><text x="30.4900%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="31.0400%" y="277" width="0.0800%" height="15" fill="rgb(216,216,42)" fg:x="388" fg:w="1"/><text x="31.2900%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.0400%" y="261" width="0.0800%" height="15" fill="rgb(240,118,7)" fg:x="388" fg:w="1"/><text x="31.2900%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="31.0400%" y="245" width="0.0800%" height="15" fill="rgb(221,67,37)" fg:x="388" fg:w="1"/><text x="31.2900%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.24%)</title><rect x="31.1200%" y="277" width="0.2400%" height="15" fill="rgb(241,32,44)" fg:x="389" fg:w="3"/><text x="31.3700%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="31.3600%" y="277" width="0.1600%" height="15" fill="rgb(235,204,43)" fg:x="392" fg:w="2"/><text x="31.6100%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (16 samples, 1.28%)</title><rect x="30.3200%" y="293" width="1.2800%" height="15" fill="rgb(213,116,10)" fg:x="379" fg:w="16"/><text x="30.5700%" y="303.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="31.5200%" y="277" width="0.0800%" height="15" fill="rgb(239,15,48)" fg:x="394" fg:w="1"/><text x="31.7700%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="31.5200%" y="261" width="0.0800%" height="15" fill="rgb(207,123,36)" fg:x="394" fg:w="1"/><text x="31.7700%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.5200%" y="245" width="0.0800%" height="15" fill="rgb(209,103,30)" fg:x="394" fg:w="1"/><text x="31.7700%" y="255.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (227 samples, 18.16%)</title><rect x="13.5200%" y="373" width="18.1600%" height="15" fill="rgb(238,100,19)" fg:x="169" fg:w="227"/><text x="13.7700%" y="383.50">indefinite::helper::Helper::..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (17 samples, 1.36%)</title><rect x="30.3200%" y="357" width="1.3600%" height="15" fill="rgb(244,30,14)" fg:x="379" fg:w="17"/><text x="30.5700%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (17 samples, 1.36%)</title><rect x="30.3200%" y="341" width="1.3600%" height="15" fill="rgb(249,174,6)" fg:x="379" fg:w="17"/><text x="30.5700%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (17 samples, 1.36%)</title><rect x="30.3200%" y="325" width="1.3600%" height="15" fill="rgb(235,213,41)" fg:x="379" fg:w="17"/><text x="30.5700%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (17 samples, 1.36%)</title><rect x="30.3200%" y="309" width="1.3600%" height="15" fill="rgb(213,118,6)" fg:x="379" fg:w="17"/><text x="30.5700%" y="319.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="31.6000%" y="293" width="0.0800%" height="15" fill="rgb(235,44,51)" fg:x="395" fg:w="1"/><text x="31.8500%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="31.9200%" y="277" width="0.0800%" height="15" fill="rgb(217,9,53)" fg:x="399" fg:w="1"/><text x="32.1700%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="31.9200%" y="309" width="0.1600%" height="15" fill="rgb(237,172,34)" fg:x="399" fg:w="2"/><text x="32.1700%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="31.9200%" y="293" width="0.1600%" height="15" fill="rgb(206,206,11)" fg:x="399" fg:w="2"/><text x="32.1700%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.0000%" y="277" width="0.0800%" height="15" fill="rgb(214,149,29)" fg:x="400" fg:w="1"/><text x="32.2500%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.0800%" y="309" width="0.0800%" height="15" fill="rgb(208,123,3)" fg:x="401" fg:w="1"/><text x="32.3300%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="32.1600%" y="277" width="0.0800%" height="15" fill="rgb(229,126,4)" fg:x="402" fg:w="1"/><text x="32.4100%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="32.1600%" y="261" width="0.0800%" height="15" fill="rgb(222,92,36)" fg:x="402" fg:w="1"/><text x="32.4100%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.1600%" y="245" width="0.0800%" height="15" fill="rgb(216,39,41)" fg:x="402" fg:w="1"/><text x="32.4100%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="32.1600%" y="229" width="0.0800%" height="15" fill="rgb(253,127,28)" fg:x="402" fg:w="1"/><text x="32.4100%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="32.1600%" y="309" width="0.2400%" height="15" fill="rgb(249,152,51)" fg:x="402" fg:w="3"/><text x="32.4100%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="32.1600%" y="293" width="0.2400%" height="15" fill="rgb(209,123,42)" fg:x="402" fg:w="3"/><text x="32.4100%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="32.2400%" y="277" width="0.1600%" height="15" fill="rgb(241,118,22)" fg:x="403" fg:w="2"/><text x="32.4900%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="32.2400%" y="261" width="0.1600%" height="15" fill="rgb(208,25,7)" fg:x="403" fg:w="2"/><text x="32.4900%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="32.3200%" y="245" width="0.0800%" height="15" fill="rgb(243,144,39)" fg:x="404" fg:w="1"/><text x="32.5700%" y="255.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="32.4000%" y="309" width="0.0800%" height="15" fill="rgb(250,50,5)" fg:x="405" fg:w="1"/><text x="32.6500%" y="319.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="32.5600%" y="293" width="0.1600%" height="15" fill="rgb(207,67,11)" fg:x="407" fg:w="2"/><text x="32.8100%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.7200%" y="277" width="0.0800%" height="15" fill="rgb(245,204,40)" fg:x="409" fg:w="1"/><text x="32.9700%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (18 samples, 1.44%)</title><rect x="32.7200%" y="293" width="1.4400%" height="15" fill="rgb(238,228,24)" fg:x="409" fg:w="18"/><text x="32.9700%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (17 samples, 1.36%)</title><rect x="32.8000%" y="277" width="1.3600%" height="15" fill="rgb(217,116,22)" fg:x="410" fg:w="17"/><text x="33.0500%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="34.1600%" y="293" width="0.0800%" height="15" fill="rgb(234,98,12)" fg:x="427" fg:w="1"/><text x="34.4100%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="34.1600%" y="277" width="0.0800%" height="15" fill="rgb(242,170,50)" fg:x="427" fg:w="1"/><text x="34.4100%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="34.1600%" y="261" width="0.0800%" height="15" fill="rgb(235,7,5)" fg:x="427" fg:w="1"/><text x="34.4100%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.1600%" y="245" width="0.0800%" height="15" fill="rgb(241,114,28)" fg:x="427" fg:w="1"/><text x="34.4100%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="34.2400%" y="293" width="0.4800%" height="15" fill="rgb(246,112,42)" fg:x="428" fg:w="6"/><text x="34.4900%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="34.3200%" y="277" width="0.4000%" height="15" fill="rgb(248,228,14)" fg:x="429" fg:w="5"/><text x="34.5700%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.2000%" y="261" width="0.0800%" height="15" fill="rgb(208,133,18)" fg:x="440" fg:w="1"/><text x="35.4500%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="35.2800%" y="261" width="0.2400%" height="15" fill="rgb(207,35,49)" fg:x="441" fg:w="3"/><text x="35.5300%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="35.2800%" y="245" width="0.2400%" height="15" fill="rgb(205,68,36)" fg:x="441" fg:w="3"/><text x="35.5300%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="35.3600%" y="229" width="0.1600%" height="15" fill="rgb(245,62,40)" fg:x="442" fg:w="2"/><text x="35.6100%" y="239.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="35.3600%" y="213" width="0.1600%" height="15" fill="rgb(228,27,24)" fg:x="442" fg:w="2"/><text x="35.6100%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (8 samples, 0.64%)</title><rect x="35.5200%" y="261" width="0.6400%" height="15" fill="rgb(253,19,12)" fg:x="444" fg:w="8"/><text x="35.7700%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (4 samples, 0.32%)</title><rect x="35.8400%" y="245" width="0.3200%" height="15" fill="rgb(232,28,20)" fg:x="448" fg:w="4"/><text x="36.0900%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="36.0800%" y="229" width="0.0800%" height="15" fill="rgb(218,35,51)" fg:x="451" fg:w="1"/><text x="36.3300%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="36.0800%" y="213" width="0.0800%" height="15" fill="rgb(212,90,40)" fg:x="451" fg:w="1"/><text x="36.3300%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="36.0800%" y="197" width="0.0800%" height="15" fill="rgb(220,172,12)" fg:x="451" fg:w="1"/><text x="36.3300%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (14 samples, 1.12%)</title><rect x="36.2400%" y="245" width="1.1200%" height="15" fill="rgb(226,159,20)" fg:x="453" fg:w="14"/><text x="36.4900%" y="255.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (14 samples, 1.12%)</title><rect x="36.2400%" y="229" width="1.1200%" height="15" fill="rgb(234,205,16)" fg:x="453" fg:w="14"/><text x="36.4900%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (16 samples, 1.28%)</title><rect x="36.1600%" y="261" width="1.2800%" height="15" fill="rgb(207,9,39)" fg:x="452" fg:w="16"/><text x="36.4100%" y="271.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="37.3600%" y="245" width="0.0800%" height="15" fill="rgb(249,143,15)" fg:x="467" fg:w="1"/><text x="37.6100%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (35 samples, 2.80%)</title><rect x="34.7200%" y="293" width="2.8000%" height="15" fill="rgb(253,133,29)" fg:x="434" fg:w="35"/><text x="34.9700%" y="303.50">re..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (35 samples, 2.80%)</title><rect x="34.7200%" y="277" width="2.8000%" height="15" fill="rgb(221,187,0)" fg:x="434" fg:w="35"/><text x="34.9700%" y="287.50">re..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="37.4400%" y="261" width="0.0800%" height="15" fill="rgb(205,204,26)" fg:x="468" fg:w="1"/><text x="37.6900%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="37.4400%" y="245" width="0.0800%" height="15" fill="rgb(224,68,54)" fg:x="468" fg:w="1"/><text x="37.6900%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.4400%" y="229" width="0.0800%" height="15" fill="rgb(209,67,4)" fg:x="468" fg:w="1"/><text x="37.6900%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.4400%" y="213" width="0.0800%" height="15" fill="rgb(228,229,18)" fg:x="468" fg:w="1"/><text x="37.6900%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="37.5200%" y="261" width="0.0800%" height="15" fill="rgb(231,89,13)" fg:x="469" fg:w="1"/><text x="37.7700%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="37.6000%" y="245" width="0.0800%" height="15" fill="rgb(210,182,18)" fg:x="470" fg:w="1"/><text x="37.8500%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="37.6000%" y="229" width="0.0800%" height="15" fill="rgb(240,105,2)" fg:x="470" fg:w="1"/><text x="37.8500%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.6000%" y="213" width="0.0800%" height="15" fill="rgb(207,170,50)" fg:x="470" fg:w="1"/><text x="37.8500%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.6000%" y="197" width="0.0800%" height="15" fill="rgb(232,133,24)" fg:x="470" fg:w="1"/><text x="37.8500%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="37.6800%" y="229" width="0.0800%" height="15" fill="rgb(235,166,27)" fg:x="471" fg:w="1"/><text x="37.9300%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="37.8400%" y="197" width="0.1600%" height="15" fill="rgb(209,19,13)" fg:x="473" fg:w="2"/><text x="38.0900%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="37.9200%" y="181" width="0.0800%" height="15" fill="rgb(226,79,39)" fg:x="474" fg:w="1"/><text x="38.1700%" y="191.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.64%)</title><rect x="39.6800%" y="181" width="0.6400%" height="15" fill="rgb(222,163,10)" fg:x="496" fg:w="8"/><text x="39.9300%" y="191.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="40.3200%" y="181" width="0.1600%" height="15" fill="rgb(214,44,19)" fg:x="504" fg:w="2"/><text x="40.5700%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (7 samples, 0.56%)</title><rect x="40.4800%" y="181" width="0.5600%" height="15" fill="rgb(210,217,13)" fg:x="506" fg:w="7"/><text x="40.7300%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="40.8000%" y="165" width="0.2400%" height="15" fill="rgb(237,61,54)" fg:x="510" fg:w="3"/><text x="41.0500%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="40.8000%" y="149" width="0.2400%" height="15" fill="rgb(226,184,24)" fg:x="510" fg:w="3"/><text x="41.0500%" y="159.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="40.8000%" y="133" width="0.2400%" height="15" fill="rgb(223,226,4)" fg:x="510" fg:w="3"/><text x="41.0500%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.24%)</title><rect x="41.0400%" y="181" width="0.2400%" height="15" fill="rgb(210,26,41)" fg:x="513" fg:w="3"/><text x="41.2900%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="41.2000%" y="165" width="0.0800%" height="15" fill="rgb(220,221,6)" fg:x="515" fg:w="1"/><text x="41.4500%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.2000%" y="149" width="0.0800%" height="15" fill="rgb(225,89,49)" fg:x="515" fg:w="1"/><text x="41.4500%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="41.2000%" y="133" width="0.0800%" height="15" fill="rgb(218,70,45)" fg:x="515" fg:w="1"/><text x="41.4500%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.6800%" y="149" width="0.0800%" height="15" fill="rgb(238,166,21)" fg:x="521" fg:w="1"/><text x="41.9300%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.7600%" y="117" width="0.0800%" height="15" fill="rgb(224,141,44)" fg:x="522" fg:w="1"/><text x="42.0100%" y="127.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="41.8400%" y="117" width="0.0800%" height="15" fill="rgb(230,12,49)" fg:x="523" fg:w="1"/><text x="42.0900%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="41.7600%" y="149" width="0.4000%" height="15" fill="rgb(212,174,12)" fg:x="522" fg:w="5"/><text x="42.0100%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="41.7600%" y="133" width="0.4000%" height="15" fill="rgb(246,67,9)" fg:x="522" fg:w="5"/><text x="42.0100%" y="143.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="41.9200%" y="117" width="0.2400%" height="15" fill="rgb(239,35,23)" fg:x="524" fg:w="3"/><text x="42.1700%" y="127.50"></text></g><g><title>__libc_malloc (6 samples, 0.48%)</title><rect x="42.8000%" y="133" width="0.4800%" height="15" fill="rgb(211,167,0)" fg:x="535" fg:w="6"/><text x="43.0500%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (26 samples, 2.08%)</title><rect x="41.2800%" y="181" width="2.0800%" height="15" fill="rgb(225,119,45)" fg:x="516" fg:w="26"/><text x="41.5300%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (23 samples, 1.84%)</title><rect x="41.5200%" y="165" width="1.8400%" height="15" fill="rgb(210,162,6)" fg:x="519" fg:w="23"/><text x="41.7700%" y="175.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (15 samples, 1.20%)</title><rect x="42.1600%" y="149" width="1.2000%" height="15" fill="rgb(208,118,35)" fg:x="527" fg:w="15"/><text x="42.4100%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="43.2800%" y="133" width="0.0800%" height="15" fill="rgb(239,4,53)" fg:x="541" fg:w="1"/><text x="43.5300%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.2800%" y="117" width="0.0800%" height="15" fill="rgb(213,130,21)" fg:x="541" fg:w="1"/><text x="43.5300%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.2800%" y="101" width="0.0800%" height="15" fill="rgb(235,148,0)" fg:x="541" fg:w="1"/><text x="43.5300%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="43.2800%" y="85" width="0.0800%" height="15" fill="rgb(244,224,18)" fg:x="541" fg:w="1"/><text x="43.5300%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="43.3600%" y="165" width="0.0800%" height="15" fill="rgb(211,214,4)" fg:x="542" fg:w="1"/><text x="43.6100%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.3600%" y="149" width="0.0800%" height="15" fill="rgb(206,119,25)" fg:x="542" fg:w="1"/><text x="43.6100%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.3600%" y="133" width="0.0800%" height="15" fill="rgb(243,93,47)" fg:x="542" fg:w="1"/><text x="43.6100%" y="143.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="43.4400%" y="149" width="0.1600%" height="15" fill="rgb(224,194,6)" fg:x="543" fg:w="2"/><text x="43.6900%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (98 samples, 7.84%)</title><rect x="43.3600%" y="181" width="7.8400%" height="15" fill="rgb(243,229,6)" fg:x="542" fg:w="98"/><text x="43.6100%" y="191.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (97 samples, 7.76%)</title><rect x="43.4400%" y="165" width="7.7600%" height="15" fill="rgb(207,23,50)" fg:x="543" fg:w="97"/><text x="43.6900%" y="175.50">regex_autom..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (95 samples, 7.60%)</title><rect x="43.6000%" y="149" width="7.6000%" height="15" fill="rgb(253,192,32)" fg:x="545" fg:w="95"/><text x="43.8500%" y="159.50">alloc::vec..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="51.2000%" y="181" width="0.0800%" height="15" fill="rgb(213,21,6)" fg:x="640" fg:w="1"/><text x="51.4500%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.2000%" y="165" width="0.0800%" height="15" fill="rgb(243,151,13)" fg:x="640" fg:w="1"/><text x="51.4500%" y="175.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (2 samples, 0.16%)</title><rect x="51.2800%" y="181" width="0.1600%" height="15" fill="rgb(233,165,41)" fg:x="641" fg:w="2"/><text x="51.5300%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.4000%" y="133" width="0.0800%" height="15" fill="rgb(246,176,45)" fg:x="655" fg:w="1"/><text x="52.6500%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (188 samples, 15.04%)</title><rect x="37.5200%" y="277" width="15.0400%" height="15" fill="rgb(217,170,52)" fg:x="469" fg:w="188"/><text x="37.7700%" y="287.50">&lt;core::iter::adapters::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (187 samples, 14.96%)</title><rect x="37.6000%" y="261" width="14.9600%" height="15" fill="rgb(214,203,54)" fg:x="470" fg:w="187"/><text x="37.8500%" y="271.50">regex_automata::nfa::th..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (186 samples, 14.88%)</title><rect x="37.6800%" y="245" width="14.8800%" height="15" fill="rgb(248,215,49)" fg:x="471" fg:w="186"/><text x="37.9300%" y="255.50">regex_automata::nfa::th..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (185 samples, 14.80%)</title><rect x="37.7600%" y="229" width="14.8000%" height="15" fill="rgb(208,46,10)" fg:x="472" fg:w="185"/><text x="38.0100%" y="239.50">regex_automata::nfa::th..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (185 samples, 14.80%)</title><rect x="37.7600%" y="213" width="14.8000%" height="15" fill="rgb(254,5,31)" fg:x="472" fg:w="185"/><text x="38.0100%" y="223.50">regex_automata::nfa::th..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (182 samples, 14.56%)</title><rect x="38.0000%" y="197" width="14.5600%" height="15" fill="rgb(222,104,33)" fg:x="475" fg:w="182"/><text x="38.2500%" y="207.50">regex_automata::nfa::t..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (14 samples, 1.12%)</title><rect x="51.4400%" y="181" width="1.1200%" height="15" fill="rgb(248,49,16)" fg:x="643" fg:w="14"/><text x="51.6900%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.64%)</title><rect x="51.9200%" y="165" width="0.6400%" height="15" fill="rgb(232,198,41)" fg:x="649" fg:w="8"/><text x="52.1700%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="52.3200%" y="149" width="0.2400%" height="15" fill="rgb(214,125,3)" fg:x="654" fg:w="3"/><text x="52.5700%" y="159.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="52.4800%" y="133" width="0.0800%" height="15" fill="rgb(229,220,28)" fg:x="656" fg:w="1"/><text x="52.7300%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="52.5600%" y="277" width="0.1600%" height="15" fill="rgb(222,64,37)" fg:x="657" fg:w="2"/><text x="52.8100%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="52.5600%" y="261" width="0.1600%" height="15" fill="rgb(249,184,13)" fg:x="657" fg:w="2"/><text x="52.8100%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.6400%" y="245" width="0.0800%" height="15" fill="rgb(252,176,6)" fg:x="658" fg:w="1"/><text x="52.8900%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.6400%" y="229" width="0.0800%" height="15" fill="rgb(228,153,7)" fg:x="658" fg:w="1"/><text x="52.8900%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="53.0400%" y="261" width="0.0800%" height="15" fill="rgb(242,193,5)" fg:x="663" fg:w="1"/><text x="53.2900%" y="271.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="53.1200%" y="261" width="0.2400%" height="15" fill="rgb(232,140,9)" fg:x="664" fg:w="3"/><text x="53.3700%" y="271.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="54.0800%" y="213" width="0.0800%" height="15" fill="rgb(213,222,16)" fg:x="676" fg:w="1"/><text x="54.3300%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="54.0800%" y="197" width="0.0800%" height="15" fill="rgb(222,75,50)" fg:x="676" fg:w="1"/><text x="54.3300%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (12 samples, 0.96%)</title><rect x="53.3600%" y="261" width="0.9600%" height="15" fill="rgb(205,180,2)" fg:x="667" fg:w="12"/><text x="53.6100%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="54.0000%" y="245" width="0.3200%" height="15" fill="rgb(216,34,7)" fg:x="675" fg:w="4"/><text x="54.2500%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="54.0800%" y="229" width="0.2400%" height="15" fill="rgb(253,16,32)" fg:x="676" fg:w="3"/><text x="54.3300%" y="239.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="54.1600%" y="213" width="0.1600%" height="15" fill="rgb(208,97,28)" fg:x="677" fg:w="2"/><text x="54.4100%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.48%)</title><rect x="54.3200%" y="261" width="0.4800%" height="15" fill="rgb(225,92,11)" fg:x="679" fg:w="6"/><text x="54.5700%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="54.8000%" y="261" width="0.1600%" height="15" fill="rgb(243,38,12)" fg:x="685" fg:w="2"/><text x="55.0500%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="54.9600%" y="245" width="0.0800%" height="15" fill="rgb(208,139,16)" fg:x="687" fg:w="1"/><text x="55.2100%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.9600%" y="229" width="0.0800%" height="15" fill="rgb(227,24,9)" fg:x="687" fg:w="1"/><text x="55.2100%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="54.9600%" y="213" width="0.0800%" height="15" fill="rgb(206,62,11)" fg:x="687" fg:w="1"/><text x="55.2100%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (30 samples, 2.40%)</title><rect x="52.7200%" y="277" width="2.4000%" height="15" fill="rgb(228,134,27)" fg:x="659" fg:w="30"/><text x="52.9700%" y="287.50">re..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="54.9600%" y="261" width="0.1600%" height="15" fill="rgb(205,55,33)" fg:x="687" fg:w="2"/><text x="55.2100%" y="271.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="55.0400%" y="245" width="0.0800%" height="15" fill="rgb(243,75,43)" fg:x="688" fg:w="1"/><text x="55.2900%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (284 samples, 22.72%)</title><rect x="32.4800%" y="309" width="22.7200%" height="15" fill="rgb(223,27,42)" fg:x="406" fg:w="284"/><text x="32.7300%" y="319.50">regex_automata::meta::strategy::new</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (221 samples, 17.68%)</title><rect x="37.5200%" y="293" width="17.6800%" height="15" fill="rgb(232,189,33)" fg:x="469" fg:w="221"/><text x="37.7700%" y="303.50">regex_automata::nfa::thomps..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="55.1200%" y="277" width="0.0800%" height="15" fill="rgb(210,9,39)" fg:x="689" fg:w="1"/><text x="55.3700%" y="287.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="55.4400%" y="261" width="0.0800%" height="15" fill="rgb(242,85,26)" fg:x="693" fg:w="1"/><text x="55.6900%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="55.4400%" y="245" width="0.0800%" height="15" fill="rgb(248,44,4)" fg:x="693" fg:w="1"/><text x="55.6900%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.4400%" y="229" width="0.0800%" height="15" fill="rgb(250,96,46)" fg:x="693" fg:w="1"/><text x="55.6900%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.4400%" y="213" width="0.0800%" height="15" fill="rgb(229,116,26)" fg:x="693" fg:w="1"/><text x="55.6900%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="55.5200%" y="245" width="0.0800%" height="15" fill="rgb(246,94,34)" fg:x="694" fg:w="1"/><text x="55.7700%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="55.5200%" y="229" width="0.0800%" height="15" fill="rgb(251,73,21)" fg:x="694" fg:w="1"/><text x="55.7700%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="55.5200%" y="261" width="0.1600%" height="15" fill="rgb(254,121,25)" fg:x="694" fg:w="2"/><text x="55.7700%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="55.6000%" y="245" width="0.0800%" height="15" fill="rgb(215,161,49)" fg:x="695" fg:w="1"/><text x="55.8500%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="55.6000%" y="229" width="0.0800%" height="15" fill="rgb(221,43,13)" fg:x="695" fg:w="1"/><text x="55.8500%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (8 samples, 0.64%)</title><rect x="55.2000%" y="277" width="0.6400%" height="15" fill="rgb(249,5,37)" fg:x="690" fg:w="8"/><text x="55.4500%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="55.6800%" y="261" width="0.1600%" height="15" fill="rgb(226,25,44)" fg:x="696" fg:w="2"/><text x="55.9300%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="55.7600%" y="245" width="0.0800%" height="15" fill="rgb(238,189,16)" fg:x="697" fg:w="1"/><text x="56.0100%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.7600%" y="229" width="0.0800%" height="15" fill="rgb(251,186,8)" fg:x="697" fg:w="1"/><text x="56.0100%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.7600%" y="213" width="0.0800%" height="15" fill="rgb(254,34,31)" fg:x="697" fg:w="1"/><text x="56.0100%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (9 samples, 0.72%)</title><rect x="55.2000%" y="309" width="0.7200%" height="15" fill="rgb(225,215,27)" fg:x="690" fg:w="9"/><text x="55.4500%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (9 samples, 0.72%)</title><rect x="55.2000%" y="293" width="0.7200%" height="15" fill="rgb(221,192,48)" fg:x="690" fg:w="9"/><text x="55.4500%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="55.8400%" y="277" width="0.0800%" height="15" fill="rgb(219,137,20)" fg:x="698" fg:w="1"/><text x="56.0900%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.0000%" y="245" width="0.0800%" height="15" fill="rgb(219,84,11)" fg:x="700" fg:w="1"/><text x="56.2500%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.0000%" y="229" width="0.0800%" height="15" fill="rgb(224,10,23)" fg:x="700" fg:w="1"/><text x="56.2500%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="56.0000%" y="213" width="0.0800%" height="15" fill="rgb(248,22,39)" fg:x="700" fg:w="1"/><text x="56.2500%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (5 samples, 0.40%)</title><rect x="55.9200%" y="261" width="0.4000%" height="15" fill="rgb(212,154,20)" fg:x="699" fg:w="5"/><text x="56.1700%" y="271.50"></text></g><g><title>core::slice::sort::merge_sort (3 samples, 0.24%)</title><rect x="56.0800%" y="245" width="0.2400%" height="15" fill="rgb(236,199,50)" fg:x="701" fg:w="3"/><text x="56.3300%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (6 samples, 0.48%)</title><rect x="55.9200%" y="277" width="0.4800%" height="15" fill="rgb(211,9,17)" fg:x="699" fg:w="6"/><text x="56.1700%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="56.3200%" y="261" width="0.0800%" height="15" fill="rgb(243,216,36)" fg:x="704" fg:w="1"/><text x="56.5700%" y="271.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="56.3200%" y="245" width="0.0800%" height="15" fill="rgb(250,2,10)" fg:x="704" fg:w="1"/><text x="56.5700%" y="255.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (307 samples, 24.56%)</title><rect x="31.9200%" y="325" width="24.5600%" height="15" fill="rgb(226,50,48)" fg:x="399" fg:w="307"/><text x="32.1700%" y="335.50">regex_automata::meta::regex::Builder::b..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (7 samples, 0.56%)</title><rect x="55.9200%" y="309" width="0.5600%" height="15" fill="rgb(243,81,16)" fg:x="699" fg:w="7"/><text x="56.1700%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (7 samples, 0.56%)</title><rect x="55.9200%" y="293" width="0.5600%" height="15" fill="rgb(250,14,2)" fg:x="699" fg:w="7"/><text x="56.1700%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="56.4000%" y="277" width="0.0800%" height="15" fill="rgb(233,135,29)" fg:x="705" fg:w="1"/><text x="56.6500%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="56.4000%" y="261" width="0.0800%" height="15" fill="rgb(224,64,43)" fg:x="705" fg:w="1"/><text x="56.6500%" y="271.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (311 samples, 24.88%)</title><rect x="31.6800%" y="357" width="24.8800%" height="15" fill="rgb(238,84,13)" fg:x="396" fg:w="311"/><text x="31.9300%" y="367.50">&lt;regex::regex::string::Regex as core::st..</text></g><g><title>regex::builders::Builder::build_one_string (309 samples, 24.72%)</title><rect x="31.8400%" y="341" width="24.7200%" height="15" fill="rgb(253,48,26)" fg:x="398" fg:w="309"/><text x="32.0900%" y="351.50">regex::builders::Builder::build_one_str..</text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="56.4800%" y="325" width="0.0800%" height="15" fill="rgb(205,223,31)" fg:x="706" fg:w="1"/><text x="56.7300%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="56.5600%" y="309" width="0.0800%" height="15" fill="rgb(221,41,32)" fg:x="707" fg:w="1"/><text x="56.8100%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="56.5600%" y="293" width="0.0800%" height="15" fill="rgb(213,158,31)" fg:x="707" fg:w="1"/><text x="56.8100%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="56.5600%" y="325" width="0.1600%" height="15" fill="rgb(245,126,43)" fg:x="707" fg:w="2"/><text x="56.8100%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="56.6400%" y="309" width="0.0800%" height="15" fill="rgb(227,7,22)" fg:x="708" fg:w="1"/><text x="56.8900%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::OnePass&gt; (1 samples, 0.08%)</title><rect x="56.6400%" y="293" width="0.0800%" height="15" fill="rgb(252,90,44)" fg:x="708" fg:w="1"/><text x="56.8900%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="56.6400%" y="277" width="0.0800%" height="15" fill="rgb(253,91,0)" fg:x="708" fg:w="1"/><text x="56.8900%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="56.7200%" y="309" width="0.1600%" height="15" fill="rgb(252,175,49)" fg:x="709" fg:w="2"/><text x="56.9700%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="56.8000%" y="293" width="0.0800%" height="15" fill="rgb(246,150,1)" fg:x="710" fg:w="1"/><text x="57.0500%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.40%)</title><rect x="56.5600%" y="357" width="0.4000%" height="15" fill="rgb(241,192,25)" fg:x="707" fg:w="5"/><text x="56.8100%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (5 samples, 0.40%)</title><rect x="56.5600%" y="341" width="0.4000%" height="15" fill="rgb(239,187,11)" fg:x="707" fg:w="5"/><text x="56.8100%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="56.7200%" y="325" width="0.2400%" height="15" fill="rgb(218,202,51)" fg:x="709" fg:w="3"/><text x="56.9700%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="56.8800%" y="309" width="0.0800%" height="15" fill="rgb(225,176,8)" fg:x="711" fg:w="1"/><text x="57.1300%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="56.8800%" y="293" width="0.0800%" height="15" fill="rgb(219,122,41)" fg:x="711" fg:w="1"/><text x="57.1300%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="56.9600%" y="341" width="0.0800%" height="15" fill="rgb(248,140,20)" fg:x="712" fg:w="1"/><text x="57.2100%" y="351.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="56.9600%" y="325" width="0.0800%" height="15" fill="rgb(245,41,37)" fg:x="712" fg:w="1"/><text x="57.2100%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="56.9600%" y="309" width="0.0800%" height="15" fill="rgb(235,82,39)" fg:x="712" fg:w="1"/><text x="57.2100%" y="319.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="56.9600%" y="293" width="0.0800%" height="15" fill="rgb(230,108,42)" fg:x="712" fg:w="1"/><text x="57.2100%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="57.6800%" y="261" width="0.2400%" height="15" fill="rgb(215,150,50)" fg:x="721" fg:w="3"/><text x="57.9300%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="57.6800%" y="245" width="0.2400%" height="15" fill="rgb(233,212,5)" fg:x="721" fg:w="3"/><text x="57.9300%" y="255.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="57.6800%" y="229" width="0.2400%" height="15" fill="rgb(245,80,22)" fg:x="721" fg:w="3"/><text x="57.9300%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="57.9200%" y="245" width="0.0800%" height="15" fill="rgb(238,129,16)" fg:x="724" fg:w="1"/><text x="58.1700%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="57.9200%" y="261" width="0.1600%" height="15" fill="rgb(240,19,0)" fg:x="724" fg:w="2"/><text x="58.1700%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="58.0000%" y="245" width="0.0800%" height="15" fill="rgb(232,42,35)" fg:x="725" fg:w="1"/><text x="58.2500%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="58.0000%" y="229" width="0.0800%" height="15" fill="rgb(223,130,24)" fg:x="725" fg:w="1"/><text x="58.2500%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.0000%" y="213" width="0.0800%" height="15" fill="rgb(237,16,22)" fg:x="725" fg:w="1"/><text x="58.2500%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (5 samples, 0.40%)</title><rect x="58.0800%" y="261" width="0.4000%" height="15" fill="rgb(248,192,20)" fg:x="726" fg:w="5"/><text x="58.3300%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.4800%" y="245" width="0.0800%" height="15" fill="rgb(233,167,2)" fg:x="731" fg:w="1"/><text x="58.7300%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (20 samples, 1.60%)</title><rect x="57.0400%" y="277" width="1.6000%" height="15" fill="rgb(252,71,44)" fg:x="713" fg:w="20"/><text x="57.2900%" y="287.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (2 samples, 0.16%)</title><rect x="58.4800%" y="261" width="0.1600%" height="15" fill="rgb(238,37,47)" fg:x="731" fg:w="2"/><text x="58.7300%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="58.5600%" y="245" width="0.0800%" height="15" fill="rgb(214,202,54)" fg:x="732" fg:w="1"/><text x="58.8100%" y="255.50"></text></g><g><title>indefinite::rules::number::Number::check (340 samples, 27.20%)</title><rect x="31.6800%" y="373" width="27.2000%" height="15" fill="rgb(254,165,40)" fg:x="396" fg:w="340"/><text x="31.9300%" y="383.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::is_match_at (24 samples, 1.92%)</title><rect x="56.9600%" y="357" width="1.9200%" height="15" fill="rgb(246,173,38)" fg:x="712" fg:w="24"/><text x="57.2100%" y="367.50">r..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (23 samples, 1.84%)</title><rect x="57.0400%" y="341" width="1.8400%" height="15" fill="rgb(215,3,27)" fg:x="713" fg:w="23"/><text x="57.2900%" y="351.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (23 samples, 1.84%)</title><rect x="57.0400%" y="325" width="1.8400%" height="15" fill="rgb(239,169,51)" fg:x="713" fg:w="23"/><text x="57.2900%" y="335.50">r..</text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (23 samples, 1.84%)</title><rect x="57.0400%" y="309" width="1.8400%" height="15" fill="rgb(212,5,25)" fg:x="713" fg:w="23"/><text x="57.2900%" y="319.50">&lt;..</text></g><g><title>regex_automata::hybrid::dfa::Cache::new (23 samples, 1.84%)</title><rect x="57.0400%" y="293" width="1.8400%" height="15" fill="rgb(243,45,17)" fg:x="713" fg:w="23"/><text x="57.2900%" y="303.50">r..</text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (3 samples, 0.24%)</title><rect x="58.6400%" y="277" width="0.2400%" height="15" fill="rgb(242,97,9)" fg:x="733" fg:w="3"/><text x="58.8900%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="58.7200%" y="261" width="0.1600%" height="15" fill="rgb(228,71,31)" fg:x="734" fg:w="2"/><text x="58.9700%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.8000%" y="245" width="0.0800%" height="15" fill="rgb(252,184,16)" fg:x="735" fg:w="1"/><text x="59.0500%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.8000%" y="229" width="0.0800%" height="15" fill="rgb(236,169,46)" fg:x="735" fg:w="1"/><text x="59.0500%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="59.0400%" y="293" width="0.2400%" height="15" fill="rgb(207,17,47)" fg:x="738" fg:w="3"/><text x="59.2900%" y="303.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="59.0400%" y="277" width="0.2400%" height="15" fill="rgb(206,201,28)" fg:x="738" fg:w="3"/><text x="59.2900%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="59.1200%" y="261" width="0.1600%" height="15" fill="rgb(224,184,23)" fg:x="739" fg:w="2"/><text x="59.3700%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="59.1200%" y="245" width="0.1600%" height="15" fill="rgb(208,139,48)" fg:x="739" fg:w="2"/><text x="59.3700%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="59.2000%" y="229" width="0.0800%" height="15" fill="rgb(208,130,10)" fg:x="740" fg:w="1"/><text x="59.4500%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="59.2000%" y="213" width="0.0800%" height="15" fill="rgb(211,213,45)" fg:x="740" fg:w="1"/><text x="59.4500%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.2000%" y="197" width="0.0800%" height="15" fill="rgb(235,100,30)" fg:x="740" fg:w="1"/><text x="59.4500%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="59.2000%" y="181" width="0.0800%" height="15" fill="rgb(206,144,31)" fg:x="740" fg:w="1"/><text x="59.4500%" y="191.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="59.2800%" y="293" width="0.0800%" height="15" fill="rgb(224,200,26)" fg:x="741" fg:w="1"/><text x="59.5300%" y="303.50"></text></g><g><title>regex_syntax::hir::Properties::union (1 samples, 0.08%)</title><rect x="59.2800%" y="277" width="0.0800%" height="15" fill="rgb(247,104,53)" fg:x="741" fg:w="1"/><text x="59.5300%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.2800%" y="261" width="0.0800%" height="15" fill="rgb(220,14,17)" fg:x="741" fg:w="1"/><text x="59.5300%" y="271.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="59.4400%" y="277" width="0.0800%" height="15" fill="rgb(230,140,40)" fg:x="743" fg:w="1"/><text x="59.6900%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="59.5200%" y="277" width="0.1600%" height="15" fill="rgb(229,2,41)" fg:x="744" fg:w="2"/><text x="59.7700%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (2 samples, 0.16%)</title><rect x="59.5200%" y="261" width="0.1600%" height="15" fill="rgb(232,89,16)" fg:x="744" fg:w="2"/><text x="59.7700%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (10 samples, 0.80%)</title><rect x="59.6800%" y="277" width="0.8000%" height="15" fill="rgb(247,59,52)" fg:x="746" fg:w="10"/><text x="59.9300%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (8 samples, 0.64%)</title><rect x="59.8400%" y="261" width="0.6400%" height="15" fill="rgb(226,110,21)" fg:x="748" fg:w="8"/><text x="60.0900%" y="271.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="60.4000%" y="245" width="0.0800%" height="15" fill="rgb(224,176,43)" fg:x="755" fg:w="1"/><text x="60.6500%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.4000%" y="229" width="0.0800%" height="15" fill="rgb(221,73,6)" fg:x="755" fg:w="1"/><text x="60.6500%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="60.4800%" y="245" width="0.1600%" height="15" fill="rgb(232,78,19)" fg:x="756" fg:w="2"/><text x="60.7300%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="60.4800%" y="229" width="0.1600%" height="15" fill="rgb(233,112,48)" fg:x="756" fg:w="2"/><text x="60.7300%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="60.4800%" y="213" width="0.1600%" height="15" fill="rgb(243,131,47)" fg:x="756" fg:w="2"/><text x="60.7300%" y="223.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="60.4800%" y="197" width="0.1600%" height="15" fill="rgb(226,51,1)" fg:x="756" fg:w="2"/><text x="60.7300%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="60.4800%" y="261" width="0.2400%" height="15" fill="rgb(247,58,7)" fg:x="756" fg:w="3"/><text x="60.7300%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="60.6400%" y="245" width="0.0800%" height="15" fill="rgb(209,7,32)" fg:x="758" fg:w="1"/><text x="60.8900%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="60.6400%" y="229" width="0.0800%" height="15" fill="rgb(209,39,41)" fg:x="758" fg:w="1"/><text x="60.8900%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="60.6400%" y="213" width="0.0800%" height="15" fill="rgb(226,182,46)" fg:x="758" fg:w="1"/><text x="60.8900%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="60.7200%" y="245" width="0.0800%" height="15" fill="rgb(230,219,10)" fg:x="759" fg:w="1"/><text x="60.9700%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.7200%" y="229" width="0.0800%" height="15" fill="rgb(227,175,30)" fg:x="759" fg:w="1"/><text x="60.9700%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.7200%" y="213" width="0.0800%" height="15" fill="rgb(217,2,50)" fg:x="759" fg:w="1"/><text x="60.9700%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="60.8000%" y="245" width="0.2400%" height="15" fill="rgb(229,160,0)" fg:x="760" fg:w="3"/><text x="61.0500%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.9600%" y="229" width="0.0800%" height="15" fill="rgb(207,78,37)" fg:x="762" fg:w="1"/><text x="61.2100%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.9600%" y="213" width="0.0800%" height="15" fill="rgb(225,57,0)" fg:x="762" fg:w="1"/><text x="61.2100%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="60.9600%" y="197" width="0.0800%" height="15" fill="rgb(232,154,2)" fg:x="762" fg:w="1"/><text x="61.2100%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (22 samples, 1.76%)</title><rect x="59.3600%" y="293" width="1.7600%" height="15" fill="rgb(241,212,25)" fg:x="742" fg:w="22"/><text x="59.6100%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (8 samples, 0.64%)</title><rect x="60.4800%" y="277" width="0.6400%" height="15" fill="rgb(226,69,20)" fg:x="756" fg:w="8"/><text x="60.7300%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="60.7200%" y="261" width="0.4000%" height="15" fill="rgb(247,184,54)" fg:x="759" fg:w="5"/><text x="60.9700%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="61.0400%" y="245" width="0.0800%" height="15" fill="rgb(210,145,0)" fg:x="763" fg:w="1"/><text x="61.2900%" y="255.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="61.3600%" y="245" width="0.1600%" height="15" fill="rgb(253,82,12)" fg:x="767" fg:w="2"/><text x="61.6100%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.4400%" y="229" width="0.0800%" height="15" fill="rgb(245,42,11)" fg:x="768" fg:w="1"/><text x="61.6900%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.4400%" y="213" width="0.0800%" height="15" fill="rgb(219,147,32)" fg:x="768" fg:w="1"/><text x="61.6900%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.4400%" y="197" width="0.0800%" height="15" fill="rgb(246,12,7)" fg:x="768" fg:w="1"/><text x="61.6900%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="61.5200%" y="245" width="0.0800%" height="15" fill="rgb(243,50,9)" fg:x="769" fg:w="1"/><text x="61.7700%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="61.6000%" y="229" width="0.3200%" height="15" fill="rgb(219,149,6)" fg:x="770" fg:w="4"/><text x="61.8500%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="61.6000%" y="213" width="0.3200%" height="15" fill="rgb(241,51,42)" fg:x="770" fg:w="4"/><text x="61.8500%" y="223.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="61.6000%" y="197" width="0.3200%" height="15" fill="rgb(226,128,27)" fg:x="770" fg:w="4"/><text x="61.8500%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (11 samples, 0.88%)</title><rect x="61.1200%" y="261" width="0.8800%" height="15" fill="rgb(244,144,4)" fg:x="764" fg:w="11"/><text x="61.3700%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (5 samples, 0.40%)</title><rect x="61.6000%" y="245" width="0.4000%" height="15" fill="rgb(221,4,13)" fg:x="770" fg:w="5"/><text x="61.8500%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="61.9200%" y="229" width="0.0800%" height="15" fill="rgb(208,170,28)" fg:x="774" fg:w="1"/><text x="62.1700%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="61.9200%" y="213" width="0.0800%" height="15" fill="rgb(226,131,13)" fg:x="774" fg:w="1"/><text x="62.1700%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (13 samples, 1.04%)</title><rect x="61.1200%" y="293" width="1.0400%" height="15" fill="rgb(215,72,41)" fg:x="764" fg:w="13"/><text x="61.3700%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (13 samples, 1.04%)</title><rect x="61.1200%" y="277" width="1.0400%" height="15" fill="rgb(243,108,20)" fg:x="764" fg:w="13"/><text x="61.3700%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="62.0000%" y="261" width="0.1600%" height="15" fill="rgb(230,189,17)" fg:x="775" fg:w="2"/><text x="62.2500%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="62.0800%" y="245" width="0.0800%" height="15" fill="rgb(220,50,17)" fg:x="776" fg:w="1"/><text x="62.3300%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="62.1600%" y="245" width="0.0800%" height="15" fill="rgb(248,152,48)" fg:x="777" fg:w="1"/><text x="62.4100%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.1600%" y="229" width="0.0800%" height="15" fill="rgb(244,91,11)" fg:x="777" fg:w="1"/><text x="62.4100%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="62.1600%" y="213" width="0.0800%" height="15" fill="rgb(220,157,5)" fg:x="777" fg:w="1"/><text x="62.4100%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="62.1600%" y="261" width="0.1600%" height="15" fill="rgb(253,137,8)" fg:x="777" fg:w="2"/><text x="62.4100%" y="271.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="62.2400%" y="245" width="0.0800%" height="15" fill="rgb(217,137,51)" fg:x="778" fg:w="1"/><text x="62.4900%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="62.2400%" y="229" width="0.0800%" height="15" fill="rgb(218,209,53)" fg:x="778" fg:w="1"/><text x="62.4900%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.2400%" y="213" width="0.0800%" height="15" fill="rgb(249,137,25)" fg:x="778" fg:w="1"/><text x="62.4900%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="62.2400%" y="197" width="0.0800%" height="15" fill="rgb(239,155,26)" fg:x="778" fg:w="1"/><text x="62.4900%" y="207.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (43 samples, 3.44%)</title><rect x="58.9600%" y="309" width="3.4400%" height="15" fill="rgb(227,85,46)" fg:x="737" fg:w="43"/><text x="59.2100%" y="319.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="62.1600%" y="293" width="0.2400%" height="15" fill="rgb(251,107,43)" fg:x="777" fg:w="3"/><text x="62.4100%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="62.1600%" y="277" width="0.2400%" height="15" fill="rgb(234,170,33)" fg:x="777" fg:w="3"/><text x="62.4100%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="62.3200%" y="261" width="0.0800%" height="15" fill="rgb(206,29,35)" fg:x="779" fg:w="1"/><text x="62.5700%" y="271.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="62.3200%" y="245" width="0.0800%" height="15" fill="rgb(227,138,25)" fg:x="779" fg:w="1"/><text x="62.5700%" y="255.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="62.3200%" y="229" width="0.0800%" height="15" fill="rgb(249,131,35)" fg:x="779" fg:w="1"/><text x="62.5700%" y="239.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (45 samples, 3.60%)</title><rect x="58.8800%" y="341" width="3.6000%" height="15" fill="rgb(239,6,40)" fg:x="736" fg:w="45"/><text x="59.1300%" y="351.50">&lt;reg..</text></g><g><title>regex::builders::Builder::build_one_string (45 samples, 3.60%)</title><rect x="58.8800%" y="325" width="3.6000%" height="15" fill="rgb(246,136,47)" fg:x="736" fg:w="45"/><text x="59.1300%" y="335.50">rege..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="62.4000%" y="309" width="0.0800%" height="15" fill="rgb(253,58,26)" fg:x="780" fg:w="1"/><text x="62.6500%" y="319.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorBuilder::swap_greed (1 samples, 0.08%)</title><rect x="62.4000%" y="293" width="0.0800%" height="15" fill="rgb(237,141,10)" fg:x="780" fg:w="1"/><text x="62.6500%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="62.4800%" y="277" width="0.0800%" height="15" fill="rgb(234,156,12)" fg:x="781" fg:w="1"/><text x="62.7300%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="62.4800%" y="261" width="0.0800%" height="15" fill="rgb(243,224,36)" fg:x="781" fg:w="1"/><text x="62.7300%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="62.4800%" y="293" width="0.1600%" height="15" fill="rgb(205,229,51)" fg:x="781" fg:w="2"/><text x="62.7300%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.5600%" y="277" width="0.0800%" height="15" fill="rgb(223,189,4)" fg:x="782" fg:w="1"/><text x="62.8100%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="62.5600%" y="261" width="0.0800%" height="15" fill="rgb(249,167,54)" fg:x="782" fg:w="1"/><text x="62.8100%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="62.5600%" y="245" width="0.0800%" height="15" fill="rgb(218,34,28)" fg:x="782" fg:w="1"/><text x="62.8100%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (3 samples, 0.24%)</title><rect x="62.4800%" y="309" width="0.2400%" height="15" fill="rgb(232,109,42)" fg:x="781" fg:w="3"/><text x="62.7300%" y="319.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="62.6400%" y="293" width="0.0800%" height="15" fill="rgb(248,214,46)" fg:x="783" fg:w="1"/><text x="62.8900%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (6 samples, 0.48%)</title><rect x="62.4800%" y="341" width="0.4800%" height="15" fill="rgb(244,216,40)" fg:x="781" fg:w="6"/><text x="62.7300%" y="351.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (6 samples, 0.48%)</title><rect x="62.4800%" y="325" width="0.4800%" height="15" fill="rgb(231,226,31)" fg:x="781" fg:w="6"/><text x="62.7300%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (3 samples, 0.24%)</title><rect x="62.7200%" y="309" width="0.2400%" height="15" fill="rgb(238,38,43)" fg:x="784" fg:w="3"/><text x="62.9700%" y="319.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (3 samples, 0.24%)</title><rect x="62.7200%" y="293" width="0.2400%" height="15" fill="rgb(208,88,43)" fg:x="784" fg:w="3"/><text x="62.9700%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="62.8000%" y="277" width="0.1600%" height="15" fill="rgb(205,136,37)" fg:x="785" fg:w="2"/><text x="63.0500%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="62.8000%" y="261" width="0.1600%" height="15" fill="rgb(237,34,14)" fg:x="785" fg:w="2"/><text x="63.0500%" y="271.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="62.8000%" y="245" width="0.1600%" height="15" fill="rgb(236,193,44)" fg:x="785" fg:w="2"/><text x="63.0500%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.0400%" y="277" width="0.0800%" height="15" fill="rgb(231,48,10)" fg:x="788" fg:w="1"/><text x="63.2900%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="62.9600%" y="341" width="0.2400%" height="15" fill="rgb(213,141,34)" fg:x="787" fg:w="3"/><text x="63.2100%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="62.9600%" y="325" width="0.2400%" height="15" fill="rgb(249,130,34)" fg:x="787" fg:w="3"/><text x="63.2100%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="62.9600%" y="309" width="0.2400%" height="15" fill="rgb(219,42,41)" fg:x="787" fg:w="3"/><text x="63.2100%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.24%)</title><rect x="62.9600%" y="293" width="0.2400%" height="15" fill="rgb(224,100,54)" fg:x="787" fg:w="3"/><text x="63.2100%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.1200%" y="277" width="0.0800%" height="15" fill="rgb(229,200,27)" fg:x="789" fg:w="1"/><text x="63.3700%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="63.6000%" y="261" width="0.1600%" height="15" fill="rgb(217,118,10)" fg:x="795" fg:w="2"/><text x="63.8500%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="63.6000%" y="245" width="0.1600%" height="15" fill="rgb(206,22,3)" fg:x="795" fg:w="2"/><text x="63.8500%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="63.6800%" y="229" width="0.0800%" height="15" fill="rgb(232,163,46)" fg:x="796" fg:w="1"/><text x="63.9300%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.7600%" y="261" width="0.0800%" height="15" fill="rgb(206,95,13)" fg:x="797" fg:w="1"/><text x="64.0100%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.7600%" y="245" width="0.0800%" height="15" fill="rgb(253,154,18)" fg:x="797" fg:w="1"/><text x="64.0100%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="63.7600%" y="229" width="0.0800%" height="15" fill="rgb(219,32,23)" fg:x="797" fg:w="1"/><text x="64.0100%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (11 samples, 0.88%)</title><rect x="63.2000%" y="293" width="0.8800%" height="15" fill="rgb(230,191,45)" fg:x="790" fg:w="11"/><text x="63.4500%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (11 samples, 0.88%)</title><rect x="63.2000%" y="277" width="0.8800%" height="15" fill="rgb(229,64,36)" fg:x="790" fg:w="11"/><text x="63.4500%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="63.8400%" y="261" width="0.2400%" height="15" fill="rgb(205,129,25)" fg:x="798" fg:w="3"/><text x="64.0900%" y="271.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (66 samples, 5.28%)</title><rect x="58.8800%" y="357" width="5.2800%" height="15" fill="rgb(254,112,7)" fg:x="736" fg:w="66"/><text x="59.1300%" y="367.50">indefi..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (12 samples, 0.96%)</title><rect x="63.2000%" y="341" width="0.9600%" height="15" fill="rgb(226,53,48)" fg:x="790" fg:w="12"/><text x="63.4500%" y="351.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (12 samples, 0.96%)</title><rect x="63.2000%" y="325" width="0.9600%" height="15" fill="rgb(214,153,38)" fg:x="790" fg:w="12"/><text x="63.4500%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (12 samples, 0.96%)</title><rect x="63.2000%" y="309" width="0.9600%" height="15" fill="rgb(243,101,7)" fg:x="790" fg:w="12"/><text x="63.4500%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="64.0800%" y="293" width="0.0800%" height="15" fill="rgb(240,140,22)" fg:x="801" fg:w="1"/><text x="64.3300%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="64.0800%" y="277" width="0.0800%" height="15" fill="rgb(235,114,2)" fg:x="801" fg:w="1"/><text x="64.3300%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="64.0800%" y="261" width="0.0800%" height="15" fill="rgb(242,59,12)" fg:x="801" fg:w="1"/><text x="64.3300%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.0800%" y="245" width="0.0800%" height="15" fill="rgb(252,134,9)" fg:x="801" fg:w="1"/><text x="64.3300%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.0800%" y="229" width="0.0800%" height="15" fill="rgb(236,4,44)" fg:x="801" fg:w="1"/><text x="64.3300%" y="239.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (640 samples, 51.20%)</title><rect x="13.2000%" y="453" width="51.2000%" height="15" fill="rgb(254,172,41)" fg:x="165" fg:w="640"/><text x="13.4500%" y="463.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::Obse..</text></g><g><title>plugins_core::looking::model::qualify_name (638 samples, 51.04%)</title><rect x="13.3600%" y="437" width="51.0400%" height="15" fill="rgb(244,63,20)" fg:x="167" fg:w="638"/><text x="13.6100%" y="447.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (638 samples, 51.04%)</title><rect x="13.3600%" y="421" width="51.0400%" height="15" fill="rgb(250,73,31)" fg:x="167" fg:w="638"/><text x="13.6100%" y="431.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (638 samples, 51.04%)</title><rect x="13.3600%" y="405" width="51.0400%" height="15" fill="rgb(241,38,36)" fg:x="167" fg:w="638"/><text x="13.6100%" y="415.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (636 samples, 50.88%)</title><rect x="13.5200%" y="389" width="50.8800%" height="15" fill="rgb(245,211,2)" fg:x="169" fg:w="636"/><text x="13.7700%" y="399.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (69 samples, 5.52%)</title><rect x="58.8800%" y="373" width="5.5200%" height="15" fill="rgb(206,120,28)" fg:x="736" fg:w="69"/><text x="59.1300%" y="383.50">indefin..</text></g><g><title>indefinite::irregular::Irregular::check (3 samples, 0.24%)</title><rect x="64.1600%" y="357" width="0.2400%" height="15" fill="rgb(211,59,34)" fg:x="802" fg:w="3"/><text x="64.4100%" y="367.50"></text></g><g><title>kernel::model::EntityRef::into_entry (1 samples, 0.08%)</title><rect x="64.4000%" y="453" width="0.0800%" height="15" fill="rgb(233,168,5)" fg:x="805" fg:w="1"/><text x="64.6500%" y="463.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (643 samples, 51.44%)</title><rect x="13.2000%" y="485" width="51.4400%" height="15" fill="rgb(234,33,13)" fg:x="165" fg:w="643"/><text x="13.4500%" y="495.50">&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (643 samples, 51.44%)</title><rect x="13.2000%" y="469" width="51.4400%" height="15" fill="rgb(231,150,26)" fg:x="165" fg:w="643"/><text x="13.4500%" y="479.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="64.4800%" y="453" width="0.1600%" height="15" fill="rgb(217,191,4)" fg:x="806" fg:w="2"/><text x="64.7300%" y="463.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="64.4800%" y="437" width="0.1600%" height="15" fill="rgb(246,198,38)" fg:x="806" fg:w="2"/><text x="64.7300%" y="447.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (2 samples, 0.16%)</title><rect x="64.4800%" y="421" width="0.1600%" height="15" fill="rgb(245,64,37)" fg:x="806" fg:w="2"/><text x="64.7300%" y="431.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="64.4800%" y="405" width="0.1600%" height="15" fill="rgb(250,30,36)" fg:x="806" fg:w="2"/><text x="64.7300%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="64.4800%" y="389" width="0.1600%" height="15" fill="rgb(217,86,53)" fg:x="806" fg:w="2"/><text x="64.7300%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="64.4800%" y="373" width="0.1600%" height="15" fill="rgb(228,157,16)" fg:x="806" fg:w="2"/><text x="64.7300%" y="383.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="64.5600%" y="357" width="0.0800%" height="15" fill="rgb(217,59,31)" fg:x="807" fg:w="1"/><text x="64.8100%" y="367.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="64.5600%" y="341" width="0.0800%" height="15" fill="rgb(237,138,41)" fg:x="807" fg:w="1"/><text x="64.8100%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="64.5600%" y="325" width="0.0800%" height="15" fill="rgb(227,91,49)" fg:x="807" fg:w="1"/><text x="64.8100%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="64.5600%" y="309" width="0.0800%" height="15" fill="rgb(247,21,44)" fg:x="807" fg:w="1"/><text x="64.8100%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="64.6400%" y="485" width="0.0800%" height="15" fill="rgb(219,210,51)" fg:x="808" fg:w="1"/><text x="64.8900%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="64.6400%" y="469" width="0.0800%" height="15" fill="rgb(209,140,6)" fg:x="808" fg:w="1"/><text x="64.8900%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.6400%" y="453" width="0.0800%" height="15" fill="rgb(221,188,24)" fg:x="808" fg:w="1"/><text x="64.8900%" y="463.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="64.7200%" y="373" width="0.0800%" height="15" fill="rgb(232,154,20)" fg:x="809" fg:w="1"/><text x="64.9700%" y="383.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="64.7200%" y="357" width="0.0800%" height="15" fill="rgb(244,137,50)" fg:x="809" fg:w="1"/><text x="64.9700%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.7200%" y="341" width="0.0800%" height="15" fill="rgb(225,185,43)" fg:x="809" fg:w="1"/><text x="64.9700%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.7200%" y="325" width="0.0800%" height="15" fill="rgb(213,205,38)" fg:x="809" fg:w="1"/><text x="64.9700%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="64.7200%" y="309" width="0.0800%" height="15" fill="rgb(236,73,12)" fg:x="809" fg:w="1"/><text x="64.9700%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.7200%" y="293" width="0.0800%" height="15" fill="rgb(235,219,13)" fg:x="809" fg:w="1"/><text x="64.9700%" y="303.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="64.7200%" y="277" width="0.0800%" height="15" fill="rgb(218,59,36)" fg:x="809" fg:w="1"/><text x="64.9700%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="64.7200%" y="261" width="0.0800%" height="15" fill="rgb(205,110,39)" fg:x="809" fg:w="1"/><text x="64.9700%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.7200%" y="245" width="0.0800%" height="15" fill="rgb(218,206,42)" fg:x="809" fg:w="1"/><text x="64.9700%" y="255.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="64.7200%" y="229" width="0.0800%" height="15" fill="rgb(248,125,24)" fg:x="809" fg:w="1"/><text x="64.9700%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="64.7200%" y="213" width="0.0800%" height="15" fill="rgb(242,28,27)" fg:x="809" fg:w="1"/><text x="64.9700%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="64.7200%" y="197" width="0.0800%" height="15" fill="rgb(216,228,15)" fg:x="809" fg:w="1"/><text x="64.9700%" y="207.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.8000%" y="325" width="0.0800%" height="15" fill="rgb(235,116,46)" fg:x="810" fg:w="1"/><text x="65.0500%" y="335.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="64.8800%" y="293" width="0.0800%" height="15" fill="rgb(224,18,32)" fg:x="811" fg:w="1"/><text x="65.1300%" y="303.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="64.8800%" y="277" width="0.0800%" height="15" fill="rgb(252,5,12)" fg:x="811" fg:w="1"/><text x="65.1300%" y="287.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (4 samples, 0.32%)</title><rect x="64.7200%" y="485" width="0.3200%" height="15" fill="rgb(251,36,5)" fg:x="809" fg:w="4"/><text x="64.9700%" y="495.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (4 samples, 0.32%)</title><rect x="64.7200%" y="469" width="0.3200%" height="15" fill="rgb(217,53,14)" fg:x="809" fg:w="4"/><text x="64.9700%" y="479.50"></text></g><g><title>kernel::model::entry::Entry::scope (4 samples, 0.32%)</title><rect x="64.7200%" y="453" width="0.3200%" height="15" fill="rgb(215,86,45)" fg:x="809" fg:w="4"/><text x="64.9700%" y="463.50"></text></g><g><title>kernel::model::Entity::load_scope (4 samples, 0.32%)</title><rect x="64.7200%" y="437" width="0.3200%" height="15" fill="rgb(242,169,11)" fg:x="809" fg:w="4"/><text x="64.9700%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (4 samples, 0.32%)</title><rect x="64.7200%" y="421" width="0.3200%" height="15" fill="rgb(211,213,45)" fg:x="809" fg:w="4"/><text x="64.9700%" y="431.50"></text></g><g><title>engine::internal::Entities::prepare_entity (4 samples, 0.32%)</title><rect x="64.7200%" y="405" width="0.3200%" height="15" fill="rgb(205,88,11)" fg:x="809" fg:w="4"/><text x="64.9700%" y="415.50"></text></g><g><title>kernel::model::deserialize_entity (4 samples, 0.32%)</title><rect x="64.7200%" y="389" width="0.3200%" height="15" fill="rgb(252,69,26)" fg:x="809" fg:w="4"/><text x="64.9700%" y="399.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="64.8000%" y="373" width="0.2400%" height="15" fill="rgb(246,123,37)" fg:x="810" fg:w="3"/><text x="65.0500%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="64.8000%" y="357" width="0.2400%" height="15" fill="rgb(212,205,5)" fg:x="810" fg:w="3"/><text x="65.0500%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="64.8000%" y="341" width="0.2400%" height="15" fill="rgb(253,148,0)" fg:x="810" fg:w="3"/><text x="65.0500%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="64.8800%" y="325" width="0.1600%" height="15" fill="rgb(239,22,4)" fg:x="811" fg:w="2"/><text x="65.1300%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="64.8800%" y="309" width="0.1600%" height="15" fill="rgb(226,26,53)" fg:x="811" fg:w="2"/><text x="65.1300%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="64.9600%" y="293" width="0.0800%" height="15" fill="rgb(225,229,45)" fg:x="812" fg:w="1"/><text x="65.2100%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.9600%" y="277" width="0.0800%" height="15" fill="rgb(220,60,37)" fg:x="812" fg:w="1"/><text x="65.2100%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="64.9600%" y="261" width="0.0800%" height="15" fill="rgb(217,180,35)" fg:x="812" fg:w="1"/><text x="65.2100%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="64.9600%" y="245" width="0.0800%" height="15" fill="rgb(229,7,53)" fg:x="812" fg:w="1"/><text x="65.2100%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.9600%" y="229" width="0.0800%" height="15" fill="rgb(254,137,3)" fg:x="812" fg:w="1"/><text x="65.2100%" y="239.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="64.9600%" y="213" width="0.0800%" height="15" fill="rgb(215,140,41)" fg:x="812" fg:w="1"/><text x="65.2100%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.9600%" y="197" width="0.0800%" height="15" fill="rgb(250,80,15)" fg:x="812" fg:w="1"/><text x="65.2100%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="65.1200%" y="389" width="0.1600%" height="15" fill="rgb(252,191,6)" fg:x="814" fg:w="2"/><text x="65.3700%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="65.1200%" y="373" width="0.1600%" height="15" fill="rgb(246,217,18)" fg:x="814" fg:w="2"/><text x="65.3700%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="65.1200%" y="421" width="0.2400%" height="15" fill="rgb(223,93,7)" fg:x="814" fg:w="3"/><text x="65.3700%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="65.1200%" y="405" width="0.2400%" height="15" fill="rgb(225,55,52)" fg:x="814" fg:w="3"/><text x="65.3700%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.2800%" y="389" width="0.0800%" height="15" fill="rgb(240,31,24)" fg:x="816" fg:w="1"/><text x="65.5300%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (6 samples, 0.48%)</title><rect x="65.0400%" y="453" width="0.4800%" height="15" fill="rgb(205,56,52)" fg:x="813" fg:w="6"/><text x="65.2900%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="65.0400%" y="437" width="0.4800%" height="15" fill="rgb(246,146,12)" fg:x="813" fg:w="6"/><text x="65.2900%" y="447.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="65.3600%" y="421" width="0.1600%" height="15" fill="rgb(239,84,36)" fg:x="817" fg:w="2"/><text x="65.6100%" y="431.50"></text></g><g><title>plugins_dynlib::DynamicPlugin::tick (1 samples, 0.08%)</title><rect x="65.5200%" y="453" width="0.0800%" height="15" fill="rgb(207,41,40)" fg:x="819" fg:w="1"/><text x="65.7700%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="65.7600%" y="421" width="0.0800%" height="15" fill="rgb(241,179,25)" fg:x="822" fg:w="1"/><text x="66.0100%" y="431.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.08%)</title><rect x="65.7600%" y="405" width="0.0800%" height="15" fill="rgb(210,0,34)" fg:x="822" fg:w="1"/><text x="66.0100%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="65.7600%" y="389" width="0.0800%" height="15" fill="rgb(225,217,29)" fg:x="822" fg:w="1"/><text x="66.0100%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="65.7600%" y="373" width="0.0800%" height="15" fill="rgb(216,191,38)" fg:x="822" fg:w="1"/><text x="66.0100%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="65.7600%" y="357" width="0.0800%" height="15" fill="rgb(232,140,52)" fg:x="822" fg:w="1"/><text x="66.0100%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="65.7600%" y="341" width="0.0800%" height="15" fill="rgb(223,158,51)" fg:x="822" fg:w="1"/><text x="66.0100%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="65.7600%" y="325" width="0.0800%" height="15" fill="rgb(235,29,51)" fg:x="822" fg:w="1"/><text x="66.0100%" y="335.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (2 samples, 0.16%)</title><rect x="65.8400%" y="421" width="0.1600%" height="15" fill="rgb(215,181,18)" fg:x="823" fg:w="2"/><text x="66.0900%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="65.8400%" y="405" width="0.1600%" height="15" fill="rgb(227,125,34)" fg:x="823" fg:w="2"/><text x="66.0900%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.16%)</title><rect x="65.8400%" y="389" width="0.1600%" height="15" fill="rgb(230,197,49)" fg:x="823" fg:w="2"/><text x="66.0900%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="65.9200%" y="373" width="0.0800%" height="15" fill="rgb(239,141,16)" fg:x="824" fg:w="1"/><text x="66.1700%" y="383.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="66.0000%" y="421" width="0.0800%" height="15" fill="rgb(225,105,43)" fg:x="825" fg:w="1"/><text x="66.2500%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="66.0000%" y="405" width="0.0800%" height="15" fill="rgb(214,131,14)" fg:x="825" fg:w="1"/><text x="66.2500%" y="415.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="66.1600%" y="325" width="0.1600%" height="15" fill="rgb(229,177,11)" fg:x="827" fg:w="2"/><text x="66.4100%" y="335.50"></text></g><g><title>kernel::model::Entity::gid (1 samples, 0.08%)</title><rect x="66.3200%" y="245" width="0.0800%" height="15" fill="rgb(231,180,14)" fg:x="829" fg:w="1"/><text x="66.5700%" y="255.50"></text></g><g><title>kernel::model::Props::property_named (1 samples, 0.08%)</title><rect x="66.3200%" y="229" width="0.0800%" height="15" fill="rgb(232,88,2)" fg:x="829" fg:w="1"/><text x="66.5700%" y="239.50"></text></g><g><title>core::iter::adapters::try_process (4 samples, 0.32%)</title><rect x="66.1600%" y="357" width="0.3200%" height="15" fill="rgb(205,220,8)" fg:x="827" fg:w="4"/><text x="66.4100%" y="367.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="66.1600%" y="341" width="0.3200%" height="15" fill="rgb(225,23,53)" fg:x="827" fg:w="4"/><text x="66.4100%" y="351.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (2 samples, 0.16%)</title><rect x="66.3200%" y="325" width="0.1600%" height="15" fill="rgb(213,62,29)" fg:x="829" fg:w="2"/><text x="66.5700%" y="335.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (2 samples, 0.16%)</title><rect x="66.3200%" y="309" width="0.1600%" height="15" fill="rgb(227,75,7)" fg:x="829" fg:w="2"/><text x="66.5700%" y="319.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="66.3200%" y="293" width="0.1600%" height="15" fill="rgb(207,105,14)" fg:x="829" fg:w="2"/><text x="66.5700%" y="303.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="66.3200%" y="277" width="0.1600%" height="15" fill="rgb(245,62,29)" fg:x="829" fg:w="2"/><text x="66.5700%" y="287.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="66.3200%" y="261" width="0.1600%" height="15" fill="rgb(236,202,4)" fg:x="829" fg:w="2"/><text x="66.5700%" y="271.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="66.4000%" y="245" width="0.0800%" height="15" fill="rgb(250,67,1)" fg:x="830" fg:w="1"/><text x="66.6500%" y="255.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="66.4000%" y="229" width="0.0800%" height="15" fill="rgb(253,115,44)" fg:x="830" fg:w="1"/><text x="66.6500%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="66.4000%" y="213" width="0.0800%" height="15" fill="rgb(251,139,18)" fg:x="830" fg:w="1"/><text x="66.6500%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.4000%" y="197" width="0.0800%" height="15" fill="rgb(218,22,32)" fg:x="830" fg:w="1"/><text x="66.6500%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="66.4000%" y="181" width="0.0800%" height="15" fill="rgb(243,53,5)" fg:x="830" fg:w="1"/><text x="66.6500%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.4000%" y="165" width="0.0800%" height="15" fill="rgb(227,56,16)" fg:x="830" fg:w="1"/><text x="66.6500%" y="175.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="66.4000%" y="149" width="0.0800%" height="15" fill="rgb(245,53,0)" fg:x="830" fg:w="1"/><text x="66.6500%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.4000%" y="133" width="0.0800%" height="15" fill="rgb(216,170,35)" fg:x="830" fg:w="1"/><text x="66.6500%" y="143.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="66.4000%" y="117" width="0.0800%" height="15" fill="rgb(211,200,8)" fg:x="830" fg:w="1"/><text x="66.6500%" y="127.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.4000%" y="101" width="0.0800%" height="15" fill="rgb(228,204,44)" fg:x="830" fg:w="1"/><text x="66.6500%" y="111.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="66.4000%" y="85" width="0.0800%" height="15" fill="rgb(214,121,17)" fg:x="830" fg:w="1"/><text x="66.6500%" y="95.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.4800%" y="293" width="0.0800%" height="15" fill="rgb(233,64,38)" fg:x="831" fg:w="1"/><text x="66.7300%" y="303.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (7 samples, 0.56%)</title><rect x="66.1600%" y="373" width="0.5600%" height="15" fill="rgb(253,54,19)" fg:x="827" fg:w="7"/><text x="66.4100%" y="383.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="66.4800%" y="357" width="0.2400%" height="15" fill="rgb(253,94,18)" fg:x="831" fg:w="3"/><text x="66.7300%" y="367.50"></text></g><g><title>kernel::model::Entity::load_scope (3 samples, 0.24%)</title><rect x="66.4800%" y="341" width="0.2400%" height="15" fill="rgb(227,57,52)" fg:x="831" fg:w="3"/><text x="66.7300%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="66.4800%" y="325" width="0.2400%" height="15" fill="rgb(230,228,50)" fg:x="831" fg:w="3"/><text x="66.7300%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="66.4800%" y="309" width="0.2400%" height="15" fill="rgb(217,205,27)" fg:x="831" fg:w="3"/><text x="66.7300%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="66.5600%" y="293" width="0.1600%" height="15" fill="rgb(252,71,50)" fg:x="832" fg:w="2"/><text x="66.8100%" y="303.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="66.5600%" y="277" width="0.1600%" height="15" fill="rgb(209,86,4)" fg:x="832" fg:w="2"/><text x="66.8100%" y="287.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="66.5600%" y="261" width="0.1600%" height="15" fill="rgb(229,94,0)" fg:x="832" fg:w="2"/><text x="66.8100%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="66.5600%" y="245" width="0.1600%" height="15" fill="rgb(252,223,21)" fg:x="832" fg:w="2"/><text x="66.8100%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="66.5600%" y="229" width="0.1600%" height="15" fill="rgb(230,210,4)" fg:x="832" fg:w="2"/><text x="66.8100%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.6400%" y="213" width="0.0800%" height="15" fill="rgb(240,149,38)" fg:x="833" fg:w="1"/><text x="66.8900%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="66.7200%" y="357" width="0.0800%" height="15" fill="rgb(254,105,20)" fg:x="834" fg:w="1"/><text x="66.9700%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.7200%" y="341" width="0.0800%" height="15" fill="rgb(253,87,46)" fg:x="834" fg:w="1"/><text x="66.9700%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.7200%" y="325" width="0.0800%" height="15" fill="rgb(253,116,33)" fg:x="834" fg:w="1"/><text x="66.9700%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="66.7200%" y="309" width="0.0800%" height="15" fill="rgb(229,198,5)" fg:x="834" fg:w="1"/><text x="66.9700%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="66.7200%" y="293" width="0.0800%" height="15" fill="rgb(242,38,37)" fg:x="834" fg:w="1"/><text x="66.9700%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="66.7200%" y="277" width="0.0800%" height="15" fill="rgb(242,69,53)" fg:x="834" fg:w="1"/><text x="66.9700%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="66.7200%" y="261" width="0.0800%" height="15" fill="rgb(249,80,16)" fg:x="834" fg:w="1"/><text x="66.9700%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="66.7200%" y="245" width="0.0800%" height="15" fill="rgb(206,128,11)" fg:x="834" fg:w="1"/><text x="66.9700%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.8000%" y="309" width="0.0800%" height="15" fill="rgb(212,35,20)" fg:x="835" fg:w="1"/><text x="67.0500%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.8000%" y="293" width="0.0800%" height="15" fill="rgb(236,79,13)" fg:x="835" fg:w="1"/><text x="67.0500%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="66.8000%" y="277" width="0.0800%" height="15" fill="rgb(233,123,3)" fg:x="835" fg:w="1"/><text x="67.0500%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="66.8000%" y="261" width="0.0800%" height="15" fill="rgb(214,93,52)" fg:x="835" fg:w="1"/><text x="67.0500%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="66.8000%" y="245" width="0.0800%" height="15" fill="rgb(251,37,40)" fg:x="835" fg:w="1"/><text x="67.0500%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.8000%" y="229" width="0.0800%" height="15" fill="rgb(227,80,54)" fg:x="835" fg:w="1"/><text x="67.0500%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.8000%" y="213" width="0.0800%" height="15" fill="rgb(254,48,11)" fg:x="835" fg:w="1"/><text x="67.0500%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="66.8000%" y="197" width="0.0800%" height="15" fill="rgb(235,193,26)" fg:x="835" fg:w="1"/><text x="67.0500%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="66.8000%" y="181" width="0.0800%" height="15" fill="rgb(229,99,21)" fg:x="835" fg:w="1"/><text x="67.0500%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="66.8000%" y="165" width="0.0800%" height="15" fill="rgb(211,140,41)" fg:x="835" fg:w="1"/><text x="67.0500%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="66.8000%" y="149" width="0.0800%" height="15" fill="rgb(240,227,30)" fg:x="835" fg:w="1"/><text x="67.0500%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.8000%" y="133" width="0.0800%" height="15" fill="rgb(215,224,45)" fg:x="835" fg:w="1"/><text x="67.0500%" y="143.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="66.8000%" y="325" width="0.1600%" height="15" fill="rgb(206,123,31)" fg:x="835" fg:w="2"/><text x="67.0500%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.8800%" y="309" width="0.0800%" height="15" fill="rgb(210,138,16)" fg:x="836" fg:w="1"/><text x="67.1300%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.8800%" y="293" width="0.0800%" height="15" fill="rgb(228,57,28)" fg:x="836" fg:w="1"/><text x="67.1300%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.8800%" y="277" width="0.0800%" height="15" fill="rgb(242,170,10)" fg:x="836" fg:w="1"/><text x="67.1300%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.8800%" y="261" width="0.0800%" height="15" fill="rgb(228,214,39)" fg:x="836" fg:w="1"/><text x="67.1300%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="66.8800%" y="245" width="0.0800%" height="15" fill="rgb(218,179,33)" fg:x="836" fg:w="1"/><text x="67.1300%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="66.8800%" y="229" width="0.0800%" height="15" fill="rgb(235,193,39)" fg:x="836" fg:w="1"/><text x="67.1300%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="66.8800%" y="213" width="0.0800%" height="15" fill="rgb(219,221,36)" fg:x="836" fg:w="1"/><text x="67.1300%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.8800%" y="197" width="0.0800%" height="15" fill="rgb(248,218,19)" fg:x="836" fg:w="1"/><text x="67.1300%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.8800%" y="181" width="0.0800%" height="15" fill="rgb(205,50,9)" fg:x="836" fg:w="1"/><text x="67.1300%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="66.8800%" y="165" width="0.0800%" height="15" fill="rgb(238,81,28)" fg:x="836" fg:w="1"/><text x="67.1300%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="66.8800%" y="149" width="0.0800%" height="15" fill="rgb(235,110,19)" fg:x="836" fg:w="1"/><text x="67.1300%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="66.8800%" y="133" width="0.0800%" height="15" fill="rgb(214,7,14)" fg:x="836" fg:w="1"/><text x="67.1300%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="66.8800%" y="117" width="0.0800%" height="15" fill="rgb(211,77,3)" fg:x="836" fg:w="1"/><text x="67.1300%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.8800%" y="101" width="0.0800%" height="15" fill="rgb(229,5,9)" fg:x="836" fg:w="1"/><text x="67.1300%" y="111.50"></text></g><g><title>&lt;kernel::model::EntityRef as core::convert::From&lt;&amp;kernel::model::EntityPtr&gt;&gt;::from (1 samples, 0.08%)</title><rect x="66.9600%" y="261" width="0.0800%" height="15" fill="rgb(225,90,11)" fg:x="837" fg:w="1"/><text x="67.2100%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.9600%" y="245" width="0.0800%" height="15" fill="rgb(242,56,8)" fg:x="837" fg:w="1"/><text x="67.2100%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.9600%" y="229" width="0.0800%" height="15" fill="rgb(249,212,39)" fg:x="837" fg:w="1"/><text x="67.2100%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="66.9600%" y="213" width="0.0800%" height="15" fill="rgb(236,90,9)" fg:x="837" fg:w="1"/><text x="67.2100%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="66.9600%" y="197" width="0.0800%" height="15" fill="rgb(206,88,35)" fg:x="837" fg:w="1"/><text x="67.2100%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="66.9600%" y="181" width="0.0800%" height="15" fill="rgb(205,126,30)" fg:x="837" fg:w="1"/><text x="67.2100%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.9600%" y="165" width="0.0800%" height="15" fill="rgb(230,176,12)" fg:x="837" fg:w="1"/><text x="67.2100%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.9600%" y="149" width="0.0800%" height="15" fill="rgb(243,19,9)" fg:x="837" fg:w="1"/><text x="67.2100%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="66.9600%" y="133" width="0.0800%" height="15" fill="rgb(245,171,17)" fg:x="837" fg:w="1"/><text x="67.2100%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="66.9600%" y="117" width="0.0800%" height="15" fill="rgb(227,52,21)" fg:x="837" fg:w="1"/><text x="67.2100%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="66.9600%" y="101" width="0.0800%" height="15" fill="rgb(238,69,14)" fg:x="837" fg:w="1"/><text x="67.2100%" y="111.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="66.9600%" y="85" width="0.0800%" height="15" fill="rgb(241,156,39)" fg:x="837" fg:w="1"/><text x="67.2100%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.9600%" y="69" width="0.0800%" height="15" fill="rgb(212,227,28)" fg:x="837" fg:w="1"/><text x="67.2100%" y="79.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.0400%" y="165" width="0.0800%" height="15" fill="rgb(209,118,27)" fg:x="838" fg:w="1"/><text x="67.2900%" y="175.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="67.0400%" y="229" width="0.1600%" height="15" fill="rgb(226,102,5)" fg:x="838" fg:w="2"/><text x="67.2900%" y="239.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="67.0400%" y="213" width="0.1600%" height="15" fill="rgb(223,34,3)" fg:x="838" fg:w="2"/><text x="67.2900%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="67.0400%" y="197" width="0.1600%" height="15" fill="rgb(221,81,38)" fg:x="838" fg:w="2"/><text x="67.2900%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="67.0400%" y="181" width="0.1600%" height="15" fill="rgb(236,219,28)" fg:x="838" fg:w="2"/><text x="67.2900%" y="191.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="67.1200%" y="165" width="0.0800%" height="15" fill="rgb(213,200,14)" fg:x="839" fg:w="1"/><text x="67.3700%" y="175.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.1200%" y="149" width="0.0800%" height="15" fill="rgb(240,33,19)" fg:x="839" fg:w="1"/><text x="67.3700%" y="159.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="67.1200%" y="133" width="0.0800%" height="15" fill="rgb(233,113,27)" fg:x="839" fg:w="1"/><text x="67.3700%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="67.1200%" y="117" width="0.0800%" height="15" fill="rgb(220,221,18)" fg:x="839" fg:w="1"/><text x="67.3700%" y="127.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.1200%" y="101" width="0.0800%" height="15" fill="rgb(238,92,8)" fg:x="839" fg:w="1"/><text x="67.3700%" y="111.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="67.1200%" y="85" width="0.0800%" height="15" fill="rgb(222,164,16)" fg:x="839" fg:w="1"/><text x="67.3700%" y="95.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="67.2800%" y="117" width="0.0800%" height="15" fill="rgb(241,119,3)" fg:x="841" fg:w="1"/><text x="67.5300%" y="127.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="67.2800%" y="101" width="0.0800%" height="15" fill="rgb(241,44,8)" fg:x="841" fg:w="1"/><text x="67.5300%" y="111.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.3600%" y="85" width="0.0800%" height="15" fill="rgb(230,36,40)" fg:x="842" fg:w="1"/><text x="67.6100%" y="95.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (7 samples, 0.56%)</title><rect x="66.9600%" y="325" width="0.5600%" height="15" fill="rgb(243,16,36)" fg:x="837" fg:w="7"/><text x="67.2100%" y="335.50"></text></g><g><title>core::iter::adapters::try_process (7 samples, 0.56%)</title><rect x="66.9600%" y="309" width="0.5600%" height="15" fill="rgb(231,4,26)" fg:x="837" fg:w="7"/><text x="67.2100%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.56%)</title><rect x="66.9600%" y="293" width="0.5600%" height="15" fill="rgb(240,9,31)" fg:x="837" fg:w="7"/><text x="67.2100%" y="303.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (7 samples, 0.56%)</title><rect x="66.9600%" y="277" width="0.5600%" height="15" fill="rgb(207,173,15)" fg:x="837" fg:w="7"/><text x="67.2100%" y="287.50"></text></g><g><title>engine::internal::Entities::prepare_entity (6 samples, 0.48%)</title><rect x="67.0400%" y="261" width="0.4800%" height="15" fill="rgb(224,192,53)" fg:x="838" fg:w="6"/><text x="67.2900%" y="271.50"></text></g><g><title>kernel::model::deserialize_entity (6 samples, 0.48%)</title><rect x="67.0400%" y="245" width="0.4800%" height="15" fill="rgb(223,67,28)" fg:x="838" fg:w="6"/><text x="67.2900%" y="255.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="67.2000%" y="229" width="0.3200%" height="15" fill="rgb(211,20,47)" fg:x="840" fg:w="4"/><text x="67.4500%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="67.2000%" y="213" width="0.3200%" height="15" fill="rgb(240,228,2)" fg:x="840" fg:w="4"/><text x="67.4500%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="67.2000%" y="197" width="0.3200%" height="15" fill="rgb(248,151,12)" fg:x="840" fg:w="4"/><text x="67.4500%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="67.2000%" y="181" width="0.3200%" height="15" fill="rgb(244,8,39)" fg:x="840" fg:w="4"/><text x="67.4500%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="67.2000%" y="165" width="0.3200%" height="15" fill="rgb(222,26,8)" fg:x="840" fg:w="4"/><text x="67.4500%" y="175.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="67.2800%" y="149" width="0.2400%" height="15" fill="rgb(213,106,44)" fg:x="841" fg:w="3"/><text x="67.5300%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="67.2800%" y="133" width="0.2400%" height="15" fill="rgb(214,129,20)" fg:x="841" fg:w="3"/><text x="67.5300%" y="143.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="67.3600%" y="117" width="0.1600%" height="15" fill="rgb(212,32,13)" fg:x="842" fg:w="2"/><text x="67.6100%" y="127.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="67.3600%" y="101" width="0.1600%" height="15" fill="rgb(208,168,33)" fg:x="842" fg:w="2"/><text x="67.6100%" y="111.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="67.4400%" y="85" width="0.0800%" height="15" fill="rgb(231,207,8)" fg:x="843" fg:w="1"/><text x="67.6900%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.4400%" y="69" width="0.0800%" height="15" fill="rgb(235,219,23)" fg:x="843" fg:w="1"/><text x="67.6900%" y="79.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="67.6000%" y="293" width="0.0800%" height="15" fill="rgb(226,216,26)" fg:x="845" fg:w="1"/><text x="67.8500%" y="303.50"></text></g><g><title>plugins_core::tools::get_contained_keys (13 samples, 1.04%)</title><rect x="66.7200%" y="373" width="1.0400%" height="15" fill="rgb(239,137,16)" fg:x="834" fg:w="13"/><text x="66.9700%" y="383.50"></text></g><g><title>kernel::model::entry::Entry::scope (12 samples, 0.96%)</title><rect x="66.8000%" y="357" width="0.9600%" height="15" fill="rgb(207,12,36)" fg:x="835" fg:w="12"/><text x="67.0500%" y="367.50"></text></g><g><title>kernel::model::Entity::load_scope (12 samples, 0.96%)</title><rect x="66.8000%" y="341" width="0.9600%" height="15" fill="rgb(210,214,24)" fg:x="835" fg:w="12"/><text x="67.0500%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="67.5200%" y="325" width="0.2400%" height="15" fill="rgb(206,56,30)" fg:x="844" fg:w="3"/><text x="67.7700%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="67.5200%" y="309" width="0.2400%" height="15" fill="rgb(228,143,26)" fg:x="844" fg:w="3"/><text x="67.7700%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="67.6800%" y="293" width="0.0800%" height="15" fill="rgb(216,218,46)" fg:x="846" fg:w="1"/><text x="67.9300%" y="303.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="67.6800%" y="277" width="0.0800%" height="15" fill="rgb(206,6,19)" fg:x="846" fg:w="1"/><text x="67.9300%" y="287.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="67.6800%" y="261" width="0.0800%" height="15" fill="rgb(239,177,51)" fg:x="846" fg:w="1"/><text x="67.9300%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.6800%" y="245" width="0.0800%" height="15" fill="rgb(216,55,25)" fg:x="846" fg:w="1"/><text x="67.9300%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.6800%" y="229" width="0.0800%" height="15" fill="rgb(231,163,29)" fg:x="846" fg:w="1"/><text x="67.9300%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.7600%" y="325" width="0.0800%" height="15" fill="rgb(232,149,50)" fg:x="847" fg:w="1"/><text x="68.0100%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.7600%" y="309" width="0.0800%" height="15" fill="rgb(223,142,48)" fg:x="847" fg:w="1"/><text x="68.0100%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.7600%" y="293" width="0.0800%" height="15" fill="rgb(245,83,23)" fg:x="847" fg:w="1"/><text x="68.0100%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.8400%" y="293" width="0.0800%" height="15" fill="rgb(224,63,2)" fg:x="848" fg:w="1"/><text x="68.0900%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="67.9200%" y="293" width="0.0800%" height="15" fill="rgb(218,65,53)" fg:x="849" fg:w="1"/><text x="68.1700%" y="303.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="67.9200%" y="277" width="0.0800%" height="15" fill="rgb(221,84,29)" fg:x="849" fg:w="1"/><text x="68.1700%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.9200%" y="261" width="0.0800%" height="15" fill="rgb(234,0,32)" fg:x="849" fg:w="1"/><text x="68.1700%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (25 samples, 2.00%)</title><rect x="66.0800%" y="405" width="2.0000%" height="15" fill="rgb(206,20,16)" fg:x="826" fg:w="25"/><text x="66.3300%" y="415.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (24 samples, 1.92%)</title><rect x="66.1600%" y="389" width="1.9200%" height="15" fill="rgb(244,172,18)" fg:x="827" fg:w="24"/><text x="66.4100%" y="399.50">&lt;..</text></g><g><title>plugins_core::tools::get_occupant_keys (4 samples, 0.32%)</title><rect x="67.7600%" y="373" width="0.3200%" height="15" fill="rgb(254,133,1)" fg:x="847" fg:w="4"/><text x="68.0100%" y="383.50"></text></g><g><title>kernel::model::entry::Entry::scope (4 samples, 0.32%)</title><rect x="67.7600%" y="357" width="0.3200%" height="15" fill="rgb(222,206,41)" fg:x="847" fg:w="4"/><text x="68.0100%" y="367.50"></text></g><g><title>kernel::model::Entity::load_scope (4 samples, 0.32%)</title><rect x="67.7600%" y="341" width="0.3200%" height="15" fill="rgb(212,3,42)" fg:x="847" fg:w="4"/><text x="68.0100%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="67.8400%" y="325" width="0.2400%" height="15" fill="rgb(241,11,4)" fg:x="848" fg:w="3"/><text x="68.0900%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="67.8400%" y="309" width="0.2400%" height="15" fill="rgb(205,19,26)" fg:x="848" fg:w="3"/><text x="68.0900%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.0000%" y="293" width="0.0800%" height="15" fill="rgb(210,179,32)" fg:x="850" fg:w="1"/><text x="68.2500%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.0000%" y="277" width="0.0800%" height="15" fill="rgb(227,116,49)" fg:x="850" fg:w="1"/><text x="68.2500%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="68.0000%" y="261" width="0.0800%" height="15" fill="rgb(211,146,6)" fg:x="850" fg:w="1"/><text x="68.2500%" y="271.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="68.0000%" y="245" width="0.0800%" height="15" fill="rgb(219,44,39)" fg:x="850" fg:w="1"/><text x="68.2500%" y="255.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="68.0800%" y="357" width="0.1600%" height="15" fill="rgb(234,128,11)" fg:x="851" fg:w="2"/><text x="68.3300%" y="367.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="68.0800%" y="341" width="0.1600%" height="15" fill="rgb(220,183,53)" fg:x="851" fg:w="2"/><text x="68.3300%" y="351.50"></text></g><g><title>engine::internal::Maps::lookup_entity (2 samples, 0.16%)</title><rect x="68.0800%" y="325" width="0.1600%" height="15" fill="rgb(213,219,32)" fg:x="851" fg:w="2"/><text x="68.3300%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="69.2800%" y="133" width="0.3200%" height="15" fill="rgb(232,156,16)" fg:x="866" fg:w="4"/><text x="69.5300%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="69.4400%" y="117" width="0.1600%" height="15" fill="rgb(246,135,34)" fg:x="868" fg:w="2"/><text x="69.6900%" y="127.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="69.4400%" y="101" width="0.1600%" height="15" fill="rgb(241,99,0)" fg:x="868" fg:w="2"/><text x="69.6900%" y="111.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (6 samples, 0.48%)</title><rect x="69.2000%" y="149" width="0.4800%" height="15" fill="rgb(222,103,45)" fg:x="865" fg:w="6"/><text x="69.4500%" y="159.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="69.6000%" y="133" width="0.0800%" height="15" fill="rgb(212,57,4)" fg:x="870" fg:w="1"/><text x="69.8500%" y="143.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.6800%" y="149" width="0.0800%" height="15" fill="rgb(215,68,47)" fg:x="871" fg:w="1"/><text x="69.9300%" y="159.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.6800%" y="133" width="0.0800%" height="15" fill="rgb(230,84,2)" fg:x="871" fg:w="1"/><text x="69.9300%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.64%)</title><rect x="69.2000%" y="165" width="0.6400%" height="15" fill="rgb(220,102,14)" fg:x="865" fg:w="8"/><text x="69.4500%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.7600%" y="149" width="0.0800%" height="15" fill="rgb(240,10,32)" fg:x="872" fg:w="1"/><text x="70.0100%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="69.7600%" y="133" width="0.0800%" height="15" fill="rgb(215,47,27)" fg:x="872" fg:w="1"/><text x="70.0100%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (9 samples, 0.72%)</title><rect x="69.2000%" y="181" width="0.7200%" height="15" fill="rgb(233,188,43)" fg:x="865" fg:w="9"/><text x="69.4500%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="69.8400%" y="165" width="0.0800%" height="15" fill="rgb(253,190,1)" fg:x="873" fg:w="1"/><text x="70.0900%" y="175.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="69.8400%" y="149" width="0.0800%" height="15" fill="rgb(206,114,52)" fg:x="873" fg:w="1"/><text x="70.0900%" y="159.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (14 samples, 1.12%)</title><rect x="69.1200%" y="197" width="1.1200%" height="15" fill="rgb(233,120,37)" fg:x="864" fg:w="14"/><text x="69.3700%" y="207.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="69.9200%" y="181" width="0.3200%" height="15" fill="rgb(214,52,39)" fg:x="874" fg:w="4"/><text x="70.1700%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.32%)</title><rect x="69.9200%" y="165" width="0.3200%" height="15" fill="rgb(223,80,29)" fg:x="874" fg:w="4"/><text x="70.1700%" y="175.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="70.0800%" y="149" width="0.1600%" height="15" fill="rgb(230,101,40)" fg:x="876" fg:w="2"/><text x="70.3300%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="70.0800%" y="133" width="0.1600%" height="15" fill="rgb(219,211,8)" fg:x="876" fg:w="2"/><text x="70.3300%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="70.0800%" y="117" width="0.1600%" height="15" fill="rgb(252,126,28)" fg:x="876" fg:w="2"/><text x="70.3300%" y="127.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.2400%" y="197" width="0.0800%" height="15" fill="rgb(215,56,38)" fg:x="878" fg:w="1"/><text x="70.4900%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18 samples, 1.44%)</title><rect x="68.9600%" y="213" width="1.4400%" height="15" fill="rgb(249,55,44)" fg:x="862" fg:w="18"/><text x="69.2100%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.3200%" y="197" width="0.0800%" height="15" fill="rgb(220,221,32)" fg:x="879" fg:w="1"/><text x="70.5700%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="70.3200%" y="181" width="0.0800%" height="15" fill="rgb(212,216,41)" fg:x="879" fg:w="1"/><text x="70.5700%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="70.3200%" y="165" width="0.0800%" height="15" fill="rgb(228,213,43)" fg:x="879" fg:w="1"/><text x="70.5700%" y="175.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (20 samples, 1.60%)</title><rect x="68.8800%" y="245" width="1.6000%" height="15" fill="rgb(211,31,26)" fg:x="861" fg:w="20"/><text x="69.1300%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (19 samples, 1.52%)</title><rect x="68.9600%" y="229" width="1.5200%" height="15" fill="rgb(229,202,19)" fg:x="862" fg:w="19"/><text x="69.2100%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="70.4000%" y="213" width="0.0800%" height="15" fill="rgb(229,105,46)" fg:x="880" fg:w="1"/><text x="70.6500%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.4000%" y="197" width="0.0800%" height="15" fill="rgb(235,108,1)" fg:x="880" fg:w="1"/><text x="70.6500%" y="207.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.4800%" y="245" width="0.0800%" height="15" fill="rgb(245,111,35)" fg:x="881" fg:w="1"/><text x="70.7300%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (25 samples, 2.00%)</title><rect x="68.6400%" y="261" width="2.0000%" height="15" fill="rgb(219,185,31)" fg:x="858" fg:w="25"/><text x="68.8900%" y="271.50">&lt;..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.5600%" y="245" width="0.0800%" height="15" fill="rgb(214,4,43)" fg:x="882" fg:w="1"/><text x="70.8100%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="70.5600%" y="229" width="0.0800%" height="15" fill="rgb(235,227,40)" fg:x="882" fg:w="1"/><text x="70.8100%" y="239.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (31 samples, 2.48%)</title><rect x="68.4000%" y="293" width="2.4800%" height="15" fill="rgb(230,88,30)" fg:x="855" fg:w="31"/><text x="68.6500%" y="303.50">&lt;r..</text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (29 samples, 2.32%)</title><rect x="68.5600%" y="277" width="2.3200%" height="15" fill="rgb(216,217,1)" fg:x="857" fg:w="29"/><text x="68.8100%" y="287.50">&lt;..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.24%)</title><rect x="70.6400%" y="261" width="0.2400%" height="15" fill="rgb(248,139,50)" fg:x="883" fg:w="3"/><text x="70.8900%" y="271.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="70.6400%" y="245" width="0.2400%" height="15" fill="rgb(233,1,21)" fg:x="883" fg:w="3"/><text x="70.8900%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.8800%" y="293" width="0.0800%" height="15" fill="rgb(215,183,12)" fg:x="886" fg:w="1"/><text x="71.1300%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.8800%" y="277" width="0.0800%" height="15" fill="rgb(229,104,42)" fg:x="886" fg:w="1"/><text x="71.1300%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (35 samples, 2.80%)</title><rect x="68.2400%" y="309" width="2.8000%" height="15" fill="rgb(243,34,48)" fg:x="853" fg:w="35"/><text x="68.4900%" y="319.50">&lt;c..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.9600%" y="293" width="0.0800%" height="15" fill="rgb(239,11,44)" fg:x="887" fg:w="1"/><text x="71.2100%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.9600%" y="277" width="0.0800%" height="15" fill="rgb(231,98,35)" fg:x="887" fg:w="1"/><text x="71.2100%" y="287.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (36 samples, 2.88%)</title><rect x="68.2400%" y="341" width="2.8800%" height="15" fill="rgb(233,28,25)" fg:x="853" fg:w="36"/><text x="68.4900%" y="351.50">&lt;r..</text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (36 samples, 2.88%)</title><rect x="68.2400%" y="325" width="2.8800%" height="15" fill="rgb(234,123,11)" fg:x="853" fg:w="36"/><text x="68.4900%" y="335.50">&lt;s..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="71.0400%" y="309" width="0.0800%" height="15" fill="rgb(220,69,3)" fg:x="888" fg:w="1"/><text x="71.2900%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.0400%" y="293" width="0.0800%" height="15" fill="rgb(214,64,36)" fg:x="888" fg:w="1"/><text x="71.2900%" y="303.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="71.1200%" y="293" width="0.1600%" height="15" fill="rgb(211,138,32)" fg:x="889" fg:w="2"/><text x="71.3700%" y="303.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityClass&gt;::serialize (2 samples, 0.16%)</title><rect x="71.2800%" y="293" width="0.1600%" height="15" fill="rgb(213,118,47)" fg:x="891" fg:w="2"/><text x="71.5300%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (2 samples, 0.16%)</title><rect x="71.2800%" y="277" width="0.1600%" height="15" fill="rgb(243,124,49)" fg:x="891" fg:w="2"/><text x="71.5300%" y="287.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="71.6800%" y="197" width="0.0800%" height="15" fill="rgb(221,30,28)" fg:x="896" fg:w="1"/><text x="71.9300%" y="207.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (5 samples, 0.40%)</title><rect x="71.4400%" y="293" width="0.4000%" height="15" fill="rgb(246,37,13)" fg:x="893" fg:w="5"/><text x="71.6900%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="71.4400%" y="277" width="0.4000%" height="15" fill="rgb(249,66,14)" fg:x="893" fg:w="5"/><text x="71.6900%" y="287.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="71.4400%" y="261" width="0.4000%" height="15" fill="rgb(213,166,5)" fg:x="893" fg:w="5"/><text x="71.6900%" y="271.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="71.6800%" y="245" width="0.1600%" height="15" fill="rgb(221,66,24)" fg:x="896" fg:w="2"/><text x="71.9300%" y="255.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="71.6800%" y="229" width="0.1600%" height="15" fill="rgb(210,132,17)" fg:x="896" fg:w="2"/><text x="71.9300%" y="239.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="71.6800%" y="213" width="0.1600%" height="15" fill="rgb(243,202,5)" fg:x="896" fg:w="2"/><text x="71.9300%" y="223.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.7600%" y="197" width="0.0800%" height="15" fill="rgb(233,70,48)" fg:x="897" fg:w="1"/><text x="72.0100%" y="207.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.7600%" y="181" width="0.0800%" height="15" fill="rgb(238,41,26)" fg:x="897" fg:w="1"/><text x="72.0100%" y="191.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.7600%" y="165" width="0.0800%" height="15" fill="rgb(241,19,31)" fg:x="897" fg:w="1"/><text x="72.0100%" y="175.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="71.7600%" y="149" width="0.0800%" height="15" fill="rgb(214,76,10)" fg:x="897" fg:w="1"/><text x="72.0100%" y="159.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="72.0000%" y="277" width="0.1600%" height="15" fill="rgb(254,202,22)" fg:x="900" fg:w="2"/><text x="72.2500%" y="287.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.2400%" y="229" width="0.0800%" height="15" fill="rgb(214,72,24)" fg:x="903" fg:w="1"/><text x="72.4900%" y="239.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="72.2400%" y="213" width="0.0800%" height="15" fill="rgb(221,92,46)" fg:x="903" fg:w="1"/><text x="72.4900%" y="223.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="72.1600%" y="261" width="0.2400%" height="15" fill="rgb(246,13,50)" fg:x="902" fg:w="3"/><text x="72.4100%" y="271.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="72.2400%" y="245" width="0.1600%" height="15" fill="rgb(240,165,38)" fg:x="903" fg:w="2"/><text x="72.4900%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.3200%" y="229" width="0.0800%" height="15" fill="rgb(241,24,51)" fg:x="904" fg:w="1"/><text x="72.5700%" y="239.50"></text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (53 samples, 4.24%)</title><rect x="68.2400%" y="357" width="4.2400%" height="15" fill="rgb(227,51,44)" fg:x="853" fg:w="53"/><text x="68.4900%" y="367.50">&lt;rpc_..</text></g><g><title>kernel::model::EntityPtr::to_json_value (17 samples, 1.36%)</title><rect x="71.1200%" y="341" width="1.3600%" height="15" fill="rgb(231,121,3)" fg:x="889" fg:w="17"/><text x="71.3700%" y="351.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (17 samples, 1.36%)</title><rect x="71.1200%" y="325" width="1.3600%" height="15" fill="rgb(245,3,41)" fg:x="889" fg:w="17"/><text x="71.3700%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (17 samples, 1.36%)</title><rect x="71.1200%" y="309" width="1.3600%" height="15" fill="rgb(214,13,26)" fg:x="889" fg:w="17"/><text x="71.3700%" y="319.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.64%)</title><rect x="71.8400%" y="293" width="0.6400%" height="15" fill="rgb(252,75,11)" fg:x="898" fg:w="8"/><text x="72.0900%" y="303.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (4 samples, 0.32%)</title><rect x="72.1600%" y="277" width="0.3200%" height="15" fill="rgb(218,226,17)" fg:x="902" fg:w="4"/><text x="72.4100%" y="287.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="72.4000%" y="261" width="0.0800%" height="15" fill="rgb(248,89,38)" fg:x="905" fg:w="1"/><text x="72.6500%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.4000%" y="245" width="0.0800%" height="15" fill="rgb(237,73,46)" fg:x="905" fg:w="1"/><text x="72.6500%" y="255.50"></text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (87 samples, 6.96%)</title><rect x="65.6000%" y="437" width="6.9600%" height="15" fill="rgb(242,78,33)" fg:x="820" fg:w="87"/><text x="65.8500%" y="447.50">&lt;plugins_..</text></g><g><title>core::iter::adapters::try_process (81 samples, 6.48%)</title><rect x="66.0800%" y="421" width="6.4800%" height="15" fill="rgb(235,60,3)" fg:x="826" fg:w="81"/><text x="66.3300%" y="431.50">core::it..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (56 samples, 4.48%)</title><rect x="68.0800%" y="405" width="4.4800%" height="15" fill="rgb(216,172,19)" fg:x="851" fg:w="56"/><text x="68.3300%" y="415.50">alloc..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (56 samples, 4.48%)</title><rect x="68.0800%" y="389" width="4.4800%" height="15" fill="rgb(227,6,42)" fg:x="851" fg:w="56"/><text x="68.3300%" y="399.50">&lt;core..</text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (56 samples, 4.48%)</title><rect x="68.0800%" y="373" width="4.4800%" height="15" fill="rgb(223,207,42)" fg:x="851" fg:w="56"/><text x="68.3300%" y="383.50">plugi..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.4800%" y="357" width="0.0800%" height="15" fill="rgb(246,138,30)" fg:x="906" fg:w="1"/><text x="72.7300%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.5600%" y="437" width="0.0800%" height="15" fill="rgb(251,199,47)" fg:x="907" fg:w="1"/><text x="72.8100%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.6400%" y="437" width="0.0800%" height="15" fill="rgb(228,218,44)" fg:x="908" fg:w="1"/><text x="72.8900%" y="447.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="72.7200%" y="437" width="0.0800%" height="15" fill="rgb(220,68,6)" fg:x="909" fg:w="1"/><text x="72.9700%" y="447.50"></text></g><g><title>rpc_proto::&lt;impl core::convert::Into&lt;rpc_proto::EntityKey&gt; for kernel::model::EntityKey&gt;::into (1 samples, 0.08%)</title><rect x="72.7200%" y="421" width="0.0800%" height="15" fill="rgb(240,60,26)" fg:x="909" fg:w="1"/><text x="72.9700%" y="431.50"></text></g><g><title>kernel::model::&lt;impl core::convert::From&lt;kernel::model::EntityKey&gt; for alloc::string::String&gt;::from (1 samples, 0.08%)</title><rect x="72.7200%" y="405" width="0.0800%" height="15" fill="rgb(211,200,19)" fg:x="909" fg:w="1"/><text x="72.9700%" y="415.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="72.7200%" y="389" width="0.0800%" height="15" fill="rgb(242,145,30)" fg:x="909" fg:w="1"/><text x="72.9700%" y="399.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="72.7200%" y="373" width="0.0800%" height="15" fill="rgb(225,64,13)" fg:x="909" fg:w="1"/><text x="72.9700%" y="383.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="72.7200%" y="357" width="0.0800%" height="15" fill="rgb(218,103,35)" fg:x="909" fg:w="1"/><text x="72.9700%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (911 samples, 72.88%)</title><rect x="0.0000%" y="581" width="72.8800%" height="15" fill="rgb(216,93,46)" fg:x="0" fg:w="911"/><text x="0.2500%" y="591.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (911 samples, 72.88%)</title><rect x="0.0000%" y="565" width="72.8800%" height="15" fill="rgb(225,159,27)" fg:x="0" fg:w="911"/><text x="0.2500%" y="575.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (911 samples, 72.88%)</title><rect x="0.0000%" y="549" width="72.8800%" height="15" fill="rgb(225,204,11)" fg:x="0" fg:w="911"/><text x="0.2500%" y="559.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (756 samples, 60.48%)</title><rect x="12.4000%" y="533" width="60.4800%" height="15" fill="rgb(205,56,4)" fg:x="155" fg:w="756"/><text x="12.6500%" y="543.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (756 samples, 60.48%)</title><rect x="12.4000%" y="517" width="60.4800%" height="15" fill="rgb(206,6,35)" fg:x="155" fg:w="756"/><text x="12.6500%" y="527.50">engine::perform::StandardPerformer::evaluate_and_perform</text></g><g><title>engine::perform::StandardPerformer::perform (746 samples, 59.68%)</title><rect x="13.2000%" y="501" width="59.6800%" height="15" fill="rgb(247,73,52)" fg:x="165" fg:w="746"/><text x="13.4500%" y="511.50">engine::perform::StandardPerformer::perform</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (98 samples, 7.84%)</title><rect x="65.0400%" y="485" width="7.8400%" height="15" fill="rgb(246,97,4)" fg:x="813" fg:w="98"/><text x="65.2900%" y="495.50">kernel::plu..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (98 samples, 7.84%)</title><rect x="65.0400%" y="469" width="7.8400%" height="15" fill="rgb(212,37,15)" fg:x="813" fg:w="98"/><text x="65.2900%" y="479.50">&lt;plugins_dy..</text></g><g><title>plugins_rpc::querying::have_surroundings (91 samples, 7.28%)</title><rect x="65.6000%" y="453" width="7.2800%" height="15" fill="rgb(208,130,40)" fg:x="820" fg:w="91"/><text x="65.8500%" y="463.50">plugins_rp..</text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="72.8000%" y="437" width="0.0800%" height="15" fill="rgb(236,55,29)" fg:x="910" fg:w="1"/><text x="73.0500%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="72.8800%" y="501" width="0.1600%" height="15" fill="rgb(209,156,45)" fg:x="911" fg:w="2"/><text x="73.1300%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (2 samples, 0.16%)</title><rect x="72.8800%" y="485" width="0.1600%" height="15" fill="rgb(249,107,4)" fg:x="911" fg:w="2"/><text x="73.1300%" y="495.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="72.8800%" y="469" width="0.1600%" height="15" fill="rgb(227,7,13)" fg:x="911" fg:w="2"/><text x="73.1300%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="72.8800%" y="453" width="0.1600%" height="15" fill="rgb(250,129,14)" fg:x="911" fg:w="2"/><text x="73.1300%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.9600%" y="437" width="0.0800%" height="15" fill="rgb(229,92,13)" fg:x="912" fg:w="1"/><text x="73.2100%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="72.9600%" y="421" width="0.0800%" height="15" fill="rgb(245,98,39)" fg:x="912" fg:w="1"/><text x="73.2100%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.9600%" y="405" width="0.0800%" height="15" fill="rgb(234,135,48)" fg:x="912" fg:w="1"/><text x="73.2100%" y="415.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="72.8800%" y="533" width="0.2400%" height="15" fill="rgb(230,98,28)" fg:x="911" fg:w="3"/><text x="73.1300%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (3 samples, 0.24%)</title><rect x="72.8800%" y="517" width="0.2400%" height="15" fill="rgb(223,121,0)" fg:x="911" fg:w="3"/><text x="73.1300%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.0400%" y="501" width="0.0800%" height="15" fill="rgb(234,173,33)" fg:x="913" fg:w="1"/><text x="73.2900%" y="511.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (1 samples, 0.08%)</title><rect x="73.1200%" y="533" width="0.0800%" height="15" fill="rgb(245,47,8)" fg:x="914" fg:w="1"/><text x="73.3700%" y="543.50"></text></g><g><title>engine::session::Session::new (1 samples, 0.08%)</title><rect x="73.1200%" y="517" width="0.0800%" height="15" fill="rgb(205,17,20)" fg:x="914" fg:w="1"/><text x="73.3700%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="73.1200%" y="501" width="0.0800%" height="15" fill="rgb(232,151,16)" fg:x="914" fg:w="1"/><text x="73.3700%" y="511.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="73.1200%" y="485" width="0.0800%" height="15" fill="rgb(208,30,32)" fg:x="914" fg:w="1"/><text x="73.3700%" y="495.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="73.1200%" y="469" width="0.0800%" height="15" fill="rgb(254,26,3)" fg:x="914" fg:w="1"/><text x="73.3700%" y="479.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="73.1200%" y="453" width="0.0800%" height="15" fill="rgb(240,177,30)" fg:x="914" fg:w="1"/><text x="73.3700%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.1200%" y="437" width="0.0800%" height="15" fill="rgb(248,76,44)" fg:x="914" fg:w="1"/><text x="73.3700%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.1200%" y="421" width="0.0800%" height="15" fill="rgb(241,186,54)" fg:x="914" fg:w="1"/><text x="73.3700%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.1200%" y="405" width="0.0800%" height="15" fill="rgb(249,171,29)" fg:x="914" fg:w="1"/><text x="73.3700%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.1200%" y="389" width="0.0800%" height="15" fill="rgb(237,151,44)" fg:x="914" fg:w="1"/><text x="73.3700%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.1200%" y="373" width="0.0800%" height="15" fill="rgb(228,174,30)" fg:x="914" fg:w="1"/><text x="73.3700%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.1200%" y="357" width="0.0800%" height="15" fill="rgb(252,14,37)" fg:x="914" fg:w="1"/><text x="73.3700%" y="367.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="73.2000%" y="437" width="0.0800%" height="15" fill="rgb(207,111,40)" fg:x="915" fg:w="1"/><text x="73.4500%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="73.2000%" y="421" width="0.0800%" height="15" fill="rgb(248,171,54)" fg:x="915" fg:w="1"/><text x="73.4500%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.2000%" y="405" width="0.0800%" height="15" fill="rgb(211,127,2)" fg:x="915" fg:w="1"/><text x="73.4500%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="73.2800%" y="421" width="0.0800%" height="15" fill="rgb(236,87,47)" fg:x="916" fg:w="1"/><text x="73.5300%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="73.2800%" y="437" width="0.1600%" height="15" fill="rgb(223,190,45)" fg:x="916" fg:w="2"/><text x="73.5300%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="73.3600%" y="421" width="0.0800%" height="15" fill="rgb(215,5,16)" fg:x="917" fg:w="1"/><text x="73.6100%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.32%)</title><rect x="73.2000%" y="453" width="0.3200%" height="15" fill="rgb(252,82,33)" fg:x="915" fg:w="4"/><text x="73.4500%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.4400%" y="437" width="0.0800%" height="15" fill="rgb(247,213,44)" fg:x="918" fg:w="1"/><text x="73.6900%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.4400%" y="421" width="0.0800%" height="15" fill="rgb(205,196,44)" fg:x="918" fg:w="1"/><text x="73.6900%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.4400%" y="405" width="0.0800%" height="15" fill="rgb(237,96,54)" fg:x="918" fg:w="1"/><text x="73.6900%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="73.4400%" y="389" width="0.0800%" height="15" fill="rgb(230,113,34)" fg:x="918" fg:w="1"/><text x="73.6900%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="73.4400%" y="373" width="0.0800%" height="15" fill="rgb(221,224,12)" fg:x="918" fg:w="1"/><text x="73.6900%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.4400%" y="357" width="0.0800%" height="15" fill="rgb(219,112,44)" fg:x="918" fg:w="1"/><text x="73.6900%" y="367.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="73.5200%" y="405" width="0.0800%" height="15" fill="rgb(210,31,13)" fg:x="919" fg:w="1"/><text x="73.7700%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.5200%" y="389" width="0.0800%" height="15" fill="rgb(230,25,16)" fg:x="919" fg:w="1"/><text x="73.7700%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="73.5200%" y="373" width="0.0800%" height="15" fill="rgb(246,108,53)" fg:x="919" fg:w="1"/><text x="73.7700%" y="383.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="73.5200%" y="357" width="0.0800%" height="15" fill="rgb(241,172,50)" fg:x="919" fg:w="1"/><text x="73.7700%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.5200%" y="341" width="0.0800%" height="15" fill="rgb(235,141,10)" fg:x="919" fg:w="1"/><text x="73.7700%" y="351.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="73.5200%" y="325" width="0.0800%" height="15" fill="rgb(220,174,43)" fg:x="919" fg:w="1"/><text x="73.7700%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.5200%" y="309" width="0.0800%" height="15" fill="rgb(215,181,40)" fg:x="919" fg:w="1"/><text x="73.7700%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.5200%" y="293" width="0.0800%" height="15" fill="rgb(230,97,2)" fg:x="919" fg:w="1"/><text x="73.7700%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.5200%" y="277" width="0.0800%" height="15" fill="rgb(211,25,27)" fg:x="919" fg:w="1"/><text x="73.7700%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.6000%" y="389" width="0.0800%" height="15" fill="rgb(230,87,26)" fg:x="920" fg:w="1"/><text x="73.8500%" y="399.50"></text></g><g><title>engine::session::Session::flush (7 samples, 0.56%)</title><rect x="73.2000%" y="517" width="0.5600%" height="15" fill="rgb(227,160,17)" fg:x="915" fg:w="7"/><text x="73.4500%" y="527.50"></text></g><g><title>engine::session::Session::save_entity_changes (7 samples, 0.56%)</title><rect x="73.2000%" y="501" width="0.5600%" height="15" fill="rgb(244,85,34)" fg:x="915" fg:w="7"/><text x="73.4500%" y="511.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (7 samples, 0.56%)</title><rect x="73.2000%" y="485" width="0.5600%" height="15" fill="rgb(207,70,0)" fg:x="915" fg:w="7"/><text x="73.4500%" y="495.50"></text></g><g><title>engine::session::Session::check_for_changes (7 samples, 0.56%)</title><rect x="73.2000%" y="469" width="0.5600%" height="15" fill="rgb(223,129,7)" fg:x="915" fg:w="7"/><text x="73.4500%" y="479.50"></text></g><g><title>kernel::compare::any_entity_changes (3 samples, 0.24%)</title><rect x="73.5200%" y="453" width="0.2400%" height="15" fill="rgb(246,105,7)" fg:x="919" fg:w="3"/><text x="73.7700%" y="463.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="73.5200%" y="437" width="0.2400%" height="15" fill="rgb(215,154,42)" fg:x="919" fg:w="3"/><text x="73.7700%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="73.5200%" y="421" width="0.2400%" height="15" fill="rgb(220,215,30)" fg:x="919" fg:w="3"/><text x="73.7700%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="73.6000%" y="405" width="0.1600%" height="15" fill="rgb(228,81,51)" fg:x="920" fg:w="2"/><text x="73.8500%" y="415.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (1 samples, 0.08%)</title><rect x="73.6800%" y="389" width="0.0800%" height="15" fill="rgb(247,71,54)" fg:x="921" fg:w="1"/><text x="73.9300%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="73.6800%" y="373" width="0.0800%" height="15" fill="rgb(234,176,34)" fg:x="921" fg:w="1"/><text x="73.9300%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="73.6800%" y="357" width="0.0800%" height="15" fill="rgb(241,103,54)" fg:x="921" fg:w="1"/><text x="73.9300%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.6800%" y="341" width="0.0800%" height="15" fill="rgb(228,22,34)" fg:x="921" fg:w="1"/><text x="73.9300%" y="351.50"></text></g><g><title>plugins_core::build::Build::holding (1 samples, 0.08%)</title><rect x="73.7600%" y="517" width="0.0800%" height="15" fill="rgb(241,179,48)" fg:x="922" fg:w="1"/><text x="74.0100%" y="527.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="73.7600%" y="501" width="0.0800%" height="15" fill="rgb(235,167,37)" fg:x="922" fg:w="1"/><text x="74.0100%" y="511.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (1 samples, 0.08%)</title><rect x="73.7600%" y="485" width="0.0800%" height="15" fill="rgb(213,109,30)" fg:x="922" fg:w="1"/><text x="74.0100%" y="495.50"></text></g><g><title>kernel::model::Entity::replace_scope (1 samples, 0.08%)</title><rect x="73.7600%" y="469" width="0.0800%" height="15" fill="rgb(222,172,16)" fg:x="922" fg:w="1"/><text x="74.0100%" y="479.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="73.7600%" y="453" width="0.0800%" height="15" fill="rgb(233,192,5)" fg:x="922" fg:w="1"/><text x="74.0100%" y="463.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="73.9200%" y="501" width="0.0800%" height="15" fill="rgb(247,189,41)" fg:x="924" fg:w="1"/><text x="74.1700%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="73.9200%" y="485" width="0.0800%" height="15" fill="rgb(218,134,47)" fg:x="924" fg:w="1"/><text x="74.1700%" y="495.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="73.9200%" y="469" width="0.0800%" height="15" fill="rgb(216,29,3)" fg:x="924" fg:w="1"/><text x="74.1700%" y="479.50"></text></g><g><title>plugins_core::build::Build::leads_to (1 samples, 0.08%)</title><rect x="73.9200%" y="453" width="0.0800%" height="15" fill="rgb(246,140,12)" fg:x="924" fg:w="1"/><text x="74.1700%" y="463.50"></text></g><g><title>plugins_core::tools::leads_to (1 samples, 0.08%)</title><rect x="73.9200%" y="437" width="0.0800%" height="15" fill="rgb(230,136,11)" fg:x="924" fg:w="1"/><text x="74.1700%" y="447.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="73.9200%" y="421" width="0.0800%" height="15" fill="rgb(247,22,47)" fg:x="924" fg:w="1"/><text x="74.1700%" y="431.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.9200%" y="405" width="0.0800%" height="15" fill="rgb(218,84,22)" fg:x="924" fg:w="1"/><text x="74.1700%" y="415.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="74.0800%" y="421" width="0.1600%" height="15" fill="rgb(216,87,39)" fg:x="926" fg:w="2"/><text x="74.3300%" y="431.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="74.0800%" y="405" width="0.1600%" height="15" fill="rgb(221,178,8)" fg:x="926" fg:w="2"/><text x="74.3300%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.1600%" y="389" width="0.0800%" height="15" fill="rgb(230,42,11)" fg:x="927" fg:w="1"/><text x="74.4100%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="74.2400%" y="389" width="0.0800%" height="15" fill="rgb(237,229,4)" fg:x="928" fg:w="1"/><text x="74.4900%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.2400%" y="373" width="0.0800%" height="15" fill="rgb(222,31,33)" fg:x="928" fg:w="1"/><text x="74.4900%" y="383.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.2400%" y="357" width="0.0800%" height="15" fill="rgb(210,17,39)" fg:x="928" fg:w="1"/><text x="74.4900%" y="367.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="74.4000%" y="373" width="0.0800%" height="15" fill="rgb(244,93,20)" fg:x="930" fg:w="1"/><text x="74.6500%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="74.4800%" y="357" width="0.0800%" height="15" fill="rgb(210,40,47)" fg:x="931" fg:w="1"/><text x="74.7300%" y="367.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.4800%" y="341" width="0.0800%" height="15" fill="rgb(239,211,47)" fg:x="931" fg:w="1"/><text x="74.7300%" y="351.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="74.4800%" y="373" width="0.2400%" height="15" fill="rgb(251,223,49)" fg:x="931" fg:w="3"/><text x="74.7300%" y="383.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="74.5600%" y="357" width="0.1600%" height="15" fill="rgb(221,149,5)" fg:x="932" fg:w="2"/><text x="74.8100%" y="367.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.6400%" y="341" width="0.0800%" height="15" fill="rgb(219,224,51)" fg:x="933" fg:w="1"/><text x="74.8900%" y="351.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.6400%" y="325" width="0.0800%" height="15" fill="rgb(223,7,8)" fg:x="933" fg:w="1"/><text x="74.8900%" y="335.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="74.6400%" y="309" width="0.0800%" height="15" fill="rgb(241,217,22)" fg:x="933" fg:w="1"/><text x="74.8900%" y="319.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="74.2400%" y="421" width="0.5600%" height="15" fill="rgb(248,209,0)" fg:x="928" fg:w="7"/><text x="74.4900%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="74.2400%" y="405" width="0.5600%" height="15" fill="rgb(217,205,4)" fg:x="928" fg:w="7"/><text x="74.4900%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="74.3200%" y="389" width="0.4800%" height="15" fill="rgb(228,124,39)" fg:x="929" fg:w="6"/><text x="74.5700%" y="399.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.7200%" y="373" width="0.0800%" height="15" fill="rgb(250,116,42)" fg:x="934" fg:w="1"/><text x="74.9700%" y="383.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.7200%" y="357" width="0.0800%" height="15" fill="rgb(223,202,9)" fg:x="934" fg:w="1"/><text x="74.9700%" y="367.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="74.7200%" y="341" width="0.0800%" height="15" fill="rgb(242,222,40)" fg:x="934" fg:w="1"/><text x="74.9700%" y="351.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (11 samples, 0.88%)</title><rect x="74.0000%" y="437" width="0.8800%" height="15" fill="rgb(229,99,46)" fg:x="925" fg:w="11"/><text x="74.2500%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.8000%" y="421" width="0.0800%" height="15" fill="rgb(225,56,46)" fg:x="935" fg:w="1"/><text x="75.0500%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.8000%" y="405" width="0.0800%" height="15" fill="rgb(227,94,5)" fg:x="935" fg:w="1"/><text x="75.0500%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.8000%" y="389" width="0.0800%" height="15" fill="rgb(205,112,38)" fg:x="935" fg:w="1"/><text x="75.0500%" y="399.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="74.8800%" y="389" width="0.0800%" height="15" fill="rgb(231,133,46)" fg:x="936" fg:w="1"/><text x="75.1300%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.8800%" y="373" width="0.0800%" height="15" fill="rgb(217,16,9)" fg:x="936" fg:w="1"/><text x="75.1300%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.8800%" y="357" width="0.0800%" height="15" fill="rgb(249,173,9)" fg:x="936" fg:w="1"/><text x="75.1300%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.8800%" y="341" width="0.0800%" height="15" fill="rgb(205,163,53)" fg:x="936" fg:w="1"/><text x="75.1300%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.8800%" y="325" width="0.0800%" height="15" fill="rgb(217,54,41)" fg:x="936" fg:w="1"/><text x="75.1300%" y="335.50"></text></g><g><title>engine::session::Session::flush (13 samples, 1.04%)</title><rect x="74.0000%" y="501" width="1.0400%" height="15" fill="rgb(228,216,12)" fg:x="925" fg:w="13"/><text x="74.2500%" y="511.50"></text></g><g><title>engine::session::Session::save_entity_changes (13 samples, 1.04%)</title><rect x="74.0000%" y="485" width="1.0400%" height="15" fill="rgb(244,228,15)" fg:x="925" fg:w="13"/><text x="74.2500%" y="495.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (13 samples, 1.04%)</title><rect x="74.0000%" y="469" width="1.0400%" height="15" fill="rgb(221,176,53)" fg:x="925" fg:w="13"/><text x="74.2500%" y="479.50"></text></g><g><title>engine::session::Session::check_for_changes (13 samples, 1.04%)</title><rect x="74.0000%" y="453" width="1.0400%" height="15" fill="rgb(205,94,34)" fg:x="925" fg:w="13"/><text x="74.2500%" y="463.50"></text></g><g><title>kernel::compare::any_entity_changes (2 samples, 0.16%)</title><rect x="74.8800%" y="437" width="0.1600%" height="15" fill="rgb(213,110,48)" fg:x="936" fg:w="2"/><text x="75.1300%" y="447.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="74.8800%" y="421" width="0.1600%" height="15" fill="rgb(236,142,28)" fg:x="936" fg:w="2"/><text x="75.1300%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="74.8800%" y="405" width="0.1600%" height="15" fill="rgb(225,135,29)" fg:x="936" fg:w="2"/><text x="75.1300%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="74.9600%" y="389" width="0.0800%" height="15" fill="rgb(252,45,31)" fg:x="937" fg:w="1"/><text x="75.2100%" y="399.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (1 samples, 0.08%)</title><rect x="74.9600%" y="373" width="0.0800%" height="15" fill="rgb(211,187,50)" fg:x="937" fg:w="1"/><text x="75.2100%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="74.9600%" y="357" width="0.0800%" height="15" fill="rgb(229,109,7)" fg:x="937" fg:w="1"/><text x="75.2100%" y="367.50"></text></g><g><title>plugins_core::build::Build::holding (2 samples, 0.16%)</title><rect x="75.0400%" y="501" width="0.1600%" height="15" fill="rgb(251,131,51)" fg:x="938" fg:w="2"/><text x="75.2900%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="75.1200%" y="485" width="0.0800%" height="15" fill="rgb(251,180,35)" fg:x="939" fg:w="1"/><text x="75.3700%" y="495.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="75.1200%" y="469" width="0.0800%" height="15" fill="rgb(211,46,32)" fg:x="939" fg:w="1"/><text x="75.3700%" y="479.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="75.1200%" y="453" width="0.0800%" height="15" fill="rgb(248,123,17)" fg:x="939" fg:w="1"/><text x="75.3700%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.1200%" y="437" width="0.0800%" height="15" fill="rgb(227,141,18)" fg:x="939" fg:w="1"/><text x="75.3700%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.1200%" y="421" width="0.0800%" height="15" fill="rgb(216,102,9)" fg:x="939" fg:w="1"/><text x="75.3700%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="75.1200%" y="405" width="0.0800%" height="15" fill="rgb(253,47,13)" fg:x="939" fg:w="1"/><text x="75.3700%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.1200%" y="389" width="0.0800%" height="15" fill="rgb(226,93,23)" fg:x="939" fg:w="1"/><text x="75.3700%" y="399.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (18 samples, 1.44%)</title><rect x="73.8400%" y="517" width="1.4400%" height="15" fill="rgb(247,104,17)" fg:x="923" fg:w="18"/><text x="74.0900%" y="527.50"></text></g><g><title>plugins_core::build::Build::occupying (1 samples, 0.08%)</title><rect x="75.2000%" y="501" width="0.0800%" height="15" fill="rgb(233,203,26)" fg:x="940" fg:w="1"/><text x="75.4500%" y="511.50"></text></g><g><title>plugins_core::tools::set_occupying (1 samples, 0.08%)</title><rect x="75.2000%" y="485" width="0.0800%" height="15" fill="rgb(244,98,49)" fg:x="940" fg:w="1"/><text x="75.4500%" y="495.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (1 samples, 0.08%)</title><rect x="75.2000%" y="469" width="0.0800%" height="15" fill="rgb(235,134,22)" fg:x="940" fg:w="1"/><text x="75.4500%" y="479.50"></text></g><g><title>kernel::model::Entity::replace_scope (1 samples, 0.08%)</title><rect x="75.2000%" y="453" width="0.0800%" height="15" fill="rgb(221,70,32)" fg:x="940" fg:w="1"/><text x="75.4500%" y="463.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="75.2000%" y="437" width="0.0800%" height="15" fill="rgb(238,15,50)" fg:x="940" fg:w="1"/><text x="75.4500%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="75.2000%" y="421" width="0.0800%" height="15" fill="rgb(215,221,48)" fg:x="940" fg:w="1"/><text x="75.4500%" y="431.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (27 samples, 2.16%)</title><rect x="73.2000%" y="533" width="2.1600%" height="15" fill="rgb(236,73,3)" fg:x="915" fg:w="27"/><text x="73.4500%" y="543.50">&lt;..</text></g><g><title>plugins_core::build::BuildSurroundings::make (1 samples, 0.08%)</title><rect x="75.2800%" y="517" width="0.0800%" height="15" fill="rgb(250,107,11)" fg:x="941" fg:w="1"/><text x="75.5300%" y="527.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="75.2800%" y="501" width="0.0800%" height="15" fill="rgb(242,39,14)" fg:x="941" fg:w="1"/><text x="75.5300%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="75.2800%" y="485" width="0.0800%" height="15" fill="rgb(248,164,37)" fg:x="941" fg:w="1"/><text x="75.5300%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="75.3600%" y="437" width="0.0800%" height="15" fill="rgb(217,60,12)" fg:x="942" fg:w="1"/><text x="75.6100%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.3600%" y="421" width="0.0800%" height="15" fill="rgb(240,125,29)" fg:x="942" fg:w="1"/><text x="75.6100%" y="431.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="75.3600%" y="453" width="0.1600%" height="15" fill="rgb(208,207,28)" fg:x="942" fg:w="2"/><text x="75.6100%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.4400%" y="437" width="0.0800%" height="15" fill="rgb(209,159,27)" fg:x="943" fg:w="1"/><text x="75.6900%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.4400%" y="421" width="0.0800%" height="15" fill="rgb(251,176,53)" fg:x="943" fg:w="1"/><text x="75.6900%" y="431.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="75.4400%" y="405" width="0.0800%" height="15" fill="rgb(211,85,7)" fg:x="943" fg:w="1"/><text x="75.6900%" y="415.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="75.3600%" y="469" width="0.2400%" height="15" fill="rgb(216,64,54)" fg:x="942" fg:w="3"/><text x="75.6100%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="75.5200%" y="453" width="0.0800%" height="15" fill="rgb(217,54,24)" fg:x="944" fg:w="1"/><text x="75.7700%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="75.5200%" y="437" width="0.0800%" height="15" fill="rgb(208,206,53)" fg:x="944" fg:w="1"/><text x="75.7700%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="75.5200%" y="421" width="0.0800%" height="15" fill="rgb(251,74,39)" fg:x="944" fg:w="1"/><text x="75.7700%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.6000%" y="373" width="0.0800%" height="15" fill="rgb(226,47,5)" fg:x="945" fg:w="1"/><text x="75.8500%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.6000%" y="453" width="0.1600%" height="15" fill="rgb(234,111,33)" fg:x="945" fg:w="2"/><text x="75.8500%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="75.6000%" y="437" width="0.1600%" height="15" fill="rgb(251,14,10)" fg:x="945" fg:w="2"/><text x="75.8500%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.6000%" y="421" width="0.1600%" height="15" fill="rgb(232,43,0)" fg:x="945" fg:w="2"/><text x="75.8500%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.6000%" y="405" width="0.1600%" height="15" fill="rgb(222,68,43)" fg:x="945" fg:w="2"/><text x="75.8500%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.6000%" y="389" width="0.1600%" height="15" fill="rgb(217,24,23)" fg:x="945" fg:w="2"/><text x="75.8500%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.6800%" y="373" width="0.0800%" height="15" fill="rgb(229,209,14)" fg:x="946" fg:w="1"/><text x="75.9300%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.6800%" y="357" width="0.0800%" height="15" fill="rgb(250,149,48)" fg:x="946" fg:w="1"/><text x="75.9300%" y="367.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="75.7600%" y="421" width="0.0800%" height="15" fill="rgb(210,120,37)" fg:x="947" fg:w="1"/><text x="76.0100%" y="431.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="75.8400%" y="421" width="0.0800%" height="15" fill="rgb(210,21,8)" fg:x="948" fg:w="1"/><text x="76.0900%" y="431.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (2 samples, 0.16%)</title><rect x="75.9200%" y="421" width="0.1600%" height="15" fill="rgb(243,145,7)" fg:x="949" fg:w="2"/><text x="76.1700%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.0000%" y="405" width="0.0800%" height="15" fill="rgb(238,178,32)" fg:x="950" fg:w="1"/><text x="76.2500%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="76.0000%" y="389" width="0.0800%" height="15" fill="rgb(222,4,10)" fg:x="950" fg:w="1"/><text x="76.2500%" y="399.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="76.0000%" y="373" width="0.0800%" height="15" fill="rgb(239,7,37)" fg:x="950" fg:w="1"/><text x="76.2500%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.0000%" y="357" width="0.0800%" height="15" fill="rgb(215,31,37)" fg:x="950" fg:w="1"/><text x="76.2500%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.0000%" y="341" width="0.0800%" height="15" fill="rgb(224,83,33)" fg:x="950" fg:w="1"/><text x="76.2500%" y="351.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (5 samples, 0.40%)</title><rect x="75.7600%" y="453" width="0.4000%" height="15" fill="rgb(239,55,3)" fg:x="947" fg:w="5"/><text x="76.0100%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="75.7600%" y="437" width="0.4000%" height="15" fill="rgb(247,92,11)" fg:x="947" fg:w="5"/><text x="76.0100%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="76.0800%" y="421" width="0.0800%" height="15" fill="rgb(239,200,7)" fg:x="951" fg:w="1"/><text x="76.3300%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.0800%" y="405" width="0.0800%" height="15" fill="rgb(227,115,8)" fg:x="951" fg:w="1"/><text x="76.3300%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.0800%" y="389" width="0.0800%" height="15" fill="rgb(215,189,27)" fg:x="951" fg:w="1"/><text x="76.3300%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.0800%" y="373" width="0.0800%" height="15" fill="rgb(251,216,39)" fg:x="951" fg:w="1"/><text x="76.3300%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="76.1600%" y="453" width="0.0800%" height="15" fill="rgb(207,29,47)" fg:x="952" fg:w="1"/><text x="76.4100%" y="463.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="76.1600%" y="437" width="0.0800%" height="15" fill="rgb(210,71,34)" fg:x="952" fg:w="1"/><text x="76.4100%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.1600%" y="421" width="0.0800%" height="15" fill="rgb(253,217,51)" fg:x="952" fg:w="1"/><text x="76.4100%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.1600%" y="405" width="0.0800%" height="15" fill="rgb(222,117,46)" fg:x="952" fg:w="1"/><text x="76.4100%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.1600%" y="389" width="0.0800%" height="15" fill="rgb(226,132,6)" fg:x="952" fg:w="1"/><text x="76.4100%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.1600%" y="373" width="0.0800%" height="15" fill="rgb(254,145,51)" fg:x="952" fg:w="1"/><text x="76.4100%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.1600%" y="357" width="0.0800%" height="15" fill="rgb(231,199,27)" fg:x="952" fg:w="1"/><text x="76.4100%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.1600%" y="341" width="0.0800%" height="15" fill="rgb(245,158,14)" fg:x="952" fg:w="1"/><text x="76.4100%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.1600%" y="325" width="0.0800%" height="15" fill="rgb(240,113,14)" fg:x="952" fg:w="1"/><text x="76.4100%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.1600%" y="309" width="0.0800%" height="15" fill="rgb(210,20,13)" fg:x="952" fg:w="1"/><text x="76.4100%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.1600%" y="293" width="0.0800%" height="15" fill="rgb(241,144,13)" fg:x="952" fg:w="1"/><text x="76.4100%" y="303.50"></text></g><g><title>engine::session::Session::close (13 samples, 1.04%)</title><rect x="75.3600%" y="533" width="1.0400%" height="15" fill="rgb(235,43,34)" fg:x="942" fg:w="13"/><text x="75.6100%" y="543.50"></text></g><g><title>engine::session::Session::save_entity_changes (13 samples, 1.04%)</title><rect x="75.3600%" y="517" width="1.0400%" height="15" fill="rgb(208,36,20)" fg:x="942" fg:w="13"/><text x="75.6100%" y="527.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (13 samples, 1.04%)</title><rect x="75.3600%" y="501" width="1.0400%" height="15" fill="rgb(239,204,10)" fg:x="942" fg:w="13"/><text x="75.6100%" y="511.50"></text></g><g><title>engine::session::Session::check_for_changes (13 samples, 1.04%)</title><rect x="75.3600%" y="485" width="1.0400%" height="15" fill="rgb(217,84,43)" fg:x="942" fg:w="13"/><text x="75.6100%" y="495.50"></text></g><g><title>kernel::compare::any_entity_changes (10 samples, 0.80%)</title><rect x="75.6000%" y="469" width="0.8000%" height="15" fill="rgb(241,170,50)" fg:x="945" fg:w="10"/><text x="75.8500%" y="479.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="76.2400%" y="453" width="0.1600%" height="15" fill="rgb(226,205,29)" fg:x="953" fg:w="2"/><text x="76.4900%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="76.2400%" y="437" width="0.1600%" height="15" fill="rgb(233,113,1)" fg:x="953" fg:w="2"/><text x="76.4900%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="76.2400%" y="421" width="0.1600%" height="15" fill="rgb(253,98,13)" fg:x="953" fg:w="2"/><text x="76.4900%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="76.2400%" y="405" width="0.1600%" height="15" fill="rgb(211,115,12)" fg:x="953" fg:w="2"/><text x="76.4900%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="76.2400%" y="389" width="0.1600%" height="15" fill="rgb(208,12,16)" fg:x="953" fg:w="2"/><text x="76.4900%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="76.3200%" y="373" width="0.0800%" height="15" fill="rgb(237,193,54)" fg:x="954" fg:w="1"/><text x="76.5700%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="76.3200%" y="357" width="0.0800%" height="15" fill="rgb(243,22,42)" fg:x="954" fg:w="1"/><text x="76.5700%" y="367.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="76.4000%" y="453" width="0.0800%" height="15" fill="rgb(233,151,36)" fg:x="955" fg:w="1"/><text x="76.6500%" y="463.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="76.4800%" y="437" width="0.0800%" height="15" fill="rgb(237,57,45)" fg:x="956" fg:w="1"/><text x="76.7300%" y="447.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="76.4800%" y="421" width="0.0800%" height="15" fill="rgb(221,88,17)" fg:x="956" fg:w="1"/><text x="76.7300%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.4800%" y="405" width="0.0800%" height="15" fill="rgb(230,79,15)" fg:x="956" fg:w="1"/><text x="76.7300%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.4800%" y="389" width="0.0800%" height="15" fill="rgb(213,57,13)" fg:x="956" fg:w="1"/><text x="76.7300%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="76.4800%" y="373" width="0.0800%" height="15" fill="rgb(222,116,39)" fg:x="956" fg:w="1"/><text x="76.7300%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.4800%" y="357" width="0.0800%" height="15" fill="rgb(245,107,2)" fg:x="956" fg:w="1"/><text x="76.7300%" y="367.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.4800%" y="341" width="0.0800%" height="15" fill="rgb(238,1,10)" fg:x="956" fg:w="1"/><text x="76.7300%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.4800%" y="325" width="0.0800%" height="15" fill="rgb(249,4,48)" fg:x="956" fg:w="1"/><text x="76.7300%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.4800%" y="309" width="0.0800%" height="15" fill="rgb(223,151,18)" fg:x="956" fg:w="1"/><text x="76.7300%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.4800%" y="293" width="0.0800%" height="15" fill="rgb(227,65,43)" fg:x="956" fg:w="1"/><text x="76.7300%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.4800%" y="277" width="0.0800%" height="15" fill="rgb(218,40,45)" fg:x="956" fg:w="1"/><text x="76.7300%" y="287.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living (3 samples, 0.24%)</title><rect x="76.4000%" y="501" width="0.2400%" height="15" fill="rgb(252,121,31)" fg:x="955" fg:w="3"/><text x="76.6500%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (3 samples, 0.24%)</title><rect x="76.4000%" y="485" width="0.2400%" height="15" fill="rgb(219,158,43)" fg:x="955" fg:w="3"/><text x="76.6500%" y="495.50"></text></g><g><title>engine::internal::Entities::prepare_entity (3 samples, 0.24%)</title><rect x="76.4000%" y="469" width="0.2400%" height="15" fill="rgb(231,162,42)" fg:x="955" fg:w="3"/><text x="76.6500%" y="479.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="76.4800%" y="453" width="0.1600%" height="15" fill="rgb(217,179,25)" fg:x="956" fg:w="2"/><text x="76.7300%" y="463.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="76.5600%" y="437" width="0.0800%" height="15" fill="rgb(206,212,31)" fg:x="957" fg:w="1"/><text x="76.8100%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.5600%" y="421" width="0.0800%" height="15" fill="rgb(235,144,12)" fg:x="957" fg:w="1"/><text x="76.8100%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.5600%" y="405" width="0.0800%" height="15" fill="rgb(213,51,10)" fg:x="957" fg:w="1"/><text x="76.8100%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.5600%" y="389" width="0.0800%" height="15" fill="rgb(231,145,14)" fg:x="957" fg:w="1"/><text x="76.8100%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.5600%" y="373" width="0.0800%" height="15" fill="rgb(235,15,28)" fg:x="957" fg:w="1"/><text x="76.8100%" y="383.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="76.5600%" y="357" width="0.0800%" height="15" fill="rgb(237,206,10)" fg:x="957" fg:w="1"/><text x="76.8100%" y="367.50"></text></g><g><title>&lt;kernel::model::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="76.7200%" y="437" width="0.0800%" height="15" fill="rgb(236,227,27)" fg:x="959" fg:w="1"/><text x="76.9700%" y="447.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="76.7200%" y="421" width="0.0800%" height="15" fill="rgb(246,83,35)" fg:x="959" fg:w="1"/><text x="76.9700%" y="431.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="76.7200%" y="405" width="0.0800%" height="15" fill="rgb(220,136,24)" fg:x="959" fg:w="1"/><text x="76.9700%" y="415.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="76.7200%" y="389" width="0.0800%" height="15" fill="rgb(217,3,25)" fg:x="959" fg:w="1"/><text x="76.9700%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="76.7200%" y="373" width="0.0800%" height="15" fill="rgb(239,24,14)" fg:x="959" fg:w="1"/><text x="76.9700%" y="383.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="76.8000%" y="437" width="0.0800%" height="15" fill="rgb(244,16,53)" fg:x="960" fg:w="1"/><text x="77.0500%" y="447.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="76.8000%" y="421" width="0.0800%" height="15" fill="rgb(208,175,44)" fg:x="960" fg:w="1"/><text x="77.0500%" y="431.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="76.8000%" y="405" width="0.0800%" height="15" fill="rgb(252,18,48)" fg:x="960" fg:w="1"/><text x="77.0500%" y="415.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="76.8800%" y="389" width="0.0800%" height="15" fill="rgb(234,199,32)" fg:x="961" fg:w="1"/><text x="77.1300%" y="399.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="76.8800%" y="373" width="0.0800%" height="15" fill="rgb(225,77,54)" fg:x="961" fg:w="1"/><text x="77.1300%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="76.8800%" y="357" width="0.0800%" height="15" fill="rgb(225,42,25)" fg:x="961" fg:w="1"/><text x="77.1300%" y="367.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.8800%" y="341" width="0.0800%" height="15" fill="rgb(242,227,46)" fg:x="961" fg:w="1"/><text x="77.1300%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.8800%" y="325" width="0.0800%" height="15" fill="rgb(246,197,35)" fg:x="961" fg:w="1"/><text x="77.1300%" y="335.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="76.8800%" y="309" width="0.0800%" height="15" fill="rgb(215,159,26)" fg:x="961" fg:w="1"/><text x="77.1300%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="76.8800%" y="293" width="0.0800%" height="15" fill="rgb(212,194,50)" fg:x="961" fg:w="1"/><text x="77.1300%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="76.8800%" y="277" width="0.0800%" height="15" fill="rgb(246,132,1)" fg:x="961" fg:w="1"/><text x="77.1300%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="76.8800%" y="261" width="0.0800%" height="15" fill="rgb(217,71,7)" fg:x="961" fg:w="1"/><text x="77.1300%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="76.8800%" y="245" width="0.0800%" height="15" fill="rgb(252,59,32)" fg:x="961" fg:w="1"/><text x="77.1300%" y="255.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="76.9600%" y="293" width="0.1600%" height="15" fill="rgb(253,204,25)" fg:x="962" fg:w="2"/><text x="77.2100%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="76.9600%" y="277" width="0.1600%" height="15" fill="rgb(232,21,16)" fg:x="962" fg:w="2"/><text x="77.2100%" y="287.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (2 samples, 0.16%)</title><rect x="76.9600%" y="261" width="0.1600%" height="15" fill="rgb(248,90,29)" fg:x="962" fg:w="2"/><text x="77.2100%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="76.9600%" y="357" width="0.2400%" height="15" fill="rgb(249,223,7)" fg:x="962" fg:w="3"/><text x="77.2100%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="76.9600%" y="341" width="0.2400%" height="15" fill="rgb(231,119,42)" fg:x="962" fg:w="3"/><text x="77.2100%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (3 samples, 0.24%)</title><rect x="76.9600%" y="325" width="0.2400%" height="15" fill="rgb(215,41,35)" fg:x="962" fg:w="3"/><text x="77.2100%" y="335.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (3 samples, 0.24%)</title><rect x="76.9600%" y="309" width="0.2400%" height="15" fill="rgb(220,44,45)" fg:x="962" fg:w="3"/><text x="77.2100%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1 samples, 0.08%)</title><rect x="77.1200%" y="293" width="0.0800%" height="15" fill="rgb(253,197,36)" fg:x="964" fg:w="1"/><text x="77.3700%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="77.1200%" y="277" width="0.0800%" height="15" fill="rgb(245,225,54)" fg:x="964" fg:w="1"/><text x="77.3700%" y="287.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="77.1200%" y="261" width="0.0800%" height="15" fill="rgb(239,94,37)" fg:x="964" fg:w="1"/><text x="77.3700%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (6 samples, 0.48%)</title><rect x="77.2800%" y="293" width="0.4800%" height="15" fill="rgb(242,217,10)" fg:x="966" fg:w="6"/><text x="77.5300%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.48%)</title><rect x="77.2800%" y="277" width="0.4800%" height="15" fill="rgb(250,193,7)" fg:x="966" fg:w="6"/><text x="77.5300%" y="287.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="77.8400%" y="277" width="0.0800%" height="15" fill="rgb(230,104,19)" fg:x="973" fg:w="1"/><text x="78.0900%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="77.9200%" y="277" width="0.1600%" height="15" fill="rgb(230,181,4)" fg:x="974" fg:w="2"/><text x="78.1700%" y="287.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="78.0000%" y="261" width="0.0800%" height="15" fill="rgb(216,219,49)" fg:x="975" fg:w="1"/><text x="78.2500%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="78.0000%" y="245" width="0.0800%" height="15" fill="rgb(254,144,0)" fg:x="975" fg:w="1"/><text x="78.2500%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.0000%" y="229" width="0.0800%" height="15" fill="rgb(205,209,38)" fg:x="975" fg:w="1"/><text x="78.2500%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.40%)</title><rect x="77.7600%" y="293" width="0.4000%" height="15" fill="rgb(240,21,42)" fg:x="972" fg:w="5"/><text x="78.0100%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="78.0800%" y="277" width="0.0800%" height="15" fill="rgb(241,132,3)" fg:x="976" fg:w="1"/><text x="78.3300%" y="287.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="78.2400%" y="229" width="0.2400%" height="15" fill="rgb(225,14,2)" fg:x="978" fg:w="3"/><text x="78.4900%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="78.4800%" y="229" width="0.0800%" height="15" fill="rgb(210,141,35)" fg:x="981" fg:w="1"/><text x="78.7300%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="78.4800%" y="213" width="0.0800%" height="15" fill="rgb(251,14,44)" fg:x="981" fg:w="1"/><text x="78.7300%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.4800%" y="197" width="0.0800%" height="15" fill="rgb(247,48,18)" fg:x="981" fg:w="1"/><text x="78.7300%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="78.4800%" y="181" width="0.0800%" height="15" fill="rgb(225,0,40)" fg:x="981" fg:w="1"/><text x="78.7300%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="78.5600%" y="229" width="0.1600%" height="15" fill="rgb(221,31,33)" fg:x="982" fg:w="2"/><text x="78.8100%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="78.5600%" y="213" width="0.1600%" height="15" fill="rgb(237,42,40)" fg:x="982" fg:w="2"/><text x="78.8100%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="78.6400%" y="197" width="0.0800%" height="15" fill="rgb(233,51,29)" fg:x="983" fg:w="1"/><text x="78.8900%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.6400%" y="181" width="0.0800%" height="15" fill="rgb(226,58,20)" fg:x="983" fg:w="1"/><text x="78.8900%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="78.6400%" y="165" width="0.0800%" height="15" fill="rgb(208,98,7)" fg:x="983" fg:w="1"/><text x="78.8900%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (33 samples, 2.64%)</title><rect x="78.7200%" y="229" width="2.6400%" height="15" fill="rgb(228,143,44)" fg:x="984" fg:w="33"/><text x="78.9700%" y="239.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (33 samples, 2.64%)</title><rect x="78.7200%" y="213" width="2.6400%" height="15" fill="rgb(246,55,38)" fg:x="984" fg:w="33"/><text x="78.9700%" y="223.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (33 samples, 2.64%)</title><rect x="78.7200%" y="197" width="2.6400%" height="15" fill="rgb(247,87,16)" fg:x="984" fg:w="33"/><text x="78.9700%" y="207.50">al..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="81.3600%" y="229" width="0.1600%" height="15" fill="rgb(234,129,42)" fg:x="1017" fg:w="2"/><text x="81.6100%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.4400%" y="213" width="0.0800%" height="15" fill="rgb(220,82,16)" fg:x="1018" fg:w="1"/><text x="81.6900%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (43 samples, 3.44%)</title><rect x="78.1600%" y="277" width="3.4400%" height="15" fill="rgb(211,88,4)" fg:x="977" fg:w="43"/><text x="78.4100%" y="287.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (43 samples, 3.44%)</title><rect x="78.1600%" y="261" width="3.4400%" height="15" fill="rgb(248,151,21)" fg:x="977" fg:w="43"/><text x="78.4100%" y="271.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (43 samples, 3.44%)</title><rect x="78.1600%" y="245" width="3.4400%" height="15" fill="rgb(238,163,6)" fg:x="977" fg:w="43"/><text x="78.4100%" y="255.50">reg..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="81.5200%" y="229" width="0.0800%" height="15" fill="rgb(209,183,11)" fg:x="1019" fg:w="1"/><text x="81.7700%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="81.5200%" y="213" width="0.0800%" height="15" fill="rgb(219,37,20)" fg:x="1019" fg:w="1"/><text x="81.7700%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.5200%" y="197" width="0.0800%" height="15" fill="rgb(210,158,4)" fg:x="1019" fg:w="1"/><text x="81.7700%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.5200%" y="181" width="0.0800%" height="15" fill="rgb(221,167,53)" fg:x="1019" fg:w="1"/><text x="81.7700%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.7600%" y="261" width="0.0800%" height="15" fill="rgb(237,151,45)" fg:x="1022" fg:w="1"/><text x="82.0100%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="81.8400%" y="261" width="0.3200%" height="15" fill="rgb(231,39,3)" fg:x="1023" fg:w="4"/><text x="82.0900%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="82.0800%" y="245" width="0.0800%" height="15" fill="rgb(212,167,28)" fg:x="1026" fg:w="1"/><text x="82.3300%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.0800%" y="229" width="0.0800%" height="15" fill="rgb(232,178,8)" fg:x="1026" fg:w="1"/><text x="82.3300%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="82.0800%" y="213" width="0.0800%" height="15" fill="rgb(225,151,20)" fg:x="1026" fg:w="1"/><text x="82.3300%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (10 samples, 0.80%)</title><rect x="81.6000%" y="277" width="0.8000%" height="15" fill="rgb(238,3,37)" fg:x="1020" fg:w="10"/><text x="81.8500%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="82.1600%" y="261" width="0.2400%" height="15" fill="rgb(251,147,42)" fg:x="1027" fg:w="3"/><text x="82.4100%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="82.4000%" y="277" width="0.0800%" height="15" fill="rgb(208,173,10)" fg:x="1030" fg:w="1"/><text x="82.6500%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="82.4000%" y="261" width="0.0800%" height="15" fill="rgb(246,225,4)" fg:x="1030" fg:w="1"/><text x="82.6500%" y="271.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="82.4000%" y="245" width="0.0800%" height="15" fill="rgb(248,102,6)" fg:x="1030" fg:w="1"/><text x="82.6500%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (67 samples, 5.36%)</title><rect x="77.2000%" y="309" width="5.3600%" height="15" fill="rgb(232,6,21)" fg:x="965" fg:w="67"/><text x="77.4500%" y="319.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (55 samples, 4.40%)</title><rect x="78.1600%" y="293" width="4.4000%" height="15" fill="rgb(221,179,22)" fg:x="977" fg:w="55"/><text x="78.4100%" y="303.50">regex..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="82.4800%" y="277" width="0.0800%" height="15" fill="rgb(252,50,20)" fg:x="1031" fg:w="1"/><text x="82.7300%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="82.5600%" y="309" width="0.3200%" height="15" fill="rgb(222,56,38)" fg:x="1032" fg:w="4"/><text x="82.8100%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="82.5600%" y="293" width="0.3200%" height="15" fill="rgb(206,193,29)" fg:x="1032" fg:w="4"/><text x="82.8100%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="82.7200%" y="277" width="0.1600%" height="15" fill="rgb(239,192,45)" fg:x="1034" fg:w="2"/><text x="82.9700%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="82.8000%" y="261" width="0.0800%" height="15" fill="rgb(254,18,36)" fg:x="1035" fg:w="1"/><text x="83.0500%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="82.8000%" y="245" width="0.0800%" height="15" fill="rgb(221,127,11)" fg:x="1035" fg:w="1"/><text x="83.0500%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.8000%" y="229" width="0.0800%" height="15" fill="rgb(234,146,35)" fg:x="1035" fg:w="1"/><text x="83.0500%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.8000%" y="213" width="0.0800%" height="15" fill="rgb(254,201,37)" fg:x="1035" fg:w="1"/><text x="83.0500%" y="223.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (72 samples, 5.76%)</title><rect x="77.2000%" y="325" width="5.7600%" height="15" fill="rgb(211,202,23)" fg:x="965" fg:w="72"/><text x="77.4500%" y="335.50">regex_a..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="82.8800%" y="309" width="0.0800%" height="15" fill="rgb(237,91,2)" fg:x="1036" fg:w="1"/><text x="83.1300%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="82.8800%" y="293" width="0.0800%" height="15" fill="rgb(226,228,36)" fg:x="1036" fg:w="1"/><text x="83.1300%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="82.8800%" y="277" width="0.0800%" height="15" fill="rgb(213,63,50)" fg:x="1036" fg:w="1"/><text x="83.1300%" y="287.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (73 samples, 5.84%)</title><rect x="77.2000%" y="357" width="5.8400%" height="15" fill="rgb(235,194,19)" fg:x="965" fg:w="73"/><text x="77.4500%" y="367.50">&lt;regex:..</text></g><g><title>regex::builders::Builder::build_one_string (73 samples, 5.84%)</title><rect x="77.2000%" y="341" width="5.8400%" height="15" fill="rgb(207,204,18)" fg:x="965" fg:w="73"/><text x="77.4500%" y="351.50">regex::..</text></g><g><title>regex_automata::meta::regex::Builder::configure (1 samples, 0.08%)</title><rect x="82.9600%" y="325" width="0.0800%" height="15" fill="rgb(248,8,7)" fg:x="1037" fg:w="1"/><text x="83.2100%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="83.0400%" y="325" width="0.0800%" height="15" fill="rgb(223,145,47)" fg:x="1038" fg:w="1"/><text x="83.2900%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.0400%" y="309" width="0.0800%" height="15" fill="rgb(228,84,11)" fg:x="1038" fg:w="1"/><text x="83.2900%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="83.0400%" y="357" width="0.1600%" height="15" fill="rgb(218,76,45)" fg:x="1038" fg:w="2"/><text x="83.2900%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="83.0400%" y="341" width="0.1600%" height="15" fill="rgb(223,80,15)" fg:x="1038" fg:w="2"/><text x="83.2900%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="83.1200%" y="325" width="0.0800%" height="15" fill="rgb(219,218,33)" fg:x="1039" fg:w="1"/><text x="83.3700%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="83.1200%" y="309" width="0.0800%" height="15" fill="rgb(208,51,11)" fg:x="1039" fg:w="1"/><text x="83.3700%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.1200%" y="293" width="0.0800%" height="15" fill="rgb(229,165,39)" fg:x="1039" fg:w="1"/><text x="83.3700%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="83.6000%" y="277" width="0.0800%" height="15" fill="rgb(241,100,24)" fg:x="1045" fg:w="1"/><text x="83.8500%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.6800%" y="277" width="0.0800%" height="15" fill="rgb(228,14,23)" fg:x="1046" fg:w="1"/><text x="83.9300%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (10 samples, 0.80%)</title><rect x="83.2000%" y="293" width="0.8000%" height="15" fill="rgb(247,116,52)" fg:x="1040" fg:w="10"/><text x="83.4500%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="83.7600%" y="277" width="0.2400%" height="15" fill="rgb(216,149,33)" fg:x="1047" fg:w="3"/><text x="84.0100%" y="287.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (90 samples, 7.20%)</title><rect x="76.9600%" y="373" width="7.2000%" height="15" fill="rgb(238,142,29)" fg:x="962" fg:w="90"/><text x="77.2100%" y="383.50">indefinite..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (12 samples, 0.96%)</title><rect x="83.2000%" y="357" width="0.9600%" height="15" fill="rgb(224,83,40)" fg:x="1040" fg:w="12"/><text x="83.4500%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (12 samples, 0.96%)</title><rect x="83.2000%" y="341" width="0.9600%" height="15" fill="rgb(234,165,11)" fg:x="1040" fg:w="12"/><text x="83.4500%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (12 samples, 0.96%)</title><rect x="83.2000%" y="325" width="0.9600%" height="15" fill="rgb(215,96,23)" fg:x="1040" fg:w="12"/><text x="83.4500%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (12 samples, 0.96%)</title><rect x="83.2000%" y="309" width="0.9600%" height="15" fill="rgb(233,179,26)" fg:x="1040" fg:w="12"/><text x="83.4500%" y="319.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="84.0000%" y="293" width="0.1600%" height="15" fill="rgb(225,129,33)" fg:x="1050" fg:w="2"/><text x="84.2500%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="84.0000%" y="277" width="0.1600%" height="15" fill="rgb(237,49,13)" fg:x="1050" fg:w="2"/><text x="84.2500%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="84.0000%" y="261" width="0.1600%" height="15" fill="rgb(211,3,31)" fg:x="1050" fg:w="2"/><text x="84.2500%" y="271.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="84.0000%" y="245" width="0.1600%" height="15" fill="rgb(216,152,19)" fg:x="1050" fg:w="2"/><text x="84.2500%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="84.1600%" y="309" width="0.0800%" height="15" fill="rgb(251,121,35)" fg:x="1052" fg:w="1"/><text x="84.4100%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="84.1600%" y="293" width="0.0800%" height="15" fill="rgb(210,217,47)" fg:x="1052" fg:w="1"/><text x="84.4100%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="84.1600%" y="277" width="0.0800%" height="15" fill="rgb(244,116,22)" fg:x="1052" fg:w="1"/><text x="84.4100%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="84.2400%" y="309" width="0.1600%" height="15" fill="rgb(228,17,21)" fg:x="1053" fg:w="2"/><text x="84.4900%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="84.2400%" y="293" width="0.1600%" height="15" fill="rgb(240,149,34)" fg:x="1053" fg:w="2"/><text x="84.4900%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="84.3200%" y="277" width="0.0800%" height="15" fill="rgb(208,125,47)" fg:x="1054" fg:w="1"/><text x="84.5700%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="84.3200%" y="261" width="0.0800%" height="15" fill="rgb(249,186,39)" fg:x="1054" fg:w="1"/><text x="84.5700%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.3200%" y="245" width="0.0800%" height="15" fill="rgb(240,220,33)" fg:x="1054" fg:w="1"/><text x="84.5700%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="84.3200%" y="229" width="0.0800%" height="15" fill="rgb(243,110,23)" fg:x="1054" fg:w="1"/><text x="84.5700%" y="239.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="84.4000%" y="309" width="0.0800%" height="15" fill="rgb(219,163,46)" fg:x="1055" fg:w="1"/><text x="84.6500%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.4800%" y="293" width="0.0800%" height="15" fill="rgb(216,126,30)" fg:x="1056" fg:w="1"/><text x="84.7300%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (5 samples, 0.40%)</title><rect x="84.5600%" y="293" width="0.4000%" height="15" fill="rgb(208,139,11)" fg:x="1057" fg:w="5"/><text x="84.8100%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (5 samples, 0.40%)</title><rect x="84.5600%" y="277" width="0.4000%" height="15" fill="rgb(213,118,36)" fg:x="1057" fg:w="5"/><text x="84.8100%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.8800%" y="261" width="0.0800%" height="15" fill="rgb(226,43,17)" fg:x="1061" fg:w="1"/><text x="85.1300%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="84.9600%" y="293" width="0.0800%" height="15" fill="rgb(254,217,4)" fg:x="1062" fg:w="1"/><text x="85.2100%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="84.9600%" y="277" width="0.0800%" height="15" fill="rgb(210,134,47)" fg:x="1062" fg:w="1"/><text x="85.2100%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="85.0400%" y="261" width="0.0800%" height="15" fill="rgb(237,24,49)" fg:x="1063" fg:w="1"/><text x="85.2900%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="85.0400%" y="245" width="0.0800%" height="15" fill="rgb(251,39,46)" fg:x="1063" fg:w="1"/><text x="85.2900%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.0400%" y="229" width="0.0800%" height="15" fill="rgb(251,220,3)" fg:x="1063" fg:w="1"/><text x="85.2900%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="85.0400%" y="213" width="0.0800%" height="15" fill="rgb(228,105,12)" fg:x="1063" fg:w="1"/><text x="85.2900%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (7 samples, 0.56%)</title><rect x="85.1200%" y="261" width="0.5600%" height="15" fill="rgb(215,196,1)" fg:x="1064" fg:w="7"/><text x="85.3700%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (6 samples, 0.48%)</title><rect x="85.2000%" y="245" width="0.4800%" height="15" fill="rgb(214,33,39)" fg:x="1065" fg:w="6"/><text x="85.4500%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="85.3600%" y="229" width="0.3200%" height="15" fill="rgb(220,19,52)" fg:x="1067" fg:w="4"/><text x="85.6100%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="85.3600%" y="213" width="0.3200%" height="15" fill="rgb(221,78,38)" fg:x="1067" fg:w="4"/><text x="85.6100%" y="223.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="85.3600%" y="197" width="0.3200%" height="15" fill="rgb(253,30,16)" fg:x="1067" fg:w="4"/><text x="85.6100%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (12 samples, 0.96%)</title><rect x="85.0400%" y="293" width="0.9600%" height="15" fill="rgb(242,65,0)" fg:x="1063" fg:w="12"/><text x="85.2900%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (12 samples, 0.96%)</title><rect x="85.0400%" y="277" width="0.9600%" height="15" fill="rgb(235,201,12)" fg:x="1063" fg:w="12"/><text x="85.2900%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (4 samples, 0.32%)</title><rect x="85.6800%" y="261" width="0.3200%" height="15" fill="rgb(233,161,9)" fg:x="1071" fg:w="4"/><text x="85.9300%" y="271.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (4 samples, 0.32%)</title><rect x="85.6800%" y="245" width="0.3200%" height="15" fill="rgb(241,207,41)" fg:x="1071" fg:w="4"/><text x="85.9300%" y="255.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (4 samples, 0.32%)</title><rect x="85.6800%" y="229" width="0.3200%" height="15" fill="rgb(212,69,46)" fg:x="1071" fg:w="4"/><text x="85.9300%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="86.0000%" y="293" width="0.0800%" height="15" fill="rgb(239,69,45)" fg:x="1075" fg:w="1"/><text x="86.2500%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="86.0800%" y="245" width="0.0800%" height="15" fill="rgb(242,117,48)" fg:x="1076" fg:w="1"/><text x="86.3300%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.0800%" y="229" width="0.0800%" height="15" fill="rgb(228,41,36)" fg:x="1076" fg:w="1"/><text x="86.3300%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.0800%" y="213" width="0.0800%" height="15" fill="rgb(212,3,32)" fg:x="1076" fg:w="1"/><text x="86.3300%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.0800%" y="197" width="0.0800%" height="15" fill="rgb(233,41,49)" fg:x="1076" fg:w="1"/><text x="86.3300%" y="207.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="86.8800%" y="181" width="0.3200%" height="15" fill="rgb(252,170,49)" fg:x="1086" fg:w="4"/><text x="87.1300%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="87.2000%" y="181" width="0.2400%" height="15" fill="rgb(229,53,26)" fg:x="1090" fg:w="3"/><text x="87.4500%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (7 samples, 0.56%)</title><rect x="87.4400%" y="181" width="0.5600%" height="15" fill="rgb(217,157,12)" fg:x="1093" fg:w="7"/><text x="87.6900%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (7 samples, 0.56%)</title><rect x="87.4400%" y="165" width="0.5600%" height="15" fill="rgb(227,17,9)" fg:x="1093" fg:w="7"/><text x="87.6900%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="87.8400%" y="149" width="0.1600%" height="15" fill="rgb(218,84,12)" fg:x="1098" fg:w="2"/><text x="88.0900%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.9200%" y="133" width="0.0800%" height="15" fill="rgb(212,79,24)" fg:x="1099" fg:w="1"/><text x="88.1700%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="88.0000%" y="181" width="0.0800%" height="15" fill="rgb(217,222,37)" fg:x="1100" fg:w="1"/><text x="88.2500%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="88.0000%" y="165" width="0.0800%" height="15" fill="rgb(246,208,8)" fg:x="1100" fg:w="1"/><text x="88.2500%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="88.0000%" y="149" width="0.0800%" height="15" fill="rgb(244,133,10)" fg:x="1100" fg:w="1"/><text x="88.2500%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (34 samples, 2.72%)</title><rect x="88.0800%" y="181" width="2.7200%" height="15" fill="rgb(209,219,41)" fg:x="1101" fg:w="34"/><text x="88.3300%" y="191.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (34 samples, 2.72%)</title><rect x="88.0800%" y="165" width="2.7200%" height="15" fill="rgb(253,175,45)" fg:x="1101" fg:w="34"/><text x="88.3300%" y="175.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (34 samples, 2.72%)</title><rect x="88.0800%" y="149" width="2.7200%" height="15" fill="rgb(235,100,37)" fg:x="1101" fg:w="34"/><text x="88.3300%" y="159.50">al..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="90.8000%" y="181" width="0.0800%" height="15" fill="rgb(225,87,19)" fg:x="1135" fg:w="1"/><text x="91.0500%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (62 samples, 4.96%)</title><rect x="86.0800%" y="277" width="4.9600%" height="15" fill="rgb(217,152,17)" fg:x="1076" fg:w="62"/><text x="86.3300%" y="287.50">&lt;core:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (62 samples, 4.96%)</title><rect x="86.0800%" y="261" width="4.9600%" height="15" fill="rgb(235,72,13)" fg:x="1076" fg:w="62"/><text x="86.3300%" y="271.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (61 samples, 4.88%)</title><rect x="86.1600%" y="245" width="4.8800%" height="15" fill="rgb(233,140,18)" fg:x="1077" fg:w="61"/><text x="86.4100%" y="255.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (61 samples, 4.88%)</title><rect x="86.1600%" y="229" width="4.8800%" height="15" fill="rgb(207,212,28)" fg:x="1077" fg:w="61"/><text x="86.4100%" y="239.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (61 samples, 4.88%)</title><rect x="86.1600%" y="213" width="4.8800%" height="15" fill="rgb(220,130,25)" fg:x="1077" fg:w="61"/><text x="86.4100%" y="223.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (61 samples, 4.88%)</title><rect x="86.1600%" y="197" width="4.8800%" height="15" fill="rgb(205,55,34)" fg:x="1077" fg:w="61"/><text x="86.4100%" y="207.50">regex_..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="90.8800%" y="181" width="0.1600%" height="15" fill="rgb(237,54,35)" fg:x="1136" fg:w="2"/><text x="91.1300%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="91.2000%" y="261" width="0.1600%" height="15" fill="rgb(208,67,23)" fg:x="1140" fg:w="2"/><text x="91.4500%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="91.3600%" y="261" width="0.2400%" height="15" fill="rgb(206,207,50)" fg:x="1142" fg:w="3"/><text x="91.6100%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="91.6000%" y="261" width="0.1600%" height="15" fill="rgb(213,211,42)" fg:x="1145" fg:w="2"/><text x="91.8500%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="91.7600%" y="261" width="0.1600%" height="15" fill="rgb(252,197,50)" fg:x="1147" fg:w="2"/><text x="92.0100%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::new (94 samples, 7.52%)</title><rect x="84.4800%" y="309" width="7.5200%" height="15" fill="rgb(251,211,41)" fg:x="1056" fg:w="94"/><text x="84.7300%" y="319.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (74 samples, 5.92%)</title><rect x="86.0800%" y="293" width="5.9200%" height="15" fill="rgb(229,211,5)" fg:x="1076" fg:w="74"/><text x="86.3300%" y="303.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (12 samples, 0.96%)</title><rect x="91.0400%" y="277" width="0.9600%" height="15" fill="rgb(239,36,31)" fg:x="1138" fg:w="12"/><text x="91.2900%" y="287.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="91.9200%" y="261" width="0.0800%" height="15" fill="rgb(248,67,31)" fg:x="1149" fg:w="1"/><text x="92.1700%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.9200%" y="245" width="0.0800%" height="15" fill="rgb(249,55,44)" fg:x="1149" fg:w="1"/><text x="92.1700%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.9200%" y="229" width="0.0800%" height="15" fill="rgb(216,82,12)" fg:x="1149" fg:w="1"/><text x="92.1700%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.9200%" y="213" width="0.0800%" height="15" fill="rgb(242,174,1)" fg:x="1149" fg:w="1"/><text x="92.1700%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="92.0000%" y="277" width="0.0800%" height="15" fill="rgb(208,120,29)" fg:x="1150" fg:w="1"/><text x="92.2500%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="92.0800%" y="277" width="0.0800%" height="15" fill="rgb(221,105,43)" fg:x="1151" fg:w="1"/><text x="92.3300%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="92.0800%" y="261" width="0.0800%" height="15" fill="rgb(234,124,22)" fg:x="1151" fg:w="1"/><text x="92.3300%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.0800%" y="245" width="0.0800%" height="15" fill="rgb(212,23,30)" fg:x="1151" fg:w="1"/><text x="92.3300%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.0800%" y="229" width="0.0800%" height="15" fill="rgb(219,122,53)" fg:x="1151" fg:w="1"/><text x="92.3300%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.0800%" y="213" width="0.0800%" height="15" fill="rgb(248,84,24)" fg:x="1151" fg:w="1"/><text x="92.3300%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="92.0000%" y="309" width="0.2400%" height="15" fill="rgb(245,115,18)" fg:x="1150" fg:w="3"/><text x="92.2500%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="92.0000%" y="293" width="0.2400%" height="15" fill="rgb(227,176,51)" fg:x="1150" fg:w="3"/><text x="92.2500%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="92.1600%" y="277" width="0.0800%" height="15" fill="rgb(229,63,42)" fg:x="1152" fg:w="1"/><text x="92.4100%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.1600%" y="261" width="0.0800%" height="15" fill="rgb(247,202,24)" fg:x="1152" fg:w="1"/><text x="92.4100%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.3200%" y="229" width="0.0800%" height="15" fill="rgb(244,173,20)" fg:x="1154" fg:w="1"/><text x="92.5700%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="92.2400%" y="261" width="0.2400%" height="15" fill="rgb(242,81,47)" fg:x="1153" fg:w="3"/><text x="92.4900%" y="271.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.16%)</title><rect x="92.3200%" y="245" width="0.1600%" height="15" fill="rgb(231,185,54)" fg:x="1154" fg:w="2"/><text x="92.5700%" y="255.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="92.4000%" y="229" width="0.0800%" height="15" fill="rgb(243,55,32)" fg:x="1155" fg:w="1"/><text x="92.6500%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="92.2400%" y="277" width="0.3200%" height="15" fill="rgb(208,167,19)" fg:x="1153" fg:w="4"/><text x="92.4900%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="92.4800%" y="261" width="0.0800%" height="15" fill="rgb(231,72,35)" fg:x="1156" fg:w="1"/><text x="92.7300%" y="271.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="92.4800%" y="245" width="0.0800%" height="15" fill="rgb(250,173,51)" fg:x="1156" fg:w="1"/><text x="92.7300%" y="255.50"></text></g><g><title>regex_syntax::hir::Properties::capture (1 samples, 0.08%)</title><rect x="92.5600%" y="261" width="0.0800%" height="15" fill="rgb(209,5,22)" fg:x="1157" fg:w="1"/><text x="92.8100%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="92.5600%" y="277" width="0.1600%" height="15" fill="rgb(250,174,19)" fg:x="1157" fg:w="2"/><text x="92.8100%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::HirFrame::unwrap_class_unicode (1 samples, 0.08%)</title><rect x="92.6400%" y="261" width="0.0800%" height="15" fill="rgb(217,3,49)" fg:x="1158" fg:w="1"/><text x="92.8900%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (108 samples, 8.64%)</title><rect x="84.1600%" y="325" width="8.6400%" height="15" fill="rgb(218,225,5)" fg:x="1052" fg:w="108"/><text x="84.4100%" y="335.50">regex_automa..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (7 samples, 0.56%)</title><rect x="92.2400%" y="309" width="0.5600%" height="15" fill="rgb(236,89,11)" fg:x="1153" fg:w="7"/><text x="92.4900%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (7 samples, 0.56%)</title><rect x="92.2400%" y="293" width="0.5600%" height="15" fill="rgb(206,33,28)" fg:x="1153" fg:w="7"/><text x="92.4900%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="92.7200%" y="277" width="0.0800%" height="15" fill="rgb(241,56,42)" fg:x="1159" fg:w="1"/><text x="92.9700%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="92.7200%" y="261" width="0.0800%" height="15" fill="rgb(222,44,11)" fg:x="1159" fg:w="1"/><text x="92.9700%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.7200%" y="245" width="0.0800%" height="15" fill="rgb(234,111,20)" fg:x="1159" fg:w="1"/><text x="92.9700%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.7200%" y="229" width="0.0800%" height="15" fill="rgb(237,77,6)" fg:x="1159" fg:w="1"/><text x="92.9700%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="92.7200%" y="213" width="0.0800%" height="15" fill="rgb(235,111,23)" fg:x="1159" fg:w="1"/><text x="92.9700%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (109 samples, 8.72%)</title><rect x="84.1600%" y="357" width="8.7200%" height="15" fill="rgb(251,135,29)" fg:x="1052" fg:w="109"/><text x="84.4100%" y="367.50">&lt;regex::rege..</text></g><g><title>regex::builders::Builder::build_one_string (109 samples, 8.72%)</title><rect x="84.1600%" y="341" width="8.7200%" height="15" fill="rgb(217,57,1)" fg:x="1052" fg:w="109"/><text x="84.4100%" y="351.50">regex::build..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="92.8000%" y="325" width="0.0800%" height="15" fill="rgb(249,119,31)" fg:x="1160" fg:w="1"/><text x="93.0500%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="92.8800%" y="357" width="0.0800%" height="15" fill="rgb(233,164,33)" fg:x="1161" fg:w="1"/><text x="93.1300%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="92.8800%" y="341" width="0.0800%" height="15" fill="rgb(250,217,43)" fg:x="1161" fg:w="1"/><text x="93.1300%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="92.8800%" y="325" width="0.0800%" height="15" fill="rgb(232,154,50)" fg:x="1161" fg:w="1"/><text x="93.1300%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="92.8800%" y="309" width="0.0800%" height="15" fill="rgb(227,190,8)" fg:x="1161" fg:w="1"/><text x="93.1300%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.8800%" y="293" width="0.0800%" height="15" fill="rgb(209,217,32)" fg:x="1161" fg:w="1"/><text x="93.1300%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="92.9600%" y="309" width="0.0800%" height="15" fill="rgb(243,203,50)" fg:x="1162" fg:w="1"/><text x="93.2100%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="92.9600%" y="293" width="0.0800%" height="15" fill="rgb(232,152,27)" fg:x="1162" fg:w="1"/><text x="93.2100%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="92.9600%" y="341" width="0.1600%" height="15" fill="rgb(240,34,29)" fg:x="1162" fg:w="2"/><text x="93.2100%" y="351.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="92.9600%" y="325" width="0.1600%" height="15" fill="rgb(215,185,52)" fg:x="1162" fg:w="2"/><text x="93.2100%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="93.0400%" y="309" width="0.0800%" height="15" fill="rgb(240,89,49)" fg:x="1163" fg:w="1"/><text x="93.2900%" y="319.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="93.0400%" y="293" width="0.0800%" height="15" fill="rgb(225,12,52)" fg:x="1163" fg:w="1"/><text x="93.2900%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="93.2800%" y="261" width="0.0800%" height="15" fill="rgb(239,128,45)" fg:x="1166" fg:w="1"/><text x="93.5300%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="93.2800%" y="245" width="0.0800%" height="15" fill="rgb(211,78,47)" fg:x="1166" fg:w="1"/><text x="93.5300%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="93.2800%" y="229" width="0.0800%" height="15" fill="rgb(232,31,21)" fg:x="1166" fg:w="1"/><text x="93.5300%" y="239.50"></text></g><g><title>indefinite::rules::number::Number::check (116 samples, 9.28%)</title><rect x="84.1600%" y="373" width="9.2800%" height="15" fill="rgb(222,168,14)" fg:x="1052" fg:w="116"/><text x="84.4100%" y="383.50">indefinite::r..</text></g><g><title>regex::regex::string::Regex::is_match_at (6 samples, 0.48%)</title><rect x="92.9600%" y="357" width="0.4800%" height="15" fill="rgb(209,128,24)" fg:x="1162" fg:w="6"/><text x="93.2100%" y="367.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="93.1200%" y="341" width="0.3200%" height="15" fill="rgb(249,35,13)" fg:x="1164" fg:w="4"/><text x="93.3700%" y="351.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="93.1200%" y="325" width="0.3200%" height="15" fill="rgb(218,7,2)" fg:x="1164" fg:w="4"/><text x="93.3700%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="93.1200%" y="309" width="0.3200%" height="15" fill="rgb(238,107,27)" fg:x="1164" fg:w="4"/><text x="93.3700%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="93.1200%" y="293" width="0.3200%" height="15" fill="rgb(217,88,38)" fg:x="1164" fg:w="4"/><text x="93.3700%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="93.1200%" y="277" width="0.3200%" height="15" fill="rgb(230,207,0)" fg:x="1164" fg:w="4"/><text x="93.3700%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="93.3600%" y="261" width="0.0800%" height="15" fill="rgb(249,64,54)" fg:x="1167" fg:w="1"/><text x="93.6100%" y="271.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="93.4400%" y="357" width="0.0800%" height="15" fill="rgb(231,7,11)" fg:x="1168" fg:w="1"/><text x="93.6900%" y="367.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="93.4400%" y="341" width="0.0800%" height="15" fill="rgb(205,149,21)" fg:x="1168" fg:w="1"/><text x="93.6900%" y="351.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="93.4400%" y="325" width="0.0800%" height="15" fill="rgb(215,126,34)" fg:x="1168" fg:w="1"/><text x="93.6900%" y="335.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.08%)</title><rect x="93.4400%" y="309" width="0.0800%" height="15" fill="rgb(241,132,45)" fg:x="1168" fg:w="1"/><text x="93.6900%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="93.6000%" y="293" width="0.0800%" height="15" fill="rgb(252,69,32)" fg:x="1170" fg:w="1"/><text x="93.8500%" y="303.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.6000%" y="277" width="0.0800%" height="15" fill="rgb(232,204,19)" fg:x="1170" fg:w="1"/><text x="93.8500%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="93.7600%" y="277" width="0.0800%" height="15" fill="rgb(249,15,47)" fg:x="1172" fg:w="1"/><text x="94.0100%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="93.8400%" y="261" width="0.2400%" height="15" fill="rgb(209,227,23)" fg:x="1173" fg:w="3"/><text x="94.0900%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (3 samples, 0.24%)</title><rect x="93.8400%" y="245" width="0.2400%" height="15" fill="rgb(248,92,24)" fg:x="1173" fg:w="3"/><text x="94.0900%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="93.9200%" y="229" width="0.1600%" height="15" fill="rgb(247,59,2)" fg:x="1174" fg:w="2"/><text x="94.1700%" y="239.50"></text></g><g><title>__libc_calloc (2 samples, 0.16%)</title><rect x="94.0800%" y="245" width="0.1600%" height="15" fill="rgb(221,30,5)" fg:x="1176" fg:w="2"/><text x="94.3300%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="94.2400%" y="245" width="0.1600%" height="15" fill="rgb(208,108,53)" fg:x="1178" fg:w="2"/><text x="94.4900%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (10 samples, 0.80%)</title><rect x="93.6800%" y="293" width="0.8000%" height="15" fill="rgb(211,183,26)" fg:x="1171" fg:w="10"/><text x="93.9300%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (8 samples, 0.64%)</title><rect x="93.8400%" y="277" width="0.6400%" height="15" fill="rgb(232,132,4)" fg:x="1173" fg:w="8"/><text x="94.0900%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="94.0800%" y="261" width="0.4000%" height="15" fill="rgb(253,128,37)" fg:x="1176" fg:w="5"/><text x="94.3300%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="94.4000%" y="245" width="0.0800%" height="15" fill="rgb(221,58,24)" fg:x="1180" fg:w="1"/><text x="94.6500%" y="255.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="94.4800%" y="245" width="0.0800%" height="15" fill="rgb(230,54,45)" fg:x="1181" fg:w="1"/><text x="94.7300%" y="255.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (16 samples, 1.28%)</title><rect x="93.5200%" y="341" width="1.2800%" height="15" fill="rgb(254,21,18)" fg:x="1169" fg:w="16"/><text x="93.7700%" y="351.50"></text></g><g><title>regex::builders::Builder::build_one_string (16 samples, 1.28%)</title><rect x="93.5200%" y="325" width="1.2800%" height="15" fill="rgb(221,108,0)" fg:x="1169" fg:w="16"/><text x="93.7700%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (16 samples, 1.28%)</title><rect x="93.5200%" y="309" width="1.2800%" height="15" fill="rgb(206,95,1)" fg:x="1169" fg:w="16"/><text x="93.7700%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="94.4800%" y="293" width="0.3200%" height="15" fill="rgb(237,52,5)" fg:x="1181" fg:w="4"/><text x="94.7300%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="94.4800%" y="277" width="0.3200%" height="15" fill="rgb(218,150,34)" fg:x="1181" fg:w="4"/><text x="94.7300%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="94.4800%" y="261" width="0.3200%" height="15" fill="rgb(235,194,28)" fg:x="1181" fg:w="4"/><text x="94.7300%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="94.5600%" y="245" width="0.2400%" height="15" fill="rgb(245,92,18)" fg:x="1182" fg:w="3"/><text x="94.8100%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="94.5600%" y="229" width="0.2400%" height="15" fill="rgb(253,203,53)" fg:x="1182" fg:w="3"/><text x="94.8100%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="94.5600%" y="213" width="0.2400%" height="15" fill="rgb(249,185,47)" fg:x="1182" fg:w="3"/><text x="94.8100%" y="223.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="94.5600%" y="197" width="0.2400%" height="15" fill="rgb(252,194,52)" fg:x="1182" fg:w="3"/><text x="94.8100%" y="207.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="94.8000%" y="341" width="0.0800%" height="15" fill="rgb(210,53,36)" fg:x="1185" fg:w="1"/><text x="95.0500%" y="351.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="94.8000%" y="325" width="0.0800%" height="15" fill="rgb(237,37,25)" fg:x="1185" fg:w="1"/><text x="95.0500%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="94.8000%" y="309" width="0.0800%" height="15" fill="rgb(242,116,27)" fg:x="1185" fg:w="1"/><text x="95.0500%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="94.8000%" y="293" width="0.0800%" height="15" fill="rgb(213,185,26)" fg:x="1185" fg:w="1"/><text x="95.0500%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="94.8000%" y="277" width="0.0800%" height="15" fill="rgb(225,204,8)" fg:x="1185" fg:w="1"/><text x="95.0500%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="94.8000%" y="261" width="0.0800%" height="15" fill="rgb(254,111,37)" fg:x="1185" fg:w="1"/><text x="95.0500%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="94.8800%" y="341" width="0.0800%" height="15" fill="rgb(242,35,9)" fg:x="1186" fg:w="1"/><text x="95.1300%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="94.8800%" y="325" width="0.0800%" height="15" fill="rgb(232,138,49)" fg:x="1186" fg:w="1"/><text x="95.1300%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="94.8800%" y="309" width="0.0800%" height="15" fill="rgb(247,56,4)" fg:x="1186" fg:w="1"/><text x="95.1300%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="94.8800%" y="293" width="0.0800%" height="15" fill="rgb(226,179,17)" fg:x="1186" fg:w="1"/><text x="95.1300%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="94.8800%" y="277" width="0.0800%" height="15" fill="rgb(216,163,45)" fg:x="1186" fg:w="1"/><text x="95.1300%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="95.2000%" y="245" width="0.0800%" height="15" fill="rgb(211,157,3)" fg:x="1190" fg:w="1"/><text x="95.4500%" y="255.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (233 samples, 18.64%)</title><rect x="76.7200%" y="453" width="18.6400%" height="15" fill="rgb(234,44,20)" fg:x="959" fg:w="233"/><text x="76.9700%" y="463.50">&lt;&amp;kernel::model::entry::Entry..</text></g><g><title>plugins_core::looking::model::qualify_name (231 samples, 18.48%)</title><rect x="76.8800%" y="437" width="18.4800%" height="15" fill="rgb(254,138,23)" fg:x="961" fg:w="231"/><text x="77.1300%" y="447.50">plugins_core::looking::model:..</text></g><g><title>indefinite::indefinite (231 samples, 18.48%)</title><rect x="76.8800%" y="421" width="18.4800%" height="15" fill="rgb(206,119,39)" fg:x="961" fg:w="231"/><text x="77.1300%" y="431.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (231 samples, 18.48%)</title><rect x="76.8800%" y="405" width="18.4800%" height="15" fill="rgb(231,105,52)" fg:x="961" fg:w="231"/><text x="77.1300%" y="415.50">indefinite::methods::indefini..</text></g><g><title>indefinite::methods::apply_rules (230 samples, 18.40%)</title><rect x="76.9600%" y="389" width="18.4000%" height="15" fill="rgb(250,20,5)" fg:x="962" fg:w="230"/><text x="77.2100%" y="399.50">indefinite::methods::apply_ru..</text></g><g><title>indefinite::rules::other::Other::run (24 samples, 1.92%)</title><rect x="93.4400%" y="373" width="1.9200%" height="15" fill="rgb(215,198,30)" fg:x="1168" fg:w="24"/><text x="93.6900%" y="383.50">i..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (23 samples, 1.84%)</title><rect x="93.5200%" y="357" width="1.8400%" height="15" fill="rgb(246,142,8)" fg:x="1169" fg:w="23"/><text x="93.7700%" y="367.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="94.9600%" y="341" width="0.4000%" height="15" fill="rgb(243,26,38)" fg:x="1187" fg:w="5"/><text x="95.2100%" y="351.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="94.9600%" y="325" width="0.4000%" height="15" fill="rgb(205,133,28)" fg:x="1187" fg:w="5"/><text x="95.2100%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="94.9600%" y="309" width="0.4000%" height="15" fill="rgb(212,34,0)" fg:x="1187" fg:w="5"/><text x="95.2100%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="94.9600%" y="293" width="0.4000%" height="15" fill="rgb(251,226,22)" fg:x="1187" fg:w="5"/><text x="95.2100%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="94.9600%" y="277" width="0.4000%" height="15" fill="rgb(252,119,9)" fg:x="1187" fg:w="5"/><text x="95.2100%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="95.2000%" y="261" width="0.1600%" height="15" fill="rgb(213,150,50)" fg:x="1190" fg:w="2"/><text x="95.4500%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="95.2800%" y="245" width="0.0800%" height="15" fill="rgb(212,24,39)" fg:x="1191" fg:w="1"/><text x="95.5300%" y="255.50"></text></g><g><title>kernel::model::EntityRef::into_entry (1 samples, 0.08%)</title><rect x="95.3600%" y="453" width="0.0800%" height="15" fill="rgb(213,46,39)" fg:x="1192" fg:w="1"/><text x="95.6100%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="95.3600%" y="437" width="0.0800%" height="15" fill="rgb(239,106,12)" fg:x="1192" fg:w="1"/><text x="95.6100%" y="447.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="95.3600%" y="421" width="0.0800%" height="15" fill="rgb(249,229,21)" fg:x="1192" fg:w="1"/><text x="95.6100%" y="431.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="95.3600%" y="405" width="0.0800%" height="15" fill="rgb(212,158,3)" fg:x="1192" fg:w="1"/><text x="95.6100%" y="415.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="95.3600%" y="389" width="0.0800%" height="15" fill="rgb(253,26,48)" fg:x="1192" fg:w="1"/><text x="95.6100%" y="399.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="95.3600%" y="373" width="0.0800%" height="15" fill="rgb(238,178,20)" fg:x="1192" fg:w="1"/><text x="95.6100%" y="383.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="95.3600%" y="357" width="0.0800%" height="15" fill="rgb(208,86,15)" fg:x="1192" fg:w="1"/><text x="95.6100%" y="367.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="95.3600%" y="341" width="0.0800%" height="15" fill="rgb(239,42,53)" fg:x="1192" fg:w="1"/><text x="95.6100%" y="351.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="95.3600%" y="325" width="0.0800%" height="15" fill="rgb(245,226,8)" fg:x="1192" fg:w="1"/><text x="95.6100%" y="335.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="95.3600%" y="309" width="0.0800%" height="15" fill="rgb(216,176,32)" fg:x="1192" fg:w="1"/><text x="95.6100%" y="319.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="95.3600%" y="293" width="0.0800%" height="15" fill="rgb(231,186,21)" fg:x="1192" fg:w="1"/><text x="95.6100%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="95.3600%" y="277" width="0.0800%" height="15" fill="rgb(205,95,49)" fg:x="1192" fg:w="1"/><text x="95.6100%" y="287.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="95.3600%" y="261" width="0.0800%" height="15" fill="rgb(217,145,8)" fg:x="1192" fg:w="1"/><text x="95.6100%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="95.3600%" y="245" width="0.0800%" height="15" fill="rgb(239,144,48)" fg:x="1192" fg:w="1"/><text x="95.6100%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="95.3600%" y="229" width="0.0800%" height="15" fill="rgb(214,189,23)" fg:x="1192" fg:w="1"/><text x="95.6100%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="95.3600%" y="213" width="0.0800%" height="15" fill="rgb(229,157,17)" fg:x="1192" fg:w="1"/><text x="95.6100%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="95.3600%" y="197" width="0.0800%" height="15" fill="rgb(230,5,48)" fg:x="1192" fg:w="1"/><text x="95.6100%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="95.3600%" y="181" width="0.0800%" height="15" fill="rgb(224,156,48)" fg:x="1192" fg:w="1"/><text x="95.6100%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.3600%" y="165" width="0.0800%" height="15" fill="rgb(223,14,29)" fg:x="1192" fg:w="1"/><text x="95.6100%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="95.3600%" y="149" width="0.0800%" height="15" fill="rgb(229,96,36)" fg:x="1192" fg:w="1"/><text x="95.6100%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.3600%" y="133" width="0.0800%" height="15" fill="rgb(231,102,53)" fg:x="1192" fg:w="1"/><text x="95.6100%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="95.3600%" y="117" width="0.0800%" height="15" fill="rgb(210,77,38)" fg:x="1192" fg:w="1"/><text x="95.6100%" y="127.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="95.3600%" y="101" width="0.0800%" height="15" fill="rgb(235,131,6)" fg:x="1192" fg:w="1"/><text x="95.6100%" y="111.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="95.3600%" y="85" width="0.0800%" height="15" fill="rgb(252,55,38)" fg:x="1192" fg:w="1"/><text x="95.6100%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.3600%" y="69" width="0.0800%" height="15" fill="rgb(246,38,14)" fg:x="1192" fg:w="1"/><text x="95.6100%" y="79.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="95.4400%" y="421" width="0.0800%" height="15" fill="rgb(242,27,5)" fg:x="1193" fg:w="1"/><text x="95.6900%" y="431.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="95.4400%" y="405" width="0.0800%" height="15" fill="rgb(228,65,35)" fg:x="1193" fg:w="1"/><text x="95.6900%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="95.4400%" y="389" width="0.0800%" height="15" fill="rgb(245,93,11)" fg:x="1193" fg:w="1"/><text x="95.6900%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="95.4400%" y="373" width="0.0800%" height="15" fill="rgb(213,1,31)" fg:x="1193" fg:w="1"/><text x="95.6900%" y="383.50"></text></g><g><title>&lt;kernel::model::EntityRef as core::convert::From&lt;&amp;kernel::model::EntityPtr&gt;&gt;::from (1 samples, 0.08%)</title><rect x="95.4400%" y="357" width="0.0800%" height="15" fill="rgb(237,205,14)" fg:x="1193" fg:w="1"/><text x="95.6900%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="95.4400%" y="341" width="0.0800%" height="15" fill="rgb(232,118,45)" fg:x="1193" fg:w="1"/><text x="95.6900%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="95.4400%" y="325" width="0.0800%" height="15" fill="rgb(218,5,6)" fg:x="1193" fg:w="1"/><text x="95.6900%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="95.4400%" y="309" width="0.0800%" height="15" fill="rgb(251,87,51)" fg:x="1193" fg:w="1"/><text x="95.6900%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="95.4400%" y="293" width="0.0800%" height="15" fill="rgb(207,225,20)" fg:x="1193" fg:w="1"/><text x="95.6900%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="95.4400%" y="277" width="0.0800%" height="15" fill="rgb(222,78,54)" fg:x="1193" fg:w="1"/><text x="95.6900%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="95.4400%" y="261" width="0.0800%" height="15" fill="rgb(232,85,16)" fg:x="1193" fg:w="1"/><text x="95.6900%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="95.4400%" y="245" width="0.0800%" height="15" fill="rgb(244,25,33)" fg:x="1193" fg:w="1"/><text x="95.6900%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="95.4400%" y="229" width="0.0800%" height="15" fill="rgb(233,24,36)" fg:x="1193" fg:w="1"/><text x="95.6900%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="95.4400%" y="213" width="0.0800%" height="15" fill="rgb(253,49,54)" fg:x="1193" fg:w="1"/><text x="95.6900%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="95.4400%" y="197" width="0.0800%" height="15" fill="rgb(245,12,22)" fg:x="1193" fg:w="1"/><text x="95.6900%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="95.4400%" y="181" width="0.0800%" height="15" fill="rgb(253,141,28)" fg:x="1193" fg:w="1"/><text x="95.6900%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.4400%" y="165" width="0.0800%" height="15" fill="rgb(225,207,27)" fg:x="1193" fg:w="1"/><text x="95.6900%" y="175.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (237 samples, 18.96%)</title><rect x="76.7200%" y="485" width="18.9600%" height="15" fill="rgb(220,84,2)" fg:x="959" fg:w="237"/><text x="76.9700%" y="495.50">&lt;plugins_core::looking::action..</text></g><g><title>plugins_core::looking::model::new_area_observation (237 samples, 18.96%)</title><rect x="76.7200%" y="469" width="18.9600%" height="15" fill="rgb(224,37,37)" fg:x="959" fg:w="237"/><text x="76.9700%" y="479.50">plugins_core::looking::model::..</text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="95.4400%" y="453" width="0.2400%" height="15" fill="rgb(220,143,18)" fg:x="1193" fg:w="3"/><text x="95.6900%" y="463.50"></text></g><g><title>kernel::model::Entity::load_scope (3 samples, 0.24%)</title><rect x="95.4400%" y="437" width="0.2400%" height="15" fill="rgb(210,88,33)" fg:x="1193" fg:w="3"/><text x="95.6900%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="95.5200%" y="421" width="0.1600%" height="15" fill="rgb(219,87,51)" fg:x="1194" fg:w="2"/><text x="95.7700%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="95.5200%" y="405" width="0.1600%" height="15" fill="rgb(211,7,35)" fg:x="1194" fg:w="2"/><text x="95.7700%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="95.5200%" y="389" width="0.1600%" height="15" fill="rgb(232,77,2)" fg:x="1194" fg:w="2"/><text x="95.7700%" y="399.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="95.5200%" y="373" width="0.1600%" height="15" fill="rgb(249,94,25)" fg:x="1194" fg:w="2"/><text x="95.7700%" y="383.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="95.5200%" y="357" width="0.1600%" height="15" fill="rgb(215,112,2)" fg:x="1194" fg:w="2"/><text x="95.7700%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="95.6000%" y="341" width="0.0800%" height="15" fill="rgb(226,115,48)" fg:x="1195" fg:w="1"/><text x="95.8500%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="95.6000%" y="325" width="0.0800%" height="15" fill="rgb(249,196,10)" fg:x="1195" fg:w="1"/><text x="95.8500%" y="335.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="95.6800%" y="421" width="0.0800%" height="15" fill="rgb(237,109,14)" fg:x="1196" fg:w="1"/><text x="95.9300%" y="431.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="95.6800%" y="405" width="0.0800%" height="15" fill="rgb(217,103,53)" fg:x="1196" fg:w="1"/><text x="95.9300%" y="415.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="95.6800%" y="389" width="0.0800%" height="15" fill="rgb(244,137,9)" fg:x="1196" fg:w="1"/><text x="95.9300%" y="399.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="95.6800%" y="373" width="0.0800%" height="15" fill="rgb(227,201,3)" fg:x="1196" fg:w="1"/><text x="95.9300%" y="383.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="95.6800%" y="357" width="0.0800%" height="15" fill="rgb(243,94,6)" fg:x="1196" fg:w="1"/><text x="95.9300%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="95.6800%" y="341" width="0.0800%" height="15" fill="rgb(235,118,5)" fg:x="1196" fg:w="1"/><text x="95.9300%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="95.6800%" y="325" width="0.0800%" height="15" fill="rgb(247,10,30)" fg:x="1196" fg:w="1"/><text x="95.9300%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="95.6800%" y="309" width="0.0800%" height="15" fill="rgb(205,26,28)" fg:x="1196" fg:w="1"/><text x="95.9300%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="95.6800%" y="293" width="0.0800%" height="15" fill="rgb(206,99,35)" fg:x="1196" fg:w="1"/><text x="95.9300%" y="303.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="95.6800%" y="277" width="0.0800%" height="15" fill="rgb(238,130,40)" fg:x="1196" fg:w="1"/><text x="95.9300%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="95.6800%" y="261" width="0.0800%" height="15" fill="rgb(224,126,31)" fg:x="1196" fg:w="1"/><text x="95.9300%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.6800%" y="245" width="0.0800%" height="15" fill="rgb(254,105,17)" fg:x="1196" fg:w="1"/><text x="95.9300%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.6800%" y="229" width="0.0800%" height="15" fill="rgb(216,87,36)" fg:x="1196" fg:w="1"/><text x="95.9300%" y="239.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (2 samples, 0.16%)</title><rect x="95.6800%" y="485" width="0.1600%" height="15" fill="rgb(240,21,12)" fg:x="1196" fg:w="2"/><text x="95.9300%" y="495.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (2 samples, 0.16%)</title><rect x="95.6800%" y="469" width="0.1600%" height="15" fill="rgb(245,192,34)" fg:x="1196" fg:w="2"/><text x="95.9300%" y="479.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="95.6800%" y="453" width="0.1600%" height="15" fill="rgb(226,100,49)" fg:x="1196" fg:w="2"/><text x="95.9300%" y="463.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="95.6800%" y="437" width="0.1600%" height="15" fill="rgb(245,188,27)" fg:x="1196" fg:w="2"/><text x="95.9300%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="95.7600%" y="421" width="0.0800%" height="15" fill="rgb(212,170,8)" fg:x="1197" fg:w="1"/><text x="96.0100%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="95.7600%" y="405" width="0.0800%" height="15" fill="rgb(217,113,29)" fg:x="1197" fg:w="1"/><text x="96.0100%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.7600%" y="389" width="0.0800%" height="15" fill="rgb(237,30,3)" fg:x="1197" fg:w="1"/><text x="96.0100%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="95.8400%" y="405" width="0.1600%" height="15" fill="rgb(227,19,28)" fg:x="1198" fg:w="2"/><text x="96.0900%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="95.8400%" y="389" width="0.1600%" height="15" fill="rgb(239,172,45)" fg:x="1198" fg:w="2"/><text x="96.0900%" y="399.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="95.8400%" y="373" width="0.1600%" height="15" fill="rgb(254,55,39)" fg:x="1198" fg:w="2"/><text x="96.0900%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (3 samples, 0.24%)</title><rect x="95.8400%" y="453" width="0.2400%" height="15" fill="rgb(249,208,12)" fg:x="1198" fg:w="3"/><text x="96.0900%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="95.8400%" y="437" width="0.2400%" height="15" fill="rgb(240,52,13)" fg:x="1198" fg:w="3"/><text x="96.0900%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="95.8400%" y="421" width="0.2400%" height="15" fill="rgb(252,149,13)" fg:x="1198" fg:w="3"/><text x="96.0900%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.0000%" y="405" width="0.0800%" height="15" fill="rgb(232,81,48)" fg:x="1200" fg:w="1"/><text x="96.2500%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="96.0800%" y="421" width="0.1600%" height="15" fill="rgb(222,144,2)" fg:x="1201" fg:w="2"/><text x="96.3300%" y="431.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="96.0800%" y="405" width="0.1600%" height="15" fill="rgb(216,81,32)" fg:x="1201" fg:w="2"/><text x="96.3300%" y="415.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="96.2400%" y="421" width="0.0800%" height="15" fill="rgb(244,78,51)" fg:x="1203" fg:w="1"/><text x="96.4900%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="96.4800%" y="341" width="0.0800%" height="15" fill="rgb(217,66,21)" fg:x="1206" fg:w="1"/><text x="96.7300%" y="351.50"></text></g><g><title>kernel::model::EntityRef::into_entry (1 samples, 0.08%)</title><rect x="96.4800%" y="325" width="0.0800%" height="15" fill="rgb(247,101,42)" fg:x="1206" fg:w="1"/><text x="96.7300%" y="335.50"></text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="96.4800%" y="309" width="0.0800%" height="15" fill="rgb(227,81,39)" fg:x="1206" fg:w="1"/><text x="96.7300%" y="319.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="96.4800%" y="357" width="0.1600%" height="15" fill="rgb(220,223,44)" fg:x="1206" fg:w="2"/><text x="96.7300%" y="367.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="96.5600%" y="341" width="0.0800%" height="15" fill="rgb(205,218,2)" fg:x="1207" fg:w="1"/><text x="96.8100%" y="351.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (1 samples, 0.08%)</title><rect x="96.5600%" y="325" width="0.0800%" height="15" fill="rgb(212,207,28)" fg:x="1207" fg:w="1"/><text x="96.8100%" y="335.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (1 samples, 0.08%)</title><rect x="96.5600%" y="309" width="0.0800%" height="15" fill="rgb(224,12,41)" fg:x="1207" fg:w="1"/><text x="96.8100%" y="319.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="96.5600%" y="293" width="0.0800%" height="15" fill="rgb(216,118,12)" fg:x="1207" fg:w="1"/><text x="96.8100%" y="303.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="96.5600%" y="277" width="0.0800%" height="15" fill="rgb(252,97,46)" fg:x="1207" fg:w="1"/><text x="96.8100%" y="287.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="96.5600%" y="261" width="0.0800%" height="15" fill="rgb(244,206,19)" fg:x="1207" fg:w="1"/><text x="96.8100%" y="271.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="96.5600%" y="245" width="0.0800%" height="15" fill="rgb(231,84,31)" fg:x="1207" fg:w="1"/><text x="96.8100%" y="255.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="96.5600%" y="229" width="0.0800%" height="15" fill="rgb(244,133,0)" fg:x="1207" fg:w="1"/><text x="96.8100%" y="239.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="96.5600%" y="213" width="0.0800%" height="15" fill="rgb(223,15,50)" fg:x="1207" fg:w="1"/><text x="96.8100%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.5600%" y="197" width="0.0800%" height="15" fill="rgb(250,118,49)" fg:x="1207" fg:w="1"/><text x="96.8100%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.5600%" y="181" width="0.0800%" height="15" fill="rgb(248,25,38)" fg:x="1207" fg:w="1"/><text x="96.8100%" y="191.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.5600%" y="165" width="0.0800%" height="15" fill="rgb(215,70,14)" fg:x="1207" fg:w="1"/><text x="96.8100%" y="175.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.5600%" y="149" width="0.0800%" height="15" fill="rgb(215,28,15)" fg:x="1207" fg:w="1"/><text x="96.8100%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.7200%" y="325" width="0.0800%" height="15" fill="rgb(243,6,28)" fg:x="1209" fg:w="1"/><text x="96.9700%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.7200%" y="309" width="0.0800%" height="15" fill="rgb(222,130,1)" fg:x="1209" fg:w="1"/><text x="96.9700%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.7200%" y="293" width="0.0800%" height="15" fill="rgb(236,166,44)" fg:x="1209" fg:w="1"/><text x="96.9700%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.7200%" y="277" width="0.0800%" height="15" fill="rgb(221,108,14)" fg:x="1209" fg:w="1"/><text x="96.9700%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.7200%" y="261" width="0.0800%" height="15" fill="rgb(252,3,45)" fg:x="1209" fg:w="1"/><text x="96.9700%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="96.7200%" y="245" width="0.0800%" height="15" fill="rgb(237,68,30)" fg:x="1209" fg:w="1"/><text x="96.9700%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="96.7200%" y="229" width="0.0800%" height="15" fill="rgb(211,79,22)" fg:x="1209" fg:w="1"/><text x="96.9700%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="96.7200%" y="213" width="0.0800%" height="15" fill="rgb(252,185,21)" fg:x="1209" fg:w="1"/><text x="96.9700%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.7200%" y="197" width="0.0800%" height="15" fill="rgb(225,189,26)" fg:x="1209" fg:w="1"/><text x="96.9700%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.7200%" y="181" width="0.0800%" height="15" fill="rgb(241,30,40)" fg:x="1209" fg:w="1"/><text x="96.9700%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="96.7200%" y="165" width="0.0800%" height="15" fill="rgb(235,215,44)" fg:x="1209" fg:w="1"/><text x="96.9700%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="96.7200%" y="149" width="0.0800%" height="15" fill="rgb(205,8,29)" fg:x="1209" fg:w="1"/><text x="96.9700%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="96.7200%" y="133" width="0.0800%" height="15" fill="rgb(241,137,42)" fg:x="1209" fg:w="1"/><text x="96.9700%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="96.7200%" y="117" width="0.0800%" height="15" fill="rgb(237,155,2)" fg:x="1209" fg:w="1"/><text x="96.9700%" y="127.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="96.7200%" y="101" width="0.0800%" height="15" fill="rgb(245,29,42)" fg:x="1209" fg:w="1"/><text x="96.9700%" y="111.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="96.8000%" y="325" width="0.0800%" height="15" fill="rgb(234,101,35)" fg:x="1210" fg:w="1"/><text x="97.0500%" y="335.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="96.8000%" y="309" width="0.0800%" height="15" fill="rgb(228,64,37)" fg:x="1210" fg:w="1"/><text x="97.0500%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="96.8000%" y="293" width="0.0800%" height="15" fill="rgb(217,214,36)" fg:x="1210" fg:w="1"/><text x="97.0500%" y="303.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="96.8000%" y="277" width="0.0800%" height="15" fill="rgb(243,70,3)" fg:x="1210" fg:w="1"/><text x="97.0500%" y="287.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="96.8000%" y="261" width="0.0800%" height="15" fill="rgb(253,158,52)" fg:x="1210" fg:w="1"/><text x="97.0500%" y="271.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (6 samples, 0.48%)</title><rect x="96.4800%" y="373" width="0.4800%" height="15" fill="rgb(234,111,54)" fg:x="1206" fg:w="6"/><text x="96.7300%" y="383.50"></text></g><g><title>kernel::model::entry::Entry::scope (4 samples, 0.32%)</title><rect x="96.6400%" y="357" width="0.3200%" height="15" fill="rgb(217,70,32)" fg:x="1208" fg:w="4"/><text x="96.8900%" y="367.50"></text></g><g><title>kernel::model::Entity::load_scope (4 samples, 0.32%)</title><rect x="96.6400%" y="341" width="0.3200%" height="15" fill="rgb(234,18,33)" fg:x="1208" fg:w="4"/><text x="96.8900%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.8800%" y="325" width="0.0800%" height="15" fill="rgb(234,12,49)" fg:x="1211" fg:w="1"/><text x="97.1300%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.8800%" y="309" width="0.0800%" height="15" fill="rgb(236,10,21)" fg:x="1211" fg:w="1"/><text x="97.1300%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="96.8800%" y="293" width="0.0800%" height="15" fill="rgb(248,182,45)" fg:x="1211" fg:w="1"/><text x="97.1300%" y="303.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="96.8800%" y="277" width="0.0800%" height="15" fill="rgb(217,95,36)" fg:x="1211" fg:w="1"/><text x="97.1300%" y="287.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="96.8800%" y="261" width="0.0800%" height="15" fill="rgb(212,110,31)" fg:x="1211" fg:w="1"/><text x="97.1300%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.8800%" y="245" width="0.0800%" height="15" fill="rgb(206,32,53)" fg:x="1211" fg:w="1"/><text x="97.1300%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.8800%" y="229" width="0.0800%" height="15" fill="rgb(246,141,37)" fg:x="1211" fg:w="1"/><text x="97.1300%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="96.9600%" y="117" width="0.0800%" height="15" fill="rgb(219,16,7)" fg:x="1212" fg:w="1"/><text x="97.2100%" y="127.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.9600%" y="101" width="0.0800%" height="15" fill="rgb(230,205,45)" fg:x="1212" fg:w="1"/><text x="97.2100%" y="111.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="96.9600%" y="85" width="0.0800%" height="15" fill="rgb(231,43,49)" fg:x="1212" fg:w="1"/><text x="97.2100%" y="95.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="96.9600%" y="165" width="0.2400%" height="15" fill="rgb(212,106,34)" fg:x="1212" fg:w="3"/><text x="97.2100%" y="175.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="96.9600%" y="149" width="0.2400%" height="15" fill="rgb(206,83,17)" fg:x="1212" fg:w="3"/><text x="97.2100%" y="159.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="96.9600%" y="133" width="0.2400%" height="15" fill="rgb(244,154,49)" fg:x="1212" fg:w="3"/><text x="97.2100%" y="143.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.0400%" y="117" width="0.1600%" height="15" fill="rgb(244,149,49)" fg:x="1213" fg:w="2"/><text x="97.2900%" y="127.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="97.0400%" y="101" width="0.1600%" height="15" fill="rgb(227,134,18)" fg:x="1213" fg:w="2"/><text x="97.2900%" y="111.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.1200%" y="85" width="0.0800%" height="15" fill="rgb(237,116,36)" fg:x="1214" fg:w="1"/><text x="97.3700%" y="95.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.1200%" y="69" width="0.0800%" height="15" fill="rgb(205,129,40)" fg:x="1214" fg:w="1"/><text x="97.3700%" y="79.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (4 samples, 0.32%)</title><rect x="96.9600%" y="229" width="0.3200%" height="15" fill="rgb(236,178,4)" fg:x="1212" fg:w="4"/><text x="97.2100%" y="239.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (4 samples, 0.32%)</title><rect x="96.9600%" y="213" width="0.3200%" height="15" fill="rgb(251,76,53)" fg:x="1212" fg:w="4"/><text x="97.2100%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="96.9600%" y="197" width="0.3200%" height="15" fill="rgb(242,92,40)" fg:x="1212" fg:w="4"/><text x="97.2100%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="96.9600%" y="181" width="0.3200%" height="15" fill="rgb(209,45,30)" fg:x="1212" fg:w="4"/><text x="97.2100%" y="191.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.2000%" y="165" width="0.0800%" height="15" fill="rgb(218,157,36)" fg:x="1215" fg:w="1"/><text x="97.4500%" y="175.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.2000%" y="149" width="0.0800%" height="15" fill="rgb(222,186,16)" fg:x="1215" fg:w="1"/><text x="97.4500%" y="159.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.2000%" y="133" width="0.0800%" height="15" fill="rgb(254,72,35)" fg:x="1215" fg:w="1"/><text x="97.4500%" y="143.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.2000%" y="117" width="0.0800%" height="15" fill="rgb(224,25,35)" fg:x="1215" fg:w="1"/><text x="97.4500%" y="127.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.3600%" y="117" width="0.0800%" height="15" fill="rgb(206,135,52)" fg:x="1217" fg:w="1"/><text x="97.6100%" y="127.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (8 samples, 0.64%)</title><rect x="96.9600%" y="325" width="0.6400%" height="15" fill="rgb(229,174,47)" fg:x="1212" fg:w="8"/><text x="97.2100%" y="335.50"></text></g><g><title>core::iter::adapters::try_process (8 samples, 0.64%)</title><rect x="96.9600%" y="309" width="0.6400%" height="15" fill="rgb(242,184,21)" fg:x="1212" fg:w="8"/><text x="97.2100%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.64%)</title><rect x="96.9600%" y="293" width="0.6400%" height="15" fill="rgb(213,22,45)" fg:x="1212" fg:w="8"/><text x="97.2100%" y="303.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (8 samples, 0.64%)</title><rect x="96.9600%" y="277" width="0.6400%" height="15" fill="rgb(237,81,54)" fg:x="1212" fg:w="8"/><text x="97.2100%" y="287.50"></text></g><g><title>engine::internal::Entities::prepare_entity (8 samples, 0.64%)</title><rect x="96.9600%" y="261" width="0.6400%" height="15" fill="rgb(248,177,18)" fg:x="1212" fg:w="8"/><text x="97.2100%" y="271.50"></text></g><g><title>kernel::model::deserialize_entity (8 samples, 0.64%)</title><rect x="96.9600%" y="245" width="0.6400%" height="15" fill="rgb(254,31,16)" fg:x="1212" fg:w="8"/><text x="97.2100%" y="255.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="97.2800%" y="229" width="0.3200%" height="15" fill="rgb(235,20,31)" fg:x="1216" fg:w="4"/><text x="97.5300%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="97.2800%" y="213" width="0.3200%" height="15" fill="rgb(240,56,43)" fg:x="1216" fg:w="4"/><text x="97.5300%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="97.2800%" y="197" width="0.3200%" height="15" fill="rgb(237,197,51)" fg:x="1216" fg:w="4"/><text x="97.5300%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="97.2800%" y="181" width="0.3200%" height="15" fill="rgb(241,162,44)" fg:x="1216" fg:w="4"/><text x="97.5300%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="97.2800%" y="165" width="0.3200%" height="15" fill="rgb(224,23,20)" fg:x="1216" fg:w="4"/><text x="97.5300%" y="175.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="97.3600%" y="149" width="0.2400%" height="15" fill="rgb(250,109,34)" fg:x="1217" fg:w="3"/><text x="97.6100%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="97.3600%" y="133" width="0.2400%" height="15" fill="rgb(214,175,50)" fg:x="1217" fg:w="3"/><text x="97.6100%" y="143.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="97.4400%" y="117" width="0.1600%" height="15" fill="rgb(213,182,5)" fg:x="1218" fg:w="2"/><text x="97.6900%" y="127.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="97.4400%" y="101" width="0.1600%" height="15" fill="rgb(209,199,19)" fg:x="1218" fg:w="2"/><text x="97.6900%" y="111.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="97.4400%" y="85" width="0.1600%" height="15" fill="rgb(236,224,42)" fg:x="1218" fg:w="2"/><text x="97.6900%" y="95.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (2 samples, 0.16%)</title><rect x="97.4400%" y="69" width="0.1600%" height="15" fill="rgb(246,226,29)" fg:x="1218" fg:w="2"/><text x="97.6900%" y="79.50"></text></g><g><title>plugins_core::tools::get_contained_keys (9 samples, 0.72%)</title><rect x="96.9600%" y="373" width="0.7200%" height="15" fill="rgb(227,223,11)" fg:x="1212" fg:w="9"/><text x="97.2100%" y="383.50"></text></g><g><title>kernel::model::entry::Entry::scope (9 samples, 0.72%)</title><rect x="96.9600%" y="357" width="0.7200%" height="15" fill="rgb(219,7,51)" fg:x="1212" fg:w="9"/><text x="97.2100%" y="367.50"></text></g><g><title>kernel::model::Entity::load_scope (9 samples, 0.72%)</title><rect x="96.9600%" y="341" width="0.7200%" height="15" fill="rgb(245,167,10)" fg:x="1212" fg:w="9"/><text x="97.2100%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.6000%" y="325" width="0.0800%" height="15" fill="rgb(237,224,16)" fg:x="1220" fg:w="1"/><text x="97.8500%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.6000%" y="309" width="0.0800%" height="15" fill="rgb(226,132,13)" fg:x="1220" fg:w="1"/><text x="97.8500%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="97.6000%" y="293" width="0.0800%" height="15" fill="rgb(214,140,3)" fg:x="1220" fg:w="1"/><text x="97.8500%" y="303.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="97.6000%" y="277" width="0.0800%" height="15" fill="rgb(221,177,4)" fg:x="1220" fg:w="1"/><text x="97.8500%" y="287.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="97.6000%" y="261" width="0.0800%" height="15" fill="rgb(238,139,3)" fg:x="1220" fg:w="1"/><text x="97.8500%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.6000%" y="245" width="0.0800%" height="15" fill="rgb(216,17,39)" fg:x="1220" fg:w="1"/><text x="97.8500%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.6000%" y="229" width="0.0800%" height="15" fill="rgb(238,120,9)" fg:x="1220" fg:w="1"/><text x="97.8500%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="97.6000%" y="213" width="0.0800%" height="15" fill="rgb(244,92,53)" fg:x="1220" fg:w="1"/><text x="97.8500%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (18 samples, 1.44%)</title><rect x="96.3200%" y="405" width="1.4400%" height="15" fill="rgb(224,148,33)" fg:x="1204" fg:w="18"/><text x="96.5700%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (18 samples, 1.44%)</title><rect x="96.3200%" y="389" width="1.4400%" height="15" fill="rgb(243,6,36)" fg:x="1204" fg:w="18"/><text x="96.5700%" y="399.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (1 samples, 0.08%)</title><rect x="97.6800%" y="373" width="0.0800%" height="15" fill="rgb(230,102,11)" fg:x="1221" fg:w="1"/><text x="97.9300%" y="383.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="97.6800%" y="357" width="0.0800%" height="15" fill="rgb(234,148,36)" fg:x="1221" fg:w="1"/><text x="97.9300%" y="367.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="97.6800%" y="341" width="0.0800%" height="15" fill="rgb(251,153,25)" fg:x="1221" fg:w="1"/><text x="97.9300%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.6800%" y="325" width="0.0800%" height="15" fill="rgb(215,129,8)" fg:x="1221" fg:w="1"/><text x="97.9300%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.6800%" y="309" width="0.0800%" height="15" fill="rgb(224,128,35)" fg:x="1221" fg:w="1"/><text x="97.9300%" y="319.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="97.6800%" y="293" width="0.0800%" height="15" fill="rgb(237,56,52)" fg:x="1221" fg:w="1"/><text x="97.9300%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.6800%" y="277" width="0.0800%" height="15" fill="rgb(234,213,19)" fg:x="1221" fg:w="1"/><text x="97.9300%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.8400%" y="357" width="0.0800%" height="15" fill="rgb(252,82,23)" fg:x="1223" fg:w="1"/><text x="98.0900%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.8400%" y="341" width="0.0800%" height="15" fill="rgb(254,201,21)" fg:x="1223" fg:w="1"/><text x="98.0900%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.8400%" y="325" width="0.0800%" height="15" fill="rgb(250,186,11)" fg:x="1223" fg:w="1"/><text x="98.0900%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.8400%" y="309" width="0.0800%" height="15" fill="rgb(211,174,5)" fg:x="1223" fg:w="1"/><text x="98.0900%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.8400%" y="293" width="0.0800%" height="15" fill="rgb(214,121,10)" fg:x="1223" fg:w="1"/><text x="98.0900%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.8400%" y="277" width="0.0800%" height="15" fill="rgb(241,66,2)" fg:x="1223" fg:w="1"/><text x="98.0900%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.8400%" y="261" width="0.0800%" height="15" fill="rgb(220,167,19)" fg:x="1223" fg:w="1"/><text x="98.0900%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.8400%" y="245" width="0.0800%" height="15" fill="rgb(231,54,50)" fg:x="1223" fg:w="1"/><text x="98.0900%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.8400%" y="229" width="0.0800%" height="15" fill="rgb(239,217,53)" fg:x="1223" fg:w="1"/><text x="98.0900%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.8400%" y="213" width="0.0800%" height="15" fill="rgb(248,8,0)" fg:x="1223" fg:w="1"/><text x="98.0900%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.8400%" y="197" width="0.0800%" height="15" fill="rgb(229,118,37)" fg:x="1223" fg:w="1"/><text x="98.0900%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.8400%" y="181" width="0.0800%" height="15" fill="rgb(253,223,43)" fg:x="1223" fg:w="1"/><text x="98.0900%" y="191.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="97.9200%" y="357" width="0.1600%" height="15" fill="rgb(211,77,36)" fg:x="1224" fg:w="2"/><text x="98.1700%" y="367.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="97.9200%" y="341" width="0.1600%" height="15" fill="rgb(219,3,53)" fg:x="1224" fg:w="2"/><text x="98.1700%" y="351.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="97.9200%" y="325" width="0.1600%" height="15" fill="rgb(244,45,42)" fg:x="1224" fg:w="2"/><text x="98.1700%" y="335.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="97.9200%" y="309" width="0.1600%" height="15" fill="rgb(225,95,27)" fg:x="1224" fg:w="2"/><text x="98.1700%" y="319.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="97.9200%" y="293" width="0.1600%" height="15" fill="rgb(207,74,8)" fg:x="1224" fg:w="2"/><text x="98.1700%" y="303.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="97.9200%" y="277" width="0.1600%" height="15" fill="rgb(243,63,36)" fg:x="1224" fg:w="2"/><text x="98.1700%" y="287.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="97.9200%" y="261" width="0.1600%" height="15" fill="rgb(211,180,12)" fg:x="1224" fg:w="2"/><text x="98.1700%" y="271.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="97.9200%" y="245" width="0.1600%" height="15" fill="rgb(254,166,49)" fg:x="1224" fg:w="2"/><text x="98.1700%" y="255.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="97.9200%" y="229" width="0.1600%" height="15" fill="rgb(205,19,0)" fg:x="1224" fg:w="2"/><text x="98.1700%" y="239.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="97.9200%" y="213" width="0.1600%" height="15" fill="rgb(224,172,32)" fg:x="1224" fg:w="2"/><text x="98.1700%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="98.0000%" y="197" width="0.0800%" height="15" fill="rgb(254,136,30)" fg:x="1225" fg:w="1"/><text x="98.2500%" y="207.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="98.0000%" y="181" width="0.0800%" height="15" fill="rgb(246,19,35)" fg:x="1225" fg:w="1"/><text x="98.2500%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="98.0000%" y="165" width="0.0800%" height="15" fill="rgb(219,24,36)" fg:x="1225" fg:w="1"/><text x="98.2500%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="98.0000%" y="149" width="0.0800%" height="15" fill="rgb(251,55,1)" fg:x="1225" fg:w="1"/><text x="98.2500%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="98.0000%" y="133" width="0.0800%" height="15" fill="rgb(218,117,39)" fg:x="1225" fg:w="1"/><text x="98.2500%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="98.0000%" y="117" width="0.0800%" height="15" fill="rgb(248,169,11)" fg:x="1225" fg:w="1"/><text x="98.2500%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="98.0000%" y="101" width="0.0800%" height="15" fill="rgb(244,40,44)" fg:x="1225" fg:w="1"/><text x="98.2500%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="98.0000%" y="85" width="0.0800%" height="15" fill="rgb(234,62,37)" fg:x="1225" fg:w="1"/><text x="98.2500%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="98.0000%" y="69" width="0.0800%" height="15" fill="rgb(207,117,42)" fg:x="1225" fg:w="1"/><text x="98.2500%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.0000%" y="53" width="0.0800%" height="15" fill="rgb(213,43,2)" fg:x="1225" fg:w="1"/><text x="98.2500%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.0000%" y="37" width="0.0800%" height="15" fill="rgb(244,202,51)" fg:x="1225" fg:w="1"/><text x="98.2500%" y="47.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="98.4000%" y="181" width="0.2400%" height="15" fill="rgb(253,174,46)" fg:x="1230" fg:w="3"/><text x="98.6500%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.24%)</title><rect x="98.4000%" y="165" width="0.2400%" height="15" fill="rgb(251,23,1)" fg:x="1230" fg:w="3"/><text x="98.6500%" y="175.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="98.4800%" y="149" width="0.1600%" height="15" fill="rgb(253,26,1)" fg:x="1231" fg:w="2"/><text x="98.7300%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.5600%" y="133" width="0.0800%" height="15" fill="rgb(216,89,31)" fg:x="1232" fg:w="1"/><text x="98.8100%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="98.5600%" y="117" width="0.0800%" height="15" fill="rgb(209,109,5)" fg:x="1232" fg:w="1"/><text x="98.8100%" y="127.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (4 samples, 0.32%)</title><rect x="98.4000%" y="197" width="0.3200%" height="15" fill="rgb(229,63,13)" fg:x="1230" fg:w="4"/><text x="98.6500%" y="207.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.6400%" y="181" width="0.0800%" height="15" fill="rgb(238,137,54)" fg:x="1233" fg:w="1"/><text x="98.8900%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="98.6400%" y="165" width="0.0800%" height="15" fill="rgb(228,1,9)" fg:x="1233" fg:w="1"/><text x="98.8900%" y="175.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="98.6400%" y="149" width="0.0800%" height="15" fill="rgb(249,120,48)" fg:x="1233" fg:w="1"/><text x="98.8900%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.6400%" y="133" width="0.0800%" height="15" fill="rgb(209,72,36)" fg:x="1233" fg:w="1"/><text x="98.8900%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="98.6400%" y="117" width="0.0800%" height="15" fill="rgb(247,98,49)" fg:x="1233" fg:w="1"/><text x="98.8900%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.64%)</title><rect x="98.2400%" y="213" width="0.6400%" height="15" fill="rgb(233,75,36)" fg:x="1228" fg:w="8"/><text x="98.4900%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="98.7200%" y="197" width="0.1600%" height="15" fill="rgb(225,14,24)" fg:x="1234" fg:w="2"/><text x="98.9700%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="98.7200%" y="181" width="0.1600%" height="15" fill="rgb(237,193,20)" fg:x="1234" fg:w="2"/><text x="98.9700%" y="191.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (11 samples, 0.88%)</title><rect x="98.0800%" y="245" width="0.8800%" height="15" fill="rgb(239,122,19)" fg:x="1226" fg:w="11"/><text x="98.3300%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (9 samples, 0.72%)</title><rect x="98.2400%" y="229" width="0.7200%" height="15" fill="rgb(231,220,10)" fg:x="1228" fg:w="9"/><text x="98.4900%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="98.8800%" y="213" width="0.0800%" height="15" fill="rgb(220,66,15)" fg:x="1236" fg:w="1"/><text x="99.1300%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.8800%" y="197" width="0.0800%" height="15" fill="rgb(215,171,52)" fg:x="1236" fg:w="1"/><text x="99.1300%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13 samples, 1.04%)</title><rect x="98.0800%" y="309" width="1.0400%" height="15" fill="rgb(241,169,50)" fg:x="1226" fg:w="13"/><text x="98.3300%" y="319.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (13 samples, 1.04%)</title><rect x="98.0800%" y="293" width="1.0400%" height="15" fill="rgb(236,189,0)" fg:x="1226" fg:w="13"/><text x="98.3300%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (13 samples, 1.04%)</title><rect x="98.0800%" y="277" width="1.0400%" height="15" fill="rgb(217,147,20)" fg:x="1226" fg:w="13"/><text x="98.3300%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13 samples, 1.04%)</title><rect x="98.0800%" y="261" width="1.0400%" height="15" fill="rgb(206,188,39)" fg:x="1226" fg:w="13"/><text x="98.3300%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="98.9600%" y="245" width="0.1600%" height="15" fill="rgb(227,118,25)" fg:x="1237" fg:w="2"/><text x="99.2100%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="99.0400%" y="229" width="0.0800%" height="15" fill="rgb(248,171,40)" fg:x="1238" fg:w="1"/><text x="99.2900%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="99.0400%" y="213" width="0.0800%" height="15" fill="rgb(251,90,54)" fg:x="1238" fg:w="1"/><text x="99.2900%" y="223.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (14 samples, 1.12%)</title><rect x="98.0800%" y="341" width="1.1200%" height="15" fill="rgb(234,11,46)" fg:x="1226" fg:w="14"/><text x="98.3300%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (14 samples, 1.12%)</title><rect x="98.0800%" y="325" width="1.1200%" height="15" fill="rgb(229,134,13)" fg:x="1226" fg:w="14"/><text x="98.3300%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="99.1200%" y="309" width="0.0800%" height="15" fill="rgb(223,129,3)" fg:x="1239" fg:w="1"/><text x="99.3700%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.1200%" y="293" width="0.0800%" height="15" fill="rgb(221,124,13)" fg:x="1239" fg:w="1"/><text x="99.3700%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.3600%" y="293" width="0.0800%" height="15" fill="rgb(234,3,18)" fg:x="1242" fg:w="1"/><text x="99.6100%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.4400%" y="293" width="0.0800%" height="15" fill="rgb(249,199,20)" fg:x="1243" fg:w="1"/><text x="99.6900%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.5200%" y="261" width="0.0800%" height="15" fill="rgb(224,134,6)" fg:x="1244" fg:w="1"/><text x="99.7700%" y="271.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.5200%" y="245" width="0.0800%" height="15" fill="rgb(254,83,26)" fg:x="1244" fg:w="1"/><text x="99.7700%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.5200%" y="229" width="0.0800%" height="15" fill="rgb(217,88,9)" fg:x="1244" fg:w="1"/><text x="99.7700%" y="239.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (3 samples, 0.24%)</title><rect x="99.5200%" y="293" width="0.2400%" height="15" fill="rgb(225,73,2)" fg:x="1244" fg:w="3"/><text x="99.7700%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="99.5200%" y="277" width="0.2400%" height="15" fill="rgb(226,44,39)" fg:x="1244" fg:w="3"/><text x="99.7700%" y="287.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="99.6000%" y="261" width="0.1600%" height="15" fill="rgb(228,53,17)" fg:x="1245" fg:w="2"/><text x="99.8500%" y="271.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="99.6000%" y="245" width="0.1600%" height="15" fill="rgb(212,27,27)" fg:x="1245" fg:w="2"/><text x="99.8500%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.6800%" y="229" width="0.0800%" height="15" fill="rgb(241,50,6)" fg:x="1246" fg:w="1"/><text x="99.9300%" y="239.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.8400%" y="277" width="0.0800%" height="15" fill="rgb(225,28,51)" fg:x="1248" fg:w="1"/><text x="100.0900%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.8400%" y="261" width="0.0800%" height="15" fill="rgb(215,33,16)" fg:x="1248" fg:w="1"/><text x="100.0900%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.8400%" y="245" width="0.0800%" height="15" fill="rgb(243,40,39)" fg:x="1248" fg:w="1"/><text x="100.0900%" y="255.50"></text></g><g><title>all (1,250 samples, 100%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(225,11,42)" fg:x="0" fg:w="1250"/><text x="0.2500%" y="895.50"></text></g><g><title>simple-a8fb0ec0 (1,250 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(241,220,38)" fg:x="0" fg:w="1250"/><text x="0.2500%" y="879.50">simple-a8fb0ec0</text></g><g><title>_start (1,250 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(244,52,35)" fg:x="0" fg:w="1250"/><text x="0.2500%" y="863.50">_start</text></g><g><title>__libc_start_main (1,250 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(246,42,46)" fg:x="0" fg:w="1250"/><text x="0.2500%" y="847.50">__libc_start_main</text></g><g><title>main (1,250 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(205,184,13)" fg:x="0" fg:w="1250"/><text x="0.2500%" y="831.50">main</text></g><g><title>std::rt::lang_start_internal (1,250 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(209,48,36)" fg:x="0" fg:w="1250"/><text x="0.2500%" y="815.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,250 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(244,34,51)" fg:x="0" fg:w="1250"/><text x="0.2500%" y="799.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,250 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(221,107,33)" fg:x="0" fg:w="1250"/><text x="0.2500%" y="783.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,250 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(224,203,12)" fg:x="0" fg:w="1250"/><text x="0.2500%" y="767.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,250 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(230,215,18)" fg:x="0" fg:w="1250"/><text x="0.2500%" y="751.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,250 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(206,185,35)" fg:x="0" fg:w="1250"/><text x="0.2500%" y="735.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,250 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(228,140,34)" fg:x="0" fg:w="1250"/><text x="0.2500%" y="719.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,250 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(208,93,13)" fg:x="0" fg:w="1250"/><text x="0.2500%" y="703.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,250 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(221,193,39)" fg:x="0" fg:w="1250"/><text x="0.2500%" y="687.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,250 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(241,132,34)" fg:x="0" fg:w="1250"/><text x="0.2500%" y="671.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,250 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(221,141,10)" fg:x="0" fg:w="1250"/><text x="0.2500%" y="655.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,250 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(226,90,31)" fg:x="0" fg:w="1250"/><text x="0.2500%" y="639.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,250 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(243,75,5)" fg:x="0" fg:w="1250"/><text x="0.2500%" y="623.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,250 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(227,156,21)" fg:x="0" fg:w="1250"/><text x="0.2500%" y="607.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (339 samples, 27.12%)</title><rect x="72.8800%" y="581" width="27.1200%" height="15" fill="rgb(250,195,8)" fg:x="911" fg:w="339"/><text x="73.1300%" y="591.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as cri..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (339 samples, 27.12%)</title><rect x="72.8800%" y="565" width="27.1200%" height="15" fill="rgb(220,134,5)" fg:x="911" fg:w="339"/><text x="73.1300%" y="575.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (339 samples, 27.12%)</title><rect x="72.8800%" y="549" width="27.1200%" height="15" fill="rgb(246,106,34)" fg:x="911" fg:w="339"/><text x="73.1300%" y="559.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (295 samples, 23.60%)</title><rect x="76.4000%" y="533" width="23.6000%" height="15" fill="rgb(205,1,4)" fg:x="955" fg:w="295"/><text x="76.6500%" y="543.50">engine::session::Session::evaluate_an..</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (295 samples, 23.60%)</title><rect x="76.4000%" y="517" width="23.6000%" height="15" fill="rgb(224,151,29)" fg:x="955" fg:w="295"/><text x="76.6500%" y="527.50">engine::perform::StandardPerformer::e..</text></g><g><title>engine::perform::StandardPerformer::perform (292 samples, 23.36%)</title><rect x="76.6400%" y="501" width="23.3600%" height="15" fill="rgb(251,196,0)" fg:x="958" fg:w="292"/><text x="76.8900%" y="511.50">engine::perform::StandardPerformer::p..</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (52 samples, 4.16%)</title><rect x="95.8400%" y="485" width="4.1600%" height="15" fill="rgb(212,127,0)" fg:x="1198" fg:w="52"/><text x="96.0900%" y="495.50">kerne..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (52 samples, 4.16%)</title><rect x="95.8400%" y="469" width="4.1600%" height="15" fill="rgb(236,71,53)" fg:x="1198" fg:w="52"/><text x="96.0900%" y="479.50">&lt;plug..</text></g><g><title>plugins_rpc::querying::have_surroundings (49 samples, 3.92%)</title><rect x="96.0800%" y="453" width="3.9200%" height="15" fill="rgb(227,99,0)" fg:x="1201" fg:w="49"/><text x="96.3300%" y="463.50">plug..</text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (49 samples, 3.92%)</title><rect x="96.0800%" y="437" width="3.9200%" height="15" fill="rgb(239,89,21)" fg:x="1201" fg:w="49"/><text x="96.3300%" y="447.50">&lt;plu..</text></g><g><title>core::iter::adapters::try_process (46 samples, 3.68%)</title><rect x="96.3200%" y="421" width="3.6800%" height="15" fill="rgb(243,122,19)" fg:x="1204" fg:w="46"/><text x="96.5700%" y="431.50">core..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (28 samples, 2.24%)</title><rect x="97.7600%" y="405" width="2.2400%" height="15" fill="rgb(229,192,45)" fg:x="1222" fg:w="28"/><text x="98.0100%" y="415.50">a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (28 samples, 2.24%)</title><rect x="97.7600%" y="389" width="2.2400%" height="15" fill="rgb(235,165,35)" fg:x="1222" fg:w="28"/><text x="98.0100%" y="399.50">&lt;..</text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (27 samples, 2.16%)</title><rect x="97.8400%" y="373" width="2.1600%" height="15" fill="rgb(253,202,0)" fg:x="1223" fg:w="27"/><text x="98.0900%" y="383.50">p..</text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (24 samples, 1.92%)</title><rect x="98.0800%" y="357" width="1.9200%" height="15" fill="rgb(235,51,20)" fg:x="1226" fg:w="24"/><text x="98.3300%" y="367.50">&lt;..</text></g><g><title>kernel::model::EntityPtr::to_json_value (10 samples, 0.80%)</title><rect x="99.2000%" y="341" width="0.8000%" height="15" fill="rgb(218,95,46)" fg:x="1240" fg:w="10"/><text x="99.4500%" y="351.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (10 samples, 0.80%)</title><rect x="99.2000%" y="325" width="0.8000%" height="15" fill="rgb(212,81,10)" fg:x="1240" fg:w="10"/><text x="99.4500%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.72%)</title><rect x="99.2800%" y="309" width="0.7200%" height="15" fill="rgb(240,59,0)" fg:x="1241" fg:w="9"/><text x="99.5300%" y="319.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="99.7600%" y="293" width="0.2400%" height="15" fill="rgb(212,191,42)" fg:x="1247" fg:w="3"/><text x="100.0100%" y="303.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (1 samples, 0.08%)</title><rect x="99.9200%" y="277" width="0.0800%" height="15" fill="rgb(233,140,3)" fg:x="1249" fg:w="1"/><text x="100.1700%" y="287.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="99.9200%" y="261" width="0.0800%" height="15" fill="rgb(215,69,23)" fg:x="1249" fg:w="1"/><text x="100.1700%" y="271.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="99.9200%" y="245" width="0.0800%" height="15" fill="rgb(240,202,20)" fg:x="1249" fg:w="1"/><text x="100.1700%" y="255.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="99.9200%" y="229" width="0.0800%" height="15" fill="rgb(209,146,50)" fg:x="1249" fg:w="1"/><text x="100.1700%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.9200%" y="213" width="0.0800%" height="15" fill="rgb(253,102,54)" fg:x="1249" fg:w="1"/><text x="100.1700%" y="223.50"></text></g></svg></svg>