<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1110" onload="init(evt)" viewBox="0 0 1200 1110" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1110" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1093.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1093.00"> </text><svg id="frames" x="10" width="1180" total_samples="1257"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0000%" y="645" width="0.0796%" height="15" fill="rgb(207,35,49)" fg:x="0" fg:w="1"/><text x="0.2500%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.0000%" y="677" width="0.1591%" height="15" fill="rgb(205,68,36)" fg:x="0" fg:w="2"/><text x="0.2500%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.0000%" y="661" width="0.1591%" height="15" fill="rgb(245,62,40)" fg:x="0" fg:w="2"/><text x="0.2500%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.0796%" y="645" width="0.0796%" height="15" fill="rgb(228,27,24)" fg:x="1" fg:w="1"/><text x="0.3296%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0796%" y="629" width="0.0796%" height="15" fill="rgb(253,19,12)" fg:x="1" fg:w="1"/><text x="0.3296%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="0.0000%" y="709" width="0.2387%" height="15" fill="rgb(232,28,20)" fg:x="0" fg:w="3"/><text x="0.2500%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="0.0000%" y="693" width="0.2387%" height="15" fill="rgb(218,35,51)" fg:x="0" fg:w="3"/><text x="0.2500%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.1591%" y="677" width="0.0796%" height="15" fill="rgb(212,90,40)" fg:x="2" fg:w="1"/><text x="0.4091%" y="687.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.4773%" y="629" width="0.1591%" height="15" fill="rgb(220,172,12)" fg:x="6" fg:w="2"/><text x="0.7273%" y="639.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.32%)</title><rect x="0.3978%" y="693" width="0.3182%" height="15" fill="rgb(226,159,20)" fg:x="5" fg:w="4"/><text x="0.6478%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.3978%" y="677" width="0.3182%" height="15" fill="rgb(234,205,16)" fg:x="5" fg:w="4"/><text x="0.6478%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="0.4773%" y="661" width="0.2387%" height="15" fill="rgb(207,9,39)" fg:x="6" fg:w="3"/><text x="0.7273%" y="671.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (3 samples, 0.24%)</title><rect x="0.4773%" y="645" width="0.2387%" height="15" fill="rgb(249,143,15)" fg:x="6" fg:w="3"/><text x="0.7273%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="0.6364%" y="629" width="0.0796%" height="15" fill="rgb(253,133,29)" fg:x="8" fg:w="1"/><text x="0.8864%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.7160%" y="629" width="0.0796%" height="15" fill="rgb(221,187,0)" fg:x="9" fg:w="1"/><text x="0.9660%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.8751%" y="613" width="0.0796%" height="15" fill="rgb(205,204,26)" fg:x="11" fg:w="1"/><text x="1.1251%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.1138%" y="597" width="0.0796%" height="15" fill="rgb(224,68,54)" fg:x="14" fg:w="1"/><text x="1.3638%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.1933%" y="549" width="0.0796%" height="15" fill="rgb(209,67,4)" fg:x="15" fg:w="1"/><text x="1.4433%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="1.1933%" y="581" width="0.1591%" height="15" fill="rgb(228,229,18)" fg:x="15" fg:w="2"/><text x="1.4433%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="1.1933%" y="565" width="0.1591%" height="15" fill="rgb(231,89,13)" fg:x="15" fg:w="2"/><text x="1.4433%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.2729%" y="549" width="0.0796%" height="15" fill="rgb(210,182,18)" fg:x="16" fg:w="1"/><text x="1.5229%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.72%)</title><rect x="0.7160%" y="645" width="0.7160%" height="15" fill="rgb(240,105,2)" fg:x="9" fg:w="9"/><text x="0.9660%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="0.7955%" y="629" width="0.6364%" height="15" fill="rgb(207,170,50)" fg:x="10" fg:w="8"/><text x="1.0455%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="0.9547%" y="613" width="0.4773%" height="15" fill="rgb(232,133,24)" fg:x="12" fg:w="6"/><text x="1.2047%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="1.1933%" y="597" width="0.2387%" height="15" fill="rgb(235,166,27)" fg:x="15" fg:w="3"/><text x="1.4433%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.3524%" y="581" width="0.0796%" height="15" fill="rgb(209,19,13)" fg:x="17" fg:w="1"/><text x="1.6024%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.6706%" y="597" width="0.0796%" height="15" fill="rgb(226,79,39)" fg:x="21" fg:w="1"/><text x="1.9206%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="1.7502%" y="597" width="0.1591%" height="15" fill="rgb(222,163,10)" fg:x="22" fg:w="2"/><text x="2.0002%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.8298%" y="581" width="0.0796%" height="15" fill="rgb(214,44,19)" fg:x="23" fg:w="1"/><text x="2.0798%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="1.9889%" y="581" width="0.0796%" height="15" fill="rgb(210,217,13)" fg:x="25" fg:w="1"/><text x="2.2389%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="1.9889%" y="565" width="0.0796%" height="15" fill="rgb(237,61,54)" fg:x="25" fg:w="1"/><text x="2.2389%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.9889%" y="549" width="0.0796%" height="15" fill="rgb(226,184,24)" fg:x="25" fg:w="1"/><text x="2.2389%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.9889%" y="533" width="0.0796%" height="15" fill="rgb(223,226,4)" fg:x="25" fg:w="1"/><text x="2.2389%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.0684%" y="581" width="0.0796%" height="15" fill="rgb(210,26,41)" fg:x="26" fg:w="1"/><text x="2.3184%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.1480%" y="565" width="0.0796%" height="15" fill="rgb(220,221,6)" fg:x="27" fg:w="1"/><text x="2.3980%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.72%)</title><rect x="1.5911%" y="613" width="0.7160%" height="15" fill="rgb(225,89,49)" fg:x="20" fg:w="9"/><text x="1.8411%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="1.9093%" y="597" width="0.3978%" height="15" fill="rgb(218,70,45)" fg:x="24" fg:w="5"/><text x="2.1593%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.1480%" y="581" width="0.1591%" height="15" fill="rgb(238,166,21)" fg:x="27" fg:w="2"/><text x="2.3980%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.2275%" y="565" width="0.0796%" height="15" fill="rgb(224,141,44)" fg:x="28" fg:w="1"/><text x="2.4775%" y="575.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.95%)</title><rect x="1.4320%" y="645" width="0.9547%" height="15" fill="rgb(230,12,49)" fg:x="18" fg:w="12"/><text x="1.6820%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.88%)</title><rect x="1.5115%" y="629" width="0.8751%" height="15" fill="rgb(212,174,12)" fg:x="19" fg:w="11"/><text x="1.7615%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.3071%" y="613" width="0.0796%" height="15" fill="rgb(246,67,9)" fg:x="29" fg:w="1"/><text x="2.5571%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (22 samples, 1.75%)</title><rect x="0.7160%" y="693" width="1.7502%" height="15" fill="rgb(239,35,23)" fg:x="9" fg:w="22"/><text x="0.9660%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 1.75%)</title><rect x="0.7160%" y="677" width="1.7502%" height="15" fill="rgb(211,167,0)" fg:x="9" fg:w="22"/><text x="0.9660%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (22 samples, 1.75%)</title><rect x="0.7160%" y="661" width="1.7502%" height="15" fill="rgb(225,119,45)" fg:x="9" fg:w="22"/><text x="0.9660%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.3866%" y="645" width="0.0796%" height="15" fill="rgb(210,162,6)" fg:x="30" fg:w="1"/><text x="2.6366%" y="655.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 2.31%)</title><rect x="0.2387%" y="709" width="2.3071%" height="15" fill="rgb(208,118,35)" fg:x="3" fg:w="29"/><text x="0.4887%" y="719.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;engine::storage::InMemoryStorage&gt; (1 samples, 0.08%)</title><rect x="2.4662%" y="693" width="0.0796%" height="15" fill="rgb(239,4,53)" fg:x="31" fg:w="1"/><text x="2.7162%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="2.4662%" y="677" width="0.0796%" height="15" fill="rgb(213,130,21)" fg:x="31" fg:w="1"/><text x="2.7162%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="2.4662%" y="661" width="0.0796%" height="15" fill="rgb(235,148,0)" fg:x="31" fg:w="1"/><text x="2.7162%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.7844%" y="645" width="0.0796%" height="15" fill="rgb(244,224,18)" fg:x="35" fg:w="1"/><text x="3.0344%" y="655.50"></text></g><g><title>libloading::library_filename (1 samples, 0.08%)</title><rect x="2.9435%" y="613" width="0.0796%" height="15" fill="rgb(211,214,4)" fg:x="37" fg:w="1"/><text x="3.1935%" y="623.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (1 samples, 0.08%)</title><rect x="2.9435%" y="597" width="0.0796%" height="15" fill="rgb(206,119,25)" fg:x="37" fg:w="1"/><text x="3.1935%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="2.9435%" y="581" width="0.0796%" height="15" fill="rgb(243,93,47)" fg:x="37" fg:w="1"/><text x="3.1935%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="2.9435%" y="565" width="0.0796%" height="15" fill="rgb(224,194,6)" fg:x="37" fg:w="1"/><text x="3.1935%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="2.9435%" y="549" width="0.0796%" height="15" fill="rgb(243,229,6)" fg:x="37" fg:w="1"/><text x="3.1935%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="2.9435%" y="533" width="0.0796%" height="15" fill="rgb(207,23,50)" fg:x="37" fg:w="1"/><text x="3.1935%" y="543.50"></text></g><g><title>dlerror (2 samples, 0.16%)</title><rect x="3.1026%" y="597" width="0.1591%" height="15" fill="rgb(253,192,32)" fg:x="39" fg:w="2"/><text x="3.3526%" y="607.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (14 samples, 1.11%)</title><rect x="2.8640%" y="629" width="1.1138%" height="15" fill="rgb(213,21,6)" fg:x="36" fg:w="14"/><text x="3.1140%" y="639.50"></text></g><g><title>libloading::os::unix::Library::open (12 samples, 0.95%)</title><rect x="3.0231%" y="613" width="0.9547%" height="15" fill="rgb(243,151,13)" fg:x="38" fg:w="12"/><text x="3.2731%" y="623.50"></text></g><g><title>dlopen (9 samples, 0.72%)</title><rect x="3.2617%" y="597" width="0.7160%" height="15" fill="rgb(233,165,41)" fg:x="41" fg:w="9"/><text x="3.5117%" y="607.50"></text></g><g><title>_dl_catch_error (8 samples, 0.64%)</title><rect x="3.3413%" y="581" width="0.6364%" height="15" fill="rgb(246,176,45)" fg:x="42" fg:w="8"/><text x="3.5913%" y="591.50"></text></g><g><title>_dl_catch_exception (8 samples, 0.64%)</title><rect x="3.3413%" y="565" width="0.6364%" height="15" fill="rgb(217,170,52)" fg:x="42" fg:w="8"/><text x="3.5913%" y="575.50"></text></g><g><title>_dl_catch_exception (7 samples, 0.56%)</title><rect x="3.4208%" y="549" width="0.5569%" height="15" fill="rgb(214,203,54)" fg:x="43" fg:w="7"/><text x="3.6708%" y="559.50"></text></g><g><title>_dl_catch_exception (6 samples, 0.48%)</title><rect x="3.5004%" y="533" width="0.4773%" height="15" fill="rgb(248,215,49)" fg:x="44" fg:w="6"/><text x="3.7504%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="4.1368%" y="565" width="0.1591%" height="15" fill="rgb(208,46,10)" fg:x="52" fg:w="2"/><text x="4.3868%" y="575.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (5 samples, 0.40%)</title><rect x="3.9777%" y="613" width="0.3978%" height="15" fill="rgb(254,5,31)" fg:x="50" fg:w="5"/><text x="4.2277%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.32%)</title><rect x="4.0573%" y="597" width="0.3182%" height="15" fill="rgb(222,104,33)" fg:x="51" fg:w="4"/><text x="4.3073%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="4.1368%" y="581" width="0.2387%" height="15" fill="rgb(248,49,16)" fg:x="52" fg:w="3"/><text x="4.3868%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.2959%" y="565" width="0.0796%" height="15" fill="rgb(232,198,41)" fg:x="54" fg:w="1"/><text x="4.5459%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="4.5346%" y="565" width="0.0796%" height="15" fill="rgb(214,125,3)" fg:x="57" fg:w="1"/><text x="4.7846%" y="575.50"></text></g><g><title>glob::is_dir (5 samples, 0.40%)</title><rect x="4.6142%" y="565" width="0.3978%" height="15" fill="rgb(229,220,28)" fg:x="58" fg:w="5"/><text x="4.8642%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat (5 samples, 0.40%)</title><rect x="4.6142%" y="549" width="0.3978%" height="15" fill="rgb(222,64,37)" fg:x="58" fg:w="5"/><text x="4.8642%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (5 samples, 0.40%)</title><rect x="4.6142%" y="533" width="0.3978%" height="15" fill="rgb(249,184,13)" fg:x="58" fg:w="5"/><text x="4.8642%" y="543.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (5 samples, 0.40%)</title><rect x="4.6142%" y="517" width="0.3978%" height="15" fill="rgb(252,176,6)" fg:x="58" fg:w="5"/><text x="4.8642%" y="527.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (5 samples, 0.40%)</title><rect x="4.6142%" y="501" width="0.3978%" height="15" fill="rgb(228,153,7)" fg:x="58" fg:w="5"/><text x="4.8642%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx (5 samples, 0.40%)</title><rect x="4.6142%" y="485" width="0.3978%" height="15" fill="rgb(242,193,5)" fg:x="58" fg:w="5"/><text x="4.8642%" y="495.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (5 samples, 0.40%)</title><rect x="4.6142%" y="469" width="0.3978%" height="15" fill="rgb(232,140,9)" fg:x="58" fg:w="5"/><text x="4.8642%" y="479.50"></text></g><g><title>statx (5 samples, 0.40%)</title><rect x="4.6142%" y="453" width="0.3978%" height="15" fill="rgb(213,222,16)" fg:x="58" fg:w="5"/><text x="4.8642%" y="463.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.64%)</title><rect x="4.4551%" y="597" width="0.6364%" height="15" fill="rgb(222,75,50)" fg:x="56" fg:w="8"/><text x="4.7051%" y="607.50"></text></g><g><title>glob::fill_todo (8 samples, 0.64%)</title><rect x="4.4551%" y="581" width="0.6364%" height="15" fill="rgb(205,180,2)" fg:x="56" fg:w="8"/><text x="4.7051%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="5.0119%" y="565" width="0.0796%" height="15" fill="rgb(216,34,7)" fg:x="63" fg:w="1"/><text x="5.2619%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="5.0119%" y="549" width="0.0796%" height="15" fill="rgb(253,16,32)" fg:x="63" fg:w="1"/><text x="5.2619%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="5.0119%" y="533" width="0.0796%" height="15" fill="rgb(208,97,28)" fg:x="63" fg:w="1"/><text x="5.2619%" y="543.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="5.0119%" y="517" width="0.0796%" height="15" fill="rgb(225,92,11)" fg:x="63" fg:w="1"/><text x="5.2619%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="5.0119%" y="501" width="0.0796%" height="15" fill="rgb(243,38,12)" fg:x="63" fg:w="1"/><text x="5.2619%" y="511.50"></text></g><g><title>std::sys::unix::cvt (1 samples, 0.08%)</title><rect x="5.0119%" y="485" width="0.0796%" height="15" fill="rgb(208,139,16)" fg:x="63" fg:w="1"/><text x="5.2619%" y="495.50"></text></g><g><title>std::io::error::Error::last_os_error (1 samples, 0.08%)</title><rect x="5.0119%" y="469" width="0.0796%" height="15" fill="rgb(227,24,9)" fg:x="63" fg:w="1"/><text x="5.2619%" y="479.50"></text></g><g><title>std::sys::unix::os::errno (1 samples, 0.08%)</title><rect x="5.0119%" y="453" width="0.0796%" height="15" fill="rgb(206,62,11)" fg:x="63" fg:w="1"/><text x="5.2619%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;glob::Paths&gt; (1 samples, 0.08%)</title><rect x="5.0915%" y="597" width="0.0796%" height="15" fill="rgb(228,134,27)" fg:x="64" fg:w="1"/><text x="5.3415%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="5.0915%" y="581" width="0.0796%" height="15" fill="rgb(205,55,33)" fg:x="64" fg:w="1"/><text x="5.3415%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.0915%" y="565" width="0.0796%" height="15" fill="rgb(243,75,43)" fg:x="64" fg:w="1"/><text x="5.3415%" y="575.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (20 samples, 1.59%)</title><rect x="3.9777%" y="629" width="1.5911%" height="15" fill="rgb(223,27,42)" fg:x="50" fg:w="20"/><text x="4.2277%" y="639.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (15 samples, 1.19%)</title><rect x="4.3755%" y="613" width="1.1933%" height="15" fill="rgb(232,189,33)" fg:x="55" fg:w="15"/><text x="4.6255%" y="623.50"></text></g><g><title>glob::glob (5 samples, 0.40%)</title><rect x="5.1710%" y="597" width="0.3978%" height="15" fill="rgb(210,9,39)" fg:x="65" fg:w="5"/><text x="5.4210%" y="607.50"></text></g><g><title>glob::glob_with (5 samples, 0.40%)</title><rect x="5.1710%" y="581" width="0.3978%" height="15" fill="rgb(242,85,26)" fg:x="65" fg:w="5"/><text x="5.4210%" y="591.50"></text></g><g><title>glob::Pattern::new (4 samples, 0.32%)</title><rect x="5.2506%" y="565" width="0.3182%" height="15" fill="rgb(248,44,4)" fg:x="66" fg:w="4"/><text x="5.5006%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="5.3302%" y="549" width="0.2387%" height="15" fill="rgb(250,96,46)" fg:x="67" fg:w="3"/><text x="5.5802%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="5.4097%" y="533" width="0.1591%" height="15" fill="rgb(229,116,26)" fg:x="68" fg:w="2"/><text x="5.6597%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="5.4097%" y="517" width="0.1591%" height="15" fill="rgb(246,94,34)" fg:x="68" fg:w="2"/><text x="5.6597%" y="527.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="5.4097%" y="501" width="0.1591%" height="15" fill="rgb(251,73,21)" fg:x="68" fg:w="2"/><text x="5.6597%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.5688%" y="629" width="0.0796%" height="15" fill="rgb(254,121,25)" fg:x="70" fg:w="1"/><text x="5.8188%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (3 samples, 0.24%)</title><rect x="5.6484%" y="629" width="0.2387%" height="15" fill="rgb(215,161,49)" fg:x="71" fg:w="3"/><text x="5.8984%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (2 samples, 0.16%)</title><rect x="5.7279%" y="613" width="0.1591%" height="15" fill="rgb(221,43,13)" fg:x="72" fg:w="2"/><text x="5.9779%" y="623.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="5.7279%" y="597" width="0.1591%" height="15" fill="rgb(249,5,37)" fg:x="72" fg:w="2"/><text x="5.9779%" y="607.50"></text></g><g><title>&lt;plugins_core::building::actions::BidirectionalDigAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="5.8870%" y="565" width="0.0796%" height="15" fill="rgb(226,25,44)" fg:x="74" fg:w="1"/><text x="6.1370%" y="575.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="5.8870%" y="549" width="0.0796%" height="15" fill="rgb(238,189,16)" fg:x="74" fg:w="1"/><text x="6.1370%" y="559.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (3 samples, 0.24%)</title><rect x="5.8870%" y="597" width="0.2387%" height="15" fill="rgb(251,186,8)" fg:x="74" fg:w="3"/><text x="6.1370%" y="607.50"></text></g><g><title>kernel::plugins::Schema::action (3 samples, 0.24%)</title><rect x="5.8870%" y="581" width="0.2387%" height="15" fill="rgb(254,34,31)" fg:x="74" fg:w="3"/><text x="6.1370%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (2 samples, 0.16%)</title><rect x="5.9666%" y="565" width="0.1591%" height="15" fill="rgb(225,215,27)" fg:x="75" fg:w="2"/><text x="6.2166%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="6.0461%" y="549" width="0.0796%" height="15" fill="rgb(221,192,48)" fg:x="76" fg:w="1"/><text x="6.2961%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.0461%" y="533" width="0.0796%" height="15" fill="rgb(219,137,20)" fg:x="76" fg:w="1"/><text x="6.2961%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.0461%" y="517" width="0.0796%" height="15" fill="rgb(219,84,11)" fg:x="76" fg:w="1"/><text x="6.2961%" y="527.50"></text></g><g><title>&lt;plugins_core::carrying::actions::TakeOutAction as kernel::plugins::HasActionSchema&gt;::action_schema (2 samples, 0.16%)</title><rect x="6.1257%" y="565" width="0.1591%" height="15" fill="rgb(224,10,23)" fg:x="77" fg:w="2"/><text x="6.3757%" y="575.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="6.2053%" y="549" width="0.0796%" height="15" fill="rgb(248,22,39)" fg:x="78" fg:w="1"/><text x="6.4553%" y="559.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (3 samples, 0.24%)</title><rect x="6.1257%" y="597" width="0.2387%" height="15" fill="rgb(212,154,20)" fg:x="77" fg:w="3"/><text x="6.3757%" y="607.50"></text></g><g><title>kernel::plugins::Schema::action (3 samples, 0.24%)</title><rect x="6.1257%" y="581" width="0.2387%" height="15" fill="rgb(236,199,50)" fg:x="77" fg:w="3"/><text x="6.3757%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="6.2848%" y="565" width="0.0796%" height="15" fill="rgb(211,9,17)" fg:x="79" fg:w="1"/><text x="6.5348%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.2848%" y="549" width="0.0796%" height="15" fill="rgb(243,216,36)" fg:x="79" fg:w="1"/><text x="6.5348%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.2848%" y="533" width="0.0796%" height="15" fill="rgb(250,2,10)" fg:x="79" fg:w="1"/><text x="6.5348%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="6.3644%" y="565" width="0.0796%" height="15" fill="rgb(226,50,48)" fg:x="80" fg:w="1"/><text x="6.6144%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.3644%" y="549" width="0.0796%" height="15" fill="rgb(243,81,16)" fg:x="80" fg:w="1"/><text x="6.6144%" y="559.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="6.3644%" y="597" width="0.1591%" height="15" fill="rgb(250,14,2)" fg:x="80" fg:w="2"/><text x="6.6144%" y="607.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="6.3644%" y="581" width="0.1591%" height="15" fill="rgb(233,135,29)" fg:x="80" fg:w="2"/><text x="6.6144%" y="591.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="6.4439%" y="565" width="0.0796%" height="15" fill="rgb(224,64,43)" fg:x="81" fg:w="1"/><text x="6.6939%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.4439%" y="549" width="0.0796%" height="15" fill="rgb(238,84,13)" fg:x="81" fg:w="1"/><text x="6.6939%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.4439%" y="533" width="0.0796%" height="15" fill="rgb(253,48,26)" fg:x="81" fg:w="1"/><text x="6.6939%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="6.4439%" y="517" width="0.0796%" height="15" fill="rgb(205,223,31)" fg:x="81" fg:w="1"/><text x="6.6939%" y="527.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="6.5235%" y="597" width="0.0796%" height="15" fill="rgb(221,41,32)" fg:x="82" fg:w="1"/><text x="6.7735%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="6.5235%" y="581" width="0.0796%" height="15" fill="rgb(213,158,31)" fg:x="82" fg:w="1"/><text x="6.7735%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="6.5235%" y="565" width="0.0796%" height="15" fill="rgb(245,126,43)" fg:x="82" fg:w="1"/><text x="6.7735%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.5235%" y="549" width="0.0796%" height="15" fill="rgb(227,7,22)" fg:x="82" fg:w="1"/><text x="6.7735%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.5235%" y="533" width="0.0796%" height="15" fill="rgb(252,90,44)" fg:x="82" fg:w="1"/><text x="6.7735%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.5235%" y="517" width="0.0796%" height="15" fill="rgb(253,91,0)" fg:x="82" fg:w="1"/><text x="6.7735%" y="527.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="6.6030%" y="597" width="0.0796%" height="15" fill="rgb(252,175,49)" fg:x="83" fg:w="1"/><text x="6.8530%" y="607.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="6.6030%" y="581" width="0.0796%" height="15" fill="rgb(246,150,1)" fg:x="83" fg:w="1"/><text x="6.8530%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="6.6030%" y="565" width="0.0796%" height="15" fill="rgb(241,192,25)" fg:x="83" fg:w="1"/><text x="6.8530%" y="575.50"></text></g><g><title>kernel::plugins::SessionPlugins::schema (11 samples, 0.88%)</title><rect x="5.8870%" y="629" width="0.8751%" height="15" fill="rgb(239,187,11)" fg:x="74" fg:w="11"/><text x="6.1370%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11 samples, 0.88%)</title><rect x="5.8870%" y="613" width="0.8751%" height="15" fill="rgb(218,202,51)" fg:x="74" fg:w="11"/><text x="6.1370%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.6826%" y="597" width="0.0796%" height="15" fill="rgb(225,176,8)" fg:x="84" fg:w="1"/><text x="6.9326%" y="607.50"></text></g><g><title>clock_getres (1 samples, 0.08%)</title><rect x="6.7621%" y="613" width="0.0796%" height="15" fill="rgb(219,122,41)" fg:x="85" fg:w="1"/><text x="7.0121%" y="623.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (51 samples, 4.06%)</title><rect x="2.8640%" y="645" width="4.0573%" height="15" fill="rgb(248,140,20)" fg:x="36" fg:w="51"/><text x="3.1140%" y="655.50">kern..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.16%)</title><rect x="6.7621%" y="629" width="0.1591%" height="15" fill="rgb(245,41,37)" fg:x="85" fg:w="2"/><text x="7.0121%" y="639.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="6.8417%" y="613" width="0.0796%" height="15" fill="rgb(235,82,39)" fg:x="86" fg:w="1"/><text x="7.0917%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="6.9212%" y="629" width="0.0796%" height="15" fill="rgb(230,108,42)" fg:x="87" fg:w="1"/><text x="7.1712%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="6.9212%" y="613" width="0.0796%" height="15" fill="rgb(215,150,50)" fg:x="87" fg:w="1"/><text x="7.1712%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.0804%" y="597" width="0.0796%" height="15" fill="rgb(233,212,5)" fg:x="89" fg:w="1"/><text x="7.3304%" y="607.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (59 samples, 4.69%)</title><rect x="2.5457%" y="709" width="4.6937%" height="15" fill="rgb(245,80,22)" fg:x="32" fg:w="59"/><text x="2.7957%" y="719.50">&lt;engi..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (58 samples, 4.61%)</title><rect x="2.6253%" y="693" width="4.6142%" height="15" fill="rgb(238,129,16)" fg:x="33" fg:w="58"/><text x="2.8753%" y="703.50">engin..</text></g><g><title>engine::session::Session::new (58 samples, 4.61%)</title><rect x="2.6253%" y="677" width="4.6142%" height="15" fill="rgb(240,19,0)" fg:x="33" fg:w="58"/><text x="2.8753%" y="687.50">engin..</text></g><g><title>engine::session::Session::initialize (57 samples, 4.53%)</title><rect x="2.7049%" y="661" width="4.5346%" height="15" fill="rgb(232,42,35)" fg:x="34" fg:w="57"/><text x="2.9549%" y="671.50">engin..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (4 samples, 0.32%)</title><rect x="6.9212%" y="645" width="0.3182%" height="15" fill="rgb(223,130,24)" fg:x="87" fg:w="4"/><text x="7.1712%" y="655.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.24%)</title><rect x="7.0008%" y="629" width="0.2387%" height="15" fill="rgb(237,16,22)" fg:x="88" fg:w="3"/><text x="7.2508%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="7.0804%" y="613" width="0.1591%" height="15" fill="rgb(248,192,20)" fg:x="89" fg:w="2"/><text x="7.3304%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.1599%" y="597" width="0.0796%" height="15" fill="rgb(233,167,2)" fg:x="90" fg:w="1"/><text x="7.4099%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.1599%" y="581" width="0.0796%" height="15" fill="rgb(252,71,44)" fg:x="90" fg:w="1"/><text x="7.4099%" y="591.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.1599%" y="565" width="0.0796%" height="15" fill="rgb(238,37,47)" fg:x="90" fg:w="1"/><text x="7.4099%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="7.3190%" y="693" width="0.0796%" height="15" fill="rgb(214,202,54)" fg:x="92" fg:w="1"/><text x="7.5690%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="7.3190%" y="677" width="0.0796%" height="15" fill="rgb(254,165,40)" fg:x="92" fg:w="1"/><text x="7.5690%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="7.3190%" y="661" width="0.0796%" height="15" fill="rgb(246,173,38)" fg:x="92" fg:w="1"/><text x="7.5690%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.3190%" y="645" width="0.0796%" height="15" fill="rgb(215,3,27)" fg:x="92" fg:w="1"/><text x="7.5690%" y="655.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="7.3986%" y="677" width="0.0796%" height="15" fill="rgb(239,169,51)" fg:x="93" fg:w="1"/><text x="7.6486%" y="687.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="7.3986%" y="661" width="0.0796%" height="15" fill="rgb(212,5,25)" fg:x="93" fg:w="1"/><text x="7.6486%" y="671.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="7.3986%" y="645" width="0.0796%" height="15" fill="rgb(243,45,17)" fg:x="93" fg:w="1"/><text x="7.6486%" y="655.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="7.3986%" y="629" width="0.0796%" height="15" fill="rgb(242,97,9)" fg:x="93" fg:w="1"/><text x="7.6486%" y="639.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="7.3986%" y="613" width="0.0796%" height="15" fill="rgb(228,71,31)" fg:x="93" fg:w="1"/><text x="7.6486%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="7.3986%" y="597" width="0.0796%" height="15" fill="rgb(252,184,16)" fg:x="93" fg:w="1"/><text x="7.6486%" y="607.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="7.3986%" y="581" width="0.0796%" height="15" fill="rgb(236,169,46)" fg:x="93" fg:w="1"/><text x="7.6486%" y="591.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="7.3986%" y="565" width="0.0796%" height="15" fill="rgb(207,17,47)" fg:x="93" fg:w="1"/><text x="7.6486%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="7.5577%" y="581" width="0.0796%" height="15" fill="rgb(206,201,28)" fg:x="95" fg:w="1"/><text x="7.8077%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.5577%" y="565" width="0.0796%" height="15" fill="rgb(224,184,23)" fg:x="95" fg:w="1"/><text x="7.8077%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.6372%" y="517" width="0.0796%" height="15" fill="rgb(208,139,48)" fg:x="96" fg:w="1"/><text x="7.8872%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="7.6372%" y="565" width="0.1591%" height="15" fill="rgb(208,130,10)" fg:x="96" fg:w="2"/><text x="7.8872%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="7.6372%" y="549" width="0.1591%" height="15" fill="rgb(211,213,45)" fg:x="96" fg:w="2"/><text x="7.8872%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="7.6372%" y="533" width="0.1591%" height="15" fill="rgb(235,100,30)" fg:x="96" fg:w="2"/><text x="7.8872%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="7.7168%" y="517" width="0.0796%" height="15" fill="rgb(206,144,31)" fg:x="97" fg:w="1"/><text x="7.9668%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="7.9554%" y="549" width="0.2387%" height="15" fill="rgb(224,200,26)" fg:x="100" fg:w="3"/><text x="8.2054%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.1146%" y="533" width="0.0796%" height="15" fill="rgb(247,104,53)" fg:x="102" fg:w="1"/><text x="8.3646%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="7.7963%" y="565" width="0.6364%" height="15" fill="rgb(220,14,17)" fg:x="98" fg:w="8"/><text x="8.0463%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="8.1941%" y="549" width="0.2387%" height="15" fill="rgb(230,140,40)" fg:x="103" fg:w="3"/><text x="8.4441%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="8.1941%" y="533" width="0.2387%" height="15" fill="rgb(229,2,41)" fg:x="103" fg:w="3"/><text x="8.4441%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="8.1941%" y="517" width="0.2387%" height="15" fill="rgb(232,89,16)" fg:x="103" fg:w="3"/><text x="8.4441%" y="527.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="8.1941%" y="501" width="0.2387%" height="15" fill="rgb(247,59,52)" fg:x="103" fg:w="3"/><text x="8.4441%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="8.1941%" y="485" width="0.2387%" height="15" fill="rgb(226,110,21)" fg:x="103" fg:w="3"/><text x="8.4441%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="8.2737%" y="469" width="0.1591%" height="15" fill="rgb(224,176,43)" fg:x="104" fg:w="2"/><text x="8.5237%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.3532%" y="453" width="0.0796%" height="15" fill="rgb(221,73,6)" fg:x="105" fg:w="1"/><text x="8.6032%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.3532%" y="437" width="0.0796%" height="15" fill="rgb(232,78,19)" fg:x="105" fg:w="1"/><text x="8.6032%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="8.3532%" y="421" width="0.0796%" height="15" fill="rgb(233,112,48)" fg:x="105" fg:w="1"/><text x="8.6032%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (13 samples, 1.03%)</title><rect x="7.6372%" y="581" width="1.0342%" height="15" fill="rgb(243,131,47)" fg:x="96" fg:w="13"/><text x="7.8872%" y="591.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="8.4328%" y="565" width="0.2387%" height="15" fill="rgb(226,51,1)" fg:x="106" fg:w="3"/><text x="8.6828%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.5919%" y="549" width="0.0796%" height="15" fill="rgb(247,58,7)" fg:x="108" fg:w="1"/><text x="8.8419%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.5919%" y="533" width="0.0796%" height="15" fill="rgb(209,7,32)" fg:x="108" fg:w="1"/><text x="8.8419%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (15 samples, 1.19%)</title><rect x="7.5577%" y="597" width="1.1933%" height="15" fill="rgb(209,39,41)" fg:x="95" fg:w="15"/><text x="7.8077%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.6714%" y="581" width="0.0796%" height="15" fill="rgb(226,182,46)" fg:x="109" fg:w="1"/><text x="8.9214%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.6714%" y="565" width="0.0796%" height="15" fill="rgb(230,219,10)" fg:x="109" fg:w="1"/><text x="8.9214%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.6714%" y="549" width="0.0796%" height="15" fill="rgb(227,175,30)" fg:x="109" fg:w="1"/><text x="8.9214%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.6714%" y="533" width="0.0796%" height="15" fill="rgb(217,2,50)" fg:x="109" fg:w="1"/><text x="8.9214%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.6714%" y="517" width="0.0796%" height="15" fill="rgb(229,160,0)" fg:x="109" fg:w="1"/><text x="8.9214%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.6714%" y="501" width="0.0796%" height="15" fill="rgb(207,78,37)" fg:x="109" fg:w="1"/><text x="8.9214%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.7510%" y="565" width="0.0796%" height="15" fill="rgb(225,57,0)" fg:x="110" fg:w="1"/><text x="9.0010%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.9101%" y="517" width="0.0796%" height="15" fill="rgb(232,154,2)" fg:x="112" fg:w="1"/><text x="9.1601%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="8.9897%" y="517" width="0.0796%" height="15" fill="rgb(241,212,25)" fg:x="113" fg:w="1"/><text x="9.2397%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="8.9897%" y="501" width="0.0796%" height="15" fill="rgb(226,69,20)" fg:x="113" fg:w="1"/><text x="9.2397%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.9897%" y="485" width="0.0796%" height="15" fill="rgb(247,184,54)" fg:x="113" fg:w="1"/><text x="9.2397%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="8.7510%" y="597" width="0.3978%" height="15" fill="rgb(210,145,0)" fg:x="110" fg:w="5"/><text x="9.0010%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="8.7510%" y="581" width="0.3978%" height="15" fill="rgb(253,82,12)" fg:x="110" fg:w="5"/><text x="9.0010%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="8.8305%" y="565" width="0.3182%" height="15" fill="rgb(245,42,11)" fg:x="111" fg:w="4"/><text x="9.0805%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="8.8305%" y="549" width="0.3182%" height="15" fill="rgb(219,147,32)" fg:x="111" fg:w="4"/><text x="9.0805%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="8.8305%" y="533" width="0.3182%" height="15" fill="rgb(246,12,7)" fg:x="111" fg:w="4"/><text x="9.0805%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.0692%" y="517" width="0.0796%" height="15" fill="rgb(243,50,9)" fg:x="114" fg:w="1"/><text x="9.3192%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.0692%" y="501" width="0.0796%" height="15" fill="rgb(219,149,6)" fg:x="114" fg:w="1"/><text x="9.3192%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.0692%" y="485" width="0.0796%" height="15" fill="rgb(241,51,42)" fg:x="114" fg:w="1"/><text x="9.3192%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.2283%" y="549" width="0.0796%" height="15" fill="rgb(226,128,27)" fg:x="116" fg:w="1"/><text x="9.4783%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4 samples, 0.32%)</title><rect x="9.3079%" y="501" width="0.3182%" height="15" fill="rgb(244,144,4)" fg:x="117" fg:w="4"/><text x="9.5579%" y="511.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="9.3874%" y="485" width="0.2387%" height="15" fill="rgb(221,4,13)" fg:x="118" fg:w="3"/><text x="9.6374%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="9.6261%" y="485" width="0.0796%" height="15" fill="rgb(208,170,28)" fg:x="121" fg:w="1"/><text x="9.8761%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="9.3079%" y="533" width="0.4773%" height="15" fill="rgb(226,131,13)" fg:x="117" fg:w="6"/><text x="9.5579%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="9.3079%" y="517" width="0.4773%" height="15" fill="rgb(215,72,41)" fg:x="117" fg:w="6"/><text x="9.5579%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="9.6261%" y="501" width="0.1591%" height="15" fill="rgb(243,108,20)" fg:x="121" fg:w="2"/><text x="9.8761%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.7056%" y="485" width="0.0796%" height="15" fill="rgb(230,189,17)" fg:x="122" fg:w="1"/><text x="9.9556%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.7056%" y="469" width="0.0796%" height="15" fill="rgb(220,50,17)" fg:x="122" fg:w="1"/><text x="9.9556%" y="479.50"></text></g><g><title>engine::session::Session::flush (31 samples, 2.47%)</title><rect x="7.3986%" y="693" width="2.4662%" height="15" fill="rgb(248,152,48)" fg:x="93" fg:w="31"/><text x="7.6486%" y="703.50">en..</text></g><g><title>engine::session::state::State::close (30 samples, 2.39%)</title><rect x="7.4781%" y="677" width="2.3866%" height="15" fill="rgb(244,91,11)" fg:x="94" fg:w="30"/><text x="7.7281%" y="687.50">en..</text></g><g><title>engine::session::state::State::flush_entities (30 samples, 2.39%)</title><rect x="7.4781%" y="661" width="2.3866%" height="15" fill="rgb(220,157,5)" fg:x="94" fg:w="30"/><text x="7.7281%" y="671.50">en..</text></g><g><title>core::iter::adapters::try_process (30 samples, 2.39%)</title><rect x="7.4781%" y="645" width="2.3866%" height="15" fill="rgb(253,137,8)" fg:x="94" fg:w="30"/><text x="7.7281%" y="655.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (30 samples, 2.39%)</title><rect x="7.4781%" y="629" width="2.3866%" height="15" fill="rgb(217,137,51)" fg:x="94" fg:w="30"/><text x="7.7281%" y="639.50">&lt;a..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (29 samples, 2.31%)</title><rect x="7.5577%" y="613" width="2.3071%" height="15" fill="rgb(218,209,53)" fg:x="95" fg:w="29"/><text x="7.8077%" y="623.50">e..</text></g><g><title>kernel::model::any_entity_changes (9 samples, 0.72%)</title><rect x="9.1488%" y="597" width="0.7160%" height="15" fill="rgb(249,137,25)" fg:x="115" fg:w="9"/><text x="9.3988%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.72%)</title><rect x="9.1488%" y="581" width="0.7160%" height="15" fill="rgb(239,155,26)" fg:x="115" fg:w="9"/><text x="9.3988%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.72%)</title><rect x="9.1488%" y="565" width="0.7160%" height="15" fill="rgb(227,85,46)" fg:x="115" fg:w="9"/><text x="9.3988%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.56%)</title><rect x="9.3079%" y="549" width="0.5569%" height="15" fill="rgb(251,107,43)" fg:x="117" fg:w="7"/><text x="9.5579%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.7852%" y="533" width="0.0796%" height="15" fill="rgb(234,170,33)" fg:x="123" fg:w="1"/><text x="10.0352%" y="543.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="9.8648%" y="693" width="0.0796%" height="15" fill="rgb(206,29,35)" fg:x="124" fg:w="1"/><text x="10.1148%" y="703.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="9.8648%" y="677" width="0.0796%" height="15" fill="rgb(227,138,25)" fg:x="124" fg:w="1"/><text x="10.1148%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="9.8648%" y="661" width="0.0796%" height="15" fill="rgb(249,131,35)" fg:x="124" fg:w="1"/><text x="10.1148%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.8648%" y="645" width="0.0796%" height="15" fill="rgb(239,6,40)" fg:x="124" fg:w="1"/><text x="10.1148%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.8648%" y="629" width="0.0796%" height="15" fill="rgb(246,136,47)" fg:x="124" fg:w="1"/><text x="10.1148%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="10.0239%" y="661" width="0.0796%" height="15" fill="rgb(253,58,26)" fg:x="126" fg:w="1"/><text x="10.2739%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.0239%" y="645" width="0.0796%" height="15" fill="rgb(237,141,10)" fg:x="126" fg:w="1"/><text x="10.2739%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.0239%" y="629" width="0.0796%" height="15" fill="rgb(234,156,12)" fg:x="126" fg:w="1"/><text x="10.2739%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="10.0239%" y="613" width="0.0796%" height="15" fill="rgb(243,224,36)" fg:x="126" fg:w="1"/><text x="10.2739%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.0239%" y="597" width="0.0796%" height="15" fill="rgb(205,229,51)" fg:x="126" fg:w="1"/><text x="10.2739%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.0239%" y="581" width="0.0796%" height="15" fill="rgb(223,189,4)" fg:x="126" fg:w="1"/><text x="10.2739%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (2 samples, 0.16%)</title><rect x="10.1034%" y="629" width="0.1591%" height="15" fill="rgb(249,167,54)" fg:x="127" fg:w="2"/><text x="10.3534%" y="639.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.24%)</title><rect x="10.1034%" y="645" width="0.2387%" height="15" fill="rgb(218,34,28)" fg:x="127" fg:w="3"/><text x="10.3534%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.2625%" y="629" width="0.0796%" height="15" fill="rgb(232,109,42)" fg:x="129" fg:w="1"/><text x="10.5125%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.2625%" y="613" width="0.0796%" height="15" fill="rgb(248,214,46)" fg:x="129" fg:w="1"/><text x="10.5125%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.2625%" y="597" width="0.0796%" height="15" fill="rgb(244,216,40)" fg:x="129" fg:w="1"/><text x="10.5125%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.2625%" y="581" width="0.0796%" height="15" fill="rgb(231,226,31)" fg:x="129" fg:w="1"/><text x="10.5125%" y="591.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (5 samples, 0.40%)</title><rect x="10.1034%" y="661" width="0.3978%" height="15" fill="rgb(238,38,43)" fg:x="127" fg:w="5"/><text x="10.3534%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="10.3421%" y="645" width="0.1591%" height="15" fill="rgb(208,88,43)" fg:x="130" fg:w="2"/><text x="10.5921%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="10.4216%" y="629" width="0.0796%" height="15" fill="rgb(205,136,37)" fg:x="131" fg:w="1"/><text x="10.6716%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.08%)</title><rect x="10.4216%" y="613" width="0.0796%" height="15" fill="rgb(237,34,14)" fg:x="131" fg:w="1"/><text x="10.6716%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="10.5807%" y="565" width="0.0796%" height="15" fill="rgb(236,193,44)" fg:x="133" fg:w="1"/><text x="10.8307%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (9 samples, 0.72%)</title><rect x="10.0239%" y="677" width="0.7160%" height="15" fill="rgb(231,48,10)" fg:x="126" fg:w="9"/><text x="10.2739%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="10.5012%" y="661" width="0.2387%" height="15" fill="rgb(213,141,34)" fg:x="132" fg:w="3"/><text x="10.7512%" y="671.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="10.5012%" y="645" width="0.2387%" height="15" fill="rgb(249,130,34)" fg:x="132" fg:w="3"/><text x="10.7512%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="10.5807%" y="629" width="0.1591%" height="15" fill="rgb(219,42,41)" fg:x="133" fg:w="2"/><text x="10.8307%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="10.5807%" y="613" width="0.1591%" height="15" fill="rgb(224,100,54)" fg:x="133" fg:w="2"/><text x="10.8307%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="10.5807%" y="597" width="0.1591%" height="15" fill="rgb(229,200,27)" fg:x="133" fg:w="2"/><text x="10.8307%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="10.5807%" y="581" width="0.1591%" height="15" fill="rgb(217,118,10)" fg:x="133" fg:w="2"/><text x="10.8307%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.6603%" y="565" width="0.0796%" height="15" fill="rgb(206,22,3)" fg:x="134" fg:w="1"/><text x="10.9103%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.6603%" y="549" width="0.0796%" height="15" fill="rgb(232,163,46)" fg:x="134" fg:w="1"/><text x="10.9103%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.7399%" y="677" width="0.0796%" height="15" fill="rgb(206,95,13)" fg:x="135" fg:w="1"/><text x="10.9899%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.7399%" y="661" width="0.0796%" height="15" fill="rgb(253,154,18)" fg:x="135" fg:w="1"/><text x="10.9899%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.7399%" y="645" width="0.0796%" height="15" fill="rgb(219,32,23)" fg:x="135" fg:w="1"/><text x="10.9899%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.7399%" y="629" width="0.0796%" height="15" fill="rgb(230,191,45)" fg:x="135" fg:w="1"/><text x="10.9899%" y="639.50"></text></g><g><title>plugins_core::build::Build::save (12 samples, 0.95%)</title><rect x="9.9443%" y="693" width="0.9547%" height="15" fill="rgb(229,64,36)" fg:x="125" fg:w="12"/><text x="10.1943%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="10.8194%" y="677" width="0.0796%" height="15" fill="rgb(205,129,25)" fg:x="136" fg:w="1"/><text x="11.0694%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.8194%" y="661" width="0.0796%" height="15" fill="rgb(254,112,7)" fg:x="136" fg:w="1"/><text x="11.0694%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.8194%" y="645" width="0.0796%" height="15" fill="rgb(226,53,48)" fg:x="136" fg:w="1"/><text x="11.0694%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.8194%" y="629" width="0.0796%" height="15" fill="rgb(214,153,38)" fg:x="136" fg:w="1"/><text x="11.0694%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="10.8194%" y="613" width="0.0796%" height="15" fill="rgb(243,101,7)" fg:x="136" fg:w="1"/><text x="11.0694%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="10.8194%" y="597" width="0.0796%" height="15" fill="rgb(240,140,22)" fg:x="136" fg:w="1"/><text x="11.0694%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="10.8194%" y="581" width="0.0796%" height="15" fill="rgb(235,114,2)" fg:x="136" fg:w="1"/><text x="11.0694%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.8194%" y="565" width="0.0796%" height="15" fill="rgb(242,59,12)" fg:x="136" fg:w="1"/><text x="11.0694%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.8194%" y="549" width="0.0796%" height="15" fill="rgb(252,134,9)" fg:x="136" fg:w="1"/><text x="11.0694%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="10.8194%" y="533" width="0.0796%" height="15" fill="rgb(236,4,44)" fg:x="136" fg:w="1"/><text x="11.0694%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="10.8194%" y="517" width="0.0796%" height="15" fill="rgb(254,172,41)" fg:x="136" fg:w="1"/><text x="11.0694%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="10.8194%" y="501" width="0.0796%" height="15" fill="rgb(244,63,20)" fg:x="136" fg:w="1"/><text x="11.0694%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="10.8194%" y="485" width="0.0796%" height="15" fill="rgb(250,73,31)" fg:x="136" fg:w="1"/><text x="11.0694%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.8194%" y="469" width="0.0796%" height="15" fill="rgb(241,38,36)" fg:x="136" fg:w="1"/><text x="11.0694%" y="479.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="10.8990%" y="661" width="0.0796%" height="15" fill="rgb(245,211,2)" fg:x="137" fg:w="1"/><text x="11.1490%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="10.9785%" y="645" width="0.0796%" height="15" fill="rgb(206,120,28)" fg:x="138" fg:w="1"/><text x="11.2285%" y="655.50"></text></g><g><title>&lt;replies::Json as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="10.9785%" y="629" width="0.0796%" height="15" fill="rgb(211,59,34)" fg:x="138" fg:w="1"/><text x="11.2285%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.0581%" y="613" width="0.0796%" height="15" fill="rgb(233,168,5)" fg:x="139" fg:w="1"/><text x="11.3081%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (5 samples, 0.40%)</title><rect x="10.8990%" y="693" width="0.3978%" height="15" fill="rgb(234,33,13)" fg:x="137" fg:w="5"/><text x="11.1490%" y="703.50"></text></g><g><title>plugins_core::tools::set_quantity (5 samples, 0.40%)</title><rect x="10.8990%" y="677" width="0.3978%" height="15" fill="rgb(231,150,26)" fg:x="137" fg:w="5"/><text x="11.1490%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (4 samples, 0.32%)</title><rect x="10.9785%" y="661" width="0.3182%" height="15" fill="rgb(217,191,4)" fg:x="138" fg:w="4"/><text x="11.2285%" y="671.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (3 samples, 0.24%)</title><rect x="11.0581%" y="645" width="0.2387%" height="15" fill="rgb(246,198,38)" fg:x="139" fg:w="3"/><text x="11.3081%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="11.0581%" y="629" width="0.2387%" height="15" fill="rgb(245,64,37)" fg:x="139" fg:w="3"/><text x="11.3081%" y="639.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="11.1376%" y="613" width="0.1591%" height="15" fill="rgb(250,30,36)" fg:x="140" fg:w="2"/><text x="11.3876%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="11.1376%" y="597" width="0.1591%" height="15" fill="rgb(217,86,53)" fg:x="140" fg:w="2"/><text x="11.3876%" y="607.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="11.2172%" y="581" width="0.0796%" height="15" fill="rgb(228,157,16)" fg:x="141" fg:w="1"/><text x="11.4672%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.2172%" y="565" width="0.0796%" height="15" fill="rgb(217,59,31)" fg:x="141" fg:w="1"/><text x="11.4672%" y="575.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="11.2967%" y="661" width="0.1591%" height="15" fill="rgb(237,138,41)" fg:x="142" fg:w="2"/><text x="11.5467%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="11.2967%" y="645" width="0.1591%" height="15" fill="rgb(227,91,49)" fg:x="142" fg:w="2"/><text x="11.5467%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="11.2967%" y="629" width="0.1591%" height="15" fill="rgb(247,21,44)" fg:x="142" fg:w="2"/><text x="11.5467%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.3763%" y="613" width="0.0796%" height="15" fill="rgb(219,210,51)" fg:x="143" fg:w="1"/><text x="11.6263%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.3763%" y="597" width="0.0796%" height="15" fill="rgb(209,140,6)" fg:x="143" fg:w="1"/><text x="11.6263%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="11.3763%" y="581" width="0.0796%" height="15" fill="rgb(221,188,24)" fg:x="143" fg:w="1"/><text x="11.6263%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.3763%" y="565" width="0.0796%" height="15" fill="rgb(232,154,20)" fg:x="143" fg:w="1"/><text x="11.6263%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.3763%" y="549" width="0.0796%" height="15" fill="rgb(244,137,50)" fg:x="143" fg:w="1"/><text x="11.6263%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="11.3763%" y="533" width="0.0796%" height="15" fill="rgb(225,185,43)" fg:x="143" fg:w="1"/><text x="11.6263%" y="543.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="11.4558%" y="661" width="0.0796%" height="15" fill="rgb(213,205,38)" fg:x="144" fg:w="1"/><text x="11.7058%" y="671.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="11.4558%" y="645" width="0.0796%" height="15" fill="rgb(236,73,12)" fg:x="144" fg:w="1"/><text x="11.7058%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.4558%" y="629" width="0.0796%" height="15" fill="rgb(235,219,13)" fg:x="144" fg:w="1"/><text x="11.7058%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.4558%" y="613" width="0.0796%" height="15" fill="rgb(218,59,36)" fg:x="144" fg:w="1"/><text x="11.7058%" y="623.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="11.5354%" y="661" width="0.1591%" height="15" fill="rgb(205,110,39)" fg:x="145" fg:w="2"/><text x="11.7854%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="11.6150%" y="645" width="0.0796%" height="15" fill="rgb(218,206,42)" fg:x="146" fg:w="1"/><text x="11.8650%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="11.6150%" y="629" width="0.0796%" height="15" fill="rgb(248,125,24)" fg:x="146" fg:w="1"/><text x="11.8650%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="11.6150%" y="613" width="0.0796%" height="15" fill="rgb(242,28,27)" fg:x="146" fg:w="1"/><text x="11.8650%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.6150%" y="597" width="0.0796%" height="15" fill="rgb(216,228,15)" fg:x="146" fg:w="1"/><text x="11.8650%" y="607.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (6 samples, 0.48%)</title><rect x="11.2967%" y="693" width="0.4773%" height="15" fill="rgb(235,116,46)" fg:x="142" fg:w="6"/><text x="11.5467%" y="703.50"></text></g><g><title>plugins_core::tools::set_container (6 samples, 0.48%)</title><rect x="11.2967%" y="677" width="0.4773%" height="15" fill="rgb(224,18,32)" fg:x="142" fg:w="6"/><text x="11.5467%" y="687.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="11.6945%" y="661" width="0.0796%" height="15" fill="rgb(252,5,12)" fg:x="147" fg:w="1"/><text x="11.9445%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="11.6945%" y="645" width="0.0796%" height="15" fill="rgb(251,36,5)" fg:x="147" fg:w="1"/><text x="11.9445%" y="655.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="11.6945%" y="629" width="0.0796%" height="15" fill="rgb(217,53,14)" fg:x="147" fg:w="1"/><text x="11.9445%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.6945%" y="613" width="0.0796%" height="15" fill="rgb(215,86,45)" fg:x="147" fg:w="1"/><text x="11.9445%" y="623.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="11.6945%" y="597" width="0.0796%" height="15" fill="rgb(242,169,11)" fg:x="147" fg:w="1"/><text x="11.9445%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.6945%" y="581" width="0.0796%" height="15" fill="rgb(211,213,45)" fg:x="147" fg:w="1"/><text x="11.9445%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.6945%" y="565" width="0.0796%" height="15" fill="rgb(205,88,11)" fg:x="147" fg:w="1"/><text x="11.9445%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.6945%" y="549" width="0.0796%" height="15" fill="rgb(252,69,26)" fg:x="147" fg:w="1"/><text x="11.9445%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.6945%" y="533" width="0.0796%" height="15" fill="rgb(246,123,37)" fg:x="147" fg:w="1"/><text x="11.9445%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="11.7741%" y="597" width="0.0796%" height="15" fill="rgb(212,205,5)" fg:x="148" fg:w="1"/><text x="12.0241%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="11.7741%" y="581" width="0.0796%" height="15" fill="rgb(253,148,0)" fg:x="148" fg:w="1"/><text x="12.0241%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.7741%" y="565" width="0.0796%" height="15" fill="rgb(239,22,4)" fg:x="148" fg:w="1"/><text x="12.0241%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="11.8536%" y="549" width="0.1591%" height="15" fill="rgb(226,26,53)" fg:x="149" fg:w="2"/><text x="12.1036%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="11.8536%" y="533" width="0.1591%" height="15" fill="rgb(225,229,45)" fg:x="149" fg:w="2"/><text x="12.1036%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="11.8536%" y="517" width="0.1591%" height="15" fill="rgb(220,60,37)" fg:x="149" fg:w="2"/><text x="12.1036%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="11.8536%" y="501" width="0.1591%" height="15" fill="rgb(217,180,35)" fg:x="149" fg:w="2"/><text x="12.1036%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="11.8536%" y="485" width="0.1591%" height="15" fill="rgb(229,7,53)" fg:x="149" fg:w="2"/><text x="12.1036%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="11.8536%" y="469" width="0.1591%" height="15" fill="rgb(254,137,3)" fg:x="149" fg:w="2"/><text x="12.1036%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="11.8536%" y="453" width="0.1591%" height="15" fill="rgb(215,140,41)" fg:x="149" fg:w="2"/><text x="12.1036%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="11.8536%" y="437" width="0.1591%" height="15" fill="rgb(250,80,15)" fg:x="149" fg:w="2"/><text x="12.1036%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="11.8536%" y="421" width="0.1591%" height="15" fill="rgb(252,191,6)" fg:x="149" fg:w="2"/><text x="12.1036%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="11.8536%" y="405" width="0.1591%" height="15" fill="rgb(246,217,18)" fg:x="149" fg:w="2"/><text x="12.1036%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="11.8536%" y="389" width="0.1591%" height="15" fill="rgb(223,93,7)" fg:x="149" fg:w="2"/><text x="12.1036%" y="399.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="11.8536%" y="373" width="0.1591%" height="15" fill="rgb(225,55,52)" fg:x="149" fg:w="2"/><text x="12.1036%" y="383.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="11.8536%" y="357" width="0.1591%" height="15" fill="rgb(240,31,24)" fg:x="149" fg:w="2"/><text x="12.1036%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="11.8536%" y="597" width="0.2387%" height="15" fill="rgb(205,56,52)" fg:x="149" fg:w="3"/><text x="12.1036%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="11.8536%" y="581" width="0.2387%" height="15" fill="rgb(246,146,12)" fg:x="149" fg:w="3"/><text x="12.1036%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="11.8536%" y="565" width="0.2387%" height="15" fill="rgb(239,84,36)" fg:x="149" fg:w="3"/><text x="12.1036%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.0127%" y="549" width="0.0796%" height="15" fill="rgb(207,41,40)" fg:x="151" fg:w="1"/><text x="12.2627%" y="559.50"></text></g><g><title>core::iter::adapters::try_process (5 samples, 0.40%)</title><rect x="11.7741%" y="677" width="0.3978%" height="15" fill="rgb(241,179,25)" fg:x="148" fg:w="5"/><text x="12.0241%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="11.7741%" y="661" width="0.3978%" height="15" fill="rgb(210,0,34)" fg:x="148" fg:w="5"/><text x="12.0241%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5 samples, 0.40%)</title><rect x="11.7741%" y="645" width="0.3978%" height="15" fill="rgb(225,217,29)" fg:x="148" fg:w="5"/><text x="12.0241%" y="655.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (5 samples, 0.40%)</title><rect x="11.7741%" y="629" width="0.3978%" height="15" fill="rgb(216,191,38)" fg:x="148" fg:w="5"/><text x="12.0241%" y="639.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (5 samples, 0.40%)</title><rect x="11.7741%" y="613" width="0.3978%" height="15" fill="rgb(232,140,52)" fg:x="148" fg:w="5"/><text x="12.0241%" y="623.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="12.0923%" y="597" width="0.0796%" height="15" fill="rgb(223,158,51)" fg:x="152" fg:w="1"/><text x="12.3423%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.1718%" y="645" width="0.0796%" height="15" fill="rgb(235,29,51)" fg:x="153" fg:w="1"/><text x="12.4218%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.1718%" y="629" width="0.0796%" height="15" fill="rgb(215,181,18)" fg:x="153" fg:w="1"/><text x="12.4218%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.1718%" y="613" width="0.0796%" height="15" fill="rgb(227,125,34)" fg:x="153" fg:w="1"/><text x="12.4218%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.1718%" y="597" width="0.0796%" height="15" fill="rgb(230,197,49)" fg:x="153" fg:w="1"/><text x="12.4218%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.1718%" y="581" width="0.0796%" height="15" fill="rgb(239,141,16)" fg:x="153" fg:w="1"/><text x="12.4218%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.1718%" y="565" width="0.0796%" height="15" fill="rgb(225,105,43)" fg:x="153" fg:w="1"/><text x="12.4218%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.1718%" y="549" width="0.0796%" height="15" fill="rgb(214,131,14)" fg:x="153" fg:w="1"/><text x="12.4218%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.1718%" y="533" width="0.0796%" height="15" fill="rgb(229,177,11)" fg:x="153" fg:w="1"/><text x="12.4218%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.1718%" y="517" width="0.0796%" height="15" fill="rgb(231,180,14)" fg:x="153" fg:w="1"/><text x="12.4218%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.1718%" y="501" width="0.0796%" height="15" fill="rgb(232,88,2)" fg:x="153" fg:w="1"/><text x="12.4218%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.1718%" y="485" width="0.0796%" height="15" fill="rgb(205,220,8)" fg:x="153" fg:w="1"/><text x="12.4218%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.1718%" y="469" width="0.0796%" height="15" fill="rgb(225,23,53)" fg:x="153" fg:w="1"/><text x="12.4218%" y="479.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (3 samples, 0.24%)</title><rect x="12.1718%" y="661" width="0.2387%" height="15" fill="rgb(213,62,29)" fg:x="153" fg:w="3"/><text x="12.4218%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="12.2514%" y="645" width="0.1591%" height="15" fill="rgb(227,75,7)" fg:x="154" fg:w="2"/><text x="12.5014%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="12.3309%" y="629" width="0.0796%" height="15" fill="rgb(207,105,14)" fg:x="155" fg:w="1"/><text x="12.5809%" y="639.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="12.4105%" y="613" width="0.0796%" height="15" fill="rgb(245,62,29)" fg:x="156" fg:w="1"/><text x="12.6605%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="12.4105%" y="597" width="0.0796%" height="15" fill="rgb(236,202,4)" fg:x="156" fg:w="1"/><text x="12.6605%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="12.4105%" y="581" width="0.0796%" height="15" fill="rgb(250,67,1)" fg:x="156" fg:w="1"/><text x="12.6605%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.4105%" y="565" width="0.0796%" height="15" fill="rgb(253,115,44)" fg:x="156" fg:w="1"/><text x="12.6605%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.4105%" y="549" width="0.0796%" height="15" fill="rgb(251,139,18)" fg:x="156" fg:w="1"/><text x="12.6605%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.4105%" y="533" width="0.0796%" height="15" fill="rgb(218,22,32)" fg:x="156" fg:w="1"/><text x="12.6605%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.4105%" y="517" width="0.0796%" height="15" fill="rgb(243,53,5)" fg:x="156" fg:w="1"/><text x="12.6605%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.4105%" y="501" width="0.0796%" height="15" fill="rgb(227,56,16)" fg:x="156" fg:w="1"/><text x="12.6605%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.4105%" y="485" width="0.0796%" height="15" fill="rgb(245,53,0)" fg:x="156" fg:w="1"/><text x="12.6605%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.4105%" y="469" width="0.0796%" height="15" fill="rgb(216,170,35)" fg:x="156" fg:w="1"/><text x="12.6605%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.4105%" y="453" width="0.0796%" height="15" fill="rgb(211,200,8)" fg:x="156" fg:w="1"/><text x="12.6605%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.4105%" y="437" width="0.0796%" height="15" fill="rgb(228,204,44)" fg:x="156" fg:w="1"/><text x="12.6605%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.4105%" y="421" width="0.0796%" height="15" fill="rgb(214,121,17)" fg:x="156" fg:w="1"/><text x="12.6605%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.4105%" y="405" width="0.0796%" height="15" fill="rgb(233,64,38)" fg:x="156" fg:w="1"/><text x="12.6605%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.4105%" y="389" width="0.0796%" height="15" fill="rgb(253,54,19)" fg:x="156" fg:w="1"/><text x="12.6605%" y="399.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="12.4901%" y="565" width="0.2387%" height="15" fill="rgb(253,94,18)" fg:x="157" fg:w="3"/><text x="12.7401%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_fmt (3 samples, 0.24%)</title><rect x="12.4901%" y="549" width="0.2387%" height="15" fill="rgb(227,57,52)" fg:x="157" fg:w="3"/><text x="12.7401%" y="559.50"></text></g><g><title>core::fmt::write (3 samples, 0.24%)</title><rect x="12.4901%" y="533" width="0.2387%" height="15" fill="rgb(230,228,50)" fg:x="157" fg:w="3"/><text x="12.7401%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (3 samples, 0.24%)</title><rect x="12.4901%" y="517" width="0.2387%" height="15" fill="rgb(217,205,27)" fg:x="157" fg:w="3"/><text x="12.7401%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="12.4901%" y="501" width="0.2387%" height="15" fill="rgb(252,71,50)" fg:x="157" fg:w="3"/><text x="12.7401%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="12.4901%" y="485" width="0.2387%" height="15" fill="rgb(209,86,4)" fg:x="157" fg:w="3"/><text x="12.7401%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="12.4901%" y="469" width="0.2387%" height="15" fill="rgb(229,94,0)" fg:x="157" fg:w="3"/><text x="12.7401%" y="479.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="12.4901%" y="453" width="0.2387%" height="15" fill="rgb(252,223,21)" fg:x="157" fg:w="3"/><text x="12.7401%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="12.7287%" y="549" width="0.1591%" height="15" fill="rgb(230,210,4)" fg:x="160" fg:w="2"/><text x="12.9787%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="12.7287%" y="533" width="0.1591%" height="15" fill="rgb(240,149,38)" fg:x="160" fg:w="2"/><text x="12.9787%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="12.7287%" y="517" width="0.1591%" height="15" fill="rgb(254,105,20)" fg:x="160" fg:w="2"/><text x="12.9787%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="12.7287%" y="501" width="0.1591%" height="15" fill="rgb(253,87,46)" fg:x="160" fg:w="2"/><text x="12.9787%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="12.7287%" y="485" width="0.1591%" height="15" fill="rgb(253,116,33)" fg:x="160" fg:w="2"/><text x="12.9787%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="12.8083%" y="469" width="0.0796%" height="15" fill="rgb(229,198,5)" fg:x="161" fg:w="1"/><text x="13.0583%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="12.8083%" y="453" width="0.0796%" height="15" fill="rgb(242,38,37)" fg:x="161" fg:w="1"/><text x="13.0583%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="12.8083%" y="437" width="0.0796%" height="15" fill="rgb(242,69,53)" fg:x="161" fg:w="1"/><text x="13.0583%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (6 samples, 0.48%)</title><rect x="12.8878%" y="501" width="0.4773%" height="15" fill="rgb(249,80,16)" fg:x="162" fg:w="6"/><text x="13.1378%" y="511.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.40%)</title><rect x="12.9674%" y="485" width="0.3978%" height="15" fill="rgb(206,128,11)" fg:x="163" fg:w="5"/><text x="13.2174%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.32%)</title><rect x="13.0469%" y="469" width="0.3182%" height="15" fill="rgb(212,35,20)" fg:x="164" fg:w="4"/><text x="13.2969%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.32%)</title><rect x="13.0469%" y="453" width="0.3182%" height="15" fill="rgb(236,79,13)" fg:x="164" fg:w="4"/><text x="13.2969%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="13.1265%" y="437" width="0.2387%" height="15" fill="rgb(233,123,3)" fg:x="165" fg:w="3"/><text x="13.3765%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="13.1265%" y="421" width="0.2387%" height="15" fill="rgb(214,93,52)" fg:x="165" fg:w="3"/><text x="13.3765%" y="431.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="13.1265%" y="405" width="0.2387%" height="15" fill="rgb(251,37,40)" fg:x="165" fg:w="3"/><text x="13.3765%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="13.5243%" y="485" width="0.0796%" height="15" fill="rgb(227,80,54)" fg:x="170" fg:w="1"/><text x="13.7743%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="13.3652%" y="501" width="0.3182%" height="15" fill="rgb(254,48,11)" fg:x="168" fg:w="4"/><text x="13.6152%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.6038%" y="485" width="0.0796%" height="15" fill="rgb(235,193,26)" fg:x="171" fg:w="1"/><text x="13.8538%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.88%)</title><rect x="12.8878%" y="533" width="0.8751%" height="15" fill="rgb(229,99,21)" fg:x="162" fg:w="11"/><text x="13.1378%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.88%)</title><rect x="12.8878%" y="517" width="0.8751%" height="15" fill="rgb(211,140,41)" fg:x="162" fg:w="11"/><text x="13.1378%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.6834%" y="501" width="0.0796%" height="15" fill="rgb(240,227,30)" fg:x="172" fg:w="1"/><text x="13.9334%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.6834%" y="485" width="0.0796%" height="15" fill="rgb(215,224,45)" fg:x="172" fg:w="1"/><text x="13.9334%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.6834%" y="469" width="0.0796%" height="15" fill="rgb(206,123,31)" fg:x="172" fg:w="1"/><text x="13.9334%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="13.6834%" y="453" width="0.0796%" height="15" fill="rgb(210,138,16)" fg:x="172" fg:w="1"/><text x="13.9334%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="13.6834%" y="437" width="0.0796%" height="15" fill="rgb(228,57,28)" fg:x="172" fg:w="1"/><text x="13.9334%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="13.6834%" y="421" width="0.0796%" height="15" fill="rgb(242,170,10)" fg:x="172" fg:w="1"/><text x="13.9334%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (14 samples, 1.11%)</title><rect x="12.8878%" y="549" width="1.1138%" height="15" fill="rgb(228,214,39)" fg:x="162" fg:w="14"/><text x="13.1378%" y="559.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="13.7629%" y="533" width="0.2387%" height="15" fill="rgb(218,179,33)" fg:x="173" fg:w="3"/><text x="14.0129%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="13.7629%" y="517" width="0.2387%" height="15" fill="rgb(235,193,39)" fg:x="173" fg:w="3"/><text x="14.0129%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="13.8425%" y="501" width="0.1591%" height="15" fill="rgb(219,221,36)" fg:x="174" fg:w="2"/><text x="14.0925%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="13.9220%" y="485" width="0.0796%" height="15" fill="rgb(248,218,19)" fg:x="175" fg:w="1"/><text x="14.1720%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="13.9220%" y="469" width="0.0796%" height="15" fill="rgb(205,50,9)" fg:x="175" fg:w="1"/><text x="14.1720%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="13.9220%" y="453" width="0.0796%" height="15" fill="rgb(238,81,28)" fg:x="175" fg:w="1"/><text x="14.1720%" y="463.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (17 samples, 1.35%)</title><rect x="12.7287%" y="565" width="1.3524%" height="15" fill="rgb(235,110,19)" fg:x="160" fg:w="17"/><text x="12.9787%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="14.0016%" y="549" width="0.0796%" height="15" fill="rgb(214,7,14)" fg:x="176" fg:w="1"/><text x="14.2516%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.0811%" y="565" width="0.0796%" height="15" fill="rgb(211,77,3)" fg:x="177" fg:w="1"/><text x="14.3311%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="14.0811%" y="549" width="0.0796%" height="15" fill="rgb(229,5,9)" fg:x="177" fg:w="1"/><text x="14.3311%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.0811%" y="533" width="0.0796%" height="15" fill="rgb(225,90,11)" fg:x="177" fg:w="1"/><text x="14.3311%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.0811%" y="517" width="0.0796%" height="15" fill="rgb(242,56,8)" fg:x="177" fg:w="1"/><text x="14.3311%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="14.3198%" y="517" width="0.1591%" height="15" fill="rgb(249,212,39)" fg:x="180" fg:w="2"/><text x="14.5698%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="14.3198%" y="501" width="0.1591%" height="15" fill="rgb(236,90,9)" fg:x="180" fg:w="2"/><text x="14.5698%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="14.4789%" y="485" width="0.0796%" height="15" fill="rgb(206,88,35)" fg:x="182" fg:w="1"/><text x="14.7289%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.5585%" y="469" width="0.0796%" height="15" fill="rgb(205,126,30)" fg:x="183" fg:w="1"/><text x="14.8085%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.5585%" y="453" width="0.0796%" height="15" fill="rgb(230,176,12)" fg:x="183" fg:w="1"/><text x="14.8085%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="14.7176%" y="453" width="0.0796%" height="15" fill="rgb(243,19,9)" fg:x="185" fg:w="1"/><text x="14.9676%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="14.7971%" y="453" width="0.0796%" height="15" fill="rgb(245,171,17)" fg:x="186" fg:w="1"/><text x="15.0471%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.8767%" y="437" width="0.0796%" height="15" fill="rgb(227,52,21)" fg:x="187" fg:w="1"/><text x="15.1267%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="14.9562%" y="421" width="0.0796%" height="15" fill="rgb(238,69,14)" fg:x="188" fg:w="1"/><text x="15.2062%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="15.0358%" y="405" width="0.1591%" height="15" fill="rgb(241,156,39)" fg:x="189" fg:w="2"/><text x="15.2858%" y="415.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="15.1154%" y="389" width="0.0796%" height="15" fill="rgb(212,227,28)" fg:x="190" fg:w="1"/><text x="15.3654%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="15.0358%" y="421" width="0.2387%" height="15" fill="rgb(209,118,27)" fg:x="189" fg:w="3"/><text x="15.2858%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="15.1949%" y="405" width="0.0796%" height="15" fill="rgb(226,102,5)" fg:x="191" fg:w="1"/><text x="15.4449%" y="415.50"></text></g><g><title>engine::session::Session::flush (40 samples, 3.18%)</title><rect x="12.1718%" y="677" width="3.1822%" height="15" fill="rgb(223,34,3)" fg:x="153" fg:w="40"/><text x="12.4218%" y="687.50">eng..</text></g><g><title>engine::session::Session::save_changes (37 samples, 2.94%)</title><rect x="12.4105%" y="661" width="2.9435%" height="15" fill="rgb(221,81,38)" fg:x="156" fg:w="37"/><text x="12.6605%" y="671.50">en..</text></g><g><title>engine::session::state::State::close (37 samples, 2.94%)</title><rect x="12.4105%" y="645" width="2.9435%" height="15" fill="rgb(236,219,28)" fg:x="156" fg:w="37"/><text x="12.6605%" y="655.50">en..</text></g><g><title>engine::session::state::State::flush_entities (37 samples, 2.94%)</title><rect x="12.4105%" y="629" width="2.9435%" height="15" fill="rgb(213,200,14)" fg:x="156" fg:w="37"/><text x="12.6605%" y="639.50">en..</text></g><g><title>core::iter::adapters::try_process (36 samples, 2.86%)</title><rect x="12.4901%" y="613" width="2.8640%" height="15" fill="rgb(240,33,19)" fg:x="157" fg:w="36"/><text x="12.7401%" y="623.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (36 samples, 2.86%)</title><rect x="12.4901%" y="597" width="2.8640%" height="15" fill="rgb(233,113,27)" fg:x="157" fg:w="36"/><text x="12.7401%" y="607.50">&lt;a..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (36 samples, 2.86%)</title><rect x="12.4901%" y="581" width="2.8640%" height="15" fill="rgb(220,221,18)" fg:x="157" fg:w="36"/><text x="12.7401%" y="591.50">en..</text></g><g><title>kernel::model::any_entity_changes (15 samples, 1.19%)</title><rect x="14.1607%" y="565" width="1.1933%" height="15" fill="rgb(238,92,8)" fg:x="178" fg:w="15"/><text x="14.4107%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (15 samples, 1.19%)</title><rect x="14.1607%" y="549" width="1.1933%" height="15" fill="rgb(222,164,16)" fg:x="178" fg:w="15"/><text x="14.4107%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (14 samples, 1.11%)</title><rect x="14.2403%" y="533" width="1.1138%" height="15" fill="rgb(241,119,3)" fg:x="179" fg:w="14"/><text x="14.4903%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (11 samples, 0.88%)</title><rect x="14.4789%" y="517" width="0.8751%" height="15" fill="rgb(241,44,8)" fg:x="182" fg:w="11"/><text x="14.7289%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (11 samples, 0.88%)</title><rect x="14.4789%" y="501" width="0.8751%" height="15" fill="rgb(230,36,40)" fg:x="182" fg:w="11"/><text x="14.7289%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (10 samples, 0.80%)</title><rect x="14.5585%" y="485" width="0.7955%" height="15" fill="rgb(243,16,36)" fg:x="183" fg:w="10"/><text x="14.8085%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (9 samples, 0.72%)</title><rect x="14.6380%" y="469" width="0.7160%" height="15" fill="rgb(231,4,26)" fg:x="184" fg:w="9"/><text x="14.8880%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="14.8767%" y="453" width="0.4773%" height="15" fill="rgb(240,9,31)" fg:x="187" fg:w="6"/><text x="15.1267%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="14.9562%" y="437" width="0.3978%" height="15" fill="rgb(207,173,15)" fg:x="188" fg:w="5"/><text x="15.2062%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.2745%" y="421" width="0.0796%" height="15" fill="rgb(224,192,53)" fg:x="192" fg:w="1"/><text x="15.5245%" y="431.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="15.3540%" y="677" width="0.1591%" height="15" fill="rgb(223,67,28)" fg:x="193" fg:w="2"/><text x="15.6040%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="15.3540%" y="661" width="0.1591%" height="15" fill="rgb(211,20,47)" fg:x="193" fg:w="2"/><text x="15.6040%" y="671.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="15.3540%" y="645" width="0.1591%" height="15" fill="rgb(240,228,2)" fg:x="193" fg:w="2"/><text x="15.6040%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.4336%" y="629" width="0.0796%" height="15" fill="rgb(248,151,12)" fg:x="194" fg:w="1"/><text x="15.6836%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.4336%" y="613" width="0.0796%" height="15" fill="rgb(244,8,39)" fg:x="194" fg:w="1"/><text x="15.6836%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="15.4336%" y="597" width="0.0796%" height="15" fill="rgb(222,26,8)" fg:x="194" fg:w="1"/><text x="15.6836%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.4336%" y="581" width="0.0796%" height="15" fill="rgb(213,106,44)" fg:x="194" fg:w="1"/><text x="15.6836%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="15.4336%" y="565" width="0.0796%" height="15" fill="rgb(214,129,20)" fg:x="194" fg:w="1"/><text x="15.6836%" y="575.50"></text></g><g><title>plugins_core::build::Build::new (2 samples, 0.16%)</title><rect x="15.5131%" y="677" width="0.1591%" height="15" fill="rgb(212,32,13)" fg:x="195" fg:w="2"/><text x="15.7631%" y="687.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="15.5927%" y="661" width="0.0796%" height="15" fill="rgb(208,168,33)" fg:x="196" fg:w="1"/><text x="15.8427%" y="671.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="15.5927%" y="645" width="0.0796%" height="15" fill="rgb(231,207,8)" fg:x="196" fg:w="1"/><text x="15.8427%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="15.5927%" y="629" width="0.0796%" height="15" fill="rgb(235,219,23)" fg:x="196" fg:w="1"/><text x="15.8427%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.5927%" y="613" width="0.0796%" height="15" fill="rgb(226,216,26)" fg:x="196" fg:w="1"/><text x="15.8427%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.6722%" y="661" width="0.0796%" height="15" fill="rgb(239,137,16)" fg:x="197" fg:w="1"/><text x="15.9222%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.6722%" y="645" width="0.0796%" height="15" fill="rgb(207,12,36)" fg:x="197" fg:w="1"/><text x="15.9222%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="15.6722%" y="629" width="0.0796%" height="15" fill="rgb(210,214,24)" fg:x="197" fg:w="1"/><text x="15.9222%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="15.6722%" y="613" width="0.0796%" height="15" fill="rgb(206,56,30)" fg:x="197" fg:w="1"/><text x="15.9222%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="15.6722%" y="597" width="0.0796%" height="15" fill="rgb(228,143,26)" fg:x="197" fg:w="1"/><text x="15.9222%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.6722%" y="581" width="0.0796%" height="15" fill="rgb(216,218,46)" fg:x="197" fg:w="1"/><text x="15.9222%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.6722%" y="565" width="0.0796%" height="15" fill="rgb(206,6,19)" fg:x="197" fg:w="1"/><text x="15.9222%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="15.6722%" y="549" width="0.0796%" height="15" fill="rgb(239,177,51)" fg:x="197" fg:w="1"/><text x="15.9222%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="15.6722%" y="533" width="0.0796%" height="15" fill="rgb(216,55,25)" fg:x="197" fg:w="1"/><text x="15.9222%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="15.6722%" y="517" width="0.0796%" height="15" fill="rgb(231,163,29)" fg:x="197" fg:w="1"/><text x="15.9222%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="15.6722%" y="501" width="0.0796%" height="15" fill="rgb(232,149,50)" fg:x="197" fg:w="1"/><text x="15.9222%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.7518%" y="613" width="0.0796%" height="15" fill="rgb(223,142,48)" fg:x="198" fg:w="1"/><text x="16.0018%" y="623.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="15.7518%" y="629" width="0.1591%" height="15" fill="rgb(245,83,23)" fg:x="198" fg:w="2"/><text x="16.0018%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.8313%" y="613" width="0.0796%" height="15" fill="rgb(224,63,2)" fg:x="199" fg:w="1"/><text x="16.0813%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.8313%" y="597" width="0.0796%" height="15" fill="rgb(218,65,53)" fg:x="199" fg:w="1"/><text x="16.0813%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.8313%" y="581" width="0.0796%" height="15" fill="rgb(221,84,29)" fg:x="199" fg:w="1"/><text x="16.0813%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.8313%" y="565" width="0.0796%" height="15" fill="rgb(234,0,32)" fg:x="199" fg:w="1"/><text x="16.0813%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="15.8313%" y="549" width="0.0796%" height="15" fill="rgb(206,20,16)" fg:x="199" fg:w="1"/><text x="16.0813%" y="559.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (3 samples, 0.24%)</title><rect x="15.7518%" y="645" width="0.2387%" height="15" fill="rgb(244,172,18)" fg:x="198" fg:w="3"/><text x="16.0018%" y="655.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="15.9109%" y="629" width="0.0796%" height="15" fill="rgb(254,133,1)" fg:x="200" fg:w="1"/><text x="16.1609%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="15.9109%" y="613" width="0.0796%" height="15" fill="rgb(222,206,41)" fg:x="200" fg:w="1"/><text x="16.1609%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="15.9109%" y="597" width="0.0796%" height="15" fill="rgb(212,3,42)" fg:x="200" fg:w="1"/><text x="16.1609%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="15.9109%" y="581" width="0.0796%" height="15" fill="rgb(241,11,4)" fg:x="200" fg:w="1"/><text x="16.1609%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="15.9109%" y="565" width="0.0796%" height="15" fill="rgb(205,19,26)" fg:x="200" fg:w="1"/><text x="16.1609%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.9109%" y="549" width="0.0796%" height="15" fill="rgb(210,179,32)" fg:x="200" fg:w="1"/><text x="16.1609%" y="559.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="15.9905%" y="629" width="0.0796%" height="15" fill="rgb(227,116,49)" fg:x="201" fg:w="1"/><text x="16.2405%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="15.9905%" y="613" width="0.0796%" height="15" fill="rgb(211,146,6)" fg:x="201" fg:w="1"/><text x="16.2405%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.9905%" y="597" width="0.0796%" height="15" fill="rgb(219,44,39)" fg:x="201" fg:w="1"/><text x="16.2405%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.9905%" y="581" width="0.0796%" height="15" fill="rgb(234,128,11)" fg:x="201" fg:w="1"/><text x="16.2405%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="15.9905%" y="565" width="0.0796%" height="15" fill="rgb(220,183,53)" fg:x="201" fg:w="1"/><text x="16.2405%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="16.1496%" y="597" width="0.1591%" height="15" fill="rgb(213,219,32)" fg:x="203" fg:w="2"/><text x="16.3996%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="16.1496%" y="581" width="0.1591%" height="15" fill="rgb(232,156,16)" fg:x="203" fg:w="2"/><text x="16.3996%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.2291%" y="565" width="0.0796%" height="15" fill="rgb(246,135,34)" fg:x="204" fg:w="1"/><text x="16.4791%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.2291%" y="549" width="0.0796%" height="15" fill="rgb(241,99,0)" fg:x="204" fg:w="1"/><text x="16.4791%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="16.3087%" y="597" width="0.0796%" height="15" fill="rgb(222,103,45)" fg:x="205" fg:w="1"/><text x="16.5587%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="16.3087%" y="581" width="0.0796%" height="15" fill="rgb(212,57,4)" fg:x="205" fg:w="1"/><text x="16.5587%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="16.3087%" y="565" width="0.0796%" height="15" fill="rgb(215,68,47)" fg:x="205" fg:w="1"/><text x="16.5587%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="16.3087%" y="549" width="0.0796%" height="15" fill="rgb(230,84,2)" fg:x="205" fg:w="1"/><text x="16.5587%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="16.3087%" y="533" width="0.0796%" height="15" fill="rgb(220,102,14)" fg:x="205" fg:w="1"/><text x="16.5587%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="16.3087%" y="517" width="0.0796%" height="15" fill="rgb(240,10,32)" fg:x="205" fg:w="1"/><text x="16.5587%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.3087%" y="501" width="0.0796%" height="15" fill="rgb(215,47,27)" fg:x="205" fg:w="1"/><text x="16.5587%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.3882%" y="597" width="0.0796%" height="15" fill="rgb(233,188,43)" fg:x="206" fg:w="1"/><text x="16.6382%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.3882%" y="581" width="0.0796%" height="15" fill="rgb(253,190,1)" fg:x="206" fg:w="1"/><text x="16.6382%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.3882%" y="565" width="0.0796%" height="15" fill="rgb(206,114,52)" fg:x="206" fg:w="1"/><text x="16.6382%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (10 samples, 0.80%)</title><rect x="15.7518%" y="661" width="0.7955%" height="15" fill="rgb(233,120,37)" fg:x="198" fg:w="10"/><text x="16.0018%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (7 samples, 0.56%)</title><rect x="15.9905%" y="645" width="0.5569%" height="15" fill="rgb(214,52,39)" fg:x="201" fg:w="7"/><text x="16.2405%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.48%)</title><rect x="16.0700%" y="629" width="0.4773%" height="15" fill="rgb(223,80,29)" fg:x="202" fg:w="6"/><text x="16.3200%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="16.0700%" y="613" width="0.4773%" height="15" fill="rgb(230,101,40)" fg:x="202" fg:w="6"/><text x="16.3200%" y="623.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="16.4678%" y="597" width="0.0796%" height="15" fill="rgb(219,211,8)" fg:x="207" fg:w="1"/><text x="16.7178%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.4678%" y="581" width="0.0796%" height="15" fill="rgb(252,126,28)" fg:x="207" fg:w="1"/><text x="16.7178%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.4678%" y="565" width="0.0796%" height="15" fill="rgb(215,56,38)" fg:x="207" fg:w="1"/><text x="16.7178%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.5473%" y="661" width="0.0796%" height="15" fill="rgb(249,55,44)" fg:x="208" fg:w="1"/><text x="16.7973%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.5473%" y="645" width="0.0796%" height="15" fill="rgb(220,221,32)" fg:x="208" fg:w="1"/><text x="16.7973%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.5473%" y="629" width="0.0796%" height="15" fill="rgb(212,216,41)" fg:x="208" fg:w="1"/><text x="16.7973%" y="639.50"></text></g><g><title>plugins_core::build::Build::save (13 samples, 1.03%)</title><rect x="15.6722%" y="677" width="1.0342%" height="15" fill="rgb(228,213,43)" fg:x="197" fg:w="13"/><text x="15.9222%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="16.6269%" y="661" width="0.0796%" height="15" fill="rgb(211,31,26)" fg:x="209" fg:w="1"/><text x="16.8769%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.6269%" y="645" width="0.0796%" height="15" fill="rgb(229,202,19)" fg:x="209" fg:w="1"/><text x="16.8769%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.6269%" y="629" width="0.0796%" height="15" fill="rgb(229,105,46)" fg:x="209" fg:w="1"/><text x="16.8769%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.6269%" y="613" width="0.0796%" height="15" fill="rgb(235,108,1)" fg:x="209" fg:w="1"/><text x="16.8769%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="16.7064%" y="597" width="0.1591%" height="15" fill="rgb(245,111,35)" fg:x="210" fg:w="2"/><text x="16.9564%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="16.7064%" y="581" width="0.1591%" height="15" fill="rgb(219,185,31)" fg:x="210" fg:w="2"/><text x="16.9564%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="16.7064%" y="565" width="0.1591%" height="15" fill="rgb(214,4,43)" fg:x="210" fg:w="2"/><text x="16.9564%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.7860%" y="549" width="0.0796%" height="15" fill="rgb(235,227,40)" fg:x="211" fg:w="1"/><text x="17.0360%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.7860%" y="533" width="0.0796%" height="15" fill="rgb(230,88,30)" fg:x="211" fg:w="1"/><text x="17.0360%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.7860%" y="517" width="0.0796%" height="15" fill="rgb(216,217,1)" fg:x="211" fg:w="1"/><text x="17.0360%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.7860%" y="501" width="0.0796%" height="15" fill="rgb(248,139,50)" fg:x="211" fg:w="1"/><text x="17.0360%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.7860%" y="485" width="0.0796%" height="15" fill="rgb(233,1,21)" fg:x="211" fg:w="1"/><text x="17.0360%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.7860%" y="469" width="0.0796%" height="15" fill="rgb(215,183,12)" fg:x="211" fg:w="1"/><text x="17.0360%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.7860%" y="453" width="0.0796%" height="15" fill="rgb(229,104,42)" fg:x="211" fg:w="1"/><text x="17.0360%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="16.7860%" y="437" width="0.0796%" height="15" fill="rgb(243,34,48)" fg:x="211" fg:w="1"/><text x="17.0360%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="16.7860%" y="421" width="0.0796%" height="15" fill="rgb(239,11,44)" fg:x="211" fg:w="1"/><text x="17.0360%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="16.7860%" y="405" width="0.0796%" height="15" fill="rgb(231,98,35)" fg:x="211" fg:w="1"/><text x="17.0360%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="16.7860%" y="389" width="0.0796%" height="15" fill="rgb(233,28,25)" fg:x="211" fg:w="1"/><text x="17.0360%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.7860%" y="373" width="0.0796%" height="15" fill="rgb(234,123,11)" fg:x="211" fg:w="1"/><text x="17.0360%" y="383.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="16.7064%" y="645" width="0.2387%" height="15" fill="rgb(220,69,3)" fg:x="210" fg:w="3"/><text x="16.9564%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="16.7064%" y="629" width="0.2387%" height="15" fill="rgb(214,64,36)" fg:x="210" fg:w="3"/><text x="16.9564%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="16.7064%" y="613" width="0.2387%" height="15" fill="rgb(211,138,32)" fg:x="210" fg:w="3"/><text x="16.9564%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.8656%" y="597" width="0.0796%" height="15" fill="rgb(213,118,47)" fg:x="212" fg:w="1"/><text x="17.1156%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.8656%" y="581" width="0.0796%" height="15" fill="rgb(243,124,49)" fg:x="212" fg:w="1"/><text x="17.1156%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="16.8656%" y="565" width="0.0796%" height="15" fill="rgb(221,30,28)" fg:x="212" fg:w="1"/><text x="17.1156%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.8656%" y="549" width="0.0796%" height="15" fill="rgb(246,37,13)" fg:x="212" fg:w="1"/><text x="17.1156%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.8656%" y="533" width="0.0796%" height="15" fill="rgb(249,66,14)" fg:x="212" fg:w="1"/><text x="17.1156%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.8656%" y="517" width="0.0796%" height="15" fill="rgb(213,166,5)" fg:x="212" fg:w="1"/><text x="17.1156%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="16.9451%" y="629" width="0.1591%" height="15" fill="rgb(221,66,24)" fg:x="213" fg:w="2"/><text x="17.1951%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.0247%" y="613" width="0.0796%" height="15" fill="rgb(210,132,17)" fg:x="214" fg:w="1"/><text x="17.2747%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="17.0247%" y="597" width="0.0796%" height="15" fill="rgb(243,202,5)" fg:x="214" fg:w="1"/><text x="17.2747%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.0247%" y="581" width="0.0796%" height="15" fill="rgb(233,70,48)" fg:x="214" fg:w="1"/><text x="17.2747%" y="591.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (6 samples, 0.48%)</title><rect x="16.7064%" y="677" width="0.4773%" height="15" fill="rgb(238,41,26)" fg:x="210" fg:w="6"/><text x="16.9564%" y="687.50"></text></g><g><title>plugins_core::tools::set_occupying (6 samples, 0.48%)</title><rect x="16.7064%" y="661" width="0.4773%" height="15" fill="rgb(241,19,31)" fg:x="210" fg:w="6"/><text x="16.9564%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="16.9451%" y="645" width="0.2387%" height="15" fill="rgb(214,76,10)" fg:x="213" fg:w="3"/><text x="17.1951%" y="655.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="17.1042%" y="629" width="0.0796%" height="15" fill="rgb(254,202,22)" fg:x="215" fg:w="1"/><text x="17.3542%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.1042%" y="613" width="0.0796%" height="15" fill="rgb(214,72,24)" fg:x="215" fg:w="1"/><text x="17.3542%" y="623.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="17.1042%" y="597" width="0.0796%" height="15" fill="rgb(221,92,46)" fg:x="215" fg:w="1"/><text x="17.3542%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.1042%" y="581" width="0.0796%" height="15" fill="rgb(246,13,50)" fg:x="215" fg:w="1"/><text x="17.3542%" y="591.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (1 samples, 0.08%)</title><rect x="17.1838%" y="677" width="0.0796%" height="15" fill="rgb(240,165,38)" fg:x="216" fg:w="1"/><text x="17.4338%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="17.1838%" y="661" width="0.0796%" height="15" fill="rgb(241,24,51)" fg:x="216" fg:w="1"/><text x="17.4338%" y="671.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="17.1838%" y="645" width="0.0796%" height="15" fill="rgb(227,51,44)" fg:x="216" fg:w="1"/><text x="17.4338%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.1838%" y="629" width="0.0796%" height="15" fill="rgb(231,121,3)" fg:x="216" fg:w="1"/><text x="17.4338%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="17.1838%" y="613" width="0.0796%" height="15" fill="rgb(245,3,41)" fg:x="216" fg:w="1"/><text x="17.4338%" y="623.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Route&gt;::serialize (1 samples, 0.08%)</title><rect x="17.1838%" y="597" width="0.0796%" height="15" fill="rgb(214,13,26)" fg:x="216" fg:w="1"/><text x="17.4338%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_variant (1 samples, 0.08%)</title><rect x="17.1838%" y="581" width="0.0796%" height="15" fill="rgb(252,75,11)" fg:x="216" fg:w="1"/><text x="17.4338%" y="591.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::SimpleRoute&gt;::serialize (1 samples, 0.08%)</title><rect x="17.1838%" y="565" width="0.0796%" height="15" fill="rgb(218,226,17)" fg:x="216" fg:w="1"/><text x="17.4338%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.1838%" y="549" width="0.0796%" height="15" fill="rgb(248,89,38)" fg:x="216" fg:w="1"/><text x="17.4338%" y="559.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="17.1838%" y="533" width="0.0796%" height="15" fill="rgb(237,73,46)" fg:x="216" fg:w="1"/><text x="17.4338%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.1838%" y="517" width="0.0796%" height="15" fill="rgb(242,78,33)" fg:x="216" fg:w="1"/><text x="17.4338%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.1838%" y="501" width="0.0796%" height="15" fill="rgb(235,60,3)" fg:x="216" fg:w="1"/><text x="17.4338%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="17.2633%" y="581" width="0.0796%" height="15" fill="rgb(216,172,19)" fg:x="217" fg:w="1"/><text x="17.5133%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="17.2633%" y="661" width="0.1591%" height="15" fill="rgb(227,6,42)" fg:x="217" fg:w="2"/><text x="17.5133%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="17.2633%" y="645" width="0.1591%" height="15" fill="rgb(223,207,42)" fg:x="217" fg:w="2"/><text x="17.5133%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="17.2633%" y="629" width="0.1591%" height="15" fill="rgb(246,138,30)" fg:x="217" fg:w="2"/><text x="17.5133%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="17.2633%" y="613" width="0.1591%" height="15" fill="rgb(251,199,47)" fg:x="217" fg:w="2"/><text x="17.5133%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="17.2633%" y="597" width="0.1591%" height="15" fill="rgb(228,218,44)" fg:x="217" fg:w="2"/><text x="17.5133%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="17.3429%" y="581" width="0.0796%" height="15" fill="rgb(220,68,6)" fg:x="218" fg:w="1"/><text x="17.5929%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.3429%" y="565" width="0.0796%" height="15" fill="rgb(240,60,26)" fg:x="218" fg:w="1"/><text x="17.5929%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.3429%" y="549" width="0.0796%" height="15" fill="rgb(211,200,19)" fg:x="218" fg:w="1"/><text x="17.5929%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.3429%" y="533" width="0.0796%" height="15" fill="rgb(242,145,30)" fg:x="218" fg:w="1"/><text x="17.5929%" y="543.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="17.2633%" y="677" width="0.2387%" height="15" fill="rgb(225,64,13)" fg:x="217" fg:w="3"/><text x="17.5133%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="17.4224%" y="661" width="0.0796%" height="15" fill="rgb(218,103,35)" fg:x="219" fg:w="1"/><text x="17.6724%" y="671.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="17.4224%" y="645" width="0.0796%" height="15" fill="rgb(216,93,46)" fg:x="219" fg:w="1"/><text x="17.6724%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.4224%" y="629" width="0.0796%" height="15" fill="rgb(225,159,27)" fg:x="219" fg:w="1"/><text x="17.6724%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.4224%" y="613" width="0.0796%" height="15" fill="rgb(225,204,11)" fg:x="219" fg:w="1"/><text x="17.6724%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.4224%" y="597" width="0.0796%" height="15" fill="rgb(205,56,4)" fg:x="219" fg:w="1"/><text x="17.6724%" y="607.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (73 samples, 5.81%)</title><rect x="11.7741%" y="693" width="5.8075%" height="15" fill="rgb(206,6,35)" fg:x="148" fg:w="73"/><text x="12.0241%" y="703.50">plugins..</text></g><g><title>plugins_core::tools::set_wearing (1 samples, 0.08%)</title><rect x="17.5020%" y="677" width="0.0796%" height="15" fill="rgb(247,73,52)" fg:x="220" fg:w="1"/><text x="17.7520%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="17.5020%" y="661" width="0.0796%" height="15" fill="rgb(246,97,4)" fg:x="220" fg:w="1"/><text x="17.7520%" y="671.50"></text></g><g><title>plugins_core::fashion::model::_::&lt;impl serde::ser::Serialize for plugins_core::fashion::model::Wearing&gt;::serialize (1 samples, 0.08%)</title><rect x="17.5020%" y="645" width="0.0796%" height="15" fill="rgb(212,37,15)" fg:x="220" fg:w="1"/><text x="17.7520%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.5020%" y="629" width="0.0796%" height="15" fill="rgb(208,130,40)" fg:x="220" fg:w="1"/><text x="17.7520%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="17.5815%" y="629" width="0.0796%" height="15" fill="rgb(236,55,29)" fg:x="221" fg:w="1"/><text x="17.8315%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.5815%" y="613" width="0.0796%" height="15" fill="rgb(209,156,45)" fg:x="221" fg:w="1"/><text x="17.8315%" y="623.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="17.6611%" y="629" width="0.0796%" height="15" fill="rgb(249,107,4)" fg:x="222" fg:w="1"/><text x="17.9111%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="17.6611%" y="613" width="0.0796%" height="15" fill="rgb(227,7,13)" fg:x="222" fg:w="1"/><text x="17.9111%" y="623.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (1 samples, 0.08%)</title><rect x="17.6611%" y="597" width="0.0796%" height="15" fill="rgb(250,129,14)" fg:x="222" fg:w="1"/><text x="17.9111%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="17.5815%" y="645" width="0.2387%" height="15" fill="rgb(229,92,13)" fg:x="221" fg:w="3"/><text x="17.8315%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="17.7407%" y="629" width="0.0796%" height="15" fill="rgb(245,98,39)" fg:x="223" fg:w="1"/><text x="17.9907%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="17.7407%" y="613" width="0.0796%" height="15" fill="rgb(234,135,48)" fg:x="223" fg:w="1"/><text x="17.9907%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.7407%" y="597" width="0.0796%" height="15" fill="rgb(230,98,28)" fg:x="223" fg:w="1"/><text x="17.9907%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="17.7407%" y="581" width="0.0796%" height="15" fill="rgb(223,121,0)" fg:x="223" fg:w="1"/><text x="17.9907%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.7407%" y="565" width="0.0796%" height="15" fill="rgb(234,173,33)" fg:x="223" fg:w="1"/><text x="17.9907%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.7407%" y="549" width="0.0796%" height="15" fill="rgb(245,47,8)" fg:x="223" fg:w="1"/><text x="17.9907%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.8202%" y="629" width="0.0796%" height="15" fill="rgb(205,17,20)" fg:x="224" fg:w="1"/><text x="18.0702%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.8202%" y="613" width="0.0796%" height="15" fill="rgb(232,151,16)" fg:x="224" fg:w="1"/><text x="18.0702%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.8998%" y="629" width="0.0796%" height="15" fill="rgb(208,30,32)" fg:x="225" fg:w="1"/><text x="18.1498%" y="639.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (6 samples, 0.48%)</title><rect x="17.5815%" y="693" width="0.4773%" height="15" fill="rgb(254,26,3)" fg:x="221" fg:w="6"/><text x="17.8315%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (6 samples, 0.48%)</title><rect x="17.5815%" y="677" width="0.4773%" height="15" fill="rgb(240,177,30)" fg:x="221" fg:w="6"/><text x="17.8315%" y="687.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.48%)</title><rect x="17.5815%" y="661" width="0.4773%" height="15" fill="rgb(248,76,44)" fg:x="221" fg:w="6"/><text x="17.8315%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="17.8202%" y="645" width="0.2387%" height="15" fill="rgb(241,186,54)" fg:x="224" fg:w="3"/><text x="18.0702%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="17.9793%" y="629" width="0.0796%" height="15" fill="rgb(249,171,29)" fg:x="226" fg:w="1"/><text x="18.2293%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="18.0589%" y="613" width="0.0796%" height="15" fill="rgb(237,151,44)" fg:x="227" fg:w="1"/><text x="18.3089%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="18.0589%" y="661" width="0.1591%" height="15" fill="rgb(228,174,30)" fg:x="227" fg:w="2"/><text x="18.3089%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="18.0589%" y="645" width="0.1591%" height="15" fill="rgb(252,14,37)" fg:x="227" fg:w="2"/><text x="18.3089%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="18.0589%" y="629" width="0.1591%" height="15" fill="rgb(207,111,40)" fg:x="227" fg:w="2"/><text x="18.3089%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="18.1384%" y="613" width="0.0796%" height="15" fill="rgb(248,171,54)" fg:x="228" fg:w="1"/><text x="18.3884%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.1384%" y="597" width="0.0796%" height="15" fill="rgb(211,127,2)" fg:x="228" fg:w="1"/><text x="18.3884%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="18.2180%" y="661" width="0.0796%" height="15" fill="rgb(236,87,47)" fg:x="229" fg:w="1"/><text x="18.4680%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (4 samples, 0.32%)</title><rect x="18.0589%" y="677" width="0.3182%" height="15" fill="rgb(223,190,45)" fg:x="227" fg:w="4"/><text x="18.3089%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="18.2975%" y="661" width="0.0796%" height="15" fill="rgb(215,5,16)" fg:x="230" fg:w="1"/><text x="18.5475%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.2975%" y="645" width="0.0796%" height="15" fill="rgb(252,82,33)" fg:x="230" fg:w="1"/><text x="18.5475%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="18.2975%" y="629" width="0.0796%" height="15" fill="rgb(247,213,44)" fg:x="230" fg:w="1"/><text x="18.5475%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="18.2975%" y="613" width="0.0796%" height="15" fill="rgb(205,196,44)" fg:x="230" fg:w="1"/><text x="18.5475%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="18.2975%" y="597" width="0.0796%" height="15" fill="rgb(237,96,54)" fg:x="230" fg:w="1"/><text x="18.5475%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.2975%" y="581" width="0.0796%" height="15" fill="rgb(230,113,34)" fg:x="230" fg:w="1"/><text x="18.5475%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="18.3771%" y="677" width="0.0796%" height="15" fill="rgb(221,224,12)" fg:x="231" fg:w="1"/><text x="18.6271%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="18.3771%" y="661" width="0.0796%" height="15" fill="rgb(219,112,44)" fg:x="231" fg:w="1"/><text x="18.6271%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="18.3771%" y="645" width="0.0796%" height="15" fill="rgb(210,31,13)" fg:x="231" fg:w="1"/><text x="18.6271%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="18.4566%" y="677" width="0.0796%" height="15" fill="rgb(230,25,16)" fg:x="232" fg:w="1"/><text x="18.7066%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.4566%" y="661" width="0.0796%" height="15" fill="rgb(246,108,53)" fg:x="232" fg:w="1"/><text x="18.7066%" y="671.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="18.5362%" y="677" width="0.0796%" height="15" fill="rgb(241,172,50)" fg:x="233" fg:w="1"/><text x="18.7862%" y="687.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="18.5362%" y="661" width="0.0796%" height="15" fill="rgb(235,141,10)" fg:x="233" fg:w="1"/><text x="18.7862%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.6158%" y="597" width="0.0796%" height="15" fill="rgb(220,174,43)" fg:x="234" fg:w="1"/><text x="18.8658%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.6158%" y="581" width="0.0796%" height="15" fill="rgb(215,181,40)" fg:x="234" fg:w="1"/><text x="18.8658%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.6158%" y="565" width="0.0796%" height="15" fill="rgb(230,97,2)" fg:x="234" fg:w="1"/><text x="18.8658%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="18.6158%" y="549" width="0.0796%" height="15" fill="rgb(211,25,27)" fg:x="234" fg:w="1"/><text x="18.8658%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="18.6158%" y="533" width="0.0796%" height="15" fill="rgb(230,87,26)" fg:x="234" fg:w="1"/><text x="18.8658%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="18.6158%" y="517" width="0.0796%" height="15" fill="rgb(227,160,17)" fg:x="234" fg:w="1"/><text x="18.8658%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.6158%" y="501" width="0.0796%" height="15" fill="rgb(244,85,34)" fg:x="234" fg:w="1"/><text x="18.8658%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.6158%" y="485" width="0.0796%" height="15" fill="rgb(207,70,0)" fg:x="234" fg:w="1"/><text x="18.8658%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="18.6158%" y="469" width="0.0796%" height="15" fill="rgb(223,129,7)" fg:x="234" fg:w="1"/><text x="18.8658%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="18.6158%" y="453" width="0.0796%" height="15" fill="rgb(246,105,7)" fg:x="234" fg:w="1"/><text x="18.8658%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="18.6158%" y="437" width="0.0796%" height="15" fill="rgb(215,154,42)" fg:x="234" fg:w="1"/><text x="18.8658%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="18.6158%" y="421" width="0.0796%" height="15" fill="rgb(220,215,30)" fg:x="234" fg:w="1"/><text x="18.8658%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.6158%" y="405" width="0.0796%" height="15" fill="rgb(228,81,51)" fg:x="234" fg:w="1"/><text x="18.8658%" y="415.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="18.6158%" y="613" width="0.1591%" height="15" fill="rgb(247,71,54)" fg:x="234" fg:w="2"/><text x="18.8658%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.6953%" y="597" width="0.0796%" height="15" fill="rgb(234,176,34)" fg:x="235" fg:w="1"/><text x="18.9453%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.6953%" y="581" width="0.0796%" height="15" fill="rgb(241,103,54)" fg:x="235" fg:w="1"/><text x="18.9453%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="18.6953%" y="565" width="0.0796%" height="15" fill="rgb(228,22,34)" fg:x="235" fg:w="1"/><text x="18.9453%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.6953%" y="549" width="0.0796%" height="15" fill="rgb(241,179,48)" fg:x="235" fg:w="1"/><text x="18.9453%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.6953%" y="533" width="0.0796%" height="15" fill="rgb(235,167,37)" fg:x="235" fg:w="1"/><text x="18.9453%" y="543.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="18.7749%" y="613" width="0.0796%" height="15" fill="rgb(213,109,30)" fg:x="236" fg:w="1"/><text x="19.0249%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (4 samples, 0.32%)</title><rect x="18.6158%" y="629" width="0.3182%" height="15" fill="rgb(222,172,16)" fg:x="234" fg:w="4"/><text x="18.8658%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="18.8544%" y="613" width="0.0796%" height="15" fill="rgb(233,192,5)" fg:x="237" fg:w="1"/><text x="19.1044%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="18.6158%" y="661" width="0.3978%" height="15" fill="rgb(247,189,41)" fg:x="234" fg:w="5"/><text x="18.8658%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.40%)</title><rect x="18.6158%" y="645" width="0.3978%" height="15" fill="rgb(218,134,47)" fg:x="234" fg:w="5"/><text x="18.8658%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="18.9340%" y="629" width="0.0796%" height="15" fill="rgb(216,29,3)" fg:x="238" fg:w="1"/><text x="19.1840%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.9340%" y="613" width="0.0796%" height="15" fill="rgb(246,140,12)" fg:x="238" fg:w="1"/><text x="19.1840%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.9340%" y="597" width="0.0796%" height="15" fill="rgb(230,136,11)" fg:x="238" fg:w="1"/><text x="19.1840%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.0931%" y="645" width="0.0796%" height="15" fill="rgb(247,22,47)" fg:x="240" fg:w="1"/><text x="19.3431%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.0931%" y="629" width="0.0796%" height="15" fill="rgb(218,84,22)" fg:x="240" fg:w="1"/><text x="19.3431%" y="639.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (151 samples, 12.01%)</title><rect x="7.2395%" y="709" width="12.0127%" height="15" fill="rgb(216,87,39)" fg:x="91" fg:w="151"/><text x="7.4895%" y="719.50">&lt;tests::HoldingKey..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (15 samples, 1.19%)</title><rect x="18.0589%" y="693" width="1.1933%" height="15" fill="rgb(221,178,8)" fg:x="227" fg:w="15"/><text x="18.3089%" y="703.50"></text></g><g><title>plugins_core::build::Build::save (8 samples, 0.64%)</title><rect x="18.6158%" y="677" width="0.6364%" height="15" fill="rgb(230,42,11)" fg:x="234" fg:w="8"/><text x="18.8658%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="19.0135%" y="661" width="0.2387%" height="15" fill="rgb(237,229,4)" fg:x="239" fg:w="3"/><text x="19.2635%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.1726%" y="645" width="0.0796%" height="15" fill="rgb(222,31,33)" fg:x="241" fg:w="1"/><text x="19.4226%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.1726%" y="629" width="0.0796%" height="15" fill="rgb(210,17,39)" fg:x="241" fg:w="1"/><text x="19.4226%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="19.1726%" y="613" width="0.0796%" height="15" fill="rgb(244,93,20)" fg:x="241" fg:w="1"/><text x="19.4226%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="19.1726%" y="597" width="0.0796%" height="15" fill="rgb(210,40,47)" fg:x="241" fg:w="1"/><text x="19.4226%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="19.1726%" y="581" width="0.0796%" height="15" fill="rgb(239,211,47)" fg:x="241" fg:w="1"/><text x="19.4226%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.1726%" y="565" width="0.0796%" height="15" fill="rgb(251,223,49)" fg:x="241" fg:w="1"/><text x="19.4226%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.1726%" y="549" width="0.0796%" height="15" fill="rgb(221,149,5)" fg:x="241" fg:w="1"/><text x="19.4226%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="19.1726%" y="533" width="0.0796%" height="15" fill="rgb(219,224,51)" fg:x="241" fg:w="1"/><text x="19.4226%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="19.1726%" y="517" width="0.0796%" height="15" fill="rgb(223,7,8)" fg:x="241" fg:w="1"/><text x="19.4226%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="19.1726%" y="501" width="0.0796%" height="15" fill="rgb(241,217,22)" fg:x="241" fg:w="1"/><text x="19.4226%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="19.1726%" y="485" width="0.0796%" height="15" fill="rgb(248,209,0)" fg:x="241" fg:w="1"/><text x="19.4226%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.1726%" y="469" width="0.0796%" height="15" fill="rgb(217,205,4)" fg:x="241" fg:w="1"/><text x="19.4226%" y="479.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="19.3317%" y="693" width="0.0796%" height="15" fill="rgb(228,124,39)" fg:x="243" fg:w="1"/><text x="19.5817%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.3317%" y="677" width="0.0796%" height="15" fill="rgb(250,116,42)" fg:x="243" fg:w="1"/><text x="19.5817%" y="687.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="19.4113%" y="661" width="0.0796%" height="15" fill="rgb(223,202,9)" fg:x="244" fg:w="1"/><text x="19.6613%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="19.4113%" y="645" width="0.0796%" height="15" fill="rgb(242,222,40)" fg:x="244" fg:w="1"/><text x="19.6613%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="19.4113%" y="629" width="0.0796%" height="15" fill="rgb(229,99,46)" fg:x="244" fg:w="1"/><text x="19.6613%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.4113%" y="613" width="0.0796%" height="15" fill="rgb(225,56,46)" fg:x="244" fg:w="1"/><text x="19.6613%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.4113%" y="597" width="0.0796%" height="15" fill="rgb(227,94,5)" fg:x="244" fg:w="1"/><text x="19.6613%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="19.4113%" y="581" width="0.0796%" height="15" fill="rgb(205,112,38)" fg:x="244" fg:w="1"/><text x="19.6613%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="19.4113%" y="565" width="0.0796%" height="15" fill="rgb(231,133,46)" fg:x="244" fg:w="1"/><text x="19.6613%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="19.4113%" y="549" width="0.0796%" height="15" fill="rgb(217,16,9)" fg:x="244" fg:w="1"/><text x="19.6613%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.4113%" y="533" width="0.0796%" height="15" fill="rgb(249,173,9)" fg:x="244" fg:w="1"/><text x="19.6613%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.4113%" y="517" width="0.0796%" height="15" fill="rgb(205,163,53)" fg:x="244" fg:w="1"/><text x="19.6613%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="19.4113%" y="501" width="0.0796%" height="15" fill="rgb(217,54,41)" fg:x="244" fg:w="1"/><text x="19.6613%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="19.4113%" y="485" width="0.0796%" height="15" fill="rgb(228,216,12)" fg:x="244" fg:w="1"/><text x="19.6613%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="19.4113%" y="469" width="0.0796%" height="15" fill="rgb(244,228,15)" fg:x="244" fg:w="1"/><text x="19.6613%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="19.4113%" y="453" width="0.0796%" height="15" fill="rgb(221,176,53)" fg:x="244" fg:w="1"/><text x="19.6613%" y="463.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="19.4909%" y="613" width="0.0796%" height="15" fill="rgb(205,94,34)" fg:x="245" fg:w="1"/><text x="19.7409%" y="623.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="19.4909%" y="597" width="0.0796%" height="15" fill="rgb(213,110,48)" fg:x="245" fg:w="1"/><text x="19.7409%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="19.5704%" y="597" width="0.0796%" height="15" fill="rgb(236,142,28)" fg:x="246" fg:w="1"/><text x="19.8204%" y="607.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="19.6500%" y="597" width="0.1591%" height="15" fill="rgb(225,135,29)" fg:x="247" fg:w="2"/><text x="19.9000%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="19.6500%" y="581" width="0.1591%" height="15" fill="rgb(252,45,31)" fg:x="247" fg:w="2"/><text x="19.9000%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="19.8091%" y="581" width="0.1591%" height="15" fill="rgb(211,187,50)" fg:x="249" fg:w="2"/><text x="20.0591%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="19.8091%" y="565" width="0.1591%" height="15" fill="rgb(229,109,7)" fg:x="249" fg:w="2"/><text x="20.0591%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="19.8091%" y="549" width="0.1591%" height="15" fill="rgb(251,131,51)" fg:x="249" fg:w="2"/><text x="20.0591%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="19.8886%" y="533" width="0.0796%" height="15" fill="rgb(251,180,35)" fg:x="250" fg:w="1"/><text x="20.1386%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="19.8886%" y="517" width="0.0796%" height="15" fill="rgb(211,46,32)" fg:x="250" fg:w="1"/><text x="20.1386%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="19.8886%" y="501" width="0.0796%" height="15" fill="rgb(248,123,17)" fg:x="250" fg:w="1"/><text x="20.1386%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="19.8886%" y="485" width="0.0796%" height="15" fill="rgb(227,141,18)" fg:x="250" fg:w="1"/><text x="20.1386%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="19.9682%" y="533" width="0.0796%" height="15" fill="rgb(216,102,9)" fg:x="251" fg:w="1"/><text x="20.2182%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="19.9682%" y="517" width="0.0796%" height="15" fill="rgb(253,47,13)" fg:x="251" fg:w="1"/><text x="20.2182%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="19.9682%" y="501" width="0.0796%" height="15" fill="rgb(226,93,23)" fg:x="251" fg:w="1"/><text x="20.2182%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="19.9682%" y="485" width="0.0796%" height="15" fill="rgb(247,104,17)" fg:x="251" fg:w="1"/><text x="20.2182%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="19.9682%" y="469" width="0.0796%" height="15" fill="rgb(233,203,26)" fg:x="251" fg:w="1"/><text x="20.2182%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="19.9682%" y="453" width="0.0796%" height="15" fill="rgb(244,98,49)" fg:x="251" fg:w="1"/><text x="20.2182%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="19.9682%" y="437" width="0.0796%" height="15" fill="rgb(235,134,22)" fg:x="251" fg:w="1"/><text x="20.2182%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="19.9682%" y="549" width="0.1591%" height="15" fill="rgb(221,70,32)" fg:x="251" fg:w="2"/><text x="20.2182%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="20.0477%" y="533" width="0.0796%" height="15" fill="rgb(238,15,50)" fg:x="252" fg:w="1"/><text x="20.2977%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="20.0477%" y="517" width="0.0796%" height="15" fill="rgb(215,221,48)" fg:x="252" fg:w="1"/><text x="20.2977%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="19.9682%" y="565" width="0.2387%" height="15" fill="rgb(236,73,3)" fg:x="251" fg:w="3"/><text x="20.2182%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="20.1273%" y="549" width="0.0796%" height="15" fill="rgb(250,107,11)" fg:x="253" fg:w="1"/><text x="20.3773%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="20.1273%" y="533" width="0.0796%" height="15" fill="rgb(242,39,14)" fg:x="253" fg:w="1"/><text x="20.3773%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="20.2068%" y="565" width="0.1591%" height="15" fill="rgb(248,164,37)" fg:x="254" fg:w="2"/><text x="20.4568%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="20.2864%" y="549" width="0.0796%" height="15" fill="rgb(217,60,12)" fg:x="255" fg:w="1"/><text x="20.5364%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="20.3660%" y="549" width="0.0796%" height="15" fill="rgb(240,125,29)" fg:x="256" fg:w="1"/><text x="20.6160%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="20.4455%" y="549" width="0.1591%" height="15" fill="rgb(208,207,28)" fg:x="257" fg:w="2"/><text x="20.6955%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="20.4455%" y="533" width="0.1591%" height="15" fill="rgb(209,159,27)" fg:x="257" fg:w="2"/><text x="20.6955%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="20.4455%" y="517" width="0.1591%" height="15" fill="rgb(251,176,53)" fg:x="257" fg:w="2"/><text x="20.6955%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="20.4455%" y="501" width="0.1591%" height="15" fill="rgb(211,85,7)" fg:x="257" fg:w="2"/><text x="20.6955%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="20.4455%" y="485" width="0.1591%" height="15" fill="rgb(216,64,54)" fg:x="257" fg:w="2"/><text x="20.6955%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="20.4455%" y="469" width="0.1591%" height="15" fill="rgb(217,54,24)" fg:x="257" fg:w="2"/><text x="20.6955%" y="479.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="20.4455%" y="453" width="0.1591%" height="15" fill="rgb(208,206,53)" fg:x="257" fg:w="2"/><text x="20.6955%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="20.6046%" y="549" width="0.1591%" height="15" fill="rgb(251,74,39)" fg:x="259" fg:w="2"/><text x="20.8546%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="20.6842%" y="533" width="0.0796%" height="15" fill="rgb(226,47,5)" fg:x="260" fg:w="1"/><text x="20.9342%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (16 samples, 1.27%)</title><rect x="19.5704%" y="613" width="1.2729%" height="15" fill="rgb(234,111,33)" fg:x="246" fg:w="16"/><text x="19.8204%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (13 samples, 1.03%)</title><rect x="19.8091%" y="597" width="1.0342%" height="15" fill="rgb(251,14,10)" fg:x="249" fg:w="13"/><text x="20.0591%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.88%)</title><rect x="19.9682%" y="581" width="0.8751%" height="15" fill="rgb(232,43,0)" fg:x="251" fg:w="11"/><text x="20.2182%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="20.3660%" y="565" width="0.4773%" height="15" fill="rgb(222,68,43)" fg:x="256" fg:w="6"/><text x="20.6160%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="20.7637%" y="549" width="0.0796%" height="15" fill="rgb(217,24,23)" fg:x="261" fg:w="1"/><text x="21.0137%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="20.7637%" y="533" width="0.0796%" height="15" fill="rgb(229,209,14)" fg:x="261" fg:w="1"/><text x="21.0137%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.8433%" y="549" width="0.0796%" height="15" fill="rgb(250,149,48)" fg:x="262" fg:w="1"/><text x="21.0933%" y="559.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="20.9228%" y="533" width="0.1591%" height="15" fill="rgb(210,120,37)" fg:x="263" fg:w="2"/><text x="21.1728%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="20.8433%" y="613" width="0.3978%" height="15" fill="rgb(210,21,8)" fg:x="262" fg:w="5"/><text x="21.0933%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="20.8433%" y="597" width="0.3978%" height="15" fill="rgb(243,145,7)" fg:x="262" fg:w="5"/><text x="21.0933%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="20.8433%" y="581" width="0.3978%" height="15" fill="rgb(238,178,32)" fg:x="262" fg:w="5"/><text x="21.0933%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="20.8433%" y="565" width="0.3978%" height="15" fill="rgb(222,4,10)" fg:x="262" fg:w="5"/><text x="21.0933%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="20.9228%" y="549" width="0.3182%" height="15" fill="rgb(239,7,37)" fg:x="263" fg:w="4"/><text x="21.1728%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="21.0819%" y="533" width="0.1591%" height="15" fill="rgb(215,31,37)" fg:x="265" fg:w="2"/><text x="21.3319%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="21.0819%" y="517" width="0.1591%" height="15" fill="rgb(224,83,33)" fg:x="265" fg:w="2"/><text x="21.3319%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="21.1615%" y="501" width="0.0796%" height="15" fill="rgb(239,55,3)" fg:x="266" fg:w="1"/><text x="21.4115%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.3206%" y="581" width="0.0796%" height="15" fill="rgb(247,92,11)" fg:x="268" fg:w="1"/><text x="21.5706%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.4797%" y="549" width="0.0796%" height="15" fill="rgb(239,200,7)" fg:x="270" fg:w="1"/><text x="21.7297%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.5593%" y="533" width="0.0796%" height="15" fill="rgb(227,115,8)" fg:x="271" fg:w="1"/><text x="21.8093%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.6388%" y="517" width="0.0796%" height="15" fill="rgb(215,189,27)" fg:x="272" fg:w="1"/><text x="21.8888%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.6388%" y="501" width="0.0796%" height="15" fill="rgb(251,216,39)" fg:x="272" fg:w="1"/><text x="21.8888%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="21.7184%" y="501" width="0.0796%" height="15" fill="rgb(207,29,47)" fg:x="273" fg:w="1"/><text x="21.9684%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="21.7184%" y="485" width="0.0796%" height="15" fill="rgb(210,71,34)" fg:x="273" fg:w="1"/><text x="21.9684%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.7184%" y="469" width="0.0796%" height="15" fill="rgb(253,217,51)" fg:x="273" fg:w="1"/><text x="21.9684%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="21.4002%" y="581" width="0.4773%" height="15" fill="rgb(222,117,46)" fg:x="269" fg:w="6"/><text x="21.6502%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.48%)</title><rect x="21.4002%" y="565" width="0.4773%" height="15" fill="rgb(226,132,6)" fg:x="269" fg:w="6"/><text x="21.6502%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="21.5593%" y="549" width="0.3182%" height="15" fill="rgb(254,145,51)" fg:x="271" fg:w="4"/><text x="21.8093%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="21.6388%" y="533" width="0.2387%" height="15" fill="rgb(231,199,27)" fg:x="272" fg:w="3"/><text x="21.8888%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="21.7184%" y="517" width="0.1591%" height="15" fill="rgb(245,158,14)" fg:x="273" fg:w="2"/><text x="21.9684%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="21.7979%" y="501" width="0.0796%" height="15" fill="rgb(240,113,14)" fg:x="274" fg:w="1"/><text x="22.0479%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="21.8775%" y="549" width="0.2387%" height="15" fill="rgb(210,20,13)" fg:x="275" fg:w="3"/><text x="22.1275%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="21.8775%" y="533" width="0.2387%" height="15" fill="rgb(241,144,13)" fg:x="275" fg:w="3"/><text x="22.1275%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="21.8775%" y="517" width="0.2387%" height="15" fill="rgb(235,43,34)" fg:x="275" fg:w="3"/><text x="22.1275%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="21.8775%" y="501" width="0.2387%" height="15" fill="rgb(208,36,20)" fg:x="275" fg:w="3"/><text x="22.1275%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="22.0366%" y="485" width="0.0796%" height="15" fill="rgb(239,204,10)" fg:x="277" fg:w="1"/><text x="22.2866%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.32%)</title><rect x="21.8775%" y="565" width="0.3182%" height="15" fill="rgb(217,84,43)" fg:x="275" fg:w="4"/><text x="22.1275%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="22.1161%" y="549" width="0.0796%" height="15" fill="rgb(241,170,50)" fg:x="278" fg:w="1"/><text x="22.3661%" y="559.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (13 samples, 1.03%)</title><rect x="21.2411%" y="597" width="1.0342%" height="15" fill="rgb(226,205,29)" fg:x="267" fg:w="13"/><text x="21.4911%" y="607.50"></text></g><g><title>treediff::diff::diff (5 samples, 0.40%)</title><rect x="21.8775%" y="581" width="0.3978%" height="15" fill="rgb(233,113,1)" fg:x="275" fg:w="5"/><text x="22.1275%" y="591.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="22.1957%" y="565" width="0.0796%" height="15" fill="rgb(253,98,13)" fg:x="279" fg:w="1"/><text x="22.4457%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (2 samples, 0.16%)</title><rect x="22.3548%" y="565" width="0.1591%" height="15" fill="rgb(211,115,12)" fg:x="281" fg:w="2"/><text x="22.6048%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="22.3548%" y="549" width="0.1591%" height="15" fill="rgb(208,12,16)" fg:x="281" fg:w="2"/><text x="22.6048%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.4344%" y="533" width="0.0796%" height="15" fill="rgb(237,193,54)" fg:x="282" fg:w="1"/><text x="22.6844%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="22.6730%" y="517" width="0.1591%" height="15" fill="rgb(243,22,42)" fg:x="285" fg:w="2"/><text x="22.9230%" y="527.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="22.6730%" y="501" width="0.1591%" height="15" fill="rgb(233,151,36)" fg:x="285" fg:w="2"/><text x="22.9230%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="22.8321%" y="469" width="0.1591%" height="15" fill="rgb(237,57,45)" fg:x="287" fg:w="2"/><text x="23.0821%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="22.8321%" y="485" width="0.2387%" height="15" fill="rgb(221,88,17)" fg:x="287" fg:w="3"/><text x="23.0821%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="22.9912%" y="469" width="0.0796%" height="15" fill="rgb(230,79,15)" fg:x="289" fg:w="1"/><text x="23.2412%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="22.9912%" y="453" width="0.0796%" height="15" fill="rgb(213,57,13)" fg:x="289" fg:w="1"/><text x="23.2412%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="22.9912%" y="437" width="0.0796%" height="15" fill="rgb(222,116,39)" fg:x="289" fg:w="1"/><text x="23.2412%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.9912%" y="421" width="0.0796%" height="15" fill="rgb(245,107,2)" fg:x="289" fg:w="1"/><text x="23.2412%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (5 samples, 0.40%)</title><rect x="22.8321%" y="517" width="0.3978%" height="15" fill="rgb(238,1,10)" fg:x="287" fg:w="5"/><text x="23.0821%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="22.8321%" y="501" width="0.3978%" height="15" fill="rgb(249,4,48)" fg:x="287" fg:w="5"/><text x="23.0821%" y="511.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="23.0708%" y="485" width="0.1591%" height="15" fill="rgb(223,151,18)" fg:x="290" fg:w="2"/><text x="23.3208%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="23.2299%" y="501" width="0.0796%" height="15" fill="rgb(227,65,43)" fg:x="292" fg:w="1"/><text x="23.4799%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="23.3095%" y="469" width="0.0796%" height="15" fill="rgb(218,40,45)" fg:x="293" fg:w="1"/><text x="23.5595%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="23.3095%" y="501" width="0.1591%" height="15" fill="rgb(252,121,31)" fg:x="293" fg:w="2"/><text x="23.5595%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="23.3095%" y="485" width="0.1591%" height="15" fill="rgb(219,158,43)" fg:x="293" fg:w="2"/><text x="23.5595%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.3890%" y="469" width="0.0796%" height="15" fill="rgb(231,162,42)" fg:x="294" fg:w="1"/><text x="23.6390%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (13 samples, 1.03%)</title><rect x="22.5139%" y="549" width="1.0342%" height="15" fill="rgb(217,179,25)" fg:x="283" fg:w="13"/><text x="22.7639%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (12 samples, 0.95%)</title><rect x="22.5935%" y="533" width="0.9547%" height="15" fill="rgb(206,212,31)" fg:x="284" fg:w="12"/><text x="22.8435%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="23.2299%" y="517" width="0.3182%" height="15" fill="rgb(235,144,12)" fg:x="292" fg:w="4"/><text x="23.4799%" y="527.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="23.4686%" y="501" width="0.0796%" height="15" fill="rgb(213,51,10)" fg:x="295" fg:w="1"/><text x="23.7186%" y="511.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="23.4686%" y="485" width="0.0796%" height="15" fill="rgb(231,145,14)" fg:x="295" fg:w="1"/><text x="23.7186%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.5481%" y="549" width="0.0796%" height="15" fill="rgb(235,15,28)" fg:x="296" fg:w="1"/><text x="23.7981%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (18 samples, 1.43%)</title><rect x="22.2753%" y="597" width="1.4320%" height="15" fill="rgb(237,206,10)" fg:x="280" fg:w="18"/><text x="22.5253%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (18 samples, 1.43%)</title><rect x="22.2753%" y="581" width="1.4320%" height="15" fill="rgb(236,227,27)" fg:x="280" fg:w="18"/><text x="22.5253%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (15 samples, 1.19%)</title><rect x="22.5139%" y="565" width="1.1933%" height="15" fill="rgb(246,83,35)" fg:x="283" fg:w="15"/><text x="22.7639%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.6277%" y="549" width="0.0796%" height="15" fill="rgb(220,136,24)" fg:x="297" fg:w="1"/><text x="23.8777%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="23.6277%" y="533" width="0.0796%" height="15" fill="rgb(217,3,25)" fg:x="297" fg:w="1"/><text x="23.8777%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="23.7072%" y="581" width="0.0796%" height="15" fill="rgb(239,24,14)" fg:x="298" fg:w="1"/><text x="23.9572%" y="591.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="23.7868%" y="485" width="0.0796%" height="15" fill="rgb(244,16,53)" fg:x="299" fg:w="1"/><text x="24.0368%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="23.8663%" y="421" width="0.0796%" height="15" fill="rgb(208,175,44)" fg:x="300" fg:w="1"/><text x="24.1163%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="23.8663%" y="405" width="0.0796%" height="15" fill="rgb(252,18,48)" fg:x="300" fg:w="1"/><text x="24.1163%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="23.8663%" y="389" width="0.0796%" height="15" fill="rgb(234,199,32)" fg:x="300" fg:w="1"/><text x="24.1163%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="23.8663%" y="373" width="0.0796%" height="15" fill="rgb(225,77,54)" fg:x="300" fg:w="1"/><text x="24.1163%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="23.8663%" y="357" width="0.0796%" height="15" fill="rgb(225,42,25)" fg:x="300" fg:w="1"/><text x="24.1163%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.8663%" y="341" width="0.0796%" height="15" fill="rgb(242,227,46)" fg:x="300" fg:w="1"/><text x="24.1163%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="23.8663%" y="453" width="0.1591%" height="15" fill="rgb(246,197,35)" fg:x="300" fg:w="2"/><text x="24.1163%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="23.8663%" y="437" width="0.1591%" height="15" fill="rgb(215,159,26)" fg:x="300" fg:w="2"/><text x="24.1163%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="23.9459%" y="421" width="0.0796%" height="15" fill="rgb(212,194,50)" fg:x="301" fg:w="1"/><text x="24.1959%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.9459%" y="405" width="0.0796%" height="15" fill="rgb(246,132,1)" fg:x="301" fg:w="1"/><text x="24.1959%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="24.0255%" y="437" width="0.0796%" height="15" fill="rgb(217,71,7)" fg:x="302" fg:w="1"/><text x="24.2755%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="24.0255%" y="421" width="0.0796%" height="15" fill="rgb(252,59,32)" fg:x="302" fg:w="1"/><text x="24.2755%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.0255%" y="405" width="0.0796%" height="15" fill="rgb(253,204,25)" fg:x="302" fg:w="1"/><text x="24.2755%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.0255%" y="389" width="0.0796%" height="15" fill="rgb(232,21,16)" fg:x="302" fg:w="1"/><text x="24.2755%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.0255%" y="373" width="0.0796%" height="15" fill="rgb(248,90,29)" fg:x="302" fg:w="1"/><text x="24.2755%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="23.8663%" y="469" width="0.3182%" height="15" fill="rgb(249,223,7)" fg:x="300" fg:w="4"/><text x="24.1163%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="24.0255%" y="453" width="0.1591%" height="15" fill="rgb(231,119,42)" fg:x="302" fg:w="2"/><text x="24.2755%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="24.1050%" y="437" width="0.0796%" height="15" fill="rgb(215,41,35)" fg:x="303" fg:w="1"/><text x="24.3550%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="23.7868%" y="501" width="0.5569%" height="15" fill="rgb(220,44,45)" fg:x="299" fg:w="7"/><text x="24.0368%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="23.8663%" y="485" width="0.4773%" height="15" fill="rgb(253,197,36)" fg:x="300" fg:w="6"/><text x="24.1163%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="24.1846%" y="469" width="0.1591%" height="15" fill="rgb(245,225,54)" fg:x="304" fg:w="2"/><text x="24.4346%" y="479.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="24.1846%" y="453" width="0.1591%" height="15" fill="rgb(239,94,37)" fg:x="304" fg:w="2"/><text x="24.4346%" y="463.50"></text></g><g><title>engine::session::Session::close (68 samples, 5.41%)</title><rect x="19.2522%" y="709" width="5.4097%" height="15" fill="rgb(242,217,10)" fg:x="242" fg:w="68"/><text x="19.5022%" y="719.50">engine:..</text></g><g><title>engine::session::state::State::close (66 samples, 5.25%)</title><rect x="19.4113%" y="693" width="5.2506%" height="15" fill="rgb(250,193,7)" fg:x="244" fg:w="66"/><text x="19.6613%" y="703.50">engine..</text></g><g><title>engine::session::state::State::flush_entities (66 samples, 5.25%)</title><rect x="19.4113%" y="677" width="5.2506%" height="15" fill="rgb(230,104,19)" fg:x="244" fg:w="66"/><text x="19.6613%" y="687.50">engine..</text></g><g><title>core::iter::adapters::try_process (65 samples, 5.17%)</title><rect x="19.4909%" y="661" width="5.1710%" height="15" fill="rgb(230,181,4)" fg:x="245" fg:w="65"/><text x="19.7409%" y="671.50">core::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (65 samples, 5.17%)</title><rect x="19.4909%" y="645" width="5.1710%" height="15" fill="rgb(216,219,49)" fg:x="245" fg:w="65"/><text x="19.7409%" y="655.50">&lt;alloc..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (65 samples, 5.17%)</title><rect x="19.4909%" y="629" width="5.1710%" height="15" fill="rgb(254,144,0)" fg:x="245" fg:w="65"/><text x="19.7409%" y="639.50">engine..</text></g><g><title>kernel::model::any_entity_changes (43 samples, 3.42%)</title><rect x="21.2411%" y="613" width="3.4208%" height="15" fill="rgb(205,209,38)" fg:x="267" fg:w="43"/><text x="21.4911%" y="623.50">ker..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (12 samples, 0.95%)</title><rect x="23.7072%" y="597" width="0.9547%" height="15" fill="rgb(240,21,42)" fg:x="298" fg:w="12"/><text x="23.9572%" y="607.50"></text></g><g><title>serde_json::de::from_trait (11 samples, 0.88%)</title><rect x="23.7868%" y="581" width="0.8751%" height="15" fill="rgb(241,132,3)" fg:x="299" fg:w="11"/><text x="24.0368%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.88%)</title><rect x="23.7868%" y="565" width="0.8751%" height="15" fill="rgb(225,14,2)" fg:x="299" fg:w="11"/><text x="24.0368%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (11 samples, 0.88%)</title><rect x="23.7868%" y="549" width="0.8751%" height="15" fill="rgb(210,141,35)" fg:x="299" fg:w="11"/><text x="24.0368%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.88%)</title><rect x="23.7868%" y="533" width="0.8751%" height="15" fill="rgb(251,14,44)" fg:x="299" fg:w="11"/><text x="24.0368%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (11 samples, 0.88%)</title><rect x="23.7868%" y="517" width="0.8751%" height="15" fill="rgb(247,48,18)" fg:x="299" fg:w="11"/><text x="24.0368%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (4 samples, 0.32%)</title><rect x="24.3437%" y="501" width="0.3182%" height="15" fill="rgb(225,0,40)" fg:x="306" fg:w="4"/><text x="24.5937%" y="511.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="24.3437%" y="485" width="0.3182%" height="15" fill="rgb(221,31,33)" fg:x="306" fg:w="4"/><text x="24.5937%" y="495.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="24.6619%" y="661" width="0.1591%" height="15" fill="rgb(237,42,40)" fg:x="310" fg:w="2"/><text x="24.9119%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="24.7414%" y="645" width="0.0796%" height="15" fill="rgb(233,51,29)" fg:x="311" fg:w="1"/><text x="24.9914%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="24.7414%" y="629" width="0.0796%" height="15" fill="rgb(226,58,20)" fg:x="311" fg:w="1"/><text x="24.9914%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="24.7414%" y="613" width="0.0796%" height="15" fill="rgb(208,98,7)" fg:x="311" fg:w="1"/><text x="24.9914%" y="623.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (3 samples, 0.24%)</title><rect x="24.6619%" y="677" width="0.2387%" height="15" fill="rgb(228,143,44)" fg:x="310" fg:w="3"/><text x="24.9119%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="24.8210%" y="661" width="0.0796%" height="15" fill="rgb(246,55,38)" fg:x="312" fg:w="1"/><text x="25.0710%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.8210%" y="645" width="0.0796%" height="15" fill="rgb(247,87,16)" fg:x="312" fg:w="1"/><text x="25.0710%" y="655.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="24.9006%" y="677" width="0.0796%" height="15" fill="rgb(234,129,42)" fg:x="313" fg:w="1"/><text x="25.1506%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="24.9006%" y="661" width="0.0796%" height="15" fill="rgb(220,82,16)" fg:x="313" fg:w="1"/><text x="25.1506%" y="671.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="24.9006%" y="645" width="0.0796%" height="15" fill="rgb(211,88,4)" fg:x="313" fg:w="1"/><text x="25.1506%" y="655.50"></text></g><g><title>&lt;plugins_core::looking::parser::LookActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="24.9006%" y="629" width="0.0796%" height="15" fill="rgb(248,151,21)" fg:x="313" fg:w="1"/><text x="25.1506%" y="639.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="24.9006%" y="613" width="0.0796%" height="15" fill="rgb(238,163,6)" fg:x="313" fg:w="1"/><text x="25.1506%" y="623.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="24.9006%" y="597" width="0.0796%" height="15" fill="rgb(209,183,11)" fg:x="313" fg:w="1"/><text x="25.1506%" y="607.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="24.9801%" y="661" width="0.1591%" height="15" fill="rgb(219,37,20)" fg:x="314" fg:w="2"/><text x="25.2301%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="24.9801%" y="645" width="0.1591%" height="15" fill="rgb(210,158,4)" fg:x="314" fg:w="2"/><text x="25.2301%" y="655.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="24.9801%" y="629" width="0.1591%" height="15" fill="rgb(221,167,53)" fg:x="314" fg:w="2"/><text x="25.2301%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="24.9801%" y="613" width="0.1591%" height="15" fill="rgb(237,151,45)" fg:x="314" fg:w="2"/><text x="25.2301%" y="623.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="24.9801%" y="597" width="0.1591%" height="15" fill="rgb(231,39,3)" fg:x="314" fg:w="2"/><text x="25.2301%" y="607.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (2 samples, 0.16%)</title><rect x="24.9801%" y="581" width="0.1591%" height="15" fill="rgb(212,167,28)" fg:x="314" fg:w="2"/><text x="25.2301%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (2 samples, 0.16%)</title><rect x="24.9801%" y="565" width="0.1591%" height="15" fill="rgb(232,178,8)" fg:x="314" fg:w="2"/><text x="25.2301%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (2 samples, 0.16%)</title><rect x="24.9801%" y="549" width="0.1591%" height="15" fill="rgb(225,151,20)" fg:x="314" fg:w="2"/><text x="25.2301%" y="559.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (2 samples, 0.16%)</title><rect x="24.9801%" y="533" width="0.1591%" height="15" fill="rgb(238,3,37)" fg:x="314" fg:w="2"/><text x="25.2301%" y="543.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="25.0597%" y="517" width="0.0796%" height="15" fill="rgb(251,147,42)" fg:x="315" fg:w="1"/><text x="25.3097%" y="527.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="25.0597%" y="501" width="0.0796%" height="15" fill="rgb(208,173,10)" fg:x="315" fg:w="1"/><text x="25.3097%" y="511.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (1 samples, 0.08%)</title><rect x="25.0597%" y="485" width="0.0796%" height="15" fill="rgb(246,225,4)" fg:x="315" fg:w="1"/><text x="25.3097%" y="495.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="25.0597%" y="469" width="0.0796%" height="15" fill="rgb(248,102,6)" fg:x="315" fg:w="1"/><text x="25.3097%" y="479.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (1 samples, 0.08%)</title><rect x="25.0597%" y="453" width="0.0796%" height="15" fill="rgb(232,6,21)" fg:x="315" fg:w="1"/><text x="25.3097%" y="463.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.0597%" y="437" width="0.0796%" height="15" fill="rgb(221,179,22)" fg:x="315" fg:w="1"/><text x="25.3097%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.0597%" y="421" width="0.0796%" height="15" fill="rgb(252,50,20)" fg:x="315" fg:w="1"/><text x="25.3097%" y="431.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="25.0597%" y="405" width="0.0796%" height="15" fill="rgb(222,56,38)" fg:x="315" fg:w="1"/><text x="25.3097%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="25.0597%" y="389" width="0.0796%" height="15" fill="rgb(206,193,29)" fg:x="315" fg:w="1"/><text x="25.3097%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="25.0597%" y="373" width="0.0796%" height="15" fill="rgb(239,192,45)" fg:x="315" fg:w="1"/><text x="25.3097%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="25.0597%" y="357" width="0.0796%" height="15" fill="rgb(254,18,36)" fg:x="315" fg:w="1"/><text x="25.3097%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="25.0597%" y="341" width="0.0796%" height="15" fill="rgb(221,127,11)" fg:x="315" fg:w="1"/><text x="25.3097%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::logs::SessionSubscriber&gt; (1 samples, 0.08%)</title><rect x="25.1392%" y="645" width="0.0796%" height="15" fill="rgb(234,146,35)" fg:x="316" fg:w="1"/><text x="25.3892%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.1392%" y="629" width="0.0796%" height="15" fill="rgb(254,201,37)" fg:x="316" fg:w="1"/><text x="25.3892%" y="639.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (3 samples, 0.24%)</title><rect x="25.2188%" y="645" width="0.2387%" height="15" fill="rgb(211,202,23)" fg:x="317" fg:w="3"/><text x="25.4688%" y="655.50"></text></g><g><title>tracing_core::callsite::register_dispatch (3 samples, 0.24%)</title><rect x="25.2188%" y="629" width="0.2387%" height="15" fill="rgb(237,91,2)" fg:x="317" fg:w="3"/><text x="25.4688%" y="639.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (2 samples, 0.16%)</title><rect x="25.2983%" y="613" width="0.1591%" height="15" fill="rgb(226,228,36)" fg:x="318" fg:w="2"/><text x="25.5483%" y="623.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (2 samples, 0.16%)</title><rect x="25.2983%" y="597" width="0.1591%" height="15" fill="rgb(213,63,50)" fg:x="318" fg:w="2"/><text x="25.5483%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="25.5370%" y="517" width="0.0796%" height="15" fill="rgb(235,194,19)" fg:x="321" fg:w="1"/><text x="25.7870%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.5370%" y="501" width="0.0796%" height="15" fill="rgb(207,204,18)" fg:x="321" fg:w="1"/><text x="25.7870%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.5370%" y="485" width="0.0796%" height="15" fill="rgb(248,8,7)" fg:x="321" fg:w="1"/><text x="25.7870%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="25.5370%" y="469" width="0.0796%" height="15" fill="rgb(223,145,47)" fg:x="321" fg:w="1"/><text x="25.7870%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="25.5370%" y="453" width="0.0796%" height="15" fill="rgb(228,84,11)" fg:x="321" fg:w="1"/><text x="25.7870%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="25.5370%" y="437" width="0.0796%" height="15" fill="rgb(218,76,45)" fg:x="321" fg:w="1"/><text x="25.7870%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="25.5370%" y="421" width="0.0796%" height="15" fill="rgb(223,80,15)" fg:x="321" fg:w="1"/><text x="25.7870%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="25.5370%" y="405" width="0.0796%" height="15" fill="rgb(219,218,33)" fg:x="321" fg:w="1"/><text x="25.7870%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="25.5370%" y="389" width="0.0796%" height="15" fill="rgb(208,51,11)" fg:x="321" fg:w="1"/><text x="25.7870%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="25.5370%" y="373" width="0.0796%" height="15" fill="rgb(229,165,39)" fg:x="321" fg:w="1"/><text x="25.7870%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="25.5370%" y="357" width="0.0796%" height="15" fill="rgb(241,100,24)" fg:x="321" fg:w="1"/><text x="25.7870%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="25.5370%" y="341" width="0.0796%" height="15" fill="rgb(228,14,23)" fg:x="321" fg:w="1"/><text x="25.7870%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.5370%" y="325" width="0.0796%" height="15" fill="rgb(247,116,52)" fg:x="321" fg:w="1"/><text x="25.7870%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="25.5370%" y="533" width="0.1591%" height="15" fill="rgb(216,149,33)" fg:x="321" fg:w="2"/><text x="25.7870%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="25.6165%" y="517" width="0.0796%" height="15" fill="rgb(238,142,29)" fg:x="322" fg:w="1"/><text x="25.8665%" y="527.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="25.6961%" y="485" width="0.0796%" height="15" fill="rgb(224,83,40)" fg:x="323" fg:w="1"/><text x="25.9461%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="25.7757%" y="469" width="0.0796%" height="15" fill="rgb(234,165,11)" fg:x="324" fg:w="1"/><text x="26.0257%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="25.7757%" y="453" width="0.0796%" height="15" fill="rgb(215,96,23)" fg:x="324" fg:w="1"/><text x="26.0257%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="25.7757%" y="437" width="0.0796%" height="15" fill="rgb(233,179,26)" fg:x="324" fg:w="1"/><text x="26.0257%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.7757%" y="421" width="0.0796%" height="15" fill="rgb(225,129,33)" fg:x="324" fg:w="1"/><text x="26.0257%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="25.7757%" y="405" width="0.0796%" height="15" fill="rgb(237,49,13)" fg:x="324" fg:w="1"/><text x="26.0257%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.7757%" y="389" width="0.0796%" height="15" fill="rgb(211,3,31)" fg:x="324" fg:w="1"/><text x="26.0257%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.7757%" y="373" width="0.0796%" height="15" fill="rgb(216,152,19)" fg:x="324" fg:w="1"/><text x="26.0257%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="25.7757%" y="357" width="0.0796%" height="15" fill="rgb(251,121,35)" fg:x="324" fg:w="1"/><text x="26.0257%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="25.7757%" y="341" width="0.0796%" height="15" fill="rgb(210,217,47)" fg:x="324" fg:w="1"/><text x="26.0257%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="25.7757%" y="325" width="0.0796%" height="15" fill="rgb(244,116,22)" fg:x="324" fg:w="1"/><text x="26.0257%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="25.7757%" y="309" width="0.0796%" height="15" fill="rgb(228,17,21)" fg:x="324" fg:w="1"/><text x="26.0257%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="25.7757%" y="293" width="0.0796%" height="15" fill="rgb(240,149,34)" fg:x="324" fg:w="1"/><text x="26.0257%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="25.7757%" y="277" width="0.0796%" height="15" fill="rgb(208,125,47)" fg:x="324" fg:w="1"/><text x="26.0257%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="25.7757%" y="261" width="0.0796%" height="15" fill="rgb(249,186,39)" fg:x="324" fg:w="1"/><text x="26.0257%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="25.7757%" y="245" width="0.0796%" height="15" fill="rgb(240,220,33)" fg:x="324" fg:w="1"/><text x="26.0257%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="25.7757%" y="229" width="0.0796%" height="15" fill="rgb(243,110,23)" fg:x="324" fg:w="1"/><text x="26.0257%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.7757%" y="213" width="0.0796%" height="15" fill="rgb(219,163,46)" fg:x="324" fg:w="1"/><text x="26.0257%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.9348%" y="453" width="0.0796%" height="15" fill="rgb(216,126,30)" fg:x="326" fg:w="1"/><text x="26.1848%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.9348%" y="437" width="0.0796%" height="15" fill="rgb(208,139,11)" fg:x="326" fg:w="1"/><text x="26.1848%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="25.8552%" y="469" width="0.2387%" height="15" fill="rgb(213,118,36)" fg:x="325" fg:w="3"/><text x="26.1052%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="26.0143%" y="453" width="0.0796%" height="15" fill="rgb(226,43,17)" fg:x="327" fg:w="1"/><text x="26.2643%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.0143%" y="437" width="0.0796%" height="15" fill="rgb(254,217,4)" fg:x="327" fg:w="1"/><text x="26.2643%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="26.0143%" y="421" width="0.0796%" height="15" fill="rgb(210,134,47)" fg:x="327" fg:w="1"/><text x="26.2643%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.0143%" y="405" width="0.0796%" height="15" fill="rgb(237,24,49)" fg:x="327" fg:w="1"/><text x="26.2643%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="26.0143%" y="389" width="0.0796%" height="15" fill="rgb(251,39,46)" fg:x="327" fg:w="1"/><text x="26.2643%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.0143%" y="373" width="0.0796%" height="15" fill="rgb(251,220,3)" fg:x="327" fg:w="1"/><text x="26.2643%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="26.0143%" y="357" width="0.0796%" height="15" fill="rgb(228,105,12)" fg:x="327" fg:w="1"/><text x="26.2643%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.0143%" y="341" width="0.0796%" height="15" fill="rgb(215,196,1)" fg:x="327" fg:w="1"/><text x="26.2643%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="26.1734%" y="229" width="0.0796%" height="15" fill="rgb(214,33,39)" fg:x="329" fg:w="1"/><text x="26.4234%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="26.1734%" y="213" width="0.0796%" height="15" fill="rgb(220,19,52)" fg:x="329" fg:w="1"/><text x="26.4234%" y="223.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="26.1734%" y="197" width="0.0796%" height="15" fill="rgb(221,78,38)" fg:x="329" fg:w="1"/><text x="26.4234%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="26.1734%" y="181" width="0.0796%" height="15" fill="rgb(253,30,16)" fg:x="329" fg:w="1"/><text x="26.4234%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.1734%" y="165" width="0.0796%" height="15" fill="rgb(242,65,0)" fg:x="329" fg:w="1"/><text x="26.4234%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="26.1734%" y="309" width="0.2387%" height="15" fill="rgb(235,201,12)" fg:x="329" fg:w="3"/><text x="26.4234%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="26.1734%" y="293" width="0.2387%" height="15" fill="rgb(233,161,9)" fg:x="329" fg:w="3"/><text x="26.4234%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="26.1734%" y="277" width="0.2387%" height="15" fill="rgb(241,207,41)" fg:x="329" fg:w="3"/><text x="26.4234%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="26.1734%" y="261" width="0.2387%" height="15" fill="rgb(212,69,46)" fg:x="329" fg:w="3"/><text x="26.4234%" y="271.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (3 samples, 0.24%)</title><rect x="26.1734%" y="245" width="0.2387%" height="15" fill="rgb(239,69,45)" fg:x="329" fg:w="3"/><text x="26.4234%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (2 samples, 0.16%)</title><rect x="26.2530%" y="229" width="0.1591%" height="15" fill="rgb(242,117,48)" fg:x="330" fg:w="2"/><text x="26.5030%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="26.2530%" y="213" width="0.1591%" height="15" fill="rgb(228,41,36)" fg:x="330" fg:w="2"/><text x="26.5030%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="26.1734%" y="373" width="0.3182%" height="15" fill="rgb(212,3,32)" fg:x="329" fg:w="4"/><text x="26.4234%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="26.1734%" y="357" width="0.3182%" height="15" fill="rgb(233,41,49)" fg:x="329" fg:w="4"/><text x="26.4234%" y="367.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (4 samples, 0.32%)</title><rect x="26.1734%" y="341" width="0.3182%" height="15" fill="rgb(252,170,49)" fg:x="329" fg:w="4"/><text x="26.4234%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="26.1734%" y="325" width="0.3182%" height="15" fill="rgb(229,53,26)" fg:x="329" fg:w="4"/><text x="26.4234%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="26.4121%" y="309" width="0.0796%" height="15" fill="rgb(217,157,12)" fg:x="332" fg:w="1"/><text x="26.6621%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.4916%" y="309" width="0.0796%" height="15" fill="rgb(227,17,9)" fg:x="333" fg:w="1"/><text x="26.7416%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="26.4916%" y="373" width="0.1591%" height="15" fill="rgb(218,84,12)" fg:x="333" fg:w="2"/><text x="26.7416%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="26.4916%" y="357" width="0.1591%" height="15" fill="rgb(212,79,24)" fg:x="333" fg:w="2"/><text x="26.7416%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="26.4916%" y="341" width="0.1591%" height="15" fill="rgb(217,222,37)" fg:x="333" fg:w="2"/><text x="26.7416%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="26.4916%" y="325" width="0.1591%" height="15" fill="rgb(246,208,8)" fg:x="333" fg:w="2"/><text x="26.7416%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="26.5712%" y="309" width="0.0796%" height="15" fill="rgb(244,133,10)" fg:x="334" fg:w="1"/><text x="26.8212%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="26.5712%" y="293" width="0.0796%" height="15" fill="rgb(209,219,41)" fg:x="334" fg:w="1"/><text x="26.8212%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.5712%" y="277" width="0.0796%" height="15" fill="rgb(253,175,45)" fg:x="334" fg:w="1"/><text x="26.8212%" y="287.50"></text></g><g><title>kernel::model::entity::Entity::from_value (8 samples, 0.64%)</title><rect x="26.0939%" y="469" width="0.6364%" height="15" fill="rgb(235,100,37)" fg:x="328" fg:w="8"/><text x="26.3439%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (8 samples, 0.64%)</title><rect x="26.0939%" y="453" width="0.6364%" height="15" fill="rgb(225,87,19)" fg:x="328" fg:w="8"/><text x="26.3439%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.64%)</title><rect x="26.0939%" y="437" width="0.6364%" height="15" fill="rgb(217,152,17)" fg:x="328" fg:w="8"/><text x="26.3439%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (8 samples, 0.64%)</title><rect x="26.0939%" y="421" width="0.6364%" height="15" fill="rgb(235,72,13)" fg:x="328" fg:w="8"/><text x="26.3439%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.64%)</title><rect x="26.0939%" y="405" width="0.6364%" height="15" fill="rgb(233,140,18)" fg:x="328" fg:w="8"/><text x="26.3439%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (8 samples, 0.64%)</title><rect x="26.0939%" y="389" width="0.6364%" height="15" fill="rgb(207,212,28)" fg:x="328" fg:w="8"/><text x="26.3439%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.6508%" y="373" width="0.0796%" height="15" fill="rgb(220,130,25)" fg:x="335" fg:w="1"/><text x="26.9008%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="26.6508%" y="357" width="0.0796%" height="15" fill="rgb(205,55,34)" fg:x="335" fg:w="1"/><text x="26.9008%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="26.6508%" y="341" width="0.0796%" height="15" fill="rgb(237,54,35)" fg:x="335" fg:w="1"/><text x="26.9008%" y="351.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="26.6508%" y="325" width="0.0796%" height="15" fill="rgb(208,67,23)" fg:x="335" fg:w="1"/><text x="26.9008%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="26.6508%" y="309" width="0.0796%" height="15" fill="rgb(206,207,50)" fg:x="335" fg:w="1"/><text x="26.9008%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.6508%" y="293" width="0.0796%" height="15" fill="rgb(213,211,42)" fg:x="335" fg:w="1"/><text x="26.9008%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="26.6508%" y="277" width="0.0796%" height="15" fill="rgb(252,197,50)" fg:x="335" fg:w="1"/><text x="26.9008%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="26.6508%" y="261" width="0.0796%" height="15" fill="rgb(251,211,41)" fg:x="335" fg:w="1"/><text x="26.9008%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="26.7303%" y="341" width="0.0796%" height="15" fill="rgb(229,211,5)" fg:x="336" fg:w="1"/><text x="26.9803%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="26.7303%" y="325" width="0.0796%" height="15" fill="rgb(239,36,31)" fg:x="336" fg:w="1"/><text x="26.9803%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="26.7303%" y="373" width="0.1591%" height="15" fill="rgb(248,67,31)" fg:x="336" fg:w="2"/><text x="26.9803%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="26.7303%" y="357" width="0.1591%" height="15" fill="rgb(249,55,44)" fg:x="336" fg:w="2"/><text x="26.9803%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="26.8099%" y="341" width="0.0796%" height="15" fill="rgb(216,82,12)" fg:x="337" fg:w="1"/><text x="27.0599%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.8099%" y="325" width="0.0796%" height="15" fill="rgb(242,174,1)" fg:x="337" fg:w="1"/><text x="27.0599%" y="335.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (17 samples, 1.35%)</title><rect x="25.6961%" y="533" width="1.3524%" height="15" fill="rgb(208,120,29)" fg:x="323" fg:w="17"/><text x="25.9461%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (17 samples, 1.35%)</title><rect x="25.6961%" y="517" width="1.3524%" height="15" fill="rgb(221,105,43)" fg:x="323" fg:w="17"/><text x="25.9461%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (17 samples, 1.35%)</title><rect x="25.6961%" y="501" width="1.3524%" height="15" fill="rgb(234,124,22)" fg:x="323" fg:w="17"/><text x="25.9461%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (16 samples, 1.27%)</title><rect x="25.7757%" y="485" width="1.2729%" height="15" fill="rgb(212,23,30)" fg:x="324" fg:w="16"/><text x="26.0257%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="26.7303%" y="469" width="0.3182%" height="15" fill="rgb(219,122,53)" fg:x="336" fg:w="4"/><text x="26.9803%" y="479.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="26.7303%" y="453" width="0.3182%" height="15" fill="rgb(248,84,24)" fg:x="336" fg:w="4"/><text x="26.9803%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="26.7303%" y="437" width="0.3182%" height="15" fill="rgb(245,115,18)" fg:x="336" fg:w="4"/><text x="26.9803%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="26.7303%" y="421" width="0.3182%" height="15" fill="rgb(227,176,51)" fg:x="336" fg:w="4"/><text x="26.9803%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="26.7303%" y="405" width="0.3182%" height="15" fill="rgb(229,63,42)" fg:x="336" fg:w="4"/><text x="26.9803%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="26.7303%" y="389" width="0.3182%" height="15" fill="rgb(247,202,24)" fg:x="336" fg:w="4"/><text x="26.9803%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="26.8894%" y="373" width="0.1591%" height="15" fill="rgb(244,173,20)" fg:x="338" fg:w="2"/><text x="27.1394%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.9690%" y="357" width="0.0796%" height="15" fill="rgb(242,81,47)" fg:x="339" fg:w="1"/><text x="27.2190%" y="367.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (21 samples, 1.67%)</title><rect x="25.4574%" y="565" width="1.6706%" height="15" fill="rgb(231,185,54)" fg:x="320" fg:w="21"/><text x="25.7074%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (20 samples, 1.59%)</title><rect x="25.5370%" y="549" width="1.5911%" height="15" fill="rgb(243,55,32)" fg:x="321" fg:w="20"/><text x="25.7870%" y="559.50"></text></g><g><title>plugins_core::finding::DefaultFinder::find_top_container (1 samples, 0.08%)</title><rect x="27.0485%" y="533" width="0.0796%" height="15" fill="rgb(208,167,19)" fg:x="340" fg:w="1"/><text x="27.2985%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="27.0485%" y="517" width="0.0796%" height="15" fill="rgb(231,72,35)" fg:x="340" fg:w="1"/><text x="27.2985%" y="527.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="27.2872%" y="405" width="0.0796%" height="15" fill="rgb(250,173,51)" fg:x="343" fg:w="1"/><text x="27.5372%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="27.3667%" y="325" width="0.1591%" height="15" fill="rgb(209,5,22)" fg:x="344" fg:w="2"/><text x="27.6167%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="27.3667%" y="309" width="0.1591%" height="15" fill="rgb(250,174,19)" fg:x="344" fg:w="2"/><text x="27.6167%" y="319.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="27.3667%" y="293" width="0.1591%" height="15" fill="rgb(217,3,49)" fg:x="344" fg:w="2"/><text x="27.6167%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="27.5259%" y="309" width="0.0796%" height="15" fill="rgb(218,225,5)" fg:x="346" fg:w="1"/><text x="27.7759%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.5259%" y="293" width="0.0796%" height="15" fill="rgb(236,89,11)" fg:x="346" fg:w="1"/><text x="27.7759%" y="303.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (4 samples, 0.32%)</title><rect x="27.3667%" y="357" width="0.3182%" height="15" fill="rgb(206,33,28)" fg:x="344" fg:w="4"/><text x="27.6167%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="27.3667%" y="341" width="0.3182%" height="15" fill="rgb(241,56,42)" fg:x="344" fg:w="4"/><text x="27.6167%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="27.5259%" y="325" width="0.1591%" height="15" fill="rgb(222,44,11)" fg:x="346" fg:w="2"/><text x="27.7759%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="27.6054%" y="309" width="0.0796%" height="15" fill="rgb(234,111,20)" fg:x="347" fg:w="1"/><text x="27.8554%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="27.6054%" y="293" width="0.0796%" height="15" fill="rgb(237,77,6)" fg:x="347" fg:w="1"/><text x="27.8554%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.6054%" y="277" width="0.0796%" height="15" fill="rgb(235,111,23)" fg:x="347" fg:w="1"/><text x="27.8554%" y="287.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (5 samples, 0.40%)</title><rect x="27.3667%" y="389" width="0.3978%" height="15" fill="rgb(251,135,29)" fg:x="344" fg:w="5"/><text x="27.6167%" y="399.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (5 samples, 0.40%)</title><rect x="27.3667%" y="373" width="0.3978%" height="15" fill="rgb(217,57,1)" fg:x="344" fg:w="5"/><text x="27.6167%" y="383.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="27.6850%" y="357" width="0.0796%" height="15" fill="rgb(249,119,31)" fg:x="348" fg:w="1"/><text x="27.9350%" y="367.50"></text></g><g><title>&lt;core::char::ToLowercase as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.08%)</title><rect x="27.6850%" y="341" width="0.0796%" height="15" fill="rgb(233,164,33)" fg:x="348" fg:w="1"/><text x="27.9350%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.9236%" y="341" width="0.0796%" height="15" fill="rgb(250,217,43)" fg:x="351" fg:w="1"/><text x="28.1736%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.9236%" y="325" width="0.0796%" height="15" fill="rgb(232,154,50)" fg:x="351" fg:w="1"/><text x="28.1736%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.9236%" y="309" width="0.0796%" height="15" fill="rgb(227,190,8)" fg:x="351" fg:w="1"/><text x="28.1736%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.0032%" y="341" width="0.0796%" height="15" fill="rgb(209,217,32)" fg:x="352" fg:w="1"/><text x="28.2532%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="27.9236%" y="357" width="0.2387%" height="15" fill="rgb(243,203,50)" fg:x="351" fg:w="3"/><text x="28.1736%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="28.0827%" y="341" width="0.0796%" height="15" fill="rgb(232,152,27)" fg:x="353" fg:w="1"/><text x="28.3327%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="28.0827%" y="325" width="0.0796%" height="15" fill="rgb(240,34,29)" fg:x="353" fg:w="1"/><text x="28.3327%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="28.3214%" y="325" width="0.0796%" height="15" fill="rgb(215,185,52)" fg:x="356" fg:w="1"/><text x="28.5714%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.4010%" y="325" width="0.0796%" height="15" fill="rgb(240,89,49)" fg:x="357" fg:w="1"/><text x="28.6510%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="28.4805%" y="325" width="0.0796%" height="15" fill="rgb(225,12,52)" fg:x="358" fg:w="1"/><text x="28.7305%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="28.4805%" y="309" width="0.0796%" height="15" fill="rgb(239,128,45)" fg:x="358" fg:w="1"/><text x="28.7305%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (7 samples, 0.56%)</title><rect x="28.2418%" y="341" width="0.5569%" height="15" fill="rgb(211,78,47)" fg:x="355" fg:w="7"/><text x="28.4918%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="28.5601%" y="325" width="0.2387%" height="15" fill="rgb(232,31,21)" fg:x="359" fg:w="3"/><text x="28.8101%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="28.5601%" y="309" width="0.2387%" height="15" fill="rgb(222,168,14)" fg:x="359" fg:w="3"/><text x="28.8101%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="28.6396%" y="293" width="0.1591%" height="15" fill="rgb(209,128,24)" fg:x="360" fg:w="2"/><text x="28.8896%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="28.6396%" y="277" width="0.1591%" height="15" fill="rgb(249,35,13)" fg:x="360" fg:w="2"/><text x="28.8896%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="28.7192%" y="261" width="0.0796%" height="15" fill="rgb(218,7,2)" fg:x="361" fg:w="1"/><text x="28.9692%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.7987%" y="341" width="0.0796%" height="15" fill="rgb(238,107,27)" fg:x="362" fg:w="1"/><text x="29.0487%" y="351.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (10 samples, 0.80%)</title><rect x="28.1623%" y="357" width="0.7955%" height="15" fill="rgb(217,88,38)" fg:x="354" fg:w="10"/><text x="28.4123%" y="367.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="28.8783%" y="341" width="0.0796%" height="15" fill="rgb(230,207,0)" fg:x="363" fg:w="1"/><text x="29.1283%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="28.8783%" y="325" width="0.0796%" height="15" fill="rgb(249,64,54)" fg:x="363" fg:w="1"/><text x="29.1283%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="28.8783%" y="309" width="0.0796%" height="15" fill="rgb(231,7,11)" fg:x="363" fg:w="1"/><text x="29.1283%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="28.9578%" y="341" width="0.0796%" height="15" fill="rgb(205,149,21)" fg:x="364" fg:w="1"/><text x="29.2078%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="28.9578%" y="325" width="0.0796%" height="15" fill="rgb(215,126,34)" fg:x="364" fg:w="1"/><text x="29.2078%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="28.9578%" y="309" width="0.0796%" height="15" fill="rgb(241,132,45)" fg:x="364" fg:w="1"/><text x="29.2078%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="28.9578%" y="293" width="0.0796%" height="15" fill="rgb(252,69,32)" fg:x="364" fg:w="1"/><text x="29.2078%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="28.9578%" y="277" width="0.0796%" height="15" fill="rgb(232,204,19)" fg:x="364" fg:w="1"/><text x="29.2078%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="28.9578%" y="261" width="0.0796%" height="15" fill="rgb(249,15,47)" fg:x="364" fg:w="1"/><text x="29.2078%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="28.9578%" y="245" width="0.0796%" height="15" fill="rgb(209,227,23)" fg:x="364" fg:w="1"/><text x="29.2078%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="28.9578%" y="229" width="0.0796%" height="15" fill="rgb(248,92,24)" fg:x="364" fg:w="1"/><text x="29.2078%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="29.0374%" y="309" width="0.0796%" height="15" fill="rgb(247,59,2)" fg:x="365" fg:w="1"/><text x="29.2874%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.0374%" y="293" width="0.0796%" height="15" fill="rgb(221,30,5)" fg:x="365" fg:w="1"/><text x="29.2874%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="28.9578%" y="357" width="0.3182%" height="15" fill="rgb(208,108,53)" fg:x="364" fg:w="4"/><text x="29.2078%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="29.0374%" y="341" width="0.2387%" height="15" fill="rgb(211,183,26)" fg:x="365" fg:w="3"/><text x="29.2874%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="29.0374%" y="325" width="0.2387%" height="15" fill="rgb(232,132,4)" fg:x="365" fg:w="3"/><text x="29.2874%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="29.1169%" y="309" width="0.1591%" height="15" fill="rgb(253,128,37)" fg:x="366" fg:w="2"/><text x="29.3669%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="29.1169%" y="293" width="0.1591%" height="15" fill="rgb(221,58,24)" fg:x="366" fg:w="2"/><text x="29.3669%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="29.1169%" y="277" width="0.1591%" height="15" fill="rgb(230,54,45)" fg:x="366" fg:w="2"/><text x="29.3669%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="29.1169%" y="261" width="0.1591%" height="15" fill="rgb(254,21,18)" fg:x="366" fg:w="2"/><text x="29.3669%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="29.1965%" y="245" width="0.0796%" height="15" fill="rgb(221,108,0)" fg:x="367" fg:w="1"/><text x="29.4465%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="29.2761%" y="341" width="0.0796%" height="15" fill="rgb(206,95,1)" fg:x="368" fg:w="1"/><text x="29.5261%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="29.2761%" y="325" width="0.0796%" height="15" fill="rgb(237,52,5)" fg:x="368" fg:w="1"/><text x="29.5261%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.2761%" y="309" width="0.0796%" height="15" fill="rgb(218,150,34)" fg:x="368" fg:w="1"/><text x="29.5261%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.4352%" y="325" width="0.0796%" height="15" fill="rgb(235,194,28)" fg:x="370" fg:w="1"/><text x="29.6852%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.4352%" y="309" width="0.0796%" height="15" fill="rgb(245,92,18)" fg:x="370" fg:w="1"/><text x="29.6852%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.4352%" y="293" width="0.0796%" height="15" fill="rgb(253,203,53)" fg:x="370" fg:w="1"/><text x="29.6852%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.4352%" y="277" width="0.0796%" height="15" fill="rgb(249,185,47)" fg:x="370" fg:w="1"/><text x="29.6852%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.4352%" y="261" width="0.0796%" height="15" fill="rgb(252,194,52)" fg:x="370" fg:w="1"/><text x="29.6852%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="29.4352%" y="245" width="0.0796%" height="15" fill="rgb(210,53,36)" fg:x="370" fg:w="1"/><text x="29.6852%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="29.4352%" y="229" width="0.0796%" height="15" fill="rgb(237,37,25)" fg:x="370" fg:w="1"/><text x="29.6852%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="29.4352%" y="213" width="0.0796%" height="15" fill="rgb(242,116,27)" fg:x="370" fg:w="1"/><text x="29.6852%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="29.4352%" y="197" width="0.0796%" height="15" fill="rgb(213,185,26)" fg:x="370" fg:w="1"/><text x="29.6852%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="29.4352%" y="181" width="0.0796%" height="15" fill="rgb(225,204,8)" fg:x="370" fg:w="1"/><text x="29.6852%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="29.4352%" y="165" width="0.0796%" height="15" fill="rgb(254,111,37)" fg:x="370" fg:w="1"/><text x="29.6852%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="29.4352%" y="149" width="0.0796%" height="15" fill="rgb(242,35,9)" fg:x="370" fg:w="1"/><text x="29.6852%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="29.4352%" y="133" width="0.0796%" height="15" fill="rgb(232,138,49)" fg:x="370" fg:w="1"/><text x="29.6852%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="29.4352%" y="117" width="0.0796%" height="15" fill="rgb(247,56,4)" fg:x="370" fg:w="1"/><text x="29.6852%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.4352%" y="101" width="0.0796%" height="15" fill="rgb(226,179,17)" fg:x="370" fg:w="1"/><text x="29.6852%" y="111.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="29.5147%" y="293" width="0.2387%" height="15" fill="rgb(216,163,45)" fg:x="371" fg:w="3"/><text x="29.7647%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="29.5147%" y="277" width="0.2387%" height="15" fill="rgb(211,157,3)" fg:x="371" fg:w="3"/><text x="29.7647%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="29.5943%" y="261" width="0.1591%" height="15" fill="rgb(234,44,20)" fg:x="372" fg:w="2"/><text x="29.8443%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="29.5943%" y="245" width="0.1591%" height="15" fill="rgb(254,138,23)" fg:x="372" fg:w="2"/><text x="29.8443%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (6 samples, 0.48%)</title><rect x="29.3556%" y="341" width="0.4773%" height="15" fill="rgb(206,119,39)" fg:x="369" fg:w="6"/><text x="29.6056%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="29.5147%" y="325" width="0.3182%" height="15" fill="rgb(231,105,52)" fg:x="371" fg:w="4"/><text x="29.7647%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="29.5147%" y="309" width="0.3182%" height="15" fill="rgb(250,20,5)" fg:x="371" fg:w="4"/><text x="29.7647%" y="319.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="29.7534%" y="293" width="0.0796%" height="15" fill="rgb(215,198,30)" fg:x="374" fg:w="1"/><text x="30.0034%" y="303.50"></text></g><g><title>kernel::model::EntityPtr::gid (8 samples, 0.64%)</title><rect x="29.2761%" y="357" width="0.6364%" height="15" fill="rgb(246,142,8)" fg:x="368" fg:w="8"/><text x="29.5261%" y="367.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="29.8329%" y="341" width="0.0796%" height="15" fill="rgb(243,26,38)" fg:x="375" fg:w="1"/><text x="30.0829%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="29.8329%" y="325" width="0.0796%" height="15" fill="rgb(205,133,28)" fg:x="375" fg:w="1"/><text x="30.0829%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.9125%" y="261" width="0.0796%" height="15" fill="rgb(212,34,0)" fg:x="376" fg:w="1"/><text x="30.1625%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="29.9920%" y="245" width="0.0796%" height="15" fill="rgb(251,226,22)" fg:x="377" fg:w="1"/><text x="30.2420%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="29.9920%" y="229" width="0.0796%" height="15" fill="rgb(252,119,9)" fg:x="377" fg:w="1"/><text x="30.2420%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="29.9920%" y="213" width="0.0796%" height="15" fill="rgb(213,150,50)" fg:x="377" fg:w="1"/><text x="30.2420%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="29.9920%" y="197" width="0.0796%" height="15" fill="rgb(212,24,39)" fg:x="377" fg:w="1"/><text x="30.2420%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="30.0716%" y="229" width="0.0796%" height="15" fill="rgb(213,46,39)" fg:x="378" fg:w="1"/><text x="30.3216%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="30.1512%" y="229" width="0.0796%" height="15" fill="rgb(239,106,12)" fg:x="379" fg:w="1"/><text x="30.4012%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="30.1512%" y="213" width="0.0796%" height="15" fill="rgb(249,229,21)" fg:x="379" fg:w="1"/><text x="30.4012%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (8 samples, 0.64%)</title><rect x="29.9125%" y="277" width="0.6364%" height="15" fill="rgb(212,158,3)" fg:x="376" fg:w="8"/><text x="30.1625%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (7 samples, 0.56%)</title><rect x="29.9920%" y="261" width="0.5569%" height="15" fill="rgb(253,26,48)" fg:x="377" fg:w="7"/><text x="30.2420%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (6 samples, 0.48%)</title><rect x="30.0716%" y="245" width="0.4773%" height="15" fill="rgb(238,178,20)" fg:x="378" fg:w="6"/><text x="30.3216%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (4 samples, 0.32%)</title><rect x="30.2307%" y="229" width="0.3182%" height="15" fill="rgb(208,86,15)" fg:x="380" fg:w="4"/><text x="30.4807%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="30.3898%" y="213" width="0.1591%" height="15" fill="rgb(239,42,53)" fg:x="382" fg:w="2"/><text x="30.6398%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="30.5489%" y="261" width="0.0796%" height="15" fill="rgb(245,226,8)" fg:x="384" fg:w="1"/><text x="30.7989%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="30.8671%" y="229" width="0.0796%" height="15" fill="rgb(216,176,32)" fg:x="388" fg:w="1"/><text x="31.1171%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="30.8671%" y="213" width="0.0796%" height="15" fill="rgb(231,186,21)" fg:x="388" fg:w="1"/><text x="31.1171%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="30.8671%" y="197" width="0.0796%" height="15" fill="rgb(205,95,49)" fg:x="388" fg:w="1"/><text x="31.1171%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="30.9467%" y="229" width="0.0796%" height="15" fill="rgb(217,145,8)" fg:x="389" fg:w="1"/><text x="31.1967%" y="239.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="31.0263%" y="229" width="0.0796%" height="15" fill="rgb(239,144,48)" fg:x="390" fg:w="1"/><text x="31.2763%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.1058%" y="213" width="0.0796%" height="15" fill="rgb(214,189,23)" fg:x="391" fg:w="1"/><text x="31.3558%" y="223.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="31.2649%" y="197" width="0.1591%" height="15" fill="rgb(229,157,17)" fg:x="393" fg:w="2"/><text x="31.5149%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (16 samples, 1.27%)</title><rect x="31.1854%" y="213" width="1.2729%" height="15" fill="rgb(230,5,48)" fg:x="392" fg:w="16"/><text x="31.4354%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (13 samples, 1.03%)</title><rect x="31.4240%" y="197" width="1.0342%" height="15" fill="rgb(224,156,48)" fg:x="395" fg:w="13"/><text x="31.6740%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.3787%" y="181" width="0.0796%" height="15" fill="rgb(223,14,29)" fg:x="407" fg:w="1"/><text x="32.6287%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="32.4582%" y="213" width="0.2387%" height="15" fill="rgb(229,96,36)" fg:x="408" fg:w="3"/><text x="32.7082%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="32.6173%" y="197" width="0.0796%" height="15" fill="rgb(231,102,53)" fg:x="410" fg:w="1"/><text x="32.8673%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="32.6969%" y="213" width="0.0796%" height="15" fill="rgb(210,77,38)" fg:x="411" fg:w="1"/><text x="32.9469%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="32.6969%" y="197" width="0.0796%" height="15" fill="rgb(235,131,6)" fg:x="411" fg:w="1"/><text x="32.9469%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="32.6969%" y="181" width="0.0796%" height="15" fill="rgb(252,55,38)" fg:x="411" fg:w="1"/><text x="32.9469%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="32.6969%" y="165" width="0.0796%" height="15" fill="rgb(246,38,14)" fg:x="411" fg:w="1"/><text x="32.9469%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="32.6969%" y="149" width="0.0796%" height="15" fill="rgb(242,27,5)" fg:x="411" fg:w="1"/><text x="32.9469%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.6969%" y="133" width="0.0796%" height="15" fill="rgb(228,65,35)" fg:x="411" fg:w="1"/><text x="32.9469%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="32.8560%" y="181" width="0.0796%" height="15" fill="rgb(245,93,11)" fg:x="413" fg:w="1"/><text x="33.1060%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.8560%" y="165" width="0.0796%" height="15" fill="rgb(213,1,31)" fg:x="413" fg:w="1"/><text x="33.1060%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.8560%" y="149" width="0.0796%" height="15" fill="rgb(237,205,14)" fg:x="413" fg:w="1"/><text x="33.1060%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="33.2538%" y="149" width="0.1591%" height="15" fill="rgb(232,118,45)" fg:x="418" fg:w="2"/><text x="33.5038%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="33.2538%" y="133" width="0.1591%" height="15" fill="rgb(218,5,6)" fg:x="418" fg:w="2"/><text x="33.5038%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="33.2538%" y="117" width="0.1591%" height="15" fill="rgb(251,87,51)" fg:x="418" fg:w="2"/><text x="33.5038%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="33.4129%" y="133" width="0.0796%" height="15" fill="rgb(207,225,20)" fg:x="420" fg:w="1"/><text x="33.6629%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="33.4129%" y="117" width="0.0796%" height="15" fill="rgb(222,78,54)" fg:x="420" fg:w="1"/><text x="33.6629%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.4129%" y="101" width="0.0796%" height="15" fill="rgb(232,85,16)" fg:x="420" fg:w="1"/><text x="33.6629%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="33.4129%" y="85" width="0.0796%" height="15" fill="rgb(244,25,33)" fg:x="420" fg:w="1"/><text x="33.6629%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (67 samples, 5.33%)</title><rect x="33.4129%" y="149" width="5.3302%" height="15" fill="rgb(233,24,36)" fg:x="420" fg:w="67"/><text x="33.6629%" y="159.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (66 samples, 5.25%)</title><rect x="33.4924%" y="133" width="5.2506%" height="15" fill="rgb(253,49,54)" fg:x="421" fg:w="66"/><text x="33.7424%" y="143.50">regex_..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (66 samples, 5.25%)</title><rect x="33.4924%" y="117" width="5.2506%" height="15" fill="rgb(245,12,22)" fg:x="421" fg:w="66"/><text x="33.7424%" y="127.50">alloc:..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="38.7430%" y="149" width="0.1591%" height="15" fill="rgb(253,141,28)" fg:x="487" fg:w="2"/><text x="38.9930%" y="159.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="38.9021%" y="149" width="0.0796%" height="15" fill="rgb(225,207,27)" fg:x="489" fg:w="1"/><text x="39.1521%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (78 samples, 6.21%)</title><rect x="32.8560%" y="197" width="6.2053%" height="15" fill="rgb(220,84,2)" fg:x="413" fg:w="78"/><text x="33.1060%" y="207.50">&lt;core::i..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (77 samples, 6.13%)</title><rect x="32.9356%" y="181" width="6.1257%" height="15" fill="rgb(224,37,37)" fg:x="414" fg:w="77"/><text x="33.1856%" y="191.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (77 samples, 6.13%)</title><rect x="32.9356%" y="165" width="6.1257%" height="15" fill="rgb(220,143,18)" fg:x="414" fg:w="77"/><text x="33.1856%" y="175.50">regex_au..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="38.9817%" y="149" width="0.0796%" height="15" fill="rgb(210,88,33)" fg:x="490" fg:w="1"/><text x="39.2317%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="39.2204%" y="181" width="0.0796%" height="15" fill="rgb(219,87,51)" fg:x="493" fg:w="1"/><text x="39.4704%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="39.2204%" y="165" width="0.0796%" height="15" fill="rgb(211,7,35)" fg:x="493" fg:w="1"/><text x="39.4704%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.2204%" y="149" width="0.0796%" height="15" fill="rgb(232,77,2)" fg:x="493" fg:w="1"/><text x="39.4704%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="39.2204%" y="133" width="0.0796%" height="15" fill="rgb(249,94,25)" fg:x="493" fg:w="1"/><text x="39.4704%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.5386%" y="165" width="0.0796%" height="15" fill="rgb(215,112,2)" fg:x="497" fg:w="1"/><text x="39.7886%" y="175.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="39.6181%" y="165" width="0.0796%" height="15" fill="rgb(226,115,48)" fg:x="498" fg:w="1"/><text x="39.8681%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.48%)</title><rect x="39.2999%" y="181" width="0.4773%" height="15" fill="rgb(249,196,10)" fg:x="494" fg:w="6"/><text x="39.5499%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="39.6977%" y="165" width="0.0796%" height="15" fill="rgb(237,109,14)" fg:x="499" fg:w="1"/><text x="39.9477%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.6977%" y="149" width="0.0796%" height="15" fill="rgb(217,103,53)" fg:x="499" fg:w="1"/><text x="39.9477%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.6977%" y="133" width="0.0796%" height="15" fill="rgb(244,137,9)" fg:x="499" fg:w="1"/><text x="39.9477%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="39.7772%" y="181" width="0.0796%" height="15" fill="rgb(227,201,3)" fg:x="500" fg:w="1"/><text x="40.0272%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.88%)</title><rect x="39.0613%" y="197" width="0.8751%" height="15" fill="rgb(243,94,6)" fg:x="491" fg:w="11"/><text x="39.3113%" y="207.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="39.8568%" y="181" width="0.0796%" height="15" fill="rgb(235,118,5)" fg:x="501" fg:w="1"/><text x="40.1068%" y="191.50"></text></g><g><title>regex_syntax::hir::Class::literal (1 samples, 0.08%)</title><rect x="39.9364%" y="181" width="0.0796%" height="15" fill="rgb(247,10,30)" fg:x="502" fg:w="1"/><text x="40.1864%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (92 samples, 7.32%)</title><rect x="32.7765%" y="213" width="7.3190%" height="15" fill="rgb(205,26,28)" fg:x="412" fg:w="92"/><text x="33.0265%" y="223.50">regex_auto..</text></g><g><title>regex_syntax::hir::Hir::dot (2 samples, 0.16%)</title><rect x="39.9364%" y="197" width="0.1591%" height="15" fill="rgb(206,99,35)" fg:x="502" fg:w="2"/><text x="40.1864%" y="207.50"></text></g><g><title>regex_syntax::hir::ClassBytes::empty (1 samples, 0.08%)</title><rect x="40.0159%" y="181" width="0.0796%" height="15" fill="rgb(238,130,40)" fg:x="503" fg:w="1"/><text x="40.2659%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="40.0955%" y="213" width="0.0796%" height="15" fill="rgb(224,126,31)" fg:x="504" fg:w="1"/><text x="40.3455%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="40.0955%" y="197" width="0.0796%" height="15" fill="rgb(254,105,17)" fg:x="504" fg:w="1"/><text x="40.3455%" y="207.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="40.0955%" y="181" width="0.0796%" height="15" fill="rgb(216,87,36)" fg:x="504" fg:w="1"/><text x="40.3455%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (115 samples, 9.15%)</title><rect x="31.1058%" y="229" width="9.1488%" height="15" fill="rgb(240,21,12)" fg:x="391" fg:w="115"/><text x="31.3558%" y="239.50">regex_automat..</text></g><g><title>regex_automata::util::prefilter::suffixes (1 samples, 0.08%)</title><rect x="40.1750%" y="213" width="0.0796%" height="15" fill="rgb(245,192,34)" fg:x="505" fg:w="1"/><text x="40.4250%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.2546%" y="197" width="0.0796%" height="15" fill="rgb(226,100,49)" fg:x="506" fg:w="1"/><text x="40.5046%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.2546%" y="181" width="0.0796%" height="15" fill="rgb(245,188,27)" fg:x="506" fg:w="1"/><text x="40.5046%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.2546%" y="165" width="0.0796%" height="15" fill="rgb(212,170,8)" fg:x="506" fg:w="1"/><text x="40.5046%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="40.3341%" y="181" width="0.0796%" height="15" fill="rgb(217,113,29)" fg:x="507" fg:w="1"/><text x="40.5841%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="40.4137%" y="181" width="0.0796%" height="15" fill="rgb(237,30,3)" fg:x="508" fg:w="1"/><text x="40.6637%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="40.4137%" y="165" width="0.0796%" height="15" fill="rgb(227,19,28)" fg:x="508" fg:w="1"/><text x="40.6637%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="40.4137%" y="149" width="0.0796%" height="15" fill="rgb(239,172,45)" fg:x="508" fg:w="1"/><text x="40.6637%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.64%)</title><rect x="40.2546%" y="229" width="0.6364%" height="15" fill="rgb(254,55,39)" fg:x="506" fg:w="8"/><text x="40.5046%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.64%)</title><rect x="40.2546%" y="213" width="0.6364%" height="15" fill="rgb(249,208,12)" fg:x="506" fg:w="8"/><text x="40.5046%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (7 samples, 0.56%)</title><rect x="40.3341%" y="197" width="0.5569%" height="15" fill="rgb(240,52,13)" fg:x="507" fg:w="7"/><text x="40.5841%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (5 samples, 0.40%)</title><rect x="40.4932%" y="181" width="0.3978%" height="15" fill="rgb(252,149,13)" fg:x="509" fg:w="5"/><text x="40.7432%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="40.5728%" y="165" width="0.3182%" height="15" fill="rgb(232,81,48)" fg:x="510" fg:w="4"/><text x="40.8228%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="40.5728%" y="149" width="0.3182%" height="15" fill="rgb(222,144,2)" fg:x="510" fg:w="4"/><text x="40.8228%" y="159.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="40.5728%" y="133" width="0.3182%" height="15" fill="rgb(216,81,32)" fg:x="510" fg:w="4"/><text x="40.8228%" y="143.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (133 samples, 10.58%)</title><rect x="30.6285%" y="245" width="10.5807%" height="15" fill="rgb(244,78,51)" fg:x="385" fg:w="133"/><text x="30.8785%" y="255.50">regex_automata:..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="40.8910%" y="229" width="0.3182%" height="15" fill="rgb(217,66,21)" fg:x="514" fg:w="4"/><text x="41.1410%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="40.8910%" y="213" width="0.3182%" height="15" fill="rgb(247,101,42)" fg:x="514" fg:w="4"/><text x="41.1410%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="40.9706%" y="197" width="0.2387%" height="15" fill="rgb(227,81,39)" fg:x="515" fg:w="3"/><text x="41.2206%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="41.1297%" y="181" width="0.0796%" height="15" fill="rgb(220,223,44)" fg:x="517" fg:w="1"/><text x="41.3797%" y="191.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="41.1297%" y="165" width="0.0796%" height="15" fill="rgb(205,218,2)" fg:x="517" fg:w="1"/><text x="41.3797%" y="175.50"></text></g><g><title>regex::regex::string::Regex::new (135 samples, 10.74%)</title><rect x="30.5489%" y="277" width="10.7399%" height="15" fill="rgb(212,207,28)" fg:x="384" fg:w="135"/><text x="30.7989%" y="287.50">regex::regex::st..</text></g><g><title>regex::builders::Builder::build_one_string (134 samples, 10.66%)</title><rect x="30.6285%" y="261" width="10.6603%" height="15" fill="rgb(224,12,41)" fg:x="385" fg:w="134"/><text x="30.8785%" y="271.50">regex::builders:..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="41.2092%" y="245" width="0.0796%" height="15" fill="rgb(216,118,12)" fg:x="518" fg:w="1"/><text x="41.4592%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="41.3683%" y="213" width="0.0796%" height="15" fill="rgb(252,97,46)" fg:x="520" fg:w="1"/><text x="41.6183%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="41.6070%" y="197" width="0.0796%" height="15" fill="rgb(244,206,19)" fg:x="523" fg:w="1"/><text x="41.8570%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.6070%" y="181" width="0.0796%" height="15" fill="rgb(231,84,31)" fg:x="523" fg:w="1"/><text x="41.8570%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="41.6070%" y="165" width="0.0796%" height="15" fill="rgb(244,133,0)" fg:x="523" fg:w="1"/><text x="41.8570%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="41.6866%" y="197" width="0.1591%" height="15" fill="rgb(223,15,50)" fg:x="524" fg:w="2"/><text x="41.9366%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="41.7661%" y="181" width="0.0796%" height="15" fill="rgb(250,118,49)" fg:x="525" fg:w="1"/><text x="42.0161%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.7661%" y="165" width="0.0796%" height="15" fill="rgb(248,25,38)" fg:x="525" fg:w="1"/><text x="42.0161%" y="175.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.56%)</title><rect x="41.3683%" y="229" width="0.5569%" height="15" fill="rgb(215,70,14)" fg:x="520" fg:w="7"/><text x="41.6183%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.48%)</title><rect x="41.4479%" y="213" width="0.4773%" height="15" fill="rgb(215,28,15)" fg:x="521" fg:w="6"/><text x="41.6979%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="41.8457%" y="197" width="0.0796%" height="15" fill="rgb(243,6,28)" fg:x="526" fg:w="1"/><text x="42.0957%" y="207.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (152 samples, 12.09%)</title><rect x="29.9125%" y="293" width="12.0923%" height="15" fill="rgb(222,130,1)" fg:x="376" fg:w="152"/><text x="30.1625%" y="303.50">indefinite::helper..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (9 samples, 0.72%)</title><rect x="41.2888%" y="277" width="0.7160%" height="15" fill="rgb(236,166,44)" fg:x="519" fg:w="9"/><text x="41.5388%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (9 samples, 0.72%)</title><rect x="41.2888%" y="261" width="0.7160%" height="15" fill="rgb(221,108,14)" fg:x="519" fg:w="9"/><text x="41.5388%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (9 samples, 0.72%)</title><rect x="41.2888%" y="245" width="0.7160%" height="15" fill="rgb(252,3,45)" fg:x="519" fg:w="9"/><text x="41.5388%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="41.9252%" y="229" width="0.0796%" height="15" fill="rgb(237,68,30)" fg:x="527" fg:w="1"/><text x="42.1752%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="41.9252%" y="213" width="0.0796%" height="15" fill="rgb(211,79,22)" fg:x="527" fg:w="1"/><text x="42.1752%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="41.9252%" y="197" width="0.0796%" height="15" fill="rgb(252,185,21)" fg:x="527" fg:w="1"/><text x="42.1752%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="42.0048%" y="245" width="0.0796%" height="15" fill="rgb(225,189,26)" fg:x="528" fg:w="1"/><text x="42.2548%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="42.0048%" y="229" width="0.0796%" height="15" fill="rgb(241,30,40)" fg:x="528" fg:w="1"/><text x="42.2548%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.0048%" y="213" width="0.0796%" height="15" fill="rgb(235,215,44)" fg:x="528" fg:w="1"/><text x="42.2548%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="42.0048%" y="277" width="0.1591%" height="15" fill="rgb(205,8,29)" fg:x="528" fg:w="2"/><text x="42.2548%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="42.0048%" y="261" width="0.1591%" height="15" fill="rgb(241,137,42)" fg:x="528" fg:w="2"/><text x="42.2548%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="42.0843%" y="245" width="0.0796%" height="15" fill="rgb(237,155,2)" fg:x="529" fg:w="1"/><text x="42.3343%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="42.0843%" y="229" width="0.0796%" height="15" fill="rgb(245,29,42)" fg:x="529" fg:w="1"/><text x="42.3343%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.0843%" y="213" width="0.0796%" height="15" fill="rgb(234,101,35)" fg:x="529" fg:w="1"/><text x="42.3343%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="42.1639%" y="229" width="0.0796%" height="15" fill="rgb(228,64,37)" fg:x="530" fg:w="1"/><text x="42.4139%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="42.1639%" y="213" width="0.0796%" height="15" fill="rgb(217,214,36)" fg:x="530" fg:w="1"/><text x="42.4139%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.1639%" y="197" width="0.0796%" height="15" fill="rgb(243,70,3)" fg:x="530" fg:w="1"/><text x="42.4139%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="42.2434%" y="229" width="0.0796%" height="15" fill="rgb(253,158,52)" fg:x="531" fg:w="1"/><text x="42.4934%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="42.2434%" y="213" width="0.0796%" height="15" fill="rgb(234,111,54)" fg:x="531" fg:w="1"/><text x="42.4934%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="42.2434%" y="197" width="0.0796%" height="15" fill="rgb(217,70,32)" fg:x="531" fg:w="1"/><text x="42.4934%" y="207.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="42.2434%" y="181" width="0.0796%" height="15" fill="rgb(234,18,33)" fg:x="531" fg:w="1"/><text x="42.4934%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="42.2434%" y="165" width="0.0796%" height="15" fill="rgb(234,12,49)" fg:x="531" fg:w="1"/><text x="42.4934%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="42.2434%" y="149" width="0.0796%" height="15" fill="rgb(236,10,21)" fg:x="531" fg:w="1"/><text x="42.4934%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="42.2434%" y="133" width="0.0796%" height="15" fill="rgb(248,182,45)" fg:x="531" fg:w="1"/><text x="42.4934%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="42.2434%" y="117" width="0.0796%" height="15" fill="rgb(217,95,36)" fg:x="531" fg:w="1"/><text x="42.4934%" y="127.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="42.3230%" y="229" width="0.0796%" height="15" fill="rgb(212,110,31)" fg:x="532" fg:w="1"/><text x="42.5730%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.4025%" y="213" width="0.0796%" height="15" fill="rgb(206,32,53)" fg:x="533" fg:w="1"/><text x="42.6525%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="42.4821%" y="213" width="0.1591%" height="15" fill="rgb(246,141,37)" fg:x="534" fg:w="2"/><text x="42.7321%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.5617%" y="197" width="0.0796%" height="15" fill="rgb(219,16,7)" fg:x="535" fg:w="1"/><text x="42.8117%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="42.6412%" y="213" width="0.4773%" height="15" fill="rgb(230,205,45)" fg:x="536" fg:w="6"/><text x="42.8912%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="42.7208%" y="197" width="0.3978%" height="15" fill="rgb(231,43,49)" fg:x="537" fg:w="5"/><text x="42.9708%" y="207.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="43.0390%" y="181" width="0.0796%" height="15" fill="rgb(212,106,34)" fg:x="541" fg:w="1"/><text x="43.2890%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="43.0390%" y="165" width="0.0796%" height="15" fill="rgb(206,83,17)" fg:x="541" fg:w="1"/><text x="43.2890%" y="175.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="43.1185%" y="213" width="0.0796%" height="15" fill="rgb(244,154,49)" fg:x="542" fg:w="1"/><text x="43.3685%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="43.2776%" y="181" width="0.0796%" height="15" fill="rgb(244,149,49)" fg:x="544" fg:w="1"/><text x="43.5276%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.2776%" y="165" width="0.0796%" height="15" fill="rgb(227,134,18)" fg:x="544" fg:w="1"/><text x="43.5276%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="43.2776%" y="197" width="0.2387%" height="15" fill="rgb(237,116,36)" fg:x="544" fg:w="3"/><text x="43.5276%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="43.3572%" y="181" width="0.1591%" height="15" fill="rgb(205,129,40)" fg:x="545" fg:w="2"/><text x="43.6072%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="43.3572%" y="165" width="0.1591%" height="15" fill="rgb(236,178,4)" fg:x="545" fg:w="2"/><text x="43.6072%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="43.3572%" y="149" width="0.1591%" height="15" fill="rgb(251,76,53)" fg:x="545" fg:w="2"/><text x="43.6072%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="43.5163%" y="181" width="0.0796%" height="15" fill="rgb(242,92,40)" fg:x="547" fg:w="1"/><text x="43.7663%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="43.5959%" y="181" width="0.1591%" height="15" fill="rgb(209,45,30)" fg:x="548" fg:w="2"/><text x="43.8459%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (18 samples, 1.43%)</title><rect x="42.4025%" y="229" width="1.4320%" height="15" fill="rgb(218,157,36)" fg:x="533" fg:w="18"/><text x="42.6525%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (8 samples, 0.64%)</title><rect x="43.1981%" y="213" width="0.6364%" height="15" fill="rgb(222,186,16)" fg:x="543" fg:w="8"/><text x="43.4481%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="43.5163%" y="197" width="0.3182%" height="15" fill="rgb(254,72,35)" fg:x="547" fg:w="4"/><text x="43.7663%" y="207.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="43.7550%" y="181" width="0.0796%" height="15" fill="rgb(224,25,35)" fg:x="550" fg:w="1"/><text x="44.0050%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.7550%" y="165" width="0.0796%" height="15" fill="rgb(206,135,52)" fg:x="550" fg:w="1"/><text x="44.0050%" y="175.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="43.9936%" y="181" width="0.0796%" height="15" fill="rgb(229,174,47)" fg:x="553" fg:w="1"/><text x="44.2436%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.9936%" y="165" width="0.0796%" height="15" fill="rgb(242,184,21)" fg:x="553" fg:w="1"/><text x="44.2436%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.9936%" y="149" width="0.0796%" height="15" fill="rgb(213,22,45)" fg:x="553" fg:w="1"/><text x="44.2436%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="43.9936%" y="133" width="0.0796%" height="15" fill="rgb(237,81,54)" fg:x="553" fg:w="1"/><text x="44.2436%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="43.8345%" y="229" width="0.3182%" height="15" fill="rgb(248,177,18)" fg:x="551" fg:w="4"/><text x="44.0845%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="43.8345%" y="213" width="0.3182%" height="15" fill="rgb(254,31,16)" fg:x="551" fg:w="4"/><text x="44.0845%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="43.9141%" y="197" width="0.2387%" height="15" fill="rgb(235,20,31)" fg:x="552" fg:w="3"/><text x="44.1641%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="44.0732%" y="181" width="0.0796%" height="15" fill="rgb(240,56,43)" fg:x="554" fg:w="1"/><text x="44.3232%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="44.0732%" y="165" width="0.0796%" height="15" fill="rgb(237,197,51)" fg:x="554" fg:w="1"/><text x="44.3232%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.0732%" y="149" width="0.0796%" height="15" fill="rgb(241,162,44)" fg:x="554" fg:w="1"/><text x="44.3232%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.0732%" y="133" width="0.0796%" height="15" fill="rgb(224,23,20)" fg:x="554" fg:w="1"/><text x="44.3232%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="44.1527%" y="181" width="0.0796%" height="15" fill="rgb(250,109,34)" fg:x="555" fg:w="1"/><text x="44.4027%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.1527%" y="165" width="0.0796%" height="15" fill="rgb(214,175,50)" fg:x="555" fg:w="1"/><text x="44.4027%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="44.1527%" y="149" width="0.0796%" height="15" fill="rgb(213,182,5)" fg:x="555" fg:w="1"/><text x="44.4027%" y="159.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="44.1527%" y="197" width="0.2387%" height="15" fill="rgb(209,199,19)" fg:x="555" fg:w="3"/><text x="44.4027%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="44.2323%" y="181" width="0.1591%" height="15" fill="rgb(236,224,42)" fg:x="556" fg:w="2"/><text x="44.4823%" y="191.50"></text></g><g><title>regex::regex::string::Regex::new (30 samples, 2.39%)</title><rect x="42.1639%" y="277" width="2.3866%" height="15" fill="rgb(246,226,29)" fg:x="530" fg:w="30"/><text x="42.4139%" y="287.50">re..</text></g><g><title>regex::builders::Builder::build_one_string (30 samples, 2.39%)</title><rect x="42.1639%" y="261" width="2.3866%" height="15" fill="rgb(227,223,11)" fg:x="530" fg:w="30"/><text x="42.4139%" y="271.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (30 samples, 2.39%)</title><rect x="42.1639%" y="245" width="2.3866%" height="15" fill="rgb(219,7,51)" fg:x="530" fg:w="30"/><text x="42.4139%" y="255.50">re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.40%)</title><rect x="44.1527%" y="229" width="0.3978%" height="15" fill="rgb(245,167,10)" fg:x="555" fg:w="5"/><text x="44.4027%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.40%)</title><rect x="44.1527%" y="213" width="0.3978%" height="15" fill="rgb(237,224,16)" fg:x="555" fg:w="5"/><text x="44.4027%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="44.3914%" y="197" width="0.1591%" height="15" fill="rgb(226,132,13)" fg:x="558" fg:w="2"/><text x="44.6414%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="44.5505%" y="213" width="0.1591%" height="15" fill="rgb(214,140,3)" fg:x="560" fg:w="2"/><text x="44.8005%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="44.6301%" y="197" width="0.0796%" height="15" fill="rgb(221,177,4)" fg:x="561" fg:w="1"/><text x="44.8801%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="44.5505%" y="229" width="0.3182%" height="15" fill="rgb(238,139,3)" fg:x="560" fg:w="4"/><text x="44.8005%" y="239.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="44.7096%" y="213" width="0.1591%" height="15" fill="rgb(216,17,39)" fg:x="562" fg:w="2"/><text x="44.9596%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="44.7892%" y="197" width="0.0796%" height="15" fill="rgb(238,120,9)" fg:x="563" fg:w="1"/><text x="45.0392%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.7892%" y="181" width="0.0796%" height="15" fill="rgb(244,92,53)" fg:x="563" fg:w="1"/><text x="45.0392%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.7892%" y="165" width="0.0796%" height="15" fill="rgb(224,148,33)" fg:x="563" fg:w="1"/><text x="45.0392%" y="175.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (37 samples, 2.94%)</title><rect x="42.0048%" y="293" width="2.9435%" height="15" fill="rgb(243,6,36)" fg:x="528" fg:w="37"/><text x="42.2548%" y="303.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="44.5505%" y="277" width="0.3978%" height="15" fill="rgb(230,102,11)" fg:x="560" fg:w="5"/><text x="44.8005%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="44.5505%" y="261" width="0.3978%" height="15" fill="rgb(234,148,36)" fg:x="560" fg:w="5"/><text x="44.8005%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="44.5505%" y="245" width="0.3978%" height="15" fill="rgb(251,153,25)" fg:x="560" fg:w="5"/><text x="44.8005%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="44.8687%" y="229" width="0.0796%" height="15" fill="rgb(215,129,8)" fg:x="564" fg:w="1"/><text x="45.1187%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="44.8687%" y="213" width="0.0796%" height="15" fill="rgb(224,128,35)" fg:x="564" fg:w="1"/><text x="45.1187%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="44.8687%" y="197" width="0.0796%" height="15" fill="rgb(237,56,52)" fg:x="564" fg:w="1"/><text x="45.1187%" y="207.50"></text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="44.9483%" y="293" width="0.0796%" height="15" fill="rgb(234,213,19)" fg:x="565" fg:w="1"/><text x="45.1983%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="45.0278%" y="229" width="0.0796%" height="15" fill="rgb(252,82,23)" fg:x="566" fg:w="1"/><text x="45.2778%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="45.0278%" y="245" width="0.2387%" height="15" fill="rgb(254,201,21)" fg:x="566" fg:w="3"/><text x="45.2778%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="45.1074%" y="229" width="0.1591%" height="15" fill="rgb(250,186,11)" fg:x="567" fg:w="2"/><text x="45.3574%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="45.1074%" y="213" width="0.1591%" height="15" fill="rgb(211,174,5)" fg:x="567" fg:w="2"/><text x="45.3574%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="45.1074%" y="197" width="0.1591%" height="15" fill="rgb(214,121,10)" fg:x="567" fg:w="2"/><text x="45.3574%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.1870%" y="181" width="0.0796%" height="15" fill="rgb(241,66,2)" fg:x="568" fg:w="1"/><text x="45.4370%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="45.0278%" y="277" width="0.3182%" height="15" fill="rgb(220,167,19)" fg:x="566" fg:w="4"/><text x="45.2778%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="45.0278%" y="261" width="0.3182%" height="15" fill="rgb(231,54,50)" fg:x="566" fg:w="4"/><text x="45.2778%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="45.2665%" y="245" width="0.0796%" height="15" fill="rgb(239,217,53)" fg:x="569" fg:w="1"/><text x="45.5165%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="45.2665%" y="229" width="0.0796%" height="15" fill="rgb(248,8,0)" fg:x="569" fg:w="1"/><text x="45.5165%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="45.3461%" y="261" width="0.1591%" height="15" fill="rgb(229,118,37)" fg:x="570" fg:w="2"/><text x="45.5961%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="45.3461%" y="245" width="0.1591%" height="15" fill="rgb(253,223,43)" fg:x="570" fg:w="2"/><text x="45.5961%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="45.3461%" y="229" width="0.1591%" height="15" fill="rgb(211,77,36)" fg:x="570" fg:w="2"/><text x="45.5961%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::Cache::new (1 samples, 0.08%)</title><rect x="45.8234%" y="213" width="0.0796%" height="15" fill="rgb(219,3,53)" fg:x="576" fg:w="1"/><text x="46.0734%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="46.1416%" y="181" width="0.0796%" height="15" fill="rgb(244,45,42)" fg:x="580" fg:w="1"/><text x="46.3916%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.1416%" y="165" width="0.0796%" height="15" fill="rgb(225,95,27)" fg:x="580" fg:w="1"/><text x="46.3916%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="46.1416%" y="149" width="0.0796%" height="15" fill="rgb(207,74,8)" fg:x="580" fg:w="1"/><text x="46.3916%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="46.2212%" y="181" width="0.0796%" height="15" fill="rgb(243,63,36)" fg:x="581" fg:w="1"/><text x="46.4712%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="45.9029%" y="213" width="0.4773%" height="15" fill="rgb(211,180,12)" fg:x="577" fg:w="6"/><text x="46.1529%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.48%)</title><rect x="45.9029%" y="197" width="0.4773%" height="15" fill="rgb(254,166,49)" fg:x="577" fg:w="6"/><text x="46.1529%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="46.3007%" y="181" width="0.0796%" height="15" fill="rgb(205,19,0)" fg:x="582" fg:w="1"/><text x="46.5507%" y="191.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (14 samples, 1.11%)</title><rect x="45.3461%" y="277" width="1.1138%" height="15" fill="rgb(224,172,32)" fg:x="570" fg:w="14"/><text x="45.5961%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (12 samples, 0.95%)</title><rect x="45.5052%" y="261" width="0.9547%" height="15" fill="rgb(254,136,30)" fg:x="572" fg:w="12"/><text x="45.7552%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (10 samples, 0.80%)</title><rect x="45.6643%" y="245" width="0.7955%" height="15" fill="rgb(246,19,35)" fg:x="574" fg:w="10"/><text x="45.9143%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (9 samples, 0.72%)</title><rect x="45.7438%" y="229" width="0.7160%" height="15" fill="rgb(219,24,36)" fg:x="575" fg:w="9"/><text x="45.9938%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="46.3803%" y="213" width="0.0796%" height="15" fill="rgb(251,55,1)" fg:x="583" fg:w="1"/><text x="46.6303%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="46.3803%" y="197" width="0.0796%" height="15" fill="rgb(218,117,39)" fg:x="583" fg:w="1"/><text x="46.6303%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="46.3803%" y="181" width="0.0796%" height="15" fill="rgb(248,169,11)" fg:x="583" fg:w="1"/><text x="46.6303%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.3803%" y="165" width="0.0796%" height="15" fill="rgb(244,40,44)" fg:x="583" fg:w="1"/><text x="46.6303%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="46.3803%" y="149" width="0.0796%" height="15" fill="rgb(234,62,37)" fg:x="583" fg:w="1"/><text x="46.6303%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="46.6189%" y="197" width="0.0796%" height="15" fill="rgb(207,117,42)" fg:x="586" fg:w="1"/><text x="46.8689%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="46.6189%" y="181" width="0.0796%" height="15" fill="rgb(213,43,2)" fg:x="586" fg:w="1"/><text x="46.8689%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.6189%" y="165" width="0.0796%" height="15" fill="rgb(244,202,51)" fg:x="586" fg:w="1"/><text x="46.8689%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="46.5394%" y="213" width="0.2387%" height="15" fill="rgb(253,174,46)" fg:x="585" fg:w="3"/><text x="46.7894%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.6985%" y="197" width="0.0796%" height="15" fill="rgb(251,23,1)" fg:x="587" fg:w="1"/><text x="46.9485%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="46.5394%" y="229" width="0.3182%" height="15" fill="rgb(253,26,1)" fg:x="585" fg:w="4"/><text x="46.7894%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="46.7780%" y="213" width="0.0796%" height="15" fill="rgb(216,89,31)" fg:x="588" fg:w="1"/><text x="47.0280%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="46.8576%" y="197" width="0.0796%" height="15" fill="rgb(209,109,5)" fg:x="589" fg:w="1"/><text x="47.1076%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="46.8576%" y="181" width="0.0796%" height="15" fill="rgb(229,63,13)" fg:x="589" fg:w="1"/><text x="47.1076%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.8576%" y="165" width="0.0796%" height="15" fill="rgb(238,137,54)" fg:x="589" fg:w="1"/><text x="47.1076%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="46.8576%" y="229" width="0.1591%" height="15" fill="rgb(228,1,9)" fg:x="589" fg:w="2"/><text x="47.1076%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="46.8576%" y="213" width="0.1591%" height="15" fill="rgb(249,120,48)" fg:x="589" fg:w="2"/><text x="47.1076%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="46.9372%" y="197" width="0.0796%" height="15" fill="rgb(209,72,36)" fg:x="590" fg:w="1"/><text x="47.1872%" y="207.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="46.9372%" y="181" width="0.0796%" height="15" fill="rgb(247,98,49)" fg:x="590" fg:w="1"/><text x="47.1872%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="46.9372%" y="165" width="0.0796%" height="15" fill="rgb(233,75,36)" fg:x="590" fg:w="1"/><text x="47.1872%" y="175.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="47.0167%" y="213" width="0.3182%" height="15" fill="rgb(225,14,24)" fg:x="591" fg:w="4"/><text x="47.2667%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.3349%" y="197" width="0.0796%" height="15" fill="rgb(237,193,20)" fg:x="595" fg:w="1"/><text x="47.5849%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (16 samples, 1.27%)</title><rect x="47.3349%" y="213" width="1.2729%" height="15" fill="rgb(239,122,19)" fg:x="595" fg:w="16"/><text x="47.5849%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (15 samples, 1.19%)</title><rect x="47.4145%" y="197" width="1.1933%" height="15" fill="rgb(231,220,10)" fg:x="596" fg:w="15"/><text x="47.6645%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.5282%" y="181" width="0.0796%" height="15" fill="rgb(220,66,15)" fg:x="610" fg:w="1"/><text x="48.7782%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="48.6078%" y="213" width="0.1591%" height="15" fill="rgb(215,171,52)" fg:x="611" fg:w="2"/><text x="48.8578%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="48.6874%" y="197" width="0.0796%" height="15" fill="rgb(241,169,50)" fg:x="612" fg:w="1"/><text x="48.9374%" y="207.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="48.6874%" y="181" width="0.0796%" height="15" fill="rgb(236,189,0)" fg:x="612" fg:w="1"/><text x="48.9374%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.6874%" y="165" width="0.0796%" height="15" fill="rgb(217,147,20)" fg:x="612" fg:w="1"/><text x="48.9374%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="48.7669%" y="181" width="0.0796%" height="15" fill="rgb(206,188,39)" fg:x="613" fg:w="1"/><text x="49.0169%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.7669%" y="165" width="0.0796%" height="15" fill="rgb(227,118,25)" fg:x="613" fg:w="1"/><text x="49.0169%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.7669%" y="149" width="0.0796%" height="15" fill="rgb(248,171,40)" fg:x="613" fg:w="1"/><text x="49.0169%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="48.8465%" y="181" width="0.0796%" height="15" fill="rgb(251,90,54)" fg:x="614" fg:w="1"/><text x="49.0965%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="48.8465%" y="165" width="0.0796%" height="15" fill="rgb(234,11,46)" fg:x="614" fg:w="1"/><text x="49.0965%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.8465%" y="149" width="0.0796%" height="15" fill="rgb(229,134,13)" fg:x="614" fg:w="1"/><text x="49.0965%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="48.8465%" y="133" width="0.0796%" height="15" fill="rgb(223,129,3)" fg:x="614" fg:w="1"/><text x="49.0965%" y="143.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (4 samples, 0.32%)</title><rect x="48.9260%" y="181" width="0.3182%" height="15" fill="rgb(221,124,13)" fg:x="615" fg:w="4"/><text x="49.1760%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (4 samples, 0.32%)</title><rect x="48.9260%" y="165" width="0.3182%" height="15" fill="rgb(234,3,18)" fg:x="615" fg:w="4"/><text x="49.1760%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="48.9260%" y="149" width="0.3182%" height="15" fill="rgb(249,199,20)" fg:x="615" fg:w="4"/><text x="49.1760%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="48.9260%" y="133" width="0.3182%" height="15" fill="rgb(224,134,6)" fg:x="615" fg:w="4"/><text x="49.1760%" y="143.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="48.9260%" y="117" width="0.3182%" height="15" fill="rgb(254,83,26)" fg:x="615" fg:w="4"/><text x="49.1760%" y="127.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (4 samples, 0.32%)</title><rect x="49.2442%" y="165" width="0.3182%" height="15" fill="rgb(217,88,9)" fg:x="619" fg:w="4"/><text x="49.4942%" y="175.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (4 samples, 0.32%)</title><rect x="49.2442%" y="149" width="0.3182%" height="15" fill="rgb(225,73,2)" fg:x="619" fg:w="4"/><text x="49.4942%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (11 samples, 0.88%)</title><rect x="48.7669%" y="213" width="0.8751%" height="15" fill="rgb(226,44,39)" fg:x="613" fg:w="11"/><text x="49.0169%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (11 samples, 0.88%)</title><rect x="48.7669%" y="197" width="0.8751%" height="15" fill="rgb(228,53,17)" fg:x="613" fg:w="11"/><text x="49.0169%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (5 samples, 0.40%)</title><rect x="49.2442%" y="181" width="0.3978%" height="15" fill="rgb(212,27,27)" fg:x="619" fg:w="5"/><text x="49.4942%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="49.5625%" y="165" width="0.0796%" height="15" fill="rgb(241,50,6)" fg:x="623" fg:w="1"/><text x="49.8125%" y="175.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="50.5967%" y="101" width="0.1591%" height="15" fill="rgb(225,28,51)" fg:x="636" fg:w="2"/><text x="50.8467%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="50.7558%" y="101" width="0.2387%" height="15" fill="rgb(215,33,16)" fg:x="638" fg:w="3"/><text x="51.0058%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="50.9149%" y="85" width="0.0796%" height="15" fill="rgb(243,40,39)" fg:x="640" fg:w="1"/><text x="51.1649%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.2331%" y="53" width="0.0796%" height="15" fill="rgb(225,11,42)" fg:x="644" fg:w="1"/><text x="51.4831%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (5 samples, 0.40%)</title><rect x="50.9944%" y="101" width="0.3978%" height="15" fill="rgb(241,220,38)" fg:x="641" fg:w="5"/><text x="51.2444%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="51.2331%" y="85" width="0.1591%" height="15" fill="rgb(244,52,35)" fg:x="644" fg:w="2"/><text x="51.4831%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="51.2331%" y="69" width="0.1591%" height="15" fill="rgb(246,42,46)" fg:x="644" fg:w="2"/><text x="51.4831%" y="79.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="51.3126%" y="53" width="0.0796%" height="15" fill="rgb(205,184,13)" fg:x="645" fg:w="1"/><text x="51.5626%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.3922%" y="37" width="0.0796%" height="15" fill="rgb(209,48,36)" fg:x="646" fg:w="1"/><text x="51.6422%" y="47.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="51.3922%" y="69" width="0.2387%" height="15" fill="rgb(244,34,51)" fg:x="646" fg:w="3"/><text x="51.6422%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="51.3922%" y="53" width="0.2387%" height="15" fill="rgb(221,107,33)" fg:x="646" fg:w="3"/><text x="51.6422%" y="63.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="51.4718%" y="37" width="0.1591%" height="15" fill="rgb(224,203,12)" fg:x="647" fg:w="2"/><text x="51.7218%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (6 samples, 0.48%)</title><rect x="51.3922%" y="101" width="0.4773%" height="15" fill="rgb(230,215,18)" fg:x="646" fg:w="6"/><text x="51.6422%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (6 samples, 0.48%)</title><rect x="51.3922%" y="85" width="0.4773%" height="15" fill="rgb(206,185,35)" fg:x="646" fg:w="6"/><text x="51.6422%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="51.6309%" y="69" width="0.2387%" height="15" fill="rgb(228,140,34)" fg:x="649" fg:w="3"/><text x="51.8809%" y="79.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="51.7104%" y="53" width="0.1591%" height="15" fill="rgb(208,93,13)" fg:x="650" fg:w="2"/><text x="51.9604%" y="63.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="51.8695%" y="69" width="0.1591%" height="15" fill="rgb(221,193,39)" fg:x="652" fg:w="2"/><text x="52.1195%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (61 samples, 4.85%)</title><rect x="51.8695%" y="101" width="4.8528%" height="15" fill="rgb(241,132,34)" fg:x="652" fg:w="61"/><text x="52.1195%" y="111.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (61 samples, 4.85%)</title><rect x="51.8695%" y="85" width="4.8528%" height="15" fill="rgb(221,141,10)" fg:x="652" fg:w="61"/><text x="52.1195%" y="95.50">regex_..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (59 samples, 4.69%)</title><rect x="52.0286%" y="69" width="4.6937%" height="15" fill="rgb(226,90,31)" fg:x="654" fg:w="59"/><text x="52.2786%" y="79.50">alloc..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="56.7224%" y="101" width="0.1591%" height="15" fill="rgb(243,75,5)" fg:x="713" fg:w="2"/><text x="56.9724%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.8019%" y="85" width="0.0796%" height="15" fill="rgb(227,156,21)" fg:x="714" fg:w="1"/><text x="57.0519%" y="95.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (2 samples, 0.16%)</title><rect x="56.8815%" y="101" width="0.1591%" height="15" fill="rgb(250,195,8)" fg:x="715" fg:w="2"/><text x="57.1315%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (95 samples, 7.56%)</title><rect x="49.8011%" y="133" width="7.5577%" height="15" fill="rgb(220,134,5)" fg:x="626" fg:w="95"/><text x="50.0511%" y="143.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (94 samples, 7.48%)</title><rect x="49.8807%" y="117" width="7.4781%" height="15" fill="rgb(246,106,34)" fg:x="627" fg:w="94"/><text x="50.1307%" y="127.50">regex_auto..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (4 samples, 0.32%)</title><rect x="57.0406%" y="101" width="0.3182%" height="15" fill="rgb(205,1,4)" fg:x="717" fg:w="4"/><text x="57.2906%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.2792%" y="85" width="0.0796%" height="15" fill="rgb(224,151,29)" fg:x="720" fg:w="1"/><text x="57.5292%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.2792%" y="69" width="0.0796%" height="15" fill="rgb(251,196,0)" fg:x="720" fg:w="1"/><text x="57.5292%" y="79.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (96 samples, 7.64%)</title><rect x="49.8011%" y="197" width="7.6372%" height="15" fill="rgb(212,127,0)" fg:x="626" fg:w="96"/><text x="50.0511%" y="207.50">&lt;core::ite..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (96 samples, 7.64%)</title><rect x="49.8011%" y="181" width="7.6372%" height="15" fill="rgb(236,71,53)" fg:x="626" fg:w="96"/><text x="50.0511%" y="191.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (96 samples, 7.64%)</title><rect x="49.8011%" y="165" width="7.6372%" height="15" fill="rgb(227,99,0)" fg:x="626" fg:w="96"/><text x="50.0511%" y="175.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (96 samples, 7.64%)</title><rect x="49.8011%" y="149" width="7.6372%" height="15" fill="rgb(239,89,21)" fg:x="626" fg:w="96"/><text x="50.0511%" y="159.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_bounded (1 samples, 0.08%)</title><rect x="57.3588%" y="133" width="0.0796%" height="15" fill="rgb(243,122,19)" fg:x="721" fg:w="1"/><text x="57.6088%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.8361%" y="165" width="0.0796%" height="15" fill="rgb(229,192,45)" fg:x="727" fg:w="1"/><text x="58.0861%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.8361%" y="149" width="0.0796%" height="15" fill="rgb(235,165,35)" fg:x="727" fg:w="1"/><text x="58.0861%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="57.8361%" y="133" width="0.0796%" height="15" fill="rgb(253,202,0)" fg:x="727" fg:w="1"/><text x="58.0861%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (5 samples, 0.40%)</title><rect x="57.5975%" y="181" width="0.3978%" height="15" fill="rgb(235,51,20)" fg:x="724" fg:w="5"/><text x="57.8475%" y="191.50"></text></g><g><title>regex_automata::util::look::LookMatcher::add_to_byteset (1 samples, 0.08%)</title><rect x="57.9157%" y="165" width="0.0796%" height="15" fill="rgb(218,95,46)" fg:x="728" fg:w="1"/><text x="58.1657%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="57.9952%" y="181" width="0.2387%" height="15" fill="rgb(212,81,10)" fg:x="729" fg:w="3"/><text x="58.2452%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="58.1543%" y="165" width="0.0796%" height="15" fill="rgb(240,59,0)" fg:x="731" fg:w="1"/><text x="58.4043%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.1543%" y="149" width="0.0796%" height="15" fill="rgb(212,191,42)" fg:x="731" fg:w="1"/><text x="58.4043%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.1543%" y="133" width="0.0796%" height="15" fill="rgb(233,140,3)" fg:x="731" fg:w="1"/><text x="58.4043%" y="143.50"></text></g><g><title>regex_automata::meta::strategy::new (143 samples, 11.38%)</title><rect x="47.0167%" y="229" width="11.3763%" height="15" fill="rgb(215,69,23)" fg:x="591" fg:w="143"/><text x="47.2667%" y="239.50">regex_automata::m..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (110 samples, 8.75%)</title><rect x="49.6420%" y="213" width="8.7510%" height="15" fill="rgb(240,202,20)" fg:x="624" fg:w="110"/><text x="49.8920%" y="223.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (12 samples, 0.95%)</title><rect x="57.4383%" y="197" width="0.9547%" height="15" fill="rgb(209,146,50)" fg:x="722" fg:w="12"/><text x="57.6883%" y="207.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="58.2339%" y="181" width="0.1591%" height="15" fill="rgb(253,102,54)" fg:x="732" fg:w="2"/><text x="58.4839%" y="191.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (2 samples, 0.16%)</title><rect x="58.2339%" y="165" width="0.1591%" height="15" fill="rgb(250,173,47)" fg:x="732" fg:w="2"/><text x="58.4839%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.3134%" y="149" width="0.0796%" height="15" fill="rgb(232,142,7)" fg:x="733" fg:w="1"/><text x="58.5634%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.3134%" y="133" width="0.0796%" height="15" fill="rgb(230,157,47)" fg:x="733" fg:w="1"/><text x="58.5634%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.3134%" y="117" width="0.0796%" height="15" fill="rgb(214,177,35)" fg:x="733" fg:w="1"/><text x="58.5634%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="58.3930%" y="165" width="0.3978%" height="15" fill="rgb(234,119,46)" fg:x="734" fg:w="5"/><text x="58.6430%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="58.3930%" y="149" width="0.3978%" height="15" fill="rgb(241,180,50)" fg:x="734" fg:w="5"/><text x="58.6430%" y="159.50"></text></g><g><title>__libc_malloc (5 samples, 0.40%)</title><rect x="58.3930%" y="133" width="0.3978%" height="15" fill="rgb(221,54,25)" fg:x="734" fg:w="5"/><text x="58.6430%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.48%)</title><rect x="58.3930%" y="197" width="0.4773%" height="15" fill="rgb(209,157,44)" fg:x="734" fg:w="6"/><text x="58.6430%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (6 samples, 0.48%)</title><rect x="58.3930%" y="181" width="0.4773%" height="15" fill="rgb(246,115,41)" fg:x="734" fg:w="6"/><text x="58.6430%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="58.7908%" y="165" width="0.0796%" height="15" fill="rgb(229,86,1)" fg:x="739" fg:w="1"/><text x="59.0408%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.56%)</title><rect x="58.3930%" y="229" width="0.5569%" height="15" fill="rgb(240,108,53)" fg:x="734" fg:w="7"/><text x="58.6430%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.56%)</title><rect x="58.3930%" y="213" width="0.5569%" height="15" fill="rgb(227,134,2)" fg:x="734" fg:w="7"/><text x="58.6430%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="58.8703%" y="197" width="0.0796%" height="15" fill="rgb(213,129,25)" fg:x="740" fg:w="1"/><text x="59.1203%" y="207.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (392 samples, 31.19%)</title><rect x="27.9236%" y="373" width="31.1854%" height="15" fill="rgb(226,35,21)" fg:x="351" fg:w="392"/><text x="28.1736%" y="383.50">&lt;&amp;kernel::model::EntityPtr as plugins_core::lookin..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (367 samples, 29.20%)</title><rect x="29.9125%" y="357" width="29.1965%" height="15" fill="rgb(208,129,26)" fg:x="376" fg:w="367"/><text x="30.1625%" y="367.50">plugins_core::looking::model::Unqualified::qual..</text></g><g><title>indefinite::indefinite (367 samples, 29.20%)</title><rect x="29.9125%" y="341" width="29.1965%" height="15" fill="rgb(224,83,6)" fg:x="376" fg:w="367"/><text x="30.1625%" y="351.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (367 samples, 29.20%)</title><rect x="29.9125%" y="325" width="29.1965%" height="15" fill="rgb(227,52,39)" fg:x="376" fg:w="367"/><text x="30.1625%" y="335.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (367 samples, 29.20%)</title><rect x="29.9125%" y="309" width="29.1965%" height="15" fill="rgb(241,30,17)" fg:x="376" fg:w="367"/><text x="30.1625%" y="319.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::number::Number::check (177 samples, 14.08%)</title><rect x="45.0278%" y="293" width="14.0811%" height="15" fill="rgb(246,186,42)" fg:x="566" fg:w="177"/><text x="45.2778%" y="303.50">indefinite::rules::nu..</text></g><g><title>regex::regex::string::Regex::new (159 samples, 12.65%)</title><rect x="46.4598%" y="277" width="12.6492%" height="15" fill="rgb(221,169,15)" fg:x="584" fg:w="159"/><text x="46.7098%" y="287.50">regex::regex::strin..</text></g><g><title>regex::builders::Builder::build_one_string (159 samples, 12.65%)</title><rect x="46.4598%" y="261" width="12.6492%" height="15" fill="rgb(235,108,21)" fg:x="584" fg:w="159"/><text x="46.7098%" y="271.50">regex::builders::Bu..</text></g><g><title>regex_automata::meta::regex::Builder::build (158 samples, 12.57%)</title><rect x="46.5394%" y="245" width="12.5696%" height="15" fill="rgb(219,148,30)" fg:x="585" fg:w="158"/><text x="46.7894%" y="255.50">regex_automata::met..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="58.9499%" y="229" width="0.1591%" height="15" fill="rgb(220,109,5)" fg:x="741" fg:w="2"/><text x="59.1999%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="58.9499%" y="213" width="0.1591%" height="15" fill="rgb(213,203,48)" fg:x="741" fg:w="2"/><text x="59.1999%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="59.0294%" y="197" width="0.0796%" height="15" fill="rgb(244,71,33)" fg:x="742" fg:w="1"/><text x="59.2794%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.1090%" y="357" width="0.0796%" height="15" fill="rgb(209,23,2)" fg:x="743" fg:w="1"/><text x="59.3590%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.1090%" y="341" width="0.0796%" height="15" fill="rgb(219,97,7)" fg:x="743" fg:w="1"/><text x="59.3590%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.1090%" y="325" width="0.0796%" height="15" fill="rgb(216,161,23)" fg:x="743" fg:w="1"/><text x="59.3590%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="59.1090%" y="309" width="0.0796%" height="15" fill="rgb(207,45,42)" fg:x="743" fg:w="1"/><text x="59.3590%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="59.1090%" y="293" width="0.0796%" height="15" fill="rgb(241,61,4)" fg:x="743" fg:w="1"/><text x="59.3590%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="59.1090%" y="277" width="0.0796%" height="15" fill="rgb(236,170,1)" fg:x="743" fg:w="1"/><text x="59.3590%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.1090%" y="261" width="0.0796%" height="15" fill="rgb(239,72,5)" fg:x="743" fg:w="1"/><text x="59.3590%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.1090%" y="245" width="0.0796%" height="15" fill="rgb(214,13,50)" fg:x="743" fg:w="1"/><text x="59.3590%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="59.1090%" y="229" width="0.0796%" height="15" fill="rgb(224,88,9)" fg:x="743" fg:w="1"/><text x="59.3590%" y="239.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.08%)</title><rect x="59.1090%" y="213" width="0.0796%" height="15" fill="rgb(238,192,34)" fg:x="743" fg:w="1"/><text x="59.3590%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.08%)</title><rect x="59.1090%" y="197" width="0.0796%" height="15" fill="rgb(217,203,50)" fg:x="743" fg:w="1"/><text x="59.3590%" y="207.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="59.1885%" y="277" width="0.0796%" height="15" fill="rgb(241,123,32)" fg:x="744" fg:w="1"/><text x="59.4385%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.1885%" y="261" width="0.0796%" height="15" fill="rgb(248,151,39)" fg:x="744" fg:w="1"/><text x="59.4385%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.1885%" y="245" width="0.0796%" height="15" fill="rgb(208,89,6)" fg:x="744" fg:w="1"/><text x="59.4385%" y="255.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="59.1090%" y="373" width="0.2387%" height="15" fill="rgb(254,43,26)" fg:x="743" fg:w="3"/><text x="59.3590%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="59.1885%" y="357" width="0.1591%" height="15" fill="rgb(216,158,13)" fg:x="744" fg:w="2"/><text x="59.4385%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="59.1885%" y="341" width="0.1591%" height="15" fill="rgb(212,47,37)" fg:x="744" fg:w="2"/><text x="59.4385%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="59.1885%" y="325" width="0.1591%" height="15" fill="rgb(254,16,10)" fg:x="744" fg:w="2"/><text x="59.4385%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="59.1885%" y="309" width="0.1591%" height="15" fill="rgb(223,228,16)" fg:x="744" fg:w="2"/><text x="59.4385%" y="319.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="59.1885%" y="293" width="0.1591%" height="15" fill="rgb(249,108,50)" fg:x="744" fg:w="2"/><text x="59.4385%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.2681%" y="277" width="0.0796%" height="15" fill="rgb(208,220,5)" fg:x="745" fg:w="1"/><text x="59.5181%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.2681%" y="261" width="0.0796%" height="15" fill="rgb(217,89,48)" fg:x="745" fg:w="1"/><text x="59.5181%" y="271.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (405 samples, 32.22%)</title><rect x="27.2076%" y="533" width="32.2196%" height="15" fill="rgb(212,113,41)" fg:x="342" fg:w="405"/><text x="27.4576%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (405 samples, 32.22%)</title><rect x="27.2076%" y="517" width="32.2196%" height="15" fill="rgb(231,127,5)" fg:x="342" fg:w="405"/><text x="27.4576%" y="527.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugin..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (404 samples, 32.14%)</title><rect x="27.2872%" y="501" width="32.1400%" height="15" fill="rgb(217,141,17)" fg:x="343" fg:w="404"/><text x="27.5372%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (404 samples, 32.14%)</title><rect x="27.2872%" y="485" width="32.1400%" height="15" fill="rgb(245,125,54)" fg:x="343" fg:w="404"/><text x="27.5372%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (404 samples, 32.14%)</title><rect x="27.2872%" y="469" width="32.1400%" height="15" fill="rgb(248,125,3)" fg:x="343" fg:w="404"/><text x="27.5372%" y="479.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (404 samples, 32.14%)</title><rect x="27.2872%" y="453" width="32.1400%" height="15" fill="rgb(236,119,51)" fg:x="343" fg:w="404"/><text x="27.5372%" y="463.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (404 samples, 32.14%)</title><rect x="27.2872%" y="437" width="32.1400%" height="15" fill="rgb(239,99,8)" fg:x="343" fg:w="404"/><text x="27.5372%" y="447.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOn..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (404 samples, 32.14%)</title><rect x="27.2872%" y="421" width="32.1400%" height="15" fill="rgb(224,228,4)" fg:x="343" fg:w="404"/><text x="27.5372%" y="431.50">&lt;engine::session::state::State as kernel::actions::P..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (403 samples, 32.06%)</title><rect x="27.3667%" y="405" width="32.0605%" height="15" fill="rgb(220,131,45)" fg:x="344" fg:w="403"/><text x="27.6167%" y="415.50">&lt;plugins_core::looking::actions::LookAction as kerne..</text></g><g><title>plugins_core::looking::model::new_area_observation (398 samples, 31.66%)</title><rect x="27.7645%" y="389" width="31.6627%" height="15" fill="rgb(215,62,5)" fg:x="349" fg:w="398"/><text x="28.0145%" y="399.50">plugins_core::looking::model::new_area_observation</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="59.3477%" y="373" width="0.0796%" height="15" fill="rgb(253,12,24)" fg:x="746" fg:w="1"/><text x="59.5977%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="59.5863%" y="485" width="0.0796%" height="15" fill="rgb(248,120,50)" fg:x="749" fg:w="1"/><text x="59.8363%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.7454%" y="421" width="0.0796%" height="15" fill="rgb(245,194,10)" fg:x="751" fg:w="1"/><text x="59.9954%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.7454%" y="405" width="0.0796%" height="15" fill="rgb(241,149,38)" fg:x="751" fg:w="1"/><text x="59.9954%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.7454%" y="389" width="0.0796%" height="15" fill="rgb(219,215,7)" fg:x="751" fg:w="1"/><text x="59.9954%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.7454%" y="373" width="0.0796%" height="15" fill="rgb(208,120,31)" fg:x="751" fg:w="1"/><text x="59.9954%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.7454%" y="357" width="0.0796%" height="15" fill="rgb(244,30,8)" fg:x="751" fg:w="1"/><text x="59.9954%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.7454%" y="341" width="0.0796%" height="15" fill="rgb(238,35,44)" fg:x="751" fg:w="1"/><text x="59.9954%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="59.7454%" y="325" width="0.0796%" height="15" fill="rgb(243,218,37)" fg:x="751" fg:w="1"/><text x="59.9954%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="59.7454%" y="309" width="0.0796%" height="15" fill="rgb(218,169,10)" fg:x="751" fg:w="1"/><text x="59.9954%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="59.7454%" y="293" width="0.0796%" height="15" fill="rgb(221,144,10)" fg:x="751" fg:w="1"/><text x="59.9954%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.7454%" y="277" width="0.0796%" height="15" fill="rgb(226,41,38)" fg:x="751" fg:w="1"/><text x="59.9954%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.7454%" y="261" width="0.0796%" height="15" fill="rgb(228,3,1)" fg:x="751" fg:w="1"/><text x="59.9954%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="59.7454%" y="245" width="0.0796%" height="15" fill="rgb(209,129,12)" fg:x="751" fg:w="1"/><text x="59.9954%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="59.7454%" y="229" width="0.0796%" height="15" fill="rgb(213,136,33)" fg:x="751" fg:w="1"/><text x="59.9954%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="59.7454%" y="213" width="0.0796%" height="15" fill="rgb(209,181,29)" fg:x="751" fg:w="1"/><text x="59.9954%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="59.7454%" y="197" width="0.0796%" height="15" fill="rgb(234,173,18)" fg:x="751" fg:w="1"/><text x="59.9954%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.7454%" y="181" width="0.0796%" height="15" fill="rgb(227,73,47)" fg:x="751" fg:w="1"/><text x="59.9954%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.8250%" y="405" width="0.0796%" height="15" fill="rgb(234,9,34)" fg:x="752" fg:w="1"/><text x="60.0750%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.8250%" y="389" width="0.0796%" height="15" fill="rgb(235,172,15)" fg:x="752" fg:w="1"/><text x="60.0750%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="59.8250%" y="421" width="0.2387%" height="15" fill="rgb(245,61,2)" fg:x="752" fg:w="3"/><text x="60.0750%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="59.9045%" y="405" width="0.1591%" height="15" fill="rgb(238,39,47)" fg:x="753" fg:w="2"/><text x="60.1545%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="59.9045%" y="389" width="0.1591%" height="15" fill="rgb(234,37,24)" fg:x="753" fg:w="2"/><text x="60.1545%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="59.9045%" y="373" width="0.1591%" height="15" fill="rgb(248,223,24)" fg:x="753" fg:w="2"/><text x="60.1545%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="59.9045%" y="357" width="0.1591%" height="15" fill="rgb(223,12,15)" fg:x="753" fg:w="2"/><text x="60.1545%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="59.9045%" y="341" width="0.1591%" height="15" fill="rgb(249,6,3)" fg:x="753" fg:w="2"/><text x="60.1545%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="59.9045%" y="325" width="0.1591%" height="15" fill="rgb(237,105,33)" fg:x="753" fg:w="2"/><text x="60.1545%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="60.0636%" y="325" width="0.0796%" height="15" fill="rgb(252,208,35)" fg:x="755" fg:w="1"/><text x="60.3136%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.0636%" y="309" width="0.0796%" height="15" fill="rgb(215,181,35)" fg:x="755" fg:w="1"/><text x="60.3136%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="60.0636%" y="293" width="0.0796%" height="15" fill="rgb(246,212,3)" fg:x="755" fg:w="1"/><text x="60.3136%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.0636%" y="277" width="0.0796%" height="15" fill="rgb(247,156,24)" fg:x="755" fg:w="1"/><text x="60.3136%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.1432%" y="309" width="0.0796%" height="15" fill="rgb(248,9,31)" fg:x="756" fg:w="1"/><text x="60.3932%" y="319.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="60.0636%" y="421" width="0.2387%" height="15" fill="rgb(234,26,45)" fg:x="755" fg:w="3"/><text x="60.3136%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="60.0636%" y="405" width="0.2387%" height="15" fill="rgb(249,11,32)" fg:x="755" fg:w="3"/><text x="60.3136%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="60.0636%" y="389" width="0.2387%" height="15" fill="rgb(249,162,33)" fg:x="755" fg:w="3"/><text x="60.3136%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="60.0636%" y="373" width="0.2387%" height="15" fill="rgb(232,4,32)" fg:x="755" fg:w="3"/><text x="60.3136%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="60.0636%" y="357" width="0.2387%" height="15" fill="rgb(212,5,45)" fg:x="755" fg:w="3"/><text x="60.3136%" y="367.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="60.0636%" y="341" width="0.2387%" height="15" fill="rgb(227,95,13)" fg:x="755" fg:w="3"/><text x="60.3136%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="60.1432%" y="325" width="0.1591%" height="15" fill="rgb(223,205,10)" fg:x="756" fg:w="2"/><text x="60.3932%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.2228%" y="309" width="0.0796%" height="15" fill="rgb(222,178,8)" fg:x="757" fg:w="1"/><text x="60.4728%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="60.2228%" y="293" width="0.0796%" height="15" fill="rgb(216,13,22)" fg:x="757" fg:w="1"/><text x="60.4728%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="60.3023%" y="293" width="0.0796%" height="15" fill="rgb(240,167,12)" fg:x="758" fg:w="1"/><text x="60.5523%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.3023%" y="277" width="0.0796%" height="15" fill="rgb(235,68,35)" fg:x="758" fg:w="1"/><text x="60.5523%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="60.3023%" y="261" width="0.0796%" height="15" fill="rgb(253,40,27)" fg:x="758" fg:w="1"/><text x="60.5523%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="60.3023%" y="325" width="0.2387%" height="15" fill="rgb(214,19,28)" fg:x="758" fg:w="3"/><text x="60.5523%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="60.3023%" y="309" width="0.2387%" height="15" fill="rgb(210,167,45)" fg:x="758" fg:w="3"/><text x="60.5523%" y="319.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="60.3819%" y="293" width="0.1591%" height="15" fill="rgb(232,97,40)" fg:x="759" fg:w="2"/><text x="60.6319%" y="303.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="60.4614%" y="277" width="0.0796%" height="15" fill="rgb(250,35,23)" fg:x="760" fg:w="1"/><text x="60.7114%" y="287.50"></text></g><g><title>plugins_core::tools::contained_by (13 samples, 1.03%)</title><rect x="59.5863%" y="501" width="1.0342%" height="15" fill="rgb(248,47,53)" fg:x="749" fg:w="13"/><text x="59.8363%" y="511.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (12 samples, 0.95%)</title><rect x="59.6659%" y="485" width="0.9547%" height="15" fill="rgb(226,58,50)" fg:x="750" fg:w="12"/><text x="59.9159%" y="495.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (11 samples, 0.88%)</title><rect x="59.7454%" y="469" width="0.8751%" height="15" fill="rgb(217,105,26)" fg:x="751" fg:w="11"/><text x="59.9954%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (11 samples, 0.88%)</title><rect x="59.7454%" y="453" width="0.8751%" height="15" fill="rgb(208,64,1)" fg:x="751" fg:w="11"/><text x="59.9954%" y="463.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (11 samples, 0.88%)</title><rect x="59.7454%" y="437" width="0.8751%" height="15" fill="rgb(214,80,1)" fg:x="751" fg:w="11"/><text x="59.9954%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="60.3023%" y="421" width="0.3182%" height="15" fill="rgb(206,175,26)" fg:x="758" fg:w="4"/><text x="60.5523%" y="431.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="60.3023%" y="405" width="0.3182%" height="15" fill="rgb(235,156,37)" fg:x="758" fg:w="4"/><text x="60.5523%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="60.3023%" y="389" width="0.3182%" height="15" fill="rgb(213,100,9)" fg:x="758" fg:w="4"/><text x="60.5523%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="60.3023%" y="373" width="0.3182%" height="15" fill="rgb(241,15,13)" fg:x="758" fg:w="4"/><text x="60.5523%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="60.3023%" y="357" width="0.3182%" height="15" fill="rgb(205,97,43)" fg:x="758" fg:w="4"/><text x="60.5523%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="60.3023%" y="341" width="0.3182%" height="15" fill="rgb(216,106,32)" fg:x="758" fg:w="4"/><text x="60.5523%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="60.5410%" y="325" width="0.0796%" height="15" fill="rgb(226,200,8)" fg:x="761" fg:w="1"/><text x="60.7910%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="60.5410%" y="309" width="0.0796%" height="15" fill="rgb(244,54,29)" fg:x="761" fg:w="1"/><text x="60.7910%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.5410%" y="293" width="0.0796%" height="15" fill="rgb(252,169,12)" fg:x="761" fg:w="1"/><text x="60.7910%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="60.7001%" y="469" width="0.0796%" height="15" fill="rgb(231,199,11)" fg:x="763" fg:w="1"/><text x="60.9501%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="60.7001%" y="453" width="0.0796%" height="15" fill="rgb(233,191,18)" fg:x="763" fg:w="1"/><text x="60.9501%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="60.7001%" y="437" width="0.0796%" height="15" fill="rgb(215,83,47)" fg:x="763" fg:w="1"/><text x="60.9501%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.7796%" y="469" width="0.0796%" height="15" fill="rgb(251,67,19)" fg:x="764" fg:w="1"/><text x="61.0296%" y="479.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::de::Deserialize for kernel::model::base::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="60.8592%" y="437" width="0.0796%" height="15" fill="rgb(240,7,20)" fg:x="765" fg:w="1"/><text x="61.1092%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.8592%" y="421" width="0.0796%" height="15" fill="rgb(210,150,26)" fg:x="765" fg:w="1"/><text x="61.1092%" y="431.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.40%)</title><rect x="60.7001%" y="485" width="0.3978%" height="15" fill="rgb(228,75,42)" fg:x="763" fg:w="5"/><text x="60.9501%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="60.8592%" y="469" width="0.2387%" height="15" fill="rgb(237,134,48)" fg:x="765" fg:w="3"/><text x="61.1092%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="60.8592%" y="453" width="0.2387%" height="15" fill="rgb(205,80,50)" fg:x="765" fg:w="3"/><text x="61.1092%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="60.9387%" y="437" width="0.1591%" height="15" fill="rgb(217,74,48)" fg:x="766" fg:w="2"/><text x="61.1887%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="60.9387%" y="421" width="0.1591%" height="15" fill="rgb(205,82,50)" fg:x="766" fg:w="2"/><text x="61.1887%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="60.9387%" y="405" width="0.1591%" height="15" fill="rgb(228,1,33)" fg:x="766" fg:w="2"/><text x="61.1887%" y="415.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (2 samples, 0.16%)</title><rect x="60.9387%" y="389" width="0.1591%" height="15" fill="rgb(214,50,23)" fg:x="766" fg:w="2"/><text x="61.1887%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.0183%" y="373" width="0.0796%" height="15" fill="rgb(210,62,9)" fg:x="767" fg:w="1"/><text x="61.2683%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.0183%" y="357" width="0.0796%" height="15" fill="rgb(210,104,37)" fg:x="767" fg:w="1"/><text x="61.2683%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.0183%" y="341" width="0.0796%" height="15" fill="rgb(232,104,43)" fg:x="767" fg:w="1"/><text x="61.2683%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.0183%" y="325" width="0.0796%" height="15" fill="rgb(244,52,6)" fg:x="767" fg:w="1"/><text x="61.2683%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="61.0183%" y="309" width="0.0796%" height="15" fill="rgb(211,174,52)" fg:x="767" fg:w="1"/><text x="61.2683%" y="319.50"></text></g><g><title>plugins_core::tools::occupied_by (7 samples, 0.56%)</title><rect x="60.6205%" y="501" width="0.5569%" height="15" fill="rgb(229,48,4)" fg:x="762" fg:w="7"/><text x="60.8705%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="61.0979%" y="485" width="0.0796%" height="15" fill="rgb(205,155,16)" fg:x="768" fg:w="1"/><text x="61.3479%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="61.0979%" y="469" width="0.0796%" height="15" fill="rgb(211,141,53)" fg:x="768" fg:w="1"/><text x="61.3479%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.0979%" y="453" width="0.0796%" height="15" fill="rgb(240,148,11)" fg:x="768" fg:w="1"/><text x="61.3479%" y="463.50"></text></g><g><title>engine::session::Session::captured (456 samples, 36.28%)</title><rect x="24.9801%" y="677" width="36.2768%" height="15" fill="rgb(214,45,23)" fg:x="314" fg:w="456"/><text x="25.2301%" y="687.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (454 samples, 36.12%)</title><rect x="25.1392%" y="661" width="36.1177%" height="15" fill="rgb(248,74,26)" fg:x="316" fg:w="454"/><text x="25.3892%" y="671.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (450 samples, 35.80%)</title><rect x="25.4574%" y="645" width="35.7995%" height="15" fill="rgb(218,121,16)" fg:x="320" fg:w="450"/><text x="25.7074%" y="655.50">tracing_core::dispatcher::with_default</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (450 samples, 35.80%)</title><rect x="25.4574%" y="629" width="35.7995%" height="15" fill="rgb(218,10,47)" fg:x="320" fg:w="450"/><text x="25.7074%" y="639.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::..</text></g><g><title>kernel::plugins::mw::apply_middleware (450 samples, 35.80%)</title><rect x="25.4574%" y="613" width="35.7995%" height="15" fill="rgb(227,99,14)" fg:x="320" fg:w="450"/><text x="25.7074%" y="623.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (450 samples, 35.80%)</title><rect x="25.4574%" y="597" width="35.7995%" height="15" fill="rgb(229,83,46)" fg:x="320" fg:w="450"/><text x="25.7074%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (450 samples, 35.80%)</title><rect x="25.4574%" y="581" width="35.7995%" height="15" fill="rgb(228,25,1)" fg:x="320" fg:w="450"/><text x="25.7074%" y="591.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (429 samples, 34.13%)</title><rect x="27.1281%" y="565" width="34.1289%" height="15" fill="rgb(252,190,15)" fg:x="341" fg:w="429"/><text x="27.3781%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (429 samples, 34.13%)</title><rect x="27.1281%" y="549" width="34.1289%" height="15" fill="rgb(213,103,51)" fg:x="341" fg:w="429"/><text x="27.3781%" y="559.50">&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::M..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (23 samples, 1.83%)</title><rect x="59.4272%" y="533" width="1.8298%" height="15" fill="rgb(220,38,44)" fg:x="747" fg:w="23"/><text x="59.6772%" y="543.50">p..</text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (22 samples, 1.75%)</title><rect x="59.5068%" y="517" width="1.7502%" height="15" fill="rgb(210,45,26)" fg:x="748" fg:w="22"/><text x="59.7568%" y="527.50"></text></g><g><title>plugins_core::tools::worn_by (1 samples, 0.08%)</title><rect x="61.1774%" y="501" width="0.0796%" height="15" fill="rgb(205,95,48)" fg:x="769" fg:w="1"/><text x="61.4274%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="61.1774%" y="485" width="0.0796%" height="15" fill="rgb(225,179,37)" fg:x="769" fg:w="1"/><text x="61.4274%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.1774%" y="469" width="0.0796%" height="15" fill="rgb(230,209,3)" fg:x="769" fg:w="1"/><text x="61.4274%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.1774%" y="453" width="0.0796%" height="15" fill="rgb(248,12,46)" fg:x="769" fg:w="1"/><text x="61.4274%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="61.1774%" y="437" width="0.0796%" height="15" fill="rgb(234,18,0)" fg:x="769" fg:w="1"/><text x="61.4274%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="61.2570%" y="613" width="0.1591%" height="15" fill="rgb(238,197,14)" fg:x="770" fg:w="2"/><text x="61.5070%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="61.2570%" y="597" width="0.1591%" height="15" fill="rgb(251,162,48)" fg:x="770" fg:w="2"/><text x="61.5070%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.3365%" y="581" width="0.0796%" height="15" fill="rgb(237,73,42)" fg:x="771" fg:w="1"/><text x="61.5865%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="61.2570%" y="629" width="0.2387%" height="15" fill="rgb(211,108,8)" fg:x="770" fg:w="3"/><text x="61.5070%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.4161%" y="613" width="0.0796%" height="15" fill="rgb(213,45,22)" fg:x="772" fg:w="1"/><text x="61.6661%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.4161%" y="597" width="0.0796%" height="15" fill="rgb(252,154,5)" fg:x="772" fg:w="1"/><text x="61.6661%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="61.4161%" y="581" width="0.0796%" height="15" fill="rgb(221,79,52)" fg:x="772" fg:w="1"/><text x="61.6661%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="61.4161%" y="565" width="0.0796%" height="15" fill="rgb(229,220,36)" fg:x="772" fg:w="1"/><text x="61.6661%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="61.4161%" y="549" width="0.0796%" height="15" fill="rgb(211,17,16)" fg:x="772" fg:w="1"/><text x="61.6661%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.4161%" y="533" width="0.0796%" height="15" fill="rgb(222,55,31)" fg:x="772" fg:w="1"/><text x="61.6661%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.4161%" y="517" width="0.0796%" height="15" fill="rgb(221,221,31)" fg:x="772" fg:w="1"/><text x="61.6661%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="61.4161%" y="501" width="0.0796%" height="15" fill="rgb(227,168,26)" fg:x="772" fg:w="1"/><text x="61.6661%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="61.4161%" y="485" width="0.0796%" height="15" fill="rgb(224,139,9)" fg:x="772" fg:w="1"/><text x="61.6661%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="61.4161%" y="469" width="0.0796%" height="15" fill="rgb(254,172,0)" fg:x="772" fg:w="1"/><text x="61.6661%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="61.4161%" y="453" width="0.0796%" height="15" fill="rgb(235,203,1)" fg:x="772" fg:w="1"/><text x="61.6661%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.4161%" y="437" width="0.0796%" height="15" fill="rgb(216,205,24)" fg:x="772" fg:w="1"/><text x="61.6661%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="61.4956%" y="485" width="0.0796%" height="15" fill="rgb(233,24,6)" fg:x="773" fg:w="1"/><text x="61.7456%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="61.4956%" y="469" width="0.0796%" height="15" fill="rgb(244,110,9)" fg:x="773" fg:w="1"/><text x="61.7456%" y="479.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="61.4956%" y="453" width="0.0796%" height="15" fill="rgb(239,222,42)" fg:x="773" fg:w="1"/><text x="61.7456%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.4956%" y="437" width="0.0796%" height="15" fill="rgb(218,145,13)" fg:x="773" fg:w="1"/><text x="61.7456%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.4956%" y="421" width="0.0796%" height="15" fill="rgb(207,69,11)" fg:x="773" fg:w="1"/><text x="61.7456%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="61.4956%" y="581" width="0.1591%" height="15" fill="rgb(220,223,22)" fg:x="773" fg:w="2"/><text x="61.7456%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="61.4956%" y="565" width="0.1591%" height="15" fill="rgb(245,102,5)" fg:x="773" fg:w="2"/><text x="61.7456%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="61.4956%" y="549" width="0.1591%" height="15" fill="rgb(211,148,2)" fg:x="773" fg:w="2"/><text x="61.7456%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="61.4956%" y="533" width="0.1591%" height="15" fill="rgb(241,13,44)" fg:x="773" fg:w="2"/><text x="61.7456%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="61.4956%" y="517" width="0.1591%" height="15" fill="rgb(219,137,21)" fg:x="773" fg:w="2"/><text x="61.7456%" y="527.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="61.4956%" y="501" width="0.1591%" height="15" fill="rgb(242,206,5)" fg:x="773" fg:w="2"/><text x="61.7456%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.5752%" y="485" width="0.0796%" height="15" fill="rgb(217,114,22)" fg:x="774" fg:w="1"/><text x="61.8252%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.5752%" y="469" width="0.0796%" height="15" fill="rgb(253,206,42)" fg:x="774" fg:w="1"/><text x="61.8252%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="61.4956%" y="629" width="0.2387%" height="15" fill="rgb(236,102,18)" fg:x="773" fg:w="3"/><text x="61.7456%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="61.4956%" y="613" width="0.2387%" height="15" fill="rgb(208,59,49)" fg:x="773" fg:w="3"/><text x="61.7456%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="61.4956%" y="597" width="0.2387%" height="15" fill="rgb(215,194,28)" fg:x="773" fg:w="3"/><text x="61.7456%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.6547%" y="581" width="0.0796%" height="15" fill="rgb(243,207,11)" fg:x="775" fg:w="1"/><text x="61.9047%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.6547%" y="565" width="0.0796%" height="15" fill="rgb(254,179,35)" fg:x="775" fg:w="1"/><text x="61.9047%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="61.6547%" y="549" width="0.0796%" height="15" fill="rgb(235,97,3)" fg:x="775" fg:w="1"/><text x="61.9047%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="61.6547%" y="533" width="0.0796%" height="15" fill="rgb(215,155,33)" fg:x="775" fg:w="1"/><text x="61.9047%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="61.6547%" y="517" width="0.0796%" height="15" fill="rgb(223,128,12)" fg:x="775" fg:w="1"/><text x="61.9047%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="61.6547%" y="501" width="0.0796%" height="15" fill="rgb(208,157,18)" fg:x="775" fg:w="1"/><text x="61.9047%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="61.6547%" y="485" width="0.0796%" height="15" fill="rgb(249,70,54)" fg:x="775" fg:w="1"/><text x="61.9047%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="61.6547%" y="469" width="0.0796%" height="15" fill="rgb(244,118,24)" fg:x="775" fg:w="1"/><text x="61.9047%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="61.8138%" y="565" width="0.0796%" height="15" fill="rgb(211,54,0)" fg:x="777" fg:w="1"/><text x="62.0638%" y="575.50"></text></g><g><title>engine::session::internal::Added::find_refs (10 samples, 0.80%)</title><rect x="61.2570%" y="661" width="0.7955%" height="15" fill="rgb(245,137,45)" fg:x="770" fg:w="10"/><text x="61.5070%" y="671.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (10 samples, 0.80%)</title><rect x="61.2570%" y="645" width="0.7955%" height="15" fill="rgb(232,154,31)" fg:x="770" fg:w="10"/><text x="61.5070%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="61.7343%" y="629" width="0.3182%" height="15" fill="rgb(253,6,39)" fg:x="776" fg:w="4"/><text x="61.9843%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="61.7343%" y="613" width="0.3182%" height="15" fill="rgb(234,183,24)" fg:x="776" fg:w="4"/><text x="61.9843%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="61.8138%" y="597" width="0.2387%" height="15" fill="rgb(252,84,40)" fg:x="777" fg:w="3"/><text x="62.0638%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="61.8138%" y="581" width="0.2387%" height="15" fill="rgb(224,65,2)" fg:x="777" fg:w="3"/><text x="62.0638%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="61.8934%" y="565" width="0.1591%" height="15" fill="rgb(229,38,24)" fg:x="778" fg:w="2"/><text x="62.1434%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="61.8934%" y="549" width="0.1591%" height="15" fill="rgb(218,131,50)" fg:x="778" fg:w="2"/><text x="62.1434%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="61.9730%" y="533" width="0.0796%" height="15" fill="rgb(233,106,18)" fg:x="779" fg:w="1"/><text x="62.2230%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.0525%" y="645" width="0.0796%" height="15" fill="rgb(220,216,11)" fg:x="780" fg:w="1"/><text x="62.3025%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.0525%" y="629" width="0.0796%" height="15" fill="rgb(251,100,45)" fg:x="780" fg:w="1"/><text x="62.3025%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.0525%" y="613" width="0.0796%" height="15" fill="rgb(235,143,32)" fg:x="780" fg:w="1"/><text x="62.3025%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.0525%" y="597" width="0.0796%" height="15" fill="rgb(248,124,34)" fg:x="780" fg:w="1"/><text x="62.3025%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.0525%" y="581" width="0.0796%" height="15" fill="rgb(225,221,4)" fg:x="780" fg:w="1"/><text x="62.3025%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="62.1321%" y="645" width="0.0796%" height="15" fill="rgb(242,27,43)" fg:x="781" fg:w="1"/><text x="62.3821%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.1321%" y="629" width="0.0796%" height="15" fill="rgb(227,54,8)" fg:x="781" fg:w="1"/><text x="62.3821%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.1321%" y="613" width="0.0796%" height="15" fill="rgb(253,139,49)" fg:x="781" fg:w="1"/><text x="62.3821%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="62.1321%" y="597" width="0.0796%" height="15" fill="rgb(231,26,43)" fg:x="781" fg:w="1"/><text x="62.3821%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.1321%" y="581" width="0.0796%" height="15" fill="rgb(207,121,39)" fg:x="781" fg:w="1"/><text x="62.3821%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.1321%" y="565" width="0.0796%" height="15" fill="rgb(223,101,35)" fg:x="781" fg:w="1"/><text x="62.3821%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.1321%" y="549" width="0.0796%" height="15" fill="rgb(232,87,23)" fg:x="781" fg:w="1"/><text x="62.3821%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.2912%" y="565" width="0.0796%" height="15" fill="rgb(225,180,29)" fg:x="783" fg:w="1"/><text x="62.5412%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="62.3707%" y="549" width="0.0796%" height="15" fill="rgb(225,25,17)" fg:x="784" fg:w="1"/><text x="62.6207%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.3707%" y="533" width="0.0796%" height="15" fill="rgb(223,8,52)" fg:x="784" fg:w="1"/><text x="62.6207%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="62.3707%" y="517" width="0.0796%" height="15" fill="rgb(246,42,21)" fg:x="784" fg:w="1"/><text x="62.6207%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.3707%" y="501" width="0.0796%" height="15" fill="rgb(205,64,43)" fg:x="784" fg:w="1"/><text x="62.6207%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="62.4503%" y="549" width="0.0796%" height="15" fill="rgb(221,160,13)" fg:x="785" fg:w="1"/><text x="62.7003%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="62.4503%" y="533" width="0.0796%" height="15" fill="rgb(239,58,35)" fg:x="785" fg:w="1"/><text x="62.7003%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="62.4503%" y="517" width="0.0796%" height="15" fill="rgb(251,26,40)" fg:x="785" fg:w="1"/><text x="62.7003%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="62.4503%" y="501" width="0.0796%" height="15" fill="rgb(247,0,4)" fg:x="785" fg:w="1"/><text x="62.7003%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.4503%" y="485" width="0.0796%" height="15" fill="rgb(218,130,10)" fg:x="785" fg:w="1"/><text x="62.7003%" y="495.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.40%)</title><rect x="62.2116%" y="645" width="0.3978%" height="15" fill="rgb(239,32,7)" fg:x="782" fg:w="5"/><text x="62.4616%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="62.2116%" y="629" width="0.3978%" height="15" fill="rgb(210,192,24)" fg:x="782" fg:w="5"/><text x="62.4616%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="62.2116%" y="613" width="0.3978%" height="15" fill="rgb(226,212,17)" fg:x="782" fg:w="5"/><text x="62.4616%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="62.2912%" y="597" width="0.3182%" height="15" fill="rgb(219,201,28)" fg:x="783" fg:w="4"/><text x="62.5412%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="62.2912%" y="581" width="0.3182%" height="15" fill="rgb(235,207,41)" fg:x="783" fg:w="4"/><text x="62.5412%" y="591.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="62.3707%" y="565" width="0.2387%" height="15" fill="rgb(241,95,54)" fg:x="784" fg:w="3"/><text x="62.6207%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.5298%" y="549" width="0.0796%" height="15" fill="rgb(248,12,23)" fg:x="786" fg:w="1"/><text x="62.7798%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.5298%" y="533" width="0.0796%" height="15" fill="rgb(228,173,4)" fg:x="786" fg:w="1"/><text x="62.7798%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="62.5298%" y="517" width="0.0796%" height="15" fill="rgb(254,99,5)" fg:x="786" fg:w="1"/><text x="62.7798%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.5298%" y="501" width="0.0796%" height="15" fill="rgb(212,184,17)" fg:x="786" fg:w="1"/><text x="62.7798%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.5298%" y="485" width="0.0796%" height="15" fill="rgb(252,174,1)" fg:x="786" fg:w="1"/><text x="62.7798%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="62.5298%" y="469" width="0.0796%" height="15" fill="rgb(241,118,51)" fg:x="786" fg:w="1"/><text x="62.7798%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (18 samples, 1.43%)</title><rect x="61.2570%" y="677" width="1.4320%" height="15" fill="rgb(227,94,47)" fg:x="770" fg:w="18"/><text x="61.5070%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (8 samples, 0.64%)</title><rect x="62.0525%" y="661" width="0.6364%" height="15" fill="rgb(229,104,2)" fg:x="780" fg:w="8"/><text x="62.3025%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="62.6094%" y="645" width="0.0796%" height="15" fill="rgb(219,28,31)" fg:x="787" fg:w="1"/><text x="62.8594%" y="655.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="62.6094%" y="629" width="0.0796%" height="15" fill="rgb(233,109,36)" fg:x="787" fg:w="1"/><text x="62.8594%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="62.6094%" y="613" width="0.0796%" height="15" fill="rgb(246,88,11)" fg:x="787" fg:w="1"/><text x="62.8594%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.6094%" y="597" width="0.0796%" height="15" fill="rgb(209,212,17)" fg:x="787" fg:w="1"/><text x="62.8594%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="62.6094%" y="581" width="0.0796%" height="15" fill="rgb(243,59,29)" fg:x="787" fg:w="1"/><text x="62.8594%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.7685%" y="629" width="0.0796%" height="15" fill="rgb(244,205,48)" fg:x="789" fg:w="1"/><text x="63.0185%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.7685%" y="613" width="0.0796%" height="15" fill="rgb(227,30,6)" fg:x="789" fg:w="1"/><text x="63.0185%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.7685%" y="597" width="0.0796%" height="15" fill="rgb(220,205,48)" fg:x="789" fg:w="1"/><text x="63.0185%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.7685%" y="581" width="0.0796%" height="15" fill="rgb(250,94,14)" fg:x="789" fg:w="1"/><text x="63.0185%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.7685%" y="565" width="0.0796%" height="15" fill="rgb(216,119,42)" fg:x="789" fg:w="1"/><text x="63.0185%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="62.8481%" y="629" width="0.0796%" height="15" fill="rgb(232,155,0)" fg:x="790" fg:w="1"/><text x="63.0981%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.0867%" y="581" width="0.0796%" height="15" fill="rgb(212,24,32)" fg:x="793" fg:w="1"/><text x="63.3367%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.2458%" y="501" width="0.0796%" height="15" fill="rgb(216,69,20)" fg:x="795" fg:w="1"/><text x="63.4958%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="63.1663%" y="533" width="0.3978%" height="15" fill="rgb(229,73,31)" fg:x="794" fg:w="5"/><text x="63.4163%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="63.2458%" y="517" width="0.3182%" height="15" fill="rgb(224,219,20)" fg:x="795" fg:w="4"/><text x="63.4958%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="63.3254%" y="501" width="0.2387%" height="15" fill="rgb(215,146,41)" fg:x="796" fg:w="3"/><text x="63.5754%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="63.4845%" y="485" width="0.0796%" height="15" fill="rgb(244,71,31)" fg:x="798" fg:w="1"/><text x="63.7345%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (6 samples, 0.48%)</title><rect x="63.1663%" y="581" width="0.4773%" height="15" fill="rgb(224,24,11)" fg:x="794" fg:w="6"/><text x="63.4163%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="63.1663%" y="565" width="0.4773%" height="15" fill="rgb(229,76,15)" fg:x="794" fg:w="6"/><text x="63.4163%" y="575.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (6 samples, 0.48%)</title><rect x="63.1663%" y="549" width="0.4773%" height="15" fill="rgb(209,93,2)" fg:x="794" fg:w="6"/><text x="63.4163%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.5640%" y="533" width="0.0796%" height="15" fill="rgb(216,200,50)" fg:x="799" fg:w="1"/><text x="63.8140%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.5640%" y="517" width="0.0796%" height="15" fill="rgb(211,67,34)" fg:x="799" fg:w="1"/><text x="63.8140%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="63.5640%" y="501" width="0.0796%" height="15" fill="rgb(225,87,47)" fg:x="799" fg:w="1"/><text x="63.8140%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.5640%" y="485" width="0.0796%" height="15" fill="rgb(217,185,16)" fg:x="799" fg:w="1"/><text x="63.8140%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="63.6436%" y="549" width="0.0796%" height="15" fill="rgb(205,0,0)" fg:x="800" fg:w="1"/><text x="63.8936%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.6436%" y="533" width="0.0796%" height="15" fill="rgb(207,116,45)" fg:x="800" fg:w="1"/><text x="63.8936%" y="543.50"></text></g><g><title>kernel::model::entity::Entity::from_value (11 samples, 0.88%)</title><rect x="62.9276%" y="629" width="0.8751%" height="15" fill="rgb(221,156,26)" fg:x="791" fg:w="11"/><text x="63.1776%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (11 samples, 0.88%)</title><rect x="62.9276%" y="613" width="0.8751%" height="15" fill="rgb(213,140,4)" fg:x="791" fg:w="11"/><text x="63.1776%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (11 samples, 0.88%)</title><rect x="62.9276%" y="597" width="0.8751%" height="15" fill="rgb(231,224,15)" fg:x="791" fg:w="11"/><text x="63.1776%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="63.6436%" y="581" width="0.1591%" height="15" fill="rgb(244,76,20)" fg:x="800" fg:w="2"/><text x="63.8936%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="63.6436%" y="565" width="0.1591%" height="15" fill="rgb(238,117,7)" fg:x="800" fg:w="2"/><text x="63.8936%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="63.7232%" y="549" width="0.0796%" height="15" fill="rgb(235,1,10)" fg:x="801" fg:w="1"/><text x="63.9732%" y="559.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="63.8027%" y="629" width="0.0796%" height="15" fill="rgb(216,165,6)" fg:x="802" fg:w="1"/><text x="64.0527%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="63.8027%" y="613" width="0.0796%" height="15" fill="rgb(246,91,35)" fg:x="802" fg:w="1"/><text x="64.0527%" y="623.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="63.8823%" y="613" width="0.0796%" height="15" fill="rgb(228,96,24)" fg:x="803" fg:w="1"/><text x="64.1323%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.9618%" y="533" width="0.0796%" height="15" fill="rgb(254,217,53)" fg:x="804" fg:w="1"/><text x="64.2118%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.9618%" y="517" width="0.0796%" height="15" fill="rgb(209,60,0)" fg:x="804" fg:w="1"/><text x="64.2118%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.9618%" y="501" width="0.0796%" height="15" fill="rgb(250,93,26)" fg:x="804" fg:w="1"/><text x="64.2118%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.9618%" y="485" width="0.0796%" height="15" fill="rgb(211,9,40)" fg:x="804" fg:w="1"/><text x="64.2118%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.9618%" y="469" width="0.0796%" height="15" fill="rgb(242,57,20)" fg:x="804" fg:w="1"/><text x="64.2118%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.9618%" y="453" width="0.0796%" height="15" fill="rgb(248,85,48)" fg:x="804" fg:w="1"/><text x="64.2118%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (806 samples, 64.12%)</title><rect x="0.0000%" y="757" width="64.1209%" height="15" fill="rgb(212,117,2)" fg:x="0" fg:w="806"/><text x="0.2500%" y="767.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (806 samples, 64.12%)</title><rect x="0.0000%" y="741" width="64.1209%" height="15" fill="rgb(243,19,3)" fg:x="0" fg:w="806"/><text x="0.2500%" y="751.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (806 samples, 64.12%)</title><rect x="0.0000%" y="725" width="64.1209%" height="15" fill="rgb(232,217,24)" fg:x="0" fg:w="806"/><text x="0.2500%" y="735.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (496 samples, 39.46%)</title><rect x="24.6619%" y="709" width="39.4590%" height="15" fill="rgb(224,175,40)" fg:x="310" fg:w="496"/><text x="24.9119%" y="719.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (496 samples, 39.46%)</title><rect x="24.6619%" y="693" width="39.4590%" height="15" fill="rgb(212,162,32)" fg:x="310" fg:w="496"/><text x="24.9119%" y="703.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (18 samples, 1.43%)</title><rect x="62.6889%" y="677" width="1.4320%" height="15" fill="rgb(215,9,4)" fg:x="788" fg:w="18"/><text x="62.9389%" y="687.50"></text></g><g><title>engine::session::Session::load_entity (18 samples, 1.43%)</title><rect x="62.6889%" y="661" width="1.4320%" height="15" fill="rgb(242,42,7)" fg:x="788" fg:w="18"/><text x="62.9389%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (17 samples, 1.35%)</title><rect x="62.7685%" y="645" width="1.3524%" height="15" fill="rgb(242,184,45)" fg:x="789" fg:w="17"/><text x="63.0185%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="63.8823%" y="629" width="0.2387%" height="15" fill="rgb(228,111,51)" fg:x="803" fg:w="3"/><text x="64.1323%" y="639.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="63.9618%" y="613" width="0.1591%" height="15" fill="rgb(236,147,17)" fg:x="804" fg:w="2"/><text x="64.2118%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="63.9618%" y="597" width="0.1591%" height="15" fill="rgb(210,75,22)" fg:x="804" fg:w="2"/><text x="64.2118%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="63.9618%" y="581" width="0.1591%" height="15" fill="rgb(217,159,45)" fg:x="804" fg:w="2"/><text x="64.2118%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="63.9618%" y="565" width="0.1591%" height="15" fill="rgb(245,165,53)" fg:x="804" fg:w="2"/><text x="64.2118%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="63.9618%" y="549" width="0.1591%" height="15" fill="rgb(251,190,50)" fg:x="804" fg:w="2"/><text x="64.2118%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="64.0414%" y="533" width="0.0796%" height="15" fill="rgb(208,203,29)" fg:x="805" fg:w="1"/><text x="64.2914%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.2005%" y="693" width="0.0796%" height="15" fill="rgb(207,209,35)" fg:x="807" fg:w="1"/><text x="64.4505%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="64.2005%" y="709" width="0.1591%" height="15" fill="rgb(230,144,49)" fg:x="807" fg:w="2"/><text x="64.4505%" y="719.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="64.2800%" y="693" width="0.0796%" height="15" fill="rgb(229,31,6)" fg:x="808" fg:w="1"/><text x="64.5300%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="64.3596%" y="693" width="0.0796%" height="15" fill="rgb(251,129,24)" fg:x="809" fg:w="1"/><text x="64.6096%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="64.3596%" y="677" width="0.0796%" height="15" fill="rgb(235,105,15)" fg:x="809" fg:w="1"/><text x="64.6096%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="64.3596%" y="661" width="0.0796%" height="15" fill="rgb(216,52,43)" fg:x="809" fg:w="1"/><text x="64.6096%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.3596%" y="645" width="0.0796%" height="15" fill="rgb(238,144,41)" fg:x="809" fg:w="1"/><text x="64.6096%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.4391%" y="629" width="0.0796%" height="15" fill="rgb(243,63,9)" fg:x="810" fg:w="1"/><text x="64.6891%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.5187%" y="613" width="0.0796%" height="15" fill="rgb(246,208,1)" fg:x="811" fg:w="1"/><text x="64.7687%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="64.5982%" y="613" width="0.0796%" height="15" fill="rgb(233,182,18)" fg:x="812" fg:w="1"/><text x="64.8482%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.5982%" y="597" width="0.0796%" height="15" fill="rgb(242,224,8)" fg:x="812" fg:w="1"/><text x="64.8482%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.6778%" y="597" width="0.0796%" height="15" fill="rgb(243,54,37)" fg:x="813" fg:w="1"/><text x="64.9278%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="64.7574%" y="581" width="0.0796%" height="15" fill="rgb(233,192,12)" fg:x="814" fg:w="1"/><text x="65.0074%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.7574%" y="565" width="0.0796%" height="15" fill="rgb(251,192,53)" fg:x="814" fg:w="1"/><text x="65.0074%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="64.4391%" y="645" width="0.4773%" height="15" fill="rgb(246,141,26)" fg:x="810" fg:w="6"/><text x="64.6891%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="64.5187%" y="629" width="0.3978%" height="15" fill="rgb(239,195,19)" fg:x="811" fg:w="5"/><text x="64.7687%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="64.6778%" y="613" width="0.2387%" height="15" fill="rgb(241,16,39)" fg:x="813" fg:w="3"/><text x="64.9278%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="64.7574%" y="597" width="0.1591%" height="15" fill="rgb(223,13,53)" fg:x="814" fg:w="2"/><text x="65.0074%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="64.8369%" y="581" width="0.0796%" height="15" fill="rgb(214,227,0)" fg:x="815" fg:w="1"/><text x="65.0869%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="64.8369%" y="565" width="0.0796%" height="15" fill="rgb(228,103,26)" fg:x="815" fg:w="1"/><text x="65.0869%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.0756%" y="581" width="0.0796%" height="15" fill="rgb(254,177,53)" fg:x="818" fg:w="1"/><text x="65.3256%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.0756%" y="565" width="0.0796%" height="15" fill="rgb(208,201,34)" fg:x="818" fg:w="1"/><text x="65.3256%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.0756%" y="549" width="0.0796%" height="15" fill="rgb(212,39,5)" fg:x="818" fg:w="1"/><text x="65.3256%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.1551%" y="581" width="0.0796%" height="15" fill="rgb(246,117,3)" fg:x="819" fg:w="1"/><text x="65.4051%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="65.2347%" y="581" width="0.0796%" height="15" fill="rgb(244,118,39)" fg:x="820" fg:w="1"/><text x="65.4847%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.2347%" y="565" width="0.0796%" height="15" fill="rgb(241,64,10)" fg:x="820" fg:w="1"/><text x="65.4847%" y="575.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 1.03%)</title><rect x="64.3596%" y="709" width="1.0342%" height="15" fill="rgb(229,39,44)" fg:x="809" fg:w="13"/><text x="64.6096%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (12 samples, 0.95%)</title><rect x="64.4391%" y="693" width="0.9547%" height="15" fill="rgb(230,226,3)" fg:x="810" fg:w="12"/><text x="64.6891%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.95%)</title><rect x="64.4391%" y="677" width="0.9547%" height="15" fill="rgb(222,13,42)" fg:x="810" fg:w="12"/><text x="64.6891%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (12 samples, 0.95%)</title><rect x="64.4391%" y="661" width="0.9547%" height="15" fill="rgb(247,180,54)" fg:x="810" fg:w="12"/><text x="64.6891%" y="671.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="64.9165%" y="645" width="0.4773%" height="15" fill="rgb(205,96,16)" fg:x="816" fg:w="6"/><text x="65.1665%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="64.9960%" y="629" width="0.3978%" height="15" fill="rgb(205,100,21)" fg:x="817" fg:w="5"/><text x="65.2460%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="64.9960%" y="613" width="0.3978%" height="15" fill="rgb(248,51,4)" fg:x="817" fg:w="5"/><text x="65.2460%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="64.9960%" y="597" width="0.3978%" height="15" fill="rgb(217,197,30)" fg:x="817" fg:w="5"/><text x="65.2460%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.3142%" y="581" width="0.0796%" height="15" fill="rgb(240,179,40)" fg:x="821" fg:w="1"/><text x="65.5642%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.3142%" y="565" width="0.0796%" height="15" fill="rgb(212,185,35)" fg:x="821" fg:w="1"/><text x="65.5642%" y="575.50"></text></g><g><title>dlerror (2 samples, 0.16%)</title><rect x="65.7120%" y="597" width="0.1591%" height="15" fill="rgb(251,222,31)" fg:x="826" fg:w="2"/><text x="65.9620%" y="607.50"></text></g><g><title>pthread_rwlock_unlock (1 samples, 0.08%)</title><rect x="65.7916%" y="581" width="0.0796%" height="15" fill="rgb(208,140,36)" fg:x="827" fg:w="1"/><text x="66.0416%" y="591.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (10 samples, 0.80%)</title><rect x="65.5529%" y="629" width="0.7955%" height="15" fill="rgb(220,148,1)" fg:x="824" fg:w="10"/><text x="65.8029%" y="639.50"></text></g><g><title>libloading::os::unix::Library::open (9 samples, 0.72%)</title><rect x="65.6325%" y="613" width="0.7160%" height="15" fill="rgb(254,4,28)" fg:x="825" fg:w="9"/><text x="65.8825%" y="623.50"></text></g><g><title>dlopen (6 samples, 0.48%)</title><rect x="65.8711%" y="597" width="0.4773%" height="15" fill="rgb(222,185,44)" fg:x="828" fg:w="6"/><text x="66.1211%" y="607.50"></text></g><g><title>_dl_catch_error (5 samples, 0.40%)</title><rect x="65.9507%" y="581" width="0.3978%" height="15" fill="rgb(215,74,39)" fg:x="829" fg:w="5"/><text x="66.2007%" y="591.50"></text></g><g><title>_dl_catch_exception (5 samples, 0.40%)</title><rect x="65.9507%" y="565" width="0.3978%" height="15" fill="rgb(247,86,4)" fg:x="829" fg:w="5"/><text x="66.2007%" y="575.50"></text></g><g><title>_dl_catch_exception (5 samples, 0.40%)</title><rect x="65.9507%" y="549" width="0.3978%" height="15" fill="rgb(231,105,32)" fg:x="829" fg:w="5"/><text x="66.2007%" y="559.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="66.0302%" y="533" width="0.3182%" height="15" fill="rgb(222,65,35)" fg:x="830" fg:w="4"/><text x="66.2802%" y="543.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (1 samples, 0.08%)</title><rect x="66.3484%" y="613" width="0.0796%" height="15" fill="rgb(218,145,35)" fg:x="834" fg:w="1"/><text x="66.5984%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.3484%" y="597" width="0.0796%" height="15" fill="rgb(208,7,15)" fg:x="834" fg:w="1"/><text x="66.5984%" y="607.50"></text></g><g><title>glob::is_dir (4 samples, 0.32%)</title><rect x="66.4280%" y="565" width="0.3182%" height="15" fill="rgb(209,83,13)" fg:x="835" fg:w="4"/><text x="66.6780%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat (4 samples, 0.32%)</title><rect x="66.4280%" y="549" width="0.3182%" height="15" fill="rgb(218,3,10)" fg:x="835" fg:w="4"/><text x="66.6780%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (4 samples, 0.32%)</title><rect x="66.4280%" y="533" width="0.3182%" height="15" fill="rgb(211,219,4)" fg:x="835" fg:w="4"/><text x="66.6780%" y="543.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (4 samples, 0.32%)</title><rect x="66.4280%" y="517" width="0.3182%" height="15" fill="rgb(228,194,12)" fg:x="835" fg:w="4"/><text x="66.6780%" y="527.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (4 samples, 0.32%)</title><rect x="66.4280%" y="501" width="0.3182%" height="15" fill="rgb(210,175,7)" fg:x="835" fg:w="4"/><text x="66.6780%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx (4 samples, 0.32%)</title><rect x="66.4280%" y="485" width="0.3182%" height="15" fill="rgb(243,132,6)" fg:x="835" fg:w="4"/><text x="66.6780%" y="495.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (4 samples, 0.32%)</title><rect x="66.4280%" y="469" width="0.3182%" height="15" fill="rgb(207,72,18)" fg:x="835" fg:w="4"/><text x="66.6780%" y="479.50"></text></g><g><title>statx (4 samples, 0.32%)</title><rect x="66.4280%" y="453" width="0.3182%" height="15" fill="rgb(236,1,18)" fg:x="835" fg:w="4"/><text x="66.6780%" y="463.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="66.4280%" y="597" width="0.3978%" height="15" fill="rgb(227,0,18)" fg:x="835" fg:w="5"/><text x="66.6780%" y="607.50"></text></g><g><title>glob::fill_todo (5 samples, 0.40%)</title><rect x="66.4280%" y="581" width="0.3978%" height="15" fill="rgb(247,37,5)" fg:x="835" fg:w="5"/><text x="66.6780%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="66.7462%" y="565" width="0.0796%" height="15" fill="rgb(237,179,24)" fg:x="839" fg:w="1"/><text x="66.9962%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="66.7462%" y="549" width="0.0796%" height="15" fill="rgb(226,53,20)" fg:x="839" fg:w="1"/><text x="66.9962%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="66.7462%" y="533" width="0.0796%" height="15" fill="rgb(247,75,7)" fg:x="839" fg:w="1"/><text x="66.9962%" y="543.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="66.7462%" y="517" width="0.0796%" height="15" fill="rgb(233,96,12)" fg:x="839" fg:w="1"/><text x="66.9962%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="66.7462%" y="501" width="0.0796%" height="15" fill="rgb(224,125,0)" fg:x="839" fg:w="1"/><text x="66.9962%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="66.7462%" y="485" width="0.0796%" height="15" fill="rgb(224,92,25)" fg:x="839" fg:w="1"/><text x="66.9962%" y="495.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="66.7462%" y="469" width="0.0796%" height="15" fill="rgb(224,42,24)" fg:x="839" fg:w="1"/><text x="66.9962%" y="479.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (7 samples, 0.56%)</title><rect x="66.3484%" y="629" width="0.5569%" height="15" fill="rgb(234,132,49)" fg:x="834" fg:w="7"/><text x="66.5984%" y="639.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (6 samples, 0.48%)</title><rect x="66.4280%" y="613" width="0.4773%" height="15" fill="rgb(248,100,35)" fg:x="835" fg:w="6"/><text x="66.6780%" y="623.50"></text></g><g><title>glob::glob (1 samples, 0.08%)</title><rect x="66.8258%" y="597" width="0.0796%" height="15" fill="rgb(239,94,40)" fg:x="840" fg:w="1"/><text x="67.0758%" y="607.50"></text></g><g><title>glob::glob_with (1 samples, 0.08%)</title><rect x="66.8258%" y="581" width="0.0796%" height="15" fill="rgb(235,139,28)" fg:x="840" fg:w="1"/><text x="67.0758%" y="591.50"></text></g><g><title>&lt;std::path::PathBuf as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="66.8258%" y="565" width="0.0796%" height="15" fill="rgb(217,144,7)" fg:x="840" fg:w="1"/><text x="67.0758%" y="575.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="66.8258%" y="549" width="0.0796%" height="15" fill="rgb(227,55,4)" fg:x="840" fg:w="1"/><text x="67.0758%" y="559.50"></text></g><g><title>std::path::Components::parse_next_component (1 samples, 0.08%)</title><rect x="66.8258%" y="533" width="0.0796%" height="15" fill="rgb(252,82,54)" fg:x="840" fg:w="1"/><text x="67.0758%" y="543.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (1 samples, 0.08%)</title><rect x="66.8258%" y="517" width="0.0796%" height="15" fill="rgb(245,172,4)" fg:x="840" fg:w="1"/><text x="67.0758%" y="527.50"></text></g><g><title>std::path::Components::parse_next_component::{{closure}} (1 samples, 0.08%)</title><rect x="66.8258%" y="501" width="0.0796%" height="15" fill="rgb(207,26,27)" fg:x="840" fg:w="1"/><text x="67.0758%" y="511.50"></text></g><g><title>std::path::Components::is_sep_byte (1 samples, 0.08%)</title><rect x="66.8258%" y="485" width="0.0796%" height="15" fill="rgb(252,98,18)" fg:x="840" fg:w="1"/><text x="67.0758%" y="495.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="67.0644%" y="597" width="0.0796%" height="15" fill="rgb(244,8,26)" fg:x="843" fg:w="1"/><text x="67.3144%" y="607.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="67.0644%" y="581" width="0.0796%" height="15" fill="rgb(237,173,45)" fg:x="843" fg:w="1"/><text x="67.3144%" y="591.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="67.1440%" y="597" width="0.0796%" height="15" fill="rgb(208,213,49)" fg:x="844" fg:w="1"/><text x="67.3940%" y="607.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="67.1440%" y="581" width="0.0796%" height="15" fill="rgb(212,122,37)" fg:x="844" fg:w="1"/><text x="67.3940%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.1440%" y="565" width="0.0796%" height="15" fill="rgb(213,80,17)" fg:x="844" fg:w="1"/><text x="67.3940%" y="575.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="67.2235%" y="597" width="0.0796%" height="15" fill="rgb(206,210,43)" fg:x="845" fg:w="1"/><text x="67.4735%" y="607.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="67.2235%" y="581" width="0.0796%" height="15" fill="rgb(229,214,3)" fg:x="845" fg:w="1"/><text x="67.4735%" y="591.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="67.2235%" y="565" width="0.0796%" height="15" fill="rgb(235,213,29)" fg:x="845" fg:w="1"/><text x="67.4735%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="67.2235%" y="549" width="0.0796%" height="15" fill="rgb(248,135,26)" fg:x="845" fg:w="1"/><text x="67.4735%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.2235%" y="533" width="0.0796%" height="15" fill="rgb(242,188,12)" fg:x="845" fg:w="1"/><text x="67.4735%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.2235%" y="517" width="0.0796%" height="15" fill="rgb(245,38,12)" fg:x="845" fg:w="1"/><text x="67.4735%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.2235%" y="501" width="0.0796%" height="15" fill="rgb(218,42,13)" fg:x="845" fg:w="1"/><text x="67.4735%" y="511.50"></text></g><g><title>&lt;plugins_core::moving::actions::AddRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="67.3031%" y="565" width="0.0796%" height="15" fill="rgb(238,132,49)" fg:x="846" fg:w="1"/><text x="67.5531%" y="575.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="67.3031%" y="549" width="0.0796%" height="15" fill="rgb(209,196,19)" fg:x="846" fg:w="1"/><text x="67.5531%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.3031%" y="533" width="0.0796%" height="15" fill="rgb(244,131,22)" fg:x="846" fg:w="1"/><text x="67.5531%" y="543.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="67.3031%" y="597" width="0.1591%" height="15" fill="rgb(223,18,34)" fg:x="846" fg:w="2"/><text x="67.5531%" y="607.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="67.3031%" y="581" width="0.1591%" height="15" fill="rgb(252,124,54)" fg:x="846" fg:w="2"/><text x="67.5531%" y="591.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="67.3827%" y="565" width="0.0796%" height="15" fill="rgb(229,106,42)" fg:x="847" fg:w="1"/><text x="67.6327%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="67.3827%" y="549" width="0.0796%" height="15" fill="rgb(221,129,1)" fg:x="847" fg:w="1"/><text x="67.6327%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.3827%" y="533" width="0.0796%" height="15" fill="rgb(229,74,15)" fg:x="847" fg:w="1"/><text x="67.6327%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.3827%" y="517" width="0.0796%" height="15" fill="rgb(210,206,50)" fg:x="847" fg:w="1"/><text x="67.6327%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.3827%" y="501" width="0.0796%" height="15" fill="rgb(251,114,31)" fg:x="847" fg:w="1"/><text x="67.6327%" y="511.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (26 samples, 2.07%)</title><rect x="65.4733%" y="645" width="2.0684%" height="15" fill="rgb(215,225,28)" fg:x="823" fg:w="26"/><text x="65.7233%" y="655.50">k..</text></g><g><title>kernel::plugins::SessionPlugins::schema (8 samples, 0.64%)</title><rect x="66.9053%" y="629" width="0.6364%" height="15" fill="rgb(237,109,14)" fg:x="841" fg:w="8"/><text x="67.1553%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.64%)</title><rect x="66.9053%" y="613" width="0.6364%" height="15" fill="rgb(230,13,37)" fg:x="841" fg:w="8"/><text x="67.1553%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.4622%" y="597" width="0.0796%" height="15" fill="rgb(231,40,28)" fg:x="848" fg:w="1"/><text x="67.7122%" y="607.50"></text></g><g><title>engine::session::Session::initialize (29 samples, 2.31%)</title><rect x="65.3938%" y="661" width="2.3071%" height="15" fill="rgb(231,202,18)" fg:x="822" fg:w="29"/><text x="65.6438%" y="671.50">e..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (2 samples, 0.16%)</title><rect x="67.5418%" y="645" width="0.1591%" height="15" fill="rgb(225,33,18)" fg:x="849" fg:w="2"/><text x="67.7918%" y="655.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="67.5418%" y="629" width="0.1591%" height="15" fill="rgb(223,64,47)" fg:x="849" fg:w="2"/><text x="67.7918%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="67.5418%" y="613" width="0.1591%" height="15" fill="rgb(234,114,13)" fg:x="849" fg:w="2"/><text x="67.7918%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.6213%" y="597" width="0.0796%" height="15" fill="rgb(248,56,40)" fg:x="850" fg:w="1"/><text x="67.8713%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.6213%" y="581" width="0.0796%" height="15" fill="rgb(221,194,21)" fg:x="850" fg:w="1"/><text x="67.8713%" y="591.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="67.6213%" y="565" width="0.0796%" height="15" fill="rgb(242,108,46)" fg:x="850" fg:w="1"/><text x="67.8713%" y="575.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (30 samples, 2.39%)</title><rect x="65.3938%" y="709" width="2.3866%" height="15" fill="rgb(220,106,10)" fg:x="822" fg:w="30"/><text x="65.6438%" y="719.50">&lt;e..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (30 samples, 2.39%)</title><rect x="65.3938%" y="693" width="2.3866%" height="15" fill="rgb(211,88,4)" fg:x="822" fg:w="30"/><text x="65.6438%" y="703.50">en..</text></g><g><title>engine::session::Session::new (30 samples, 2.39%)</title><rect x="65.3938%" y="677" width="2.3866%" height="15" fill="rgb(214,95,34)" fg:x="822" fg:w="30"/><text x="65.6438%" y="687.50">en..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="67.7009%" y="661" width="0.0796%" height="15" fill="rgb(250,160,33)" fg:x="851" fg:w="1"/><text x="67.9509%" y="671.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="67.7009%" y="645" width="0.0796%" height="15" fill="rgb(225,29,10)" fg:x="851" fg:w="1"/><text x="67.9509%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="67.7009%" y="629" width="0.0796%" height="15" fill="rgb(224,28,30)" fg:x="851" fg:w="1"/><text x="67.9509%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.7009%" y="613" width="0.0796%" height="15" fill="rgb(231,77,4)" fg:x="851" fg:w="1"/><text x="67.9509%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.7009%" y="597" width="0.0796%" height="15" fill="rgb(209,63,21)" fg:x="851" fg:w="1"/><text x="67.9509%" y="607.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="67.7009%" y="581" width="0.0796%" height="15" fill="rgb(226,22,11)" fg:x="851" fg:w="1"/><text x="67.9509%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="67.7804%" y="693" width="0.0796%" height="15" fill="rgb(216,82,30)" fg:x="852" fg:w="1"/><text x="68.0304%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.7804%" y="677" width="0.0796%" height="15" fill="rgb(246,227,38)" fg:x="852" fg:w="1"/><text x="68.0304%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="67.8600%" y="645" width="0.0796%" height="15" fill="rgb(251,203,53)" fg:x="853" fg:w="1"/><text x="68.1100%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.8600%" y="629" width="0.0796%" height="15" fill="rgb(254,101,1)" fg:x="853" fg:w="1"/><text x="68.1100%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.8600%" y="613" width="0.0796%" height="15" fill="rgb(241,180,5)" fg:x="853" fg:w="1"/><text x="68.1100%" y="623.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="67.8600%" y="597" width="0.0796%" height="15" fill="rgb(218,168,4)" fg:x="853" fg:w="1"/><text x="68.1100%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="68.0986%" y="549" width="0.0796%" height="15" fill="rgb(224,223,32)" fg:x="856" fg:w="1"/><text x="68.3486%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="68.1782%" y="549" width="0.0796%" height="15" fill="rgb(236,106,22)" fg:x="857" fg:w="1"/><text x="68.4282%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="68.1782%" y="533" width="0.0796%" height="15" fill="rgb(206,121,5)" fg:x="857" fg:w="1"/><text x="68.4282%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="68.1782%" y="517" width="0.0796%" height="15" fill="rgb(233,87,28)" fg:x="857" fg:w="1"/><text x="68.4282%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="68.1782%" y="501" width="0.0796%" height="15" fill="rgb(236,137,17)" fg:x="857" fg:w="1"/><text x="68.4282%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="68.1782%" y="485" width="0.0796%" height="15" fill="rgb(209,183,38)" fg:x="857" fg:w="1"/><text x="68.4282%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="68.1782%" y="469" width="0.0796%" height="15" fill="rgb(206,162,44)" fg:x="857" fg:w="1"/><text x="68.4282%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="68.1782%" y="453" width="0.0796%" height="15" fill="rgb(237,70,39)" fg:x="857" fg:w="1"/><text x="68.4282%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="68.2578%" y="549" width="0.2387%" height="15" fill="rgb(212,176,5)" fg:x="858" fg:w="3"/><text x="68.5078%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="68.2578%" y="533" width="0.2387%" height="15" fill="rgb(232,95,16)" fg:x="858" fg:w="3"/><text x="68.5078%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="68.3373%" y="517" width="0.1591%" height="15" fill="rgb(219,115,35)" fg:x="859" fg:w="2"/><text x="68.5873%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="68.3373%" y="501" width="0.1591%" height="15" fill="rgb(251,67,27)" fg:x="859" fg:w="2"/><text x="68.5873%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="68.3373%" y="485" width="0.1591%" height="15" fill="rgb(222,95,40)" fg:x="859" fg:w="2"/><text x="68.5873%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="68.3373%" y="469" width="0.1591%" height="15" fill="rgb(250,35,16)" fg:x="859" fg:w="2"/><text x="68.5873%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.4169%" y="453" width="0.0796%" height="15" fill="rgb(224,86,44)" fg:x="860" fg:w="1"/><text x="68.6669%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.4169%" y="437" width="0.0796%" height="15" fill="rgb(237,53,53)" fg:x="860" fg:w="1"/><text x="68.6669%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="68.4169%" y="421" width="0.0796%" height="15" fill="rgb(208,171,33)" fg:x="860" fg:w="1"/><text x="68.6669%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.56%)</title><rect x="68.0191%" y="597" width="0.5569%" height="15" fill="rgb(222,64,27)" fg:x="855" fg:w="7"/><text x="68.2691%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="68.0191%" y="581" width="0.5569%" height="15" fill="rgb(221,121,35)" fg:x="855" fg:w="7"/><text x="68.2691%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="68.0986%" y="565" width="0.4773%" height="15" fill="rgb(228,137,42)" fg:x="856" fg:w="6"/><text x="68.3486%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="68.4964%" y="549" width="0.0796%" height="15" fill="rgb(227,54,21)" fg:x="861" fg:w="1"/><text x="68.7464%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.6555%" y="549" width="0.0796%" height="15" fill="rgb(240,168,33)" fg:x="863" fg:w="1"/><text x="68.9055%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="68.7351%" y="517" width="0.0796%" height="15" fill="rgb(243,159,6)" fg:x="864" fg:w="1"/><text x="68.9851%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="68.7351%" y="501" width="0.0796%" height="15" fill="rgb(205,211,41)" fg:x="864" fg:w="1"/><text x="68.9851%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.7351%" y="485" width="0.0796%" height="15" fill="rgb(253,30,1)" fg:x="864" fg:w="1"/><text x="68.9851%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.7351%" y="469" width="0.0796%" height="15" fill="rgb(226,80,18)" fg:x="864" fg:w="1"/><text x="68.9851%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="68.5760%" y="597" width="0.3182%" height="15" fill="rgb(253,156,46)" fg:x="862" fg:w="4"/><text x="68.8260%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="68.5760%" y="581" width="0.3182%" height="15" fill="rgb(248,87,27)" fg:x="862" fg:w="4"/><text x="68.8260%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="68.6555%" y="565" width="0.2387%" height="15" fill="rgb(227,122,2)" fg:x="863" fg:w="3"/><text x="68.9055%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="68.7351%" y="549" width="0.1591%" height="15" fill="rgb(229,94,39)" fg:x="864" fg:w="2"/><text x="68.9851%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="68.7351%" y="533" width="0.1591%" height="15" fill="rgb(225,173,31)" fg:x="864" fg:w="2"/><text x="68.9851%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.8146%" y="517" width="0.0796%" height="15" fill="rgb(239,176,30)" fg:x="865" fg:w="1"/><text x="69.0646%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.8942%" y="549" width="0.0796%" height="15" fill="rgb(212,104,21)" fg:x="866" fg:w="1"/><text x="69.1442%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="68.9737%" y="501" width="0.1591%" height="15" fill="rgb(240,209,40)" fg:x="867" fg:w="2"/><text x="69.2237%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="68.9737%" y="485" width="0.1591%" height="15" fill="rgb(234,195,5)" fg:x="867" fg:w="2"/><text x="69.2237%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="68.9737%" y="469" width="0.1591%" height="15" fill="rgb(238,213,1)" fg:x="867" fg:w="2"/><text x="69.2237%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="69.0533%" y="453" width="0.0796%" height="15" fill="rgb(235,182,54)" fg:x="868" fg:w="1"/><text x="69.3033%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="69.0533%" y="437" width="0.0796%" height="15" fill="rgb(229,50,46)" fg:x="868" fg:w="1"/><text x="69.3033%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="68.9737%" y="517" width="0.3978%" height="15" fill="rgb(219,145,13)" fg:x="867" fg:w="5"/><text x="69.2237%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="69.1329%" y="501" width="0.2387%" height="15" fill="rgb(220,226,10)" fg:x="869" fg:w="3"/><text x="69.3829%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="69.1329%" y="485" width="0.2387%" height="15" fill="rgb(248,47,30)" fg:x="869" fg:w="3"/><text x="69.3829%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="69.1329%" y="469" width="0.2387%" height="15" fill="rgb(231,209,44)" fg:x="869" fg:w="3"/><text x="69.3829%" y="479.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="69.2124%" y="453" width="0.1591%" height="15" fill="rgb(209,80,30)" fg:x="870" fg:w="2"/><text x="69.4624%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.56%)</title><rect x="68.9737%" y="533" width="0.5569%" height="15" fill="rgb(232,9,14)" fg:x="867" fg:w="7"/><text x="69.2237%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="69.3715%" y="517" width="0.1591%" height="15" fill="rgb(243,91,43)" fg:x="872" fg:w="2"/><text x="69.6215%" y="527.50"></text></g><g><title>engine::session::Session::flush (23 samples, 1.83%)</title><rect x="67.8600%" y="693" width="1.8298%" height="15" fill="rgb(231,90,52)" fg:x="853" fg:w="23"/><text x="68.1100%" y="703.50">e..</text></g><g><title>engine::session::state::State::close (23 samples, 1.83%)</title><rect x="67.8600%" y="677" width="1.8298%" height="15" fill="rgb(253,192,44)" fg:x="853" fg:w="23"/><text x="68.1100%" y="687.50">e..</text></g><g><title>engine::session::state::State::flush_entities (23 samples, 1.83%)</title><rect x="67.8600%" y="661" width="1.8298%" height="15" fill="rgb(241,66,31)" fg:x="853" fg:w="23"/><text x="68.1100%" y="671.50">e..</text></g><g><title>core::iter::adapters::try_process (22 samples, 1.75%)</title><rect x="67.9395%" y="645" width="1.7502%" height="15" fill="rgb(235,81,37)" fg:x="854" fg:w="22"/><text x="68.1895%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (22 samples, 1.75%)</title><rect x="67.9395%" y="629" width="1.7502%" height="15" fill="rgb(223,221,9)" fg:x="854" fg:w="22"/><text x="68.1895%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (21 samples, 1.67%)</title><rect x="68.0191%" y="613" width="1.6706%" height="15" fill="rgb(242,180,7)" fg:x="855" fg:w="21"/><text x="68.2691%" y="623.50"></text></g><g><title>kernel::model::any_entity_changes (10 samples, 0.80%)</title><rect x="68.8942%" y="597" width="0.7955%" height="15" fill="rgb(243,78,19)" fg:x="866" fg:w="10"/><text x="69.1442%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (10 samples, 0.80%)</title><rect x="68.8942%" y="581" width="0.7955%" height="15" fill="rgb(233,23,17)" fg:x="866" fg:w="10"/><text x="69.1442%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.80%)</title><rect x="68.8942%" y="565" width="0.7955%" height="15" fill="rgb(252,122,45)" fg:x="866" fg:w="10"/><text x="69.1442%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (9 samples, 0.72%)</title><rect x="68.9737%" y="549" width="0.7160%" height="15" fill="rgb(247,108,20)" fg:x="867" fg:w="9"/><text x="69.2237%" y="559.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="69.5306%" y="533" width="0.1591%" height="15" fill="rgb(235,84,21)" fg:x="874" fg:w="2"/><text x="69.7806%" y="543.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="69.6897%" y="661" width="0.0796%" height="15" fill="rgb(247,129,10)" fg:x="876" fg:w="1"/><text x="69.9397%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="69.6897%" y="645" width="0.0796%" height="15" fill="rgb(208,173,14)" fg:x="876" fg:w="1"/><text x="69.9397%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="69.6897%" y="629" width="0.0796%" height="15" fill="rgb(236,31,38)" fg:x="876" fg:w="1"/><text x="69.9397%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.6897%" y="613" width="0.0796%" height="15" fill="rgb(232,65,17)" fg:x="876" fg:w="1"/><text x="69.9397%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="69.6897%" y="597" width="0.0796%" height="15" fill="rgb(224,45,49)" fg:x="876" fg:w="1"/><text x="69.9397%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="69.7693%" y="645" width="0.0796%" height="15" fill="rgb(225,2,53)" fg:x="877" fg:w="1"/><text x="70.0193%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="69.7693%" y="629" width="0.0796%" height="15" fill="rgb(248,210,53)" fg:x="877" fg:w="1"/><text x="70.0193%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.7693%" y="613" width="0.0796%" height="15" fill="rgb(211,1,30)" fg:x="877" fg:w="1"/><text x="70.0193%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.7693%" y="597" width="0.0796%" height="15" fill="rgb(224,96,15)" fg:x="877" fg:w="1"/><text x="70.0193%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.7693%" y="581" width="0.0796%" height="15" fill="rgb(252,45,11)" fg:x="877" fg:w="1"/><text x="70.0193%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.7693%" y="565" width="0.0796%" height="15" fill="rgb(220,125,38)" fg:x="877" fg:w="1"/><text x="70.0193%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.7693%" y="549" width="0.0796%" height="15" fill="rgb(243,161,33)" fg:x="877" fg:w="1"/><text x="70.0193%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.7693%" y="533" width="0.0796%" height="15" fill="rgb(248,197,34)" fg:x="877" fg:w="1"/><text x="70.0193%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.7693%" y="517" width="0.0796%" height="15" fill="rgb(228,165,23)" fg:x="877" fg:w="1"/><text x="70.0193%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.7693%" y="501" width="0.0796%" height="15" fill="rgb(236,94,38)" fg:x="877" fg:w="1"/><text x="70.0193%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.7693%" y="485" width="0.0796%" height="15" fill="rgb(220,13,23)" fg:x="877" fg:w="1"/><text x="70.0193%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.7693%" y="469" width="0.0796%" height="15" fill="rgb(234,26,39)" fg:x="877" fg:w="1"/><text x="70.0193%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.7693%" y="453" width="0.0796%" height="15" fill="rgb(205,117,44)" fg:x="877" fg:w="1"/><text x="70.0193%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.7693%" y="437" width="0.0796%" height="15" fill="rgb(250,42,2)" fg:x="877" fg:w="1"/><text x="70.0193%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.7693%" y="421" width="0.0796%" height="15" fill="rgb(223,83,14)" fg:x="877" fg:w="1"/><text x="70.0193%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.7693%" y="405" width="0.0796%" height="15" fill="rgb(241,147,50)" fg:x="877" fg:w="1"/><text x="70.0193%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.7693%" y="389" width="0.0796%" height="15" fill="rgb(218,90,6)" fg:x="877" fg:w="1"/><text x="70.0193%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="69.8488%" y="613" width="0.0796%" height="15" fill="rgb(210,191,5)" fg:x="878" fg:w="1"/><text x="70.0988%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="69.8488%" y="597" width="0.0796%" height="15" fill="rgb(225,139,19)" fg:x="878" fg:w="1"/><text x="70.0988%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="69.8488%" y="581" width="0.0796%" height="15" fill="rgb(210,1,33)" fg:x="878" fg:w="1"/><text x="70.0988%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="69.8488%" y="565" width="0.0796%" height="15" fill="rgb(213,50,3)" fg:x="878" fg:w="1"/><text x="70.0988%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="69.8488%" y="549" width="0.0796%" height="15" fill="rgb(234,227,4)" fg:x="878" fg:w="1"/><text x="70.0988%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="69.8488%" y="533" width="0.0796%" height="15" fill="rgb(246,63,5)" fg:x="878" fg:w="1"/><text x="70.0988%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.8488%" y="517" width="0.0796%" height="15" fill="rgb(245,136,27)" fg:x="878" fg:w="1"/><text x="70.0988%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.8488%" y="501" width="0.0796%" height="15" fill="rgb(247,199,27)" fg:x="878" fg:w="1"/><text x="70.0988%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.8488%" y="485" width="0.0796%" height="15" fill="rgb(252,158,49)" fg:x="878" fg:w="1"/><text x="70.0988%" y="495.50"></text></g><g><title>plugins_core::build::Build::save (5 samples, 0.40%)</title><rect x="69.6897%" y="693" width="0.3978%" height="15" fill="rgb(254,73,1)" fg:x="876" fg:w="5"/><text x="69.9397%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="69.6897%" y="677" width="0.3978%" height="15" fill="rgb(248,93,19)" fg:x="876" fg:w="5"/><text x="69.9397%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="69.7693%" y="661" width="0.3182%" height="15" fill="rgb(206,67,5)" fg:x="877" fg:w="4"/><text x="70.0193%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="69.8488%" y="645" width="0.2387%" height="15" fill="rgb(209,210,4)" fg:x="878" fg:w="3"/><text x="70.0988%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="69.8488%" y="629" width="0.2387%" height="15" fill="rgb(214,185,36)" fg:x="878" fg:w="3"/><text x="70.0988%" y="639.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="69.9284%" y="613" width="0.1591%" height="15" fill="rgb(233,191,26)" fg:x="879" fg:w="2"/><text x="70.1784%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.0080%" y="597" width="0.0796%" height="15" fill="rgb(248,94,17)" fg:x="880" fg:w="1"/><text x="70.2580%" y="607.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="70.0875%" y="661" width="0.0796%" height="15" fill="rgb(250,64,4)" fg:x="881" fg:w="1"/><text x="70.3375%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="70.0875%" y="645" width="0.0796%" height="15" fill="rgb(218,41,53)" fg:x="881" fg:w="1"/><text x="70.3375%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="70.0875%" y="629" width="0.0796%" height="15" fill="rgb(251,176,28)" fg:x="881" fg:w="1"/><text x="70.3375%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.0875%" y="613" width="0.0796%" height="15" fill="rgb(247,22,9)" fg:x="881" fg:w="1"/><text x="70.3375%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.0875%" y="597" width="0.0796%" height="15" fill="rgb(218,201,14)" fg:x="881" fg:w="1"/><text x="70.3375%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.0875%" y="581" width="0.0796%" height="15" fill="rgb(218,94,10)" fg:x="881" fg:w="1"/><text x="70.3375%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.0875%" y="565" width="0.0796%" height="15" fill="rgb(222,183,52)" fg:x="881" fg:w="1"/><text x="70.3375%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.0875%" y="549" width="0.0796%" height="15" fill="rgb(242,140,25)" fg:x="881" fg:w="1"/><text x="70.3375%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.0875%" y="533" width="0.0796%" height="15" fill="rgb(235,197,38)" fg:x="881" fg:w="1"/><text x="70.3375%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.0875%" y="517" width="0.0796%" height="15" fill="rgb(237,136,15)" fg:x="881" fg:w="1"/><text x="70.3375%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.0875%" y="501" width="0.0796%" height="15" fill="rgb(223,44,49)" fg:x="881" fg:w="1"/><text x="70.3375%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.0875%" y="485" width="0.0796%" height="15" fill="rgb(227,71,15)" fg:x="881" fg:w="1"/><text x="70.3375%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.0875%" y="469" width="0.0796%" height="15" fill="rgb(225,153,20)" fg:x="881" fg:w="1"/><text x="70.3375%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.0875%" y="453" width="0.0796%" height="15" fill="rgb(210,190,26)" fg:x="881" fg:w="1"/><text x="70.3375%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.0875%" y="437" width="0.0796%" height="15" fill="rgb(223,147,5)" fg:x="881" fg:w="1"/><text x="70.3375%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.0875%" y="421" width="0.0796%" height="15" fill="rgb(207,14,23)" fg:x="881" fg:w="1"/><text x="70.3375%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.0875%" y="405" width="0.0796%" height="15" fill="rgb(211,195,53)" fg:x="881" fg:w="1"/><text x="70.3375%" y="415.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="70.1671%" y="661" width="0.0796%" height="15" fill="rgb(237,75,46)" fg:x="882" fg:w="1"/><text x="70.4171%" y="671.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="70.1671%" y="645" width="0.0796%" height="15" fill="rgb(254,55,14)" fg:x="882" fg:w="1"/><text x="70.4171%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.1671%" y="629" width="0.0796%" height="15" fill="rgb(230,185,30)" fg:x="882" fg:w="1"/><text x="70.4171%" y="639.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (4 samples, 0.32%)</title><rect x="70.0875%" y="693" width="0.3182%" height="15" fill="rgb(220,14,11)" fg:x="881" fg:w="4"/><text x="70.3375%" y="703.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="70.0875%" y="677" width="0.3182%" height="15" fill="rgb(215,169,44)" fg:x="881" fg:w="4"/><text x="70.3375%" y="687.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="70.2466%" y="661" width="0.1591%" height="15" fill="rgb(253,203,20)" fg:x="883" fg:w="2"/><text x="70.4966%" y="671.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="70.2466%" y="645" width="0.1591%" height="15" fill="rgb(229,225,17)" fg:x="883" fg:w="2"/><text x="70.4966%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="70.2466%" y="629" width="0.1591%" height="15" fill="rgb(236,76,26)" fg:x="883" fg:w="2"/><text x="70.4966%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.3262%" y="613" width="0.0796%" height="15" fill="rgb(234,15,30)" fg:x="884" fg:w="1"/><text x="70.5762%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.3262%" y="597" width="0.0796%" height="15" fill="rgb(211,113,48)" fg:x="884" fg:w="1"/><text x="70.5762%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.3262%" y="581" width="0.0796%" height="15" fill="rgb(221,31,36)" fg:x="884" fg:w="1"/><text x="70.5762%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.3262%" y="565" width="0.0796%" height="15" fill="rgb(215,118,52)" fg:x="884" fg:w="1"/><text x="70.5762%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.3262%" y="549" width="0.0796%" height="15" fill="rgb(241,151,27)" fg:x="884" fg:w="1"/><text x="70.5762%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.3262%" y="533" width="0.0796%" height="15" fill="rgb(253,51,3)" fg:x="884" fg:w="1"/><text x="70.5762%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.3262%" y="517" width="0.0796%" height="15" fill="rgb(216,201,24)" fg:x="884" fg:w="1"/><text x="70.5762%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.3262%" y="501" width="0.0796%" height="15" fill="rgb(231,107,4)" fg:x="884" fg:w="1"/><text x="70.5762%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.3262%" y="485" width="0.0796%" height="15" fill="rgb(243,97,54)" fg:x="884" fg:w="1"/><text x="70.5762%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.3262%" y="469" width="0.0796%" height="15" fill="rgb(221,32,51)" fg:x="884" fg:w="1"/><text x="70.5762%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.3262%" y="453" width="0.0796%" height="15" fill="rgb(218,171,35)" fg:x="884" fg:w="1"/><text x="70.5762%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.3262%" y="437" width="0.0796%" height="15" fill="rgb(214,20,53)" fg:x="884" fg:w="1"/><text x="70.5762%" y="447.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="70.4057%" y="677" width="0.0796%" height="15" fill="rgb(239,9,52)" fg:x="885" fg:w="1"/><text x="70.6557%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="70.4057%" y="661" width="0.0796%" height="15" fill="rgb(215,114,45)" fg:x="885" fg:w="1"/><text x="70.6557%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.4057%" y="645" width="0.0796%" height="15" fill="rgb(208,118,9)" fg:x="885" fg:w="1"/><text x="70.6557%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="70.4057%" y="629" width="0.0796%" height="15" fill="rgb(235,7,39)" fg:x="885" fg:w="1"/><text x="70.6557%" y="639.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="70.4853%" y="677" width="0.0796%" height="15" fill="rgb(243,225,15)" fg:x="886" fg:w="1"/><text x="70.7353%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="70.4853%" y="661" width="0.0796%" height="15" fill="rgb(225,216,18)" fg:x="886" fg:w="1"/><text x="70.7353%" y="671.50"></text></g><g><title>plugins_core::build::Build::save (1 samples, 0.08%)</title><rect x="70.4853%" y="645" width="0.0796%" height="15" fill="rgb(233,36,38)" fg:x="886" fg:w="1"/><text x="70.7353%" y="655.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="70.5648%" y="613" width="0.0796%" height="15" fill="rgb(239,88,23)" fg:x="887" fg:w="1"/><text x="70.8148%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="70.5648%" y="597" width="0.0796%" height="15" fill="rgb(219,181,35)" fg:x="887" fg:w="1"/><text x="70.8148%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="70.5648%" y="581" width="0.0796%" height="15" fill="rgb(215,18,46)" fg:x="887" fg:w="1"/><text x="70.8148%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="70.6444%" y="549" width="0.0796%" height="15" fill="rgb(241,38,11)" fg:x="888" fg:w="1"/><text x="70.8944%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="70.6444%" y="533" width="0.0796%" height="15" fill="rgb(248,169,45)" fg:x="888" fg:w="1"/><text x="70.8944%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="70.8035%" y="517" width="0.0796%" height="15" fill="rgb(239,50,49)" fg:x="890" fg:w="1"/><text x="71.0535%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="70.8035%" y="501" width="0.0796%" height="15" fill="rgb(231,96,31)" fg:x="890" fg:w="1"/><text x="71.0535%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="70.8035%" y="485" width="0.0796%" height="15" fill="rgb(224,193,37)" fg:x="890" fg:w="1"/><text x="71.0535%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="70.8035%" y="469" width="0.0796%" height="15" fill="rgb(227,153,50)" fg:x="890" fg:w="1"/><text x="71.0535%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="70.8035%" y="453" width="0.0796%" height="15" fill="rgb(249,228,3)" fg:x="890" fg:w="1"/><text x="71.0535%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="70.8035%" y="437" width="0.0796%" height="15" fill="rgb(219,164,43)" fg:x="890" fg:w="1"/><text x="71.0535%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="70.8035%" y="421" width="0.0796%" height="15" fill="rgb(216,45,41)" fg:x="890" fg:w="1"/><text x="71.0535%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="70.8035%" y="405" width="0.0796%" height="15" fill="rgb(210,226,51)" fg:x="890" fg:w="1"/><text x="71.0535%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="70.8831%" y="501" width="0.1591%" height="15" fill="rgb(209,117,49)" fg:x="891" fg:w="2"/><text x="71.1331%" y="511.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="70.8831%" y="485" width="0.1591%" height="15" fill="rgb(206,196,24)" fg:x="891" fg:w="2"/><text x="71.1331%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="70.8831%" y="469" width="0.1591%" height="15" fill="rgb(253,218,3)" fg:x="891" fg:w="2"/><text x="71.1331%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="70.8831%" y="453" width="0.1591%" height="15" fill="rgb(252,166,2)" fg:x="891" fg:w="2"/><text x="71.1331%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="70.9626%" y="437" width="0.0796%" height="15" fill="rgb(236,218,26)" fg:x="892" fg:w="1"/><text x="71.2126%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="70.9626%" y="421" width="0.0796%" height="15" fill="rgb(254,84,19)" fg:x="892" fg:w="1"/><text x="71.2126%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="70.9626%" y="405" width="0.0796%" height="15" fill="rgb(219,137,29)" fg:x="892" fg:w="1"/><text x="71.2126%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="71.0422%" y="501" width="0.0796%" height="15" fill="rgb(227,47,52)" fg:x="893" fg:w="1"/><text x="71.2922%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.0422%" y="485" width="0.0796%" height="15" fill="rgb(229,167,24)" fg:x="893" fg:w="1"/><text x="71.2922%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="70.8831%" y="517" width="0.3182%" height="15" fill="rgb(233,164,1)" fg:x="891" fg:w="4"/><text x="71.1331%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.1217%" y="501" width="0.0796%" height="15" fill="rgb(218,88,48)" fg:x="894" fg:w="1"/><text x="71.3717%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.64%)</title><rect x="70.6444%" y="565" width="0.6364%" height="15" fill="rgb(226,214,24)" fg:x="888" fg:w="8"/><text x="70.8944%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="70.7239%" y="549" width="0.5569%" height="15" fill="rgb(233,29,12)" fg:x="889" fg:w="7"/><text x="70.9739%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="70.7239%" y="533" width="0.5569%" height="15" fill="rgb(219,120,34)" fg:x="889" fg:w="7"/><text x="70.9739%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.2013%" y="517" width="0.0796%" height="15" fill="rgb(226,78,44)" fg:x="895" fg:w="1"/><text x="71.4513%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.2013%" y="501" width="0.0796%" height="15" fill="rgb(240,15,48)" fg:x="895" fg:w="1"/><text x="71.4513%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.2013%" y="485" width="0.0796%" height="15" fill="rgb(253,176,7)" fg:x="895" fg:w="1"/><text x="71.4513%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.2808%" y="533" width="0.0796%" height="15" fill="rgb(206,166,28)" fg:x="896" fg:w="1"/><text x="71.5308%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="71.2808%" y="565" width="0.1591%" height="15" fill="rgb(241,53,51)" fg:x="896" fg:w="2"/><text x="71.5308%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="71.2808%" y="549" width="0.1591%" height="15" fill="rgb(249,112,30)" fg:x="896" fg:w="2"/><text x="71.5308%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.3604%" y="533" width="0.0796%" height="15" fill="rgb(217,85,30)" fg:x="897" fg:w="1"/><text x="71.6104%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.3604%" y="517" width="0.0796%" height="15" fill="rgb(233,49,7)" fg:x="897" fg:w="1"/><text x="71.6104%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.3604%" y="501" width="0.0796%" height="15" fill="rgb(234,109,9)" fg:x="897" fg:w="1"/><text x="71.6104%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.3604%" y="485" width="0.0796%" height="15" fill="rgb(253,95,22)" fg:x="897" fg:w="1"/><text x="71.6104%" y="495.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="71.4399%" y="549" width="0.0796%" height="15" fill="rgb(233,176,25)" fg:x="898" fg:w="1"/><text x="71.6899%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;treediff::tools::record::Recorder&lt;treediff::value::shared::Key,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="71.4399%" y="533" width="0.0796%" height="15" fill="rgb(236,33,39)" fg:x="898" fg:w="1"/><text x="71.6899%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="71.5195%" y="533" width="0.0796%" height="15" fill="rgb(223,226,42)" fg:x="899" fg:w="1"/><text x="71.7695%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="71.5990%" y="469" width="0.0796%" height="15" fill="rgb(216,99,33)" fg:x="900" fg:w="1"/><text x="71.8490%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="71.5990%" y="453" width="0.0796%" height="15" fill="rgb(235,84,23)" fg:x="900" fg:w="1"/><text x="71.8490%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.5990%" y="437" width="0.0796%" height="15" fill="rgb(232,2,27)" fg:x="900" fg:w="1"/><text x="71.8490%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="71.9173%" y="453" width="0.2387%" height="15" fill="rgb(241,23,22)" fg:x="904" fg:w="3"/><text x="72.1673%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="71.9968%" y="437" width="0.1591%" height="15" fill="rgb(211,73,27)" fg:x="905" fg:w="2"/><text x="72.2468%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.0764%" y="421" width="0.0796%" height="15" fill="rgb(235,109,49)" fg:x="906" fg:w="1"/><text x="72.3264%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.0764%" y="405" width="0.0796%" height="15" fill="rgb(230,99,29)" fg:x="906" fg:w="1"/><text x="72.3264%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.0764%" y="389" width="0.0796%" height="15" fill="rgb(245,199,7)" fg:x="906" fg:w="1"/><text x="72.3264%" y="399.50"></text></g><g><title>engine::session::Session::flush (21 samples, 1.67%)</title><rect x="70.5648%" y="677" width="1.6706%" height="15" fill="rgb(217,179,10)" fg:x="887" fg:w="21"/><text x="70.8148%" y="687.50"></text></g><g><title>engine::session::Session::save_changes (21 samples, 1.67%)</title><rect x="70.5648%" y="661" width="1.6706%" height="15" fill="rgb(254,99,47)" fg:x="887" fg:w="21"/><text x="70.8148%" y="671.50"></text></g><g><title>engine::session::state::State::close (21 samples, 1.67%)</title><rect x="70.5648%" y="645" width="1.6706%" height="15" fill="rgb(251,121,7)" fg:x="887" fg:w="21"/><text x="70.8148%" y="655.50"></text></g><g><title>engine::session::state::State::flush_entities (21 samples, 1.67%)</title><rect x="70.5648%" y="629" width="1.6706%" height="15" fill="rgb(250,177,26)" fg:x="887" fg:w="21"/><text x="70.8148%" y="639.50"></text></g><g><title>core::iter::adapters::try_process (20 samples, 1.59%)</title><rect x="70.6444%" y="613" width="1.5911%" height="15" fill="rgb(232,88,15)" fg:x="888" fg:w="20"/><text x="70.8944%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (20 samples, 1.59%)</title><rect x="70.6444%" y="597" width="1.5911%" height="15" fill="rgb(251,54,54)" fg:x="888" fg:w="20"/><text x="70.8944%" y="607.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (20 samples, 1.59%)</title><rect x="70.6444%" y="581" width="1.5911%" height="15" fill="rgb(208,177,15)" fg:x="888" fg:w="20"/><text x="70.8944%" y="591.50"></text></g><g><title>kernel::model::any_entity_changes (10 samples, 0.80%)</title><rect x="71.4399%" y="565" width="0.7955%" height="15" fill="rgb(205,97,32)" fg:x="898" fg:w="10"/><text x="71.6899%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.72%)</title><rect x="71.5195%" y="549" width="0.7160%" height="15" fill="rgb(217,192,13)" fg:x="899" fg:w="9"/><text x="71.7695%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.64%)</title><rect x="71.5990%" y="533" width="0.6364%" height="15" fill="rgb(215,163,41)" fg:x="900" fg:w="8"/><text x="71.8490%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.64%)</title><rect x="71.5990%" y="517" width="0.6364%" height="15" fill="rgb(246,83,29)" fg:x="900" fg:w="8"/><text x="71.8490%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (8 samples, 0.64%)</title><rect x="71.5990%" y="501" width="0.6364%" height="15" fill="rgb(219,2,45)" fg:x="900" fg:w="8"/><text x="71.8490%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.64%)</title><rect x="71.5990%" y="485" width="0.6364%" height="15" fill="rgb(242,215,33)" fg:x="900" fg:w="8"/><text x="71.8490%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7 samples, 0.56%)</title><rect x="71.6786%" y="469" width="0.5569%" height="15" fill="rgb(217,1,6)" fg:x="901" fg:w="7"/><text x="71.9286%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.1559%" y="453" width="0.0796%" height="15" fill="rgb(207,85,52)" fg:x="907" fg:w="1"/><text x="72.4059%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="72.2355%" y="645" width="0.0796%" height="15" fill="rgb(231,171,19)" fg:x="908" fg:w="1"/><text x="72.4855%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="72.2355%" y="629" width="0.0796%" height="15" fill="rgb(207,128,4)" fg:x="908" fg:w="1"/><text x="72.4855%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.2355%" y="613" width="0.0796%" height="15" fill="rgb(219,208,4)" fg:x="908" fg:w="1"/><text x="72.4855%" y="623.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="72.3150%" y="645" width="0.0796%" height="15" fill="rgb(235,161,42)" fg:x="909" fg:w="1"/><text x="72.5650%" y="655.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="72.3150%" y="629" width="0.0796%" height="15" fill="rgb(247,218,18)" fg:x="909" fg:w="1"/><text x="72.5650%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="72.3150%" y="613" width="0.0796%" height="15" fill="rgb(232,114,51)" fg:x="909" fg:w="1"/><text x="72.5650%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.3150%" y="597" width="0.0796%" height="15" fill="rgb(222,95,3)" fg:x="909" fg:w="1"/><text x="72.5650%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="72.3150%" y="581" width="0.0796%" height="15" fill="rgb(240,65,29)" fg:x="909" fg:w="1"/><text x="72.5650%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.3150%" y="565" width="0.0796%" height="15" fill="rgb(249,209,20)" fg:x="909" fg:w="1"/><text x="72.5650%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="72.3946%" y="597" width="0.0796%" height="15" fill="rgb(241,48,37)" fg:x="910" fg:w="1"/><text x="72.6446%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.3946%" y="581" width="0.0796%" height="15" fill="rgb(230,140,42)" fg:x="910" fg:w="1"/><text x="72.6446%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.3946%" y="565" width="0.0796%" height="15" fill="rgb(230,176,45)" fg:x="910" fg:w="1"/><text x="72.6446%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.3946%" y="549" width="0.0796%" height="15" fill="rgb(245,112,21)" fg:x="910" fg:w="1"/><text x="72.6446%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.5537%" y="501" width="0.0796%" height="15" fill="rgb(207,183,35)" fg:x="912" fg:w="1"/><text x="72.8037%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.5537%" y="485" width="0.0796%" height="15" fill="rgb(227,44,33)" fg:x="912" fg:w="1"/><text x="72.8037%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.5537%" y="469" width="0.0796%" height="15" fill="rgb(246,120,21)" fg:x="912" fg:w="1"/><text x="72.8037%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="72.4741%" y="597" width="0.2387%" height="15" fill="rgb(235,57,52)" fg:x="911" fg:w="3"/><text x="72.7241%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="72.4741%" y="581" width="0.2387%" height="15" fill="rgb(238,84,10)" fg:x="911" fg:w="3"/><text x="72.7241%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="72.4741%" y="565" width="0.2387%" height="15" fill="rgb(251,200,32)" fg:x="911" fg:w="3"/><text x="72.7241%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="72.4741%" y="549" width="0.2387%" height="15" fill="rgb(247,159,13)" fg:x="911" fg:w="3"/><text x="72.7241%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="72.4741%" y="533" width="0.2387%" height="15" fill="rgb(238,64,4)" fg:x="911" fg:w="3"/><text x="72.7241%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="72.5537%" y="517" width="0.1591%" height="15" fill="rgb(221,131,51)" fg:x="912" fg:w="2"/><text x="72.8037%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="72.6333%" y="501" width="0.0796%" height="15" fill="rgb(242,5,29)" fg:x="913" fg:w="1"/><text x="72.8833%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.6333%" y="485" width="0.0796%" height="15" fill="rgb(214,130,32)" fg:x="913" fg:w="1"/><text x="72.8833%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.7128%" y="597" width="0.0796%" height="15" fill="rgb(244,210,16)" fg:x="914" fg:w="1"/><text x="72.9628%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.7128%" y="581" width="0.0796%" height="15" fill="rgb(234,48,26)" fg:x="914" fg:w="1"/><text x="72.9628%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (9 samples, 0.72%)</title><rect x="72.2355%" y="661" width="0.7160%" height="15" fill="rgb(231,82,38)" fg:x="908" fg:w="9"/><text x="72.4855%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (7 samples, 0.56%)</title><rect x="72.3946%" y="645" width="0.5569%" height="15" fill="rgb(254,128,41)" fg:x="910" fg:w="7"/><text x="72.6446%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.56%)</title><rect x="72.3946%" y="629" width="0.5569%" height="15" fill="rgb(212,73,49)" fg:x="910" fg:w="7"/><text x="72.6446%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.56%)</title><rect x="72.3946%" y="613" width="0.5569%" height="15" fill="rgb(205,62,54)" fg:x="910" fg:w="7"/><text x="72.6446%" y="623.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="72.7924%" y="597" width="0.1591%" height="15" fill="rgb(228,0,8)" fg:x="915" fg:w="2"/><text x="73.0424%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="72.8719%" y="581" width="0.0796%" height="15" fill="rgb(251,28,17)" fg:x="916" fg:w="1"/><text x="73.1219%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.8719%" y="565" width="0.0796%" height="15" fill="rgb(238,105,27)" fg:x="916" fg:w="1"/><text x="73.1219%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.8719%" y="549" width="0.0796%" height="15" fill="rgb(237,216,33)" fg:x="916" fg:w="1"/><text x="73.1219%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.8719%" y="533" width="0.0796%" height="15" fill="rgb(229,228,25)" fg:x="916" fg:w="1"/><text x="73.1219%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="72.9515%" y="661" width="0.1591%" height="15" fill="rgb(233,75,23)" fg:x="917" fg:w="2"/><text x="73.2015%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="72.9515%" y="645" width="0.1591%" height="15" fill="rgb(231,207,16)" fg:x="917" fg:w="2"/><text x="73.2015%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.1106%" y="645" width="0.0796%" height="15" fill="rgb(231,191,45)" fg:x="919" fg:w="1"/><text x="73.3606%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.1106%" y="629" width="0.0796%" height="15" fill="rgb(224,133,17)" fg:x="919" fg:w="1"/><text x="73.3606%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.1106%" y="613" width="0.0796%" height="15" fill="rgb(209,178,27)" fg:x="919" fg:w="1"/><text x="73.3606%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.1106%" y="597" width="0.0796%" height="15" fill="rgb(218,37,11)" fg:x="919" fg:w="1"/><text x="73.3606%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.1106%" y="581" width="0.0796%" height="15" fill="rgb(251,226,25)" fg:x="919" fg:w="1"/><text x="73.3606%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.1106%" y="565" width="0.0796%" height="15" fill="rgb(209,222,27)" fg:x="919" fg:w="1"/><text x="73.3606%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.1106%" y="549" width="0.0796%" height="15" fill="rgb(238,22,21)" fg:x="919" fg:w="1"/><text x="73.3606%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.1106%" y="533" width="0.0796%" height="15" fill="rgb(233,161,25)" fg:x="919" fg:w="1"/><text x="73.3606%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.1106%" y="517" width="0.0796%" height="15" fill="rgb(226,122,53)" fg:x="919" fg:w="1"/><text x="73.3606%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.1106%" y="501" width="0.0796%" height="15" fill="rgb(220,123,17)" fg:x="919" fg:w="1"/><text x="73.3606%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.1106%" y="485" width="0.0796%" height="15" fill="rgb(230,224,35)" fg:x="919" fg:w="1"/><text x="73.3606%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.1106%" y="469" width="0.0796%" height="15" fill="rgb(246,83,8)" fg:x="919" fg:w="1"/><text x="73.3606%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.1106%" y="453" width="0.0796%" height="15" fill="rgb(230,214,17)" fg:x="919" fg:w="1"/><text x="73.3606%" y="463.50"></text></g><g><title>plugins_core::build::Build::save (13 samples, 1.03%)</title><rect x="72.2355%" y="677" width="1.0342%" height="15" fill="rgb(222,97,18)" fg:x="908" fg:w="13"/><text x="72.4855%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="73.1106%" y="661" width="0.1591%" height="15" fill="rgb(206,79,1)" fg:x="919" fg:w="2"/><text x="73.3606%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.1901%" y="645" width="0.0796%" height="15" fill="rgb(214,121,34)" fg:x="920" fg:w="1"/><text x="73.4401%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.1901%" y="629" width="0.0796%" height="15" fill="rgb(249,199,46)" fg:x="920" fg:w="1"/><text x="73.4401%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="73.1901%" y="613" width="0.0796%" height="15" fill="rgb(214,222,46)" fg:x="920" fg:w="1"/><text x="73.4401%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.1901%" y="597" width="0.0796%" height="15" fill="rgb(248,168,30)" fg:x="920" fg:w="1"/><text x="73.4401%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.1901%" y="581" width="0.0796%" height="15" fill="rgb(226,14,28)" fg:x="920" fg:w="1"/><text x="73.4401%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.1901%" y="565" width="0.0796%" height="15" fill="rgb(253,123,1)" fg:x="920" fg:w="1"/><text x="73.4401%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.1901%" y="549" width="0.0796%" height="15" fill="rgb(225,24,42)" fg:x="920" fg:w="1"/><text x="73.4401%" y="559.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="73.2697%" y="661" width="0.0796%" height="15" fill="rgb(216,161,37)" fg:x="921" fg:w="1"/><text x="73.5197%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.2697%" y="645" width="0.0796%" height="15" fill="rgb(251,164,26)" fg:x="921" fg:w="1"/><text x="73.5197%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.2697%" y="629" width="0.0796%" height="15" fill="rgb(219,177,3)" fg:x="921" fg:w="1"/><text x="73.5197%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.2697%" y="613" width="0.0796%" height="15" fill="rgb(222,65,0)" fg:x="921" fg:w="1"/><text x="73.5197%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.2697%" y="597" width="0.0796%" height="15" fill="rgb(223,69,54)" fg:x="921" fg:w="1"/><text x="73.5197%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.2697%" y="581" width="0.0796%" height="15" fill="rgb(235,30,27)" fg:x="921" fg:w="1"/><text x="73.5197%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.2697%" y="565" width="0.0796%" height="15" fill="rgb(220,183,50)" fg:x="921" fg:w="1"/><text x="73.5197%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.2697%" y="549" width="0.0796%" height="15" fill="rgb(248,198,15)" fg:x="921" fg:w="1"/><text x="73.5197%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.2697%" y="533" width="0.0796%" height="15" fill="rgb(222,211,4)" fg:x="921" fg:w="1"/><text x="73.5197%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.2697%" y="517" width="0.0796%" height="15" fill="rgb(214,102,34)" fg:x="921" fg:w="1"/><text x="73.5197%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.2697%" y="501" width="0.0796%" height="15" fill="rgb(245,92,5)" fg:x="921" fg:w="1"/><text x="73.5197%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.2697%" y="485" width="0.0796%" height="15" fill="rgb(252,72,51)" fg:x="921" fg:w="1"/><text x="73.5197%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.2697%" y="469" width="0.0796%" height="15" fill="rgb(252,208,19)" fg:x="921" fg:w="1"/><text x="73.5197%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.2697%" y="453" width="0.0796%" height="15" fill="rgb(211,69,7)" fg:x="921" fg:w="1"/><text x="73.5197%" y="463.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (2 samples, 0.16%)</title><rect x="73.2697%" y="677" width="0.1591%" height="15" fill="rgb(211,27,16)" fg:x="921" fg:w="2"/><text x="73.5197%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="73.3492%" y="661" width="0.0796%" height="15" fill="rgb(219,216,14)" fg:x="922" fg:w="1"/><text x="73.5992%" y="671.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="73.3492%" y="645" width="0.0796%" height="15" fill="rgb(219,71,8)" fg:x="922" fg:w="1"/><text x="73.5992%" y="655.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="73.4288%" y="661" width="0.0796%" height="15" fill="rgb(223,170,53)" fg:x="923" fg:w="1"/><text x="73.6788%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="73.4288%" y="645" width="0.0796%" height="15" fill="rgb(246,21,26)" fg:x="923" fg:w="1"/><text x="73.6788%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="73.4288%" y="629" width="0.0796%" height="15" fill="rgb(248,20,46)" fg:x="923" fg:w="1"/><text x="73.6788%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.4288%" y="613" width="0.0796%" height="15" fill="rgb(252,94,11)" fg:x="923" fg:w="1"/><text x="73.6788%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.5084%" y="533" width="0.0796%" height="15" fill="rgb(236,163,8)" fg:x="924" fg:w="1"/><text x="73.7584%" y="543.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (42 samples, 3.34%)</title><rect x="70.4057%" y="693" width="3.3413%" height="15" fill="rgb(217,221,45)" fg:x="885" fg:w="42"/><text x="70.6557%" y="703.50">plu..</text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="73.4288%" y="677" width="0.3182%" height="15" fill="rgb(238,38,17)" fg:x="923" fg:w="4"/><text x="73.6788%" y="687.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="73.5084%" y="661" width="0.2387%" height="15" fill="rgb(242,210,23)" fg:x="924" fg:w="3"/><text x="73.7584%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="73.5084%" y="645" width="0.2387%" height="15" fill="rgb(250,86,53)" fg:x="924" fg:w="3"/><text x="73.7584%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="73.5084%" y="629" width="0.2387%" height="15" fill="rgb(223,168,25)" fg:x="924" fg:w="3"/><text x="73.7584%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="73.5084%" y="613" width="0.2387%" height="15" fill="rgb(251,189,4)" fg:x="924" fg:w="3"/><text x="73.7584%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="73.5084%" y="597" width="0.2387%" height="15" fill="rgb(245,19,28)" fg:x="924" fg:w="3"/><text x="73.7584%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="73.5084%" y="581" width="0.2387%" height="15" fill="rgb(207,10,34)" fg:x="924" fg:w="3"/><text x="73.7584%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="73.5084%" y="565" width="0.2387%" height="15" fill="rgb(235,153,31)" fg:x="924" fg:w="3"/><text x="73.7584%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="73.5084%" y="549" width="0.2387%" height="15" fill="rgb(228,72,37)" fg:x="924" fg:w="3"/><text x="73.7584%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="73.5879%" y="533" width="0.1591%" height="15" fill="rgb(215,15,16)" fg:x="925" fg:w="2"/><text x="73.8379%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="73.5879%" y="517" width="0.1591%" height="15" fill="rgb(250,119,29)" fg:x="925" fg:w="2"/><text x="73.8379%" y="527.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="73.7470%" y="693" width="0.0796%" height="15" fill="rgb(214,59,1)" fg:x="927" fg:w="1"/><text x="73.9970%" y="703.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="73.7470%" y="677" width="0.0796%" height="15" fill="rgb(223,109,25)" fg:x="927" fg:w="1"/><text x="73.9970%" y="687.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="73.7470%" y="661" width="0.0796%" height="15" fill="rgb(230,198,22)" fg:x="927" fg:w="1"/><text x="73.9970%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="73.7470%" y="645" width="0.0796%" height="15" fill="rgb(245,184,46)" fg:x="927" fg:w="1"/><text x="73.9970%" y="655.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="73.7470%" y="629" width="0.0796%" height="15" fill="rgb(253,73,16)" fg:x="927" fg:w="1"/><text x="73.9970%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="73.7470%" y="613" width="0.0796%" height="15" fill="rgb(206,94,45)" fg:x="927" fg:w="1"/><text x="73.9970%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="73.7470%" y="597" width="0.0796%" height="15" fill="rgb(236,83,27)" fg:x="927" fg:w="1"/><text x="73.9970%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="73.7470%" y="581" width="0.0796%" height="15" fill="rgb(220,196,8)" fg:x="927" fg:w="1"/><text x="73.9970%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="73.7470%" y="565" width="0.0796%" height="15" fill="rgb(254,185,14)" fg:x="927" fg:w="1"/><text x="73.9970%" y="575.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="73.7470%" y="549" width="0.0796%" height="15" fill="rgb(226,50,22)" fg:x="927" fg:w="1"/><text x="73.9970%" y="559.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="73.8266%" y="661" width="0.0796%" height="15" fill="rgb(253,147,0)" fg:x="928" fg:w="1"/><text x="74.0766%" y="671.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="73.8266%" y="645" width="0.0796%" height="15" fill="rgb(252,46,33)" fg:x="928" fg:w="1"/><text x="74.0766%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="73.8266%" y="629" width="0.0796%" height="15" fill="rgb(242,22,54)" fg:x="928" fg:w="1"/><text x="74.0766%" y="639.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="73.8266%" y="613" width="0.0796%" height="15" fill="rgb(223,178,32)" fg:x="928" fg:w="1"/><text x="74.0766%" y="623.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="73.8266%" y="597" width="0.0796%" height="15" fill="rgb(214,106,53)" fg:x="928" fg:w="1"/><text x="74.0766%" y="607.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="73.8266%" y="581" width="0.0796%" height="15" fill="rgb(232,65,50)" fg:x="928" fg:w="1"/><text x="74.0766%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="73.8266%" y="565" width="0.0796%" height="15" fill="rgb(231,110,28)" fg:x="928" fg:w="1"/><text x="74.0766%" y="575.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="73.8266%" y="549" width="0.0796%" height="15" fill="rgb(216,71,40)" fg:x="928" fg:w="1"/><text x="74.0766%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="73.8266%" y="533" width="0.0796%" height="15" fill="rgb(229,89,53)" fg:x="928" fg:w="1"/><text x="74.0766%" y="543.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="73.8266%" y="517" width="0.0796%" height="15" fill="rgb(210,124,14)" fg:x="928" fg:w="1"/><text x="74.0766%" y="527.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.08%)</title><rect x="73.8266%" y="501" width="0.0796%" height="15" fill="rgb(236,213,6)" fg:x="928" fg:w="1"/><text x="74.0766%" y="511.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (1 samples, 0.08%)</title><rect x="73.8266%" y="485" width="0.0796%" height="15" fill="rgb(228,41,5)" fg:x="928" fg:w="1"/><text x="74.0766%" y="495.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="73.9857%" y="613" width="0.0796%" height="15" fill="rgb(221,167,25)" fg:x="930" fg:w="1"/><text x="74.2357%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="73.9857%" y="597" width="0.0796%" height="15" fill="rgb(228,144,37)" fg:x="930" fg:w="1"/><text x="74.2357%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.9857%" y="581" width="0.0796%" height="15" fill="rgb(227,189,38)" fg:x="930" fg:w="1"/><text x="74.2357%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="73.9857%" y="565" width="0.0796%" height="15" fill="rgb(218,8,2)" fg:x="930" fg:w="1"/><text x="74.2357%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="73.9857%" y="549" width="0.0796%" height="15" fill="rgb(209,61,28)" fg:x="930" fg:w="1"/><text x="74.2357%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="73.9857%" y="533" width="0.0796%" height="15" fill="rgb(233,140,39)" fg:x="930" fg:w="1"/><text x="74.2357%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.9857%" y="517" width="0.0796%" height="15" fill="rgb(251,66,48)" fg:x="930" fg:w="1"/><text x="74.2357%" y="527.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (4 samples, 0.32%)</title><rect x="73.8266%" y="693" width="0.3182%" height="15" fill="rgb(210,44,45)" fg:x="928" fg:w="4"/><text x="74.0766%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (4 samples, 0.32%)</title><rect x="73.8266%" y="677" width="0.3182%" height="15" fill="rgb(214,136,46)" fg:x="928" fg:w="4"/><text x="74.0766%" y="687.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="73.9061%" y="661" width="0.2387%" height="15" fill="rgb(207,130,50)" fg:x="929" fg:w="3"/><text x="74.1561%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="73.9061%" y="645" width="0.2387%" height="15" fill="rgb(228,102,49)" fg:x="929" fg:w="3"/><text x="74.1561%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="73.9857%" y="629" width="0.1591%" height="15" fill="rgb(253,55,1)" fg:x="930" fg:w="2"/><text x="74.2357%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="74.0652%" y="613" width="0.0796%" height="15" fill="rgb(238,222,9)" fg:x="931" fg:w="1"/><text x="74.3152%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.0652%" y="597" width="0.0796%" height="15" fill="rgb(246,99,6)" fg:x="931" fg:w="1"/><text x="74.3152%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.0652%" y="581" width="0.0796%" height="15" fill="rgb(219,110,26)" fg:x="931" fg:w="1"/><text x="74.3152%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.1448%" y="677" width="0.0796%" height="15" fill="rgb(239,160,33)" fg:x="932" fg:w="1"/><text x="74.3948%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.1448%" y="661" width="0.0796%" height="15" fill="rgb(220,202,23)" fg:x="932" fg:w="1"/><text x="74.3948%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="74.1448%" y="645" width="0.0796%" height="15" fill="rgb(208,80,26)" fg:x="932" fg:w="1"/><text x="74.3948%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.1448%" y="629" width="0.0796%" height="15" fill="rgb(243,85,7)" fg:x="932" fg:w="1"/><text x="74.3948%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.1448%" y="613" width="0.0796%" height="15" fill="rgb(228,77,47)" fg:x="932" fg:w="1"/><text x="74.3948%" y="623.50"></text></g><g><title>plugins_core::build::Build::new_world (2 samples, 0.16%)</title><rect x="74.2243%" y="677" width="0.1591%" height="15" fill="rgb(212,226,8)" fg:x="933" fg:w="2"/><text x="74.4743%" y="687.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="74.2243%" y="661" width="0.1591%" height="15" fill="rgb(241,120,54)" fg:x="933" fg:w="2"/><text x="74.4743%" y="671.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (2 samples, 0.16%)</title><rect x="74.2243%" y="645" width="0.1591%" height="15" fill="rgb(226,80,16)" fg:x="933" fg:w="2"/><text x="74.4743%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="74.3039%" y="629" width="0.0796%" height="15" fill="rgb(240,76,13)" fg:x="934" fg:w="1"/><text x="74.5539%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.3039%" y="613" width="0.0796%" height="15" fill="rgb(252,74,8)" fg:x="934" fg:w="1"/><text x="74.5539%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="74.3835%" y="629" width="0.0796%" height="15" fill="rgb(244,155,2)" fg:x="935" fg:w="1"/><text x="74.6335%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="74.3835%" y="613" width="0.0796%" height="15" fill="rgb(215,81,35)" fg:x="935" fg:w="1"/><text x="74.6335%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.3835%" y="597" width="0.0796%" height="15" fill="rgb(206,55,2)" fg:x="935" fg:w="1"/><text x="74.6335%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.3835%" y="581" width="0.0796%" height="15" fill="rgb(231,2,34)" fg:x="935" fg:w="1"/><text x="74.6335%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.3835%" y="565" width="0.0796%" height="15" fill="rgb(242,176,48)" fg:x="935" fg:w="1"/><text x="74.6335%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.3835%" y="549" width="0.0796%" height="15" fill="rgb(249,31,36)" fg:x="935" fg:w="1"/><text x="74.6335%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.3835%" y="533" width="0.0796%" height="15" fill="rgb(205,18,17)" fg:x="935" fg:w="1"/><text x="74.6335%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.3835%" y="517" width="0.0796%" height="15" fill="rgb(254,130,5)" fg:x="935" fg:w="1"/><text x="74.6335%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.3835%" y="501" width="0.0796%" height="15" fill="rgb(229,42,45)" fg:x="935" fg:w="1"/><text x="74.6335%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.3835%" y="485" width="0.0796%" height="15" fill="rgb(245,95,25)" fg:x="935" fg:w="1"/><text x="74.6335%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.3835%" y="469" width="0.0796%" height="15" fill="rgb(249,193,38)" fg:x="935" fg:w="1"/><text x="74.6335%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.3835%" y="453" width="0.0796%" height="15" fill="rgb(241,140,43)" fg:x="935" fg:w="1"/><text x="74.6335%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.3835%" y="437" width="0.0796%" height="15" fill="rgb(245,78,48)" fg:x="935" fg:w="1"/><text x="74.6335%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.3835%" y="421" width="0.0796%" height="15" fill="rgb(214,92,39)" fg:x="935" fg:w="1"/><text x="74.6335%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.3835%" y="405" width="0.0796%" height="15" fill="rgb(211,189,14)" fg:x="935" fg:w="1"/><text x="74.6335%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="74.3835%" y="661" width="0.2387%" height="15" fill="rgb(218,7,24)" fg:x="935" fg:w="3"/><text x="74.6335%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="74.3835%" y="645" width="0.2387%" height="15" fill="rgb(224,200,49)" fg:x="935" fg:w="3"/><text x="74.6335%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="74.4630%" y="629" width="0.1591%" height="15" fill="rgb(218,210,14)" fg:x="936" fg:w="2"/><text x="74.7130%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="74.4630%" y="613" width="0.1591%" height="15" fill="rgb(234,142,31)" fg:x="936" fg:w="2"/><text x="74.7130%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="74.5426%" y="597" width="0.0796%" height="15" fill="rgb(227,165,2)" fg:x="937" fg:w="1"/><text x="74.7926%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="74.5426%" y="581" width="0.0796%" height="15" fill="rgb(232,44,46)" fg:x="937" fg:w="1"/><text x="74.7926%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="74.5426%" y="565" width="0.0796%" height="15" fill="rgb(236,149,47)" fg:x="937" fg:w="1"/><text x="74.7926%" y="575.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="74.5426%" y="549" width="0.0796%" height="15" fill="rgb(227,45,31)" fg:x="937" fg:w="1"/><text x="74.7926%" y="559.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="74.5426%" y="533" width="0.0796%" height="15" fill="rgb(240,176,51)" fg:x="937" fg:w="1"/><text x="74.7926%" y="543.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (87 samples, 6.92%)</title><rect x="67.7804%" y="709" width="6.9212%" height="15" fill="rgb(249,146,41)" fg:x="852" fg:w="87"/><text x="68.0304%" y="719.50">&lt;tests::H..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (7 samples, 0.56%)</title><rect x="74.1448%" y="693" width="0.5569%" height="15" fill="rgb(213,208,4)" fg:x="932" fg:w="7"/><text x="74.3948%" y="703.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.32%)</title><rect x="74.3835%" y="677" width="0.3182%" height="15" fill="rgb(245,84,36)" fg:x="935" fg:w="4"/><text x="74.6335%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.6221%" y="661" width="0.0796%" height="15" fill="rgb(254,84,18)" fg:x="938" fg:w="1"/><text x="74.8721%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.6221%" y="645" width="0.0796%" height="15" fill="rgb(225,38,54)" fg:x="938" fg:w="1"/><text x="74.8721%" y="655.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="74.7017%" y="581" width="0.0796%" height="15" fill="rgb(246,50,30)" fg:x="939" fg:w="1"/><text x="74.9517%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="74.7017%" y="565" width="0.0796%" height="15" fill="rgb(246,148,9)" fg:x="939" fg:w="1"/><text x="74.9517%" y="575.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="74.7017%" y="693" width="0.1591%" height="15" fill="rgb(223,75,4)" fg:x="939" fg:w="2"/><text x="74.9517%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="74.7017%" y="677" width="0.1591%" height="15" fill="rgb(239,148,41)" fg:x="939" fg:w="2"/><text x="74.9517%" y="687.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="74.7017%" y="661" width="0.1591%" height="15" fill="rgb(205,195,3)" fg:x="939" fg:w="2"/><text x="74.9517%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="74.7017%" y="645" width="0.1591%" height="15" fill="rgb(254,161,1)" fg:x="939" fg:w="2"/><text x="74.9517%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="74.7017%" y="629" width="0.1591%" height="15" fill="rgb(211,229,8)" fg:x="939" fg:w="2"/><text x="74.9517%" y="639.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (2 samples, 0.16%)</title><rect x="74.7017%" y="613" width="0.1591%" height="15" fill="rgb(220,97,9)" fg:x="939" fg:w="2"/><text x="74.9517%" y="623.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (2 samples, 0.16%)</title><rect x="74.7017%" y="597" width="0.1591%" height="15" fill="rgb(240,218,8)" fg:x="939" fg:w="2"/><text x="74.9517%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="74.7812%" y="581" width="0.0796%" height="15" fill="rgb(250,44,0)" fg:x="940" fg:w="1"/><text x="75.0312%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="74.7812%" y="565" width="0.0796%" height="15" fill="rgb(236,41,53)" fg:x="940" fg:w="1"/><text x="75.0312%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.7812%" y="549" width="0.0796%" height="15" fill="rgb(218,227,13)" fg:x="940" fg:w="1"/><text x="75.0312%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.7812%" y="533" width="0.0796%" height="15" fill="rgb(217,94,32)" fg:x="940" fg:w="1"/><text x="75.0312%" y="543.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="74.7812%" y="517" width="0.0796%" height="15" fill="rgb(213,217,12)" fg:x="940" fg:w="1"/><text x="75.0312%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="74.7812%" y="501" width="0.0796%" height="15" fill="rgb(229,13,46)" fg:x="940" fg:w="1"/><text x="75.0312%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="74.7812%" y="485" width="0.0796%" height="15" fill="rgb(243,139,5)" fg:x="940" fg:w="1"/><text x="75.0312%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="74.7812%" y="469" width="0.0796%" height="15" fill="rgb(249,38,45)" fg:x="940" fg:w="1"/><text x="75.0312%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="74.7812%" y="453" width="0.0796%" height="15" fill="rgb(216,70,11)" fg:x="940" fg:w="1"/><text x="75.0312%" y="463.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="74.8608%" y="613" width="0.0796%" height="15" fill="rgb(253,101,25)" fg:x="941" fg:w="1"/><text x="75.1108%" y="623.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="74.8608%" y="597" width="0.0796%" height="15" fill="rgb(207,197,30)" fg:x="941" fg:w="1"/><text x="75.1108%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="74.8608%" y="581" width="0.0796%" height="15" fill="rgb(238,87,13)" fg:x="941" fg:w="1"/><text x="75.1108%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="74.8608%" y="565" width="0.0796%" height="15" fill="rgb(215,155,8)" fg:x="941" fg:w="1"/><text x="75.1108%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.8608%" y="549" width="0.0796%" height="15" fill="rgb(239,166,38)" fg:x="941" fg:w="1"/><text x="75.1108%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="74.8608%" y="533" width="0.0796%" height="15" fill="rgb(240,194,35)" fg:x="941" fg:w="1"/><text x="75.1108%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="74.8608%" y="517" width="0.0796%" height="15" fill="rgb(219,10,44)" fg:x="941" fg:w="1"/><text x="75.1108%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.8608%" y="501" width="0.0796%" height="15" fill="rgb(251,220,35)" fg:x="941" fg:w="1"/><text x="75.1108%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="75.0199%" y="581" width="0.0796%" height="15" fill="rgb(218,117,13)" fg:x="943" fg:w="1"/><text x="75.2699%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="75.0994%" y="549" width="0.0796%" height="15" fill="rgb(221,213,40)" fg:x="944" fg:w="1"/><text x="75.3494%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.0994%" y="533" width="0.0796%" height="15" fill="rgb(251,224,35)" fg:x="944" fg:w="1"/><text x="75.3494%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.0994%" y="517" width="0.0796%" height="15" fill="rgb(241,33,39)" fg:x="944" fg:w="1"/><text x="75.3494%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.0994%" y="501" width="0.0796%" height="15" fill="rgb(222,74,17)" fg:x="944" fg:w="1"/><text x="75.3494%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="75.0994%" y="485" width="0.0796%" height="15" fill="rgb(225,103,0)" fg:x="944" fg:w="1"/><text x="75.3494%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.0994%" y="469" width="0.0796%" height="15" fill="rgb(240,0,12)" fg:x="944" fg:w="1"/><text x="75.3494%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="75.0994%" y="453" width="0.0796%" height="15" fill="rgb(233,213,37)" fg:x="944" fg:w="1"/><text x="75.3494%" y="463.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.40%)</title><rect x="74.9403%" y="613" width="0.3978%" height="15" fill="rgb(225,84,52)" fg:x="942" fg:w="5"/><text x="75.1903%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="74.9403%" y="597" width="0.3978%" height="15" fill="rgb(247,160,51)" fg:x="942" fg:w="5"/><text x="75.1903%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="75.0994%" y="581" width="0.2387%" height="15" fill="rgb(244,60,51)" fg:x="944" fg:w="3"/><text x="75.3494%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="75.0994%" y="565" width="0.2387%" height="15" fill="rgb(233,114,7)" fg:x="944" fg:w="3"/><text x="75.3494%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="75.1790%" y="549" width="0.1591%" height="15" fill="rgb(246,136,16)" fg:x="945" fg:w="2"/><text x="75.4290%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="75.2586%" y="533" width="0.0796%" height="15" fill="rgb(243,114,45)" fg:x="946" fg:w="1"/><text x="75.5086%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.2586%" y="517" width="0.0796%" height="15" fill="rgb(247,183,43)" fg:x="946" fg:w="1"/><text x="75.5086%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.2586%" y="501" width="0.0796%" height="15" fill="rgb(251,210,42)" fg:x="946" fg:w="1"/><text x="75.5086%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.2586%" y="485" width="0.0796%" height="15" fill="rgb(221,88,35)" fg:x="946" fg:w="1"/><text x="75.5086%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.3381%" y="533" width="0.0796%" height="15" fill="rgb(242,21,20)" fg:x="947" fg:w="1"/><text x="75.5881%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.3381%" y="613" width="0.1591%" height="15" fill="rgb(233,226,36)" fg:x="947" fg:w="2"/><text x="75.5881%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="75.3381%" y="597" width="0.1591%" height="15" fill="rgb(243,189,34)" fg:x="947" fg:w="2"/><text x="75.5881%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.3381%" y="581" width="0.1591%" height="15" fill="rgb(207,145,50)" fg:x="947" fg:w="2"/><text x="75.5881%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.3381%" y="565" width="0.1591%" height="15" fill="rgb(242,1,50)" fg:x="947" fg:w="2"/><text x="75.5881%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.3381%" y="549" width="0.1591%" height="15" fill="rgb(231,65,32)" fg:x="947" fg:w="2"/><text x="75.5881%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.4177%" y="533" width="0.0796%" height="15" fill="rgb(208,68,49)" fg:x="948" fg:w="1"/><text x="75.6677%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.4177%" y="517" width="0.0796%" height="15" fill="rgb(253,54,49)" fg:x="948" fg:w="1"/><text x="75.6677%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.5768%" y="549" width="0.0796%" height="15" fill="rgb(245,186,24)" fg:x="950" fg:w="1"/><text x="75.8268%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.6563%" y="549" width="0.0796%" height="15" fill="rgb(209,2,41)" fg:x="951" fg:w="1"/><text x="75.9063%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.6563%" y="533" width="0.0796%" height="15" fill="rgb(242,208,54)" fg:x="951" fg:w="1"/><text x="75.9063%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.7359%" y="517" width="0.0796%" height="15" fill="rgb(225,9,51)" fg:x="952" fg:w="1"/><text x="75.9859%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.7359%" y="501" width="0.0796%" height="15" fill="rgb(207,207,25)" fg:x="952" fg:w="1"/><text x="75.9859%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="75.8154%" y="501" width="0.0796%" height="15" fill="rgb(253,96,18)" fg:x="953" fg:w="1"/><text x="76.0654%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="75.8154%" y="485" width="0.0796%" height="15" fill="rgb(252,215,20)" fg:x="953" fg:w="1"/><text x="76.0654%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.8154%" y="469" width="0.0796%" height="15" fill="rgb(245,227,26)" fg:x="953" fg:w="1"/><text x="76.0654%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="75.5768%" y="581" width="0.3978%" height="15" fill="rgb(241,208,0)" fg:x="950" fg:w="5"/><text x="75.8268%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="75.5768%" y="565" width="0.3978%" height="15" fill="rgb(224,130,10)" fg:x="950" fg:w="5"/><text x="75.8268%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="75.7359%" y="549" width="0.2387%" height="15" fill="rgb(237,29,0)" fg:x="952" fg:w="3"/><text x="75.9859%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="75.7359%" y="533" width="0.2387%" height="15" fill="rgb(219,27,41)" fg:x="952" fg:w="3"/><text x="75.9859%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.8154%" y="517" width="0.1591%" height="15" fill="rgb(245,101,19)" fg:x="953" fg:w="2"/><text x="76.0654%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.8950%" y="501" width="0.0796%" height="15" fill="rgb(243,44,37)" fg:x="954" fg:w="1"/><text x="76.1450%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="75.9745%" y="565" width="0.0796%" height="15" fill="rgb(228,213,43)" fg:x="955" fg:w="1"/><text x="76.2245%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="75.9745%" y="549" width="0.0796%" height="15" fill="rgb(219,163,21)" fg:x="955" fg:w="1"/><text x="76.2245%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="75.9745%" y="533" width="0.0796%" height="15" fill="rgb(234,86,24)" fg:x="955" fg:w="1"/><text x="76.2245%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="75.9745%" y="517" width="0.0796%" height="15" fill="rgb(225,10,24)" fg:x="955" fg:w="1"/><text x="76.2245%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="75.9745%" y="501" width="0.0796%" height="15" fill="rgb(218,109,7)" fg:x="955" fg:w="1"/><text x="76.2245%" y="511.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (8 samples, 0.64%)</title><rect x="75.4972%" y="597" width="0.6364%" height="15" fill="rgb(210,20,26)" fg:x="949" fg:w="8"/><text x="75.7472%" y="607.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="75.9745%" y="581" width="0.1591%" height="15" fill="rgb(216,18,1)" fg:x="955" fg:w="2"/><text x="76.2245%" y="591.50"></text></g><g><title>&lt;serde_json::value::Value as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="76.0541%" y="565" width="0.0796%" height="15" fill="rgb(206,163,23)" fg:x="956" fg:w="1"/><text x="76.3041%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.1337%" y="565" width="0.0796%" height="15" fill="rgb(229,150,31)" fg:x="957" fg:w="1"/><text x="76.3837%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="76.2132%" y="565" width="0.0796%" height="15" fill="rgb(231,10,5)" fg:x="958" fg:w="1"/><text x="76.4632%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.2132%" y="549" width="0.0796%" height="15" fill="rgb(250,40,50)" fg:x="958" fg:w="1"/><text x="76.4632%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="76.2928%" y="565" width="0.0796%" height="15" fill="rgb(217,119,7)" fg:x="959" fg:w="1"/><text x="76.5428%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="76.6110%" y="517" width="0.0796%" height="15" fill="rgb(245,214,40)" fg:x="963" fg:w="1"/><text x="76.8610%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.6110%" y="501" width="0.0796%" height="15" fill="rgb(216,187,1)" fg:x="963" fg:w="1"/><text x="76.8610%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.6110%" y="485" width="0.0796%" height="15" fill="rgb(237,146,21)" fg:x="963" fg:w="1"/><text x="76.8610%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.6110%" y="469" width="0.0796%" height="15" fill="rgb(210,174,47)" fg:x="963" fg:w="1"/><text x="76.8610%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.6110%" y="453" width="0.0796%" height="15" fill="rgb(218,111,39)" fg:x="963" fg:w="1"/><text x="76.8610%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.6110%" y="437" width="0.0796%" height="15" fill="rgb(224,95,19)" fg:x="963" fg:w="1"/><text x="76.8610%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.6110%" y="421" width="0.0796%" height="15" fill="rgb(234,15,38)" fg:x="963" fg:w="1"/><text x="76.8610%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="76.7701%" y="469" width="0.0796%" height="15" fill="rgb(246,56,12)" fg:x="965" fg:w="1"/><text x="77.0201%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.8496%" y="469" width="0.0796%" height="15" fill="rgb(247,16,17)" fg:x="966" fg:w="1"/><text x="77.0996%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.8496%" y="453" width="0.0796%" height="15" fill="rgb(215,151,11)" fg:x="966" fg:w="1"/><text x="77.0996%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.8496%" y="437" width="0.0796%" height="15" fill="rgb(225,16,24)" fg:x="966" fg:w="1"/><text x="77.0996%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="76.5314%" y="533" width="0.4773%" height="15" fill="rgb(217,117,5)" fg:x="962" fg:w="6"/><text x="76.7814%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="76.6905%" y="517" width="0.3182%" height="15" fill="rgb(246,187,53)" fg:x="964" fg:w="4"/><text x="76.9405%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="76.6905%" y="501" width="0.3182%" height="15" fill="rgb(241,71,40)" fg:x="964" fg:w="4"/><text x="76.9405%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="76.6905%" y="485" width="0.3182%" height="15" fill="rgb(231,67,39)" fg:x="964" fg:w="4"/><text x="76.9405%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.9292%" y="469" width="0.0796%" height="15" fill="rgb(222,120,24)" fg:x="967" fg:w="1"/><text x="77.1792%" y="479.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (12 samples, 0.95%)</title><rect x="76.1337%" y="597" width="0.9547%" height="15" fill="rgb(248,3,3)" fg:x="957" fg:w="12"/><text x="76.3837%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (12 samples, 0.95%)</title><rect x="76.1337%" y="581" width="0.9547%" height="15" fill="rgb(228,218,5)" fg:x="957" fg:w="12"/><text x="76.3837%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (9 samples, 0.72%)</title><rect x="76.3723%" y="565" width="0.7160%" height="15" fill="rgb(212,202,43)" fg:x="960" fg:w="9"/><text x="76.6223%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.56%)</title><rect x="76.5314%" y="549" width="0.5569%" height="15" fill="rgb(235,183,2)" fg:x="962" fg:w="7"/><text x="76.7814%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="77.0088%" y="533" width="0.0796%" height="15" fill="rgb(230,165,10)" fg:x="968" fg:w="1"/><text x="77.2588%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.0088%" y="517" width="0.0796%" height="15" fill="rgb(219,54,40)" fg:x="968" fg:w="1"/><text x="77.2588%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.0883%" y="453" width="0.0796%" height="15" fill="rgb(244,73,9)" fg:x="969" fg:w="1"/><text x="77.3383%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.0883%" y="437" width="0.0796%" height="15" fill="rgb(212,32,45)" fg:x="969" fg:w="1"/><text x="77.3383%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.0883%" y="421" width="0.0796%" height="15" fill="rgb(205,58,31)" fg:x="969" fg:w="1"/><text x="77.3383%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.1679%" y="405" width="0.0796%" height="15" fill="rgb(250,120,43)" fg:x="970" fg:w="1"/><text x="77.4179%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.1679%" y="389" width="0.0796%" height="15" fill="rgb(235,13,10)" fg:x="970" fg:w="1"/><text x="77.4179%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="77.1679%" y="421" width="0.2387%" height="15" fill="rgb(232,219,31)" fg:x="970" fg:w="3"/><text x="77.4179%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="77.2474%" y="405" width="0.1591%" height="15" fill="rgb(218,157,51)" fg:x="971" fg:w="2"/><text x="77.4974%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.3270%" y="389" width="0.0796%" height="15" fill="rgb(211,91,52)" fg:x="972" fg:w="1"/><text x="77.5770%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="77.0883%" y="501" width="0.3978%" height="15" fill="rgb(240,173,1)" fg:x="969" fg:w="5"/><text x="77.3383%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="77.0883%" y="485" width="0.3978%" height="15" fill="rgb(248,20,47)" fg:x="969" fg:w="5"/><text x="77.3383%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="77.0883%" y="469" width="0.3978%" height="15" fill="rgb(217,221,40)" fg:x="969" fg:w="5"/><text x="77.3383%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="77.1679%" y="453" width="0.3182%" height="15" fill="rgb(226,149,51)" fg:x="970" fg:w="4"/><text x="77.4179%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="77.1679%" y="437" width="0.3182%" height="15" fill="rgb(252,193,7)" fg:x="970" fg:w="4"/><text x="77.4179%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.4065%" y="421" width="0.0796%" height="15" fill="rgb(205,123,0)" fg:x="973" fg:w="1"/><text x="77.6565%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="77.0883%" y="533" width="0.4773%" height="15" fill="rgb(233,173,25)" fg:x="969" fg:w="6"/><text x="77.3383%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="77.0883%" y="517" width="0.4773%" height="15" fill="rgb(216,63,32)" fg:x="969" fg:w="6"/><text x="77.3383%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.4861%" y="501" width="0.0796%" height="15" fill="rgb(209,56,45)" fg:x="974" fg:w="1"/><text x="77.7361%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="77.5656%" y="533" width="0.1591%" height="15" fill="rgb(226,111,49)" fg:x="975" fg:w="2"/><text x="77.8156%" y="543.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="77.6452%" y="517" width="0.0796%" height="15" fill="rgb(244,181,21)" fg:x="976" fg:w="1"/><text x="77.8952%" y="527.50"></text></g><g><title>engine::session::Session::close (41 samples, 3.26%)</title><rect x="74.7017%" y="709" width="3.2617%" height="15" fill="rgb(222,126,15)" fg:x="939" fg:w="41"/><text x="74.9517%" y="719.50">eng..</text></g><g><title>engine::session::state::State::close (39 samples, 3.10%)</title><rect x="74.8608%" y="693" width="3.1026%" height="15" fill="rgb(222,95,17)" fg:x="941" fg:w="39"/><text x="75.1108%" y="703.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (39 samples, 3.10%)</title><rect x="74.8608%" y="677" width="3.1026%" height="15" fill="rgb(254,46,5)" fg:x="941" fg:w="39"/><text x="75.1108%" y="687.50">eng..</text></g><g><title>core::iter::adapters::try_process (39 samples, 3.10%)</title><rect x="74.8608%" y="661" width="3.1026%" height="15" fill="rgb(236,216,35)" fg:x="941" fg:w="39"/><text x="75.1108%" y="671.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (39 samples, 3.10%)</title><rect x="74.8608%" y="645" width="3.1026%" height="15" fill="rgb(217,187,26)" fg:x="941" fg:w="39"/><text x="75.1108%" y="655.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (39 samples, 3.10%)</title><rect x="74.8608%" y="629" width="3.1026%" height="15" fill="rgb(207,192,25)" fg:x="941" fg:w="39"/><text x="75.1108%" y="639.50">eng..</text></g><g><title>kernel::model::any_entity_changes (31 samples, 2.47%)</title><rect x="75.4972%" y="613" width="2.4662%" height="15" fill="rgb(253,135,27)" fg:x="949" fg:w="31"/><text x="75.7472%" y="623.50">ke..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (11 samples, 0.88%)</title><rect x="77.0883%" y="597" width="0.8751%" height="15" fill="rgb(211,122,29)" fg:x="969" fg:w="11"/><text x="77.3383%" y="607.50"></text></g><g><title>serde_json::de::from_trait (11 samples, 0.88%)</title><rect x="77.0883%" y="581" width="0.8751%" height="15" fill="rgb(233,162,40)" fg:x="969" fg:w="11"/><text x="77.3383%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.88%)</title><rect x="77.0883%" y="565" width="0.8751%" height="15" fill="rgb(222,184,47)" fg:x="969" fg:w="11"/><text x="77.3383%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (11 samples, 0.88%)</title><rect x="77.0883%" y="549" width="0.8751%" height="15" fill="rgb(249,99,23)" fg:x="969" fg:w="11"/><text x="77.3383%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="77.7247%" y="533" width="0.2387%" height="15" fill="rgb(214,60,12)" fg:x="977" fg:w="3"/><text x="77.9747%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.0430%" y="645" width="0.0796%" height="15" fill="rgb(250,229,36)" fg:x="981" fg:w="1"/><text x="78.2930%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.1225%" y="645" width="0.0796%" height="15" fill="rgb(232,195,10)" fg:x="982" fg:w="1"/><text x="78.3725%" y="655.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (4 samples, 0.32%)</title><rect x="77.9634%" y="677" width="0.3182%" height="15" fill="rgb(205,213,31)" fg:x="980" fg:w="4"/><text x="78.2134%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="77.9634%" y="661" width="0.3182%" height="15" fill="rgb(237,43,8)" fg:x="980" fg:w="4"/><text x="78.2134%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.2021%" y="645" width="0.0796%" height="15" fill="rgb(216,208,3)" fg:x="983" fg:w="1"/><text x="78.4521%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.2021%" y="629" width="0.0796%" height="15" fill="rgb(228,179,44)" fg:x="983" fg:w="1"/><text x="78.4521%" y="639.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="78.2816%" y="677" width="0.0796%" height="15" fill="rgb(230,192,27)" fg:x="984" fg:w="1"/><text x="78.5316%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="78.2816%" y="661" width="0.0796%" height="15" fill="rgb(251,30,38)" fg:x="984" fg:w="1"/><text x="78.5316%" y="671.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="78.2816%" y="645" width="0.0796%" height="15" fill="rgb(246,55,52)" fg:x="984" fg:w="1"/><text x="78.5316%" y="655.50"></text></g><g><title>&lt;plugins_core::looking::parser::LookActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="78.2816%" y="629" width="0.0796%" height="15" fill="rgb(249,79,26)" fg:x="984" fg:w="1"/><text x="78.5316%" y="639.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="78.2816%" y="613" width="0.0796%" height="15" fill="rgb(220,202,16)" fg:x="984" fg:w="1"/><text x="78.5316%" y="623.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.5203%" y="661" width="0.0796%" height="15" fill="rgb(250,170,23)" fg:x="987" fg:w="1"/><text x="78.7703%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="78.5998%" y="661" width="0.0796%" height="15" fill="rgb(230,7,37)" fg:x="988" fg:w="1"/><text x="78.8498%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="78.5998%" y="645" width="0.0796%" height="15" fill="rgb(213,71,1)" fg:x="988" fg:w="1"/><text x="78.8498%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="78.5998%" y="629" width="0.0796%" height="15" fill="rgb(227,87,39)" fg:x="988" fg:w="1"/><text x="78.8498%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="78.5998%" y="613" width="0.0796%" height="15" fill="rgb(210,41,29)" fg:x="988" fg:w="1"/><text x="78.8498%" y="623.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="78.5998%" y="597" width="0.0796%" height="15" fill="rgb(206,191,31)" fg:x="988" fg:w="1"/><text x="78.8498%" y="607.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (1 samples, 0.08%)</title><rect x="78.5998%" y="581" width="0.0796%" height="15" fill="rgb(247,75,54)" fg:x="988" fg:w="1"/><text x="78.8498%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="78.5998%" y="565" width="0.0796%" height="15" fill="rgb(208,54,50)" fg:x="988" fg:w="1"/><text x="78.8498%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="78.5998%" y="549" width="0.0796%" height="15" fill="rgb(214,90,37)" fg:x="988" fg:w="1"/><text x="78.8498%" y="559.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="78.5998%" y="533" width="0.0796%" height="15" fill="rgb(220,132,6)" fg:x="988" fg:w="1"/><text x="78.8498%" y="543.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="78.5998%" y="517" width="0.0796%" height="15" fill="rgb(213,167,7)" fg:x="988" fg:w="1"/><text x="78.8498%" y="527.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="78.5998%" y="501" width="0.0796%" height="15" fill="rgb(243,36,27)" fg:x="988" fg:w="1"/><text x="78.8498%" y="511.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (1 samples, 0.08%)</title><rect x="78.5998%" y="485" width="0.0796%" height="15" fill="rgb(235,147,12)" fg:x="988" fg:w="1"/><text x="78.8498%" y="495.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="78.5998%" y="469" width="0.0796%" height="15" fill="rgb(212,198,44)" fg:x="988" fg:w="1"/><text x="78.8498%" y="479.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (1 samples, 0.08%)</title><rect x="78.5998%" y="453" width="0.0796%" height="15" fill="rgb(218,68,50)" fg:x="988" fg:w="1"/><text x="78.8498%" y="463.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (2 samples, 0.16%)</title><rect x="78.6794%" y="613" width="0.1591%" height="15" fill="rgb(224,79,48)" fg:x="989" fg:w="2"/><text x="78.9294%" y="623.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (2 samples, 0.16%)</title><rect x="78.6794%" y="597" width="0.1591%" height="15" fill="rgb(213,191,50)" fg:x="989" fg:w="2"/><text x="78.9294%" y="607.50"></text></g><g><title>tracing_core::subscriber::Subscriber::register_callsite (1 samples, 0.08%)</title><rect x="78.7589%" y="581" width="0.0796%" height="15" fill="rgb(254,146,10)" fg:x="990" fg:w="1"/><text x="79.0089%" y="591.50"></text></g><g><title>&lt;engine::session::logs::SessionSubscriber as tracing_core::subscriber::Subscriber&gt;::enabled (1 samples, 0.08%)</title><rect x="78.7589%" y="565" width="0.0796%" height="15" fill="rgb(215,175,11)" fg:x="990" fg:w="1"/><text x="79.0089%" y="575.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (3 samples, 0.24%)</title><rect x="78.6794%" y="645" width="0.2387%" height="15" fill="rgb(207,49,7)" fg:x="989" fg:w="3"/><text x="78.9294%" y="655.50"></text></g><g><title>tracing_core::callsite::register_dispatch (3 samples, 0.24%)</title><rect x="78.6794%" y="629" width="0.2387%" height="15" fill="rgb(234,144,29)" fg:x="989" fg:w="3"/><text x="78.9294%" y="639.50"></text></g><g><title>tracing_core::callsite::dispatchers::Dispatchers::register_dispatch (1 samples, 0.08%)</title><rect x="78.8385%" y="613" width="0.0796%" height="15" fill="rgb(213,222,48)" fg:x="991" fg:w="1"/><text x="79.0885%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (1 samples, 0.08%)</title><rect x="78.8385%" y="597" width="0.0796%" height="15" fill="rgb(222,8,6)" fg:x="991" fg:w="1"/><text x="79.0885%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="79.0772%" y="517" width="0.0796%" height="15" fill="rgb(221,114,49)" fg:x="994" fg:w="1"/><text x="79.3272%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="79.0772%" y="533" width="0.1591%" height="15" fill="rgb(250,140,42)" fg:x="994" fg:w="2"/><text x="79.3272%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.1567%" y="517" width="0.0796%" height="15" fill="rgb(250,150,27)" fg:x="995" fg:w="1"/><text x="79.4067%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.1567%" y="501" width="0.0796%" height="15" fill="rgb(252,159,3)" fg:x="995" fg:w="1"/><text x="79.4067%" y="511.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="79.1567%" y="485" width="0.0796%" height="15" fill="rgb(241,182,3)" fg:x="995" fg:w="1"/><text x="79.4067%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.2363%" y="469" width="0.0796%" height="15" fill="rgb(236,3,9)" fg:x="996" fg:w="1"/><text x="79.4863%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.2363%" y="453" width="0.0796%" height="15" fill="rgb(223,227,51)" fg:x="996" fg:w="1"/><text x="79.4863%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.2363%" y="437" width="0.0796%" height="15" fill="rgb(232,133,30)" fg:x="996" fg:w="1"/><text x="79.4863%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.2363%" y="421" width="0.0796%" height="15" fill="rgb(209,93,27)" fg:x="996" fg:w="1"/><text x="79.4863%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.2363%" y="405" width="0.0796%" height="15" fill="rgb(208,108,34)" fg:x="996" fg:w="1"/><text x="79.4863%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.2363%" y="389" width="0.0796%" height="15" fill="rgb(215,189,13)" fg:x="996" fg:w="1"/><text x="79.4863%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.2363%" y="373" width="0.0796%" height="15" fill="rgb(206,88,23)" fg:x="996" fg:w="1"/><text x="79.4863%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.2363%" y="357" width="0.0796%" height="15" fill="rgb(240,173,0)" fg:x="996" fg:w="1"/><text x="79.4863%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="79.2363%" y="341" width="0.0796%" height="15" fill="rgb(223,106,52)" fg:x="996" fg:w="1"/><text x="79.4863%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="79.2363%" y="325" width="0.0796%" height="15" fill="rgb(206,130,16)" fg:x="996" fg:w="1"/><text x="79.4863%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="79.2363%" y="309" width="0.0796%" height="15" fill="rgb(220,54,25)" fg:x="996" fg:w="1"/><text x="79.4863%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="79.2363%" y="293" width="0.0796%" height="15" fill="rgb(210,4,38)" fg:x="996" fg:w="1"/><text x="79.4863%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.2363%" y="277" width="0.0796%" height="15" fill="rgb(238,94,39)" fg:x="996" fg:w="1"/><text x="79.4863%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="79.3158%" y="469" width="0.0796%" height="15" fill="rgb(234,124,34)" fg:x="997" fg:w="1"/><text x="79.5658%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.3158%" y="453" width="0.0796%" height="15" fill="rgb(221,91,40)" fg:x="997" fg:w="1"/><text x="79.5658%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.3158%" y="437" width="0.0796%" height="15" fill="rgb(246,53,28)" fg:x="997" fg:w="1"/><text x="79.5658%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="79.3158%" y="421" width="0.0796%" height="15" fill="rgb(229,109,7)" fg:x="997" fg:w="1"/><text x="79.5658%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.3158%" y="405" width="0.0796%" height="15" fill="rgb(249,117,8)" fg:x="997" fg:w="1"/><text x="79.5658%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.3158%" y="389" width="0.0796%" height="15" fill="rgb(210,181,1)" fg:x="997" fg:w="1"/><text x="79.5658%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.3158%" y="373" width="0.0796%" height="15" fill="rgb(211,66,1)" fg:x="997" fg:w="1"/><text x="79.5658%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="79.3158%" y="357" width="0.0796%" height="15" fill="rgb(221,90,14)" fg:x="997" fg:w="1"/><text x="79.5658%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="79.3954%" y="197" width="0.0796%" height="15" fill="rgb(219,222,44)" fg:x="998" fg:w="1"/><text x="79.6454%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="79.3954%" y="373" width="0.1591%" height="15" fill="rgb(246,34,33)" fg:x="998" fg:w="2"/><text x="79.6454%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="79.3954%" y="357" width="0.1591%" height="15" fill="rgb(227,135,41)" fg:x="998" fg:w="2"/><text x="79.6454%" y="367.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="79.3954%" y="341" width="0.1591%" height="15" fill="rgb(226,15,14)" fg:x="998" fg:w="2"/><text x="79.6454%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="79.3954%" y="325" width="0.1591%" height="15" fill="rgb(236,148,47)" fg:x="998" fg:w="2"/><text x="79.6454%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="79.3954%" y="309" width="0.1591%" height="15" fill="rgb(233,162,52)" fg:x="998" fg:w="2"/><text x="79.6454%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="79.3954%" y="293" width="0.1591%" height="15" fill="rgb(244,35,28)" fg:x="998" fg:w="2"/><text x="79.6454%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="79.3954%" y="277" width="0.1591%" height="15" fill="rgb(205,121,10)" fg:x="998" fg:w="2"/><text x="79.6454%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="79.3954%" y="261" width="0.1591%" height="15" fill="rgb(250,58,18)" fg:x="998" fg:w="2"/><text x="79.6454%" y="271.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="79.3954%" y="245" width="0.1591%" height="15" fill="rgb(216,37,13)" fg:x="998" fg:w="2"/><text x="79.6454%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="79.3954%" y="229" width="0.1591%" height="15" fill="rgb(221,215,42)" fg:x="998" fg:w="2"/><text x="79.6454%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="79.3954%" y="213" width="0.1591%" height="15" fill="rgb(217,214,19)" fg:x="998" fg:w="2"/><text x="79.6454%" y="223.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.4749%" y="197" width="0.0796%" height="15" fill="rgb(233,139,13)" fg:x="999" fg:w="1"/><text x="79.7249%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="79.5545%" y="213" width="0.0796%" height="15" fill="rgb(247,168,23)" fg:x="1000" fg:w="1"/><text x="79.8045%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="79.3954%" y="421" width="0.3182%" height="15" fill="rgb(207,202,1)" fg:x="998" fg:w="4"/><text x="79.6454%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="79.3954%" y="405" width="0.3182%" height="15" fill="rgb(220,155,48)" fg:x="998" fg:w="4"/><text x="79.6454%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="79.3954%" y="389" width="0.3182%" height="15" fill="rgb(250,43,26)" fg:x="998" fg:w="4"/><text x="79.6454%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="79.5545%" y="373" width="0.1591%" height="15" fill="rgb(212,190,23)" fg:x="1000" fg:w="2"/><text x="79.8045%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="79.5545%" y="357" width="0.1591%" height="15" fill="rgb(216,39,24)" fg:x="1000" fg:w="2"/><text x="79.8045%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="79.5545%" y="341" width="0.1591%" height="15" fill="rgb(252,113,16)" fg:x="1000" fg:w="2"/><text x="79.8045%" y="351.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="79.5545%" y="325" width="0.1591%" height="15" fill="rgb(208,113,19)" fg:x="1000" fg:w="2"/><text x="79.8045%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="79.5545%" y="309" width="0.1591%" height="15" fill="rgb(234,107,25)" fg:x="1000" fg:w="2"/><text x="79.8045%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="79.5545%" y="293" width="0.1591%" height="15" fill="rgb(234,217,51)" fg:x="1000" fg:w="2"/><text x="79.8045%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="79.5545%" y="277" width="0.1591%" height="15" fill="rgb(251,29,42)" fg:x="1000" fg:w="2"/><text x="79.8045%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="79.5545%" y="261" width="0.1591%" height="15" fill="rgb(221,62,51)" fg:x="1000" fg:w="2"/><text x="79.8045%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="79.5545%" y="245" width="0.1591%" height="15" fill="rgb(240,192,43)" fg:x="1000" fg:w="2"/><text x="79.8045%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="79.5545%" y="229" width="0.1591%" height="15" fill="rgb(224,157,47)" fg:x="1000" fg:w="2"/><text x="79.8045%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="79.6340%" y="213" width="0.0796%" height="15" fill="rgb(226,84,45)" fg:x="1001" fg:w="1"/><text x="79.8840%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.6340%" y="197" width="0.0796%" height="15" fill="rgb(208,207,23)" fg:x="1001" fg:w="1"/><text x="79.8840%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.6340%" y="181" width="0.0796%" height="15" fill="rgb(253,34,51)" fg:x="1001" fg:w="1"/><text x="79.8840%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="79.6340%" y="165" width="0.0796%" height="15" fill="rgb(227,26,34)" fg:x="1001" fg:w="1"/><text x="79.8840%" y="175.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="79.6340%" y="149" width="0.0796%" height="15" fill="rgb(245,75,19)" fg:x="1001" fg:w="1"/><text x="79.8840%" y="159.50"></text></g><g><title>kernel::model::entity::Entity::from_value (6 samples, 0.48%)</title><rect x="79.3954%" y="469" width="0.4773%" height="15" fill="rgb(250,191,31)" fg:x="998" fg:w="6"/><text x="79.6454%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.48%)</title><rect x="79.3954%" y="453" width="0.4773%" height="15" fill="rgb(224,11,50)" fg:x="998" fg:w="6"/><text x="79.6454%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="79.3954%" y="437" width="0.4773%" height="15" fill="rgb(231,171,7)" fg:x="998" fg:w="6"/><text x="79.6454%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="79.7136%" y="421" width="0.1591%" height="15" fill="rgb(252,214,10)" fg:x="1002" fg:w="2"/><text x="79.9636%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="79.7136%" y="405" width="0.1591%" height="15" fill="rgb(249,45,46)" fg:x="1002" fg:w="2"/><text x="79.9636%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="79.7932%" y="389" width="0.0796%" height="15" fill="rgb(240,173,7)" fg:x="1003" fg:w="1"/><text x="80.0432%" y="399.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="79.7932%" y="373" width="0.0796%" height="15" fill="rgb(235,214,13)" fg:x="1003" fg:w="1"/><text x="80.0432%" y="383.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="79.7932%" y="357" width="0.0796%" height="15" fill="rgb(245,156,8)" fg:x="1003" fg:w="1"/><text x="80.0432%" y="367.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="79.8727%" y="357" width="0.0796%" height="15" fill="rgb(235,46,12)" fg:x="1004" fg:w="1"/><text x="80.1227%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="79.8727%" y="405" width="0.1591%" height="15" fill="rgb(221,81,14)" fg:x="1004" fg:w="2"/><text x="80.1227%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="79.8727%" y="389" width="0.1591%" height="15" fill="rgb(238,207,9)" fg:x="1004" fg:w="2"/><text x="80.1227%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="79.8727%" y="373" width="0.1591%" height="15" fill="rgb(224,129,35)" fg:x="1004" fg:w="2"/><text x="80.1227%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.9523%" y="357" width="0.0796%" height="15" fill="rgb(243,218,34)" fg:x="1005" fg:w="1"/><text x="80.2023%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.9523%" y="341" width="0.0796%" height="15" fill="rgb(220,166,13)" fg:x="1005" fg:w="1"/><text x="80.2023%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.9523%" y="325" width="0.0796%" height="15" fill="rgb(227,167,49)" fg:x="1005" fg:w="1"/><text x="80.2023%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.9523%" y="309" width="0.0796%" height="15" fill="rgb(234,142,12)" fg:x="1005" fg:w="1"/><text x="80.2023%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.9523%" y="293" width="0.0796%" height="15" fill="rgb(207,100,48)" fg:x="1005" fg:w="1"/><text x="80.2023%" y="303.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="79.9523%" y="277" width="0.0796%" height="15" fill="rgb(210,25,14)" fg:x="1005" fg:w="1"/><text x="80.2023%" y="287.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (14 samples, 1.11%)</title><rect x="78.9976%" y="549" width="1.1138%" height="15" fill="rgb(246,116,27)" fg:x="993" fg:w="14"/><text x="79.2476%" y="559.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (11 samples, 0.88%)</title><rect x="79.2363%" y="533" width="0.8751%" height="15" fill="rgb(214,193,42)" fg:x="996" fg:w="11"/><text x="79.4863%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (11 samples, 0.88%)</title><rect x="79.2363%" y="517" width="0.8751%" height="15" fill="rgb(214,122,8)" fg:x="996" fg:w="11"/><text x="79.4863%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (11 samples, 0.88%)</title><rect x="79.2363%" y="501" width="0.8751%" height="15" fill="rgb(244,173,18)" fg:x="996" fg:w="11"/><text x="79.4863%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (11 samples, 0.88%)</title><rect x="79.2363%" y="485" width="0.8751%" height="15" fill="rgb(232,68,19)" fg:x="996" fg:w="11"/><text x="79.4863%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="79.8727%" y="469" width="0.2387%" height="15" fill="rgb(236,224,1)" fg:x="1004" fg:w="3"/><text x="80.1227%" y="479.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="79.8727%" y="453" width="0.2387%" height="15" fill="rgb(240,11,8)" fg:x="1004" fg:w="3"/><text x="80.1227%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="79.8727%" y="437" width="0.2387%" height="15" fill="rgb(244,159,20)" fg:x="1004" fg:w="3"/><text x="80.1227%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="79.8727%" y="421" width="0.2387%" height="15" fill="rgb(240,223,54)" fg:x="1004" fg:w="3"/><text x="80.1227%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="80.0318%" y="405" width="0.0796%" height="15" fill="rgb(237,146,5)" fg:x="1006" fg:w="1"/><text x="80.2818%" y="415.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="80.0318%" y="389" width="0.0796%" height="15" fill="rgb(218,221,32)" fg:x="1006" fg:w="1"/><text x="80.2818%" y="399.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (15 samples, 1.19%)</title><rect x="78.9976%" y="565" width="1.1933%" height="15" fill="rgb(244,96,26)" fg:x="993" fg:w="15"/><text x="79.2476%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="80.1114%" y="549" width="0.0796%" height="15" fill="rgb(245,184,37)" fg:x="1007" fg:w="1"/><text x="80.3614%" y="559.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="80.1114%" y="533" width="0.0796%" height="15" fill="rgb(248,91,47)" fg:x="1007" fg:w="1"/><text x="80.3614%" y="543.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="80.1114%" y="517" width="0.0796%" height="15" fill="rgb(243,199,8)" fg:x="1007" fg:w="1"/><text x="80.3614%" y="527.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (2 samples, 0.16%)</title><rect x="80.1909%" y="389" width="0.1591%" height="15" fill="rgb(249,12,15)" fg:x="1008" fg:w="2"/><text x="80.4409%" y="399.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (2 samples, 0.16%)</title><rect x="80.1909%" y="373" width="0.1591%" height="15" fill="rgb(245,97,12)" fg:x="1008" fg:w="2"/><text x="80.4409%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (2 samples, 0.16%)</title><rect x="80.1909%" y="357" width="0.1591%" height="15" fill="rgb(244,61,1)" fg:x="1008" fg:w="2"/><text x="80.4409%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.2705%" y="341" width="0.0796%" height="15" fill="rgb(222,194,10)" fg:x="1009" fg:w="1"/><text x="80.5205%" y="351.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="80.2705%" y="325" width="0.0796%" height="15" fill="rgb(226,178,8)" fg:x="1009" fg:w="1"/><text x="80.5205%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.2705%" y="309" width="0.0796%" height="15" fill="rgb(241,32,34)" fg:x="1009" fg:w="1"/><text x="80.5205%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.2705%" y="293" width="0.0796%" height="15" fill="rgb(254,26,6)" fg:x="1009" fg:w="1"/><text x="80.5205%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="80.3500%" y="341" width="0.0796%" height="15" fill="rgb(249,71,11)" fg:x="1010" fg:w="1"/><text x="80.6000%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="80.3500%" y="357" width="0.1591%" height="15" fill="rgb(232,170,27)" fg:x="1010" fg:w="2"/><text x="80.6000%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.4296%" y="341" width="0.0796%" height="15" fill="rgb(214,223,17)" fg:x="1011" fg:w="1"/><text x="80.6796%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.4296%" y="325" width="0.0796%" height="15" fill="rgb(250,18,15)" fg:x="1011" fg:w="1"/><text x="80.6796%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.5091%" y="325" width="0.0796%" height="15" fill="rgb(212,153,51)" fg:x="1012" fg:w="1"/><text x="80.7591%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.5091%" y="309" width="0.0796%" height="15" fill="rgb(219,194,12)" fg:x="1012" fg:w="1"/><text x="80.7591%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.5091%" y="293" width="0.0796%" height="15" fill="rgb(212,58,17)" fg:x="1012" fg:w="1"/><text x="80.7591%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="80.5091%" y="277" width="0.0796%" height="15" fill="rgb(254,5,10)" fg:x="1012" fg:w="1"/><text x="80.7591%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="80.5091%" y="261" width="0.0796%" height="15" fill="rgb(246,91,7)" fg:x="1012" fg:w="1"/><text x="80.7591%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="80.5091%" y="245" width="0.0796%" height="15" fill="rgb(218,108,49)" fg:x="1012" fg:w="1"/><text x="80.7591%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="80.5091%" y="229" width="0.0796%" height="15" fill="rgb(238,123,20)" fg:x="1012" fg:w="1"/><text x="80.7591%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="80.5091%" y="213" width="0.0796%" height="15" fill="rgb(231,69,23)" fg:x="1012" fg:w="1"/><text x="80.7591%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="80.5091%" y="197" width="0.0796%" height="15" fill="rgb(230,209,3)" fg:x="1012" fg:w="1"/><text x="80.7591%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="80.5091%" y="181" width="0.0796%" height="15" fill="rgb(231,19,0)" fg:x="1012" fg:w="1"/><text x="80.7591%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="80.5091%" y="165" width="0.0796%" height="15" fill="rgb(226,192,25)" fg:x="1012" fg:w="1"/><text x="80.7591%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="80.5091%" y="149" width="0.0796%" height="15" fill="rgb(223,175,53)" fg:x="1012" fg:w="1"/><text x="80.7591%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.5091%" y="133" width="0.0796%" height="15" fill="rgb(248,35,51)" fg:x="1012" fg:w="1"/><text x="80.7591%" y="143.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="80.5091%" y="357" width="0.1591%" height="15" fill="rgb(230,37,26)" fg:x="1012" fg:w="2"/><text x="80.7591%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="80.5091%" y="341" width="0.1591%" height="15" fill="rgb(206,120,22)" fg:x="1012" fg:w="2"/><text x="80.7591%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.5887%" y="325" width="0.0796%" height="15" fill="rgb(207,165,28)" fg:x="1013" fg:w="1"/><text x="80.8387%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.6683%" y="357" width="0.0796%" height="15" fill="rgb(226,23,46)" fg:x="1014" fg:w="1"/><text x="80.9183%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.7478%" y="261" width="0.0796%" height="15" fill="rgb(208,130,44)" fg:x="1015" fg:w="1"/><text x="80.9978%" y="271.50"></text></g><g><title>kernel::model::EntityPtr::gid (2 samples, 0.16%)</title><rect x="80.7478%" y="357" width="0.1591%" height="15" fill="rgb(231,67,8)" fg:x="1015" fg:w="2"/><text x="80.9978%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="80.7478%" y="341" width="0.1591%" height="15" fill="rgb(205,183,22)" fg:x="1015" fg:w="2"/><text x="80.9978%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="80.7478%" y="325" width="0.1591%" height="15" fill="rgb(224,47,9)" fg:x="1015" fg:w="2"/><text x="80.9978%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="80.7478%" y="309" width="0.1591%" height="15" fill="rgb(250,183,49)" fg:x="1015" fg:w="2"/><text x="80.9978%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="80.7478%" y="293" width="0.1591%" height="15" fill="rgb(220,151,39)" fg:x="1015" fg:w="2"/><text x="80.9978%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="80.7478%" y="277" width="0.1591%" height="15" fill="rgb(220,118,20)" fg:x="1015" fg:w="2"/><text x="80.9978%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.8274%" y="261" width="0.0796%" height="15" fill="rgb(231,65,51)" fg:x="1016" fg:w="1"/><text x="81.0774%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.8274%" y="245" width="0.0796%" height="15" fill="rgb(253,125,37)" fg:x="1016" fg:w="1"/><text x="81.0774%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.9069%" y="309" width="0.0796%" height="15" fill="rgb(232,102,6)" fg:x="1017" fg:w="1"/><text x="81.1569%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="80.9865%" y="213" width="0.0796%" height="15" fill="rgb(251,105,13)" fg:x="1018" fg:w="1"/><text x="81.2365%" y="223.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="80.9865%" y="197" width="0.0796%" height="15" fill="rgb(222,179,29)" fg:x="1018" fg:w="1"/><text x="81.2365%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="80.9865%" y="277" width="0.1591%" height="15" fill="rgb(229,180,53)" fg:x="1018" fg:w="2"/><text x="81.2365%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="80.9865%" y="261" width="0.1591%" height="15" fill="rgb(238,104,13)" fg:x="1018" fg:w="2"/><text x="81.2365%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="80.9865%" y="245" width="0.1591%" height="15" fill="rgb(210,130,5)" fg:x="1018" fg:w="2"/><text x="81.2365%" y="255.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="80.9865%" y="229" width="0.1591%" height="15" fill="rgb(233,87,49)" fg:x="1018" fg:w="2"/><text x="81.2365%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="81.0660%" y="213" width="0.0796%" height="15" fill="rgb(243,34,9)" fg:x="1019" fg:w="1"/><text x="81.3160%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="81.1456%" y="277" width="0.0796%" height="15" fill="rgb(235,225,10)" fg:x="1020" fg:w="1"/><text x="81.3956%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="81.1456%" y="261" width="0.0796%" height="15" fill="rgb(212,0,30)" fg:x="1020" fg:w="1"/><text x="81.3956%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="81.1456%" y="245" width="0.0796%" height="15" fill="rgb(211,177,0)" fg:x="1020" fg:w="1"/><text x="81.3956%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="81.1456%" y="229" width="0.0796%" height="15" fill="rgb(225,220,11)" fg:x="1020" fg:w="1"/><text x="81.3956%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.3047%" y="229" width="0.0796%" height="15" fill="rgb(215,10,13)" fg:x="1022" fg:w="1"/><text x="81.5547%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (3 samples, 0.24%)</title><rect x="81.3842%" y="229" width="0.2387%" height="15" fill="rgb(240,177,14)" fg:x="1023" fg:w="3"/><text x="81.6342%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="81.3842%" y="213" width="0.2387%" height="15" fill="rgb(243,7,39)" fg:x="1023" fg:w="3"/><text x="81.6342%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="81.5434%" y="197" width="0.0796%" height="15" fill="rgb(212,99,0)" fg:x="1025" fg:w="1"/><text x="81.7934%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (8 samples, 0.64%)</title><rect x="81.7025%" y="213" width="0.6364%" height="15" fill="rgb(225,162,48)" fg:x="1027" fg:w="8"/><text x="81.9525%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (7 samples, 0.56%)</title><rect x="81.7820%" y="197" width="0.5569%" height="15" fill="rgb(246,16,25)" fg:x="1028" fg:w="7"/><text x="82.0320%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.2593%" y="181" width="0.0796%" height="15" fill="rgb(220,150,2)" fg:x="1034" fg:w="1"/><text x="82.5093%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="82.3389%" y="197" width="0.3978%" height="15" fill="rgb(237,113,11)" fg:x="1035" fg:w="5"/><text x="82.5889%" y="207.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="82.6571%" y="181" width="0.0796%" height="15" fill="rgb(236,70,20)" fg:x="1039" fg:w="1"/><text x="82.9071%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="82.6571%" y="165" width="0.0796%" height="15" fill="rgb(234,94,7)" fg:x="1039" fg:w="1"/><text x="82.9071%" y="175.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="82.3389%" y="213" width="0.4773%" height="15" fill="rgb(250,221,0)" fg:x="1035" fg:w="6"/><text x="82.5889%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="82.7367%" y="197" width="0.0796%" height="15" fill="rgb(245,149,46)" fg:x="1040" fg:w="1"/><text x="82.9867%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="82.8162%" y="149" width="0.0796%" height="15" fill="rgb(215,37,27)" fg:x="1041" fg:w="1"/><text x="83.0662%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="82.8162%" y="133" width="0.0796%" height="15" fill="rgb(232,65,3)" fg:x="1041" fg:w="1"/><text x="83.0662%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="82.8162%" y="117" width="0.0796%" height="15" fill="rgb(214,2,16)" fg:x="1041" fg:w="1"/><text x="83.0662%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.8162%" y="101" width="0.0796%" height="15" fill="rgb(227,131,50)" fg:x="1041" fg:w="1"/><text x="83.0662%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="82.8162%" y="85" width="0.0796%" height="15" fill="rgb(247,131,45)" fg:x="1041" fg:w="1"/><text x="83.0662%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="82.8958%" y="133" width="0.0796%" height="15" fill="rgb(215,97,47)" fg:x="1042" fg:w="1"/><text x="83.1458%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="82.8958%" y="117" width="0.0796%" height="15" fill="rgb(233,143,12)" fg:x="1042" fg:w="1"/><text x="83.1458%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.8958%" y="101" width="0.0796%" height="15" fill="rgb(222,57,17)" fg:x="1042" fg:w="1"/><text x="83.1458%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="82.8958%" y="85" width="0.0796%" height="15" fill="rgb(214,119,38)" fg:x="1042" fg:w="1"/><text x="83.1458%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (38 samples, 3.02%)</title><rect x="82.8958%" y="149" width="3.0231%" height="15" fill="rgb(217,28,47)" fg:x="1042" fg:w="38"/><text x="83.1458%" y="159.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (37 samples, 2.94%)</title><rect x="82.9753%" y="133" width="2.9435%" height="15" fill="rgb(231,14,52)" fg:x="1043" fg:w="37"/><text x="83.2253%" y="143.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (37 samples, 2.94%)</title><rect x="82.9753%" y="117" width="2.9435%" height="15" fill="rgb(220,158,18)" fg:x="1043" fg:w="37"/><text x="83.2253%" y="127.50">al..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 3.18%)</title><rect x="82.8162%" y="197" width="3.1822%" height="15" fill="rgb(222,143,46)" fg:x="1041" fg:w="40"/><text x="83.0662%" y="207.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (40 samples, 3.18%)</title><rect x="82.8162%" y="181" width="3.1822%" height="15" fill="rgb(227,165,5)" fg:x="1041" fg:w="40"/><text x="83.0662%" y="191.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (40 samples, 3.18%)</title><rect x="82.8162%" y="165" width="3.1822%" height="15" fill="rgb(216,222,49)" fg:x="1041" fg:w="40"/><text x="83.0662%" y="175.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="85.9189%" y="149" width="0.0796%" height="15" fill="rgb(238,73,39)" fg:x="1080" fg:w="1"/><text x="86.1689%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.9189%" y="133" width="0.0796%" height="15" fill="rgb(252,115,9)" fg:x="1080" fg:w="1"/><text x="86.1689%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="86.3166%" y="181" width="0.1591%" height="15" fill="rgb(238,202,4)" fg:x="1085" fg:w="2"/><text x="86.5666%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="86.3166%" y="165" width="0.1591%" height="15" fill="rgb(252,153,44)" fg:x="1085" fg:w="2"/><text x="86.5666%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="86.3166%" y="149" width="0.1591%" height="15" fill="rgb(235,128,27)" fg:x="1085" fg:w="2"/><text x="86.5666%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="86.3962%" y="133" width="0.0796%" height="15" fill="rgb(221,121,47)" fg:x="1086" fg:w="1"/><text x="86.6462%" y="143.50"></text></g><g><title>regex_automata::meta::strategy::new (62 samples, 4.93%)</title><rect x="81.6229%" y="229" width="4.9324%" height="15" fill="rgb(247,211,47)" fg:x="1026" fg:w="62"/><text x="81.8729%" y="239.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (47 samples, 3.74%)</title><rect x="82.8162%" y="213" width="3.7391%" height="15" fill="rgb(252,47,49)" fg:x="1041" fg:w="47"/><text x="83.0662%" y="223.50">rege..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.56%)</title><rect x="85.9984%" y="197" width="0.5569%" height="15" fill="rgb(219,119,53)" fg:x="1081" fg:w="7"/><text x="86.2484%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="86.4757%" y="181" width="0.0796%" height="15" fill="rgb(243,165,53)" fg:x="1087" fg:w="1"/><text x="86.7257%" y="191.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="86.5553%" y="181" width="0.0796%" height="15" fill="rgb(230,12,35)" fg:x="1088" fg:w="1"/><text x="86.8053%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.6348%" y="165" width="0.0796%" height="15" fill="rgb(239,57,49)" fg:x="1089" fg:w="1"/><text x="86.8848%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.6348%" y="149" width="0.0796%" height="15" fill="rgb(231,154,7)" fg:x="1089" fg:w="1"/><text x="86.8848%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.6348%" y="133" width="0.0796%" height="15" fill="rgb(248,81,34)" fg:x="1089" fg:w="1"/><text x="86.8848%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="86.5553%" y="197" width="0.2387%" height="15" fill="rgb(247,9,5)" fg:x="1088" fg:w="3"/><text x="86.8053%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="86.6348%" y="181" width="0.1591%" height="15" fill="rgb(228,172,27)" fg:x="1089" fg:w="2"/><text x="86.8848%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="86.7144%" y="165" width="0.0796%" height="15" fill="rgb(230,57,44)" fg:x="1090" fg:w="1"/><text x="86.9644%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="86.7144%" y="149" width="0.0796%" height="15" fill="rgb(249,35,22)" fg:x="1090" fg:w="1"/><text x="86.9644%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="86.7940%" y="197" width="0.0796%" height="15" fill="rgb(250,137,27)" fg:x="1091" fg:w="1"/><text x="87.0440%" y="207.50"></text></g><g><title>regex::regex::string::Regex::new (72 samples, 5.73%)</title><rect x="81.2251%" y="277" width="5.7279%" height="15" fill="rgb(251,57,31)" fg:x="1021" fg:w="72"/><text x="81.4751%" y="287.50">regex::..</text></g><g><title>regex::builders::Builder::build_one_string (72 samples, 5.73%)</title><rect x="81.2251%" y="261" width="5.7279%" height="15" fill="rgb(238,60,0)" fg:x="1021" fg:w="72"/><text x="81.4751%" y="271.50">regex::..</text></g><g><title>regex_automata::meta::regex::Builder::build (72 samples, 5.73%)</title><rect x="81.2251%" y="245" width="5.7279%" height="15" fill="rgb(242,185,39)" fg:x="1021" fg:w="72"/><text x="81.4751%" y="255.50">regex_a..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.40%)</title><rect x="86.5553%" y="229" width="0.3978%" height="15" fill="rgb(240,63,43)" fg:x="1088" fg:w="5"/><text x="86.8053%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="86.5553%" y="213" width="0.3978%" height="15" fill="rgb(236,155,6)" fg:x="1088" fg:w="5"/><text x="86.8053%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="86.8735%" y="197" width="0.0796%" height="15" fill="rgb(215,11,29)" fg:x="1092" fg:w="1"/><text x="87.1235%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="86.9531%" y="229" width="0.3182%" height="15" fill="rgb(228,180,48)" fg:x="1093" fg:w="4"/><text x="87.2031%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="86.9531%" y="213" width="0.3182%" height="15" fill="rgb(241,102,12)" fg:x="1093" fg:w="4"/><text x="87.2031%" y="223.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (80 samples, 6.36%)</title><rect x="80.9865%" y="293" width="6.3644%" height="15" fill="rgb(246,213,4)" fg:x="1018" fg:w="80"/><text x="81.2365%" y="303.50">indefini..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="86.9531%" y="277" width="0.3978%" height="15" fill="rgb(218,134,35)" fg:x="1093" fg:w="5"/><text x="87.2031%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="86.9531%" y="261" width="0.3978%" height="15" fill="rgb(251,117,35)" fg:x="1093" fg:w="5"/><text x="87.2031%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="86.9531%" y="245" width="0.3978%" height="15" fill="rgb(206,156,45)" fg:x="1093" fg:w="5"/><text x="87.2031%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="87.2713%" y="229" width="0.0796%" height="15" fill="rgb(218,52,27)" fg:x="1097" fg:w="1"/><text x="87.5213%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="87.2713%" y="213" width="0.0796%" height="15" fill="rgb(238,83,36)" fg:x="1097" fg:w="1"/><text x="87.5213%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="87.2713%" y="197" width="0.0796%" height="15" fill="rgb(218,53,43)" fg:x="1097" fg:w="1"/><text x="87.5213%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.2713%" y="181" width="0.0796%" height="15" fill="rgb(239,54,39)" fg:x="1097" fg:w="1"/><text x="87.5213%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.2713%" y="165" width="0.0796%" height="15" fill="rgb(212,198,13)" fg:x="1097" fg:w="1"/><text x="87.5213%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="87.3508%" y="229" width="0.0796%" height="15" fill="rgb(234,54,46)" fg:x="1098" fg:w="1"/><text x="87.6008%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="87.3508%" y="213" width="0.0796%" height="15" fill="rgb(217,120,7)" fg:x="1098" fg:w="1"/><text x="87.6008%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.3508%" y="197" width="0.0796%" height="15" fill="rgb(246,39,15)" fg:x="1098" fg:w="1"/><text x="87.6008%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.5895%" y="213" width="0.0796%" height="15" fill="rgb(242,143,31)" fg:x="1101" fg:w="1"/><text x="87.8395%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="87.6691%" y="213" width="0.0796%" height="15" fill="rgb(252,60,24)" fg:x="1102" fg:w="1"/><text x="87.9191%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (7 samples, 0.56%)</title><rect x="87.4304%" y="229" width="0.5569%" height="15" fill="rgb(249,220,7)" fg:x="1099" fg:w="7"/><text x="87.6804%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (3 samples, 0.24%)</title><rect x="87.7486%" y="213" width="0.2387%" height="15" fill="rgb(236,67,13)" fg:x="1103" fg:w="3"/><text x="87.9986%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="87.7486%" y="197" width="0.2387%" height="15" fill="rgb(210,62,39)" fg:x="1103" fg:w="3"/><text x="87.9986%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (3 samples, 0.24%)</title><rect x="87.7486%" y="181" width="0.2387%" height="15" fill="rgb(219,122,53)" fg:x="1103" fg:w="3"/><text x="87.9986%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="87.8282%" y="165" width="0.1591%" height="15" fill="rgb(218,87,25)" fg:x="1104" fg:w="2"/><text x="88.0782%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="87.8282%" y="149" width="0.1591%" height="15" fill="rgb(234,179,48)" fg:x="1104" fg:w="2"/><text x="88.0782%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="87.9077%" y="133" width="0.0796%" height="15" fill="rgb(248,90,0)" fg:x="1105" fg:w="1"/><text x="88.1577%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.9077%" y="117" width="0.0796%" height="15" fill="rgb(207,228,37)" fg:x="1105" fg:w="1"/><text x="88.1577%" y="127.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (4 samples, 0.32%)</title><rect x="88.0668%" y="181" width="0.3182%" height="15" fill="rgb(235,214,15)" fg:x="1107" fg:w="4"/><text x="88.3168%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="88.2259%" y="165" width="0.1591%" height="15" fill="rgb(210,144,39)" fg:x="1109" fg:w="2"/><text x="88.4759%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="88.2259%" y="149" width="0.1591%" height="15" fill="rgb(222,67,41)" fg:x="1109" fg:w="2"/><text x="88.4759%" y="159.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="88.2259%" y="133" width="0.1591%" height="15" fill="rgb(205,35,37)" fg:x="1109" fg:w="2"/><text x="88.4759%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.48%)</title><rect x="87.9873%" y="197" width="0.4773%" height="15" fill="rgb(216,125,40)" fg:x="1106" fg:w="6"/><text x="88.2373%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="88.3850%" y="181" width="0.0796%" height="15" fill="rgb(228,227,20)" fg:x="1111" fg:w="1"/><text x="88.6350%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="88.3850%" y="165" width="0.0796%" height="15" fill="rgb(242,173,45)" fg:x="1111" fg:w="1"/><text x="88.6350%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="88.3850%" y="149" width="0.0796%" height="15" fill="rgb(215,79,24)" fg:x="1111" fg:w="1"/><text x="88.6350%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.56%)</title><rect x="87.9873%" y="229" width="0.5569%" height="15" fill="rgb(238,164,38)" fg:x="1106" fg:w="7"/><text x="88.2373%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.56%)</title><rect x="87.9873%" y="213" width="0.5569%" height="15" fill="rgb(245,196,38)" fg:x="1106" fg:w="7"/><text x="88.2373%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="88.4646%" y="197" width="0.0796%" height="15" fill="rgb(231,217,29)" fg:x="1112" fg:w="1"/><text x="88.7146%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.4646%" y="181" width="0.0796%" height="15" fill="rgb(245,6,4)" fg:x="1112" fg:w="1"/><text x="88.7146%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.4646%" y="165" width="0.0796%" height="15" fill="rgb(214,76,49)" fg:x="1112" fg:w="1"/><text x="88.7146%" y="175.50"></text></g><g><title>regex::regex::string::Regex::new (18 samples, 1.43%)</title><rect x="87.3508%" y="277" width="1.4320%" height="15" fill="rgb(205,96,12)" fg:x="1098" fg:w="18"/><text x="87.6008%" y="287.50"></text></g><g><title>regex::builders::Builder::build_one_string (18 samples, 1.43%)</title><rect x="87.3508%" y="261" width="1.4320%" height="15" fill="rgb(243,131,4)" fg:x="1098" fg:w="18"/><text x="87.6008%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (18 samples, 1.43%)</title><rect x="87.3508%" y="245" width="1.4320%" height="15" fill="rgb(214,114,4)" fg:x="1098" fg:w="18"/><text x="87.6008%" y="255.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="88.5442%" y="229" width="0.2387%" height="15" fill="rgb(234,215,15)" fg:x="1113" fg:w="3"/><text x="88.7942%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="88.5442%" y="213" width="0.2387%" height="15" fill="rgb(250,216,45)" fg:x="1113" fg:w="3"/><text x="88.7942%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (2 samples, 0.16%)</title><rect x="88.6237%" y="197" width="0.1591%" height="15" fill="rgb(236,128,4)" fg:x="1114" fg:w="2"/><text x="88.8737%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,alloc::vec::into_iter::IntoIter&lt;T&gt;&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="88.7033%" y="181" width="0.0796%" height="15" fill="rgb(234,50,33)" fg:x="1115" fg:w="1"/><text x="88.9533%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="88.7828%" y="229" width="0.0796%" height="15" fill="rgb(253,131,37)" fg:x="1116" fg:w="1"/><text x="89.0328%" y="239.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="88.7828%" y="213" width="0.0796%" height="15" fill="rgb(218,55,27)" fg:x="1116" fg:w="1"/><text x="89.0328%" y="223.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (20 samples, 1.59%)</title><rect x="87.3508%" y="293" width="1.5911%" height="15" fill="rgb(241,220,28)" fg:x="1098" fg:w="20"/><text x="87.6008%" y="303.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="88.7828%" y="277" width="0.1591%" height="15" fill="rgb(241,90,48)" fg:x="1116" fg:w="2"/><text x="89.0328%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="88.7828%" y="261" width="0.1591%" height="15" fill="rgb(216,43,37)" fg:x="1116" fg:w="2"/><text x="89.0328%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="88.7828%" y="245" width="0.1591%" height="15" fill="rgb(207,173,9)" fg:x="1116" fg:w="2"/><text x="89.0328%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="88.8624%" y="229" width="0.0796%" height="15" fill="rgb(240,126,30)" fg:x="1117" fg:w="1"/><text x="89.1124%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="88.8624%" y="213" width="0.0796%" height="15" fill="rgb(228,178,53)" fg:x="1117" fg:w="1"/><text x="89.1124%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="88.8624%" y="197" width="0.0796%" height="15" fill="rgb(217,33,4)" fg:x="1117" fg:w="1"/><text x="89.1124%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.8624%" y="181" width="0.0796%" height="15" fill="rgb(206,124,34)" fg:x="1117" fg:w="1"/><text x="89.1124%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.8624%" y="165" width="0.0796%" height="15" fill="rgb(208,122,53)" fg:x="1117" fg:w="1"/><text x="89.1124%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="88.9419%" y="213" width="0.0796%" height="15" fill="rgb(215,202,26)" fg:x="1118" fg:w="1"/><text x="89.1919%" y="223.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="88.9419%" y="261" width="0.1591%" height="15" fill="rgb(232,198,31)" fg:x="1118" fg:w="2"/><text x="89.1919%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="88.9419%" y="245" width="0.1591%" height="15" fill="rgb(222,23,35)" fg:x="1118" fg:w="2"/><text x="89.1919%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="88.9419%" y="229" width="0.1591%" height="15" fill="rgb(242,27,53)" fg:x="1118" fg:w="2"/><text x="89.1919%" y="239.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="89.0215%" y="213" width="0.0796%" height="15" fill="rgb(210,216,42)" fg:x="1119" fg:w="1"/><text x="89.2715%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="89.3397%" y="181" width="0.0796%" height="15" fill="rgb(234,39,38)" fg:x="1123" fg:w="1"/><text x="89.5897%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.3397%" y="165" width="0.0796%" height="15" fill="rgb(235,126,54)" fg:x="1123" fg:w="1"/><text x="89.5897%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="89.3397%" y="149" width="0.0796%" height="15" fill="rgb(235,150,33)" fg:x="1123" fg:w="1"/><text x="89.5897%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="89.4193%" y="181" width="0.0796%" height="15" fill="rgb(249,49,53)" fg:x="1124" fg:w="1"/><text x="89.6693%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="89.4193%" y="165" width="0.0796%" height="15" fill="rgb(238,60,50)" fg:x="1124" fg:w="1"/><text x="89.6693%" y="175.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (9 samples, 0.72%)</title><rect x="88.9419%" y="277" width="0.7160%" height="15" fill="rgb(210,5,2)" fg:x="1118" fg:w="9"/><text x="89.1919%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.56%)</title><rect x="89.1010%" y="261" width="0.5569%" height="15" fill="rgb(214,207,24)" fg:x="1120" fg:w="7"/><text x="89.3510%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.56%)</title><rect x="89.1010%" y="245" width="0.5569%" height="15" fill="rgb(228,173,2)" fg:x="1120" fg:w="7"/><text x="89.3510%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.56%)</title><rect x="89.1010%" y="229" width="0.5569%" height="15" fill="rgb(244,26,8)" fg:x="1120" fg:w="7"/><text x="89.3510%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.56%)</title><rect x="89.1010%" y="213" width="0.5569%" height="15" fill="rgb(249,153,35)" fg:x="1120" fg:w="7"/><text x="89.3510%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.56%)</title><rect x="89.1010%" y="197" width="0.5569%" height="15" fill="rgb(221,215,40)" fg:x="1120" fg:w="7"/><text x="89.3510%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="89.4988%" y="181" width="0.1591%" height="15" fill="rgb(238,106,35)" fg:x="1125" fg:w="2"/><text x="89.7488%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="89.6579%" y="229" width="0.0796%" height="15" fill="rgb(207,195,21)" fg:x="1127" fg:w="1"/><text x="89.9079%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="89.6579%" y="213" width="0.0796%" height="15" fill="rgb(205,43,29)" fg:x="1127" fg:w="1"/><text x="89.9079%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.6579%" y="197" width="0.0796%" height="15" fill="rgb(236,35,21)" fg:x="1127" fg:w="1"/><text x="89.9079%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="89.7375%" y="229" width="0.0796%" height="15" fill="rgb(244,74,8)" fg:x="1128" fg:w="1"/><text x="89.9875%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="89.7375%" y="213" width="0.0796%" height="15" fill="rgb(241,229,7)" fg:x="1128" fg:w="1"/><text x="89.9875%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="89.7375%" y="197" width="0.0796%" height="15" fill="rgb(212,223,25)" fg:x="1128" fg:w="1"/><text x="89.9875%" y="207.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="89.7375%" y="181" width="0.0796%" height="15" fill="rgb(234,58,53)" fg:x="1128" fg:w="1"/><text x="89.9875%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (5 samples, 0.40%)</title><rect x="89.8170%" y="197" width="0.3978%" height="15" fill="rgb(244,36,1)" fg:x="1129" fg:w="5"/><text x="90.0670%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.1352%" y="181" width="0.0796%" height="15" fill="rgb(222,40,54)" fg:x="1133" fg:w="1"/><text x="90.3852%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (6 samples, 0.48%)</title><rect x="89.8170%" y="213" width="0.4773%" height="15" fill="rgb(210,207,39)" fg:x="1129" fg:w="6"/><text x="90.0670%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="90.2148%" y="197" width="0.0796%" height="15" fill="rgb(234,52,14)" fg:x="1134" fg:w="1"/><text x="90.4648%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="90.2944%" y="213" width="0.0796%" height="15" fill="rgb(239,108,46)" fg:x="1135" fg:w="1"/><text x="90.5444%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="90.2944%" y="197" width="0.0796%" height="15" fill="rgb(252,223,5)" fg:x="1135" fg:w="1"/><text x="90.5444%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (4 samples, 0.32%)</title><rect x="90.4535%" y="181" width="0.3182%" height="15" fill="rgb(227,181,11)" fg:x="1137" fg:w="4"/><text x="90.7035%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="90.5330%" y="165" width="0.2387%" height="15" fill="rgb(248,126,40)" fg:x="1138" fg:w="3"/><text x="90.7830%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="90.5330%" y="149" width="0.2387%" height="15" fill="rgb(243,1,18)" fg:x="1138" fg:w="3"/><text x="90.7830%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="90.5330%" y="133" width="0.2387%" height="15" fill="rgb(214,145,23)" fg:x="1138" fg:w="3"/><text x="90.7830%" y="143.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="90.5330%" y="117" width="0.2387%" height="15" fill="rgb(241,218,11)" fg:x="1138" fg:w="3"/><text x="90.7830%" y="127.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (2 samples, 0.16%)</title><rect x="90.7717%" y="165" width="0.1591%" height="15" fill="rgb(214,219,24)" fg:x="1141" fg:w="2"/><text x="91.0217%" y="175.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.16%)</title><rect x="90.7717%" y="149" width="0.1591%" height="15" fill="rgb(235,32,7)" fg:x="1141" fg:w="2"/><text x="91.0217%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (8 samples, 0.64%)</title><rect x="90.3739%" y="213" width="0.6364%" height="15" fill="rgb(227,121,28)" fg:x="1136" fg:w="8"/><text x="90.6239%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (8 samples, 0.64%)</title><rect x="90.3739%" y="197" width="0.6364%" height="15" fill="rgb(216,129,49)" fg:x="1136" fg:w="8"/><text x="90.6239%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (3 samples, 0.24%)</title><rect x="90.7717%" y="181" width="0.2387%" height="15" fill="rgb(207,194,50)" fg:x="1141" fg:w="3"/><text x="91.0217%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="90.9308%" y="165" width="0.0796%" height="15" fill="rgb(207,4,18)" fg:x="1143" fg:w="1"/><text x="91.1808%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.0899%" y="181" width="0.0796%" height="15" fill="rgb(213,50,30)" fg:x="1145" fg:w="1"/><text x="91.3399%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.0899%" y="165" width="0.0796%" height="15" fill="rgb(208,77,22)" fg:x="1145" fg:w="1"/><text x="91.3399%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.0899%" y="149" width="0.0796%" height="15" fill="rgb(244,204,34)" fg:x="1145" fg:w="1"/><text x="91.3399%" y="159.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.2490%" y="101" width="0.0796%" height="15" fill="rgb(230,20,17)" fg:x="1147" fg:w="1"/><text x="91.4990%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (5 samples, 0.40%)</title><rect x="91.3286%" y="101" width="0.3978%" height="15" fill="rgb(237,83,15)" fg:x="1148" fg:w="5"/><text x="91.5786%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="91.4877%" y="85" width="0.2387%" height="15" fill="rgb(221,109,25)" fg:x="1150" fg:w="3"/><text x="91.7377%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="91.5672%" y="69" width="0.1591%" height="15" fill="rgb(205,194,52)" fg:x="1151" fg:w="2"/><text x="91.8172%" y="79.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="91.5672%" y="53" width="0.1591%" height="15" fill="rgb(244,173,54)" fg:x="1151" fg:w="2"/><text x="91.8172%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.24%)</title><rect x="91.7263%" y="101" width="0.2387%" height="15" fill="rgb(227,181,18)" fg:x="1153" fg:w="3"/><text x="91.9763%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="91.8059%" y="85" width="0.1591%" height="15" fill="rgb(238,36,30)" fg:x="1154" fg:w="2"/><text x="92.0559%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="91.8059%" y="69" width="0.1591%" height="15" fill="rgb(254,85,0)" fg:x="1154" fg:w="2"/><text x="92.0559%" y="79.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="91.8059%" y="53" width="0.1591%" height="15" fill="rgb(247,63,33)" fg:x="1154" fg:w="2"/><text x="92.0559%" y="63.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.1241%" y="69" width="0.0796%" height="15" fill="rgb(220,7,54)" fg:x="1158" fg:w="1"/><text x="92.3741%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.1241%" y="53" width="0.0796%" height="15" fill="rgb(238,227,21)" fg:x="1158" fg:w="1"/><text x="92.3741%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="92.1241%" y="37" width="0.0796%" height="15" fill="rgb(237,29,31)" fg:x="1158" fg:w="1"/><text x="92.3741%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.32%)</title><rect x="91.9650%" y="101" width="0.3182%" height="15" fill="rgb(211,21,50)" fg:x="1156" fg:w="4"/><text x="92.2150%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.32%)</title><rect x="91.9650%" y="85" width="0.3182%" height="15" fill="rgb(239,119,2)" fg:x="1156" fg:w="4"/><text x="92.2150%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="92.2037%" y="69" width="0.0796%" height="15" fill="rgb(250,2,39)" fg:x="1159" fg:w="1"/><text x="92.4537%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.2037%" y="53" width="0.0796%" height="15" fill="rgb(244,46,53)" fg:x="1159" fg:w="1"/><text x="92.4537%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="92.2832%" y="85" width="0.0796%" height="15" fill="rgb(209,21,19)" fg:x="1160" fg:w="1"/><text x="92.5332%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.16%)</title><rect x="92.2832%" y="101" width="0.1591%" height="15" fill="rgb(236,145,4)" fg:x="1160" fg:w="2"/><text x="92.5332%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="92.3628%" y="85" width="0.0796%" height="15" fill="rgb(220,133,36)" fg:x="1161" fg:w="1"/><text x="92.6128%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="92.3628%" y="69" width="0.0796%" height="15" fill="rgb(244,18,3)" fg:x="1161" fg:w="1"/><text x="92.6128%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (34 samples, 2.70%)</title><rect x="92.4423%" y="101" width="2.7049%" height="15" fill="rgb(232,171,48)" fg:x="1162" fg:w="34"/><text x="92.6923%" y="111.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (34 samples, 2.70%)</title><rect x="92.4423%" y="85" width="2.7049%" height="15" fill="rgb(223,223,53)" fg:x="1162" fg:w="34"/><text x="92.6923%" y="95.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (34 samples, 2.70%)</title><rect x="92.4423%" y="69" width="2.7049%" height="15" fill="rgb(246,92,13)" fg:x="1162" fg:w="34"/><text x="92.6923%" y="79.50">al..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (53 samples, 4.22%)</title><rect x="91.1695%" y="133" width="4.2164%" height="15" fill="rgb(229,171,10)" fg:x="1146" fg:w="53"/><text x="91.4195%" y="143.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (52 samples, 4.14%)</title><rect x="91.2490%" y="117" width="4.1368%" height="15" fill="rgb(213,131,26)" fg:x="1147" fg:w="52"/><text x="91.4990%" y="127.50">regex..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.24%)</title><rect x="95.1472%" y="101" width="0.2387%" height="15" fill="rgb(242,87,54)" fg:x="1196" fg:w="3"/><text x="95.3972%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="95.2267%" y="85" width="0.1591%" height="15" fill="rgb(237,21,35)" fg:x="1197" fg:w="2"/><text x="95.4767%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.3063%" y="69" width="0.0796%" height="15" fill="rgb(253,13,47)" fg:x="1198" fg:w="1"/><text x="95.5563%" y="79.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (56 samples, 4.46%)</title><rect x="91.0103%" y="197" width="4.4551%" height="15" fill="rgb(215,122,49)" fg:x="1144" fg:w="56"/><text x="91.2603%" y="207.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (54 samples, 4.30%)</title><rect x="91.1695%" y="181" width="4.2959%" height="15" fill="rgb(209,179,30)" fg:x="1146" fg:w="54"/><text x="91.4195%" y="191.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (54 samples, 4.30%)</title><rect x="91.1695%" y="165" width="4.2959%" height="15" fill="rgb(235,100,24)" fg:x="1146" fg:w="54"/><text x="91.4195%" y="175.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (54 samples, 4.30%)</title><rect x="91.1695%" y="149" width="4.2959%" height="15" fill="rgb(209,67,24)" fg:x="1146" fg:w="54"/><text x="91.4195%" y="159.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_bounded (1 samples, 0.08%)</title><rect x="95.3858%" y="133" width="0.0796%" height="15" fill="rgb(206,74,32)" fg:x="1199" fg:w="1"/><text x="95.6358%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="95.7836%" y="181" width="0.3182%" height="15" fill="rgb(212,45,25)" fg:x="1204" fg:w="4"/><text x="96.0336%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="95.9427%" y="165" width="0.1591%" height="15" fill="rgb(239,26,3)" fg:x="1206" fg:w="2"/><text x="96.1927%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.0223%" y="149" width="0.0796%" height="15" fill="rgb(218,36,15)" fg:x="1207" fg:w="1"/><text x="96.2723%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.0223%" y="133" width="0.0796%" height="15" fill="rgb(206,108,24)" fg:x="1207" fg:w="1"/><text x="96.2723%" y="143.50"></text></g><g><title>regex_automata::meta::strategy::new (80 samples, 6.36%)</title><rect x="89.8170%" y="229" width="6.3644%" height="15" fill="rgb(234,204,42)" fg:x="1129" fg:w="80"/><text x="90.0670%" y="239.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (65 samples, 5.17%)</title><rect x="91.0103%" y="213" width="5.1710%" height="15" fill="rgb(229,2,11)" fg:x="1144" fg:w="65"/><text x="91.2603%" y="223.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (9 samples, 0.72%)</title><rect x="95.4654%" y="197" width="0.7160%" height="15" fill="rgb(221,20,48)" fg:x="1200" fg:w="9"/><text x="95.7154%" y="207.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="96.1018%" y="181" width="0.0796%" height="15" fill="rgb(244,164,10)" fg:x="1208" fg:w="1"/><text x="96.3518%" y="191.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="96.1018%" y="165" width="0.0796%" height="15" fill="rgb(243,229,2)" fg:x="1208" fg:w="1"/><text x="96.3518%" y="175.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (202 samples, 16.07%)</title><rect x="80.3500%" y="373" width="16.0700%" height="15" fill="rgb(232,131,37)" fg:x="1010" fg:w="202"/><text x="80.6000%" y="383.50">&lt;&amp;kernel::model::EntityPt..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (195 samples, 15.51%)</title><rect x="80.9069%" y="357" width="15.5131%" height="15" fill="rgb(217,156,11)" fg:x="1017" fg:w="195"/><text x="81.1569%" y="367.50">plugins_core::looking::m..</text></g><g><title>indefinite::indefinite (195 samples, 15.51%)</title><rect x="80.9069%" y="341" width="15.5131%" height="15" fill="rgb(239,99,48)" fg:x="1017" fg:w="195"/><text x="81.1569%" y="351.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (195 samples, 15.51%)</title><rect x="80.9069%" y="325" width="15.5131%" height="15" fill="rgb(231,209,9)" fg:x="1017" fg:w="195"/><text x="81.1569%" y="335.50">indefinite::methods::ind..</text></g><g><title>indefinite::methods::apply_rules (194 samples, 15.43%)</title><rect x="80.9865%" y="309" width="15.4336%" height="15" fill="rgb(254,97,27)" fg:x="1018" fg:w="194"/><text x="81.2365%" y="319.50">indefinite::methods::app..</text></g><g><title>indefinite::rules::number::Number::check (94 samples, 7.48%)</title><rect x="88.9419%" y="293" width="7.4781%" height="15" fill="rgb(223,151,38)" fg:x="1118" fg:w="94"/><text x="89.1919%" y="303.50">indefinite..</text></g><g><title>regex::regex::string::Regex::new (85 samples, 6.76%)</title><rect x="89.6579%" y="277" width="6.7621%" height="15" fill="rgb(219,206,35)" fg:x="1127" fg:w="85"/><text x="89.9079%" y="287.50">regex::re..</text></g><g><title>regex::builders::Builder::build_one_string (85 samples, 6.76%)</title><rect x="89.6579%" y="261" width="6.7621%" height="15" fill="rgb(216,130,31)" fg:x="1127" fg:w="85"/><text x="89.9079%" y="271.50">regex::bu..</text></g><g><title>regex_automata::meta::regex::Builder::build (85 samples, 6.76%)</title><rect x="89.6579%" y="245" width="6.7621%" height="15" fill="rgb(251,97,34)" fg:x="1127" fg:w="85"/><text x="89.9079%" y="255.50">regex_aut..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="96.1814%" y="229" width="0.2387%" height="15" fill="rgb(246,159,47)" fg:x="1209" fg:w="3"/><text x="96.4314%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="96.1814%" y="213" width="0.2387%" height="15" fill="rgb(232,87,10)" fg:x="1209" fg:w="3"/><text x="96.4314%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (2 samples, 0.16%)</title><rect x="96.2609%" y="197" width="0.1591%" height="15" fill="rgb(249,1,37)" fg:x="1210" fg:w="2"/><text x="96.5109%" y="207.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="96.4200%" y="373" width="0.0796%" height="15" fill="rgb(239,135,14)" fg:x="1212" fg:w="1"/><text x="96.6700%" y="383.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="96.4200%" y="357" width="0.0796%" height="15" fill="rgb(253,116,46)" fg:x="1212" fg:w="1"/><text x="96.6700%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="96.4996%" y="373" width="0.0796%" height="15" fill="rgb(222,217,37)" fg:x="1213" fg:w="1"/><text x="96.7496%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.4996%" y="357" width="0.0796%" height="15" fill="rgb(252,96,8)" fg:x="1213" fg:w="1"/><text x="96.7496%" y="367.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (207 samples, 16.47%)</title><rect x="80.1909%" y="533" width="16.4678%" height="15" fill="rgb(254,103,41)" fg:x="1008" fg:w="207"/><text x="80.4409%" y="543.50">kernel::plugins::mw::Midd..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (207 samples, 16.47%)</title><rect x="80.1909%" y="517" width="16.4678%" height="15" fill="rgb(218,213,19)" fg:x="1008" fg:w="207"/><text x="80.4409%" y="527.50">&lt;plugins_dynlib::DynamicM..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (207 samples, 16.47%)</title><rect x="80.1909%" y="501" width="16.4678%" height="15" fill="rgb(253,95,21)" fg:x="1008" fg:w="207"/><text x="80.4409%" y="511.50">kernel::plugins::mw::Midd..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (207 samples, 16.47%)</title><rect x="80.1909%" y="485" width="16.4678%" height="15" fill="rgb(229,26,28)" fg:x="1008" fg:w="207"/><text x="80.4409%" y="495.50">core::ops::function::FnOn..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (207 samples, 16.47%)</title><rect x="80.1909%" y="469" width="16.4678%" height="15" fill="rgb(230,129,16)" fg:x="1008" fg:w="207"/><text x="80.4409%" y="479.50">kernel::plugins::mw::Midd..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (207 samples, 16.47%)</title><rect x="80.1909%" y="453" width="16.4678%" height="15" fill="rgb(236,126,17)" fg:x="1008" fg:w="207"/><text x="80.4409%" y="463.50">core::ops::function::FnOn..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (207 samples, 16.47%)</title><rect x="80.1909%" y="437" width="16.4678%" height="15" fill="rgb(209,33,33)" fg:x="1008" fg:w="207"/><text x="80.4409%" y="447.50">&lt;alloc::boxed::Box&lt;F,A&gt; a..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (207 samples, 16.47%)</title><rect x="80.1909%" y="421" width="16.4678%" height="15" fill="rgb(227,85,29)" fg:x="1008" fg:w="207"/><text x="80.4409%" y="431.50">&lt;engine::session::state::..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (207 samples, 16.47%)</title><rect x="80.1909%" y="405" width="16.4678%" height="15" fill="rgb(241,53,46)" fg:x="1008" fg:w="207"/><text x="80.4409%" y="415.50">&lt;plugins_core::looking::a..</text></g><g><title>plugins_core::looking::model::new_area_observation (205 samples, 16.31%)</title><rect x="80.3500%" y="389" width="16.3087%" height="15" fill="rgb(228,167,53)" fg:x="1010" fg:w="205"/><text x="80.6000%" y="399.50">plugins_core::looking::mo..</text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::OpenedScope&lt;plugins_core::moving::model::Occupyable&gt;&gt; (1 samples, 0.08%)</title><rect x="96.5792%" y="373" width="0.0796%" height="15" fill="rgb(238,195,45)" fg:x="1214" fg:w="1"/><text x="96.8292%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="96.5792%" y="357" width="0.0796%" height="15" fill="rgb(252,124,45)" fg:x="1214" fg:w="1"/><text x="96.8292%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.5792%" y="341" width="0.0796%" height="15" fill="rgb(251,38,35)" fg:x="1214" fg:w="1"/><text x="96.8292%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="96.7383%" y="501" width="0.0796%" height="15" fill="rgb(227,33,2)" fg:x="1216" fg:w="1"/><text x="96.9883%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.7383%" y="485" width="0.0796%" height="15" fill="rgb(223,157,46)" fg:x="1216" fg:w="1"/><text x="96.9883%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.7383%" y="469" width="0.0796%" height="15" fill="rgb(222,78,41)" fg:x="1216" fg:w="1"/><text x="96.9883%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="96.8178%" y="469" width="0.0796%" height="15" fill="rgb(248,176,11)" fg:x="1217" fg:w="1"/><text x="97.0678%" y="479.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="96.8178%" y="485" width="0.1591%" height="15" fill="rgb(241,221,18)" fg:x="1217" fg:w="2"/><text x="97.0678%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.8974%" y="469" width="0.0796%" height="15" fill="rgb(218,85,22)" fg:x="1218" fg:w="1"/><text x="97.1474%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.8974%" y="453" width="0.0796%" height="15" fill="rgb(222,223,7)" fg:x="1218" fg:w="1"/><text x="97.1474%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="96.8974%" y="437" width="0.0796%" height="15" fill="rgb(254,59,39)" fg:x="1218" fg:w="1"/><text x="97.1474%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.8974%" y="421" width="0.0796%" height="15" fill="rgb(247,100,27)" fg:x="1218" fg:w="1"/><text x="97.1474%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.9769%" y="421" width="0.0796%" height="15" fill="rgb(237,207,10)" fg:x="1219" fg:w="1"/><text x="97.2269%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.9769%" y="405" width="0.0796%" height="15" fill="rgb(220,121,28)" fg:x="1219" fg:w="1"/><text x="97.2269%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.9769%" y="389" width="0.0796%" height="15" fill="rgb(213,223,20)" fg:x="1219" fg:w="1"/><text x="97.2269%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.9769%" y="373" width="0.0796%" height="15" fill="rgb(205,121,27)" fg:x="1219" fg:w="1"/><text x="97.2269%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.9769%" y="357" width="0.0796%" height="15" fill="rgb(253,24,53)" fg:x="1219" fg:w="1"/><text x="97.2269%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.0565%" y="277" width="0.0796%" height="15" fill="rgb(224,224,47)" fg:x="1220" fg:w="1"/><text x="97.3065%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.0565%" y="261" width="0.0796%" height="15" fill="rgb(250,125,36)" fg:x="1220" fg:w="1"/><text x="97.3065%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.0565%" y="245" width="0.0796%" height="15" fill="rgb(240,144,38)" fg:x="1220" fg:w="1"/><text x="97.3065%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.0565%" y="229" width="0.0796%" height="15" fill="rgb(250,15,50)" fg:x="1220" fg:w="1"/><text x="97.3065%" y="239.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="97.0565%" y="357" width="0.1591%" height="15" fill="rgb(210,24,26)" fg:x="1220" fg:w="2"/><text x="97.3065%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="97.0565%" y="341" width="0.1591%" height="15" fill="rgb(234,53,53)" fg:x="1220" fg:w="2"/><text x="97.3065%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="97.0565%" y="325" width="0.1591%" height="15" fill="rgb(208,108,28)" fg:x="1220" fg:w="2"/><text x="97.3065%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="97.0565%" y="309" width="0.1591%" height="15" fill="rgb(227,143,7)" fg:x="1220" fg:w="2"/><text x="97.3065%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="97.0565%" y="293" width="0.1591%" height="15" fill="rgb(238,189,38)" fg:x="1220" fg:w="2"/><text x="97.3065%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.1360%" y="277" width="0.0796%" height="15" fill="rgb(222,69,15)" fg:x="1221" fg:w="1"/><text x="97.3860%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.1360%" y="261" width="0.0796%" height="15" fill="rgb(213,169,7)" fg:x="1221" fg:w="1"/><text x="97.3860%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.1360%" y="245" width="0.0796%" height="15" fill="rgb(251,219,4)" fg:x="1221" fg:w="1"/><text x="97.3860%" y="255.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.1360%" y="229" width="0.0796%" height="15" fill="rgb(241,55,40)" fg:x="1221" fg:w="1"/><text x="97.3860%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.1360%" y="213" width="0.0796%" height="15" fill="rgb(243,57,30)" fg:x="1221" fg:w="1"/><text x="97.3860%" y="223.50"></text></g><g><title>plugins_core::tools::contained_by (6 samples, 0.48%)</title><rect x="96.8178%" y="501" width="0.4773%" height="15" fill="rgb(234,50,30)" fg:x="1217" fg:w="6"/><text x="97.0678%" y="511.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (4 samples, 0.32%)</title><rect x="96.9769%" y="485" width="0.3182%" height="15" fill="rgb(239,23,42)" fg:x="1219" fg:w="4"/><text x="97.2269%" y="495.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (4 samples, 0.32%)</title><rect x="96.9769%" y="469" width="0.3182%" height="15" fill="rgb(217,38,19)" fg:x="1219" fg:w="4"/><text x="97.2269%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (4 samples, 0.32%)</title><rect x="96.9769%" y="453" width="0.3182%" height="15" fill="rgb(215,179,16)" fg:x="1219" fg:w="4"/><text x="97.2269%" y="463.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="96.9769%" y="437" width="0.3182%" height="15" fill="rgb(254,21,37)" fg:x="1219" fg:w="4"/><text x="97.2269%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="97.0565%" y="421" width="0.2387%" height="15" fill="rgb(219,207,48)" fg:x="1220" fg:w="3"/><text x="97.3065%" y="431.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="97.0565%" y="405" width="0.2387%" height="15" fill="rgb(227,225,41)" fg:x="1220" fg:w="3"/><text x="97.3065%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="97.0565%" y="389" width="0.2387%" height="15" fill="rgb(223,130,1)" fg:x="1220" fg:w="3"/><text x="97.3065%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="97.0565%" y="373" width="0.2387%" height="15" fill="rgb(249,54,42)" fg:x="1220" fg:w="3"/><text x="97.3065%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.2156%" y="357" width="0.0796%" height="15" fill="rgb(248,69,25)" fg:x="1222" fg:w="1"/><text x="97.4656%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.2156%" y="341" width="0.0796%" height="15" fill="rgb(234,21,32)" fg:x="1222" fg:w="1"/><text x="97.4656%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.2951%" y="469" width="0.0796%" height="15" fill="rgb(252,136,6)" fg:x="1223" fg:w="1"/><text x="97.5451%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.2951%" y="453" width="0.0796%" height="15" fill="rgb(245,87,12)" fg:x="1223" fg:w="1"/><text x="97.5451%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.2951%" y="437" width="0.0796%" height="15" fill="rgb(208,12,15)" fg:x="1223" fg:w="1"/><text x="97.5451%" y="447.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::de::Deserialize for kernel::model::base::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.4543%" y="437" width="0.0796%" height="15" fill="rgb(250,98,2)" fg:x="1225" fg:w="1"/><text x="97.7043%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.4543%" y="421" width="0.0796%" height="15" fill="rgb(205,213,15)" fg:x="1225" fg:w="1"/><text x="97.7043%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="97.4543%" y="405" width="0.0796%" height="15" fill="rgb(248,192,44)" fg:x="1225" fg:w="1"/><text x="97.7043%" y="415.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="97.4543%" y="389" width="0.0796%" height="15" fill="rgb(221,89,17)" fg:x="1225" fg:w="1"/><text x="97.7043%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.5338%" y="389" width="0.0796%" height="15" fill="rgb(209,55,3)" fg:x="1226" fg:w="1"/><text x="97.7838%" y="399.50"></text></g><g><title>plugins_core::tools::occupied_by (5 samples, 0.40%)</title><rect x="97.2951%" y="501" width="0.3978%" height="15" fill="rgb(247,23,45)" fg:x="1223" fg:w="5"/><text x="97.5451%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.40%)</title><rect x="97.2951%" y="485" width="0.3978%" height="15" fill="rgb(235,152,23)" fg:x="1223" fg:w="5"/><text x="97.5451%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="97.3747%" y="469" width="0.3182%" height="15" fill="rgb(244,63,13)" fg:x="1224" fg:w="4"/><text x="97.6247%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="97.3747%" y="453" width="0.3182%" height="15" fill="rgb(227,30,37)" fg:x="1224" fg:w="4"/><text x="97.6247%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="97.5338%" y="437" width="0.1591%" height="15" fill="rgb(224,49,42)" fg:x="1226" fg:w="2"/><text x="97.7838%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="97.5338%" y="421" width="0.1591%" height="15" fill="rgb(218,129,5)" fg:x="1226" fg:w="2"/><text x="97.7838%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="97.5338%" y="405" width="0.1591%" height="15" fill="rgb(240,199,54)" fg:x="1226" fg:w="2"/><text x="97.7838%" y="415.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.6134%" y="389" width="0.0796%" height="15" fill="rgb(234,31,13)" fg:x="1227" fg:w="1"/><text x="97.8634%" y="399.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="97.6134%" y="373" width="0.0796%" height="15" fill="rgb(219,73,54)" fg:x="1227" fg:w="1"/><text x="97.8634%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.6134%" y="357" width="0.0796%" height="15" fill="rgb(251,162,10)" fg:x="1227" fg:w="1"/><text x="97.8634%" y="367.50"></text></g><g><title>engine::session::Session::captured (245 samples, 19.49%)</title><rect x="78.3612%" y="677" width="19.4909%" height="15" fill="rgb(240,138,47)" fg:x="985" fg:w="245"/><text x="78.6112%" y="687.50">engine::session::Session::captu..</text></g><g><title>engine::session::logs::capture (241 samples, 19.17%)</title><rect x="78.6794%" y="661" width="19.1726%" height="15" fill="rgb(216,138,26)" fg:x="989" fg:w="241"/><text x="78.9294%" y="671.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (238 samples, 18.93%)</title><rect x="78.9181%" y="645" width="18.9340%" height="15" fill="rgb(243,17,35)" fg:x="992" fg:w="238"/><text x="79.1681%" y="655.50">tracing_core::dispatcher::with..</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (238 samples, 18.93%)</title><rect x="78.9181%" y="629" width="18.9340%" height="15" fill="rgb(241,60,18)" fg:x="992" fg:w="238"/><text x="79.1681%" y="639.50">&lt;engine::session::Session as k..</text></g><g><title>kernel::plugins::mw::apply_middleware (238 samples, 18.93%)</title><rect x="78.9181%" y="613" width="18.9340%" height="15" fill="rgb(234,2,44)" fg:x="992" fg:w="238"/><text x="79.1681%" y="623.50">kernel::plugins::mw::apply_mid..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (238 samples, 18.93%)</title><rect x="78.9181%" y="597" width="18.9340%" height="15" fill="rgb(225,225,33)" fg:x="992" fg:w="238"/><text x="79.1681%" y="607.50">kernel::plugins::mw::Middlewar..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (238 samples, 18.93%)</title><rect x="78.9181%" y="581" width="18.9340%" height="15" fill="rgb(234,50,31)" fg:x="992" fg:w="238"/><text x="79.1681%" y="591.50">&lt;engine::session::ExpandSurrou..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (222 samples, 17.66%)</title><rect x="80.1909%" y="565" width="17.6611%" height="15" fill="rgb(249,6,25)" fg:x="1008" fg:w="222"/><text x="80.4409%" y="575.50">kernel::plugins::mw::Middle..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (222 samples, 17.66%)</title><rect x="80.1909%" y="549" width="17.6611%" height="15" fill="rgb(241,5,17)" fg:x="1008" fg:w="222"/><text x="80.4409%" y="559.50">&lt;plugins_rune::RuneMiddlewa..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (15 samples, 1.19%)</title><rect x="96.6587%" y="533" width="1.1933%" height="15" fill="rgb(207,116,10)" fg:x="1215" fg:w="15"/><text x="96.9087%" y="543.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (14 samples, 1.11%)</title><rect x="96.7383%" y="517" width="1.1138%" height="15" fill="rgb(222,128,18)" fg:x="1216" fg:w="14"/><text x="96.9883%" y="527.50"></text></g><g><title>plugins_core::tools::worn_by (2 samples, 0.16%)</title><rect x="97.6929%" y="501" width="0.1591%" height="15" fill="rgb(229,109,25)" fg:x="1228" fg:w="2"/><text x="97.9429%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="97.6929%" y="485" width="0.1591%" height="15" fill="rgb(222,102,25)" fg:x="1228" fg:w="2"/><text x="97.9429%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.7725%" y="469" width="0.0796%" height="15" fill="rgb(239,211,5)" fg:x="1229" fg:w="1"/><text x="98.0225%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.7725%" y="453" width="0.0796%" height="15" fill="rgb(223,136,26)" fg:x="1229" fg:w="1"/><text x="98.0225%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.7725%" y="437" width="0.0796%" height="15" fill="rgb(227,30,15)" fg:x="1229" fg:w="1"/><text x="98.0225%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.7725%" y="421" width="0.0796%" height="15" fill="rgb(247,76,4)" fg:x="1229" fg:w="1"/><text x="98.0225%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.7725%" y="405" width="0.0796%" height="15" fill="rgb(245,38,48)" fg:x="1229" fg:w="1"/><text x="98.0225%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.7725%" y="389" width="0.0796%" height="15" fill="rgb(210,220,14)" fg:x="1229" fg:w="1"/><text x="98.0225%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="97.7725%" y="373" width="0.0796%" height="15" fill="rgb(224,60,51)" fg:x="1229" fg:w="1"/><text x="98.0225%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="97.7725%" y="357" width="0.0796%" height="15" fill="rgb(212,133,49)" fg:x="1229" fg:w="1"/><text x="98.0225%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.8520%" y="597" width="0.0796%" height="15" fill="rgb(231,39,22)" fg:x="1230" fg:w="1"/><text x="98.1020%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.8520%" y="581" width="0.0796%" height="15" fill="rgb(236,173,22)" fg:x="1230" fg:w="1"/><text x="98.1020%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="97.8520%" y="629" width="0.1591%" height="15" fill="rgb(210,70,0)" fg:x="1230" fg:w="2"/><text x="98.1020%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="97.8520%" y="613" width="0.1591%" height="15" fill="rgb(215,170,11)" fg:x="1230" fg:w="2"/><text x="98.1020%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.9316%" y="597" width="0.0796%" height="15" fill="rgb(220,154,28)" fg:x="1231" fg:w="1"/><text x="98.1816%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.0111%" y="501" width="0.0796%" height="15" fill="rgb(240,160,41)" fg:x="1232" fg:w="1"/><text x="98.2611%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.0907%" y="485" width="0.0796%" height="15" fill="rgb(243,215,41)" fg:x="1233" fg:w="1"/><text x="98.3407%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.0907%" y="469" width="0.0796%" height="15" fill="rgb(214,208,31)" fg:x="1233" fg:w="1"/><text x="98.3407%" y="479.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.0907%" y="453" width="0.0796%" height="15" fill="rgb(247,57,22)" fg:x="1233" fg:w="1"/><text x="98.3407%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.0907%" y="437" width="0.0796%" height="15" fill="rgb(228,73,52)" fg:x="1233" fg:w="1"/><text x="98.3407%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.0907%" y="421" width="0.0796%" height="15" fill="rgb(252,60,9)" fg:x="1233" fg:w="1"/><text x="98.3407%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="98.0111%" y="581" width="0.2387%" height="15" fill="rgb(233,9,51)" fg:x="1232" fg:w="3"/><text x="98.2611%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="98.0111%" y="565" width="0.2387%" height="15" fill="rgb(223,67,14)" fg:x="1232" fg:w="3"/><text x="98.2611%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="98.0111%" y="549" width="0.2387%" height="15" fill="rgb(222,86,2)" fg:x="1232" fg:w="3"/><text x="98.2611%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="98.0111%" y="533" width="0.2387%" height="15" fill="rgb(243,58,54)" fg:x="1232" fg:w="3"/><text x="98.2611%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="98.0111%" y="517" width="0.2387%" height="15" fill="rgb(210,200,39)" fg:x="1232" fg:w="3"/><text x="98.2611%" y="527.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="98.0907%" y="501" width="0.1591%" height="15" fill="rgb(238,135,9)" fg:x="1233" fg:w="2"/><text x="98.3407%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.1702%" y="485" width="0.0796%" height="15" fill="rgb(232,179,7)" fg:x="1234" fg:w="1"/><text x="98.4202%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.1702%" y="469" width="0.0796%" height="15" fill="rgb(245,65,41)" fg:x="1234" fg:w="1"/><text x="98.4202%" y="479.50"></text></g><g><title>engine::session::internal::Added::find_refs (7 samples, 0.56%)</title><rect x="97.8520%" y="661" width="0.5569%" height="15" fill="rgb(227,43,8)" fg:x="1230" fg:w="7"/><text x="98.1020%" y="671.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (7 samples, 0.56%)</title><rect x="97.8520%" y="645" width="0.5569%" height="15" fill="rgb(235,91,14)" fg:x="1230" fg:w="7"/><text x="98.1020%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="98.0111%" y="629" width="0.3978%" height="15" fill="rgb(235,219,31)" fg:x="1232" fg:w="5"/><text x="98.2611%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="98.0111%" y="613" width="0.3978%" height="15" fill="rgb(227,121,25)" fg:x="1232" fg:w="5"/><text x="98.2611%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (5 samples, 0.40%)</title><rect x="98.0111%" y="597" width="0.3978%" height="15" fill="rgb(254,129,24)" fg:x="1232" fg:w="5"/><text x="98.2611%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.2498%" y="581" width="0.1591%" height="15" fill="rgb(226,144,49)" fg:x="1235" fg:w="2"/><text x="98.4998%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.2498%" y="565" width="0.1591%" height="15" fill="rgb(214,187,32)" fg:x="1235" fg:w="2"/><text x="98.4998%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.3294%" y="549" width="0.0796%" height="15" fill="rgb(243,129,46)" fg:x="1236" fg:w="1"/><text x="98.5794%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="98.3294%" y="533" width="0.0796%" height="15" fill="rgb(221,185,35)" fg:x="1236" fg:w="1"/><text x="98.5794%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.3294%" y="517" width="0.0796%" height="15" fill="rgb(205,0,32)" fg:x="1236" fg:w="1"/><text x="98.5794%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.3294%" y="501" width="0.0796%" height="15" fill="rgb(229,179,12)" fg:x="1236" fg:w="1"/><text x="98.5794%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.4089%" y="629" width="0.0796%" height="15" fill="rgb(252,107,19)" fg:x="1237" fg:w="1"/><text x="98.6589%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.4089%" y="645" width="0.1591%" height="15" fill="rgb(220,95,27)" fg:x="1237" fg:w="2"/><text x="98.6589%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.4885%" y="629" width="0.0796%" height="15" fill="rgb(240,113,40)" fg:x="1238" fg:w="1"/><text x="98.7385%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.4885%" y="613" width="0.0796%" height="15" fill="rgb(208,4,43)" fg:x="1238" fg:w="1"/><text x="98.7385%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.4885%" y="597" width="0.0796%" height="15" fill="rgb(247,189,30)" fg:x="1238" fg:w="1"/><text x="98.7385%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.4885%" y="581" width="0.0796%" height="15" fill="rgb(231,157,17)" fg:x="1238" fg:w="1"/><text x="98.7385%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.4885%" y="565" width="0.0796%" height="15" fill="rgb(224,139,6)" fg:x="1238" fg:w="1"/><text x="98.7385%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.5680%" y="645" width="0.0796%" height="15" fill="rgb(223,83,16)" fg:x="1239" fg:w="1"/><text x="98.8180%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.5680%" y="629" width="0.0796%" height="15" fill="rgb(232,211,20)" fg:x="1239" fg:w="1"/><text x="98.8180%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="98.6476%" y="645" width="0.0796%" height="15" fill="rgb(225,203,35)" fg:x="1240" fg:w="1"/><text x="98.8976%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.6476%" y="629" width="0.0796%" height="15" fill="rgb(215,211,44)" fg:x="1240" fg:w="1"/><text x="98.8976%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.6476%" y="613" width="0.0796%" height="15" fill="rgb(248,213,26)" fg:x="1240" fg:w="1"/><text x="98.8976%" y="623.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="98.7271%" y="645" width="0.0796%" height="15" fill="rgb(214,23,52)" fg:x="1241" fg:w="1"/><text x="98.9771%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.7271%" y="629" width="0.0796%" height="15" fill="rgb(225,173,50)" fg:x="1241" fg:w="1"/><text x="98.9771%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.7271%" y="613" width="0.0796%" height="15" fill="rgb(206,150,22)" fg:x="1241" fg:w="1"/><text x="98.9771%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.7271%" y="597" width="0.0796%" height="15" fill="rgb(239,64,23)" fg:x="1241" fg:w="1"/><text x="98.9771%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.7271%" y="581" width="0.0796%" height="15" fill="rgb(242,50,38)" fg:x="1241" fg:w="1"/><text x="98.9771%" y="591.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.7271%" y="565" width="0.0796%" height="15" fill="rgb(217,91,15)" fg:x="1241" fg:w="1"/><text x="98.9771%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.7271%" y="549" width="0.0796%" height="15" fill="rgb(230,172,6)" fg:x="1241" fg:w="1"/><text x="98.9771%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.7271%" y="533" width="0.0796%" height="15" fill="rgb(221,98,26)" fg:x="1241" fg:w="1"/><text x="98.9771%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.7271%" y="517" width="0.0796%" height="15" fill="rgb(227,210,45)" fg:x="1241" fg:w="1"/><text x="98.9771%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.8862%" y="549" width="0.0796%" height="15" fill="rgb(206,8,30)" fg:x="1243" fg:w="1"/><text x="99.1362%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.8862%" y="533" width="0.0796%" height="15" fill="rgb(241,219,17)" fg:x="1243" fg:w="1"/><text x="99.1362%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.8862%" y="517" width="0.0796%" height="15" fill="rgb(247,121,29)" fg:x="1243" fg:w="1"/><text x="99.1362%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.8862%" y="501" width="0.0796%" height="15" fill="rgb(219,169,49)" fg:x="1243" fg:w="1"/><text x="99.1362%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.8862%" y="485" width="0.0796%" height="15" fill="rgb(253,49,49)" fg:x="1243" fg:w="1"/><text x="99.1362%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.8862%" y="469" width="0.0796%" height="15" fill="rgb(217,178,3)" fg:x="1243" fg:w="1"/><text x="99.1362%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.8862%" y="581" width="0.1591%" height="15" fill="rgb(234,73,37)" fg:x="1243" fg:w="2"/><text x="99.1362%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.8862%" y="565" width="0.1591%" height="15" fill="rgb(250,98,22)" fg:x="1243" fg:w="2"/><text x="99.1362%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.9658%" y="549" width="0.0796%" height="15" fill="rgb(220,108,37)" fg:x="1244" fg:w="1"/><text x="99.2158%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.9658%" y="533" width="0.0796%" height="15" fill="rgb(225,168,10)" fg:x="1244" fg:w="1"/><text x="99.2158%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.9658%" y="517" width="0.0796%" height="15" fill="rgb(247,215,21)" fg:x="1244" fg:w="1"/><text x="99.2158%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (16 samples, 1.27%)</title><rect x="97.8520%" y="677" width="1.2729%" height="15" fill="rgb(253,189,31)" fg:x="1230" fg:w="16"/><text x="98.1020%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (9 samples, 0.72%)</title><rect x="98.4089%" y="661" width="0.7160%" height="15" fill="rgb(241,54,22)" fg:x="1237" fg:w="9"/><text x="98.6589%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="98.8067%" y="645" width="0.3182%" height="15" fill="rgb(211,87,4)" fg:x="1242" fg:w="4"/><text x="99.0567%" y="655.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="98.8067%" y="629" width="0.3182%" height="15" fill="rgb(245,112,24)" fg:x="1242" fg:w="4"/><text x="99.0567%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="98.8067%" y="613" width="0.3182%" height="15" fill="rgb(235,190,41)" fg:x="1242" fg:w="4"/><text x="99.0567%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="98.8862%" y="597" width="0.2387%" height="15" fill="rgb(214,89,8)" fg:x="1243" fg:w="3"/><text x="99.1362%" y="607.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.0453%" y="581" width="0.0796%" height="15" fill="rgb(249,155,35)" fg:x="1245" fg:w="1"/><text x="99.2953%" y="591.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.0453%" y="565" width="0.0796%" height="15" fill="rgb(249,88,26)" fg:x="1245" fg:w="1"/><text x="99.2953%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1249%" y="597" width="0.0796%" height="15" fill="rgb(232,56,8)" fg:x="1246" fg:w="1"/><text x="99.3749%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1249%" y="581" width="0.0796%" height="15" fill="rgb(240,95,3)" fg:x="1246" fg:w="1"/><text x="99.3749%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1249%" y="565" width="0.0796%" height="15" fill="rgb(222,44,28)" fg:x="1246" fg:w="1"/><text x="99.3749%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.1249%" y="549" width="0.0796%" height="15" fill="rgb(234,16,30)" fg:x="1246" fg:w="1"/><text x="99.3749%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.1249%" y="533" width="0.0796%" height="15" fill="rgb(223,26,17)" fg:x="1246" fg:w="1"/><text x="99.3749%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.1249%" y="517" width="0.0796%" height="15" fill="rgb(239,187,47)" fg:x="1246" fg:w="1"/><text x="99.3749%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.1249%" y="501" width="0.0796%" height="15" fill="rgb(247,102,50)" fg:x="1246" fg:w="1"/><text x="99.3749%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.1249%" y="485" width="0.0796%" height="15" fill="rgb(231,216,22)" fg:x="1246" fg:w="1"/><text x="99.3749%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="99.1249%" y="469" width="0.0796%" height="15" fill="rgb(216,201,26)" fg:x="1246" fg:w="1"/><text x="99.3749%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="99.1249%" y="453" width="0.0796%" height="15" fill="rgb(214,186,23)" fg:x="1246" fg:w="1"/><text x="99.3749%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="99.1249%" y="629" width="0.1591%" height="15" fill="rgb(235,184,4)" fg:x="1246" fg:w="2"/><text x="99.3749%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="99.1249%" y="613" width="0.1591%" height="15" fill="rgb(244,46,17)" fg:x="1246" fg:w="2"/><text x="99.3749%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.2045%" y="597" width="0.0796%" height="15" fill="rgb(248,74,46)" fg:x="1247" fg:w="1"/><text x="99.4545%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.2045%" y="581" width="0.0796%" height="15" fill="rgb(243,79,5)" fg:x="1247" fg:w="1"/><text x="99.4545%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.2045%" y="565" width="0.0796%" height="15" fill="rgb(213,148,1)" fg:x="1247" fg:w="1"/><text x="99.4545%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.2045%" y="549" width="0.0796%" height="15" fill="rgb(221,30,0)" fg:x="1247" fg:w="1"/><text x="99.4545%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.2045%" y="533" width="0.0796%" height="15" fill="rgb(207,85,29)" fg:x="1247" fg:w="1"/><text x="99.4545%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="99.2045%" y="517" width="0.0796%" height="15" fill="rgb(239,31,46)" fg:x="1247" fg:w="1"/><text x="99.4545%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="99.2045%" y="501" width="0.0796%" height="15" fill="rgb(219,6,1)" fg:x="1247" fg:w="1"/><text x="99.4545%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.2840%" y="549" width="0.0796%" height="15" fill="rgb(229,90,29)" fg:x="1248" fg:w="1"/><text x="99.5340%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.2840%" y="533" width="0.0796%" height="15" fill="rgb(242,201,42)" fg:x="1248" fg:w="1"/><text x="99.5340%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.2840%" y="581" width="0.1591%" height="15" fill="rgb(243,80,54)" fg:x="1248" fg:w="2"/><text x="99.5340%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.2840%" y="565" width="0.1591%" height="15" fill="rgb(223,166,15)" fg:x="1248" fg:w="2"/><text x="99.5340%" y="575.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.3636%" y="549" width="0.0796%" height="15" fill="rgb(238,78,27)" fg:x="1249" fg:w="1"/><text x="99.6136%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.3636%" y="533" width="0.0796%" height="15" fill="rgb(235,28,43)" fg:x="1249" fg:w="1"/><text x="99.6136%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3636%" y="517" width="0.0796%" height="15" fill="rgb(240,210,28)" fg:x="1249" fg:w="1"/><text x="99.6136%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.40%)</title><rect x="99.2840%" y="629" width="0.3978%" height="15" fill="rgb(253,6,46)" fg:x="1248" fg:w="5"/><text x="99.5340%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="99.2840%" y="613" width="0.3978%" height="15" fill="rgb(250,159,47)" fg:x="1248" fg:w="5"/><text x="99.5340%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="99.2840%" y="597" width="0.3978%" height="15" fill="rgb(216,139,2)" fg:x="1248" fg:w="5"/><text x="99.5340%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="99.4431%" y="581" width="0.2387%" height="15" fill="rgb(221,124,44)" fg:x="1250" fg:w="3"/><text x="99.6931%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6022%" y="565" width="0.0796%" height="15" fill="rgb(205,37,22)" fg:x="1252" fg:w="1"/><text x="99.8522%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8409%" y="469" width="0.0796%" height="15" fill="rgb(250,55,8)" fg:x="1255" fg:w="1"/><text x="100.0909%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8409%" y="453" width="0.0796%" height="15" fill="rgb(215,83,48)" fg:x="1255" fg:w="1"/><text x="100.0909%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.8409%" y="437" width="0.0796%" height="15" fill="rgb(253,2,32)" fg:x="1255" fg:w="1"/><text x="100.0909%" y="447.50"></text></g><g><title>all (1,257 samples, 100%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(236,67,28)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="1071.50"></text></g><g><title>simple-c0396b96 (1,257 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(252,55,15)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="1055.50">simple-c0396b96</text></g><g><title>_start (1,257 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(243,173,17)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="1039.50">_start</text></g><g><title>__libc_start_main (1,257 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(215,212,13)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="1023.50">__libc_start_main</text></g><g><title>main (1,257 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(253,176,6)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="1007.50">main</text></g><g><title>std::rt::lang_start_internal (1,257 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(236,105,26)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="991.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,257 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(239,226,32)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="975.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,257 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(236,104,51)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="959.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,257 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(220,172,33)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="943.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,257 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(224,182,25)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="927.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,257 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(236,184,24)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="911.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,257 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(241,221,14)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="895.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,257 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(227,146,5)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="879.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,257 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(214,15,23)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="863.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,257 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(233,157,31)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="847.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,257 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(211,27,52)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="831.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,257 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(212,223,15)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="815.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,257 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(254,211,0)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="799.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,257 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(205,43,38)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="783.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (451 samples, 35.88%)</title><rect x="64.1209%" y="757" width="35.8791%" height="15" fill="rgb(242,206,46)" fg:x="806" fg:w="451"/><text x="64.3709%" y="767.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (451 samples, 35.88%)</title><rect x="64.1209%" y="741" width="35.8791%" height="15" fill="rgb(220,221,12)" fg:x="806" fg:w="451"/><text x="64.3709%" y="751.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (450 samples, 35.80%)</title><rect x="64.2005%" y="725" width="35.7995%" height="15" fill="rgb(217,156,35)" fg:x="807" fg:w="450"/><text x="64.4505%" y="735.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (277 samples, 22.04%)</title><rect x="77.9634%" y="709" width="22.0366%" height="15" fill="rgb(207,181,49)" fg:x="980" fg:w="277"/><text x="78.2134%" y="719.50">engine::session::Session::evaluate_..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (277 samples, 22.04%)</title><rect x="77.9634%" y="693" width="22.0366%" height="15" fill="rgb(235,103,47)" fg:x="980" fg:w="277"/><text x="78.2134%" y="703.50">engine::session::Session::evaluate_..</text></g><g><title>kernel::model::EntityPtrResolver::world (11 samples, 0.88%)</title><rect x="99.1249%" y="677" width="0.8751%" height="15" fill="rgb(222,63,28)" fg:x="1246" fg:w="11"/><text x="99.3749%" y="687.50"></text></g><g><title>engine::session::Session::load_entity (11 samples, 0.88%)</title><rect x="99.1249%" y="661" width="0.8751%" height="15" fill="rgb(244,137,21)" fg:x="1246" fg:w="11"/><text x="99.3749%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (11 samples, 0.88%)</title><rect x="99.1249%" y="645" width="0.8751%" height="15" fill="rgb(228,35,27)" fg:x="1246" fg:w="11"/><text x="99.3749%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="99.6818%" y="629" width="0.3182%" height="15" fill="rgb(226,191,41)" fg:x="1253" fg:w="4"/><text x="99.9318%" y="639.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="99.6818%" y="613" width="0.3182%" height="15" fill="rgb(210,154,3)" fg:x="1253" fg:w="4"/><text x="99.9318%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="99.6818%" y="597" width="0.3182%" height="15" fill="rgb(216,60,49)" fg:x="1253" fg:w="4"/><text x="99.9318%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="99.6818%" y="581" width="0.3182%" height="15" fill="rgb(226,17,20)" fg:x="1253" fg:w="4"/><text x="99.9318%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="99.6818%" y="565" width="0.3182%" height="15" fill="rgb(206,115,35)" fg:x="1253" fg:w="4"/><text x="99.9318%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="99.7613%" y="549" width="0.2387%" height="15" fill="rgb(227,88,1)" fg:x="1254" fg:w="3"/><text x="100.0113%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="99.7613%" y="533" width="0.2387%" height="15" fill="rgb(230,222,24)" fg:x="1254" fg:w="3"/><text x="100.0113%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="99.7613%" y="517" width="0.2387%" height="15" fill="rgb(214,124,32)" fg:x="1254" fg:w="3"/><text x="100.0113%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="99.7613%" y="501" width="0.2387%" height="15" fill="rgb(240,41,36)" fg:x="1254" fg:w="3"/><text x="100.0113%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="99.7613%" y="485" width="0.2387%" height="15" fill="rgb(221,17,52)" fg:x="1254" fg:w="3"/><text x="100.0113%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.9204%" y="469" width="0.0796%" height="15" fill="rgb(252,70,16)" fg:x="1256" fg:w="1"/><text x="100.1704%" y="479.50"></text></g></svg></svg>