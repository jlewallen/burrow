<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1062" onload="init(evt)" viewBox="0 0 1200 1062" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1062" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1045.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1045.00"> </text><svg id="frames" x="10" width="1180" total_samples="1241"><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0806%" y="629" width="0.0806%" height="15" fill="rgb(216,177,29)" fg:x="1" fg:w="1"/><text x="0.3306%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.0806%" y="661" width="0.1612%" height="15" fill="rgb(247,136,51)" fg:x="1" fg:w="2"/><text x="0.3306%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.0806%" y="645" width="0.1612%" height="15" fill="rgb(231,47,47)" fg:x="1" fg:w="2"/><text x="0.3306%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.1612%" y="629" width="0.0806%" height="15" fill="rgb(211,192,36)" fg:x="2" fg:w="1"/><text x="0.4112%" y="639.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.3223%" y="613" width="0.0806%" height="15" fill="rgb(229,156,32)" fg:x="4" fg:w="1"/><text x="0.5723%" y="623.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="0.3223%" y="645" width="0.1612%" height="15" fill="rgb(248,213,20)" fg:x="4" fg:w="2"/><text x="0.5723%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.3223%" y="629" width="0.1612%" height="15" fill="rgb(217,64,7)" fg:x="4" fg:w="2"/><text x="0.5723%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4029%" y="613" width="0.0806%" height="15" fill="rgb(232,142,8)" fg:x="5" fg:w="1"/><text x="0.6529%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.6446%" y="565" width="0.0806%" height="15" fill="rgb(224,92,44)" fg:x="8" fg:w="1"/><text x="0.8946%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.6446%" y="549" width="0.0806%" height="15" fill="rgb(214,169,17)" fg:x="8" fg:w="1"/><text x="0.8946%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.8058%" y="549" width="0.0806%" height="15" fill="rgb(210,59,37)" fg:x="10" fg:w="1"/><text x="1.0558%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.1281%" y="517" width="0.0806%" height="15" fill="rgb(214,116,48)" fg:x="14" fg:w="1"/><text x="1.3781%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.1281%" y="501" width="0.0806%" height="15" fill="rgb(244,191,6)" fg:x="14" fg:w="1"/><text x="1.3781%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.64%)</title><rect x="0.6446%" y="581" width="0.6446%" height="15" fill="rgb(241,50,52)" fg:x="8" fg:w="8"/><text x="0.8946%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="0.7252%" y="565" width="0.5641%" height="15" fill="rgb(236,75,39)" fg:x="9" fg:w="7"/><text x="0.9752%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="0.8864%" y="549" width="0.4029%" height="15" fill="rgb(236,99,0)" fg:x="11" fg:w="5"/><text x="1.1364%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="0.9670%" y="533" width="0.3223%" height="15" fill="rgb(207,202,15)" fg:x="12" fg:w="4"/><text x="1.2170%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.2087%" y="517" width="0.0806%" height="15" fill="rgb(233,207,14)" fg:x="15" fg:w="1"/><text x="1.4587%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.2087%" y="501" width="0.0806%" height="15" fill="rgb(226,27,51)" fg:x="15" fg:w="1"/><text x="1.4587%" y="511.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="1.2893%" y="549" width="0.2417%" height="15" fill="rgb(206,104,42)" fg:x="16" fg:w="3"/><text x="1.5393%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.6922%" y="501" width="0.0806%" height="15" fill="rgb(212,225,4)" fg:x="21" fg:w="1"/><text x="1.9422%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="1.6116%" y="533" width="0.2417%" height="15" fill="rgb(233,96,42)" fg:x="20" fg:w="3"/><text x="1.8616%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="1.6116%" y="517" width="0.2417%" height="15" fill="rgb(229,21,32)" fg:x="20" fg:w="3"/><text x="1.8616%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.7728%" y="501" width="0.0806%" height="15" fill="rgb(226,216,24)" fg:x="22" fg:w="1"/><text x="2.0228%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.7728%" y="485" width="0.0806%" height="15" fill="rgb(221,163,17)" fg:x="22" fg:w="1"/><text x="2.0228%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.8533%" y="533" width="0.0806%" height="15" fill="rgb(216,216,42)" fg:x="23" fg:w="1"/><text x="2.1033%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="1.9339%" y="533" width="0.2417%" height="15" fill="rgb(240,118,7)" fg:x="24" fg:w="3"/><text x="2.1839%" y="543.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="2.0145%" y="517" width="0.1612%" height="15" fill="rgb(221,67,37)" fg:x="25" fg:w="2"/><text x="2.2645%" y="527.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="2.1757%" y="517" width="0.1612%" height="15" fill="rgb(241,32,44)" fg:x="27" fg:w="2"/><text x="2.4257%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 1.29%)</title><rect x="1.2893%" y="581" width="1.2893%" height="15" fill="rgb(235,204,43)" fg:x="16" fg:w="16"/><text x="1.5393%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 1.29%)</title><rect x="1.2893%" y="565" width="1.2893%" height="15" fill="rgb(213,116,10)" fg:x="16" fg:w="16"/><text x="1.5393%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (13 samples, 1.05%)</title><rect x="1.5310%" y="549" width="1.0475%" height="15" fill="rgb(239,15,48)" fg:x="19" fg:w="13"/><text x="1.7810%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="2.1757%" y="533" width="0.4029%" height="15" fill="rgb(207,123,36)" fg:x="27" fg:w="5"/><text x="2.4257%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="2.3368%" y="517" width="0.2417%" height="15" fill="rgb(209,103,30)" fg:x="29" fg:w="3"/><text x="2.5868%" y="527.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="2.3368%" y="501" width="0.2417%" height="15" fill="rgb(238,100,19)" fg:x="29" fg:w="3"/><text x="2.5868%" y="511.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 2.18%)</title><rect x="0.4835%" y="597" width="2.1757%" height="15" fill="rgb(244,30,14)" fg:x="6" fg:w="27"/><text x="0.7335%" y="607.50">&lt;..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.5786%" y="581" width="0.0806%" height="15" fill="rgb(249,174,6)" fg:x="32" fg:w="1"/><text x="2.8286%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 2.26%)</title><rect x="0.4835%" y="629" width="2.2562%" height="15" fill="rgb(235,213,41)" fg:x="6" fg:w="28"/><text x="0.7335%" y="639.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (28 samples, 2.26%)</title><rect x="0.4835%" y="613" width="2.2562%" height="15" fill="rgb(213,118,6)" fg:x="6" fg:w="28"/><text x="0.7335%" y="623.50">c..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.6591%" y="597" width="0.0806%" height="15" fill="rgb(235,44,51)" fg:x="33" fg:w="1"/><text x="2.9091%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 2.58%)</title><rect x="0.2417%" y="661" width="2.5786%" height="15" fill="rgb(217,9,53)" fg:x="3" fg:w="32"/><text x="0.4917%" y="671.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (29 samples, 2.34%)</title><rect x="0.4835%" y="645" width="2.3368%" height="15" fill="rgb(237,172,34)" fg:x="6" fg:w="29"/><text x="0.7335%" y="655.50">c..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.7397%" y="629" width="0.0806%" height="15" fill="rgb(206,206,11)" fg:x="34" fg:w="1"/><text x="2.9897%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorageFactory as engine::storage::StorageFactory&gt;::create_storage (1 samples, 0.08%)</title><rect x="2.8203%" y="629" width="0.0806%" height="15" fill="rgb(214,149,29)" fg:x="35" fg:w="1"/><text x="3.0703%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.8203%" y="613" width="0.0806%" height="15" fill="rgb(208,123,3)" fg:x="35" fg:w="1"/><text x="3.0703%" y="623.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new_cyclic (1 samples, 0.08%)</title><rect x="2.9815%" y="613" width="0.0806%" height="15" fill="rgb(229,126,4)" fg:x="37" fg:w="1"/><text x="3.2315%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.9815%" y="597" width="0.0806%" height="15" fill="rgb(222,92,36)" fg:x="37" fg:w="1"/><text x="3.2315%" y="607.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.24%)</title><rect x="3.0620%" y="565" width="0.2417%" height="15" fill="rgb(216,39,41)" fg:x="38" fg:w="3"/><text x="3.3120%" y="575.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="3.1426%" y="549" width="0.1612%" height="15" fill="rgb(253,127,28)" fg:x="39" fg:w="2"/><text x="3.3926%" y="559.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="3.1426%" y="533" width="0.1612%" height="15" fill="rgb(249,152,51)" fg:x="39" fg:w="2"/><text x="3.3926%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="3.1426%" y="517" width="0.1612%" height="15" fill="rgb(209,123,42)" fg:x="39" fg:w="2"/><text x="3.3926%" y="527.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="3.1426%" y="501" width="0.1612%" height="15" fill="rgb(241,118,22)" fg:x="39" fg:w="2"/><text x="3.3926%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="3.1426%" y="485" width="0.1612%" height="15" fill="rgb(208,25,7)" fg:x="39" fg:w="2"/><text x="3.3926%" y="495.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.16%)</title><rect x="3.1426%" y="469" width="0.1612%" height="15" fill="rgb(243,144,39)" fg:x="39" fg:w="2"/><text x="3.3926%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.16%)</title><rect x="3.1426%" y="453" width="0.1612%" height="15" fill="rgb(250,50,5)" fg:x="39" fg:w="2"/><text x="3.3926%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="3.1426%" y="437" width="0.1612%" height="15" fill="rgb(207,67,11)" fg:x="39" fg:w="2"/><text x="3.3926%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.16%)</title><rect x="3.1426%" y="421" width="0.1612%" height="15" fill="rgb(245,204,40)" fg:x="39" fg:w="2"/><text x="3.3926%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.16%)</title><rect x="3.1426%" y="405" width="0.1612%" height="15" fill="rgb(238,228,24)" fg:x="39" fg:w="2"/><text x="3.3926%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.16%)</title><rect x="3.1426%" y="389" width="0.1612%" height="15" fill="rgb(217,116,22)" fg:x="39" fg:w="2"/><text x="3.3926%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="3.1426%" y="373" width="0.1612%" height="15" fill="rgb(234,98,12)" fg:x="39" fg:w="2"/><text x="3.3926%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.16%)</title><rect x="3.1426%" y="357" width="0.1612%" height="15" fill="rgb(242,170,50)" fg:x="39" fg:w="2"/><text x="3.3926%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="3.1426%" y="341" width="0.1612%" height="15" fill="rgb(235,7,5)" fg:x="39" fg:w="2"/><text x="3.3926%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.16%)</title><rect x="3.1426%" y="325" width="0.1612%" height="15" fill="rgb(241,114,28)" fg:x="39" fg:w="2"/><text x="3.3926%" y="335.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.16%)</title><rect x="3.1426%" y="309" width="0.1612%" height="15" fill="rgb(246,112,42)" fg:x="39" fg:w="2"/><text x="3.3926%" y="319.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.16%)</title><rect x="3.1426%" y="293" width="0.1612%" height="15" fill="rgb(248,228,14)" fg:x="39" fg:w="2"/><text x="3.3926%" y="303.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="3.1426%" y="277" width="0.1612%" height="15" fill="rgb(208,133,18)" fg:x="39" fg:w="2"/><text x="3.3926%" y="287.50"></text></g><g><title>anyhow::error::object_drop (1 samples, 0.08%)</title><rect x="3.3038%" y="565" width="0.0806%" height="15" fill="rgb(207,35,49)" fg:x="41" fg:w="1"/><text x="3.5538%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::EnteredSpan&gt; (1 samples, 0.08%)</title><rect x="3.3844%" y="565" width="0.0806%" height="15" fill="rgb(205,68,36)" fg:x="42" fg:w="1"/><text x="3.6344%" y="575.50"></text></g><g><title>dlerror (2 samples, 0.16%)</title><rect x="3.5455%" y="549" width="0.1612%" height="15" fill="rgb(245,62,40)" fg:x="44" fg:w="2"/><text x="3.7955%" y="559.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="3.6261%" y="533" width="0.0806%" height="15" fill="rgb(228,27,24)" fg:x="45" fg:w="1"/><text x="3.8761%" y="543.50"></text></g><g><title>libloading::safe::Library::new (19 samples, 1.53%)</title><rect x="3.4649%" y="565" width="1.5310%" height="15" fill="rgb(253,19,12)" fg:x="43" fg:w="19"/><text x="3.7149%" y="575.50"></text></g><g><title>dlopen (16 samples, 1.29%)</title><rect x="3.7067%" y="549" width="1.2893%" height="15" fill="rgb(232,28,20)" fg:x="46" fg:w="16"/><text x="3.9567%" y="559.50"></text></g><g><title>_dl_catch_error (15 samples, 1.21%)</title><rect x="3.7873%" y="533" width="1.2087%" height="15" fill="rgb(218,35,51)" fg:x="47" fg:w="15"/><text x="4.0373%" y="543.50"></text></g><g><title>_dl_catch_exception (15 samples, 1.21%)</title><rect x="3.7873%" y="517" width="1.2087%" height="15" fill="rgb(212,90,40)" fg:x="47" fg:w="15"/><text x="4.0373%" y="527.50"></text></g><g><title>_dl_catch_exception (15 samples, 1.21%)</title><rect x="3.7873%" y="501" width="1.2087%" height="15" fill="rgb(220,172,12)" fg:x="47" fg:w="15"/><text x="4.0373%" y="511.50"></text></g><g><title>_dl_catch_exception (13 samples, 1.05%)</title><rect x="3.9484%" y="485" width="1.0475%" height="15" fill="rgb(226,159,20)" fg:x="49" fg:w="13"/><text x="4.1984%" y="495.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (25 samples, 2.01%)</title><rect x="3.0620%" y="581" width="2.0145%" height="15" fill="rgb(234,205,16)" fg:x="38" fg:w="25"/><text x="3.3120%" y="591.50">&lt;..</text></g><g><title>std::sys::unix::os_str::Slice::to_string_lossy (1 samples, 0.08%)</title><rect x="4.9960%" y="565" width="0.0806%" height="15" fill="rgb(207,9,39)" fg:x="62" fg:w="1"/><text x="5.2460%" y="575.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (1 samples, 0.08%)</title><rect x="4.9960%" y="549" width="0.0806%" height="15" fill="rgb(249,143,15)" fg:x="62" fg:w="1"/><text x="5.2460%" y="559.50"></text></g><g><title>&lt;core::str::lossy::Utf8Chunks as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="4.9960%" y="533" width="0.0806%" height="15" fill="rgb(253,133,29)" fg:x="62" fg:w="1"/><text x="5.2460%" y="543.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (26 samples, 2.10%)</title><rect x="3.0620%" y="597" width="2.0951%" height="15" fill="rgb(221,187,0)" fg:x="38" fg:w="26"/><text x="3.3120%" y="607.50">k..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="5.0766%" y="581" width="0.0806%" height="15" fill="rgb(205,204,26)" fg:x="63" fg:w="1"/><text x="5.3266%" y="591.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="5.0766%" y="565" width="0.0806%" height="15" fill="rgb(224,68,54)" fg:x="63" fg:w="1"/><text x="5.3266%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="5.1571%" y="565" width="0.0806%" height="15" fill="rgb(209,67,4)" fg:x="64" fg:w="1"/><text x="5.4071%" y="575.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="5.1571%" y="549" width="0.0806%" height="15" fill="rgb(228,229,18)" fg:x="64" fg:w="1"/><text x="5.4071%" y="559.50"></text></g><g><title>engine::session::Session::initialize (29 samples, 2.34%)</title><rect x="3.0620%" y="613" width="2.3368%" height="15" fill="rgb(231,89,13)" fg:x="38" fg:w="29"/><text x="3.3120%" y="623.50">e..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (3 samples, 0.24%)</title><rect x="5.1571%" y="597" width="0.2417%" height="15" fill="rgb(210,182,18)" fg:x="64" fg:w="3"/><text x="5.4071%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="5.1571%" y="581" width="0.2417%" height="15" fill="rgb(240,105,2)" fg:x="64" fg:w="3"/><text x="5.4071%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="5.2377%" y="565" width="0.1612%" height="15" fill="rgb(207,170,50)" fg:x="65" fg:w="2"/><text x="5.4877%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="5.2377%" y="549" width="0.1612%" height="15" fill="rgb(232,133,24)" fg:x="65" fg:w="2"/><text x="5.4877%" y="559.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="5.2377%" y="533" width="0.1612%" height="15" fill="rgb(235,166,27)" fg:x="65" fg:w="2"/><text x="5.4877%" y="543.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (33 samples, 2.66%)</title><rect x="2.8203%" y="661" width="2.6591%" height="15" fill="rgb(209,19,13)" fg:x="35" fg:w="33"/><text x="3.0703%" y="671.50">&lt;e..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (33 samples, 2.66%)</title><rect x="2.8203%" y="645" width="2.6591%" height="15" fill="rgb(226,79,39)" fg:x="35" fg:w="33"/><text x="3.0703%" y="655.50">en..</text></g><g><title>engine::session::Session::new (32 samples, 2.58%)</title><rect x="2.9009%" y="629" width="2.5786%" height="15" fill="rgb(222,163,10)" fg:x="36" fg:w="32"/><text x="3.1509%" y="639.50">en..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="5.3989%" y="613" width="0.0806%" height="15" fill="rgb(214,44,19)" fg:x="67" fg:w="1"/><text x="5.6489%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.3989%" y="597" width="0.0806%" height="15" fill="rgb(210,217,13)" fg:x="67" fg:w="1"/><text x="5.6489%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.3989%" y="581" width="0.0806%" height="15" fill="rgb(237,61,54)" fg:x="67" fg:w="1"/><text x="5.6489%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.3989%" y="565" width="0.0806%" height="15" fill="rgb(226,184,24)" fg:x="67" fg:w="1"/><text x="5.6489%" y="575.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.3989%" y="549" width="0.0806%" height="15" fill="rgb(223,226,4)" fg:x="67" fg:w="1"/><text x="5.6489%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::model::EntityPtr&gt;&gt; (1 samples, 0.08%)</title><rect x="5.4795%" y="645" width="0.0806%" height="15" fill="rgb(210,26,41)" fg:x="68" fg:w="1"/><text x="5.7295%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (2 samples, 0.16%)</title><rect x="5.5600%" y="645" width="0.1612%" height="15" fill="rgb(220,221,6)" fg:x="69" fg:w="2"/><text x="5.8100%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.6406%" y="629" width="0.0806%" height="15" fill="rgb(225,89,49)" fg:x="70" fg:w="1"/><text x="5.8906%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.7212%" y="597" width="0.0806%" height="15" fill="rgb(218,70,45)" fg:x="71" fg:w="1"/><text x="5.9712%" y="607.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.8018%" y="597" width="0.0806%" height="15" fill="rgb(238,166,21)" fg:x="72" fg:w="1"/><text x="6.0518%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="5.8018%" y="581" width="0.0806%" height="15" fill="rgb(224,141,44)" fg:x="72" fg:w="1"/><text x="6.0518%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.8018%" y="565" width="0.0806%" height="15" fill="rgb(230,12,49)" fg:x="72" fg:w="1"/><text x="6.0518%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.8824%" y="565" width="0.0806%" height="15" fill="rgb(212,174,12)" fg:x="73" fg:w="1"/><text x="6.1324%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.8824%" y="549" width="0.0806%" height="15" fill="rgb(246,67,9)" fg:x="73" fg:w="1"/><text x="6.1324%" y="559.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.8824%" y="533" width="0.0806%" height="15" fill="rgb(239,35,23)" fg:x="73" fg:w="1"/><text x="6.1324%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="6.0435%" y="533" width="0.0806%" height="15" fill="rgb(211,167,0)" fg:x="75" fg:w="1"/><text x="6.2935%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.0435%" y="517" width="0.0806%" height="15" fill="rgb(225,119,45)" fg:x="75" fg:w="1"/><text x="6.2935%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.0435%" y="501" width="0.0806%" height="15" fill="rgb(210,162,6)" fg:x="75" fg:w="1"/><text x="6.2935%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.0435%" y="485" width="0.0806%" height="15" fill="rgb(208,118,35)" fg:x="75" fg:w="1"/><text x="6.2935%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.0435%" y="469" width="0.0806%" height="15" fill="rgb(239,4,53)" fg:x="75" fg:w="1"/><text x="6.2935%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="6.2047%" y="517" width="0.3223%" height="15" fill="rgb(213,130,21)" fg:x="77" fg:w="4"/><text x="6.4547%" y="527.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="6.2047%" y="501" width="0.3223%" height="15" fill="rgb(235,148,0)" fg:x="77" fg:w="4"/><text x="6.4547%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="6.2853%" y="485" width="0.2417%" height="15" fill="rgb(244,224,18)" fg:x="78" fg:w="3"/><text x="6.5353%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="6.2853%" y="469" width="0.2417%" height="15" fill="rgb(211,214,4)" fg:x="78" fg:w="3"/><text x="6.5353%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="6.3658%" y="453" width="0.1612%" height="15" fill="rgb(206,119,25)" fg:x="79" fg:w="2"/><text x="6.6158%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="6.3658%" y="437" width="0.1612%" height="15" fill="rgb(243,93,47)" fg:x="79" fg:w="2"/><text x="6.6158%" y="447.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="6.3658%" y="421" width="0.1612%" height="15" fill="rgb(224,194,6)" fg:x="79" fg:w="2"/><text x="6.6158%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.5270%" y="453" width="0.0806%" height="15" fill="rgb(243,229,6)" fg:x="81" fg:w="1"/><text x="6.7770%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.5270%" y="437" width="0.0806%" height="15" fill="rgb(207,23,50)" fg:x="81" fg:w="1"/><text x="6.7770%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="6.5270%" y="469" width="0.1612%" height="15" fill="rgb(253,192,32)" fg:x="81" fg:w="2"/><text x="6.7770%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.6076%" y="453" width="0.0806%" height="15" fill="rgb(213,21,6)" fg:x="82" fg:w="1"/><text x="6.8576%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.6076%" y="437" width="0.0806%" height="15" fill="rgb(243,151,13)" fg:x="82" fg:w="1"/><text x="6.8576%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.6076%" y="421" width="0.0806%" height="15" fill="rgb(233,165,41)" fg:x="82" fg:w="1"/><text x="6.8576%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="6.5270%" y="485" width="0.2417%" height="15" fill="rgb(246,176,45)" fg:x="81" fg:w="3"/><text x="6.7770%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.6882%" y="469" width="0.0806%" height="15" fill="rgb(217,170,52)" fg:x="83" fg:w="1"/><text x="6.9382%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.6882%" y="453" width="0.0806%" height="15" fill="rgb(214,203,54)" fg:x="83" fg:w="1"/><text x="6.9382%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.6882%" y="437" width="0.0806%" height="15" fill="rgb(248,215,49)" fg:x="83" fg:w="1"/><text x="6.9382%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="6.5270%" y="501" width="0.3223%" height="15" fill="rgb(208,46,10)" fg:x="81" fg:w="4"/><text x="6.7770%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.7687%" y="485" width="0.0806%" height="15" fill="rgb(254,5,31)" fg:x="84" fg:w="1"/><text x="7.0187%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.7687%" y="469" width="0.0806%" height="15" fill="rgb(222,104,33)" fg:x="84" fg:w="1"/><text x="7.0187%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.7687%" y="453" width="0.0806%" height="15" fill="rgb(248,49,16)" fg:x="84" fg:w="1"/><text x="7.0187%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="6.8493%" y="501" width="0.3223%" height="15" fill="rgb(232,198,41)" fg:x="85" fg:w="4"/><text x="7.0993%" y="511.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="6.9299%" y="485" width="0.2417%" height="15" fill="rgb(214,125,3)" fg:x="86" fg:w="3"/><text x="7.1799%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.0911%" y="469" width="0.0806%" height="15" fill="rgb(229,220,28)" fg:x="88" fg:w="1"/><text x="7.3411%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.1716%" y="485" width="0.0806%" height="15" fill="rgb(222,64,37)" fg:x="89" fg:w="1"/><text x="7.4216%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.1716%" y="469" width="0.0806%" height="15" fill="rgb(249,184,13)" fg:x="89" fg:w="1"/><text x="7.4216%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.1716%" y="453" width="0.0806%" height="15" fill="rgb(252,176,6)" fg:x="89" fg:w="1"/><text x="7.4216%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.1716%" y="437" width="0.0806%" height="15" fill="rgb(228,153,7)" fg:x="89" fg:w="1"/><text x="7.4216%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.2522%" y="469" width="0.0806%" height="15" fill="rgb(242,193,5)" fg:x="90" fg:w="1"/><text x="7.5022%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.2522%" y="453" width="0.0806%" height="15" fill="rgb(232,140,9)" fg:x="90" fg:w="1"/><text x="7.5022%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="7.2522%" y="485" width="0.1612%" height="15" fill="rgb(213,222,16)" fg:x="90" fg:w="2"/><text x="7.5022%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="7.3328%" y="469" width="0.0806%" height="15" fill="rgb(222,75,50)" fg:x="91" fg:w="1"/><text x="7.5828%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.3328%" y="453" width="0.0806%" height="15" fill="rgb(205,180,2)" fg:x="91" fg:w="1"/><text x="7.5828%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.3328%" y="437" width="0.0806%" height="15" fill="rgb(216,34,7)" fg:x="91" fg:w="1"/><text x="7.5828%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.3328%" y="421" width="0.0806%" height="15" fill="rgb(253,16,32)" fg:x="91" fg:w="1"/><text x="7.5828%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="7.1716%" y="501" width="0.3223%" height="15" fill="rgb(208,97,28)" fg:x="89" fg:w="4"/><text x="7.4216%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.4134%" y="485" width="0.0806%" height="15" fill="rgb(225,92,11)" fg:x="92" fg:w="1"/><text x="7.6634%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (14 samples, 1.13%)</title><rect x="6.5270%" y="517" width="1.1281%" height="15" fill="rgb(243,38,12)" fg:x="81" fg:w="14"/><text x="6.7770%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="7.4940%" y="501" width="0.1612%" height="15" fill="rgb(208,139,16)" fg:x="93" fg:w="2"/><text x="7.7440%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="7.4940%" y="485" width="0.1612%" height="15" fill="rgb(227,24,9)" fg:x="93" fg:w="2"/><text x="7.7440%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="7.4940%" y="469" width="0.1612%" height="15" fill="rgb(206,62,11)" fg:x="93" fg:w="2"/><text x="7.7440%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (21 samples, 1.69%)</title><rect x="6.0435%" y="549" width="1.6922%" height="15" fill="rgb(228,134,27)" fg:x="75" fg:w="21"/><text x="6.2935%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (20 samples, 1.61%)</title><rect x="6.1241%" y="533" width="1.6116%" height="15" fill="rgb(205,55,33)" fg:x="76" fg:w="20"/><text x="6.3741%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.6551%" y="517" width="0.0806%" height="15" fill="rgb(243,75,43)" fg:x="95" fg:w="1"/><text x="7.9051%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.6551%" y="501" width="0.0806%" height="15" fill="rgb(223,27,42)" fg:x="95" fg:w="1"/><text x="7.9051%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.6551%" y="485" width="0.0806%" height="15" fill="rgb(232,189,33)" fg:x="95" fg:w="1"/><text x="7.9051%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.8163%" y="501" width="0.0806%" height="15" fill="rgb(210,9,39)" fg:x="97" fg:w="1"/><text x="8.0663%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (4 samples, 0.32%)</title><rect x="7.8969%" y="501" width="0.3223%" height="15" fill="rgb(242,85,26)" fg:x="98" fg:w="4"/><text x="8.1469%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.1386%" y="485" width="0.0806%" height="15" fill="rgb(248,44,4)" fg:x="101" fg:w="1"/><text x="8.3886%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="8.2192%" y="485" width="0.1612%" height="15" fill="rgb(250,96,46)" fg:x="102" fg:w="2"/><text x="8.4692%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (11 samples, 0.89%)</title><rect x="7.7357%" y="549" width="0.8864%" height="15" fill="rgb(229,116,26)" fg:x="96" fg:w="11"/><text x="7.9857%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (11 samples, 0.89%)</title><rect x="7.7357%" y="533" width="0.8864%" height="15" fill="rgb(246,94,34)" fg:x="96" fg:w="11"/><text x="7.9857%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (11 samples, 0.89%)</title><rect x="7.7357%" y="517" width="0.8864%" height="15" fill="rgb(251,73,21)" fg:x="96" fg:w="11"/><text x="7.9857%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="8.2192%" y="501" width="0.4029%" height="15" fill="rgb(254,121,25)" fg:x="102" fg:w="5"/><text x="8.4692%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="8.3803%" y="485" width="0.2417%" height="15" fill="rgb(215,161,49)" fg:x="104" fg:w="3"/><text x="8.6303%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="8.3803%" y="469" width="0.2417%" height="15" fill="rgb(221,43,13)" fg:x="104" fg:w="3"/><text x="8.6303%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="8.4609%" y="453" width="0.1612%" height="15" fill="rgb(249,5,37)" fg:x="105" fg:w="2"/><text x="8.7109%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.7027%" y="501" width="0.0806%" height="15" fill="rgb(226,25,44)" fg:x="108" fg:w="1"/><text x="8.9527%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="8.7832%" y="501" width="0.0806%" height="15" fill="rgb(238,189,16)" fg:x="109" fg:w="1"/><text x="9.0332%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.7832%" y="485" width="0.0806%" height="15" fill="rgb(251,186,8)" fg:x="109" fg:w="1"/><text x="9.0332%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.7832%" y="469" width="0.0806%" height="15" fill="rgb(254,34,31)" fg:x="109" fg:w="1"/><text x="9.0332%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.7832%" y="453" width="0.0806%" height="15" fill="rgb(225,215,27)" fg:x="109" fg:w="1"/><text x="9.0332%" y="463.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="8.7832%" y="437" width="0.0806%" height="15" fill="rgb(221,192,48)" fg:x="109" fg:w="1"/><text x="9.0332%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.8638%" y="453" width="0.0806%" height="15" fill="rgb(219,137,20)" fg:x="110" fg:w="1"/><text x="9.1138%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.8638%" y="437" width="0.0806%" height="15" fill="rgb(219,84,11)" fg:x="110" fg:w="1"/><text x="9.1138%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.8638%" y="421" width="0.0806%" height="15" fill="rgb(224,10,23)" fg:x="110" fg:w="1"/><text x="9.1138%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="9.0250%" y="421" width="0.0806%" height="15" fill="rgb(248,22,39)" fg:x="112" fg:w="1"/><text x="9.2750%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="8.9444%" y="453" width="0.2417%" height="15" fill="rgb(212,154,20)" fg:x="111" fg:w="3"/><text x="9.1944%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="8.9444%" y="437" width="0.2417%" height="15" fill="rgb(236,199,50)" fg:x="111" fg:w="3"/><text x="9.1944%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.1056%" y="421" width="0.0806%" height="15" fill="rgb(211,9,17)" fg:x="113" fg:w="1"/><text x="9.3556%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.1056%" y="405" width="0.0806%" height="15" fill="rgb(243,216,36)" fg:x="113" fg:w="1"/><text x="9.3556%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="8.8638%" y="485" width="0.4835%" height="15" fill="rgb(250,2,10)" fg:x="110" fg:w="6"/><text x="9.1138%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="8.8638%" y="469" width="0.4835%" height="15" fill="rgb(226,50,48)" fg:x="110" fg:w="6"/><text x="9.1138%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="9.1861%" y="453" width="0.1612%" height="15" fill="rgb(243,81,16)" fg:x="114" fg:w="2"/><text x="9.4361%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.2667%" y="437" width="0.0806%" height="15" fill="rgb(250,14,2)" fg:x="115" fg:w="1"/><text x="9.5167%" y="447.50"></text></g><g><title>engine::session::Session::flush (46 samples, 3.71%)</title><rect x="5.7212%" y="645" width="3.7067%" height="15" fill="rgb(233,135,29)" fg:x="71" fg:w="46"/><text x="5.9712%" y="655.50">engi..</text></g><g><title>engine::session::state::State::close (46 samples, 3.71%)</title><rect x="5.7212%" y="629" width="3.7067%" height="15" fill="rgb(224,64,43)" fg:x="71" fg:w="46"/><text x="5.9712%" y="639.50">engi..</text></g><g><title>engine::session::state::State::flush_entities (46 samples, 3.71%)</title><rect x="5.7212%" y="613" width="3.7067%" height="15" fill="rgb(238,84,13)" fg:x="71" fg:w="46"/><text x="5.9712%" y="623.50">engi..</text></g><g><title>core::iter::adapters::try_process (44 samples, 3.55%)</title><rect x="5.8824%" y="597" width="3.5455%" height="15" fill="rgb(253,48,26)" fg:x="73" fg:w="44"/><text x="6.1324%" y="607.50">core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (44 samples, 3.55%)</title><rect x="5.8824%" y="581" width="3.5455%" height="15" fill="rgb(205,223,31)" fg:x="73" fg:w="44"/><text x="6.1324%" y="591.50">&lt;all..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (43 samples, 3.46%)</title><rect x="5.9629%" y="565" width="3.4649%" height="15" fill="rgb(221,41,32)" fg:x="74" fg:w="43"/><text x="6.2129%" y="575.50">eng..</text></g><g><title>kernel::model::any_entity_changes (10 samples, 0.81%)</title><rect x="8.6221%" y="549" width="0.8058%" height="15" fill="rgb(213,158,31)" fg:x="107" fg:w="10"/><text x="8.8721%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (10 samples, 0.81%)</title><rect x="8.6221%" y="533" width="0.8058%" height="15" fill="rgb(245,126,43)" fg:x="107" fg:w="10"/><text x="8.8721%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.81%)</title><rect x="8.6221%" y="517" width="0.8058%" height="15" fill="rgb(227,7,22)" fg:x="107" fg:w="10"/><text x="8.8721%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.56%)</title><rect x="8.8638%" y="501" width="0.5641%" height="15" fill="rgb(252,90,44)" fg:x="110" fg:w="7"/><text x="9.1138%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.3473%" y="485" width="0.0806%" height="15" fill="rgb(253,91,0)" fg:x="116" fg:w="1"/><text x="9.5973%" y="495.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="9.4279%" y="613" width="0.0806%" height="15" fill="rgb(252,175,49)" fg:x="117" fg:w="1"/><text x="9.6779%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.4279%" y="597" width="0.0806%" height="15" fill="rgb(246,150,1)" fg:x="117" fg:w="1"/><text x="9.6779%" y="607.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="9.4279%" y="645" width="0.1612%" height="15" fill="rgb(241,192,25)" fg:x="117" fg:w="2"/><text x="9.6779%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="9.4279%" y="629" width="0.1612%" height="15" fill="rgb(239,187,11)" fg:x="117" fg:w="2"/><text x="9.6779%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="9.5085%" y="613" width="0.0806%" height="15" fill="rgb(218,202,51)" fg:x="118" fg:w="1"/><text x="9.7585%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="9.5085%" y="597" width="0.0806%" height="15" fill="rgb(225,176,8)" fg:x="118" fg:w="1"/><text x="9.7585%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="9.5085%" y="581" width="0.0806%" height="15" fill="rgb(219,122,41)" fg:x="118" fg:w="1"/><text x="9.7585%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.5085%" y="565" width="0.0806%" height="15" fill="rgb(248,140,20)" fg:x="118" fg:w="1"/><text x="9.7585%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.5085%" y="549" width="0.0806%" height="15" fill="rgb(245,41,37)" fg:x="118" fg:w="1"/><text x="9.7585%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.6696%" y="629" width="0.0806%" height="15" fill="rgb(235,82,39)" fg:x="120" fg:w="1"/><text x="9.9196%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.6696%" y="613" width="0.0806%" height="15" fill="rgb(230,108,42)" fg:x="120" fg:w="1"/><text x="9.9196%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="9.6696%" y="597" width="0.0806%" height="15" fill="rgb(215,150,50)" fg:x="120" fg:w="1"/><text x="9.9196%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="9.6696%" y="581" width="0.0806%" height="15" fill="rgb(233,212,5)" fg:x="120" fg:w="1"/><text x="9.9196%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="9.6696%" y="565" width="0.0806%" height="15" fill="rgb(245,80,22)" fg:x="120" fg:w="1"/><text x="9.9196%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.6696%" y="549" width="0.0806%" height="15" fill="rgb(238,129,16)" fg:x="120" fg:w="1"/><text x="9.9196%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.6696%" y="533" width="0.0806%" height="15" fill="rgb(240,19,0)" fg:x="120" fg:w="1"/><text x="9.9196%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="9.6696%" y="517" width="0.0806%" height="15" fill="rgb(232,42,35)" fg:x="120" fg:w="1"/><text x="9.9196%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="9.6696%" y="501" width="0.0806%" height="15" fill="rgb(223,130,24)" fg:x="120" fg:w="1"/><text x="9.9196%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="9.6696%" y="485" width="0.0806%" height="15" fill="rgb(237,16,22)" fg:x="120" fg:w="1"/><text x="9.9196%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="9.6696%" y="469" width="0.0806%" height="15" fill="rgb(248,192,20)" fg:x="120" fg:w="1"/><text x="9.9196%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.6696%" y="453" width="0.0806%" height="15" fill="rgb(233,167,2)" fg:x="120" fg:w="1"/><text x="9.9196%" y="463.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="9.7502%" y="613" width="0.0806%" height="15" fill="rgb(252,71,44)" fg:x="121" fg:w="1"/><text x="10.0002%" y="623.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="9.7502%" y="597" width="0.0806%" height="15" fill="rgb(238,37,47)" fg:x="121" fg:w="1"/><text x="10.0002%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.7502%" y="581" width="0.0806%" height="15" fill="rgb(214,202,54)" fg:x="121" fg:w="1"/><text x="10.0002%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.7502%" y="565" width="0.0806%" height="15" fill="rgb(254,165,40)" fg:x="121" fg:w="1"/><text x="10.0002%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.7502%" y="549" width="0.0806%" height="15" fill="rgb(246,173,38)" fg:x="121" fg:w="1"/><text x="10.0002%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.8308%" y="533" width="0.0806%" height="15" fill="rgb(215,3,27)" fg:x="122" fg:w="1"/><text x="10.0808%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.8308%" y="517" width="0.0806%" height="15" fill="rgb(239,169,51)" fg:x="122" fg:w="1"/><text x="10.0808%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="9.9114%" y="469" width="0.0806%" height="15" fill="rgb(212,5,25)" fg:x="123" fg:w="1"/><text x="10.1614%" y="479.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="9.8308%" y="565" width="0.2417%" height="15" fill="rgb(243,45,17)" fg:x="122" fg:w="3"/><text x="10.0808%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="9.8308%" y="549" width="0.2417%" height="15" fill="rgb(242,97,9)" fg:x="122" fg:w="3"/><text x="10.0808%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="9.9114%" y="533" width="0.1612%" height="15" fill="rgb(228,71,31)" fg:x="123" fg:w="2"/><text x="10.1614%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="9.9114%" y="517" width="0.1612%" height="15" fill="rgb(252,184,16)" fg:x="123" fg:w="2"/><text x="10.1614%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="9.9114%" y="501" width="0.1612%" height="15" fill="rgb(236,169,46)" fg:x="123" fg:w="2"/><text x="10.1614%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="9.9114%" y="485" width="0.1612%" height="15" fill="rgb(207,17,47)" fg:x="123" fg:w="2"/><text x="10.1614%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="9.9919%" y="469" width="0.0806%" height="15" fill="rgb(206,201,28)" fg:x="124" fg:w="1"/><text x="10.2419%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.9919%" y="453" width="0.0806%" height="15" fill="rgb(224,184,23)" fg:x="124" fg:w="1"/><text x="10.2419%" y="463.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (4 samples, 0.32%)</title><rect x="9.8308%" y="597" width="0.3223%" height="15" fill="rgb(208,139,48)" fg:x="122" fg:w="4"/><text x="10.0808%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (4 samples, 0.32%)</title><rect x="9.8308%" y="581" width="0.3223%" height="15" fill="rgb(208,130,10)" fg:x="122" fg:w="4"/><text x="10.0808%" y="591.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="10.0725%" y="565" width="0.0806%" height="15" fill="rgb(211,213,45)" fg:x="125" fg:w="1"/><text x="10.3225%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="10.0725%" y="549" width="0.0806%" height="15" fill="rgb(235,100,30)" fg:x="125" fg:w="1"/><text x="10.3225%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.1531%" y="565" width="0.0806%" height="15" fill="rgb(206,144,31)" fg:x="126" fg:w="1"/><text x="10.4031%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.2337%" y="565" width="0.0806%" height="15" fill="rgb(224,200,26)" fg:x="127" fg:w="1"/><text x="10.4837%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_map (1 samples, 0.08%)</title><rect x="10.3143%" y="469" width="0.0806%" height="15" fill="rgb(247,104,53)" fg:x="128" fg:w="1"/><text x="10.5643%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (9 samples, 0.73%)</title><rect x="9.7502%" y="629" width="0.7252%" height="15" fill="rgb(220,14,17)" fg:x="121" fg:w="9"/><text x="10.0002%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (8 samples, 0.64%)</title><rect x="9.8308%" y="613" width="0.6446%" height="15" fill="rgb(230,140,40)" fg:x="122" fg:w="8"/><text x="10.0808%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="10.1531%" y="597" width="0.3223%" height="15" fill="rgb(229,2,41)" fg:x="126" fg:w="4"/><text x="10.4031%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="10.1531%" y="581" width="0.3223%" height="15" fill="rgb(232,89,16)" fg:x="126" fg:w="4"/><text x="10.4031%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="10.3143%" y="565" width="0.1612%" height="15" fill="rgb(247,59,52)" fg:x="128" fg:w="2"/><text x="10.5643%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="10.3143%" y="549" width="0.1612%" height="15" fill="rgb(226,110,21)" fg:x="128" fg:w="2"/><text x="10.5643%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="10.3143%" y="533" width="0.1612%" height="15" fill="rgb(224,176,43)" fg:x="128" fg:w="2"/><text x="10.5643%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="10.3143%" y="517" width="0.1612%" height="15" fill="rgb(221,73,6)" fg:x="128" fg:w="2"/><text x="10.5643%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="10.3143%" y="501" width="0.1612%" height="15" fill="rgb(232,78,19)" fg:x="128" fg:w="2"/><text x="10.5643%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="10.3143%" y="485" width="0.1612%" height="15" fill="rgb(233,112,48)" fg:x="128" fg:w="2"/><text x="10.5643%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="10.3948%" y="469" width="0.0806%" height="15" fill="rgb(243,131,47)" fg:x="129" fg:w="1"/><text x="10.6448%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.3948%" y="453" width="0.0806%" height="15" fill="rgb(226,51,1)" fg:x="129" fg:w="1"/><text x="10.6448%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.3948%" y="437" width="0.0806%" height="15" fill="rgb(247,58,7)" fg:x="129" fg:w="1"/><text x="10.6448%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.3948%" y="421" width="0.0806%" height="15" fill="rgb(209,7,32)" fg:x="129" fg:w="1"/><text x="10.6448%" y="431.50"></text></g><g><title>plugins_core::build::Build::save (12 samples, 0.97%)</title><rect x="9.5890%" y="645" width="0.9670%" height="15" fill="rgb(209,39,41)" fg:x="119" fg:w="12"/><text x="9.8390%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.4754%" y="629" width="0.0806%" height="15" fill="rgb(226,182,46)" fg:x="130" fg:w="1"/><text x="10.7254%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.4754%" y="613" width="0.0806%" height="15" fill="rgb(230,219,10)" fg:x="130" fg:w="1"/><text x="10.7254%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.4754%" y="597" width="0.0806%" height="15" fill="rgb(227,175,30)" fg:x="130" fg:w="1"/><text x="10.7254%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="10.4754%" y="581" width="0.0806%" height="15" fill="rgb(217,2,50)" fg:x="130" fg:w="1"/><text x="10.7254%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="10.4754%" y="565" width="0.0806%" height="15" fill="rgb(229,160,0)" fg:x="130" fg:w="1"/><text x="10.7254%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="10.4754%" y="549" width="0.0806%" height="15" fill="rgb(207,78,37)" fg:x="130" fg:w="1"/><text x="10.7254%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.4754%" y="533" width="0.0806%" height="15" fill="rgb(225,57,0)" fg:x="130" fg:w="1"/><text x="10.7254%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.4754%" y="517" width="0.0806%" height="15" fill="rgb(232,154,2)" fg:x="130" fg:w="1"/><text x="10.7254%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="10.4754%" y="501" width="0.0806%" height="15" fill="rgb(241,212,25)" fg:x="130" fg:w="1"/><text x="10.7254%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="10.4754%" y="485" width="0.0806%" height="15" fill="rgb(226,69,20)" fg:x="130" fg:w="1"/><text x="10.7254%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="10.4754%" y="469" width="0.0806%" height="15" fill="rgb(247,184,54)" fg:x="130" fg:w="1"/><text x="10.7254%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="10.4754%" y="453" width="0.0806%" height="15" fill="rgb(210,145,0)" fg:x="130" fg:w="1"/><text x="10.7254%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.4754%" y="437" width="0.0806%" height="15" fill="rgb(253,82,12)" fg:x="130" fg:w="1"/><text x="10.7254%" y="447.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="10.5560%" y="613" width="0.0806%" height="15" fill="rgb(245,42,11)" fg:x="131" fg:w="1"/><text x="10.8060%" y="623.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="10.5560%" y="597" width="0.0806%" height="15" fill="rgb(219,147,32)" fg:x="131" fg:w="1"/><text x="10.8060%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="10.5560%" y="581" width="0.0806%" height="15" fill="rgb(246,12,7)" fg:x="131" fg:w="1"/><text x="10.8060%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="10.5560%" y="565" width="0.0806%" height="15" fill="rgb(243,50,9)" fg:x="131" fg:w="1"/><text x="10.8060%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="10.5560%" y="549" width="0.0806%" height="15" fill="rgb(219,149,6)" fg:x="131" fg:w="1"/><text x="10.8060%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.5560%" y="533" width="0.0806%" height="15" fill="rgb(241,51,42)" fg:x="131" fg:w="1"/><text x="10.8060%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.5560%" y="517" width="0.0806%" height="15" fill="rgb(226,128,27)" fg:x="131" fg:w="1"/><text x="10.8060%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.5560%" y="501" width="0.0806%" height="15" fill="rgb(244,144,4)" fg:x="131" fg:w="1"/><text x="10.8060%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.5560%" y="485" width="0.0806%" height="15" fill="rgb(221,4,13)" fg:x="131" fg:w="1"/><text x="10.8060%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.5560%" y="469" width="0.0806%" height="15" fill="rgb(208,170,28)" fg:x="131" fg:w="1"/><text x="10.8060%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.5560%" y="453" width="0.0806%" height="15" fill="rgb(226,131,13)" fg:x="131" fg:w="1"/><text x="10.8060%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.5560%" y="437" width="0.0806%" height="15" fill="rgb(215,72,41)" fg:x="131" fg:w="1"/><text x="10.8060%" y="447.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="10.6366%" y="613" width="0.0806%" height="15" fill="rgb(243,108,20)" fg:x="132" fg:w="1"/><text x="10.8866%" y="623.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="10.6366%" y="597" width="0.0806%" height="15" fill="rgb(230,189,17)" fg:x="132" fg:w="1"/><text x="10.8866%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.6366%" y="581" width="0.0806%" height="15" fill="rgb(220,50,17)" fg:x="132" fg:w="1"/><text x="10.8866%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="10.6366%" y="565" width="0.0806%" height="15" fill="rgb(248,152,48)" fg:x="132" fg:w="1"/><text x="10.8866%" y="575.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="10.6366%" y="549" width="0.0806%" height="15" fill="rgb(244,91,11)" fg:x="132" fg:w="1"/><text x="10.8866%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.6366%" y="533" width="0.0806%" height="15" fill="rgb(220,157,5)" fg:x="132" fg:w="1"/><text x="10.8866%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.6366%" y="517" width="0.0806%" height="15" fill="rgb(253,137,8)" fg:x="132" fg:w="1"/><text x="10.8866%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="10.7172%" y="597" width="0.0806%" height="15" fill="rgb(217,137,51)" fg:x="133" fg:w="1"/><text x="10.9672%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="10.7172%" y="581" width="0.0806%" height="15" fill="rgb(218,209,53)" fg:x="133" fg:w="1"/><text x="10.9672%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.7977%" y="565" width="0.0806%" height="15" fill="rgb(249,137,25)" fg:x="134" fg:w="1"/><text x="11.0477%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.7977%" y="549" width="0.0806%" height="15" fill="rgb(239,155,26)" fg:x="134" fg:w="1"/><text x="11.0477%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="10.7977%" y="533" width="0.0806%" height="15" fill="rgb(227,85,46)" fg:x="134" fg:w="1"/><text x="11.0477%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="10.7977%" y="517" width="0.0806%" height="15" fill="rgb(251,107,43)" fg:x="134" fg:w="1"/><text x="11.0477%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="10.7977%" y="501" width="0.0806%" height="15" fill="rgb(234,170,33)" fg:x="134" fg:w="1"/><text x="11.0477%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="10.7977%" y="485" width="0.0806%" height="15" fill="rgb(206,29,35)" fg:x="134" fg:w="1"/><text x="11.0477%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="10.7977%" y="469" width="0.0806%" height="15" fill="rgb(227,138,25)" fg:x="134" fg:w="1"/><text x="11.0477%" y="479.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="10.7172%" y="613" width="0.2417%" height="15" fill="rgb(249,131,35)" fg:x="133" fg:w="3"/><text x="10.9672%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="10.7977%" y="597" width="0.1612%" height="15" fill="rgb(239,6,40)" fg:x="134" fg:w="2"/><text x="11.0477%" y="607.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="10.7977%" y="581" width="0.1612%" height="15" fill="rgb(246,136,47)" fg:x="134" fg:w="2"/><text x="11.0477%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="10.8783%" y="565" width="0.0806%" height="15" fill="rgb(253,58,26)" fg:x="135" fg:w="1"/><text x="11.1283%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="10.8783%" y="549" width="0.0806%" height="15" fill="rgb(237,141,10)" fg:x="135" fg:w="1"/><text x="11.1283%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="10.8783%" y="533" width="0.0806%" height="15" fill="rgb(234,156,12)" fg:x="135" fg:w="1"/><text x="11.1283%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.8783%" y="517" width="0.0806%" height="15" fill="rgb(243,224,36)" fg:x="135" fg:w="1"/><text x="11.1283%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.8783%" y="501" width="0.0806%" height="15" fill="rgb(205,229,51)" fg:x="135" fg:w="1"/><text x="11.1283%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.8783%" y="485" width="0.0806%" height="15" fill="rgb(223,189,4)" fg:x="135" fg:w="1"/><text x="11.1283%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.8783%" y="469" width="0.0806%" height="15" fill="rgb(249,167,54)" fg:x="135" fg:w="1"/><text x="11.1283%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.8783%" y="453" width="0.0806%" height="15" fill="rgb(218,34,28)" fg:x="135" fg:w="1"/><text x="11.1283%" y="463.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (6 samples, 0.48%)</title><rect x="10.5560%" y="645" width="0.4835%" height="15" fill="rgb(232,109,42)" fg:x="131" fg:w="6"/><text x="10.8060%" y="655.50"></text></g><g><title>plugins_core::tools::set_container (6 samples, 0.48%)</title><rect x="10.5560%" y="629" width="0.4835%" height="15" fill="rgb(248,214,46)" fg:x="131" fg:w="6"/><text x="10.8060%" y="639.50"></text></g><g><title>plugins_core::location::Location::set (1 samples, 0.08%)</title><rect x="10.9589%" y="613" width="0.0806%" height="15" fill="rgb(244,216,40)" fg:x="136" fg:w="1"/><text x="11.2089%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="10.9589%" y="597" width="0.0806%" height="15" fill="rgb(231,226,31)" fg:x="136" fg:w="1"/><text x="11.2089%" y="607.50"></text></g><g><title>plugins_core::location::_::&lt;impl serde::ser::Serialize for plugins_core::location::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="10.9589%" y="581" width="0.0806%" height="15" fill="rgb(238,38,43)" fg:x="136" fg:w="1"/><text x="11.2089%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.9589%" y="565" width="0.0806%" height="15" fill="rgb(208,88,43)" fg:x="136" fg:w="1"/><text x="11.2089%" y="575.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="10.9589%" y="549" width="0.0806%" height="15" fill="rgb(205,136,37)" fg:x="136" fg:w="1"/><text x="11.2089%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.9589%" y="533" width="0.0806%" height="15" fill="rgb(237,34,14)" fg:x="136" fg:w="1"/><text x="11.2089%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="11.0395%" y="629" width="0.0806%" height="15" fill="rgb(236,193,44)" fg:x="137" fg:w="1"/><text x="11.2895%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="11.0395%" y="613" width="0.0806%" height="15" fill="rgb(231,48,10)" fg:x="137" fg:w="1"/><text x="11.2895%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="11.0395%" y="597" width="0.0806%" height="15" fill="rgb(213,141,34)" fg:x="137" fg:w="1"/><text x="11.2895%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="11.0395%" y="581" width="0.0806%" height="15" fill="rgb(249,130,34)" fg:x="137" fg:w="1"/><text x="11.2895%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.0395%" y="565" width="0.0806%" height="15" fill="rgb(219,42,41)" fg:x="137" fg:w="1"/><text x="11.2895%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.1201%" y="613" width="0.0806%" height="15" fill="rgb(224,100,54)" fg:x="138" fg:w="1"/><text x="11.3701%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.1201%" y="597" width="0.0806%" height="15" fill="rgb(229,200,27)" fg:x="138" fg:w="1"/><text x="11.3701%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.1201%" y="581" width="0.0806%" height="15" fill="rgb(217,118,10)" fg:x="138" fg:w="1"/><text x="11.3701%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.1201%" y="565" width="0.0806%" height="15" fill="rgb(206,22,3)" fg:x="138" fg:w="1"/><text x="11.3701%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.1201%" y="549" width="0.0806%" height="15" fill="rgb(232,163,46)" fg:x="138" fg:w="1"/><text x="11.3701%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="11.1201%" y="533" width="0.0806%" height="15" fill="rgb(206,95,13)" fg:x="138" fg:w="1"/><text x="11.3701%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="11.1201%" y="517" width="0.0806%" height="15" fill="rgb(253,154,18)" fg:x="138" fg:w="1"/><text x="11.3701%" y="527.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (2 samples, 0.16%)</title><rect x="11.1201%" y="629" width="0.1612%" height="15" fill="rgb(219,32,23)" fg:x="138" fg:w="2"/><text x="11.3701%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="11.2006%" y="613" width="0.0806%" height="15" fill="rgb(230,191,45)" fg:x="139" fg:w="1"/><text x="11.4506%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.2006%" y="597" width="0.0806%" height="15" fill="rgb(229,64,36)" fg:x="139" fg:w="1"/><text x="11.4506%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="11.2812%" y="629" width="0.1612%" height="15" fill="rgb(205,129,25)" fg:x="140" fg:w="2"/><text x="11.5312%" y="639.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="11.2812%" y="613" width="0.1612%" height="15" fill="rgb(254,112,7)" fg:x="140" fg:w="2"/><text x="11.5312%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="11.2812%" y="597" width="0.1612%" height="15" fill="rgb(226,53,48)" fg:x="140" fg:w="2"/><text x="11.5312%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="11.2812%" y="581" width="0.1612%" height="15" fill="rgb(214,153,38)" fg:x="140" fg:w="2"/><text x="11.5312%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="11.2812%" y="565" width="0.1612%" height="15" fill="rgb(243,101,7)" fg:x="140" fg:w="2"/><text x="11.5312%" y="575.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="11.3618%" y="549" width="0.0806%" height="15" fill="rgb(240,140,22)" fg:x="141" fg:w="1"/><text x="11.6118%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.3618%" y="533" width="0.0806%" height="15" fill="rgb(235,114,2)" fg:x="141" fg:w="1"/><text x="11.6118%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.3618%" y="517" width="0.0806%" height="15" fill="rgb(242,59,12)" fg:x="141" fg:w="1"/><text x="11.6118%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.3618%" y="501" width="0.0806%" height="15" fill="rgb(252,134,9)" fg:x="141" fg:w="1"/><text x="11.6118%" y="511.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="11.4424%" y="629" width="0.0806%" height="15" fill="rgb(236,4,44)" fg:x="142" fg:w="1"/><text x="11.6924%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="11.4424%" y="613" width="0.0806%" height="15" fill="rgb(254,172,41)" fg:x="142" fg:w="1"/><text x="11.6924%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="11.4424%" y="597" width="0.0806%" height="15" fill="rgb(244,63,20)" fg:x="142" fg:w="1"/><text x="11.6924%" y="607.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="11.4424%" y="581" width="0.0806%" height="15" fill="rgb(250,73,31)" fg:x="142" fg:w="1"/><text x="11.6924%" y="591.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="11.4424%" y="565" width="0.0806%" height="15" fill="rgb(241,38,36)" fg:x="142" fg:w="1"/><text x="11.6924%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="11.4424%" y="549" width="0.0806%" height="15" fill="rgb(245,211,2)" fg:x="142" fg:w="1"/><text x="11.6924%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="11.4424%" y="533" width="0.0806%" height="15" fill="rgb(206,120,28)" fg:x="142" fg:w="1"/><text x="11.6924%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="11.4424%" y="517" width="0.0806%" height="15" fill="rgb(211,59,34)" fg:x="142" fg:w="1"/><text x="11.6924%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.4424%" y="501" width="0.0806%" height="15" fill="rgb(233,168,5)" fg:x="142" fg:w="1"/><text x="11.6924%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.4424%" y="485" width="0.0806%" height="15" fill="rgb(234,33,13)" fg:x="142" fg:w="1"/><text x="11.6924%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.4424%" y="469" width="0.0806%" height="15" fill="rgb(231,150,26)" fg:x="142" fg:w="1"/><text x="11.6924%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.4424%" y="453" width="0.0806%" height="15" fill="rgb(217,191,4)" fg:x="142" fg:w="1"/><text x="11.6924%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.5230%" y="517" width="0.0806%" height="15" fill="rgb(246,198,38)" fg:x="143" fg:w="1"/><text x="11.7730%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.5230%" y="501" width="0.0806%" height="15" fill="rgb(245,64,37)" fg:x="143" fg:w="1"/><text x="11.7730%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="11.5230%" y="485" width="0.0806%" height="15" fill="rgb(250,30,36)" fg:x="143" fg:w="1"/><text x="11.7730%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="11.5230%" y="469" width="0.0806%" height="15" fill="rgb(217,86,53)" fg:x="143" fg:w="1"/><text x="11.7730%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="11.5230%" y="453" width="0.0806%" height="15" fill="rgb(228,157,16)" fg:x="143" fg:w="1"/><text x="11.7730%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="11.5230%" y="437" width="0.0806%" height="15" fill="rgb(217,59,31)" fg:x="143" fg:w="1"/><text x="11.7730%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.5230%" y="421" width="0.0806%" height="15" fill="rgb(237,138,41)" fg:x="143" fg:w="1"/><text x="11.7730%" y="431.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="11.5230%" y="613" width="0.1612%" height="15" fill="rgb(227,91,49)" fg:x="143" fg:w="2"/><text x="11.7730%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="11.5230%" y="597" width="0.1612%" height="15" fill="rgb(247,21,44)" fg:x="143" fg:w="2"/><text x="11.7730%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="11.5230%" y="581" width="0.1612%" height="15" fill="rgb(219,210,51)" fg:x="143" fg:w="2"/><text x="11.7730%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="11.5230%" y="565" width="0.1612%" height="15" fill="rgb(209,140,6)" fg:x="143" fg:w="2"/><text x="11.7730%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="11.5230%" y="549" width="0.1612%" height="15" fill="rgb(221,188,24)" fg:x="143" fg:w="2"/><text x="11.7730%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="11.5230%" y="533" width="0.1612%" height="15" fill="rgb(232,154,20)" fg:x="143" fg:w="2"/><text x="11.7730%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="11.6035%" y="517" width="0.0806%" height="15" fill="rgb(244,137,50)" fg:x="144" fg:w="1"/><text x="11.8535%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="11.6035%" y="501" width="0.0806%" height="15" fill="rgb(225,185,43)" fg:x="144" fg:w="1"/><text x="11.8535%" y="511.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="11.6841%" y="597" width="0.0806%" height="15" fill="rgb(213,205,38)" fg:x="145" fg:w="1"/><text x="11.9341%" y="607.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="11.6841%" y="581" width="0.0806%" height="15" fill="rgb(236,73,12)" fg:x="145" fg:w="1"/><text x="11.9341%" y="591.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="11.6841%" y="565" width="0.0806%" height="15" fill="rgb(235,219,13)" fg:x="145" fg:w="1"/><text x="11.9341%" y="575.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="11.6841%" y="549" width="0.0806%" height="15" fill="rgb(218,59,36)" fg:x="145" fg:w="1"/><text x="11.9341%" y="559.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="11.6841%" y="533" width="0.0806%" height="15" fill="rgb(205,110,39)" fg:x="145" fg:w="1"/><text x="11.9341%" y="543.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="11.6841%" y="517" width="0.0806%" height="15" fill="rgb(218,206,42)" fg:x="145" fg:w="1"/><text x="11.9341%" y="527.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="11.7647%" y="565" width="0.0806%" height="15" fill="rgb(248,125,24)" fg:x="146" fg:w="1"/><text x="12.0147%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="11.7647%" y="549" width="0.0806%" height="15" fill="rgb(242,28,27)" fg:x="146" fg:w="1"/><text x="12.0147%" y="559.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="11.7647%" y="533" width="0.0806%" height="15" fill="rgb(216,228,15)" fg:x="146" fg:w="1"/><text x="12.0147%" y="543.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="11.7647%" y="517" width="0.0806%" height="15" fill="rgb(235,116,46)" fg:x="146" fg:w="1"/><text x="12.0147%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.7647%" y="501" width="0.0806%" height="15" fill="rgb(224,18,32)" fg:x="146" fg:w="1"/><text x="12.0147%" y="511.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="11.9259%" y="517" width="0.1612%" height="15" fill="rgb(252,5,12)" fg:x="148" fg:w="2"/><text x="12.1759%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="11.9259%" y="501" width="0.1612%" height="15" fill="rgb(251,36,5)" fg:x="148" fg:w="2"/><text x="12.1759%" y="511.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="11.9259%" y="485" width="0.1612%" height="15" fill="rgb(217,53,14)" fg:x="148" fg:w="2"/><text x="12.1759%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (5 samples, 0.40%)</title><rect x="12.0870%" y="501" width="0.4029%" height="15" fill="rgb(215,86,45)" fg:x="150" fg:w="5"/><text x="12.3370%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.40%)</title><rect x="12.0870%" y="485" width="0.4029%" height="15" fill="rgb(242,169,11)" fg:x="150" fg:w="5"/><text x="12.3370%" y="495.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="12.2482%" y="469" width="0.2417%" height="15" fill="rgb(211,213,45)" fg:x="152" fg:w="3"/><text x="12.4982%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="12.3288%" y="453" width="0.1612%" height="15" fill="rgb(205,88,11)" fg:x="153" fg:w="2"/><text x="12.5788%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.4093%" y="437" width="0.0806%" height="15" fill="rgb(252,69,26)" fg:x="154" fg:w="1"/><text x="12.6593%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="12.4093%" y="421" width="0.0806%" height="15" fill="rgb(246,123,37)" fg:x="154" fg:w="1"/><text x="12.6593%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="12.4093%" y="405" width="0.0806%" height="15" fill="rgb(212,205,5)" fg:x="154" fg:w="1"/><text x="12.6593%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="12.4093%" y="389" width="0.0806%" height="15" fill="rgb(253,148,0)" fg:x="154" fg:w="1"/><text x="12.6593%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.4899%" y="437" width="0.0806%" height="15" fill="rgb(239,22,4)" fg:x="155" fg:w="1"/><text x="12.7399%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="12.4899%" y="421" width="0.0806%" height="15" fill="rgb(226,26,53)" fg:x="155" fg:w="1"/><text x="12.7399%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="12.4899%" y="405" width="0.0806%" height="15" fill="rgb(225,229,45)" fg:x="155" fg:w="1"/><text x="12.7399%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="12.4899%" y="389" width="0.0806%" height="15" fill="rgb(220,60,37)" fg:x="155" fg:w="1"/><text x="12.7399%" y="399.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="12.4899%" y="485" width="0.1612%" height="15" fill="rgb(217,180,35)" fg:x="155" fg:w="2"/><text x="12.7399%" y="495.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="12.4899%" y="469" width="0.1612%" height="15" fill="rgb(229,7,53)" fg:x="155" fg:w="2"/><text x="12.7399%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="12.4899%" y="453" width="0.1612%" height="15" fill="rgb(254,137,3)" fg:x="155" fg:w="2"/><text x="12.7399%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="12.5705%" y="437" width="0.0806%" height="15" fill="rgb(215,140,41)" fg:x="156" fg:w="1"/><text x="12.8205%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="12.7317%" y="469" width="0.0806%" height="15" fill="rgb(250,80,15)" fg:x="158" fg:w="1"/><text x="12.9817%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="12.7317%" y="453" width="0.0806%" height="15" fill="rgb(252,191,6)" fg:x="158" fg:w="1"/><text x="12.9817%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="12.7317%" y="437" width="0.0806%" height="15" fill="rgb(246,217,18)" fg:x="158" fg:w="1"/><text x="12.9817%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (6 samples, 0.48%)</title><rect x="12.8122%" y="469" width="0.4835%" height="15" fill="rgb(223,93,7)" fg:x="159" fg:w="6"/><text x="13.0622%" y="479.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="12.9734%" y="453" width="0.3223%" height="15" fill="rgb(225,55,52)" fg:x="161" fg:w="4"/><text x="13.2234%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="13.0540%" y="437" width="0.2417%" height="15" fill="rgb(240,31,24)" fg:x="162" fg:w="3"/><text x="13.3040%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="13.0540%" y="421" width="0.2417%" height="15" fill="rgb(205,56,52)" fg:x="162" fg:w="3"/><text x="13.3040%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="13.2151%" y="405" width="0.0806%" height="15" fill="rgb(246,146,12)" fg:x="164" fg:w="1"/><text x="13.4651%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="13.2151%" y="389" width="0.0806%" height="15" fill="rgb(239,84,36)" fg:x="164" fg:w="1"/><text x="13.4651%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="13.2957%" y="453" width="0.0806%" height="15" fill="rgb(207,41,40)" fg:x="165" fg:w="1"/><text x="13.5457%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.2957%" y="437" width="0.0806%" height="15" fill="rgb(241,179,25)" fg:x="165" fg:w="1"/><text x="13.5457%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.3763%" y="405" width="0.0806%" height="15" fill="rgb(210,0,34)" fg:x="166" fg:w="1"/><text x="13.6263%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="13.3763%" y="453" width="0.1612%" height="15" fill="rgb(225,217,29)" fg:x="166" fg:w="2"/><text x="13.6263%" y="463.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="13.3763%" y="437" width="0.1612%" height="15" fill="rgb(216,191,38)" fg:x="166" fg:w="2"/><text x="13.6263%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="13.3763%" y="421" width="0.1612%" height="15" fill="rgb(232,140,52)" fg:x="166" fg:w="2"/><text x="13.6263%" y="431.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="13.4569%" y="405" width="0.0806%" height="15" fill="rgb(223,158,51)" fg:x="167" fg:w="1"/><text x="13.7069%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="13.5375%" y="437" width="0.0806%" height="15" fill="rgb(235,29,51)" fg:x="168" fg:w="1"/><text x="13.7875%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="13.6180%" y="437" width="0.0806%" height="15" fill="rgb(215,181,18)" fg:x="169" fg:w="1"/><text x="13.8680%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.6180%" y="421" width="0.0806%" height="15" fill="rgb(227,125,34)" fg:x="169" fg:w="1"/><text x="13.8680%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="13.6986%" y="437" width="0.0806%" height="15" fill="rgb(230,197,49)" fg:x="170" fg:w="1"/><text x="13.9486%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="13.2957%" y="469" width="0.5641%" height="15" fill="rgb(239,141,16)" fg:x="165" fg:w="7"/><text x="13.5457%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="13.5375%" y="453" width="0.3223%" height="15" fill="rgb(225,105,43)" fg:x="168" fg:w="4"/><text x="13.7875%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.7792%" y="437" width="0.0806%" height="15" fill="rgb(214,131,14)" fg:x="171" fg:w="1"/><text x="14.0292%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (17 samples, 1.37%)</title><rect x="12.6511%" y="485" width="1.3699%" height="15" fill="rgb(229,177,11)" fg:x="157" fg:w="17"/><text x="12.9011%" y="495.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="13.8598%" y="469" width="0.1612%" height="15" fill="rgb(231,180,14)" fg:x="172" fg:w="2"/><text x="14.1098%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="13.8598%" y="453" width="0.1612%" height="15" fill="rgb(232,88,2)" fg:x="172" fg:w="2"/><text x="14.1098%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="13.8598%" y="437" width="0.1612%" height="15" fill="rgb(205,220,8)" fg:x="172" fg:w="2"/><text x="14.1098%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (21 samples, 1.69%)</title><rect x="12.4899%" y="501" width="1.6922%" height="15" fill="rgb(225,23,53)" fg:x="155" fg:w="21"/><text x="12.7399%" y="511.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="14.0210%" y="485" width="0.1612%" height="15" fill="rgb(213,62,29)" fg:x="174" fg:w="2"/><text x="14.2710%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="14.0210%" y="469" width="0.1612%" height="15" fill="rgb(227,75,7)" fg:x="174" fg:w="2"/><text x="14.2710%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="14.0210%" y="453" width="0.1612%" height="15" fill="rgb(207,105,14)" fg:x="174" fg:w="2"/><text x="14.2710%" y="463.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (27 samples, 2.18%)</title><rect x="12.0870%" y="517" width="2.1757%" height="15" fill="rgb(245,62,29)" fg:x="150" fg:w="27"/><text x="12.3370%" y="527.50">&lt;..</text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="14.1821%" y="501" width="0.0806%" height="15" fill="rgb(236,202,4)" fg:x="176" fg:w="1"/><text x="14.4321%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="14.1821%" y="485" width="0.0806%" height="15" fill="rgb(250,67,1)" fg:x="176" fg:w="1"/><text x="14.4321%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.1821%" y="469" width="0.0806%" height="15" fill="rgb(253,115,44)" fg:x="176" fg:w="1"/><text x="14.4321%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="14.1821%" y="453" width="0.0806%" height="15" fill="rgb(251,139,18)" fg:x="176" fg:w="1"/><text x="14.4321%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="14.1821%" y="437" width="0.0806%" height="15" fill="rgb(218,22,32)" fg:x="176" fg:w="1"/><text x="14.4321%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.1821%" y="421" width="0.0806%" height="15" fill="rgb(243,53,5)" fg:x="176" fg:w="1"/><text x="14.4321%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.2627%" y="485" width="0.0806%" height="15" fill="rgb(227,56,16)" fg:x="177" fg:w="1"/><text x="14.5127%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.4239%" y="469" width="0.0806%" height="15" fill="rgb(245,53,0)" fg:x="179" fg:w="1"/><text x="14.6739%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="14.5044%" y="453" width="0.1612%" height="15" fill="rgb(216,170,35)" fg:x="180" fg:w="2"/><text x="14.7544%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.5850%" y="437" width="0.0806%" height="15" fill="rgb(211,200,8)" fg:x="181" fg:w="1"/><text x="14.8350%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.6656%" y="437" width="0.0806%" height="15" fill="rgb(228,204,44)" fg:x="182" fg:w="1"/><text x="14.9156%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.6656%" y="421" width="0.0806%" height="15" fill="rgb(214,121,17)" fg:x="182" fg:w="1"/><text x="14.9156%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="14.7462%" y="437" width="0.0806%" height="15" fill="rgb(233,64,38)" fg:x="183" fg:w="1"/><text x="14.9962%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="14.7462%" y="421" width="0.0806%" height="15" fill="rgb(253,54,19)" fg:x="183" fg:w="1"/><text x="14.9962%" y="431.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="14.8268%" y="421" width="0.1612%" height="15" fill="rgb(253,94,18)" fg:x="184" fg:w="2"/><text x="15.0768%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (10 samples, 0.81%)</title><rect x="14.2627%" y="517" width="0.8058%" height="15" fill="rgb(227,57,52)" fg:x="177" fg:w="10"/><text x="14.5127%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (10 samples, 0.81%)</title><rect x="14.2627%" y="501" width="0.8058%" height="15" fill="rgb(230,228,50)" fg:x="177" fg:w="10"/><text x="14.5127%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.73%)</title><rect x="14.3433%" y="485" width="0.7252%" height="15" fill="rgb(217,205,27)" fg:x="178" fg:w="9"/><text x="14.5933%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="14.5044%" y="469" width="0.5641%" height="15" fill="rgb(252,71,50)" fg:x="180" fg:w="7"/><text x="14.7544%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="14.6656%" y="453" width="0.4029%" height="15" fill="rgb(209,86,4)" fg:x="182" fg:w="5"/><text x="14.9156%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="14.8268%" y="437" width="0.2417%" height="15" fill="rgb(229,94,0)" fg:x="184" fg:w="3"/><text x="15.0768%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.9879%" y="421" width="0.0806%" height="15" fill="rgb(252,223,21)" fg:x="186" fg:w="1"/><text x="15.2379%" y="431.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="15.1491%" y="469" width="0.1612%" height="15" fill="rgb(230,210,4)" fg:x="188" fg:w="2"/><text x="15.3991%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.3102%" y="469" width="0.0806%" height="15" fill="rgb(240,149,38)" fg:x="190" fg:w="1"/><text x="15.5602%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="15.4714%" y="437" width="0.0806%" height="15" fill="rgb(254,105,20)" fg:x="192" fg:w="1"/><text x="15.7214%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="15.5520%" y="421" width="0.0806%" height="15" fill="rgb(253,87,46)" fg:x="193" fg:w="1"/><text x="15.8020%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="15.5520%" y="405" width="0.0806%" height="15" fill="rgb(253,116,33)" fg:x="193" fg:w="1"/><text x="15.8020%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="15.5520%" y="389" width="0.0806%" height="15" fill="rgb(229,198,5)" fg:x="193" fg:w="1"/><text x="15.8020%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.5520%" y="373" width="0.0806%" height="15" fill="rgb(242,38,37)" fg:x="193" fg:w="1"/><text x="15.8020%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.5520%" y="357" width="0.0806%" height="15" fill="rgb(242,69,53)" fg:x="193" fg:w="1"/><text x="15.8020%" y="367.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="15.5520%" y="341" width="0.0806%" height="15" fill="rgb(249,80,16)" fg:x="193" fg:w="1"/><text x="15.8020%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.7131%" y="389" width="0.0806%" height="15" fill="rgb(206,128,11)" fg:x="195" fg:w="1"/><text x="15.9631%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="15.8743%" y="357" width="0.1612%" height="15" fill="rgb(212,35,20)" fg:x="197" fg:w="2"/><text x="16.1243%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="15.8743%" y="341" width="0.1612%" height="15" fill="rgb(236,79,13)" fg:x="197" fg:w="2"/><text x="16.1243%" y="351.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="15.8743%" y="325" width="0.1612%" height="15" fill="rgb(233,123,3)" fg:x="197" fg:w="2"/><text x="16.1243%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (9 samples, 0.73%)</title><rect x="15.3908%" y="453" width="0.7252%" height="15" fill="rgb(214,93,52)" fg:x="191" fg:w="9"/><text x="15.6408%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.56%)</title><rect x="15.5520%" y="437" width="0.5641%" height="15" fill="rgb(251,37,40)" fg:x="193" fg:w="7"/><text x="15.8020%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.48%)</title><rect x="15.6326%" y="421" width="0.4835%" height="15" fill="rgb(227,80,54)" fg:x="194" fg:w="6"/><text x="15.8826%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="15.7131%" y="405" width="0.4029%" height="15" fill="rgb(254,48,11)" fg:x="195" fg:w="5"/><text x="15.9631%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="15.7937%" y="389" width="0.3223%" height="15" fill="rgb(235,193,26)" fg:x="196" fg:w="4"/><text x="16.0437%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="15.7937%" y="373" width="0.3223%" height="15" fill="rgb(229,99,21)" fg:x="196" fg:w="4"/><text x="16.0437%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="16.0355%" y="357" width="0.0806%" height="15" fill="rgb(211,140,41)" fg:x="199" fg:w="1"/><text x="16.2855%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.0355%" y="341" width="0.0806%" height="15" fill="rgb(240,227,30)" fg:x="199" fg:w="1"/><text x="16.2855%" y="351.50"></text></g><g><title>engine::session::Session::flush (60 samples, 4.83%)</title><rect x="11.5230%" y="629" width="4.8348%" height="15" fill="rgb(215,224,45)" fg:x="143" fg:w="60"/><text x="11.7730%" y="639.50">engine..</text></g><g><title>engine::session::Session::save_changes (58 samples, 4.67%)</title><rect x="11.6841%" y="613" width="4.6737%" height="15" fill="rgb(206,123,31)" fg:x="145" fg:w="58"/><text x="11.9341%" y="623.50">engin..</text></g><g><title>engine::session::state::State::close (57 samples, 4.59%)</title><rect x="11.7647%" y="597" width="4.5931%" height="15" fill="rgb(210,138,16)" fg:x="146" fg:w="57"/><text x="12.0147%" y="607.50">engin..</text></g><g><title>engine::session::state::State::flush_entities (57 samples, 4.59%)</title><rect x="11.7647%" y="581" width="4.5931%" height="15" fill="rgb(228,57,28)" fg:x="146" fg:w="57"/><text x="12.0147%" y="591.50">engin..</text></g><g><title>core::iter::adapters::try_process (56 samples, 4.51%)</title><rect x="11.8453%" y="565" width="4.5125%" height="15" fill="rgb(242,170,10)" fg:x="147" fg:w="56"/><text x="12.0953%" y="575.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (56 samples, 4.51%)</title><rect x="11.8453%" y="549" width="4.5125%" height="15" fill="rgb(228,214,39)" fg:x="147" fg:w="56"/><text x="12.0953%" y="559.50">&lt;allo..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (56 samples, 4.51%)</title><rect x="11.8453%" y="533" width="4.5125%" height="15" fill="rgb(218,179,33)" fg:x="147" fg:w="56"/><text x="12.0953%" y="543.50">engin..</text></g><g><title>kernel::model::any_entity_changes (16 samples, 1.29%)</title><rect x="15.0685%" y="517" width="1.2893%" height="15" fill="rgb(235,193,39)" fg:x="187" fg:w="16"/><text x="15.3185%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (16 samples, 1.29%)</title><rect x="15.0685%" y="501" width="1.2893%" height="15" fill="rgb(219,221,36)" fg:x="187" fg:w="16"/><text x="15.3185%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (16 samples, 1.29%)</title><rect x="15.0685%" y="485" width="1.2893%" height="15" fill="rgb(248,218,19)" fg:x="187" fg:w="16"/><text x="15.3185%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (12 samples, 0.97%)</title><rect x="15.3908%" y="469" width="0.9670%" height="15" fill="rgb(205,50,9)" fg:x="191" fg:w="12"/><text x="15.6408%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="16.1160%" y="453" width="0.2417%" height="15" fill="rgb(238,81,28)" fg:x="200" fg:w="3"/><text x="16.3660%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="16.1160%" y="437" width="0.2417%" height="15" fill="rgb(235,110,19)" fg:x="200" fg:w="3"/><text x="16.3660%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="16.1966%" y="421" width="0.1612%" height="15" fill="rgb(214,7,14)" fg:x="201" fg:w="2"/><text x="16.4466%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="16.3578%" y="581" width="0.0806%" height="15" fill="rgb(211,77,3)" fg:x="203" fg:w="1"/><text x="16.6078%" y="591.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="16.3578%" y="629" width="0.1612%" height="15" fill="rgb(229,5,9)" fg:x="203" fg:w="2"/><text x="16.6078%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="16.3578%" y="613" width="0.1612%" height="15" fill="rgb(225,90,11)" fg:x="203" fg:w="2"/><text x="16.6078%" y="623.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="16.3578%" y="597" width="0.1612%" height="15" fill="rgb(242,56,8)" fg:x="203" fg:w="2"/><text x="16.6078%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="16.4384%" y="581" width="0.0806%" height="15" fill="rgb(249,212,39)" fg:x="204" fg:w="1"/><text x="16.6884%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.4384%" y="565" width="0.0806%" height="15" fill="rgb(236,90,9)" fg:x="204" fg:w="1"/><text x="16.6884%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.4384%" y="549" width="0.0806%" height="15" fill="rgb(206,88,35)" fg:x="204" fg:w="1"/><text x="16.6884%" y="559.50"></text></g><g><title>plugins_core::build::Build::new (2 samples, 0.16%)</title><rect x="16.5189%" y="629" width="0.1612%" height="15" fill="rgb(205,126,30)" fg:x="205" fg:w="2"/><text x="16.7689%" y="639.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="16.5189%" y="613" width="0.1612%" height="15" fill="rgb(230,176,12)" fg:x="205" fg:w="2"/><text x="16.7689%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="16.5995%" y="597" width="0.0806%" height="15" fill="rgb(243,19,9)" fg:x="206" fg:w="1"/><text x="16.8495%" y="607.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="16.5995%" y="581" width="0.0806%" height="15" fill="rgb(245,171,17)" fg:x="206" fg:w="1"/><text x="16.8495%" y="591.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="16.5995%" y="565" width="0.0806%" height="15" fill="rgb(227,52,21)" fg:x="206" fg:w="1"/><text x="16.8495%" y="575.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="16.5995%" y="549" width="0.0806%" height="15" fill="rgb(238,69,14)" fg:x="206" fg:w="1"/><text x="16.8495%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.6801%" y="613" width="0.0806%" height="15" fill="rgb(241,156,39)" fg:x="207" fg:w="1"/><text x="16.9301%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.6801%" y="597" width="0.0806%" height="15" fill="rgb(212,227,28)" fg:x="207" fg:w="1"/><text x="16.9301%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.6801%" y="581" width="0.0806%" height="15" fill="rgb(209,118,27)" fg:x="207" fg:w="1"/><text x="16.9301%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.6801%" y="565" width="0.0806%" height="15" fill="rgb(226,102,5)" fg:x="207" fg:w="1"/><text x="16.9301%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.6801%" y="549" width="0.0806%" height="15" fill="rgb(223,34,3)" fg:x="207" fg:w="1"/><text x="16.9301%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.6801%" y="533" width="0.0806%" height="15" fill="rgb(221,81,38)" fg:x="207" fg:w="1"/><text x="16.9301%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.6801%" y="517" width="0.0806%" height="15" fill="rgb(236,219,28)" fg:x="207" fg:w="1"/><text x="16.9301%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="16.6801%" y="501" width="0.0806%" height="15" fill="rgb(213,200,14)" fg:x="207" fg:w="1"/><text x="16.9301%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="16.6801%" y="485" width="0.0806%" height="15" fill="rgb(240,33,19)" fg:x="207" fg:w="1"/><text x="16.9301%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="16.6801%" y="469" width="0.0806%" height="15" fill="rgb(233,113,27)" fg:x="207" fg:w="1"/><text x="16.9301%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="16.6801%" y="453" width="0.0806%" height="15" fill="rgb(220,221,18)" fg:x="207" fg:w="1"/><text x="16.9301%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.6801%" y="437" width="0.0806%" height="15" fill="rgb(238,92,8)" fg:x="207" fg:w="1"/><text x="16.9301%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.7607%" y="549" width="0.0806%" height="15" fill="rgb(222,164,16)" fg:x="208" fg:w="1"/><text x="17.0107%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.7607%" y="533" width="0.0806%" height="15" fill="rgb(241,119,3)" fg:x="208" fg:w="1"/><text x="17.0107%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.7607%" y="517" width="0.0806%" height="15" fill="rgb(241,44,8)" fg:x="208" fg:w="1"/><text x="17.0107%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.7607%" y="501" width="0.0806%" height="15" fill="rgb(230,36,40)" fg:x="208" fg:w="1"/><text x="17.0107%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.7607%" y="485" width="0.0806%" height="15" fill="rgb(243,16,36)" fg:x="208" fg:w="1"/><text x="17.0107%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.7607%" y="469" width="0.0806%" height="15" fill="rgb(231,4,26)" fg:x="208" fg:w="1"/><text x="17.0107%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.7607%" y="453" width="0.0806%" height="15" fill="rgb(240,9,31)" fg:x="208" fg:w="1"/><text x="17.0107%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.7607%" y="437" width="0.0806%" height="15" fill="rgb(207,173,15)" fg:x="208" fg:w="1"/><text x="17.0107%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.7607%" y="421" width="0.0806%" height="15" fill="rgb(224,192,53)" fg:x="208" fg:w="1"/><text x="17.0107%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="16.7607%" y="405" width="0.0806%" height="15" fill="rgb(223,67,28)" fg:x="208" fg:w="1"/><text x="17.0107%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="16.7607%" y="389" width="0.0806%" height="15" fill="rgb(211,20,47)" fg:x="208" fg:w="1"/><text x="17.0107%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="16.7607%" y="373" width="0.0806%" height="15" fill="rgb(240,228,2)" fg:x="208" fg:w="1"/><text x="17.0107%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="16.7607%" y="357" width="0.0806%" height="15" fill="rgb(248,151,12)" fg:x="208" fg:w="1"/><text x="17.0107%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.7607%" y="341" width="0.0806%" height="15" fill="rgb(244,8,39)" fg:x="208" fg:w="1"/><text x="17.0107%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="16.7607%" y="597" width="0.2417%" height="15" fill="rgb(222,26,8)" fg:x="208" fg:w="3"/><text x="17.0107%" y="607.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="16.7607%" y="581" width="0.2417%" height="15" fill="rgb(213,106,44)" fg:x="208" fg:w="3"/><text x="17.0107%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="16.7607%" y="565" width="0.2417%" height="15" fill="rgb(214,129,20)" fg:x="208" fg:w="3"/><text x="17.0107%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="16.8413%" y="549" width="0.1612%" height="15" fill="rgb(212,32,13)" fg:x="209" fg:w="2"/><text x="17.0913%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="16.8413%" y="533" width="0.1612%" height="15" fill="rgb(208,168,33)" fg:x="209" fg:w="2"/><text x="17.0913%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="16.9218%" y="517" width="0.0806%" height="15" fill="rgb(231,207,8)" fg:x="210" fg:w="1"/><text x="17.1718%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.9218%" y="501" width="0.0806%" height="15" fill="rgb(235,219,23)" fg:x="210" fg:w="1"/><text x="17.1718%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.9218%" y="485" width="0.0806%" height="15" fill="rgb(226,216,26)" fg:x="210" fg:w="1"/><text x="17.1718%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.0024%" y="597" width="0.0806%" height="15" fill="rgb(239,137,16)" fg:x="211" fg:w="1"/><text x="17.2524%" y="607.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="17.0830%" y="581" width="0.0806%" height="15" fill="rgb(207,12,36)" fg:x="212" fg:w="1"/><text x="17.3330%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.0830%" y="565" width="0.0806%" height="15" fill="rgb(210,214,24)" fg:x="212" fg:w="1"/><text x="17.3330%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.0830%" y="549" width="0.0806%" height="15" fill="rgb(206,56,30)" fg:x="212" fg:w="1"/><text x="17.3330%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="17.0830%" y="533" width="0.0806%" height="15" fill="rgb(228,143,26)" fg:x="212" fg:w="1"/><text x="17.3330%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="17.2442%" y="517" width="0.0806%" height="15" fill="rgb(216,218,46)" fg:x="214" fg:w="1"/><text x="17.4942%" y="527.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (5 samples, 0.40%)</title><rect x="17.0830%" y="597" width="0.4029%" height="15" fill="rgb(206,6,19)" fg:x="212" fg:w="5"/><text x="17.3330%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (4 samples, 0.32%)</title><rect x="17.1636%" y="581" width="0.3223%" height="15" fill="rgb(239,177,51)" fg:x="213" fg:w="4"/><text x="17.4136%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (4 samples, 0.32%)</title><rect x="17.1636%" y="565" width="0.3223%" height="15" fill="rgb(216,55,25)" fg:x="213" fg:w="4"/><text x="17.4136%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="17.2442%" y="549" width="0.2417%" height="15" fill="rgb(231,163,29)" fg:x="214" fg:w="3"/><text x="17.4942%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="17.2442%" y="533" width="0.2417%" height="15" fill="rgb(232,149,50)" fg:x="214" fg:w="3"/><text x="17.4942%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="17.3247%" y="517" width="0.1612%" height="15" fill="rgb(223,142,48)" fg:x="215" fg:w="2"/><text x="17.5747%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="17.3247%" y="501" width="0.1612%" height="15" fill="rgb(245,83,23)" fg:x="215" fg:w="2"/><text x="17.5747%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="17.4859%" y="597" width="0.0806%" height="15" fill="rgb(224,63,2)" fg:x="217" fg:w="1"/><text x="17.7359%" y="607.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="17.4859%" y="581" width="0.0806%" height="15" fill="rgb(218,65,53)" fg:x="217" fg:w="1"/><text x="17.7359%" y="591.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="17.5665%" y="549" width="0.0806%" height="15" fill="rgb(221,84,29)" fg:x="218" fg:w="1"/><text x="17.8165%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.5665%" y="533" width="0.0806%" height="15" fill="rgb(234,0,32)" fg:x="218" fg:w="1"/><text x="17.8165%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="17.5665%" y="517" width="0.0806%" height="15" fill="rgb(206,20,16)" fg:x="218" fg:w="1"/><text x="17.8165%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="17.5665%" y="501" width="0.0806%" height="15" fill="rgb(244,172,18)" fg:x="218" fg:w="1"/><text x="17.8165%" y="511.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="17.5665%" y="581" width="0.2417%" height="15" fill="rgb(254,133,1)" fg:x="218" fg:w="3"/><text x="17.8165%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (3 samples, 0.24%)</title><rect x="17.5665%" y="565" width="0.2417%" height="15" fill="rgb(222,206,41)" fg:x="218" fg:w="3"/><text x="17.8165%" y="575.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="17.6471%" y="549" width="0.1612%" height="15" fill="rgb(212,3,42)" fg:x="219" fg:w="2"/><text x="17.8971%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="17.6471%" y="533" width="0.1612%" height="15" fill="rgb(241,11,4)" fg:x="219" fg:w="2"/><text x="17.8971%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="17.6471%" y="517" width="0.1612%" height="15" fill="rgb(205,19,26)" fg:x="219" fg:w="2"/><text x="17.8971%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="17.6471%" y="501" width="0.1612%" height="15" fill="rgb(210,179,32)" fg:x="219" fg:w="2"/><text x="17.8971%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.7276%" y="485" width="0.0806%" height="15" fill="rgb(227,116,49)" fg:x="220" fg:w="1"/><text x="17.9776%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.7276%" y="469" width="0.0806%" height="15" fill="rgb(211,146,6)" fg:x="220" fg:w="1"/><text x="17.9776%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="17.7276%" y="453" width="0.0806%" height="15" fill="rgb(219,44,39)" fg:x="220" fg:w="1"/><text x="17.9776%" y="463.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="17.8082%" y="549" width="0.0806%" height="15" fill="rgb(234,128,11)" fg:x="221" fg:w="1"/><text x="18.0582%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.8082%" y="533" width="0.0806%" height="15" fill="rgb(220,183,53)" fg:x="221" fg:w="1"/><text x="18.0582%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="17.8082%" y="517" width="0.0806%" height="15" fill="rgb(213,219,32)" fg:x="221" fg:w="1"/><text x="18.0582%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="17.8082%" y="501" width="0.0806%" height="15" fill="rgb(232,156,16)" fg:x="221" fg:w="1"/><text x="18.0582%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="17.8888%" y="549" width="0.0806%" height="15" fill="rgb(246,135,34)" fg:x="222" fg:w="1"/><text x="18.1388%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.8888%" y="533" width="0.0806%" height="15" fill="rgb(241,99,0)" fg:x="222" fg:w="1"/><text x="18.1388%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.8888%" y="517" width="0.0806%" height="15" fill="rgb(222,103,45)" fg:x="222" fg:w="1"/><text x="18.1388%" y="527.50"></text></g><g><title>engine::session::internal::Entities::add_entity (6 samples, 0.48%)</title><rect x="17.5665%" y="597" width="0.4835%" height="15" fill="rgb(212,57,4)" fg:x="218" fg:w="6"/><text x="17.8165%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="17.8082%" y="581" width="0.2417%" height="15" fill="rgb(215,68,47)" fg:x="221" fg:w="3"/><text x="18.0582%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="17.8082%" y="565" width="0.2417%" height="15" fill="rgb(230,84,2)" fg:x="221" fg:w="3"/><text x="18.0582%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="17.9694%" y="549" width="0.0806%" height="15" fill="rgb(220,102,14)" fg:x="223" fg:w="1"/><text x="18.2194%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.9694%" y="533" width="0.0806%" height="15" fill="rgb(240,10,32)" fg:x="223" fg:w="1"/><text x="18.2194%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (17 samples, 1.37%)</title><rect x="16.7607%" y="613" width="1.3699%" height="15" fill="rgb(215,47,27)" fg:x="208" fg:w="17"/><text x="17.0107%" y="623.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="18.0500%" y="597" width="0.0806%" height="15" fill="rgb(233,188,43)" fg:x="224" fg:w="1"/><text x="18.3000%" y="607.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="18.0500%" y="581" width="0.0806%" height="15" fill="rgb(253,190,1)" fg:x="224" fg:w="1"/><text x="18.3000%" y="591.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="18.0500%" y="565" width="0.0806%" height="15" fill="rgb(206,114,52)" fg:x="224" fg:w="1"/><text x="18.3000%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="18.0500%" y="549" width="0.0806%" height="15" fill="rgb(233,120,37)" fg:x="224" fg:w="1"/><text x="18.3000%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.1305%" y="613" width="0.0806%" height="15" fill="rgb(214,52,39)" fg:x="225" fg:w="1"/><text x="18.3805%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.1305%" y="597" width="0.0806%" height="15" fill="rgb(223,80,29)" fg:x="225" fg:w="1"/><text x="18.3805%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.1305%" y="581" width="0.0806%" height="15" fill="rgb(230,101,40)" fg:x="225" fg:w="1"/><text x="18.3805%" y="591.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="18.2111%" y="597" width="0.0806%" height="15" fill="rgb(219,211,8)" fg:x="226" fg:w="1"/><text x="18.4611%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.3723%" y="565" width="0.0806%" height="15" fill="rgb(252,126,28)" fg:x="228" fg:w="1"/><text x="18.6223%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.3723%" y="549" width="0.0806%" height="15" fill="rgb(215,56,38)" fg:x="228" fg:w="1"/><text x="18.6223%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.3723%" y="533" width="0.0806%" height="15" fill="rgb(249,55,44)" fg:x="228" fg:w="1"/><text x="18.6223%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="18.4529%" y="501" width="0.0806%" height="15" fill="rgb(220,221,32)" fg:x="229" fg:w="1"/><text x="18.7029%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="18.4529%" y="485" width="0.0806%" height="15" fill="rgb(212,216,41)" fg:x="229" fg:w="1"/><text x="18.7029%" y="495.50"></text></g><g><title>plugins_core::build::Build::save (24 samples, 1.93%)</title><rect x="16.6801%" y="629" width="1.9339%" height="15" fill="rgb(228,213,43)" fg:x="207" fg:w="24"/><text x="16.9301%" y="639.50">p..</text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (5 samples, 0.40%)</title><rect x="18.2111%" y="613" width="0.4029%" height="15" fill="rgb(211,31,26)" fg:x="226" fg:w="5"/><text x="18.4611%" y="623.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="18.2917%" y="597" width="0.3223%" height="15" fill="rgb(229,202,19)" fg:x="227" fg:w="4"/><text x="18.5417%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="18.2917%" y="581" width="0.3223%" height="15" fill="rgb(229,105,46)" fg:x="227" fg:w="4"/><text x="18.5417%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="18.4529%" y="565" width="0.1612%" height="15" fill="rgb(235,108,1)" fg:x="229" fg:w="2"/><text x="18.7029%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="18.4529%" y="549" width="0.1612%" height="15" fill="rgb(245,111,35)" fg:x="229" fg:w="2"/><text x="18.7029%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="18.4529%" y="533" width="0.1612%" height="15" fill="rgb(219,185,31)" fg:x="229" fg:w="2"/><text x="18.7029%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="18.4529%" y="517" width="0.1612%" height="15" fill="rgb(214,4,43)" fg:x="229" fg:w="2"/><text x="18.7029%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="18.5334%" y="501" width="0.0806%" height="15" fill="rgb(235,227,40)" fg:x="230" fg:w="1"/><text x="18.7834%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.5334%" y="485" width="0.0806%" height="15" fill="rgb(230,88,30)" fg:x="230" fg:w="1"/><text x="18.7834%" y="495.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (2 samples, 0.16%)</title><rect x="18.6140%" y="629" width="0.1612%" height="15" fill="rgb(216,217,1)" fg:x="231" fg:w="2"/><text x="18.8640%" y="639.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="18.6140%" y="613" width="0.1612%" height="15" fill="rgb(248,139,50)" fg:x="231" fg:w="2"/><text x="18.8640%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="18.6946%" y="597" width="0.0806%" height="15" fill="rgb(233,1,21)" fg:x="232" fg:w="1"/><text x="18.9446%" y="607.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="18.6946%" y="581" width="0.0806%" height="15" fill="rgb(215,183,12)" fg:x="232" fg:w="1"/><text x="18.9446%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.6946%" y="565" width="0.0806%" height="15" fill="rgb(229,104,42)" fg:x="232" fg:w="1"/><text x="18.9446%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.6946%" y="549" width="0.0806%" height="15" fill="rgb(243,34,48)" fg:x="232" fg:w="1"/><text x="18.9446%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.6946%" y="533" width="0.0806%" height="15" fill="rgb(239,11,44)" fg:x="232" fg:w="1"/><text x="18.9446%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.6946%" y="517" width="0.0806%" height="15" fill="rgb(231,98,35)" fg:x="232" fg:w="1"/><text x="18.9446%" y="527.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="18.8558%" y="597" width="0.0806%" height="15" fill="rgb(233,28,25)" fg:x="234" fg:w="1"/><text x="19.1058%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.9363%" y="517" width="0.0806%" height="15" fill="rgb(234,123,11)" fg:x="235" fg:w="1"/><text x="19.1863%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.9363%" y="501" width="0.0806%" height="15" fill="rgb(220,69,3)" fg:x="235" fg:w="1"/><text x="19.1863%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.9363%" y="485" width="0.0806%" height="15" fill="rgb(214,64,36)" fg:x="235" fg:w="1"/><text x="19.1863%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.9363%" y="469" width="0.0806%" height="15" fill="rgb(211,138,32)" fg:x="235" fg:w="1"/><text x="19.1863%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.9363%" y="453" width="0.0806%" height="15" fill="rgb(213,118,47)" fg:x="235" fg:w="1"/><text x="19.1863%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="18.9363%" y="437" width="0.0806%" height="15" fill="rgb(243,124,49)" fg:x="235" fg:w="1"/><text x="19.1863%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="18.9363%" y="421" width="0.0806%" height="15" fill="rgb(221,30,28)" fg:x="235" fg:w="1"/><text x="19.1863%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="18.9363%" y="405" width="0.0806%" height="15" fill="rgb(246,37,13)" fg:x="235" fg:w="1"/><text x="19.1863%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.9363%" y="389" width="0.0806%" height="15" fill="rgb(249,66,14)" fg:x="235" fg:w="1"/><text x="19.1863%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.9363%" y="373" width="0.0806%" height="15" fill="rgb(213,166,5)" fg:x="235" fg:w="1"/><text x="19.1863%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="18.9363%" y="357" width="0.0806%" height="15" fill="rgb(221,66,24)" fg:x="235" fg:w="1"/><text x="19.1863%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="18.9363%" y="341" width="0.0806%" height="15" fill="rgb(210,132,17)" fg:x="235" fg:w="1"/><text x="19.1863%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="18.9363%" y="325" width="0.0806%" height="15" fill="rgb(243,202,5)" fg:x="235" fg:w="1"/><text x="19.1863%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="18.9363%" y="309" width="0.0806%" height="15" fill="rgb(233,70,48)" fg:x="235" fg:w="1"/><text x="19.1863%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.9363%" y="293" width="0.0806%" height="15" fill="rgb(238,41,26)" fg:x="235" fg:w="1"/><text x="19.1863%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="18.9363%" y="565" width="0.1612%" height="15" fill="rgb(241,19,31)" fg:x="235" fg:w="2"/><text x="19.1863%" y="575.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="18.9363%" y="549" width="0.1612%" height="15" fill="rgb(214,76,10)" fg:x="235" fg:w="2"/><text x="19.1863%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="18.9363%" y="533" width="0.1612%" height="15" fill="rgb(254,202,22)" fg:x="235" fg:w="2"/><text x="19.1863%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="19.0169%" y="517" width="0.0806%" height="15" fill="rgb(214,72,24)" fg:x="236" fg:w="1"/><text x="19.2669%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.0169%" y="501" width="0.0806%" height="15" fill="rgb(221,92,46)" fg:x="236" fg:w="1"/><text x="19.2669%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="19.0169%" y="485" width="0.0806%" height="15" fill="rgb(246,13,50)" fg:x="236" fg:w="1"/><text x="19.2669%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.0169%" y="469" width="0.0806%" height="15" fill="rgb(240,165,38)" fg:x="236" fg:w="1"/><text x="19.2669%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.0169%" y="453" width="0.0806%" height="15" fill="rgb(241,24,51)" fg:x="236" fg:w="1"/><text x="19.2669%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="19.0169%" y="437" width="0.0806%" height="15" fill="rgb(227,51,44)" fg:x="236" fg:w="1"/><text x="19.2669%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.0975%" y="517" width="0.0806%" height="15" fill="rgb(231,121,3)" fg:x="237" fg:w="1"/><text x="19.3475%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.0975%" y="501" width="0.0806%" height="15" fill="rgb(245,3,41)" fg:x="237" fg:w="1"/><text x="19.3475%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.0975%" y="485" width="0.0806%" height="15" fill="rgb(214,13,26)" fg:x="237" fg:w="1"/><text x="19.3475%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.0975%" y="469" width="0.0806%" height="15" fill="rgb(252,75,11)" fg:x="237" fg:w="1"/><text x="19.3475%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.0975%" y="453" width="0.0806%" height="15" fill="rgb(218,226,17)" fg:x="237" fg:w="1"/><text x="19.3475%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="19.0975%" y="437" width="0.0806%" height="15" fill="rgb(248,89,38)" fg:x="237" fg:w="1"/><text x="19.3475%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="19.0975%" y="421" width="0.0806%" height="15" fill="rgb(237,73,46)" fg:x="237" fg:w="1"/><text x="19.3475%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="19.0975%" y="405" width="0.0806%" height="15" fill="rgb(242,78,33)" fg:x="237" fg:w="1"/><text x="19.3475%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.0975%" y="389" width="0.0806%" height="15" fill="rgb(235,60,3)" fg:x="237" fg:w="1"/><text x="19.3475%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.0975%" y="373" width="0.0806%" height="15" fill="rgb(216,172,19)" fg:x="237" fg:w="1"/><text x="19.3475%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="19.0975%" y="357" width="0.0806%" height="15" fill="rgb(227,6,42)" fg:x="237" fg:w="1"/><text x="19.3475%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="19.0975%" y="341" width="0.0806%" height="15" fill="rgb(223,207,42)" fg:x="237" fg:w="1"/><text x="19.3475%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="19.0975%" y="325" width="0.0806%" height="15" fill="rgb(246,138,30)" fg:x="237" fg:w="1"/><text x="19.3475%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="19.0975%" y="309" width="0.0806%" height="15" fill="rgb(251,199,47)" fg:x="237" fg:w="1"/><text x="19.3475%" y="319.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="19.0975%" y="293" width="0.0806%" height="15" fill="rgb(228,218,44)" fg:x="237" fg:w="1"/><text x="19.3475%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="19.0975%" y="277" width="0.0806%" height="15" fill="rgb(220,68,6)" fg:x="237" fg:w="1"/><text x="19.3475%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.1781%" y="517" width="0.0806%" height="15" fill="rgb(240,60,26)" fg:x="238" fg:w="1"/><text x="19.4281%" y="527.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (5 samples, 0.40%)</title><rect x="18.9363%" y="597" width="0.4029%" height="15" fill="rgb(211,200,19)" fg:x="235" fg:w="5"/><text x="19.1863%" y="607.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (5 samples, 0.40%)</title><rect x="18.9363%" y="581" width="0.4029%" height="15" fill="rgb(242,145,30)" fg:x="235" fg:w="5"/><text x="19.1863%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="19.0975%" y="565" width="0.2417%" height="15" fill="rgb(225,64,13)" fg:x="237" fg:w="3"/><text x="19.3475%" y="575.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="19.0975%" y="549" width="0.2417%" height="15" fill="rgb(218,103,35)" fg:x="237" fg:w="3"/><text x="19.3475%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="19.0975%" y="533" width="0.2417%" height="15" fill="rgb(216,93,46)" fg:x="237" fg:w="3"/><text x="19.3475%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="19.2587%" y="517" width="0.0806%" height="15" fill="rgb(225,159,27)" fg:x="239" fg:w="1"/><text x="19.5087%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="19.3392%" y="533" width="0.0806%" height="15" fill="rgb(225,204,11)" fg:x="240" fg:w="1"/><text x="19.5892%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.4198%" y="501" width="0.0806%" height="15" fill="rgb(205,56,4)" fg:x="241" fg:w="1"/><text x="19.6698%" y="511.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (10 samples, 0.81%)</title><rect x="18.7752%" y="629" width="0.8058%" height="15" fill="rgb(206,6,35)" fg:x="233" fg:w="10"/><text x="19.0252%" y="639.50"></text></g><g><title>plugins_core::tools::set_occupying (10 samples, 0.81%)</title><rect x="18.7752%" y="613" width="0.8058%" height="15" fill="rgb(247,73,52)" fg:x="233" fg:w="10"/><text x="19.0252%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="19.3392%" y="597" width="0.2417%" height="15" fill="rgb(246,97,4)" fg:x="240" fg:w="3"/><text x="19.5892%" y="607.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (3 samples, 0.24%)</title><rect x="19.3392%" y="581" width="0.2417%" height="15" fill="rgb(212,37,15)" fg:x="240" fg:w="3"/><text x="19.5892%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="19.3392%" y="565" width="0.2417%" height="15" fill="rgb(208,130,40)" fg:x="240" fg:w="3"/><text x="19.5892%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="19.3392%" y="549" width="0.2417%" height="15" fill="rgb(236,55,29)" fg:x="240" fg:w="3"/><text x="19.5892%" y="559.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (2 samples, 0.16%)</title><rect x="19.4198%" y="533" width="0.1612%" height="15" fill="rgb(209,156,45)" fg:x="241" fg:w="2"/><text x="19.6698%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="19.4198%" y="517" width="0.1612%" height="15" fill="rgb(249,107,4)" fg:x="241" fg:w="2"/><text x="19.6698%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.5004%" y="501" width="0.0806%" height="15" fill="rgb(227,7,13)" fg:x="242" fg:w="1"/><text x="19.7504%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.5004%" y="485" width="0.0806%" height="15" fill="rgb(250,129,14)" fg:x="242" fg:w="1"/><text x="19.7504%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.5004%" y="469" width="0.0806%" height="15" fill="rgb(229,92,13)" fg:x="242" fg:w="1"/><text x="19.7504%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="19.5810%" y="565" width="0.0806%" height="15" fill="rgb(245,98,39)" fg:x="243" fg:w="1"/><text x="19.8310%" y="575.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="19.5810%" y="613" width="0.1612%" height="15" fill="rgb(234,135,48)" fg:x="243" fg:w="2"/><text x="19.8310%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="19.5810%" y="597" width="0.1612%" height="15" fill="rgb(230,98,28)" fg:x="243" fg:w="2"/><text x="19.8310%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="19.5810%" y="581" width="0.1612%" height="15" fill="rgb(223,121,0)" fg:x="243" fg:w="2"/><text x="19.8310%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="19.6616%" y="565" width="0.0806%" height="15" fill="rgb(234,173,33)" fg:x="244" fg:w="1"/><text x="19.9116%" y="575.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (3 samples, 0.24%)</title><rect x="19.5810%" y="629" width="0.2417%" height="15" fill="rgb(245,47,8)" fg:x="243" fg:w="3"/><text x="19.8310%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="19.7421%" y="613" width="0.0806%" height="15" fill="rgb(205,17,20)" fg:x="245" fg:w="1"/><text x="19.9921%" y="623.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="19.7421%" y="597" width="0.0806%" height="15" fill="rgb(232,151,16)" fg:x="245" fg:w="1"/><text x="19.9921%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="19.7421%" y="581" width="0.0806%" height="15" fill="rgb(208,30,32)" fg:x="245" fg:w="1"/><text x="19.9921%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="19.7421%" y="565" width="0.0806%" height="15" fill="rgb(254,26,3)" fg:x="245" fg:w="1"/><text x="19.9921%" y="575.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="19.8227%" y="613" width="0.0806%" height="15" fill="rgb(240,177,30)" fg:x="246" fg:w="1"/><text x="20.0727%" y="623.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="19.8227%" y="597" width="0.0806%" height="15" fill="rgb(248,76,44)" fg:x="246" fg:w="1"/><text x="20.0727%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="19.8227%" y="581" width="0.0806%" height="15" fill="rgb(241,186,54)" fg:x="246" fg:w="1"/><text x="20.0727%" y="591.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="19.8227%" y="565" width="0.0806%" height="15" fill="rgb(249,171,29)" fg:x="246" fg:w="1"/><text x="20.0727%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="19.9033%" y="517" width="0.0806%" height="15" fill="rgb(237,151,44)" fg:x="247" fg:w="1"/><text x="20.1533%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="19.9033%" y="597" width="0.1612%" height="15" fill="rgb(228,174,30)" fg:x="247" fg:w="2"/><text x="20.1533%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="19.9033%" y="581" width="0.1612%" height="15" fill="rgb(252,14,37)" fg:x="247" fg:w="2"/><text x="20.1533%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="19.9033%" y="565" width="0.1612%" height="15" fill="rgb(207,111,40)" fg:x="247" fg:w="2"/><text x="20.1533%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="19.9033%" y="549" width="0.1612%" height="15" fill="rgb(248,171,54)" fg:x="247" fg:w="2"/><text x="20.1533%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="19.9033%" y="533" width="0.1612%" height="15" fill="rgb(211,127,2)" fg:x="247" fg:w="2"/><text x="20.1533%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.9839%" y="517" width="0.0806%" height="15" fill="rgb(236,87,47)" fg:x="248" fg:w="1"/><text x="20.2339%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.9839%" y="501" width="0.0806%" height="15" fill="rgb(223,190,45)" fg:x="248" fg:w="1"/><text x="20.2339%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="19.9839%" y="485" width="0.0806%" height="15" fill="rgb(215,5,16)" fg:x="248" fg:w="1"/><text x="20.2339%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.9839%" y="469" width="0.0806%" height="15" fill="rgb(252,82,33)" fg:x="248" fg:w="1"/><text x="20.2339%" y="479.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (5 samples, 0.40%)</title><rect x="19.9033%" y="613" width="0.4029%" height="15" fill="rgb(247,213,44)" fg:x="247" fg:w="5"/><text x="20.1533%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="20.0645%" y="597" width="0.2417%" height="15" fill="rgb(205,196,44)" fg:x="249" fg:w="3"/><text x="20.3145%" y="607.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="20.0645%" y="581" width="0.2417%" height="15" fill="rgb(237,96,54)" fg:x="249" fg:w="3"/><text x="20.3145%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="20.1450%" y="565" width="0.1612%" height="15" fill="rgb(230,113,34)" fg:x="250" fg:w="2"/><text x="20.3950%" y="575.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="20.1450%" y="549" width="0.1612%" height="15" fill="rgb(221,224,12)" fg:x="250" fg:w="2"/><text x="20.3950%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="20.1450%" y="533" width="0.1612%" height="15" fill="rgb(219,112,44)" fg:x="250" fg:w="2"/><text x="20.3950%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="20.1450%" y="517" width="0.1612%" height="15" fill="rgb(210,31,13)" fg:x="250" fg:w="2"/><text x="20.3950%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="20.1450%" y="501" width="0.1612%" height="15" fill="rgb(230,25,16)" fg:x="250" fg:w="2"/><text x="20.3950%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="20.1450%" y="485" width="0.1612%" height="15" fill="rgb(246,108,53)" fg:x="250" fg:w="2"/><text x="20.3950%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="20.1450%" y="469" width="0.1612%" height="15" fill="rgb(241,172,50)" fg:x="250" fg:w="2"/><text x="20.3950%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (2 samples, 0.16%)</title><rect x="20.1450%" y="453" width="0.1612%" height="15" fill="rgb(235,141,10)" fg:x="250" fg:w="2"/><text x="20.3950%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.2256%" y="437" width="0.0806%" height="15" fill="rgb(220,174,43)" fg:x="251" fg:w="1"/><text x="20.4756%" y="447.50"></text></g><g><title>plugins_core::tools::set_container (8 samples, 0.64%)</title><rect x="19.8227%" y="629" width="0.6446%" height="15" fill="rgb(215,181,40)" fg:x="246" fg:w="8"/><text x="20.0727%" y="639.50"></text></g><g><title>plugins_core::location::Location::set (2 samples, 0.16%)</title><rect x="20.3062%" y="613" width="0.1612%" height="15" fill="rgb(230,97,2)" fg:x="252" fg:w="2"/><text x="20.5562%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="20.3062%" y="597" width="0.1612%" height="15" fill="rgb(211,25,27)" fg:x="252" fg:w="2"/><text x="20.5562%" y="607.50"></text></g><g><title>plugins_core::location::_::&lt;impl serde::ser::Serialize for plugins_core::location::Location&gt;::serialize (2 samples, 0.16%)</title><rect x="20.3062%" y="581" width="0.1612%" height="15" fill="rgb(230,87,26)" fg:x="252" fg:w="2"/><text x="20.5562%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="20.3062%" y="565" width="0.1612%" height="15" fill="rgb(227,160,17)" fg:x="252" fg:w="2"/><text x="20.5562%" y="575.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (2 samples, 0.16%)</title><rect x="20.3062%" y="549" width="0.1612%" height="15" fill="rgb(244,85,34)" fg:x="252" fg:w="2"/><text x="20.5562%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="20.3062%" y="533" width="0.1612%" height="15" fill="rgb(207,70,0)" fg:x="252" fg:w="2"/><text x="20.5562%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.3868%" y="517" width="0.0806%" height="15" fill="rgb(223,129,7)" fg:x="253" fg:w="1"/><text x="20.6368%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.3868%" y="501" width="0.0806%" height="15" fill="rgb(246,105,7)" fg:x="253" fg:w="1"/><text x="20.6368%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="20.3868%" y="485" width="0.0806%" height="15" fill="rgb(215,154,42)" fg:x="253" fg:w="1"/><text x="20.6368%" y="495.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (118 samples, 9.51%)</title><rect x="11.0395%" y="645" width="9.5085%" height="15" fill="rgb(220,215,30)" fg:x="137" fg:w="118"/><text x="11.2895%" y="655.50">plugins_core::..</text></g><g><title>plugins_core::tools::set_wearing (1 samples, 0.08%)</title><rect x="20.4674%" y="629" width="0.0806%" height="15" fill="rgb(228,81,51)" fg:x="254" fg:w="1"/><text x="20.7174%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="20.4674%" y="613" width="0.0806%" height="15" fill="rgb(247,71,54)" fg:x="254" fg:w="1"/><text x="20.7174%" y="623.50"></text></g><g><title>plugins_core::fashion::model::_::&lt;impl serde::ser::Serialize for plugins_core::fashion::model::Wearing&gt;::serialize (1 samples, 0.08%)</title><rect x="20.4674%" y="597" width="0.0806%" height="15" fill="rgb(234,176,34)" fg:x="254" fg:w="1"/><text x="20.7174%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="20.4674%" y="581" width="0.0806%" height="15" fill="rgb(241,103,54)" fg:x="254" fg:w="1"/><text x="20.7174%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="20.4674%" y="565" width="0.0806%" height="15" fill="rgb(228,22,34)" fg:x="254" fg:w="1"/><text x="20.7174%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="20.4674%" y="549" width="0.0806%" height="15" fill="rgb(241,179,48)" fg:x="254" fg:w="1"/><text x="20.7174%" y="559.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="20.5479%" y="645" width="0.0806%" height="15" fill="rgb(235,167,37)" fg:x="255" fg:w="1"/><text x="20.7979%" y="655.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="20.5479%" y="629" width="0.0806%" height="15" fill="rgb(213,109,30)" fg:x="255" fg:w="1"/><text x="20.7979%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="20.5479%" y="613" width="0.0806%" height="15" fill="rgb(222,172,16)" fg:x="255" fg:w="1"/><text x="20.7979%" y="623.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="20.5479%" y="597" width="0.0806%" height="15" fill="rgb(233,192,5)" fg:x="255" fg:w="1"/><text x="20.7979%" y="607.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="20.5479%" y="581" width="0.0806%" height="15" fill="rgb(247,189,41)" fg:x="255" fg:w="1"/><text x="20.7979%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.5479%" y="565" width="0.0806%" height="15" fill="rgb(218,134,47)" fg:x="255" fg:w="1"/><text x="20.7979%" y="575.50"></text></g><g><title>plugins_core::build::BuildSurroundings::hands (1 samples, 0.08%)</title><rect x="20.6285%" y="645" width="0.0806%" height="15" fill="rgb(216,29,3)" fg:x="256" fg:w="1"/><text x="20.8785%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="20.6285%" y="629" width="0.0806%" height="15" fill="rgb(246,140,12)" fg:x="256" fg:w="1"/><text x="20.8785%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="20.6285%" y="613" width="0.0806%" height="15" fill="rgb(230,136,11)" fg:x="256" fg:w="1"/><text x="20.8785%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.6285%" y="597" width="0.0806%" height="15" fill="rgb(247,22,47)" fg:x="256" fg:w="1"/><text x="20.8785%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="20.7091%" y="613" width="0.0806%" height="15" fill="rgb(218,84,22)" fg:x="257" fg:w="1"/><text x="20.9591%" y="623.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="20.7091%" y="597" width="0.0806%" height="15" fill="rgb(216,87,39)" fg:x="257" fg:w="1"/><text x="20.9591%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="20.7091%" y="581" width="0.0806%" height="15" fill="rgb(221,178,8)" fg:x="257" fg:w="1"/><text x="20.9591%" y="591.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="20.7897%" y="613" width="0.0806%" height="15" fill="rgb(230,42,11)" fg:x="258" fg:w="1"/><text x="21.0397%" y="623.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="20.7897%" y="597" width="0.0806%" height="15" fill="rgb(237,229,4)" fg:x="258" fg:w="1"/><text x="21.0397%" y="607.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="20.7897%" y="581" width="0.0806%" height="15" fill="rgb(222,31,33)" fg:x="258" fg:w="1"/><text x="21.0397%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="20.7897%" y="565" width="0.0806%" height="15" fill="rgb(210,17,39)" fg:x="258" fg:w="1"/><text x="21.0397%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.8703%" y="597" width="0.0806%" height="15" fill="rgb(244,93,20)" fg:x="259" fg:w="1"/><text x="21.1203%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.8703%" y="581" width="0.0806%" height="15" fill="rgb(210,40,47)" fg:x="259" fg:w="1"/><text x="21.1203%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="20.8703%" y="565" width="0.0806%" height="15" fill="rgb(239,211,47)" fg:x="259" fg:w="1"/><text x="21.1203%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="20.8703%" y="549" width="0.0806%" height="15" fill="rgb(251,223,49)" fg:x="259" fg:w="1"/><text x="21.1203%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="20.8703%" y="533" width="0.0806%" height="15" fill="rgb(221,149,5)" fg:x="259" fg:w="1"/><text x="21.1203%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.8703%" y="517" width="0.0806%" height="15" fill="rgb(219,224,51)" fg:x="259" fg:w="1"/><text x="21.1203%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.8703%" y="501" width="0.0806%" height="15" fill="rgb(223,7,8)" fg:x="259" fg:w="1"/><text x="21.1203%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="20.8703%" y="485" width="0.0806%" height="15" fill="rgb(241,217,22)" fg:x="259" fg:w="1"/><text x="21.1203%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="20.8703%" y="469" width="0.0806%" height="15" fill="rgb(248,209,0)" fg:x="259" fg:w="1"/><text x="21.1203%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="20.8703%" y="453" width="0.0806%" height="15" fill="rgb(217,205,4)" fg:x="259" fg:w="1"/><text x="21.1203%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="20.8703%" y="437" width="0.0806%" height="15" fill="rgb(228,124,39)" fg:x="259" fg:w="1"/><text x="21.1203%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.8703%" y="421" width="0.0806%" height="15" fill="rgb(250,116,42)" fg:x="259" fg:w="1"/><text x="21.1203%" y="431.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="20.9508%" y="581" width="0.0806%" height="15" fill="rgb(223,202,9)" fg:x="260" fg:w="1"/><text x="21.2008%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="20.9508%" y="565" width="0.0806%" height="15" fill="rgb(242,222,40)" fg:x="260" fg:w="1"/><text x="21.2008%" y="575.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (1 samples, 0.08%)</title><rect x="20.9508%" y="549" width="0.0806%" height="15" fill="rgb(229,99,46)" fg:x="260" fg:w="1"/><text x="21.2008%" y="559.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="21.0314%" y="565" width="0.1612%" height="15" fill="rgb(225,56,46)" fg:x="261" fg:w="2"/><text x="21.2814%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="21.0314%" y="549" width="0.1612%" height="15" fill="rgb(227,94,5)" fg:x="261" fg:w="2"/><text x="21.2814%" y="559.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="21.0314%" y="533" width="0.1612%" height="15" fill="rgb(205,112,38)" fg:x="261" fg:w="2"/><text x="21.2814%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="21.0314%" y="517" width="0.1612%" height="15" fill="rgb(231,133,46)" fg:x="261" fg:w="2"/><text x="21.2814%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="21.0314%" y="501" width="0.1612%" height="15" fill="rgb(217,16,9)" fg:x="261" fg:w="2"/><text x="21.2814%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.1120%" y="485" width="0.0806%" height="15" fill="rgb(249,173,9)" fg:x="262" fg:w="1"/><text x="21.3620%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.1120%" y="469" width="0.0806%" height="15" fill="rgb(205,163,53)" fg:x="262" fg:w="1"/><text x="21.3620%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.1120%" y="453" width="0.0806%" height="15" fill="rgb(217,54,41)" fg:x="262" fg:w="1"/><text x="21.3620%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="21.1120%" y="437" width="0.0806%" height="15" fill="rgb(228,216,12)" fg:x="262" fg:w="1"/><text x="21.3620%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="21.1120%" y="421" width="0.0806%" height="15" fill="rgb(244,228,15)" fg:x="262" fg:w="1"/><text x="21.3620%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="21.1120%" y="405" width="0.0806%" height="15" fill="rgb(221,176,53)" fg:x="262" fg:w="1"/><text x="21.3620%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="21.1120%" y="389" width="0.0806%" height="15" fill="rgb(205,94,34)" fg:x="262" fg:w="1"/><text x="21.3620%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="21.1120%" y="373" width="0.0806%" height="15" fill="rgb(213,110,48)" fg:x="262" fg:w="1"/><text x="21.3620%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="21.1120%" y="357" width="0.0806%" height="15" fill="rgb(236,142,28)" fg:x="262" fg:w="1"/><text x="21.3620%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="21.1120%" y="341" width="0.0806%" height="15" fill="rgb(225,135,29)" fg:x="262" fg:w="1"/><text x="21.3620%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="21.1120%" y="325" width="0.0806%" height="15" fill="rgb(252,45,31)" fg:x="262" fg:w="1"/><text x="21.3620%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="21.1120%" y="309" width="0.0806%" height="15" fill="rgb(211,187,50)" fg:x="262" fg:w="1"/><text x="21.3620%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.1120%" y="293" width="0.0806%" height="15" fill="rgb(229,109,7)" fg:x="262" fg:w="1"/><text x="21.3620%" y="303.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="21.1926%" y="565" width="0.1612%" height="15" fill="rgb(251,131,51)" fg:x="263" fg:w="2"/><text x="21.4426%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.2732%" y="549" width="0.0806%" height="15" fill="rgb(251,180,35)" fg:x="264" fg:w="1"/><text x="21.5232%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="21.2732%" y="533" width="0.0806%" height="15" fill="rgb(211,46,32)" fg:x="264" fg:w="1"/><text x="21.5232%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.48%)</title><rect x="20.9508%" y="597" width="0.4835%" height="15" fill="rgb(248,123,17)" fg:x="260" fg:w="6"/><text x="21.2008%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.40%)</title><rect x="21.0314%" y="581" width="0.4029%" height="15" fill="rgb(227,141,18)" fg:x="261" fg:w="5"/><text x="21.2814%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="21.3537%" y="565" width="0.0806%" height="15" fill="rgb(216,102,9)" fg:x="265" fg:w="1"/><text x="21.6037%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="21.3537%" y="549" width="0.0806%" height="15" fill="rgb(253,47,13)" fg:x="265" fg:w="1"/><text x="21.6037%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="21.3537%" y="533" width="0.0806%" height="15" fill="rgb(226,93,23)" fg:x="265" fg:w="1"/><text x="21.6037%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.3537%" y="517" width="0.0806%" height="15" fill="rgb(247,104,17)" fg:x="265" fg:w="1"/><text x="21.6037%" y="527.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (10 samples, 0.81%)</title><rect x="20.7091%" y="645" width="0.8058%" height="15" fill="rgb(233,203,26)" fg:x="257" fg:w="10"/><text x="20.9591%" y="655.50"></text></g><g><title>plugins_core::build::QuickThing::make (10 samples, 0.81%)</title><rect x="20.7091%" y="629" width="0.8058%" height="15" fill="rgb(244,98,49)" fg:x="257" fg:w="10"/><text x="20.9591%" y="639.50"></text></g><g><title>plugins_core::build::Build::save (8 samples, 0.64%)</title><rect x="20.8703%" y="613" width="0.6446%" height="15" fill="rgb(235,134,22)" fg:x="259" fg:w="8"/><text x="21.1203%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="21.4343%" y="597" width="0.0806%" height="15" fill="rgb(221,70,32)" fg:x="266" fg:w="1"/><text x="21.6843%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="21.4343%" y="581" width="0.0806%" height="15" fill="rgb(238,15,50)" fg:x="266" fg:w="1"/><text x="21.6843%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="21.4343%" y="565" width="0.0806%" height="15" fill="rgb(215,221,48)" fg:x="266" fg:w="1"/><text x="21.6843%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="21.4343%" y="549" width="0.0806%" height="15" fill="rgb(236,73,3)" fg:x="266" fg:w="1"/><text x="21.6843%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.4343%" y="533" width="0.0806%" height="15" fill="rgb(250,107,11)" fg:x="266" fg:w="1"/><text x="21.6843%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="21.4343%" y="517" width="0.0806%" height="15" fill="rgb(242,39,14)" fg:x="266" fg:w="1"/><text x="21.6843%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.4343%" y="501" width="0.0806%" height="15" fill="rgb(248,164,37)" fg:x="266" fg:w="1"/><text x="21.6843%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.4343%" y="485" width="0.0806%" height="15" fill="rgb(217,60,12)" fg:x="266" fg:w="1"/><text x="21.6843%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="21.4343%" y="469" width="0.0806%" height="15" fill="rgb(240,125,29)" fg:x="266" fg:w="1"/><text x="21.6843%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="21.5149%" y="629" width="0.0806%" height="15" fill="rgb(208,207,28)" fg:x="267" fg:w="1"/><text x="21.7649%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="21.5149%" y="613" width="0.0806%" height="15" fill="rgb(209,159,27)" fg:x="267" fg:w="1"/><text x="21.7649%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="21.5149%" y="597" width="0.0806%" height="15" fill="rgb(251,176,53)" fg:x="267" fg:w="1"/><text x="21.7649%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.5149%" y="581" width="0.0806%" height="15" fill="rgb(211,85,7)" fg:x="267" fg:w="1"/><text x="21.7649%" y="591.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="21.5955%" y="549" width="0.0806%" height="15" fill="rgb(216,64,54)" fg:x="268" fg:w="1"/><text x="21.8455%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="21.5955%" y="533" width="0.0806%" height="15" fill="rgb(217,54,24)" fg:x="268" fg:w="1"/><text x="21.8455%" y="543.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="21.5955%" y="517" width="0.0806%" height="15" fill="rgb(208,206,53)" fg:x="268" fg:w="1"/><text x="21.8455%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="21.5955%" y="501" width="0.0806%" height="15" fill="rgb(251,74,39)" fg:x="268" fg:w="1"/><text x="21.8455%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.08%)</title><rect x="21.5955%" y="485" width="0.0806%" height="15" fill="rgb(226,47,5)" fg:x="268" fg:w="1"/><text x="21.8455%" y="495.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.08%)</title><rect x="21.5955%" y="469" width="0.0806%" height="15" fill="rgb(234,111,33)" fg:x="268" fg:w="1"/><text x="21.8455%" y="479.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (1 samples, 0.08%)</title><rect x="21.5955%" y="453" width="0.0806%" height="15" fill="rgb(251,14,10)" fg:x="268" fg:w="1"/><text x="21.8455%" y="463.50"></text></g><g><title>plugins_core::build::Build::new_world (2 samples, 0.16%)</title><rect x="21.5955%" y="629" width="0.1612%" height="15" fill="rgb(232,43,0)" fg:x="268" fg:w="2"/><text x="21.8455%" y="639.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="21.5955%" y="613" width="0.1612%" height="15" fill="rgb(222,68,43)" fg:x="268" fg:w="2"/><text x="21.8455%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (2 samples, 0.16%)</title><rect x="21.5955%" y="597" width="0.1612%" height="15" fill="rgb(217,24,23)" fg:x="268" fg:w="2"/><text x="21.8455%" y="607.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (2 samples, 0.16%)</title><rect x="21.5955%" y="581" width="0.1612%" height="15" fill="rgb(229,209,14)" fg:x="268" fg:w="2"/><text x="21.8455%" y="591.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="21.5955%" y="565" width="0.1612%" height="15" fill="rgb(250,149,48)" fg:x="268" fg:w="2"/><text x="21.8455%" y="575.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="21.6761%" y="549" width="0.0806%" height="15" fill="rgb(210,120,37)" fg:x="269" fg:w="1"/><text x="21.9261%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="21.6761%" y="533" width="0.0806%" height="15" fill="rgb(210,21,8)" fg:x="269" fg:w="1"/><text x="21.9261%" y="543.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="21.6761%" y="517" width="0.0806%" height="15" fill="rgb(243,145,7)" fg:x="269" fg:w="1"/><text x="21.9261%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="21.8372%" y="549" width="0.0806%" height="15" fill="rgb(238,178,32)" fg:x="271" fg:w="1"/><text x="22.0872%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="21.8372%" y="533" width="0.0806%" height="15" fill="rgb(222,4,10)" fg:x="271" fg:w="1"/><text x="22.0872%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.8372%" y="517" width="0.0806%" height="15" fill="rgb(239,7,37)" fg:x="271" fg:w="1"/><text x="22.0872%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.8372%" y="501" width="0.0806%" height="15" fill="rgb(215,31,37)" fg:x="271" fg:w="1"/><text x="22.0872%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.8372%" y="485" width="0.0806%" height="15" fill="rgb(224,83,33)" fg:x="271" fg:w="1"/><text x="22.0872%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="21.8372%" y="469" width="0.0806%" height="15" fill="rgb(239,55,3)" fg:x="271" fg:w="1"/><text x="22.0872%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="21.8372%" y="453" width="0.0806%" height="15" fill="rgb(247,92,11)" fg:x="271" fg:w="1"/><text x="22.0872%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="21.8372%" y="437" width="0.0806%" height="15" fill="rgb(239,200,7)" fg:x="271" fg:w="1"/><text x="22.0872%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="21.8372%" y="421" width="0.0806%" height="15" fill="rgb(227,115,8)" fg:x="271" fg:w="1"/><text x="22.0872%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="21.8372%" y="405" width="0.0806%" height="15" fill="rgb(215,189,27)" fg:x="271" fg:w="1"/><text x="22.0872%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="21.8372%" y="389" width="0.0806%" height="15" fill="rgb(251,216,39)" fg:x="271" fg:w="1"/><text x="22.0872%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="21.8372%" y="373" width="0.0806%" height="15" fill="rgb(207,29,47)" fg:x="271" fg:w="1"/><text x="22.0872%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="21.8372%" y="357" width="0.0806%" height="15" fill="rgb(210,71,34)" fg:x="271" fg:w="1"/><text x="22.0872%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="21.8372%" y="341" width="0.0806%" height="15" fill="rgb(253,217,51)" fg:x="271" fg:w="1"/><text x="22.0872%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.8372%" y="325" width="0.0806%" height="15" fill="rgb(222,117,46)" fg:x="271" fg:w="1"/><text x="22.0872%" y="335.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="21.8372%" y="581" width="0.1612%" height="15" fill="rgb(226,132,6)" fg:x="271" fg:w="2"/><text x="22.0872%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="21.8372%" y="565" width="0.1612%" height="15" fill="rgb(254,145,51)" fg:x="271" fg:w="2"/><text x="22.0872%" y="575.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="21.9178%" y="549" width="0.0806%" height="15" fill="rgb(231,199,27)" fg:x="272" fg:w="1"/><text x="22.1678%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="21.9178%" y="533" width="0.0806%" height="15" fill="rgb(245,158,14)" fg:x="272" fg:w="1"/><text x="22.1678%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="21.9178%" y="517" width="0.0806%" height="15" fill="rgb(240,113,14)" fg:x="272" fg:w="1"/><text x="22.1678%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="21.9178%" y="501" width="0.0806%" height="15" fill="rgb(210,20,13)" fg:x="272" fg:w="1"/><text x="22.1678%" y="511.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="21.9178%" y="485" width="0.0806%" height="15" fill="rgb(241,144,13)" fg:x="272" fg:w="1"/><text x="22.1678%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="21.9178%" y="469" width="0.0806%" height="15" fill="rgb(235,43,34)" fg:x="272" fg:w="1"/><text x="22.1678%" y="479.50"></text></g><g><title>kernel::model::EntityPtr::new_from_entity (1 samples, 0.08%)</title><rect x="21.9984%" y="581" width="0.0806%" height="15" fill="rgb(208,36,20)" fg:x="273" fg:w="1"/><text x="22.2484%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.0790%" y="549" width="0.0806%" height="15" fill="rgb(239,204,10)" fg:x="274" fg:w="1"/><text x="22.3290%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.48%)</title><rect x="21.7566%" y="613" width="0.4835%" height="15" fill="rgb(217,84,43)" fg:x="270" fg:w="6"/><text x="22.0066%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.40%)</title><rect x="21.8372%" y="597" width="0.4029%" height="15" fill="rgb(241,170,50)" fg:x="271" fg:w="5"/><text x="22.0872%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="22.0790%" y="581" width="0.1612%" height="15" fill="rgb(226,205,29)" fg:x="274" fg:w="2"/><text x="22.3290%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="22.0790%" y="565" width="0.1612%" height="15" fill="rgb(233,113,1)" fg:x="274" fg:w="2"/><text x="22.3290%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="22.1595%" y="549" width="0.0806%" height="15" fill="rgb(253,98,13)" fg:x="275" fg:w="1"/><text x="22.4095%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="22.1595%" y="533" width="0.0806%" height="15" fill="rgb(211,115,12)" fg:x="275" fg:w="1"/><text x="22.4095%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="22.1595%" y="517" width="0.0806%" height="15" fill="rgb(208,12,16)" fg:x="275" fg:w="1"/><text x="22.4095%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="22.1595%" y="501" width="0.0806%" height="15" fill="rgb(237,193,54)" fg:x="275" fg:w="1"/><text x="22.4095%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="22.1595%" y="485" width="0.0806%" height="15" fill="rgb(243,22,42)" fg:x="275" fg:w="1"/><text x="22.4095%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="22.1595%" y="469" width="0.0806%" height="15" fill="rgb(233,151,36)" fg:x="275" fg:w="1"/><text x="22.4095%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="22.2401%" y="613" width="0.1612%" height="15" fill="rgb(237,57,45)" fg:x="276" fg:w="2"/><text x="22.4901%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="22.2401%" y="597" width="0.1612%" height="15" fill="rgb(221,88,17)" fg:x="276" fg:w="2"/><text x="22.4901%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.3207%" y="581" width="0.0806%" height="15" fill="rgb(230,79,15)" fg:x="277" fg:w="1"/><text x="22.5707%" y="591.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (211 samples, 17.00%)</title><rect x="5.4795%" y="661" width="17.0024%" height="15" fill="rgb(213,57,13)" fg:x="68" fg:w="211"/><text x="5.7295%" y="671.50">&lt;tests::HoldingKeyInVessel..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (12 samples, 0.97%)</title><rect x="21.5149%" y="645" width="0.9670%" height="15" fill="rgb(222,116,39)" fg:x="267" fg:w="12"/><text x="21.7649%" y="655.50"></text></g><g><title>plugins_core::build::Build::save (9 samples, 0.73%)</title><rect x="21.7566%" y="629" width="0.7252%" height="15" fill="rgb(245,107,2)" fg:x="270" fg:w="9"/><text x="22.0066%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="22.4013%" y="613" width="0.0806%" height="15" fill="rgb(238,1,10)" fg:x="278" fg:w="1"/><text x="22.6513%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="22.4013%" y="597" width="0.0806%" height="15" fill="rgb(249,4,48)" fg:x="278" fg:w="1"/><text x="22.6513%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="22.4013%" y="581" width="0.0806%" height="15" fill="rgb(223,151,18)" fg:x="278" fg:w="1"/><text x="22.6513%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.4819%" y="661" width="0.0806%" height="15" fill="rgb(227,65,43)" fg:x="279" fg:w="1"/><text x="22.7319%" y="671.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.08%)</title><rect x="22.5624%" y="661" width="0.0806%" height="15" fill="rgb(218,40,45)" fg:x="280" fg:w="1"/><text x="22.8124%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="22.6430%" y="661" width="0.0806%" height="15" fill="rgb(252,121,31)" fg:x="281" fg:w="1"/><text x="22.8930%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="22.6430%" y="645" width="0.0806%" height="15" fill="rgb(219,158,43)" fg:x="281" fg:w="1"/><text x="22.8930%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="22.7236%" y="645" width="0.0806%" height="15" fill="rgb(231,162,42)" fg:x="282" fg:w="1"/><text x="22.9736%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.7236%" y="629" width="0.0806%" height="15" fill="rgb(217,179,25)" fg:x="282" fg:w="1"/><text x="22.9736%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="22.8042%" y="645" width="0.0806%" height="15" fill="rgb(206,212,31)" fg:x="283" fg:w="1"/><text x="23.0542%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="22.8042%" y="629" width="0.0806%" height="15" fill="rgb(235,144,12)" fg:x="283" fg:w="1"/><text x="23.0542%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="22.8042%" y="613" width="0.0806%" height="15" fill="rgb(213,51,10)" fg:x="283" fg:w="1"/><text x="23.0542%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="22.8042%" y="597" width="0.0806%" height="15" fill="rgb(231,145,14)" fg:x="283" fg:w="1"/><text x="23.0542%" y="607.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="22.8042%" y="581" width="0.0806%" height="15" fill="rgb(235,15,28)" fg:x="283" fg:w="1"/><text x="23.0542%" y="591.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="22.8042%" y="565" width="0.0806%" height="15" fill="rgb(237,206,10)" fg:x="283" fg:w="1"/><text x="23.0542%" y="575.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="22.8042%" y="549" width="0.0806%" height="15" fill="rgb(236,227,27)" fg:x="283" fg:w="1"/><text x="23.0542%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="22.8042%" y="533" width="0.0806%" height="15" fill="rgb(246,83,35)" fg:x="283" fg:w="1"/><text x="23.0542%" y="543.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="22.8042%" y="517" width="0.0806%" height="15" fill="rgb(220,136,24)" fg:x="283" fg:w="1"/><text x="23.0542%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="22.8042%" y="501" width="0.0806%" height="15" fill="rgb(217,3,25)" fg:x="283" fg:w="1"/><text x="23.0542%" y="511.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="22.8042%" y="485" width="0.0806%" height="15" fill="rgb(239,24,14)" fg:x="283" fg:w="1"/><text x="23.0542%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="22.8848%" y="613" width="0.1612%" height="15" fill="rgb(244,16,53)" fg:x="284" fg:w="2"/><text x="23.1348%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="22.8848%" y="597" width="0.1612%" height="15" fill="rgb(208,175,44)" fg:x="284" fg:w="2"/><text x="23.1348%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="22.9654%" y="581" width="0.0806%" height="15" fill="rgb(252,18,48)" fg:x="285" fg:w="1"/><text x="23.2154%" y="591.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="22.9654%" y="565" width="0.0806%" height="15" fill="rgb(234,199,32)" fg:x="285" fg:w="1"/><text x="23.2154%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="23.0459%" y="581" width="0.0806%" height="15" fill="rgb(225,77,54)" fg:x="286" fg:w="1"/><text x="23.2959%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="23.0459%" y="565" width="0.0806%" height="15" fill="rgb(225,42,25)" fg:x="286" fg:w="1"/><text x="23.2959%" y="575.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="23.0459%" y="549" width="0.0806%" height="15" fill="rgb(242,227,46)" fg:x="286" fg:w="1"/><text x="23.2959%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="23.2071%" y="533" width="0.0806%" height="15" fill="rgb(246,197,35)" fg:x="288" fg:w="1"/><text x="23.4571%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="23.2071%" y="517" width="0.0806%" height="15" fill="rgb(215,159,26)" fg:x="288" fg:w="1"/><text x="23.4571%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="23.2071%" y="501" width="0.0806%" height="15" fill="rgb(212,194,50)" fg:x="288" fg:w="1"/><text x="23.4571%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="23.2071%" y="485" width="0.0806%" height="15" fill="rgb(246,132,1)" fg:x="288" fg:w="1"/><text x="23.4571%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="23.2071%" y="469" width="0.0806%" height="15" fill="rgb(217,71,7)" fg:x="288" fg:w="1"/><text x="23.4571%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="23.2071%" y="453" width="0.0806%" height="15" fill="rgb(252,59,32)" fg:x="288" fg:w="1"/><text x="23.4571%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="23.2071%" y="437" width="0.0806%" height="15" fill="rgb(253,204,25)" fg:x="288" fg:w="1"/><text x="23.4571%" y="447.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="23.2071%" y="549" width="0.1612%" height="15" fill="rgb(232,21,16)" fg:x="288" fg:w="2"/><text x="23.4571%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="23.2877%" y="533" width="0.0806%" height="15" fill="rgb(248,90,29)" fg:x="289" fg:w="1"/><text x="23.5377%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="23.3683%" y="533" width="0.2417%" height="15" fill="rgb(249,223,7)" fg:x="290" fg:w="3"/><text x="23.6183%" y="543.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="23.3683%" y="517" width="0.2417%" height="15" fill="rgb(231,119,42)" fg:x="290" fg:w="3"/><text x="23.6183%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="23.4488%" y="501" width="0.1612%" height="15" fill="rgb(215,41,35)" fg:x="291" fg:w="2"/><text x="23.6988%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="23.5294%" y="485" width="0.0806%" height="15" fill="rgb(220,44,45)" fg:x="292" fg:w="1"/><text x="23.7794%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="23.6100%" y="469" width="0.0806%" height="15" fill="rgb(253,197,36)" fg:x="293" fg:w="1"/><text x="23.8600%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="23.6100%" y="453" width="0.0806%" height="15" fill="rgb(245,225,54)" fg:x="293" fg:w="1"/><text x="23.8600%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="23.6100%" y="517" width="0.1612%" height="15" fill="rgb(239,94,37)" fg:x="293" fg:w="2"/><text x="23.8600%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="23.6100%" y="501" width="0.1612%" height="15" fill="rgb(242,217,10)" fg:x="293" fg:w="2"/><text x="23.8600%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="23.6100%" y="485" width="0.1612%" height="15" fill="rgb(250,193,7)" fg:x="293" fg:w="2"/><text x="23.8600%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="23.6906%" y="469" width="0.0806%" height="15" fill="rgb(230,104,19)" fg:x="294" fg:w="1"/><text x="23.9406%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="23.6906%" y="453" width="0.0806%" height="15" fill="rgb(230,181,4)" fg:x="294" fg:w="1"/><text x="23.9406%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="23.8517%" y="469" width="0.0806%" height="15" fill="rgb(216,219,49)" fg:x="296" fg:w="1"/><text x="24.1017%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="23.7712%" y="517" width="0.2417%" height="15" fill="rgb(254,144,0)" fg:x="295" fg:w="3"/><text x="24.0212%" y="527.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="23.7712%" y="501" width="0.2417%" height="15" fill="rgb(205,209,38)" fg:x="295" fg:w="3"/><text x="24.0212%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="23.7712%" y="485" width="0.2417%" height="15" fill="rgb(240,21,42)" fg:x="295" fg:w="3"/><text x="24.0212%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="23.9323%" y="469" width="0.0806%" height="15" fill="rgb(241,132,3)" fg:x="297" fg:w="1"/><text x="24.1823%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="24.0935%" y="501" width="0.1612%" height="15" fill="rgb(225,14,2)" fg:x="299" fg:w="2"/><text x="24.3435%" y="511.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="24.0935%" y="485" width="0.1612%" height="15" fill="rgb(210,141,35)" fg:x="299" fg:w="2"/><text x="24.3435%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="24.0935%" y="469" width="0.1612%" height="15" fill="rgb(251,14,44)" fg:x="299" fg:w="2"/><text x="24.3435%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="24.0935%" y="453" width="0.1612%" height="15" fill="rgb(247,48,18)" fg:x="299" fg:w="2"/><text x="24.3435%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="24.1741%" y="437" width="0.0806%" height="15" fill="rgb(225,0,40)" fg:x="300" fg:w="1"/><text x="24.4241%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="24.1741%" y="421" width="0.0806%" height="15" fill="rgb(221,31,33)" fg:x="300" fg:w="1"/><text x="24.4241%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="24.1741%" y="405" width="0.0806%" height="15" fill="rgb(237,42,40)" fg:x="300" fg:w="1"/><text x="24.4241%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="24.2546%" y="485" width="0.3223%" height="15" fill="rgb(233,51,29)" fg:x="301" fg:w="4"/><text x="24.5046%" y="495.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="24.2546%" y="469" width="0.3223%" height="15" fill="rgb(226,58,20)" fg:x="301" fg:w="4"/><text x="24.5046%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="24.3352%" y="453" width="0.2417%" height="15" fill="rgb(208,98,7)" fg:x="302" fg:w="3"/><text x="24.5852%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="24.4964%" y="437" width="0.0806%" height="15" fill="rgb(228,143,44)" fg:x="304" fg:w="1"/><text x="24.7464%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="24.5770%" y="485" width="0.0806%" height="15" fill="rgb(246,55,38)" fg:x="305" fg:w="1"/><text x="24.8270%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="24.5770%" y="469" width="0.0806%" height="15" fill="rgb(247,87,16)" fg:x="305" fg:w="1"/><text x="24.8270%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="24.5770%" y="453" width="0.0806%" height="15" fill="rgb(234,129,42)" fg:x="305" fg:w="1"/><text x="24.8270%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="24.2546%" y="501" width="0.4835%" height="15" fill="rgb(220,82,16)" fg:x="301" fg:w="6"/><text x="24.5046%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="24.6575%" y="485" width="0.0806%" height="15" fill="rgb(211,88,4)" fg:x="306" fg:w="1"/><text x="24.9075%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.81%)</title><rect x="24.0129%" y="517" width="0.8058%" height="15" fill="rgb(248,151,21)" fg:x="298" fg:w="10"/><text x="24.2629%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="24.7381%" y="501" width="0.0806%" height="15" fill="rgb(238,163,6)" fg:x="307" fg:w="1"/><text x="24.9881%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="24.7381%" y="485" width="0.0806%" height="15" fill="rgb(209,183,11)" fg:x="307" fg:w="1"/><text x="24.9881%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="24.7381%" y="469" width="0.0806%" height="15" fill="rgb(219,37,20)" fg:x="307" fg:w="1"/><text x="24.9881%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="24.8187%" y="485" width="0.0806%" height="15" fill="rgb(210,158,4)" fg:x="308" fg:w="1"/><text x="25.0687%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (17 samples, 1.37%)</title><rect x="23.6100%" y="533" width="1.3699%" height="15" fill="rgb(221,167,53)" fg:x="293" fg:w="17"/><text x="23.8600%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="24.8187%" y="517" width="0.1612%" height="15" fill="rgb(237,151,45)" fg:x="308" fg:w="2"/><text x="25.0687%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="24.8187%" y="501" width="0.1612%" height="15" fill="rgb(231,39,3)" fg:x="308" fg:w="2"/><text x="25.0687%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="24.8993%" y="485" width="0.0806%" height="15" fill="rgb(212,167,28)" fg:x="309" fg:w="1"/><text x="25.1493%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (24 samples, 1.93%)</title><rect x="23.3683%" y="549" width="1.9339%" height="15" fill="rgb(232,178,8)" fg:x="290" fg:w="24"/><text x="23.6183%" y="559.50">s..</text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="24.9799%" y="533" width="0.3223%" height="15" fill="rgb(225,151,20)" fg:x="310" fg:w="4"/><text x="25.2299%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.32%)</title><rect x="24.9799%" y="517" width="0.3223%" height="15" fill="rgb(238,3,37)" fg:x="310" fg:w="4"/><text x="25.2299%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="25.1410%" y="501" width="0.1612%" height="15" fill="rgb(251,147,42)" fg:x="312" fg:w="2"/><text x="25.3910%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="25.2216%" y="485" width="0.0806%" height="15" fill="rgb(208,173,10)" fg:x="313" fg:w="1"/><text x="25.4716%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="25.2216%" y="469" width="0.0806%" height="15" fill="rgb(246,225,4)" fg:x="313" fg:w="1"/><text x="25.4716%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="25.2216%" y="453" width="0.0806%" height="15" fill="rgb(248,102,6)" fg:x="313" fg:w="1"/><text x="25.4716%" y="463.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (27 samples, 2.18%)</title><rect x="23.2071%" y="565" width="2.1757%" height="15" fill="rgb(232,6,21)" fg:x="288" fg:w="27"/><text x="23.4571%" y="575.50">&lt;..</text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="25.3022%" y="549" width="0.0806%" height="15" fill="rgb(221,179,22)" fg:x="314" fg:w="1"/><text x="25.5522%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="25.3022%" y="533" width="0.0806%" height="15" fill="rgb(252,50,20)" fg:x="314" fg:w="1"/><text x="25.5522%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.3022%" y="517" width="0.0806%" height="15" fill="rgb(222,56,38)" fg:x="314" fg:w="1"/><text x="25.5522%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="25.3022%" y="501" width="0.0806%" height="15" fill="rgb(206,193,29)" fg:x="314" fg:w="1"/><text x="25.5522%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="25.3022%" y="485" width="0.0806%" height="15" fill="rgb(239,192,45)" fg:x="314" fg:w="1"/><text x="25.5522%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.3022%" y="469" width="0.0806%" height="15" fill="rgb(254,18,36)" fg:x="314" fg:w="1"/><text x="25.5522%" y="479.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="25.5439%" y="517" width="0.2417%" height="15" fill="rgb(221,127,11)" fg:x="317" fg:w="3"/><text x="25.7939%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="25.7857%" y="517" width="0.1612%" height="15" fill="rgb(234,146,35)" fg:x="320" fg:w="2"/><text x="26.0357%" y="527.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="25.7857%" y="501" width="0.1612%" height="15" fill="rgb(254,201,37)" fg:x="320" fg:w="2"/><text x="26.0357%" y="511.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="25.9468%" y="485" width="0.1612%" height="15" fill="rgb(211,202,23)" fg:x="322" fg:w="2"/><text x="26.1968%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="26.1080%" y="485" width="0.0806%" height="15" fill="rgb(237,91,2)" fg:x="324" fg:w="1"/><text x="26.3580%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (11 samples, 0.89%)</title><rect x="25.3828%" y="565" width="0.8864%" height="15" fill="rgb(226,228,36)" fg:x="315" fg:w="11"/><text x="25.6328%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (11 samples, 0.89%)</title><rect x="25.3828%" y="549" width="0.8864%" height="15" fill="rgb(213,63,50)" fg:x="315" fg:w="11"/><text x="25.6328%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (11 samples, 0.89%)</title><rect x="25.3828%" y="533" width="0.8864%" height="15" fill="rgb(235,194,19)" fg:x="315" fg:w="11"/><text x="25.6328%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="25.9468%" y="517" width="0.3223%" height="15" fill="rgb(207,204,18)" fg:x="322" fg:w="4"/><text x="26.1968%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="25.9468%" y="501" width="0.3223%" height="15" fill="rgb(248,8,7)" fg:x="322" fg:w="4"/><text x="26.1968%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="26.1886%" y="485" width="0.0806%" height="15" fill="rgb(223,145,47)" fg:x="325" fg:w="1"/><text x="26.4386%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.1886%" y="469" width="0.0806%" height="15" fill="rgb(228,84,11)" fg:x="325" fg:w="1"/><text x="26.4386%" y="479.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="26.3497%" y="501" width="0.2417%" height="15" fill="rgb(218,76,45)" fg:x="327" fg:w="3"/><text x="26.5997%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.7526%" y="485" width="0.0806%" height="15" fill="rgb(223,80,15)" fg:x="332" fg:w="1"/><text x="27.0026%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="26.8332%" y="485" width="0.1612%" height="15" fill="rgb(219,218,33)" fg:x="333" fg:w="2"/><text x="27.0832%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.9138%" y="469" width="0.0806%" height="15" fill="rgb(208,51,11)" fg:x="334" fg:w="1"/><text x="27.1638%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="26.9944%" y="469" width="0.1612%" height="15" fill="rgb(229,165,39)" fg:x="335" fg:w="2"/><text x="27.2444%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.0749%" y="453" width="0.0806%" height="15" fill="rgb(241,100,24)" fg:x="336" fg:w="1"/><text x="27.3249%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.3973%" y="453" width="0.0806%" height="15" fill="rgb(228,14,23)" fg:x="340" fg:w="1"/><text x="27.6473%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="27.4778%" y="453" width="0.1612%" height="15" fill="rgb(247,116,52)" fg:x="341" fg:w="2"/><text x="27.7278%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.5584%" y="437" width="0.0806%" height="15" fill="rgb(216,149,33)" fg:x="342" fg:w="1"/><text x="27.8084%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="27.6390%" y="453" width="0.1612%" height="15" fill="rgb(238,142,29)" fg:x="343" fg:w="2"/><text x="27.8890%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="27.6390%" y="437" width="0.1612%" height="15" fill="rgb(224,83,40)" fg:x="343" fg:w="2"/><text x="27.8890%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="27.6390%" y="421" width="0.1612%" height="15" fill="rgb(234,165,11)" fg:x="343" fg:w="2"/><text x="27.8890%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.7196%" y="405" width="0.0806%" height="15" fill="rgb(215,96,23)" fg:x="344" fg:w="1"/><text x="27.9696%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (20 samples, 1.61%)</title><rect x="26.2691%" y="533" width="1.6116%" height="15" fill="rgb(233,179,26)" fg:x="326" fg:w="20"/><text x="26.5191%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (20 samples, 1.61%)</title><rect x="26.2691%" y="517" width="1.6116%" height="15" fill="rgb(225,129,33)" fg:x="326" fg:w="20"/><text x="26.5191%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (16 samples, 1.29%)</title><rect x="26.5915%" y="501" width="1.2893%" height="15" fill="rgb(237,49,13)" fg:x="330" fg:w="16"/><text x="26.8415%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (11 samples, 0.89%)</title><rect x="26.9944%" y="485" width="0.8864%" height="15" fill="rgb(211,3,31)" fg:x="335" fg:w="11"/><text x="27.2444%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.73%)</title><rect x="27.1555%" y="469" width="0.7252%" height="15" fill="rgb(216,152,19)" fg:x="337" fg:w="9"/><text x="27.4055%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="27.8002%" y="453" width="0.0806%" height="15" fill="rgb(251,121,35)" fg:x="345" fg:w="1"/><text x="28.0502%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="27.9613%" y="469" width="0.0806%" height="15" fill="rgb(210,217,47)" fg:x="347" fg:w="1"/><text x="28.2113%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="27.9613%" y="453" width="0.0806%" height="15" fill="rgb(244,116,22)" fg:x="347" fg:w="1"/><text x="28.2113%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="27.8807%" y="517" width="0.2417%" height="15" fill="rgb(228,17,21)" fg:x="346" fg:w="3"/><text x="28.1307%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="27.8807%" y="501" width="0.2417%" height="15" fill="rgb(240,149,34)" fg:x="346" fg:w="3"/><text x="28.1307%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="27.9613%" y="485" width="0.1612%" height="15" fill="rgb(208,125,47)" fg:x="347" fg:w="2"/><text x="28.2113%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="28.0419%" y="469" width="0.0806%" height="15" fill="rgb(249,186,39)" fg:x="348" fg:w="1"/><text x="28.2919%" y="479.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (24 samples, 1.93%)</title><rect x="26.2691%" y="549" width="1.9339%" height="15" fill="rgb(240,220,33)" fg:x="326" fg:w="24"/><text x="26.5191%" y="559.50">&lt;..</text></g><g><title>treediff::diff::diff (4 samples, 0.32%)</title><rect x="27.8807%" y="533" width="0.3223%" height="15" fill="rgb(243,110,23)" fg:x="346" fg:w="4"/><text x="28.1307%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="28.1225%" y="517" width="0.0806%" height="15" fill="rgb(219,163,46)" fg:x="349" fg:w="1"/><text x="28.3725%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="28.5254%" y="517" width="0.0806%" height="15" fill="rgb(216,126,30)" fg:x="354" fg:w="1"/><text x="28.7754%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="28.6060%" y="517" width="0.0806%" height="15" fill="rgb(208,139,11)" fg:x="355" fg:w="1"/><text x="28.8560%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="28.6060%" y="501" width="0.0806%" height="15" fill="rgb(213,118,36)" fg:x="355" fg:w="1"/><text x="28.8560%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="28.8477%" y="485" width="0.0806%" height="15" fill="rgb(226,43,17)" fg:x="358" fg:w="1"/><text x="29.0977%" y="495.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="29.0089%" y="437" width="0.1612%" height="15" fill="rgb(254,217,4)" fg:x="360" fg:w="2"/><text x="29.2589%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="29.0089%" y="469" width="0.2417%" height="15" fill="rgb(210,134,47)" fg:x="360" fg:w="3"/><text x="29.2589%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="29.0089%" y="453" width="0.2417%" height="15" fill="rgb(237,24,49)" fg:x="360" fg:w="3"/><text x="29.2589%" y="463.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="29.1700%" y="437" width="0.0806%" height="15" fill="rgb(251,39,46)" fg:x="362" fg:w="1"/><text x="29.4200%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.2506%" y="389" width="0.0806%" height="15" fill="rgb(251,220,3)" fg:x="363" fg:w="1"/><text x="29.5006%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.2506%" y="373" width="0.0806%" height="15" fill="rgb(228,105,12)" fg:x="363" fg:w="1"/><text x="29.5006%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="29.2506%" y="405" width="0.2417%" height="15" fill="rgb(215,196,1)" fg:x="363" fg:w="3"/><text x="29.5006%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="29.3312%" y="389" width="0.1612%" height="15" fill="rgb(214,33,39)" fg:x="364" fg:w="2"/><text x="29.5812%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="29.3312%" y="373" width="0.1612%" height="15" fill="rgb(220,19,52)" fg:x="364" fg:w="2"/><text x="29.5812%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.4118%" y="357" width="0.0806%" height="15" fill="rgb(221,78,38)" fg:x="365" fg:w="1"/><text x="29.6618%" y="367.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="29.2506%" y="469" width="0.3223%" height="15" fill="rgb(253,30,16)" fg:x="363" fg:w="4"/><text x="29.5006%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="29.2506%" y="453" width="0.3223%" height="15" fill="rgb(242,65,0)" fg:x="363" fg:w="4"/><text x="29.5006%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="29.2506%" y="437" width="0.3223%" height="15" fill="rgb(235,201,12)" fg:x="363" fg:w="4"/><text x="29.5006%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="29.2506%" y="421" width="0.3223%" height="15" fill="rgb(233,161,9)" fg:x="363" fg:w="4"/><text x="29.5006%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.4923%" y="405" width="0.0806%" height="15" fill="rgb(241,207,41)" fg:x="366" fg:w="1"/><text x="29.7423%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="29.5729%" y="453" width="0.0806%" height="15" fill="rgb(212,69,46)" fg:x="367" fg:w="1"/><text x="29.8229%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="29.7341%" y="437" width="0.2417%" height="15" fill="rgb(239,69,45)" fg:x="369" fg:w="3"/><text x="29.9841%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="29.7341%" y="421" width="0.2417%" height="15" fill="rgb(242,117,48)" fg:x="369" fg:w="3"/><text x="29.9841%" y="431.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="29.7341%" y="405" width="0.2417%" height="15" fill="rgb(228,41,36)" fg:x="369" fg:w="3"/><text x="29.9841%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="30.0564%" y="421" width="0.0806%" height="15" fill="rgb(212,3,32)" fg:x="373" fg:w="1"/><text x="30.3064%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.64%)</title><rect x="29.6535%" y="453" width="0.6446%" height="15" fill="rgb(233,41,49)" fg:x="368" fg:w="8"/><text x="29.9035%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="29.9758%" y="437" width="0.3223%" height="15" fill="rgb(252,170,49)" fg:x="372" fg:w="4"/><text x="30.2258%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="30.1370%" y="421" width="0.1612%" height="15" fill="rgb(229,53,26)" fg:x="374" fg:w="2"/><text x="30.3870%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="30.1370%" y="405" width="0.1612%" height="15" fill="rgb(217,157,12)" fg:x="374" fg:w="2"/><text x="30.3870%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="30.1370%" y="389" width="0.1612%" height="15" fill="rgb(227,17,9)" fg:x="374" fg:w="2"/><text x="30.3870%" y="399.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="30.1370%" y="373" width="0.1612%" height="15" fill="rgb(218,84,12)" fg:x="374" fg:w="2"/><text x="30.3870%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (18 samples, 1.45%)</title><rect x="28.9283%" y="485" width="1.4504%" height="15" fill="rgb(212,79,24)" fg:x="359" fg:w="18"/><text x="29.1783%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (10 samples, 0.81%)</title><rect x="29.5729%" y="469" width="0.8058%" height="15" fill="rgb(217,222,37)" fg:x="367" fg:w="10"/><text x="29.8229%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_map (1 samples, 0.08%)</title><rect x="30.2981%" y="453" width="0.0806%" height="15" fill="rgb(246,208,8)" fg:x="376" fg:w="1"/><text x="30.5481%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (21 samples, 1.69%)</title><rect x="28.8477%" y="501" width="1.6922%" height="15" fill="rgb(244,133,10)" fg:x="358" fg:w="21"/><text x="29.0977%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="30.3787%" y="485" width="0.1612%" height="15" fill="rgb(209,219,41)" fg:x="377" fg:w="2"/><text x="30.6287%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.4593%" y="469" width="0.0806%" height="15" fill="rgb(253,175,45)" fg:x="378" fg:w="1"/><text x="30.7093%" y="479.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (31 samples, 2.50%)</title><rect x="28.2031%" y="549" width="2.4980%" height="15" fill="rgb(235,100,37)" fg:x="350" fg:w="31"/><text x="28.4531%" y="559.50">ke..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (31 samples, 2.50%)</title><rect x="28.2031%" y="533" width="2.4980%" height="15" fill="rgb(225,87,19)" fg:x="350" fg:w="31"/><text x="28.4531%" y="543.50">&lt;s..</text></g><g><title>serde::ser::Serializer::collect_map (25 samples, 2.01%)</title><rect x="28.6865%" y="517" width="2.0145%" height="15" fill="rgb(217,152,17)" fg:x="356" fg:w="25"/><text x="28.9365%" y="527.50">s..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="30.5399%" y="501" width="0.1612%" height="15" fill="rgb(235,72,13)" fg:x="379" fg:w="2"/><text x="30.7899%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="30.5399%" y="485" width="0.1612%" height="15" fill="rgb(233,140,18)" fg:x="379" fg:w="2"/><text x="30.7899%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="30.5399%" y="469" width="0.1612%" height="15" fill="rgb(207,212,28)" fg:x="379" fg:w="2"/><text x="30.7899%" y="479.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="30.7010%" y="469" width="0.0806%" height="15" fill="rgb(220,130,25)" fg:x="381" fg:w="1"/><text x="30.9510%" y="479.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="30.8622%" y="437" width="0.0806%" height="15" fill="rgb(205,55,34)" fg:x="383" fg:w="1"/><text x="31.1122%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="30.9428%" y="405" width="0.0806%" height="15" fill="rgb(237,54,35)" fg:x="384" fg:w="1"/><text x="31.1928%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="31.0234%" y="389" width="0.2417%" height="15" fill="rgb(208,67,23)" fg:x="385" fg:w="3"/><text x="31.2734%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="31.1039%" y="373" width="0.1612%" height="15" fill="rgb(206,207,50)" fg:x="386" fg:w="2"/><text x="31.3539%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="31.1845%" y="357" width="0.0806%" height="15" fill="rgb(213,211,42)" fg:x="387" fg:w="1"/><text x="31.4345%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="30.9428%" y="421" width="0.4029%" height="15" fill="rgb(252,197,50)" fg:x="384" fg:w="5"/><text x="31.1928%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="31.0234%" y="405" width="0.3223%" height="15" fill="rgb(251,211,41)" fg:x="385" fg:w="4"/><text x="31.2734%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.2651%" y="389" width="0.0806%" height="15" fill="rgb(229,211,5)" fg:x="388" fg:w="1"/><text x="31.5151%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.2651%" y="373" width="0.0806%" height="15" fill="rgb(239,36,31)" fg:x="388" fg:w="1"/><text x="31.5151%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.64%)</title><rect x="30.7816%" y="453" width="0.6446%" height="15" fill="rgb(248,67,31)" fg:x="382" fg:w="8"/><text x="31.0316%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="30.9428%" y="437" width="0.4835%" height="15" fill="rgb(249,55,44)" fg:x="384" fg:w="6"/><text x="31.1928%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="31.3457%" y="421" width="0.0806%" height="15" fill="rgb(216,82,12)" fg:x="389" fg:w="1"/><text x="31.5957%" y="431.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="31.5068%" y="437" width="0.0806%" height="15" fill="rgb(242,174,1)" fg:x="391" fg:w="1"/><text x="31.7568%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (4 samples, 0.32%)</title><rect x="31.4263%" y="453" width="0.3223%" height="15" fill="rgb(208,120,29)" fg:x="390" fg:w="4"/><text x="31.6763%" y="463.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="31.5874%" y="437" width="0.1612%" height="15" fill="rgb(221,105,43)" fg:x="392" fg:w="2"/><text x="31.8374%" y="447.50"></text></g><g><title>engine::session::state::State::close (111 samples, 8.94%)</title><rect x="22.8848%" y="645" width="8.9444%" height="15" fill="rgb(234,124,22)" fg:x="284" fg:w="111"/><text x="23.1348%" y="655.50">engine::sessi..</text></g><g><title>engine::session::state::State::flush_entities (111 samples, 8.94%)</title><rect x="22.8848%" y="629" width="8.9444%" height="15" fill="rgb(212,23,30)" fg:x="284" fg:w="111"/><text x="23.1348%" y="639.50">engine::sessi..</text></g><g><title>core::iter::adapters::try_process (109 samples, 8.78%)</title><rect x="23.0459%" y="613" width="8.7832%" height="15" fill="rgb(219,122,53)" fg:x="286" fg:w="109"/><text x="23.2959%" y="623.50">core::iter::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (109 samples, 8.78%)</title><rect x="23.0459%" y="597" width="8.7832%" height="15" fill="rgb(248,84,24)" fg:x="286" fg:w="109"/><text x="23.2959%" y="607.50">&lt;alloc::vec:..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (108 samples, 8.70%)</title><rect x="23.1265%" y="581" width="8.7027%" height="15" fill="rgb(245,115,18)" fg:x="287" fg:w="108"/><text x="23.3765%" y="591.50">engine::sess..</text></g><g><title>kernel::model::any_entity_changes (69 samples, 5.56%)</title><rect x="26.2691%" y="565" width="5.5600%" height="15" fill="rgb(227,176,51)" fg:x="326" fg:w="69"/><text x="26.5191%" y="575.50">kernel:..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (14 samples, 1.13%)</title><rect x="30.7010%" y="549" width="1.1281%" height="15" fill="rgb(229,63,42)" fg:x="381" fg:w="14"/><text x="30.9510%" y="559.50"></text></g><g><title>serde_json::de::from_trait (14 samples, 1.13%)</title><rect x="30.7010%" y="533" width="1.1281%" height="15" fill="rgb(247,202,24)" fg:x="381" fg:w="14"/><text x="30.9510%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (14 samples, 1.13%)</title><rect x="30.7010%" y="517" width="1.1281%" height="15" fill="rgb(244,173,20)" fg:x="381" fg:w="14"/><text x="30.9510%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (14 samples, 1.13%)</title><rect x="30.7010%" y="501" width="1.1281%" height="15" fill="rgb(242,81,47)" fg:x="381" fg:w="14"/><text x="30.9510%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (14 samples, 1.13%)</title><rect x="30.7010%" y="485" width="1.1281%" height="15" fill="rgb(231,185,54)" fg:x="381" fg:w="14"/><text x="30.9510%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (13 samples, 1.05%)</title><rect x="30.7816%" y="469" width="1.0475%" height="15" fill="rgb(243,55,32)" fg:x="382" fg:w="13"/><text x="31.0316%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.7486%" y="453" width="0.0806%" height="15" fill="rgb(208,167,19)" fg:x="394" fg:w="1"/><text x="31.9986%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.7486%" y="437" width="0.0806%" height="15" fill="rgb(231,72,35)" fg:x="394" fg:w="1"/><text x="31.9986%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.7486%" y="421" width="0.0806%" height="15" fill="rgb(250,173,51)" fg:x="394" fg:w="1"/><text x="31.9986%" y="431.50"></text></g><g><title>kernel::plugins::SessionPlugins::stop (1 samples, 0.08%)</title><rect x="31.8292%" y="645" width="0.0806%" height="15" fill="rgb(209,5,22)" fg:x="395" fg:w="1"/><text x="32.0792%" y="655.50"></text></g><g><title>engine::session::Session::close (115 samples, 9.27%)</title><rect x="22.7236%" y="661" width="9.2667%" height="15" fill="rgb(250,174,19)" fg:x="282" fg:w="115"/><text x="22.9736%" y="671.50">engine::sessi..</text></g><g><title>std::time::Instant::elapsed (1 samples, 0.08%)</title><rect x="31.9098%" y="645" width="0.0806%" height="15" fill="rgb(217,3,49)" fg:x="396" fg:w="1"/><text x="32.1598%" y="655.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.08%)</title><rect x="31.9098%" y="629" width="0.0806%" height="15" fill="rgb(218,225,5)" fg:x="396" fg:w="1"/><text x="32.1598%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.08%)</title><rect x="31.9098%" y="613" width="0.0806%" height="15" fill="rgb(236,89,11)" fg:x="396" fg:w="1"/><text x="32.1598%" y="623.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="31.9098%" y="597" width="0.0806%" height="15" fill="rgb(206,33,28)" fg:x="396" fg:w="1"/><text x="32.1598%" y="607.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="31.9098%" y="581" width="0.0806%" height="15" fill="rgb(241,56,42)" fg:x="396" fg:w="1"/><text x="32.1598%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="31.9903%" y="517" width="0.0806%" height="15" fill="rgb(222,44,11)" fg:x="397" fg:w="1"/><text x="32.2403%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="31.9903%" y="501" width="0.0806%" height="15" fill="rgb(234,111,20)" fg:x="397" fg:w="1"/><text x="32.2403%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="31.9903%" y="485" width="0.0806%" height="15" fill="rgb(237,77,6)" fg:x="397" fg:w="1"/><text x="32.2403%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="31.9903%" y="469" width="0.0806%" height="15" fill="rgb(235,111,23)" fg:x="397" fg:w="1"/><text x="32.2403%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="31.9903%" y="453" width="0.0806%" height="15" fill="rgb(251,135,29)" fg:x="397" fg:w="1"/><text x="32.2403%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="31.9903%" y="437" width="0.0806%" height="15" fill="rgb(217,57,1)" fg:x="397" fg:w="1"/><text x="32.2403%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="31.9903%" y="421" width="0.0806%" height="15" fill="rgb(249,119,31)" fg:x="397" fg:w="1"/><text x="32.2403%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="31.9903%" y="405" width="0.0806%" height="15" fill="rgb(233,164,33)" fg:x="397" fg:w="1"/><text x="32.2403%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="31.9903%" y="389" width="0.0806%" height="15" fill="rgb(250,217,43)" fg:x="397" fg:w="1"/><text x="32.2403%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="31.9903%" y="373" width="0.0806%" height="15" fill="rgb(232,154,50)" fg:x="397" fg:w="1"/><text x="32.2403%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="31.9903%" y="357" width="0.0806%" height="15" fill="rgb(227,190,8)" fg:x="397" fg:w="1"/><text x="32.2403%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="31.9903%" y="341" width="0.0806%" height="15" fill="rgb(209,217,32)" fg:x="397" fg:w="1"/><text x="32.2403%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="31.9903%" y="325" width="0.0806%" height="15" fill="rgb(243,203,50)" fg:x="397" fg:w="1"/><text x="32.2403%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.9903%" y="309" width="0.0806%" height="15" fill="rgb(232,152,27)" fg:x="397" fg:w="1"/><text x="32.2403%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="31.9903%" y="533" width="0.2417%" height="15" fill="rgb(240,34,29)" fg:x="397" fg:w="3"/><text x="32.2403%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="32.0709%" y="517" width="0.1612%" height="15" fill="rgb(215,185,52)" fg:x="398" fg:w="2"/><text x="32.3209%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="32.0709%" y="501" width="0.1612%" height="15" fill="rgb(240,89,49)" fg:x="398" fg:w="2"/><text x="32.3209%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="32.0709%" y="485" width="0.1612%" height="15" fill="rgb(225,12,52)" fg:x="398" fg:w="2"/><text x="32.3209%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="32.0709%" y="469" width="0.1612%" height="15" fill="rgb(239,128,45)" fg:x="398" fg:w="2"/><text x="32.3209%" y="479.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="32.2321%" y="485" width="0.0806%" height="15" fill="rgb(211,78,47)" fg:x="400" fg:w="1"/><text x="32.4821%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="32.3127%" y="421" width="0.0806%" height="15" fill="rgb(232,31,21)" fg:x="401" fg:w="1"/><text x="32.5627%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="32.3127%" y="405" width="0.0806%" height="15" fill="rgb(222,168,14)" fg:x="401" fg:w="1"/><text x="32.5627%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.3127%" y="389" width="0.0806%" height="15" fill="rgb(209,128,24)" fg:x="401" fg:w="1"/><text x="32.5627%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="32.3127%" y="469" width="0.1612%" height="15" fill="rgb(249,35,13)" fg:x="401" fg:w="2"/><text x="32.5627%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="32.3127%" y="453" width="0.1612%" height="15" fill="rgb(218,7,2)" fg:x="401" fg:w="2"/><text x="32.5627%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="32.3127%" y="437" width="0.1612%" height="15" fill="rgb(238,107,27)" fg:x="401" fg:w="2"/><text x="32.5627%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.3932%" y="421" width="0.0806%" height="15" fill="rgb(217,88,38)" fg:x="402" fg:w="1"/><text x="32.6432%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="32.4738%" y="469" width="0.0806%" height="15" fill="rgb(230,207,0)" fg:x="403" fg:w="1"/><text x="32.7238%" y="479.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="32.4738%" y="453" width="0.0806%" height="15" fill="rgb(249,64,54)" fg:x="403" fg:w="1"/><text x="32.7238%" y="463.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="32.4738%" y="437" width="0.0806%" height="15" fill="rgb(231,7,11)" fg:x="403" fg:w="1"/><text x="32.7238%" y="447.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="32.4738%" y="421" width="0.0806%" height="15" fill="rgb(205,149,21)" fg:x="403" fg:w="1"/><text x="32.7238%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="32.4738%" y="405" width="0.0806%" height="15" fill="rgb(215,126,34)" fg:x="403" fg:w="1"/><text x="32.7238%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="32.4738%" y="389" width="0.0806%" height="15" fill="rgb(241,132,45)" fg:x="403" fg:w="1"/><text x="32.7238%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.4738%" y="373" width="0.0806%" height="15" fill="rgb(252,69,32)" fg:x="403" fg:w="1"/><text x="32.7238%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="32.5544%" y="373" width="0.0806%" height="15" fill="rgb(232,204,19)" fg:x="404" fg:w="1"/><text x="32.8044%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="32.5544%" y="357" width="0.0806%" height="15" fill="rgb(249,15,47)" fg:x="404" fg:w="1"/><text x="32.8044%" y="367.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="32.5544%" y="341" width="0.0806%" height="15" fill="rgb(209,227,23)" fg:x="404" fg:w="1"/><text x="32.8044%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="32.5544%" y="325" width="0.0806%" height="15" fill="rgb(248,92,24)" fg:x="404" fg:w="1"/><text x="32.8044%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.6350%" y="341" width="0.0806%" height="15" fill="rgb(247,59,2)" fg:x="405" fg:w="1"/><text x="32.8850%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="32.6350%" y="373" width="0.1612%" height="15" fill="rgb(221,30,5)" fg:x="405" fg:w="2"/><text x="32.8850%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="32.6350%" y="357" width="0.1612%" height="15" fill="rgb(208,108,53)" fg:x="405" fg:w="2"/><text x="32.8850%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="32.7156%" y="341" width="0.0806%" height="15" fill="rgb(211,183,26)" fg:x="406" fg:w="1"/><text x="32.9656%" y="351.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="32.7961%" y="325" width="0.1612%" height="15" fill="rgb(232,132,4)" fg:x="407" fg:w="2"/><text x="33.0461%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="32.7961%" y="309" width="0.1612%" height="15" fill="rgb(253,128,37)" fg:x="407" fg:w="2"/><text x="33.0461%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="32.8767%" y="293" width="0.0806%" height="15" fill="rgb(221,58,24)" fg:x="408" fg:w="1"/><text x="33.1267%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="32.8767%" y="277" width="0.0806%" height="15" fill="rgb(230,54,45)" fg:x="408" fg:w="1"/><text x="33.1267%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="32.8767%" y="261" width="0.0806%" height="15" fill="rgb(254,21,18)" fg:x="408" fg:w="1"/><text x="33.1267%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="32.8767%" y="245" width="0.0806%" height="15" fill="rgb(221,108,0)" fg:x="408" fg:w="1"/><text x="33.1267%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="32.8767%" y="229" width="0.0806%" height="15" fill="rgb(206,95,1)" fg:x="408" fg:w="1"/><text x="33.1267%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::size_hint (1 samples, 0.08%)</title><rect x="32.8767%" y="213" width="0.0806%" height="15" fill="rgb(237,52,5)" fg:x="408" fg:w="1"/><text x="33.1267%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (6 samples, 0.48%)</title><rect x="32.5544%" y="421" width="0.4835%" height="15" fill="rgb(218,150,34)" fg:x="404" fg:w="6"/><text x="32.8044%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="32.5544%" y="405" width="0.4835%" height="15" fill="rgb(235,194,28)" fg:x="404" fg:w="6"/><text x="32.8044%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (6 samples, 0.48%)</title><rect x="32.5544%" y="389" width="0.4835%" height="15" fill="rgb(245,92,18)" fg:x="404" fg:w="6"/><text x="32.8044%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="32.7961%" y="373" width="0.2417%" height="15" fill="rgb(253,203,53)" fg:x="407" fg:w="3"/><text x="33.0461%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="32.7961%" y="357" width="0.2417%" height="15" fill="rgb(249,185,47)" fg:x="407" fg:w="3"/><text x="33.0461%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (3 samples, 0.24%)</title><rect x="32.7961%" y="341" width="0.2417%" height="15" fill="rgb(252,194,52)" fg:x="407" fg:w="3"/><text x="33.0461%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="32.9573%" y="325" width="0.0806%" height="15" fill="rgb(210,53,36)" fg:x="409" fg:w="1"/><text x="33.2073%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="32.9573%" y="309" width="0.0806%" height="15" fill="rgb(237,37,25)" fg:x="409" fg:w="1"/><text x="33.2073%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="32.9573%" y="293" width="0.0806%" height="15" fill="rgb(242,116,27)" fg:x="409" fg:w="1"/><text x="33.2073%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="32.9573%" y="277" width="0.0806%" height="15" fill="rgb(213,185,26)" fg:x="409" fg:w="1"/><text x="33.2073%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="32.9573%" y="261" width="0.0806%" height="15" fill="rgb(225,204,8)" fg:x="409" fg:w="1"/><text x="33.2073%" y="271.50"></text></g><g><title>kernel::model::entity::Entity::from_value (7 samples, 0.56%)</title><rect x="32.5544%" y="469" width="0.5641%" height="15" fill="rgb(254,111,37)" fg:x="404" fg:w="7"/><text x="32.8044%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (7 samples, 0.56%)</title><rect x="32.5544%" y="453" width="0.5641%" height="15" fill="rgb(242,35,9)" fg:x="404" fg:w="7"/><text x="32.8044%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.56%)</title><rect x="32.5544%" y="437" width="0.5641%" height="15" fill="rgb(232,138,49)" fg:x="404" fg:w="7"/><text x="32.8044%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="33.0379%" y="421" width="0.0806%" height="15" fill="rgb(247,56,4)" fg:x="410" fg:w="1"/><text x="33.2879%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="33.0379%" y="405" width="0.0806%" height="15" fill="rgb(226,179,17)" fg:x="410" fg:w="1"/><text x="33.2879%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="33.0379%" y="389" width="0.0806%" height="15" fill="rgb(216,163,45)" fg:x="410" fg:w="1"/><text x="33.2879%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.0379%" y="373" width="0.0806%" height="15" fill="rgb(211,157,3)" fg:x="410" fg:w="1"/><text x="33.2879%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="33.1185%" y="341" width="0.1612%" height="15" fill="rgb(234,44,20)" fg:x="411" fg:w="2"/><text x="33.3685%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="33.1990%" y="325" width="0.0806%" height="15" fill="rgb(254,138,23)" fg:x="412" fg:w="1"/><text x="33.4490%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="33.1990%" y="309" width="0.0806%" height="15" fill="rgb(206,119,39)" fg:x="412" fg:w="1"/><text x="33.4490%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="33.1990%" y="293" width="0.0806%" height="15" fill="rgb(231,105,52)" fg:x="412" fg:w="1"/><text x="33.4490%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.1990%" y="277" width="0.0806%" height="15" fill="rgb(250,20,5)" fg:x="412" fg:w="1"/><text x="33.4490%" y="287.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_location (17 samples, 1.37%)</title><rect x="31.9903%" y="549" width="1.3699%" height="15" fill="rgb(215,198,30)" fg:x="397" fg:w="17"/><text x="32.2403%" y="559.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (14 samples, 1.13%)</title><rect x="32.2321%" y="533" width="1.1281%" height="15" fill="rgb(246,142,8)" fg:x="400" fg:w="14"/><text x="32.4821%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (14 samples, 1.13%)</title><rect x="32.2321%" y="517" width="1.1281%" height="15" fill="rgb(243,26,38)" fg:x="400" fg:w="14"/><text x="32.4821%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (14 samples, 1.13%)</title><rect x="32.2321%" y="501" width="1.1281%" height="15" fill="rgb(205,133,28)" fg:x="400" fg:w="14"/><text x="32.4821%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (13 samples, 1.05%)</title><rect x="32.3127%" y="485" width="1.0475%" height="15" fill="rgb(212,34,0)" fg:x="401" fg:w="13"/><text x="32.5627%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="33.1185%" y="469" width="0.2417%" height="15" fill="rgb(251,226,22)" fg:x="411" fg:w="3"/><text x="33.3685%" y="479.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="33.1185%" y="453" width="0.2417%" height="15" fill="rgb(252,119,9)" fg:x="411" fg:w="3"/><text x="33.3685%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="33.1185%" y="437" width="0.2417%" height="15" fill="rgb(213,150,50)" fg:x="411" fg:w="3"/><text x="33.3685%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="33.1185%" y="421" width="0.2417%" height="15" fill="rgb(212,24,39)" fg:x="411" fg:w="3"/><text x="33.3685%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="33.1185%" y="405" width="0.2417%" height="15" fill="rgb(213,46,39)" fg:x="411" fg:w="3"/><text x="33.3685%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="33.1185%" y="389" width="0.2417%" height="15" fill="rgb(239,106,12)" fg:x="411" fg:w="3"/><text x="33.3685%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="33.1185%" y="373" width="0.2417%" height="15" fill="rgb(249,229,21)" fg:x="411" fg:w="3"/><text x="33.3685%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="33.1185%" y="357" width="0.2417%" height="15" fill="rgb(212,158,3)" fg:x="411" fg:w="3"/><text x="33.3685%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="33.2796%" y="341" width="0.0806%" height="15" fill="rgb(253,26,48)" fg:x="413" fg:w="1"/><text x="33.5296%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.2796%" y="325" width="0.0806%" height="15" fill="rgb(238,178,20)" fg:x="413" fg:w="1"/><text x="33.5296%" y="335.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (18 samples, 1.45%)</title><rect x="31.9903%" y="565" width="1.4504%" height="15" fill="rgb(208,86,15)" fg:x="397" fg:w="18"/><text x="32.2403%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="33.3602%" y="549" width="0.0806%" height="15" fill="rgb(239,42,53)" fg:x="414" fg:w="1"/><text x="33.6102%" y="559.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="33.3602%" y="533" width="0.0806%" height="15" fill="rgb(245,226,8)" fg:x="414" fg:w="1"/><text x="33.6102%" y="543.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="33.3602%" y="517" width="0.0806%" height="15" fill="rgb(216,176,32)" fg:x="414" fg:w="1"/><text x="33.6102%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.3602%" y="501" width="0.0806%" height="15" fill="rgb(231,186,21)" fg:x="414" fg:w="1"/><text x="33.6102%" y="511.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="33.6825%" y="421" width="0.0806%" height="15" fill="rgb(205,95,49)" fg:x="418" fg:w="1"/><text x="33.9325%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="33.7631%" y="389" width="0.0806%" height="15" fill="rgb(217,145,8)" fg:x="419" fg:w="1"/><text x="34.0131%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="33.8437%" y="389" width="0.0806%" height="15" fill="rgb(239,144,48)" fg:x="420" fg:w="1"/><text x="34.0937%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.8437%" y="373" width="0.0806%" height="15" fill="rgb(214,189,23)" fg:x="420" fg:w="1"/><text x="34.0937%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.9243%" y="357" width="0.0806%" height="15" fill="rgb(229,157,17)" fg:x="421" fg:w="1"/><text x="34.1743%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="34.0048%" y="357" width="0.1612%" height="15" fill="rgb(230,5,48)" fg:x="422" fg:w="2"/><text x="34.2548%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="34.0854%" y="341" width="0.0806%" height="15" fill="rgb(224,156,48)" fg:x="423" fg:w="1"/><text x="34.3354%" y="351.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="34.0854%" y="325" width="0.0806%" height="15" fill="rgb(223,14,29)" fg:x="423" fg:w="1"/><text x="34.3354%" y="335.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="34.2466%" y="325" width="0.2417%" height="15" fill="rgb(229,96,36)" fg:x="425" fg:w="3"/><text x="34.4966%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (7 samples, 0.56%)</title><rect x="34.1660%" y="357" width="0.5641%" height="15" fill="rgb(231,102,53)" fg:x="424" fg:w="7"/><text x="34.4160%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.56%)</title><rect x="34.1660%" y="341" width="0.5641%" height="15" fill="rgb(210,77,38)" fg:x="424" fg:w="7"/><text x="34.4160%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="34.4883%" y="325" width="0.2417%" height="15" fill="rgb(235,131,6)" fg:x="428" fg:w="3"/><text x="34.7383%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="34.5689%" y="309" width="0.1612%" height="15" fill="rgb(252,55,38)" fg:x="429" fg:w="2"/><text x="34.8189%" y="319.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="34.5689%" y="293" width="0.1612%" height="15" fill="rgb(246,38,14)" fg:x="429" fg:w="2"/><text x="34.8189%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="34.8106%" y="341" width="0.0806%" height="15" fill="rgb(242,27,5)" fg:x="432" fg:w="1"/><text x="35.0606%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.8106%" y="325" width="0.0806%" height="15" fill="rgb(228,65,35)" fg:x="432" fg:w="1"/><text x="35.0606%" y="335.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="34.8912%" y="309" width="0.1612%" height="15" fill="rgb(245,93,11)" fg:x="433" fg:w="2"/><text x="35.1412%" y="319.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (18 samples, 1.45%)</title><rect x="33.7631%" y="405" width="1.4504%" height="15" fill="rgb(213,1,31)" fg:x="419" fg:w="18"/><text x="34.0131%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (16 samples, 1.29%)</title><rect x="33.9243%" y="389" width="1.2893%" height="15" fill="rgb(237,205,14)" fg:x="421" fg:w="16"/><text x="34.1743%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (16 samples, 1.29%)</title><rect x="33.9243%" y="373" width="1.2893%" height="15" fill="rgb(232,118,45)" fg:x="421" fg:w="16"/><text x="34.1743%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (6 samples, 0.48%)</title><rect x="34.7301%" y="357" width="0.4835%" height="15" fill="rgb(218,5,6)" fg:x="431" fg:w="6"/><text x="34.9801%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (4 samples, 0.32%)</title><rect x="34.8912%" y="341" width="0.3223%" height="15" fill="rgb(251,87,51)" fg:x="433" fg:w="4"/><text x="35.1412%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="34.8912%" y="325" width="0.3223%" height="15" fill="rgb(207,225,20)" fg:x="433" fg:w="4"/><text x="35.1412%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="35.0524%" y="309" width="0.1612%" height="15" fill="rgb(222,78,54)" fg:x="435" fg:w="2"/><text x="35.3024%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="35.0524%" y="293" width="0.1612%" height="15" fill="rgb(232,85,16)" fg:x="435" fg:w="2"/><text x="35.3024%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.1330%" y="277" width="0.0806%" height="15" fill="rgb(244,25,33)" fg:x="436" fg:w="1"/><text x="35.3830%" y="287.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (19 samples, 1.53%)</title><rect x="33.7631%" y="421" width="1.5310%" height="15" fill="rgb(233,24,36)" fg:x="419" fg:w="19"/><text x="34.0131%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="35.2135%" y="405" width="0.0806%" height="15" fill="rgb(253,49,54)" fg:x="437" fg:w="1"/><text x="35.4635%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::ObservedEntity&gt; (1 samples, 0.08%)</title><rect x="35.2135%" y="389" width="0.0806%" height="15" fill="rgb(245,12,22)" fg:x="437" fg:w="1"/><text x="35.4635%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.2135%" y="373" width="0.0806%" height="15" fill="rgb(253,141,28)" fg:x="437" fg:w="1"/><text x="35.4635%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="35.4553%" y="341" width="0.2417%" height="15" fill="rgb(225,207,27)" fg:x="440" fg:w="3"/><text x="35.7053%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.6164%" y="325" width="0.0806%" height="15" fill="rgb(220,84,2)" fg:x="442" fg:w="1"/><text x="35.8664%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="35.4553%" y="373" width="0.3223%" height="15" fill="rgb(224,37,37)" fg:x="440" fg:w="4"/><text x="35.7053%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="35.4553%" y="357" width="0.3223%" height="15" fill="rgb(220,143,18)" fg:x="440" fg:w="4"/><text x="35.7053%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="35.6970%" y="341" width="0.0806%" height="15" fill="rgb(210,88,33)" fg:x="443" fg:w="1"/><text x="35.9470%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="35.6970%" y="325" width="0.0806%" height="15" fill="rgb(219,87,51)" fg:x="443" fg:w="1"/><text x="35.9470%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="35.6970%" y="309" width="0.0806%" height="15" fill="rgb(211,7,35)" fg:x="443" fg:w="1"/><text x="35.9470%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="35.6970%" y="293" width="0.0806%" height="15" fill="rgb(232,77,2)" fg:x="443" fg:w="1"/><text x="35.9470%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="35.6970%" y="277" width="0.0806%" height="15" fill="rgb(249,94,25)" fg:x="443" fg:w="1"/><text x="35.9470%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="35.6970%" y="261" width="0.0806%" height="15" fill="rgb(215,112,2)" fg:x="443" fg:w="1"/><text x="35.9470%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="35.6970%" y="245" width="0.0806%" height="15" fill="rgb(226,115,48)" fg:x="443" fg:w="1"/><text x="35.9470%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="35.6970%" y="229" width="0.0806%" height="15" fill="rgb(249,196,10)" fg:x="443" fg:w="1"/><text x="35.9470%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="35.6970%" y="213" width="0.0806%" height="15" fill="rgb(237,109,14)" fg:x="443" fg:w="1"/><text x="35.9470%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="35.6970%" y="197" width="0.0806%" height="15" fill="rgb(217,103,53)" fg:x="443" fg:w="1"/><text x="35.9470%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="35.6970%" y="181" width="0.0806%" height="15" fill="rgb(244,137,9)" fg:x="443" fg:w="1"/><text x="35.9470%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.6970%" y="165" width="0.0806%" height="15" fill="rgb(227,201,3)" fg:x="443" fg:w="1"/><text x="35.9470%" y="175.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.40%)</title><rect x="35.4553%" y="389" width="0.4029%" height="15" fill="rgb(243,94,6)" fg:x="440" fg:w="5"/><text x="35.7053%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="35.7776%" y="373" width="0.0806%" height="15" fill="rgb(235,118,5)" fg:x="444" fg:w="1"/><text x="36.0276%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="35.7776%" y="357" width="0.0806%" height="15" fill="rgb(247,10,30)" fg:x="444" fg:w="1"/><text x="36.0276%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="35.7776%" y="341" width="0.0806%" height="15" fill="rgb(205,26,28)" fg:x="444" fg:w="1"/><text x="36.0276%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="35.7776%" y="325" width="0.0806%" height="15" fill="rgb(206,99,35)" fg:x="444" fg:w="1"/><text x="36.0276%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="35.7776%" y="309" width="0.0806%" height="15" fill="rgb(238,130,40)" fg:x="444" fg:w="1"/><text x="36.0276%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="35.7776%" y="293" width="0.0806%" height="15" fill="rgb(224,126,31)" fg:x="444" fg:w="1"/><text x="36.0276%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.7776%" y="277" width="0.0806%" height="15" fill="rgb(254,105,17)" fg:x="444" fg:w="1"/><text x="36.0276%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="35.8582%" y="373" width="0.0806%" height="15" fill="rgb(216,87,36)" fg:x="445" fg:w="1"/><text x="36.1082%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="35.9388%" y="341" width="0.0806%" height="15" fill="rgb(240,21,12)" fg:x="446" fg:w="1"/><text x="36.1888%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="35.9388%" y="325" width="0.0806%" height="15" fill="rgb(245,192,34)" fg:x="446" fg:w="1"/><text x="36.1888%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="35.9388%" y="309" width="0.0806%" height="15" fill="rgb(226,100,49)" fg:x="446" fg:w="1"/><text x="36.1888%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="35.9388%" y="293" width="0.0806%" height="15" fill="rgb(245,188,27)" fg:x="446" fg:w="1"/><text x="36.1888%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="35.9388%" y="277" width="0.0806%" height="15" fill="rgb(212,170,8)" fg:x="446" fg:w="1"/><text x="36.1888%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="35.9388%" y="261" width="0.0806%" height="15" fill="rgb(217,113,29)" fg:x="446" fg:w="1"/><text x="36.1888%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="35.9388%" y="245" width="0.0806%" height="15" fill="rgb(237,30,3)" fg:x="446" fg:w="1"/><text x="36.1888%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="35.9388%" y="229" width="0.0806%" height="15" fill="rgb(227,19,28)" fg:x="446" fg:w="1"/><text x="36.1888%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="35.9388%" y="213" width="0.0806%" height="15" fill="rgb(239,172,45)" fg:x="446" fg:w="1"/><text x="36.1888%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="35.9388%" y="197" width="0.0806%" height="15" fill="rgb(254,55,39)" fg:x="446" fg:w="1"/><text x="36.1888%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="35.9388%" y="181" width="0.0806%" height="15" fill="rgb(249,208,12)" fg:x="446" fg:w="1"/><text x="36.1888%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="35.9388%" y="165" width="0.0806%" height="15" fill="rgb(240,52,13)" fg:x="446" fg:w="1"/><text x="36.1888%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="35.9388%" y="149" width="0.0806%" height="15" fill="rgb(252,149,13)" fg:x="446" fg:w="1"/><text x="36.1888%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="35.9388%" y="133" width="0.0806%" height="15" fill="rgb(232,81,48)" fg:x="446" fg:w="1"/><text x="36.1888%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.9388%" y="117" width="0.0806%" height="15" fill="rgb(222,144,2)" fg:x="446" fg:w="1"/><text x="36.1888%" y="127.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (4 samples, 0.32%)</title><rect x="35.8582%" y="389" width="0.3223%" height="15" fill="rgb(216,81,32)" fg:x="445" fg:w="4"/><text x="36.1082%" y="399.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="35.9388%" y="373" width="0.2417%" height="15" fill="rgb(244,78,51)" fg:x="446" fg:w="3"/><text x="36.1888%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="35.9388%" y="357" width="0.2417%" height="15" fill="rgb(217,66,21)" fg:x="446" fg:w="3"/><text x="36.1888%" y="367.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="36.0193%" y="341" width="0.1612%" height="15" fill="rgb(247,101,42)" fg:x="447" fg:w="2"/><text x="36.2693%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="36.0193%" y="325" width="0.1612%" height="15" fill="rgb(227,81,39)" fg:x="447" fg:w="2"/><text x="36.2693%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="36.0193%" y="309" width="0.1612%" height="15" fill="rgb(220,223,44)" fg:x="447" fg:w="2"/><text x="36.2693%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="36.0193%" y="293" width="0.1612%" height="15" fill="rgb(205,218,2)" fg:x="447" fg:w="2"/><text x="36.2693%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="36.0193%" y="277" width="0.1612%" height="15" fill="rgb(212,207,28)" fg:x="447" fg:w="2"/><text x="36.2693%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="36.0193%" y="261" width="0.1612%" height="15" fill="rgb(224,12,41)" fg:x="447" fg:w="2"/><text x="36.2693%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.1805%" y="373" width="0.0806%" height="15" fill="rgb(216,118,12)" fg:x="449" fg:w="1"/><text x="36.4305%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="36.2611%" y="341" width="0.0806%" height="15" fill="rgb(252,97,46)" fg:x="450" fg:w="1"/><text x="36.5111%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="36.2611%" y="325" width="0.0806%" height="15" fill="rgb(244,206,19)" fg:x="450" fg:w="1"/><text x="36.5111%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="36.2611%" y="309" width="0.0806%" height="15" fill="rgb(231,84,31)" fg:x="450" fg:w="1"/><text x="36.5111%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="36.2611%" y="293" width="0.0806%" height="15" fill="rgb(244,133,0)" fg:x="450" fg:w="1"/><text x="36.5111%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="36.2611%" y="277" width="0.0806%" height="15" fill="rgb(223,15,50)" fg:x="450" fg:w="1"/><text x="36.5111%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="36.2611%" y="261" width="0.0806%" height="15" fill="rgb(250,118,49)" fg:x="450" fg:w="1"/><text x="36.5111%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="36.2611%" y="245" width="0.0806%" height="15" fill="rgb(248,25,38)" fg:x="450" fg:w="1"/><text x="36.5111%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="36.2611%" y="229" width="0.0806%" height="15" fill="rgb(215,70,14)" fg:x="450" fg:w="1"/><text x="36.5111%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="36.2611%" y="213" width="0.0806%" height="15" fill="rgb(215,28,15)" fg:x="450" fg:w="1"/><text x="36.5111%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="36.2611%" y="197" width="0.0806%" height="15" fill="rgb(243,6,28)" fg:x="450" fg:w="1"/><text x="36.5111%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="36.2611%" y="181" width="0.0806%" height="15" fill="rgb(222,130,1)" fg:x="450" fg:w="1"/><text x="36.5111%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="36.2611%" y="165" width="0.0806%" height="15" fill="rgb(236,166,44)" fg:x="450" fg:w="1"/><text x="36.5111%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="36.2611%" y="149" width="0.0806%" height="15" fill="rgb(221,108,14)" fg:x="450" fg:w="1"/><text x="36.5111%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="36.2611%" y="133" width="0.0806%" height="15" fill="rgb(252,3,45)" fg:x="450" fg:w="1"/><text x="36.5111%" y="143.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="36.2611%" y="117" width="0.0806%" height="15" fill="rgb(237,68,30)" fg:x="450" fg:w="1"/><text x="36.5111%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="36.2611%" y="101" width="0.0806%" height="15" fill="rgb(211,79,22)" fg:x="450" fg:w="1"/><text x="36.5111%" y="111.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (6 samples, 0.48%)</title><rect x="36.1805%" y="389" width="0.4835%" height="15" fill="rgb(252,185,21)" fg:x="449" fg:w="6"/><text x="36.4305%" y="399.50"></text></g><g><title>kernel::model::props::load_props (5 samples, 0.40%)</title><rect x="36.2611%" y="373" width="0.4029%" height="15" fill="rgb(225,189,26)" fg:x="450" fg:w="5"/><text x="36.5111%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.40%)</title><rect x="36.2611%" y="357" width="0.4029%" height="15" fill="rgb(241,30,40)" fg:x="450" fg:w="5"/><text x="36.5111%" y="367.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (4 samples, 0.32%)</title><rect x="36.3417%" y="341" width="0.3223%" height="15" fill="rgb(235,215,44)" fg:x="451" fg:w="4"/><text x="36.5917%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="36.3417%" y="325" width="0.3223%" height="15" fill="rgb(205,8,29)" fg:x="451" fg:w="4"/><text x="36.5917%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (4 samples, 0.32%)</title><rect x="36.3417%" y="309" width="0.3223%" height="15" fill="rgb(241,137,42)" fg:x="451" fg:w="4"/><text x="36.5917%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="36.3417%" y="293" width="0.3223%" height="15" fill="rgb(237,155,2)" fg:x="451" fg:w="4"/><text x="36.5917%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (4 samples, 0.32%)</title><rect x="36.3417%" y="277" width="0.3223%" height="15" fill="rgb(245,29,42)" fg:x="451" fg:w="4"/><text x="36.5917%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="36.3417%" y="261" width="0.3223%" height="15" fill="rgb(234,101,35)" fg:x="451" fg:w="4"/><text x="36.5917%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="36.5028%" y="245" width="0.1612%" height="15" fill="rgb(228,64,37)" fg:x="453" fg:w="2"/><text x="36.7528%" y="255.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="36.5028%" y="229" width="0.1612%" height="15" fill="rgb(217,214,36)" fg:x="453" fg:w="2"/><text x="36.7528%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="36.6640%" y="357" width="0.0806%" height="15" fill="rgb(243,70,3)" fg:x="455" fg:w="1"/><text x="36.9140%" y="367.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="36.7446%" y="357" width="0.0806%" height="15" fill="rgb(253,158,52)" fg:x="456" fg:w="1"/><text x="36.9946%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="36.7446%" y="341" width="0.0806%" height="15" fill="rgb(234,111,54)" fg:x="456" fg:w="1"/><text x="36.9946%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="36.8251%" y="325" width="0.0806%" height="15" fill="rgb(217,70,32)" fg:x="457" fg:w="1"/><text x="37.0751%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="36.8251%" y="309" width="0.0806%" height="15" fill="rgb(234,18,33)" fg:x="457" fg:w="1"/><text x="37.0751%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="36.9057%" y="325" width="0.0806%" height="15" fill="rgb(234,12,49)" fg:x="458" fg:w="1"/><text x="37.1557%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="37.2280%" y="261" width="0.0806%" height="15" fill="rgb(236,10,21)" fg:x="462" fg:w="1"/><text x="37.4780%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="37.3086%" y="261" width="0.0806%" height="15" fill="rgb(248,182,45)" fg:x="463" fg:w="1"/><text x="37.5586%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="37.3086%" y="245" width="0.0806%" height="15" fill="rgb(217,95,36)" fg:x="463" fg:w="1"/><text x="37.5586%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="37.3086%" y="229" width="0.0806%" height="15" fill="rgb(212,110,31)" fg:x="463" fg:w="1"/><text x="37.5586%" y="239.50"></text></g><g><title>kernel::model::EntityPtr::gid (10 samples, 0.81%)</title><rect x="36.6640%" y="389" width="0.8058%" height="15" fill="rgb(206,32,53)" fg:x="455" fg:w="10"/><text x="36.9140%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (10 samples, 0.81%)</title><rect x="36.6640%" y="373" width="0.8058%" height="15" fill="rgb(246,141,37)" fg:x="455" fg:w="10"/><text x="36.9140%" y="383.50"></text></g><g><title>kernel::model::props::load_props (8 samples, 0.64%)</title><rect x="36.8251%" y="357" width="0.6446%" height="15" fill="rgb(219,16,7)" fg:x="457" fg:w="8"/><text x="37.0751%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (8 samples, 0.64%)</title><rect x="36.8251%" y="341" width="0.6446%" height="15" fill="rgb(230,205,45)" fg:x="457" fg:w="8"/><text x="37.0751%" y="351.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (6 samples, 0.48%)</title><rect x="36.9863%" y="325" width="0.4835%" height="15" fill="rgb(231,43,49)" fg:x="459" fg:w="6"/><text x="37.2363%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="36.9863%" y="309" width="0.4835%" height="15" fill="rgb(212,106,34)" fg:x="459" fg:w="6"/><text x="37.2363%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (4 samples, 0.32%)</title><rect x="37.1475%" y="293" width="0.3223%" height="15" fill="rgb(206,83,17)" fg:x="461" fg:w="4"/><text x="37.3975%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="37.1475%" y="277" width="0.3223%" height="15" fill="rgb(244,154,49)" fg:x="461" fg:w="4"/><text x="37.3975%" y="287.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="37.3892%" y="261" width="0.0806%" height="15" fill="rgb(244,149,49)" fg:x="464" fg:w="1"/><text x="37.6392%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="37.3892%" y="245" width="0.0806%" height="15" fill="rgb(227,134,18)" fg:x="464" fg:w="1"/><text x="37.6392%" y="255.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="37.3892%" y="229" width="0.0806%" height="15" fill="rgb(237,116,36)" fg:x="464" fg:w="1"/><text x="37.6392%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="37.4698%" y="309" width="0.1612%" height="15" fill="rgb(205,129,40)" fg:x="465" fg:w="2"/><text x="37.7198%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="37.4698%" y="293" width="0.1612%" height="15" fill="rgb(236,178,4)" fg:x="465" fg:w="2"/><text x="37.7198%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="37.4698%" y="277" width="0.1612%" height="15" fill="rgb(251,76,53)" fg:x="465" fg:w="2"/><text x="37.7198%" y="287.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (2 samples, 0.16%)</title><rect x="37.4698%" y="261" width="0.1612%" height="15" fill="rgb(242,92,40)" fg:x="465" fg:w="2"/><text x="37.7198%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="37.4698%" y="245" width="0.1612%" height="15" fill="rgb(209,45,30)" fg:x="465" fg:w="2"/><text x="37.7198%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="37.5504%" y="229" width="0.0806%" height="15" fill="rgb(218,157,36)" fg:x="466" fg:w="1"/><text x="37.8004%" y="239.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="37.5504%" y="213" width="0.0806%" height="15" fill="rgb(222,186,16)" fg:x="466" fg:w="1"/><text x="37.8004%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="37.6309%" y="277" width="0.1612%" height="15" fill="rgb(254,72,35)" fg:x="467" fg:w="2"/><text x="37.8809%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="37.6309%" y="261" width="0.1612%" height="15" fill="rgb(224,25,35)" fg:x="467" fg:w="2"/><text x="37.8809%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="37.6309%" y="245" width="0.1612%" height="15" fill="rgb(206,135,52)" fg:x="467" fg:w="2"/><text x="37.8809%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="37.7921%" y="261" width="0.0806%" height="15" fill="rgb(229,174,47)" fg:x="469" fg:w="1"/><text x="38.0421%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.7921%" y="245" width="0.0806%" height="15" fill="rgb(242,184,21)" fg:x="469" fg:w="1"/><text x="38.0421%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="37.8727%" y="261" width="0.0806%" height="15" fill="rgb(213,22,45)" fg:x="470" fg:w="1"/><text x="38.1227%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="37.8727%" y="245" width="0.0806%" height="15" fill="rgb(237,81,54)" fg:x="470" fg:w="1"/><text x="38.1227%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.8727%" y="229" width="0.0806%" height="15" fill="rgb(248,177,18)" fg:x="470" fg:w="1"/><text x="38.1227%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.40%)</title><rect x="37.6309%" y="309" width="0.4029%" height="15" fill="rgb(254,31,16)" fg:x="467" fg:w="5"/><text x="37.8809%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (5 samples, 0.40%)</title><rect x="37.6309%" y="293" width="0.4029%" height="15" fill="rgb(235,20,31)" fg:x="467" fg:w="5"/><text x="37.8809%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="37.7921%" y="277" width="0.2417%" height="15" fill="rgb(240,56,43)" fg:x="469" fg:w="3"/><text x="38.0421%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="37.9533%" y="261" width="0.0806%" height="15" fill="rgb(237,197,51)" fg:x="471" fg:w="1"/><text x="38.2033%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.9533%" y="245" width="0.0806%" height="15" fill="rgb(241,162,44)" fg:x="471" fg:w="1"/><text x="38.2033%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="38.1144%" y="293" width="0.0806%" height="15" fill="rgb(224,23,20)" fg:x="473" fg:w="1"/><text x="38.3644%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="38.1144%" y="277" width="0.0806%" height="15" fill="rgb(250,109,34)" fg:x="473" fg:w="1"/><text x="38.3644%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.1950%" y="261" width="0.0806%" height="15" fill="rgb(214,175,50)" fg:x="474" fg:w="1"/><text x="38.4450%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.1950%" y="245" width="0.0806%" height="15" fill="rgb(213,182,5)" fg:x="474" fg:w="1"/><text x="38.4450%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="38.2756%" y="261" width="0.0806%" height="15" fill="rgb(209,199,19)" fg:x="475" fg:w="1"/><text x="38.5256%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="38.2756%" y="245" width="0.0806%" height="15" fill="rgb(236,224,42)" fg:x="475" fg:w="1"/><text x="38.5256%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="38.2756%" y="229" width="0.0806%" height="15" fill="rgb(246,226,29)" fg:x="475" fg:w="1"/><text x="38.5256%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="38.2756%" y="213" width="0.0806%" height="15" fill="rgb(227,223,11)" fg:x="475" fg:w="1"/><text x="38.5256%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.2756%" y="197" width="0.0806%" height="15" fill="rgb(219,7,51)" fg:x="475" fg:w="1"/><text x="38.5256%" y="207.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="38.3562%" y="261" width="0.0806%" height="15" fill="rgb(245,167,10)" fg:x="476" fg:w="1"/><text x="38.6062%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (15 samples, 1.21%)</title><rect x="38.4367%" y="245" width="1.2087%" height="15" fill="rgb(237,224,16)" fg:x="477" fg:w="15"/><text x="38.6867%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (15 samples, 1.21%)</title><rect x="38.4367%" y="229" width="1.2087%" height="15" fill="rgb(226,132,13)" fg:x="477" fg:w="15"/><text x="38.6867%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="39.4843%" y="213" width="0.1612%" height="15" fill="rgb(214,140,3)" fg:x="490" fg:w="2"/><text x="39.7343%" y="223.50"></text></g><g><title>regex_automata::meta::reverse_inner::extract (1 samples, 0.08%)</title><rect x="39.6454%" y="245" width="0.0806%" height="15" fill="rgb(221,177,4)" fg:x="492" fg:w="1"/><text x="39.8954%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="39.7260%" y="245" width="0.0806%" height="15" fill="rgb(238,139,3)" fg:x="493" fg:w="1"/><text x="39.9760%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="39.8872%" y="229" width="0.4029%" height="15" fill="rgb(216,17,39)" fg:x="495" fg:w="5"/><text x="40.1372%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="40.2095%" y="213" width="0.0806%" height="15" fill="rgb(238,120,9)" fg:x="499" fg:w="1"/><text x="40.4595%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="40.2095%" y="197" width="0.0806%" height="15" fill="rgb(244,92,53)" fg:x="499" fg:w="1"/><text x="40.4595%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (7 samples, 0.56%)</title><rect x="39.8066%" y="245" width="0.5641%" height="15" fill="rgb(224,148,33)" fg:x="494" fg:w="7"/><text x="40.0566%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="40.2901%" y="229" width="0.0806%" height="15" fill="rgb(243,6,36)" fg:x="500" fg:w="1"/><text x="40.5401%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="40.3707%" y="245" width="0.1612%" height="15" fill="rgb(230,102,11)" fg:x="501" fg:w="2"/><text x="40.6207%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="40.4512%" y="229" width="0.0806%" height="15" fill="rgb(234,148,36)" fg:x="502" fg:w="1"/><text x="40.7012%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="40.6930%" y="181" width="0.1612%" height="15" fill="rgb(251,153,25)" fg:x="505" fg:w="2"/><text x="40.9430%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="40.8541%" y="181" width="0.0806%" height="15" fill="rgb(215,129,8)" fg:x="507" fg:w="1"/><text x="41.1041%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.8541%" y="165" width="0.0806%" height="15" fill="rgb(224,128,35)" fg:x="507" fg:w="1"/><text x="41.1041%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="40.9347%" y="181" width="0.1612%" height="15" fill="rgb(237,56,52)" fg:x="508" fg:w="2"/><text x="41.1847%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="40.9347%" y="165" width="0.1612%" height="15" fill="rgb(234,213,19)" fg:x="508" fg:w="2"/><text x="41.1847%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="41.0153%" y="149" width="0.0806%" height="15" fill="rgb(252,82,23)" fg:x="509" fg:w="1"/><text x="41.2653%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.0153%" y="133" width="0.0806%" height="15" fill="rgb(254,201,21)" fg:x="509" fg:w="1"/><text x="41.2653%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="41.0153%" y="117" width="0.0806%" height="15" fill="rgb(250,186,11)" fg:x="509" fg:w="1"/><text x="41.2653%" y="127.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="41.0959%" y="149" width="0.1612%" height="15" fill="rgb(211,174,5)" fg:x="510" fg:w="2"/><text x="41.3459%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (61 samples, 4.92%)</title><rect x="41.0959%" y="181" width="4.9154%" height="15" fill="rgb(214,121,10)" fg:x="510" fg:w="61"/><text x="41.3459%" y="191.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (61 samples, 4.92%)</title><rect x="41.0959%" y="165" width="4.9154%" height="15" fill="rgb(241,66,2)" fg:x="510" fg:w="61"/><text x="41.3459%" y="175.50">regex_..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (59 samples, 4.75%)</title><rect x="41.2571%" y="149" width="4.7542%" height="15" fill="rgb(220,167,19)" fg:x="512" fg:w="59"/><text x="41.5071%" y="159.50">alloc:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (75 samples, 6.04%)</title><rect x="40.6124%" y="229" width="6.0435%" height="15" fill="rgb(231,54,50)" fg:x="504" fg:w="75"/><text x="40.8624%" y="239.50">&lt;core::i..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (75 samples, 6.04%)</title><rect x="40.6124%" y="213" width="6.0435%" height="15" fill="rgb(239,217,53)" fg:x="504" fg:w="75"/><text x="40.8624%" y="223.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (75 samples, 6.04%)</title><rect x="40.6124%" y="197" width="6.0435%" height="15" fill="rgb(248,8,0)" fg:x="504" fg:w="75"/><text x="40.8624%" y="207.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (8 samples, 0.64%)</title><rect x="46.0113%" y="181" width="0.6446%" height="15" fill="rgb(229,118,37)" fg:x="571" fg:w="8"/><text x="46.2613%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="46.4948%" y="165" width="0.1612%" height="15" fill="rgb(253,223,43)" fg:x="577" fg:w="2"/><text x="46.7448%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="46.7365%" y="213" width="0.3223%" height="15" fill="rgb(211,77,36)" fg:x="580" fg:w="4"/><text x="46.9865%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="46.8171%" y="197" width="0.2417%" height="15" fill="rgb(219,3,53)" fg:x="581" fg:w="3"/><text x="47.0671%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="46.8171%" y="181" width="0.2417%" height="15" fill="rgb(244,45,42)" fg:x="581" fg:w="3"/><text x="47.0671%" y="191.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="46.8171%" y="165" width="0.2417%" height="15" fill="rgb(225,95,27)" fg:x="581" fg:w="3"/><text x="47.0671%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="47.0588%" y="213" width="0.3223%" height="15" fill="rgb(207,74,8)" fg:x="584" fg:w="4"/><text x="47.3088%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="47.3006%" y="197" width="0.0806%" height="15" fill="rgb(243,63,36)" fg:x="587" fg:w="1"/><text x="47.5506%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (10 samples, 0.81%)</title><rect x="46.6559%" y="229" width="0.8058%" height="15" fill="rgb(211,180,12)" fg:x="579" fg:w="10"/><text x="46.9059%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="47.3811%" y="213" width="0.0806%" height="15" fill="rgb(254,166,49)" fg:x="588" fg:w="1"/><text x="47.6311%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="47.4617%" y="229" width="0.0806%" height="15" fill="rgb(205,19,0)" fg:x="589" fg:w="1"/><text x="47.7117%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (2 samples, 0.16%)</title><rect x="47.5423%" y="229" width="0.1612%" height="15" fill="rgb(224,172,32)" fg:x="590" fg:w="2"/><text x="47.7923%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="47.6229%" y="213" width="0.0806%" height="15" fill="rgb(254,136,30)" fg:x="591" fg:w="1"/><text x="47.8729%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (117 samples, 9.43%)</title><rect x="38.4367%" y="261" width="9.4279%" height="15" fill="rgb(246,19,35)" fg:x="477" fg:w="117"/><text x="38.6867%" y="271.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (91 samples, 7.33%)</title><rect x="40.5318%" y="245" width="7.3328%" height="15" fill="rgb(219,24,36)" fg:x="503" fg:w="91"/><text x="40.7818%" y="255.50">regex_auto..</text></g><g><title>regex_syntax::hir::Hir::dot (2 samples, 0.16%)</title><rect x="47.7035%" y="229" width="0.1612%" height="15" fill="rgb(251,55,1)" fg:x="592" fg:w="2"/><text x="47.9535%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="47.9452%" y="213" width="0.0806%" height="15" fill="rgb(218,117,39)" fg:x="595" fg:w="1"/><text x="48.1952%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="47.9452%" y="197" width="0.0806%" height="15" fill="rgb(248,169,11)" fg:x="595" fg:w="1"/><text x="48.1952%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="47.9452%" y="181" width="0.0806%" height="15" fill="rgb(244,40,44)" fg:x="595" fg:w="1"/><text x="48.1952%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="47.8646%" y="261" width="0.2417%" height="15" fill="rgb(234,62,37)" fg:x="594" fg:w="3"/><text x="48.1146%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="47.9452%" y="245" width="0.1612%" height="15" fill="rgb(207,117,42)" fg:x="595" fg:w="2"/><text x="48.1952%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="47.9452%" y="229" width="0.1612%" height="15" fill="rgb(213,43,2)" fg:x="595" fg:w="2"/><text x="48.1952%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="48.0258%" y="213" width="0.0806%" height="15" fill="rgb(244,202,51)" fg:x="596" fg:w="1"/><text x="48.2758%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.1064%" y="213" width="0.0806%" height="15" fill="rgb(253,174,46)" fg:x="597" fg:w="1"/><text x="48.3564%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="48.1064%" y="229" width="0.1612%" height="15" fill="rgb(251,23,1)" fg:x="597" fg:w="2"/><text x="48.3564%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="48.1869%" y="213" width="0.0806%" height="15" fill="rgb(253,26,1)" fg:x="598" fg:w="1"/><text x="48.4369%" y="223.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (126 samples, 10.15%)</title><rect x="38.1950%" y="277" width="10.1531%" height="15" fill="rgb(216,89,31)" fg:x="474" fg:w="126"/><text x="38.4450%" y="287.50">regex_automata:..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="48.1064%" y="261" width="0.2417%" height="15" fill="rgb(209,109,5)" fg:x="597" fg:w="3"/><text x="48.3564%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="48.1064%" y="245" width="0.2417%" height="15" fill="rgb(229,63,13)" fg:x="597" fg:w="3"/><text x="48.3564%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="48.2675%" y="229" width="0.0806%" height="15" fill="rgb(238,137,54)" fg:x="599" fg:w="1"/><text x="48.5175%" y="239.50"></text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="48.3481%" y="277" width="0.0806%" height="15" fill="rgb(228,1,9)" fg:x="600" fg:w="1"/><text x="48.5981%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserBuilder::nest_limit (1 samples, 0.08%)</title><rect x="48.3481%" y="261" width="0.0806%" height="15" fill="rgb(249,120,48)" fg:x="600" fg:w="1"/><text x="48.5981%" y="271.50"></text></g><g><title>regex::regex::string::Regex::new (130 samples, 10.48%)</title><rect x="38.0338%" y="309" width="10.4754%" height="15" fill="rgb(209,72,36)" fg:x="472" fg:w="130"/><text x="38.2838%" y="319.50">regex::regex::s..</text></g><g><title>regex::builders::Builder::build_one_string (128 samples, 10.31%)</title><rect x="38.1950%" y="293" width="10.3143%" height="15" fill="rgb(247,98,49)" fg:x="474" fg:w="128"/><text x="38.4450%" y="303.50">regex::builders..</text></g><g><title>regex_automata::util::syntax::Config::new (1 samples, 0.08%)</title><rect x="48.4287%" y="277" width="0.0806%" height="15" fill="rgb(233,75,36)" fg:x="601" fg:w="1"/><text x="48.6787%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="48.5093%" y="245" width="0.0806%" height="15" fill="rgb(225,14,24)" fg:x="602" fg:w="1"/><text x="48.7593%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.48%)</title><rect x="48.5898%" y="245" width="0.4835%" height="15" fill="rgb(237,193,20)" fg:x="603" fg:w="6"/><text x="48.8398%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="48.9927%" y="229" width="0.0806%" height="15" fill="rgb(239,122,19)" fg:x="608" fg:w="1"/><text x="49.2427%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.9927%" y="213" width="0.0806%" height="15" fill="rgb(231,220,10)" fg:x="608" fg:w="1"/><text x="49.2427%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="48.9927%" y="197" width="0.0806%" height="15" fill="rgb(220,66,15)" fg:x="608" fg:w="1"/><text x="49.2427%" y="207.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (146 samples, 11.76%)</title><rect x="37.4698%" y="325" width="11.7647%" height="15" fill="rgb(215,171,52)" fg:x="465" fg:w="146"/><text x="37.7198%" y="335.50">indefinite::helpe..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (9 samples, 0.73%)</title><rect x="48.5093%" y="309" width="0.7252%" height="15" fill="rgb(241,169,50)" fg:x="602" fg:w="9"/><text x="48.7593%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (9 samples, 0.73%)</title><rect x="48.5093%" y="293" width="0.7252%" height="15" fill="rgb(236,189,0)" fg:x="602" fg:w="9"/><text x="48.7593%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (9 samples, 0.73%)</title><rect x="48.5093%" y="277" width="0.7252%" height="15" fill="rgb(217,147,20)" fg:x="602" fg:w="9"/><text x="48.7593%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.73%)</title><rect x="48.5093%" y="261" width="0.7252%" height="15" fill="rgb(206,188,39)" fg:x="602" fg:w="9"/><text x="48.7593%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="49.0733%" y="245" width="0.1612%" height="15" fill="rgb(227,118,25)" fg:x="609" fg:w="2"/><text x="49.3233%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="49.1539%" y="229" width="0.0806%" height="15" fill="rgb(248,171,40)" fg:x="610" fg:w="1"/><text x="49.4039%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.1539%" y="213" width="0.0806%" height="15" fill="rgb(251,90,54)" fg:x="610" fg:w="1"/><text x="49.4039%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="49.1539%" y="197" width="0.0806%" height="15" fill="rgb(234,11,46)" fg:x="610" fg:w="1"/><text x="49.4039%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="49.2345%" y="261" width="0.0806%" height="15" fill="rgb(229,134,13)" fg:x="611" fg:w="1"/><text x="49.4845%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="49.2345%" y="245" width="0.0806%" height="15" fill="rgb(223,129,3)" fg:x="611" fg:w="1"/><text x="49.4845%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="49.2345%" y="277" width="0.2417%" height="15" fill="rgb(221,124,13)" fg:x="611" fg:w="3"/><text x="49.4845%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="49.3151%" y="261" width="0.1612%" height="15" fill="rgb(234,3,18)" fg:x="612" fg:w="2"/><text x="49.5651%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="49.3151%" y="245" width="0.1612%" height="15" fill="rgb(249,199,20)" fg:x="612" fg:w="2"/><text x="49.5651%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="49.3151%" y="229" width="0.1612%" height="15" fill="rgb(224,134,6)" fg:x="612" fg:w="2"/><text x="49.5651%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="49.3151%" y="213" width="0.1612%" height="15" fill="rgb(254,83,26)" fg:x="612" fg:w="2"/><text x="49.5651%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="49.4762%" y="261" width="0.1612%" height="15" fill="rgb(217,88,9)" fg:x="614" fg:w="2"/><text x="49.7262%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="49.4762%" y="245" width="0.1612%" height="15" fill="rgb(225,73,2)" fg:x="614" fg:w="2"/><text x="49.7262%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.48%)</title><rect x="49.2345%" y="309" width="0.4835%" height="15" fill="rgb(226,44,39)" fg:x="611" fg:w="6"/><text x="49.4845%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (6 samples, 0.48%)</title><rect x="49.2345%" y="293" width="0.4835%" height="15" fill="rgb(228,53,17)" fg:x="611" fg:w="6"/><text x="49.4845%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="49.4762%" y="277" width="0.2417%" height="15" fill="rgb(212,27,27)" fg:x="614" fg:w="3"/><text x="49.7262%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="49.6374%" y="261" width="0.0806%" height="15" fill="rgb(241,50,6)" fg:x="616" fg:w="1"/><text x="49.8874%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::Cache::new (1 samples, 0.08%)</title><rect x="49.7985%" y="245" width="0.0806%" height="15" fill="rgb(225,28,51)" fg:x="618" fg:w="1"/><text x="50.0485%" y="255.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="50.4432%" y="213" width="0.0806%" height="15" fill="rgb(215,33,16)" fg:x="626" fg:w="1"/><text x="50.6932%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="50.5238%" y="213" width="0.0806%" height="15" fill="rgb(243,40,39)" fg:x="627" fg:w="1"/><text x="50.7738%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.5238%" y="197" width="0.0806%" height="15" fill="rgb(225,11,42)" fg:x="627" fg:w="1"/><text x="50.7738%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="50.5238%" y="181" width="0.0806%" height="15" fill="rgb(241,220,38)" fg:x="627" fg:w="1"/><text x="50.7738%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (15 samples, 1.21%)</title><rect x="49.8791%" y="229" width="1.2087%" height="15" fill="rgb(244,52,35)" fg:x="619" fg:w="15"/><text x="50.1291%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (6 samples, 0.48%)</title><rect x="50.6044%" y="213" width="0.4835%" height="15" fill="rgb(246,42,46)" fg:x="628" fg:w="6"/><text x="50.8544%" y="223.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (18 samples, 1.45%)</title><rect x="49.7180%" y="309" width="1.4504%" height="15" fill="rgb(205,184,13)" fg:x="617" fg:w="18"/><text x="49.9680%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (18 samples, 1.45%)</title><rect x="49.7180%" y="293" width="1.4504%" height="15" fill="rgb(209,48,36)" fg:x="617" fg:w="18"/><text x="49.9680%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (17 samples, 1.37%)</title><rect x="49.7985%" y="277" width="1.3699%" height="15" fill="rgb(244,34,51)" fg:x="618" fg:w="17"/><text x="50.0485%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (17 samples, 1.37%)</title><rect x="49.7985%" y="261" width="1.3699%" height="15" fill="rgb(221,107,33)" fg:x="618" fg:w="17"/><text x="50.0485%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (16 samples, 1.29%)</title><rect x="49.8791%" y="245" width="1.2893%" height="15" fill="rgb(224,203,12)" fg:x="619" fg:w="16"/><text x="50.1291%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="51.0878%" y="229" width="0.0806%" height="15" fill="rgb(230,215,18)" fg:x="634" fg:w="1"/><text x="51.3378%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="51.0878%" y="213" width="0.0806%" height="15" fill="rgb(206,185,35)" fg:x="634" fg:w="1"/><text x="51.3378%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.0878%" y="197" width="0.0806%" height="15" fill="rgb(228,140,34)" fg:x="634" fg:w="1"/><text x="51.3378%" y="207.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="51.2490%" y="293" width="0.0806%" height="15" fill="rgb(208,93,13)" fg:x="636" fg:w="1"/><text x="51.4990%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Config::hybrid_cache_capacity (1 samples, 0.08%)</title><rect x="51.2490%" y="277" width="0.0806%" height="15" fill="rgb(221,193,39)" fg:x="636" fg:w="1"/><text x="51.4990%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="51.4907%" y="229" width="0.0806%" height="15" fill="rgb(241,132,34)" fg:x="639" fg:w="1"/><text x="51.7407%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="51.4907%" y="213" width="0.0806%" height="15" fill="rgb(221,141,10)" fg:x="639" fg:w="1"/><text x="51.7407%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.4907%" y="197" width="0.0806%" height="15" fill="rgb(226,90,31)" fg:x="639" fg:w="1"/><text x="51.7407%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="51.4102%" y="261" width="0.2417%" height="15" fill="rgb(243,75,5)" fg:x="638" fg:w="3"/><text x="51.6602%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="51.4102%" y="245" width="0.2417%" height="15" fill="rgb(227,156,21)" fg:x="638" fg:w="3"/><text x="51.6602%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="51.5713%" y="229" width="0.0806%" height="15" fill="rgb(250,195,8)" fg:x="640" fg:w="1"/><text x="51.8213%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="51.6519%" y="197" width="0.0806%" height="15" fill="rgb(220,134,5)" fg:x="641" fg:w="1"/><text x="51.9019%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="51.6519%" y="181" width="0.0806%" height="15" fill="rgb(246,106,34)" fg:x="641" fg:w="1"/><text x="51.9019%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.6519%" y="165" width="0.0806%" height="15" fill="rgb(205,1,4)" fg:x="641" fg:w="1"/><text x="51.9019%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="51.6519%" y="149" width="0.0806%" height="15" fill="rgb(224,151,29)" fg:x="641" fg:w="1"/><text x="51.9019%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="51.6519%" y="261" width="0.1612%" height="15" fill="rgb(251,196,0)" fg:x="641" fg:w="2"/><text x="51.9019%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="51.6519%" y="245" width="0.1612%" height="15" fill="rgb(212,127,0)" fg:x="641" fg:w="2"/><text x="51.9019%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="51.6519%" y="229" width="0.1612%" height="15" fill="rgb(236,71,53)" fg:x="641" fg:w="2"/><text x="51.9019%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="51.6519%" y="213" width="0.1612%" height="15" fill="rgb(227,99,0)" fg:x="641" fg:w="2"/><text x="51.9019%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.7325%" y="197" width="0.0806%" height="15" fill="rgb(239,89,21)" fg:x="642" fg:w="1"/><text x="51.9825%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.8131%" y="245" width="0.0806%" height="15" fill="rgb(243,122,19)" fg:x="643" fg:w="1"/><text x="52.0631%" y="255.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (2 samples, 0.16%)</title><rect x="51.8131%" y="261" width="0.1612%" height="15" fill="rgb(229,192,45)" fg:x="643" fg:w="2"/><text x="52.0631%" y="271.50"></text></g><g><title>regex_syntax::hir::Properties::union (1 samples, 0.08%)</title><rect x="51.8936%" y="245" width="0.0806%" height="15" fill="rgb(235,165,35)" fg:x="644" fg:w="1"/><text x="52.1436%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.8936%" y="229" width="0.0806%" height="15" fill="rgb(253,202,0)" fg:x="644" fg:w="1"/><text x="52.1436%" y="239.50"></text></g><g><title>__libc_free (4 samples, 0.32%)</title><rect x="52.0548%" y="229" width="0.3223%" height="15" fill="rgb(235,51,20)" fg:x="646" fg:w="4"/><text x="52.3048%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (27 samples, 2.18%)</title><rect x="52.0548%" y="245" width="2.1757%" height="15" fill="rgb(218,95,46)" fg:x="646" fg:w="27"/><text x="52.3048%" y="255.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (23 samples, 1.85%)</title><rect x="52.3771%" y="229" width="1.8533%" height="15" fill="rgb(212,81,10)" fg:x="650" fg:w="23"/><text x="52.6271%" y="239.50">c..</text></g><g><title>__libc_free (6 samples, 0.48%)</title><rect x="53.7470%" y="213" width="0.4835%" height="15" fill="rgb(240,59,0)" fg:x="667" fg:w="6"/><text x="53.9970%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="54.2305%" y="245" width="0.3223%" height="15" fill="rgb(212,191,42)" fg:x="673" fg:w="4"/><text x="54.4805%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="54.3110%" y="229" width="0.2417%" height="15" fill="rgb(233,140,3)" fg:x="674" fg:w="3"/><text x="54.5610%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (5 samples, 0.40%)</title><rect x="54.7139%" y="213" width="0.4029%" height="15" fill="rgb(215,69,23)" fg:x="679" fg:w="5"/><text x="54.9639%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="54.7945%" y="197" width="0.3223%" height="15" fill="rgb(240,202,20)" fg:x="680" fg:w="4"/><text x="55.0445%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="54.7945%" y="181" width="0.3223%" height="15" fill="rgb(209,146,50)" fg:x="680" fg:w="4"/><text x="55.0445%" y="191.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="54.7945%" y="165" width="0.3223%" height="15" fill="rgb(253,102,54)" fg:x="680" fg:w="4"/><text x="55.0445%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (8 samples, 0.64%)</title><rect x="55.1168%" y="213" width="0.6446%" height="15" fill="rgb(250,173,47)" fg:x="684" fg:w="8"/><text x="55.3668%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (6 samples, 0.48%)</title><rect x="55.2780%" y="197" width="0.4835%" height="15" fill="rgb(232,142,7)" fg:x="686" fg:w="6"/><text x="55.5280%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="55.5197%" y="181" width="0.2417%" height="15" fill="rgb(230,157,47)" fg:x="689" fg:w="3"/><text x="55.7697%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="55.5197%" y="165" width="0.2417%" height="15" fill="rgb(214,177,35)" fg:x="689" fg:w="3"/><text x="55.7697%" y="175.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="55.5197%" y="149" width="0.2417%" height="15" fill="rgb(234,119,46)" fg:x="689" fg:w="3"/><text x="55.7697%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.7615%" y="197" width="0.0806%" height="15" fill="rgb(241,180,50)" fg:x="692" fg:w="1"/><text x="56.0115%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="55.8421%" y="197" width="0.0806%" height="15" fill="rgb(221,54,25)" fg:x="693" fg:w="1"/><text x="56.0921%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="55.8421%" y="181" width="0.0806%" height="15" fill="rgb(209,157,44)" fg:x="693" fg:w="1"/><text x="56.0921%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (3 samples, 0.24%)</title><rect x="55.7615%" y="213" width="0.2417%" height="15" fill="rgb(246,115,41)" fg:x="692" fg:w="3"/><text x="56.0115%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="55.9226%" y="197" width="0.0806%" height="15" fill="rgb(229,86,1)" fg:x="694" fg:w="1"/><text x="56.1726%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (19 samples, 1.53%)</title><rect x="54.5528%" y="245" width="1.5310%" height="15" fill="rgb(240,108,53)" fg:x="677" fg:w="19"/><text x="54.8028%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (19 samples, 1.53%)</title><rect x="54.5528%" y="229" width="1.5310%" height="15" fill="rgb(227,134,2)" fg:x="677" fg:w="19"/><text x="54.8028%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="56.0032%" y="213" width="0.0806%" height="15" fill="rgb(213,129,25)" fg:x="695" fg:w="1"/><text x="56.2532%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="56.1644%" y="149" width="0.0806%" height="15" fill="rgb(226,35,21)" fg:x="697" fg:w="1"/><text x="56.4144%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.1644%" y="133" width="0.0806%" height="15" fill="rgb(208,129,26)" fg:x="697" fg:w="1"/><text x="56.4144%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.1644%" y="117" width="0.0806%" height="15" fill="rgb(224,83,6)" fg:x="697" fg:w="1"/><text x="56.4144%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.1644%" y="101" width="0.0806%" height="15" fill="rgb(227,52,39)" fg:x="697" fg:w="1"/><text x="56.4144%" y="111.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.48%)</title><rect x="57.0508%" y="133" width="0.4835%" height="15" fill="rgb(241,30,17)" fg:x="708" fg:w="6"/><text x="57.3008%" y="143.50"></text></g><g><title>__libc_free (4 samples, 0.32%)</title><rect x="57.5342%" y="133" width="0.3223%" height="15" fill="rgb(246,186,42)" fg:x="714" fg:w="4"/><text x="57.7842%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (5 samples, 0.40%)</title><rect x="57.8566%" y="133" width="0.4029%" height="15" fill="rgb(221,169,15)" fg:x="718" fg:w="5"/><text x="58.1066%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="58.0983%" y="117" width="0.1612%" height="15" fill="rgb(235,108,21)" fg:x="721" fg:w="2"/><text x="58.3483%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="58.0983%" y="101" width="0.1612%" height="15" fill="rgb(219,148,30)" fg:x="721" fg:w="2"/><text x="58.3483%" y="111.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="58.0983%" y="85" width="0.1612%" height="15" fill="rgb(220,109,5)" fg:x="721" fg:w="2"/><text x="58.3483%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.24%)</title><rect x="58.2595%" y="133" width="0.2417%" height="15" fill="rgb(213,203,48)" fg:x="723" fg:w="3"/><text x="58.5095%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.4206%" y="117" width="0.0806%" height="15" fill="rgb(244,71,33)" fg:x="725" fg:w="1"/><text x="58.6706%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.4206%" y="101" width="0.0806%" height="15" fill="rgb(209,23,2)" fg:x="725" fg:w="1"/><text x="58.6706%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="58.4206%" y="85" width="0.0806%" height="15" fill="rgb(219,97,7)" fg:x="725" fg:w="1"/><text x="58.6706%" y="95.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.9041%" y="101" width="0.0806%" height="15" fill="rgb(216,161,23)" fg:x="731" fg:w="1"/><text x="59.1541%" y="111.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="59.1459%" y="69" width="0.1612%" height="15" fill="rgb(207,45,42)" fg:x="734" fg:w="2"/><text x="59.3959%" y="79.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="59.3070%" y="69" width="0.0806%" height="15" fill="rgb(241,61,4)" fg:x="736" fg:w="1"/><text x="59.5570%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.48%)</title><rect x="58.9847%" y="101" width="0.4835%" height="15" fill="rgb(236,170,1)" fg:x="732" fg:w="6"/><text x="59.2347%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.48%)</title><rect x="58.9847%" y="85" width="0.4835%" height="15" fill="rgb(239,72,5)" fg:x="732" fg:w="6"/><text x="59.2347%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="59.3876%" y="69" width="0.0806%" height="15" fill="rgb(214,13,50)" fg:x="737" fg:w="1"/><text x="59.6376%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.7099%" y="85" width="0.0806%" height="15" fill="rgb(224,88,9)" fg:x="741" fg:w="1"/><text x="59.9599%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (18 samples, 1.45%)</title><rect x="58.5012%" y="133" width="1.4504%" height="15" fill="rgb(238,192,34)" fg:x="726" fg:w="18"/><text x="58.7512%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (17 samples, 1.37%)</title><rect x="58.5818%" y="117" width="1.3699%" height="15" fill="rgb(217,203,50)" fg:x="727" fg:w="17"/><text x="58.8318%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (6 samples, 0.48%)</title><rect x="59.4682%" y="101" width="0.4835%" height="15" fill="rgb(241,123,32)" fg:x="738" fg:w="6"/><text x="59.7182%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="59.7905%" y="85" width="0.1612%" height="15" fill="rgb(248,151,39)" fg:x="742" fg:w="2"/><text x="60.0405%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.8711%" y="69" width="0.0806%" height="15" fill="rgb(208,89,6)" fg:x="743" fg:w="1"/><text x="60.1211%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.8711%" y="53" width="0.0806%" height="15" fill="rgb(254,43,26)" fg:x="743" fg:w="1"/><text x="60.1211%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="59.8711%" y="37" width="0.0806%" height="15" fill="rgb(216,158,13)" fg:x="743" fg:w="1"/><text x="60.1211%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (54 samples, 4.35%)</title><rect x="59.9517%" y="133" width="4.3513%" height="15" fill="rgb(212,47,37)" fg:x="744" fg:w="54"/><text x="60.2017%" y="143.50">regex..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (54 samples, 4.35%)</title><rect x="59.9517%" y="117" width="4.3513%" height="15" fill="rgb(254,16,10)" fg:x="744" fg:w="54"/><text x="60.2017%" y="127.50">regex..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (54 samples, 4.35%)</title><rect x="59.9517%" y="101" width="4.3513%" height="15" fill="rgb(223,228,16)" fg:x="744" fg:w="54"/><text x="60.2017%" y="111.50">alloc..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="64.3030%" y="133" width="0.0806%" height="15" fill="rgb(249,108,50)" fg:x="798" fg:w="1"/><text x="64.5530%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (104 samples, 8.38%)</title><rect x="56.0838%" y="229" width="8.3803%" height="15" fill="rgb(208,220,5)" fg:x="696" fg:w="104"/><text x="56.3338%" y="239.50">&lt;core::iter:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (104 samples, 8.38%)</title><rect x="56.0838%" y="213" width="8.3803%" height="15" fill="rgb(217,89,48)" fg:x="696" fg:w="104"/><text x="56.3338%" y="223.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (104 samples, 8.38%)</title><rect x="56.0838%" y="197" width="8.3803%" height="15" fill="rgb(212,113,41)" fg:x="696" fg:w="104"/><text x="56.3338%" y="207.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (103 samples, 8.30%)</title><rect x="56.1644%" y="181" width="8.2998%" height="15" fill="rgb(231,127,5)" fg:x="697" fg:w="103"/><text x="56.4144%" y="191.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (103 samples, 8.30%)</title><rect x="56.1644%" y="165" width="8.2998%" height="15" fill="rgb(217,141,17)" fg:x="697" fg:w="103"/><text x="56.4144%" y="175.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (102 samples, 8.22%)</title><rect x="56.2450%" y="149" width="8.2192%" height="15" fill="rgb(245,125,54)" fg:x="698" fg:w="102"/><text x="56.4950%" y="159.50">regex_autom..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="64.3836%" y="133" width="0.0806%" height="15" fill="rgb(248,125,3)" fg:x="799" fg:w="1"/><text x="64.6336%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="64.4641%" y="229" width="0.0806%" height="15" fill="rgb(236,119,51)" fg:x="800" fg:w="1"/><text x="64.7141%" y="239.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="64.6253%" y="213" width="0.0806%" height="15" fill="rgb(239,99,8)" fg:x="802" fg:w="1"/><text x="64.8753%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.7059%" y="213" width="0.0806%" height="15" fill="rgb(224,228,4)" fg:x="803" fg:w="1"/><text x="64.9559%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.7865%" y="213" width="0.0806%" height="15" fill="rgb(220,131,45)" fg:x="804" fg:w="1"/><text x="65.0365%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.7865%" y="197" width="0.0806%" height="15" fill="rgb(215,62,5)" fg:x="804" fg:w="1"/><text x="65.0365%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.7865%" y="181" width="0.0806%" height="15" fill="rgb(253,12,24)" fg:x="804" fg:w="1"/><text x="65.0365%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (8 samples, 0.64%)</title><rect x="64.8670%" y="213" width="0.6446%" height="15" fill="rgb(248,120,50)" fg:x="805" fg:w="8"/><text x="65.1170%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="65.1088%" y="197" width="0.4029%" height="15" fill="rgb(245,194,10)" fg:x="808" fg:w="5"/><text x="65.3588%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="65.1088%" y="181" width="0.4029%" height="15" fill="rgb(241,149,38)" fg:x="808" fg:w="5"/><text x="65.3588%" y="191.50"></text></g><g><title>realloc (5 samples, 0.40%)</title><rect x="65.1088%" y="165" width="0.4029%" height="15" fill="rgb(219,215,7)" fg:x="808" fg:w="5"/><text x="65.3588%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="65.5117%" y="213" width="0.4029%" height="15" fill="rgb(208,120,31)" fg:x="813" fg:w="5"/><text x="65.7617%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.8340%" y="197" width="0.0806%" height="15" fill="rgb(244,30,8)" fg:x="817" fg:w="1"/><text x="66.0840%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="65.9146%" y="213" width="0.0806%" height="15" fill="rgb(238,35,44)" fg:x="818" fg:w="1"/><text x="66.1646%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.9952%" y="197" width="0.0806%" height="15" fill="rgb(243,218,37)" fg:x="819" fg:w="1"/><text x="66.2452%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (125 samples, 10.07%)</title><rect x="56.0838%" y="245" width="10.0725%" height="15" fill="rgb(218,169,10)" fg:x="696" fg:w="125"/><text x="56.3338%" y="255.50">regex_automata:..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (20 samples, 1.61%)</title><rect x="64.5447%" y="229" width="1.6116%" height="15" fill="rgb(221,144,10)" fg:x="801" fg:w="20"/><text x="64.7947%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="65.9952%" y="213" width="0.1612%" height="15" fill="rgb(226,41,38)" fg:x="819" fg:w="2"/><text x="66.2452%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.0757%" y="197" width="0.0806%" height="15" fill="rgb(228,3,1)" fg:x="820" fg:w="1"/><text x="66.3257%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (177 samples, 14.26%)</title><rect x="51.9742%" y="261" width="14.2627%" height="15" fill="rgb(209,129,12)" fg:x="645" fg:w="177"/><text x="52.2242%" y="271.50">regex_automata::meta::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="66.1563%" y="245" width="0.0806%" height="15" fill="rgb(213,136,33)" fg:x="821" fg:w="1"/><text x="66.4063%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="66.1563%" y="229" width="0.0806%" height="15" fill="rgb(209,181,29)" fg:x="821" fg:w="1"/><text x="66.4063%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="66.1563%" y="213" width="0.0806%" height="15" fill="rgb(234,173,18)" fg:x="821" fg:w="1"/><text x="66.4063%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.3981%" y="229" width="0.0806%" height="15" fill="rgb(227,73,47)" fg:x="824" fg:w="1"/><text x="66.6481%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.3981%" y="213" width="0.0806%" height="15" fill="rgb(234,9,34)" fg:x="824" fg:w="1"/><text x="66.6481%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.3981%" y="197" width="0.0806%" height="15" fill="rgb(235,172,15)" fg:x="824" fg:w="1"/><text x="66.6481%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="66.4786%" y="229" width="0.0806%" height="15" fill="rgb(245,61,2)" fg:x="825" fg:w="1"/><text x="66.7286%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="66.4786%" y="213" width="0.0806%" height="15" fill="rgb(238,39,47)" fg:x="825" fg:w="1"/><text x="66.7286%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.4786%" y="197" width="0.0806%" height="15" fill="rgb(234,37,24)" fg:x="825" fg:w="1"/><text x="66.7286%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.4786%" y="181" width="0.0806%" height="15" fill="rgb(248,223,24)" fg:x="825" fg:w="1"/><text x="66.7286%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.4786%" y="165" width="0.0806%" height="15" fill="rgb(223,12,15)" fg:x="825" fg:w="1"/><text x="66.7286%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (3 samples, 0.24%)</title><rect x="66.5592%" y="229" width="0.2417%" height="15" fill="rgb(249,6,3)" fg:x="826" fg:w="3"/><text x="66.8092%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="66.7204%" y="213" width="0.0806%" height="15" fill="rgb(237,105,33)" fg:x="828" fg:w="1"/><text x="66.9704%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.64%)</title><rect x="66.2369%" y="261" width="0.6446%" height="15" fill="rgb(252,208,35)" fg:x="822" fg:w="8"/><text x="66.4869%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.64%)</title><rect x="66.2369%" y="245" width="0.6446%" height="15" fill="rgb(215,181,35)" fg:x="822" fg:w="8"/><text x="66.4869%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="66.8010%" y="229" width="0.0806%" height="15" fill="rgb(246,212,3)" fg:x="829" fg:w="1"/><text x="67.0510%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="66.8010%" y="213" width="0.0806%" height="15" fill="rgb(247,156,24)" fg:x="829" fg:w="1"/><text x="67.0510%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (6 samples, 0.48%)</title><rect x="66.8815%" y="213" width="0.4835%" height="15" fill="rgb(248,9,31)" fg:x="830" fg:w="6"/><text x="67.1315%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (4 samples, 0.32%)</title><rect x="67.0427%" y="197" width="0.3223%" height="15" fill="rgb(234,26,45)" fg:x="832" fg:w="4"/><text x="67.2927%" y="207.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="67.2039%" y="181" width="0.1612%" height="15" fill="rgb(249,11,32)" fg:x="834" fg:w="2"/><text x="67.4539%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (7 samples, 0.56%)</title><rect x="66.8815%" y="229" width="0.5641%" height="15" fill="rgb(249,162,33)" fg:x="830" fg:w="7"/><text x="67.1315%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="67.3650%" y="213" width="0.0806%" height="15" fill="rgb(232,4,32)" fg:x="836" fg:w="1"/><text x="67.6150%" y="223.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="67.3650%" y="197" width="0.0806%" height="15" fill="rgb(212,5,45)" fg:x="836" fg:w="1"/><text x="67.6150%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="67.3650%" y="181" width="0.0806%" height="15" fill="rgb(227,95,13)" fg:x="836" fg:w="1"/><text x="67.6150%" y="191.50"></text></g><g><title>regex_syntax::hir::Properties::capture (1 samples, 0.08%)</title><rect x="67.6873%" y="213" width="0.0806%" height="15" fill="rgb(223,205,10)" fg:x="840" fg:w="1"/><text x="67.9373%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.6873%" y="197" width="0.0806%" height="15" fill="rgb(222,178,8)" fg:x="840" fg:w="1"/><text x="67.9373%" y="207.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (205 samples, 16.52%)</title><rect x="51.3296%" y="277" width="16.5189%" height="15" fill="rgb(216,13,22)" fg:x="637" fg:w="205"/><text x="51.5796%" y="287.50">regex_automata::meta::reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (12 samples, 0.97%)</title><rect x="66.8815%" y="261" width="0.9670%" height="15" fill="rgb(240,167,12)" fg:x="830" fg:w="12"/><text x="67.1315%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (12 samples, 0.97%)</title><rect x="66.8815%" y="245" width="0.9670%" height="15" fill="rgb(235,68,35)" fg:x="830" fg:w="12"/><text x="67.1315%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (5 samples, 0.40%)</title><rect x="67.4456%" y="229" width="0.4029%" height="15" fill="rgb(253,40,27)" fg:x="837" fg:w="5"/><text x="67.6956%" y="239.50"></text></g><g><title>regex_syntax::hir::Properties::repetition (1 samples, 0.08%)</title><rect x="67.7679%" y="213" width="0.0806%" height="15" fill="rgb(214,19,28)" fg:x="841" fg:w="1"/><text x="68.0179%" y="223.50"></text></g><g><title>indefinite::rules::number::Number::check (232 samples, 18.69%)</title><rect x="49.2345%" y="325" width="18.6946%" height="15" fill="rgb(210,167,45)" fg:x="611" fg:w="232"/><text x="49.4845%" y="335.50">indefinite::rules::number::Nu..</text></g><g><title>regex::regex::string::Regex::new (208 samples, 16.76%)</title><rect x="51.1684%" y="309" width="16.7607%" height="15" fill="rgb(232,97,40)" fg:x="635" fg:w="208"/><text x="51.4184%" y="319.50">regex::regex::string::Rege..</text></g><g><title>regex::builders::Builder::build_one_string (206 samples, 16.60%)</title><rect x="51.3296%" y="293" width="16.5995%" height="15" fill="rgb(250,35,23)" fg:x="637" fg:w="206"/><text x="51.5796%" y="303.50">regex::builders::Builder::..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="67.8485%" y="277" width="0.0806%" height="15" fill="rgb(248,47,53)" fg:x="842" fg:w="1"/><text x="68.0985%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorBuilder::unicode (1 samples, 0.08%)</title><rect x="67.8485%" y="261" width="0.0806%" height="15" fill="rgb(226,58,50)" fg:x="842" fg:w="1"/><text x="68.0985%" y="271.50"></text></g><g><title>alloc::rc::rcbox_layout_for_value_layout (1 samples, 0.08%)</title><rect x="67.9291%" y="309" width="0.0806%" height="15" fill="rgb(217,105,26)" fg:x="843" fg:w="1"/><text x="68.1791%" y="319.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="68.0097%" y="309" width="0.0806%" height="15" fill="rgb(208,64,1)" fg:x="844" fg:w="1"/><text x="68.2597%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="68.0902%" y="293" width="0.0806%" height="15" fill="rgb(214,80,1)" fg:x="845" fg:w="1"/><text x="68.3402%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="68.0902%" y="277" width="0.0806%" height="15" fill="rgb(206,175,26)" fg:x="845" fg:w="1"/><text x="68.3402%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="68.0902%" y="261" width="0.0806%" height="15" fill="rgb(235,156,37)" fg:x="845" fg:w="1"/><text x="68.3402%" y="271.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="68.0902%" y="245" width="0.0806%" height="15" fill="rgb(213,100,9)" fg:x="845" fg:w="1"/><text x="68.3402%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="68.1708%" y="261" width="0.0806%" height="15" fill="rgb(241,15,13)" fg:x="846" fg:w="1"/><text x="68.4208%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="68.1708%" y="245" width="0.0806%" height="15" fill="rgb(205,97,43)" fg:x="846" fg:w="1"/><text x="68.4208%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.2514%" y="245" width="0.0806%" height="15" fill="rgb(216,106,32)" fg:x="847" fg:w="1"/><text x="68.5014%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="68.3320%" y="245" width="0.0806%" height="15" fill="rgb(226,200,8)" fg:x="848" fg:w="1"/><text x="68.5820%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.3320%" y="229" width="0.0806%" height="15" fill="rgb(244,54,29)" fg:x="848" fg:w="1"/><text x="68.5820%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="68.1708%" y="293" width="0.3223%" height="15" fill="rgb(252,169,12)" fg:x="846" fg:w="4"/><text x="68.4208%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="68.1708%" y="277" width="0.3223%" height="15" fill="rgb(231,199,11)" fg:x="846" fg:w="4"/><text x="68.4208%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="68.2514%" y="261" width="0.2417%" height="15" fill="rgb(233,191,18)" fg:x="847" fg:w="3"/><text x="68.5014%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="68.4126%" y="245" width="0.0806%" height="15" fill="rgb(215,83,47)" fg:x="849" fg:w="1"/><text x="68.6626%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.4126%" y="229" width="0.0806%" height="15" fill="rgb(251,67,19)" fg:x="849" fg:w="1"/><text x="68.6626%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="68.4932%" y="213" width="0.0806%" height="15" fill="rgb(240,7,20)" fg:x="850" fg:w="1"/><text x="68.7432%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.4932%" y="197" width="0.0806%" height="15" fill="rgb(210,150,26)" fg:x="850" fg:w="1"/><text x="68.7432%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.4932%" y="181" width="0.0806%" height="15" fill="rgb(228,75,42)" fg:x="850" fg:w="1"/><text x="68.7432%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="68.4932%" y="245" width="0.1612%" height="15" fill="rgb(237,134,48)" fg:x="850" fg:w="2"/><text x="68.7432%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="68.4932%" y="229" width="0.1612%" height="15" fill="rgb(205,80,50)" fg:x="850" fg:w="2"/><text x="68.7432%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="68.5737%" y="213" width="0.0806%" height="15" fill="rgb(217,74,48)" fg:x="851" fg:w="1"/><text x="68.8237%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="68.6543%" y="213" width="0.0806%" height="15" fill="rgb(205,82,50)" fg:x="852" fg:w="1"/><text x="68.9043%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="68.6543%" y="245" width="0.2417%" height="15" fill="rgb(228,1,33)" fg:x="852" fg:w="3"/><text x="68.9043%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="68.6543%" y="229" width="0.2417%" height="15" fill="rgb(214,50,23)" fg:x="852" fg:w="3"/><text x="68.9043%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="68.7349%" y="213" width="0.1612%" height="15" fill="rgb(210,62,9)" fg:x="853" fg:w="2"/><text x="68.9849%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="68.7349%" y="197" width="0.1612%" height="15" fill="rgb(210,104,37)" fg:x="853" fg:w="2"/><text x="68.9849%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.8155%" y="181" width="0.0806%" height="15" fill="rgb(232,104,43)" fg:x="854" fg:w="1"/><text x="69.0655%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.9766%" y="229" width="0.0806%" height="15" fill="rgb(244,52,6)" fg:x="856" fg:w="1"/><text x="69.2266%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="69.0572%" y="213" width="0.1612%" height="15" fill="rgb(211,174,52)" fg:x="857" fg:w="2"/><text x="69.3072%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (3 samples, 0.24%)</title><rect x="69.0572%" y="229" width="0.2417%" height="15" fill="rgb(229,48,4)" fg:x="857" fg:w="3"/><text x="69.3072%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="69.2184%" y="213" width="0.0806%" height="15" fill="rgb(205,155,16)" fg:x="859" fg:w="1"/><text x="69.4684%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.2184%" y="197" width="0.0806%" height="15" fill="rgb(211,141,53)" fg:x="859" fg:w="1"/><text x="69.4684%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="69.2990%" y="213" width="0.0806%" height="15" fill="rgb(240,148,11)" fg:x="860" fg:w="1"/><text x="69.5490%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="69.2990%" y="197" width="0.0806%" height="15" fill="rgb(214,45,23)" fg:x="860" fg:w="1"/><text x="69.5490%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="69.2990%" y="229" width="0.3223%" height="15" fill="rgb(248,74,26)" fg:x="860" fg:w="4"/><text x="69.5490%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="69.3795%" y="213" width="0.2417%" height="15" fill="rgb(218,121,16)" fg:x="861" fg:w="3"/><text x="69.6295%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="69.6213%" y="197" width="0.0806%" height="15" fill="rgb(218,10,47)" fg:x="864" fg:w="1"/><text x="69.8713%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="69.6213%" y="181" width="0.0806%" height="15" fill="rgb(227,99,14)" fg:x="864" fg:w="1"/><text x="69.8713%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="69.6213%" y="213" width="0.1612%" height="15" fill="rgb(229,83,46)" fg:x="864" fg:w="2"/><text x="69.8713%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="69.7019%" y="197" width="0.0806%" height="15" fill="rgb(228,25,1)" fg:x="865" fg:w="1"/><text x="69.9519%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="69.7019%" y="181" width="0.0806%" height="15" fill="rgb(252,190,15)" fg:x="865" fg:w="1"/><text x="69.9519%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.7824%" y="197" width="0.0806%" height="15" fill="rgb(213,103,51)" fg:x="866" fg:w="1"/><text x="70.0324%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="69.8630%" y="197" width="0.0806%" height="15" fill="rgb(220,38,44)" fg:x="867" fg:w="1"/><text x="70.1130%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="69.8630%" y="181" width="0.0806%" height="15" fill="rgb(210,45,26)" fg:x="867" fg:w="1"/><text x="70.1130%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.8630%" y="165" width="0.0806%" height="15" fill="rgb(205,95,48)" fg:x="867" fg:w="1"/><text x="70.1130%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.8630%" y="149" width="0.0806%" height="15" fill="rgb(225,179,37)" fg:x="867" fg:w="1"/><text x="70.1130%" y="159.50"></text></g><g><title>regex_automata::meta::strategy::new (14 samples, 1.13%)</title><rect x="68.8961%" y="245" width="1.1281%" height="15" fill="rgb(230,209,3)" fg:x="855" fg:w="14"/><text x="69.1461%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (5 samples, 0.40%)</title><rect x="69.6213%" y="229" width="0.4029%" height="15" fill="rgb(248,12,46)" fg:x="864" fg:w="5"/><text x="69.8713%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="69.7824%" y="213" width="0.2417%" height="15" fill="rgb(234,18,0)" fg:x="866" fg:w="3"/><text x="70.0324%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="69.9436%" y="197" width="0.0806%" height="15" fill="rgb(238,197,14)" fg:x="868" fg:w="1"/><text x="70.1936%" y="207.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="69.9436%" y="181" width="0.0806%" height="15" fill="rgb(251,162,48)" fg:x="868" fg:w="1"/><text x="70.1936%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="69.9436%" y="165" width="0.0806%" height="15" fill="rgb(237,73,42)" fg:x="868" fg:w="1"/><text x="70.1936%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.9436%" y="149" width="0.0806%" height="15" fill="rgb(211,108,8)" fg:x="868" fg:w="1"/><text x="70.1936%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.9436%" y="133" width="0.0806%" height="15" fill="rgb(213,45,22)" fg:x="868" fg:w="1"/><text x="70.1936%" y="143.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="70.1048%" y="197" width="0.1612%" height="15" fill="rgb(252,154,5)" fg:x="870" fg:w="2"/><text x="70.3548%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="70.1853%" y="181" width="0.0806%" height="15" fill="rgb(221,79,52)" fg:x="871" fg:w="1"/><text x="70.4353%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="70.1853%" y="165" width="0.0806%" height="15" fill="rgb(229,220,36)" fg:x="871" fg:w="1"/><text x="70.4353%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.1853%" y="149" width="0.0806%" height="15" fill="rgb(211,17,16)" fg:x="871" fg:w="1"/><text x="70.4353%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="70.2659%" y="197" width="0.0806%" height="15" fill="rgb(222,55,31)" fg:x="872" fg:w="1"/><text x="70.5159%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="70.2659%" y="181" width="0.0806%" height="15" fill="rgb(221,221,31)" fg:x="872" fg:w="1"/><text x="70.5159%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.48%)</title><rect x="70.0242%" y="213" width="0.4835%" height="15" fill="rgb(227,168,26)" fg:x="869" fg:w="6"/><text x="70.2742%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="70.3465%" y="197" width="0.1612%" height="15" fill="rgb(224,139,9)" fg:x="873" fg:w="2"/><text x="70.5965%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="70.3465%" y="181" width="0.1612%" height="15" fill="rgb(254,172,0)" fg:x="873" fg:w="2"/><text x="70.5965%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="70.3465%" y="165" width="0.1612%" height="15" fill="rgb(235,203,1)" fg:x="873" fg:w="2"/><text x="70.5965%" y="175.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="70.3465%" y="149" width="0.1612%" height="15" fill="rgb(216,205,24)" fg:x="873" fg:w="2"/><text x="70.5965%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.56%)</title><rect x="70.0242%" y="245" width="0.5641%" height="15" fill="rgb(233,24,6)" fg:x="869" fg:w="7"/><text x="70.2742%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.56%)</title><rect x="70.0242%" y="229" width="0.5641%" height="15" fill="rgb(244,110,9)" fg:x="869" fg:w="7"/><text x="70.2742%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="70.5077%" y="213" width="0.0806%" height="15" fill="rgb(239,222,42)" fg:x="875" fg:w="1"/><text x="70.7577%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="70.6688%" y="213" width="0.0806%" height="15" fill="rgb(218,145,13)" fg:x="877" fg:w="1"/><text x="70.9188%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="70.6688%" y="197" width="0.0806%" height="15" fill="rgb(207,69,11)" fg:x="877" fg:w="1"/><text x="70.9188%" y="207.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="70.6688%" y="181" width="0.0806%" height="15" fill="rgb(220,223,22)" fg:x="877" fg:w="1"/><text x="70.9188%" y="191.50"></text></g><g><title>regex::regex::string::Regex::new (29 samples, 2.34%)</title><rect x="68.4932%" y="293" width="2.3368%" height="15" fill="rgb(245,102,5)" fg:x="850" fg:w="29"/><text x="68.7432%" y="303.50">r..</text></g><g><title>regex::builders::Builder::build_one_string (29 samples, 2.34%)</title><rect x="68.4932%" y="277" width="2.3368%" height="15" fill="rgb(211,148,2)" fg:x="850" fg:w="29"/><text x="68.7432%" y="287.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (29 samples, 2.34%)</title><rect x="68.4932%" y="261" width="2.3368%" height="15" fill="rgb(241,13,44)" fg:x="850" fg:w="29"/><text x="68.7432%" y="271.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="70.5882%" y="245" width="0.2417%" height="15" fill="rgb(219,137,21)" fg:x="876" fg:w="3"/><text x="70.8382%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="70.5882%" y="229" width="0.2417%" height="15" fill="rgb(242,206,5)" fg:x="876" fg:w="3"/><text x="70.8382%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="70.7494%" y="213" width="0.0806%" height="15" fill="rgb(217,114,22)" fg:x="878" fg:w="1"/><text x="70.9994%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.56%)</title><rect x="70.8300%" y="229" width="0.5641%" height="15" fill="rgb(253,206,42)" fg:x="879" fg:w="7"/><text x="71.0800%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="71.2329%" y="213" width="0.1612%" height="15" fill="rgb(236,102,18)" fg:x="884" fg:w="2"/><text x="71.4829%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.73%)</title><rect x="70.8300%" y="245" width="0.7252%" height="15" fill="rgb(208,59,49)" fg:x="879" fg:w="9"/><text x="71.0800%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="71.3940%" y="229" width="0.1612%" height="15" fill="rgb(215,194,28)" fg:x="886" fg:w="2"/><text x="71.6440%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="71.4746%" y="213" width="0.0806%" height="15" fill="rgb(243,207,11)" fg:x="887" fg:w="1"/><text x="71.7246%" y="223.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (45 samples, 3.63%)</title><rect x="68.0902%" y="309" width="3.6261%" height="15" fill="rgb(254,179,35)" fg:x="845" fg:w="45"/><text x="68.3402%" y="319.50">inde..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (11 samples, 0.89%)</title><rect x="70.8300%" y="293" width="0.8864%" height="15" fill="rgb(235,97,3)" fg:x="879" fg:w="11"/><text x="71.0800%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (11 samples, 0.89%)</title><rect x="70.8300%" y="277" width="0.8864%" height="15" fill="rgb(215,155,33)" fg:x="879" fg:w="11"/><text x="71.0800%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (11 samples, 0.89%)</title><rect x="70.8300%" y="261" width="0.8864%" height="15" fill="rgb(223,128,12)" fg:x="879" fg:w="11"/><text x="71.0800%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (2 samples, 0.16%)</title><rect x="71.5552%" y="245" width="0.1612%" height="15" fill="rgb(208,157,18)" fg:x="888" fg:w="2"/><text x="71.8052%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (2 samples, 0.16%)</title><rect x="71.5552%" y="229" width="0.1612%" height="15" fill="rgb(249,70,54)" fg:x="888" fg:w="2"/><text x="71.8052%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="71.6358%" y="213" width="0.0806%" height="15" fill="rgb(244,118,24)" fg:x="889" fg:w="1"/><text x="71.8858%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.6358%" y="197" width="0.0806%" height="15" fill="rgb(211,54,0)" fg:x="889" fg:w="1"/><text x="71.8858%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.6358%" y="181" width="0.0806%" height="15" fill="rgb(245,137,45)" fg:x="889" fg:w="1"/><text x="71.8858%" y="191.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (454 samples, 36.58%)</title><rect x="35.2941%" y="405" width="36.5834%" height="15" fill="rgb(232,154,31)" fg:x="438" fg:w="454"/><text x="35.5441%" y="415.50">&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (427 samples, 34.41%)</title><rect x="37.4698%" y="389" width="34.4077%" height="15" fill="rgb(253,6,39)" fg:x="465" fg:w="427"/><text x="37.7198%" y="399.50">plugins_core::looking::model::Unqualified::qualify</text></g><g><title>indefinite::indefinite (427 samples, 34.41%)</title><rect x="37.4698%" y="373" width="34.4077%" height="15" fill="rgb(234,183,24)" fg:x="465" fg:w="427"/><text x="37.7198%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (427 samples, 34.41%)</title><rect x="37.4698%" y="357" width="34.4077%" height="15" fill="rgb(252,84,40)" fg:x="465" fg:w="427"/><text x="37.7198%" y="367.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (427 samples, 34.41%)</title><rect x="37.4698%" y="341" width="34.4077%" height="15" fill="rgb(224,65,2)" fg:x="465" fg:w="427"/><text x="37.7198%" y="351.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (49 samples, 3.95%)</title><rect x="67.9291%" y="325" width="3.9484%" height="15" fill="rgb(229,38,24)" fg:x="843" fg:w="49"/><text x="68.1791%" y="335.50">inde..</text></g><g><title>indefinite::irregular::Irregular::check (2 samples, 0.16%)</title><rect x="71.7164%" y="309" width="0.1612%" height="15" fill="rgb(218,131,50)" fg:x="890" fg:w="2"/><text x="71.9664%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.8775%" y="341" width="0.0806%" height="15" fill="rgb(233,106,18)" fg:x="892" fg:w="1"/><text x="72.1275%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.8775%" y="325" width="0.0806%" height="15" fill="rgb(220,216,11)" fg:x="892" fg:w="1"/><text x="72.1275%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.8775%" y="309" width="0.0806%" height="15" fill="rgb(251,100,45)" fg:x="892" fg:w="1"/><text x="72.1275%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.8775%" y="293" width="0.0806%" height="15" fill="rgb(235,143,32)" fg:x="892" fg:w="1"/><text x="72.1275%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.8775%" y="277" width="0.0806%" height="15" fill="rgb(248,124,34)" fg:x="892" fg:w="1"/><text x="72.1275%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.8775%" y="261" width="0.0806%" height="15" fill="rgb(225,221,4)" fg:x="892" fg:w="1"/><text x="72.1275%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.8775%" y="245" width="0.0806%" height="15" fill="rgb(242,27,43)" fg:x="892" fg:w="1"/><text x="72.1275%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="71.8775%" y="229" width="0.0806%" height="15" fill="rgb(227,54,8)" fg:x="892" fg:w="1"/><text x="72.1275%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="71.8775%" y="213" width="0.0806%" height="15" fill="rgb(253,139,49)" fg:x="892" fg:w="1"/><text x="72.1275%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="71.8775%" y="389" width="0.2417%" height="15" fill="rgb(231,26,43)" fg:x="892" fg:w="3"/><text x="72.1275%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="71.8775%" y="373" width="0.2417%" height="15" fill="rgb(207,121,39)" fg:x="892" fg:w="3"/><text x="72.1275%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="71.8775%" y="357" width="0.2417%" height="15" fill="rgb(223,101,35)" fg:x="892" fg:w="3"/><text x="72.1275%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="71.9581%" y="341" width="0.1612%" height="15" fill="rgb(232,87,23)" fg:x="893" fg:w="2"/><text x="72.2081%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="71.9581%" y="325" width="0.1612%" height="15" fill="rgb(225,180,29)" fg:x="893" fg:w="2"/><text x="72.2081%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="71.9581%" y="309" width="0.1612%" height="15" fill="rgb(225,25,17)" fg:x="893" fg:w="2"/><text x="72.2081%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="71.9581%" y="293" width="0.1612%" height="15" fill="rgb(223,8,52)" fg:x="893" fg:w="2"/><text x="72.2081%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="71.9581%" y="277" width="0.1612%" height="15" fill="rgb(246,42,21)" fg:x="893" fg:w="2"/><text x="72.2081%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="71.9581%" y="261" width="0.1612%" height="15" fill="rgb(205,64,43)" fg:x="893" fg:w="2"/><text x="72.2081%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="71.9581%" y="245" width="0.1612%" height="15" fill="rgb(221,160,13)" fg:x="893" fg:w="2"/><text x="72.2081%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="71.9581%" y="229" width="0.1612%" height="15" fill="rgb(239,58,35)" fg:x="893" fg:w="2"/><text x="72.2081%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="71.9581%" y="213" width="0.1612%" height="15" fill="rgb(251,26,40)" fg:x="893" fg:w="2"/><text x="72.2081%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="71.9581%" y="197" width="0.1612%" height="15" fill="rgb(247,0,4)" fg:x="893" fg:w="2"/><text x="72.2081%" y="207.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="71.9581%" y="181" width="0.1612%" height="15" fill="rgb(218,130,10)" fg:x="893" fg:w="2"/><text x="72.2081%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="71.9581%" y="165" width="0.1612%" height="15" fill="rgb(239,32,7)" fg:x="893" fg:w="2"/><text x="72.2081%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.1998%" y="357" width="0.0806%" height="15" fill="rgb(210,192,24)" fg:x="896" fg:w="1"/><text x="72.4498%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.2804%" y="357" width="0.0806%" height="15" fill="rgb(226,212,17)" fg:x="897" fg:w="1"/><text x="72.5304%" y="367.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="72.4416%" y="309" width="0.0806%" height="15" fill="rgb(219,201,28)" fg:x="899" fg:w="1"/><text x="72.6916%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.4416%" y="293" width="0.0806%" height="15" fill="rgb(235,207,41)" fg:x="899" fg:w="1"/><text x="72.6916%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.4416%" y="277" width="0.0806%" height="15" fill="rgb(241,95,54)" fg:x="899" fg:w="1"/><text x="72.6916%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.4416%" y="261" width="0.0806%" height="15" fill="rgb(248,12,23)" fg:x="899" fg:w="1"/><text x="72.6916%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.4416%" y="245" width="0.0806%" height="15" fill="rgb(228,173,4)" fg:x="899" fg:w="1"/><text x="72.6916%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.4416%" y="229" width="0.0806%" height="15" fill="rgb(254,99,5)" fg:x="899" fg:w="1"/><text x="72.6916%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (3 samples, 0.24%)</title><rect x="72.3610%" y="357" width="0.2417%" height="15" fill="rgb(212,184,17)" fg:x="898" fg:w="3"/><text x="72.6110%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (3 samples, 0.24%)</title><rect x="72.3610%" y="341" width="0.2417%" height="15" fill="rgb(252,174,1)" fg:x="898" fg:w="3"/><text x="72.6110%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 0.24%)</title><rect x="72.3610%" y="325" width="0.2417%" height="15" fill="rgb(241,118,51)" fg:x="898" fg:w="3"/><text x="72.6110%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.5222%" y="309" width="0.0806%" height="15" fill="rgb(227,94,47)" fg:x="900" fg:w="1"/><text x="72.7722%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.5222%" y="293" width="0.0806%" height="15" fill="rgb(229,104,2)" fg:x="900" fg:w="1"/><text x="72.7722%" y="303.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (11 samples, 0.89%)</title><rect x="71.8775%" y="405" width="0.8864%" height="15" fill="rgb(219,28,31)" fg:x="892" fg:w="11"/><text x="72.1275%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (8 samples, 0.64%)</title><rect x="72.1193%" y="389" width="0.6446%" height="15" fill="rgb(233,109,36)" fg:x="895" fg:w="8"/><text x="72.3693%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.64%)</title><rect x="72.1193%" y="373" width="0.6446%" height="15" fill="rgb(246,88,11)" fg:x="895" fg:w="8"/><text x="72.3693%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="72.6027%" y="357" width="0.1612%" height="15" fill="rgb(209,212,17)" fg:x="901" fg:w="2"/><text x="72.8527%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.6027%" y="341" width="0.1612%" height="15" fill="rgb(243,59,29)" fg:x="901" fg:w="2"/><text x="72.8527%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="72.6027%" y="325" width="0.1612%" height="15" fill="rgb(244,205,48)" fg:x="901" fg:w="2"/><text x="72.8527%" y="335.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="72.8445%" y="357" width="0.0806%" height="15" fill="rgb(227,30,6)" fg:x="904" fg:w="1"/><text x="73.0945%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="73.0862%" y="341" width="0.1612%" height="15" fill="rgb(220,205,48)" fg:x="907" fg:w="2"/><text x="73.3362%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="73.0862%" y="325" width="0.1612%" height="15" fill="rgb(250,94,14)" fg:x="907" fg:w="2"/><text x="73.3362%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.1668%" y="309" width="0.0806%" height="15" fill="rgb(216,119,42)" fg:x="908" fg:w="1"/><text x="73.4168%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.1668%" y="293" width="0.0806%" height="15" fill="rgb(232,155,0)" fg:x="908" fg:w="1"/><text x="73.4168%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.1668%" y="277" width="0.0806%" height="15" fill="rgb(212,24,32)" fg:x="908" fg:w="1"/><text x="73.4168%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.1668%" y="261" width="0.0806%" height="15" fill="rgb(216,69,20)" fg:x="908" fg:w="1"/><text x="73.4168%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="73.2474%" y="341" width="0.0806%" height="15" fill="rgb(229,73,31)" fg:x="909" fg:w="1"/><text x="73.4974%" y="351.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="73.2474%" y="325" width="0.0806%" height="15" fill="rgb(224,219,20)" fg:x="909" fg:w="1"/><text x="73.4974%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="73.2474%" y="309" width="0.0806%" height="15" fill="rgb(215,146,41)" fg:x="909" fg:w="1"/><text x="73.4974%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.2474%" y="293" width="0.0806%" height="15" fill="rgb(244,71,31)" fg:x="909" fg:w="1"/><text x="73.4974%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.2474%" y="277" width="0.0806%" height="15" fill="rgb(224,24,11)" fg:x="909" fg:w="1"/><text x="73.4974%" y="287.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.2474%" y="261" width="0.0806%" height="15" fill="rgb(229,76,15)" fg:x="909" fg:w="1"/><text x="73.4974%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.2474%" y="245" width="0.0806%" height="15" fill="rgb(209,93,2)" fg:x="909" fg:w="1"/><text x="73.4974%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.2474%" y="229" width="0.0806%" height="15" fill="rgb(216,200,50)" fg:x="909" fg:w="1"/><text x="73.4974%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.2474%" y="213" width="0.0806%" height="15" fill="rgb(211,67,34)" fg:x="909" fg:w="1"/><text x="73.4974%" y="223.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="73.3280%" y="341" width="0.0806%" height="15" fill="rgb(225,87,47)" fg:x="910" fg:w="1"/><text x="73.5780%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.3280%" y="325" width="0.0806%" height="15" fill="rgb(217,185,16)" fg:x="910" fg:w="1"/><text x="73.5780%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.3280%" y="309" width="0.0806%" height="15" fill="rgb(205,0,0)" fg:x="910" fg:w="1"/><text x="73.5780%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="73.3280%" y="293" width="0.0806%" height="15" fill="rgb(207,116,45)" fg:x="910" fg:w="1"/><text x="73.5780%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.4085%" y="181" width="0.0806%" height="15" fill="rgb(221,156,26)" fg:x="911" fg:w="1"/><text x="73.6585%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.4085%" y="165" width="0.0806%" height="15" fill="rgb(213,140,4)" fg:x="911" fg:w="1"/><text x="73.6585%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.4085%" y="245" width="0.1612%" height="15" fill="rgb(231,224,15)" fg:x="911" fg:w="2"/><text x="73.6585%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.4085%" y="229" width="0.1612%" height="15" fill="rgb(244,76,20)" fg:x="911" fg:w="2"/><text x="73.6585%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.4085%" y="213" width="0.1612%" height="15" fill="rgb(238,117,7)" fg:x="911" fg:w="2"/><text x="73.6585%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.4085%" y="197" width="0.1612%" height="15" fill="rgb(235,1,10)" fg:x="911" fg:w="2"/><text x="73.6585%" y="207.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.4891%" y="181" width="0.0806%" height="15" fill="rgb(216,165,6)" fg:x="912" fg:w="1"/><text x="73.7391%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.5697%" y="229" width="0.0806%" height="15" fill="rgb(246,91,35)" fg:x="913" fg:w="1"/><text x="73.8197%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.5697%" y="213" width="0.0806%" height="15" fill="rgb(228,96,24)" fg:x="913" fg:w="1"/><text x="73.8197%" y="223.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.40%)</title><rect x="73.4085%" y="341" width="0.4029%" height="15" fill="rgb(254,217,53)" fg:x="911" fg:w="5"/><text x="73.6585%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="73.4085%" y="325" width="0.4029%" height="15" fill="rgb(209,60,0)" fg:x="911" fg:w="5"/><text x="73.6585%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="73.4085%" y="309" width="0.4029%" height="15" fill="rgb(250,93,26)" fg:x="911" fg:w="5"/><text x="73.6585%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.40%)</title><rect x="73.4085%" y="293" width="0.4029%" height="15" fill="rgb(211,9,40)" fg:x="911" fg:w="5"/><text x="73.6585%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="73.4085%" y="277" width="0.4029%" height="15" fill="rgb(242,57,20)" fg:x="911" fg:w="5"/><text x="73.6585%" y="287.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (5 samples, 0.40%)</title><rect x="73.4085%" y="261" width="0.4029%" height="15" fill="rgb(248,85,48)" fg:x="911" fg:w="5"/><text x="73.6585%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="73.5697%" y="245" width="0.2417%" height="15" fill="rgb(212,117,2)" fg:x="913" fg:w="3"/><text x="73.8197%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.6503%" y="229" width="0.1612%" height="15" fill="rgb(243,19,3)" fg:x="914" fg:w="2"/><text x="73.9003%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="73.7309%" y="213" width="0.0806%" height="15" fill="rgb(232,217,24)" fg:x="915" fg:w="1"/><text x="73.9809%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.7309%" y="197" width="0.0806%" height="15" fill="rgb(224,175,40)" fg:x="915" fg:w="1"/><text x="73.9809%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.7309%" y="181" width="0.0806%" height="15" fill="rgb(212,162,32)" fg:x="915" fg:w="1"/><text x="73.9809%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.7309%" y="165" width="0.0806%" height="15" fill="rgb(215,9,4)" fg:x="915" fg:w="1"/><text x="73.9809%" y="175.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.8114%" y="213" width="0.0806%" height="15" fill="rgb(242,42,7)" fg:x="916" fg:w="1"/><text x="74.0614%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.8114%" y="197" width="0.0806%" height="15" fill="rgb(242,184,45)" fg:x="916" fg:w="1"/><text x="74.0614%" y="207.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.8114%" y="245" width="0.1612%" height="15" fill="rgb(228,111,51)" fg:x="916" fg:w="2"/><text x="74.0614%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.8114%" y="229" width="0.1612%" height="15" fill="rgb(236,147,17)" fg:x="916" fg:w="2"/><text x="74.0614%" y="239.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.8920%" y="213" width="0.0806%" height="15" fill="rgb(210,75,22)" fg:x="917" fg:w="1"/><text x="74.1420%" y="223.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.8920%" y="197" width="0.0806%" height="15" fill="rgb(217,159,45)" fg:x="917" fg:w="1"/><text x="74.1420%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.8920%" y="181" width="0.0806%" height="15" fill="rgb(245,165,53)" fg:x="917" fg:w="1"/><text x="74.1420%" y="191.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (16 samples, 1.29%)</title><rect x="72.7639%" y="405" width="1.2893%" height="15" fill="rgb(251,190,50)" fg:x="903" fg:w="16"/><text x="73.0139%" y="415.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (16 samples, 1.29%)</title><rect x="72.7639%" y="389" width="1.2893%" height="15" fill="rgb(208,203,29)" fg:x="903" fg:w="16"/><text x="73.0139%" y="399.50"></text></g><g><title>engine::session::Session::load_entity (15 samples, 1.21%)</title><rect x="72.8445%" y="373" width="1.2087%" height="15" fill="rgb(207,209,35)" fg:x="904" fg:w="15"/><text x="73.0945%" y="383.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (14 samples, 1.13%)</title><rect x="72.9251%" y="357" width="1.1281%" height="15" fill="rgb(230,144,49)" fg:x="905" fg:w="14"/><text x="73.1751%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="73.8114%" y="341" width="0.2417%" height="15" fill="rgb(229,31,6)" fg:x="916" fg:w="3"/><text x="74.0614%" y="351.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="73.8114%" y="325" width="0.2417%" height="15" fill="rgb(251,129,24)" fg:x="916" fg:w="3"/><text x="74.0614%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="73.8114%" y="309" width="0.2417%" height="15" fill="rgb(235,105,15)" fg:x="916" fg:w="3"/><text x="74.0614%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="73.8114%" y="293" width="0.2417%" height="15" fill="rgb(216,52,43)" fg:x="916" fg:w="3"/><text x="74.0614%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="73.8114%" y="277" width="0.2417%" height="15" fill="rgb(238,144,41)" fg:x="916" fg:w="3"/><text x="74.0614%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="73.8114%" y="261" width="0.2417%" height="15" fill="rgb(243,63,9)" fg:x="916" fg:w="3"/><text x="74.0614%" y="271.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.9726%" y="245" width="0.0806%" height="15" fill="rgb(246,208,1)" fg:x="918" fg:w="1"/><text x="74.2226%" y="255.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (523 samples, 42.14%)</title><rect x="31.9903%" y="629" width="42.1434%" height="15" fill="rgb(233,182,18)" fg:x="397" fg:w="523"/><text x="32.2403%" y="639.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (523 samples, 42.14%)</title><rect x="31.9903%" y="613" width="42.1434%" height="15" fill="rgb(242,224,8)" fg:x="397" fg:w="523"/><text x="32.2403%" y="623.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (523 samples, 42.14%)</title><rect x="31.9903%" y="597" width="42.1434%" height="15" fill="rgb(243,54,37)" fg:x="397" fg:w="523"/><text x="32.2403%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (523 samples, 42.14%)</title><rect x="31.9903%" y="581" width="42.1434%" height="15" fill="rgb(233,192,12)" fg:x="397" fg:w="523"/><text x="32.2403%" y="591.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (505 samples, 40.69%)</title><rect x="33.4408%" y="565" width="40.6930%" height="15" fill="rgb(251,192,53)" fg:x="415" fg:w="505"/><text x="33.6908%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (505 samples, 40.69%)</title><rect x="33.4408%" y="549" width="40.6930%" height="15" fill="rgb(246,141,26)" fg:x="415" fg:w="505"/><text x="33.6908%" y="559.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middlew..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (505 samples, 40.69%)</title><rect x="33.4408%" y="533" width="40.6930%" height="15" fill="rgb(239,195,19)" fg:x="415" fg:w="505"/><text x="33.6908%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (504 samples, 40.61%)</title><rect x="33.5214%" y="517" width="40.6124%" height="15" fill="rgb(241,16,39)" fg:x="416" fg:w="504"/><text x="33.7714%" y="527.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (504 samples, 40.61%)</title><rect x="33.5214%" y="501" width="40.6124%" height="15" fill="rgb(223,13,53)" fg:x="416" fg:w="504"/><text x="33.7714%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (504 samples, 40.61%)</title><rect x="33.5214%" y="485" width="40.6124%" height="15" fill="rgb(214,227,0)" fg:x="416" fg:w="504"/><text x="33.7714%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (504 samples, 40.61%)</title><rect x="33.5214%" y="469" width="40.6124%" height="15" fill="rgb(228,103,26)" fg:x="416" fg:w="504"/><text x="33.7714%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::cal..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (504 samples, 40.61%)</title><rect x="33.5214%" y="453" width="40.6124%" height="15" fill="rgb(254,177,53)" fg:x="416" fg:w="504"/><text x="33.7714%" y="463.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::per..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (504 samples, 40.61%)</title><rect x="33.5214%" y="437" width="40.6124%" height="15" fill="rgb(208,201,34)" fg:x="416" fg:w="504"/><text x="33.7714%" y="447.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions::Ac..</text></g><g><title>plugins_core::looking::model::new_area_observation (482 samples, 38.84%)</title><rect x="35.2941%" y="421" width="38.8396%" height="15" fill="rgb(212,39,5)" fg:x="438" fg:w="482"/><text x="35.5441%" y="431.50">plugins_core::looking::model::new_area_observation</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.0532%" y="405" width="0.0806%" height="15" fill="rgb(246,117,3)" fg:x="919" fg:w="1"/><text x="74.3032%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (2 samples, 0.16%)</title><rect x="74.1338%" y="629" width="0.1612%" height="15" fill="rgb(244,118,39)" fg:x="920" fg:w="2"/><text x="74.3838%" y="639.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="74.2143%" y="613" width="0.0806%" height="15" fill="rgb(241,64,10)" fg:x="921" fg:w="1"/><text x="74.4643%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.2143%" y="597" width="0.0806%" height="15" fill="rgb(229,39,44)" fg:x="921" fg:w="1"/><text x="74.4643%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.2143%" y="581" width="0.0806%" height="15" fill="rgb(230,226,3)" fg:x="921" fg:w="1"/><text x="74.4643%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="74.2143%" y="565" width="0.0806%" height="15" fill="rgb(222,13,42)" fg:x="921" fg:w="1"/><text x="74.4643%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.2143%" y="549" width="0.0806%" height="15" fill="rgb(247,180,54)" fg:x="921" fg:w="1"/><text x="74.4643%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.2143%" y="533" width="0.0806%" height="15" fill="rgb(205,96,16)" fg:x="921" fg:w="1"/><text x="74.4643%" y="543.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="74.2949%" y="629" width="0.1612%" height="15" fill="rgb(205,100,21)" fg:x="922" fg:w="2"/><text x="74.5449%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="74.2949%" y="613" width="0.1612%" height="15" fill="rgb(248,51,4)" fg:x="922" fg:w="2"/><text x="74.5449%" y="623.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="74.3755%" y="597" width="0.0806%" height="15" fill="rgb(217,197,30)" fg:x="923" fg:w="1"/><text x="74.6255%" y="607.50"></text></g><g><title>&lt;(A,B,C) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.08%)</title><rect x="74.3755%" y="581" width="0.0806%" height="15" fill="rgb(240,179,40)" fg:x="923" fg:w="1"/><text x="74.6255%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.6172%" y="517" width="0.0806%" height="15" fill="rgb(212,185,35)" fg:x="926" fg:w="1"/><text x="74.8672%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.6172%" y="501" width="0.0806%" height="15" fill="rgb(251,222,31)" fg:x="926" fg:w="1"/><text x="74.8672%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.6172%" y="485" width="0.0806%" height="15" fill="rgb(208,140,36)" fg:x="926" fg:w="1"/><text x="74.8672%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.6172%" y="469" width="0.0806%" height="15" fill="rgb(220,148,1)" fg:x="926" fg:w="1"/><text x="74.8672%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="74.6172%" y="533" width="0.1612%" height="15" fill="rgb(254,4,28)" fg:x="926" fg:w="2"/><text x="74.8672%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.6978%" y="517" width="0.0806%" height="15" fill="rgb(222,185,44)" fg:x="927" fg:w="1"/><text x="74.9478%" y="527.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="74.8590%" y="341" width="0.0806%" height="15" fill="rgb(215,74,39)" fg:x="929" fg:w="1"/><text x="75.1090%" y="351.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="74.8590%" y="325" width="0.0806%" height="15" fill="rgb(247,86,4)" fg:x="929" fg:w="1"/><text x="75.1090%" y="335.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="74.8590%" y="309" width="0.0806%" height="15" fill="rgb(231,105,32)" fg:x="929" fg:w="1"/><text x="75.1090%" y="319.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="74.8590%" y="293" width="0.0806%" height="15" fill="rgb(222,65,35)" fg:x="929" fg:w="1"/><text x="75.1090%" y="303.50"></text></g><g><title>&lt;dyn serde::de::Expected as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="74.8590%" y="277" width="0.0806%" height="15" fill="rgb(218,145,35)" fg:x="929" fg:w="1"/><text x="75.1090%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.56%)</title><rect x="74.4561%" y="581" width="0.5641%" height="15" fill="rgb(208,7,15)" fg:x="924" fg:w="7"/><text x="74.7061%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.56%)</title><rect x="74.4561%" y="565" width="0.5641%" height="15" fill="rgb(209,83,13)" fg:x="924" fg:w="7"/><text x="74.7061%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (7 samples, 0.56%)</title><rect x="74.4561%" y="549" width="0.5641%" height="15" fill="rgb(218,3,10)" fg:x="924" fg:w="7"/><text x="74.7061%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="74.7784%" y="533" width="0.2417%" height="15" fill="rgb(211,219,4)" fg:x="928" fg:w="3"/><text x="75.0284%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="74.7784%" y="517" width="0.2417%" height="15" fill="rgb(228,194,12)" fg:x="928" fg:w="3"/><text x="75.0284%" y="527.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="74.7784%" y="501" width="0.2417%" height="15" fill="rgb(210,175,7)" fg:x="928" fg:w="3"/><text x="75.0284%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="74.7784%" y="485" width="0.2417%" height="15" fill="rgb(243,132,6)" fg:x="928" fg:w="3"/><text x="75.0284%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="74.7784%" y="469" width="0.2417%" height="15" fill="rgb(207,72,18)" fg:x="928" fg:w="3"/><text x="75.0284%" y="479.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="74.8590%" y="453" width="0.1612%" height="15" fill="rgb(236,1,18)" fg:x="929" fg:w="2"/><text x="75.1090%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="74.8590%" y="437" width="0.1612%" height="15" fill="rgb(227,0,18)" fg:x="929" fg:w="2"/><text x="75.1090%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.8590%" y="421" width="0.1612%" height="15" fill="rgb(247,37,5)" fg:x="929" fg:w="2"/><text x="75.1090%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (2 samples, 0.16%)</title><rect x="74.8590%" y="405" width="0.1612%" height="15" fill="rgb(237,179,24)" fg:x="929" fg:w="2"/><text x="75.1090%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (2 samples, 0.16%)</title><rect x="74.8590%" y="389" width="0.1612%" height="15" fill="rgb(226,53,20)" fg:x="929" fg:w="2"/><text x="75.1090%" y="399.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (2 samples, 0.16%)</title><rect x="74.8590%" y="373" width="0.1612%" height="15" fill="rgb(247,75,7)" fg:x="929" fg:w="2"/><text x="75.1090%" y="383.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (2 samples, 0.16%)</title><rect x="74.8590%" y="357" width="0.1612%" height="15" fill="rgb(233,96,12)" fg:x="929" fg:w="2"/><text x="75.1090%" y="367.50"></text></g><g><title>serde_json::error::make_error (1 samples, 0.08%)</title><rect x="74.9396%" y="341" width="0.0806%" height="15" fill="rgb(224,125,0)" fg:x="930" fg:w="1"/><text x="75.1896%" y="351.50"></text></g><g><title>core::str::pattern::StrSearcher::new (1 samples, 0.08%)</title><rect x="74.9396%" y="325" width="0.0806%" height="15" fill="rgb(224,92,25)" fg:x="930" fg:w="1"/><text x="75.1896%" y="335.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::new (1 samples, 0.08%)</title><rect x="74.9396%" y="309" width="0.0806%" height="15" fill="rgb(224,42,24)" fg:x="930" fg:w="1"/><text x="75.1896%" y="319.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::maximal_suffix (1 samples, 0.08%)</title><rect x="74.9396%" y="293" width="0.0806%" height="15" fill="rgb(234,132,49)" fg:x="930" fg:w="1"/><text x="75.1896%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.0201%" y="485" width="0.0806%" height="15" fill="rgb(248,100,35)" fg:x="931" fg:w="1"/><text x="75.2701%" y="495.50"></text></g><g><title>engine::session::internal::Added::find_refs (9 samples, 0.73%)</title><rect x="74.4561%" y="613" width="0.7252%" height="15" fill="rgb(239,94,40)" fg:x="924" fg:w="9"/><text x="74.7061%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (9 samples, 0.73%)</title><rect x="74.4561%" y="597" width="0.7252%" height="15" fill="rgb(235,139,28)" fg:x="924" fg:w="9"/><text x="74.7061%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="75.0201%" y="581" width="0.1612%" height="15" fill="rgb(217,144,7)" fg:x="931" fg:w="2"/><text x="75.2701%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.0201%" y="565" width="0.1612%" height="15" fill="rgb(227,55,4)" fg:x="931" fg:w="2"/><text x="75.2701%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.0201%" y="549" width="0.1612%" height="15" fill="rgb(252,82,54)" fg:x="931" fg:w="2"/><text x="75.2701%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="75.0201%" y="533" width="0.1612%" height="15" fill="rgb(245,172,4)" fg:x="931" fg:w="2"/><text x="75.2701%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.0201%" y="517" width="0.1612%" height="15" fill="rgb(207,26,27)" fg:x="931" fg:w="2"/><text x="75.2701%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.0201%" y="501" width="0.1612%" height="15" fill="rgb(252,98,18)" fg:x="931" fg:w="2"/><text x="75.2701%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.1007%" y="485" width="0.0806%" height="15" fill="rgb(244,8,26)" fg:x="932" fg:w="1"/><text x="75.3507%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="75.1813%" y="597" width="0.2417%" height="15" fill="rgb(237,173,45)" fg:x="933" fg:w="3"/><text x="75.4313%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="75.1813%" y="581" width="0.2417%" height="15" fill="rgb(208,213,49)" fg:x="933" fg:w="3"/><text x="75.4313%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="75.2619%" y="565" width="0.1612%" height="15" fill="rgb(212,122,37)" fg:x="934" fg:w="2"/><text x="75.5119%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.3425%" y="549" width="0.0806%" height="15" fill="rgb(213,80,17)" fg:x="935" fg:w="1"/><text x="75.5925%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.3425%" y="533" width="0.0806%" height="15" fill="rgb(206,210,43)" fg:x="935" fg:w="1"/><text x="75.5925%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.3425%" y="517" width="0.0806%" height="15" fill="rgb(229,214,3)" fg:x="935" fg:w="1"/><text x="75.5925%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="75.4230%" y="597" width="0.0806%" height="15" fill="rgb(235,213,29)" fg:x="936" fg:w="1"/><text x="75.6730%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.4230%" y="581" width="0.0806%" height="15" fill="rgb(248,135,26)" fg:x="936" fg:w="1"/><text x="75.6730%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.5842%" y="469" width="0.0806%" height="15" fill="rgb(242,188,12)" fg:x="938" fg:w="1"/><text x="75.8342%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.5842%" y="453" width="0.0806%" height="15" fill="rgb(245,38,12)" fg:x="938" fg:w="1"/><text x="75.8342%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.5842%" y="437" width="0.0806%" height="15" fill="rgb(218,42,13)" fg:x="938" fg:w="1"/><text x="75.8342%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.5842%" y="421" width="0.0806%" height="15" fill="rgb(238,132,49)" fg:x="938" fg:w="1"/><text x="75.8342%" y="431.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="75.6648%" y="469" width="0.0806%" height="15" fill="rgb(209,196,19)" fg:x="939" fg:w="1"/><text x="75.9148%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="75.5036%" y="549" width="0.3223%" height="15" fill="rgb(244,131,22)" fg:x="937" fg:w="4"/><text x="75.7536%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="75.5036%" y="533" width="0.3223%" height="15" fill="rgb(223,18,34)" fg:x="937" fg:w="4"/><text x="75.7536%" y="543.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="75.5036%" y="517" width="0.3223%" height="15" fill="rgb(252,124,54)" fg:x="937" fg:w="4"/><text x="75.7536%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="75.5036%" y="501" width="0.3223%" height="15" fill="rgb(229,106,42)" fg:x="937" fg:w="4"/><text x="75.7536%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="75.5842%" y="485" width="0.2417%" height="15" fill="rgb(221,129,1)" fg:x="938" fg:w="3"/><text x="75.8342%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.7454%" y="469" width="0.0806%" height="15" fill="rgb(229,74,15)" fg:x="940" fg:w="1"/><text x="75.9954%" y="479.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.40%)</title><rect x="75.5036%" y="597" width="0.4029%" height="15" fill="rgb(210,206,50)" fg:x="937" fg:w="5"/><text x="75.7536%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="75.5036%" y="581" width="0.4029%" height="15" fill="rgb(251,114,31)" fg:x="937" fg:w="5"/><text x="75.7536%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="75.5036%" y="565" width="0.4029%" height="15" fill="rgb(215,225,28)" fg:x="937" fg:w="5"/><text x="75.7536%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.8259%" y="549" width="0.0806%" height="15" fill="rgb(237,109,14)" fg:x="941" fg:w="1"/><text x="76.0759%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.8259%" y="533" width="0.0806%" height="15" fill="rgb(230,13,37)" fg:x="941" fg:w="1"/><text x="76.0759%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="75.8259%" y="517" width="0.0806%" height="15" fill="rgb(231,40,28)" fg:x="941" fg:w="1"/><text x="76.0759%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="75.9065%" y="453" width="0.1612%" height="15" fill="rgb(231,202,18)" fg:x="942" fg:w="2"/><text x="76.1565%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.9065%" y="437" width="0.1612%" height="15" fill="rgb(225,33,18)" fg:x="942" fg:w="2"/><text x="76.1565%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="75.9065%" y="421" width="0.1612%" height="15" fill="rgb(223,64,47)" fg:x="942" fg:w="2"/><text x="76.1565%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.9871%" y="405" width="0.0806%" height="15" fill="rgb(234,114,13)" fg:x="943" fg:w="1"/><text x="76.2371%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.0677%" y="437" width="0.0806%" height="15" fill="rgb(248,56,40)" fg:x="944" fg:w="1"/><text x="76.3177%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.0677%" y="421" width="0.0806%" height="15" fill="rgb(221,194,21)" fg:x="944" fg:w="1"/><text x="76.3177%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.0677%" y="405" width="0.0806%" height="15" fill="rgb(242,108,46)" fg:x="944" fg:w="1"/><text x="76.3177%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="75.9065%" y="469" width="0.3223%" height="15" fill="rgb(220,106,10)" fg:x="942" fg:w="4"/><text x="76.1565%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="76.0677%" y="453" width="0.1612%" height="15" fill="rgb(211,88,4)" fg:x="944" fg:w="2"/><text x="76.3177%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="76.1483%" y="437" width="0.0806%" height="15" fill="rgb(214,95,34)" fg:x="945" fg:w="1"/><text x="76.3983%" y="447.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="76.2288%" y="453" width="0.0806%" height="15" fill="rgb(250,160,33)" fg:x="946" fg:w="1"/><text x="76.4788%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="75.9065%" y="501" width="0.4835%" height="15" fill="rgb(225,29,10)" fg:x="942" fg:w="6"/><text x="76.1565%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="75.9065%" y="485" width="0.4835%" height="15" fill="rgb(224,28,30)" fg:x="942" fg:w="6"/><text x="76.1565%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="76.2288%" y="469" width="0.1612%" height="15" fill="rgb(231,77,4)" fg:x="946" fg:w="2"/><text x="76.4788%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.3094%" y="453" width="0.0806%" height="15" fill="rgb(209,63,21)" fg:x="947" fg:w="1"/><text x="76.5594%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="76.3900%" y="501" width="0.0806%" height="15" fill="rgb(226,22,11)" fg:x="948" fg:w="1"/><text x="76.6400%" y="511.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="76.3900%" y="485" width="0.0806%" height="15" fill="rgb(216,82,30)" fg:x="948" fg:w="1"/><text x="76.6400%" y="495.50"></text></g><g><title>engine::session::Session::load_entity (26 samples, 2.10%)</title><rect x="74.4561%" y="629" width="2.0951%" height="15" fill="rgb(246,227,38)" fg:x="924" fg:w="26"/><text x="74.7061%" y="639.50">e..</text></g><g><title>engine::session::internal::Entities::add_persisted (17 samples, 1.37%)</title><rect x="75.1813%" y="613" width="1.3699%" height="15" fill="rgb(251,203,53)" fg:x="933" fg:w="17"/><text x="75.4313%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (8 samples, 0.64%)</title><rect x="75.9065%" y="597" width="0.6446%" height="15" fill="rgb(254,101,1)" fg:x="942" fg:w="8"/><text x="76.1565%" y="607.50"></text></g><g><title>serde_json::de::from_trait (8 samples, 0.64%)</title><rect x="75.9065%" y="581" width="0.6446%" height="15" fill="rgb(241,180,5)" fg:x="942" fg:w="8"/><text x="76.1565%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.64%)</title><rect x="75.9065%" y="565" width="0.6446%" height="15" fill="rgb(218,168,4)" fg:x="942" fg:w="8"/><text x="76.1565%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.64%)</title><rect x="75.9065%" y="549" width="0.6446%" height="15" fill="rgb(224,223,32)" fg:x="942" fg:w="8"/><text x="76.1565%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.64%)</title><rect x="75.9065%" y="533" width="0.6446%" height="15" fill="rgb(236,106,22)" fg:x="942" fg:w="8"/><text x="76.1565%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.64%)</title><rect x="75.9065%" y="517" width="0.6446%" height="15" fill="rgb(206,121,5)" fg:x="942" fg:w="8"/><text x="76.1565%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.4706%" y="501" width="0.0806%" height="15" fill="rgb(233,87,28)" fg:x="949" fg:w="1"/><text x="76.7206%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="76.6317%" y="581" width="0.2417%" height="15" fill="rgb(236,137,17)" fg:x="951" fg:w="3"/><text x="76.8817%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="76.7123%" y="565" width="0.1612%" height="15" fill="rgb(209,183,38)" fg:x="952" fg:w="2"/><text x="76.9623%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="76.7123%" y="549" width="0.1612%" height="15" fill="rgb(206,162,44)" fg:x="952" fg:w="2"/><text x="76.9623%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.7929%" y="533" width="0.0806%" height="15" fill="rgb(237,70,39)" fg:x="953" fg:w="1"/><text x="77.0429%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.7929%" y="517" width="0.0806%" height="15" fill="rgb(212,176,5)" fg:x="953" fg:w="1"/><text x="77.0429%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.8735%" y="565" width="0.0806%" height="15" fill="rgb(232,95,16)" fg:x="954" fg:w="1"/><text x="77.1235%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.8735%" y="549" width="0.0806%" height="15" fill="rgb(219,115,35)" fg:x="954" fg:w="1"/><text x="77.1235%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.8735%" y="533" width="0.0806%" height="15" fill="rgb(251,67,27)" fg:x="954" fg:w="1"/><text x="77.1235%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.8735%" y="517" width="0.0806%" height="15" fill="rgb(222,95,40)" fg:x="954" fg:w="1"/><text x="77.1235%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.8735%" y="501" width="0.0806%" height="15" fill="rgb(250,35,16)" fg:x="954" fg:w="1"/><text x="77.1235%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.8735%" y="485" width="0.0806%" height="15" fill="rgb(224,86,44)" fg:x="954" fg:w="1"/><text x="77.1235%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.8735%" y="469" width="0.0806%" height="15" fill="rgb(237,53,53)" fg:x="954" fg:w="1"/><text x="77.1235%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.8735%" y="453" width="0.0806%" height="15" fill="rgb(208,171,33)" fg:x="954" fg:w="1"/><text x="77.1235%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.8735%" y="437" width="0.0806%" height="15" fill="rgb(222,64,27)" fg:x="954" fg:w="1"/><text x="77.1235%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.8735%" y="421" width="0.0806%" height="15" fill="rgb(221,121,35)" fg:x="954" fg:w="1"/><text x="77.1235%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.8735%" y="405" width="0.0806%" height="15" fill="rgb(228,137,42)" fg:x="954" fg:w="1"/><text x="77.1235%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.8735%" y="389" width="0.0806%" height="15" fill="rgb(227,54,21)" fg:x="954" fg:w="1"/><text x="77.1235%" y="399.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="76.8735%" y="581" width="0.1612%" height="15" fill="rgb(240,168,33)" fg:x="954" fg:w="2"/><text x="77.1235%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.9541%" y="565" width="0.0806%" height="15" fill="rgb(243,159,6)" fg:x="955" fg:w="1"/><text x="77.2041%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.9541%" y="549" width="0.0806%" height="15" fill="rgb(205,211,41)" fg:x="955" fg:w="1"/><text x="77.2041%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="76.9541%" y="533" width="0.0806%" height="15" fill="rgb(253,30,1)" fg:x="955" fg:w="1"/><text x="77.2041%" y="543.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="77.0346%" y="581" width="0.0806%" height="15" fill="rgb(226,80,18)" fg:x="956" fg:w="1"/><text x="77.2846%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.1958%" y="421" width="0.0806%" height="15" fill="rgb(253,156,46)" fg:x="958" fg:w="1"/><text x="77.4458%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.1958%" y="405" width="0.0806%" height="15" fill="rgb(248,87,27)" fg:x="958" fg:w="1"/><text x="77.4458%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.1958%" y="389" width="0.0806%" height="15" fill="rgb(227,122,2)" fg:x="958" fg:w="1"/><text x="77.4458%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="77.1958%" y="485" width="0.1612%" height="15" fill="rgb(229,94,39)" fg:x="958" fg:w="2"/><text x="77.4458%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="77.1958%" y="469" width="0.1612%" height="15" fill="rgb(225,173,31)" fg:x="958" fg:w="2"/><text x="77.4458%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="77.1958%" y="453" width="0.1612%" height="15" fill="rgb(239,176,30)" fg:x="958" fg:w="2"/><text x="77.4458%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="77.1958%" y="437" width="0.1612%" height="15" fill="rgb(212,104,21)" fg:x="958" fg:w="2"/><text x="77.4458%" y="447.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="77.2764%" y="421" width="0.0806%" height="15" fill="rgb(240,209,40)" fg:x="959" fg:w="1"/><text x="77.5264%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="77.1958%" y="533" width="0.2417%" height="15" fill="rgb(234,195,5)" fg:x="958" fg:w="3"/><text x="77.4458%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="77.1958%" y="517" width="0.2417%" height="15" fill="rgb(238,213,1)" fg:x="958" fg:w="3"/><text x="77.4458%" y="527.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="77.1958%" y="501" width="0.2417%" height="15" fill="rgb(235,182,54)" fg:x="958" fg:w="3"/><text x="77.4458%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.3570%" y="485" width="0.0806%" height="15" fill="rgb(229,50,46)" fg:x="960" fg:w="1"/><text x="77.6070%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.3570%" y="469" width="0.0806%" height="15" fill="rgb(219,145,13)" fg:x="960" fg:w="1"/><text x="77.6070%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="77.3570%" y="453" width="0.0806%" height="15" fill="rgb(220,226,10)" fg:x="960" fg:w="1"/><text x="77.6070%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.3570%" y="437" width="0.0806%" height="15" fill="rgb(248,47,30)" fg:x="960" fg:w="1"/><text x="77.6070%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.3570%" y="421" width="0.0806%" height="15" fill="rgb(231,209,44)" fg:x="960" fg:w="1"/><text x="77.6070%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="77.3570%" y="405" width="0.0806%" height="15" fill="rgb(209,80,30)" fg:x="960" fg:w="1"/><text x="77.6070%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.3570%" y="389" width="0.0806%" height="15" fill="rgb(232,9,14)" fg:x="960" fg:w="1"/><text x="77.6070%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.3570%" y="373" width="0.0806%" height="15" fill="rgb(243,91,43)" fg:x="960" fg:w="1"/><text x="77.6070%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.3570%" y="357" width="0.0806%" height="15" fill="rgb(231,90,52)" fg:x="960" fg:w="1"/><text x="77.6070%" y="367.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.40%)</title><rect x="77.1152%" y="581" width="0.4029%" height="15" fill="rgb(253,192,44)" fg:x="957" fg:w="5"/><text x="77.3652%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="77.1152%" y="565" width="0.4029%" height="15" fill="rgb(241,66,31)" fg:x="957" fg:w="5"/><text x="77.3652%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="77.1152%" y="549" width="0.4029%" height="15" fill="rgb(235,81,37)" fg:x="957" fg:w="5"/><text x="77.3652%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.4376%" y="533" width="0.0806%" height="15" fill="rgb(223,221,9)" fg:x="961" fg:w="1"/><text x="77.6876%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.4376%" y="517" width="0.0806%" height="15" fill="rgb(242,180,7)" fg:x="961" fg:w="1"/><text x="77.6876%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.4376%" y="501" width="0.0806%" height="15" fill="rgb(243,78,19)" fg:x="961" fg:w="1"/><text x="77.6876%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.5181%" y="517" width="0.0806%" height="15" fill="rgb(233,23,17)" fg:x="962" fg:w="1"/><text x="77.7681%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.5181%" y="501" width="0.0806%" height="15" fill="rgb(252,122,45)" fg:x="962" fg:w="1"/><text x="77.7681%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.5181%" y="485" width="0.0806%" height="15" fill="rgb(247,108,20)" fg:x="962" fg:w="1"/><text x="77.7681%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.5181%" y="469" width="0.0806%" height="15" fill="rgb(235,84,21)" fg:x="962" fg:w="1"/><text x="77.7681%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.5181%" y="453" width="0.0806%" height="15" fill="rgb(247,129,10)" fg:x="962" fg:w="1"/><text x="77.7681%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.5181%" y="437" width="0.0806%" height="15" fill="rgb(208,173,14)" fg:x="962" fg:w="1"/><text x="77.7681%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.5181%" y="421" width="0.0806%" height="15" fill="rgb(236,31,38)" fg:x="962" fg:w="1"/><text x="77.7681%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.5181%" y="405" width="0.0806%" height="15" fill="rgb(232,65,17)" fg:x="962" fg:w="1"/><text x="77.7681%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.5181%" y="389" width="0.0806%" height="15" fill="rgb(224,45,49)" fg:x="962" fg:w="1"/><text x="77.7681%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.5181%" y="373" width="0.0806%" height="15" fill="rgb(225,2,53)" fg:x="962" fg:w="1"/><text x="77.7681%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.5181%" y="357" width="0.0806%" height="15" fill="rgb(248,210,53)" fg:x="962" fg:w="1"/><text x="77.7681%" y="367.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (567 samples, 45.69%)</title><rect x="31.9903%" y="661" width="45.6890%" height="15" fill="rgb(211,1,30)" fg:x="397" fg:w="567"/><text x="32.2403%" y="671.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (567 samples, 45.69%)</title><rect x="31.9903%" y="645" width="45.6890%" height="15" fill="rgb(224,96,15)" fg:x="397" fg:w="567"/><text x="32.2403%" y="655.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (14 samples, 1.13%)</title><rect x="76.5512%" y="629" width="1.1281%" height="15" fill="rgb(252,45,11)" fg:x="950" fg:w="14"/><text x="76.8012%" y="639.50"></text></g><g><title>engine::session::Session::load_entity (14 samples, 1.13%)</title><rect x="76.5512%" y="613" width="1.1281%" height="15" fill="rgb(220,125,38)" fg:x="950" fg:w="14"/><text x="76.8012%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (13 samples, 1.05%)</title><rect x="76.6317%" y="597" width="1.0475%" height="15" fill="rgb(243,161,33)" fg:x="951" fg:w="13"/><text x="76.8817%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="77.5181%" y="581" width="0.1612%" height="15" fill="rgb(248,197,34)" fg:x="962" fg:w="2"/><text x="77.7681%" y="591.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="77.5181%" y="565" width="0.1612%" height="15" fill="rgb(228,165,23)" fg:x="962" fg:w="2"/><text x="77.7681%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="77.5181%" y="549" width="0.1612%" height="15" fill="rgb(236,94,38)" fg:x="962" fg:w="2"/><text x="77.7681%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="77.5181%" y="533" width="0.1612%" height="15" fill="rgb(220,13,23)" fg:x="962" fg:w="2"/><text x="77.7681%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.5987%" y="517" width="0.0806%" height="15" fill="rgb(234,26,39)" fg:x="963" fg:w="1"/><text x="77.8487%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (965 samples, 77.76%)</title><rect x="0.0000%" y="709" width="77.7599%" height="15" fill="rgb(205,117,44)" fg:x="0" fg:w="965"/><text x="0.2500%" y="719.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (965 samples, 77.76%)</title><rect x="0.0000%" y="693" width="77.7599%" height="15" fill="rgb(250,42,2)" fg:x="0" fg:w="965"/><text x="0.2500%" y="703.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (965 samples, 77.76%)</title><rect x="0.0000%" y="677" width="77.7599%" height="15" fill="rgb(223,83,14)" fg:x="0" fg:w="965"/><text x="0.2500%" y="687.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="77.6793%" y="661" width="0.0806%" height="15" fill="rgb(241,147,50)" fg:x="964" fg:w="1"/><text x="77.9293%" y="671.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="77.6793%" y="645" width="0.0806%" height="15" fill="rgb(218,90,6)" fg:x="964" fg:w="1"/><text x="77.9293%" y="655.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="77.6793%" y="629" width="0.0806%" height="15" fill="rgb(210,191,5)" fg:x="964" fg:w="1"/><text x="77.9293%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.7599%" y="661" width="0.0806%" height="15" fill="rgb(225,139,19)" fg:x="965" fg:w="1"/><text x="78.0099%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.7599%" y="645" width="0.0806%" height="15" fill="rgb(210,1,33)" fg:x="965" fg:w="1"/><text x="78.0099%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.7599%" y="629" width="0.0806%" height="15" fill="rgb(213,50,3)" fg:x="965" fg:w="1"/><text x="78.0099%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.7599%" y="613" width="0.0806%" height="15" fill="rgb(234,227,4)" fg:x="965" fg:w="1"/><text x="78.0099%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.9210%" y="549" width="0.0806%" height="15" fill="rgb(246,63,5)" fg:x="967" fg:w="1"/><text x="78.1710%" y="559.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="77.8405%" y="661" width="0.2417%" height="15" fill="rgb(245,136,27)" fg:x="966" fg:w="3"/><text x="78.0905%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (2 samples, 0.16%)</title><rect x="77.9210%" y="645" width="0.1612%" height="15" fill="rgb(247,199,27)" fg:x="967" fg:w="2"/><text x="78.1710%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="77.9210%" y="629" width="0.1612%" height="15" fill="rgb(252,158,49)" fg:x="967" fg:w="2"/><text x="78.1710%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (2 samples, 0.16%)</title><rect x="77.9210%" y="613" width="0.1612%" height="15" fill="rgb(254,73,1)" fg:x="967" fg:w="2"/><text x="78.1710%" y="623.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="77.9210%" y="597" width="0.1612%" height="15" fill="rgb(248,93,19)" fg:x="967" fg:w="2"/><text x="78.1710%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="77.9210%" y="581" width="0.1612%" height="15" fill="rgb(206,67,5)" fg:x="967" fg:w="2"/><text x="78.1710%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="77.9210%" y="565" width="0.1612%" height="15" fill="rgb(209,210,4)" fg:x="967" fg:w="2"/><text x="78.1710%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.0016%" y="549" width="0.0806%" height="15" fill="rgb(214,185,36)" fg:x="968" fg:w="1"/><text x="78.2516%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.0016%" y="533" width="0.0806%" height="15" fill="rgb(233,191,26)" fg:x="968" fg:w="1"/><text x="78.2516%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.0016%" y="517" width="0.0806%" height="15" fill="rgb(248,94,17)" fg:x="968" fg:w="1"/><text x="78.2516%" y="527.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.1628%" y="565" width="0.0806%" height="15" fill="rgb(250,64,4)" fg:x="970" fg:w="1"/><text x="78.4128%" y="575.50"></text></g><g><title>libloading::library_filename (1 samples, 0.08%)</title><rect x="78.2434%" y="565" width="0.0806%" height="15" fill="rgb(218,41,53)" fg:x="971" fg:w="1"/><text x="78.4934%" y="575.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (1 samples, 0.08%)</title><rect x="78.2434%" y="549" width="0.0806%" height="15" fill="rgb(251,176,28)" fg:x="971" fg:w="1"/><text x="78.4934%" y="559.50"></text></g><g><title>dlerror (2 samples, 0.16%)</title><rect x="78.3239%" y="549" width="0.1612%" height="15" fill="rgb(247,22,9)" fg:x="972" fg:w="2"/><text x="78.5739%" y="559.50"></text></g><g><title>__asprintf (2 samples, 0.16%)</title><rect x="78.3239%" y="533" width="0.1612%" height="15" fill="rgb(218,201,14)" fg:x="972" fg:w="2"/><text x="78.5739%" y="543.50"></text></g><g><title>__strerror_r (1 samples, 0.08%)</title><rect x="78.4045%" y="517" width="0.0806%" height="15" fill="rgb(218,94,10)" fg:x="973" fg:w="1"/><text x="78.6545%" y="527.50"></text></g><g><title>dlopen (2 samples, 0.16%)</title><rect x="78.4851%" y="549" width="0.1612%" height="15" fill="rgb(222,183,52)" fg:x="974" fg:w="2"/><text x="78.7351%" y="559.50"></text></g><g><title>_dl_catch_error (2 samples, 0.16%)</title><rect x="78.4851%" y="533" width="0.1612%" height="15" fill="rgb(242,140,25)" fg:x="974" fg:w="2"/><text x="78.7351%" y="543.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="78.4851%" y="517" width="0.1612%" height="15" fill="rgb(235,197,38)" fg:x="974" fg:w="2"/><text x="78.7351%" y="527.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="78.4851%" y="501" width="0.1612%" height="15" fill="rgb(237,136,15)" fg:x="974" fg:w="2"/><text x="78.7351%" y="511.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="78.4851%" y="485" width="0.1612%" height="15" fill="rgb(223,44,49)" fg:x="974" fg:w="2"/><text x="78.7351%" y="495.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (7 samples, 0.56%)</title><rect x="78.1628%" y="597" width="0.5641%" height="15" fill="rgb(227,71,15)" fg:x="970" fg:w="7"/><text x="78.4128%" y="607.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (7 samples, 0.56%)</title><rect x="78.1628%" y="581" width="0.5641%" height="15" fill="rgb(225,153,20)" fg:x="970" fg:w="7"/><text x="78.4128%" y="591.50"></text></g><g><title>libloading::safe::Library::new (5 samples, 0.40%)</title><rect x="78.3239%" y="565" width="0.4029%" height="15" fill="rgb(210,190,26)" fg:x="972" fg:w="5"/><text x="78.5739%" y="575.50"></text></g><g><title>libloading::util::cstr_cow_from_bytes (1 samples, 0.08%)</title><rect x="78.6463%" y="549" width="0.0806%" height="15" fill="rgb(223,147,5)" fg:x="976" fg:w="1"/><text x="78.8963%" y="559.50"></text></g><g><title>&lt;&amp;str as alloc::ffi::c_str::CString::new::SpecNewImpl&gt;::spec_new_impl (1 samples, 0.08%)</title><rect x="78.6463%" y="533" width="0.0806%" height="15" fill="rgb(207,14,23)" fg:x="976" fg:w="1"/><text x="78.8963%" y="543.50"></text></g><g><title>alloc::ffi::c_str::CString::new::spec_new_impl_bytes (1 samples, 0.08%)</title><rect x="78.6463%" y="517" width="0.0806%" height="15" fill="rgb(211,195,53)" fg:x="976" fg:w="1"/><text x="78.8963%" y="527.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.08%)</title><rect x="78.6463%" y="501" width="0.0806%" height="15" fill="rgb(237,75,46)" fg:x="976" fg:w="1"/><text x="78.8963%" y="511.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (9 samples, 0.73%)</title><rect x="78.0822%" y="661" width="0.7252%" height="15" fill="rgb(254,55,14)" fg:x="969" fg:w="9"/><text x="78.3322%" y="671.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (9 samples, 0.73%)</title><rect x="78.0822%" y="645" width="0.7252%" height="15" fill="rgb(230,185,30)" fg:x="969" fg:w="9"/><text x="78.3322%" y="655.50"></text></g><g><title>engine::session::Session::new (9 samples, 0.73%)</title><rect x="78.0822%" y="629" width="0.7252%" height="15" fill="rgb(220,14,11)" fg:x="969" fg:w="9"/><text x="78.3322%" y="639.50"></text></g><g><title>engine::session::Session::initialize (8 samples, 0.64%)</title><rect x="78.1628%" y="613" width="0.6446%" height="15" fill="rgb(215,169,44)" fg:x="970" fg:w="8"/><text x="78.4128%" y="623.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="78.7268%" y="597" width="0.0806%" height="15" fill="rgb(253,203,20)" fg:x="977" fg:w="1"/><text x="78.9768%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="78.7268%" y="581" width="0.0806%" height="15" fill="rgb(229,225,17)" fg:x="977" fg:w="1"/><text x="78.9768%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="78.7268%" y="565" width="0.0806%" height="15" fill="rgb(236,76,26)" fg:x="977" fg:w="1"/><text x="78.9768%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.7268%" y="549" width="0.0806%" height="15" fill="rgb(234,15,30)" fg:x="977" fg:w="1"/><text x="78.9768%" y="559.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="78.7268%" y="533" width="0.0806%" height="15" fill="rgb(211,113,48)" fg:x="977" fg:w="1"/><text x="78.9768%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.8074%" y="645" width="0.0806%" height="15" fill="rgb(221,31,36)" fg:x="978" fg:w="1"/><text x="79.0574%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.8074%" y="629" width="0.0806%" height="15" fill="rgb(215,118,52)" fg:x="978" fg:w="1"/><text x="79.0574%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.8074%" y="613" width="0.0806%" height="15" fill="rgb(241,151,27)" fg:x="978" fg:w="1"/><text x="79.0574%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.8074%" y="597" width="0.0806%" height="15" fill="rgb(253,51,3)" fg:x="978" fg:w="1"/><text x="79.0574%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.8074%" y="581" width="0.0806%" height="15" fill="rgb(216,201,24)" fg:x="978" fg:w="1"/><text x="79.0574%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="78.8880%" y="597" width="0.0806%" height="15" fill="rgb(231,107,4)" fg:x="979" fg:w="1"/><text x="79.1380%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="78.8880%" y="581" width="0.0806%" height="15" fill="rgb(243,97,54)" fg:x="979" fg:w="1"/><text x="79.1380%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.8880%" y="565" width="0.0806%" height="15" fill="rgb(221,32,51)" fg:x="979" fg:w="1"/><text x="79.1380%" y="575.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="78.8880%" y="549" width="0.0806%" height="15" fill="rgb(218,171,35)" fg:x="979" fg:w="1"/><text x="79.1380%" y="559.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="78.9686%" y="597" width="0.0806%" height="15" fill="rgb(214,20,53)" fg:x="980" fg:w="1"/><text x="79.2186%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="78.9686%" y="581" width="0.0806%" height="15" fill="rgb(239,9,52)" fg:x="980" fg:w="1"/><text x="79.2186%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.9686%" y="565" width="0.0806%" height="15" fill="rgb(215,114,45)" fg:x="980" fg:w="1"/><text x="79.2186%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="79.0492%" y="533" width="0.1612%" height="15" fill="rgb(208,118,9)" fg:x="981" fg:w="2"/><text x="79.2992%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="79.0492%" y="517" width="0.1612%" height="15" fill="rgb(235,7,39)" fg:x="981" fg:w="2"/><text x="79.2992%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.1297%" y="501" width="0.0806%" height="15" fill="rgb(243,225,15)" fg:x="982" fg:w="1"/><text x="79.3797%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.1297%" y="485" width="0.0806%" height="15" fill="rgb(225,216,18)" fg:x="982" fg:w="1"/><text x="79.3797%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.1297%" y="469" width="0.0806%" height="15" fill="rgb(233,36,38)" fg:x="982" fg:w="1"/><text x="79.3797%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="79.1297%" y="453" width="0.0806%" height="15" fill="rgb(239,88,23)" fg:x="982" fg:w="1"/><text x="79.3797%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.1297%" y="437" width="0.0806%" height="15" fill="rgb(219,181,35)" fg:x="982" fg:w="1"/><text x="79.3797%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="79.1297%" y="421" width="0.0806%" height="15" fill="rgb(215,18,46)" fg:x="982" fg:w="1"/><text x="79.3797%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="79.2103%" y="469" width="0.0806%" height="15" fill="rgb(241,38,11)" fg:x="983" fg:w="1"/><text x="79.4603%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.2103%" y="453" width="0.0806%" height="15" fill="rgb(248,169,45)" fg:x="983" fg:w="1"/><text x="79.4603%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.2103%" y="437" width="0.0806%" height="15" fill="rgb(239,50,49)" fg:x="983" fg:w="1"/><text x="79.4603%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.2103%" y="421" width="0.0806%" height="15" fill="rgb(231,96,31)" fg:x="983" fg:w="1"/><text x="79.4603%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="79.2103%" y="501" width="0.1612%" height="15" fill="rgb(224,193,37)" fg:x="983" fg:w="2"/><text x="79.4603%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="79.2103%" y="485" width="0.1612%" height="15" fill="rgb(227,153,50)" fg:x="983" fg:w="2"/><text x="79.4603%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.2909%" y="469" width="0.0806%" height="15" fill="rgb(249,228,3)" fg:x="984" fg:w="1"/><text x="79.5409%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.2909%" y="453" width="0.0806%" height="15" fill="rgb(219,164,43)" fg:x="984" fg:w="1"/><text x="79.5409%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.2909%" y="437" width="0.0806%" height="15" fill="rgb(216,45,41)" fg:x="984" fg:w="1"/><text x="79.5409%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.3715%" y="501" width="0.0806%" height="15" fill="rgb(210,226,51)" fg:x="985" fg:w="1"/><text x="79.6215%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.3715%" y="485" width="0.0806%" height="15" fill="rgb(209,117,49)" fg:x="985" fg:w="1"/><text x="79.6215%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.3715%" y="469" width="0.0806%" height="15" fill="rgb(206,196,24)" fg:x="985" fg:w="1"/><text x="79.6215%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.3715%" y="453" width="0.0806%" height="15" fill="rgb(253,218,3)" fg:x="985" fg:w="1"/><text x="79.6215%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="79.2103%" y="517" width="0.3223%" height="15" fill="rgb(252,166,2)" fg:x="983" fg:w="4"/><text x="79.4603%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="79.4521%" y="501" width="0.0806%" height="15" fill="rgb(236,218,26)" fg:x="986" fg:w="1"/><text x="79.7021%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="79.4521%" y="485" width="0.0806%" height="15" fill="rgb(254,84,19)" fg:x="986" fg:w="1"/><text x="79.7021%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.4521%" y="469" width="0.0806%" height="15" fill="rgb(219,137,29)" fg:x="986" fg:w="1"/><text x="79.7021%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.56%)</title><rect x="79.0492%" y="549" width="0.5641%" height="15" fill="rgb(227,47,52)" fg:x="981" fg:w="7"/><text x="79.2992%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="79.2103%" y="533" width="0.4029%" height="15" fill="rgb(229,167,24)" fg:x="983" fg:w="5"/><text x="79.4603%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.5326%" y="517" width="0.0806%" height="15" fill="rgb(233,164,1)" fg:x="987" fg:w="1"/><text x="79.7826%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.5326%" y="501" width="0.0806%" height="15" fill="rgb(218,88,48)" fg:x="987" fg:w="1"/><text x="79.7826%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.5326%" y="485" width="0.0806%" height="15" fill="rgb(226,214,24)" fg:x="987" fg:w="1"/><text x="79.7826%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="79.5326%" y="469" width="0.0806%" height="15" fill="rgb(233,29,12)" fg:x="987" fg:w="1"/><text x="79.7826%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.5326%" y="453" width="0.0806%" height="15" fill="rgb(219,120,34)" fg:x="987" fg:w="1"/><text x="79.7826%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="79.5326%" y="437" width="0.0806%" height="15" fill="rgb(226,78,44)" fg:x="987" fg:w="1"/><text x="79.7826%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.6132%" y="517" width="0.0806%" height="15" fill="rgb(240,15,48)" fg:x="988" fg:w="1"/><text x="79.8632%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="79.6132%" y="549" width="0.1612%" height="15" fill="rgb(253,176,7)" fg:x="988" fg:w="2"/><text x="79.8632%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="79.6132%" y="533" width="0.1612%" height="15" fill="rgb(206,166,28)" fg:x="988" fg:w="2"/><text x="79.8632%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.6938%" y="517" width="0.0806%" height="15" fill="rgb(241,53,51)" fg:x="989" fg:w="1"/><text x="79.9438%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="79.6938%" y="501" width="0.0806%" height="15" fill="rgb(249,112,30)" fg:x="989" fg:w="1"/><text x="79.9438%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.6938%" y="485" width="0.0806%" height="15" fill="rgb(217,85,30)" fg:x="989" fg:w="1"/><text x="79.9438%" y="495.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="79.7744%" y="453" width="0.0806%" height="15" fill="rgb(233,49,7)" fg:x="990" fg:w="1"/><text x="80.0244%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.8550%" y="453" width="0.0806%" height="15" fill="rgb(234,109,9)" fg:x="991" fg:w="1"/><text x="80.1050%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.8550%" y="437" width="0.0806%" height="15" fill="rgb(253,95,22)" fg:x="991" fg:w="1"/><text x="80.1050%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.8550%" y="421" width="0.0806%" height="15" fill="rgb(233,176,25)" fg:x="991" fg:w="1"/><text x="80.1050%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="80.0161%" y="421" width="0.1612%" height="15" fill="rgb(236,33,39)" fg:x="993" fg:w="2"/><text x="80.2661%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="80.0161%" y="405" width="0.1612%" height="15" fill="rgb(223,226,42)" fg:x="993" fg:w="2"/><text x="80.2661%" y="415.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="80.0161%" y="389" width="0.1612%" height="15" fill="rgb(216,99,33)" fg:x="993" fg:w="2"/><text x="80.2661%" y="399.50"></text></g><g><title>engine::session::Session::flush (17 samples, 1.37%)</title><rect x="78.8880%" y="645" width="1.3699%" height="15" fill="rgb(235,84,23)" fg:x="979" fg:w="17"/><text x="79.1380%" y="655.50"></text></g><g><title>engine::session::state::State::close (17 samples, 1.37%)</title><rect x="78.8880%" y="629" width="1.3699%" height="15" fill="rgb(232,2,27)" fg:x="979" fg:w="17"/><text x="79.1380%" y="639.50"></text></g><g><title>engine::session::state::State::flush_entities (17 samples, 1.37%)</title><rect x="78.8880%" y="613" width="1.3699%" height="15" fill="rgb(241,23,22)" fg:x="979" fg:w="17"/><text x="79.1380%" y="623.50"></text></g><g><title>core::iter::adapters::try_process (15 samples, 1.21%)</title><rect x="79.0492%" y="597" width="1.2087%" height="15" fill="rgb(211,73,27)" fg:x="981" fg:w="15"/><text x="79.2992%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (15 samples, 1.21%)</title><rect x="79.0492%" y="581" width="1.2087%" height="15" fill="rgb(235,109,49)" fg:x="981" fg:w="15"/><text x="79.2992%" y="591.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (15 samples, 1.21%)</title><rect x="79.0492%" y="565" width="1.2087%" height="15" fill="rgb(230,99,29)" fg:x="981" fg:w="15"/><text x="79.2992%" y="575.50"></text></g><g><title>kernel::model::any_entity_changes (6 samples, 0.48%)</title><rect x="79.7744%" y="549" width="0.4835%" height="15" fill="rgb(245,199,7)" fg:x="990" fg:w="6"/><text x="80.0244%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.48%)</title><rect x="79.7744%" y="533" width="0.4835%" height="15" fill="rgb(217,179,10)" fg:x="990" fg:w="6"/><text x="80.0244%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="79.7744%" y="517" width="0.4835%" height="15" fill="rgb(254,99,47)" fg:x="990" fg:w="6"/><text x="80.0244%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.48%)</title><rect x="79.7744%" y="501" width="0.4835%" height="15" fill="rgb(251,121,7)" fg:x="990" fg:w="6"/><text x="80.0244%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="79.7744%" y="485" width="0.4835%" height="15" fill="rgb(250,177,26)" fg:x="990" fg:w="6"/><text x="80.0244%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="79.7744%" y="469" width="0.4835%" height="15" fill="rgb(232,88,15)" fg:x="990" fg:w="6"/><text x="80.0244%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="79.9355%" y="453" width="0.3223%" height="15" fill="rgb(251,54,54)" fg:x="992" fg:w="4"/><text x="80.1855%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="80.0161%" y="437" width="0.2417%" height="15" fill="rgb(208,177,15)" fg:x="993" fg:w="3"/><text x="80.2661%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.1773%" y="421" width="0.0806%" height="15" fill="rgb(205,97,32)" fg:x="995" fg:w="1"/><text x="80.4273%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="80.2579%" y="613" width="0.0806%" height="15" fill="rgb(217,192,13)" fg:x="996" fg:w="1"/><text x="80.5079%" y="623.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="80.2579%" y="597" width="0.0806%" height="15" fill="rgb(215,163,41)" fg:x="996" fg:w="1"/><text x="80.5079%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="80.2579%" y="581" width="0.0806%" height="15" fill="rgb(246,83,29)" fg:x="996" fg:w="1"/><text x="80.5079%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="80.2579%" y="565" width="0.0806%" height="15" fill="rgb(219,2,45)" fg:x="996" fg:w="1"/><text x="80.5079%" y="575.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="80.3384%" y="613" width="0.0806%" height="15" fill="rgb(242,215,33)" fg:x="997" fg:w="1"/><text x="80.5884%" y="623.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="80.3384%" y="597" width="0.0806%" height="15" fill="rgb(217,1,6)" fg:x="997" fg:w="1"/><text x="80.5884%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.3384%" y="581" width="0.0806%" height="15" fill="rgb(207,85,52)" fg:x="997" fg:w="1"/><text x="80.5884%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.3384%" y="565" width="0.0806%" height="15" fill="rgb(231,171,19)" fg:x="997" fg:w="1"/><text x="80.5884%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.3384%" y="549" width="0.0806%" height="15" fill="rgb(207,128,4)" fg:x="997" fg:w="1"/><text x="80.5884%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="80.2579%" y="629" width="0.4029%" height="15" fill="rgb(219,208,4)" fg:x="996" fg:w="5"/><text x="80.5079%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="80.4190%" y="613" width="0.2417%" height="15" fill="rgb(235,161,42)" fg:x="998" fg:w="3"/><text x="80.6690%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="80.4996%" y="597" width="0.1612%" height="15" fill="rgb(247,218,18)" fg:x="999" fg:w="2"/><text x="80.7496%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="80.4996%" y="581" width="0.1612%" height="15" fill="rgb(232,114,51)" fg:x="999" fg:w="2"/><text x="80.7496%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="80.4996%" y="565" width="0.1612%" height="15" fill="rgb(222,95,3)" fg:x="999" fg:w="2"/><text x="80.7496%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="80.4996%" y="549" width="0.1612%" height="15" fill="rgb(240,65,29)" fg:x="999" fg:w="2"/><text x="80.7496%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="80.4996%" y="533" width="0.1612%" height="15" fill="rgb(249,209,20)" fg:x="999" fg:w="2"/><text x="80.7496%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="80.4996%" y="517" width="0.1612%" height="15" fill="rgb(241,48,37)" fg:x="999" fg:w="2"/><text x="80.7496%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="80.5802%" y="501" width="0.0806%" height="15" fill="rgb(230,140,42)" fg:x="1000" fg:w="1"/><text x="80.8302%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.5802%" y="485" width="0.0806%" height="15" fill="rgb(230,176,45)" fg:x="1000" fg:w="1"/><text x="80.8302%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="80.5802%" y="469" width="0.0806%" height="15" fill="rgb(245,112,21)" fg:x="1000" fg:w="1"/><text x="80.8302%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.5802%" y="453" width="0.0806%" height="15" fill="rgb(207,183,35)" fg:x="1000" fg:w="1"/><text x="80.8302%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.6608%" y="581" width="0.0806%" height="15" fill="rgb(227,44,33)" fg:x="1001" fg:w="1"/><text x="80.9108%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.6608%" y="565" width="0.0806%" height="15" fill="rgb(246,120,21)" fg:x="1001" fg:w="1"/><text x="80.9108%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.6608%" y="549" width="0.0806%" height="15" fill="rgb(235,57,52)" fg:x="1001" fg:w="1"/><text x="80.9108%" y="559.50"></text></g><g><title>plugins_core::build::Build::save (7 samples, 0.56%)</title><rect x="80.2579%" y="645" width="0.5641%" height="15" fill="rgb(238,84,10)" fg:x="996" fg:w="7"/><text x="80.5079%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="80.6608%" y="629" width="0.1612%" height="15" fill="rgb(251,200,32)" fg:x="1001" fg:w="2"/><text x="80.9108%" y="639.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="80.6608%" y="613" width="0.1612%" height="15" fill="rgb(247,159,13)" fg:x="1001" fg:w="2"/><text x="80.9108%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="80.6608%" y="597" width="0.1612%" height="15" fill="rgb(238,64,4)" fg:x="1001" fg:w="2"/><text x="80.9108%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="80.7413%" y="581" width="0.0806%" height="15" fill="rgb(221,131,51)" fg:x="1002" fg:w="1"/><text x="80.9913%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.7413%" y="565" width="0.0806%" height="15" fill="rgb(242,5,29)" fg:x="1002" fg:w="1"/><text x="80.9913%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="80.7413%" y="549" width="0.0806%" height="15" fill="rgb(214,130,32)" fg:x="1002" fg:w="1"/><text x="80.9913%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.7413%" y="533" width="0.0806%" height="15" fill="rgb(244,210,16)" fg:x="1002" fg:w="1"/><text x="80.9913%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="80.7413%" y="517" width="0.0806%" height="15" fill="rgb(234,48,26)" fg:x="1002" fg:w="1"/><text x="80.9913%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.7413%" y="501" width="0.0806%" height="15" fill="rgb(231,82,38)" fg:x="1002" fg:w="1"/><text x="80.9913%" y="511.50"></text></g><g><title>serde_json::value::de::BorrowedCowStrDeserializer::new (1 samples, 0.08%)</title><rect x="80.7413%" y="485" width="0.0806%" height="15" fill="rgb(254,128,41)" fg:x="1002" fg:w="1"/><text x="80.9913%" y="495.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="80.8219%" y="597" width="0.0806%" height="15" fill="rgb(212,73,49)" fg:x="1003" fg:w="1"/><text x="81.0719%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.8219%" y="581" width="0.0806%" height="15" fill="rgb(205,62,54)" fg:x="1003" fg:w="1"/><text x="81.0719%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.8219%" y="565" width="0.0806%" height="15" fill="rgb(228,0,8)" fg:x="1003" fg:w="1"/><text x="81.0719%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.8219%" y="549" width="0.0806%" height="15" fill="rgb(251,28,17)" fg:x="1003" fg:w="1"/><text x="81.0719%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.8219%" y="533" width="0.0806%" height="15" fill="rgb(238,105,27)" fg:x="1003" fg:w="1"/><text x="81.0719%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.8219%" y="517" width="0.0806%" height="15" fill="rgb(237,216,33)" fg:x="1003" fg:w="1"/><text x="81.0719%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.8219%" y="501" width="0.0806%" height="15" fill="rgb(229,228,25)" fg:x="1003" fg:w="1"/><text x="81.0719%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="80.8219%" y="485" width="0.0806%" height="15" fill="rgb(233,75,23)" fg:x="1003" fg:w="1"/><text x="81.0719%" y="495.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="80.8219%" y="613" width="0.1612%" height="15" fill="rgb(231,207,16)" fg:x="1003" fg:w="2"/><text x="81.0719%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="80.9025%" y="597" width="0.0806%" height="15" fill="rgb(231,191,45)" fg:x="1004" fg:w="1"/><text x="81.1525%" y="607.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="80.9025%" y="581" width="0.0806%" height="15" fill="rgb(224,133,17)" fg:x="1004" fg:w="1"/><text x="81.1525%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="80.9025%" y="565" width="0.0806%" height="15" fill="rgb(209,178,27)" fg:x="1004" fg:w="1"/><text x="81.1525%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="80.9025%" y="549" width="0.0806%" height="15" fill="rgb(218,37,11)" fg:x="1004" fg:w="1"/><text x="81.1525%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="80.9025%" y="533" width="0.0806%" height="15" fill="rgb(251,226,25)" fg:x="1004" fg:w="1"/><text x="81.1525%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="80.9025%" y="517" width="0.0806%" height="15" fill="rgb(209,222,27)" fg:x="1004" fg:w="1"/><text x="81.1525%" y="527.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (3 samples, 0.24%)</title><rect x="80.8219%" y="645" width="0.2417%" height="15" fill="rgb(238,22,21)" fg:x="1003" fg:w="3"/><text x="81.0719%" y="655.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="80.8219%" y="629" width="0.2417%" height="15" fill="rgb(233,161,25)" fg:x="1003" fg:w="3"/><text x="81.0719%" y="639.50"></text></g><g><title>plugins_core::location::Location::set (1 samples, 0.08%)</title><rect x="80.9831%" y="613" width="0.0806%" height="15" fill="rgb(226,122,53)" fg:x="1005" fg:w="1"/><text x="81.2331%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="80.9831%" y="597" width="0.0806%" height="15" fill="rgb(220,123,17)" fg:x="1005" fg:w="1"/><text x="81.2331%" y="607.50"></text></g><g><title>plugins_core::location::_::&lt;impl serde::ser::Serialize for plugins_core::location::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="80.9831%" y="581" width="0.0806%" height="15" fill="rgb(230,224,35)" fg:x="1005" fg:w="1"/><text x="81.2331%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.9831%" y="565" width="0.0806%" height="15" fill="rgb(246,83,8)" fg:x="1005" fg:w="1"/><text x="81.2331%" y="575.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="80.9831%" y="549" width="0.0806%" height="15" fill="rgb(230,214,17)" fg:x="1005" fg:w="1"/><text x="81.2331%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.9831%" y="533" width="0.0806%" height="15" fill="rgb(222,97,18)" fg:x="1005" fg:w="1"/><text x="81.2331%" y="543.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="81.0637%" y="629" width="0.0806%" height="15" fill="rgb(206,79,1)" fg:x="1006" fg:w="1"/><text x="81.3137%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="81.0637%" y="613" width="0.0806%" height="15" fill="rgb(214,121,34)" fg:x="1006" fg:w="1"/><text x="81.3137%" y="623.50"></text></g><g><title>engine::users::model::_::&lt;impl serde::ser::Serialize for engine::users::model::Usernames&gt;::serialize (1 samples, 0.08%)</title><rect x="81.0637%" y="597" width="0.0806%" height="15" fill="rgb(249,199,46)" fg:x="1006" fg:w="1"/><text x="81.3137%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.0637%" y="581" width="0.0806%" height="15" fill="rgb(214,222,46)" fg:x="1006" fg:w="1"/><text x="81.3137%" y="591.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="81.1442%" y="629" width="0.0806%" height="15" fill="rgb(248,168,30)" fg:x="1007" fg:w="1"/><text x="81.3942%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="81.1442%" y="613" width="0.0806%" height="15" fill="rgb(226,14,28)" fg:x="1007" fg:w="1"/><text x="81.3942%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="81.1442%" y="597" width="0.0806%" height="15" fill="rgb(253,123,1)" fg:x="1007" fg:w="1"/><text x="81.3942%" y="607.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="81.1442%" y="581" width="0.0806%" height="15" fill="rgb(225,24,42)" fg:x="1007" fg:w="1"/><text x="81.3942%" y="591.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="81.1442%" y="565" width="0.0806%" height="15" fill="rgb(216,161,37)" fg:x="1007" fg:w="1"/><text x="81.3942%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.1442%" y="549" width="0.0806%" height="15" fill="rgb(251,164,26)" fg:x="1007" fg:w="1"/><text x="81.3942%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.1442%" y="533" width="0.0806%" height="15" fill="rgb(219,177,3)" fg:x="1007" fg:w="1"/><text x="81.3942%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="81.1442%" y="517" width="0.0806%" height="15" fill="rgb(222,65,0)" fg:x="1007" fg:w="1"/><text x="81.3942%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="81.1442%" y="501" width="0.0806%" height="15" fill="rgb(223,69,54)" fg:x="1007" fg:w="1"/><text x="81.3942%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="81.1442%" y="485" width="0.0806%" height="15" fill="rgb(235,30,27)" fg:x="1007" fg:w="1"/><text x="81.3942%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="81.1442%" y="469" width="0.0806%" height="15" fill="rgb(220,183,50)" fg:x="1007" fg:w="1"/><text x="81.3942%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="81.1442%" y="453" width="0.0806%" height="15" fill="rgb(248,198,15)" fg:x="1007" fg:w="1"/><text x="81.3942%" y="463.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="81.2248%" y="613" width="0.0806%" height="15" fill="rgb(222,211,4)" fg:x="1008" fg:w="1"/><text x="81.4748%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.2248%" y="597" width="0.0806%" height="15" fill="rgb(214,102,34)" fg:x="1008" fg:w="1"/><text x="81.4748%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.2248%" y="581" width="0.0806%" height="15" fill="rgb(245,92,5)" fg:x="1008" fg:w="1"/><text x="81.4748%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="81.2248%" y="565" width="0.0806%" height="15" fill="rgb(252,72,51)" fg:x="1008" fg:w="1"/><text x="81.4748%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="81.3054%" y="533" width="0.0806%" height="15" fill="rgb(252,208,19)" fg:x="1009" fg:w="1"/><text x="81.5554%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.3054%" y="517" width="0.0806%" height="15" fill="rgb(211,69,7)" fg:x="1009" fg:w="1"/><text x="81.5554%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="81.3054%" y="501" width="0.0806%" height="15" fill="rgb(211,27,16)" fg:x="1009" fg:w="1"/><text x="81.5554%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="81.3860%" y="485" width="0.0806%" height="15" fill="rgb(219,216,14)" fg:x="1010" fg:w="1"/><text x="81.6360%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="81.4666%" y="469" width="0.0806%" height="15" fill="rgb(219,71,8)" fg:x="1011" fg:w="1"/><text x="81.7166%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="81.4666%" y="453" width="0.0806%" height="15" fill="rgb(223,170,53)" fg:x="1011" fg:w="1"/><text x="81.7166%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="81.4666%" y="437" width="0.0806%" height="15" fill="rgb(246,21,26)" fg:x="1011" fg:w="1"/><text x="81.7166%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.4666%" y="421" width="0.0806%" height="15" fill="rgb(248,20,46)" fg:x="1011" fg:w="1"/><text x="81.7166%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="81.4666%" y="405" width="0.0806%" height="15" fill="rgb(252,94,11)" fg:x="1011" fg:w="1"/><text x="81.7166%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.4666%" y="389" width="0.0806%" height="15" fill="rgb(236,163,8)" fg:x="1011" fg:w="1"/><text x="81.7166%" y="399.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="81.5471%" y="437" width="0.0806%" height="15" fill="rgb(217,221,45)" fg:x="1012" fg:w="1"/><text x="81.7971%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.5471%" y="421" width="0.0806%" height="15" fill="rgb(238,38,17)" fg:x="1012" fg:w="1"/><text x="81.7971%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="81.5471%" y="405" width="0.0806%" height="15" fill="rgb(242,210,23)" fg:x="1012" fg:w="1"/><text x="81.7971%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.5471%" y="389" width="0.0806%" height="15" fill="rgb(250,86,53)" fg:x="1012" fg:w="1"/><text x="81.7971%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="81.6277%" y="437" width="0.0806%" height="15" fill="rgb(223,168,25)" fg:x="1013" fg:w="1"/><text x="81.8777%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="81.6277%" y="421" width="0.0806%" height="15" fill="rgb(251,189,4)" fg:x="1013" fg:w="1"/><text x="81.8777%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.6277%" y="405" width="0.0806%" height="15" fill="rgb(245,19,28)" fg:x="1013" fg:w="1"/><text x="81.8777%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="81.6277%" y="389" width="0.0806%" height="15" fill="rgb(207,10,34)" fg:x="1013" fg:w="1"/><text x="81.8777%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="81.5471%" y="469" width="0.2417%" height="15" fill="rgb(235,153,31)" fg:x="1012" fg:w="3"/><text x="81.7971%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="81.5471%" y="453" width="0.2417%" height="15" fill="rgb(228,72,37)" fg:x="1012" fg:w="3"/><text x="81.7971%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.7083%" y="437" width="0.0806%" height="15" fill="rgb(215,15,16)" fg:x="1014" fg:w="1"/><text x="81.9583%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="81.7083%" y="421" width="0.0806%" height="15" fill="rgb(250,119,29)" fg:x="1014" fg:w="1"/><text x="81.9583%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.48%)</title><rect x="81.3860%" y="517" width="0.4835%" height="15" fill="rgb(214,59,1)" fg:x="1010" fg:w="6"/><text x="81.6360%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="81.3860%" y="501" width="0.4835%" height="15" fill="rgb(223,109,25)" fg:x="1010" fg:w="6"/><text x="81.6360%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="81.4666%" y="485" width="0.4029%" height="15" fill="rgb(230,198,22)" fg:x="1011" fg:w="5"/><text x="81.7166%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.7889%" y="469" width="0.0806%" height="15" fill="rgb(245,184,46)" fg:x="1015" fg:w="1"/><text x="82.0389%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.9500%" y="437" width="0.0806%" height="15" fill="rgb(253,73,16)" fg:x="1017" fg:w="1"/><text x="82.2000%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="81.8695%" y="517" width="0.2417%" height="15" fill="rgb(206,94,45)" fg:x="1016" fg:w="3"/><text x="82.1195%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="81.8695%" y="501" width="0.2417%" height="15" fill="rgb(236,83,27)" fg:x="1016" fg:w="3"/><text x="82.1195%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="81.8695%" y="485" width="0.2417%" height="15" fill="rgb(220,196,8)" fg:x="1016" fg:w="3"/><text x="82.1195%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="81.9500%" y="469" width="0.1612%" height="15" fill="rgb(254,185,14)" fg:x="1017" fg:w="2"/><text x="82.2000%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="81.9500%" y="453" width="0.1612%" height="15" fill="rgb(226,50,22)" fg:x="1017" fg:w="2"/><text x="82.2000%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="82.0306%" y="437" width="0.0806%" height="15" fill="rgb(253,147,0)" fg:x="1018" fg:w="1"/><text x="82.2806%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="82.0306%" y="421" width="0.0806%" height="15" fill="rgb(252,46,33)" fg:x="1018" fg:w="1"/><text x="82.2806%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="82.0306%" y="405" width="0.0806%" height="15" fill="rgb(242,22,54)" fg:x="1018" fg:w="1"/><text x="82.2806%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.0306%" y="389" width="0.0806%" height="15" fill="rgb(223,178,32)" fg:x="1018" fg:w="1"/><text x="82.2806%" y="399.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="82.1112%" y="469" width="0.0806%" height="15" fill="rgb(214,106,53)" fg:x="1019" fg:w="1"/><text x="82.3612%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="82.1112%" y="453" width="0.0806%" height="15" fill="rgb(232,65,50)" fg:x="1019" fg:w="1"/><text x="82.3612%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.1112%" y="437" width="0.0806%" height="15" fill="rgb(231,110,28)" fg:x="1019" fg:w="1"/><text x="82.3612%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.1112%" y="421" width="0.0806%" height="15" fill="rgb(216,71,40)" fg:x="1019" fg:w="1"/><text x="82.3612%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="82.2724%" y="437" width="0.0806%" height="15" fill="rgb(229,89,53)" fg:x="1021" fg:w="1"/><text x="82.5224%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="82.3529%" y="437" width="0.2417%" height="15" fill="rgb(210,124,14)" fg:x="1022" fg:w="3"/><text x="82.6029%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="82.3529%" y="421" width="0.2417%" height="15" fill="rgb(236,213,6)" fg:x="1022" fg:w="3"/><text x="82.6029%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="82.3529%" y="405" width="0.2417%" height="15" fill="rgb(228,41,5)" fg:x="1022" fg:w="3"/><text x="82.6029%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="82.3529%" y="389" width="0.2417%" height="15" fill="rgb(221,167,25)" fg:x="1022" fg:w="3"/><text x="82.6029%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="82.3529%" y="373" width="0.2417%" height="15" fill="rgb(228,144,37)" fg:x="1022" fg:w="3"/><text x="82.6029%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="82.3529%" y="357" width="0.2417%" height="15" fill="rgb(227,189,38)" fg:x="1022" fg:w="3"/><text x="82.6029%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="82.3529%" y="341" width="0.2417%" height="15" fill="rgb(218,8,2)" fg:x="1022" fg:w="3"/><text x="82.6029%" y="351.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="82.4335%" y="325" width="0.1612%" height="15" fill="rgb(209,61,28)" fg:x="1023" fg:w="2"/><text x="82.6835%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="82.1918%" y="453" width="0.4835%" height="15" fill="rgb(233,140,39)" fg:x="1020" fg:w="6"/><text x="82.4418%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="82.5947%" y="437" width="0.0806%" height="15" fill="rgb(251,66,48)" fg:x="1025" fg:w="1"/><text x="82.8447%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.5947%" y="421" width="0.0806%" height="15" fill="rgb(210,44,45)" fg:x="1025" fg:w="1"/><text x="82.8447%" y="431.50"></text></g><g><title>engine::session::Session::flush (19 samples, 1.53%)</title><rect x="81.2248%" y="629" width="1.5310%" height="15" fill="rgb(214,136,46)" fg:x="1008" fg:w="19"/><text x="81.4748%" y="639.50"></text></g><g><title>engine::session::Session::save_changes (18 samples, 1.45%)</title><rect x="81.3054%" y="613" width="1.4504%" height="15" fill="rgb(207,130,50)" fg:x="1009" fg:w="18"/><text x="81.5554%" y="623.50"></text></g><g><title>engine::session::state::State::close (18 samples, 1.45%)</title><rect x="81.3054%" y="597" width="1.4504%" height="15" fill="rgb(228,102,49)" fg:x="1009" fg:w="18"/><text x="81.5554%" y="607.50"></text></g><g><title>engine::session::state::State::flush_entities (18 samples, 1.45%)</title><rect x="81.3054%" y="581" width="1.4504%" height="15" fill="rgb(253,55,1)" fg:x="1009" fg:w="18"/><text x="81.5554%" y="591.50"></text></g><g><title>core::iter::adapters::try_process (18 samples, 1.45%)</title><rect x="81.3054%" y="565" width="1.4504%" height="15" fill="rgb(238,222,9)" fg:x="1009" fg:w="18"/><text x="81.5554%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (18 samples, 1.45%)</title><rect x="81.3054%" y="549" width="1.4504%" height="15" fill="rgb(246,99,6)" fg:x="1009" fg:w="18"/><text x="81.5554%" y="559.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (17 samples, 1.37%)</title><rect x="81.3860%" y="533" width="1.3699%" height="15" fill="rgb(219,110,26)" fg:x="1010" fg:w="17"/><text x="81.6360%" y="543.50"></text></g><g><title>kernel::model::any_entity_changes (8 samples, 0.64%)</title><rect x="82.1112%" y="517" width="0.6446%" height="15" fill="rgb(239,160,33)" fg:x="1019" fg:w="8"/><text x="82.3612%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.64%)</title><rect x="82.1112%" y="501" width="0.6446%" height="15" fill="rgb(220,202,23)" fg:x="1019" fg:w="8"/><text x="82.3612%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.64%)</title><rect x="82.1112%" y="485" width="0.6446%" height="15" fill="rgb(208,80,26)" fg:x="1019" fg:w="8"/><text x="82.3612%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.56%)</title><rect x="82.1918%" y="469" width="0.5641%" height="15" fill="rgb(243,85,7)" fg:x="1020" fg:w="7"/><text x="82.4418%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.6753%" y="453" width="0.0806%" height="15" fill="rgb(228,77,47)" fg:x="1026" fg:w="1"/><text x="82.9253%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.6753%" y="437" width="0.0806%" height="15" fill="rgb(212,226,8)" fg:x="1026" fg:w="1"/><text x="82.9253%" y="447.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="82.6753%" y="421" width="0.0806%" height="15" fill="rgb(241,120,54)" fg:x="1026" fg:w="1"/><text x="82.9253%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="82.7558%" y="597" width="0.1612%" height="15" fill="rgb(226,80,16)" fg:x="1027" fg:w="2"/><text x="83.0058%" y="607.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="82.7558%" y="581" width="0.1612%" height="15" fill="rgb(240,76,13)" fg:x="1027" fg:w="2"/><text x="83.0058%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="82.7558%" y="565" width="0.1612%" height="15" fill="rgb(252,74,8)" fg:x="1027" fg:w="2"/><text x="83.0058%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="82.7558%" y="549" width="0.1612%" height="15" fill="rgb(244,155,2)" fg:x="1027" fg:w="2"/><text x="83.0058%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="82.7558%" y="533" width="0.1612%" height="15" fill="rgb(215,81,35)" fg:x="1027" fg:w="2"/><text x="83.0058%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.8364%" y="517" width="0.0806%" height="15" fill="rgb(206,55,2)" fg:x="1028" fg:w="1"/><text x="83.0864%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="82.8364%" y="501" width="0.0806%" height="15" fill="rgb(231,2,34)" fg:x="1028" fg:w="1"/><text x="83.0864%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="82.8364%" y="485" width="0.0806%" height="15" fill="rgb(242,176,48)" fg:x="1028" fg:w="1"/><text x="83.0864%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="82.8364%" y="469" width="0.0806%" height="15" fill="rgb(249,31,36)" fg:x="1028" fg:w="1"/><text x="83.0864%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="82.8364%" y="453" width="0.0806%" height="15" fill="rgb(205,18,17)" fg:x="1028" fg:w="1"/><text x="83.0864%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="82.8364%" y="437" width="0.0806%" height="15" fill="rgb(254,130,5)" fg:x="1028" fg:w="1"/><text x="83.0864%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="82.8364%" y="421" width="0.0806%" height="15" fill="rgb(229,42,45)" fg:x="1028" fg:w="1"/><text x="83.0864%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="82.8364%" y="405" width="0.0806%" height="15" fill="rgb(245,95,25)" fg:x="1028" fg:w="1"/><text x="83.0864%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="82.8364%" y="389" width="0.0806%" height="15" fill="rgb(249,193,38)" fg:x="1028" fg:w="1"/><text x="83.0864%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="82.8364%" y="373" width="0.0806%" height="15" fill="rgb(241,140,43)" fg:x="1028" fg:w="1"/><text x="83.0864%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="82.8364%" y="357" width="0.0806%" height="15" fill="rgb(245,78,48)" fg:x="1028" fg:w="1"/><text x="83.0864%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="82.8364%" y="341" width="0.0806%" height="15" fill="rgb(214,92,39)" fg:x="1028" fg:w="1"/><text x="83.0864%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.8364%" y="325" width="0.0806%" height="15" fill="rgb(211,189,14)" fg:x="1028" fg:w="1"/><text x="83.0864%" y="335.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="82.9170%" y="581" width="0.0806%" height="15" fill="rgb(218,7,24)" fg:x="1029" fg:w="1"/><text x="83.1670%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="82.9170%" y="565" width="0.0806%" height="15" fill="rgb(224,200,49)" fg:x="1029" fg:w="1"/><text x="83.1670%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="82.9170%" y="549" width="0.0806%" height="15" fill="rgb(218,210,14)" fg:x="1029" fg:w="1"/><text x="83.1670%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="82.9170%" y="533" width="0.0806%" height="15" fill="rgb(234,142,31)" fg:x="1029" fg:w="1"/><text x="83.1670%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.9170%" y="517" width="0.0806%" height="15" fill="rgb(227,165,2)" fg:x="1029" fg:w="1"/><text x="83.1670%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.9170%" y="501" width="0.0806%" height="15" fill="rgb(232,44,46)" fg:x="1029" fg:w="1"/><text x="83.1670%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.9170%" y="485" width="0.0806%" height="15" fill="rgb(236,149,47)" fg:x="1029" fg:w="1"/><text x="83.1670%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="82.7558%" y="613" width="0.3223%" height="15" fill="rgb(227,45,31)" fg:x="1027" fg:w="4"/><text x="83.0058%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="82.9170%" y="597" width="0.1612%" height="15" fill="rgb(240,176,51)" fg:x="1029" fg:w="2"/><text x="83.1670%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="82.9976%" y="581" width="0.0806%" height="15" fill="rgb(249,146,41)" fg:x="1030" fg:w="1"/><text x="83.2476%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="82.9976%" y="565" width="0.0806%" height="15" fill="rgb(213,208,4)" fg:x="1030" fg:w="1"/><text x="83.2476%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="82.9976%" y="549" width="0.0806%" height="15" fill="rgb(245,84,36)" fg:x="1030" fg:w="1"/><text x="83.2476%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="82.9976%" y="533" width="0.0806%" height="15" fill="rgb(254,84,18)" fg:x="1030" fg:w="1"/><text x="83.2476%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="82.9976%" y="517" width="0.0806%" height="15" fill="rgb(225,38,54)" fg:x="1030" fg:w="1"/><text x="83.2476%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="82.9976%" y="501" width="0.0806%" height="15" fill="rgb(246,50,30)" fg:x="1030" fg:w="1"/><text x="83.2476%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="82.9976%" y="485" width="0.0806%" height="15" fill="rgb(246,148,9)" fg:x="1030" fg:w="1"/><text x="83.2476%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="82.9976%" y="469" width="0.0806%" height="15" fill="rgb(223,75,4)" fg:x="1030" fg:w="1"/><text x="83.2476%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="82.9976%" y="453" width="0.0806%" height="15" fill="rgb(239,148,41)" fg:x="1030" fg:w="1"/><text x="83.2476%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="82.9976%" y="437" width="0.0806%" height="15" fill="rgb(205,195,3)" fg:x="1030" fg:w="1"/><text x="83.2476%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.9976%" y="421" width="0.0806%" height="15" fill="rgb(254,161,1)" fg:x="1030" fg:w="1"/><text x="83.2476%" y="431.50"></text></g><g><title>plugins_core::build::Build::save (5 samples, 0.40%)</title><rect x="82.7558%" y="629" width="0.4029%" height="15" fill="rgb(211,229,8)" fg:x="1027" fg:w="5"/><text x="83.0058%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="83.0782%" y="613" width="0.0806%" height="15" fill="rgb(220,97,9)" fg:x="1031" fg:w="1"/><text x="83.3282%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="83.0782%" y="597" width="0.0806%" height="15" fill="rgb(240,218,8)" fg:x="1031" fg:w="1"/><text x="83.3282%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="83.0782%" y="581" width="0.0806%" height="15" fill="rgb(250,44,0)" fg:x="1031" fg:w="1"/><text x="83.3282%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.0782%" y="565" width="0.0806%" height="15" fill="rgb(236,41,53)" fg:x="1031" fg:w="1"/><text x="83.3282%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.0782%" y="549" width="0.0806%" height="15" fill="rgb(218,227,13)" fg:x="1031" fg:w="1"/><text x="83.3282%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.0782%" y="533" width="0.0806%" height="15" fill="rgb(217,94,32)" fg:x="1031" fg:w="1"/><text x="83.3282%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="83.0782%" y="517" width="0.0806%" height="15" fill="rgb(213,217,12)" fg:x="1031" fg:w="1"/><text x="83.3282%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="83.0782%" y="501" width="0.0806%" height="15" fill="rgb(229,13,46)" fg:x="1031" fg:w="1"/><text x="83.3282%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="83.0782%" y="485" width="0.0806%" height="15" fill="rgb(243,139,5)" fg:x="1031" fg:w="1"/><text x="83.3282%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="83.0782%" y="469" width="0.0806%" height="15" fill="rgb(249,38,45)" fg:x="1031" fg:w="1"/><text x="83.3282%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="83.0782%" y="453" width="0.0806%" height="15" fill="rgb(216,70,11)" fg:x="1031" fg:w="1"/><text x="83.3282%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="83.0782%" y="437" width="0.0806%" height="15" fill="rgb(253,101,25)" fg:x="1031" fg:w="1"/><text x="83.3282%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="83.0782%" y="421" width="0.0806%" height="15" fill="rgb(207,197,30)" fg:x="1031" fg:w="1"/><text x="83.3282%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="83.1587%" y="565" width="0.0806%" height="15" fill="rgb(238,87,13)" fg:x="1032" fg:w="1"/><text x="83.4087%" y="575.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (2 samples, 0.16%)</title><rect x="83.1587%" y="629" width="0.1612%" height="15" fill="rgb(215,155,8)" fg:x="1032" fg:w="2"/><text x="83.4087%" y="639.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="83.1587%" y="613" width="0.1612%" height="15" fill="rgb(239,166,38)" fg:x="1032" fg:w="2"/><text x="83.4087%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="83.1587%" y="597" width="0.1612%" height="15" fill="rgb(240,194,35)" fg:x="1032" fg:w="2"/><text x="83.4087%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="83.1587%" y="581" width="0.1612%" height="15" fill="rgb(219,10,44)" fg:x="1032" fg:w="2"/><text x="83.4087%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="83.2393%" y="565" width="0.0806%" height="15" fill="rgb(251,220,35)" fg:x="1033" fg:w="1"/><text x="83.4893%" y="575.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="83.2393%" y="549" width="0.0806%" height="15" fill="rgb(218,117,13)" fg:x="1033" fg:w="1"/><text x="83.4893%" y="559.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="83.2393%" y="533" width="0.0806%" height="15" fill="rgb(221,213,40)" fg:x="1033" fg:w="1"/><text x="83.4893%" y="543.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="83.2393%" y="517" width="0.0806%" height="15" fill="rgb(251,224,35)" fg:x="1033" fg:w="1"/><text x="83.4893%" y="527.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="83.3199%" y="629" width="0.0806%" height="15" fill="rgb(241,33,39)" fg:x="1034" fg:w="1"/><text x="83.5699%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="83.3199%" y="613" width="0.0806%" height="15" fill="rgb(222,74,17)" fg:x="1034" fg:w="1"/><text x="83.5699%" y="623.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="83.3199%" y="597" width="0.0806%" height="15" fill="rgb(225,103,0)" fg:x="1034" fg:w="1"/><text x="83.5699%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="83.3199%" y="581" width="0.0806%" height="15" fill="rgb(240,0,12)" fg:x="1034" fg:w="1"/><text x="83.5699%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="83.3199%" y="565" width="0.0806%" height="15" fill="rgb(233,213,37)" fg:x="1034" fg:w="1"/><text x="83.5699%" y="575.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="83.3199%" y="549" width="0.0806%" height="15" fill="rgb(225,84,52)" fg:x="1034" fg:w="1"/><text x="83.5699%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="83.3199%" y="533" width="0.0806%" height="15" fill="rgb(247,160,51)" fg:x="1034" fg:w="1"/><text x="83.5699%" y="543.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (30 samples, 2.42%)</title><rect x="81.0637%" y="645" width="2.4174%" height="15" fill="rgb(244,60,51)" fg:x="1006" fg:w="30"/><text x="81.3137%" y="655.50">pl..</text></g><g><title>plugins_core::tools::set_wearing (1 samples, 0.08%)</title><rect x="83.4005%" y="629" width="0.0806%" height="15" fill="rgb(233,114,7)" fg:x="1035" fg:w="1"/><text x="83.6505%" y="639.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="83.4811%" y="645" width="0.0806%" height="15" fill="rgb(246,136,16)" fg:x="1036" fg:w="1"/><text x="83.7311%" y="655.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="83.4811%" y="629" width="0.0806%" height="15" fill="rgb(243,114,45)" fg:x="1036" fg:w="1"/><text x="83.7311%" y="639.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="83.4811%" y="613" width="0.0806%" height="15" fill="rgb(247,183,43)" fg:x="1036" fg:w="1"/><text x="83.7311%" y="623.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="83.4811%" y="597" width="0.0806%" height="15" fill="rgb(251,210,42)" fg:x="1036" fg:w="1"/><text x="83.7311%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="83.4811%" y="581" width="0.0806%" height="15" fill="rgb(221,88,35)" fg:x="1036" fg:w="1"/><text x="83.7311%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="83.5616%" y="613" width="0.0806%" height="15" fill="rgb(242,21,20)" fg:x="1037" fg:w="1"/><text x="83.8116%" y="623.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="83.5616%" y="597" width="0.0806%" height="15" fill="rgb(233,226,36)" fg:x="1037" fg:w="1"/><text x="83.8116%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.5616%" y="581" width="0.0806%" height="15" fill="rgb(243,189,34)" fg:x="1037" fg:w="1"/><text x="83.8116%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="83.5616%" y="565" width="0.0806%" height="15" fill="rgb(207,145,50)" fg:x="1037" fg:w="1"/><text x="83.8116%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="83.5616%" y="549" width="0.0806%" height="15" fill="rgb(242,1,50)" fg:x="1037" fg:w="1"/><text x="83.8116%" y="559.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="83.6422%" y="613" width="0.0806%" height="15" fill="rgb(231,65,32)" fg:x="1038" fg:w="1"/><text x="83.8922%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.7228%" y="581" width="0.0806%" height="15" fill="rgb(208,68,49)" fg:x="1039" fg:w="1"/><text x="83.9728%" y="591.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (4 samples, 0.32%)</title><rect x="83.5616%" y="645" width="0.3223%" height="15" fill="rgb(253,54,49)" fg:x="1037" fg:w="4"/><text x="83.8116%" y="655.50"></text></g><g><title>plugins_core::build::QuickThing::make (4 samples, 0.32%)</title><rect x="83.5616%" y="629" width="0.3223%" height="15" fill="rgb(245,186,24)" fg:x="1037" fg:w="4"/><text x="83.8116%" y="639.50"></text></g><g><title>plugins_core::build::Build::save (2 samples, 0.16%)</title><rect x="83.7228%" y="613" width="0.1612%" height="15" fill="rgb(209,2,41)" fg:x="1039" fg:w="2"/><text x="83.9728%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="83.7228%" y="597" width="0.1612%" height="15" fill="rgb(242,208,54)" fg:x="1039" fg:w="2"/><text x="83.9728%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="83.8034%" y="581" width="0.0806%" height="15" fill="rgb(225,9,51)" fg:x="1040" fg:w="1"/><text x="84.0534%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="83.8034%" y="565" width="0.0806%" height="15" fill="rgb(207,207,25)" fg:x="1040" fg:w="1"/><text x="84.0534%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="83.8034%" y="549" width="0.0806%" height="15" fill="rgb(253,96,18)" fg:x="1040" fg:w="1"/><text x="84.0534%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.8034%" y="533" width="0.0806%" height="15" fill="rgb(252,215,20)" fg:x="1040" fg:w="1"/><text x="84.0534%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="83.8034%" y="517" width="0.0806%" height="15" fill="rgb(245,227,26)" fg:x="1040" fg:w="1"/><text x="84.0534%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.8034%" y="501" width="0.0806%" height="15" fill="rgb(241,208,0)" fg:x="1040" fg:w="1"/><text x="84.0534%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.8034%" y="485" width="0.0806%" height="15" fill="rgb(224,130,10)" fg:x="1040" fg:w="1"/><text x="84.0534%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="83.8034%" y="469" width="0.0806%" height="15" fill="rgb(237,29,0)" fg:x="1040" fg:w="1"/><text x="84.0534%" y="479.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (64 samples, 5.16%)</title><rect x="78.8074%" y="661" width="5.1571%" height="15" fill="rgb(219,27,41)" fg:x="978" fg:w="64"/><text x="79.0574%" y="671.50">&lt;tests..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (1 samples, 0.08%)</title><rect x="83.8840%" y="645" width="0.0806%" height="15" fill="rgb(245,101,19)" fg:x="1041" fg:w="1"/><text x="84.1340%" y="655.50"></text></g><g><title>plugins_core::build::Build::save (1 samples, 0.08%)</title><rect x="83.8840%" y="629" width="0.0806%" height="15" fill="rgb(243,44,37)" fg:x="1041" fg:w="1"/><text x="84.1340%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="83.8840%" y="613" width="0.0806%" height="15" fill="rgb(228,213,43)" fg:x="1041" fg:w="1"/><text x="84.1340%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="83.8840%" y="597" width="0.0806%" height="15" fill="rgb(219,163,21)" fg:x="1041" fg:w="1"/><text x="84.1340%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="83.8840%" y="581" width="0.0806%" height="15" fill="rgb(234,86,24)" fg:x="1041" fg:w="1"/><text x="84.1340%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="83.8840%" y="565" width="0.0806%" height="15" fill="rgb(225,10,24)" fg:x="1041" fg:w="1"/><text x="84.1340%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="83.8840%" y="549" width="0.0806%" height="15" fill="rgb(218,109,7)" fg:x="1041" fg:w="1"/><text x="84.1340%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="83.8840%" y="533" width="0.0806%" height="15" fill="rgb(210,20,26)" fg:x="1041" fg:w="1"/><text x="84.1340%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="83.8840%" y="517" width="0.0806%" height="15" fill="rgb(216,18,1)" fg:x="1041" fg:w="1"/><text x="84.1340%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="83.9645%" y="661" width="0.0806%" height="15" fill="rgb(206,163,23)" fg:x="1042" fg:w="1"/><text x="84.2145%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.9645%" y="645" width="0.0806%" height="15" fill="rgb(229,150,31)" fg:x="1042" fg:w="1"/><text x="84.2145%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="84.0451%" y="645" width="0.0806%" height="15" fill="rgb(231,10,5)" fg:x="1043" fg:w="1"/><text x="84.2951%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="84.0451%" y="629" width="0.0806%" height="15" fill="rgb(250,40,50)" fg:x="1043" fg:w="1"/><text x="84.2951%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="84.0451%" y="613" width="0.0806%" height="15" fill="rgb(217,119,7)" fg:x="1043" fg:w="1"/><text x="84.2951%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="84.0451%" y="597" width="0.0806%" height="15" fill="rgb(245,214,40)" fg:x="1043" fg:w="1"/><text x="84.2951%" y="607.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="84.0451%" y="581" width="0.0806%" height="15" fill="rgb(216,187,1)" fg:x="1043" fg:w="1"/><text x="84.2951%" y="591.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="84.0451%" y="565" width="0.0806%" height="15" fill="rgb(237,146,21)" fg:x="1043" fg:w="1"/><text x="84.2951%" y="575.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="84.0451%" y="549" width="0.0806%" height="15" fill="rgb(210,174,47)" fg:x="1043" fg:w="1"/><text x="84.2951%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="84.0451%" y="533" width="0.0806%" height="15" fill="rgb(218,111,39)" fg:x="1043" fg:w="1"/><text x="84.2951%" y="543.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="84.1257%" y="613" width="0.0806%" height="15" fill="rgb(224,95,19)" fg:x="1044" fg:w="1"/><text x="84.3757%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="84.1257%" y="597" width="0.0806%" height="15" fill="rgb(234,15,38)" fg:x="1044" fg:w="1"/><text x="84.3757%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="84.2063%" y="533" width="0.1612%" height="15" fill="rgb(246,56,12)" fg:x="1045" fg:w="2"/><text x="84.4563%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="84.2063%" y="517" width="0.1612%" height="15" fill="rgb(247,16,17)" fg:x="1045" fg:w="2"/><text x="84.4563%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="84.4480%" y="485" width="0.0806%" height="15" fill="rgb(215,151,11)" fg:x="1048" fg:w="1"/><text x="84.6980%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="84.4480%" y="469" width="0.0806%" height="15" fill="rgb(225,16,24)" fg:x="1048" fg:w="1"/><text x="84.6980%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="84.4480%" y="453" width="0.0806%" height="15" fill="rgb(217,117,5)" fg:x="1048" fg:w="1"/><text x="84.6980%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="84.4480%" y="437" width="0.0806%" height="15" fill="rgb(246,187,53)" fg:x="1048" fg:w="1"/><text x="84.6980%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="84.4480%" y="421" width="0.0806%" height="15" fill="rgb(241,71,40)" fg:x="1048" fg:w="1"/><text x="84.6980%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.4480%" y="405" width="0.0806%" height="15" fill="rgb(231,67,39)" fg:x="1048" fg:w="1"/><text x="84.6980%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="84.4480%" y="389" width="0.0806%" height="15" fill="rgb(222,120,24)" fg:x="1048" fg:w="1"/><text x="84.6980%" y="399.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="84.5286%" y="469" width="0.0806%" height="15" fill="rgb(248,3,3)" fg:x="1049" fg:w="1"/><text x="84.7786%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="84.5286%" y="453" width="0.0806%" height="15" fill="rgb(228,218,5)" fg:x="1049" fg:w="1"/><text x="84.7786%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="84.3674%" y="517" width="0.3223%" height="15" fill="rgb(212,202,43)" fg:x="1047" fg:w="4"/><text x="84.6174%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="84.3674%" y="501" width="0.3223%" height="15" fill="rgb(235,183,2)" fg:x="1047" fg:w="4"/><text x="84.6174%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="84.5286%" y="485" width="0.1612%" height="15" fill="rgb(230,165,10)" fg:x="1049" fg:w="2"/><text x="84.7786%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="84.6092%" y="469" width="0.0806%" height="15" fill="rgb(219,54,40)" fg:x="1050" fg:w="1"/><text x="84.8592%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="84.6092%" y="453" width="0.0806%" height="15" fill="rgb(244,73,9)" fg:x="1050" fg:w="1"/><text x="84.8592%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="84.6092%" y="437" width="0.0806%" height="15" fill="rgb(212,32,45)" fg:x="1050" fg:w="1"/><text x="84.8592%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="84.6092%" y="421" width="0.0806%" height="15" fill="rgb(205,58,31)" fg:x="1050" fg:w="1"/><text x="84.8592%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="84.6092%" y="405" width="0.0806%" height="15" fill="rgb(250,120,43)" fg:x="1050" fg:w="1"/><text x="84.8592%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="84.6898%" y="517" width="0.1612%" height="15" fill="rgb(235,13,10)" fg:x="1051" fg:w="2"/><text x="84.9398%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="84.6898%" y="501" width="0.1612%" height="15" fill="rgb(232,219,31)" fg:x="1051" fg:w="2"/><text x="84.9398%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="84.7703%" y="485" width="0.0806%" height="15" fill="rgb(218,157,51)" fg:x="1052" fg:w="1"/><text x="85.0203%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="84.7703%" y="469" width="0.0806%" height="15" fill="rgb(211,91,52)" fg:x="1052" fg:w="1"/><text x="85.0203%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="84.8509%" y="485" width="0.0806%" height="15" fill="rgb(240,173,1)" fg:x="1053" fg:w="1"/><text x="85.1009%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="84.9315%" y="485" width="0.1612%" height="15" fill="rgb(248,20,47)" fg:x="1054" fg:w="2"/><text x="85.1815%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="85.0121%" y="469" width="0.0806%" height="15" fill="rgb(217,221,40)" fg:x="1055" fg:w="1"/><text x="85.2621%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="85.0121%" y="453" width="0.0806%" height="15" fill="rgb(226,149,51)" fg:x="1055" fg:w="1"/><text x="85.2621%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="85.0121%" y="437" width="0.0806%" height="15" fill="rgb(252,193,7)" fg:x="1055" fg:w="1"/><text x="85.2621%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="85.0121%" y="421" width="0.0806%" height="15" fill="rgb(205,123,0)" fg:x="1055" fg:w="1"/><text x="85.2621%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.0121%" y="405" width="0.0806%" height="15" fill="rgb(233,173,25)" fg:x="1055" fg:w="1"/><text x="85.2621%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="85.0121%" y="389" width="0.0806%" height="15" fill="rgb(216,63,32)" fg:x="1055" fg:w="1"/><text x="85.2621%" y="399.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (12 samples, 0.97%)</title><rect x="84.2063%" y="565" width="0.9670%" height="15" fill="rgb(209,56,45)" fg:x="1045" fg:w="12"/><text x="84.4563%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.97%)</title><rect x="84.2063%" y="549" width="0.9670%" height="15" fill="rgb(226,111,49)" fg:x="1045" fg:w="12"/><text x="84.4563%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.81%)</title><rect x="84.3674%" y="533" width="0.8058%" height="15" fill="rgb(244,181,21)" fg:x="1047" fg:w="10"/><text x="84.6174%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="84.8509%" y="517" width="0.3223%" height="15" fill="rgb(222,126,15)" fg:x="1053" fg:w="4"/><text x="85.1009%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="84.8509%" y="501" width="0.3223%" height="15" fill="rgb(222,95,17)" fg:x="1053" fg:w="4"/><text x="85.1009%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="85.0927%" y="485" width="0.0806%" height="15" fill="rgb(254,46,5)" fg:x="1056" fg:w="1"/><text x="85.3427%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="85.1732%" y="565" width="0.1612%" height="15" fill="rgb(236,216,35)" fg:x="1057" fg:w="2"/><text x="85.4232%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="85.1732%" y="549" width="0.1612%" height="15" fill="rgb(217,187,26)" fg:x="1057" fg:w="2"/><text x="85.4232%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="85.1732%" y="533" width="0.1612%" height="15" fill="rgb(207,192,25)" fg:x="1057" fg:w="2"/><text x="85.4232%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="85.1732%" y="517" width="0.1612%" height="15" fill="rgb(253,135,27)" fg:x="1057" fg:w="2"/><text x="85.4232%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="85.1732%" y="501" width="0.1612%" height="15" fill="rgb(211,122,29)" fg:x="1057" fg:w="2"/><text x="85.4232%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="85.2538%" y="485" width="0.0806%" height="15" fill="rgb(233,162,40)" fg:x="1058" fg:w="1"/><text x="85.5038%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.2538%" y="469" width="0.0806%" height="15" fill="rgb(222,184,47)" fg:x="1058" fg:w="1"/><text x="85.5038%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="85.4150%" y="485" width="0.0806%" height="15" fill="rgb(249,99,23)" fg:x="1060" fg:w="1"/><text x="85.6650%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.4956%" y="453" width="0.0806%" height="15" fill="rgb(214,60,12)" fg:x="1061" fg:w="1"/><text x="85.7456%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="85.4150%" y="533" width="0.2417%" height="15" fill="rgb(250,229,36)" fg:x="1060" fg:w="3"/><text x="85.6650%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="85.4150%" y="517" width="0.2417%" height="15" fill="rgb(232,195,10)" fg:x="1060" fg:w="3"/><text x="85.6650%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="85.4150%" y="501" width="0.2417%" height="15" fill="rgb(205,213,31)" fg:x="1060" fg:w="3"/><text x="85.6650%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="85.4956%" y="485" width="0.1612%" height="15" fill="rgb(237,43,8)" fg:x="1061" fg:w="2"/><text x="85.7456%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="85.4956%" y="469" width="0.1612%" height="15" fill="rgb(216,208,3)" fg:x="1061" fg:w="2"/><text x="85.7456%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="85.5761%" y="453" width="0.0806%" height="15" fill="rgb(228,179,44)" fg:x="1062" fg:w="1"/><text x="85.8261%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="85.5761%" y="437" width="0.0806%" height="15" fill="rgb(230,192,27)" fg:x="1062" fg:w="1"/><text x="85.8261%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.5761%" y="421" width="0.0806%" height="15" fill="rgb(251,30,38)" fg:x="1062" fg:w="1"/><text x="85.8261%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="85.6567%" y="517" width="0.0806%" height="15" fill="rgb(246,55,52)" fg:x="1063" fg:w="1"/><text x="85.9067%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="85.6567%" y="501" width="0.0806%" height="15" fill="rgb(249,79,26)" fg:x="1063" fg:w="1"/><text x="85.9067%" y="511.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (5 samples, 0.40%)</title><rect x="85.4150%" y="549" width="0.4029%" height="15" fill="rgb(220,202,16)" fg:x="1060" fg:w="5"/><text x="85.6650%" y="559.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="85.6567%" y="533" width="0.1612%" height="15" fill="rgb(250,170,23)" fg:x="1063" fg:w="2"/><text x="85.9067%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.7373%" y="517" width="0.0806%" height="15" fill="rgb(230,7,37)" fg:x="1064" fg:w="1"/><text x="85.9873%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.7373%" y="501" width="0.0806%" height="15" fill="rgb(213,71,1)" fg:x="1064" fg:w="1"/><text x="85.9873%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="85.9790%" y="517" width="0.1612%" height="15" fill="rgb(227,87,39)" fg:x="1067" fg:w="2"/><text x="86.2290%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="86.0596%" y="501" width="0.0806%" height="15" fill="rgb(210,41,29)" fg:x="1068" fg:w="1"/><text x="86.3096%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="86.2208%" y="453" width="0.0806%" height="15" fill="rgb(206,191,31)" fg:x="1070" fg:w="1"/><text x="86.4708%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="86.3014%" y="421" width="0.0806%" height="15" fill="rgb(247,75,54)" fg:x="1071" fg:w="1"/><text x="86.5514%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="86.3014%" y="405" width="0.0806%" height="15" fill="rgb(208,54,50)" fg:x="1071" fg:w="1"/><text x="86.5514%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.3014%" y="389" width="0.0806%" height="15" fill="rgb(214,90,37)" fg:x="1071" fg:w="1"/><text x="86.5514%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="86.3820%" y="405" width="0.0806%" height="15" fill="rgb(220,132,6)" fg:x="1072" fg:w="1"/><text x="86.6320%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="86.3820%" y="389" width="0.0806%" height="15" fill="rgb(213,167,7)" fg:x="1072" fg:w="1"/><text x="86.6320%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.3820%" y="373" width="0.0806%" height="15" fill="rgb(243,36,27)" fg:x="1072" fg:w="1"/><text x="86.6320%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="86.2208%" y="469" width="0.3223%" height="15" fill="rgb(235,147,12)" fg:x="1070" fg:w="4"/><text x="86.4708%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="86.3014%" y="453" width="0.2417%" height="15" fill="rgb(212,198,44)" fg:x="1071" fg:w="3"/><text x="86.5514%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="86.3014%" y="437" width="0.2417%" height="15" fill="rgb(218,68,50)" fg:x="1071" fg:w="3"/><text x="86.5514%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="86.3820%" y="421" width="0.1612%" height="15" fill="rgb(224,79,48)" fg:x="1072" fg:w="2"/><text x="86.6320%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.4625%" y="405" width="0.0806%" height="15" fill="rgb(213,191,50)" fg:x="1073" fg:w="1"/><text x="86.7125%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="86.5431%" y="437" width="0.0806%" height="15" fill="rgb(254,146,10)" fg:x="1074" fg:w="1"/><text x="86.7931%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="86.5431%" y="421" width="0.0806%" height="15" fill="rgb(215,175,11)" fg:x="1074" fg:w="1"/><text x="86.7931%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="86.2208%" y="501" width="0.4835%" height="15" fill="rgb(207,49,7)" fg:x="1070" fg:w="6"/><text x="86.4708%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="86.2208%" y="485" width="0.4835%" height="15" fill="rgb(234,144,29)" fg:x="1070" fg:w="6"/><text x="86.4708%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="86.5431%" y="469" width="0.1612%" height="15" fill="rgb(213,222,48)" fg:x="1074" fg:w="2"/><text x="86.7931%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="86.5431%" y="453" width="0.1612%" height="15" fill="rgb(222,8,6)" fg:x="1074" fg:w="2"/><text x="86.7931%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="86.6237%" y="437" width="0.0806%" height="15" fill="rgb(221,114,49)" fg:x="1075" fg:w="1"/><text x="86.8737%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="86.6237%" y="421" width="0.0806%" height="15" fill="rgb(250,140,42)" fg:x="1075" fg:w="1"/><text x="86.8737%" y="431.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (12 samples, 0.97%)</title><rect x="85.8179%" y="549" width="0.9670%" height="15" fill="rgb(250,150,27)" fg:x="1065" fg:w="12"/><text x="86.0679%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (11 samples, 0.89%)</title><rect x="85.8985%" y="533" width="0.8864%" height="15" fill="rgb(252,159,3)" fg:x="1066" fg:w="11"/><text x="86.1485%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.64%)</title><rect x="86.1402%" y="517" width="0.6446%" height="15" fill="rgb(241,182,3)" fg:x="1069" fg:w="8"/><text x="86.3902%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="86.7043%" y="501" width="0.0806%" height="15" fill="rgb(236,3,9)" fg:x="1076" fg:w="1"/><text x="86.9543%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="86.7043%" y="485" width="0.0806%" height="15" fill="rgb(223,227,51)" fg:x="1076" fg:w="1"/><text x="86.9543%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="86.8654%" y="421" width="0.0806%" height="15" fill="rgb(232,133,30)" fg:x="1078" fg:w="1"/><text x="87.1154%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="86.8654%" y="405" width="0.0806%" height="15" fill="rgb(209,93,27)" fg:x="1078" fg:w="1"/><text x="87.1154%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="86.8654%" y="389" width="0.0806%" height="15" fill="rgb(208,108,34)" fg:x="1078" fg:w="1"/><text x="87.1154%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="86.8654%" y="373" width="0.0806%" height="15" fill="rgb(215,189,13)" fg:x="1078" fg:w="1"/><text x="87.1154%" y="383.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="86.9460%" y="405" width="0.0806%" height="15" fill="rgb(206,88,23)" fg:x="1079" fg:w="1"/><text x="87.1960%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="86.7849%" y="485" width="0.3223%" height="15" fill="rgb(240,173,0)" fg:x="1077" fg:w="4"/><text x="87.0349%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="86.7849%" y="469" width="0.3223%" height="15" fill="rgb(223,106,52)" fg:x="1077" fg:w="4"/><text x="87.0349%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="86.7849%" y="453" width="0.3223%" height="15" fill="rgb(206,130,16)" fg:x="1077" fg:w="4"/><text x="87.0349%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="86.8654%" y="437" width="0.2417%" height="15" fill="rgb(220,54,25)" fg:x="1078" fg:w="3"/><text x="87.1154%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="86.9460%" y="421" width="0.1612%" height="15" fill="rgb(210,4,38)" fg:x="1079" fg:w="2"/><text x="87.1960%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.0266%" y="405" width="0.0806%" height="15" fill="rgb(238,94,39)" fg:x="1080" fg:w="1"/><text x="87.2766%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="87.1072%" y="485" width="0.0806%" height="15" fill="rgb(234,124,34)" fg:x="1081" fg:w="1"/><text x="87.3572%" y="495.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="87.1072%" y="469" width="0.0806%" height="15" fill="rgb(221,91,40)" fg:x="1081" fg:w="1"/><text x="87.3572%" y="479.50"></text></g><g><title>engine::session::Session::close (40 samples, 3.22%)</title><rect x="84.0451%" y="661" width="3.2232%" height="15" fill="rgb(246,53,28)" fg:x="1043" fg:w="40"/><text x="84.2951%" y="671.50">eng..</text></g><g><title>engine::session::state::State::close (39 samples, 3.14%)</title><rect x="84.1257%" y="645" width="3.1426%" height="15" fill="rgb(229,109,7)" fg:x="1044" fg:w="39"/><text x="84.3757%" y="655.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (39 samples, 3.14%)</title><rect x="84.1257%" y="629" width="3.1426%" height="15" fill="rgb(249,117,8)" fg:x="1044" fg:w="39"/><text x="84.3757%" y="639.50">eng..</text></g><g><title>core::iter::adapters::try_process (38 samples, 3.06%)</title><rect x="84.2063%" y="613" width="3.0620%" height="15" fill="rgb(210,181,1)" fg:x="1045" fg:w="38"/><text x="84.4563%" y="623.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (38 samples, 3.06%)</title><rect x="84.2063%" y="597" width="3.0620%" height="15" fill="rgb(211,66,1)" fg:x="1045" fg:w="38"/><text x="84.4563%" y="607.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (38 samples, 3.06%)</title><rect x="84.2063%" y="581" width="3.0620%" height="15" fill="rgb(221,90,14)" fg:x="1045" fg:w="38"/><text x="84.4563%" y="591.50">eng..</text></g><g><title>kernel::model::any_entity_changes (24 samples, 1.93%)</title><rect x="85.3344%" y="565" width="1.9339%" height="15" fill="rgb(219,222,44)" fg:x="1059" fg:w="24"/><text x="85.5844%" y="575.50">k..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (6 samples, 0.48%)</title><rect x="86.7849%" y="549" width="0.4835%" height="15" fill="rgb(246,34,33)" fg:x="1077" fg:w="6"/><text x="87.0349%" y="559.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.48%)</title><rect x="86.7849%" y="533" width="0.4835%" height="15" fill="rgb(227,135,41)" fg:x="1077" fg:w="6"/><text x="87.0349%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="86.7849%" y="517" width="0.4835%" height="15" fill="rgb(226,15,14)" fg:x="1077" fg:w="6"/><text x="87.0349%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="86.7849%" y="501" width="0.4835%" height="15" fill="rgb(236,148,47)" fg:x="1077" fg:w="6"/><text x="87.0349%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="87.1878%" y="485" width="0.0806%" height="15" fill="rgb(233,162,52)" fg:x="1082" fg:w="1"/><text x="87.4378%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="87.1878%" y="469" width="0.0806%" height="15" fill="rgb(244,35,28)" fg:x="1082" fg:w="1"/><text x="87.4378%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.1878%" y="453" width="0.0806%" height="15" fill="rgb(205,121,10)" fg:x="1082" fg:w="1"/><text x="87.4378%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.2683%" y="389" width="0.0806%" height="15" fill="rgb(250,58,18)" fg:x="1083" fg:w="1"/><text x="87.5183%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.2683%" y="373" width="0.0806%" height="15" fill="rgb(216,37,13)" fg:x="1083" fg:w="1"/><text x="87.5183%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="87.2683%" y="357" width="0.0806%" height="15" fill="rgb(221,215,42)" fg:x="1083" fg:w="1"/><text x="87.5183%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="87.2683%" y="341" width="0.0806%" height="15" fill="rgb(217,214,19)" fg:x="1083" fg:w="1"/><text x="87.5183%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="87.2683%" y="325" width="0.0806%" height="15" fill="rgb(233,139,13)" fg:x="1083" fg:w="1"/><text x="87.5183%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="87.2683%" y="309" width="0.0806%" height="15" fill="rgb(247,168,23)" fg:x="1083" fg:w="1"/><text x="87.5183%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="87.2683%" y="293" width="0.0806%" height="15" fill="rgb(207,202,1)" fg:x="1083" fg:w="1"/><text x="87.5183%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="87.2683%" y="277" width="0.0806%" height="15" fill="rgb(220,155,48)" fg:x="1083" fg:w="1"/><text x="87.5183%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="87.2683%" y="261" width="0.0806%" height="15" fill="rgb(250,43,26)" fg:x="1083" fg:w="1"/><text x="87.5183%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="87.2683%" y="245" width="0.0806%" height="15" fill="rgb(212,190,23)" fg:x="1083" fg:w="1"/><text x="87.5183%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="87.2683%" y="229" width="0.0806%" height="15" fill="rgb(216,39,24)" fg:x="1083" fg:w="1"/><text x="87.5183%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="87.2683%" y="213" width="0.0806%" height="15" fill="rgb(252,113,16)" fg:x="1083" fg:w="1"/><text x="87.5183%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="87.2683%" y="197" width="0.0806%" height="15" fill="rgb(208,113,19)" fg:x="1083" fg:w="1"/><text x="87.5183%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.2683%" y="181" width="0.0806%" height="15" fill="rgb(234,107,25)" fg:x="1083" fg:w="1"/><text x="87.5183%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="87.2683%" y="469" width="0.1612%" height="15" fill="rgb(234,217,51)" fg:x="1083" fg:w="2"/><text x="87.5183%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="87.2683%" y="453" width="0.1612%" height="15" fill="rgb(251,29,42)" fg:x="1083" fg:w="2"/><text x="87.5183%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="87.2683%" y="437" width="0.1612%" height="15" fill="rgb(221,62,51)" fg:x="1083" fg:w="2"/><text x="87.5183%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="87.2683%" y="421" width="0.1612%" height="15" fill="rgb(240,192,43)" fg:x="1083" fg:w="2"/><text x="87.5183%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="87.2683%" y="405" width="0.1612%" height="15" fill="rgb(224,157,47)" fg:x="1083" fg:w="2"/><text x="87.5183%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="87.3489%" y="389" width="0.0806%" height="15" fill="rgb(226,84,45)" fg:x="1084" fg:w="1"/><text x="87.5989%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="87.3489%" y="373" width="0.0806%" height="15" fill="rgb(208,207,23)" fg:x="1084" fg:w="1"/><text x="87.5989%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="87.3489%" y="357" width="0.0806%" height="15" fill="rgb(253,34,51)" fg:x="1084" fg:w="1"/><text x="87.5989%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="87.3489%" y="341" width="0.0806%" height="15" fill="rgb(227,26,34)" fg:x="1084" fg:w="1"/><text x="87.5989%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="87.3489%" y="325" width="0.0806%" height="15" fill="rgb(245,75,19)" fg:x="1084" fg:w="1"/><text x="87.5989%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="87.3489%" y="309" width="0.0806%" height="15" fill="rgb(250,191,31)" fg:x="1084" fg:w="1"/><text x="87.5989%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="87.3489%" y="293" width="0.0806%" height="15" fill="rgb(224,11,50)" fg:x="1084" fg:w="1"/><text x="87.5989%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="87.3489%" y="277" width="0.0806%" height="15" fill="rgb(231,171,7)" fg:x="1084" fg:w="1"/><text x="87.5989%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="87.3489%" y="261" width="0.0806%" height="15" fill="rgb(252,214,10)" fg:x="1084" fg:w="1"/><text x="87.5989%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="87.3489%" y="245" width="0.0806%" height="15" fill="rgb(249,45,46)" fg:x="1084" fg:w="1"/><text x="87.5989%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="87.3489%" y="229" width="0.0806%" height="15" fill="rgb(240,173,7)" fg:x="1084" fg:w="1"/><text x="87.5989%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.3489%" y="213" width="0.0806%" height="15" fill="rgb(235,214,13)" fg:x="1084" fg:w="1"/><text x="87.5989%" y="223.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="87.4295%" y="469" width="0.0806%" height="15" fill="rgb(245,156,8)" fg:x="1085" fg:w="1"/><text x="87.6795%" y="479.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="87.4295%" y="453" width="0.0806%" height="15" fill="rgb(235,46,12)" fg:x="1085" fg:w="1"/><text x="87.6795%" y="463.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="87.4295%" y="437" width="0.0806%" height="15" fill="rgb(221,81,14)" fg:x="1085" fg:w="1"/><text x="87.6795%" y="447.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="87.4295%" y="421" width="0.0806%" height="15" fill="rgb(238,207,9)" fg:x="1085" fg:w="1"/><text x="87.6795%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.4295%" y="405" width="0.0806%" height="15" fill="rgb(224,129,35)" fg:x="1085" fg:w="1"/><text x="87.6795%" y="415.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="87.4295%" y="389" width="0.0806%" height="15" fill="rgb(243,218,34)" fg:x="1085" fg:w="1"/><text x="87.6795%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.4295%" y="373" width="0.0806%" height="15" fill="rgb(220,166,13)" fg:x="1085" fg:w="1"/><text x="87.6795%" y="383.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="87.4295%" y="357" width="0.0806%" height="15" fill="rgb(227,167,49)" fg:x="1085" fg:w="1"/><text x="87.6795%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.4295%" y="341" width="0.0806%" height="15" fill="rgb(234,142,12)" fg:x="1085" fg:w="1"/><text x="87.6795%" y="351.50"></text></g><g><title>kernel::model::EntityPtr::new_from_entity (2 samples, 0.16%)</title><rect x="87.5101%" y="469" width="0.1612%" height="15" fill="rgb(207,100,48)" fg:x="1086" fg:w="2"/><text x="87.7601%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="87.6712%" y="373" width="0.0806%" height="15" fill="rgb(210,25,14)" fg:x="1088" fg:w="1"/><text x="87.9212%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="87.6712%" y="357" width="0.0806%" height="15" fill="rgb(246,116,27)" fg:x="1088" fg:w="1"/><text x="87.9212%" y="367.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="87.6712%" y="341" width="0.0806%" height="15" fill="rgb(214,193,42)" fg:x="1088" fg:w="1"/><text x="87.9212%" y="351.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1 samples, 0.08%)</title><rect x="87.6712%" y="325" width="0.0806%" height="15" fill="rgb(214,122,8)" fg:x="1088" fg:w="1"/><text x="87.9212%" y="335.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (7 samples, 0.56%)</title><rect x="87.2683%" y="565" width="0.5641%" height="15" fill="rgb(244,173,18)" fg:x="1083" fg:w="7"/><text x="87.5183%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_location (7 samples, 0.56%)</title><rect x="87.2683%" y="549" width="0.5641%" height="15" fill="rgb(232,68,19)" fg:x="1083" fg:w="7"/><text x="87.5183%" y="559.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (7 samples, 0.56%)</title><rect x="87.2683%" y="533" width="0.5641%" height="15" fill="rgb(236,224,1)" fg:x="1083" fg:w="7"/><text x="87.5183%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (7 samples, 0.56%)</title><rect x="87.2683%" y="517" width="0.5641%" height="15" fill="rgb(240,11,8)" fg:x="1083" fg:w="7"/><text x="87.5183%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (7 samples, 0.56%)</title><rect x="87.2683%" y="501" width="0.5641%" height="15" fill="rgb(244,159,20)" fg:x="1083" fg:w="7"/><text x="87.5183%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.56%)</title><rect x="87.2683%" y="485" width="0.5641%" height="15" fill="rgb(240,223,54)" fg:x="1083" fg:w="7"/><text x="87.5183%" y="495.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="87.6712%" y="469" width="0.1612%" height="15" fill="rgb(237,146,5)" fg:x="1088" fg:w="2"/><text x="87.9212%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="87.6712%" y="453" width="0.1612%" height="15" fill="rgb(218,221,32)" fg:x="1088" fg:w="2"/><text x="87.9212%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="87.6712%" y="437" width="0.1612%" height="15" fill="rgb(244,96,26)" fg:x="1088" fg:w="2"/><text x="87.9212%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="87.6712%" y="421" width="0.1612%" height="15" fill="rgb(245,184,37)" fg:x="1088" fg:w="2"/><text x="87.9212%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="87.6712%" y="405" width="0.1612%" height="15" fill="rgb(248,91,47)" fg:x="1088" fg:w="2"/><text x="87.9212%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="87.6712%" y="389" width="0.1612%" height="15" fill="rgb(243,199,8)" fg:x="1088" fg:w="2"/><text x="87.9212%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.7518%" y="373" width="0.0806%" height="15" fill="rgb(249,12,15)" fg:x="1089" fg:w="1"/><text x="88.0018%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="87.7518%" y="357" width="0.0806%" height="15" fill="rgb(245,97,12)" fg:x="1089" fg:w="1"/><text x="88.0018%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="87.7518%" y="341" width="0.0806%" height="15" fill="rgb(244,61,1)" fg:x="1089" fg:w="1"/><text x="88.0018%" y="351.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="87.9936%" y="357" width="0.0806%" height="15" fill="rgb(222,194,10)" fg:x="1092" fg:w="1"/><text x="88.2436%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="87.9936%" y="341" width="0.0806%" height="15" fill="rgb(226,178,8)" fg:x="1092" fg:w="1"/><text x="88.2436%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="87.9936%" y="325" width="0.0806%" height="15" fill="rgb(241,32,34)" fg:x="1092" fg:w="1"/><text x="88.2436%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="87.9936%" y="309" width="0.0806%" height="15" fill="rgb(254,26,6)" fg:x="1092" fg:w="1"/><text x="88.2436%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.9936%" y="293" width="0.0806%" height="15" fill="rgb(249,71,11)" fg:x="1092" fg:w="1"/><text x="88.2436%" y="303.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (2 samples, 0.16%)</title><rect x="87.9936%" y="421" width="0.1612%" height="15" fill="rgb(232,170,27)" fg:x="1092" fg:w="2"/><text x="88.2436%" y="431.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (2 samples, 0.16%)</title><rect x="87.9936%" y="405" width="0.1612%" height="15" fill="rgb(214,223,17)" fg:x="1092" fg:w="2"/><text x="88.2436%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (2 samples, 0.16%)</title><rect x="87.9936%" y="389" width="0.1612%" height="15" fill="rgb(250,18,15)" fg:x="1092" fg:w="2"/><text x="88.2436%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="87.9936%" y="373" width="0.1612%" height="15" fill="rgb(212,153,51)" fg:x="1092" fg:w="2"/><text x="88.2436%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="88.0741%" y="357" width="0.0806%" height="15" fill="rgb(219,194,12)" fg:x="1093" fg:w="1"/><text x="88.3241%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="88.0741%" y="341" width="0.0806%" height="15" fill="rgb(212,58,17)" fg:x="1093" fg:w="1"/><text x="88.3241%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="88.0741%" y="325" width="0.0806%" height="15" fill="rgb(254,5,10)" fg:x="1093" fg:w="1"/><text x="88.3241%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="88.2353%" y="389" width="0.0806%" height="15" fill="rgb(246,91,7)" fg:x="1095" fg:w="1"/><text x="88.4853%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="88.2353%" y="373" width="0.0806%" height="15" fill="rgb(218,108,49)" fg:x="1095" fg:w="1"/><text x="88.4853%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.2353%" y="357" width="0.0806%" height="15" fill="rgb(238,123,20)" fg:x="1095" fg:w="1"/><text x="88.4853%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="88.3159%" y="389" width="0.0806%" height="15" fill="rgb(231,69,23)" fg:x="1096" fg:w="1"/><text x="88.5659%" y="399.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="88.3159%" y="373" width="0.0806%" height="15" fill="rgb(230,209,3)" fg:x="1096" fg:w="1"/><text x="88.5659%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="88.3159%" y="357" width="0.0806%" height="15" fill="rgb(231,19,0)" fg:x="1096" fg:w="1"/><text x="88.5659%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="88.3159%" y="341" width="0.0806%" height="15" fill="rgb(226,192,25)" fg:x="1096" fg:w="1"/><text x="88.5659%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="88.3159%" y="325" width="0.0806%" height="15" fill="rgb(223,175,53)" fg:x="1096" fg:w="1"/><text x="88.5659%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="88.3159%" y="309" width="0.0806%" height="15" fill="rgb(248,35,51)" fg:x="1096" fg:w="1"/><text x="88.5659%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="88.3159%" y="293" width="0.0806%" height="15" fill="rgb(230,37,26)" fg:x="1096" fg:w="1"/><text x="88.5659%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="88.3159%" y="277" width="0.0806%" height="15" fill="rgb(206,120,22)" fg:x="1096" fg:w="1"/><text x="88.5659%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="88.3159%" y="261" width="0.0806%" height="15" fill="rgb(207,165,28)" fg:x="1096" fg:w="1"/><text x="88.5659%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="88.3159%" y="245" width="0.0806%" height="15" fill="rgb(226,23,46)" fg:x="1096" fg:w="1"/><text x="88.5659%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="88.3159%" y="229" width="0.0806%" height="15" fill="rgb(208,130,44)" fg:x="1096" fg:w="1"/><text x="88.5659%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="88.3159%" y="213" width="0.0806%" height="15" fill="rgb(231,67,8)" fg:x="1096" fg:w="1"/><text x="88.5659%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="88.3159%" y="197" width="0.0806%" height="15" fill="rgb(205,183,22)" fg:x="1096" fg:w="1"/><text x="88.5659%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="88.3159%" y="181" width="0.0806%" height="15" fill="rgb(224,47,9)" fg:x="1096" fg:w="1"/><text x="88.5659%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="88.3159%" y="165" width="0.0806%" height="15" fill="rgb(250,183,49)" fg:x="1096" fg:w="1"/><text x="88.5659%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="88.3159%" y="149" width="0.0806%" height="15" fill="rgb(220,151,39)" fg:x="1096" fg:w="1"/><text x="88.5659%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="88.3159%" y="133" width="0.0806%" height="15" fill="rgb(220,118,20)" fg:x="1096" fg:w="1"/><text x="88.5659%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.3159%" y="117" width="0.0806%" height="15" fill="rgb(231,65,51)" fg:x="1096" fg:w="1"/><text x="88.5659%" y="127.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.3965%" y="357" width="0.0806%" height="15" fill="rgb(253,125,37)" fg:x="1097" fg:w="1"/><text x="88.6465%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::gid (2 samples, 0.16%)</title><rect x="88.3965%" y="389" width="0.1612%" height="15" fill="rgb(232,102,6)" fg:x="1097" fg:w="2"/><text x="88.6465%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="88.3965%" y="373" width="0.1612%" height="15" fill="rgb(251,105,13)" fg:x="1097" fg:w="2"/><text x="88.6465%" y="383.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="88.4770%" y="357" width="0.0806%" height="15" fill="rgb(222,179,29)" fg:x="1098" fg:w="1"/><text x="88.7270%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="88.4770%" y="341" width="0.0806%" height="15" fill="rgb(229,180,53)" fg:x="1098" fg:w="1"/><text x="88.7270%" y="351.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="88.4770%" y="325" width="0.0806%" height="15" fill="rgb(238,104,13)" fg:x="1098" fg:w="1"/><text x="88.7270%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.4770%" y="309" width="0.0806%" height="15" fill="rgb(210,130,5)" fg:x="1098" fg:w="1"/><text x="88.7270%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="88.4770%" y="293" width="0.0806%" height="15" fill="rgb(233,87,49)" fg:x="1098" fg:w="1"/><text x="88.7270%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.4770%" y="277" width="0.0806%" height="15" fill="rgb(243,34,9)" fg:x="1098" fg:w="1"/><text x="88.7270%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="88.4770%" y="261" width="0.0806%" height="15" fill="rgb(235,225,10)" fg:x="1098" fg:w="1"/><text x="88.7270%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="88.4770%" y="245" width="0.0806%" height="15" fill="rgb(212,0,30)" fg:x="1098" fg:w="1"/><text x="88.7270%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="88.4770%" y="229" width="0.0806%" height="15" fill="rgb(211,177,0)" fg:x="1098" fg:w="1"/><text x="88.7270%" y="239.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="88.5576%" y="325" width="0.0806%" height="15" fill="rgb(225,220,11)" fg:x="1099" fg:w="1"/><text x="88.8076%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="88.6382%" y="309" width="0.0806%" height="15" fill="rgb(215,10,13)" fg:x="1100" fg:w="1"/><text x="88.8882%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="88.6382%" y="293" width="0.0806%" height="15" fill="rgb(240,177,14)" fg:x="1100" fg:w="1"/><text x="88.8882%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="88.6382%" y="277" width="0.0806%" height="15" fill="rgb(243,7,39)" fg:x="1100" fg:w="1"/><text x="88.8882%" y="287.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (1 samples, 0.08%)</title><rect x="88.6382%" y="261" width="0.0806%" height="15" fill="rgb(212,99,0)" fg:x="1100" fg:w="1"/><text x="88.8882%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="88.6382%" y="245" width="0.0806%" height="15" fill="rgb(225,162,48)" fg:x="1100" fg:w="1"/><text x="88.8882%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="88.6382%" y="229" width="0.0806%" height="15" fill="rgb(246,16,25)" fg:x="1100" fg:w="1"/><text x="88.8882%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.7188%" y="277" width="0.0806%" height="15" fill="rgb(220,150,2)" fg:x="1101" fg:w="1"/><text x="88.9688%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="88.7188%" y="309" width="0.1612%" height="15" fill="rgb(237,113,11)" fg:x="1101" fg:w="2"/><text x="88.9688%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="88.7188%" y="293" width="0.1612%" height="15" fill="rgb(236,70,20)" fg:x="1101" fg:w="2"/><text x="88.9688%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="88.7994%" y="277" width="0.0806%" height="15" fill="rgb(234,94,7)" fg:x="1102" fg:w="1"/><text x="89.0494%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="88.7994%" y="261" width="0.0806%" height="15" fill="rgb(250,221,0)" fg:x="1102" fg:w="1"/><text x="89.0494%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.7994%" y="245" width="0.0806%" height="15" fill="rgb(245,149,46)" fg:x="1102" fg:w="1"/><text x="89.0494%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="88.8799%" y="261" width="0.0806%" height="15" fill="rgb(215,37,27)" fg:x="1103" fg:w="1"/><text x="89.1299%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="88.8799%" y="245" width="0.0806%" height="15" fill="rgb(232,65,3)" fg:x="1103" fg:w="1"/><text x="89.1299%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.1217%" y="245" width="0.0806%" height="15" fill="rgb(214,2,16)" fg:x="1106" fg:w="1"/><text x="89.3717%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (4 samples, 0.32%)</title><rect x="89.2023%" y="245" width="0.3223%" height="15" fill="rgb(227,131,50)" fg:x="1107" fg:w="4"/><text x="89.4523%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (4 samples, 0.32%)</title><rect x="89.2023%" y="229" width="0.3223%" height="15" fill="rgb(247,131,45)" fg:x="1107" fg:w="4"/><text x="89.4523%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.4440%" y="213" width="0.0806%" height="15" fill="rgb(215,97,47)" fg:x="1110" fg:w="1"/><text x="89.6940%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="89.5246%" y="245" width="0.0806%" height="15" fill="rgb(233,143,12)" fg:x="1111" fg:w="1"/><text x="89.7746%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="89.5246%" y="229" width="0.0806%" height="15" fill="rgb(222,57,17)" fg:x="1111" fg:w="1"/><text x="89.7746%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="89.5246%" y="213" width="0.0806%" height="15" fill="rgb(214,119,38)" fg:x="1111" fg:w="1"/><text x="89.7746%" y="223.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="89.5246%" y="197" width="0.0806%" height="15" fill="rgb(217,28,47)" fg:x="1111" fg:w="1"/><text x="89.7746%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="89.6052%" y="165" width="0.0806%" height="15" fill="rgb(231,14,52)" fg:x="1112" fg:w="1"/><text x="89.8552%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.16%)</title><rect x="89.6052%" y="181" width="0.1612%" height="15" fill="rgb(220,158,18)" fg:x="1112" fg:w="2"/><text x="89.8552%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="89.6857%" y="165" width="0.0806%" height="15" fill="rgb(222,143,46)" fg:x="1113" fg:w="1"/><text x="89.9357%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="89.6857%" y="149" width="0.0806%" height="15" fill="rgb(227,165,5)" fg:x="1113" fg:w="1"/><text x="89.9357%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (13 samples, 1.05%)</title><rect x="89.7663%" y="181" width="1.0475%" height="15" fill="rgb(216,222,49)" fg:x="1114" fg:w="13"/><text x="90.0163%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (13 samples, 1.05%)</title><rect x="89.7663%" y="165" width="1.0475%" height="15" fill="rgb(238,73,39)" fg:x="1114" fg:w="13"/><text x="90.0163%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (13 samples, 1.05%)</title><rect x="89.7663%" y="149" width="1.0475%" height="15" fill="rgb(252,115,9)" fg:x="1114" fg:w="13"/><text x="90.0163%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 1.37%)</title><rect x="89.6052%" y="229" width="1.3699%" height="15" fill="rgb(238,202,4)" fg:x="1112" fg:w="17"/><text x="89.8552%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (17 samples, 1.37%)</title><rect x="89.6052%" y="213" width="1.3699%" height="15" fill="rgb(252,153,44)" fg:x="1112" fg:w="17"/><text x="89.8552%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (17 samples, 1.37%)</title><rect x="89.6052%" y="197" width="1.3699%" height="15" fill="rgb(235,128,27)" fg:x="1112" fg:w="17"/><text x="89.8552%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="90.8139%" y="181" width="0.1612%" height="15" fill="rgb(221,121,47)" fg:x="1127" fg:w="2"/><text x="91.0639%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.8944%" y="165" width="0.0806%" height="15" fill="rgb(247,211,47)" fg:x="1128" fg:w="1"/><text x="91.1444%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (28 samples, 2.26%)</title><rect x="88.9605%" y="261" width="2.2562%" height="15" fill="rgb(252,47,49)" fg:x="1104" fg:w="28"/><text x="89.2105%" y="271.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (20 samples, 1.61%)</title><rect x="89.6052%" y="245" width="1.6116%" height="15" fill="rgb(219,119,53)" fg:x="1112" fg:w="20"/><text x="89.8552%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="90.9750%" y="229" width="0.2417%" height="15" fill="rgb(243,165,53)" fg:x="1129" fg:w="3"/><text x="91.2250%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="90.9750%" y="213" width="0.2417%" height="15" fill="rgb(230,12,35)" fg:x="1129" fg:w="3"/><text x="91.2250%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="91.2168%" y="261" width="0.1612%" height="15" fill="rgb(239,57,49)" fg:x="1132" fg:w="2"/><text x="91.4668%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="91.2168%" y="245" width="0.1612%" height="15" fill="rgb(231,154,7)" fg:x="1132" fg:w="2"/><text x="91.4668%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="91.2168%" y="229" width="0.1612%" height="15" fill="rgb(248,81,34)" fg:x="1132" fg:w="2"/><text x="91.4668%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="91.2973%" y="213" width="0.0806%" height="15" fill="rgb(247,9,5)" fg:x="1133" fg:w="1"/><text x="91.5473%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.2973%" y="197" width="0.0806%" height="15" fill="rgb(228,172,27)" fg:x="1133" fg:w="1"/><text x="91.5473%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.2973%" y="181" width="0.0806%" height="15" fill="rgb(230,57,44)" fg:x="1133" fg:w="1"/><text x="91.5473%" y="191.50"></text></g><g><title>regex::regex::string::Regex::new (32 samples, 2.58%)</title><rect x="88.8799%" y="309" width="2.5786%" height="15" fill="rgb(249,35,22)" fg:x="1103" fg:w="32"/><text x="89.1299%" y="319.50">re..</text></g><g><title>regex::builders::Builder::build_one_string (32 samples, 2.58%)</title><rect x="88.8799%" y="293" width="2.5786%" height="15" fill="rgb(250,137,27)" fg:x="1103" fg:w="32"/><text x="89.1299%" y="303.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (32 samples, 2.58%)</title><rect x="88.8799%" y="277" width="2.5786%" height="15" fill="rgb(251,57,31)" fg:x="1103" fg:w="32"/><text x="89.1299%" y="287.50">re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="91.3779%" y="261" width="0.0806%" height="15" fill="rgb(238,60,0)" fg:x="1134" fg:w="1"/><text x="91.6279%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="91.3779%" y="245" width="0.0806%" height="15" fill="rgb(242,185,39)" fg:x="1134" fg:w="1"/><text x="91.6279%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="91.3779%" y="229" width="0.0806%" height="15" fill="rgb(240,63,43)" fg:x="1134" fg:w="1"/><text x="91.6279%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="91.3779%" y="213" width="0.0806%" height="15" fill="rgb(236,155,6)" fg:x="1134" fg:w="1"/><text x="91.6279%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.3779%" y="197" width="0.0806%" height="15" fill="rgb(215,11,29)" fg:x="1134" fg:w="1"/><text x="91.6279%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.3779%" y="181" width="0.0806%" height="15" fill="rgb(228,180,48)" fg:x="1134" fg:w="1"/><text x="91.6279%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.3779%" y="165" width="0.0806%" height="15" fill="rgb(241,102,12)" fg:x="1134" fg:w="1"/><text x="91.6279%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.4585%" y="229" width="0.0806%" height="15" fill="rgb(246,213,4)" fg:x="1135" fg:w="1"/><text x="91.7085%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.4585%" y="213" width="0.0806%" height="15" fill="rgb(218,134,35)" fg:x="1135" fg:w="1"/><text x="91.7085%" y="223.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="91.4585%" y="197" width="0.0806%" height="15" fill="rgb(251,117,35)" fg:x="1135" fg:w="1"/><text x="91.7085%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="91.4585%" y="181" width="0.0806%" height="15" fill="rgb(206,156,45)" fg:x="1135" fg:w="1"/><text x="91.7085%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="91.5391%" y="229" width="0.1612%" height="15" fill="rgb(218,52,27)" fg:x="1136" fg:w="2"/><text x="91.7891%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="91.4585%" y="245" width="0.3223%" height="15" fill="rgb(238,83,36)" fg:x="1135" fg:w="4"/><text x="91.7085%" y="255.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="91.7002%" y="229" width="0.0806%" height="15" fill="rgb(218,53,43)" fg:x="1138" fg:w="1"/><text x="91.9502%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (40 samples, 3.22%)</title><rect x="88.6382%" y="325" width="3.2232%" height="15" fill="rgb(239,54,39)" fg:x="1100" fg:w="40"/><text x="88.8882%" y="335.50">ind..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="91.4585%" y="309" width="0.4029%" height="15" fill="rgb(212,198,13)" fg:x="1135" fg:w="5"/><text x="91.7085%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="91.4585%" y="293" width="0.4029%" height="15" fill="rgb(234,54,46)" fg:x="1135" fg:w="5"/><text x="91.7085%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="91.4585%" y="277" width="0.4029%" height="15" fill="rgb(217,120,7)" fg:x="1135" fg:w="5"/><text x="91.7085%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="91.4585%" y="261" width="0.4029%" height="15" fill="rgb(246,39,15)" fg:x="1135" fg:w="5"/><text x="91.7085%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="91.7808%" y="245" width="0.0806%" height="15" fill="rgb(242,143,31)" fg:x="1139" fg:w="1"/><text x="92.0308%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="91.7808%" y="229" width="0.0806%" height="15" fill="rgb(252,60,24)" fg:x="1139" fg:w="1"/><text x="92.0308%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.7808%" y="213" width="0.0806%" height="15" fill="rgb(249,220,7)" fg:x="1139" fg:w="1"/><text x="92.0308%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.7808%" y="197" width="0.0806%" height="15" fill="rgb(236,67,13)" fg:x="1139" fg:w="1"/><text x="92.0308%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="91.8614%" y="309" width="0.0806%" height="15" fill="rgb(210,62,39)" fg:x="1140" fg:w="1"/><text x="92.1114%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="91.8614%" y="293" width="0.0806%" height="15" fill="rgb(219,122,53)" fg:x="1140" fg:w="1"/><text x="92.1114%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="91.8614%" y="277" width="0.0806%" height="15" fill="rgb(218,87,25)" fg:x="1140" fg:w="1"/><text x="92.1114%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="91.8614%" y="261" width="0.0806%" height="15" fill="rgb(234,179,48)" fg:x="1140" fg:w="1"/><text x="92.1114%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.8614%" y="245" width="0.0806%" height="15" fill="rgb(248,90,0)" fg:x="1140" fg:w="1"/><text x="92.1114%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="92.4255%" y="213" width="0.0806%" height="15" fill="rgb(207,228,37)" fg:x="1147" fg:w="1"/><text x="92.6755%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.4255%" y="197" width="0.0806%" height="15" fill="rgb(235,214,15)" fg:x="1147" fg:w="1"/><text x="92.6755%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="92.4255%" y="181" width="0.0806%" height="15" fill="rgb(210,144,39)" fg:x="1147" fg:w="1"/><text x="92.6755%" y="191.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (8 samples, 0.64%)</title><rect x="91.9420%" y="309" width="0.6446%" height="15" fill="rgb(222,67,41)" fg:x="1141" fg:w="8"/><text x="92.1920%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.56%)</title><rect x="92.0226%" y="293" width="0.5641%" height="15" fill="rgb(205,35,37)" fg:x="1142" fg:w="7"/><text x="92.2726%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.56%)</title><rect x="92.0226%" y="277" width="0.5641%" height="15" fill="rgb(216,125,40)" fg:x="1142" fg:w="7"/><text x="92.2726%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.56%)</title><rect x="92.0226%" y="261" width="0.5641%" height="15" fill="rgb(228,227,20)" fg:x="1142" fg:w="7"/><text x="92.2726%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.56%)</title><rect x="92.0226%" y="245" width="0.5641%" height="15" fill="rgb(242,173,45)" fg:x="1142" fg:w="7"/><text x="92.2726%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.56%)</title><rect x="92.0226%" y="229" width="0.5641%" height="15" fill="rgb(215,79,24)" fg:x="1142" fg:w="7"/><text x="92.2726%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="92.5060%" y="213" width="0.0806%" height="15" fill="rgb(238,164,38)" fg:x="1148" fg:w="1"/><text x="92.7560%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="92.5866%" y="261" width="0.0806%" height="15" fill="rgb(245,196,38)" fg:x="1149" fg:w="1"/><text x="92.8366%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="92.5866%" y="245" width="0.0806%" height="15" fill="rgb(231,217,29)" fg:x="1149" fg:w="1"/><text x="92.8366%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (5 samples, 0.40%)</title><rect x="92.6672%" y="245" width="0.4029%" height="15" fill="rgb(245,6,4)" fg:x="1150" fg:w="5"/><text x="92.9172%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (4 samples, 0.32%)</title><rect x="92.7478%" y="229" width="0.3223%" height="15" fill="rgb(214,76,49)" fg:x="1151" fg:w="4"/><text x="92.9978%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="93.0701%" y="245" width="0.1612%" height="15" fill="rgb(205,96,12)" fg:x="1155" fg:w="2"/><text x="93.3201%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="93.0701%" y="229" width="0.1612%" height="15" fill="rgb(243,131,4)" fg:x="1155" fg:w="2"/><text x="93.3201%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (2 samples, 0.16%)</title><rect x="93.3118%" y="213" width="0.1612%" height="15" fill="rgb(214,114,4)" fg:x="1158" fg:w="2"/><text x="93.5618%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="93.3924%" y="197" width="0.0806%" height="15" fill="rgb(234,215,15)" fg:x="1159" fg:w="1"/><text x="93.6424%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="93.3924%" y="181" width="0.0806%" height="15" fill="rgb(250,216,45)" fg:x="1159" fg:w="1"/><text x="93.6424%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.3924%" y="165" width="0.0806%" height="15" fill="rgb(236,128,4)" fg:x="1159" fg:w="1"/><text x="93.6424%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="93.3924%" y="149" width="0.0806%" height="15" fill="rgb(234,50,33)" fg:x="1159" fg:w="1"/><text x="93.6424%" y="159.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.4730%" y="181" width="0.0806%" height="15" fill="rgb(253,131,37)" fg:x="1160" fg:w="1"/><text x="93.7230%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (7 samples, 0.56%)</title><rect x="93.2313%" y="245" width="0.5641%" height="15" fill="rgb(218,55,27)" fg:x="1157" fg:w="7"/><text x="93.4813%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (7 samples, 0.56%)</title><rect x="93.2313%" y="229" width="0.5641%" height="15" fill="rgb(241,220,28)" fg:x="1157" fg:w="7"/><text x="93.4813%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (4 samples, 0.32%)</title><rect x="93.4730%" y="213" width="0.3223%" height="15" fill="rgb(241,90,48)" fg:x="1160" fg:w="4"/><text x="93.7230%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (4 samples, 0.32%)</title><rect x="93.4730%" y="197" width="0.3223%" height="15" fill="rgb(216,43,37)" fg:x="1160" fg:w="4"/><text x="93.7230%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (3 samples, 0.24%)</title><rect x="93.5536%" y="181" width="0.2417%" height="15" fill="rgb(207,173,9)" fg:x="1161" fg:w="3"/><text x="93.8036%" y="191.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="94.2788%" y="133" width="0.0806%" height="15" fill="rgb(240,126,30)" fg:x="1170" fg:w="1"/><text x="94.5288%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="94.3594%" y="133" width="0.2417%" height="15" fill="rgb(228,178,53)" fg:x="1171" fg:w="3"/><text x="94.6094%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.5205%" y="117" width="0.0806%" height="15" fill="rgb(217,33,4)" fg:x="1173" fg:w="1"/><text x="94.7705%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.5205%" y="101" width="0.0806%" height="15" fill="rgb(206,124,34)" fg:x="1173" fg:w="1"/><text x="94.7705%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.5205%" y="85" width="0.0806%" height="15" fill="rgb(208,122,53)" fg:x="1173" fg:w="1"/><text x="94.7705%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="94.6011%" y="133" width="0.2417%" height="15" fill="rgb(215,202,26)" fg:x="1174" fg:w="3"/><text x="94.8511%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="94.6011%" y="117" width="0.2417%" height="15" fill="rgb(232,198,31)" fg:x="1174" fg:w="3"/><text x="94.8511%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="94.7623%" y="101" width="0.0806%" height="15" fill="rgb(222,23,35)" fg:x="1176" fg:w="1"/><text x="95.0123%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (19 samples, 1.53%)</title><rect x="94.8429%" y="133" width="1.5310%" height="15" fill="rgb(242,27,53)" fg:x="1177" fg:w="19"/><text x="95.0929%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (19 samples, 1.53%)</title><rect x="94.8429%" y="117" width="1.5310%" height="15" fill="rgb(210,216,42)" fg:x="1177" fg:w="19"/><text x="95.0929%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (19 samples, 1.53%)</title><rect x="94.8429%" y="101" width="1.5310%" height="15" fill="rgb(234,39,38)" fg:x="1177" fg:w="19"/><text x="95.0929%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="96.3739%" y="133" width="0.0806%" height="15" fill="rgb(235,126,54)" fg:x="1196" fg:w="1"/><text x="96.6239%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 2.74%)</title><rect x="93.7953%" y="229" width="2.7397%" height="15" fill="rgb(235,150,33)" fg:x="1164" fg:w="34"/><text x="94.0453%" y="239.50">&lt;c..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (34 samples, 2.74%)</title><rect x="93.7953%" y="213" width="2.7397%" height="15" fill="rgb(249,49,53)" fg:x="1164" fg:w="34"/><text x="94.0453%" y="223.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (34 samples, 2.74%)</title><rect x="93.7953%" y="197" width="2.7397%" height="15" fill="rgb(238,60,50)" fg:x="1164" fg:w="34"/><text x="94.0453%" y="207.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (34 samples, 2.74%)</title><rect x="93.7953%" y="181" width="2.7397%" height="15" fill="rgb(210,5,2)" fg:x="1164" fg:w="34"/><text x="94.0453%" y="191.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (34 samples, 2.74%)</title><rect x="93.7953%" y="165" width="2.7397%" height="15" fill="rgb(214,207,24)" fg:x="1164" fg:w="34"/><text x="94.0453%" y="175.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (34 samples, 2.74%)</title><rect x="93.7953%" y="149" width="2.7397%" height="15" fill="rgb(228,173,2)" fg:x="1164" fg:w="34"/><text x="94.0453%" y="159.50">re..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="96.4545%" y="133" width="0.0806%" height="15" fill="rgb(244,26,8)" fg:x="1197" fg:w="1"/><text x="96.7045%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.4545%" y="117" width="0.0806%" height="15" fill="rgb(249,153,35)" fg:x="1197" fg:w="1"/><text x="96.7045%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.4545%" y="101" width="0.0806%" height="15" fill="rgb(221,215,40)" fg:x="1197" fg:w="1"/><text x="96.7045%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.4545%" y="85" width="0.0806%" height="15" fill="rgb(238,106,35)" fg:x="1197" fg:w="1"/><text x="96.7045%" y="95.50"></text></g><g><title>regex_automata::meta::strategy::new (51 samples, 4.11%)</title><rect x="92.6672%" y="261" width="4.1096%" height="15" fill="rgb(207,195,21)" fg:x="1150" fg:w="51"/><text x="92.9172%" y="271.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (37 samples, 2.98%)</title><rect x="93.7953%" y="245" width="2.9815%" height="15" fill="rgb(205,43,29)" fg:x="1164" fg:w="37"/><text x="94.0453%" y="255.50">reg..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="96.5351%" y="229" width="0.2417%" height="15" fill="rgb(236,35,21)" fg:x="1198" fg:w="3"/><text x="96.7851%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="96.6962%" y="213" width="0.0806%" height="15" fill="rgb(244,74,8)" fg:x="1200" fg:w="1"/><text x="96.9462%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="96.7768%" y="261" width="0.0806%" height="15" fill="rgb(241,229,7)" fg:x="1201" fg:w="1"/><text x="97.0268%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="96.7768%" y="245" width="0.0806%" height="15" fill="rgb(212,223,25)" fg:x="1201" fg:w="1"/><text x="97.0268%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="96.7768%" y="229" width="0.0806%" height="15" fill="rgb(234,58,53)" fg:x="1201" fg:w="1"/><text x="97.0268%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.7768%" y="213" width="0.0806%" height="15" fill="rgb(244,36,1)" fg:x="1201" fg:w="1"/><text x="97.0268%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.7768%" y="197" width="0.0806%" height="15" fill="rgb(222,40,54)" fg:x="1201" fg:w="1"/><text x="97.0268%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.7768%" y="181" width="0.0806%" height="15" fill="rgb(210,207,39)" fg:x="1201" fg:w="1"/><text x="97.0268%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="96.8574%" y="229" width="0.0806%" height="15" fill="rgb(234,52,14)" fg:x="1202" fg:w="1"/><text x="97.1074%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="96.8574%" y="213" width="0.0806%" height="15" fill="rgb(239,108,46)" fg:x="1202" fg:w="1"/><text x="97.1074%" y="223.50"></text></g><g><title>indefinite::rules::number::Number::check (64 samples, 5.16%)</title><rect x="91.8614%" y="325" width="5.1571%" height="15" fill="rgb(252,223,5)" fg:x="1140" fg:w="64"/><text x="92.1114%" y="335.50">indefi..</text></g><g><title>regex::regex::string::Regex::new (55 samples, 4.43%)</title><rect x="92.5866%" y="309" width="4.4319%" height="15" fill="rgb(227,181,11)" fg:x="1149" fg:w="55"/><text x="92.8366%" y="319.50">regex..</text></g><g><title>regex::builders::Builder::build_one_string (55 samples, 4.43%)</title><rect x="92.5866%" y="293" width="4.4319%" height="15" fill="rgb(248,126,40)" fg:x="1149" fg:w="55"/><text x="92.8366%" y="303.50">regex..</text></g><g><title>regex_automata::meta::regex::Builder::build (55 samples, 4.43%)</title><rect x="92.5866%" y="277" width="4.4319%" height="15" fill="rgb(243,1,18)" fg:x="1149" fg:w="55"/><text x="92.8366%" y="287.50">regex..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="96.8574%" y="261" width="0.1612%" height="15" fill="rgb(214,145,23)" fg:x="1202" fg:w="2"/><text x="97.1074%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="96.8574%" y="245" width="0.1612%" height="15" fill="rgb(241,218,11)" fg:x="1202" fg:w="2"/><text x="97.1074%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="96.9380%" y="229" width="0.0806%" height="15" fill="rgb(214,219,24)" fg:x="1203" fg:w="1"/><text x="97.1880%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="96.9380%" y="213" width="0.0806%" height="15" fill="rgb(235,32,7)" fg:x="1203" fg:w="1"/><text x="97.1880%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.9380%" y="197" width="0.0806%" height="15" fill="rgb(227,121,28)" fg:x="1203" fg:w="1"/><text x="97.1880%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="97.0185%" y="293" width="0.0806%" height="15" fill="rgb(216,129,49)" fg:x="1204" fg:w="1"/><text x="97.2685%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="97.0185%" y="277" width="0.0806%" height="15" fill="rgb(207,194,50)" fg:x="1204" fg:w="1"/><text x="97.2685%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="97.0185%" y="261" width="0.0806%" height="15" fill="rgb(207,4,18)" fg:x="1204" fg:w="1"/><text x="97.2685%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="97.0185%" y="245" width="0.0806%" height="15" fill="rgb(213,50,30)" fg:x="1204" fg:w="1"/><text x="97.2685%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.0185%" y="229" width="0.0806%" height="15" fill="rgb(208,77,22)" fg:x="1204" fg:w="1"/><text x="97.2685%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="97.0991%" y="213" width="0.0806%" height="15" fill="rgb(244,204,34)" fg:x="1205" fg:w="1"/><text x="97.3491%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.0991%" y="197" width="0.0806%" height="15" fill="rgb(230,20,17)" fg:x="1205" fg:w="1"/><text x="97.3491%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.0991%" y="181" width="0.0806%" height="15" fill="rgb(237,83,15)" fg:x="1205" fg:w="1"/><text x="97.3491%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.0991%" y="165" width="0.0806%" height="15" fill="rgb(221,109,25)" fg:x="1205" fg:w="1"/><text x="97.3491%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="97.1797%" y="213" width="0.0806%" height="15" fill="rgb(205,194,52)" fg:x="1206" fg:w="1"/><text x="97.4297%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (5 samples, 0.40%)</title><rect x="97.0991%" y="245" width="0.4029%" height="15" fill="rgb(244,173,54)" fg:x="1205" fg:w="5"/><text x="97.3491%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="97.0991%" y="229" width="0.4029%" height="15" fill="rgb(227,181,18)" fg:x="1205" fg:w="5"/><text x="97.3491%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (3 samples, 0.24%)</title><rect x="97.2603%" y="213" width="0.2417%" height="15" fill="rgb(238,36,30)" fg:x="1207" fg:w="3"/><text x="97.5103%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="97.2603%" y="197" width="0.2417%" height="15" fill="rgb(254,85,0)" fg:x="1207" fg:w="3"/><text x="97.5103%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="97.4214%" y="181" width="0.0806%" height="15" fill="rgb(247,63,33)" fg:x="1209" fg:w="1"/><text x="97.6714%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.4214%" y="165" width="0.0806%" height="15" fill="rgb(220,7,54)" fg:x="1209" fg:w="1"/><text x="97.6714%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.4214%" y="149" width="0.0806%" height="15" fill="rgb(238,227,21)" fg:x="1209" fg:w="1"/><text x="97.6714%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.4214%" y="133" width="0.0806%" height="15" fill="rgb(237,29,31)" fg:x="1209" fg:w="1"/><text x="97.6714%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="97.5020%" y="229" width="0.0806%" height="15" fill="rgb(211,21,50)" fg:x="1210" fg:w="1"/><text x="97.7520%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.5020%" y="213" width="0.0806%" height="15" fill="rgb(239,119,2)" fg:x="1210" fg:w="1"/><text x="97.7520%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="97.5826%" y="213" width="0.0806%" height="15" fill="rgb(250,2,39)" fg:x="1211" fg:w="1"/><text x="97.8326%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.08%)</title><rect x="97.5826%" y="197" width="0.0806%" height="15" fill="rgb(244,46,53)" fg:x="1211" fg:w="1"/><text x="97.8326%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="97.5826%" y="229" width="0.3223%" height="15" fill="rgb(209,21,19)" fg:x="1211" fg:w="4"/><text x="97.8326%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="97.6632%" y="213" width="0.2417%" height="15" fill="rgb(236,145,4)" fg:x="1212" fg:w="3"/><text x="97.9132%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="97.9049%" y="213" width="0.0806%" height="15" fill="rgb(220,133,36)" fg:x="1215" fg:w="1"/><text x="98.1549%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="97.9049%" y="197" width="0.0806%" height="15" fill="rgb(244,18,3)" fg:x="1215" fg:w="1"/><text x="98.1549%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="97.9049%" y="181" width="0.0806%" height="15" fill="rgb(232,171,48)" fg:x="1215" fg:w="1"/><text x="98.1549%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="97.9049%" y="165" width="0.0806%" height="15" fill="rgb(223,223,53)" fg:x="1215" fg:w="1"/><text x="98.1549%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.9049%" y="149" width="0.0806%" height="15" fill="rgb(246,92,13)" fg:x="1215" fg:w="1"/><text x="98.1549%" y="159.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="97.9049%" y="133" width="0.0806%" height="15" fill="rgb(229,171,10)" fg:x="1215" fg:w="1"/><text x="98.1549%" y="143.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="97.9049%" y="117" width="0.0806%" height="15" fill="rgb(213,131,26)" fg:x="1215" fg:w="1"/><text x="98.1549%" y="127.50"></text></g><g><title>regex_automata::meta::strategy::new (7 samples, 0.56%)</title><rect x="97.5020%" y="245" width="0.5641%" height="15" fill="rgb(242,87,54)" fg:x="1210" fg:w="7"/><text x="97.7520%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (2 samples, 0.16%)</title><rect x="97.9049%" y="229" width="0.1612%" height="15" fill="rgb(237,21,35)" fg:x="1215" fg:w="2"/><text x="98.1549%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="97.9855%" y="213" width="0.0806%" height="15" fill="rgb(253,13,47)" fg:x="1216" fg:w="1"/><text x="98.2355%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="97.9855%" y="197" width="0.0806%" height="15" fill="rgb(215,122,49)" fg:x="1216" fg:w="1"/><text x="98.2355%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="98.0661%" y="197" width="0.0806%" height="15" fill="rgb(209,179,30)" fg:x="1217" fg:w="1"/><text x="98.3161%" y="207.50"></text></g><g><title>regex::regex::string::Regex::new (14 samples, 1.13%)</title><rect x="97.0991%" y="293" width="1.1281%" height="15" fill="rgb(235,100,24)" fg:x="1205" fg:w="14"/><text x="97.3491%" y="303.50"></text></g><g><title>regex::builders::Builder::build_one_string (14 samples, 1.13%)</title><rect x="97.0991%" y="277" width="1.1281%" height="15" fill="rgb(209,67,24)" fg:x="1205" fg:w="14"/><text x="97.3491%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (14 samples, 1.13%)</title><rect x="97.0991%" y="261" width="1.1281%" height="15" fill="rgb(206,74,32)" fg:x="1205" fg:w="14"/><text x="97.3491%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="98.0661%" y="245" width="0.1612%" height="15" fill="rgb(212,45,25)" fg:x="1217" fg:w="2"/><text x="98.3161%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="98.0661%" y="229" width="0.1612%" height="15" fill="rgb(239,26,3)" fg:x="1217" fg:w="2"/><text x="98.3161%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="98.0661%" y="213" width="0.1612%" height="15" fill="rgb(218,36,15)" fg:x="1217" fg:w="2"/><text x="98.3161%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="98.1467%" y="197" width="0.0806%" height="15" fill="rgb(206,108,24)" fg:x="1218" fg:w="1"/><text x="98.3967%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="98.1467%" y="181" width="0.0806%" height="15" fill="rgb(234,204,42)" fg:x="1218" fg:w="1"/><text x="98.3967%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.1467%" y="165" width="0.0806%" height="15" fill="rgb(229,2,11)" fg:x="1218" fg:w="1"/><text x="98.3967%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.1467%" y="149" width="0.0806%" height="15" fill="rgb(221,20,48)" fg:x="1218" fg:w="1"/><text x="98.3967%" y="159.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (126 samples, 10.15%)</title><rect x="88.2353%" y="405" width="10.1531%" height="15" fill="rgb(244,164,10)" fg:x="1095" fg:w="126"/><text x="88.4853%" y="415.50">&lt;&amp;kernel::model..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (122 samples, 9.83%)</title><rect x="88.5576%" y="389" width="9.8308%" height="15" fill="rgb(243,229,2)" fg:x="1099" fg:w="122"/><text x="88.8076%" y="399.50">plugins_core::..</text></g><g><title>indefinite::indefinite (122 samples, 9.83%)</title><rect x="88.5576%" y="373" width="9.8308%" height="15" fill="rgb(232,131,37)" fg:x="1099" fg:w="122"/><text x="88.8076%" y="383.50">indefinite::in..</text></g><g><title>indefinite::methods::indefinite (122 samples, 9.83%)</title><rect x="88.5576%" y="357" width="9.8308%" height="15" fill="rgb(217,156,11)" fg:x="1099" fg:w="122"/><text x="88.8076%" y="367.50">indefinite::me..</text></g><g><title>indefinite::methods::apply_rules (122 samples, 9.83%)</title><rect x="88.5576%" y="341" width="9.8308%" height="15" fill="rgb(239,99,48)" fg:x="1099" fg:w="122"/><text x="88.8076%" y="351.50">indefinite::me..</text></g><g><title>indefinite::rules::other::Other::run (17 samples, 1.37%)</title><rect x="97.0185%" y="325" width="1.3699%" height="15" fill="rgb(231,209,9)" fg:x="1204" fg:w="17"/><text x="97.2685%" y="335.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (17 samples, 1.37%)</title><rect x="97.0185%" y="309" width="1.3699%" height="15" fill="rgb(254,97,27)" fg:x="1204" fg:w="17"/><text x="97.2685%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="98.2272%" y="293" width="0.1612%" height="15" fill="rgb(223,151,38)" fg:x="1219" fg:w="2"/><text x="98.4772%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="98.2272%" y="277" width="0.1612%" height="15" fill="rgb(219,206,35)" fg:x="1219" fg:w="2"/><text x="98.4772%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="98.2272%" y="261" width="0.1612%" height="15" fill="rgb(216,130,31)" fg:x="1219" fg:w="2"/><text x="98.4772%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="98.2272%" y="245" width="0.1612%" height="15" fill="rgb(251,97,34)" fg:x="1219" fg:w="2"/><text x="98.4772%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="98.2272%" y="229" width="0.1612%" height="15" fill="rgb(246,159,47)" fg:x="1219" fg:w="2"/><text x="98.4772%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.3884%" y="373" width="0.0806%" height="15" fill="rgb(232,87,10)" fg:x="1221" fg:w="1"/><text x="98.6384%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.3884%" y="357" width="0.0806%" height="15" fill="rgb(249,1,37)" fg:x="1221" fg:w="1"/><text x="98.6384%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.3884%" y="341" width="0.0806%" height="15" fill="rgb(239,135,14)" fg:x="1221" fg:w="1"/><text x="98.6384%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.3884%" y="325" width="0.0806%" height="15" fill="rgb(253,116,46)" fg:x="1221" fg:w="1"/><text x="98.6384%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.3884%" y="309" width="0.0806%" height="15" fill="rgb(222,217,37)" fg:x="1221" fg:w="1"/><text x="98.6384%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.3884%" y="389" width="0.1612%" height="15" fill="rgb(252,96,8)" fg:x="1221" fg:w="2"/><text x="98.6384%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.4690%" y="373" width="0.0806%" height="15" fill="rgb(254,103,41)" fg:x="1222" fg:w="1"/><text x="98.7190%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="98.3884%" y="405" width="0.2417%" height="15" fill="rgb(218,213,19)" fg:x="1221" fg:w="3"/><text x="98.6384%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.5496%" y="389" width="0.0806%" height="15" fill="rgb(253,95,21)" fg:x="1223" fg:w="1"/><text x="98.7996%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.5496%" y="373" width="0.0806%" height="15" fill="rgb(229,26,28)" fg:x="1223" fg:w="1"/><text x="98.7996%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="98.5496%" y="357" width="0.0806%" height="15" fill="rgb(230,129,16)" fg:x="1223" fg:w="1"/><text x="98.7996%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="98.5496%" y="341" width="0.0806%" height="15" fill="rgb(236,126,17)" fg:x="1223" fg:w="1"/><text x="98.7996%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="98.5496%" y="325" width="0.0806%" height="15" fill="rgb(209,33,33)" fg:x="1223" fg:w="1"/><text x="98.7996%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.5496%" y="309" width="0.0806%" height="15" fill="rgb(227,85,29)" fg:x="1223" fg:w="1"/><text x="98.7996%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.5496%" y="293" width="0.0806%" height="15" fill="rgb(241,53,46)" fg:x="1223" fg:w="1"/><text x="98.7996%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.5496%" y="277" width="0.0806%" height="15" fill="rgb(228,167,53)" fg:x="1223" fg:w="1"/><text x="98.7996%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.6301%" y="197" width="0.0806%" height="15" fill="rgb(238,195,45)" fg:x="1224" fg:w="1"/><text x="98.8801%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.6301%" y="181" width="0.0806%" height="15" fill="rgb(252,124,45)" fg:x="1224" fg:w="1"/><text x="98.8801%" y="191.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.6301%" y="245" width="0.1612%" height="15" fill="rgb(251,38,35)" fg:x="1224" fg:w="2"/><text x="98.8801%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.6301%" y="229" width="0.1612%" height="15" fill="rgb(227,33,2)" fg:x="1224" fg:w="2"/><text x="98.8801%" y="239.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.6301%" y="213" width="0.1612%" height="15" fill="rgb(223,157,46)" fg:x="1224" fg:w="2"/><text x="98.8801%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.7107%" y="197" width="0.0806%" height="15" fill="rgb(222,78,41)" fg:x="1225" fg:w="1"/><text x="98.9607%" y="207.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.7107%" y="181" width="0.0806%" height="15" fill="rgb(248,176,11)" fg:x="1225" fg:w="1"/><text x="98.9607%" y="191.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.7107%" y="165" width="0.0806%" height="15" fill="rgb(241,221,18)" fg:x="1225" fg:w="1"/><text x="98.9607%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.7107%" y="149" width="0.0806%" height="15" fill="rgb(218,85,22)" fg:x="1225" fg:w="1"/><text x="98.9607%" y="159.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="98.6301%" y="277" width="0.2417%" height="15" fill="rgb(222,223,7)" fg:x="1224" fg:w="3"/><text x="98.8801%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="98.6301%" y="261" width="0.2417%" height="15" fill="rgb(254,59,39)" fg:x="1224" fg:w="3"/><text x="98.8801%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.7913%" y="245" width="0.0806%" height="15" fill="rgb(247,100,27)" fg:x="1226" fg:w="1"/><text x="99.0413%" y="255.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.7913%" y="229" width="0.0806%" height="15" fill="rgb(237,207,10)" fg:x="1226" fg:w="1"/><text x="99.0413%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.7913%" y="213" width="0.0806%" height="15" fill="rgb(220,121,28)" fg:x="1226" fg:w="1"/><text x="99.0413%" y="223.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (145 samples, 11.68%)</title><rect x="87.2683%" y="629" width="11.6841%" height="15" fill="rgb(213,223,20)" fg:x="1083" fg:w="145"/><text x="87.5183%" y="639.50">&lt;engine::session:..</text></g><g><title>kernel::plugins::mw::apply_middleware (145 samples, 11.68%)</title><rect x="87.2683%" y="613" width="11.6841%" height="15" fill="rgb(205,121,27)" fg:x="1083" fg:w="145"/><text x="87.5183%" y="623.50">kernel::plugins::..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (145 samples, 11.68%)</title><rect x="87.2683%" y="597" width="11.6841%" height="15" fill="rgb(253,24,53)" fg:x="1083" fg:w="145"/><text x="87.5183%" y="607.50">kernel::plugins::..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (145 samples, 11.68%)</title><rect x="87.2683%" y="581" width="11.6841%" height="15" fill="rgb(224,224,47)" fg:x="1083" fg:w="145"/><text x="87.5183%" y="591.50">&lt;engine::session:..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (138 samples, 11.12%)</title><rect x="87.8324%" y="565" width="11.1201%" height="15" fill="rgb(250,125,36)" fg:x="1090" fg:w="138"/><text x="88.0824%" y="575.50">kernel::plugins:..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (138 samples, 11.12%)</title><rect x="87.8324%" y="549" width="11.1201%" height="15" fill="rgb(240,144,38)" fg:x="1090" fg:w="138"/><text x="88.0824%" y="559.50">&lt;plugins_dynlib:..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (137 samples, 11.04%)</title><rect x="87.9130%" y="533" width="11.0395%" height="15" fill="rgb(250,15,50)" fg:x="1091" fg:w="137"/><text x="88.1630%" y="543.50">kernel::plugins:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (137 samples, 11.04%)</title><rect x="87.9130%" y="517" width="11.0395%" height="15" fill="rgb(210,24,26)" fg:x="1091" fg:w="137"/><text x="88.1630%" y="527.50">core::ops::funct..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (136 samples, 10.96%)</title><rect x="87.9936%" y="501" width="10.9589%" height="15" fill="rgb(234,53,53)" fg:x="1092" fg:w="136"/><text x="88.2436%" y="511.50">kernel::plugins:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (136 samples, 10.96%)</title><rect x="87.9936%" y="485" width="10.9589%" height="15" fill="rgb(208,108,28)" fg:x="1092" fg:w="136"/><text x="88.2436%" y="495.50">core::ops::funct..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (136 samples, 10.96%)</title><rect x="87.9936%" y="469" width="10.9589%" height="15" fill="rgb(227,143,7)" fg:x="1092" fg:w="136"/><text x="88.2436%" y="479.50">&lt;alloc::boxed::B..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (136 samples, 10.96%)</title><rect x="87.9936%" y="453" width="10.9589%" height="15" fill="rgb(238,189,38)" fg:x="1092" fg:w="136"/><text x="88.2436%" y="463.50">&lt;engine::session..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (136 samples, 10.96%)</title><rect x="87.9936%" y="437" width="10.9589%" height="15" fill="rgb(222,69,15)" fg:x="1092" fg:w="136"/><text x="88.2436%" y="447.50">&lt;plugins_core::l..</text></g><g><title>plugins_core::looking::model::new_area_observation (134 samples, 10.80%)</title><rect x="88.1547%" y="421" width="10.7977%" height="15" fill="rgb(213,169,7)" fg:x="1094" fg:w="134"/><text x="88.4047%" y="431.50">plugins_core::lo..</text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (4 samples, 0.32%)</title><rect x="98.6301%" y="405" width="0.3223%" height="15" fill="rgb(251,219,4)" fg:x="1224" fg:w="4"/><text x="98.8801%" y="415.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (4 samples, 0.32%)</title><rect x="98.6301%" y="389" width="0.3223%" height="15" fill="rgb(241,55,40)" fg:x="1224" fg:w="4"/><text x="98.8801%" y="399.50"></text></g><g><title>engine::session::Session::load_entity (4 samples, 0.32%)</title><rect x="98.6301%" y="373" width="0.3223%" height="15" fill="rgb(243,57,30)" fg:x="1224" fg:w="4"/><text x="98.8801%" y="383.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="98.6301%" y="357" width="0.3223%" height="15" fill="rgb(234,50,30)" fg:x="1224" fg:w="4"/><text x="98.8801%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="98.6301%" y="341" width="0.3223%" height="15" fill="rgb(239,23,42)" fg:x="1224" fg:w="4"/><text x="98.8801%" y="351.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="98.6301%" y="325" width="0.3223%" height="15" fill="rgb(217,38,19)" fg:x="1224" fg:w="4"/><text x="98.8801%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="98.6301%" y="309" width="0.3223%" height="15" fill="rgb(215,179,16)" fg:x="1224" fg:w="4"/><text x="98.8801%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="98.6301%" y="293" width="0.3223%" height="15" fill="rgb(254,21,37)" fg:x="1224" fg:w="4"/><text x="98.8801%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.8719%" y="277" width="0.0806%" height="15" fill="rgb(219,207,48)" fg:x="1227" fg:w="1"/><text x="99.1219%" y="287.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="98.9525%" y="629" width="0.0806%" height="15" fill="rgb(227,225,41)" fg:x="1228" fg:w="1"/><text x="99.2025%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="98.9525%" y="613" width="0.0806%" height="15" fill="rgb(223,130,1)" fg:x="1228" fg:w="1"/><text x="99.2025%" y="623.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="98.9525%" y="597" width="0.0806%" height="15" fill="rgb(249,54,42)" fg:x="1228" fg:w="1"/><text x="99.2025%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.0330%" y="629" width="0.0806%" height="15" fill="rgb(248,69,25)" fg:x="1229" fg:w="1"/><text x="99.2830%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.0330%" y="613" width="0.0806%" height="15" fill="rgb(234,21,32)" fg:x="1229" fg:w="1"/><text x="99.2830%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1136%" y="581" width="0.0806%" height="15" fill="rgb(252,136,6)" fg:x="1230" fg:w="1"/><text x="99.3636%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1136%" y="565" width="0.0806%" height="15" fill="rgb(245,87,12)" fg:x="1230" fg:w="1"/><text x="99.3636%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1136%" y="549" width="0.0806%" height="15" fill="rgb(208,12,15)" fg:x="1230" fg:w="1"/><text x="99.3636%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.1136%" y="533" width="0.0806%" height="15" fill="rgb(250,98,2)" fg:x="1230" fg:w="1"/><text x="99.3636%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1136%" y="517" width="0.0806%" height="15" fill="rgb(205,213,15)" fg:x="1230" fg:w="1"/><text x="99.3636%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.1136%" y="501" width="0.0806%" height="15" fill="rgb(248,192,44)" fg:x="1230" fg:w="1"/><text x="99.3636%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.1136%" y="485" width="0.0806%" height="15" fill="rgb(221,89,17)" fg:x="1230" fg:w="1"/><text x="99.3636%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.1136%" y="469" width="0.0806%" height="15" fill="rgb(209,55,3)" fg:x="1230" fg:w="1"/><text x="99.3636%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.1136%" y="453" width="0.0806%" height="15" fill="rgb(247,23,45)" fg:x="1230" fg:w="1"/><text x="99.3636%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.1136%" y="437" width="0.0806%" height="15" fill="rgb(235,152,23)" fg:x="1230" fg:w="1"/><text x="99.3636%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.1136%" y="421" width="0.0806%" height="15" fill="rgb(244,63,13)" fg:x="1230" fg:w="1"/><text x="99.3636%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.1136%" y="405" width="0.0806%" height="15" fill="rgb(227,30,37)" fg:x="1230" fg:w="1"/><text x="99.3636%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.1136%" y="389" width="0.0806%" height="15" fill="rgb(224,49,42)" fg:x="1230" fg:w="1"/><text x="99.3636%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.1136%" y="373" width="0.0806%" height="15" fill="rgb(218,129,5)" fg:x="1230" fg:w="1"/><text x="99.3636%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.1136%" y="357" width="0.0806%" height="15" fill="rgb(240,199,54)" fg:x="1230" fg:w="1"/><text x="99.3636%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.1136%" y="341" width="0.0806%" height="15" fill="rgb(234,31,13)" fg:x="1230" fg:w="1"/><text x="99.3636%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.1136%" y="325" width="0.0806%" height="15" fill="rgb(219,73,54)" fg:x="1230" fg:w="1"/><text x="99.3636%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1942%" y="533" width="0.0806%" height="15" fill="rgb(251,162,10)" fg:x="1231" fg:w="1"/><text x="99.4442%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1942%" y="517" width="0.0806%" height="15" fill="rgb(240,138,47)" fg:x="1231" fg:w="1"/><text x="99.4442%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.1942%" y="501" width="0.0806%" height="15" fill="rgb(216,138,26)" fg:x="1231" fg:w="1"/><text x="99.4442%" y="511.50"></text></g><g><title>engine::session::internal::Added::find_refs (3 samples, 0.24%)</title><rect x="99.1136%" y="613" width="0.2417%" height="15" fill="rgb(243,17,35)" fg:x="1230" fg:w="3"/><text x="99.3636%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="99.1136%" y="597" width="0.2417%" height="15" fill="rgb(241,60,18)" fg:x="1230" fg:w="3"/><text x="99.3636%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="99.1942%" y="581" width="0.1612%" height="15" fill="rgb(234,2,44)" fg:x="1231" fg:w="2"/><text x="99.4442%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="99.1942%" y="565" width="0.1612%" height="15" fill="rgb(225,225,33)" fg:x="1231" fg:w="2"/><text x="99.4442%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="99.1942%" y="549" width="0.1612%" height="15" fill="rgb(234,50,31)" fg:x="1231" fg:w="2"/><text x="99.4442%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.2748%" y="533" width="0.0806%" height="15" fill="rgb(249,6,25)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.2748%" y="517" width="0.0806%" height="15" fill="rgb(241,5,17)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="527.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="99.2748%" y="501" width="0.0806%" height="15" fill="rgb(207,116,10)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.2748%" y="485" width="0.0806%" height="15" fill="rgb(222,128,18)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.2748%" y="469" width="0.0806%" height="15" fill="rgb(229,109,25)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.2748%" y="453" width="0.0806%" height="15" fill="rgb(222,102,25)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.2748%" y="437" width="0.0806%" height="15" fill="rgb(239,211,5)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.2748%" y="421" width="0.0806%" height="15" fill="rgb(223,136,26)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.2748%" y="405" width="0.0806%" height="15" fill="rgb(227,30,15)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.2748%" y="389" width="0.0806%" height="15" fill="rgb(247,76,4)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.2748%" y="373" width="0.0806%" height="15" fill="rgb(245,38,48)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.2748%" y="357" width="0.0806%" height="15" fill="rgb(210,220,14)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.2748%" y="341" width="0.0806%" height="15" fill="rgb(224,60,51)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.2748%" y="325" width="0.0806%" height="15" fill="rgb(212,133,49)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.2748%" y="309" width="0.0806%" height="15" fill="rgb(231,39,22)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.2748%" y="293" width="0.0806%" height="15" fill="rgb(236,173,22)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.2748%" y="277" width="0.0806%" height="15" fill="rgb(210,70,0)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.2748%" y="261" width="0.0806%" height="15" fill="rgb(215,170,11)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.3554%" y="517" width="0.0806%" height="15" fill="rgb(220,154,28)" fg:x="1233" fg:w="1"/><text x="99.6054%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.4359%" y="501" width="0.0806%" height="15" fill="rgb(240,160,41)" fg:x="1234" fg:w="1"/><text x="99.6859%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.4359%" y="485" width="0.0806%" height="15" fill="rgb(243,215,41)" fg:x="1234" fg:w="1"/><text x="99.6859%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.4359%" y="469" width="0.0806%" height="15" fill="rgb(214,208,31)" fg:x="1234" fg:w="1"/><text x="99.6859%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.4359%" y="453" width="0.0806%" height="15" fill="rgb(247,57,22)" fg:x="1234" fg:w="1"/><text x="99.6859%" y="463.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.4359%" y="437" width="0.0806%" height="15" fill="rgb(228,73,52)" fg:x="1234" fg:w="1"/><text x="99.6859%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.4359%" y="421" width="0.0806%" height="15" fill="rgb(252,60,9)" fg:x="1234" fg:w="1"/><text x="99.6859%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.4359%" y="405" width="0.0806%" height="15" fill="rgb(233,9,51)" fg:x="1234" fg:w="1"/><text x="99.6859%" y="415.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.4359%" y="389" width="0.0806%" height="15" fill="rgb(223,67,14)" fg:x="1234" fg:w="1"/><text x="99.6859%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.4359%" y="373" width="0.0806%" height="15" fill="rgb(222,86,2)" fg:x="1234" fg:w="1"/><text x="99.6859%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.4359%" y="357" width="0.0806%" height="15" fill="rgb(243,58,54)" fg:x="1234" fg:w="1"/><text x="99.6859%" y="367.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.48%)</title><rect x="99.1136%" y="629" width="0.4835%" height="15" fill="rgb(210,200,39)" fg:x="1230" fg:w="6"/><text x="99.3636%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="99.3554%" y="613" width="0.2417%" height="15" fill="rgb(238,135,9)" fg:x="1233" fg:w="3"/><text x="99.6054%" y="623.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="99.3554%" y="597" width="0.2417%" height="15" fill="rgb(232,179,7)" fg:x="1233" fg:w="3"/><text x="99.6054%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="99.3554%" y="581" width="0.2417%" height="15" fill="rgb(245,65,41)" fg:x="1233" fg:w="3"/><text x="99.6054%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="99.3554%" y="565" width="0.2417%" height="15" fill="rgb(227,43,8)" fg:x="1233" fg:w="3"/><text x="99.6054%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="99.3554%" y="549" width="0.2417%" height="15" fill="rgb(235,91,14)" fg:x="1233" fg:w="3"/><text x="99.6054%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="99.3554%" y="533" width="0.2417%" height="15" fill="rgb(235,219,31)" fg:x="1233" fg:w="3"/><text x="99.6054%" y="543.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.4359%" y="517" width="0.1612%" height="15" fill="rgb(227,121,25)" fg:x="1234" fg:w="2"/><text x="99.6859%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.5165%" y="501" width="0.0806%" height="15" fill="rgb(254,129,24)" fg:x="1235" fg:w="1"/><text x="99.7665%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.5165%" y="485" width="0.0806%" height="15" fill="rgb(226,144,49)" fg:x="1235" fg:w="1"/><text x="99.7665%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.5165%" y="469" width="0.0806%" height="15" fill="rgb(214,187,32)" fg:x="1235" fg:w="1"/><text x="99.7665%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.5165%" y="453" width="0.0806%" height="15" fill="rgb(243,129,46)" fg:x="1235" fg:w="1"/><text x="99.7665%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.5165%" y="437" width="0.0806%" height="15" fill="rgb(221,185,35)" fg:x="1235" fg:w="1"/><text x="99.7665%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5971%" y="565" width="0.0806%" height="15" fill="rgb(205,0,32)" fg:x="1236" fg:w="1"/><text x="99.8471%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.5971%" y="549" width="0.0806%" height="15" fill="rgb(229,179,12)" fg:x="1236" fg:w="1"/><text x="99.8471%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.5971%" y="533" width="0.0806%" height="15" fill="rgb(252,107,19)" fg:x="1236" fg:w="1"/><text x="99.8471%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.5971%" y="517" width="0.0806%" height="15" fill="rgb(220,95,27)" fg:x="1236" fg:w="1"/><text x="99.8471%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.5971%" y="501" width="0.0806%" height="15" fill="rgb(240,113,40)" fg:x="1236" fg:w="1"/><text x="99.8471%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.5971%" y="485" width="0.0806%" height="15" fill="rgb(208,4,43)" fg:x="1236" fg:w="1"/><text x="99.8471%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.5971%" y="469" width="0.0806%" height="15" fill="rgb(247,189,30)" fg:x="1236" fg:w="1"/><text x="99.8471%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.5971%" y="453" width="0.0806%" height="15" fill="rgb(231,157,17)" fg:x="1236" fg:w="1"/><text x="99.8471%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.5971%" y="437" width="0.0806%" height="15" fill="rgb(224,139,6)" fg:x="1236" fg:w="1"/><text x="99.8471%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.5971%" y="421" width="0.0806%" height="15" fill="rgb(223,83,16)" fg:x="1236" fg:w="1"/><text x="99.8471%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.5971%" y="405" width="0.0806%" height="15" fill="rgb(232,211,20)" fg:x="1236" fg:w="1"/><text x="99.8471%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.5971%" y="389" width="0.0806%" height="15" fill="rgb(225,203,35)" fg:x="1236" fg:w="1"/><text x="99.8471%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.5971%" y="373" width="0.0806%" height="15" fill="rgb(215,211,44)" fg:x="1236" fg:w="1"/><text x="99.8471%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="99.5971%" y="581" width="0.1612%" height="15" fill="rgb(248,213,26)" fg:x="1236" fg:w="2"/><text x="99.8471%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.6777%" y="565" width="0.0806%" height="15" fill="rgb(214,23,52)" fg:x="1237" fg:w="1"/><text x="99.9277%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.6777%" y="549" width="0.0806%" height="15" fill="rgb(225,173,50)" fg:x="1237" fg:w="1"/><text x="99.9277%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.6777%" y="533" width="0.0806%" height="15" fill="rgb(206,150,22)" fg:x="1237" fg:w="1"/><text x="99.9277%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.6777%" y="517" width="0.0806%" height="15" fill="rgb(239,64,23)" fg:x="1237" fg:w="1"/><text x="99.9277%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.6777%" y="501" width="0.0806%" height="15" fill="rgb(242,50,38)" fg:x="1237" fg:w="1"/><text x="99.9277%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.6777%" y="485" width="0.0806%" height="15" fill="rgb(217,91,15)" fg:x="1237" fg:w="1"/><text x="99.9277%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.6777%" y="469" width="0.0806%" height="15" fill="rgb(230,172,6)" fg:x="1237" fg:w="1"/><text x="99.9277%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.6777%" y="453" width="0.0806%" height="15" fill="rgb(221,98,26)" fg:x="1237" fg:w="1"/><text x="99.9277%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.6777%" y="437" width="0.0806%" height="15" fill="rgb(227,210,45)" fg:x="1237" fg:w="1"/><text x="99.9277%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.6777%" y="421" width="0.0806%" height="15" fill="rgb(206,8,30)" fg:x="1237" fg:w="1"/><text x="99.9277%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.6777%" y="405" width="0.0806%" height="15" fill="rgb(241,219,17)" fg:x="1237" fg:w="1"/><text x="99.9277%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.6777%" y="389" width="0.0806%" height="15" fill="rgb(247,121,29)" fg:x="1237" fg:w="1"/><text x="99.9277%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="99.7583%" y="581" width="0.0806%" height="15" fill="rgb(219,169,49)" fg:x="1238" fg:w="1"/><text x="100.0083%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="99.7583%" y="565" width="0.0806%" height="15" fill="rgb(253,49,49)" fg:x="1238" fg:w="1"/><text x="100.0083%" y="575.50"></text></g><g><title>all (1,241 samples, 100%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(217,178,3)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="1023.50"></text></g><g><title>simple-0edd5fae (1,241 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(234,73,37)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="1007.50">simple-0edd5fae</text></g><g><title>_start (1,241 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(250,98,22)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="991.50">_start</text></g><g><title>__libc_start_main (1,241 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(220,108,37)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="975.50">__libc_start_main</text></g><g><title>main (1,241 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(225,168,10)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="959.50">main</text></g><g><title>std::rt::lang_start_internal (1,241 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(247,215,21)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="943.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,241 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(253,189,31)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="927.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,241 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(241,54,22)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="911.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,241 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(211,87,4)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="895.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,241 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(245,112,24)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="879.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,241 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(235,190,41)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="863.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,241 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(214,89,8)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="847.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,241 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(249,155,35)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="831.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,241 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(249,88,26)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="815.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,241 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(232,56,8)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="799.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,241 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(240,95,3)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="783.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,241 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(222,44,28)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="767.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,241 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(234,16,30)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="751.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,241 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(223,26,17)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="735.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (276 samples, 22.24%)</title><rect x="77.7599%" y="709" width="22.2401%" height="15" fill="rgb(239,187,47)" fg:x="965" fg:w="276"/><text x="78.0099%" y="719.50">&lt;criterion::routine::Function&lt;M,F,T..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (276 samples, 22.24%)</title><rect x="77.7599%" y="693" width="22.2401%" height="15" fill="rgb(247,102,50)" fg:x="965" fg:w="276"/><text x="78.0099%" y="703.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (276 samples, 22.24%)</title><rect x="77.7599%" y="677" width="22.2401%" height="15" fill="rgb(231,216,22)" fg:x="965" fg:w="276"/><text x="78.0099%" y="687.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (158 samples, 12.73%)</title><rect x="87.2683%" y="661" width="12.7317%" height="15" fill="rgb(216,201,26)" fg:x="1083" fg:w="158"/><text x="87.5183%" y="671.50">engine::session::Se..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (158 samples, 12.73%)</title><rect x="87.2683%" y="645" width="12.7317%" height="15" fill="rgb(214,186,23)" fg:x="1083" fg:w="158"/><text x="87.5183%" y="655.50">engine::session::Se..</text></g><g><title>kernel::model::EntityPtrResolver::world (5 samples, 0.40%)</title><rect x="99.5971%" y="629" width="0.4029%" height="15" fill="rgb(235,184,4)" fg:x="1236" fg:w="5"/><text x="99.8471%" y="639.50"></text></g><g><title>engine::session::Session::load_entity (5 samples, 0.40%)</title><rect x="99.5971%" y="613" width="0.4029%" height="15" fill="rgb(244,46,17)" fg:x="1236" fg:w="5"/><text x="99.8471%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="99.5971%" y="597" width="0.4029%" height="15" fill="rgb(248,74,46)" fg:x="1236" fg:w="5"/><text x="99.8471%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="99.8388%" y="581" width="0.1612%" height="15" fill="rgb(243,79,5)" fg:x="1239" fg:w="2"/><text x="100.0888%" y="591.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.8388%" y="565" width="0.1612%" height="15" fill="rgb(213,148,1)" fg:x="1239" fg:w="2"/><text x="100.0888%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.8388%" y="549" width="0.1612%" height="15" fill="rgb(221,30,0)" fg:x="1239" fg:w="2"/><text x="100.0888%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9194%" y="533" width="0.0806%" height="15" fill="rgb(207,85,29)" fg:x="1240" fg:w="1"/><text x="100.1694%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.9194%" y="517" width="0.0806%" height="15" fill="rgb(239,31,46)" fg:x="1240" fg:w="1"/><text x="100.1694%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9194%" y="501" width="0.0806%" height="15" fill="rgb(219,6,1)" fg:x="1240" fg:w="1"/><text x="100.1694%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.9194%" y="485" width="0.0806%" height="15" fill="rgb(229,90,29)" fg:x="1240" fg:w="1"/><text x="100.1694%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9194%" y="469" width="0.0806%" height="15" fill="rgb(242,201,42)" fg:x="1240" fg:w="1"/><text x="100.1694%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.9194%" y="453" width="0.0806%" height="15" fill="rgb(243,80,54)" fg:x="1240" fg:w="1"/><text x="100.1694%" y="463.50"></text></g></svg></svg>