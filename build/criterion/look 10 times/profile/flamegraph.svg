<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1094" onload="init(evt)" viewBox="0 0 1200 1094" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1094" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1077.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1077.00"> </text><svg id="frames" x="10" width="1180" total_samples="1247"><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0802%" y="677" width="0.0802%" height="15" fill="rgb(226,128,27)" fg:x="1" fg:w="1"/><text x="0.3302%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0802%" y="661" width="0.0802%" height="15" fill="rgb(244,144,4)" fg:x="1" fg:w="1"/><text x="0.3302%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.1604%" y="677" width="0.0802%" height="15" fill="rgb(221,4,13)" fg:x="2" fg:w="1"/><text x="0.4104%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4812%" y="645" width="0.0802%" height="15" fill="rgb(208,170,28)" fg:x="6" fg:w="1"/><text x="0.7312%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.6415%" y="629" width="0.0802%" height="15" fill="rgb(226,131,13)" fg:x="8" fg:w="1"/><text x="0.8915%" y="639.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.7217%" y="613" width="0.1604%" height="15" fill="rgb(215,72,41)" fg:x="9" fg:w="2"/><text x="0.9717%" y="623.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (5 samples, 0.40%)</title><rect x="0.5613%" y="645" width="0.4010%" height="15" fill="rgb(243,108,20)" fg:x="7" fg:w="5"/><text x="0.8113%" y="655.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (3 samples, 0.24%)</title><rect x="0.7217%" y="629" width="0.2406%" height="15" fill="rgb(230,189,17)" fg:x="9" fg:w="3"/><text x="0.9717%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="0.8821%" y="613" width="0.0802%" height="15" fill="rgb(220,50,17)" fg:x="11" fg:w="1"/><text x="1.1321%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.8821%" y="597" width="0.0802%" height="15" fill="rgb(248,152,48)" fg:x="11" fg:w="1"/><text x="1.1321%" y="607.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (11 samples, 0.88%)</title><rect x="0.2406%" y="677" width="0.8821%" height="15" fill="rgb(244,91,11)" fg:x="3" fg:w="11"/><text x="0.4906%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.88%)</title><rect x="0.2406%" y="661" width="0.8821%" height="15" fill="rgb(220,157,5)" fg:x="3" fg:w="11"/><text x="0.4906%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_dynlib::DynamicPlugin&gt; (2 samples, 0.16%)</title><rect x="0.9623%" y="645" width="0.1604%" height="15" fill="rgb(253,137,8)" fg:x="12" fg:w="2"/><text x="1.2123%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.0425%" y="629" width="0.0802%" height="15" fill="rgb(217,137,51)" fg:x="13" fg:w="1"/><text x="1.2925%" y="639.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="1.2029%" y="565" width="0.2406%" height="15" fill="rgb(218,209,53)" fg:x="15" fg:w="3"/><text x="1.4529%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="1.4435%" y="565" width="0.2406%" height="15" fill="rgb(249,137,25)" fg:x="18" fg:w="3"/><text x="1.6935%" y="575.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="1.4435%" y="549" width="0.2406%" height="15" fill="rgb(239,155,26)" fg:x="18" fg:w="3"/><text x="1.6935%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="1.6840%" y="549" width="0.1604%" height="15" fill="rgb(227,85,46)" fg:x="21" fg:w="2"/><text x="1.9340%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="1.6840%" y="533" width="0.1604%" height="15" fill="rgb(251,107,43)" fg:x="21" fg:w="2"/><text x="1.9340%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.7642%" y="517" width="0.0802%" height="15" fill="rgb(234,170,33)" fg:x="22" fg:w="1"/><text x="2.0142%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.8444%" y="533" width="0.0802%" height="15" fill="rgb(206,29,35)" fg:x="23" fg:w="1"/><text x="2.0944%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.88%)</title><rect x="1.2029%" y="613" width="0.8821%" height="15" fill="rgb(227,138,25)" fg:x="15" fg:w="11"/><text x="1.4529%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (11 samples, 0.88%)</title><rect x="1.2029%" y="597" width="0.8821%" height="15" fill="rgb(249,131,35)" fg:x="15" fg:w="11"/><text x="1.4529%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (11 samples, 0.88%)</title><rect x="1.2029%" y="581" width="0.8821%" height="15" fill="rgb(239,6,40)" fg:x="15" fg:w="11"/><text x="1.4529%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="1.6840%" y="565" width="0.4010%" height="15" fill="rgb(246,136,47)" fg:x="21" fg:w="5"/><text x="1.9340%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="1.8444%" y="549" width="0.2406%" height="15" fill="rgb(253,58,26)" fg:x="23" fg:w="3"/><text x="2.0944%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="1.9246%" y="533" width="0.1604%" height="15" fill="rgb(237,141,10)" fg:x="24" fg:w="2"/><text x="2.1746%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.0048%" y="517" width="0.0802%" height="15" fill="rgb(234,156,12)" fg:x="25" fg:w="1"/><text x="2.2548%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.0850%" y="613" width="0.0802%" height="15" fill="rgb(243,224,36)" fg:x="26" fg:w="1"/><text x="2.3350%" y="623.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="2.1652%" y="597" width="0.1604%" height="15" fill="rgb(205,229,51)" fg:x="27" fg:w="2"/><text x="2.4152%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.3256%" y="597" width="0.0802%" height="15" fill="rgb(223,189,4)" fg:x="29" fg:w="1"/><text x="2.5756%" y="607.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="2.4058%" y="581" width="0.1604%" height="15" fill="rgb(249,167,54)" fg:x="30" fg:w="2"/><text x="2.6558%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.5662%" y="581" width="0.0802%" height="15" fill="rgb(218,34,28)" fg:x="32" fg:w="1"/><text x="2.8162%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.6464%" y="565" width="0.0802%" height="15" fill="rgb(232,109,42)" fg:x="33" fg:w="1"/><text x="2.8964%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="2.7265%" y="565" width="0.2406%" height="15" fill="rgb(248,214,46)" fg:x="34" fg:w="3"/><text x="2.9765%" y="575.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="2.7265%" y="549" width="0.2406%" height="15" fill="rgb(244,216,40)" fg:x="34" fg:w="3"/><text x="2.9765%" y="559.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="2.9671%" y="549" width="0.1604%" height="15" fill="rgb(231,226,31)" fg:x="37" fg:w="2"/><text x="3.2171%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="3.1275%" y="549" width="0.0802%" height="15" fill="rgb(238,38,43)" fg:x="39" fg:w="1"/><text x="3.3775%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.1275%" y="533" width="0.0802%" height="15" fill="rgb(208,88,43)" fg:x="39" fg:w="1"/><text x="3.3775%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="3.2077%" y="549" width="0.0802%" height="15" fill="rgb(205,136,37)" fg:x="40" fg:w="1"/><text x="3.4577%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="3.2077%" y="533" width="0.0802%" height="15" fill="rgb(237,34,14)" fg:x="40" fg:w="1"/><text x="3.4577%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.2077%" y="517" width="0.0802%" height="15" fill="rgb(236,193,44)" fg:x="40" fg:w="1"/><text x="3.4577%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.2077%" y="501" width="0.0802%" height="15" fill="rgb(231,48,10)" fg:x="40" fg:w="1"/><text x="3.4577%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.2077%" y="485" width="0.0802%" height="15" fill="rgb(213,141,34)" fg:x="40" fg:w="1"/><text x="3.4577%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 2.33%)</title><rect x="1.1227%" y="661" width="2.3256%" height="15" fill="rgb(249,130,34)" fg:x="14" fg:w="29"/><text x="1.3727%" y="671.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (29 samples, 2.33%)</title><rect x="1.1227%" y="645" width="2.3256%" height="15" fill="rgb(219,42,41)" fg:x="14" fg:w="29"/><text x="1.3727%" y="655.50">c..</text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 2.33%)</title><rect x="1.1227%" y="629" width="2.3256%" height="15" fill="rgb(224,100,54)" fg:x="14" fg:w="29"/><text x="1.3727%" y="639.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (16 samples, 1.28%)</title><rect x="2.1652%" y="613" width="1.2831%" height="15" fill="rgb(229,200,27)" fg:x="27" fg:w="16"/><text x="2.4152%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (13 samples, 1.04%)</title><rect x="2.4058%" y="597" width="1.0425%" height="15" fill="rgb(217,118,10)" fg:x="30" fg:w="13"/><text x="2.6558%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (10 samples, 0.80%)</title><rect x="2.6464%" y="581" width="0.8019%" height="15" fill="rgb(206,22,3)" fg:x="33" fg:w="10"/><text x="2.8964%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="2.9671%" y="565" width="0.4812%" height="15" fill="rgb(232,163,46)" fg:x="37" fg:w="6"/><text x="3.2171%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="3.2879%" y="549" width="0.1604%" height="15" fill="rgb(206,95,13)" fg:x="41" fg:w="2"/><text x="3.5379%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.3681%" y="533" width="0.0802%" height="15" fill="rgb(253,154,18)" fg:x="42" fg:w="1"/><text x="3.6181%" y="543.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (44 samples, 3.53%)</title><rect x="0.0000%" y="693" width="3.5285%" height="15" fill="rgb(219,32,23)" fg:x="0" fg:w="44"/><text x="0.2500%" y="703.50">&lt;al..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (30 samples, 2.41%)</title><rect x="1.1227%" y="677" width="2.4058%" height="15" fill="rgb(230,191,45)" fg:x="14" fg:w="30"/><text x="1.3727%" y="687.50">co..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.4483%" y="661" width="0.0802%" height="15" fill="rgb(229,64,36)" fg:x="43" fg:w="1"/><text x="3.6983%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.6087%" y="645" width="0.0802%" height="15" fill="rgb(205,129,25)" fg:x="45" fg:w="1"/><text x="3.8587%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="3.6087%" y="629" width="0.0802%" height="15" fill="rgb(254,112,7)" fg:x="45" fg:w="1"/><text x="3.8587%" y="639.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (4 samples, 0.32%)</title><rect x="4.0898%" y="565" width="0.3208%" height="15" fill="rgb(226,53,48)" fg:x="51" fg:w="4"/><text x="4.3398%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="4.1700%" y="549" width="0.2406%" height="15" fill="rgb(214,153,38)" fg:x="52" fg:w="3"/><text x="4.4200%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="4.1700%" y="533" width="0.2406%" height="15" fill="rgb(243,101,7)" fg:x="52" fg:w="3"/><text x="4.4200%" y="543.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="4.1700%" y="517" width="0.2406%" height="15" fill="rgb(240,140,22)" fg:x="52" fg:w="3"/><text x="4.4200%" y="527.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (6 samples, 0.48%)</title><rect x="4.0096%" y="597" width="0.4812%" height="15" fill="rgb(235,114,2)" fg:x="50" fg:w="6"/><text x="4.2596%" y="607.50"></text></g><g><title>kernel::plugins::Schema::action (6 samples, 0.48%)</title><rect x="4.0096%" y="581" width="0.4812%" height="15" fill="rgb(242,59,12)" fg:x="50" fg:w="6"/><text x="4.2596%" y="591.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="4.4106%" y="565" width="0.0802%" height="15" fill="rgb(252,134,9)" fg:x="55" fg:w="1"/><text x="4.6606%" y="575.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="4.4908%" y="597" width="0.1604%" height="15" fill="rgb(236,4,44)" fg:x="56" fg:w="2"/><text x="4.7408%" y="607.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="4.4908%" y="581" width="0.1604%" height="15" fill="rgb(254,172,41)" fg:x="56" fg:w="2"/><text x="4.7408%" y="591.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::plugins::HasActionSchema&gt;::action_schema (2 samples, 0.16%)</title><rect x="4.4908%" y="565" width="0.1604%" height="15" fill="rgb(244,63,20)" fg:x="56" fg:w="2"/><text x="4.7408%" y="575.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (2 samples, 0.16%)</title><rect x="4.4908%" y="549" width="0.1604%" height="15" fill="rgb(250,73,31)" fg:x="56" fg:w="2"/><text x="4.7408%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="4.4908%" y="533" width="0.1604%" height="15" fill="rgb(241,38,36)" fg:x="56" fg:w="2"/><text x="4.7408%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="4.4908%" y="517" width="0.1604%" height="15" fill="rgb(245,211,2)" fg:x="56" fg:w="2"/><text x="4.7408%" y="527.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="4.4908%" y="501" width="0.1604%" height="15" fill="rgb(206,120,28)" fg:x="56" fg:w="2"/><text x="4.7408%" y="511.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="4.6512%" y="597" width="0.1604%" height="15" fill="rgb(211,59,34)" fg:x="58" fg:w="2"/><text x="4.9012%" y="607.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="4.6512%" y="581" width="0.1604%" height="15" fill="rgb(233,168,5)" fg:x="58" fg:w="2"/><text x="4.9012%" y="591.50"></text></g><g><title>replies::identifier_to_key (2 samples, 0.16%)</title><rect x="4.6512%" y="565" width="0.1604%" height="15" fill="rgb(234,33,13)" fg:x="58" fg:w="2"/><text x="4.9012%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.7314%" y="549" width="0.0802%" height="15" fill="rgb(231,150,26)" fg:x="59" fg:w="1"/><text x="4.9814%" y="559.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="4.8115%" y="597" width="0.0802%" height="15" fill="rgb(217,191,4)" fg:x="60" fg:w="1"/><text x="5.0615%" y="607.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="4.8115%" y="581" width="0.0802%" height="15" fill="rgb(246,198,38)" fg:x="60" fg:w="1"/><text x="5.0615%" y="591.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="4.8115%" y="565" width="0.0802%" height="15" fill="rgb(245,64,37)" fg:x="60" fg:w="1"/><text x="5.0615%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.8115%" y="549" width="0.0802%" height="15" fill="rgb(250,30,36)" fg:x="60" fg:w="1"/><text x="5.0615%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.8115%" y="533" width="0.0802%" height="15" fill="rgb(217,86,53)" fg:x="60" fg:w="1"/><text x="5.0615%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.8115%" y="517" width="0.0802%" height="15" fill="rgb(228,157,16)" fg:x="60" fg:w="1"/><text x="5.0615%" y="527.50"></text></g><g><title>&lt;plugins_core::moving::actions::AddRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="4.9719%" y="565" width="0.0802%" height="15" fill="rgb(217,59,31)" fg:x="62" fg:w="1"/><text x="5.2219%" y="575.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="4.9719%" y="549" width="0.0802%" height="15" fill="rgb(237,138,41)" fg:x="62" fg:w="1"/><text x="5.2219%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.0521%" y="565" width="0.0802%" height="15" fill="rgb(227,91,49)" fg:x="63" fg:w="1"/><text x="5.3021%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="5.1323%" y="565" width="0.0802%" height="15" fill="rgb(247,21,44)" fg:x="64" fg:w="1"/><text x="5.3823%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.1323%" y="549" width="0.0802%" height="15" fill="rgb(219,210,51)" fg:x="64" fg:w="1"/><text x="5.3823%" y="559.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.1323%" y="533" width="0.0802%" height="15" fill="rgb(209,140,6)" fg:x="64" fg:w="1"/><text x="5.3823%" y="543.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="5.2125%" y="565" width="0.0802%" height="15" fill="rgb(221,188,24)" fg:x="65" fg:w="1"/><text x="5.4625%" y="575.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (6 samples, 0.48%)</title><rect x="4.8917%" y="597" width="0.4812%" height="15" fill="rgb(232,154,20)" fg:x="61" fg:w="6"/><text x="5.1417%" y="607.50"></text></g><g><title>kernel::plugins::Schema::action (6 samples, 0.48%)</title><rect x="4.8917%" y="581" width="0.4812%" height="15" fill="rgb(244,137,50)" fg:x="61" fg:w="6"/><text x="5.1417%" y="591.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="5.2927%" y="565" width="0.0802%" height="15" fill="rgb(225,185,43)" fg:x="66" fg:w="1"/><text x="5.5427%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.2927%" y="549" width="0.0802%" height="15" fill="rgb(213,205,38)" fg:x="66" fg:w="1"/><text x="5.5427%" y="559.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="5.3729%" y="597" width="0.1604%" height="15" fill="rgb(236,73,12)" fg:x="67" fg:w="2"/><text x="5.6229%" y="607.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="5.3729%" y="581" width="0.1604%" height="15" fill="rgb(235,219,13)" fg:x="67" fg:w="2"/><text x="5.6229%" y="591.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="5.4531%" y="565" width="0.0802%" height="15" fill="rgb(218,59,36)" fg:x="68" fg:w="1"/><text x="5.7031%" y="575.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="5.5333%" y="597" width="0.1604%" height="15" fill="rgb(205,110,39)" fg:x="69" fg:w="2"/><text x="5.7833%" y="607.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (23 samples, 1.84%)</title><rect x="3.9294%" y="613" width="1.8444%" height="15" fill="rgb(218,206,42)" fg:x="49" fg:w="23"/><text x="4.1794%" y="623.50">&lt;..</text></g><g><title>kernel::plugins::Plugin::schema (1 samples, 0.08%)</title><rect x="5.6937%" y="597" width="0.0802%" height="15" fill="rgb(248,125,24)" fg:x="71" fg:w="1"/><text x="5.9437%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.8540%" y="597" width="0.0802%" height="15" fill="rgb(242,28,27)" fg:x="73" fg:w="1"/><text x="6.1040%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.9342%" y="581" width="0.0802%" height="15" fill="rgb(216,228,15)" fg:x="74" fg:w="1"/><text x="6.1842%" y="591.50"></text></g><g><title>libloading::library_filename (2 samples, 0.16%)</title><rect x="5.9342%" y="597" width="0.1604%" height="15" fill="rgb(235,116,46)" fg:x="74" fg:w="2"/><text x="6.1842%" y="607.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (1 samples, 0.08%)</title><rect x="6.0144%" y="581" width="0.0802%" height="15" fill="rgb(224,18,32)" fg:x="75" fg:w="1"/><text x="6.2644%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="6.0144%" y="565" width="0.0802%" height="15" fill="rgb(252,5,12)" fg:x="75" fg:w="1"/><text x="6.2644%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="6.0144%" y="549" width="0.0802%" height="15" fill="rgb(251,36,5)" fg:x="75" fg:w="1"/><text x="6.2644%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="6.0144%" y="533" width="0.0802%" height="15" fill="rgb(217,53,14)" fg:x="75" fg:w="1"/><text x="6.2644%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="6.0144%" y="517" width="0.0802%" height="15" fill="rgb(215,86,45)" fg:x="75" fg:w="1"/><text x="6.2644%" y="527.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (8 samples, 0.64%)</title><rect x="5.7739%" y="613" width="0.6415%" height="15" fill="rgb(242,169,11)" fg:x="72" fg:w="8"/><text x="6.0239%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat (4 samples, 0.32%)</title><rect x="6.0946%" y="597" width="0.3208%" height="15" fill="rgb(211,213,45)" fg:x="76" fg:w="4"/><text x="6.3446%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (4 samples, 0.32%)</title><rect x="6.0946%" y="581" width="0.3208%" height="15" fill="rgb(205,88,11)" fg:x="76" fg:w="4"/><text x="6.3446%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (4 samples, 0.32%)</title><rect x="6.0946%" y="565" width="0.3208%" height="15" fill="rgb(252,69,26)" fg:x="76" fg:w="4"/><text x="6.3446%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (4 samples, 0.32%)</title><rect x="6.0946%" y="549" width="0.3208%" height="15" fill="rgb(246,123,37)" fg:x="76" fg:w="4"/><text x="6.3446%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx (4 samples, 0.32%)</title><rect x="6.0946%" y="533" width="0.3208%" height="15" fill="rgb(212,205,5)" fg:x="76" fg:w="4"/><text x="6.3446%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (4 samples, 0.32%)</title><rect x="6.0946%" y="517" width="0.3208%" height="15" fill="rgb(253,148,0)" fg:x="76" fg:w="4"/><text x="6.3446%" y="527.50"></text></g><g><title>statx (4 samples, 0.32%)</title><rect x="6.0946%" y="501" width="0.3208%" height="15" fill="rgb(239,22,4)" fg:x="76" fg:w="4"/><text x="6.3446%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.4154%" y="565" width="0.0802%" height="15" fill="rgb(226,26,53)" fg:x="80" fg:w="1"/><text x="6.6654%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.4154%" y="549" width="0.0802%" height="15" fill="rgb(225,229,45)" fg:x="80" fg:w="1"/><text x="6.6654%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.4154%" y="533" width="0.0802%" height="15" fill="rgb(220,60,37)" fg:x="80" fg:w="1"/><text x="6.6654%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.4154%" y="517" width="0.0802%" height="15" fill="rgb(217,180,35)" fg:x="80" fg:w="1"/><text x="6.6654%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.4154%" y="501" width="0.0802%" height="15" fill="rgb(229,7,53)" fg:x="80" fg:w="1"/><text x="6.6654%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.4154%" y="485" width="0.0802%" height="15" fill="rgb(254,137,3)" fg:x="80" fg:w="1"/><text x="6.6654%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.4154%" y="469" width="0.0802%" height="15" fill="rgb(215,140,41)" fg:x="80" fg:w="1"/><text x="6.6654%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="6.4154%" y="453" width="0.0802%" height="15" fill="rgb(250,80,15)" fg:x="80" fg:w="1"/><text x="6.6654%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="6.4154%" y="437" width="0.0802%" height="15" fill="rgb(252,191,6)" fg:x="80" fg:w="1"/><text x="6.6654%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="6.4154%" y="421" width="0.0802%" height="15" fill="rgb(246,217,18)" fg:x="80" fg:w="1"/><text x="6.6654%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="6.4154%" y="405" width="0.0802%" height="15" fill="rgb(223,93,7)" fg:x="80" fg:w="1"/><text x="6.6654%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.4154%" y="389" width="0.0802%" height="15" fill="rgb(225,55,52)" fg:x="80" fg:w="1"/><text x="6.6654%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="6.7362%" y="549" width="0.1604%" height="15" fill="rgb(240,31,24)" fg:x="84" fg:w="2"/><text x="6.9862%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="6.7362%" y="533" width="0.1604%" height="15" fill="rgb(205,56,52)" fg:x="84" fg:w="2"/><text x="6.9862%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="6.7362%" y="517" width="0.1604%" height="15" fill="rgb(246,146,12)" fg:x="84" fg:w="2"/><text x="6.9862%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="6.7362%" y="501" width="0.1604%" height="15" fill="rgb(239,84,36)" fg:x="84" fg:w="2"/><text x="6.9862%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="6.7362%" y="485" width="0.1604%" height="15" fill="rgb(207,41,40)" fg:x="84" fg:w="2"/><text x="6.9862%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="6.7362%" y="469" width="0.1604%" height="15" fill="rgb(241,179,25)" fg:x="84" fg:w="2"/><text x="6.9862%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="6.7362%" y="453" width="0.1604%" height="15" fill="rgb(210,0,34)" fg:x="84" fg:w="2"/><text x="6.9862%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="6.7362%" y="437" width="0.1604%" height="15" fill="rgb(225,217,29)" fg:x="84" fg:w="2"/><text x="6.9862%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="6.7362%" y="421" width="0.1604%" height="15" fill="rgb(216,191,38)" fg:x="84" fg:w="2"/><text x="6.9862%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="6.7362%" y="405" width="0.1604%" height="15" fill="rgb(232,140,52)" fg:x="84" fg:w="2"/><text x="6.9862%" y="415.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="6.7362%" y="389" width="0.1604%" height="15" fill="rgb(223,158,51)" fg:x="84" fg:w="2"/><text x="6.9862%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.8164%" y="373" width="0.0802%" height="15" fill="rgb(235,29,51)" fg:x="85" fg:w="1"/><text x="7.0664%" y="383.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (10 samples, 0.80%)</title><rect x="6.4154%" y="597" width="0.8019%" height="15" fill="rgb(215,181,18)" fg:x="80" fg:w="10"/><text x="6.6654%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (10 samples, 0.80%)</title><rect x="6.4154%" y="581" width="0.8019%" height="15" fill="rgb(227,125,34)" fg:x="80" fg:w="10"/><text x="6.6654%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.72%)</title><rect x="6.4956%" y="565" width="0.7217%" height="15" fill="rgb(230,197,49)" fg:x="81" fg:w="9"/><text x="6.7456%" y="575.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="6.8966%" y="549" width="0.3208%" height="15" fill="rgb(239,141,16)" fg:x="86" fg:w="4"/><text x="7.1466%" y="559.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="7.2173%" y="581" width="0.0802%" height="15" fill="rgb(225,105,43)" fg:x="90" fg:w="1"/><text x="7.4673%" y="591.50"></text></g><g><title>glob::is_dir (10 samples, 0.80%)</title><rect x="7.2975%" y="549" width="0.8019%" height="15" fill="rgb(214,131,14)" fg:x="91" fg:w="10"/><text x="7.5475%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat (9 samples, 0.72%)</title><rect x="7.3777%" y="533" width="0.7217%" height="15" fill="rgb(229,177,11)" fg:x="92" fg:w="9"/><text x="7.6277%" y="543.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (9 samples, 0.72%)</title><rect x="7.3777%" y="517" width="0.7217%" height="15" fill="rgb(231,180,14)" fg:x="92" fg:w="9"/><text x="7.6277%" y="527.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (9 samples, 0.72%)</title><rect x="7.3777%" y="501" width="0.7217%" height="15" fill="rgb(232,88,2)" fg:x="92" fg:w="9"/><text x="7.6277%" y="511.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (9 samples, 0.72%)</title><rect x="7.3777%" y="485" width="0.7217%" height="15" fill="rgb(205,220,8)" fg:x="92" fg:w="9"/><text x="7.6277%" y="495.50"></text></g><g><title>std::sys::unix::fs::try_statx (9 samples, 0.72%)</title><rect x="7.3777%" y="469" width="0.7217%" height="15" fill="rgb(225,23,53)" fg:x="92" fg:w="9"/><text x="7.6277%" y="479.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (9 samples, 0.72%)</title><rect x="7.3777%" y="453" width="0.7217%" height="15" fill="rgb(213,62,29)" fg:x="92" fg:w="9"/><text x="7.6277%" y="463.50"></text></g><g><title>statx (9 samples, 0.72%)</title><rect x="7.3777%" y="437" width="0.7217%" height="15" fill="rgb(227,75,7)" fg:x="92" fg:w="9"/><text x="7.6277%" y="447.50"></text></g><g><title>std::sys::unix::cvt (1 samples, 0.08%)</title><rect x="8.0994%" y="469" width="0.0802%" height="15" fill="rgb(207,105,14)" fg:x="101" fg:w="1"/><text x="8.3494%" y="479.50"></text></g><g><title>std::io::error::Error::last_os_error (1 samples, 0.08%)</title><rect x="8.0994%" y="453" width="0.0802%" height="15" fill="rgb(245,62,29)" fg:x="101" fg:w="1"/><text x="8.3494%" y="463.50"></text></g><g><title>std::sys::unix::os::errno (1 samples, 0.08%)</title><rect x="8.0994%" y="437" width="0.0802%" height="15" fill="rgb(236,202,4)" fg:x="101" fg:w="1"/><text x="8.3494%" y="447.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 1.04%)</title><rect x="7.2975%" y="581" width="1.0425%" height="15" fill="rgb(250,67,1)" fg:x="91" fg:w="13"/><text x="7.5475%" y="591.50"></text></g><g><title>glob::fill_todo (13 samples, 1.04%)</title><rect x="7.2975%" y="565" width="1.0425%" height="15" fill="rgb(253,115,44)" fg:x="91" fg:w="13"/><text x="7.5475%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat (3 samples, 0.24%)</title><rect x="8.0994%" y="549" width="0.2406%" height="15" fill="rgb(251,139,18)" fg:x="101" fg:w="3"/><text x="8.3494%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (3 samples, 0.24%)</title><rect x="8.0994%" y="533" width="0.2406%" height="15" fill="rgb(218,22,32)" fg:x="101" fg:w="3"/><text x="8.3494%" y="543.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 0.24%)</title><rect x="8.0994%" y="517" width="0.2406%" height="15" fill="rgb(243,53,5)" fg:x="101" fg:w="3"/><text x="8.3494%" y="527.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (3 samples, 0.24%)</title><rect x="8.0994%" y="501" width="0.2406%" height="15" fill="rgb(227,56,16)" fg:x="101" fg:w="3"/><text x="8.3494%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx (3 samples, 0.24%)</title><rect x="8.0994%" y="485" width="0.2406%" height="15" fill="rgb(245,53,0)" fg:x="101" fg:w="3"/><text x="8.3494%" y="495.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.16%)</title><rect x="8.1796%" y="469" width="0.1604%" height="15" fill="rgb(216,170,35)" fg:x="102" fg:w="2"/><text x="8.4296%" y="479.50"></text></g><g><title>statx (2 samples, 0.16%)</title><rect x="8.1796%" y="453" width="0.1604%" height="15" fill="rgb(211,200,8)" fg:x="102" fg:w="2"/><text x="8.4296%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;glob::Paths&gt; (1 samples, 0.08%)</title><rect x="8.3400%" y="581" width="0.0802%" height="15" fill="rgb(228,204,44)" fg:x="104" fg:w="1"/><text x="8.5900%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="8.3400%" y="565" width="0.0802%" height="15" fill="rgb(214,121,17)" fg:x="104" fg:w="1"/><text x="8.5900%" y="575.50"></text></g><g><title>&lt;std::path::PathBuf as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="8.4202%" y="549" width="0.0802%" height="15" fill="rgb(233,64,38)" fg:x="105" fg:w="1"/><text x="8.6702%" y="559.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="8.4202%" y="533" width="0.0802%" height="15" fill="rgb(253,54,19)" fg:x="105" fg:w="1"/><text x="8.6702%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.5004%" y="533" width="0.0802%" height="15" fill="rgb(253,94,18)" fg:x="106" fg:w="1"/><text x="8.7504%" y="543.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (29 samples, 2.33%)</title><rect x="6.4154%" y="613" width="2.3256%" height="15" fill="rgb(227,57,52)" fg:x="80" fg:w="29"/><text x="6.6654%" y="623.50">&lt;..</text></g><g><title>plugins_rune::sources::load_directory_sources (19 samples, 1.52%)</title><rect x="7.2173%" y="597" width="1.5237%" height="15" fill="rgb(230,228,50)" fg:x="90" fg:w="19"/><text x="7.4673%" y="607.50"></text></g><g><title>glob::glob (4 samples, 0.32%)</title><rect x="8.4202%" y="581" width="0.3208%" height="15" fill="rgb(217,205,27)" fg:x="105" fg:w="4"/><text x="8.6702%" y="591.50"></text></g><g><title>glob::glob_with (4 samples, 0.32%)</title><rect x="8.4202%" y="565" width="0.3208%" height="15" fill="rgb(252,71,50)" fg:x="105" fg:w="4"/><text x="8.6702%" y="575.50"></text></g><g><title>glob::Pattern::new (3 samples, 0.24%)</title><rect x="8.5004%" y="549" width="0.2406%" height="15" fill="rgb(209,86,4)" fg:x="106" fg:w="3"/><text x="8.7504%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="8.5806%" y="533" width="0.1604%" height="15" fill="rgb(229,94,0)" fg:x="107" fg:w="2"/><text x="8.8306%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.6608%" y="517" width="0.0802%" height="15" fill="rgb(252,223,21)" fg:x="108" fg:w="1"/><text x="8.9108%" y="527.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (2 samples, 0.16%)</title><rect x="8.7410%" y="613" width="0.1604%" height="15" fill="rgb(230,210,4)" fg:x="109" fg:w="2"/><text x="8.9910%" y="623.50"></text></g><g><title>std::time::Instant::duration_since (2 samples, 0.16%)</title><rect x="8.7410%" y="597" width="0.1604%" height="15" fill="rgb(240,149,38)" fg:x="109" fg:w="2"/><text x="8.9910%" y="607.50"></text></g><g><title>std::time::Instant::checked_duration_since (2 samples, 0.16%)</title><rect x="8.7410%" y="581" width="0.1604%" height="15" fill="rgb(254,105,20)" fg:x="109" fg:w="2"/><text x="8.9910%" y="591.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (2 samples, 0.16%)</title><rect x="8.7410%" y="565" width="0.1604%" height="15" fill="rgb(253,87,46)" fg:x="109" fg:w="2"/><text x="8.9910%" y="575.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (2 samples, 0.16%)</title><rect x="8.7410%" y="549" width="0.1604%" height="15" fill="rgb(253,116,33)" fg:x="109" fg:w="2"/><text x="8.9910%" y="559.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="8.9816%" y="597" width="0.1604%" height="15" fill="rgb(229,198,5)" fg:x="112" fg:w="2"/><text x="9.2316%" y="607.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="9.2221%" y="581" width="0.1604%" height="15" fill="rgb(242,38,37)" fg:x="115" fg:w="2"/><text x="9.4721%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (7 samples, 0.56%)</title><rect x="8.9014%" y="613" width="0.5613%" height="15" fill="rgb(242,69,53)" fg:x="111" fg:w="7"/><text x="9.1514%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (4 samples, 0.32%)</title><rect x="9.1419%" y="597" width="0.3208%" height="15" fill="rgb(249,80,16)" fg:x="114" fg:w="4"/><text x="9.3919%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::plugins::ArgumentType&gt; (1 samples, 0.08%)</title><rect x="9.3825%" y="581" width="0.0802%" height="15" fill="rgb(206,128,11)" fg:x="117" fg:w="1"/><text x="9.6325%" y="591.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (71 samples, 5.69%)</title><rect x="3.8492%" y="629" width="5.6937%" height="15" fill="rgb(212,35,20)" fg:x="48" fg:w="71"/><text x="4.0992%" y="639.50">kernel:..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="9.4627%" y="613" width="0.0802%" height="15" fill="rgb(236,79,13)" fg:x="118" fg:w="1"/><text x="9.7127%" y="623.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="9.4627%" y="597" width="0.0802%" height="15" fill="rgb(233,123,3)" fg:x="118" fg:w="1"/><text x="9.7127%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="9.5429%" y="597" width="0.0802%" height="15" fill="rgb(214,93,52)" fg:x="119" fg:w="1"/><text x="9.7929%" y="607.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="9.5429%" y="581" width="0.0802%" height="15" fill="rgb(251,37,40)" fg:x="119" fg:w="1"/><text x="9.7929%" y="591.50"></text></g><g><title>engine::session::Session::initialize (75 samples, 6.01%)</title><rect x="3.6889%" y="645" width="6.0144%" height="15" fill="rgb(227,80,54)" fg:x="46" fg:w="75"/><text x="3.9389%" y="655.50">engine::..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (2 samples, 0.16%)</title><rect x="9.5429%" y="629" width="0.1604%" height="15" fill="rgb(254,48,11)" fg:x="119" fg:w="2"/><text x="9.7929%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="9.5429%" y="613" width="0.1604%" height="15" fill="rgb(235,193,26)" fg:x="119" fg:w="2"/><text x="9.7929%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="9.6231%" y="597" width="0.0802%" height="15" fill="rgb(229,99,21)" fg:x="120" fg:w="1"/><text x="9.8731%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="9.6231%" y="581" width="0.0802%" height="15" fill="rgb(211,140,41)" fg:x="120" fg:w="1"/><text x="9.8731%" y="591.50"></text></g><g><title>&lt;plugins_core::emote::actions::LaughAction as kernel::actions::Action&gt;::perform (1 samples, 0.08%)</title><rect x="9.7033%" y="613" width="0.0802%" height="15" fill="rgb(240,227,30)" fg:x="121" fg:w="1"/><text x="9.9533%" y="623.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (79 samples, 6.34%)</title><rect x="3.5285%" y="693" width="6.3352%" height="15" fill="rgb(215,224,45)" fg:x="44" fg:w="79"/><text x="3.7785%" y="703.50">&lt;engine:..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (79 samples, 6.34%)</title><rect x="3.5285%" y="677" width="6.3352%" height="15" fill="rgb(206,123,31)" fg:x="44" fg:w="79"/><text x="3.7785%" y="687.50">engine::..</text></g><g><title>engine::session::Session::new (78 samples, 6.26%)</title><rect x="3.6087%" y="661" width="6.2550%" height="15" fill="rgb(210,138,16)" fg:x="45" fg:w="78"/><text x="3.8587%" y="671.50">engine::..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (2 samples, 0.16%)</title><rect x="9.7033%" y="645" width="0.1604%" height="15" fill="rgb(228,57,28)" fg:x="121" fg:w="2"/><text x="9.9533%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="9.7033%" y="629" width="0.1604%" height="15" fill="rgb(242,170,10)" fg:x="121" fg:w="2"/><text x="9.9533%" y="639.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPluginFactory as kernel::plugins::PluginFactory&gt;::create_plugin (1 samples, 0.08%)</title><rect x="9.7835%" y="613" width="0.0802%" height="15" fill="rgb(228,214,39)" fg:x="122" fg:w="1"/><text x="10.0335%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="10.0241%" y="677" width="0.0802%" height="15" fill="rgb(218,179,33)" fg:x="125" fg:w="1"/><text x="10.2741%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="10.0241%" y="661" width="0.0802%" height="15" fill="rgb(235,193,39)" fg:x="125" fg:w="1"/><text x="10.2741%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.1043%" y="645" width="0.0802%" height="15" fill="rgb(219,221,36)" fg:x="126" fg:w="1"/><text x="10.3543%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="10.1043%" y="661" width="0.1604%" height="15" fill="rgb(248,218,19)" fg:x="126" fg:w="2"/><text x="10.3543%" y="671.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="10.1844%" y="645" width="0.0802%" height="15" fill="rgb(205,50,9)" fg:x="127" fg:w="1"/><text x="10.4344%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.1844%" y="629" width="0.0802%" height="15" fill="rgb(238,81,28)" fg:x="127" fg:w="1"/><text x="10.4344%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="10.2646%" y="597" width="0.1604%" height="15" fill="rgb(235,110,19)" fg:x="128" fg:w="2"/><text x="10.5146%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="10.2646%" y="581" width="0.1604%" height="15" fill="rgb(214,7,14)" fg:x="128" fg:w="2"/><text x="10.5146%" y="591.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="10.2646%" y="565" width="0.1604%" height="15" fill="rgb(211,77,3)" fg:x="128" fg:w="2"/><text x="10.5146%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="10.4250%" y="549" width="0.0802%" height="15" fill="rgb(229,5,9)" fg:x="130" fg:w="1"/><text x="10.6750%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.4250%" y="533" width="0.0802%" height="15" fill="rgb(225,90,11)" fg:x="130" fg:w="1"/><text x="10.6750%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.4250%" y="517" width="0.0802%" height="15" fill="rgb(242,56,8)" fg:x="130" fg:w="1"/><text x="10.6750%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="10.4250%" y="565" width="0.1604%" height="15" fill="rgb(249,212,39)" fg:x="130" fg:w="2"/><text x="10.6750%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.5052%" y="549" width="0.0802%" height="15" fill="rgb(236,90,9)" fg:x="131" fg:w="1"/><text x="10.7552%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.5052%" y="533" width="0.0802%" height="15" fill="rgb(206,88,35)" fg:x="131" fg:w="1"/><text x="10.7552%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.5052%" y="517" width="0.0802%" height="15" fill="rgb(205,126,30)" fg:x="131" fg:w="1"/><text x="10.7552%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="10.5854%" y="549" width="0.1604%" height="15" fill="rgb(230,176,12)" fg:x="132" fg:w="2"/><text x="10.8354%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="10.8260%" y="485" width="0.1604%" height="15" fill="rgb(243,19,9)" fg:x="135" fg:w="2"/><text x="11.0760%" y="495.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="10.8260%" y="469" width="0.1604%" height="15" fill="rgb(245,171,17)" fg:x="135" fg:w="2"/><text x="11.0760%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="10.8260%" y="453" width="0.1604%" height="15" fill="rgb(227,52,21)" fg:x="135" fg:w="2"/><text x="11.0760%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="10.8260%" y="501" width="0.2406%" height="15" fill="rgb(238,69,14)" fg:x="135" fg:w="3"/><text x="11.0760%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="10.9864%" y="485" width="0.0802%" height="15" fill="rgb(241,156,39)" fg:x="137" fg:w="1"/><text x="11.2364%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (5 samples, 0.40%)</title><rect x="10.8260%" y="533" width="0.4010%" height="15" fill="rgb(212,227,28)" fg:x="135" fg:w="5"/><text x="11.0760%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="10.8260%" y="517" width="0.4010%" height="15" fill="rgb(209,118,27)" fg:x="135" fg:w="5"/><text x="11.0760%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="11.0666%" y="501" width="0.1604%" height="15" fill="rgb(226,102,5)" fg:x="138" fg:w="2"/><text x="11.3166%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.1468%" y="485" width="0.0802%" height="15" fill="rgb(223,34,3)" fg:x="139" fg:w="1"/><text x="11.3968%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="11.2269%" y="533" width="0.3208%" height="15" fill="rgb(221,81,38)" fg:x="140" fg:w="4"/><text x="11.4769%" y="543.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="11.2269%" y="517" width="0.3208%" height="15" fill="rgb(236,219,28)" fg:x="140" fg:w="4"/><text x="11.4769%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="11.3071%" y="501" width="0.2406%" height="15" fill="rgb(213,200,14)" fg:x="141" fg:w="3"/><text x="11.5571%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="11.3873%" y="485" width="0.1604%" height="15" fill="rgb(240,33,19)" fg:x="142" fg:w="2"/><text x="11.6373%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="11.4675%" y="469" width="0.0802%" height="15" fill="rgb(233,113,27)" fg:x="143" fg:w="1"/><text x="11.7175%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="11.4675%" y="453" width="0.0802%" height="15" fill="rgb(220,221,18)" fg:x="143" fg:w="1"/><text x="11.7175%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="11.4675%" y="437" width="0.0802%" height="15" fill="rgb(238,92,8)" fg:x="143" fg:w="1"/><text x="11.7175%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="11.5477%" y="517" width="0.0802%" height="15" fill="rgb(222,164,16)" fg:x="144" fg:w="1"/><text x="11.7977%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.5477%" y="501" width="0.0802%" height="15" fill="rgb(241,119,3)" fg:x="144" fg:w="1"/><text x="11.7977%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.5477%" y="485" width="0.0802%" height="15" fill="rgb(241,44,8)" fg:x="144" fg:w="1"/><text x="11.7977%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="11.5477%" y="469" width="0.0802%" height="15" fill="rgb(230,36,40)" fg:x="144" fg:w="1"/><text x="11.7977%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="11.6279%" y="501" width="0.0802%" height="15" fill="rgb(243,16,36)" fg:x="145" fg:w="1"/><text x="11.8779%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.6279%" y="485" width="0.0802%" height="15" fill="rgb(231,4,26)" fg:x="145" fg:w="1"/><text x="11.8779%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.6279%" y="469" width="0.0802%" height="15" fill="rgb(240,9,31)" fg:x="145" fg:w="1"/><text x="11.8779%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.6279%" y="453" width="0.0802%" height="15" fill="rgb(207,173,15)" fg:x="145" fg:w="1"/><text x="11.8779%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="11.6279%" y="437" width="0.0802%" height="15" fill="rgb(224,192,53)" fg:x="145" fg:w="1"/><text x="11.8779%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="11.6279%" y="421" width="0.0802%" height="15" fill="rgb(223,67,28)" fg:x="145" fg:w="1"/><text x="11.8779%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="11.6279%" y="405" width="0.0802%" height="15" fill="rgb(211,20,47)" fg:x="145" fg:w="1"/><text x="11.8779%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="11.7081%" y="501" width="0.0802%" height="15" fill="rgb(240,228,2)" fg:x="146" fg:w="1"/><text x="11.9581%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="11.7081%" y="485" width="0.0802%" height="15" fill="rgb(248,151,12)" fg:x="146" fg:w="1"/><text x="11.9581%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.7081%" y="469" width="0.0802%" height="15" fill="rgb(244,8,39)" fg:x="146" fg:w="1"/><text x="11.9581%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (14 samples, 1.12%)</title><rect x="10.7458%" y="549" width="1.1227%" height="15" fill="rgb(222,26,8)" fg:x="134" fg:w="14"/><text x="10.9958%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="11.5477%" y="533" width="0.3208%" height="15" fill="rgb(213,106,44)" fg:x="144" fg:w="4"/><text x="11.7977%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="11.6279%" y="517" width="0.2406%" height="15" fill="rgb(214,129,20)" fg:x="145" fg:w="3"/><text x="11.8779%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.7883%" y="501" width="0.0802%" height="15" fill="rgb(212,32,13)" fg:x="147" fg:w="1"/><text x="12.0383%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (19 samples, 1.52%)</title><rect x="10.4250%" y="581" width="1.5237%" height="15" fill="rgb(208,168,33)" fg:x="130" fg:w="19"/><text x="10.6750%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (17 samples, 1.36%)</title><rect x="10.5854%" y="565" width="1.3633%" height="15" fill="rgb(231,207,8)" fg:x="132" fg:w="17"/><text x="10.8354%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.8685%" y="549" width="0.0802%" height="15" fill="rgb(235,219,23)" fg:x="148" fg:w="1"/><text x="12.1185%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.0289%" y="549" width="0.0802%" height="15" fill="rgb(226,216,26)" fg:x="150" fg:w="1"/><text x="12.2789%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.1091%" y="549" width="0.0802%" height="15" fill="rgb(239,137,16)" fg:x="151" fg:w="1"/><text x="12.3591%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="11.9487%" y="581" width="0.4010%" height="15" fill="rgb(207,12,36)" fg:x="149" fg:w="5"/><text x="12.1987%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="11.9487%" y="565" width="0.4010%" height="15" fill="rgb(210,214,24)" fg:x="149" fg:w="5"/><text x="12.1987%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="12.1893%" y="549" width="0.1604%" height="15" fill="rgb(206,56,30)" fg:x="152" fg:w="2"/><text x="12.4393%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="12.1893%" y="533" width="0.1604%" height="15" fill="rgb(228,143,26)" fg:x="152" fg:w="2"/><text x="12.4393%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="12.1893%" y="517" width="0.1604%" height="15" fill="rgb(216,218,46)" fg:x="152" fg:w="2"/><text x="12.4393%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.2694%" y="501" width="0.0802%" height="15" fill="rgb(206,6,19)" fg:x="153" fg:w="1"/><text x="12.5194%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.2694%" y="485" width="0.0802%" height="15" fill="rgb(239,177,51)" fg:x="153" fg:w="1"/><text x="12.5194%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="12.4298%" y="549" width="0.0802%" height="15" fill="rgb(216,55,25)" fg:x="155" fg:w="1"/><text x="12.6798%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.4298%" y="533" width="0.0802%" height="15" fill="rgb(231,163,29)" fg:x="155" fg:w="1"/><text x="12.6798%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (3 samples, 0.24%)</title><rect x="12.3496%" y="565" width="0.2406%" height="15" fill="rgb(232,149,50)" fg:x="154" fg:w="3"/><text x="12.5996%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.5100%" y="549" width="0.0802%" height="15" fill="rgb(223,142,48)" fg:x="156" fg:w="1"/><text x="12.7600%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="12.5902%" y="533" width="0.1604%" height="15" fill="rgb(245,83,23)" fg:x="157" fg:w="2"/><text x="12.8402%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="12.5902%" y="517" width="0.1604%" height="15" fill="rgb(224,63,2)" fg:x="157" fg:w="2"/><text x="12.8402%" y="527.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="12.5902%" y="501" width="0.1604%" height="15" fill="rgb(218,65,53)" fg:x="157" fg:w="2"/><text x="12.8402%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="12.9110%" y="453" width="0.0802%" height="15" fill="rgb(221,84,29)" fg:x="161" fg:w="1"/><text x="13.1610%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.9110%" y="437" width="0.0802%" height="15" fill="rgb(234,0,32)" fg:x="161" fg:w="1"/><text x="13.1610%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.9110%" y="421" width="0.0802%" height="15" fill="rgb(206,20,16)" fg:x="161" fg:w="1"/><text x="13.1610%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="12.8308%" y="485" width="0.2406%" height="15" fill="rgb(244,172,18)" fg:x="160" fg:w="3"/><text x="13.0808%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="12.8308%" y="469" width="0.2406%" height="15" fill="rgb(254,133,1)" fg:x="160" fg:w="3"/><text x="13.0808%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.9912%" y="453" width="0.0802%" height="15" fill="rgb(222,206,41)" fg:x="162" fg:w="1"/><text x="13.2412%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="13.0714%" y="437" width="0.0802%" height="15" fill="rgb(212,3,42)" fg:x="163" fg:w="1"/><text x="13.3214%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.1516%" y="421" width="0.0802%" height="15" fill="rgb(241,11,4)" fg:x="164" fg:w="1"/><text x="13.4016%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="13.1516%" y="437" width="0.1604%" height="15" fill="rgb(205,19,26)" fg:x="164" fg:w="2"/><text x="13.4016%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="13.2318%" y="421" width="0.0802%" height="15" fill="rgb(210,179,32)" fg:x="165" fg:w="1"/><text x="13.4818%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.64%)</title><rect x="12.7506%" y="501" width="0.6415%" height="15" fill="rgb(227,116,49)" fg:x="159" fg:w="8"/><text x="13.0006%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="13.0714%" y="485" width="0.3208%" height="15" fill="rgb(211,146,6)" fg:x="163" fg:w="4"/><text x="13.3214%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="13.0714%" y="469" width="0.3208%" height="15" fill="rgb(219,44,39)" fg:x="163" fg:w="4"/><text x="13.3214%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="13.0714%" y="453" width="0.3208%" height="15" fill="rgb(234,128,11)" fg:x="163" fg:w="4"/><text x="13.3214%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.3119%" y="437" width="0.0802%" height="15" fill="rgb(220,183,53)" fg:x="166" fg:w="1"/><text x="13.5619%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (11 samples, 0.88%)</title><rect x="12.7506%" y="517" width="0.8821%" height="15" fill="rgb(213,219,32)" fg:x="159" fg:w="11"/><text x="13.0006%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="13.3921%" y="501" width="0.2406%" height="15" fill="rgb(232,156,16)" fg:x="167" fg:w="3"/><text x="13.6421%" y="511.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="13.4723%" y="485" width="0.1604%" height="15" fill="rgb(246,135,34)" fg:x="168" fg:w="2"/><text x="13.7223%" y="495.50"></text></g><g><title>engine::session::Session::flush (45 samples, 3.61%)</title><rect x="10.1043%" y="677" width="3.6087%" height="15" fill="rgb(241,99,0)" fg:x="126" fg:w="45"/><text x="10.3543%" y="687.50">engi..</text></g><g><title>engine::session::state::State::close (43 samples, 3.45%)</title><rect x="10.2646%" y="661" width="3.4483%" height="15" fill="rgb(222,103,45)" fg:x="128" fg:w="43"/><text x="10.5146%" y="671.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (43 samples, 3.45%)</title><rect x="10.2646%" y="645" width="3.4483%" height="15" fill="rgb(212,57,4)" fg:x="128" fg:w="43"/><text x="10.5146%" y="655.50">eng..</text></g><g><title>core::iter::adapters::try_process (43 samples, 3.45%)</title><rect x="10.2646%" y="629" width="3.4483%" height="15" fill="rgb(215,68,47)" fg:x="128" fg:w="43"/><text x="10.5146%" y="639.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (43 samples, 3.45%)</title><rect x="10.2646%" y="613" width="3.4483%" height="15" fill="rgb(230,84,2)" fg:x="128" fg:w="43"/><text x="10.5146%" y="623.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (41 samples, 3.29%)</title><rect x="10.4250%" y="597" width="3.2879%" height="15" fill="rgb(220,102,14)" fg:x="130" fg:w="41"/><text x="10.6750%" y="607.50">eng..</text></g><g><title>kernel::model::any_entity_changes (17 samples, 1.36%)</title><rect x="12.3496%" y="581" width="1.3633%" height="15" fill="rgb(240,10,32)" fg:x="154" fg:w="17"/><text x="12.5996%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (14 samples, 1.12%)</title><rect x="12.5902%" y="565" width="1.1227%" height="15" fill="rgb(215,47,27)" fg:x="157" fg:w="14"/><text x="12.8402%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (14 samples, 1.12%)</title><rect x="12.5902%" y="549" width="1.1227%" height="15" fill="rgb(233,188,43)" fg:x="157" fg:w="14"/><text x="12.8402%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (12 samples, 0.96%)</title><rect x="12.7506%" y="533" width="0.9623%" height="15" fill="rgb(253,190,1)" fg:x="159" fg:w="12"/><text x="13.0006%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.6327%" y="517" width="0.0802%" height="15" fill="rgb(206,114,52)" fg:x="170" fg:w="1"/><text x="13.8827%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.6327%" y="501" width="0.0802%" height="15" fill="rgb(233,120,37)" fg:x="170" fg:w="1"/><text x="13.8827%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="13.7129%" y="645" width="0.0802%" height="15" fill="rgb(214,52,39)" fg:x="171" fg:w="1"/><text x="13.9629%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.7129%" y="629" width="0.0802%" height="15" fill="rgb(223,80,29)" fg:x="171" fg:w="1"/><text x="13.9629%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="13.7931%" y="645" width="0.0802%" height="15" fill="rgb(230,101,40)" fg:x="172" fg:w="1"/><text x="14.0431%" y="655.50"></text></g><g><title>plugins_core::build::Build::named (3 samples, 0.24%)</title><rect x="13.7129%" y="677" width="0.2406%" height="15" fill="rgb(219,211,8)" fg:x="171" fg:w="3"/><text x="13.9629%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (3 samples, 0.24%)</title><rect x="13.7129%" y="661" width="0.2406%" height="15" fill="rgb(252,126,28)" fg:x="171" fg:w="3"/><text x="13.9629%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="13.8733%" y="645" width="0.0802%" height="15" fill="rgb(215,56,38)" fg:x="173" fg:w="1"/><text x="14.1233%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.8733%" y="629" width="0.0802%" height="15" fill="rgb(249,55,44)" fg:x="173" fg:w="1"/><text x="14.1233%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="13.8733%" y="613" width="0.0802%" height="15" fill="rgb(220,221,32)" fg:x="173" fg:w="1"/><text x="14.1233%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="13.8733%" y="597" width="0.0802%" height="15" fill="rgb(212,216,41)" fg:x="173" fg:w="1"/><text x="14.1233%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.8733%" y="581" width="0.0802%" height="15" fill="rgb(228,213,43)" fg:x="173" fg:w="1"/><text x="14.1233%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.8733%" y="565" width="0.0802%" height="15" fill="rgb(211,31,26)" fg:x="173" fg:w="1"/><text x="14.1233%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.8733%" y="549" width="0.0802%" height="15" fill="rgb(229,202,19)" fg:x="173" fg:w="1"/><text x="14.1233%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.8733%" y="533" width="0.0802%" height="15" fill="rgb(229,105,46)" fg:x="173" fg:w="1"/><text x="14.1233%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="14.0337%" y="629" width="0.1604%" height="15" fill="rgb(235,108,1)" fg:x="175" fg:w="2"/><text x="14.2837%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.1139%" y="613" width="0.0802%" height="15" fill="rgb(245,111,35)" fg:x="176" fg:w="1"/><text x="14.3639%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.1139%" y="597" width="0.0802%" height="15" fill="rgb(219,185,31)" fg:x="176" fg:w="1"/><text x="14.3639%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.1139%" y="581" width="0.0802%" height="15" fill="rgb(214,4,43)" fg:x="176" fg:w="1"/><text x="14.3639%" y="591.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (5 samples, 0.40%)</title><rect x="13.9535%" y="661" width="0.4010%" height="15" fill="rgb(235,227,40)" fg:x="174" fg:w="5"/><text x="14.2035%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (5 samples, 0.40%)</title><rect x="13.9535%" y="645" width="0.4010%" height="15" fill="rgb(230,88,30)" fg:x="174" fg:w="5"/><text x="14.2035%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="14.1941%" y="629" width="0.1604%" height="15" fill="rgb(216,217,1)" fg:x="177" fg:w="2"/><text x="14.4441%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.1941%" y="613" width="0.1604%" height="15" fill="rgb(248,139,50)" fg:x="177" fg:w="2"/><text x="14.4441%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="14.2743%" y="597" width="0.0802%" height="15" fill="rgb(233,1,21)" fg:x="178" fg:w="1"/><text x="14.5243%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.2743%" y="581" width="0.0802%" height="15" fill="rgb(215,183,12)" fg:x="178" fg:w="1"/><text x="14.5243%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.3545%" y="629" width="0.0802%" height="15" fill="rgb(229,104,42)" fg:x="179" fg:w="1"/><text x="14.6045%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="14.3545%" y="645" width="0.1604%" height="15" fill="rgb(243,34,48)" fg:x="179" fg:w="2"/><text x="14.6045%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.4346%" y="629" width="0.0802%" height="15" fill="rgb(239,11,44)" fg:x="180" fg:w="1"/><text x="14.6846%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.4346%" y="613" width="0.0802%" height="15" fill="rgb(231,98,35)" fg:x="180" fg:w="1"/><text x="14.6846%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="14.4346%" y="597" width="0.0802%" height="15" fill="rgb(233,28,25)" fg:x="180" fg:w="1"/><text x="14.6846%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.4346%" y="581" width="0.0802%" height="15" fill="rgb(234,123,11)" fg:x="180" fg:w="1"/><text x="14.6846%" y="591.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="14.5148%" y="645" width="0.0802%" height="15" fill="rgb(220,69,3)" fg:x="181" fg:w="1"/><text x="14.7648%" y="655.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="14.5148%" y="629" width="0.0802%" height="15" fill="rgb(214,64,36)" fg:x="181" fg:w="1"/><text x="14.7648%" y="639.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (1 samples, 0.08%)</title><rect x="14.5148%" y="613" width="0.0802%" height="15" fill="rgb(211,138,32)" fg:x="181" fg:w="1"/><text x="14.7648%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.5148%" y="597" width="0.0802%" height="15" fill="rgb(213,118,47)" fg:x="181" fg:w="1"/><text x="14.7648%" y="607.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="14.5148%" y="581" width="0.0802%" height="15" fill="rgb(243,124,49)" fg:x="181" fg:w="1"/><text x="14.7648%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.5148%" y="565" width="0.0802%" height="15" fill="rgb(221,30,28)" fg:x="181" fg:w="1"/><text x="14.7648%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="14.5148%" y="549" width="0.0802%" height="15" fill="rgb(246,37,13)" fg:x="181" fg:w="1"/><text x="14.7648%" y="559.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="14.5148%" y="533" width="0.0802%" height="15" fill="rgb(249,66,14)" fg:x="181" fg:w="1"/><text x="14.7648%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.7554%" y="533" width="0.0802%" height="15" fill="rgb(213,166,5)" fg:x="184" fg:w="1"/><text x="15.0054%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.7554%" y="517" width="0.0802%" height="15" fill="rgb(221,66,24)" fg:x="184" fg:w="1"/><text x="15.0054%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.7554%" y="501" width="0.0802%" height="15" fill="rgb(210,132,17)" fg:x="184" fg:w="1"/><text x="15.0054%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.7554%" y="485" width="0.0802%" height="15" fill="rgb(243,202,5)" fg:x="184" fg:w="1"/><text x="15.0054%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.7554%" y="469" width="0.0802%" height="15" fill="rgb(233,70,48)" fg:x="184" fg:w="1"/><text x="15.0054%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.7554%" y="453" width="0.0802%" height="15" fill="rgb(238,41,26)" fg:x="184" fg:w="1"/><text x="15.0054%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.7554%" y="437" width="0.0802%" height="15" fill="rgb(241,19,31)" fg:x="184" fg:w="1"/><text x="15.0054%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.7554%" y="421" width="0.0802%" height="15" fill="rgb(214,76,10)" fg:x="184" fg:w="1"/><text x="15.0054%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.7554%" y="405" width="0.0802%" height="15" fill="rgb(254,202,22)" fg:x="184" fg:w="1"/><text x="15.0054%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.7554%" y="389" width="0.0802%" height="15" fill="rgb(214,72,24)" fg:x="184" fg:w="1"/><text x="15.0054%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.7554%" y="373" width="0.0802%" height="15" fill="rgb(221,92,46)" fg:x="184" fg:w="1"/><text x="15.0054%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.7554%" y="357" width="0.0802%" height="15" fill="rgb(246,13,50)" fg:x="184" fg:w="1"/><text x="15.0054%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="14.6752%" y="581" width="0.2406%" height="15" fill="rgb(240,165,38)" fg:x="183" fg:w="3"/><text x="14.9252%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="14.7554%" y="565" width="0.1604%" height="15" fill="rgb(241,24,51)" fg:x="184" fg:w="2"/><text x="15.0054%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="14.7554%" y="549" width="0.1604%" height="15" fill="rgb(227,51,44)" fg:x="184" fg:w="2"/><text x="15.0054%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.8356%" y="533" width="0.0802%" height="15" fill="rgb(231,121,3)" fg:x="185" fg:w="1"/><text x="15.0856%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (4 samples, 0.32%)</title><rect x="14.6752%" y="597" width="0.3208%" height="15" fill="rgb(245,3,41)" fg:x="183" fg:w="4"/><text x="14.9252%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.9158%" y="581" width="0.0802%" height="15" fill="rgb(214,13,26)" fg:x="186" fg:w="1"/><text x="15.1658%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.9158%" y="565" width="0.0802%" height="15" fill="rgb(252,75,11)" fg:x="186" fg:w="1"/><text x="15.1658%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="14.9158%" y="549" width="0.0802%" height="15" fill="rgb(218,226,17)" fg:x="186" fg:w="1"/><text x="15.1658%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.9158%" y="533" width="0.0802%" height="15" fill="rgb(248,89,38)" fg:x="186" fg:w="1"/><text x="15.1658%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.9158%" y="517" width="0.0802%" height="15" fill="rgb(237,73,46)" fg:x="186" fg:w="1"/><text x="15.1658%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.9158%" y="501" width="0.0802%" height="15" fill="rgb(242,78,33)" fg:x="186" fg:w="1"/><text x="15.1658%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.9158%" y="485" width="0.0802%" height="15" fill="rgb(235,60,3)" fg:x="186" fg:w="1"/><text x="15.1658%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="14.9960%" y="597" width="0.0802%" height="15" fill="rgb(216,172,19)" fg:x="187" fg:w="1"/><text x="15.2460%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="14.9960%" y="581" width="0.0802%" height="15" fill="rgb(227,6,42)" fg:x="187" fg:w="1"/><text x="15.2460%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.9960%" y="565" width="0.0802%" height="15" fill="rgb(223,207,42)" fg:x="187" fg:w="1"/><text x="15.2460%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="15.1564%" y="581" width="0.0802%" height="15" fill="rgb(246,138,30)" fg:x="189" fg:w="1"/><text x="15.4064%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (9 samples, 0.72%)</title><rect x="14.5950%" y="629" width="0.7217%" height="15" fill="rgb(251,199,47)" fg:x="182" fg:w="9"/><text x="14.8450%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (9 samples, 0.72%)</title><rect x="14.5950%" y="613" width="0.7217%" height="15" fill="rgb(228,218,44)" fg:x="182" fg:w="9"/><text x="14.8450%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (3 samples, 0.24%)</title><rect x="15.0762%" y="597" width="0.2406%" height="15" fill="rgb(220,68,6)" fg:x="188" fg:w="3"/><text x="15.3262%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="15.2366%" y="581" width="0.0802%" height="15" fill="rgb(240,60,26)" fg:x="190" fg:w="1"/><text x="15.4866%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="15.2366%" y="565" width="0.0802%" height="15" fill="rgb(211,200,19)" fg:x="190" fg:w="1"/><text x="15.4866%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.2366%" y="549" width="0.0802%" height="15" fill="rgb(242,145,30)" fg:x="190" fg:w="1"/><text x="15.4866%" y="559.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="15.3168%" y="629" width="0.1604%" height="15" fill="rgb(225,64,13)" fg:x="191" fg:w="2"/><text x="15.5668%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="15.3168%" y="613" width="0.1604%" height="15" fill="rgb(218,103,35)" fg:x="191" fg:w="2"/><text x="15.5668%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="15.3168%" y="597" width="0.1604%" height="15" fill="rgb(216,93,46)" fg:x="191" fg:w="2"/><text x="15.5668%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="15.4771%" y="581" width="0.0802%" height="15" fill="rgb(225,159,27)" fg:x="193" fg:w="1"/><text x="15.7271%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="15.4771%" y="565" width="0.0802%" height="15" fill="rgb(225,204,11)" fg:x="193" fg:w="1"/><text x="15.7271%" y="575.50"></text></g><g><title>engine::session::internal::Entities::add_entity (13 samples, 1.04%)</title><rect x="14.5950%" y="645" width="1.0425%" height="15" fill="rgb(205,56,4)" fg:x="182" fg:w="13"/><text x="14.8450%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="15.4771%" y="629" width="0.1604%" height="15" fill="rgb(206,6,35)" fg:x="193" fg:w="2"/><text x="15.7271%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="15.4771%" y="613" width="0.1604%" height="15" fill="rgb(247,73,52)" fg:x="193" fg:w="2"/><text x="15.7271%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="15.4771%" y="597" width="0.1604%" height="15" fill="rgb(246,97,4)" fg:x="193" fg:w="2"/><text x="15.7271%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.5573%" y="581" width="0.0802%" height="15" fill="rgb(212,37,15)" fg:x="194" fg:w="1"/><text x="15.8073%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.5573%" y="565" width="0.0802%" height="15" fill="rgb(208,130,40)" fg:x="194" fg:w="1"/><text x="15.8073%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (17 samples, 1.36%)</title><rect x="14.3545%" y="661" width="1.3633%" height="15" fill="rgb(236,55,29)" fg:x="179" fg:w="17"/><text x="14.6045%" y="671.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="15.6375%" y="645" width="0.0802%" height="15" fill="rgb(209,156,45)" fg:x="195" fg:w="1"/><text x="15.8875%" y="655.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="15.6375%" y="629" width="0.0802%" height="15" fill="rgb(249,107,4)" fg:x="195" fg:w="1"/><text x="15.8875%" y="639.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="15.6375%" y="613" width="0.0802%" height="15" fill="rgb(227,7,13)" fg:x="195" fg:w="1"/><text x="15.8875%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (23 samples, 1.84%)</title><rect x="13.9535%" y="677" width="1.8444%" height="15" fill="rgb(250,129,14)" fg:x="174" fg:w="23"/><text x="14.2035%" y="687.50">p..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.7177%" y="661" width="0.0802%" height="15" fill="rgb(229,92,13)" fg:x="196" fg:w="1"/><text x="15.9677%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.7177%" y="645" width="0.0802%" height="15" fill="rgb(245,98,39)" fg:x="196" fg:w="1"/><text x="15.9677%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.7177%" y="629" width="0.0802%" height="15" fill="rgb(234,135,48)" fg:x="196" fg:w="1"/><text x="15.9677%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.7177%" y="613" width="0.0802%" height="15" fill="rgb(230,98,28)" fg:x="196" fg:w="1"/><text x="15.9677%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.7177%" y="597" width="0.0802%" height="15" fill="rgb(223,121,0)" fg:x="196" fg:w="1"/><text x="15.9677%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="15.7979%" y="629" width="0.0802%" height="15" fill="rgb(234,173,33)" fg:x="197" fg:w="1"/><text x="16.0479%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.7979%" y="613" width="0.0802%" height="15" fill="rgb(245,47,8)" fg:x="197" fg:w="1"/><text x="16.0479%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (2 samples, 0.16%)</title><rect x="15.7979%" y="677" width="0.1604%" height="15" fill="rgb(205,17,20)" fg:x="197" fg:w="2"/><text x="16.0479%" y="687.50"></text></g><g><title>plugins_core::tools::set_quantity (2 samples, 0.16%)</title><rect x="15.7979%" y="661" width="0.1604%" height="15" fill="rgb(232,151,16)" fg:x="197" fg:w="2"/><text x="16.0479%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="15.7979%" y="645" width="0.1604%" height="15" fill="rgb(208,30,32)" fg:x="197" fg:w="2"/><text x="16.0479%" y="655.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (1 samples, 0.08%)</title><rect x="15.8781%" y="629" width="0.0802%" height="15" fill="rgb(254,26,3)" fg:x="198" fg:w="1"/><text x="16.1281%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.8781%" y="613" width="0.0802%" height="15" fill="rgb(240,177,30)" fg:x="198" fg:w="1"/><text x="16.1281%" y="623.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Kind&gt;::serialize (1 samples, 0.08%)</title><rect x="15.8781%" y="597" width="0.0802%" height="15" fill="rgb(248,76,44)" fg:x="198" fg:w="1"/><text x="16.1281%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.8781%" y="581" width="0.0802%" height="15" fill="rgb(241,186,54)" fg:x="198" fg:w="1"/><text x="16.1281%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="15.8781%" y="565" width="0.0802%" height="15" fill="rgb(249,171,29)" fg:x="198" fg:w="1"/><text x="16.1281%" y="575.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="15.9583%" y="613" width="0.0802%" height="15" fill="rgb(237,151,44)" fg:x="199" fg:w="1"/><text x="16.2083%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="15.9583%" y="597" width="0.0802%" height="15" fill="rgb(228,174,30)" fg:x="199" fg:w="1"/><text x="16.2083%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.9583%" y="581" width="0.0802%" height="15" fill="rgb(252,14,37)" fg:x="199" fg:w="1"/><text x="16.2083%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.9583%" y="565" width="0.0802%" height="15" fill="rgb(207,111,40)" fg:x="199" fg:w="1"/><text x="16.2083%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="15.9583%" y="549" width="0.0802%" height="15" fill="rgb(248,171,54)" fg:x="199" fg:w="1"/><text x="16.2083%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.9583%" y="533" width="0.0802%" height="15" fill="rgb(211,127,2)" fg:x="199" fg:w="1"/><text x="16.2083%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.9583%" y="517" width="0.0802%" height="15" fill="rgb(236,87,47)" fg:x="199" fg:w="1"/><text x="16.2083%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.9583%" y="501" width="0.0802%" height="15" fill="rgb(223,190,45)" fg:x="199" fg:w="1"/><text x="16.2083%" y="511.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="15.9583%" y="645" width="0.1604%" height="15" fill="rgb(215,5,16)" fg:x="199" fg:w="2"/><text x="16.2083%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="15.9583%" y="629" width="0.1604%" height="15" fill="rgb(252,82,33)" fg:x="199" fg:w="2"/><text x="16.2083%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="16.0385%" y="613" width="0.0802%" height="15" fill="rgb(247,213,44)" fg:x="200" fg:w="1"/><text x="16.2885%" y="623.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="16.0385%" y="597" width="0.0802%" height="15" fill="rgb(205,196,44)" fg:x="200" fg:w="1"/><text x="16.2885%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="16.0385%" y="581" width="0.0802%" height="15" fill="rgb(237,96,54)" fg:x="200" fg:w="1"/><text x="16.2885%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="16.1989%" y="629" width="0.0802%" height="15" fill="rgb(230,113,34)" fg:x="202" fg:w="1"/><text x="16.4489%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.1989%" y="613" width="0.0802%" height="15" fill="rgb(221,224,12)" fg:x="202" fg:w="1"/><text x="16.4489%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.1989%" y="597" width="0.0802%" height="15" fill="rgb(219,112,44)" fg:x="202" fg:w="1"/><text x="16.4489%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="16.3593%" y="581" width="0.0802%" height="15" fill="rgb(210,31,13)" fg:x="204" fg:w="1"/><text x="16.6093%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.3593%" y="565" width="0.0802%" height="15" fill="rgb(230,25,16)" fg:x="204" fg:w="1"/><text x="16.6093%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.3593%" y="549" width="0.0802%" height="15" fill="rgb(246,108,53)" fg:x="204" fg:w="1"/><text x="16.6093%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="16.3593%" y="533" width="0.0802%" height="15" fill="rgb(241,172,50)" fg:x="204" fg:w="1"/><text x="16.6093%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.3593%" y="517" width="0.0802%" height="15" fill="rgb(235,141,10)" fg:x="204" fg:w="1"/><text x="16.6093%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="16.3593%" y="501" width="0.0802%" height="15" fill="rgb(220,174,43)" fg:x="204" fg:w="1"/><text x="16.6093%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.3593%" y="485" width="0.0802%" height="15" fill="rgb(215,181,40)" fg:x="204" fg:w="1"/><text x="16.6093%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.3593%" y="469" width="0.0802%" height="15" fill="rgb(230,97,2)" fg:x="204" fg:w="1"/><text x="16.6093%" y="479.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="16.3593%" y="597" width="0.1604%" height="15" fill="rgb(211,25,27)" fg:x="204" fg:w="2"/><text x="16.6093%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="16.4395%" y="581" width="0.0802%" height="15" fill="rgb(230,87,26)" fg:x="205" fg:w="1"/><text x="16.6895%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.5196%" y="565" width="0.0802%" height="15" fill="rgb(227,160,17)" fg:x="206" fg:w="1"/><text x="16.7696%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.5196%" y="549" width="0.0802%" height="15" fill="rgb(244,85,34)" fg:x="206" fg:w="1"/><text x="16.7696%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.5196%" y="533" width="0.0802%" height="15" fill="rgb(207,70,0)" fg:x="206" fg:w="1"/><text x="16.7696%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="16.5998%" y="501" width="0.0802%" height="15" fill="rgb(223,129,7)" fg:x="207" fg:w="1"/><text x="16.8498%" y="511.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (8 samples, 0.64%)</title><rect x="16.1187%" y="645" width="0.6415%" height="15" fill="rgb(246,105,7)" fg:x="201" fg:w="8"/><text x="16.3687%" y="655.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (6 samples, 0.48%)</title><rect x="16.2791%" y="629" width="0.4812%" height="15" fill="rgb(215,154,42)" fg:x="203" fg:w="6"/><text x="16.5291%" y="639.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (6 samples, 0.48%)</title><rect x="16.2791%" y="613" width="0.4812%" height="15" fill="rgb(220,215,30)" fg:x="203" fg:w="6"/><text x="16.5291%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="16.5196%" y="597" width="0.2406%" height="15" fill="rgb(228,81,51)" fg:x="206" fg:w="3"/><text x="16.7696%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="16.5196%" y="581" width="0.2406%" height="15" fill="rgb(247,71,54)" fg:x="206" fg:w="3"/><text x="16.7696%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="16.5998%" y="565" width="0.1604%" height="15" fill="rgb(234,176,34)" fg:x="207" fg:w="2"/><text x="16.8498%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="16.5998%" y="549" width="0.1604%" height="15" fill="rgb(241,103,54)" fg:x="207" fg:w="2"/><text x="16.8498%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="16.5998%" y="533" width="0.1604%" height="15" fill="rgb(228,22,34)" fg:x="207" fg:w="2"/><text x="16.8498%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="16.5998%" y="517" width="0.1604%" height="15" fill="rgb(241,179,48)" fg:x="207" fg:w="2"/><text x="16.8498%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.6800%" y="501" width="0.0802%" height="15" fill="rgb(235,167,37)" fg:x="208" fg:w="1"/><text x="16.9300%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.6800%" y="485" width="0.0802%" height="15" fill="rgb(213,109,30)" fg:x="208" fg:w="1"/><text x="16.9300%" y="495.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="16.7602%" y="629" width="0.0802%" height="15" fill="rgb(222,172,16)" fg:x="209" fg:w="1"/><text x="17.0102%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="16.7602%" y="613" width="0.0802%" height="15" fill="rgb(233,192,5)" fg:x="209" fg:w="1"/><text x="17.0102%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="16.7602%" y="597" width="0.0802%" height="15" fill="rgb(247,189,41)" fg:x="209" fg:w="1"/><text x="17.0102%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="16.7602%" y="581" width="0.0802%" height="15" fill="rgb(218,134,47)" fg:x="209" fg:w="1"/><text x="17.0102%" y="591.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (13 samples, 1.04%)</title><rect x="15.9583%" y="677" width="1.0425%" height="15" fill="rgb(216,29,3)" fg:x="199" fg:w="13"/><text x="16.2083%" y="687.50"></text></g><g><title>plugins_core::tools::set_container (13 samples, 1.04%)</title><rect x="15.9583%" y="661" width="1.0425%" height="15" fill="rgb(246,140,12)" fg:x="199" fg:w="13"/><text x="16.2083%" y="671.50"></text></g><g><title>plugins_core::location::model::Location::set (3 samples, 0.24%)</title><rect x="16.7602%" y="645" width="0.2406%" height="15" fill="rgb(230,136,11)" fg:x="209" fg:w="3"/><text x="17.0102%" y="655.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="16.8404%" y="629" width="0.1604%" height="15" fill="rgb(247,22,47)" fg:x="210" fg:w="2"/><text x="17.0904%" y="639.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (2 samples, 0.16%)</title><rect x="16.8404%" y="613" width="0.1604%" height="15" fill="rgb(218,84,22)" fg:x="210" fg:w="2"/><text x="17.0904%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="16.8404%" y="597" width="0.1604%" height="15" fill="rgb(216,87,39)" fg:x="210" fg:w="2"/><text x="17.0904%" y="607.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="16.9206%" y="581" width="0.0802%" height="15" fill="rgb(221,178,8)" fg:x="211" fg:w="1"/><text x="17.1706%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.9206%" y="565" width="0.0802%" height="15" fill="rgb(230,42,11)" fg:x="211" fg:w="1"/><text x="17.1706%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.9206%" y="549" width="0.0802%" height="15" fill="rgb(237,229,4)" fg:x="211" fg:w="1"/><text x="17.1706%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.9206%" y="533" width="0.0802%" height="15" fill="rgb(222,31,33)" fg:x="211" fg:w="1"/><text x="17.1706%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="16.9206%" y="517" width="0.0802%" height="15" fill="rgb(210,17,39)" fg:x="211" fg:w="1"/><text x="17.1706%" y="527.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="17.0008%" y="661" width="0.0802%" height="15" fill="rgb(244,93,20)" fg:x="212" fg:w="1"/><text x="17.2508%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="17.0008%" y="645" width="0.0802%" height="15" fill="rgb(210,40,47)" fg:x="212" fg:w="1"/><text x="17.2508%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.0008%" y="629" width="0.0802%" height="15" fill="rgb(239,211,47)" fg:x="212" fg:w="1"/><text x="17.2508%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="17.0008%" y="613" width="0.0802%" height="15" fill="rgb(251,223,49)" fg:x="212" fg:w="1"/><text x="17.2508%" y="623.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="17.0810%" y="661" width="0.0802%" height="15" fill="rgb(221,149,5)" fg:x="213" fg:w="1"/><text x="17.3310%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="17.0810%" y="645" width="0.0802%" height="15" fill="rgb(219,224,51)" fg:x="213" fg:w="1"/><text x="17.3310%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="17.0810%" y="629" width="0.0802%" height="15" fill="rgb(223,7,8)" fg:x="213" fg:w="1"/><text x="17.3310%" y="639.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="17.0810%" y="613" width="0.0802%" height="15" fill="rgb(241,217,22)" fg:x="213" fg:w="1"/><text x="17.3310%" y="623.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="17.0810%" y="597" width="0.0802%" height="15" fill="rgb(248,209,0)" fg:x="213" fg:w="1"/><text x="17.3310%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="17.0810%" y="581" width="0.0802%" height="15" fill="rgb(217,205,4)" fg:x="213" fg:w="1"/><text x="17.3310%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="17.0810%" y="565" width="0.0802%" height="15" fill="rgb(228,124,39)" fg:x="213" fg:w="1"/><text x="17.3310%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="17.2414%" y="629" width="0.1604%" height="15" fill="rgb(250,116,42)" fg:x="215" fg:w="2"/><text x="17.4914%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="17.2414%" y="613" width="0.1604%" height="15" fill="rgb(223,202,9)" fg:x="215" fg:w="2"/><text x="17.4914%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="17.2414%" y="597" width="0.1604%" height="15" fill="rgb(242,222,40)" fg:x="215" fg:w="2"/><text x="17.4914%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="17.2414%" y="581" width="0.1604%" height="15" fill="rgb(229,99,46)" fg:x="215" fg:w="2"/><text x="17.4914%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="17.2414%" y="565" width="0.1604%" height="15" fill="rgb(225,56,46)" fg:x="215" fg:w="2"/><text x="17.4914%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="17.2414%" y="549" width="0.1604%" height="15" fill="rgb(227,94,5)" fg:x="215" fg:w="2"/><text x="17.4914%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="17.2414%" y="533" width="0.1604%" height="15" fill="rgb(205,112,38)" fg:x="215" fg:w="2"/><text x="17.4914%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="17.2414%" y="517" width="0.1604%" height="15" fill="rgb(231,133,46)" fg:x="215" fg:w="2"/><text x="17.4914%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="17.2414%" y="501" width="0.1604%" height="15" fill="rgb(217,16,9)" fg:x="215" fg:w="2"/><text x="17.4914%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="17.2414%" y="485" width="0.1604%" height="15" fill="rgb(249,173,9)" fg:x="215" fg:w="2"/><text x="17.4914%" y="495.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="17.2414%" y="469" width="0.1604%" height="15" fill="rgb(205,163,53)" fg:x="215" fg:w="2"/><text x="17.4914%" y="479.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="17.2414%" y="453" width="0.1604%" height="15" fill="rgb(217,54,41)" fg:x="215" fg:w="2"/><text x="17.4914%" y="463.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (4 samples, 0.32%)</title><rect x="17.1612%" y="645" width="0.3208%" height="15" fill="rgb(228,216,12)" fg:x="214" fg:w="4"/><text x="17.4112%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.4018%" y="629" width="0.0802%" height="15" fill="rgb(244,228,15)" fg:x="217" fg:w="1"/><text x="17.6518%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.5621%" y="565" width="0.0802%" height="15" fill="rgb(221,176,53)" fg:x="219" fg:w="1"/><text x="17.8121%" y="575.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="17.4820%" y="597" width="0.2406%" height="15" fill="rgb(205,94,34)" fg:x="218" fg:w="3"/><text x="17.7320%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.24%)</title><rect x="17.4820%" y="581" width="0.2406%" height="15" fill="rgb(213,110,48)" fg:x="218" fg:w="3"/><text x="17.7320%" y="591.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="17.6423%" y="565" width="0.0802%" height="15" fill="rgb(236,142,28)" fg:x="220" fg:w="1"/><text x="17.8923%" y="575.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="17.6423%" y="549" width="0.0802%" height="15" fill="rgb(225,135,29)" fg:x="220" fg:w="1"/><text x="17.8923%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.6423%" y="533" width="0.0802%" height="15" fill="rgb(252,45,31)" fg:x="220" fg:w="1"/><text x="17.8923%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="17.7225%" y="533" width="0.0802%" height="15" fill="rgb(211,187,50)" fg:x="221" fg:w="1"/><text x="17.9725%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="17.8027%" y="533" width="0.2406%" height="15" fill="rgb(229,109,7)" fg:x="222" fg:w="3"/><text x="18.0527%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="17.8027%" y="517" width="0.2406%" height="15" fill="rgb(251,131,51)" fg:x="222" fg:w="3"/><text x="18.0527%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="17.8829%" y="501" width="0.1604%" height="15" fill="rgb(251,180,35)" fg:x="223" fg:w="2"/><text x="18.1329%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="17.9631%" y="485" width="0.0802%" height="15" fill="rgb(211,46,32)" fg:x="224" fg:w="1"/><text x="18.2131%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="17.9631%" y="469" width="0.0802%" height="15" fill="rgb(248,123,17)" fg:x="224" fg:w="1"/><text x="18.2131%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="18.0433%" y="501" width="0.0802%" height="15" fill="rgb(227,141,18)" fg:x="225" fg:w="1"/><text x="18.2933%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="18.0433%" y="485" width="0.0802%" height="15" fill="rgb(216,102,9)" fg:x="225" fg:w="1"/><text x="18.2933%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="18.0433%" y="469" width="0.0802%" height="15" fill="rgb(253,47,13)" fg:x="225" fg:w="1"/><text x="18.2933%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="18.0433%" y="453" width="0.0802%" height="15" fill="rgb(226,93,23)" fg:x="225" fg:w="1"/><text x="18.2933%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="18.1235%" y="501" width="0.3208%" height="15" fill="rgb(247,104,17)" fg:x="226" fg:w="4"/><text x="18.3735%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="18.3641%" y="485" width="0.0802%" height="15" fill="rgb(233,203,26)" fg:x="229" fg:w="1"/><text x="18.6141%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="18.3641%" y="469" width="0.0802%" height="15" fill="rgb(244,98,49)" fg:x="229" fg:w="1"/><text x="18.6141%" y="479.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="18.5245%" y="485" width="0.0802%" height="15" fill="rgb(235,134,22)" fg:x="231" fg:w="1"/><text x="18.7745%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (6 samples, 0.48%)</title><rect x="18.6047%" y="485" width="0.4812%" height="15" fill="rgb(221,70,32)" fg:x="232" fg:w="6"/><text x="18.8547%" y="495.50"></text></g><g><title>std::io::Write::write_all (6 samples, 0.48%)</title><rect x="18.6047%" y="469" width="0.4812%" height="15" fill="rgb(238,15,50)" fg:x="232" fg:w="6"/><text x="18.8547%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.32%)</title><rect x="18.7650%" y="453" width="0.3208%" height="15" fill="rgb(215,221,48)" fg:x="234" fg:w="4"/><text x="19.0150%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.32%)</title><rect x="18.7650%" y="437" width="0.3208%" height="15" fill="rgb(236,73,3)" fg:x="234" fg:w="4"/><text x="19.0150%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="18.7650%" y="421" width="0.3208%" height="15" fill="rgb(250,107,11)" fg:x="234" fg:w="4"/><text x="19.0150%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="18.7650%" y="405" width="0.3208%" height="15" fill="rgb(242,39,14)" fg:x="234" fg:w="4"/><text x="19.0150%" y="415.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="18.7650%" y="389" width="0.3208%" height="15" fill="rgb(248,164,37)" fg:x="234" fg:w="4"/><text x="19.0150%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="19.0858%" y="485" width="0.1604%" height="15" fill="rgb(217,60,12)" fg:x="238" fg:w="2"/><text x="19.3358%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="19.0858%" y="469" width="0.1604%" height="15" fill="rgb(240,125,29)" fg:x="238" fg:w="2"/><text x="19.3358%" y="479.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="19.0858%" y="453" width="0.1604%" height="15" fill="rgb(208,207,28)" fg:x="238" fg:w="2"/><text x="19.3358%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="19.1660%" y="437" width="0.0802%" height="15" fill="rgb(209,159,27)" fg:x="239" fg:w="1"/><text x="19.4160%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="19.1660%" y="421" width="0.0802%" height="15" fill="rgb(251,176,53)" fg:x="239" fg:w="1"/><text x="19.4160%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="19.1660%" y="405" width="0.0802%" height="15" fill="rgb(211,85,7)" fg:x="239" fg:w="1"/><text x="19.4160%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="19.1660%" y="389" width="0.0802%" height="15" fill="rgb(216,64,54)" fg:x="239" fg:w="1"/><text x="19.4160%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="19.1660%" y="373" width="0.0802%" height="15" fill="rgb(217,54,24)" fg:x="239" fg:w="1"/><text x="19.4160%" y="383.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.88%)</title><rect x="18.4443%" y="501" width="0.8821%" height="15" fill="rgb(208,206,53)" fg:x="230" fg:w="11"/><text x="18.6943%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="19.2462%" y="485" width="0.0802%" height="15" fill="rgb(251,74,39)" fg:x="240" fg:w="1"/><text x="19.4962%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="19.2462%" y="469" width="0.0802%" height="15" fill="rgb(226,47,5)" fg:x="240" fg:w="1"/><text x="19.4962%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (17 samples, 1.36%)</title><rect x="18.0433%" y="517" width="1.3633%" height="15" fill="rgb(234,111,33)" fg:x="225" fg:w="17"/><text x="18.2933%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="19.3264%" y="501" width="0.0802%" height="15" fill="rgb(251,14,10)" fg:x="241" fg:w="1"/><text x="19.5764%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (22 samples, 1.76%)</title><rect x="18.0433%" y="533" width="1.7642%" height="15" fill="rgb(232,43,0)" fg:x="225" fg:w="22"/><text x="18.2933%" y="543.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.40%)</title><rect x="19.4066%" y="517" width="0.4010%" height="15" fill="rgb(222,68,43)" fg:x="242" fg:w="5"/><text x="19.6566%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.32%)</title><rect x="19.4868%" y="501" width="0.3208%" height="15" fill="rgb(217,24,23)" fg:x="243" fg:w="4"/><text x="19.7368%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.32%)</title><rect x="19.4868%" y="485" width="0.3208%" height="15" fill="rgb(229,209,14)" fg:x="243" fg:w="4"/><text x="19.7368%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="19.5670%" y="469" width="0.2406%" height="15" fill="rgb(250,149,48)" fg:x="244" fg:w="3"/><text x="19.8170%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="19.5670%" y="453" width="0.2406%" height="15" fill="rgb(210,120,37)" fg:x="244" fg:w="3"/><text x="19.8170%" y="463.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="19.5670%" y="437" width="0.2406%" height="15" fill="rgb(210,21,8)" fg:x="244" fg:w="3"/><text x="19.8170%" y="447.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (27 samples, 2.17%)</title><rect x="17.7225%" y="549" width="2.1652%" height="15" fill="rgb(243,145,7)" fg:x="221" fg:w="27"/><text x="17.9725%" y="559.50">&lt;..</text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="19.8075%" y="533" width="0.0802%" height="15" fill="rgb(238,178,32)" fg:x="247" fg:w="1"/><text x="20.0575%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="19.8075%" y="517" width="0.0802%" height="15" fill="rgb(222,4,10)" fg:x="247" fg:w="1"/><text x="20.0575%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="19.8075%" y="501" width="0.0802%" height="15" fill="rgb(239,7,37)" fg:x="247" fg:w="1"/><text x="20.0575%" y="511.50"></text></g><g><title>burrow_bon::perms::find_acls (1 samples, 0.08%)</title><rect x="19.8877%" y="549" width="0.0802%" height="15" fill="rgb(215,31,37)" fg:x="248" fg:w="1"/><text x="20.1377%" y="559.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="19.8877%" y="533" width="0.0802%" height="15" fill="rgb(224,83,33)" fg:x="248" fg:w="1"/><text x="20.1377%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.0481%" y="501" width="0.0802%" height="15" fill="rgb(239,55,3)" fg:x="250" fg:w="1"/><text x="20.2981%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="20.1283%" y="485" width="0.1604%" height="15" fill="rgb(247,92,11)" fg:x="251" fg:w="2"/><text x="20.3783%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="20.2887%" y="469" width="0.0802%" height="15" fill="rgb(239,200,7)" fg:x="253" fg:w="1"/><text x="20.5387%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.2887%" y="453" width="0.0802%" height="15" fill="rgb(227,115,8)" fg:x="253" fg:w="1"/><text x="20.5387%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="19.9679%" y="549" width="0.5613%" height="15" fill="rgb(215,189,27)" fg:x="249" fg:w="7"/><text x="20.2179%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.56%)</title><rect x="19.9679%" y="533" width="0.5613%" height="15" fill="rgb(251,216,39)" fg:x="249" fg:w="7"/><text x="20.2179%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="19.9679%" y="517" width="0.5613%" height="15" fill="rgb(207,29,47)" fg:x="249" fg:w="7"/><text x="20.2179%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="20.1283%" y="501" width="0.4010%" height="15" fill="rgb(210,71,34)" fg:x="251" fg:w="5"/><text x="20.3783%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="20.2887%" y="485" width="0.2406%" height="15" fill="rgb(253,217,51)" fg:x="253" fg:w="3"/><text x="20.5387%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="20.3689%" y="469" width="0.1604%" height="15" fill="rgb(222,117,46)" fg:x="254" fg:w="2"/><text x="20.6189%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.4491%" y="453" width="0.0802%" height="15" fill="rgb(226,132,6)" fg:x="255" fg:w="1"/><text x="20.6991%" y="463.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPaths as core::convert::Into&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::into (1 samples, 0.08%)</title><rect x="20.6897%" y="517" width="0.0802%" height="15" fill="rgb(254,145,51)" fg:x="258" fg:w="1"/><text x="20.9397%" y="527.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="20.6897%" y="501" width="0.0802%" height="15" fill="rgb(231,199,27)" fg:x="258" fg:w="1"/><text x="20.9397%" y="511.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="20.6897%" y="485" width="0.0802%" height="15" fill="rgb(245,158,14)" fg:x="258" fg:w="1"/><text x="20.9397%" y="495.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="20.7698%" y="517" width="0.0802%" height="15" fill="rgb(240,113,14)" fg:x="259" fg:w="1"/><text x="21.0198%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="20.7698%" y="501" width="0.0802%" height="15" fill="rgb(210,20,13)" fg:x="259" fg:w="1"/><text x="21.0198%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="20.7698%" y="485" width="0.0802%" height="15" fill="rgb(241,144,13)" fg:x="259" fg:w="1"/><text x="21.0198%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;treediff::tools::record::Recorder&lt;treediff::value::shared::Key,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="20.8500%" y="517" width="0.0802%" height="15" fill="rgb(235,43,34)" fg:x="260" fg:w="1"/><text x="21.1000%" y="527.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (4 samples, 0.32%)</title><rect x="20.6897%" y="533" width="0.3208%" height="15" fill="rgb(208,36,20)" fg:x="258" fg:w="4"/><text x="20.9397%" y="543.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="20.9302%" y="517" width="0.0802%" height="15" fill="rgb(239,204,10)" fg:x="261" fg:w="1"/><text x="21.1802%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="20.9302%" y="501" width="0.0802%" height="15" fill="rgb(217,84,43)" fg:x="261" fg:w="1"/><text x="21.1802%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="20.9302%" y="485" width="0.0802%" height="15" fill="rgb(241,170,50)" fg:x="261" fg:w="1"/><text x="21.1802%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.9302%" y="469" width="0.0802%" height="15" fill="rgb(226,205,29)" fg:x="261" fg:w="1"/><text x="21.1802%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.2510%" y="501" width="0.0802%" height="15" fill="rgb(233,113,1)" fg:x="265" fg:w="1"/><text x="21.5010%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="21.3312%" y="501" width="0.0802%" height="15" fill="rgb(253,98,13)" fg:x="266" fg:w="1"/><text x="21.5812%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="21.3312%" y="485" width="0.0802%" height="15" fill="rgb(211,115,12)" fg:x="266" fg:w="1"/><text x="21.5812%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.6520%" y="453" width="0.0802%" height="15" fill="rgb(208,12,16)" fg:x="270" fg:w="1"/><text x="21.9020%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.6520%" y="437" width="0.0802%" height="15" fill="rgb(237,193,54)" fg:x="270" fg:w="1"/><text x="21.9020%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.8925%" y="405" width="0.0802%" height="15" fill="rgb(243,22,42)" fg:x="273" fg:w="1"/><text x="22.1425%" y="415.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="21.8925%" y="389" width="0.0802%" height="15" fill="rgb(233,151,36)" fg:x="273" fg:w="1"/><text x="22.1425%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_seq (5 samples, 0.40%)</title><rect x="21.7322%" y="453" width="0.4010%" height="15" fill="rgb(237,57,45)" fg:x="271" fg:w="5"/><text x="21.9822%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="21.7322%" y="437" width="0.4010%" height="15" fill="rgb(221,88,17)" fg:x="271" fg:w="5"/><text x="21.9822%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="21.7322%" y="421" width="0.4010%" height="15" fill="rgb(230,79,15)" fg:x="271" fg:w="5"/><text x="21.9822%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="21.9727%" y="405" width="0.1604%" height="15" fill="rgb(213,57,13)" fg:x="274" fg:w="2"/><text x="22.2227%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="22.0529%" y="389" width="0.0802%" height="15" fill="rgb(222,116,39)" fg:x="275" fg:w="1"/><text x="22.3029%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.0529%" y="373" width="0.0802%" height="15" fill="rgb(245,107,2)" fg:x="275" fg:w="1"/><text x="22.3029%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.0529%" y="357" width="0.0802%" height="15" fill="rgb(238,1,10)" fg:x="275" fg:w="1"/><text x="22.3029%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="22.2133%" y="421" width="0.1604%" height="15" fill="rgb(249,4,48)" fg:x="277" fg:w="2"/><text x="22.4633%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.2935%" y="405" width="0.0802%" height="15" fill="rgb(223,151,18)" fg:x="278" fg:w="1"/><text x="22.5435%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (11 samples, 0.88%)</title><rect x="21.5718%" y="469" width="0.8821%" height="15" fill="rgb(227,65,43)" fg:x="269" fg:w="11"/><text x="21.8218%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="22.1331%" y="453" width="0.3208%" height="15" fill="rgb(218,40,45)" fg:x="276" fg:w="4"/><text x="22.3831%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="22.1331%" y="437" width="0.3208%" height="15" fill="rgb(252,121,31)" fg:x="276" fg:w="4"/><text x="22.3831%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="22.3737%" y="421" width="0.0802%" height="15" fill="rgb(219,158,43)" fg:x="279" fg:w="1"/><text x="22.6237%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="22.3737%" y="405" width="0.0802%" height="15" fill="rgb(231,162,42)" fg:x="279" fg:w="1"/><text x="22.6237%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (13 samples, 1.04%)</title><rect x="21.4916%" y="485" width="1.0425%" height="15" fill="rgb(217,179,25)" fg:x="268" fg:w="13"/><text x="21.7416%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="22.4539%" y="469" width="0.0802%" height="15" fill="rgb(206,212,31)" fg:x="280" fg:w="1"/><text x="22.7039%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.4539%" y="453" width="0.0802%" height="15" fill="rgb(235,144,12)" fg:x="280" fg:w="1"/><text x="22.7039%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.5341%" y="485" width="0.0802%" height="15" fill="rgb(213,51,10)" fg:x="281" fg:w="1"/><text x="22.7841%" y="495.50"></text></g><g><title>engine::session::Session::flush (69 samples, 5.53%)</title><rect x="17.1612%" y="661" width="5.5333%" height="15" fill="rgb(231,145,14)" fg:x="214" fg:w="69"/><text x="17.4112%" y="671.50">engine:..</text></g><g><title>engine::session::Session::save_changes (65 samples, 5.21%)</title><rect x="17.4820%" y="645" width="5.2125%" height="15" fill="rgb(235,15,28)" fg:x="218" fg:w="65"/><text x="17.7320%" y="655.50">engine..</text></g><g><title>engine::session::state::State::close (65 samples, 5.21%)</title><rect x="17.4820%" y="629" width="5.2125%" height="15" fill="rgb(237,206,10)" fg:x="218" fg:w="65"/><text x="17.7320%" y="639.50">engine..</text></g><g><title>engine::session::state::State::flush_entities (65 samples, 5.21%)</title><rect x="17.4820%" y="613" width="5.2125%" height="15" fill="rgb(236,227,27)" fg:x="218" fg:w="65"/><text x="17.7320%" y="623.50">engine..</text></g><g><title>core::iter::adapters::try_process (62 samples, 4.97%)</title><rect x="17.7225%" y="597" width="4.9719%" height="15" fill="rgb(246,83,35)" fg:x="221" fg:w="62"/><text x="17.9725%" y="607.50">core::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (62 samples, 4.97%)</title><rect x="17.7225%" y="581" width="4.9719%" height="15" fill="rgb(220,136,24)" fg:x="221" fg:w="62"/><text x="17.9725%" y="591.50">&lt;alloc..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (62 samples, 4.97%)</title><rect x="17.7225%" y="565" width="4.9719%" height="15" fill="rgb(217,3,25)" fg:x="221" fg:w="62"/><text x="17.9725%" y="575.50">engine..</text></g><g><title>kernel::model::any_entity_changes (27 samples, 2.17%)</title><rect x="20.5293%" y="549" width="2.1652%" height="15" fill="rgb(239,24,14)" fg:x="256" fg:w="27"/><text x="20.7793%" y="559.50">k..</text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (21 samples, 1.68%)</title><rect x="21.0104%" y="533" width="1.6840%" height="15" fill="rgb(244,16,53)" fg:x="262" fg:w="21"/><text x="21.2604%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (21 samples, 1.68%)</title><rect x="21.0104%" y="517" width="1.6840%" height="15" fill="rgb(208,175,44)" fg:x="262" fg:w="21"/><text x="21.2604%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (16 samples, 1.28%)</title><rect x="21.4114%" y="501" width="1.2831%" height="15" fill="rgb(252,18,48)" fg:x="267" fg:w="16"/><text x="21.6614%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.6143%" y="485" width="0.0802%" height="15" fill="rgb(234,199,32)" fg:x="282" fg:w="1"/><text x="22.8643%" y="495.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="22.6945%" y="661" width="0.0802%" height="15" fill="rgb(225,77,54)" fg:x="283" fg:w="1"/><text x="22.9445%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="22.6945%" y="645" width="0.0802%" height="15" fill="rgb(225,42,25)" fg:x="283" fg:w="1"/><text x="22.9445%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="22.6945%" y="629" width="0.0802%" height="15" fill="rgb(242,227,46)" fg:x="283" fg:w="1"/><text x="22.9445%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.6945%" y="613" width="0.0802%" height="15" fill="rgb(246,197,35)" fg:x="283" fg:w="1"/><text x="22.9445%" y="623.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="22.7747%" y="661" width="0.0802%" height="15" fill="rgb(215,159,26)" fg:x="284" fg:w="1"/><text x="23.0247%" y="671.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="22.7747%" y="645" width="0.0802%" height="15" fill="rgb(212,194,50)" fg:x="284" fg:w="1"/><text x="23.0247%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="22.7747%" y="629" width="0.0802%" height="15" fill="rgb(246,132,1)" fg:x="284" fg:w="1"/><text x="23.0247%" y="639.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="22.7747%" y="613" width="0.0802%" height="15" fill="rgb(217,71,7)" fg:x="284" fg:w="1"/><text x="23.0247%" y="623.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="22.7747%" y="597" width="0.0802%" height="15" fill="rgb(252,59,32)" fg:x="284" fg:w="1"/><text x="23.0247%" y="607.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="22.7747%" y="581" width="0.0802%" height="15" fill="rgb(253,204,25)" fg:x="284" fg:w="1"/><text x="23.0247%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="22.7747%" y="565" width="0.0802%" height="15" fill="rgb(232,21,16)" fg:x="284" fg:w="1"/><text x="23.0247%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="22.7747%" y="549" width="0.0802%" height="15" fill="rgb(248,90,29)" fg:x="284" fg:w="1"/><text x="23.0247%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="22.7747%" y="533" width="0.0802%" height="15" fill="rgb(249,223,7)" fg:x="284" fg:w="1"/><text x="23.0247%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="22.7747%" y="517" width="0.0802%" height="15" fill="rgb(231,119,42)" fg:x="284" fg:w="1"/><text x="23.0247%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="22.7747%" y="501" width="0.0802%" height="15" fill="rgb(215,41,35)" fg:x="284" fg:w="1"/><text x="23.0247%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="22.7747%" y="485" width="0.0802%" height="15" fill="rgb(220,44,45)" fg:x="284" fg:w="1"/><text x="23.0247%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="22.7747%" y="469" width="0.0802%" height="15" fill="rgb(253,197,36)" fg:x="284" fg:w="1"/><text x="23.0247%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.7747%" y="453" width="0.0802%" height="15" fill="rgb(245,225,54)" fg:x="284" fg:w="1"/><text x="23.0247%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.0152%" y="613" width="0.0802%" height="15" fill="rgb(239,94,37)" fg:x="287" fg:w="1"/><text x="23.2652%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.0152%" y="597" width="0.0802%" height="15" fill="rgb(242,217,10)" fg:x="287" fg:w="1"/><text x="23.2652%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.0954%" y="613" width="0.0802%" height="15" fill="rgb(250,193,7)" fg:x="288" fg:w="1"/><text x="23.3454%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="23.1756%" y="549" width="0.0802%" height="15" fill="rgb(230,104,19)" fg:x="289" fg:w="1"/><text x="23.4256%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (5 samples, 0.40%)</title><rect x="22.9350%" y="629" width="0.4010%" height="15" fill="rgb(230,181,4)" fg:x="286" fg:w="5"/><text x="23.1850%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="23.1756%" y="613" width="0.1604%" height="15" fill="rgb(216,219,49)" fg:x="289" fg:w="2"/><text x="23.4256%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="23.1756%" y="597" width="0.1604%" height="15" fill="rgb(254,144,0)" fg:x="289" fg:w="2"/><text x="23.4256%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="23.1756%" y="581" width="0.1604%" height="15" fill="rgb(205,209,38)" fg:x="289" fg:w="2"/><text x="23.4256%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="23.1756%" y="565" width="0.1604%" height="15" fill="rgb(240,21,42)" fg:x="289" fg:w="2"/><text x="23.4256%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="23.2558%" y="549" width="0.0802%" height="15" fill="rgb(241,132,3)" fg:x="290" fg:w="1"/><text x="23.5058%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="23.2558%" y="533" width="0.0802%" height="15" fill="rgb(225,14,2)" fg:x="290" fg:w="1"/><text x="23.5058%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="23.2558%" y="517" width="0.0802%" height="15" fill="rgb(210,141,35)" fg:x="290" fg:w="1"/><text x="23.5058%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.2558%" y="501" width="0.0802%" height="15" fill="rgb(251,14,44)" fg:x="290" fg:w="1"/><text x="23.5058%" y="511.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (6 samples, 0.48%)</title><rect x="22.9350%" y="645" width="0.4812%" height="15" fill="rgb(247,48,18)" fg:x="286" fg:w="6"/><text x="23.1850%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.3360%" y="629" width="0.0802%" height="15" fill="rgb(225,0,40)" fg:x="291" fg:w="1"/><text x="23.5860%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="23.4162%" y="629" width="0.0802%" height="15" fill="rgb(221,31,33)" fg:x="292" fg:w="1"/><text x="23.6662%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="23.4162%" y="613" width="0.0802%" height="15" fill="rgb(237,42,40)" fg:x="292" fg:w="1"/><text x="23.6662%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="23.4162%" y="597" width="0.0802%" height="15" fill="rgb(233,51,29)" fg:x="292" fg:w="1"/><text x="23.6662%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="23.4162%" y="581" width="0.0802%" height="15" fill="rgb(226,58,20)" fg:x="292" fg:w="1"/><text x="23.6662%" y="591.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="23.4964%" y="629" width="0.0802%" height="15" fill="rgb(208,98,7)" fg:x="293" fg:w="1"/><text x="23.7464%" y="639.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="23.4964%" y="613" width="0.0802%" height="15" fill="rgb(228,143,44)" fg:x="293" fg:w="1"/><text x="23.7464%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.4964%" y="597" width="0.0802%" height="15" fill="rgb(246,55,38)" fg:x="293" fg:w="1"/><text x="23.7464%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.4964%" y="581" width="0.0802%" height="15" fill="rgb(247,87,16)" fg:x="293" fg:w="1"/><text x="23.7464%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.4964%" y="565" width="0.0802%" height="15" fill="rgb(234,129,42)" fg:x="293" fg:w="1"/><text x="23.7464%" y="575.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="23.5766%" y="629" width="0.0802%" height="15" fill="rgb(220,82,16)" fg:x="294" fg:w="1"/><text x="23.8266%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="23.6568%" y="501" width="0.0802%" height="15" fill="rgb(211,88,4)" fg:x="295" fg:w="1"/><text x="23.9068%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="23.6568%" y="581" width="0.1604%" height="15" fill="rgb(248,151,21)" fg:x="295" fg:w="2"/><text x="23.9068%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="23.6568%" y="565" width="0.1604%" height="15" fill="rgb(238,163,6)" fg:x="295" fg:w="2"/><text x="23.9068%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="23.6568%" y="549" width="0.1604%" height="15" fill="rgb(209,183,11)" fg:x="295" fg:w="2"/><text x="23.9068%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="23.6568%" y="533" width="0.1604%" height="15" fill="rgb(219,37,20)" fg:x="295" fg:w="2"/><text x="23.9068%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="23.6568%" y="517" width="0.1604%" height="15" fill="rgb(210,158,4)" fg:x="295" fg:w="2"/><text x="23.9068%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="23.7370%" y="501" width="0.0802%" height="15" fill="rgb(221,167,53)" fg:x="296" fg:w="1"/><text x="23.9870%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="23.7370%" y="485" width="0.0802%" height="15" fill="rgb(237,151,45)" fg:x="296" fg:w="1"/><text x="23.9870%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.7370%" y="469" width="0.0802%" height="15" fill="rgb(231,39,3)" fg:x="296" fg:w="1"/><text x="23.9870%" y="479.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="23.6568%" y="613" width="0.2406%" height="15" fill="rgb(212,167,28)" fg:x="295" fg:w="3"/><text x="23.9068%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.24%)</title><rect x="23.6568%" y="597" width="0.2406%" height="15" fill="rgb(232,178,8)" fg:x="295" fg:w="3"/><text x="23.9068%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="23.8172%" y="581" width="0.0802%" height="15" fill="rgb(225,151,20)" fg:x="297" fg:w="1"/><text x="24.0672%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="23.8172%" y="565" width="0.0802%" height="15" fill="rgb(238,3,37)" fg:x="297" fg:w="1"/><text x="24.0672%" y="575.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="23.8974%" y="613" width="0.0802%" height="15" fill="rgb(251,147,42)" fg:x="298" fg:w="1"/><text x="24.1474%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.8974%" y="597" width="0.0802%" height="15" fill="rgb(208,173,10)" fg:x="298" fg:w="1"/><text x="24.1474%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="23.8974%" y="581" width="0.0802%" height="15" fill="rgb(246,225,4)" fg:x="298" fg:w="1"/><text x="24.1474%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.0577%" y="581" width="0.0802%" height="15" fill="rgb(248,102,6)" fg:x="300" fg:w="1"/><text x="24.3077%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="24.1379%" y="581" width="0.0802%" height="15" fill="rgb(232,6,21)" fg:x="301" fg:w="1"/><text x="24.3879%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="24.1379%" y="565" width="0.0802%" height="15" fill="rgb(221,179,22)" fg:x="301" fg:w="1"/><text x="24.3879%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.1379%" y="549" width="0.0802%" height="15" fill="rgb(252,50,20)" fg:x="301" fg:w="1"/><text x="24.3879%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.2181%" y="501" width="0.0802%" height="15" fill="rgb(222,56,38)" fg:x="302" fg:w="1"/><text x="24.4681%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_entity (9 samples, 0.72%)</title><rect x="23.6568%" y="629" width="0.7217%" height="15" fill="rgb(206,193,29)" fg:x="295" fg:w="9"/><text x="23.9068%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.40%)</title><rect x="23.9775%" y="613" width="0.4010%" height="15" fill="rgb(239,192,45)" fg:x="299" fg:w="5"/><text x="24.2275%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="24.0577%" y="597" width="0.3208%" height="15" fill="rgb(254,18,36)" fg:x="300" fg:w="4"/><text x="24.3077%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="24.2181%" y="581" width="0.1604%" height="15" fill="rgb(221,127,11)" fg:x="302" fg:w="2"/><text x="24.4681%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="24.2181%" y="565" width="0.1604%" height="15" fill="rgb(234,146,35)" fg:x="302" fg:w="2"/><text x="24.4681%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="24.2181%" y="549" width="0.1604%" height="15" fill="rgb(254,201,37)" fg:x="302" fg:w="2"/><text x="24.4681%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="24.2181%" y="533" width="0.1604%" height="15" fill="rgb(211,202,23)" fg:x="302" fg:w="2"/><text x="24.4681%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="24.2181%" y="517" width="0.1604%" height="15" fill="rgb(237,91,2)" fg:x="302" fg:w="2"/><text x="24.4681%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="24.2983%" y="501" width="0.0802%" height="15" fill="rgb(226,228,36)" fg:x="303" fg:w="1"/><text x="24.5483%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="24.2983%" y="485" width="0.0802%" height="15" fill="rgb(213,63,50)" fg:x="303" fg:w="1"/><text x="24.5483%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="24.2983%" y="469" width="0.0802%" height="15" fill="rgb(235,194,19)" fg:x="303" fg:w="1"/><text x="24.5483%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.2983%" y="453" width="0.0802%" height="15" fill="rgb(207,204,18)" fg:x="303" fg:w="1"/><text x="24.5483%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (13 samples, 1.04%)</title><rect x="23.4162%" y="645" width="1.0425%" height="15" fill="rgb(248,8,7)" fg:x="292" fg:w="13"/><text x="23.6662%" y="655.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="24.3785%" y="629" width="0.0802%" height="15" fill="rgb(223,145,47)" fg:x="304" fg:w="1"/><text x="24.6285%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="24.3785%" y="613" width="0.0802%" height="15" fill="rgb(228,84,11)" fg:x="304" fg:w="1"/><text x="24.6285%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="24.3785%" y="597" width="0.0802%" height="15" fill="rgb(218,76,45)" fg:x="304" fg:w="1"/><text x="24.6285%" y="607.50"></text></g><g><title>plugins_core::build::Build::save (24 samples, 1.92%)</title><rect x="22.8549%" y="661" width="1.9246%" height="15" fill="rgb(223,80,15)" fg:x="285" fg:w="24"/><text x="23.1049%" y="671.50">p..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.32%)</title><rect x="24.4587%" y="645" width="0.3208%" height="15" fill="rgb(219,218,33)" fg:x="305" fg:w="4"/><text x="24.7087%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="24.5389%" y="629" width="0.2406%" height="15" fill="rgb(208,51,11)" fg:x="306" fg:w="3"/><text x="24.7889%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="24.6191%" y="613" width="0.1604%" height="15" fill="rgb(229,165,39)" fg:x="307" fg:w="2"/><text x="24.8691%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="24.6993%" y="597" width="0.0802%" height="15" fill="rgb(241,100,24)" fg:x="308" fg:w="1"/><text x="24.9493%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="24.6993%" y="581" width="0.0802%" height="15" fill="rgb(228,14,23)" fg:x="308" fg:w="1"/><text x="24.9493%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="24.6993%" y="565" width="0.0802%" height="15" fill="rgb(247,116,52)" fg:x="308" fg:w="1"/><text x="24.9493%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="24.6993%" y="549" width="0.0802%" height="15" fill="rgb(216,149,33)" fg:x="308" fg:w="1"/><text x="24.9493%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="24.6993%" y="533" width="0.0802%" height="15" fill="rgb(238,142,29)" fg:x="308" fg:w="1"/><text x="24.9493%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="24.6993%" y="517" width="0.0802%" height="15" fill="rgb(224,83,40)" fg:x="308" fg:w="1"/><text x="24.9493%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="24.6993%" y="501" width="0.0802%" height="15" fill="rgb(234,165,11)" fg:x="308" fg:w="1"/><text x="24.9493%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="24.6993%" y="485" width="0.0802%" height="15" fill="rgb(215,96,23)" fg:x="308" fg:w="1"/><text x="24.9493%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="24.6993%" y="469" width="0.0802%" height="15" fill="rgb(233,179,26)" fg:x="308" fg:w="1"/><text x="24.9493%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="24.6993%" y="453" width="0.0802%" height="15" fill="rgb(225,129,33)" fg:x="308" fg:w="1"/><text x="24.9493%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="24.6993%" y="437" width="0.0802%" height="15" fill="rgb(237,49,13)" fg:x="308" fg:w="1"/><text x="24.9493%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="24.6993%" y="421" width="0.0802%" height="15" fill="rgb(211,3,31)" fg:x="308" fg:w="1"/><text x="24.9493%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.6993%" y="405" width="0.0802%" height="15" fill="rgb(216,152,19)" fg:x="308" fg:w="1"/><text x="24.9493%" y="415.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="24.7795%" y="629" width="0.1604%" height="15" fill="rgb(251,121,35)" fg:x="309" fg:w="2"/><text x="25.0295%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="24.8597%" y="613" width="0.0802%" height="15" fill="rgb(210,217,47)" fg:x="310" fg:w="1"/><text x="25.1097%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="24.8597%" y="597" width="0.0802%" height="15" fill="rgb(244,116,22)" fg:x="310" fg:w="1"/><text x="25.1097%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="24.9399%" y="629" width="0.0802%" height="15" fill="rgb(228,17,21)" fg:x="311" fg:w="1"/><text x="25.1899%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="24.9399%" y="613" width="0.0802%" height="15" fill="rgb(240,149,34)" fg:x="311" fg:w="1"/><text x="25.1899%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.9399%" y="597" width="0.0802%" height="15" fill="rgb(208,125,47)" fg:x="311" fg:w="1"/><text x="25.1899%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="25.0200%" y="597" width="0.0802%" height="15" fill="rgb(249,186,39)" fg:x="312" fg:w="1"/><text x="25.2700%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="25.0200%" y="581" width="0.0802%" height="15" fill="rgb(240,220,33)" fg:x="312" fg:w="1"/><text x="25.2700%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="25.0200%" y="565" width="0.0802%" height="15" fill="rgb(243,110,23)" fg:x="312" fg:w="1"/><text x="25.2700%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="25.0200%" y="549" width="0.0802%" height="15" fill="rgb(219,163,46)" fg:x="312" fg:w="1"/><text x="25.2700%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="25.0200%" y="533" width="0.0802%" height="15" fill="rgb(216,126,30)" fg:x="312" fg:w="1"/><text x="25.2700%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.0200%" y="517" width="0.0802%" height="15" fill="rgb(208,139,11)" fg:x="312" fg:w="1"/><text x="25.2700%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.0200%" y="501" width="0.0802%" height="15" fill="rgb(213,118,36)" fg:x="312" fg:w="1"/><text x="25.2700%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="25.0200%" y="485" width="0.0802%" height="15" fill="rgb(226,43,17)" fg:x="312" fg:w="1"/><text x="25.2700%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="25.0200%" y="469" width="0.0802%" height="15" fill="rgb(254,217,4)" fg:x="312" fg:w="1"/><text x="25.2700%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="25.0200%" y="453" width="0.0802%" height="15" fill="rgb(210,134,47)" fg:x="312" fg:w="1"/><text x="25.2700%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="25.0200%" y="437" width="0.0802%" height="15" fill="rgb(237,24,49)" fg:x="312" fg:w="1"/><text x="25.2700%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="25.0200%" y="421" width="0.0802%" height="15" fill="rgb(251,39,46)" fg:x="312" fg:w="1"/><text x="25.2700%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="25.0200%" y="405" width="0.0802%" height="15" fill="rgb(251,220,3)" fg:x="312" fg:w="1"/><text x="25.2700%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="25.0200%" y="389" width="0.0802%" height="15" fill="rgb(228,105,12)" fg:x="312" fg:w="1"/><text x="25.2700%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="25.0200%" y="373" width="0.0802%" height="15" fill="rgb(215,196,1)" fg:x="312" fg:w="1"/><text x="25.2700%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="25.0200%" y="357" width="0.0802%" height="15" fill="rgb(214,33,39)" fg:x="312" fg:w="1"/><text x="25.2700%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.0200%" y="341" width="0.0802%" height="15" fill="rgb(220,19,52)" fg:x="312" fg:w="1"/><text x="25.2700%" y="351.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="25.0200%" y="629" width="0.1604%" height="15" fill="rgb(221,78,38)" fg:x="312" fg:w="2"/><text x="25.2700%" y="639.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="25.0200%" y="613" width="0.1604%" height="15" fill="rgb(253,30,16)" fg:x="312" fg:w="2"/><text x="25.2700%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="25.1002%" y="597" width="0.0802%" height="15" fill="rgb(242,65,0)" fg:x="313" fg:w="1"/><text x="25.3502%" y="607.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="25.1002%" y="581" width="0.0802%" height="15" fill="rgb(235,201,12)" fg:x="313" fg:w="1"/><text x="25.3502%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="25.1002%" y="565" width="0.0802%" height="15" fill="rgb(233,161,9)" fg:x="313" fg:w="1"/><text x="25.3502%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="25.1804%" y="597" width="0.0802%" height="15" fill="rgb(241,207,41)" fg:x="314" fg:w="1"/><text x="25.4304%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="25.2606%" y="597" width="0.1604%" height="15" fill="rgb(212,69,46)" fg:x="315" fg:w="2"/><text x="25.5106%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="25.2606%" y="581" width="0.1604%" height="15" fill="rgb(239,69,45)" fg:x="315" fg:w="2"/><text x="25.5106%" y="591.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (2 samples, 0.16%)</title><rect x="25.2606%" y="565" width="0.1604%" height="15" fill="rgb(242,117,48)" fg:x="315" fg:w="2"/><text x="25.5106%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="25.2606%" y="549" width="0.1604%" height="15" fill="rgb(228,41,36)" fg:x="315" fg:w="2"/><text x="25.5106%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="25.2606%" y="533" width="0.1604%" height="15" fill="rgb(212,3,32)" fg:x="315" fg:w="2"/><text x="25.5106%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="25.2606%" y="517" width="0.1604%" height="15" fill="rgb(233,41,49)" fg:x="315" fg:w="2"/><text x="25.5106%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.3408%" y="501" width="0.0802%" height="15" fill="rgb(252,170,49)" fg:x="316" fg:w="1"/><text x="25.5908%" y="511.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (9 samples, 0.72%)</title><rect x="24.7795%" y="661" width="0.7217%" height="15" fill="rgb(229,53,26)" fg:x="309" fg:w="9"/><text x="25.0295%" y="671.50"></text></g><g><title>plugins_core::tools::set_occupying (9 samples, 0.72%)</title><rect x="24.7795%" y="645" width="0.7217%" height="15" fill="rgb(217,157,12)" fg:x="309" fg:w="9"/><text x="25.0295%" y="655.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (4 samples, 0.32%)</title><rect x="25.1804%" y="629" width="0.3208%" height="15" fill="rgb(227,17,9)" fg:x="314" fg:w="4"/><text x="25.4304%" y="639.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (4 samples, 0.32%)</title><rect x="25.1804%" y="613" width="0.3208%" height="15" fill="rgb(218,84,12)" fg:x="314" fg:w="4"/><text x="25.4304%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.4210%" y="597" width="0.0802%" height="15" fill="rgb(212,79,24)" fg:x="317" fg:w="1"/><text x="25.6710%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="25.5012%" y="613" width="0.1604%" height="15" fill="rgb(217,222,37)" fg:x="318" fg:w="2"/><text x="25.7512%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="25.5012%" y="597" width="0.1604%" height="15" fill="rgb(246,208,8)" fg:x="318" fg:w="2"/><text x="25.7512%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.6616%" y="613" width="0.0802%" height="15" fill="rgb(244,133,10)" fg:x="320" fg:w="1"/><text x="25.9116%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.6616%" y="597" width="0.0802%" height="15" fill="rgb(209,219,41)" fg:x="320" fg:w="1"/><text x="25.9116%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="25.6616%" y="581" width="0.0802%" height="15" fill="rgb(253,175,45)" fg:x="320" fg:w="1"/><text x="25.9116%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="25.6616%" y="565" width="0.0802%" height="15" fill="rgb(235,100,37)" fg:x="320" fg:w="1"/><text x="25.9116%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="25.6616%" y="549" width="0.0802%" height="15" fill="rgb(225,87,19)" fg:x="320" fg:w="1"/><text x="25.9116%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="25.6616%" y="533" width="0.0802%" height="15" fill="rgb(217,152,17)" fg:x="320" fg:w="1"/><text x="25.9116%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="25.6616%" y="517" width="0.0802%" height="15" fill="rgb(235,72,13)" fg:x="320" fg:w="1"/><text x="25.9116%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.40%)</title><rect x="25.5012%" y="629" width="0.4010%" height="15" fill="rgb(233,140,18)" fg:x="318" fg:w="5"/><text x="25.7512%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="25.7418%" y="613" width="0.1604%" height="15" fill="rgb(207,212,28)" fg:x="321" fg:w="2"/><text x="25.9918%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="25.7418%" y="597" width="0.1604%" height="15" fill="rgb(220,130,25)" fg:x="321" fg:w="2"/><text x="25.9918%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.8220%" y="581" width="0.0802%" height="15" fill="rgb(205,55,34)" fg:x="322" fg:w="1"/><text x="26.0720%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.8220%" y="565" width="0.0802%" height="15" fill="rgb(237,54,35)" fg:x="322" fg:w="1"/><text x="26.0720%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="25.8220%" y="549" width="0.0802%" height="15" fill="rgb(208,67,23)" fg:x="322" fg:w="1"/><text x="26.0720%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="25.8220%" y="533" width="0.0802%" height="15" fill="rgb(206,207,50)" fg:x="322" fg:w="1"/><text x="26.0720%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="25.8220%" y="517" width="0.0802%" height="15" fill="rgb(213,211,42)" fg:x="322" fg:w="1"/><text x="26.0720%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="25.8220%" y="501" width="0.0802%" height="15" fill="rgb(252,197,50)" fg:x="322" fg:w="1"/><text x="26.0720%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="25.8220%" y="485" width="0.0802%" height="15" fill="rgb(251,211,41)" fg:x="322" fg:w="1"/><text x="26.0720%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="25.8220%" y="469" width="0.0802%" height="15" fill="rgb(229,211,5)" fg:x="322" fg:w="1"/><text x="26.0720%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="25.8220%" y="453" width="0.0802%" height="15" fill="rgb(239,36,31)" fg:x="322" fg:w="1"/><text x="26.0720%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="25.8220%" y="437" width="0.0802%" height="15" fill="rgb(248,67,31)" fg:x="322" fg:w="1"/><text x="26.0720%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="25.8220%" y="421" width="0.0802%" height="15" fill="rgb(249,55,44)" fg:x="322" fg:w="1"/><text x="26.0720%" y="431.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (6 samples, 0.48%)</title><rect x="25.5012%" y="645" width="0.4812%" height="15" fill="rgb(216,82,12)" fg:x="318" fg:w="6"/><text x="25.7512%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="25.9022%" y="629" width="0.0802%" height="15" fill="rgb(242,174,1)" fg:x="323" fg:w="1"/><text x="26.1522%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="25.9022%" y="613" width="0.0802%" height="15" fill="rgb(208,120,29)" fg:x="323" fg:w="1"/><text x="26.1522%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="25.9022%" y="597" width="0.0802%" height="15" fill="rgb(221,105,43)" fg:x="323" fg:w="1"/><text x="26.1522%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="25.9022%" y="581" width="0.0802%" height="15" fill="rgb(234,124,22)" fg:x="323" fg:w="1"/><text x="26.1522%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="25.9022%" y="565" width="0.0802%" height="15" fill="rgb(212,23,30)" fg:x="323" fg:w="1"/><text x="26.1522%" y="575.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="25.9022%" y="549" width="0.0802%" height="15" fill="rgb(219,122,53)" fg:x="323" fg:w="1"/><text x="26.1522%" y="559.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="25.9022%" y="533" width="0.0802%" height="15" fill="rgb(248,84,24)" fg:x="323" fg:w="1"/><text x="26.1522%" y="543.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (7 samples, 0.56%)</title><rect x="25.5012%" y="661" width="0.5613%" height="15" fill="rgb(245,115,18)" fg:x="318" fg:w="7"/><text x="25.7512%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="25.9824%" y="645" width="0.0802%" height="15" fill="rgb(227,176,51)" fg:x="324" fg:w="1"/><text x="26.2324%" y="655.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="25.9824%" y="629" width="0.0802%" height="15" fill="rgb(229,63,42)" fg:x="324" fg:w="1"/><text x="26.2324%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="25.9824%" y="613" width="0.0802%" height="15" fill="rgb(247,202,24)" fg:x="324" fg:w="1"/><text x="26.2324%" y="623.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Route&gt;::serialize (1 samples, 0.08%)</title><rect x="25.9824%" y="597" width="0.0802%" height="15" fill="rgb(244,173,20)" fg:x="324" fg:w="1"/><text x="26.2324%" y="607.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::SimpleRoute&gt;::serialize (1 samples, 0.08%)</title><rect x="25.9824%" y="581" width="0.0802%" height="15" fill="rgb(242,81,47)" fg:x="324" fg:w="1"/><text x="26.2324%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="25.9824%" y="565" width="0.0802%" height="15" fill="rgb(231,185,54)" fg:x="324" fg:w="1"/><text x="26.2324%" y="575.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="25.9824%" y="549" width="0.0802%" height="15" fill="rgb(243,55,32)" fg:x="324" fg:w="1"/><text x="26.2324%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="25.9824%" y="533" width="0.0802%" height="15" fill="rgb(208,167,19)" fg:x="324" fg:w="1"/><text x="26.2324%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.9824%" y="517" width="0.0802%" height="15" fill="rgb(231,72,35)" fg:x="324" fg:w="1"/><text x="26.2324%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::OpenedScopeRefMut&lt;plugins_core::carrying::model::Containing,kernel::model::entity::Entity&gt;&gt; (1 samples, 0.08%)</title><rect x="26.0626%" y="645" width="0.0802%" height="15" fill="rgb(250,173,51)" fg:x="325" fg:w="1"/><text x="26.3126%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="26.1427%" y="613" width="0.0802%" height="15" fill="rgb(209,5,22)" fg:x="326" fg:w="1"/><text x="26.3927%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="26.1427%" y="597" width="0.0802%" height="15" fill="rgb(250,174,19)" fg:x="326" fg:w="1"/><text x="26.3927%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="26.1427%" y="581" width="0.0802%" height="15" fill="rgb(217,3,49)" fg:x="326" fg:w="1"/><text x="26.3927%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.1427%" y="565" width="0.0802%" height="15" fill="rgb(218,225,5)" fg:x="326" fg:w="1"/><text x="26.3927%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="26.1427%" y="549" width="0.0802%" height="15" fill="rgb(236,89,11)" fg:x="326" fg:w="1"/><text x="26.3927%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.1427%" y="533" width="0.0802%" height="15" fill="rgb(206,33,28)" fg:x="326" fg:w="1"/><text x="26.3927%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="26.1427%" y="517" width="0.0802%" height="15" fill="rgb(241,56,42)" fg:x="326" fg:w="1"/><text x="26.3927%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.1427%" y="501" width="0.0802%" height="15" fill="rgb(222,44,11)" fg:x="326" fg:w="1"/><text x="26.3927%" y="511.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="26.1427%" y="645" width="0.1604%" height="15" fill="rgb(234,111,20)" fg:x="326" fg:w="2"/><text x="26.3927%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="26.1427%" y="629" width="0.1604%" height="15" fill="rgb(237,77,6)" fg:x="326" fg:w="2"/><text x="26.3927%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="26.2229%" y="613" width="0.0802%" height="15" fill="rgb(235,111,23)" fg:x="327" fg:w="1"/><text x="26.4729%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="26.2229%" y="597" width="0.0802%" height="15" fill="rgb(251,135,29)" fg:x="327" fg:w="1"/><text x="26.4729%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="26.2229%" y="581" width="0.0802%" height="15" fill="rgb(217,57,1)" fg:x="327" fg:w="1"/><text x="26.4729%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="26.2229%" y="565" width="0.0802%" height="15" fill="rgb(249,119,31)" fg:x="327" fg:w="1"/><text x="26.4729%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="26.2229%" y="549" width="0.0802%" height="15" fill="rgb(233,164,33)" fg:x="327" fg:w="1"/><text x="26.4729%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="26.2229%" y="533" width="0.0802%" height="15" fill="rgb(250,217,43)" fg:x="327" fg:w="1"/><text x="26.4729%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="26.2229%" y="517" width="0.0802%" height="15" fill="rgb(232,154,50)" fg:x="327" fg:w="1"/><text x="26.4729%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="26.2229%" y="501" width="0.0802%" height="15" fill="rgb(227,190,8)" fg:x="327" fg:w="1"/><text x="26.4729%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="26.2229%" y="485" width="0.0802%" height="15" fill="rgb(209,217,32)" fg:x="327" fg:w="1"/><text x="26.4729%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="26.2229%" y="469" width="0.0802%" height="15" fill="rgb(243,203,50)" fg:x="327" fg:w="1"/><text x="26.4729%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="26.2229%" y="453" width="0.0802%" height="15" fill="rgb(232,152,27)" fg:x="327" fg:w="1"/><text x="26.4729%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="26.2229%" y="437" width="0.0802%" height="15" fill="rgb(240,34,29)" fg:x="327" fg:w="1"/><text x="26.4729%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="26.2229%" y="421" width="0.0802%" height="15" fill="rgb(215,185,52)" fg:x="327" fg:w="1"/><text x="26.4729%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="26.2229%" y="405" width="0.0802%" height="15" fill="rgb(240,89,49)" fg:x="327" fg:w="1"/><text x="26.4729%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="26.2229%" y="389" width="0.0802%" height="15" fill="rgb(225,12,52)" fg:x="327" fg:w="1"/><text x="26.4729%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="26.2229%" y="373" width="0.0802%" height="15" fill="rgb(239,128,45)" fg:x="327" fg:w="1"/><text x="26.4729%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.2229%" y="357" width="0.0802%" height="15" fill="rgb(211,78,47)" fg:x="327" fg:w="1"/><text x="26.4729%" y="367.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="26.3031%" y="645" width="0.0802%" height="15" fill="rgb(232,31,21)" fg:x="328" fg:w="1"/><text x="26.5531%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="26.3031%" y="629" width="0.0802%" height="15" fill="rgb(222,168,14)" fg:x="328" fg:w="1"/><text x="26.5531%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="26.3031%" y="613" width="0.0802%" height="15" fill="rgb(209,128,24)" fg:x="328" fg:w="1"/><text x="26.5531%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.3031%" y="597" width="0.0802%" height="15" fill="rgb(249,35,13)" fg:x="328" fg:w="1"/><text x="26.5531%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="26.3031%" y="581" width="0.0802%" height="15" fill="rgb(218,7,2)" fg:x="328" fg:w="1"/><text x="26.5531%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.3031%" y="565" width="0.0802%" height="15" fill="rgb(238,107,27)" fg:x="328" fg:w="1"/><text x="26.5531%" y="575.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.40%)</title><rect x="26.0626%" y="661" width="0.4010%" height="15" fill="rgb(217,88,38)" fg:x="325" fg:w="5"/><text x="26.3126%" y="671.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="26.3833%" y="645" width="0.0802%" height="15" fill="rgb(230,207,0)" fg:x="329" fg:w="1"/><text x="26.6333%" y="655.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="26.3833%" y="629" width="0.0802%" height="15" fill="rgb(249,64,54)" fg:x="329" fg:w="1"/><text x="26.6333%" y="639.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="26.3833%" y="613" width="0.0802%" height="15" fill="rgb(231,7,11)" fg:x="329" fg:w="1"/><text x="26.6333%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="26.3833%" y="597" width="0.0802%" height="15" fill="rgb(205,149,21)" fg:x="329" fg:w="1"/><text x="26.6333%" y="607.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="26.3833%" y="581" width="0.0802%" height="15" fill="rgb(215,126,34)" fg:x="329" fg:w="1"/><text x="26.6333%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_struct (1 samples, 0.08%)</title><rect x="26.3833%" y="565" width="0.0802%" height="15" fill="rgb(241,132,45)" fg:x="329" fg:w="1"/><text x="26.6333%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="26.4635%" y="629" width="0.0802%" height="15" fill="rgb(252,69,32)" fg:x="330" fg:w="1"/><text x="26.7135%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.4635%" y="613" width="0.0802%" height="15" fill="rgb(232,204,19)" fg:x="330" fg:w="1"/><text x="26.7135%" y="623.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (120 samples, 9.62%)</title><rect x="17.0008%" y="677" width="9.6231%" height="15" fill="rgb(249,15,47)" fg:x="212" fg:w="120"/><text x="17.2508%" y="687.50">plugins_core::..</text></g><g><title>plugins_core::tools::set_wearing (2 samples, 0.16%)</title><rect x="26.4635%" y="661" width="0.1604%" height="15" fill="rgb(209,227,23)" fg:x="330" fg:w="2"/><text x="26.7135%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="26.4635%" y="645" width="0.1604%" height="15" fill="rgb(248,92,24)" fg:x="330" fg:w="2"/><text x="26.7135%" y="655.50"></text></g><g><title>plugins_core::fashion::model::_::&lt;impl serde::ser::Serialize for plugins_core::fashion::model::Wearing&gt;::serialize (1 samples, 0.08%)</title><rect x="26.5437%" y="629" width="0.0802%" height="15" fill="rgb(247,59,2)" fg:x="331" fg:w="1"/><text x="26.7937%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="26.5437%" y="613" width="0.0802%" height="15" fill="rgb(221,30,5)" fg:x="331" fg:w="1"/><text x="26.7937%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="26.6239%" y="629" width="0.0802%" height="15" fill="rgb(208,108,53)" fg:x="332" fg:w="1"/><text x="26.8739%" y="639.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="26.6239%" y="613" width="0.0802%" height="15" fill="rgb(211,183,26)" fg:x="332" fg:w="1"/><text x="26.8739%" y="623.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="26.6239%" y="597" width="0.0802%" height="15" fill="rgb(232,132,4)" fg:x="332" fg:w="1"/><text x="26.8739%" y="607.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="26.6239%" y="581" width="0.0802%" height="15" fill="rgb(253,128,37)" fg:x="332" fg:w="1"/><text x="26.8739%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="26.6239%" y="565" width="0.0802%" height="15" fill="rgb(221,58,24)" fg:x="332" fg:w="1"/><text x="26.8739%" y="575.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (2 samples, 0.16%)</title><rect x="26.6239%" y="677" width="0.1604%" height="15" fill="rgb(230,54,45)" fg:x="332" fg:w="2"/><text x="26.8739%" y="687.50"></text></g><g><title>plugins_core::build::Build::new (2 samples, 0.16%)</title><rect x="26.6239%" y="661" width="0.1604%" height="15" fill="rgb(254,21,18)" fg:x="332" fg:w="2"/><text x="26.8739%" y="671.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="26.6239%" y="645" width="0.1604%" height="15" fill="rgb(221,108,0)" fg:x="332" fg:w="2"/><text x="26.8739%" y="655.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="26.7041%" y="629" width="0.0802%" height="15" fill="rgb(206,95,1)" fg:x="333" fg:w="1"/><text x="26.9541%" y="639.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="26.7843%" y="645" width="0.0802%" height="15" fill="rgb(237,52,5)" fg:x="334" fg:w="1"/><text x="27.0343%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="26.8645%" y="629" width="0.0802%" height="15" fill="rgb(218,150,34)" fg:x="335" fg:w="1"/><text x="27.1145%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="26.8645%" y="613" width="0.0802%" height="15" fill="rgb(235,194,28)" fg:x="335" fg:w="1"/><text x="27.1145%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="26.8645%" y="597" width="0.0802%" height="15" fill="rgb(245,92,18)" fg:x="335" fg:w="1"/><text x="27.1145%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.8645%" y="581" width="0.0802%" height="15" fill="rgb(253,203,53)" fg:x="335" fg:w="1"/><text x="27.1145%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="26.8645%" y="565" width="0.0802%" height="15" fill="rgb(249,185,47)" fg:x="335" fg:w="1"/><text x="27.1145%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.8645%" y="549" width="0.0802%" height="15" fill="rgb(252,194,52)" fg:x="335" fg:w="1"/><text x="27.1145%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="27.0249%" y="613" width="0.0802%" height="15" fill="rgb(210,53,36)" fg:x="337" fg:w="1"/><text x="27.2749%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="27.0249%" y="597" width="0.0802%" height="15" fill="rgb(237,37,25)" fg:x="337" fg:w="1"/><text x="27.2749%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="27.0249%" y="581" width="0.0802%" height="15" fill="rgb(242,116,27)" fg:x="337" fg:w="1"/><text x="27.2749%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="27.0249%" y="565" width="0.0802%" height="15" fill="rgb(213,185,26)" fg:x="337" fg:w="1"/><text x="27.2749%" y="575.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="27.1051%" y="613" width="0.0802%" height="15" fill="rgb(225,204,8)" fg:x="338" fg:w="1"/><text x="27.3551%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="27.1051%" y="597" width="0.0802%" height="15" fill="rgb(254,111,37)" fg:x="338" fg:w="1"/><text x="27.3551%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="27.1051%" y="581" width="0.0802%" height="15" fill="rgb(242,35,9)" fg:x="338" fg:w="1"/><text x="27.3551%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.1051%" y="565" width="0.0802%" height="15" fill="rgb(232,138,49)" fg:x="338" fg:w="1"/><text x="27.3551%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="27.1051%" y="549" width="0.0802%" height="15" fill="rgb(247,56,4)" fg:x="338" fg:w="1"/><text x="27.3551%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="27.1051%" y="533" width="0.0802%" height="15" fill="rgb(226,179,17)" fg:x="338" fg:w="1"/><text x="27.3551%" y="543.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="27.1852%" y="597" width="0.0802%" height="15" fill="rgb(216,163,45)" fg:x="339" fg:w="1"/><text x="27.4352%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="27.1852%" y="581" width="0.0802%" height="15" fill="rgb(211,157,3)" fg:x="339" fg:w="1"/><text x="27.4352%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="27.1852%" y="565" width="0.0802%" height="15" fill="rgb(234,44,20)" fg:x="339" fg:w="1"/><text x="27.4352%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="27.1852%" y="549" width="0.0802%" height="15" fill="rgb(254,138,23)" fg:x="339" fg:w="1"/><text x="27.4352%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="27.1852%" y="533" width="0.0802%" height="15" fill="rgb(206,119,39)" fg:x="339" fg:w="1"/><text x="27.4352%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="27.1852%" y="517" width="0.0802%" height="15" fill="rgb(231,105,52)" fg:x="339" fg:w="1"/><text x="27.4352%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="27.1852%" y="501" width="0.0802%" height="15" fill="rgb(250,20,5)" fg:x="339" fg:w="1"/><text x="27.4352%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.1852%" y="485" width="0.0802%" height="15" fill="rgb(215,198,30)" fg:x="339" fg:w="1"/><text x="27.4352%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.2654%" y="565" width="0.0802%" height="15" fill="rgb(246,142,8)" fg:x="340" fg:w="1"/><text x="27.5154%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.3456%" y="565" width="0.0802%" height="15" fill="rgb(243,26,38)" fg:x="341" fg:w="1"/><text x="27.5956%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.3456%" y="549" width="0.0802%" height="15" fill="rgb(205,133,28)" fg:x="341" fg:w="1"/><text x="27.5956%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="27.3456%" y="533" width="0.0802%" height="15" fill="rgb(212,34,0)" fg:x="341" fg:w="1"/><text x="27.5956%" y="543.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="27.4258%" y="565" width="0.0802%" height="15" fill="rgb(251,226,22)" fg:x="342" fg:w="1"/><text x="27.6758%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="27.4258%" y="549" width="0.0802%" height="15" fill="rgb(252,119,9)" fg:x="342" fg:w="1"/><text x="27.6758%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="27.5060%" y="565" width="0.0802%" height="15" fill="rgb(213,150,50)" fg:x="343" fg:w="1"/><text x="27.7560%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="27.5060%" y="549" width="0.0802%" height="15" fill="rgb(212,24,39)" fg:x="343" fg:w="1"/><text x="27.7560%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.5060%" y="533" width="0.0802%" height="15" fill="rgb(213,46,39)" fg:x="343" fg:w="1"/><text x="27.7560%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.5060%" y="517" width="0.0802%" height="15" fill="rgb(239,106,12)" fg:x="343" fg:w="1"/><text x="27.7560%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.5060%" y="501" width="0.0802%" height="15" fill="rgb(249,229,21)" fg:x="343" fg:w="1"/><text x="27.7560%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_entity (6 samples, 0.48%)</title><rect x="27.1852%" y="613" width="0.4812%" height="15" fill="rgb(212,158,3)" fg:x="339" fg:w="6"/><text x="27.4352%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.40%)</title><rect x="27.2654%" y="597" width="0.4010%" height="15" fill="rgb(253,26,48)" fg:x="340" fg:w="5"/><text x="27.5154%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="27.2654%" y="581" width="0.4010%" height="15" fill="rgb(238,178,20)" fg:x="340" fg:w="5"/><text x="27.5154%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="27.5862%" y="565" width="0.0802%" height="15" fill="rgb(208,86,15)" fg:x="344" fg:w="1"/><text x="27.8362%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="27.5862%" y="549" width="0.0802%" height="15" fill="rgb(239,42,53)" fg:x="344" fg:w="1"/><text x="27.8362%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="27.5862%" y="533" width="0.0802%" height="15" fill="rgb(245,226,8)" fg:x="344" fg:w="1"/><text x="27.8362%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="27.5862%" y="517" width="0.0802%" height="15" fill="rgb(216,176,32)" fg:x="344" fg:w="1"/><text x="27.8362%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (10 samples, 0.80%)</title><rect x="26.9447%" y="629" width="0.8019%" height="15" fill="rgb(231,186,21)" fg:x="336" fg:w="10"/><text x="27.1947%" y="639.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="27.6664%" y="613" width="0.0802%" height="15" fill="rgb(205,95,49)" fg:x="345" fg:w="1"/><text x="27.9164%" y="623.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="27.6664%" y="597" width="0.0802%" height="15" fill="rgb(217,145,8)" fg:x="345" fg:w="1"/><text x="27.9164%" y="607.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="27.6664%" y="581" width="0.0802%" height="15" fill="rgb(239,144,48)" fg:x="345" fg:w="1"/><text x="27.9164%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="27.6664%" y="565" width="0.0802%" height="15" fill="rgb(214,189,23)" fg:x="345" fg:w="1"/><text x="27.9164%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="27.6664%" y="549" width="0.0802%" height="15" fill="rgb(229,157,17)" fg:x="345" fg:w="1"/><text x="27.9164%" y="559.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (13 samples, 1.04%)</title><rect x="26.7843%" y="677" width="1.0425%" height="15" fill="rgb(230,5,48)" fg:x="334" fg:w="13"/><text x="27.0343%" y="687.50"></text></g><g><title>plugins_core::build::QuickThing::make (13 samples, 1.04%)</title><rect x="26.7843%" y="661" width="1.0425%" height="15" fill="rgb(224,156,48)" fg:x="334" fg:w="13"/><text x="27.0343%" y="671.50"></text></g><g><title>plugins_core::build::Build::save (12 samples, 0.96%)</title><rect x="26.8645%" y="645" width="0.9623%" height="15" fill="rgb(223,14,29)" fg:x="335" fg:w="12"/><text x="27.1145%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="27.7466%" y="629" width="0.0802%" height="15" fill="rgb(229,96,36)" fg:x="346" fg:w="1"/><text x="27.9966%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.7466%" y="613" width="0.0802%" height="15" fill="rgb(231,102,53)" fg:x="346" fg:w="1"/><text x="27.9966%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.7466%" y="597" width="0.0802%" height="15" fill="rgb(210,77,38)" fg:x="346" fg:w="1"/><text x="27.9966%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="27.8268%" y="645" width="0.0802%" height="15" fill="rgb(235,131,6)" fg:x="347" fg:w="1"/><text x="28.0768%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="27.8268%" y="629" width="0.0802%" height="15" fill="rgb(252,55,38)" fg:x="347" fg:w="1"/><text x="28.0768%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="27.8268%" y="613" width="0.0802%" height="15" fill="rgb(246,38,14)" fg:x="347" fg:w="1"/><text x="28.0768%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="27.8268%" y="597" width="0.0802%" height="15" fill="rgb(242,27,5)" fg:x="347" fg:w="1"/><text x="28.0768%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="27.8268%" y="581" width="0.0802%" height="15" fill="rgb(228,65,35)" fg:x="347" fg:w="1"/><text x="28.0768%" y="591.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="27.8268%" y="661" width="0.1604%" height="15" fill="rgb(245,93,11)" fg:x="347" fg:w="2"/><text x="28.0768%" y="671.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="27.9070%" y="645" width="0.0802%" height="15" fill="rgb(213,1,31)" fg:x="348" fg:w="1"/><text x="28.1570%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.9070%" y="629" width="0.0802%" height="15" fill="rgb(237,205,14)" fg:x="348" fg:w="1"/><text x="28.1570%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="27.9070%" y="613" width="0.0802%" height="15" fill="rgb(232,118,45)" fg:x="348" fg:w="1"/><text x="28.1570%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.9070%" y="597" width="0.0802%" height="15" fill="rgb(218,5,6)" fg:x="348" fg:w="1"/><text x="28.1570%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.9872%" y="581" width="0.0802%" height="15" fill="rgb(251,87,51)" fg:x="349" fg:w="1"/><text x="28.2372%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="27.9872%" y="661" width="0.1604%" height="15" fill="rgb(207,225,20)" fg:x="349" fg:w="2"/><text x="28.2372%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="27.9872%" y="645" width="0.1604%" height="15" fill="rgb(222,78,54)" fg:x="349" fg:w="2"/><text x="28.2372%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="27.9872%" y="629" width="0.1604%" height="15" fill="rgb(232,85,16)" fg:x="349" fg:w="2"/><text x="28.2372%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="27.9872%" y="613" width="0.1604%" height="15" fill="rgb(244,25,33)" fg:x="349" fg:w="2"/><text x="28.2372%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="27.9872%" y="597" width="0.1604%" height="15" fill="rgb(233,24,36)" fg:x="349" fg:w="2"/><text x="28.2372%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="28.0674%" y="581" width="0.0802%" height="15" fill="rgb(253,49,54)" fg:x="350" fg:w="1"/><text x="28.3174%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.0674%" y="565" width="0.0802%" height="15" fill="rgb(245,12,22)" fg:x="350" fg:w="1"/><text x="28.3174%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="28.1476%" y="629" width="0.0802%" height="15" fill="rgb(253,141,28)" fg:x="351" fg:w="1"/><text x="28.3976%" y="639.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="28.1476%" y="613" width="0.0802%" height="15" fill="rgb(225,207,27)" fg:x="351" fg:w="1"/><text x="28.3976%" y="623.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="28.1476%" y="597" width="0.0802%" height="15" fill="rgb(220,84,2)" fg:x="351" fg:w="1"/><text x="28.3976%" y="607.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="28.1476%" y="581" width="0.0802%" height="15" fill="rgb(224,37,37)" fg:x="351" fg:w="1"/><text x="28.3976%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="28.1476%" y="565" width="0.0802%" height="15" fill="rgb(220,143,18)" fg:x="351" fg:w="1"/><text x="28.3976%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="28.1476%" y="549" width="0.0802%" height="15" fill="rgb(210,88,33)" fg:x="351" fg:w="1"/><text x="28.3976%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="28.1476%" y="533" width="0.0802%" height="15" fill="rgb(219,87,51)" fg:x="351" fg:w="1"/><text x="28.3976%" y="543.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="28.1476%" y="517" width="0.0802%" height="15" fill="rgb(211,7,35)" fg:x="351" fg:w="1"/><text x="28.3976%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="28.1476%" y="501" width="0.0802%" height="15" fill="rgb(232,77,2)" fg:x="351" fg:w="1"/><text x="28.3976%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="28.1476%" y="485" width="0.0802%" height="15" fill="rgb(249,94,25)" fg:x="351" fg:w="1"/><text x="28.3976%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="28.1476%" y="469" width="0.0802%" height="15" fill="rgb(215,112,2)" fg:x="351" fg:w="1"/><text x="28.3976%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="28.1476%" y="453" width="0.0802%" height="15" fill="rgb(226,115,48)" fg:x="351" fg:w="1"/><text x="28.3976%" y="463.50"></text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="28.2277%" y="629" width="0.0802%" height="15" fill="rgb(249,196,10)" fg:x="352" fg:w="1"/><text x="28.4777%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="28.3079%" y="597" width="0.0802%" height="15" fill="rgb(237,109,14)" fg:x="353" fg:w="1"/><text x="28.5579%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="28.3079%" y="581" width="0.0802%" height="15" fill="rgb(217,103,53)" fg:x="353" fg:w="1"/><text x="28.5579%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_map (1 samples, 0.08%)</title><rect x="28.3079%" y="565" width="0.0802%" height="15" fill="rgb(244,137,9)" fg:x="353" fg:w="1"/><text x="28.5579%" y="575.50"></text></g><g><title>plugins_core::build::Build::new_world (5 samples, 0.40%)</title><rect x="28.1476%" y="661" width="0.4010%" height="15" fill="rgb(227,201,3)" fg:x="351" fg:w="5"/><text x="28.3976%" y="671.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (5 samples, 0.40%)</title><rect x="28.1476%" y="645" width="0.4010%" height="15" fill="rgb(243,94,6)" fg:x="351" fg:w="5"/><text x="28.3976%" y="655.50"></text></g><g><title>serde_json::value::to_value (3 samples, 0.24%)</title><rect x="28.3079%" y="629" width="0.2406%" height="15" fill="rgb(235,118,5)" fg:x="353" fg:w="3"/><text x="28.5579%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (3 samples, 0.24%)</title><rect x="28.3079%" y="613" width="0.2406%" height="15" fill="rgb(247,10,30)" fg:x="353" fg:w="3"/><text x="28.5579%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_struct (2 samples, 0.16%)</title><rect x="28.3881%" y="597" width="0.1604%" height="15" fill="rgb(205,26,28)" fg:x="354" fg:w="2"/><text x="28.6381%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="28.5485%" y="613" width="0.2406%" height="15" fill="rgb(206,99,35)" fg:x="356" fg:w="3"/><text x="28.7985%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="28.5485%" y="597" width="0.2406%" height="15" fill="rgb(238,130,40)" fg:x="356" fg:w="3"/><text x="28.7985%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="28.5485%" y="581" width="0.2406%" height="15" fill="rgb(224,126,31)" fg:x="356" fg:w="3"/><text x="28.7985%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="28.6287%" y="565" width="0.1604%" height="15" fill="rgb(254,105,17)" fg:x="357" fg:w="2"/><text x="28.8787%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="28.6287%" y="549" width="0.1604%" height="15" fill="rgb(216,87,36)" fg:x="357" fg:w="2"/><text x="28.8787%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="28.6287%" y="533" width="0.1604%" height="15" fill="rgb(240,21,12)" fg:x="357" fg:w="2"/><text x="28.8787%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="28.6287%" y="517" width="0.1604%" height="15" fill="rgb(245,192,34)" fg:x="357" fg:w="2"/><text x="28.8787%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="28.6287%" y="501" width="0.1604%" height="15" fill="rgb(226,100,49)" fg:x="357" fg:w="2"/><text x="28.8787%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="28.6287%" y="485" width="0.1604%" height="15" fill="rgb(245,188,27)" fg:x="357" fg:w="2"/><text x="28.8787%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="28.6287%" y="469" width="0.1604%" height="15" fill="rgb(212,170,8)" fg:x="357" fg:w="2"/><text x="28.8787%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="28.6287%" y="453" width="0.1604%" height="15" fill="rgb(217,113,29)" fg:x="357" fg:w="2"/><text x="28.8787%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="28.6287%" y="437" width="0.1604%" height="15" fill="rgb(237,30,3)" fg:x="357" fg:w="2"/><text x="28.8787%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="28.6287%" y="421" width="0.1604%" height="15" fill="rgb(227,19,28)" fg:x="357" fg:w="2"/><text x="28.8787%" y="431.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="28.6287%" y="405" width="0.1604%" height="15" fill="rgb(239,172,45)" fg:x="357" fg:w="2"/><text x="28.8787%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.7089%" y="389" width="0.0802%" height="15" fill="rgb(254,55,39)" fg:x="358" fg:w="1"/><text x="28.9589%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="28.7891%" y="613" width="0.0802%" height="15" fill="rgb(249,208,12)" fg:x="359" fg:w="1"/><text x="29.0391%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (5 samples, 0.40%)</title><rect x="28.5485%" y="645" width="0.4010%" height="15" fill="rgb(240,52,13)" fg:x="356" fg:w="5"/><text x="28.7985%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (5 samples, 0.40%)</title><rect x="28.5485%" y="629" width="0.4010%" height="15" fill="rgb(252,149,13)" fg:x="356" fg:w="5"/><text x="28.7985%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="28.8693%" y="613" width="0.0802%" height="15" fill="rgb(232,81,48)" fg:x="360" fg:w="1"/><text x="29.1193%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="28.8693%" y="597" width="0.0802%" height="15" fill="rgb(222,144,2)" fg:x="360" fg:w="1"/><text x="29.1193%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="28.8693%" y="581" width="0.0802%" height="15" fill="rgb(216,81,32)" fg:x="360" fg:w="1"/><text x="29.1193%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="28.8693%" y="565" width="0.0802%" height="15" fill="rgb(244,78,51)" fg:x="360" fg:w="1"/><text x="29.1193%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.8693%" y="549" width="0.0802%" height="15" fill="rgb(217,66,21)" fg:x="360" fg:w="1"/><text x="29.1193%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.0297%" y="629" width="0.0802%" height="15" fill="rgb(247,101,42)" fg:x="362" fg:w="1"/><text x="29.2797%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.0297%" y="613" width="0.0802%" height="15" fill="rgb(227,81,39)" fg:x="362" fg:w="1"/><text x="29.2797%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="29.0297%" y="597" width="0.0802%" height="15" fill="rgb(220,223,44)" fg:x="362" fg:w="1"/><text x="29.2797%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="29.0297%" y="581" width="0.0802%" height="15" fill="rgb(205,218,2)" fg:x="362" fg:w="1"/><text x="29.2797%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="29.0297%" y="565" width="0.0802%" height="15" fill="rgb(212,207,28)" fg:x="362" fg:w="1"/><text x="29.2797%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="29.0297%" y="549" width="0.0802%" height="15" fill="rgb(224,12,41)" fg:x="362" fg:w="1"/><text x="29.2797%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="29.0297%" y="533" width="0.0802%" height="15" fill="rgb(216,118,12)" fg:x="362" fg:w="1"/><text x="29.2797%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="29.0297%" y="517" width="0.0802%" height="15" fill="rgb(252,97,46)" fg:x="362" fg:w="1"/><text x="29.2797%" y="527.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.08%)</title><rect x="29.0297%" y="501" width="0.0802%" height="15" fill="rgb(244,206,19)" fg:x="362" fg:w="1"/><text x="29.2797%" y="511.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.08%)</title><rect x="29.0297%" y="485" width="0.0802%" height="15" fill="rgb(231,84,31)" fg:x="362" fg:w="1"/><text x="29.2797%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.1099%" y="581" width="0.0802%" height="15" fill="rgb(244,133,0)" fg:x="363" fg:w="1"/><text x="29.3599%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="29.1099%" y="613" width="0.1604%" height="15" fill="rgb(223,15,50)" fg:x="363" fg:w="2"/><text x="29.3599%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="29.1099%" y="597" width="0.1604%" height="15" fill="rgb(250,118,49)" fg:x="363" fg:w="2"/><text x="29.3599%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.1901%" y="581" width="0.0802%" height="15" fill="rgb(248,25,38)" fg:x="364" fg:w="1"/><text x="29.4401%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="29.1099%" y="629" width="0.3208%" height="15" fill="rgb(215,70,14)" fg:x="363" fg:w="4"/><text x="29.3599%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="29.2702%" y="613" width="0.1604%" height="15" fill="rgb(215,28,15)" fg:x="365" fg:w="2"/><text x="29.5202%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="29.2702%" y="597" width="0.1604%" height="15" fill="rgb(243,6,28)" fg:x="365" fg:w="2"/><text x="29.5202%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="29.3504%" y="581" width="0.0802%" height="15" fill="rgb(222,130,1)" fg:x="366" fg:w="1"/><text x="29.6004%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="29.3504%" y="565" width="0.0802%" height="15" fill="rgb(236,166,44)" fg:x="366" fg:w="1"/><text x="29.6004%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="29.3504%" y="549" width="0.0802%" height="15" fill="rgb(221,108,14)" fg:x="366" fg:w="1"/><text x="29.6004%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="29.4306%" y="581" width="0.0802%" height="15" fill="rgb(252,3,45)" fg:x="367" fg:w="1"/><text x="29.6806%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.4306%" y="565" width="0.0802%" height="15" fill="rgb(237,68,30)" fg:x="367" fg:w="1"/><text x="29.6806%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.4306%" y="549" width="0.0802%" height="15" fill="rgb(211,79,22)" fg:x="367" fg:w="1"/><text x="29.6806%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.4306%" y="533" width="0.0802%" height="15" fill="rgb(252,185,21)" fg:x="367" fg:w="1"/><text x="29.6806%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.4306%" y="517" width="0.0802%" height="15" fill="rgb(225,189,26)" fg:x="367" fg:w="1"/><text x="29.6806%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.4306%" y="501" width="0.0802%" height="15" fill="rgb(241,30,40)" fg:x="367" fg:w="1"/><text x="29.6806%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="29.4306%" y="485" width="0.0802%" height="15" fill="rgb(235,215,44)" fg:x="367" fg:w="1"/><text x="29.6806%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="29.4306%" y="469" width="0.0802%" height="15" fill="rgb(205,8,29)" fg:x="367" fg:w="1"/><text x="29.6806%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="29.4306%" y="453" width="0.0802%" height="15" fill="rgb(241,137,42)" fg:x="367" fg:w="1"/><text x="29.6806%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="29.4306%" y="437" width="0.0802%" height="15" fill="rgb(237,155,2)" fg:x="367" fg:w="1"/><text x="29.6806%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="29.4306%" y="421" width="0.0802%" height="15" fill="rgb(245,29,42)" fg:x="367" fg:w="1"/><text x="29.6806%" y="431.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="29.5108%" y="581" width="0.0802%" height="15" fill="rgb(234,101,35)" fg:x="368" fg:w="1"/><text x="29.7608%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.5108%" y="565" width="0.0802%" height="15" fill="rgb(228,64,37)" fg:x="368" fg:w="1"/><text x="29.7608%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="29.5108%" y="549" width="0.0802%" height="15" fill="rgb(217,214,36)" fg:x="368" fg:w="1"/><text x="29.7608%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="29.5108%" y="533" width="0.0802%" height="15" fill="rgb(243,70,3)" fg:x="368" fg:w="1"/><text x="29.7608%" y="543.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="29.4306%" y="613" width="0.2406%" height="15" fill="rgb(253,158,52)" fg:x="367" fg:w="3"/><text x="29.6806%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.24%)</title><rect x="29.4306%" y="597" width="0.2406%" height="15" fill="rgb(234,111,54)" fg:x="367" fg:w="3"/><text x="29.6806%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="29.5910%" y="581" width="0.0802%" height="15" fill="rgb(217,70,32)" fg:x="369" fg:w="1"/><text x="29.8410%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="29.5910%" y="565" width="0.0802%" height="15" fill="rgb(234,18,33)" fg:x="369" fg:w="1"/><text x="29.8410%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.5910%" y="549" width="0.0802%" height="15" fill="rgb(234,12,49)" fg:x="369" fg:w="1"/><text x="29.8410%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.6712%" y="549" width="0.0802%" height="15" fill="rgb(236,10,21)" fg:x="370" fg:w="1"/><text x="29.9212%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.6712%" y="533" width="0.0802%" height="15" fill="rgb(248,182,45)" fg:x="370" fg:w="1"/><text x="29.9212%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.6712%" y="517" width="0.0802%" height="15" fill="rgb(217,95,36)" fg:x="370" fg:w="1"/><text x="29.9212%" y="527.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="29.6712%" y="581" width="0.1604%" height="15" fill="rgb(212,110,31)" fg:x="370" fg:w="2"/><text x="29.9212%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="29.6712%" y="565" width="0.1604%" height="15" fill="rgb(206,32,53)" fg:x="370" fg:w="2"/><text x="29.9212%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="29.7514%" y="549" width="0.0802%" height="15" fill="rgb(246,141,37)" fg:x="371" fg:w="1"/><text x="30.0014%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="29.7514%" y="533" width="0.0802%" height="15" fill="rgb(219,16,7)" fg:x="371" fg:w="1"/><text x="30.0014%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="29.8316%" y="581" width="0.0802%" height="15" fill="rgb(230,205,45)" fg:x="372" fg:w="1"/><text x="30.0816%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="29.8316%" y="565" width="0.0802%" height="15" fill="rgb(231,43,49)" fg:x="372" fg:w="1"/><text x="30.0816%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.8316%" y="549" width="0.0802%" height="15" fill="rgb(212,106,34)" fg:x="372" fg:w="1"/><text x="30.0816%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.8316%" y="533" width="0.0802%" height="15" fill="rgb(206,83,17)" fg:x="372" fg:w="1"/><text x="30.0816%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.8316%" y="517" width="0.0802%" height="15" fill="rgb(244,154,49)" fg:x="372" fg:w="1"/><text x="30.0816%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (13 samples, 1.04%)</title><rect x="28.9495%" y="645" width="1.0425%" height="15" fill="rgb(244,149,49)" fg:x="361" fg:w="13"/><text x="29.1995%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (7 samples, 0.56%)</title><rect x="29.4306%" y="629" width="0.5613%" height="15" fill="rgb(227,134,18)" fg:x="367" fg:w="7"/><text x="29.6806%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="29.6712%" y="613" width="0.3208%" height="15" fill="rgb(237,116,36)" fg:x="370" fg:w="4"/><text x="29.9212%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="29.6712%" y="597" width="0.3208%" height="15" fill="rgb(205,129,40)" fg:x="370" fg:w="4"/><text x="29.9212%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="29.9118%" y="581" width="0.0802%" height="15" fill="rgb(236,178,4)" fg:x="373" fg:w="1"/><text x="30.1618%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="29.9118%" y="565" width="0.0802%" height="15" fill="rgb(251,76,53)" fg:x="373" fg:w="1"/><text x="30.1618%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="29.9118%" y="549" width="0.0802%" height="15" fill="rgb(242,92,40)" fg:x="373" fg:w="1"/><text x="30.1618%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="29.9118%" y="533" width="0.0802%" height="15" fill="rgb(209,45,30)" fg:x="373" fg:w="1"/><text x="30.1618%" y="543.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (252 samples, 20.21%)</title><rect x="9.8637%" y="693" width="20.2085%" height="15" fill="rgb(218,157,36)" fg:x="123" fg:w="252"/><text x="10.1137%" y="703.50">&lt;tests::HoldingKeyInVessel as te..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (28 samples, 2.25%)</title><rect x="27.8268%" y="677" width="2.2454%" height="15" fill="rgb(222,186,16)" fg:x="347" fg:w="28"/><text x="28.0768%" y="687.50">p..</text></g><g><title>plugins_core::build::Build::save (19 samples, 1.52%)</title><rect x="28.5485%" y="661" width="1.5237%" height="15" fill="rgb(254,72,35)" fg:x="356" fg:w="19"/><text x="28.7985%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.9920%" y="645" width="0.0802%" height="15" fill="rgb(224,25,35)" fg:x="374" fg:w="1"/><text x="30.2420%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.9920%" y="629" width="0.0802%" height="15" fill="rgb(206,135,52)" fg:x="374" fg:w="1"/><text x="30.2420%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.9920%" y="613" width="0.0802%" height="15" fill="rgb(229,174,47)" fg:x="374" fg:w="1"/><text x="30.2420%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (3 samples, 0.24%)</title><rect x="30.0722%" y="693" width="0.2406%" height="15" fill="rgb(242,184,21)" fg:x="375" fg:w="3"/><text x="30.3222%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="30.0722%" y="677" width="0.2406%" height="15" fill="rgb(213,22,45)" fg:x="375" fg:w="3"/><text x="30.3222%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="30.1524%" y="661" width="0.1604%" height="15" fill="rgb(237,81,54)" fg:x="376" fg:w="2"/><text x="30.4024%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="30.1524%" y="645" width="0.1604%" height="15" fill="rgb(248,177,18)" fg:x="376" fg:w="2"/><text x="30.4024%" y="655.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="30.1524%" y="629" width="0.1604%" height="15" fill="rgb(254,31,16)" fg:x="376" fg:w="2"/><text x="30.4024%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="30.3128%" y="693" width="0.0802%" height="15" fill="rgb(235,20,31)" fg:x="378" fg:w="1"/><text x="30.5628%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="30.3128%" y="677" width="0.0802%" height="15" fill="rgb(240,56,43)" fg:x="378" fg:w="1"/><text x="30.5628%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="30.3128%" y="661" width="0.0802%" height="15" fill="rgb(237,197,51)" fg:x="378" fg:w="1"/><text x="30.5628%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="30.3929%" y="661" width="0.0802%" height="15" fill="rgb(241,162,44)" fg:x="379" fg:w="1"/><text x="30.6429%" y="671.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="30.3929%" y="677" width="0.1604%" height="15" fill="rgb(224,23,20)" fg:x="379" fg:w="2"/><text x="30.6429%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.4731%" y="661" width="0.0802%" height="15" fill="rgb(250,109,34)" fg:x="380" fg:w="1"/><text x="30.7231%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="30.4731%" y="645" width="0.0802%" height="15" fill="rgb(214,175,50)" fg:x="380" fg:w="1"/><text x="30.7231%" y="655.50"></text></g><g><title>engine::session::Session::save_logs (1 samples, 0.08%)</title><rect x="30.5533%" y="677" width="0.0802%" height="15" fill="rgb(213,182,5)" fg:x="381" fg:w="1"/><text x="30.8033%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="30.6335%" y="645" width="0.0802%" height="15" fill="rgb(209,199,19)" fg:x="382" fg:w="1"/><text x="30.8835%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.6335%" y="629" width="0.0802%" height="15" fill="rgb(236,224,42)" fg:x="382" fg:w="1"/><text x="30.8835%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="30.7939%" y="597" width="0.0802%" height="15" fill="rgb(246,226,29)" fg:x="384" fg:w="1"/><text x="31.0439%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="30.7939%" y="581" width="0.0802%" height="15" fill="rgb(227,223,11)" fg:x="384" fg:w="1"/><text x="31.0439%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="30.7939%" y="565" width="0.0802%" height="15" fill="rgb(219,7,51)" fg:x="384" fg:w="1"/><text x="31.0439%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="30.7939%" y="549" width="0.0802%" height="15" fill="rgb(245,167,10)" fg:x="384" fg:w="1"/><text x="31.0439%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="30.7939%" y="533" width="0.0802%" height="15" fill="rgb(237,224,16)" fg:x="384" fg:w="1"/><text x="31.0439%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="30.7939%" y="517" width="0.0802%" height="15" fill="rgb(226,132,13)" fg:x="384" fg:w="1"/><text x="31.0439%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.7939%" y="501" width="0.0802%" height="15" fill="rgb(214,140,3)" fg:x="384" fg:w="1"/><text x="31.0439%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.7939%" y="485" width="0.0802%" height="15" fill="rgb(221,177,4)" fg:x="384" fg:w="1"/><text x="31.0439%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="30.8741%" y="581" width="0.0802%" height="15" fill="rgb(238,139,3)" fg:x="385" fg:w="1"/><text x="31.1241%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="30.9543%" y="565" width="0.3208%" height="15" fill="rgb(216,17,39)" fg:x="386" fg:w="4"/><text x="31.2043%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="31.1949%" y="549" width="0.0802%" height="15" fill="rgb(238,120,9)" fg:x="389" fg:w="1"/><text x="31.4449%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="31.1949%" y="533" width="0.0802%" height="15" fill="rgb(244,92,53)" fg:x="389" fg:w="1"/><text x="31.4449%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (6 samples, 0.48%)</title><rect x="30.9543%" y="581" width="0.4812%" height="15" fill="rgb(224,148,33)" fg:x="386" fg:w="6"/><text x="31.2043%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="31.2751%" y="565" width="0.1604%" height="15" fill="rgb(243,6,36)" fg:x="390" fg:w="2"/><text x="31.5251%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="31.2751%" y="549" width="0.1604%" height="15" fill="rgb(230,102,11)" fg:x="390" fg:w="2"/><text x="31.5251%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="31.4354%" y="565" width="0.0802%" height="15" fill="rgb(234,148,36)" fg:x="392" fg:w="1"/><text x="31.6854%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="31.5156%" y="549" width="0.1604%" height="15" fill="rgb(251,153,25)" fg:x="393" fg:w="2"/><text x="31.7656%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="31.6760%" y="517" width="0.0802%" height="15" fill="rgb(215,129,8)" fg:x="395" fg:w="1"/><text x="31.9260%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="31.6760%" y="549" width="0.1604%" height="15" fill="rgb(224,128,35)" fg:x="395" fg:w="2"/><text x="31.9260%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="31.6760%" y="533" width="0.1604%" height="15" fill="rgb(237,56,52)" fg:x="395" fg:w="2"/><text x="31.9260%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="31.7562%" y="517" width="0.0802%" height="15" fill="rgb(234,213,19)" fg:x="396" fg:w="1"/><text x="32.0062%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="31.7562%" y="501" width="0.0802%" height="15" fill="rgb(252,82,23)" fg:x="396" fg:w="1"/><text x="32.0062%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="31.8364%" y="549" width="0.2406%" height="15" fill="rgb(254,201,21)" fg:x="397" fg:w="3"/><text x="32.0864%" y="559.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="31.8364%" y="533" width="0.2406%" height="15" fill="rgb(250,186,11)" fg:x="397" fg:w="3"/><text x="32.0864%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="31.9166%" y="517" width="0.1604%" height="15" fill="rgb(211,174,5)" fg:x="398" fg:w="2"/><text x="32.1666%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="31.9968%" y="501" width="0.0802%" height="15" fill="rgb(214,121,10)" fg:x="399" fg:w="1"/><text x="32.2468%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (7 samples, 0.56%)</title><rect x="32.2374%" y="533" width="0.5613%" height="15" fill="rgb(241,66,2)" fg:x="402" fg:w="7"/><text x="32.4874%" y="543.50"></text></g><g><title>std::io::Write::write_all (7 samples, 0.56%)</title><rect x="32.2374%" y="517" width="0.5613%" height="15" fill="rgb(220,167,19)" fg:x="402" fg:w="7"/><text x="32.4874%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.32%)</title><rect x="32.4779%" y="501" width="0.3208%" height="15" fill="rgb(231,54,50)" fg:x="405" fg:w="4"/><text x="32.7279%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.32%)</title><rect x="32.4779%" y="485" width="0.3208%" height="15" fill="rgb(239,217,53)" fg:x="405" fg:w="4"/><text x="32.7279%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="32.5581%" y="469" width="0.2406%" height="15" fill="rgb(248,8,0)" fg:x="406" fg:w="3"/><text x="32.8081%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="32.5581%" y="453" width="0.2406%" height="15" fill="rgb(229,118,37)" fg:x="406" fg:w="3"/><text x="32.8081%" y="463.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="32.5581%" y="437" width="0.2406%" height="15" fill="rgb(253,223,43)" fg:x="406" fg:w="3"/><text x="32.8081%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="32.7987%" y="517" width="0.2406%" height="15" fill="rgb(211,77,36)" fg:x="409" fg:w="3"/><text x="33.0487%" y="527.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="32.7987%" y="501" width="0.2406%" height="15" fill="rgb(219,3,53)" fg:x="409" fg:w="3"/><text x="33.0487%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="32.8789%" y="485" width="0.1604%" height="15" fill="rgb(244,45,42)" fg:x="410" fg:w="2"/><text x="33.1289%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="32.9591%" y="469" width="0.0802%" height="15" fill="rgb(225,95,27)" fg:x="411" fg:w="1"/><text x="33.2091%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="32.9591%" y="453" width="0.0802%" height="15" fill="rgb(207,74,8)" fg:x="411" fg:w="1"/><text x="33.2091%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.9591%" y="437" width="0.0802%" height="15" fill="rgb(243,63,36)" fg:x="411" fg:w="1"/><text x="33.2091%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="32.9591%" y="421" width="0.0802%" height="15" fill="rgb(211,180,12)" fg:x="411" fg:w="1"/><text x="33.2091%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="32.7987%" y="533" width="0.3208%" height="15" fill="rgb(254,166,49)" fg:x="409" fg:w="4"/><text x="33.0487%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="33.0393%" y="517" width="0.0802%" height="15" fill="rgb(205,19,0)" fg:x="412" fg:w="1"/><text x="33.2893%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (14 samples, 1.12%)</title><rect x="32.0770%" y="549" width="1.1227%" height="15" fill="rgb(224,172,32)" fg:x="400" fg:w="14"/><text x="32.3270%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="33.1195%" y="533" width="0.0802%" height="15" fill="rgb(254,136,30)" fg:x="413" fg:w="1"/><text x="33.3695%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (23 samples, 1.84%)</title><rect x="31.5156%" y="565" width="1.8444%" height="15" fill="rgb(246,19,35)" fg:x="393" fg:w="23"/><text x="31.7656%" y="575.50">s..</text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="33.1997%" y="549" width="0.1604%" height="15" fill="rgb(219,24,36)" fg:x="414" fg:w="2"/><text x="33.4497%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="33.1997%" y="533" width="0.1604%" height="15" fill="rgb(251,55,1)" fg:x="414" fg:w="2"/><text x="33.4497%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="33.2799%" y="517" width="0.0802%" height="15" fill="rgb(218,117,39)" fg:x="415" fg:w="1"/><text x="33.5299%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (27 samples, 2.17%)</title><rect x="31.4354%" y="581" width="2.1652%" height="15" fill="rgb(248,169,11)" fg:x="392" fg:w="27"/><text x="31.6854%" y="591.50">s..</text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="33.3601%" y="565" width="0.2406%" height="15" fill="rgb(244,40,44)" fg:x="416" fg:w="3"/><text x="33.6101%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="33.4403%" y="549" width="0.1604%" height="15" fill="rgb(234,62,37)" fg:x="417" fg:w="2"/><text x="33.6903%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="33.5204%" y="533" width="0.0802%" height="15" fill="rgb(207,117,42)" fg:x="418" fg:w="1"/><text x="33.7704%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (35 samples, 2.81%)</title><rect x="30.8741%" y="597" width="2.8067%" height="15" fill="rgb(213,43,2)" fg:x="385" fg:w="35"/><text x="31.1241%" y="607.50">&lt;s..</text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="33.6006%" y="581" width="0.0802%" height="15" fill="rgb(244,202,51)" fg:x="419" fg:w="1"/><text x="33.8506%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="33.6006%" y="565" width="0.0802%" height="15" fill="rgb(253,174,46)" fg:x="419" fg:w="1"/><text x="33.8506%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="33.6006%" y="549" width="0.0802%" height="15" fill="rgb(251,23,1)" fg:x="419" fg:w="1"/><text x="33.8506%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.7610%" y="565" width="0.0802%" height="15" fill="rgb(253,26,1)" fg:x="421" fg:w="1"/><text x="34.0110%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="33.8412%" y="565" width="0.1604%" height="15" fill="rgb(216,89,31)" fg:x="422" fg:w="2"/><text x="34.0912%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.0016%" y="549" width="0.0802%" height="15" fill="rgb(209,109,5)" fg:x="424" fg:w="1"/><text x="34.2516%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="34.0818%" y="549" width="0.0802%" height="15" fill="rgb(229,63,13)" fg:x="425" fg:w="1"/><text x="34.3318%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="34.2422%" y="533" width="0.1604%" height="15" fill="rgb(238,137,54)" fg:x="427" fg:w="2"/><text x="34.4922%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.3224%" y="517" width="0.0802%" height="15" fill="rgb(228,1,9)" fg:x="428" fg:w="1"/><text x="34.5724%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (10 samples, 0.80%)</title><rect x="33.6808%" y="597" width="0.8019%" height="15" fill="rgb(249,120,48)" fg:x="420" fg:w="10"/><text x="33.9308%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (10 samples, 0.80%)</title><rect x="33.6808%" y="581" width="0.8019%" height="15" fill="rgb(209,72,36)" fg:x="420" fg:w="10"/><text x="33.9308%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="34.0016%" y="565" width="0.4812%" height="15" fill="rgb(247,98,49)" fg:x="424" fg:w="6"/><text x="34.2516%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="34.1620%" y="549" width="0.3208%" height="15" fill="rgb(233,75,36)" fg:x="426" fg:w="4"/><text x="34.4120%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="34.4026%" y="533" width="0.0802%" height="15" fill="rgb(225,14,24)" fg:x="429" fg:w="1"/><text x="34.6526%" y="543.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="34.4828%" y="549" width="0.1604%" height="15" fill="rgb(237,193,20)" fg:x="430" fg:w="2"/><text x="34.7328%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.6431%" y="533" width="0.0802%" height="15" fill="rgb(239,122,19)" fg:x="432" fg:w="1"/><text x="34.8931%" y="543.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="34.8837%" y="501" width="0.1604%" height="15" fill="rgb(231,220,10)" fg:x="435" fg:w="2"/><text x="35.1337%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.80%)</title><rect x="34.4828%" y="565" width="0.8019%" height="15" fill="rgb(220,66,15)" fg:x="430" fg:w="10"/><text x="34.7328%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="34.6431%" y="549" width="0.6415%" height="15" fill="rgb(215,171,52)" fg:x="432" fg:w="8"/><text x="34.8931%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="34.7233%" y="533" width="0.5613%" height="15" fill="rgb(241,169,50)" fg:x="433" fg:w="7"/><text x="34.9733%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="34.8035%" y="517" width="0.4812%" height="15" fill="rgb(236,189,0)" fg:x="434" fg:w="6"/><text x="35.0535%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (3 samples, 0.24%)</title><rect x="35.0441%" y="501" width="0.2406%" height="15" fill="rgb(217,147,20)" fg:x="437" fg:w="3"/><text x="35.2941%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="35.0441%" y="485" width="0.2406%" height="15" fill="rgb(206,188,39)" fg:x="437" fg:w="3"/><text x="35.2941%" y="495.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="35.1243%" y="469" width="0.1604%" height="15" fill="rgb(227,118,25)" fg:x="438" fg:w="2"/><text x="35.3743%" y="479.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="35.2847%" y="565" width="0.0802%" height="15" fill="rgb(248,171,40)" fg:x="440" fg:w="1"/><text x="35.5347%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="35.2847%" y="549" width="0.0802%" height="15" fill="rgb(251,90,54)" fg:x="440" fg:w="1"/><text x="35.5347%" y="559.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="35.2847%" y="533" width="0.0802%" height="15" fill="rgb(234,11,46)" fg:x="440" fg:w="1"/><text x="35.5347%" y="543.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="35.2847%" y="517" width="0.0802%" height="15" fill="rgb(229,134,13)" fg:x="440" fg:w="1"/><text x="35.5347%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="35.2847%" y="501" width="0.0802%" height="15" fill="rgb(223,129,3)" fg:x="440" fg:w="1"/><text x="35.5347%" y="511.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (15 samples, 1.20%)</title><rect x="34.4828%" y="581" width="1.2029%" height="15" fill="rgb(221,124,13)" fg:x="430" fg:w="15"/><text x="34.7328%" y="591.50"></text></g><g><title>treediff::diff::diff (4 samples, 0.32%)</title><rect x="35.3649%" y="565" width="0.3208%" height="15" fill="rgb(234,3,18)" fg:x="441" fg:w="4"/><text x="35.6149%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="35.4451%" y="549" width="0.2406%" height="15" fill="rgb(249,199,20)" fg:x="442" fg:w="3"/><text x="35.6951%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="35.4451%" y="533" width="0.2406%" height="15" fill="rgb(224,134,6)" fg:x="442" fg:w="3"/><text x="35.6951%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="35.6055%" y="517" width="0.0802%" height="15" fill="rgb(254,83,26)" fg:x="444" fg:w="1"/><text x="35.8555%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.9262%" y="549" width="0.0802%" height="15" fill="rgb(217,88,9)" fg:x="448" fg:w="1"/><text x="36.1762%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4 samples, 0.32%)</title><rect x="36.0064%" y="549" width="0.3208%" height="15" fill="rgb(225,73,2)" fg:x="449" fg:w="4"/><text x="36.2564%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.2470%" y="533" width="0.0802%" height="15" fill="rgb(226,44,39)" fg:x="452" fg:w="1"/><text x="36.4970%" y="543.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="36.3272%" y="549" width="0.1604%" height="15" fill="rgb(228,53,17)" fg:x="453" fg:w="2"/><text x="36.5772%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="36.4074%" y="533" width="0.0802%" height="15" fill="rgb(212,27,27)" fg:x="454" fg:w="1"/><text x="36.6574%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="36.4074%" y="517" width="0.0802%" height="15" fill="rgb(241,50,6)" fg:x="454" fg:w="1"/><text x="36.6574%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.5678%" y="517" width="0.0802%" height="15" fill="rgb(225,28,51)" fg:x="456" fg:w="1"/><text x="36.8178%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (3 samples, 0.24%)</title><rect x="36.4876%" y="549" width="0.2406%" height="15" fill="rgb(215,33,16)" fg:x="455" fg:w="3"/><text x="36.7376%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="36.5678%" y="533" width="0.1604%" height="15" fill="rgb(243,40,39)" fg:x="456" fg:w="2"/><text x="36.8178%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="36.6480%" y="517" width="0.0802%" height="15" fill="rgb(225,11,42)" fg:x="457" fg:w="1"/><text x="36.8980%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="36.8083%" y="517" width="0.0802%" height="15" fill="rgb(241,220,38)" fg:x="459" fg:w="1"/><text x="37.0583%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="36.8885%" y="501" width="0.2406%" height="15" fill="rgb(244,52,35)" fg:x="460" fg:w="3"/><text x="37.1385%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.0489%" y="485" width="0.0802%" height="15" fill="rgb(246,42,46)" fg:x="462" fg:w="1"/><text x="37.2989%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="37.2093%" y="485" width="0.0802%" height="15" fill="rgb(205,184,13)" fg:x="464" fg:w="1"/><text x="37.4593%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="37.2895%" y="453" width="0.0802%" height="15" fill="rgb(209,48,36)" fg:x="465" fg:w="1"/><text x="37.5395%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="37.1291%" y="501" width="0.3208%" height="15" fill="rgb(244,34,51)" fg:x="463" fg:w="4"/><text x="37.3791%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="37.2895%" y="485" width="0.1604%" height="15" fill="rgb(221,107,33)" fg:x="465" fg:w="2"/><text x="37.5395%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="37.2895%" y="469" width="0.1604%" height="15" fill="rgb(224,203,12)" fg:x="465" fg:w="2"/><text x="37.5395%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="37.3697%" y="453" width="0.0802%" height="15" fill="rgb(230,215,18)" fg:x="466" fg:w="1"/><text x="37.6197%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="37.3697%" y="437" width="0.0802%" height="15" fill="rgb(206,185,35)" fg:x="466" fg:w="1"/><text x="37.6197%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="37.4499%" y="485" width="0.0802%" height="15" fill="rgb(228,140,34)" fg:x="467" fg:w="1"/><text x="37.6999%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="37.5301%" y="469" width="0.1604%" height="15" fill="rgb(208,93,13)" fg:x="468" fg:w="2"/><text x="37.7801%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.6103%" y="453" width="0.0802%" height="15" fill="rgb(221,193,39)" fg:x="469" fg:w="1"/><text x="37.8603%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="37.6905%" y="469" width="0.0802%" height="15" fill="rgb(241,132,34)" fg:x="470" fg:w="1"/><text x="37.9405%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="37.6905%" y="453" width="0.0802%" height="15" fill="rgb(221,141,10)" fg:x="470" fg:w="1"/><text x="37.9405%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="37.9310%" y="437" width="0.0802%" height="15" fill="rgb(226,90,31)" fg:x="473" fg:w="1"/><text x="38.1810%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="37.9310%" y="453" width="0.2406%" height="15" fill="rgb(243,75,5)" fg:x="473" fg:w="3"/><text x="38.1810%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="38.0112%" y="437" width="0.1604%" height="15" fill="rgb(227,156,21)" fg:x="474" fg:w="2"/><text x="38.2612%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.0914%" y="421" width="0.0802%" height="15" fill="rgb(250,195,8)" fg:x="475" fg:w="1"/><text x="38.3414%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (9 samples, 0.72%)</title><rect x="37.5301%" y="485" width="0.7217%" height="15" fill="rgb(220,134,5)" fg:x="468" fg:w="9"/><text x="37.7801%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.48%)</title><rect x="37.7706%" y="469" width="0.4812%" height="15" fill="rgb(246,106,34)" fg:x="471" fg:w="6"/><text x="38.0206%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.1716%" y="453" width="0.0802%" height="15" fill="rgb(205,1,4)" fg:x="476" fg:w="1"/><text x="38.4216%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (19 samples, 1.52%)</title><rect x="36.8885%" y="517" width="1.5237%" height="15" fill="rgb(224,151,29)" fg:x="460" fg:w="19"/><text x="37.1385%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (12 samples, 0.96%)</title><rect x="37.4499%" y="501" width="0.9623%" height="15" fill="rgb(251,196,0)" fg:x="467" fg:w="12"/><text x="37.6999%" y="511.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="38.2518%" y="485" width="0.1604%" height="15" fill="rgb(212,127,0)" fg:x="477" fg:w="2"/><text x="38.5018%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (24 samples, 1.92%)</title><rect x="36.7281%" y="533" width="1.9246%" height="15" fill="rgb(236,71,53)" fg:x="458" fg:w="24"/><text x="36.9781%" y="543.50">&lt;..</text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="38.4122%" y="517" width="0.2406%" height="15" fill="rgb(227,99,0)" fg:x="479" fg:w="3"/><text x="38.6622%" y="527.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="38.4924%" y="501" width="0.1604%" height="15" fill="rgb(239,89,21)" fg:x="480" fg:w="2"/><text x="38.7424%" y="511.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (38 samples, 3.05%)</title><rect x="35.6856%" y="581" width="3.0473%" height="15" fill="rgb(243,122,19)" fg:x="445" fg:w="38"/><text x="35.9356%" y="591.50">ker..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (37 samples, 2.97%)</title><rect x="35.7658%" y="565" width="2.9671%" height="15" fill="rgb(229,192,45)" fg:x="446" fg:w="37"/><text x="36.0158%" y="575.50">&lt;se..</text></g><g><title>serde::ser::Serializer::collect_map (25 samples, 2.00%)</title><rect x="36.7281%" y="549" width="2.0048%" height="15" fill="rgb(235,165,35)" fg:x="458" fg:w="25"/><text x="36.9781%" y="559.50">s..</text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.6528%" y="533" width="0.0802%" height="15" fill="rgb(253,202,0)" fg:x="482" fg:w="1"/><text x="38.9028%" y="543.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="39.0537%" y="469" width="0.0802%" height="15" fill="rgb(235,51,20)" fg:x="487" fg:w="1"/><text x="39.3037%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="39.2141%" y="437" width="0.2406%" height="15" fill="rgb(218,95,46)" fg:x="489" fg:w="3"/><text x="39.4641%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="39.2141%" y="421" width="0.2406%" height="15" fill="rgb(212,81,10)" fg:x="489" fg:w="3"/><text x="39.4641%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="39.3745%" y="405" width="0.0802%" height="15" fill="rgb(240,59,0)" fg:x="491" fg:w="1"/><text x="39.6245%" y="415.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="39.3745%" y="389" width="0.0802%" height="15" fill="rgb(212,191,42)" fg:x="491" fg:w="1"/><text x="39.6245%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="39.6151%" y="389" width="0.1604%" height="15" fill="rgb(233,140,3)" fg:x="494" fg:w="2"/><text x="39.8651%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.6953%" y="373" width="0.0802%" height="15" fill="rgb(215,69,23)" fg:x="495" fg:w="1"/><text x="39.9453%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="39.5349%" y="421" width="0.4010%" height="15" fill="rgb(240,202,20)" fg:x="493" fg:w="5"/><text x="39.7849%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="39.5349%" y="405" width="0.4010%" height="15" fill="rgb(209,146,50)" fg:x="493" fg:w="5"/><text x="39.7849%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="39.7755%" y="389" width="0.1604%" height="15" fill="rgb(253,102,54)" fg:x="496" fg:w="2"/><text x="40.0255%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="39.7755%" y="373" width="0.1604%" height="15" fill="rgb(250,173,47)" fg:x="496" fg:w="2"/><text x="40.0255%" y="383.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="39.7755%" y="357" width="0.1604%" height="15" fill="rgb(232,142,7)" fg:x="496" fg:w="2"/><text x="40.0255%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.80%)</title><rect x="39.2141%" y="453" width="0.8019%" height="15" fill="rgb(230,157,47)" fg:x="489" fg:w="10"/><text x="39.4641%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="39.4547%" y="437" width="0.5613%" height="15" fill="rgb(214,177,35)" fg:x="492" fg:w="7"/><text x="39.7047%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="39.9358%" y="421" width="0.0802%" height="15" fill="rgb(234,119,46)" fg:x="498" fg:w="1"/><text x="40.1858%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.24%)</title><rect x="40.0160%" y="453" width="0.2406%" height="15" fill="rgb(241,180,50)" fg:x="499" fg:w="3"/><text x="40.2660%" y="463.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="40.0160%" y="437" width="0.2406%" height="15" fill="rgb(221,54,25)" fg:x="499" fg:w="3"/><text x="40.2660%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (18 samples, 1.44%)</title><rect x="38.9735%" y="485" width="1.4435%" height="15" fill="rgb(209,157,44)" fg:x="486" fg:w="18"/><text x="39.2235%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (16 samples, 1.28%)</title><rect x="39.1339%" y="469" width="1.2831%" height="15" fill="rgb(246,115,41)" fg:x="488" fg:w="16"/><text x="39.3839%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="40.2566%" y="453" width="0.1604%" height="15" fill="rgb(229,86,1)" fg:x="502" fg:w="2"/><text x="40.5066%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="40.2566%" y="437" width="0.1604%" height="15" fill="rgb(240,108,53)" fg:x="502" fg:w="2"/><text x="40.5066%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="40.2566%" y="421" width="0.1604%" height="15" fill="rgb(227,134,2)" fg:x="502" fg:w="2"/><text x="40.5066%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="40.4170%" y="485" width="0.0802%" height="15" fill="rgb(213,129,25)" fg:x="504" fg:w="1"/><text x="40.6670%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.4170%" y="469" width="0.0802%" height="15" fill="rgb(226,35,21)" fg:x="504" fg:w="1"/><text x="40.6670%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (21 samples, 1.68%)</title><rect x="38.8933%" y="501" width="1.6840%" height="15" fill="rgb(208,129,26)" fg:x="485" fg:w="21"/><text x="39.1433%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="40.4972%" y="485" width="0.0802%" height="15" fill="rgb(224,83,6)" fg:x="505" fg:w="1"/><text x="40.7472%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="40.4972%" y="469" width="0.0802%" height="15" fill="rgb(227,52,39)" fg:x="505" fg:w="1"/><text x="40.7472%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.4972%" y="453" width="0.0802%" height="15" fill="rgb(241,30,17)" fg:x="505" fg:w="1"/><text x="40.7472%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (22 samples, 1.76%)</title><rect x="38.8933%" y="517" width="1.7642%" height="15" fill="rgb(246,186,42)" fg:x="485" fg:w="22"/><text x="39.1433%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.5774%" y="501" width="0.0802%" height="15" fill="rgb(221,169,15)" fg:x="506" fg:w="1"/><text x="40.8274%" y="511.50"></text></g><g><title>engine::session::state::State::close (126 samples, 10.10%)</title><rect x="30.6335%" y="677" width="10.1043%" height="15" fill="rgb(235,108,21)" fg:x="382" fg:w="126"/><text x="30.8835%" y="687.50">engine::session..</text></g><g><title>engine::session::state::State::flush_entities (126 samples, 10.10%)</title><rect x="30.6335%" y="661" width="10.1043%" height="15" fill="rgb(219,148,30)" fg:x="382" fg:w="126"/><text x="30.8835%" y="671.50">engine::session..</text></g><g><title>core::iter::adapters::try_process (125 samples, 10.02%)</title><rect x="30.7137%" y="645" width="10.0241%" height="15" fill="rgb(220,109,5)" fg:x="383" fg:w="125"/><text x="30.9637%" y="655.50">core::iter::ad..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (125 samples, 10.02%)</title><rect x="30.7137%" y="629" width="10.0241%" height="15" fill="rgb(213,203,48)" fg:x="383" fg:w="125"/><text x="30.9637%" y="639.50">&lt;alloc::vec::V..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (125 samples, 10.02%)</title><rect x="30.7137%" y="613" width="10.0241%" height="15" fill="rgb(244,71,33)" fg:x="383" fg:w="125"/><text x="30.9637%" y="623.50">engine::sessio..</text></g><g><title>kernel::model::any_entity_changes (78 samples, 6.26%)</title><rect x="34.4828%" y="597" width="6.2550%" height="15" fill="rgb(209,23,2)" fg:x="430" fg:w="78"/><text x="34.7328%" y="607.50">kernel::..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (25 samples, 2.00%)</title><rect x="38.7330%" y="581" width="2.0048%" height="15" fill="rgb(219,97,7)" fg:x="483" fg:w="25"/><text x="38.9830%" y="591.50">s..</text></g><g><title>serde_json::de::from_trait (25 samples, 2.00%)</title><rect x="38.7330%" y="565" width="2.0048%" height="15" fill="rgb(216,161,23)" fg:x="483" fg:w="25"/><text x="38.9830%" y="575.50">s..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (25 samples, 2.00%)</title><rect x="38.7330%" y="549" width="2.0048%" height="15" fill="rgb(207,45,42)" fg:x="483" fg:w="25"/><text x="38.9830%" y="559.50">&lt;..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (25 samples, 2.00%)</title><rect x="38.7330%" y="533" width="2.0048%" height="15" fill="rgb(241,61,4)" fg:x="483" fg:w="25"/><text x="38.9830%" y="543.50">&lt;..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="40.6576%" y="517" width="0.0802%" height="15" fill="rgb(236,170,1)" fg:x="507" fg:w="1"/><text x="40.9076%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="40.6576%" y="501" width="0.0802%" height="15" fill="rgb(239,72,5)" fg:x="507" fg:w="1"/><text x="40.9076%" y="511.50"></text></g><g><title>engine::session::Session::close (130 samples, 10.43%)</title><rect x="30.3929%" y="693" width="10.4250%" height="15" fill="rgb(214,13,50)" fg:x="379" fg:w="130"/><text x="30.6429%" y="703.50">engine::session..</text></g><g><title>kernel::plugins::SessionPlugins::stop (1 samples, 0.08%)</title><rect x="40.7378%" y="677" width="0.0802%" height="15" fill="rgb(224,88,9)" fg:x="508" fg:w="1"/><text x="40.9878%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="40.8982%" y="645" width="0.0802%" height="15" fill="rgb(238,192,34)" fg:x="510" fg:w="1"/><text x="41.1482%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="40.8982%" y="629" width="0.0802%" height="15" fill="rgb(217,203,50)" fg:x="510" fg:w="1"/><text x="41.1482%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="40.8982%" y="613" width="0.0802%" height="15" fill="rgb(241,123,32)" fg:x="510" fg:w="1"/><text x="41.1482%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="40.8982%" y="597" width="0.0802%" height="15" fill="rgb(248,151,39)" fg:x="510" fg:w="1"/><text x="41.1482%" y="607.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="40.8982%" y="581" width="0.0802%" height="15" fill="rgb(208,89,6)" fg:x="510" fg:w="1"/><text x="41.1482%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.2189%" y="629" width="0.0802%" height="15" fill="rgb(254,43,26)" fg:x="514" fg:w="1"/><text x="41.4689%" y="639.50"></text></g><g><title>chrono::offset::utc::Utc::now (2 samples, 0.16%)</title><rect x="41.2991%" y="629" width="0.1604%" height="15" fill="rgb(216,158,13)" fg:x="515" fg:w="2"/><text x="41.5491%" y="639.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_num_days_from_ce_opt (1 samples, 0.08%)</title><rect x="41.3793%" y="613" width="0.0802%" height="15" fill="rgb(212,47,37)" fg:x="516" fg:w="1"/><text x="41.6293%" y="623.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (1 samples, 0.08%)</title><rect x="41.4595%" y="629" width="0.0802%" height="15" fill="rgb(254,16,10)" fg:x="517" fg:w="1"/><text x="41.7095%" y="639.50"></text></g><g><title>tracing_core::callsite::register_dispatch (1 samples, 0.08%)</title><rect x="41.4595%" y="613" width="0.0802%" height="15" fill="rgb(223,228,16)" fg:x="517" fg:w="1"/><text x="41.7095%" y="623.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (1 samples, 0.08%)</title><rect x="41.4595%" y="597" width="0.0802%" height="15" fill="rgb(249,108,50)" fg:x="517" fg:w="1"/><text x="41.7095%" y="607.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (1 samples, 0.08%)</title><rect x="41.4595%" y="581" width="0.0802%" height="15" fill="rgb(208,220,5)" fg:x="517" fg:w="1"/><text x="41.7095%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="41.6199%" y="517" width="0.0802%" height="15" fill="rgb(217,89,48)" fg:x="519" fg:w="1"/><text x="41.8699%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="41.6199%" y="501" width="0.0802%" height="15" fill="rgb(212,113,41)" fg:x="519" fg:w="1"/><text x="41.8699%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="41.6199%" y="485" width="0.0802%" height="15" fill="rgb(231,127,5)" fg:x="519" fg:w="1"/><text x="41.8699%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="41.6199%" y="469" width="0.0802%" height="15" fill="rgb(217,141,17)" fg:x="519" fg:w="1"/><text x="41.8699%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.6199%" y="453" width="0.0802%" height="15" fill="rgb(245,125,54)" fg:x="519" fg:w="1"/><text x="41.8699%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="41.7001%" y="437" width="0.1604%" height="15" fill="rgb(248,125,3)" fg:x="520" fg:w="2"/><text x="41.9501%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="41.7001%" y="421" width="0.1604%" height="15" fill="rgb(236,119,51)" fg:x="520" fg:w="2"/><text x="41.9501%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="41.7001%" y="405" width="0.1604%" height="15" fill="rgb(239,99,8)" fg:x="520" fg:w="2"/><text x="41.9501%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="41.7001%" y="389" width="0.1604%" height="15" fill="rgb(224,228,4)" fg:x="520" fg:w="2"/><text x="41.9501%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="41.7001%" y="373" width="0.1604%" height="15" fill="rgb(220,131,45)" fg:x="520" fg:w="2"/><text x="41.9501%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="41.7803%" y="357" width="0.0802%" height="15" fill="rgb(215,62,5)" fg:x="521" fg:w="1"/><text x="42.0303%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="41.7803%" y="341" width="0.0802%" height="15" fill="rgb(253,12,24)" fg:x="521" fg:w="1"/><text x="42.0303%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="41.7803%" y="325" width="0.0802%" height="15" fill="rgb(248,120,50)" fg:x="521" fg:w="1"/><text x="42.0303%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="41.7803%" y="309" width="0.0802%" height="15" fill="rgb(245,194,10)" fg:x="521" fg:w="1"/><text x="42.0303%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="41.7803%" y="293" width="0.0802%" height="15" fill="rgb(241,149,38)" fg:x="521" fg:w="1"/><text x="42.0303%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="41.7803%" y="277" width="0.0802%" height="15" fill="rgb(219,215,7)" fg:x="521" fg:w="1"/><text x="42.0303%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="41.7803%" y="261" width="0.0802%" height="15" fill="rgb(208,120,31)" fg:x="521" fg:w="1"/><text x="42.0303%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="41.7803%" y="245" width="0.0802%" height="15" fill="rgb(244,30,8)" fg:x="521" fg:w="1"/><text x="42.0303%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="41.7803%" y="229" width="0.0802%" height="15" fill="rgb(238,35,44)" fg:x="521" fg:w="1"/><text x="42.0303%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="41.7803%" y="213" width="0.0802%" height="15" fill="rgb(243,218,37)" fg:x="521" fg:w="1"/><text x="42.0303%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="41.7803%" y="197" width="0.0802%" height="15" fill="rgb(218,169,10)" fg:x="521" fg:w="1"/><text x="42.0303%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="41.7803%" y="181" width="0.0802%" height="15" fill="rgb(221,144,10)" fg:x="521" fg:w="1"/><text x="42.0303%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.7803%" y="165" width="0.0802%" height="15" fill="rgb(226,41,38)" fg:x="521" fg:w="1"/><text x="42.0303%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="41.7001%" y="453" width="0.2406%" height="15" fill="rgb(228,3,1)" fg:x="520" fg:w="3"/><text x="41.9501%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="41.8605%" y="437" width="0.0802%" height="15" fill="rgb(209,129,12)" fg:x="522" fg:w="1"/><text x="42.1105%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="41.8605%" y="421" width="0.0802%" height="15" fill="rgb(213,136,33)" fg:x="522" fg:w="1"/><text x="42.1105%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="41.8605%" y="405" width="0.0802%" height="15" fill="rgb(209,181,29)" fg:x="522" fg:w="1"/><text x="42.1105%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="41.8605%" y="389" width="0.0802%" height="15" fill="rgb(234,173,18)" fg:x="522" fg:w="1"/><text x="42.1105%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="41.8605%" y="373" width="0.0802%" height="15" fill="rgb(227,73,47)" fg:x="522" fg:w="1"/><text x="42.1105%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="41.8605%" y="357" width="0.0802%" height="15" fill="rgb(234,9,34)" fg:x="522" fg:w="1"/><text x="42.1105%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="41.8605%" y="341" width="0.0802%" height="15" fill="rgb(235,172,15)" fg:x="522" fg:w="1"/><text x="42.1105%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="41.9407%" y="373" width="0.0802%" height="15" fill="rgb(245,61,2)" fg:x="523" fg:w="1"/><text x="42.1907%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="41.9407%" y="357" width="0.0802%" height="15" fill="rgb(238,39,47)" fg:x="523" fg:w="1"/><text x="42.1907%" y="367.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="42.0209%" y="325" width="0.1604%" height="15" fill="rgb(234,37,24)" fg:x="524" fg:w="2"/><text x="42.2709%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="42.0209%" y="309" width="0.1604%" height="15" fill="rgb(248,223,24)" fg:x="524" fg:w="2"/><text x="42.2709%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="42.0209%" y="293" width="0.1604%" height="15" fill="rgb(223,12,15)" fg:x="524" fg:w="2"/><text x="42.2709%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="42.0209%" y="277" width="0.1604%" height="15" fill="rgb(249,6,3)" fg:x="524" fg:w="2"/><text x="42.2709%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="42.0209%" y="261" width="0.1604%" height="15" fill="rgb(237,105,33)" fg:x="524" fg:w="2"/><text x="42.2709%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="42.0209%" y="245" width="0.1604%" height="15" fill="rgb(252,208,35)" fg:x="524" fg:w="2"/><text x="42.2709%" y="255.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="42.0209%" y="229" width="0.1604%" height="15" fill="rgb(215,181,35)" fg:x="524" fg:w="2"/><text x="42.2709%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="42.0209%" y="213" width="0.1604%" height="15" fill="rgb(246,212,3)" fg:x="524" fg:w="2"/><text x="42.2709%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="42.0209%" y="197" width="0.1604%" height="15" fill="rgb(247,156,24)" fg:x="524" fg:w="2"/><text x="42.2709%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="42.1010%" y="181" width="0.0802%" height="15" fill="rgb(248,9,31)" fg:x="525" fg:w="1"/><text x="42.3510%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="42.0209%" y="357" width="0.2406%" height="15" fill="rgb(234,26,45)" fg:x="524" fg:w="3"/><text x="42.2709%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="42.0209%" y="341" width="0.2406%" height="15" fill="rgb(249,11,32)" fg:x="524" fg:w="3"/><text x="42.2709%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="42.1812%" y="325" width="0.0802%" height="15" fill="rgb(249,162,33)" fg:x="526" fg:w="1"/><text x="42.4312%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="42.2614%" y="357" width="0.1604%" height="15" fill="rgb(232,4,32)" fg:x="527" fg:w="2"/><text x="42.5114%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="42.2614%" y="341" width="0.1604%" height="15" fill="rgb(212,5,45)" fg:x="527" fg:w="2"/><text x="42.5114%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="42.2614%" y="325" width="0.1604%" height="15" fill="rgb(227,95,13)" fg:x="527" fg:w="2"/><text x="42.5114%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="42.2614%" y="309" width="0.1604%" height="15" fill="rgb(223,205,10)" fg:x="527" fg:w="2"/><text x="42.5114%" y="319.50"></text></g><g><title>kernel::model::entity::Entity::from_value (7 samples, 0.56%)</title><rect x="41.9407%" y="453" width="0.5613%" height="15" fill="rgb(222,178,8)" fg:x="523" fg:w="7"/><text x="42.1907%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (7 samples, 0.56%)</title><rect x="41.9407%" y="437" width="0.5613%" height="15" fill="rgb(216,13,22)" fg:x="523" fg:w="7"/><text x="42.1907%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.56%)</title><rect x="41.9407%" y="421" width="0.5613%" height="15" fill="rgb(240,167,12)" fg:x="523" fg:w="7"/><text x="42.1907%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (7 samples, 0.56%)</title><rect x="41.9407%" y="405" width="0.5613%" height="15" fill="rgb(235,68,35)" fg:x="523" fg:w="7"/><text x="42.1907%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.56%)</title><rect x="41.9407%" y="389" width="0.5613%" height="15" fill="rgb(253,40,27)" fg:x="523" fg:w="7"/><text x="42.1907%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (6 samples, 0.48%)</title><rect x="42.0209%" y="373" width="0.4812%" height="15" fill="rgb(214,19,28)" fg:x="524" fg:w="6"/><text x="42.2709%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="42.4218%" y="357" width="0.0802%" height="15" fill="rgb(210,167,45)" fg:x="529" fg:w="1"/><text x="42.6718%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="42.4218%" y="341" width="0.0802%" height="15" fill="rgb(232,97,40)" fg:x="529" fg:w="1"/><text x="42.6718%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="42.4218%" y="325" width="0.0802%" height="15" fill="rgb(250,35,23)" fg:x="529" fg:w="1"/><text x="42.6718%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="42.4218%" y="309" width="0.0802%" height="15" fill="rgb(248,47,53)" fg:x="529" fg:w="1"/><text x="42.6718%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="42.4218%" y="293" width="0.0802%" height="15" fill="rgb(226,58,50)" fg:x="529" fg:w="1"/><text x="42.6718%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.4218%" y="277" width="0.0802%" height="15" fill="rgb(217,105,26)" fg:x="529" fg:w="1"/><text x="42.6718%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="42.5822%" y="277" width="0.0802%" height="15" fill="rgb(208,64,1)" fg:x="531" fg:w="1"/><text x="42.8322%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="42.5822%" y="261" width="0.0802%" height="15" fill="rgb(214,80,1)" fg:x="531" fg:w="1"/><text x="42.8322%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="42.5822%" y="245" width="0.0802%" height="15" fill="rgb(206,175,26)" fg:x="531" fg:w="1"/><text x="42.8322%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="42.5020%" y="325" width="0.2406%" height="15" fill="rgb(235,156,37)" fg:x="530" fg:w="3"/><text x="42.7520%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="42.5822%" y="309" width="0.1604%" height="15" fill="rgb(213,100,9)" fg:x="531" fg:w="2"/><text x="42.8322%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="42.5822%" y="293" width="0.1604%" height="15" fill="rgb(241,15,13)" fg:x="531" fg:w="2"/><text x="42.8322%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="42.6624%" y="277" width="0.0802%" height="15" fill="rgb(205,97,43)" fg:x="532" fg:w="1"/><text x="42.9124%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="42.6624%" y="261" width="0.0802%" height="15" fill="rgb(216,106,32)" fg:x="532" fg:w="1"/><text x="42.9124%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="42.5020%" y="357" width="0.4010%" height="15" fill="rgb(226,200,8)" fg:x="530" fg:w="5"/><text x="42.7520%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="42.5020%" y="341" width="0.4010%" height="15" fill="rgb(244,54,29)" fg:x="530" fg:w="5"/><text x="42.7520%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="42.7426%" y="325" width="0.1604%" height="15" fill="rgb(252,169,12)" fg:x="533" fg:w="2"/><text x="42.9926%" y="335.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="42.8228%" y="309" width="0.0802%" height="15" fill="rgb(231,199,11)" fg:x="534" fg:w="1"/><text x="43.0728%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="42.5020%" y="389" width="0.5613%" height="15" fill="rgb(233,191,18)" fg:x="530" fg:w="7"/><text x="42.7520%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="42.5020%" y="373" width="0.5613%" height="15" fill="rgb(215,83,47)" fg:x="530" fg:w="7"/><text x="42.7520%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="42.9030%" y="357" width="0.1604%" height="15" fill="rgb(251,67,19)" fg:x="535" fg:w="2"/><text x="43.1530%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.9832%" y="341" width="0.0802%" height="15" fill="rgb(240,7,20)" fg:x="536" fg:w="1"/><text x="43.2332%" y="351.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (18 samples, 1.44%)</title><rect x="41.7001%" y="469" width="1.4435%" height="15" fill="rgb(210,150,26)" fg:x="520" fg:w="18"/><text x="41.9501%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (8 samples, 0.64%)</title><rect x="42.5020%" y="453" width="0.6415%" height="15" fill="rgb(228,75,42)" fg:x="530" fg:w="8"/><text x="42.7520%" y="463.50"></text></g><g><title>serde_json::de::from_trait (8 samples, 0.64%)</title><rect x="42.5020%" y="437" width="0.6415%" height="15" fill="rgb(237,134,48)" fg:x="530" fg:w="8"/><text x="42.7520%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.64%)</title><rect x="42.5020%" y="421" width="0.6415%" height="15" fill="rgb(205,80,50)" fg:x="530" fg:w="8"/><text x="42.7520%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.64%)</title><rect x="42.5020%" y="405" width="0.6415%" height="15" fill="rgb(217,74,48)" fg:x="530" fg:w="8"/><text x="42.7520%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="43.0634%" y="389" width="0.0802%" height="15" fill="rgb(205,82,50)" fg:x="537" fg:w="1"/><text x="43.3134%" y="399.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (20 samples, 1.60%)</title><rect x="41.6199%" y="549" width="1.6038%" height="15" fill="rgb(228,1,33)" fg:x="519" fg:w="20"/><text x="41.8699%" y="559.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (20 samples, 1.60%)</title><rect x="41.6199%" y="533" width="1.6038%" height="15" fill="rgb(214,50,23)" fg:x="519" fg:w="20"/><text x="41.8699%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (19 samples, 1.52%)</title><rect x="41.7001%" y="517" width="1.5237%" height="15" fill="rgb(210,62,9)" fg:x="520" fg:w="19"/><text x="41.9501%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (19 samples, 1.52%)</title><rect x="41.7001%" y="501" width="1.5237%" height="15" fill="rgb(210,104,37)" fg:x="520" fg:w="19"/><text x="41.9501%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (19 samples, 1.52%)</title><rect x="41.7001%" y="485" width="1.5237%" height="15" fill="rgb(232,104,43)" fg:x="520" fg:w="19"/><text x="41.9501%" y="495.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="43.1435%" y="469" width="0.0802%" height="15" fill="rgb(244,52,6)" fg:x="538" fg:w="1"/><text x="43.3935%" y="479.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (5 samples, 0.40%)</title><rect x="43.3039%" y="309" width="0.4010%" height="15" fill="rgb(211,174,52)" fg:x="540" fg:w="5"/><text x="43.5539%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="43.3841%" y="293" width="0.3208%" height="15" fill="rgb(229,48,4)" fg:x="541" fg:w="4"/><text x="43.6341%" y="303.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="43.5445%" y="277" width="0.1604%" height="15" fill="rgb(205,155,16)" fg:x="543" fg:w="2"/><text x="43.7945%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="44.0257%" y="261" width="0.1604%" height="15" fill="rgb(211,141,53)" fg:x="549" fg:w="2"/><text x="44.2757%" y="271.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (7 samples, 0.56%)</title><rect x="43.7049%" y="293" width="0.5613%" height="15" fill="rgb(240,148,11)" fg:x="545" fg:w="7"/><text x="43.9549%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.56%)</title><rect x="43.7049%" y="277" width="0.5613%" height="15" fill="rgb(214,45,23)" fg:x="545" fg:w="7"/><text x="43.9549%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="44.1860%" y="261" width="0.0802%" height="15" fill="rgb(248,74,26)" fg:x="551" fg:w="1"/><text x="44.4360%" y="271.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="44.1860%" y="245" width="0.0802%" height="15" fill="rgb(218,121,16)" fg:x="551" fg:w="1"/><text x="44.4360%" y="255.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="44.1860%" y="229" width="0.0802%" height="15" fill="rgb(218,10,47)" fg:x="551" fg:w="1"/><text x="44.4360%" y="239.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::end (1 samples, 0.08%)</title><rect x="44.2662%" y="277" width="0.0802%" height="15" fill="rgb(227,99,14)" fg:x="552" fg:w="1"/><text x="44.5162%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.3464%" y="261" width="0.0802%" height="15" fill="rgb(229,83,46)" fg:x="553" fg:w="1"/><text x="44.5964%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="44.4266%" y="261" width="0.0802%" height="15" fill="rgb(228,25,1)" fg:x="554" fg:w="1"/><text x="44.6766%" y="271.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (3 samples, 0.24%)</title><rect x="44.3464%" y="277" width="0.2406%" height="15" fill="rgb(252,190,15)" fg:x="553" fg:w="3"/><text x="44.5964%" y="287.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="44.5068%" y="261" width="0.0802%" height="15" fill="rgb(213,103,51)" fg:x="555" fg:w="1"/><text x="44.7568%" y="271.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="44.5068%" y="245" width="0.0802%" height="15" fill="rgb(220,38,44)" fg:x="555" fg:w="1"/><text x="44.7568%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="44.5068%" y="229" width="0.0802%" height="15" fill="rgb(210,45,26)" fg:x="555" fg:w="1"/><text x="44.7568%" y="239.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="44.5068%" y="213" width="0.0802%" height="15" fill="rgb(205,95,48)" fg:x="555" fg:w="1"/><text x="44.7568%" y="223.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (18 samples, 1.44%)</title><rect x="43.2237%" y="341" width="1.4435%" height="15" fill="rgb(225,179,37)" fg:x="539" fg:w="18"/><text x="43.4737%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (18 samples, 1.44%)</title><rect x="43.2237%" y="325" width="1.4435%" height="15" fill="rgb(230,209,3)" fg:x="539" fg:w="18"/><text x="43.4737%" y="335.50"></text></g><g><title>serde::ser::Serializer::collect_seq (12 samples, 0.96%)</title><rect x="43.7049%" y="309" width="0.9623%" height="15" fill="rgb(248,12,46)" fg:x="545" fg:w="12"/><text x="43.9549%" y="319.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (5 samples, 0.40%)</title><rect x="44.2662%" y="293" width="0.4010%" height="15" fill="rgb(234,18,0)" fg:x="552" fg:w="5"/><text x="44.5162%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_struct_variant (1 samples, 0.08%)</title><rect x="44.5870%" y="277" width="0.0802%" height="15" fill="rgb(238,197,14)" fg:x="556" fg:w="1"/><text x="44.8370%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.5870%" y="261" width="0.0802%" height="15" fill="rgb(251,162,48)" fg:x="556" fg:w="1"/><text x="44.8370%" y="271.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (19 samples, 1.52%)</title><rect x="43.2237%" y="373" width="1.5237%" height="15" fill="rgb(237,73,42)" fg:x="539" fg:w="19"/><text x="43.4737%" y="383.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (19 samples, 1.52%)</title><rect x="43.2237%" y="357" width="1.5237%" height="15" fill="rgb(211,108,8)" fg:x="539" fg:w="19"/><text x="43.4737%" y="367.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="44.6672%" y="341" width="0.0802%" height="15" fill="rgb(213,45,22)" fg:x="557" fg:w="1"/><text x="44.9172%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="44.6672%" y="325" width="0.0802%" height="15" fill="rgb(252,154,5)" fg:x="557" fg:w="1"/><text x="44.9172%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.6672%" y="309" width="0.0802%" height="15" fill="rgb(221,79,52)" fg:x="557" fg:w="1"/><text x="44.9172%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="44.9078%" y="341" width="0.1604%" height="15" fill="rgb(229,220,36)" fg:x="560" fg:w="2"/><text x="45.1578%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="44.9880%" y="325" width="0.0802%" height="15" fill="rgb(211,17,16)" fg:x="561" fg:w="1"/><text x="45.2380%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="44.9880%" y="309" width="0.0802%" height="15" fill="rgb(222,55,31)" fg:x="561" fg:w="1"/><text x="45.2380%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="44.9880%" y="293" width="0.0802%" height="15" fill="rgb(221,221,31)" fg:x="561" fg:w="1"/><text x="45.2380%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="45.1484%" y="309" width="0.1604%" height="15" fill="rgb(227,168,26)" fg:x="563" fg:w="2"/><text x="45.3984%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="45.1484%" y="293" width="0.1604%" height="15" fill="rgb(224,139,9)" fg:x="563" fg:w="2"/><text x="45.3984%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="45.1484%" y="277" width="0.1604%" height="15" fill="rgb(254,172,0)" fg:x="563" fg:w="2"/><text x="45.3984%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="45.1484%" y="261" width="0.1604%" height="15" fill="rgb(235,203,1)" fg:x="563" fg:w="2"/><text x="45.3984%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="45.1484%" y="245" width="0.1604%" height="15" fill="rgb(216,205,24)" fg:x="563" fg:w="2"/><text x="45.3984%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="45.1484%" y="229" width="0.1604%" height="15" fill="rgb(233,24,6)" fg:x="563" fg:w="2"/><text x="45.3984%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="45.1484%" y="213" width="0.1604%" height="15" fill="rgb(244,110,9)" fg:x="563" fg:w="2"/><text x="45.3984%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="45.1484%" y="197" width="0.1604%" height="15" fill="rgb(239,222,42)" fg:x="563" fg:w="2"/><text x="45.3984%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="45.1484%" y="181" width="0.1604%" height="15" fill="rgb(218,145,13)" fg:x="563" fg:w="2"/><text x="45.3984%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="45.1484%" y="165" width="0.1604%" height="15" fill="rgb(207,69,11)" fg:x="563" fg:w="2"/><text x="45.3984%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="45.1484%" y="149" width="0.1604%" height="15" fill="rgb(220,223,22)" fg:x="563" fg:w="2"/><text x="45.3984%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="45.1484%" y="133" width="0.1604%" height="15" fill="rgb(245,102,5)" fg:x="563" fg:w="2"/><text x="45.3984%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="45.1484%" y="117" width="0.1604%" height="15" fill="rgb(211,148,2)" fg:x="563" fg:w="2"/><text x="45.3984%" y="127.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="45.1484%" y="101" width="0.1604%" height="15" fill="rgb(241,13,44)" fg:x="563" fg:w="2"/><text x="45.3984%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="45.2285%" y="85" width="0.0802%" height="15" fill="rgb(219,137,21)" fg:x="564" fg:w="1"/><text x="45.4785%" y="95.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="45.3087%" y="309" width="0.0802%" height="15" fill="rgb(242,206,5)" fg:x="565" fg:w="1"/><text x="45.5587%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="45.3087%" y="293" width="0.0802%" height="15" fill="rgb(217,114,22)" fg:x="565" fg:w="1"/><text x="45.5587%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (6 samples, 0.48%)</title><rect x="45.1484%" y="325" width="0.4812%" height="15" fill="rgb(253,206,42)" fg:x="563" fg:w="6"/><text x="45.3984%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="45.3889%" y="309" width="0.2406%" height="15" fill="rgb(236,102,18)" fg:x="566" fg:w="3"/><text x="45.6389%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="45.3889%" y="293" width="0.2406%" height="15" fill="rgb(208,59,49)" fg:x="566" fg:w="3"/><text x="45.6389%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="45.5493%" y="277" width="0.0802%" height="15" fill="rgb(215,194,28)" fg:x="568" fg:w="1"/><text x="45.7993%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="45.5493%" y="261" width="0.0802%" height="15" fill="rgb(243,207,11)" fg:x="568" fg:w="1"/><text x="45.7993%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="45.5493%" y="245" width="0.0802%" height="15" fill="rgb(254,179,35)" fg:x="568" fg:w="1"/><text x="45.7993%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="45.5493%" y="229" width="0.0802%" height="15" fill="rgb(235,97,3)" fg:x="568" fg:w="1"/><text x="45.7993%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.5493%" y="213" width="0.0802%" height="15" fill="rgb(215,155,33)" fg:x="568" fg:w="1"/><text x="45.7993%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="45.6295%" y="325" width="0.0802%" height="15" fill="rgb(223,128,12)" fg:x="569" fg:w="1"/><text x="45.8795%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.6295%" y="309" width="0.0802%" height="15" fill="rgb(208,157,18)" fg:x="569" fg:w="1"/><text x="45.8795%" y="319.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (9 samples, 0.72%)</title><rect x="45.0682%" y="341" width="0.7217%" height="15" fill="rgb(249,70,54)" fg:x="562" fg:w="9"/><text x="45.3182%" y="351.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="45.7097%" y="325" width="0.0802%" height="15" fill="rgb(244,118,24)" fg:x="570" fg:w="1"/><text x="45.9597%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="45.7899%" y="341" width="0.1604%" height="15" fill="rgb(211,54,0)" fg:x="571" fg:w="2"/><text x="46.0399%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.9503%" y="341" width="0.0802%" height="15" fill="rgb(245,137,45)" fg:x="573" fg:w="1"/><text x="46.2003%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="46.1107%" y="309" width="0.0802%" height="15" fill="rgb(232,154,31)" fg:x="575" fg:w="1"/><text x="46.3607%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="46.1107%" y="293" width="0.0802%" height="15" fill="rgb(253,6,39)" fg:x="575" fg:w="1"/><text x="46.3607%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="46.1107%" y="277" width="0.0802%" height="15" fill="rgb(234,183,24)" fg:x="575" fg:w="1"/><text x="46.3607%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="46.1107%" y="261" width="0.0802%" height="15" fill="rgb(252,84,40)" fg:x="575" fg:w="1"/><text x="46.3607%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="46.1107%" y="245" width="0.0802%" height="15" fill="rgb(224,65,2)" fg:x="575" fg:w="1"/><text x="46.3607%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="46.1107%" y="229" width="0.0802%" height="15" fill="rgb(229,38,24)" fg:x="575" fg:w="1"/><text x="46.3607%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="46.1107%" y="213" width="0.0802%" height="15" fill="rgb(218,131,50)" fg:x="575" fg:w="1"/><text x="46.3607%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="46.1107%" y="197" width="0.0802%" height="15" fill="rgb(233,106,18)" fg:x="575" fg:w="1"/><text x="46.3607%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="46.1107%" y="181" width="0.0802%" height="15" fill="rgb(220,216,11)" fg:x="575" fg:w="1"/><text x="46.3607%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="46.1107%" y="165" width="0.0802%" height="15" fill="rgb(251,100,45)" fg:x="575" fg:w="1"/><text x="46.3607%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="46.1107%" y="149" width="0.0802%" height="15" fill="rgb(235,143,32)" fg:x="575" fg:w="1"/><text x="46.3607%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="46.1107%" y="133" width="0.0802%" height="15" fill="rgb(248,124,34)" fg:x="575" fg:w="1"/><text x="46.3607%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="46.1107%" y="117" width="0.0802%" height="15" fill="rgb(225,221,4)" fg:x="575" fg:w="1"/><text x="46.3607%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="46.1107%" y="101" width="0.0802%" height="15" fill="rgb(242,27,43)" fg:x="575" fg:w="1"/><text x="46.3607%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="46.1107%" y="85" width="0.0802%" height="15" fill="rgb(227,54,8)" fg:x="575" fg:w="1"/><text x="46.3607%" y="95.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="46.1909%" y="309" width="0.1604%" height="15" fill="rgb(253,139,49)" fg:x="576" fg:w="2"/><text x="46.4409%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.4314%" y="277" width="0.0802%" height="15" fill="rgb(231,26,43)" fg:x="579" fg:w="1"/><text x="46.6814%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="46.6720%" y="213" width="0.0802%" height="15" fill="rgb(207,121,39)" fg:x="582" fg:w="1"/><text x="46.9220%" y="223.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (10 samples, 0.80%)</title><rect x="46.0305%" y="325" width="0.8019%" height="15" fill="rgb(223,101,35)" fg:x="574" fg:w="10"/><text x="46.2805%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.48%)</title><rect x="46.3512%" y="309" width="0.4812%" height="15" fill="rgb(232,87,23)" fg:x="578" fg:w="6"/><text x="46.6012%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="46.3512%" y="293" width="0.4812%" height="15" fill="rgb(225,180,29)" fg:x="578" fg:w="6"/><text x="46.6012%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="46.5116%" y="277" width="0.3208%" height="15" fill="rgb(225,25,17)" fg:x="580" fg:w="4"/><text x="46.7616%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="46.5116%" y="261" width="0.3208%" height="15" fill="rgb(223,8,52)" fg:x="580" fg:w="4"/><text x="46.7616%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="46.5116%" y="245" width="0.3208%" height="15" fill="rgb(246,42,21)" fg:x="580" fg:w="4"/><text x="46.7616%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="46.5918%" y="229" width="0.2406%" height="15" fill="rgb(205,64,43)" fg:x="581" fg:w="3"/><text x="46.8418%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.7522%" y="213" width="0.0802%" height="15" fill="rgb(221,160,13)" fg:x="583" fg:w="1"/><text x="47.0022%" y="223.50"></text></g><g><title>kernel::model::EntityPtr::gid (12 samples, 0.96%)</title><rect x="46.0305%" y="341" width="0.9623%" height="15" fill="rgb(239,58,35)" fg:x="574" fg:w="12"/><text x="46.2805%" y="351.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="46.8324%" y="325" width="0.1604%" height="15" fill="rgb(251,26,40)" fg:x="584" fg:w="2"/><text x="47.0824%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="46.9928%" y="261" width="0.0802%" height="15" fill="rgb(247,0,4)" fg:x="586" fg:w="1"/><text x="47.2428%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="46.9928%" y="245" width="0.0802%" height="15" fill="rgb(218,130,10)" fg:x="586" fg:w="1"/><text x="47.2428%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="46.9928%" y="229" width="0.0802%" height="15" fill="rgb(239,32,7)" fg:x="586" fg:w="1"/><text x="47.2428%" y="239.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="46.9928%" y="213" width="0.0802%" height="15" fill="rgb(210,192,24)" fg:x="586" fg:w="1"/><text x="47.2428%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="46.9928%" y="197" width="0.0802%" height="15" fill="rgb(226,212,17)" fg:x="586" fg:w="1"/><text x="47.2428%" y="207.50"></text></g><g><title>regex_automata::util::determinize::set_lookbehind_from_start (1 samples, 0.08%)</title><rect x="46.9928%" y="181" width="0.0802%" height="15" fill="rgb(219,201,28)" fg:x="586" fg:w="1"/><text x="47.2428%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.0730%" y="261" width="0.0802%" height="15" fill="rgb(235,207,41)" fg:x="587" fg:w="1"/><text x="47.3230%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="47.1532%" y="229" width="0.0802%" height="15" fill="rgb(241,95,54)" fg:x="588" fg:w="1"/><text x="47.4032%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="47.1532%" y="213" width="0.0802%" height="15" fill="rgb(248,12,23)" fg:x="588" fg:w="1"/><text x="47.4032%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="47.1532%" y="197" width="0.0802%" height="15" fill="rgb(228,173,4)" fg:x="588" fg:w="1"/><text x="47.4032%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="47.1532%" y="181" width="0.0802%" height="15" fill="rgb(254,99,5)" fg:x="588" fg:w="1"/><text x="47.4032%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="47.1532%" y="261" width="0.1604%" height="15" fill="rgb(212,184,17)" fg:x="588" fg:w="2"/><text x="47.4032%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="47.1532%" y="245" width="0.1604%" height="15" fill="rgb(252,174,1)" fg:x="588" fg:w="2"/><text x="47.4032%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="47.2334%" y="229" width="0.0802%" height="15" fill="rgb(241,118,51)" fg:x="589" fg:w="1"/><text x="47.4834%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="47.3937%" y="213" width="0.0802%" height="15" fill="rgb(227,94,47)" fg:x="591" fg:w="1"/><text x="47.6437%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="47.3937%" y="197" width="0.0802%" height="15" fill="rgb(229,104,2)" fg:x="591" fg:w="1"/><text x="47.6437%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.5541%" y="181" width="0.0802%" height="15" fill="rgb(219,28,31)" fg:x="593" fg:w="1"/><text x="47.8041%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (8 samples, 0.64%)</title><rect x="47.5541%" y="197" width="0.6415%" height="15" fill="rgb(233,109,36)" fg:x="593" fg:w="8"/><text x="47.8041%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (7 samples, 0.56%)</title><rect x="47.6343%" y="181" width="0.5613%" height="15" fill="rgb(246,88,11)" fg:x="594" fg:w="7"/><text x="47.8843%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="48.1957%" y="197" width="0.0802%" height="15" fill="rgb(209,212,17)" fg:x="601" fg:w="1"/><text x="48.4457%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="48.2759%" y="197" width="0.0802%" height="15" fill="rgb(243,59,29)" fg:x="602" fg:w="1"/><text x="48.5259%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="48.2759%" y="181" width="0.0802%" height="15" fill="rgb(244,205,48)" fg:x="602" fg:w="1"/><text x="48.5259%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="48.3561%" y="197" width="0.0802%" height="15" fill="rgb(227,30,6)" fg:x="603" fg:w="1"/><text x="48.6061%" y="207.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="48.6768%" y="133" width="0.0802%" height="15" fill="rgb(220,205,48)" fg:x="607" fg:w="1"/><text x="48.9268%" y="143.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="48.7570%" y="133" width="0.1604%" height="15" fill="rgb(250,94,14)" fg:x="608" fg:w="2"/><text x="49.0070%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="48.9174%" y="133" width="0.1604%" height="15" fill="rgb(216,119,42)" fg:x="610" fg:w="2"/><text x="49.1674%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="48.9174%" y="117" width="0.1604%" height="15" fill="rgb(232,155,0)" fg:x="610" fg:w="2"/><text x="49.1674%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="48.9174%" y="101" width="0.1604%" height="15" fill="rgb(212,24,32)" fg:x="610" fg:w="2"/><text x="49.1674%" y="111.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="48.9174%" y="85" width="0.1604%" height="15" fill="rgb(216,69,20)" fg:x="610" fg:w="2"/><text x="49.1674%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="49.0778%" y="133" width="0.1604%" height="15" fill="rgb(229,73,31)" fg:x="612" fg:w="2"/><text x="49.3278%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="49.1580%" y="117" width="0.0802%" height="15" fill="rgb(224,219,20)" fg:x="613" fg:w="1"/><text x="49.4080%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="49.1580%" y="101" width="0.0802%" height="15" fill="rgb(215,146,41)" fg:x="613" fg:w="1"/><text x="49.4080%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (40 samples, 3.21%)</title><rect x="49.2382%" y="133" width="3.2077%" height="15" fill="rgb(244,71,31)" fg:x="614" fg:w="40"/><text x="49.4882%" y="143.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (40 samples, 3.21%)</title><rect x="49.2382%" y="117" width="3.2077%" height="15" fill="rgb(224,24,11)" fg:x="614" fg:w="40"/><text x="49.4882%" y="127.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (40 samples, 3.21%)</title><rect x="49.2382%" y="101" width="3.2077%" height="15" fill="rgb(229,76,15)" fg:x="614" fg:w="40"/><text x="49.4882%" y="111.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="52.4459%" y="133" width="0.0802%" height="15" fill="rgb(209,93,2)" fg:x="654" fg:w="1"/><text x="52.6959%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.4459%" y="117" width="0.0802%" height="15" fill="rgb(216,200,50)" fg:x="654" fg:w="1"/><text x="52.6959%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 4.17%)</title><rect x="48.4362%" y="181" width="4.1700%" height="15" fill="rgb(211,67,34)" fg:x="604" fg:w="52"/><text x="48.6862%" y="191.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (52 samples, 4.17%)</title><rect x="48.4362%" y="165" width="4.1700%" height="15" fill="rgb(225,87,47)" fg:x="604" fg:w="52"/><text x="48.6862%" y="175.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (52 samples, 4.17%)</title><rect x="48.4362%" y="149" width="4.1700%" height="15" fill="rgb(217,185,16)" fg:x="604" fg:w="52"/><text x="48.6862%" y="159.50">regex..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="52.5261%" y="133" width="0.0802%" height="15" fill="rgb(205,0,0)" fg:x="655" fg:w="1"/><text x="52.7761%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.7666%" y="165" width="0.0802%" height="15" fill="rgb(207,116,45)" fg:x="658" fg:w="1"/><text x="53.0166%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="52.8468%" y="165" width="0.1604%" height="15" fill="rgb(221,156,26)" fg:x="659" fg:w="2"/><text x="53.0968%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="52.9270%" y="149" width="0.0802%" height="15" fill="rgb(213,140,4)" fg:x="660" fg:w="1"/><text x="53.1770%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.9270%" y="133" width="0.0802%" height="15" fill="rgb(231,224,15)" fg:x="660" fg:w="1"/><text x="53.1770%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="52.9270%" y="117" width="0.0802%" height="15" fill="rgb(244,76,20)" fg:x="660" fg:w="1"/><text x="53.1770%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.64%)</title><rect x="52.6063%" y="181" width="0.6415%" height="15" fill="rgb(238,117,7)" fg:x="656" fg:w="8"/><text x="52.8563%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="53.0072%" y="165" width="0.2406%" height="15" fill="rgb(235,1,10)" fg:x="661" fg:w="3"/><text x="53.2572%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="53.1676%" y="149" width="0.0802%" height="15" fill="rgb(216,165,6)" fg:x="663" fg:w="1"/><text x="53.4176%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.1676%" y="133" width="0.0802%" height="15" fill="rgb(246,91,35)" fg:x="663" fg:w="1"/><text x="53.4176%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.1676%" y="117" width="0.0802%" height="15" fill="rgb(228,96,24)" fg:x="663" fg:w="1"/><text x="53.4176%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (61 samples, 4.89%)</title><rect x="48.4362%" y="197" width="4.8917%" height="15" fill="rgb(254,217,53)" fg:x="604" fg:w="61"/><text x="48.6862%" y="207.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="53.2478%" y="181" width="0.0802%" height="15" fill="rgb(209,60,0)" fg:x="664" fg:w="1"/><text x="53.4978%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="53.2478%" y="165" width="0.0802%" height="15" fill="rgb(250,93,26)" fg:x="664" fg:w="1"/><text x="53.4978%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (74 samples, 5.93%)</title><rect x="47.4739%" y="213" width="5.9342%" height="15" fill="rgb(211,9,40)" fg:x="592" fg:w="74"/><text x="47.7239%" y="223.50">regex_au..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="53.3280%" y="197" width="0.0802%" height="15" fill="rgb(242,57,20)" fg:x="665" fg:w="1"/><text x="53.5780%" y="207.50"></text></g><g><title>regex_syntax::hir::literal::Seq::optimize_by_preference (1 samples, 0.08%)</title><rect x="53.3280%" y="181" width="0.0802%" height="15" fill="rgb(248,85,48)" fg:x="665" fg:w="1"/><text x="53.5780%" y="191.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="53.4082%" y="165" width="0.0802%" height="15" fill="rgb(212,117,2)" fg:x="666" fg:w="1"/><text x="53.6582%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="53.4082%" y="149" width="0.0802%" height="15" fill="rgb(243,19,3)" fg:x="666" fg:w="1"/><text x="53.6582%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.4082%" y="133" width="0.0802%" height="15" fill="rgb(232,217,24)" fg:x="666" fg:w="1"/><text x="53.6582%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.4082%" y="117" width="0.0802%" height="15" fill="rgb(224,175,40)" fg:x="666" fg:w="1"/><text x="53.6582%" y="127.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="53.4884%" y="165" width="0.0802%" height="15" fill="rgb(212,162,32)" fg:x="667" fg:w="1"/><text x="53.7384%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="53.5686%" y="165" width="0.0802%" height="15" fill="rgb(215,9,4)" fg:x="668" fg:w="1"/><text x="53.8186%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="53.5686%" y="149" width="0.0802%" height="15" fill="rgb(242,42,7)" fg:x="668" fg:w="1"/><text x="53.8186%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="53.6488%" y="165" width="0.0802%" height="15" fill="rgb(242,184,45)" fg:x="669" fg:w="1"/><text x="53.8988%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (9 samples, 0.72%)</title><rect x="53.4082%" y="181" width="0.7217%" height="15" fill="rgb(228,111,51)" fg:x="666" fg:w="9"/><text x="53.6582%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (5 samples, 0.40%)</title><rect x="53.7289%" y="165" width="0.4010%" height="15" fill="rgb(236,147,17)" fg:x="670" fg:w="5"/><text x="53.9789%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="53.7289%" y="149" width="0.4010%" height="15" fill="rgb(210,75,22)" fg:x="670" fg:w="5"/><text x="53.9789%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="53.7289%" y="133" width="0.4010%" height="15" fill="rgb(217,159,45)" fg:x="670" fg:w="5"/><text x="53.9789%" y="143.50"></text></g><g><title>__libc_malloc (5 samples, 0.40%)</title><rect x="53.7289%" y="117" width="0.4010%" height="15" fill="rgb(245,165,53)" fg:x="670" fg:w="5"/><text x="53.9789%" y="127.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (10 samples, 0.80%)</title><rect x="53.4082%" y="213" width="0.8019%" height="15" fill="rgb(251,190,50)" fg:x="666" fg:w="10"/><text x="53.6582%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (10 samples, 0.80%)</title><rect x="53.4082%" y="197" width="0.8019%" height="15" fill="rgb(208,203,29)" fg:x="666" fg:w="10"/><text x="53.6582%" y="207.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="54.1299%" y="181" width="0.0802%" height="15" fill="rgb(207,209,35)" fg:x="675" fg:w="1"/><text x="54.3799%" y="191.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="54.1299%" y="165" width="0.0802%" height="15" fill="rgb(230,144,49)" fg:x="675" fg:w="1"/><text x="54.3799%" y="175.50"></text></g><g><title>regex::regex::string::Regex::new (87 samples, 6.98%)</title><rect x="47.3136%" y="261" width="6.9767%" height="15" fill="rgb(229,31,6)" fg:x="590" fg:w="87"/><text x="47.5636%" y="271.50">regex::re..</text></g><g><title>regex::builders::string::RegexBuilder::build (87 samples, 6.98%)</title><rect x="47.3136%" y="245" width="6.9767%" height="15" fill="rgb(251,129,24)" fg:x="590" fg:w="87"/><text x="47.5636%" y="255.50">regex::bu..</text></g><g><title>regex_automata::meta::regex::Builder::build (87 samples, 6.98%)</title><rect x="47.3136%" y="229" width="6.9767%" height="15" fill="rgb(235,105,15)" fg:x="590" fg:w="87"/><text x="47.5636%" y="239.50">regex_aut..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="54.2101%" y="213" width="0.0802%" height="15" fill="rgb(216,52,43)" fg:x="676" fg:w="1"/><text x="54.4601%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="54.2101%" y="197" width="0.0802%" height="15" fill="rgb(238,144,41)" fg:x="676" fg:w="1"/><text x="54.4601%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="54.2101%" y="181" width="0.0802%" height="15" fill="rgb(243,63,9)" fg:x="676" fg:w="1"/><text x="54.4601%" y="191.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="54.2101%" y="165" width="0.0802%" height="15" fill="rgb(246,208,1)" fg:x="676" fg:w="1"/><text x="54.4601%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="54.5309%" y="181" width="0.0802%" height="15" fill="rgb(233,182,18)" fg:x="680" fg:w="1"/><text x="54.7809%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="54.2903%" y="197" width="0.4010%" height="15" fill="rgb(242,224,8)" fg:x="677" fg:w="5"/><text x="54.5403%" y="207.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="54.6111%" y="181" width="0.0802%" height="15" fill="rgb(243,54,37)" fg:x="681" fg:w="1"/><text x="54.8611%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="54.6111%" y="165" width="0.0802%" height="15" fill="rgb(233,192,12)" fg:x="681" fg:w="1"/><text x="54.8611%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.6111%" y="149" width="0.0802%" height="15" fill="rgb(251,192,53)" fg:x="681" fg:w="1"/><text x="54.8611%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.6111%" y="133" width="0.0802%" height="15" fill="rgb(246,141,26)" fg:x="681" fg:w="1"/><text x="54.8611%" y="143.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (97 samples, 7.78%)</title><rect x="46.9928%" y="277" width="7.7787%" height="15" fill="rgb(239,195,19)" fg:x="586" fg:w="97"/><text x="47.2428%" y="287.50">indefinite:..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.48%)</title><rect x="54.2903%" y="261" width="0.4812%" height="15" fill="rgb(241,16,39)" fg:x="677" fg:w="6"/><text x="54.5403%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.48%)</title><rect x="54.2903%" y="245" width="0.4812%" height="15" fill="rgb(223,13,53)" fg:x="677" fg:w="6"/><text x="54.5403%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.48%)</title><rect x="54.2903%" y="229" width="0.4812%" height="15" fill="rgb(214,227,0)" fg:x="677" fg:w="6"/><text x="54.5403%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="54.2903%" y="213" width="0.4812%" height="15" fill="rgb(228,103,26)" fg:x="677" fg:w="6"/><text x="54.5403%" y="223.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="54.6913%" y="197" width="0.0802%" height="15" fill="rgb(254,177,53)" fg:x="682" fg:w="1"/><text x="54.9413%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="54.6913%" y="181" width="0.0802%" height="15" fill="rgb(208,201,34)" fg:x="682" fg:w="1"/><text x="54.9413%" y="191.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="54.7715%" y="229" width="0.1604%" height="15" fill="rgb(212,39,5)" fg:x="683" fg:w="2"/><text x="55.0215%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="54.7715%" y="213" width="0.1604%" height="15" fill="rgb(246,117,3)" fg:x="683" fg:w="2"/><text x="55.0215%" y="223.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="54.7715%" y="197" width="0.1604%" height="15" fill="rgb(244,118,39)" fg:x="683" fg:w="2"/><text x="55.0215%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.24%)</title><rect x="54.9318%" y="213" width="0.2406%" height="15" fill="rgb(241,64,10)" fg:x="685" fg:w="3"/><text x="55.1818%" y="223.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="54.9318%" y="197" width="0.2406%" height="15" fill="rgb(229,39,44)" fg:x="685" fg:w="3"/><text x="55.1818%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.48%)</title><rect x="54.7715%" y="261" width="0.4812%" height="15" fill="rgb(230,226,3)" fg:x="683" fg:w="6"/><text x="55.0215%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (6 samples, 0.48%)</title><rect x="54.7715%" y="245" width="0.4812%" height="15" fill="rgb(222,13,42)" fg:x="683" fg:w="6"/><text x="55.0215%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (4 samples, 0.32%)</title><rect x="54.9318%" y="229" width="0.3208%" height="15" fill="rgb(247,180,54)" fg:x="685" fg:w="4"/><text x="55.1818%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="55.1724%" y="213" width="0.0802%" height="15" fill="rgb(205,96,16)" fg:x="688" fg:w="1"/><text x="55.4224%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.1724%" y="197" width="0.0802%" height="15" fill="rgb(205,100,21)" fg:x="688" fg:w="1"/><text x="55.4224%" y="207.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="55.2526%" y="245" width="0.0802%" height="15" fill="rgb(248,51,4)" fg:x="689" fg:w="1"/><text x="55.5026%" y="255.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="55.2526%" y="229" width="0.0802%" height="15" fill="rgb(217,197,30)" fg:x="689" fg:w="1"/><text x="55.5026%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="55.2526%" y="213" width="0.0802%" height="15" fill="rgb(240,179,40)" fg:x="689" fg:w="1"/><text x="55.5026%" y="223.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="55.2526%" y="197" width="0.0802%" height="15" fill="rgb(212,185,35)" fg:x="689" fg:w="1"/><text x="55.5026%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="55.8941%" y="165" width="0.1604%" height="15" fill="rgb(251,222,31)" fg:x="697" fg:w="2"/><text x="56.1441%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="55.8941%" y="149" width="0.1604%" height="15" fill="rgb(208,140,36)" fg:x="697" fg:w="2"/><text x="56.1441%" y="159.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="55.8941%" y="133" width="0.1604%" height="15" fill="rgb(220,148,1)" fg:x="697" fg:w="2"/><text x="56.1441%" y="143.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="56.0545%" y="165" width="0.1604%" height="15" fill="rgb(254,4,28)" fg:x="699" fg:w="2"/><text x="56.3045%" y="175.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (11 samples, 0.88%)</title><rect x="55.4130%" y="181" width="0.8821%" height="15" fill="rgb(222,185,44)" fg:x="691" fg:w="11"/><text x="55.6630%" y="191.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="56.2149%" y="165" width="0.0802%" height="15" fill="rgb(215,74,39)" fg:x="701" fg:w="1"/><text x="56.4649%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="56.2149%" y="149" width="0.0802%" height="15" fill="rgb(247,86,4)" fg:x="701" fg:w="1"/><text x="56.4649%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.2149%" y="133" width="0.0802%" height="15" fill="rgb(231,105,32)" fg:x="701" fg:w="1"/><text x="56.4649%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.2149%" y="117" width="0.0802%" height="15" fill="rgb(222,65,35)" fg:x="701" fg:w="1"/><text x="56.4649%" y="127.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (12 samples, 0.96%)</title><rect x="55.4130%" y="197" width="0.9623%" height="15" fill="rgb(218,145,35)" fg:x="691" fg:w="12"/><text x="55.6630%" y="207.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="56.2951%" y="181" width="0.0802%" height="15" fill="rgb(208,7,15)" fg:x="702" fg:w="1"/><text x="56.5451%" y="191.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (15 samples, 1.20%)</title><rect x="55.2526%" y="261" width="1.2029%" height="15" fill="rgb(209,83,13)" fg:x="689" fg:w="15"/><text x="55.5026%" y="271.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (14 samples, 1.12%)</title><rect x="55.3328%" y="245" width="1.1227%" height="15" fill="rgb(218,3,10)" fg:x="690" fg:w="14"/><text x="55.5828%" y="255.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (14 samples, 1.12%)</title><rect x="55.3328%" y="229" width="1.1227%" height="15" fill="rgb(211,219,4)" fg:x="690" fg:w="14"/><text x="55.5828%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (14 samples, 1.12%)</title><rect x="55.3328%" y="213" width="1.1227%" height="15" fill="rgb(228,194,12)" fg:x="690" fg:w="14"/><text x="55.5828%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="56.3753%" y="197" width="0.0802%" height="15" fill="rgb(210,175,7)" fg:x="703" fg:w="1"/><text x="56.6253%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="56.3753%" y="181" width="0.0802%" height="15" fill="rgb(243,132,6)" fg:x="703" fg:w="1"/><text x="56.6253%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="56.3753%" y="165" width="0.0802%" height="15" fill="rgb(207,72,18)" fg:x="703" fg:w="1"/><text x="56.6253%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.3753%" y="149" width="0.0802%" height="15" fill="rgb(236,1,18)" fg:x="703" fg:w="1"/><text x="56.6253%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.3753%" y="133" width="0.0802%" height="15" fill="rgb(227,0,18)" fg:x="703" fg:w="1"/><text x="56.6253%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.5357%" y="213" width="0.0802%" height="15" fill="rgb(247,37,5)" fg:x="705" fg:w="1"/><text x="56.7857%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.5357%" y="197" width="0.0802%" height="15" fill="rgb(237,179,24)" fg:x="705" fg:w="1"/><text x="56.7857%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="56.5357%" y="181" width="0.0802%" height="15" fill="rgb(226,53,20)" fg:x="705" fg:w="1"/><text x="56.7857%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="56.6159%" y="213" width="0.0802%" height="15" fill="rgb(247,75,7)" fg:x="706" fg:w="1"/><text x="56.8659%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.6159%" y="197" width="0.0802%" height="15" fill="rgb(233,96,12)" fg:x="706" fg:w="1"/><text x="56.8659%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="56.6961%" y="213" width="0.0802%" height="15" fill="rgb(224,125,0)" fg:x="707" fg:w="1"/><text x="56.9461%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="56.9366%" y="181" width="0.0802%" height="15" fill="rgb(224,92,25)" fg:x="710" fg:w="1"/><text x="57.1866%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (7 samples, 0.56%)</title><rect x="56.9366%" y="197" width="0.5613%" height="15" fill="rgb(224,42,24)" fg:x="710" fg:w="7"/><text x="57.1866%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.48%)</title><rect x="57.0168%" y="181" width="0.4812%" height="15" fill="rgb(234,132,49)" fg:x="711" fg:w="6"/><text x="57.2668%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.4178%" y="165" width="0.0802%" height="15" fill="rgb(248,100,35)" fg:x="716" fg:w="1"/><text x="57.6678%" y="175.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="57.4980%" y="197" width="0.0802%" height="15" fill="rgb(239,94,40)" fg:x="717" fg:w="1"/><text x="57.7480%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="57.5782%" y="197" width="0.0802%" height="15" fill="rgb(235,139,28)" fg:x="718" fg:w="1"/><text x="57.8282%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="57.5782%" y="181" width="0.0802%" height="15" fill="rgb(217,144,7)" fg:x="718" fg:w="1"/><text x="57.8282%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="57.8188%" y="165" width="0.0802%" height="15" fill="rgb(227,55,4)" fg:x="721" fg:w="1"/><text x="58.0688%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (3 samples, 0.24%)</title><rect x="57.8990%" y="165" width="0.2406%" height="15" fill="rgb(252,82,54)" fg:x="722" fg:w="3"/><text x="58.1490%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="58.0593%" y="149" width="0.0802%" height="15" fill="rgb(245,172,4)" fg:x="724" fg:w="1"/><text x="58.3093%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.0593%" y="133" width="0.0802%" height="15" fill="rgb(207,26,27)" fg:x="724" fg:w="1"/><text x="58.3093%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.0593%" y="117" width="0.0802%" height="15" fill="rgb(252,98,18)" fg:x="724" fg:w="1"/><text x="58.3093%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="58.0593%" y="101" width="0.0802%" height="15" fill="rgb(244,8,26)" fg:x="724" fg:w="1"/><text x="58.3093%" y="111.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (8 samples, 0.64%)</title><rect x="57.6584%" y="197" width="0.6415%" height="15" fill="rgb(237,173,45)" fg:x="719" fg:w="8"/><text x="57.9084%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (7 samples, 0.56%)</title><rect x="57.7386%" y="181" width="0.5613%" height="15" fill="rgb(208,213,49)" fg:x="720" fg:w="7"/><text x="57.9886%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (2 samples, 0.16%)</title><rect x="58.1395%" y="165" width="0.1604%" height="15" fill="rgb(212,122,37)" fg:x="725" fg:w="2"/><text x="58.3895%" y="175.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (2 samples, 0.16%)</title><rect x="58.1395%" y="149" width="0.1604%" height="15" fill="rgb(213,80,17)" fg:x="725" fg:w="2"/><text x="58.3895%" y="159.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.16%)</title><rect x="58.1395%" y="133" width="0.1604%" height="15" fill="rgb(206,210,43)" fg:x="725" fg:w="2"/><text x="58.3895%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="58.2999%" y="133" width="0.0802%" height="15" fill="rgb(229,214,3)" fg:x="727" fg:w="1"/><text x="58.5499%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="58.3801%" y="101" width="0.0802%" height="15" fill="rgb(235,213,29)" fg:x="728" fg:w="1"/><text x="58.6301%" y="111.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="58.9415%" y="85" width="0.3208%" height="15" fill="rgb(248,135,26)" fg:x="735" fg:w="4"/><text x="59.1915%" y="95.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.2622%" y="85" width="0.0802%" height="15" fill="rgb(242,188,12)" fg:x="739" fg:w="1"/><text x="59.5122%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="59.3424%" y="85" width="0.2406%" height="15" fill="rgb(245,38,12)" fg:x="740" fg:w="3"/><text x="59.5924%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="59.5830%" y="85" width="0.1604%" height="15" fill="rgb(218,42,13)" fg:x="743" fg:w="2"/><text x="59.8330%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="59.5830%" y="69" width="0.1604%" height="15" fill="rgb(238,132,49)" fg:x="743" fg:w="2"/><text x="59.8330%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="59.5830%" y="53" width="0.1604%" height="15" fill="rgb(209,196,19)" fg:x="743" fg:w="2"/><text x="59.8330%" y="63.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="59.5830%" y="37" width="0.1604%" height="15" fill="rgb(244,131,22)" fg:x="743" fg:w="2"/><text x="59.8330%" y="47.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.9840%" y="53" width="0.0802%" height="15" fill="rgb(223,18,34)" fg:x="748" fg:w="1"/><text x="60.2340%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (9 samples, 0.72%)</title><rect x="59.7434%" y="85" width="0.7217%" height="15" fill="rgb(252,124,54)" fg:x="745" fg:w="9"/><text x="59.9934%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (8 samples, 0.64%)</title><rect x="59.8236%" y="69" width="0.6415%" height="15" fill="rgb(229,106,42)" fg:x="746" fg:w="8"/><text x="60.0736%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (5 samples, 0.40%)</title><rect x="60.0642%" y="53" width="0.4010%" height="15" fill="rgb(221,129,1)" fg:x="749" fg:w="5"/><text x="60.3142%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.3849%" y="37" width="0.0802%" height="15" fill="rgb(229,74,15)" fg:x="753" fg:w="1"/><text x="60.6349%" y="47.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.4651%" y="53" width="0.0802%" height="15" fill="rgb(210,206,50)" fg:x="754" fg:w="1"/><text x="60.7151%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (36 samples, 2.89%)</title><rect x="60.4651%" y="85" width="2.8869%" height="15" fill="rgb(251,114,31)" fg:x="754" fg:w="36"/><text x="60.7151%" y="95.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (36 samples, 2.89%)</title><rect x="60.4651%" y="69" width="2.8869%" height="15" fill="rgb(215,225,28)" fg:x="754" fg:w="36"/><text x="60.7151%" y="79.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (35 samples, 2.81%)</title><rect x="60.5453%" y="53" width="2.8067%" height="15" fill="rgb(237,109,14)" fg:x="755" fg:w="35"/><text x="60.7953%" y="63.50">al..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="63.3520%" y="85" width="0.2406%" height="15" fill="rgb(230,13,37)" fg:x="790" fg:w="3"/><text x="63.6020%" y="95.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="63.4322%" y="69" width="0.1604%" height="15" fill="rgb(231,40,28)" fg:x="791" fg:w="2"/><text x="63.6822%" y="79.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="63.5926%" y="85" width="0.0802%" height="15" fill="rgb(231,202,18)" fg:x="793" fg:w="1"/><text x="63.8426%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (71 samples, 5.69%)</title><rect x="58.2999%" y="181" width="5.6937%" height="15" fill="rgb(225,33,18)" fg:x="727" fg:w="71"/><text x="58.5499%" y="191.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (71 samples, 5.69%)</title><rect x="58.2999%" y="165" width="5.6937%" height="15" fill="rgb(223,64,47)" fg:x="727" fg:w="71"/><text x="58.5499%" y="175.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (71 samples, 5.69%)</title><rect x="58.2999%" y="149" width="5.6937%" height="15" fill="rgb(234,114,13)" fg:x="727" fg:w="71"/><text x="58.5499%" y="159.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (70 samples, 5.61%)</title><rect x="58.3801%" y="133" width="5.6135%" height="15" fill="rgb(248,56,40)" fg:x="728" fg:w="70"/><text x="58.6301%" y="143.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (70 samples, 5.61%)</title><rect x="58.3801%" y="117" width="5.6135%" height="15" fill="rgb(221,194,21)" fg:x="728" fg:w="70"/><text x="58.6301%" y="127.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (69 samples, 5.53%)</title><rect x="58.4603%" y="101" width="5.5333%" height="15" fill="rgb(242,108,46)" fg:x="729" fg:w="69"/><text x="58.7103%" y="111.50">regex_a..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (4 samples, 0.32%)</title><rect x="63.6728%" y="85" width="0.3208%" height="15" fill="rgb(220,106,10)" fg:x="794" fg:w="4"/><text x="63.9228%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="63.8332%" y="69" width="0.1604%" height="15" fill="rgb(211,88,4)" fg:x="796" fg:w="2"/><text x="64.0832%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="63.8332%" y="53" width="0.1604%" height="15" fill="rgb(214,95,34)" fg:x="796" fg:w="2"/><text x="64.0832%" y="63.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="63.8332%" y="37" width="0.1604%" height="15" fill="rgb(250,160,33)" fg:x="796" fg:w="2"/><text x="64.0832%" y="47.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="63.9936%" y="165" width="0.1604%" height="15" fill="rgb(225,29,10)" fg:x="798" fg:w="2"/><text x="64.2436%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.1540%" y="165" width="0.0802%" height="15" fill="rgb(224,28,30)" fg:x="800" fg:w="1"/><text x="64.4040%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="64.2342%" y="165" width="0.0802%" height="15" fill="rgb(231,77,4)" fg:x="801" fg:w="1"/><text x="64.4842%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="64.3144%" y="165" width="0.3208%" height="15" fill="rgb(209,63,21)" fg:x="802" fg:w="4"/><text x="64.5644%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (99 samples, 7.94%)</title><rect x="56.7763%" y="213" width="7.9391%" height="15" fill="rgb(226,22,11)" fg:x="708" fg:w="99"/><text x="57.0263%" y="223.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (80 samples, 6.42%)</title><rect x="58.2999%" y="197" width="6.4154%" height="15" fill="rgb(216,82,30)" fg:x="727" fg:w="80"/><text x="58.5499%" y="207.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (9 samples, 0.72%)</title><rect x="63.9936%" y="181" width="0.7217%" height="15" fill="rgb(246,227,38)" fg:x="798" fg:w="9"/><text x="64.2436%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="64.6351%" y="165" width="0.0802%" height="15" fill="rgb(251,203,53)" fg:x="806" fg:w="1"/><text x="64.8851%" y="175.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="64.7153%" y="165" width="0.0802%" height="15" fill="rgb(254,101,1)" fg:x="807" fg:w="1"/><text x="64.9653%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.7153%" y="149" width="0.0802%" height="15" fill="rgb(241,180,5)" fg:x="807" fg:w="1"/><text x="64.9653%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.7153%" y="133" width="0.0802%" height="15" fill="rgb(218,168,4)" fg:x="807" fg:w="1"/><text x="64.9653%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.7153%" y="117" width="0.0802%" height="15" fill="rgb(224,223,32)" fg:x="807" fg:w="1"/><text x="64.9653%" y="127.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="64.7153%" y="181" width="0.1604%" height="15" fill="rgb(236,106,22)" fg:x="807" fg:w="2"/><text x="64.9653%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="64.7955%" y="165" width="0.0802%" height="15" fill="rgb(206,121,5)" fg:x="808" fg:w="1"/><text x="65.0455%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="64.8757%" y="181" width="0.0802%" height="15" fill="rgb(233,87,28)" fg:x="809" fg:w="1"/><text x="65.1257%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="64.8757%" y="165" width="0.0802%" height="15" fill="rgb(236,137,17)" fg:x="809" fg:w="1"/><text x="65.1257%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="64.7153%" y="213" width="0.3208%" height="15" fill="rgb(209,183,38)" fg:x="807" fg:w="4"/><text x="64.9653%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="64.7153%" y="197" width="0.3208%" height="15" fill="rgb(206,162,44)" fg:x="807" fg:w="4"/><text x="64.9653%" y="207.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="64.9559%" y="181" width="0.0802%" height="15" fill="rgb(237,70,39)" fg:x="810" fg:w="1"/><text x="65.2059%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="65.0361%" y="149" width="0.1604%" height="15" fill="rgb(212,176,5)" fg:x="811" fg:w="2"/><text x="65.2861%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="65.0361%" y="133" width="0.1604%" height="15" fill="rgb(232,95,16)" fg:x="811" fg:w="2"/><text x="65.2861%" y="143.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="65.0361%" y="117" width="0.1604%" height="15" fill="rgb(219,115,35)" fg:x="811" fg:w="2"/><text x="65.2861%" y="127.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="65.0361%" y="181" width="0.2406%" height="15" fill="rgb(251,67,27)" fg:x="811" fg:w="3"/><text x="65.2861%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="65.0361%" y="165" width="0.2406%" height="15" fill="rgb(222,95,40)" fg:x="811" fg:w="3"/><text x="65.2861%" y="175.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="65.1965%" y="149" width="0.0802%" height="15" fill="rgb(250,35,16)" fg:x="813" fg:w="1"/><text x="65.4465%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.2767%" y="165" width="0.0802%" height="15" fill="rgb(224,86,44)" fg:x="814" fg:w="1"/><text x="65.5267%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.2767%" y="149" width="0.0802%" height="15" fill="rgb(237,53,53)" fg:x="814" fg:w="1"/><text x="65.5267%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.2767%" y="133" width="0.0802%" height="15" fill="rgb(208,171,33)" fg:x="814" fg:w="1"/><text x="65.5267%" y="143.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="65.3569%" y="165" width="0.0802%" height="15" fill="rgb(222,64,27)" fg:x="815" fg:w="1"/><text x="65.6069%" y="175.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="65.3569%" y="149" width="0.0802%" height="15" fill="rgb(221,121,35)" fg:x="815" fg:w="1"/><text x="65.6069%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.3569%" y="133" width="0.0802%" height="15" fill="rgb(228,137,42)" fg:x="815" fg:w="1"/><text x="65.6069%" y="143.50"></text></g><g><title>indefinite::rules::number::Number::check (134 samples, 10.75%)</title><rect x="54.7715%" y="277" width="10.7458%" height="15" fill="rgb(227,54,21)" fg:x="683" fg:w="134"/><text x="55.0215%" y="287.50">indefinite::rule..</text></g><g><title>regex::regex::string::Regex::new (113 samples, 9.06%)</title><rect x="56.4555%" y="261" width="9.0617%" height="15" fill="rgb(240,168,33)" fg:x="704" fg:w="113"/><text x="56.7055%" y="271.50">regex::regex:..</text></g><g><title>regex::builders::string::RegexBuilder::build (113 samples, 9.06%)</title><rect x="56.4555%" y="245" width="9.0617%" height="15" fill="rgb(243,159,6)" fg:x="704" fg:w="113"/><text x="56.7055%" y="255.50">regex::builde..</text></g><g><title>regex_automata::meta::regex::Builder::build (113 samples, 9.06%)</title><rect x="56.4555%" y="229" width="9.0617%" height="15" fill="rgb(205,211,41)" fg:x="704" fg:w="113"/><text x="56.7055%" y="239.50">regex_automat..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.48%)</title><rect x="65.0361%" y="213" width="0.4812%" height="15" fill="rgb(253,30,1)" fg:x="811" fg:w="6"/><text x="65.2861%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.48%)</title><rect x="65.0361%" y="197" width="0.4812%" height="15" fill="rgb(226,80,18)" fg:x="811" fg:w="6"/><text x="65.2861%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.24%)</title><rect x="65.2767%" y="181" width="0.2406%" height="15" fill="rgb(253,156,46)" fg:x="814" fg:w="3"/><text x="65.5267%" y="191.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="65.4370%" y="165" width="0.0802%" height="15" fill="rgb(248,87,27)" fg:x="816" fg:w="1"/><text x="65.6870%" y="175.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.4370%" y="149" width="0.0802%" height="15" fill="rgb(227,122,2)" fg:x="816" fg:w="1"/><text x="65.6870%" y="159.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="65.5172%" y="245" width="0.0802%" height="15" fill="rgb(229,94,39)" fg:x="817" fg:w="1"/><text x="65.7672%" y="255.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="65.5172%" y="229" width="0.0802%" height="15" fill="rgb(225,173,31)" fg:x="817" fg:w="1"/><text x="65.7672%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="65.5172%" y="213" width="0.0802%" height="15" fill="rgb(239,176,30)" fg:x="817" fg:w="1"/><text x="65.7672%" y="223.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="65.5172%" y="197" width="0.0802%" height="15" fill="rgb(212,104,21)" fg:x="817" fg:w="1"/><text x="65.7672%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.5172%" y="181" width="0.0802%" height="15" fill="rgb(240,209,40)" fg:x="817" fg:w="1"/><text x="65.7672%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.5172%" y="165" width="0.0802%" height="15" fill="rgb(234,195,5)" fg:x="817" fg:w="1"/><text x="65.7672%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.5172%" y="149" width="0.0802%" height="15" fill="rgb(238,213,1)" fg:x="817" fg:w="1"/><text x="65.7672%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="65.5974%" y="245" width="0.0802%" height="15" fill="rgb(235,182,54)" fg:x="818" fg:w="1"/><text x="65.8474%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="65.5974%" y="229" width="0.0802%" height="15" fill="rgb(229,50,46)" fg:x="818" fg:w="1"/><text x="65.8474%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="65.5974%" y="213" width="0.0802%" height="15" fill="rgb(219,145,13)" fg:x="818" fg:w="1"/><text x="65.8474%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="65.5974%" y="197" width="0.0802%" height="15" fill="rgb(220,226,10)" fg:x="818" fg:w="1"/><text x="65.8474%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.6776%" y="197" width="0.0802%" height="15" fill="rgb(248,47,30)" fg:x="819" fg:w="1"/><text x="65.9276%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.6776%" y="181" width="0.0802%" height="15" fill="rgb(231,209,44)" fg:x="819" fg:w="1"/><text x="65.9276%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="65.6776%" y="165" width="0.0802%" height="15" fill="rgb(209,80,30)" fg:x="819" fg:w="1"/><text x="65.9276%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="65.6776%" y="149" width="0.0802%" height="15" fill="rgb(232,9,14)" fg:x="819" fg:w="1"/><text x="65.9276%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.6776%" y="133" width="0.0802%" height="15" fill="rgb(243,91,43)" fg:x="819" fg:w="1"/><text x="65.9276%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="65.6776%" y="117" width="0.0802%" height="15" fill="rgb(231,90,52)" fg:x="819" fg:w="1"/><text x="65.9276%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="65.7578%" y="197" width="0.0802%" height="15" fill="rgb(253,192,44)" fg:x="820" fg:w="1"/><text x="66.0078%" y="207.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.7578%" y="181" width="0.0802%" height="15" fill="rgb(241,66,31)" fg:x="820" fg:w="1"/><text x="66.0078%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="65.7578%" y="165" width="0.0802%" height="15" fill="rgb(235,81,37)" fg:x="820" fg:w="1"/><text x="66.0078%" y="175.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="65.8380%" y="197" width="0.0802%" height="15" fill="rgb(223,221,9)" fg:x="821" fg:w="1"/><text x="66.0880%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.8380%" y="181" width="0.0802%" height="15" fill="rgb(242,180,7)" fg:x="821" fg:w="1"/><text x="66.0880%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.8380%" y="165" width="0.0802%" height="15" fill="rgb(243,78,19)" fg:x="821" fg:w="1"/><text x="66.0880%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.8380%" y="149" width="0.0802%" height="15" fill="rgb(233,23,17)" fg:x="821" fg:w="1"/><text x="66.0880%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.9182%" y="181" width="0.0802%" height="15" fill="rgb(252,122,45)" fg:x="822" fg:w="1"/><text x="66.1682%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="65.9984%" y="181" width="0.1604%" height="15" fill="rgb(247,108,20)" fg:x="823" fg:w="2"/><text x="66.2484%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="65.9984%" y="165" width="0.1604%" height="15" fill="rgb(235,84,21)" fg:x="823" fg:w="2"/><text x="66.2484%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="66.1588%" y="165" width="0.0802%" height="15" fill="rgb(247,129,10)" fg:x="825" fg:w="1"/><text x="66.4088%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="66.1588%" y="149" width="0.0802%" height="15" fill="rgb(208,173,14)" fg:x="825" fg:w="1"/><text x="66.4088%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="66.1588%" y="133" width="0.0802%" height="15" fill="rgb(236,31,38)" fg:x="825" fg:w="1"/><text x="66.4088%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.1588%" y="117" width="0.0802%" height="15" fill="rgb(232,65,17)" fg:x="825" fg:w="1"/><text x="66.4088%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.1588%" y="101" width="0.0802%" height="15" fill="rgb(224,45,49)" fg:x="825" fg:w="1"/><text x="66.4088%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.1588%" y="85" width="0.0802%" height="15" fill="rgb(225,2,53)" fg:x="825" fg:w="1"/><text x="66.4088%" y="95.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.2390%" y="149" width="0.0802%" height="15" fill="rgb(248,210,53)" fg:x="826" fg:w="1"/><text x="66.4890%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.3192%" y="149" width="0.0802%" height="15" fill="rgb(211,1,30)" fg:x="827" fg:w="1"/><text x="66.5692%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="66.3994%" y="149" width="0.2406%" height="15" fill="rgb(224,96,15)" fg:x="828" fg:w="3"/><text x="66.6494%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.5597%" y="133" width="0.0802%" height="15" fill="rgb(252,45,11)" fg:x="830" fg:w="1"/><text x="66.8097%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.5597%" y="117" width="0.0802%" height="15" fill="rgb(220,125,38)" fg:x="830" fg:w="1"/><text x="66.8097%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="66.5597%" y="101" width="0.0802%" height="15" fill="rgb(243,161,33)" fg:x="830" fg:w="1"/><text x="66.8097%" y="111.50"></text></g><g><title>regex_automata::meta::strategy::new (16 samples, 1.28%)</title><rect x="65.9182%" y="197" width="1.2831%" height="15" fill="rgb(248,197,34)" fg:x="822" fg:w="16"/><text x="66.1682%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (13 samples, 1.04%)</title><rect x="66.1588%" y="181" width="1.0425%" height="15" fill="rgb(228,165,23)" fg:x="825" fg:w="13"/><text x="66.4088%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (12 samples, 0.96%)</title><rect x="66.2390%" y="165" width="0.9623%" height="15" fill="rgb(236,94,38)" fg:x="826" fg:w="12"/><text x="66.4890%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.56%)</title><rect x="66.6399%" y="149" width="0.5613%" height="15" fill="rgb(220,13,23)" fg:x="831" fg:w="7"/><text x="66.8899%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="67.0409%" y="133" width="0.1604%" height="15" fill="rgb(234,26,39)" fg:x="836" fg:w="2"/><text x="67.2909%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="67.2013%" y="165" width="0.3208%" height="15" fill="rgb(205,117,44)" fg:x="838" fg:w="4"/><text x="67.4513%" y="175.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="67.3617%" y="149" width="0.1604%" height="15" fill="rgb(250,42,2)" fg:x="840" fg:w="2"/><text x="67.6117%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="67.3617%" y="133" width="0.1604%" height="15" fill="rgb(223,83,14)" fg:x="840" fg:w="2"/><text x="67.6117%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="67.3617%" y="117" width="0.1604%" height="15" fill="rgb(241,147,50)" fg:x="840" fg:w="2"/><text x="67.6117%" y="127.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="67.3617%" y="101" width="0.1604%" height="15" fill="rgb(218,90,6)" fg:x="840" fg:w="2"/><text x="67.6117%" y="111.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.40%)</title><rect x="67.2013%" y="197" width="0.4010%" height="15" fill="rgb(210,191,5)" fg:x="838" fg:w="5"/><text x="67.4513%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="67.2013%" y="181" width="0.4010%" height="15" fill="rgb(225,139,19)" fg:x="838" fg:w="5"/><text x="67.4513%" y="191.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="67.5221%" y="165" width="0.0802%" height="15" fill="rgb(210,1,33)" fg:x="842" fg:w="1"/><text x="67.7721%" y="175.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (26 samples, 2.09%)</title><rect x="65.6776%" y="213" width="2.0850%" height="15" fill="rgb(213,50,3)" fg:x="819" fg:w="26"/><text x="65.9276%" y="223.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="67.6022%" y="197" width="0.1604%" height="15" fill="rgb(234,227,4)" fg:x="843" fg:w="2"/><text x="67.8522%" y="207.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="67.6022%" y="181" width="0.1604%" height="15" fill="rgb(246,63,5)" fg:x="843" fg:w="2"/><text x="67.8522%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="67.6022%" y="165" width="0.1604%" height="15" fill="rgb(245,136,27)" fg:x="843" fg:w="2"/><text x="67.8522%" y="175.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="67.6824%" y="149" width="0.0802%" height="15" fill="rgb(247,199,27)" fg:x="844" fg:w="1"/><text x="67.9324%" y="159.50"></text></g><g><title>regex::regex::string::Regex::new (27 samples, 2.17%)</title><rect x="65.6776%" y="245" width="2.1652%" height="15" fill="rgb(252,158,49)" fg:x="819" fg:w="27"/><text x="65.9276%" y="255.50">r..</text></g><g><title>regex::builders::string::RegexBuilder::build (27 samples, 2.17%)</title><rect x="65.6776%" y="229" width="2.1652%" height="15" fill="rgb(254,73,1)" fg:x="819" fg:w="27"/><text x="65.9276%" y="239.50">r..</text></g><g><title>regex_automata::meta::regex::Config::match_kind (1 samples, 0.08%)</title><rect x="67.7626%" y="213" width="0.0802%" height="15" fill="rgb(248,93,19)" fg:x="845" fg:w="1"/><text x="68.0126%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.0032%" y="165" width="0.0802%" height="15" fill="rgb(206,67,5)" fg:x="848" fg:w="1"/><text x="68.2532%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.0032%" y="149" width="0.0802%" height="15" fill="rgb(209,210,4)" fg:x="848" fg:w="1"/><text x="68.2532%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="68.0032%" y="133" width="0.0802%" height="15" fill="rgb(214,185,36)" fg:x="848" fg:w="1"/><text x="68.2532%" y="143.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="68.0834%" y="165" width="0.2406%" height="15" fill="rgb(233,191,26)" fg:x="849" fg:w="3"/><text x="68.3334%" y="175.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (36 samples, 2.89%)</title><rect x="65.5172%" y="261" width="2.8869%" height="15" fill="rgb(248,94,17)" fg:x="817" fg:w="36"/><text x="65.7672%" y="271.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.56%)</title><rect x="67.8428%" y="245" width="0.5613%" height="15" fill="rgb(250,64,4)" fg:x="846" fg:w="7"/><text x="68.0928%" y="255.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.56%)</title><rect x="67.8428%" y="229" width="0.5613%" height="15" fill="rgb(218,41,53)" fg:x="846" fg:w="7"/><text x="68.0928%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.56%)</title><rect x="67.8428%" y="213" width="0.5613%" height="15" fill="rgb(251,176,28)" fg:x="846" fg:w="7"/><text x="68.0928%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.56%)</title><rect x="67.8428%" y="197" width="0.5613%" height="15" fill="rgb(247,22,9)" fg:x="846" fg:w="7"/><text x="68.0928%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.56%)</title><rect x="67.8428%" y="181" width="0.5613%" height="15" fill="rgb(218,201,14)" fg:x="846" fg:w="7"/><text x="68.0928%" y="191.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="68.3240%" y="165" width="0.0802%" height="15" fill="rgb(218,94,10)" fg:x="852" fg:w="1"/><text x="68.5740%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.3240%" y="149" width="0.0802%" height="15" fill="rgb(222,183,52)" fg:x="852" fg:w="1"/><text x="68.5740%" y="159.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (295 samples, 23.66%)</title><rect x="44.8276%" y="357" width="23.6568%" height="15" fill="rgb(242,140,25)" fg:x="559" fg:w="295"/><text x="45.0776%" y="367.50">&lt;&amp;kernel::model::EntityPtr as plugins_..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (268 samples, 21.49%)</title><rect x="46.9928%" y="341" width="21.4916%" height="15" fill="rgb(235,197,38)" fg:x="586" fg:w="268"/><text x="47.2428%" y="351.50">plugins_core::looking::model::Unqu..</text></g><g><title>indefinite::indefinite (268 samples, 21.49%)</title><rect x="46.9928%" y="325" width="21.4916%" height="15" fill="rgb(237,136,15)" fg:x="586" fg:w="268"/><text x="47.2428%" y="335.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (268 samples, 21.49%)</title><rect x="46.9928%" y="309" width="21.4916%" height="15" fill="rgb(223,44,49)" fg:x="586" fg:w="268"/><text x="47.2428%" y="319.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (268 samples, 21.49%)</title><rect x="46.9928%" y="293" width="21.4916%" height="15" fill="rgb(227,71,15)" fg:x="586" fg:w="268"/><text x="47.2428%" y="303.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (37 samples, 2.97%)</title><rect x="65.5172%" y="277" width="2.9671%" height="15" fill="rgb(225,153,20)" fg:x="817" fg:w="37"/><text x="65.7672%" y="287.50">ind..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="68.4042%" y="261" width="0.0802%" height="15" fill="rgb(210,190,26)" fg:x="853" fg:w="1"/><text x="68.6542%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.5646%" y="325" width="0.0802%" height="15" fill="rgb(223,147,5)" fg:x="855" fg:w="1"/><text x="68.8146%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.5646%" y="309" width="0.0802%" height="15" fill="rgb(207,14,23)" fg:x="855" fg:w="1"/><text x="68.8146%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.5646%" y="293" width="0.0802%" height="15" fill="rgb(211,195,53)" fg:x="855" fg:w="1"/><text x="68.8146%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.5646%" y="277" width="0.0802%" height="15" fill="rgb(237,75,46)" fg:x="855" fg:w="1"/><text x="68.8146%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.5646%" y="261" width="0.0802%" height="15" fill="rgb(254,55,14)" fg:x="855" fg:w="1"/><text x="68.8146%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.5646%" y="245" width="0.0802%" height="15" fill="rgb(230,185,30)" fg:x="855" fg:w="1"/><text x="68.8146%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.5646%" y="229" width="0.0802%" height="15" fill="rgb(220,14,11)" fg:x="855" fg:w="1"/><text x="68.8146%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.5646%" y="213" width="0.0802%" height="15" fill="rgb(215,169,44)" fg:x="855" fg:w="1"/><text x="68.8146%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.5646%" y="197" width="0.0802%" height="15" fill="rgb(253,203,20)" fg:x="855" fg:w="1"/><text x="68.8146%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.5646%" y="181" width="0.0802%" height="15" fill="rgb(229,225,17)" fg:x="855" fg:w="1"/><text x="68.8146%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.5646%" y="165" width="0.0802%" height="15" fill="rgb(236,76,26)" fg:x="855" fg:w="1"/><text x="68.8146%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.5646%" y="149" width="0.0802%" height="15" fill="rgb(234,15,30)" fg:x="855" fg:w="1"/><text x="68.8146%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="68.4844%" y="341" width="0.2406%" height="15" fill="rgb(211,113,48)" fg:x="854" fg:w="3"/><text x="68.7344%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.6447%" y="325" width="0.0802%" height="15" fill="rgb(221,31,36)" fg:x="856" fg:w="1"/><text x="68.8947%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.6447%" y="309" width="0.0802%" height="15" fill="rgb(215,118,52)" fg:x="856" fg:w="1"/><text x="68.8947%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.7249%" y="309" width="0.0802%" height="15" fill="rgb(241,151,27)" fg:x="857" fg:w="1"/><text x="68.9749%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.40%)</title><rect x="68.4844%" y="357" width="0.4010%" height="15" fill="rgb(253,51,3)" fg:x="854" fg:w="5"/><text x="68.7344%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="68.7249%" y="341" width="0.1604%" height="15" fill="rgb(216,201,24)" fg:x="857" fg:w="2"/><text x="68.9749%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.7249%" y="325" width="0.1604%" height="15" fill="rgb(231,107,4)" fg:x="857" fg:w="2"/><text x="68.9749%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.8051%" y="309" width="0.0802%" height="15" fill="rgb(243,97,54)" fg:x="858" fg:w="1"/><text x="69.0551%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="68.8853%" y="357" width="0.0802%" height="15" fill="rgb(221,32,51)" fg:x="859" fg:w="1"/><text x="69.1353%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="68.9655%" y="325" width="0.0802%" height="15" fill="rgb(218,171,35)" fg:x="860" fg:w="1"/><text x="69.2155%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.9655%" y="309" width="0.0802%" height="15" fill="rgb(214,20,53)" fg:x="860" fg:w="1"/><text x="69.2155%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.9655%" y="293" width="0.0802%" height="15" fill="rgb(239,9,52)" fg:x="860" fg:w="1"/><text x="69.2155%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.9655%" y="277" width="0.0802%" height="15" fill="rgb(215,114,45)" fg:x="860" fg:w="1"/><text x="69.2155%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.9655%" y="261" width="0.0802%" height="15" fill="rgb(208,118,9)" fg:x="860" fg:w="1"/><text x="69.2155%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.9655%" y="245" width="0.0802%" height="15" fill="rgb(235,7,39)" fg:x="860" fg:w="1"/><text x="69.2155%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.9655%" y="229" width="0.0802%" height="15" fill="rgb(243,225,15)" fg:x="860" fg:w="1"/><text x="69.2155%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.9655%" y="213" width="0.0802%" height="15" fill="rgb(225,216,18)" fg:x="860" fg:w="1"/><text x="69.2155%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.9655%" y="197" width="0.0802%" height="15" fill="rgb(233,36,38)" fg:x="860" fg:w="1"/><text x="69.2155%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.9655%" y="181" width="0.0802%" height="15" fill="rgb(239,88,23)" fg:x="860" fg:w="1"/><text x="69.2155%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.9655%" y="165" width="0.0802%" height="15" fill="rgb(219,181,35)" fg:x="860" fg:w="1"/><text x="69.2155%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.9655%" y="149" width="0.0802%" height="15" fill="rgb(215,18,46)" fg:x="860" fg:w="1"/><text x="69.2155%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.9655%" y="133" width="0.0802%" height="15" fill="rgb(241,38,11)" fg:x="860" fg:w="1"/><text x="69.2155%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.9655%" y="117" width="0.0802%" height="15" fill="rgb(248,169,45)" fg:x="860" fg:w="1"/><text x="69.2155%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.9655%" y="101" width="0.0802%" height="15" fill="rgb(239,50,49)" fg:x="860" fg:w="1"/><text x="69.2155%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.9655%" y="85" width="0.0802%" height="15" fill="rgb(231,96,31)" fg:x="860" fg:w="1"/><text x="69.2155%" y="95.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="69.0457%" y="309" width="0.0802%" height="15" fill="rgb(224,193,37)" fg:x="861" fg:w="1"/><text x="69.2957%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.0457%" y="293" width="0.0802%" height="15" fill="rgb(227,153,50)" fg:x="861" fg:w="1"/><text x="69.2957%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.0457%" y="277" width="0.0802%" height="15" fill="rgb(249,228,3)" fg:x="861" fg:w="1"/><text x="69.2957%" y="287.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (3 samples, 0.24%)</title><rect x="68.9655%" y="341" width="0.2406%" height="15" fill="rgb(219,164,43)" fg:x="860" fg:w="3"/><text x="69.2155%" y="351.50"></text></g><g><title>kernel::model::EntityPtr::gid (2 samples, 0.16%)</title><rect x="69.0457%" y="325" width="0.1604%" height="15" fill="rgb(216,45,41)" fg:x="861" fg:w="2"/><text x="69.2957%" y="335.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="69.1259%" y="309" width="0.0802%" height="15" fill="rgb(210,226,51)" fg:x="862" fg:w="1"/><text x="69.3759%" y="319.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="69.2061%" y="293" width="0.0802%" height="15" fill="rgb(209,117,49)" fg:x="863" fg:w="1"/><text x="69.4561%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.2061%" y="277" width="0.0802%" height="15" fill="rgb(206,196,24)" fg:x="863" fg:w="1"/><text x="69.4561%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.2061%" y="261" width="0.0802%" height="15" fill="rgb(253,218,3)" fg:x="863" fg:w="1"/><text x="69.4561%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.2061%" y="245" width="0.0802%" height="15" fill="rgb(252,166,2)" fg:x="863" fg:w="1"/><text x="69.4561%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.2061%" y="229" width="0.0802%" height="15" fill="rgb(236,218,26)" fg:x="863" fg:w="1"/><text x="69.4561%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.2061%" y="213" width="0.0802%" height="15" fill="rgb(254,84,19)" fg:x="863" fg:w="1"/><text x="69.4561%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="69.2061%" y="197" width="0.0802%" height="15" fill="rgb(219,137,29)" fg:x="863" fg:w="1"/><text x="69.4561%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="69.2061%" y="181" width="0.0802%" height="15" fill="rgb(227,47,52)" fg:x="863" fg:w="1"/><text x="69.4561%" y="191.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="69.2863%" y="277" width="0.1604%" height="15" fill="rgb(229,167,24)" fg:x="864" fg:w="2"/><text x="69.5363%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.2863%" y="261" width="0.1604%" height="15" fill="rgb(233,164,1)" fg:x="864" fg:w="2"/><text x="69.5363%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.2863%" y="245" width="0.1604%" height="15" fill="rgb(218,88,48)" fg:x="864" fg:w="2"/><text x="69.5363%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.3665%" y="229" width="0.0802%" height="15" fill="rgb(226,214,24)" fg:x="865" fg:w="1"/><text x="69.6165%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.4467%" y="181" width="0.0802%" height="15" fill="rgb(233,29,12)" fg:x="866" fg:w="1"/><text x="69.6967%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.4467%" y="165" width="0.0802%" height="15" fill="rgb(219,120,34)" fg:x="866" fg:w="1"/><text x="69.6967%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.4467%" y="149" width="0.0802%" height="15" fill="rgb(226,78,44)" fg:x="866" fg:w="1"/><text x="69.6967%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.4467%" y="133" width="0.0802%" height="15" fill="rgb(240,15,48)" fg:x="866" fg:w="1"/><text x="69.6967%" y="143.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="69.4467%" y="117" width="0.0802%" height="15" fill="rgb(253,176,7)" fg:x="866" fg:w="1"/><text x="69.6967%" y="127.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.4467%" y="101" width="0.0802%" height="15" fill="rgb(206,166,28)" fg:x="866" fg:w="1"/><text x="69.6967%" y="111.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.4467%" y="85" width="0.0802%" height="15" fill="rgb(241,53,51)" fg:x="866" fg:w="1"/><text x="69.6967%" y="95.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.4467%" y="69" width="0.0802%" height="15" fill="rgb(249,112,30)" fg:x="866" fg:w="1"/><text x="69.6967%" y="79.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="69.4467%" y="277" width="0.1604%" height="15" fill="rgb(217,85,30)" fg:x="866" fg:w="2"/><text x="69.6967%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="69.4467%" y="261" width="0.1604%" height="15" fill="rgb(233,49,7)" fg:x="866" fg:w="2"/><text x="69.6967%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.4467%" y="245" width="0.1604%" height="15" fill="rgb(234,109,9)" fg:x="866" fg:w="2"/><text x="69.6967%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="69.4467%" y="229" width="0.1604%" height="15" fill="rgb(253,95,22)" fg:x="866" fg:w="2"/><text x="69.6967%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.4467%" y="213" width="0.1604%" height="15" fill="rgb(233,176,25)" fg:x="866" fg:w="2"/><text x="69.6967%" y="223.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="69.4467%" y="197" width="0.1604%" height="15" fill="rgb(236,33,39)" fg:x="866" fg:w="2"/><text x="69.6967%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.5269%" y="181" width="0.0802%" height="15" fill="rgb(223,226,42)" fg:x="867" fg:w="1"/><text x="69.7769%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.5269%" y="165" width="0.0802%" height="15" fill="rgb(216,99,33)" fg:x="867" fg:w="1"/><text x="69.7769%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="69.5269%" y="149" width="0.0802%" height="15" fill="rgb(235,84,23)" fg:x="867" fg:w="1"/><text x="69.7769%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.5269%" y="133" width="0.0802%" height="15" fill="rgb(232,2,27)" fg:x="867" fg:w="1"/><text x="69.7769%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.5269%" y="117" width="0.0802%" height="15" fill="rgb(241,23,22)" fg:x="867" fg:w="1"/><text x="69.7769%" y="127.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.5269%" y="101" width="0.0802%" height="15" fill="rgb(211,73,27)" fg:x="867" fg:w="1"/><text x="69.7769%" y="111.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.6872%" y="149" width="0.0802%" height="15" fill="rgb(235,109,49)" fg:x="869" fg:w="1"/><text x="69.9372%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.6872%" y="133" width="0.0802%" height="15" fill="rgb(230,99,29)" fg:x="869" fg:w="1"/><text x="69.9372%" y="143.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.6872%" y="117" width="0.0802%" height="15" fill="rgb(245,199,7)" fg:x="869" fg:w="1"/><text x="69.9372%" y="127.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.6872%" y="101" width="0.0802%" height="15" fill="rgb(217,179,10)" fg:x="869" fg:w="1"/><text x="69.9372%" y="111.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.6872%" y="85" width="0.0802%" height="15" fill="rgb(254,99,47)" fg:x="869" fg:w="1"/><text x="69.9372%" y="95.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="69.6872%" y="213" width="0.1604%" height="15" fill="rgb(251,121,7)" fg:x="869" fg:w="2"/><text x="69.9372%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.6872%" y="197" width="0.1604%" height="15" fill="rgb(250,177,26)" fg:x="869" fg:w="2"/><text x="69.9372%" y="207.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="69.6872%" y="181" width="0.1604%" height="15" fill="rgb(232,88,15)" fg:x="869" fg:w="2"/><text x="69.9372%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.6872%" y="165" width="0.1604%" height="15" fill="rgb(251,54,54)" fg:x="869" fg:w="2"/><text x="69.9372%" y="175.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.7674%" y="149" width="0.0802%" height="15" fill="rgb(208,177,15)" fg:x="870" fg:w="1"/><text x="70.0174%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12 samples, 0.96%)</title><rect x="68.9655%" y="357" width="0.9623%" height="15" fill="rgb(205,97,32)" fg:x="860" fg:w="12"/><text x="69.2155%" y="367.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (9 samples, 0.72%)</title><rect x="69.2061%" y="341" width="0.7217%" height="15" fill="rgb(217,192,13)" fg:x="863" fg:w="9"/><text x="69.4561%" y="351.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (9 samples, 0.72%)</title><rect x="69.2061%" y="325" width="0.7217%" height="15" fill="rgb(215,163,41)" fg:x="863" fg:w="9"/><text x="69.4561%" y="335.50"></text></g><g><title>engine::session::Session::load_entity (9 samples, 0.72%)</title><rect x="69.2061%" y="309" width="0.7217%" height="15" fill="rgb(246,83,29)" fg:x="863" fg:w="9"/><text x="69.4561%" y="319.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (8 samples, 0.64%)</title><rect x="69.2863%" y="293" width="0.6415%" height="15" fill="rgb(219,2,45)" fg:x="864" fg:w="8"/><text x="69.5363%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="69.6071%" y="277" width="0.3208%" height="15" fill="rgb(242,215,33)" fg:x="868" fg:w="4"/><text x="69.8571%" y="287.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="69.6071%" y="261" width="0.3208%" height="15" fill="rgb(217,1,6)" fg:x="868" fg:w="4"/><text x="69.8571%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="69.6071%" y="245" width="0.3208%" height="15" fill="rgb(207,85,52)" fg:x="868" fg:w="4"/><text x="69.8571%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="69.6872%" y="229" width="0.2406%" height="15" fill="rgb(231,171,19)" fg:x="869" fg:w="3"/><text x="69.9372%" y="239.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.8476%" y="213" width="0.0802%" height="15" fill="rgb(207,128,4)" fg:x="871" fg:w="1"/><text x="70.0976%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="69.9278%" y="357" width="0.0802%" height="15" fill="rgb(219,208,4)" fg:x="872" fg:w="1"/><text x="70.1778%" y="367.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (335 samples, 26.86%)</title><rect x="43.2237%" y="389" width="26.8645%" height="15" fill="rgb(235,161,42)" fg:x="539" fg:w="335"/><text x="43.4737%" y="399.50">&lt;plugins_core::looking::actions::LookAction..</text></g><g><title>plugins_core::looking::model::new_area_observation (316 samples, 25.34%)</title><rect x="44.7474%" y="373" width="25.3408%" height="15" fill="rgb(247,218,18)" fg:x="558" fg:w="316"/><text x="44.9974%" y="383.50">plugins_core::looking::model::new_area_o..</text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="70.0080%" y="357" width="0.0802%" height="15" fill="rgb(232,114,51)" fg:x="873" fg:w="1"/><text x="70.2580%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="70.0080%" y="341" width="0.0802%" height="15" fill="rgb(222,95,3)" fg:x="873" fg:w="1"/><text x="70.2580%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.0080%" y="325" width="0.0802%" height="15" fill="rgb(240,65,29)" fg:x="873" fg:w="1"/><text x="70.2580%" y="335.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (336 samples, 26.94%)</title><rect x="43.2237%" y="517" width="26.9447%" height="15" fill="rgb(249,209,20)" fg:x="539" fg:w="336"/><text x="43.4737%" y="527.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (336 samples, 26.94%)</title><rect x="43.2237%" y="501" width="26.9447%" height="15" fill="rgb(241,48,37)" fg:x="539" fg:w="336"/><text x="43.4737%" y="511.50">&lt;plugins_dynlib::DynamicMiddleware as kerne..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (336 samples, 26.94%)</title><rect x="43.2237%" y="485" width="26.9447%" height="15" fill="rgb(230,140,42)" fg:x="539" fg:w="336"/><text x="43.4737%" y="495.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (336 samples, 26.94%)</title><rect x="43.2237%" y="469" width="26.9447%" height="15" fill="rgb(230,176,45)" fg:x="539" fg:w="336"/><text x="43.4737%" y="479.50">core::ops::function::FnOnce::call_once{{vta..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (336 samples, 26.94%)</title><rect x="43.2237%" y="453" width="26.9447%" height="15" fill="rgb(245,112,21)" fg:x="539" fg:w="336"/><text x="43.4737%" y="463.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (336 samples, 26.94%)</title><rect x="43.2237%" y="437" width="26.9447%" height="15" fill="rgb(207,183,35)" fg:x="539" fg:w="336"/><text x="43.4737%" y="447.50">core::ops::function::FnOnce::call_once{{vta..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (336 samples, 26.94%)</title><rect x="43.2237%" y="421" width="26.9447%" height="15" fill="rgb(227,44,33)" fg:x="539" fg:w="336"/><text x="43.4737%" y="431.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::funct..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (336 samples, 26.94%)</title><rect x="43.2237%" y="405" width="26.9447%" height="15" fill="rgb(246,120,21)" fg:x="539" fg:w="336"/><text x="43.4737%" y="415.50">&lt;engine::session::state::State as kernel::a..</text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="70.0882%" y="389" width="0.0802%" height="15" fill="rgb(235,57,52)" fg:x="874" fg:w="1"/><text x="70.3382%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.1684%" y="437" width="0.0802%" height="15" fill="rgb(238,84,10)" fg:x="875" fg:w="1"/><text x="70.4184%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.1684%" y="421" width="0.0802%" height="15" fill="rgb(251,200,32)" fg:x="875" fg:w="1"/><text x="70.4184%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.1684%" y="405" width="0.0802%" height="15" fill="rgb(247,159,13)" fg:x="875" fg:w="1"/><text x="70.4184%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.1684%" y="389" width="0.0802%" height="15" fill="rgb(238,64,4)" fg:x="875" fg:w="1"/><text x="70.4184%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.1684%" y="373" width="0.0802%" height="15" fill="rgb(221,131,51)" fg:x="875" fg:w="1"/><text x="70.4184%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.1684%" y="357" width="0.0802%" height="15" fill="rgb(242,5,29)" fg:x="875" fg:w="1"/><text x="70.4184%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.1684%" y="341" width="0.0802%" height="15" fill="rgb(214,130,32)" fg:x="875" fg:w="1"/><text x="70.4184%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.1684%" y="325" width="0.0802%" height="15" fill="rgb(244,210,16)" fg:x="875" fg:w="1"/><text x="70.4184%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.1684%" y="309" width="0.0802%" height="15" fill="rgb(234,48,26)" fg:x="875" fg:w="1"/><text x="70.4184%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.1684%" y="293" width="0.0802%" height="15" fill="rgb(231,82,38)" fg:x="875" fg:w="1"/><text x="70.4184%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.1684%" y="277" width="0.0802%" height="15" fill="rgb(254,128,41)" fg:x="875" fg:w="1"/><text x="70.4184%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="70.1684%" y="453" width="0.3208%" height="15" fill="rgb(212,73,49)" fg:x="875" fg:w="4"/><text x="70.4184%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="70.2486%" y="437" width="0.2406%" height="15" fill="rgb(205,62,54)" fg:x="876" fg:w="3"/><text x="70.4986%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="70.3288%" y="421" width="0.1604%" height="15" fill="rgb(228,0,8)" fg:x="877" fg:w="2"/><text x="70.5788%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.4090%" y="405" width="0.0802%" height="15" fill="rgb(251,28,17)" fg:x="878" fg:w="1"/><text x="70.6590%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.4090%" y="389" width="0.0802%" height="15" fill="rgb(238,105,27)" fg:x="878" fg:w="1"/><text x="70.6590%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.4090%" y="373" width="0.0802%" height="15" fill="rgb(237,216,33)" fg:x="878" fg:w="1"/><text x="70.6590%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.4090%" y="357" width="0.0802%" height="15" fill="rgb(229,228,25)" fg:x="878" fg:w="1"/><text x="70.6590%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.4090%" y="341" width="0.0802%" height="15" fill="rgb(233,75,23)" fg:x="878" fg:w="1"/><text x="70.6590%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.4090%" y="325" width="0.0802%" height="15" fill="rgb(231,207,16)" fg:x="878" fg:w="1"/><text x="70.6590%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.4090%" y="309" width="0.0802%" height="15" fill="rgb(231,191,45)" fg:x="878" fg:w="1"/><text x="70.6590%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.4090%" y="293" width="0.0802%" height="15" fill="rgb(224,133,17)" fg:x="878" fg:w="1"/><text x="70.6590%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.4090%" y="277" width="0.0802%" height="15" fill="rgb(209,178,27)" fg:x="878" fg:w="1"/><text x="70.6590%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.4090%" y="261" width="0.0802%" height="15" fill="rgb(218,37,11)" fg:x="878" fg:w="1"/><text x="70.6590%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.4090%" y="245" width="0.0802%" height="15" fill="rgb(251,226,25)" fg:x="878" fg:w="1"/><text x="70.6590%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.4090%" y="229" width="0.0802%" height="15" fill="rgb(209,222,27)" fg:x="878" fg:w="1"/><text x="70.6590%" y="239.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="70.4892%" y="453" width="0.0802%" height="15" fill="rgb(238,22,21)" fg:x="879" fg:w="1"/><text x="70.7392%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="70.4892%" y="437" width="0.0802%" height="15" fill="rgb(233,161,25)" fg:x="879" fg:w="1"/><text x="70.7392%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="70.4892%" y="421" width="0.0802%" height="15" fill="rgb(226,122,53)" fg:x="879" fg:w="1"/><text x="70.7392%" y="431.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (6 samples, 0.48%)</title><rect x="70.1684%" y="469" width="0.4812%" height="15" fill="rgb(220,123,17)" fg:x="875" fg:w="6"/><text x="70.4184%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.5694%" y="453" width="0.0802%" height="15" fill="rgb(230,224,35)" fg:x="880" fg:w="1"/><text x="70.8194%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.5694%" y="437" width="0.0802%" height="15" fill="rgb(246,83,8)" fg:x="880" fg:w="1"/><text x="70.8194%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.5694%" y="421" width="0.0802%" height="15" fill="rgb(230,214,17)" fg:x="880" fg:w="1"/><text x="70.8194%" y="431.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="70.7298%" y="421" width="0.0802%" height="15" fill="rgb(222,97,18)" fg:x="882" fg:w="1"/><text x="70.9798%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.8099%" y="405" width="0.0802%" height="15" fill="rgb(206,79,1)" fg:x="883" fg:w="1"/><text x="71.0599%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.8099%" y="389" width="0.0802%" height="15" fill="rgb(214,121,34)" fg:x="883" fg:w="1"/><text x="71.0599%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.8099%" y="373" width="0.0802%" height="15" fill="rgb(249,199,46)" fg:x="883" fg:w="1"/><text x="71.0599%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.8099%" y="357" width="0.0802%" height="15" fill="rgb(214,222,46)" fg:x="883" fg:w="1"/><text x="71.0599%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.8099%" y="341" width="0.0802%" height="15" fill="rgb(248,168,30)" fg:x="883" fg:w="1"/><text x="71.0599%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.8099%" y="325" width="0.0802%" height="15" fill="rgb(226,14,28)" fg:x="883" fg:w="1"/><text x="71.0599%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.8099%" y="309" width="0.0802%" height="15" fill="rgb(253,123,1)" fg:x="883" fg:w="1"/><text x="71.0599%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.8099%" y="293" width="0.0802%" height="15" fill="rgb(225,24,42)" fg:x="883" fg:w="1"/><text x="71.0599%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.8099%" y="277" width="0.0802%" height="15" fill="rgb(216,161,37)" fg:x="883" fg:w="1"/><text x="71.0599%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.8099%" y="261" width="0.0802%" height="15" fill="rgb(251,164,26)" fg:x="883" fg:w="1"/><text x="71.0599%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.8099%" y="245" width="0.0802%" height="15" fill="rgb(219,177,3)" fg:x="883" fg:w="1"/><text x="71.0599%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.8099%" y="229" width="0.0802%" height="15" fill="rgb(222,65,0)" fg:x="883" fg:w="1"/><text x="71.0599%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.8099%" y="213" width="0.0802%" height="15" fill="rgb(223,69,54)" fg:x="883" fg:w="1"/><text x="71.0599%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.8099%" y="197" width="0.0802%" height="15" fill="rgb(235,30,27)" fg:x="883" fg:w="1"/><text x="71.0599%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.8099%" y="181" width="0.0802%" height="15" fill="rgb(220,183,50)" fg:x="883" fg:w="1"/><text x="71.0599%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.8099%" y="165" width="0.0802%" height="15" fill="rgb(248,198,15)" fg:x="883" fg:w="1"/><text x="71.0599%" y="175.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="70.8901%" y="405" width="0.0802%" height="15" fill="rgb(222,211,4)" fg:x="884" fg:w="1"/><text x="71.1401%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.8901%" y="389" width="0.0802%" height="15" fill="rgb(214,102,34)" fg:x="884" fg:w="1"/><text x="71.1401%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.8901%" y="373" width="0.0802%" height="15" fill="rgb(245,92,5)" fg:x="884" fg:w="1"/><text x="71.1401%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="70.8901%" y="357" width="0.0802%" height="15" fill="rgb(252,72,51)" fg:x="884" fg:w="1"/><text x="71.1401%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.8901%" y="341" width="0.0802%" height="15" fill="rgb(252,208,19)" fg:x="884" fg:w="1"/><text x="71.1401%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.8901%" y="325" width="0.0802%" height="15" fill="rgb(211,69,7)" fg:x="884" fg:w="1"/><text x="71.1401%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.8901%" y="309" width="0.0802%" height="15" fill="rgb(211,27,16)" fg:x="884" fg:w="1"/><text x="71.1401%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.8901%" y="293" width="0.0802%" height="15" fill="rgb(219,216,14)" fg:x="884" fg:w="1"/><text x="71.1401%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.9703%" y="277" width="0.0802%" height="15" fill="rgb(219,71,8)" fg:x="885" fg:w="1"/><text x="71.2203%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.9703%" y="261" width="0.0802%" height="15" fill="rgb(223,170,53)" fg:x="885" fg:w="1"/><text x="71.2203%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="70.9703%" y="309" width="0.1604%" height="15" fill="rgb(246,21,26)" fg:x="885" fg:w="2"/><text x="71.2203%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="70.9703%" y="293" width="0.1604%" height="15" fill="rgb(248,20,46)" fg:x="885" fg:w="2"/><text x="71.2203%" y="303.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="71.0505%" y="277" width="0.0802%" height="15" fill="rgb(252,94,11)" fg:x="886" fg:w="1"/><text x="71.3005%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.0505%" y="261" width="0.0802%" height="15" fill="rgb(236,163,8)" fg:x="886" fg:w="1"/><text x="71.3005%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.0505%" y="245" width="0.0802%" height="15" fill="rgb(217,221,45)" fg:x="886" fg:w="1"/><text x="71.3005%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.0505%" y="229" width="0.0802%" height="15" fill="rgb(238,38,17)" fg:x="886" fg:w="1"/><text x="71.3005%" y="239.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="71.0505%" y="213" width="0.0802%" height="15" fill="rgb(242,210,23)" fg:x="886" fg:w="1"/><text x="71.3005%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="71.0505%" y="197" width="0.0802%" height="15" fill="rgb(250,86,53)" fg:x="886" fg:w="1"/><text x="71.3005%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.0505%" y="181" width="0.0802%" height="15" fill="rgb(223,168,25)" fg:x="886" fg:w="1"/><text x="71.3005%" y="191.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="70.9703%" y="405" width="0.3208%" height="15" fill="rgb(251,189,4)" fg:x="885" fg:w="4"/><text x="71.2203%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="70.9703%" y="389" width="0.3208%" height="15" fill="rgb(245,19,28)" fg:x="885" fg:w="4"/><text x="71.2203%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="70.9703%" y="373" width="0.3208%" height="15" fill="rgb(207,10,34)" fg:x="885" fg:w="4"/><text x="71.2203%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="70.9703%" y="357" width="0.3208%" height="15" fill="rgb(235,153,31)" fg:x="885" fg:w="4"/><text x="71.2203%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="70.9703%" y="341" width="0.3208%" height="15" fill="rgb(228,72,37)" fg:x="885" fg:w="4"/><text x="71.2203%" y="351.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="70.9703%" y="325" width="0.3208%" height="15" fill="rgb(215,15,16)" fg:x="885" fg:w="4"/><text x="71.2203%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.1307%" y="309" width="0.1604%" height="15" fill="rgb(250,119,29)" fg:x="887" fg:w="2"/><text x="71.3807%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="71.1307%" y="293" width="0.1604%" height="15" fill="rgb(214,59,1)" fg:x="887" fg:w="2"/><text x="71.3807%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="71.1307%" y="277" width="0.1604%" height="15" fill="rgb(223,109,25)" fg:x="887" fg:w="2"/><text x="71.3807%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.1307%" y="261" width="0.1604%" height="15" fill="rgb(230,198,22)" fg:x="887" fg:w="2"/><text x="71.3807%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.2109%" y="245" width="0.0802%" height="15" fill="rgb(245,184,46)" fg:x="888" fg:w="1"/><text x="71.4609%" y="255.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="71.2911%" y="293" width="0.0802%" height="15" fill="rgb(253,73,16)" fg:x="889" fg:w="1"/><text x="71.5411%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.4515%" y="277" width="0.0802%" height="15" fill="rgb(206,94,45)" fg:x="891" fg:w="1"/><text x="71.7015%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.4515%" y="261" width="0.0802%" height="15" fill="rgb(236,83,27)" fg:x="891" fg:w="1"/><text x="71.7015%" y="271.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="71.4515%" y="245" width="0.0802%" height="15" fill="rgb(220,196,8)" fg:x="891" fg:w="1"/><text x="71.7015%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.4515%" y="229" width="0.0802%" height="15" fill="rgb(254,185,14)" fg:x="891" fg:w="1"/><text x="71.7015%" y="239.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="71.2911%" y="341" width="0.3208%" height="15" fill="rgb(226,50,22)" fg:x="889" fg:w="4"/><text x="71.5411%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="71.2911%" y="325" width="0.3208%" height="15" fill="rgb(253,147,0)" fg:x="889" fg:w="4"/><text x="71.5411%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="71.2911%" y="309" width="0.3208%" height="15" fill="rgb(252,46,33)" fg:x="889" fg:w="4"/><text x="71.5411%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="71.3713%" y="293" width="0.2406%" height="15" fill="rgb(242,22,54)" fg:x="890" fg:w="3"/><text x="71.6213%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.5317%" y="277" width="0.0802%" height="15" fill="rgb(223,178,32)" fg:x="892" fg:w="1"/><text x="71.7817%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.6119%" y="325" width="0.0802%" height="15" fill="rgb(214,106,53)" fg:x="893" fg:w="1"/><text x="71.8619%" y="335.50"></text></g><g><title>plugins_core::tools::contained_by (20 samples, 1.60%)</title><rect x="70.1684%" y="485" width="1.6038%" height="15" fill="rgb(232,65,50)" fg:x="875" fg:w="20"/><text x="70.4184%" y="495.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (14 samples, 1.12%)</title><rect x="70.6496%" y="469" width="1.1227%" height="15" fill="rgb(231,110,28)" fg:x="881" fg:w="14"/><text x="70.8996%" y="479.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (14 samples, 1.12%)</title><rect x="70.6496%" y="453" width="1.1227%" height="15" fill="rgb(216,71,40)" fg:x="881" fg:w="14"/><text x="70.8996%" y="463.50"></text></g><g><title>engine::session::Session::load_entity (13 samples, 1.04%)</title><rect x="70.7298%" y="437" width="1.0425%" height="15" fill="rgb(229,89,53)" fg:x="882" fg:w="13"/><text x="70.9798%" y="447.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (12 samples, 0.96%)</title><rect x="70.8099%" y="421" width="0.9623%" height="15" fill="rgb(210,124,14)" fg:x="883" fg:w="12"/><text x="71.0599%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (6 samples, 0.48%)</title><rect x="71.2911%" y="405" width="0.4812%" height="15" fill="rgb(236,213,6)" fg:x="889" fg:w="6"/><text x="71.5411%" y="415.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.48%)</title><rect x="71.2911%" y="389" width="0.4812%" height="15" fill="rgb(228,41,5)" fg:x="889" fg:w="6"/><text x="71.5411%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="71.2911%" y="373" width="0.4812%" height="15" fill="rgb(221,167,25)" fg:x="889" fg:w="6"/><text x="71.5411%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="71.2911%" y="357" width="0.4812%" height="15" fill="rgb(228,144,37)" fg:x="889" fg:w="6"/><text x="71.5411%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="71.6119%" y="341" width="0.1604%" height="15" fill="rgb(227,189,38)" fg:x="893" fg:w="2"/><text x="71.8619%" y="351.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="71.6921%" y="325" width="0.0802%" height="15" fill="rgb(218,8,2)" fg:x="894" fg:w="1"/><text x="71.9421%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="71.6921%" y="309" width="0.0802%" height="15" fill="rgb(209,61,28)" fg:x="894" fg:w="1"/><text x="71.9421%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.7723%" y="453" width="0.0802%" height="15" fill="rgb(233,140,39)" fg:x="895" fg:w="1"/><text x="72.0223%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.7723%" y="437" width="0.0802%" height="15" fill="rgb(251,66,48)" fg:x="895" fg:w="1"/><text x="72.0223%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.7723%" y="421" width="0.0802%" height="15" fill="rgb(210,44,45)" fg:x="895" fg:w="1"/><text x="72.0223%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.7723%" y="405" width="0.0802%" height="15" fill="rgb(214,136,46)" fg:x="895" fg:w="1"/><text x="72.0223%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.0128%" y="421" width="0.0802%" height="15" fill="rgb(207,130,50)" fg:x="898" fg:w="1"/><text x="72.2628%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="72.0930%" y="421" width="0.0802%" height="15" fill="rgb(228,102,49)" fg:x="899" fg:w="1"/><text x="72.3430%" y="431.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="72.0930%" y="405" width="0.0802%" height="15" fill="rgb(253,55,1)" fg:x="899" fg:w="1"/><text x="72.3430%" y="415.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="72.0930%" y="389" width="0.0802%" height="15" fill="rgb(238,222,9)" fg:x="899" fg:w="1"/><text x="72.3430%" y="399.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="72.0930%" y="373" width="0.0802%" height="15" fill="rgb(246,99,6)" fg:x="899" fg:w="1"/><text x="72.3430%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.0930%" y="357" width="0.0802%" height="15" fill="rgb(219,110,26)" fg:x="899" fg:w="1"/><text x="72.3430%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.0930%" y="341" width="0.0802%" height="15" fill="rgb(239,160,33)" fg:x="899" fg:w="1"/><text x="72.3430%" y="351.50"></text></g><g><title>engine::session::Session::captured (391 samples, 31.36%)</title><rect x="40.8982%" y="661" width="31.3553%" height="15" fill="rgb(220,202,23)" fg:x="510" fg:w="391"/><text x="41.1482%" y="671.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (390 samples, 31.28%)</title><rect x="40.9783%" y="645" width="31.2751%" height="15" fill="rgb(208,80,26)" fg:x="511" fg:w="390"/><text x="41.2283%" y="655.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (383 samples, 30.71%)</title><rect x="41.5397%" y="629" width="30.7137%" height="15" fill="rgb(243,85,7)" fg:x="518" fg:w="383"/><text x="41.7897%" y="639.50">tracing_core::dispatcher::with_default</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (383 samples, 30.71%)</title><rect x="41.5397%" y="613" width="30.7137%" height="15" fill="rgb(228,77,47)" fg:x="518" fg:w="383"/><text x="41.7897%" y="623.50">&lt;engine::session::Session as kernel::actions::Perf..</text></g><g><title>kernel::plugins::mw::apply_middleware (383 samples, 30.71%)</title><rect x="41.5397%" y="597" width="30.7137%" height="15" fill="rgb(212,226,8)" fg:x="518" fg:w="383"/><text x="41.7897%" y="607.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (383 samples, 30.71%)</title><rect x="41.5397%" y="581" width="30.7137%" height="15" fill="rgb(241,120,54)" fg:x="518" fg:w="383"/><text x="41.7897%" y="591.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (383 samples, 30.71%)</title><rect x="41.5397%" y="565" width="30.7137%" height="15" fill="rgb(226,80,16)" fg:x="518" fg:w="383"/><text x="41.7897%" y="575.50">&lt;engine::session::ExpandSurroundingsMiddleware as ..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (362 samples, 29.03%)</title><rect x="43.2237%" y="549" width="29.0297%" height="15" fill="rgb(240,76,13)" fg:x="539" fg:w="362"/><text x="43.4737%" y="559.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (362 samples, 29.03%)</title><rect x="43.2237%" y="533" width="29.0297%" height="15" fill="rgb(252,74,8)" fg:x="539" fg:w="362"/><text x="43.4737%" y="543.50">&lt;plugins_rune::RuneMiddleware as kernel::plugin..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (26 samples, 2.09%)</title><rect x="70.1684%" y="517" width="2.0850%" height="15" fill="rgb(244,155,2)" fg:x="875" fg:w="26"/><text x="70.4184%" y="527.50">p..</text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (26 samples, 2.09%)</title><rect x="70.1684%" y="501" width="2.0850%" height="15" fill="rgb(215,81,35)" fg:x="875" fg:w="26"/><text x="70.4184%" y="511.50">p..</text></g><g><title>plugins_core::tools::occupied_by (6 samples, 0.48%)</title><rect x="71.7723%" y="485" width="0.4812%" height="15" fill="rgb(206,55,2)" fg:x="895" fg:w="6"/><text x="72.0223%" y="495.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (6 samples, 0.48%)</title><rect x="71.7723%" y="469" width="0.4812%" height="15" fill="rgb(231,2,34)" fg:x="895" fg:w="6"/><text x="72.0223%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="71.8524%" y="453" width="0.4010%" height="15" fill="rgb(242,176,48)" fg:x="896" fg:w="5"/><text x="72.1024%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="71.8524%" y="437" width="0.4010%" height="15" fill="rgb(249,31,36)" fg:x="896" fg:w="5"/><text x="72.1024%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.1732%" y="421" width="0.0802%" height="15" fill="rgb(205,18,17)" fg:x="900" fg:w="1"/><text x="72.4232%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.1732%" y="405" width="0.0802%" height="15" fill="rgb(254,130,5)" fg:x="900" fg:w="1"/><text x="72.4232%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="72.1732%" y="389" width="0.0802%" height="15" fill="rgb(229,42,45)" fg:x="900" fg:w="1"/><text x="72.4232%" y="399.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="72.1732%" y="373" width="0.0802%" height="15" fill="rgb(245,95,25)" fg:x="900" fg:w="1"/><text x="72.4232%" y="383.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="72.1732%" y="357" width="0.0802%" height="15" fill="rgb(249,193,38)" fg:x="900" fg:w="1"/><text x="72.4232%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.3336%" y="613" width="0.0802%" height="15" fill="rgb(241,140,43)" fg:x="902" fg:w="1"/><text x="72.5836%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.3336%" y="597" width="0.0802%" height="15" fill="rgb(245,78,48)" fg:x="902" fg:w="1"/><text x="72.5836%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.3336%" y="581" width="0.0802%" height="15" fill="rgb(214,92,39)" fg:x="902" fg:w="1"/><text x="72.5836%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.3336%" y="565" width="0.0802%" height="15" fill="rgb(211,189,14)" fg:x="902" fg:w="1"/><text x="72.5836%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.3336%" y="549" width="0.0802%" height="15" fill="rgb(218,7,24)" fg:x="902" fg:w="1"/><text x="72.5836%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.4138%" y="565" width="0.0802%" height="15" fill="rgb(224,200,49)" fg:x="903" fg:w="1"/><text x="72.6638%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.4138%" y="549" width="0.0802%" height="15" fill="rgb(218,210,14)" fg:x="903" fg:w="1"/><text x="72.6638%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.4138%" y="533" width="0.0802%" height="15" fill="rgb(234,142,31)" fg:x="903" fg:w="1"/><text x="72.6638%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.4138%" y="517" width="0.0802%" height="15" fill="rgb(227,165,2)" fg:x="903" fg:w="1"/><text x="72.6638%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.4138%" y="501" width="0.0802%" height="15" fill="rgb(232,44,46)" fg:x="903" fg:w="1"/><text x="72.6638%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.4138%" y="485" width="0.0802%" height="15" fill="rgb(236,149,47)" fg:x="903" fg:w="1"/><text x="72.6638%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.4138%" y="469" width="0.0802%" height="15" fill="rgb(227,45,31)" fg:x="903" fg:w="1"/><text x="72.6638%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.4138%" y="453" width="0.0802%" height="15" fill="rgb(240,176,51)" fg:x="903" fg:w="1"/><text x="72.6638%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.4138%" y="437" width="0.0802%" height="15" fill="rgb(249,146,41)" fg:x="903" fg:w="1"/><text x="72.6638%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.4138%" y="421" width="0.0802%" height="15" fill="rgb(213,208,4)" fg:x="903" fg:w="1"/><text x="72.6638%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.4138%" y="405" width="0.0802%" height="15" fill="rgb(245,84,36)" fg:x="903" fg:w="1"/><text x="72.6638%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="72.4138%" y="389" width="0.0802%" height="15" fill="rgb(254,84,18)" fg:x="903" fg:w="1"/><text x="72.6638%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="72.4138%" y="373" width="0.0802%" height="15" fill="rgb(225,38,54)" fg:x="903" fg:w="1"/><text x="72.6638%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="72.4138%" y="357" width="0.0802%" height="15" fill="rgb(246,50,30)" fg:x="903" fg:w="1"/><text x="72.6638%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="72.4138%" y="341" width="0.0802%" height="15" fill="rgb(246,148,9)" fg:x="903" fg:w="1"/><text x="72.6638%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.4138%" y="325" width="0.0802%" height="15" fill="rgb(223,75,4)" fg:x="903" fg:w="1"/><text x="72.6638%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.4940%" y="517" width="0.0802%" height="15" fill="rgb(239,148,41)" fg:x="904" fg:w="1"/><text x="72.7440%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.4940%" y="501" width="0.0802%" height="15" fill="rgb(205,195,3)" fg:x="904" fg:w="1"/><text x="72.7440%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.4940%" y="485" width="0.0802%" height="15" fill="rgb(254,161,1)" fg:x="904" fg:w="1"/><text x="72.7440%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.4940%" y="469" width="0.0802%" height="15" fill="rgb(211,229,8)" fg:x="904" fg:w="1"/><text x="72.7440%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.4940%" y="453" width="0.0802%" height="15" fill="rgb(220,97,9)" fg:x="904" fg:w="1"/><text x="72.7440%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.4940%" y="437" width="0.0802%" height="15" fill="rgb(240,218,8)" fg:x="904" fg:w="1"/><text x="72.7440%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.4940%" y="421" width="0.0802%" height="15" fill="rgb(250,44,0)" fg:x="904" fg:w="1"/><text x="72.7440%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="72.4940%" y="405" width="0.0802%" height="15" fill="rgb(236,41,53)" fg:x="904" fg:w="1"/><text x="72.7440%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="72.4940%" y="389" width="0.0802%" height="15" fill="rgb(218,227,13)" fg:x="904" fg:w="1"/><text x="72.7440%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.5742%" y="421" width="0.0802%" height="15" fill="rgb(217,94,32)" fg:x="905" fg:w="1"/><text x="72.8242%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="72.5742%" y="469" width="0.1604%" height="15" fill="rgb(213,217,12)" fg:x="905" fg:w="2"/><text x="72.8242%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="72.5742%" y="453" width="0.1604%" height="15" fill="rgb(229,13,46)" fg:x="905" fg:w="2"/><text x="72.8242%" y="463.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="72.5742%" y="437" width="0.1604%" height="15" fill="rgb(243,139,5)" fg:x="905" fg:w="2"/><text x="72.8242%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.6544%" y="421" width="0.0802%" height="15" fill="rgb(249,38,45)" fg:x="906" fg:w="1"/><text x="72.9044%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.6544%" y="405" width="0.0802%" height="15" fill="rgb(216,70,11)" fg:x="906" fg:w="1"/><text x="72.9044%" y="415.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="72.7346%" y="357" width="0.0802%" height="15" fill="rgb(253,101,25)" fg:x="907" fg:w="1"/><text x="72.9846%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="72.7346%" y="341" width="0.0802%" height="15" fill="rgb(207,197,30)" fg:x="907" fg:w="1"/><text x="72.9846%" y="351.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="72.7346%" y="325" width="0.0802%" height="15" fill="rgb(238,87,13)" fg:x="907" fg:w="1"/><text x="72.9846%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="72.7346%" y="309" width="0.0802%" height="15" fill="rgb(215,155,8)" fg:x="907" fg:w="1"/><text x="72.9846%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="72.7346%" y="293" width="0.0802%" height="15" fill="rgb(239,166,38)" fg:x="907" fg:w="1"/><text x="72.9846%" y="303.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.08%)</title><rect x="72.7346%" y="277" width="0.0802%" height="15" fill="rgb(240,194,35)" fg:x="907" fg:w="1"/><text x="72.9846%" y="287.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (1 samples, 0.08%)</title><rect x="72.7346%" y="261" width="0.0802%" height="15" fill="rgb(219,10,44)" fg:x="907" fg:w="1"/><text x="72.9846%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="72.4138%" y="613" width="0.4812%" height="15" fill="rgb(251,220,35)" fg:x="903" fg:w="6"/><text x="72.6638%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.48%)</title><rect x="72.4138%" y="597" width="0.4812%" height="15" fill="rgb(218,117,13)" fg:x="903" fg:w="6"/><text x="72.6638%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (6 samples, 0.48%)</title><rect x="72.4138%" y="581" width="0.4812%" height="15" fill="rgb(221,213,40)" fg:x="903" fg:w="6"/><text x="72.6638%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="72.4940%" y="565" width="0.4010%" height="15" fill="rgb(251,224,35)" fg:x="904" fg:w="5"/><text x="72.7440%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="72.4940%" y="549" width="0.4010%" height="15" fill="rgb(241,33,39)" fg:x="904" fg:w="5"/><text x="72.7440%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (5 samples, 0.40%)</title><rect x="72.4940%" y="533" width="0.4010%" height="15" fill="rgb(222,74,17)" fg:x="904" fg:w="5"/><text x="72.7440%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="72.5742%" y="517" width="0.3208%" height="15" fill="rgb(225,103,0)" fg:x="905" fg:w="4"/><text x="72.8242%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="72.5742%" y="501" width="0.3208%" height="15" fill="rgb(240,0,12)" fg:x="905" fg:w="4"/><text x="72.8242%" y="511.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="72.5742%" y="485" width="0.3208%" height="15" fill="rgb(233,213,37)" fg:x="905" fg:w="4"/><text x="72.8242%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="72.7346%" y="469" width="0.1604%" height="15" fill="rgb(225,84,52)" fg:x="907" fg:w="2"/><text x="72.9846%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.7346%" y="453" width="0.1604%" height="15" fill="rgb(247,160,51)" fg:x="907" fg:w="2"/><text x="72.9846%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (2 samples, 0.16%)</title><rect x="72.7346%" y="437" width="0.1604%" height="15" fill="rgb(244,60,51)" fg:x="907" fg:w="2"/><text x="72.9846%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (2 samples, 0.16%)</title><rect x="72.7346%" y="421" width="0.1604%" height="15" fill="rgb(233,114,7)" fg:x="907" fg:w="2"/><text x="72.9846%" y="431.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (2 samples, 0.16%)</title><rect x="72.7346%" y="405" width="0.1604%" height="15" fill="rgb(246,136,16)" fg:x="907" fg:w="2"/><text x="72.9846%" y="415.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (2 samples, 0.16%)</title><rect x="72.7346%" y="389" width="0.1604%" height="15" fill="rgb(243,114,45)" fg:x="907" fg:w="2"/><text x="72.9846%" y="399.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="72.7346%" y="373" width="0.1604%" height="15" fill="rgb(247,183,43)" fg:x="907" fg:w="2"/><text x="72.9846%" y="383.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="72.8148%" y="357" width="0.0802%" height="15" fill="rgb(251,210,42)" fg:x="908" fg:w="1"/><text x="73.0648%" y="367.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="72.8148%" y="341" width="0.0802%" height="15" fill="rgb(221,88,35)" fg:x="908" fg:w="1"/><text x="73.0648%" y="351.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="72.8148%" y="325" width="0.0802%" height="15" fill="rgb(242,21,20)" fg:x="908" fg:w="1"/><text x="73.0648%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="72.9751%" y="581" width="0.0802%" height="15" fill="rgb(233,226,36)" fg:x="910" fg:w="1"/><text x="73.2251%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.9751%" y="565" width="0.0802%" height="15" fill="rgb(243,189,34)" fg:x="910" fg:w="1"/><text x="73.2251%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.9751%" y="549" width="0.0802%" height="15" fill="rgb(207,145,50)" fg:x="910" fg:w="1"/><text x="73.2251%" y="559.50"></text></g><g><title>engine::session::internal::Added::find_refs (10 samples, 0.80%)</title><rect x="72.3336%" y="645" width="0.8019%" height="15" fill="rgb(242,1,50)" fg:x="902" fg:w="10"/><text x="72.5836%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (10 samples, 0.80%)</title><rect x="72.3336%" y="629" width="0.8019%" height="15" fill="rgb(231,65,32)" fg:x="902" fg:w="10"/><text x="72.5836%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="72.8949%" y="613" width="0.2406%" height="15" fill="rgb(208,68,49)" fg:x="909" fg:w="3"/><text x="73.1449%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="72.8949%" y="597" width="0.2406%" height="15" fill="rgb(253,54,49)" fg:x="909" fg:w="3"/><text x="73.1449%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.0553%" y="581" width="0.0802%" height="15" fill="rgb(245,186,24)" fg:x="911" fg:w="1"/><text x="73.3053%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.1355%" y="629" width="0.0802%" height="15" fill="rgb(209,2,41)" fg:x="912" fg:w="1"/><text x="73.3855%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.1355%" y="613" width="0.0802%" height="15" fill="rgb(242,208,54)" fg:x="912" fg:w="1"/><text x="73.3855%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.1355%" y="597" width="0.0802%" height="15" fill="rgb(225,9,51)" fg:x="912" fg:w="1"/><text x="73.3855%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.1355%" y="581" width="0.0802%" height="15" fill="rgb(207,207,25)" fg:x="912" fg:w="1"/><text x="73.3855%" y="591.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="73.2157%" y="629" width="0.0802%" height="15" fill="rgb(253,96,18)" fg:x="913" fg:w="1"/><text x="73.4657%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.2157%" y="613" width="0.0802%" height="15" fill="rgb(252,215,20)" fg:x="913" fg:w="1"/><text x="73.4657%" y="623.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.2959%" y="581" width="0.0802%" height="15" fill="rgb(245,227,26)" fg:x="914" fg:w="1"/><text x="73.5459%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.2959%" y="565" width="0.0802%" height="15" fill="rgb(241,208,0)" fg:x="914" fg:w="1"/><text x="73.5459%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.2959%" y="549" width="0.0802%" height="15" fill="rgb(224,130,10)" fg:x="914" fg:w="1"/><text x="73.5459%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.5365%" y="501" width="0.0802%" height="15" fill="rgb(237,29,0)" fg:x="917" fg:w="1"/><text x="73.7865%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.5365%" y="485" width="0.0802%" height="15" fill="rgb(219,27,41)" fg:x="917" fg:w="1"/><text x="73.7865%" y="495.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="73.5365%" y="469" width="0.0802%" height="15" fill="rgb(245,101,19)" fg:x="917" fg:w="1"/><text x="73.7865%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.5365%" y="453" width="0.0802%" height="15" fill="rgb(243,44,37)" fg:x="917" fg:w="1"/><text x="73.7865%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.5365%" y="437" width="0.0802%" height="15" fill="rgb(228,213,43)" fg:x="917" fg:w="1"/><text x="73.7865%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="73.3761%" y="533" width="0.3208%" height="15" fill="rgb(219,163,21)" fg:x="915" fg:w="4"/><text x="73.6261%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="73.3761%" y="517" width="0.3208%" height="15" fill="rgb(234,86,24)" fg:x="915" fg:w="4"/><text x="73.6261%" y="527.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="73.6167%" y="501" width="0.0802%" height="15" fill="rgb(225,10,24)" fg:x="918" fg:w="1"/><text x="73.8667%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.6167%" y="485" width="0.0802%" height="15" fill="rgb(218,109,7)" fg:x="918" fg:w="1"/><text x="73.8667%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.6167%" y="469" width="0.0802%" height="15" fill="rgb(210,20,26)" fg:x="918" fg:w="1"/><text x="73.8667%" y="479.50"></text></g><g><title>kernel::model::entity::Entity::from_value (6 samples, 0.48%)</title><rect x="73.2959%" y="629" width="0.4812%" height="15" fill="rgb(216,18,1)" fg:x="914" fg:w="6"/><text x="73.5459%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.48%)</title><rect x="73.2959%" y="613" width="0.4812%" height="15" fill="rgb(206,163,23)" fg:x="914" fg:w="6"/><text x="73.5459%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="73.2959%" y="597" width="0.4812%" height="15" fill="rgb(229,150,31)" fg:x="914" fg:w="6"/><text x="73.5459%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.40%)</title><rect x="73.3761%" y="581" width="0.4010%" height="15" fill="rgb(231,10,5)" fg:x="915" fg:w="5"/><text x="73.6261%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="73.3761%" y="565" width="0.4010%" height="15" fill="rgb(250,40,50)" fg:x="915" fg:w="5"/><text x="73.6261%" y="575.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (5 samples, 0.40%)</title><rect x="73.3761%" y="549" width="0.4010%" height="15" fill="rgb(217,119,7)" fg:x="915" fg:w="5"/><text x="73.6261%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.6969%" y="533" width="0.0802%" height="15" fill="rgb(245,214,40)" fg:x="919" fg:w="1"/><text x="73.9469%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.6969%" y="517" width="0.0802%" height="15" fill="rgb(216,187,1)" fg:x="919" fg:w="1"/><text x="73.9469%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.6969%" y="501" width="0.0802%" height="15" fill="rgb(237,146,21)" fg:x="919" fg:w="1"/><text x="73.9469%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.8573%" y="485" width="0.0802%" height="15" fill="rgb(210,174,47)" fg:x="921" fg:w="1"/><text x="74.1073%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.8573%" y="469" width="0.0802%" height="15" fill="rgb(218,111,39)" fg:x="921" fg:w="1"/><text x="74.1073%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.8573%" y="453" width="0.0802%" height="15" fill="rgb(224,95,19)" fg:x="921" fg:w="1"/><text x="74.1073%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.8573%" y="437" width="0.0802%" height="15" fill="rgb(234,15,38)" fg:x="921" fg:w="1"/><text x="74.1073%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.8573%" y="421" width="0.0802%" height="15" fill="rgb(246,56,12)" fg:x="921" fg:w="1"/><text x="74.1073%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="73.7771%" y="549" width="0.2406%" height="15" fill="rgb(247,16,17)" fg:x="920" fg:w="3"/><text x="74.0271%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="73.7771%" y="533" width="0.2406%" height="15" fill="rgb(215,151,11)" fg:x="920" fg:w="3"/><text x="74.0271%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="73.7771%" y="517" width="0.2406%" height="15" fill="rgb(225,16,24)" fg:x="920" fg:w="3"/><text x="74.0271%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.8573%" y="501" width="0.1604%" height="15" fill="rgb(217,117,5)" fg:x="921" fg:w="2"/><text x="74.1073%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.9374%" y="485" width="0.0802%" height="15" fill="rgb(246,187,53)" fg:x="922" fg:w="1"/><text x="74.1874%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.9374%" y="469" width="0.0802%" height="15" fill="rgb(241,71,40)" fg:x="922" fg:w="1"/><text x="74.1874%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.9374%" y="453" width="0.0802%" height="15" fill="rgb(231,67,39)" fg:x="922" fg:w="1"/><text x="74.1874%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.9374%" y="437" width="0.0802%" height="15" fill="rgb(222,120,24)" fg:x="922" fg:w="1"/><text x="74.1874%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="73.7771%" y="565" width="0.3208%" height="15" fill="rgb(248,3,3)" fg:x="920" fg:w="4"/><text x="74.0271%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.0176%" y="549" width="0.0802%" height="15" fill="rgb(228,218,5)" fg:x="923" fg:w="1"/><text x="74.2676%" y="559.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (13 samples, 1.04%)</title><rect x="73.1355%" y="645" width="1.0425%" height="15" fill="rgb(212,202,43)" fg:x="912" fg:w="13"/><text x="73.3855%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.40%)</title><rect x="73.7771%" y="629" width="0.4010%" height="15" fill="rgb(235,183,2)" fg:x="920" fg:w="5"/><text x="74.0271%" y="639.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="73.7771%" y="613" width="0.4010%" height="15" fill="rgb(230,165,10)" fg:x="920" fg:w="5"/><text x="74.0271%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="73.7771%" y="597" width="0.4010%" height="15" fill="rgb(219,54,40)" fg:x="920" fg:w="5"/><text x="74.0271%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="73.7771%" y="581" width="0.4010%" height="15" fill="rgb(244,73,9)" fg:x="920" fg:w="5"/><text x="74.0271%" y="591.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.0978%" y="565" width="0.0802%" height="15" fill="rgb(212,32,45)" fg:x="924" fg:w="1"/><text x="74.3478%" y="575.50"></text></g><g><title>engine::session::Session::load_entity (26 samples, 2.09%)</title><rect x="72.2534%" y="661" width="2.0850%" height="15" fill="rgb(205,58,31)" fg:x="901" fg:w="26"/><text x="72.5034%" y="671.50">e..</text></g><g><title>engine::session::internal::Maps::lookup_entity (2 samples, 0.16%)</title><rect x="74.1780%" y="645" width="0.1604%" height="15" fill="rgb(250,120,43)" fg:x="925" fg:w="2"/><text x="74.4280%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="74.1780%" y="629" width="0.1604%" height="15" fill="rgb(235,13,10)" fg:x="925" fg:w="2"/><text x="74.4280%" y="639.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="74.3384%" y="645" width="0.0802%" height="15" fill="rgb(232,219,31)" fg:x="927" fg:w="1"/><text x="74.5884%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.3384%" y="629" width="0.0802%" height="15" fill="rgb(218,157,51)" fg:x="927" fg:w="1"/><text x="74.5884%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.3384%" y="613" width="0.0802%" height="15" fill="rgb(211,91,52)" fg:x="927" fg:w="1"/><text x="74.5884%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="74.3384%" y="597" width="0.0802%" height="15" fill="rgb(240,173,1)" fg:x="927" fg:w="1"/><text x="74.5884%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.3384%" y="581" width="0.0802%" height="15" fill="rgb(248,20,47)" fg:x="927" fg:w="1"/><text x="74.5884%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.3384%" y="565" width="0.0802%" height="15" fill="rgb(217,221,40)" fg:x="927" fg:w="1"/><text x="74.5884%" y="575.50"></text></g><g><title>engine::users::model::username_to_key (2 samples, 0.16%)</title><rect x="74.3384%" y="661" width="0.1604%" height="15" fill="rgb(226,149,51)" fg:x="927" fg:w="2"/><text x="74.5884%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="74.4186%" y="645" width="0.0802%" height="15" fill="rgb(252,193,7)" fg:x="928" fg:w="1"/><text x="74.6686%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="74.5790%" y="629" width="0.0802%" height="15" fill="rgb(205,123,0)" fg:x="930" fg:w="1"/><text x="74.8290%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.5790%" y="613" width="0.0802%" height="15" fill="rgb(233,173,25)" fg:x="930" fg:w="1"/><text x="74.8290%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.5790%" y="597" width="0.0802%" height="15" fill="rgb(216,63,32)" fg:x="930" fg:w="1"/><text x="74.8290%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.5790%" y="581" width="0.0802%" height="15" fill="rgb(209,56,45)" fg:x="930" fg:w="1"/><text x="74.8290%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.5790%" y="565" width="0.0802%" height="15" fill="rgb(226,111,49)" fg:x="930" fg:w="1"/><text x="74.8290%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.5790%" y="549" width="0.0802%" height="15" fill="rgb(244,181,21)" fg:x="930" fg:w="1"/><text x="74.8290%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.5790%" y="533" width="0.0802%" height="15" fill="rgb(222,126,15)" fg:x="930" fg:w="1"/><text x="74.8290%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.5790%" y="517" width="0.0802%" height="15" fill="rgb(222,95,17)" fg:x="930" fg:w="1"/><text x="74.8290%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.5790%" y="501" width="0.0802%" height="15" fill="rgb(254,46,5)" fg:x="930" fg:w="1"/><text x="74.8290%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.5790%" y="485" width="0.0802%" height="15" fill="rgb(236,216,35)" fg:x="930" fg:w="1"/><text x="74.8290%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.5790%" y="469" width="0.0802%" height="15" fill="rgb(217,187,26)" fg:x="930" fg:w="1"/><text x="74.8290%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.5790%" y="453" width="0.0802%" height="15" fill="rgb(207,192,25)" fg:x="930" fg:w="1"/><text x="74.8290%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.5790%" y="437" width="0.0802%" height="15" fill="rgb(253,135,27)" fg:x="930" fg:w="1"/><text x="74.8290%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="74.6592%" y="613" width="0.1604%" height="15" fill="rgb(211,122,29)" fg:x="931" fg:w="2"/><text x="74.9092%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="74.6592%" y="597" width="0.1604%" height="15" fill="rgb(233,162,40)" fg:x="931" fg:w="2"/><text x="74.9092%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="74.6592%" y="581" width="0.1604%" height="15" fill="rgb(222,184,47)" fg:x="931" fg:w="2"/><text x="74.9092%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.7394%" y="565" width="0.0802%" height="15" fill="rgb(249,99,23)" fg:x="932" fg:w="1"/><text x="74.9894%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.7394%" y="549" width="0.0802%" height="15" fill="rgb(214,60,12)" fg:x="932" fg:w="1"/><text x="74.9894%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.7394%" y="533" width="0.0802%" height="15" fill="rgb(250,229,36)" fg:x="932" fg:w="1"/><text x="74.9894%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.8196%" y="613" width="0.0802%" height="15" fill="rgb(232,195,10)" fg:x="933" fg:w="1"/><text x="75.0696%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="74.8196%" y="597" width="0.0802%" height="15" fill="rgb(205,213,31)" fg:x="933" fg:w="1"/><text x="75.0696%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.8998%" y="597" width="0.0802%" height="15" fill="rgb(237,43,8)" fg:x="934" fg:w="1"/><text x="75.1498%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.8998%" y="581" width="0.0802%" height="15" fill="rgb(216,208,3)" fg:x="934" fg:w="1"/><text x="75.1498%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.8998%" y="565" width="0.0802%" height="15" fill="rgb(228,179,44)" fg:x="934" fg:w="1"/><text x="75.1498%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.8998%" y="549" width="0.0802%" height="15" fill="rgb(230,192,27)" fg:x="934" fg:w="1"/><text x="75.1498%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.8998%" y="533" width="0.0802%" height="15" fill="rgb(251,30,38)" fg:x="934" fg:w="1"/><text x="75.1498%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.8998%" y="517" width="0.0802%" height="15" fill="rgb(246,55,52)" fg:x="934" fg:w="1"/><text x="75.1498%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.8998%" y="501" width="0.0802%" height="15" fill="rgb(249,79,26)" fg:x="934" fg:w="1"/><text x="75.1498%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.8998%" y="485" width="0.0802%" height="15" fill="rgb(220,202,16)" fg:x="934" fg:w="1"/><text x="75.1498%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.8998%" y="469" width="0.0802%" height="15" fill="rgb(250,170,23)" fg:x="934" fg:w="1"/><text x="75.1498%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.8998%" y="453" width="0.0802%" height="15" fill="rgb(230,7,37)" fg:x="934" fg:w="1"/><text x="75.1498%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.8998%" y="437" width="0.0802%" height="15" fill="rgb(213,71,1)" fg:x="934" fg:w="1"/><text x="75.1498%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.8998%" y="421" width="0.0802%" height="15" fill="rgb(227,87,39)" fg:x="934" fg:w="1"/><text x="75.1498%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.8998%" y="405" width="0.0802%" height="15" fill="rgb(210,41,29)" fg:x="934" fg:w="1"/><text x="75.1498%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.8998%" y="389" width="0.0802%" height="15" fill="rgb(206,191,31)" fg:x="934" fg:w="1"/><text x="75.1498%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.8998%" y="373" width="0.0802%" height="15" fill="rgb(247,75,54)" fg:x="934" fg:w="1"/><text x="75.1498%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="74.8998%" y="613" width="0.2406%" height="15" fill="rgb(208,54,50)" fg:x="934" fg:w="3"/><text x="75.1498%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="74.9800%" y="597" width="0.1604%" height="15" fill="rgb(214,90,37)" fg:x="935" fg:w="2"/><text x="75.2300%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.9800%" y="581" width="0.1604%" height="15" fill="rgb(220,132,6)" fg:x="935" fg:w="2"/><text x="75.2300%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="74.9800%" y="565" width="0.1604%" height="15" fill="rgb(213,167,7)" fg:x="935" fg:w="2"/><text x="75.2300%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.9800%" y="549" width="0.1604%" height="15" fill="rgb(243,36,27)" fg:x="935" fg:w="2"/><text x="75.2300%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="74.9800%" y="533" width="0.1604%" height="15" fill="rgb(235,147,12)" fg:x="935" fg:w="2"/><text x="75.2300%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.9800%" y="517" width="0.1604%" height="15" fill="rgb(212,198,44)" fg:x="935" fg:w="2"/><text x="75.2300%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.0601%" y="501" width="0.0802%" height="15" fill="rgb(218,68,50)" fg:x="936" fg:w="1"/><text x="75.3101%" y="511.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="75.1403%" y="613" width="0.0802%" height="15" fill="rgb(224,79,48)" fg:x="937" fg:w="1"/><text x="75.3903%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.3007%" y="533" width="0.0802%" height="15" fill="rgb(213,191,50)" fg:x="939" fg:w="1"/><text x="75.5507%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="75.3809%" y="453" width="0.0802%" height="15" fill="rgb(254,146,10)" fg:x="940" fg:w="1"/><text x="75.6309%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="75.3809%" y="517" width="0.2406%" height="15" fill="rgb(215,175,11)" fg:x="940" fg:w="3"/><text x="75.6309%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="75.3809%" y="501" width="0.2406%" height="15" fill="rgb(207,49,7)" fg:x="940" fg:w="3"/><text x="75.6309%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="75.3809%" y="485" width="0.2406%" height="15" fill="rgb(234,144,29)" fg:x="940" fg:w="3"/><text x="75.6309%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="75.3809%" y="469" width="0.2406%" height="15" fill="rgb(213,222,48)" fg:x="940" fg:w="3"/><text x="75.6309%" y="479.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="75.4611%" y="453" width="0.1604%" height="15" fill="rgb(222,8,6)" fg:x="941" fg:w="2"/><text x="75.7111%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="75.4611%" y="437" width="0.1604%" height="15" fill="rgb(221,114,49)" fg:x="941" fg:w="2"/><text x="75.7111%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.4611%" y="421" width="0.1604%" height="15" fill="rgb(250,140,42)" fg:x="941" fg:w="2"/><text x="75.7111%" y="431.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="75.4611%" y="405" width="0.1604%" height="15" fill="rgb(250,150,27)" fg:x="941" fg:w="2"/><text x="75.7111%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="75.4611%" y="389" width="0.1604%" height="15" fill="rgb(252,159,3)" fg:x="941" fg:w="2"/><text x="75.7111%" y="399.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="75.4611%" y="373" width="0.1604%" height="15" fill="rgb(241,182,3)" fg:x="941" fg:w="2"/><text x="75.7111%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="75.6215%" y="517" width="0.0802%" height="15" fill="rgb(236,3,9)" fg:x="943" fg:w="1"/><text x="75.8715%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.6215%" y="501" width="0.0802%" height="15" fill="rgb(223,227,51)" fg:x="943" fg:w="1"/><text x="75.8715%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="75.6215%" y="485" width="0.0802%" height="15" fill="rgb(232,133,30)" fg:x="943" fg:w="1"/><text x="75.8715%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="75.6215%" y="469" width="0.0802%" height="15" fill="rgb(209,93,27)" fg:x="943" fg:w="1"/><text x="75.8715%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.6215%" y="453" width="0.0802%" height="15" fill="rgb(208,108,34)" fg:x="943" fg:w="1"/><text x="75.8715%" y="463.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.7017%" y="485" width="0.0802%" height="15" fill="rgb(215,189,13)" fg:x="944" fg:w="1"/><text x="75.9517%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="75.8621%" y="437" width="0.1604%" height="15" fill="rgb(206,88,23)" fg:x="946" fg:w="2"/><text x="76.1121%" y="447.50"></text></g><g><title>kernel::model::entity::Entity::from_value (11 samples, 0.88%)</title><rect x="75.2205%" y="613" width="0.8821%" height="15" fill="rgb(240,173,0)" fg:x="938" fg:w="11"/><text x="75.4705%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (11 samples, 0.88%)</title><rect x="75.2205%" y="597" width="0.8821%" height="15" fill="rgb(223,106,52)" fg:x="938" fg:w="11"/><text x="75.4705%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (11 samples, 0.88%)</title><rect x="75.2205%" y="581" width="0.8821%" height="15" fill="rgb(206,130,16)" fg:x="938" fg:w="11"/><text x="75.4705%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (10 samples, 0.80%)</title><rect x="75.3007%" y="565" width="0.8019%" height="15" fill="rgb(220,54,25)" fg:x="939" fg:w="10"/><text x="75.5507%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (10 samples, 0.80%)</title><rect x="75.3007%" y="549" width="0.8019%" height="15" fill="rgb(210,4,38)" fg:x="939" fg:w="10"/><text x="75.5507%" y="559.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (9 samples, 0.72%)</title><rect x="75.3809%" y="533" width="0.7217%" height="15" fill="rgb(238,94,39)" fg:x="940" fg:w="9"/><text x="75.6309%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="75.7017%" y="517" width="0.4010%" height="15" fill="rgb(234,124,34)" fg:x="944" fg:w="5"/><text x="75.9517%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="75.7017%" y="501" width="0.4010%" height="15" fill="rgb(221,91,40)" fg:x="944" fg:w="5"/><text x="75.9517%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (4 samples, 0.32%)</title><rect x="75.7819%" y="485" width="0.3208%" height="15" fill="rgb(246,53,28)" fg:x="945" fg:w="4"/><text x="76.0319%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="75.8621%" y="469" width="0.2406%" height="15" fill="rgb(229,109,7)" fg:x="946" fg:w="3"/><text x="76.1121%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="75.8621%" y="453" width="0.2406%" height="15" fill="rgb(249,117,8)" fg:x="946" fg:w="3"/><text x="76.1121%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="76.0225%" y="437" width="0.0802%" height="15" fill="rgb(210,181,1)" fg:x="948" fg:w="1"/><text x="76.2725%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="76.0225%" y="421" width="0.0802%" height="15" fill="rgb(211,66,1)" fg:x="948" fg:w="1"/><text x="76.2725%" y="431.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.0225%" y="405" width="0.0802%" height="15" fill="rgb(221,90,14)" fg:x="948" fg:w="1"/><text x="76.2725%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.1026%" y="549" width="0.0802%" height="15" fill="rgb(219,222,44)" fg:x="949" fg:w="1"/><text x="76.3526%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.1026%" y="533" width="0.0802%" height="15" fill="rgb(246,34,33)" fg:x="949" fg:w="1"/><text x="76.3526%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.1026%" y="517" width="0.0802%" height="15" fill="rgb(227,135,41)" fg:x="949" fg:w="1"/><text x="76.3526%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.1026%" y="501" width="0.0802%" height="15" fill="rgb(226,15,14)" fg:x="949" fg:w="1"/><text x="76.3526%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.1026%" y="485" width="0.0802%" height="15" fill="rgb(236,148,47)" fg:x="949" fg:w="1"/><text x="76.3526%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.1026%" y="469" width="0.0802%" height="15" fill="rgb(233,162,52)" fg:x="949" fg:w="1"/><text x="76.3526%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.1026%" y="453" width="0.0802%" height="15" fill="rgb(244,35,28)" fg:x="949" fg:w="1"/><text x="76.3526%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.1026%" y="437" width="0.0802%" height="15" fill="rgb(205,121,10)" fg:x="949" fg:w="1"/><text x="76.3526%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.1026%" y="421" width="0.0802%" height="15" fill="rgb(250,58,18)" fg:x="949" fg:w="1"/><text x="76.3526%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.1026%" y="405" width="0.0802%" height="15" fill="rgb(216,37,13)" fg:x="949" fg:w="1"/><text x="76.3526%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.1026%" y="389" width="0.0802%" height="15" fill="rgb(221,215,42)" fg:x="949" fg:w="1"/><text x="76.3526%" y="399.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (442 samples, 35.45%)</title><rect x="40.8180%" y="693" width="35.4451%" height="15" fill="rgb(217,214,19)" fg:x="509" fg:w="442"/><text x="41.0680%" y="703.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (442 samples, 35.45%)</title><rect x="40.8180%" y="677" width="35.4451%" height="15" fill="rgb(233,139,13)" fg:x="509" fg:w="442"/><text x="41.0680%" y="687.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (22 samples, 1.76%)</title><rect x="74.4988%" y="661" width="1.7642%" height="15" fill="rgb(247,168,23)" fg:x="929" fg:w="22"/><text x="74.7488%" y="671.50"></text></g><g><title>engine::session::Session::load_entity (22 samples, 1.76%)</title><rect x="74.4988%" y="645" width="1.7642%" height="15" fill="rgb(207,202,1)" fg:x="929" fg:w="22"/><text x="74.7488%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (20 samples, 1.60%)</title><rect x="74.6592%" y="629" width="1.6038%" height="15" fill="rgb(220,155,48)" fg:x="931" fg:w="20"/><text x="74.9092%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="76.1026%" y="613" width="0.1604%" height="15" fill="rgb(250,43,26)" fg:x="949" fg:w="2"/><text x="76.3526%" y="623.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="76.1026%" y="597" width="0.1604%" height="15" fill="rgb(212,190,23)" fg:x="949" fg:w="2"/><text x="76.3526%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="76.1026%" y="581" width="0.1604%" height="15" fill="rgb(216,39,24)" fg:x="949" fg:w="2"/><text x="76.3526%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="76.1026%" y="565" width="0.1604%" height="15" fill="rgb(252,113,16)" fg:x="949" fg:w="2"/><text x="76.3526%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.1828%" y="549" width="0.0802%" height="15" fill="rgb(208,113,19)" fg:x="950" fg:w="1"/><text x="76.4328%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.1828%" y="533" width="0.0802%" height="15" fill="rgb(234,107,25)" fg:x="950" fg:w="1"/><text x="76.4328%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (952 samples, 76.34%)</title><rect x="0.0000%" y="741" width="76.3432%" height="15" fill="rgb(234,217,51)" fg:x="0" fg:w="952"/><text x="0.2500%" y="751.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (952 samples, 76.34%)</title><rect x="0.0000%" y="725" width="76.3432%" height="15" fill="rgb(251,29,42)" fg:x="0" fg:w="952"/><text x="0.2500%" y="735.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (952 samples, 76.34%)</title><rect x="0.0000%" y="709" width="76.3432%" height="15" fill="rgb(221,62,51)" fg:x="0" fg:w="952"/><text x="0.2500%" y="719.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="76.2630%" y="693" width="0.0802%" height="15" fill="rgb(240,192,43)" fg:x="951" fg:w="1"/><text x="76.5130%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (6 samples, 0.48%)</title><rect x="76.4234%" y="677" width="0.4812%" height="15" fill="rgb(224,157,47)" fg:x="953" fg:w="6"/><text x="76.6734%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="76.4234%" y="661" width="0.4812%" height="15" fill="rgb(226,84,45)" fg:x="953" fg:w="6"/><text x="76.6734%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (5 samples, 0.40%)</title><rect x="76.5036%" y="645" width="0.4010%" height="15" fill="rgb(208,207,23)" fg:x="954" fg:w="5"/><text x="76.7536%" y="655.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (5 samples, 0.40%)</title><rect x="76.5036%" y="629" width="0.4010%" height="15" fill="rgb(253,34,51)" fg:x="954" fg:w="5"/><text x="76.7536%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (4 samples, 0.32%)</title><rect x="76.5838%" y="613" width="0.3208%" height="15" fill="rgb(227,26,34)" fg:x="955" fg:w="4"/><text x="76.8338%" y="623.50"></text></g><g><title>__libc_free (4 samples, 0.32%)</title><rect x="76.5838%" y="597" width="0.3208%" height="15" fill="rgb(245,75,19)" fg:x="955" fg:w="4"/><text x="76.8338%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.0650%" y="565" width="0.0802%" height="15" fill="rgb(250,191,31)" fg:x="961" fg:w="1"/><text x="77.3150%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.1451%" y="549" width="0.0802%" height="15" fill="rgb(224,11,50)" fg:x="962" fg:w="1"/><text x="77.3951%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.2253%" y="549" width="0.0802%" height="15" fill="rgb(231,171,7)" fg:x="963" fg:w="1"/><text x="77.4753%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.2253%" y="533" width="0.0802%" height="15" fill="rgb(252,214,10)" fg:x="963" fg:w="1"/><text x="77.4753%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="76.9848%" y="613" width="0.4010%" height="15" fill="rgb(249,45,46)" fg:x="960" fg:w="5"/><text x="77.2348%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (5 samples, 0.40%)</title><rect x="76.9848%" y="597" width="0.4010%" height="15" fill="rgb(240,173,7)" fg:x="960" fg:w="5"/><text x="77.2348%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="77.0650%" y="581" width="0.3208%" height="15" fill="rgb(235,214,13)" fg:x="961" fg:w="4"/><text x="77.3150%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="77.1451%" y="565" width="0.2406%" height="15" fill="rgb(245,156,8)" fg:x="962" fg:w="3"/><text x="77.3951%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="77.3055%" y="549" width="0.0802%" height="15" fill="rgb(235,46,12)" fg:x="964" fg:w="1"/><text x="77.5555%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="77.3055%" y="533" width="0.0802%" height="15" fill="rgb(221,81,14)" fg:x="964" fg:w="1"/><text x="77.5555%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.3055%" y="517" width="0.0802%" height="15" fill="rgb(238,207,9)" fg:x="964" fg:w="1"/><text x="77.5555%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.3055%" y="501" width="0.0802%" height="15" fill="rgb(224,129,35)" fg:x="964" fg:w="1"/><text x="77.5555%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.3055%" y="485" width="0.0802%" height="15" fill="rgb(243,218,34)" fg:x="964" fg:w="1"/><text x="77.5555%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.3055%" y="469" width="0.0802%" height="15" fill="rgb(220,166,13)" fg:x="964" fg:w="1"/><text x="77.5555%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.5461%" y="597" width="0.0802%" height="15" fill="rgb(227,167,49)" fg:x="967" fg:w="1"/><text x="77.7961%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 1.36%)</title><rect x="76.4234%" y="693" width="1.3633%" height="15" fill="rgb(234,142,12)" fg:x="953" fg:w="17"/><text x="76.6734%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (11 samples, 0.88%)</title><rect x="76.9046%" y="677" width="0.8821%" height="15" fill="rgb(207,100,48)" fg:x="959" fg:w="11"/><text x="77.1546%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.88%)</title><rect x="76.9046%" y="661" width="0.8821%" height="15" fill="rgb(210,25,14)" fg:x="959" fg:w="11"/><text x="77.1546%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (11 samples, 0.88%)</title><rect x="76.9046%" y="645" width="0.8821%" height="15" fill="rgb(246,116,27)" fg:x="959" fg:w="11"/><text x="77.1546%" y="655.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.80%)</title><rect x="76.9848%" y="629" width="0.8019%" height="15" fill="rgb(214,193,42)" fg:x="960" fg:w="10"/><text x="77.2348%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="77.3857%" y="613" width="0.4010%" height="15" fill="rgb(214,122,8)" fg:x="965" fg:w="5"/><text x="77.6357%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="77.6263%" y="597" width="0.1604%" height="15" fill="rgb(244,173,18)" fg:x="968" fg:w="2"/><text x="77.8763%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="77.6263%" y="581" width="0.1604%" height="15" fill="rgb(232,68,19)" fg:x="968" fg:w="2"/><text x="77.8763%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.7065%" y="565" width="0.0802%" height="15" fill="rgb(236,224,1)" fg:x="969" fg:w="1"/><text x="77.9565%" y="575.50"></text></g><g><title>&lt;plugins_core::building::actions::BidirectionalDigAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="77.8669%" y="565" width="0.0802%" height="15" fill="rgb(240,11,8)" fg:x="971" fg:w="1"/><text x="78.1169%" y="575.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="77.8669%" y="549" width="0.0802%" height="15" fill="rgb(244,159,20)" fg:x="971" fg:w="1"/><text x="78.1169%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="77.8669%" y="533" width="0.0802%" height="15" fill="rgb(240,223,54)" fg:x="971" fg:w="1"/><text x="78.1169%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.8669%" y="517" width="0.0802%" height="15" fill="rgb(237,146,5)" fg:x="971" fg:w="1"/><text x="78.1169%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.8669%" y="501" width="0.0802%" height="15" fill="rgb(218,221,32)" fg:x="971" fg:w="1"/><text x="78.1169%" y="511.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="77.8669%" y="597" width="0.1604%" height="15" fill="rgb(244,96,26)" fg:x="971" fg:w="2"/><text x="78.1169%" y="607.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="77.8669%" y="581" width="0.1604%" height="15" fill="rgb(245,184,37)" fg:x="971" fg:w="2"/><text x="78.1169%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="77.9471%" y="565" width="0.0802%" height="15" fill="rgb(248,91,47)" fg:x="972" fg:w="1"/><text x="78.1971%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="77.9471%" y="549" width="0.0802%" height="15" fill="rgb(243,199,8)" fg:x="972" fg:w="1"/><text x="78.1971%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.9471%" y="533" width="0.0802%" height="15" fill="rgb(249,12,15)" fg:x="972" fg:w="1"/><text x="78.1971%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.9471%" y="517" width="0.0802%" height="15" fill="rgb(245,97,12)" fg:x="972" fg:w="1"/><text x="78.1971%" y="527.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="78.0273%" y="565" width="0.0802%" height="15" fill="rgb(244,61,1)" fg:x="973" fg:w="1"/><text x="78.2773%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.0273%" y="549" width="0.0802%" height="15" fill="rgb(222,194,10)" fg:x="973" fg:w="1"/><text x="78.2773%" y="559.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (5 samples, 0.40%)</title><rect x="77.7867%" y="613" width="0.4010%" height="15" fill="rgb(226,178,8)" fg:x="970" fg:w="5"/><text x="78.0367%" y="623.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="78.0273%" y="597" width="0.1604%" height="15" fill="rgb(241,32,34)" fg:x="973" fg:w="2"/><text x="78.2773%" y="607.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="78.0273%" y="581" width="0.1604%" height="15" fill="rgb(254,26,6)" fg:x="973" fg:w="2"/><text x="78.2773%" y="591.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="78.1075%" y="565" width="0.0802%" height="15" fill="rgb(249,71,11)" fg:x="974" fg:w="1"/><text x="78.3575%" y="575.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (1 samples, 0.08%)</title><rect x="78.1877%" y="613" width="0.0802%" height="15" fill="rgb(232,170,27)" fg:x="975" fg:w="1"/><text x="78.4377%" y="623.50"></text></g><g><title>libloading::library_filename (1 samples, 0.08%)</title><rect x="78.1877%" y="597" width="0.0802%" height="15" fill="rgb(214,223,17)" fg:x="975" fg:w="1"/><text x="78.4377%" y="607.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (2 samples, 0.16%)</title><rect x="78.2678%" y="597" width="0.1604%" height="15" fill="rgb(250,18,15)" fg:x="976" fg:w="2"/><text x="78.5178%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="78.2678%" y="581" width="0.1604%" height="15" fill="rgb(212,153,51)" fg:x="976" fg:w="2"/><text x="78.5178%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.3480%" y="565" width="0.0802%" height="15" fill="rgb(219,194,12)" fg:x="977" fg:w="1"/><text x="78.5980%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="78.5084%" y="549" width="0.0802%" height="15" fill="rgb(212,58,17)" fg:x="979" fg:w="1"/><text x="78.7584%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.5084%" y="533" width="0.0802%" height="15" fill="rgb(254,5,10)" fg:x="979" fg:w="1"/><text x="78.7584%" y="543.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="78.5084%" y="581" width="0.4010%" height="15" fill="rgb(246,91,7)" fg:x="979" fg:w="5"/><text x="78.7584%" y="591.50"></text></g><g><title>glob::fill_todo (5 samples, 0.40%)</title><rect x="78.5084%" y="565" width="0.4010%" height="15" fill="rgb(218,108,49)" fg:x="979" fg:w="5"/><text x="78.7584%" y="575.50"></text></g><g><title>glob::is_dir (4 samples, 0.32%)</title><rect x="78.5886%" y="549" width="0.3208%" height="15" fill="rgb(238,123,20)" fg:x="980" fg:w="4"/><text x="78.8386%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat (2 samples, 0.16%)</title><rect x="78.7490%" y="533" width="0.1604%" height="15" fill="rgb(231,69,23)" fg:x="982" fg:w="2"/><text x="78.9990%" y="543.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.16%)</title><rect x="78.7490%" y="517" width="0.1604%" height="15" fill="rgb(230,209,3)" fg:x="982" fg:w="2"/><text x="78.9990%" y="527.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.16%)</title><rect x="78.7490%" y="501" width="0.1604%" height="15" fill="rgb(231,19,0)" fg:x="982" fg:w="2"/><text x="78.9990%" y="511.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (2 samples, 0.16%)</title><rect x="78.7490%" y="485" width="0.1604%" height="15" fill="rgb(226,192,25)" fg:x="982" fg:w="2"/><text x="78.9990%" y="495.50"></text></g><g><title>std::sys::unix::fs::try_statx (2 samples, 0.16%)</title><rect x="78.7490%" y="469" width="0.1604%" height="15" fill="rgb(223,175,53)" fg:x="982" fg:w="2"/><text x="78.9990%" y="479.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.16%)</title><rect x="78.7490%" y="453" width="0.1604%" height="15" fill="rgb(248,35,51)" fg:x="982" fg:w="2"/><text x="78.9990%" y="463.50"></text></g><g><title>statx (2 samples, 0.16%)</title><rect x="78.7490%" y="437" width="0.1604%" height="15" fill="rgb(230,37,26)" fg:x="982" fg:w="2"/><text x="78.9990%" y="447.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (9 samples, 0.72%)</title><rect x="78.2678%" y="613" width="0.7217%" height="15" fill="rgb(206,120,22)" fg:x="976" fg:w="9"/><text x="78.5178%" y="623.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (7 samples, 0.56%)</title><rect x="78.4282%" y="597" width="0.5613%" height="15" fill="rgb(207,165,28)" fg:x="978" fg:w="7"/><text x="78.6782%" y="607.50"></text></g><g><title>glob::glob (1 samples, 0.08%)</title><rect x="78.9094%" y="581" width="0.0802%" height="15" fill="rgb(226,23,46)" fg:x="984" fg:w="1"/><text x="79.1594%" y="591.50"></text></g><g><title>glob::glob_with (1 samples, 0.08%)</title><rect x="78.9094%" y="565" width="0.0802%" height="15" fill="rgb(208,130,44)" fg:x="984" fg:w="1"/><text x="79.1594%" y="575.50"></text></g><g><title>&lt;std::path::PathBuf as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="78.9094%" y="549" width="0.0802%" height="15" fill="rgb(231,67,8)" fg:x="984" fg:w="1"/><text x="79.1594%" y="559.50"></text></g><g><title>&lt;std::sys::unix::os_str::Slice as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="78.9094%" y="533" width="0.0802%" height="15" fill="rgb(205,183,22)" fg:x="984" fg:w="1"/><text x="79.1594%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (1 samples, 0.08%)</title><rect x="78.9896%" y="613" width="0.0802%" height="15" fill="rgb(224,47,9)" fg:x="985" fg:w="1"/><text x="79.2396%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.9896%" y="597" width="0.0802%" height="15" fill="rgb(250,183,49)" fg:x="985" fg:w="1"/><text x="79.2396%" y="607.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (17 samples, 1.36%)</title><rect x="77.7867%" y="629" width="1.3633%" height="15" fill="rgb(220,151,39)" fg:x="970" fg:w="17"/><text x="78.0367%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="79.0698%" y="613" width="0.0802%" height="15" fill="rgb(220,118,20)" fg:x="986" fg:w="1"/><text x="79.3198%" y="623.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="79.0698%" y="597" width="0.0802%" height="15" fill="rgb(231,65,51)" fg:x="986" fg:w="1"/><text x="79.3198%" y="607.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (18 samples, 1.44%)</title><rect x="77.7867%" y="693" width="1.4435%" height="15" fill="rgb(253,125,37)" fg:x="970" fg:w="18"/><text x="78.0367%" y="703.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (18 samples, 1.44%)</title><rect x="77.7867%" y="677" width="1.4435%" height="15" fill="rgb(232,102,6)" fg:x="970" fg:w="18"/><text x="78.0367%" y="687.50"></text></g><g><title>engine::session::Session::new (18 samples, 1.44%)</title><rect x="77.7867%" y="661" width="1.4435%" height="15" fill="rgb(251,105,13)" fg:x="970" fg:w="18"/><text x="78.0367%" y="671.50"></text></g><g><title>engine::session::Session::initialize (18 samples, 1.44%)</title><rect x="77.7867%" y="645" width="1.4435%" height="15" fill="rgb(222,179,29)" fg:x="970" fg:w="18"/><text x="78.0367%" y="655.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="79.1500%" y="629" width="0.0802%" height="15" fill="rgb(229,180,53)" fg:x="987" fg:w="1"/><text x="79.4000%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="79.1500%" y="613" width="0.0802%" height="15" fill="rgb(238,104,13)" fg:x="987" fg:w="1"/><text x="79.4000%" y="623.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="79.3103%" y="565" width="0.0802%" height="15" fill="rgb(210,130,5)" fg:x="989" fg:w="1"/><text x="79.5603%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.3103%" y="549" width="0.0802%" height="15" fill="rgb(233,87,49)" fg:x="989" fg:w="1"/><text x="79.5603%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.3103%" y="533" width="0.0802%" height="15" fill="rgb(243,34,9)" fg:x="989" fg:w="1"/><text x="79.5603%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="79.3905%" y="549" width="0.0802%" height="15" fill="rgb(235,225,10)" fg:x="990" fg:w="1"/><text x="79.6405%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.4707%" y="533" width="0.0802%" height="15" fill="rgb(212,0,30)" fg:x="991" fg:w="1"/><text x="79.7207%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.4707%" y="517" width="0.0802%" height="15" fill="rgb(211,177,0)" fg:x="991" fg:w="1"/><text x="79.7207%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.5509%" y="501" width="0.0802%" height="15" fill="rgb(225,220,11)" fg:x="992" fg:w="1"/><text x="79.8009%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="79.5509%" y="517" width="0.1604%" height="15" fill="rgb(215,10,13)" fg:x="992" fg:w="2"/><text x="79.8009%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="79.6311%" y="501" width="0.0802%" height="15" fill="rgb(240,177,14)" fg:x="993" fg:w="1"/><text x="79.8811%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.6311%" y="485" width="0.0802%" height="15" fill="rgb(243,7,39)" fg:x="993" fg:w="1"/><text x="79.8811%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.6311%" y="469" width="0.0802%" height="15" fill="rgb(212,99,0)" fg:x="993" fg:w="1"/><text x="79.8811%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.6311%" y="453" width="0.0802%" height="15" fill="rgb(225,162,48)" fg:x="993" fg:w="1"/><text x="79.8811%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.6311%" y="437" width="0.0802%" height="15" fill="rgb(246,16,25)" fg:x="993" fg:w="1"/><text x="79.8811%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="79.4707%" y="549" width="0.3208%" height="15" fill="rgb(220,150,2)" fg:x="991" fg:w="4"/><text x="79.7207%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="79.5509%" y="533" width="0.2406%" height="15" fill="rgb(237,113,11)" fg:x="992" fg:w="3"/><text x="79.8009%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.7113%" y="517" width="0.0802%" height="15" fill="rgb(236,70,20)" fg:x="994" fg:w="1"/><text x="79.9613%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.7113%" y="501" width="0.0802%" height="15" fill="rgb(234,94,7)" fg:x="994" fg:w="1"/><text x="79.9613%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="79.7113%" y="485" width="0.0802%" height="15" fill="rgb(250,221,0)" fg:x="994" fg:w="1"/><text x="79.9613%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.72%)</title><rect x="79.3103%" y="581" width="0.7217%" height="15" fill="rgb(245,149,46)" fg:x="989" fg:w="9"/><text x="79.5603%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="79.3905%" y="565" width="0.6415%" height="15" fill="rgb(215,37,27)" fg:x="990" fg:w="8"/><text x="79.6405%" y="575.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="79.7915%" y="549" width="0.2406%" height="15" fill="rgb(232,65,3)" fg:x="995" fg:w="3"/><text x="80.0415%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="79.7915%" y="533" width="0.2406%" height="15" fill="rgb(214,2,16)" fg:x="995" fg:w="3"/><text x="80.0415%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="79.7915%" y="517" width="0.2406%" height="15" fill="rgb(227,131,50)" fg:x="995" fg:w="3"/><text x="80.0415%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="79.8717%" y="501" width="0.1604%" height="15" fill="rgb(247,131,45)" fg:x="996" fg:w="2"/><text x="80.1217%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="79.8717%" y="485" width="0.1604%" height="15" fill="rgb(215,97,47)" fg:x="996" fg:w="2"/><text x="80.1217%" y="495.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="79.8717%" y="469" width="0.1604%" height="15" fill="rgb(233,143,12)" fg:x="996" fg:w="2"/><text x="80.1217%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.0321%" y="581" width="0.0802%" height="15" fill="rgb(222,57,17)" fg:x="998" fg:w="1"/><text x="80.2821%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="80.0321%" y="565" width="0.0802%" height="15" fill="rgb(214,119,38)" fg:x="998" fg:w="1"/><text x="80.2821%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.0321%" y="549" width="0.0802%" height="15" fill="rgb(217,28,47)" fg:x="998" fg:w="1"/><text x="80.2821%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="80.0321%" y="533" width="0.0802%" height="15" fill="rgb(231,14,52)" fg:x="998" fg:w="1"/><text x="80.2821%" y="543.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="80.1123%" y="533" width="0.0802%" height="15" fill="rgb(220,158,18)" fg:x="999" fg:w="1"/><text x="80.3623%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.1123%" y="517" width="0.0802%" height="15" fill="rgb(222,143,46)" fg:x="999" fg:w="1"/><text x="80.3623%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.1123%" y="501" width="0.0802%" height="15" fill="rgb(227,165,5)" fg:x="999" fg:w="1"/><text x="80.3623%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="80.1925%" y="533" width="0.0802%" height="15" fill="rgb(216,222,49)" fg:x="1000" fg:w="1"/><text x="80.4425%" y="543.50"></text></g><g><title>engine::session::Session::flush (14 samples, 1.12%)</title><rect x="79.3103%" y="677" width="1.1227%" height="15" fill="rgb(238,73,39)" fg:x="989" fg:w="14"/><text x="79.5603%" y="687.50"></text></g><g><title>engine::session::state::State::close (14 samples, 1.12%)</title><rect x="79.3103%" y="661" width="1.1227%" height="15" fill="rgb(252,115,9)" fg:x="989" fg:w="14"/><text x="79.5603%" y="671.50"></text></g><g><title>engine::session::state::State::flush_entities (14 samples, 1.12%)</title><rect x="79.3103%" y="645" width="1.1227%" height="15" fill="rgb(238,202,4)" fg:x="989" fg:w="14"/><text x="79.5603%" y="655.50"></text></g><g><title>core::iter::adapters::try_process (14 samples, 1.12%)</title><rect x="79.3103%" y="629" width="1.1227%" height="15" fill="rgb(252,153,44)" fg:x="989" fg:w="14"/><text x="79.5603%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (14 samples, 1.12%)</title><rect x="79.3103%" y="613" width="1.1227%" height="15" fill="rgb(235,128,27)" fg:x="989" fg:w="14"/><text x="79.5603%" y="623.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (14 samples, 1.12%)</title><rect x="79.3103%" y="597" width="1.1227%" height="15" fill="rgb(221,121,47)" fg:x="989" fg:w="14"/><text x="79.5603%" y="607.50"></text></g><g><title>kernel::model::any_entity_changes (4 samples, 0.32%)</title><rect x="80.1123%" y="581" width="0.3208%" height="15" fill="rgb(247,211,47)" fg:x="999" fg:w="4"/><text x="80.3623%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="80.1123%" y="565" width="0.3208%" height="15" fill="rgb(252,47,49)" fg:x="999" fg:w="4"/><text x="80.3623%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="80.1123%" y="549" width="0.3208%" height="15" fill="rgb(219,119,53)" fg:x="999" fg:w="4"/><text x="80.3623%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="80.2727%" y="533" width="0.1604%" height="15" fill="rgb(243,165,53)" fg:x="1001" fg:w="2"/><text x="80.5227%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="80.3528%" y="517" width="0.0802%" height="15" fill="rgb(230,12,35)" fg:x="1002" fg:w="1"/><text x="80.6028%" y="527.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="80.4330%" y="629" width="0.0802%" height="15" fill="rgb(239,57,49)" fg:x="1003" fg:w="1"/><text x="80.6830%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="80.4330%" y="613" width="0.0802%" height="15" fill="rgb(231,154,7)" fg:x="1003" fg:w="1"/><text x="80.6830%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="80.4330%" y="597" width="0.0802%" height="15" fill="rgb(248,81,34)" fg:x="1003" fg:w="1"/><text x="80.6830%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="80.4330%" y="581" width="0.0802%" height="15" fill="rgb(247,9,5)" fg:x="1003" fg:w="1"/><text x="80.6830%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="80.4330%" y="565" width="0.0802%" height="15" fill="rgb(228,172,27)" fg:x="1003" fg:w="1"/><text x="80.6830%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="80.4330%" y="549" width="0.0802%" height="15" fill="rgb(230,57,44)" fg:x="1003" fg:w="1"/><text x="80.6830%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.4330%" y="533" width="0.0802%" height="15" fill="rgb(249,35,22)" fg:x="1003" fg:w="1"/><text x="80.6830%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="80.5934%" y="597" width="0.0802%" height="15" fill="rgb(250,137,27)" fg:x="1005" fg:w="1"/><text x="80.8434%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.5934%" y="581" width="0.0802%" height="15" fill="rgb(251,57,31)" fg:x="1005" fg:w="1"/><text x="80.8434%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.5934%" y="565" width="0.0802%" height="15" fill="rgb(238,60,0)" fg:x="1005" fg:w="1"/><text x="80.8434%" y="575.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.32%)</title><rect x="80.4330%" y="677" width="0.3208%" height="15" fill="rgb(242,185,39)" fg:x="1003" fg:w="4"/><text x="80.6830%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="80.4330%" y="661" width="0.3208%" height="15" fill="rgb(240,63,43)" fg:x="1003" fg:w="4"/><text x="80.6830%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="80.4330%" y="645" width="0.3208%" height="15" fill="rgb(236,155,6)" fg:x="1003" fg:w="4"/><text x="80.6830%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="80.5132%" y="629" width="0.2406%" height="15" fill="rgb(215,11,29)" fg:x="1004" fg:w="3"/><text x="80.7632%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="80.5132%" y="613" width="0.2406%" height="15" fill="rgb(228,180,48)" fg:x="1004" fg:w="3"/><text x="80.7632%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="80.6736%" y="597" width="0.0802%" height="15" fill="rgb(241,102,12)" fg:x="1006" fg:w="1"/><text x="80.9236%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="80.6736%" y="581" width="0.0802%" height="15" fill="rgb(246,213,4)" fg:x="1006" fg:w="1"/><text x="80.9236%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="80.6736%" y="565" width="0.0802%" height="15" fill="rgb(218,134,35)" fg:x="1006" fg:w="1"/><text x="80.9236%" y="575.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (2 samples, 0.16%)</title><rect x="80.7538%" y="677" width="0.1604%" height="15" fill="rgb(251,117,35)" fg:x="1007" fg:w="2"/><text x="81.0038%" y="687.50"></text></g><g><title>plugins_core::tools::set_quantity (2 samples, 0.16%)</title><rect x="80.7538%" y="661" width="0.1604%" height="15" fill="rgb(206,156,45)" fg:x="1007" fg:w="2"/><text x="81.0038%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="80.8340%" y="645" width="0.0802%" height="15" fill="rgb(218,52,27)" fg:x="1008" fg:w="1"/><text x="81.0840%" y="655.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (1 samples, 0.08%)</title><rect x="80.8340%" y="629" width="0.0802%" height="15" fill="rgb(238,83,36)" fg:x="1008" fg:w="1"/><text x="81.0840%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.8340%" y="613" width="0.0802%" height="15" fill="rgb(218,53,43)" fg:x="1008" fg:w="1"/><text x="81.0840%" y="623.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Kind&gt;::serialize (1 samples, 0.08%)</title><rect x="80.8340%" y="597" width="0.0802%" height="15" fill="rgb(239,54,39)" fg:x="1008" fg:w="1"/><text x="81.0840%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.8340%" y="581" width="0.0802%" height="15" fill="rgb(212,198,13)" fg:x="1008" fg:w="1"/><text x="81.0840%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="80.8340%" y="565" width="0.0802%" height="15" fill="rgb(234,54,46)" fg:x="1008" fg:w="1"/><text x="81.0840%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.8340%" y="549" width="0.0802%" height="15" fill="rgb(217,120,7)" fg:x="1008" fg:w="1"/><text x="81.0840%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.8340%" y="533" width="0.0802%" height="15" fill="rgb(246,39,15)" fg:x="1008" fg:w="1"/><text x="81.0840%" y="543.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="80.9142%" y="613" width="0.1604%" height="15" fill="rgb(242,143,31)" fg:x="1009" fg:w="2"/><text x="81.1642%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="80.9944%" y="597" width="0.0802%" height="15" fill="rgb(252,60,24)" fg:x="1010" fg:w="1"/><text x="81.2444%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.9944%" y="581" width="0.0802%" height="15" fill="rgb(249,220,7)" fg:x="1010" fg:w="1"/><text x="81.2444%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.9944%" y="565" width="0.0802%" height="15" fill="rgb(236,67,13)" fg:x="1010" fg:w="1"/><text x="81.2444%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="80.9944%" y="549" width="0.0802%" height="15" fill="rgb(210,62,39)" fg:x="1010" fg:w="1"/><text x="81.2444%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.9944%" y="533" width="0.0802%" height="15" fill="rgb(219,122,53)" fg:x="1010" fg:w="1"/><text x="81.2444%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.9944%" y="517" width="0.0802%" height="15" fill="rgb(218,87,25)" fg:x="1010" fg:w="1"/><text x="81.2444%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="80.9944%" y="501" width="0.0802%" height="15" fill="rgb(234,179,48)" fg:x="1010" fg:w="1"/><text x="81.2444%" y="511.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="80.9142%" y="645" width="0.2406%" height="15" fill="rgb(248,90,0)" fg:x="1009" fg:w="3"/><text x="81.1642%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="80.9142%" y="629" width="0.2406%" height="15" fill="rgb(207,228,37)" fg:x="1009" fg:w="3"/><text x="81.1642%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="81.0746%" y="613" width="0.0802%" height="15" fill="rgb(235,214,15)" fg:x="1011" fg:w="1"/><text x="81.3246%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="81.0746%" y="597" width="0.0802%" height="15" fill="rgb(210,144,39)" fg:x="1011" fg:w="1"/><text x="81.3246%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.0746%" y="581" width="0.0802%" height="15" fill="rgb(222,67,41)" fg:x="1011" fg:w="1"/><text x="81.3246%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.0746%" y="565" width="0.0802%" height="15" fill="rgb(205,35,37)" fg:x="1011" fg:w="1"/><text x="81.3246%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.0746%" y="549" width="0.0802%" height="15" fill="rgb(216,125,40)" fg:x="1011" fg:w="1"/><text x="81.3246%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.0746%" y="533" width="0.0802%" height="15" fill="rgb(228,227,20)" fg:x="1011" fg:w="1"/><text x="81.3246%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.0746%" y="517" width="0.0802%" height="15" fill="rgb(242,173,45)" fg:x="1011" fg:w="1"/><text x="81.3246%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="81.0746%" y="501" width="0.0802%" height="15" fill="rgb(215,79,24)" fg:x="1011" fg:w="1"/><text x="81.3246%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="81.0746%" y="485" width="0.0802%" height="15" fill="rgb(238,164,38)" fg:x="1011" fg:w="1"/><text x="81.3246%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="81.0746%" y="469" width="0.0802%" height="15" fill="rgb(245,196,38)" fg:x="1011" fg:w="1"/><text x="81.3246%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="81.0746%" y="453" width="0.0802%" height="15" fill="rgb(231,217,29)" fg:x="1011" fg:w="1"/><text x="81.3246%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="81.0746%" y="437" width="0.0802%" height="15" fill="rgb(245,6,4)" fg:x="1011" fg:w="1"/><text x="81.3246%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="81.0746%" y="421" width="0.0802%" height="15" fill="rgb(214,76,49)" fg:x="1011" fg:w="1"/><text x="81.3246%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="81.0746%" y="405" width="0.0802%" height="15" fill="rgb(205,96,12)" fg:x="1011" fg:w="1"/><text x="81.3246%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="81.0746%" y="389" width="0.0802%" height="15" fill="rgb(243,131,4)" fg:x="1011" fg:w="1"/><text x="81.3246%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="81.0746%" y="373" width="0.0802%" height="15" fill="rgb(214,114,4)" fg:x="1011" fg:w="1"/><text x="81.3246%" y="383.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="81.1548%" y="645" width="0.0802%" height="15" fill="rgb(234,215,15)" fg:x="1012" fg:w="1"/><text x="81.4048%" y="655.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="81.1548%" y="629" width="0.0802%" height="15" fill="rgb(250,216,45)" fg:x="1012" fg:w="1"/><text x="81.4048%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.1548%" y="613" width="0.0802%" height="15" fill="rgb(236,128,4)" fg:x="1012" fg:w="1"/><text x="81.4048%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="81.1548%" y="597" width="0.0802%" height="15" fill="rgb(234,50,33)" fg:x="1012" fg:w="1"/><text x="81.4048%" y="607.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="81.1548%" y="581" width="0.0802%" height="15" fill="rgb(253,131,37)" fg:x="1012" fg:w="1"/><text x="81.4048%" y="591.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="81.2350%" y="645" width="0.0802%" height="15" fill="rgb(218,55,27)" fg:x="1013" fg:w="1"/><text x="81.4850%" y="655.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="81.2350%" y="629" width="0.0802%" height="15" fill="rgb(241,220,28)" fg:x="1013" fg:w="1"/><text x="81.4850%" y="639.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="81.2350%" y="613" width="0.0802%" height="15" fill="rgb(241,90,48)" fg:x="1013" fg:w="1"/><text x="81.4850%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="81.2350%" y="597" width="0.0802%" height="15" fill="rgb(216,43,37)" fg:x="1013" fg:w="1"/><text x="81.4850%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="81.2350%" y="581" width="0.0802%" height="15" fill="rgb(207,173,9)" fg:x="1013" fg:w="1"/><text x="81.4850%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="81.2350%" y="565" width="0.0802%" height="15" fill="rgb(240,126,30)" fg:x="1013" fg:w="1"/><text x="81.4850%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.2350%" y="549" width="0.0802%" height="15" fill="rgb(228,178,53)" fg:x="1013" fg:w="1"/><text x="81.4850%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="81.2350%" y="533" width="0.0802%" height="15" fill="rgb(217,33,4)" fg:x="1013" fg:w="1"/><text x="81.4850%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.2350%" y="517" width="0.0802%" height="15" fill="rgb(206,124,34)" fg:x="1013" fg:w="1"/><text x="81.4850%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="81.2350%" y="501" width="0.0802%" height="15" fill="rgb(208,122,53)" fg:x="1013" fg:w="1"/><text x="81.4850%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.2350%" y="485" width="0.0802%" height="15" fill="rgb(215,202,26)" fg:x="1013" fg:w="1"/><text x="81.4850%" y="495.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (6 samples, 0.48%)</title><rect x="80.9142%" y="677" width="0.4812%" height="15" fill="rgb(232,198,31)" fg:x="1009" fg:w="6"/><text x="81.1642%" y="687.50"></text></g><g><title>plugins_core::tools::set_container (6 samples, 0.48%)</title><rect x="80.9142%" y="661" width="0.4812%" height="15" fill="rgb(222,23,35)" fg:x="1009" fg:w="6"/><text x="81.1642%" y="671.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="81.3152%" y="645" width="0.0802%" height="15" fill="rgb(242,27,53)" fg:x="1014" fg:w="1"/><text x="81.5652%" y="655.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="81.3152%" y="629" width="0.0802%" height="15" fill="rgb(210,216,42)" fg:x="1014" fg:w="1"/><text x="81.5652%" y="639.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="81.3152%" y="613" width="0.0802%" height="15" fill="rgb(234,39,38)" fg:x="1014" fg:w="1"/><text x="81.5652%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.3152%" y="597" width="0.0802%" height="15" fill="rgb(235,126,54)" fg:x="1014" fg:w="1"/><text x="81.5652%" y="607.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="81.3152%" y="581" width="0.0802%" height="15" fill="rgb(235,150,33)" fg:x="1014" fg:w="1"/><text x="81.5652%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.3953%" y="629" width="0.0802%" height="15" fill="rgb(249,49,53)" fg:x="1015" fg:w="1"/><text x="81.6453%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.3953%" y="613" width="0.0802%" height="15" fill="rgb(238,60,50)" fg:x="1015" fg:w="1"/><text x="81.6453%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="81.3953%" y="597" width="0.0802%" height="15" fill="rgb(210,5,2)" fg:x="1015" fg:w="1"/><text x="81.6453%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="81.3953%" y="581" width="0.0802%" height="15" fill="rgb(214,207,24)" fg:x="1015" fg:w="1"/><text x="81.6453%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="81.3953%" y="565" width="0.0802%" height="15" fill="rgb(228,173,2)" fg:x="1015" fg:w="1"/><text x="81.6453%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="81.3953%" y="549" width="0.0802%" height="15" fill="rgb(244,26,8)" fg:x="1015" fg:w="1"/><text x="81.6453%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="81.3953%" y="533" width="0.0802%" height="15" fill="rgb(249,153,35)" fg:x="1015" fg:w="1"/><text x="81.6453%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="81.3953%" y="517" width="0.0802%" height="15" fill="rgb(221,215,40)" fg:x="1015" fg:w="1"/><text x="81.6453%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="81.3953%" y="501" width="0.0802%" height="15" fill="rgb(238,106,35)" fg:x="1015" fg:w="1"/><text x="81.6453%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="81.3953%" y="485" width="0.0802%" height="15" fill="rgb(207,195,21)" fg:x="1015" fg:w="1"/><text x="81.6453%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="81.3953%" y="469" width="0.0802%" height="15" fill="rgb(205,43,29)" fg:x="1015" fg:w="1"/><text x="81.6453%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.3953%" y="453" width="0.0802%" height="15" fill="rgb(236,35,21)" fg:x="1015" fg:w="1"/><text x="81.6453%" y="463.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="81.3953%" y="645" width="0.1604%" height="15" fill="rgb(244,74,8)" fg:x="1015" fg:w="2"/><text x="81.6453%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.4755%" y="629" width="0.0802%" height="15" fill="rgb(241,229,7)" fg:x="1016" fg:w="1"/><text x="81.7255%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="81.4755%" y="613" width="0.0802%" height="15" fill="rgb(212,223,25)" fg:x="1016" fg:w="1"/><text x="81.7255%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.4755%" y="597" width="0.0802%" height="15" fill="rgb(234,58,53)" fg:x="1016" fg:w="1"/><text x="81.7255%" y="607.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="81.5557%" y="597" width="0.0802%" height="15" fill="rgb(244,36,1)" fg:x="1017" fg:w="1"/><text x="81.8057%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="81.5557%" y="581" width="0.0802%" height="15" fill="rgb(222,40,54)" fg:x="1017" fg:w="1"/><text x="81.8057%" y="591.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="81.5557%" y="565" width="0.0802%" height="15" fill="rgb(210,207,39)" fg:x="1017" fg:w="1"/><text x="81.8057%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="81.6359%" y="549" width="0.0802%" height="15" fill="rgb(234,52,14)" fg:x="1018" fg:w="1"/><text x="81.8859%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="81.6359%" y="533" width="0.0802%" height="15" fill="rgb(239,108,46)" fg:x="1018" fg:w="1"/><text x="81.8859%" y="543.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="81.6359%" y="517" width="0.0802%" height="15" fill="rgb(252,223,5)" fg:x="1018" fg:w="1"/><text x="81.8859%" y="527.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="81.6359%" y="501" width="0.0802%" height="15" fill="rgb(227,181,11)" fg:x="1018" fg:w="1"/><text x="81.8859%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.6359%" y="485" width="0.0802%" height="15" fill="rgb(248,126,40)" fg:x="1018" fg:w="1"/><text x="81.8859%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="81.6359%" y="469" width="0.0802%" height="15" fill="rgb(243,1,18)" fg:x="1018" fg:w="1"/><text x="81.8859%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.6359%" y="453" width="0.0802%" height="15" fill="rgb(214,145,23)" fg:x="1018" fg:w="1"/><text x="81.8859%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.6359%" y="437" width="0.0802%" height="15" fill="rgb(241,218,11)" fg:x="1018" fg:w="1"/><text x="81.8859%" y="447.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="81.7161%" y="533" width="0.0802%" height="15" fill="rgb(214,219,24)" fg:x="1019" fg:w="1"/><text x="81.9661%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="81.7161%" y="517" width="0.0802%" height="15" fill="rgb(235,32,7)" fg:x="1019" fg:w="1"/><text x="81.9661%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.7161%" y="501" width="0.0802%" height="15" fill="rgb(227,121,28)" fg:x="1019" fg:w="1"/><text x="81.9661%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="81.8765%" y="469" width="0.0802%" height="15" fill="rgb(216,129,49)" fg:x="1021" fg:w="1"/><text x="82.1265%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.8765%" y="453" width="0.0802%" height="15" fill="rgb(207,194,50)" fg:x="1021" fg:w="1"/><text x="82.1265%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="81.8765%" y="437" width="0.0802%" height="15" fill="rgb(207,4,18)" fg:x="1021" fg:w="1"/><text x="82.1265%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.8765%" y="421" width="0.0802%" height="15" fill="rgb(213,50,30)" fg:x="1021" fg:w="1"/><text x="82.1265%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="81.8765%" y="405" width="0.0802%" height="15" fill="rgb(208,77,22)" fg:x="1021" fg:w="1"/><text x="82.1265%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.8765%" y="389" width="0.0802%" height="15" fill="rgb(244,204,34)" fg:x="1021" fg:w="1"/><text x="82.1265%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="81.8765%" y="373" width="0.0802%" height="15" fill="rgb(230,20,17)" fg:x="1021" fg:w="1"/><text x="82.1265%" y="383.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="81.8765%" y="485" width="0.1604%" height="15" fill="rgb(237,83,15)" fg:x="1021" fg:w="2"/><text x="82.1265%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="81.9567%" y="469" width="0.0802%" height="15" fill="rgb(221,109,25)" fg:x="1022" fg:w="1"/><text x="82.2067%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.9567%" y="453" width="0.0802%" height="15" fill="rgb(205,194,52)" fg:x="1022" fg:w="1"/><text x="82.2067%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="81.9567%" y="437" width="0.0802%" height="15" fill="rgb(244,173,54)" fg:x="1022" fg:w="1"/><text x="82.2067%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="81.8765%" y="501" width="0.2406%" height="15" fill="rgb(227,181,18)" fg:x="1021" fg:w="3"/><text x="82.1265%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.0369%" y="485" width="0.0802%" height="15" fill="rgb(238,36,30)" fg:x="1023" fg:w="1"/><text x="82.2869%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="81.7963%" y="533" width="0.4010%" height="15" fill="rgb(254,85,0)" fg:x="1020" fg:w="5"/><text x="82.0463%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="81.8765%" y="517" width="0.3208%" height="15" fill="rgb(247,63,33)" fg:x="1021" fg:w="4"/><text x="82.1265%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.1171%" y="501" width="0.0802%" height="15" fill="rgb(220,7,54)" fg:x="1024" fg:w="1"/><text x="82.3671%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.56%)</title><rect x="81.7161%" y="549" width="0.5613%" height="15" fill="rgb(238,227,21)" fg:x="1019" fg:w="7"/><text x="81.9661%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.1973%" y="533" width="0.0802%" height="15" fill="rgb(237,29,31)" fg:x="1025" fg:w="1"/><text x="82.4473%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="82.1973%" y="517" width="0.0802%" height="15" fill="rgb(211,21,50)" fg:x="1025" fg:w="1"/><text x="82.4473%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="82.1973%" y="501" width="0.0802%" height="15" fill="rgb(239,119,2)" fg:x="1025" fg:w="1"/><text x="82.4473%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="82.1973%" y="485" width="0.0802%" height="15" fill="rgb(250,2,39)" fg:x="1025" fg:w="1"/><text x="82.4473%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="82.2775%" y="501" width="0.0802%" height="15" fill="rgb(244,46,53)" fg:x="1026" fg:w="1"/><text x="82.5275%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="82.2775%" y="549" width="0.1604%" height="15" fill="rgb(209,21,19)" fg:x="1026" fg:w="2"/><text x="82.5275%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="82.2775%" y="533" width="0.1604%" height="15" fill="rgb(236,145,4)" fg:x="1026" fg:w="2"/><text x="82.5275%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="82.2775%" y="517" width="0.1604%" height="15" fill="rgb(220,133,36)" fg:x="1026" fg:w="2"/><text x="82.5275%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="82.3577%" y="501" width="0.0802%" height="15" fill="rgb(244,18,3)" fg:x="1027" fg:w="1"/><text x="82.6077%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="82.3577%" y="485" width="0.0802%" height="15" fill="rgb(232,171,48)" fg:x="1027" fg:w="1"/><text x="82.6077%" y="495.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="82.4379%" y="533" width="0.0802%" height="15" fill="rgb(223,223,53)" fg:x="1028" fg:w="1"/><text x="82.6879%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.5180%" y="501" width="0.0802%" height="15" fill="rgb(246,92,13)" fg:x="1029" fg:w="1"/><text x="82.7680%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="82.5982%" y="501" width="0.0802%" height="15" fill="rgb(229,171,10)" fg:x="1030" fg:w="1"/><text x="82.8482%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_struct (1 samples, 0.08%)</title><rect x="82.5982%" y="485" width="0.0802%" height="15" fill="rgb(213,131,26)" fg:x="1030" fg:w="1"/><text x="82.8482%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="82.7586%" y="469" width="0.0802%" height="15" fill="rgb(242,87,54)" fg:x="1032" fg:w="1"/><text x="83.0086%" y="479.50"></text></g><g><title>engine::session::Session::flush (19 samples, 1.52%)</title><rect x="81.3953%" y="661" width="1.5237%" height="15" fill="rgb(237,21,35)" fg:x="1015" fg:w="19"/><text x="81.6453%" y="671.50"></text></g><g><title>engine::session::Session::save_changes (17 samples, 1.36%)</title><rect x="81.5557%" y="645" width="1.3633%" height="15" fill="rgb(253,13,47)" fg:x="1017" fg:w="17"/><text x="81.8057%" y="655.50"></text></g><g><title>engine::session::state::State::close (17 samples, 1.36%)</title><rect x="81.5557%" y="629" width="1.3633%" height="15" fill="rgb(215,122,49)" fg:x="1017" fg:w="17"/><text x="81.8057%" y="639.50"></text></g><g><title>engine::session::state::State::flush_entities (17 samples, 1.36%)</title><rect x="81.5557%" y="613" width="1.3633%" height="15" fill="rgb(209,179,30)" fg:x="1017" fg:w="17"/><text x="81.8057%" y="623.50"></text></g><g><title>core::iter::adapters::try_process (16 samples, 1.28%)</title><rect x="81.6359%" y="597" width="1.2831%" height="15" fill="rgb(235,100,24)" fg:x="1018" fg:w="16"/><text x="81.8859%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (16 samples, 1.28%)</title><rect x="81.6359%" y="581" width="1.2831%" height="15" fill="rgb(209,67,24)" fg:x="1018" fg:w="16"/><text x="81.8859%" y="591.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (16 samples, 1.28%)</title><rect x="81.6359%" y="565" width="1.2831%" height="15" fill="rgb(206,74,32)" fg:x="1018" fg:w="16"/><text x="81.8859%" y="575.50"></text></g><g><title>kernel::model::any_entity_changes (6 samples, 0.48%)</title><rect x="82.4379%" y="549" width="0.4812%" height="15" fill="rgb(212,45,25)" fg:x="1028" fg:w="6"/><text x="82.6879%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.40%)</title><rect x="82.5180%" y="533" width="0.4010%" height="15" fill="rgb(239,26,3)" fg:x="1029" fg:w="5"/><text x="82.7680%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="82.5180%" y="517" width="0.4010%" height="15" fill="rgb(218,36,15)" fg:x="1029" fg:w="5"/><text x="82.7680%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="82.6784%" y="501" width="0.2406%" height="15" fill="rgb(206,108,24)" fg:x="1031" fg:w="3"/><text x="82.9284%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="82.7586%" y="485" width="0.1604%" height="15" fill="rgb(234,204,42)" fg:x="1032" fg:w="2"/><text x="83.0086%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="82.8388%" y="469" width="0.0802%" height="15" fill="rgb(229,2,11)" fg:x="1033" fg:w="1"/><text x="83.0888%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.8388%" y="453" width="0.0802%" height="15" fill="rgb(221,20,48)" fg:x="1033" fg:w="1"/><text x="83.0888%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.8388%" y="437" width="0.0802%" height="15" fill="rgb(244,164,10)" fg:x="1033" fg:w="1"/><text x="83.0888%" y="447.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="82.9190%" y="581" width="0.0802%" height="15" fill="rgb(243,229,2)" fg:x="1034" fg:w="1"/><text x="83.1690%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.9190%" y="565" width="0.0802%" height="15" fill="rgb(232,131,37)" fg:x="1034" fg:w="1"/><text x="83.1690%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.9190%" y="549" width="0.0802%" height="15" fill="rgb(217,156,11)" fg:x="1034" fg:w="1"/><text x="83.1690%" y="559.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="82.9992%" y="581" width="0.0802%" height="15" fill="rgb(239,99,48)" fg:x="1035" fg:w="1"/><text x="83.2492%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.9992%" y="565" width="0.0802%" height="15" fill="rgb(231,209,9)" fg:x="1035" fg:w="1"/><text x="83.2492%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="82.9992%" y="549" width="0.0802%" height="15" fill="rgb(254,97,27)" fg:x="1035" fg:w="1"/><text x="83.2492%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.0794%" y="549" width="0.0802%" height="15" fill="rgb(223,151,38)" fg:x="1036" fg:w="1"/><text x="83.3294%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.0794%" y="533" width="0.0802%" height="15" fill="rgb(219,206,35)" fg:x="1036" fg:w="1"/><text x="83.3294%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="83.1596%" y="533" width="0.0802%" height="15" fill="rgb(216,130,31)" fg:x="1037" fg:w="1"/><text x="83.4096%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.1596%" y="517" width="0.0802%" height="15" fill="rgb(251,97,34)" fg:x="1037" fg:w="1"/><text x="83.4096%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.1596%" y="501" width="0.0802%" height="15" fill="rgb(246,159,47)" fg:x="1037" fg:w="1"/><text x="83.4096%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="83.1596%" y="485" width="0.0802%" height="15" fill="rgb(232,87,10)" fg:x="1037" fg:w="1"/><text x="83.4096%" y="495.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (5 samples, 0.40%)</title><rect x="82.9190%" y="613" width="0.4010%" height="15" fill="rgb(249,1,37)" fg:x="1034" fg:w="5"/><text x="83.1690%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (5 samples, 0.40%)</title><rect x="82.9190%" y="597" width="0.4010%" height="15" fill="rgb(239,135,14)" fg:x="1034" fg:w="5"/><text x="83.1690%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (3 samples, 0.24%)</title><rect x="83.0794%" y="581" width="0.2406%" height="15" fill="rgb(253,116,46)" fg:x="1036" fg:w="3"/><text x="83.3294%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (3 samples, 0.24%)</title><rect x="83.0794%" y="565" width="0.2406%" height="15" fill="rgb(222,217,37)" fg:x="1036" fg:w="3"/><text x="83.3294%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="83.1596%" y="549" width="0.1604%" height="15" fill="rgb(252,96,8)" fg:x="1037" fg:w="2"/><text x="83.4096%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.2398%" y="533" width="0.0802%" height="15" fill="rgb(254,103,41)" fg:x="1038" fg:w="1"/><text x="83.4898%" y="543.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.48%)</title><rect x="82.9190%" y="661" width="0.4812%" height="15" fill="rgb(218,213,19)" fg:x="1034" fg:w="6"/><text x="83.1690%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.48%)</title><rect x="82.9190%" y="645" width="0.4812%" height="15" fill="rgb(253,95,21)" fg:x="1034" fg:w="6"/><text x="83.1690%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (6 samples, 0.48%)</title><rect x="82.9190%" y="629" width="0.4812%" height="15" fill="rgb(229,26,28)" fg:x="1034" fg:w="6"/><text x="83.1690%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="83.3200%" y="613" width="0.0802%" height="15" fill="rgb(230,129,16)" fg:x="1039" fg:w="1"/><text x="83.5700%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="83.3200%" y="597" width="0.0802%" height="15" fill="rgb(236,126,17)" fg:x="1039" fg:w="1"/><text x="83.5700%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.3200%" y="581" width="0.0802%" height="15" fill="rgb(209,33,33)" fg:x="1039" fg:w="1"/><text x="83.5700%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.4804%" y="501" width="0.0802%" height="15" fill="rgb(227,85,29)" fg:x="1041" fg:w="1"/><text x="83.7304%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="83.4804%" y="485" width="0.0802%" height="15" fill="rgb(241,53,46)" fg:x="1041" fg:w="1"/><text x="83.7304%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="83.4804%" y="469" width="0.0802%" height="15" fill="rgb(228,167,53)" fg:x="1041" fg:w="1"/><text x="83.7304%" y="479.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="83.4002%" y="629" width="0.2406%" height="15" fill="rgb(238,195,45)" fg:x="1040" fg:w="3"/><text x="83.6502%" y="639.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="83.4002%" y="613" width="0.2406%" height="15" fill="rgb(252,124,45)" fg:x="1040" fg:w="3"/><text x="83.6502%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="83.4002%" y="597" width="0.2406%" height="15" fill="rgb(251,38,35)" fg:x="1040" fg:w="3"/><text x="83.6502%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="83.4002%" y="581" width="0.2406%" height="15" fill="rgb(227,33,2)" fg:x="1040" fg:w="3"/><text x="83.6502%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="83.4002%" y="565" width="0.2406%" height="15" fill="rgb(223,157,46)" fg:x="1040" fg:w="3"/><text x="83.6502%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="83.4002%" y="549" width="0.2406%" height="15" fill="rgb(222,78,41)" fg:x="1040" fg:w="3"/><text x="83.6502%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="83.4804%" y="533" width="0.1604%" height="15" fill="rgb(248,176,11)" fg:x="1041" fg:w="2"/><text x="83.7304%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="83.4804%" y="517" width="0.1604%" height="15" fill="rgb(241,221,18)" fg:x="1041" fg:w="2"/><text x="83.7304%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="83.5605%" y="501" width="0.0802%" height="15" fill="rgb(218,85,22)" fg:x="1042" fg:w="1"/><text x="83.8105%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.5605%" y="485" width="0.0802%" height="15" fill="rgb(222,223,7)" fg:x="1042" fg:w="1"/><text x="83.8105%" y="495.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="83.5605%" y="469" width="0.0802%" height="15" fill="rgb(254,59,39)" fg:x="1042" fg:w="1"/><text x="83.8105%" y="479.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (4 samples, 0.32%)</title><rect x="83.4002%" y="661" width="0.3208%" height="15" fill="rgb(247,100,27)" fg:x="1040" fg:w="4"/><text x="83.6502%" y="671.50"></text></g><g><title>plugins_core::tools::set_occupying (4 samples, 0.32%)</title><rect x="83.4002%" y="645" width="0.3208%" height="15" fill="rgb(237,207,10)" fg:x="1040" fg:w="4"/><text x="83.6502%" y="655.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="83.6407%" y="629" width="0.0802%" height="15" fill="rgb(220,121,28)" fg:x="1043" fg:w="1"/><text x="83.8907%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="83.6407%" y="613" width="0.0802%" height="15" fill="rgb(213,223,20)" fg:x="1043" fg:w="1"/><text x="83.8907%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.6407%" y="597" width="0.0802%" height="15" fill="rgb(205,121,27)" fg:x="1043" fg:w="1"/><text x="83.8907%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="83.6407%" y="581" width="0.0802%" height="15" fill="rgb(253,24,53)" fg:x="1043" fg:w="1"/><text x="83.8907%" y="591.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="83.7209%" y="597" width="0.0802%" height="15" fill="rgb(224,224,47)" fg:x="1044" fg:w="1"/><text x="83.9709%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="83.7209%" y="581" width="0.0802%" height="15" fill="rgb(250,125,36)" fg:x="1044" fg:w="1"/><text x="83.9709%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.7209%" y="565" width="0.0802%" height="15" fill="rgb(240,144,38)" fg:x="1044" fg:w="1"/><text x="83.9709%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.7209%" y="549" width="0.0802%" height="15" fill="rgb(250,15,50)" fg:x="1044" fg:w="1"/><text x="83.9709%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.7209%" y="533" width="0.0802%" height="15" fill="rgb(210,24,26)" fg:x="1044" fg:w="1"/><text x="83.9709%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="83.7209%" y="517" width="0.0802%" height="15" fill="rgb(234,53,53)" fg:x="1044" fg:w="1"/><text x="83.9709%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="83.7209%" y="501" width="0.0802%" height="15" fill="rgb(208,108,28)" fg:x="1044" fg:w="1"/><text x="83.9709%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="83.7209%" y="485" width="0.0802%" height="15" fill="rgb(227,143,7)" fg:x="1044" fg:w="1"/><text x="83.9709%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="83.7209%" y="469" width="0.0802%" height="15" fill="rgb(238,189,38)" fg:x="1044" fg:w="1"/><text x="83.9709%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="83.7209%" y="453" width="0.0802%" height="15" fill="rgb(222,69,15)" fg:x="1044" fg:w="1"/><text x="83.9709%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="83.7209%" y="437" width="0.0802%" height="15" fill="rgb(213,169,7)" fg:x="1044" fg:w="1"/><text x="83.9709%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="83.7209%" y="421" width="0.0802%" height="15" fill="rgb(251,219,4)" fg:x="1044" fg:w="1"/><text x="83.9709%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="83.7209%" y="405" width="0.0802%" height="15" fill="rgb(241,55,40)" fg:x="1044" fg:w="1"/><text x="83.9709%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="83.7209%" y="389" width="0.0802%" height="15" fill="rgb(243,57,30)" fg:x="1044" fg:w="1"/><text x="83.9709%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="83.7209%" y="373" width="0.0802%" height="15" fill="rgb(234,50,30)" fg:x="1044" fg:w="1"/><text x="83.9709%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="83.7209%" y="357" width="0.0802%" height="15" fill="rgb(239,23,42)" fg:x="1044" fg:w="1"/><text x="83.9709%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.7209%" y="341" width="0.0802%" height="15" fill="rgb(217,38,19)" fg:x="1044" fg:w="1"/><text x="83.9709%" y="351.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="83.7209%" y="645" width="0.1604%" height="15" fill="rgb(215,179,16)" fg:x="1044" fg:w="2"/><text x="83.9709%" y="655.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="83.7209%" y="629" width="0.1604%" height="15" fill="rgb(254,21,37)" fg:x="1044" fg:w="2"/><text x="83.9709%" y="639.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="83.7209%" y="613" width="0.1604%" height="15" fill="rgb(219,207,48)" fg:x="1044" fg:w="2"/><text x="83.9709%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="83.8011%" y="597" width="0.0802%" height="15" fill="rgb(227,225,41)" fg:x="1045" fg:w="1"/><text x="84.0511%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="83.8011%" y="581" width="0.0802%" height="15" fill="rgb(223,130,1)" fg:x="1045" fg:w="1"/><text x="84.0511%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="83.8011%" y="565" width="0.0802%" height="15" fill="rgb(249,54,42)" fg:x="1045" fg:w="1"/><text x="84.0511%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.8011%" y="549" width="0.0802%" height="15" fill="rgb(248,69,25)" fg:x="1045" fg:w="1"/><text x="84.0511%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="83.8011%" y="533" width="0.0802%" height="15" fill="rgb(234,21,32)" fg:x="1045" fg:w="1"/><text x="84.0511%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.8011%" y="517" width="0.0802%" height="15" fill="rgb(252,136,6)" fg:x="1045" fg:w="1"/><text x="84.0511%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="83.8011%" y="501" width="0.0802%" height="15" fill="rgb(245,87,12)" fg:x="1045" fg:w="1"/><text x="84.0511%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.8011%" y="485" width="0.0802%" height="15" fill="rgb(208,12,15)" fg:x="1045" fg:w="1"/><text x="84.0511%" y="495.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (32 samples, 2.57%)</title><rect x="81.3953%" y="677" width="2.5662%" height="15" fill="rgb(250,98,2)" fg:x="1015" fg:w="32"/><text x="81.6453%" y="687.50">pl..</text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="83.7209%" y="661" width="0.2406%" height="15" fill="rgb(205,213,15)" fg:x="1044" fg:w="3"/><text x="83.9709%" y="671.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="83.8813%" y="645" width="0.0802%" height="15" fill="rgb(248,192,44)" fg:x="1046" fg:w="1"/><text x="84.1313%" y="655.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="83.8813%" y="629" width="0.0802%" height="15" fill="rgb(221,89,17)" fg:x="1046" fg:w="1"/><text x="84.1313%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="83.8813%" y="613" width="0.0802%" height="15" fill="rgb(209,55,3)" fg:x="1046" fg:w="1"/><text x="84.1313%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.8813%" y="597" width="0.0802%" height="15" fill="rgb(247,23,45)" fg:x="1046" fg:w="1"/><text x="84.1313%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="83.8813%" y="581" width="0.0802%" height="15" fill="rgb(235,152,23)" fg:x="1046" fg:w="1"/><text x="84.1313%" y="591.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="83.9615%" y="677" width="0.0802%" height="15" fill="rgb(244,63,13)" fg:x="1047" fg:w="1"/><text x="84.2115%" y="687.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="83.9615%" y="661" width="0.0802%" height="15" fill="rgb(227,30,37)" fg:x="1047" fg:w="1"/><text x="84.2115%" y="671.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="83.9615%" y="645" width="0.0802%" height="15" fill="rgb(224,49,42)" fg:x="1047" fg:w="1"/><text x="84.2115%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="83.9615%" y="629" width="0.0802%" height="15" fill="rgb(218,129,5)" fg:x="1047" fg:w="1"/><text x="84.2115%" y="639.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="83.9615%" y="613" width="0.0802%" height="15" fill="rgb(240,199,54)" fg:x="1047" fg:w="1"/><text x="84.2115%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="84.0417%" y="629" width="0.0802%" height="15" fill="rgb(234,31,13)" fg:x="1048" fg:w="1"/><text x="84.2917%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="84.0417%" y="613" width="0.0802%" height="15" fill="rgb(219,73,54)" fg:x="1048" fg:w="1"/><text x="84.2917%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.0417%" y="597" width="0.0802%" height="15" fill="rgb(251,162,10)" fg:x="1048" fg:w="1"/><text x="84.2917%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.0417%" y="581" width="0.0802%" height="15" fill="rgb(240,138,47)" fg:x="1048" fg:w="1"/><text x="84.2917%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="84.0417%" y="565" width="0.0802%" height="15" fill="rgb(216,138,26)" fg:x="1048" fg:w="1"/><text x="84.2917%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.0417%" y="549" width="0.0802%" height="15" fill="rgb(243,17,35)" fg:x="1048" fg:w="1"/><text x="84.2917%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.0417%" y="533" width="0.0802%" height="15" fill="rgb(241,60,18)" fg:x="1048" fg:w="1"/><text x="84.2917%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.0417%" y="517" width="0.0802%" height="15" fill="rgb(234,2,44)" fg:x="1048" fg:w="1"/><text x="84.2917%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.1219%" y="549" width="0.0802%" height="15" fill="rgb(225,225,33)" fg:x="1049" fg:w="1"/><text x="84.3719%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.1219%" y="533" width="0.0802%" height="15" fill="rgb(234,50,31)" fg:x="1049" fg:w="1"/><text x="84.3719%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.1219%" y="517" width="0.0802%" height="15" fill="rgb(249,6,25)" fg:x="1049" fg:w="1"/><text x="84.3719%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.1219%" y="501" width="0.0802%" height="15" fill="rgb(241,5,17)" fg:x="1049" fg:w="1"/><text x="84.3719%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="84.1219%" y="485" width="0.0802%" height="15" fill="rgb(207,116,10)" fg:x="1049" fg:w="1"/><text x="84.3719%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="84.1219%" y="469" width="0.0802%" height="15" fill="rgb(222,128,18)" fg:x="1049" fg:w="1"/><text x="84.3719%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="84.1219%" y="453" width="0.0802%" height="15" fill="rgb(229,109,25)" fg:x="1049" fg:w="1"/><text x="84.3719%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="84.1219%" y="437" width="0.0802%" height="15" fill="rgb(222,102,25)" fg:x="1049" fg:w="1"/><text x="84.3719%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="84.1219%" y="421" width="0.0802%" height="15" fill="rgb(239,211,5)" fg:x="1049" fg:w="1"/><text x="84.3719%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="84.1219%" y="405" width="0.0802%" height="15" fill="rgb(223,136,26)" fg:x="1049" fg:w="1"/><text x="84.3719%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="84.1219%" y="389" width="0.0802%" height="15" fill="rgb(227,30,15)" fg:x="1049" fg:w="1"/><text x="84.3719%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="84.1219%" y="373" width="0.0802%" height="15" fill="rgb(247,76,4)" fg:x="1049" fg:w="1"/><text x="84.3719%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="84.1219%" y="357" width="0.0802%" height="15" fill="rgb(245,38,48)" fg:x="1049" fg:w="1"/><text x="84.3719%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.1219%" y="341" width="0.0802%" height="15" fill="rgb(210,220,14)" fg:x="1049" fg:w="1"/><text x="84.3719%" y="351.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (3 samples, 0.24%)</title><rect x="84.0417%" y="677" width="0.2406%" height="15" fill="rgb(224,60,51)" fg:x="1048" fg:w="3"/><text x="84.2917%" y="687.50"></text></g><g><title>plugins_core::build::QuickThing::make (3 samples, 0.24%)</title><rect x="84.0417%" y="661" width="0.2406%" height="15" fill="rgb(212,133,49)" fg:x="1048" fg:w="3"/><text x="84.2917%" y="671.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="84.0417%" y="645" width="0.2406%" height="15" fill="rgb(231,39,22)" fg:x="1048" fg:w="3"/><text x="84.2917%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="84.1219%" y="629" width="0.1604%" height="15" fill="rgb(236,173,22)" fg:x="1049" fg:w="2"/><text x="84.3719%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="84.1219%" y="613" width="0.1604%" height="15" fill="rgb(210,70,0)" fg:x="1049" fg:w="2"/><text x="84.3719%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="84.1219%" y="597" width="0.1604%" height="15" fill="rgb(215,170,11)" fg:x="1049" fg:w="2"/><text x="84.3719%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="84.1219%" y="581" width="0.1604%" height="15" fill="rgb(220,154,28)" fg:x="1049" fg:w="2"/><text x="84.3719%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="84.1219%" y="565" width="0.1604%" height="15" fill="rgb(240,160,41)" fg:x="1049" fg:w="2"/><text x="84.3719%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="84.2021%" y="549" width="0.0802%" height="15" fill="rgb(243,215,41)" fg:x="1050" fg:w="1"/><text x="84.4521%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="84.2021%" y="533" width="0.0802%" height="15" fill="rgb(214,208,31)" fg:x="1050" fg:w="1"/><text x="84.4521%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="84.2021%" y="517" width="0.0802%" height="15" fill="rgb(247,57,22)" fg:x="1050" fg:w="1"/><text x="84.4521%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.2823%" y="629" width="0.0802%" height="15" fill="rgb(228,73,52)" fg:x="1051" fg:w="1"/><text x="84.5323%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="84.2823%" y="613" width="0.0802%" height="15" fill="rgb(252,60,9)" fg:x="1051" fg:w="1"/><text x="84.5323%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="84.2823%" y="661" width="0.1604%" height="15" fill="rgb(233,9,51)" fg:x="1051" fg:w="2"/><text x="84.5323%" y="671.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="84.2823%" y="645" width="0.1604%" height="15" fill="rgb(223,67,14)" fg:x="1051" fg:w="2"/><text x="84.5323%" y="655.50"></text></g><g><title>serde_json::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for serde_json::value::Value&gt;::from (1 samples, 0.08%)</title><rect x="84.3625%" y="629" width="0.0802%" height="15" fill="rgb(222,86,2)" fg:x="1052" fg:w="1"/><text x="84.6125%" y="639.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="84.3625%" y="613" width="0.0802%" height="15" fill="rgb(243,58,54)" fg:x="1052" fg:w="1"/><text x="84.6125%" y="623.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="84.3625%" y="597" width="0.0802%" height="15" fill="rgb(210,200,39)" fg:x="1052" fg:w="1"/><text x="84.6125%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="84.4427%" y="645" width="0.0802%" height="15" fill="rgb(238,135,9)" fg:x="1053" fg:w="1"/><text x="84.6927%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="84.4427%" y="629" width="0.0802%" height="15" fill="rgb(232,179,7)" fg:x="1053" fg:w="1"/><text x="84.6927%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.4427%" y="613" width="0.0802%" height="15" fill="rgb(245,65,41)" fg:x="1053" fg:w="1"/><text x="84.6927%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.4427%" y="597" width="0.0802%" height="15" fill="rgb(227,43,8)" fg:x="1053" fg:w="1"/><text x="84.6927%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="84.4427%" y="581" width="0.0802%" height="15" fill="rgb(235,91,14)" fg:x="1053" fg:w="1"/><text x="84.6927%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.4427%" y="565" width="0.0802%" height="15" fill="rgb(235,219,31)" fg:x="1053" fg:w="1"/><text x="84.6927%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.4427%" y="549" width="0.0802%" height="15" fill="rgb(227,121,25)" fg:x="1053" fg:w="1"/><text x="84.6927%" y="559.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="84.5229%" y="613" width="0.0802%" height="15" fill="rgb(254,129,24)" fg:x="1054" fg:w="1"/><text x="84.7729%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="84.5229%" y="597" width="0.0802%" height="15" fill="rgb(226,144,49)" fg:x="1054" fg:w="1"/><text x="84.7729%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="84.5229%" y="581" width="0.0802%" height="15" fill="rgb(214,187,32)" fg:x="1054" fg:w="1"/><text x="84.7729%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.5229%" y="565" width="0.0802%" height="15" fill="rgb(243,129,46)" fg:x="1054" fg:w="1"/><text x="84.7729%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.5229%" y="549" width="0.0802%" height="15" fill="rgb(221,185,35)" fg:x="1054" fg:w="1"/><text x="84.7729%" y="559.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="84.5229%" y="629" width="0.1604%" height="15" fill="rgb(205,0,32)" fg:x="1054" fg:w="2"/><text x="84.7729%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="84.6030%" y="613" width="0.0802%" height="15" fill="rgb(229,179,12)" fg:x="1055" fg:w="1"/><text x="84.8530%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="84.6030%" y="597" width="0.0802%" height="15" fill="rgb(252,107,19)" fg:x="1055" fg:w="1"/><text x="84.8530%" y="607.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="84.6832%" y="629" width="0.0802%" height="15" fill="rgb(220,95,27)" fg:x="1056" fg:w="1"/><text x="84.9332%" y="639.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (70 samples, 5.61%)</title><rect x="79.2302%" y="693" width="5.6135%" height="15" fill="rgb(240,113,40)" fg:x="988" fg:w="70"/><text x="79.4802%" y="703.50">&lt;tests:..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (7 samples, 0.56%)</title><rect x="84.2823%" y="677" width="0.5613%" height="15" fill="rgb(208,4,43)" fg:x="1051" fg:w="7"/><text x="84.5323%" y="687.50"></text></g><g><title>plugins_core::build::Build::save (5 samples, 0.40%)</title><rect x="84.4427%" y="661" width="0.4010%" height="15" fill="rgb(247,189,30)" fg:x="1053" fg:w="5"/><text x="84.6927%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="84.5229%" y="645" width="0.3208%" height="15" fill="rgb(231,157,17)" fg:x="1054" fg:w="4"/><text x="84.7729%" y="655.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="84.7634%" y="629" width="0.0802%" height="15" fill="rgb(224,139,6)" fg:x="1057" fg:w="1"/><text x="85.0134%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="84.8436%" y="693" width="0.0802%" height="15" fill="rgb(223,83,16)" fg:x="1058" fg:w="1"/><text x="85.0936%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="84.8436%" y="677" width="0.0802%" height="15" fill="rgb(232,211,20)" fg:x="1058" fg:w="1"/><text x="85.0936%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="84.8436%" y="661" width="0.0802%" height="15" fill="rgb(225,203,35)" fg:x="1058" fg:w="1"/><text x="85.0936%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.9238%" y="661" width="0.0802%" height="15" fill="rgb(215,211,44)" fg:x="1059" fg:w="1"/><text x="85.1738%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.0040%" y="645" width="0.0802%" height="15" fill="rgb(248,213,26)" fg:x="1060" fg:w="1"/><text x="85.2540%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="85.0842%" y="613" width="0.0802%" height="15" fill="rgb(214,23,52)" fg:x="1061" fg:w="1"/><text x="85.3342%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (4 samples, 0.32%)</title><rect x="84.9238%" y="693" width="0.3208%" height="15" fill="rgb(225,173,50)" fg:x="1059" fg:w="4"/><text x="85.1738%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="84.9238%" y="677" width="0.3208%" height="15" fill="rgb(206,150,22)" fg:x="1059" fg:w="4"/><text x="85.1738%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="85.0040%" y="661" width="0.2406%" height="15" fill="rgb(239,64,23)" fg:x="1060" fg:w="3"/><text x="85.2540%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="85.0842%" y="645" width="0.1604%" height="15" fill="rgb(242,50,38)" fg:x="1061" fg:w="2"/><text x="85.3342%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="85.0842%" y="629" width="0.1604%" height="15" fill="rgb(217,91,15)" fg:x="1061" fg:w="2"/><text x="85.3342%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="85.1644%" y="613" width="0.0802%" height="15" fill="rgb(230,172,6)" fg:x="1062" fg:w="1"/><text x="85.4144%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="85.1644%" y="597" width="0.0802%" height="15" fill="rgb(221,98,26)" fg:x="1062" fg:w="1"/><text x="85.4144%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="85.4050%" y="565" width="0.0802%" height="15" fill="rgb(227,210,45)" fg:x="1065" fg:w="1"/><text x="85.6550%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="85.4050%" y="549" width="0.0802%" height="15" fill="rgb(206,8,30)" fg:x="1065" fg:w="1"/><text x="85.6550%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="85.4050%" y="533" width="0.0802%" height="15" fill="rgb(241,219,17)" fg:x="1065" fg:w="1"/><text x="85.6550%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="85.3248%" y="581" width="0.2406%" height="15" fill="rgb(247,121,29)" fg:x="1064" fg:w="3"/><text x="85.5748%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="85.4852%" y="565" width="0.0802%" height="15" fill="rgb(219,169,49)" fg:x="1066" fg:w="1"/><text x="85.7352%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="85.4852%" y="549" width="0.0802%" height="15" fill="rgb(253,49,49)" fg:x="1066" fg:w="1"/><text x="85.7352%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="85.5654%" y="565" width="0.1604%" height="15" fill="rgb(217,178,3)" fg:x="1067" fg:w="2"/><text x="85.8154%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="85.6455%" y="549" width="0.0802%" height="15" fill="rgb(234,73,37)" fg:x="1068" fg:w="1"/><text x="85.8955%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="85.7257%" y="533" width="0.1604%" height="15" fill="rgb(250,98,22)" fg:x="1069" fg:w="2"/><text x="85.9757%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="85.7257%" y="517" width="0.1604%" height="15" fill="rgb(220,108,37)" fg:x="1069" fg:w="2"/><text x="85.9757%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="85.8059%" y="501" width="0.0802%" height="15" fill="rgb(225,168,10)" fg:x="1070" fg:w="1"/><text x="86.0559%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="85.8059%" y="485" width="0.0802%" height="15" fill="rgb(247,215,21)" fg:x="1070" fg:w="1"/><text x="86.0559%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="85.8059%" y="469" width="0.0802%" height="15" fill="rgb(253,189,31)" fg:x="1070" fg:w="1"/><text x="86.0559%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="85.8059%" y="453" width="0.0802%" height="15" fill="rgb(241,54,22)" fg:x="1070" fg:w="1"/><text x="86.0559%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="85.7257%" y="549" width="0.2406%" height="15" fill="rgb(211,87,4)" fg:x="1069" fg:w="3"/><text x="85.9757%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="85.8861%" y="533" width="0.0802%" height="15" fill="rgb(245,112,24)" fg:x="1071" fg:w="1"/><text x="86.1361%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="85.8861%" y="517" width="0.0802%" height="15" fill="rgb(235,190,41)" fg:x="1071" fg:w="1"/><text x="86.1361%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="85.9663%" y="549" width="0.0802%" height="15" fill="rgb(214,89,8)" fg:x="1072" fg:w="1"/><text x="86.2163%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="86.0465%" y="517" width="0.0802%" height="15" fill="rgb(249,155,35)" fg:x="1073" fg:w="1"/><text x="86.2965%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="86.0465%" y="501" width="0.0802%" height="15" fill="rgb(249,88,26)" fg:x="1073" fg:w="1"/><text x="86.2965%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="86.0465%" y="549" width="0.1604%" height="15" fill="rgb(232,56,8)" fg:x="1073" fg:w="2"/><text x="86.2965%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="86.0465%" y="533" width="0.1604%" height="15" fill="rgb(240,95,3)" fg:x="1073" fg:w="2"/><text x="86.2965%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="86.1267%" y="517" width="0.0802%" height="15" fill="rgb(222,44,28)" fg:x="1074" fg:w="1"/><text x="86.3767%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="85.7257%" y="565" width="0.5613%" height="15" fill="rgb(234,16,30)" fg:x="1069" fg:w="7"/><text x="85.9757%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="86.2069%" y="549" width="0.0802%" height="15" fill="rgb(223,26,17)" fg:x="1075" fg:w="1"/><text x="86.4569%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (13 samples, 1.04%)</title><rect x="85.3248%" y="597" width="1.0425%" height="15" fill="rgb(239,187,47)" fg:x="1064" fg:w="13"/><text x="85.5748%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.80%)</title><rect x="85.5654%" y="581" width="0.8019%" height="15" fill="rgb(247,102,50)" fg:x="1067" fg:w="10"/><text x="85.8154%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="86.2871%" y="565" width="0.0802%" height="15" fill="rgb(231,216,22)" fg:x="1076" fg:w="1"/><text x="86.5371%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="86.2871%" y="549" width="0.0802%" height="15" fill="rgb(216,201,26)" fg:x="1076" fg:w="1"/><text x="86.5371%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="86.2871%" y="533" width="0.0802%" height="15" fill="rgb(214,186,23)" fg:x="1076" fg:w="1"/><text x="86.5371%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="86.3673%" y="597" width="0.0802%" height="15" fill="rgb(235,184,4)" fg:x="1077" fg:w="1"/><text x="86.6173%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="86.3673%" y="581" width="0.0802%" height="15" fill="rgb(244,46,17)" fg:x="1077" fg:w="1"/><text x="86.6173%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="86.3673%" y="565" width="0.0802%" height="15" fill="rgb(248,74,46)" fg:x="1077" fg:w="1"/><text x="86.6173%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="86.4475%" y="517" width="0.1604%" height="15" fill="rgb(243,79,5)" fg:x="1078" fg:w="2"/><text x="86.6975%" y="527.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="86.4475%" y="501" width="0.1604%" height="15" fill="rgb(213,148,1)" fg:x="1078" fg:w="2"/><text x="86.6975%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="86.6079%" y="501" width="0.0802%" height="15" fill="rgb(221,30,0)" fg:x="1080" fg:w="1"/><text x="86.8579%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="86.6079%" y="485" width="0.0802%" height="15" fill="rgb(207,85,29)" fg:x="1080" fg:w="1"/><text x="86.8579%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="86.6079%" y="469" width="0.0802%" height="15" fill="rgb(239,31,46)" fg:x="1080" fg:w="1"/><text x="86.8579%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="86.4475%" y="565" width="0.3208%" height="15" fill="rgb(219,6,1)" fg:x="1078" fg:w="4"/><text x="86.6975%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="86.4475%" y="549" width="0.3208%" height="15" fill="rgb(229,90,29)" fg:x="1078" fg:w="4"/><text x="86.6975%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="86.4475%" y="533" width="0.3208%" height="15" fill="rgb(242,201,42)" fg:x="1078" fg:w="4"/><text x="86.6975%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="86.6079%" y="517" width="0.1604%" height="15" fill="rgb(243,80,54)" fg:x="1080" fg:w="2"/><text x="86.8579%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="86.6881%" y="501" width="0.0802%" height="15" fill="rgb(223,166,15)" fg:x="1081" fg:w="1"/><text x="86.9381%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="86.6881%" y="485" width="0.0802%" height="15" fill="rgb(238,78,27)" fg:x="1081" fg:w="1"/><text x="86.9381%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="86.7682%" y="565" width="0.0802%" height="15" fill="rgb(235,28,43)" fg:x="1082" fg:w="1"/><text x="87.0182%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="86.8484%" y="565" width="0.0802%" height="15" fill="rgb(240,210,28)" fg:x="1083" fg:w="1"/><text x="87.0984%" y="575.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="86.9286%" y="565" width="0.0802%" height="15" fill="rgb(253,6,46)" fg:x="1084" fg:w="1"/><text x="87.1786%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="86.9286%" y="549" width="0.0802%" height="15" fill="rgb(250,159,47)" fg:x="1084" fg:w="1"/><text x="87.1786%" y="559.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="86.9286%" y="533" width="0.0802%" height="15" fill="rgb(216,139,2)" fg:x="1084" fg:w="1"/><text x="87.1786%" y="543.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="86.9286%" y="517" width="0.0802%" height="15" fill="rgb(221,124,44)" fg:x="1084" fg:w="1"/><text x="87.1786%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="86.9286%" y="501" width="0.0802%" height="15" fill="rgb(205,37,22)" fg:x="1084" fg:w="1"/><text x="87.1786%" y="511.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (9 samples, 0.72%)</title><rect x="86.4475%" y="581" width="0.7217%" height="15" fill="rgb(250,55,8)" fg:x="1078" fg:w="9"/><text x="86.6975%" y="591.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="87.0088%" y="565" width="0.1604%" height="15" fill="rgb(215,83,48)" fg:x="1085" fg:w="2"/><text x="87.2588%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="87.0890%" y="549" width="0.0802%" height="15" fill="rgb(253,2,32)" fg:x="1086" fg:w="1"/><text x="87.3390%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="87.0890%" y="533" width="0.0802%" height="15" fill="rgb(236,67,28)" fg:x="1086" fg:w="1"/><text x="87.3390%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="87.1692%" y="549" width="0.0802%" height="15" fill="rgb(252,55,15)" fg:x="1087" fg:w="1"/><text x="87.4192%" y="559.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="87.2494%" y="517" width="0.1604%" height="15" fill="rgb(243,173,17)" fg:x="1088" fg:w="2"/><text x="87.4994%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (3 samples, 0.24%)</title><rect x="87.2494%" y="549" width="0.2406%" height="15" fill="rgb(215,212,13)" fg:x="1088" fg:w="3"/><text x="87.4994%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="87.2494%" y="533" width="0.2406%" height="15" fill="rgb(253,176,6)" fg:x="1088" fg:w="3"/><text x="87.4994%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="87.4098%" y="517" width="0.0802%" height="15" fill="rgb(236,105,26)" fg:x="1090" fg:w="1"/><text x="87.6598%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="87.4900%" y="501" width="0.0802%" height="15" fill="rgb(239,226,32)" fg:x="1091" fg:w="1"/><text x="87.7400%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="87.4900%" y="485" width="0.0802%" height="15" fill="rgb(236,104,51)" fg:x="1091" fg:w="1"/><text x="87.7400%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="87.4900%" y="469" width="0.0802%" height="15" fill="rgb(220,172,33)" fg:x="1091" fg:w="1"/><text x="87.7400%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="87.4900%" y="453" width="0.0802%" height="15" fill="rgb(224,182,25)" fg:x="1091" fg:w="1"/><text x="87.7400%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="87.4900%" y="437" width="0.0802%" height="15" fill="rgb(236,184,24)" fg:x="1091" fg:w="1"/><text x="87.7400%" y="447.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.48%)</title><rect x="87.1692%" y="581" width="0.4812%" height="15" fill="rgb(241,221,14)" fg:x="1087" fg:w="6"/><text x="87.4192%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="87.1692%" y="565" width="0.4812%" height="15" fill="rgb(227,146,5)" fg:x="1087" fg:w="6"/><text x="87.4192%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="87.4900%" y="549" width="0.1604%" height="15" fill="rgb(214,15,23)" fg:x="1091" fg:w="2"/><text x="87.7400%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="87.4900%" y="533" width="0.1604%" height="15" fill="rgb(233,157,31)" fg:x="1091" fg:w="2"/><text x="87.7400%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="87.4900%" y="517" width="0.1604%" height="15" fill="rgb(211,27,52)" fg:x="1091" fg:w="2"/><text x="87.7400%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="87.5702%" y="501" width="0.0802%" height="15" fill="rgb(212,223,15)" fg:x="1092" fg:w="1"/><text x="87.8202%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="87.5702%" y="485" width="0.0802%" height="15" fill="rgb(254,211,0)" fg:x="1092" fg:w="1"/><text x="87.8202%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="87.5702%" y="469" width="0.0802%" height="15" fill="rgb(205,43,38)" fg:x="1092" fg:w="1"/><text x="87.8202%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="87.5702%" y="453" width="0.0802%" height="15" fill="rgb(242,206,46)" fg:x="1092" fg:w="1"/><text x="87.8202%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="87.5702%" y="437" width="0.0802%" height="15" fill="rgb(220,221,12)" fg:x="1092" fg:w="1"/><text x="87.8202%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="87.6504%" y="437" width="0.0802%" height="15" fill="rgb(217,156,35)" fg:x="1093" fg:w="1"/><text x="87.9004%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="87.6504%" y="421" width="0.0802%" height="15" fill="rgb(207,181,49)" fg:x="1093" fg:w="1"/><text x="87.9004%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="87.6504%" y="405" width="0.0802%" height="15" fill="rgb(235,103,47)" fg:x="1093" fg:w="1"/><text x="87.9004%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.6504%" y="389" width="0.0802%" height="15" fill="rgb(222,63,28)" fg:x="1093" fg:w="1"/><text x="87.9004%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="87.7306%" y="421" width="0.0802%" height="15" fill="rgb(244,137,21)" fg:x="1094" fg:w="1"/><text x="87.9806%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="87.7306%" y="405" width="0.0802%" height="15" fill="rgb(228,35,27)" fg:x="1094" fg:w="1"/><text x="87.9806%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="87.7306%" y="389" width="0.0802%" height="15" fill="rgb(226,191,41)" fg:x="1094" fg:w="1"/><text x="87.9806%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.7306%" y="373" width="0.0802%" height="15" fill="rgb(210,154,3)" fg:x="1094" fg:w="1"/><text x="87.9806%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="87.6504%" y="453" width="0.2406%" height="15" fill="rgb(216,60,49)" fg:x="1093" fg:w="3"/><text x="87.9004%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="87.7306%" y="437" width="0.1604%" height="15" fill="rgb(226,17,20)" fg:x="1094" fg:w="2"/><text x="87.9806%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="87.8107%" y="421" width="0.0802%" height="15" fill="rgb(206,115,35)" fg:x="1095" fg:w="1"/><text x="88.0607%" y="431.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="87.8107%" y="405" width="0.0802%" height="15" fill="rgb(227,88,1)" fg:x="1095" fg:w="1"/><text x="88.0607%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="87.8909%" y="453" width="0.0802%" height="15" fill="rgb(230,222,24)" fg:x="1096" fg:w="1"/><text x="88.1409%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.8909%" y="437" width="0.0802%" height="15" fill="rgb(214,124,32)" fg:x="1096" fg:w="1"/><text x="88.1409%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="87.6504%" y="517" width="0.4010%" height="15" fill="rgb(240,41,36)" fg:x="1093" fg:w="5"/><text x="87.9004%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="87.6504%" y="501" width="0.4010%" height="15" fill="rgb(221,17,52)" fg:x="1093" fg:w="5"/><text x="87.9004%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="87.6504%" y="485" width="0.4010%" height="15" fill="rgb(252,70,16)" fg:x="1093" fg:w="5"/><text x="87.9004%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="87.6504%" y="469" width="0.4010%" height="15" fill="rgb(250,177,4)" fg:x="1093" fg:w="5"/><text x="87.9004%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="87.9711%" y="453" width="0.0802%" height="15" fill="rgb(240,188,47)" fg:x="1097" fg:w="1"/><text x="88.2211%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="87.9711%" y="437" width="0.0802%" height="15" fill="rgb(215,92,12)" fg:x="1097" fg:w="1"/><text x="88.2211%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.9711%" y="421" width="0.0802%" height="15" fill="rgb(242,110,29)" fg:x="1097" fg:w="1"/><text x="88.2211%" y="431.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="88.0513%" y="501" width="0.0802%" height="15" fill="rgb(208,211,26)" fg:x="1098" fg:w="1"/><text x="88.3013%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="88.0513%" y="517" width="0.1604%" height="15" fill="rgb(244,147,6)" fg:x="1098" fg:w="2"/><text x="88.3013%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.1315%" y="501" width="0.0802%" height="15" fill="rgb(211,130,42)" fg:x="1099" fg:w="1"/><text x="88.3815%" y="511.50"></text></g><g><title>engine::session::Session::close (38 samples, 3.05%)</title><rect x="85.2446%" y="693" width="3.0473%" height="15" fill="rgb(220,63,1)" fg:x="1063" fg:w="38"/><text x="85.4946%" y="703.50">eng..</text></g><g><title>engine::session::state::State::close (38 samples, 3.05%)</title><rect x="85.2446%" y="677" width="3.0473%" height="15" fill="rgb(241,212,30)" fg:x="1063" fg:w="38"/><text x="85.4946%" y="687.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (38 samples, 3.05%)</title><rect x="85.2446%" y="661" width="3.0473%" height="15" fill="rgb(233,153,17)" fg:x="1063" fg:w="38"/><text x="85.4946%" y="671.50">eng..</text></g><g><title>core::iter::adapters::try_process (37 samples, 2.97%)</title><rect x="85.3248%" y="645" width="2.9671%" height="15" fill="rgb(236,3,10)" fg:x="1064" fg:w="37"/><text x="85.5748%" y="655.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (37 samples, 2.97%)</title><rect x="85.3248%" y="629" width="2.9671%" height="15" fill="rgb(232,41,21)" fg:x="1064" fg:w="37"/><text x="85.5748%" y="639.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (37 samples, 2.97%)</title><rect x="85.3248%" y="613" width="2.9671%" height="15" fill="rgb(206,63,51)" fg:x="1064" fg:w="37"/><text x="85.5748%" y="623.50">eng..</text></g><g><title>kernel::model::any_entity_changes (23 samples, 1.84%)</title><rect x="86.4475%" y="597" width="1.8444%" height="15" fill="rgb(250,214,3)" fg:x="1078" fg:w="23"/><text x="86.6975%" y="607.50">k..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (8 samples, 0.64%)</title><rect x="87.6504%" y="581" width="0.6415%" height="15" fill="rgb(254,89,27)" fg:x="1093" fg:w="8"/><text x="87.9004%" y="591.50"></text></g><g><title>serde_json::de::from_trait (8 samples, 0.64%)</title><rect x="87.6504%" y="565" width="0.6415%" height="15" fill="rgb(249,41,14)" fg:x="1093" fg:w="8"/><text x="87.9004%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.64%)</title><rect x="87.6504%" y="549" width="0.6415%" height="15" fill="rgb(221,196,51)" fg:x="1093" fg:w="8"/><text x="87.9004%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.64%)</title><rect x="87.6504%" y="533" width="0.6415%" height="15" fill="rgb(214,116,26)" fg:x="1093" fg:w="8"/><text x="87.9004%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="88.2117%" y="517" width="0.0802%" height="15" fill="rgb(236,67,7)" fg:x="1100" fg:w="1"/><text x="88.4617%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="88.2117%" y="501" width="0.0802%" height="15" fill="rgb(253,179,32)" fg:x="1100" fg:w="1"/><text x="88.4617%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.2117%" y="485" width="0.0802%" height="15" fill="rgb(218,33,15)" fg:x="1100" fg:w="1"/><text x="88.4617%" y="495.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="88.2919%" y="613" width="0.0802%" height="15" fill="rgb(217,202,41)" fg:x="1101" fg:w="1"/><text x="88.5419%" y="623.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (1 samples, 0.08%)</title><rect x="88.3721%" y="597" width="0.0802%" height="15" fill="rgb(234,133,5)" fg:x="1102" fg:w="1"/><text x="88.6221%" y="607.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (1 samples, 0.08%)</title><rect x="88.3721%" y="581" width="0.0802%" height="15" fill="rgb(240,47,40)" fg:x="1102" fg:w="1"/><text x="88.6221%" y="591.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (3 samples, 0.24%)</title><rect x="88.2919%" y="629" width="0.2406%" height="15" fill="rgb(234,166,26)" fg:x="1101" fg:w="3"/><text x="88.5419%" y="639.50"></text></g><g><title>tracing_core::callsite::register_dispatch (2 samples, 0.16%)</title><rect x="88.3721%" y="613" width="0.1604%" height="15" fill="rgb(244,125,51)" fg:x="1102" fg:w="2"/><text x="88.6221%" y="623.50"></text></g><g><title>tracing_core::callsite::dispatchers::Dispatchers::register_dispatch (1 samples, 0.08%)</title><rect x="88.4523%" y="597" width="0.0802%" height="15" fill="rgb(229,171,11)" fg:x="1103" fg:w="1"/><text x="88.7023%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (1 samples, 0.08%)</title><rect x="88.4523%" y="581" width="0.0802%" height="15" fill="rgb(224,38,45)" fg:x="1103" fg:w="1"/><text x="88.7023%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="88.5325%" y="517" width="0.0802%" height="15" fill="rgb(237,27,7)" fg:x="1104" fg:w="1"/><text x="88.7825%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="88.5325%" y="501" width="0.0802%" height="15" fill="rgb(216,52,7)" fg:x="1104" fg:w="1"/><text x="88.7825%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="88.5325%" y="485" width="0.0802%" height="15" fill="rgb(243,11,11)" fg:x="1104" fg:w="1"/><text x="88.7825%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="88.6127%" y="453" width="0.0802%" height="15" fill="rgb(253,167,20)" fg:x="1105" fg:w="1"/><text x="88.8627%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="88.6127%" y="437" width="0.0802%" height="15" fill="rgb(215,207,5)" fg:x="1105" fg:w="1"/><text x="88.8627%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="88.6127%" y="421" width="0.0802%" height="15" fill="rgb(252,127,31)" fg:x="1105" fg:w="1"/><text x="88.8627%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="88.6929%" y="357" width="0.0802%" height="15" fill="rgb(209,106,27)" fg:x="1106" fg:w="1"/><text x="88.9429%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="88.6929%" y="341" width="0.0802%" height="15" fill="rgb(214,220,18)" fg:x="1106" fg:w="1"/><text x="88.9429%" y="351.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="88.6929%" y="325" width="0.0802%" height="15" fill="rgb(237,89,12)" fg:x="1106" fg:w="1"/><text x="88.9429%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="88.6929%" y="309" width="0.0802%" height="15" fill="rgb(209,167,36)" fg:x="1106" fg:w="1"/><text x="88.9429%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="88.6929%" y="293" width="0.0802%" height="15" fill="rgb(243,45,22)" fg:x="1106" fg:w="1"/><text x="88.9429%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="88.6929%" y="277" width="0.0802%" height="15" fill="rgb(239,2,46)" fg:x="1106" fg:w="1"/><text x="88.9429%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="88.6929%" y="261" width="0.0802%" height="15" fill="rgb(241,101,0)" fg:x="1106" fg:w="1"/><text x="88.9429%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="88.6929%" y="245" width="0.0802%" height="15" fill="rgb(244,34,31)" fg:x="1106" fg:w="1"/><text x="88.9429%" y="255.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="88.6929%" y="229" width="0.0802%" height="15" fill="rgb(248,23,22)" fg:x="1106" fg:w="1"/><text x="88.9429%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="88.6929%" y="213" width="0.0802%" height="15" fill="rgb(218,27,48)" fg:x="1106" fg:w="1"/><text x="88.9429%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.6929%" y="197" width="0.0802%" height="15" fill="rgb(232,78,1)" fg:x="1106" fg:w="1"/><text x="88.9429%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="88.7731%" y="357" width="0.0802%" height="15" fill="rgb(233,169,12)" fg:x="1107" fg:w="1"/><text x="89.0231%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="88.7731%" y="341" width="0.0802%" height="15" fill="rgb(225,222,54)" fg:x="1107" fg:w="1"/><text x="89.0231%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="88.7731%" y="325" width="0.0802%" height="15" fill="rgb(245,126,29)" fg:x="1107" fg:w="1"/><text x="89.0231%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="88.7731%" y="309" width="0.0802%" height="15" fill="rgb(241,63,48)" fg:x="1107" fg:w="1"/><text x="89.0231%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="88.7731%" y="293" width="0.0802%" height="15" fill="rgb(235,126,38)" fg:x="1107" fg:w="1"/><text x="89.0231%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="88.7731%" y="277" width="0.0802%" height="15" fill="rgb(232,96,49)" fg:x="1107" fg:w="1"/><text x="89.0231%" y="287.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="88.6929%" y="453" width="0.2406%" height="15" fill="rgb(211,146,40)" fg:x="1106" fg:w="3"/><text x="88.9429%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="88.6929%" y="437" width="0.2406%" height="15" fill="rgb(247,93,44)" fg:x="1106" fg:w="3"/><text x="88.9429%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="88.6929%" y="421" width="0.2406%" height="15" fill="rgb(251,41,49)" fg:x="1106" fg:w="3"/><text x="88.9429%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="88.6929%" y="405" width="0.2406%" height="15" fill="rgb(218,155,12)" fg:x="1106" fg:w="3"/><text x="88.9429%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="88.6929%" y="389" width="0.2406%" height="15" fill="rgb(221,161,30)" fg:x="1106" fg:w="3"/><text x="88.9429%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="88.6929%" y="373" width="0.2406%" height="15" fill="rgb(221,179,11)" fg:x="1106" fg:w="3"/><text x="88.9429%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.8532%" y="357" width="0.0802%" height="15" fill="rgb(224,170,48)" fg:x="1108" fg:w="1"/><text x="89.1032%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="88.8532%" y="341" width="0.0802%" height="15" fill="rgb(223,117,5)" fg:x="1108" fg:w="1"/><text x="89.1032%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="88.8532%" y="325" width="0.0802%" height="15" fill="rgb(209,52,20)" fg:x="1108" fg:w="1"/><text x="89.1032%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="88.8532%" y="309" width="0.0802%" height="15" fill="rgb(209,19,41)" fg:x="1108" fg:w="1"/><text x="89.1032%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="88.8532%" y="293" width="0.0802%" height="15" fill="rgb(210,177,12)" fg:x="1108" fg:w="1"/><text x="89.1032%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.8532%" y="277" width="0.0802%" height="15" fill="rgb(211,159,37)" fg:x="1108" fg:w="1"/><text x="89.1032%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="88.8532%" y="261" width="0.0802%" height="15" fill="rgb(209,20,2)" fg:x="1108" fg:w="1"/><text x="89.1032%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="88.8532%" y="245" width="0.0802%" height="15" fill="rgb(244,3,46)" fg:x="1108" fg:w="1"/><text x="89.1032%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.8532%" y="229" width="0.0802%" height="15" fill="rgb(220,94,38)" fg:x="1108" fg:w="1"/><text x="89.1032%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="88.8532%" y="213" width="0.0802%" height="15" fill="rgb(253,14,31)" fg:x="1108" fg:w="1"/><text x="89.1032%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="88.8532%" y="197" width="0.0802%" height="15" fill="rgb(234,176,13)" fg:x="1108" fg:w="1"/><text x="89.1032%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.8532%" y="181" width="0.0802%" height="15" fill="rgb(218,62,25)" fg:x="1108" fg:w="1"/><text x="89.1032%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="88.8532%" y="165" width="0.0802%" height="15" fill="rgb(216,124,40)" fg:x="1108" fg:w="1"/><text x="89.1032%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="88.8532%" y="149" width="0.0802%" height="15" fill="rgb(228,170,12)" fg:x="1108" fg:w="1"/><text x="89.1032%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="88.8532%" y="133" width="0.0802%" height="15" fill="rgb(231,226,5)" fg:x="1108" fg:w="1"/><text x="89.1032%" y="143.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (6 samples, 0.48%)</title><rect x="88.5325%" y="549" width="0.4812%" height="15" fill="rgb(237,122,22)" fg:x="1104" fg:w="6"/><text x="88.7825%" y="559.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (6 samples, 0.48%)</title><rect x="88.5325%" y="533" width="0.4812%" height="15" fill="rgb(209,185,25)" fg:x="1104" fg:w="6"/><text x="88.7825%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (5 samples, 0.40%)</title><rect x="88.6127%" y="517" width="0.4010%" height="15" fill="rgb(228,200,32)" fg:x="1105" fg:w="5"/><text x="88.8627%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (5 samples, 0.40%)</title><rect x="88.6127%" y="501" width="0.4010%" height="15" fill="rgb(217,140,10)" fg:x="1105" fg:w="5"/><text x="88.8627%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (5 samples, 0.40%)</title><rect x="88.6127%" y="485" width="0.4010%" height="15" fill="rgb(253,17,24)" fg:x="1105" fg:w="5"/><text x="88.8627%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="88.6127%" y="469" width="0.4010%" height="15" fill="rgb(212,61,6)" fg:x="1105" fg:w="5"/><text x="88.8627%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="88.9334%" y="453" width="0.0802%" height="15" fill="rgb(205,14,25)" fg:x="1109" fg:w="1"/><text x="89.1834%" y="463.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="88.9334%" y="437" width="0.0802%" height="15" fill="rgb(232,69,41)" fg:x="1109" fg:w="1"/><text x="89.1834%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="88.9334%" y="421" width="0.0802%" height="15" fill="rgb(241,106,47)" fg:x="1109" fg:w="1"/><text x="89.1834%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="88.9334%" y="405" width="0.0802%" height="15" fill="rgb(210,213,53)" fg:x="1109" fg:w="1"/><text x="89.1834%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="88.9334%" y="389" width="0.0802%" height="15" fill="rgb(253,175,27)" fg:x="1109" fg:w="1"/><text x="89.1834%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="88.9334%" y="373" width="0.0802%" height="15" fill="rgb(211,171,24)" fg:x="1109" fg:w="1"/><text x="89.1834%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="88.9334%" y="357" width="0.0802%" height="15" fill="rgb(229,80,7)" fg:x="1109" fg:w="1"/><text x="89.1834%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="88.9334%" y="341" width="0.0802%" height="15" fill="rgb(212,46,39)" fg:x="1109" fg:w="1"/><text x="89.1834%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="88.9334%" y="325" width="0.0802%" height="15" fill="rgb(240,80,45)" fg:x="1109" fg:w="1"/><text x="89.1834%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="88.9334%" y="309" width="0.0802%" height="15" fill="rgb(253,177,40)" fg:x="1109" fg:w="1"/><text x="89.1834%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="88.9334%" y="293" width="0.0802%" height="15" fill="rgb(249,200,15)" fg:x="1109" fg:w="1"/><text x="89.1834%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="88.9334%" y="277" width="0.0802%" height="15" fill="rgb(217,78,26)" fg:x="1109" fg:w="1"/><text x="89.1834%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="88.9334%" y="261" width="0.0802%" height="15" fill="rgb(254,151,32)" fg:x="1109" fg:w="1"/><text x="89.1834%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="88.9334%" y="245" width="0.0802%" height="15" fill="rgb(226,165,27)" fg:x="1109" fg:w="1"/><text x="89.1834%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="88.9334%" y="229" width="0.0802%" height="15" fill="rgb(250,206,4)" fg:x="1109" fg:w="1"/><text x="89.1834%" y="239.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="88.9334%" y="213" width="0.0802%" height="15" fill="rgb(231,229,27)" fg:x="1109" fg:w="1"/><text x="89.1834%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.9334%" y="197" width="0.0802%" height="15" fill="rgb(239,217,8)" fg:x="1109" fg:w="1"/><text x="89.1834%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.0938%" y="341" width="0.0802%" height="15" fill="rgb(225,204,27)" fg:x="1111" fg:w="1"/><text x="89.3438%" y="351.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="89.2542%" y="309" width="0.0802%" height="15" fill="rgb(230,56,32)" fg:x="1113" fg:w="1"/><text x="89.5042%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="89.2542%" y="293" width="0.0802%" height="15" fill="rgb(222,56,27)" fg:x="1113" fg:w="1"/><text x="89.5042%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="89.2542%" y="277" width="0.0802%" height="15" fill="rgb(253,108,27)" fg:x="1113" fg:w="1"/><text x="89.5042%" y="287.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="89.3344%" y="293" width="0.1604%" height="15" fill="rgb(212,87,36)" fg:x="1114" fg:w="2"/><text x="89.5844%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="89.3344%" y="277" width="0.1604%" height="15" fill="rgb(247,82,36)" fg:x="1114" fg:w="2"/><text x="89.5844%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="89.4146%" y="261" width="0.0802%" height="15" fill="rgb(222,143,9)" fg:x="1115" fg:w="1"/><text x="89.6646%" y="271.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (5 samples, 0.40%)</title><rect x="89.1740%" y="341" width="0.4010%" height="15" fill="rgb(238,162,48)" fg:x="1112" fg:w="5"/><text x="89.4240%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="89.1740%" y="325" width="0.4010%" height="15" fill="rgb(221,59,43)" fg:x="1112" fg:w="5"/><text x="89.4240%" y="335.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="89.3344%" y="309" width="0.2406%" height="15" fill="rgb(205,166,41)" fg:x="1114" fg:w="3"/><text x="89.5844%" y="319.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (1 samples, 0.08%)</title><rect x="89.4948%" y="293" width="0.0802%" height="15" fill="rgb(241,186,40)" fg:x="1116" fg:w="1"/><text x="89.7448%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="89.4948%" y="277" width="0.0802%" height="15" fill="rgb(216,119,35)" fg:x="1116" fg:w="1"/><text x="89.7448%" y="287.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="89.4948%" y="261" width="0.0802%" height="15" fill="rgb(208,68,38)" fg:x="1116" fg:w="1"/><text x="89.7448%" y="271.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="89.4948%" y="245" width="0.0802%" height="15" fill="rgb(217,113,1)" fg:x="1116" fg:w="1"/><text x="89.7448%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="89.4948%" y="229" width="0.0802%" height="15" fill="rgb(242,153,3)" fg:x="1116" fg:w="1"/><text x="89.7448%" y="239.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="89.4948%" y="213" width="0.0802%" height="15" fill="rgb(229,76,35)" fg:x="1116" fg:w="1"/><text x="89.7448%" y="223.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="89.4948%" y="197" width="0.0802%" height="15" fill="rgb(229,125,34)" fg:x="1116" fg:w="1"/><text x="89.7448%" y="207.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (7 samples, 0.56%)</title><rect x="89.0938%" y="373" width="0.5613%" height="15" fill="rgb(238,179,36)" fg:x="1111" fg:w="7"/><text x="89.3438%" y="383.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (7 samples, 0.56%)</title><rect x="89.0938%" y="357" width="0.5613%" height="15" fill="rgb(244,183,19)" fg:x="1111" fg:w="7"/><text x="89.3438%" y="367.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="89.5750%" y="341" width="0.0802%" height="15" fill="rgb(216,85,49)" fg:x="1117" fg:w="1"/><text x="89.8250%" y="351.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="89.6552%" y="341" width="0.0802%" height="15" fill="rgb(208,161,47)" fg:x="1118" fg:w="1"/><text x="89.9052%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="89.6552%" y="325" width="0.0802%" height="15" fill="rgb(233,210,18)" fg:x="1118" fg:w="1"/><text x="89.9052%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="89.6552%" y="309" width="0.0802%" height="15" fill="rgb(205,104,42)" fg:x="1118" fg:w="1"/><text x="89.9052%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="89.6552%" y="293" width="0.0802%" height="15" fill="rgb(248,90,43)" fg:x="1118" fg:w="1"/><text x="89.9052%" y="303.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Subject&gt;::deserialize (1 samples, 0.08%)</title><rect x="89.6552%" y="277" width="0.0802%" height="15" fill="rgb(206,198,11)" fg:x="1118" fg:w="1"/><text x="89.9052%" y="287.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="89.7354%" y="341" width="0.1604%" height="15" fill="rgb(239,165,27)" fg:x="1119" fg:w="2"/><text x="89.9854%" y="351.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="89.7354%" y="325" width="0.1604%" height="15" fill="rgb(246,44,32)" fg:x="1119" fg:w="2"/><text x="89.9854%" y="335.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="89.7354%" y="309" width="0.1604%" height="15" fill="rgb(252,65,42)" fg:x="1119" fg:w="2"/><text x="89.9854%" y="319.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="89.7354%" y="293" width="0.1604%" height="15" fill="rgb(246,197,18)" fg:x="1119" fg:w="2"/><text x="89.9854%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="89.7354%" y="277" width="0.1604%" height="15" fill="rgb(216,192,4)" fg:x="1119" fg:w="2"/><text x="89.9854%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="89.8156%" y="261" width="0.0802%" height="15" fill="rgb(208,117,10)" fg:x="1120" fg:w="1"/><text x="90.0656%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.8156%" y="245" width="0.0802%" height="15" fill="rgb(240,61,47)" fg:x="1120" fg:w="1"/><text x="90.0656%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.8156%" y="229" width="0.0802%" height="15" fill="rgb(228,178,21)" fg:x="1120" fg:w="1"/><text x="90.0656%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="89.8957%" y="325" width="0.0802%" height="15" fill="rgb(219,96,54)" fg:x="1121" fg:w="1"/><text x="90.1457%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="89.8957%" y="309" width="0.0802%" height="15" fill="rgb(250,177,24)" fg:x="1121" fg:w="1"/><text x="90.1457%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="89.8957%" y="293" width="0.0802%" height="15" fill="rgb(242,154,46)" fg:x="1121" fg:w="1"/><text x="90.1457%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="89.8957%" y="277" width="0.0802%" height="15" fill="rgb(226,176,29)" fg:x="1121" fg:w="1"/><text x="90.1457%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="89.8957%" y="261" width="0.0802%" height="15" fill="rgb(226,29,2)" fg:x="1121" fg:w="1"/><text x="90.1457%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="89.8957%" y="245" width="0.0802%" height="15" fill="rgb(237,104,14)" fg:x="1121" fg:w="1"/><text x="90.1457%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="89.8957%" y="229" width="0.0802%" height="15" fill="rgb(245,207,31)" fg:x="1121" fg:w="1"/><text x="90.1457%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="89.8957%" y="213" width="0.0802%" height="15" fill="rgb(229,211,45)" fg:x="1121" fg:w="1"/><text x="90.1457%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="89.8957%" y="197" width="0.0802%" height="15" fill="rgb(229,113,15)" fg:x="1121" fg:w="1"/><text x="90.1457%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="89.8957%" y="181" width="0.0802%" height="15" fill="rgb(237,147,15)" fg:x="1121" fg:w="1"/><text x="90.1457%" y="191.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="89.8957%" y="341" width="0.1604%" height="15" fill="rgb(244,120,12)" fg:x="1121" fg:w="2"/><text x="90.1457%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="89.9759%" y="325" width="0.0802%" height="15" fill="rgb(205,120,12)" fg:x="1122" fg:w="1"/><text x="90.2259%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="89.9759%" y="309" width="0.0802%" height="15" fill="rgb(231,26,45)" fg:x="1122" fg:w="1"/><text x="90.2259%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="89.9759%" y="293" width="0.0802%" height="15" fill="rgb(246,98,1)" fg:x="1122" fg:w="1"/><text x="90.2259%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="89.9759%" y="277" width="0.0802%" height="15" fill="rgb(207,68,45)" fg:x="1122" fg:w="1"/><text x="90.2259%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="89.9759%" y="261" width="0.0802%" height="15" fill="rgb(231,27,38)" fg:x="1122" fg:w="1"/><text x="90.2259%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="89.9759%" y="245" width="0.0802%" height="15" fill="rgb(214,223,3)" fg:x="1122" fg:w="1"/><text x="90.2259%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.9759%" y="229" width="0.0802%" height="15" fill="rgb(228,195,46)" fg:x="1122" fg:w="1"/><text x="90.2259%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="90.1363%" y="309" width="0.0802%" height="15" fill="rgb(231,100,42)" fg:x="1124" fg:w="1"/><text x="90.3863%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="90.2165%" y="309" width="0.0802%" height="15" fill="rgb(236,53,4)" fg:x="1125" fg:w="1"/><text x="90.4665%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.2165%" y="293" width="0.0802%" height="15" fill="rgb(230,152,12)" fg:x="1125" fg:w="1"/><text x="90.4665%" y="303.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="90.2967%" y="309" width="0.0802%" height="15" fill="rgb(226,101,19)" fg:x="1126" fg:w="1"/><text x="90.5467%" y="319.50"></text></g><g><title>kernel::model::EntityPtr::gid (5 samples, 0.40%)</title><rect x="90.0561%" y="341" width="0.4010%" height="15" fill="rgb(250,149,32)" fg:x="1123" fg:w="5"/><text x="90.3061%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="90.1363%" y="325" width="0.3208%" height="15" fill="rgb(232,178,12)" fg:x="1124" fg:w="4"/><text x="90.3863%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="90.3769%" y="309" width="0.0802%" height="15" fill="rgb(246,151,17)" fg:x="1127" fg:w="1"/><text x="90.6269%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="90.3769%" y="293" width="0.0802%" height="15" fill="rgb(252,17,51)" fg:x="1127" fg:w="1"/><text x="90.6269%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="90.3769%" y="277" width="0.0802%" height="15" fill="rgb(250,207,23)" fg:x="1127" fg:w="1"/><text x="90.6269%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="90.3769%" y="261" width="0.0802%" height="15" fill="rgb(205,27,5)" fg:x="1127" fg:w="1"/><text x="90.6269%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="90.3769%" y="245" width="0.0802%" height="15" fill="rgb(224,32,19)" fg:x="1127" fg:w="1"/><text x="90.6269%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="90.3769%" y="229" width="0.0802%" height="15" fill="rgb(247,214,40)" fg:x="1127" fg:w="1"/><text x="90.6269%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="90.3769%" y="213" width="0.0802%" height="15" fill="rgb(239,199,17)" fg:x="1127" fg:w="1"/><text x="90.6269%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.3769%" y="197" width="0.0802%" height="15" fill="rgb(251,159,9)" fg:x="1127" fg:w="1"/><text x="90.6269%" y="207.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="90.4571%" y="277" width="0.0802%" height="15" fill="rgb(225,78,32)" fg:x="1128" fg:w="1"/><text x="90.7071%" y="287.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (1 samples, 0.08%)</title><rect x="90.4571%" y="261" width="0.0802%" height="15" fill="rgb(206,97,47)" fg:x="1128" fg:w="1"/><text x="90.7071%" y="271.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_uppercase (1 samples, 0.08%)</title><rect x="90.4571%" y="245" width="0.0802%" height="15" fill="rgb(227,107,4)" fg:x="1128" fg:w="1"/><text x="90.7071%" y="255.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_lowercase (1 samples, 0.08%)</title><rect x="90.4571%" y="229" width="0.0802%" height="15" fill="rgb(241,146,50)" fg:x="1128" fg:w="1"/><text x="90.7071%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="90.6175%" y="197" width="0.0802%" height="15" fill="rgb(232,92,30)" fg:x="1130" fg:w="1"/><text x="90.8675%" y="207.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="90.6175%" y="181" width="0.0802%" height="15" fill="rgb(222,0,40)" fg:x="1130" fg:w="1"/><text x="90.8675%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="90.5373%" y="261" width="0.2406%" height="15" fill="rgb(219,54,33)" fg:x="1129" fg:w="3"/><text x="90.7873%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="90.5373%" y="245" width="0.2406%" height="15" fill="rgb(226,209,28)" fg:x="1129" fg:w="3"/><text x="90.7873%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (3 samples, 0.24%)</title><rect x="90.5373%" y="229" width="0.2406%" height="15" fill="rgb(254,205,35)" fg:x="1129" fg:w="3"/><text x="90.7873%" y="239.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="90.5373%" y="213" width="0.2406%" height="15" fill="rgb(230,159,3)" fg:x="1129" fg:w="3"/><text x="90.7873%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="90.6977%" y="197" width="0.0802%" height="15" fill="rgb(232,190,24)" fg:x="1131" fg:w="1"/><text x="90.9477%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="90.7779%" y="213" width="0.0802%" height="15" fill="rgb(217,227,44)" fg:x="1132" fg:w="1"/><text x="91.0279%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.7779%" y="197" width="0.0802%" height="15" fill="rgb(236,211,1)" fg:x="1132" fg:w="1"/><text x="91.0279%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="90.7779%" y="261" width="0.1604%" height="15" fill="rgb(250,127,46)" fg:x="1132" fg:w="2"/><text x="91.0279%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="90.7779%" y="245" width="0.1604%" height="15" fill="rgb(229,213,6)" fg:x="1132" fg:w="2"/><text x="91.0279%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="90.7779%" y="229" width="0.1604%" height="15" fill="rgb(237,15,36)" fg:x="1132" fg:w="2"/><text x="91.0279%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="90.8581%" y="213" width="0.0802%" height="15" fill="rgb(213,131,41)" fg:x="1133" fg:w="1"/><text x="91.1081%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.8581%" y="197" width="0.0802%" height="15" fill="rgb(225,82,44)" fg:x="1133" fg:w="1"/><text x="91.1081%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.9383%" y="181" width="0.0802%" height="15" fill="rgb(249,42,11)" fg:x="1134" fg:w="1"/><text x="91.1883%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (3 samples, 0.24%)</title><rect x="90.9383%" y="197" width="0.2406%" height="15" fill="rgb(253,11,29)" fg:x="1134" fg:w="3"/><text x="91.1883%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (2 samples, 0.16%)</title><rect x="91.0184%" y="181" width="0.1604%" height="15" fill="rgb(206,8,54)" fg:x="1135" fg:w="2"/><text x="91.2684%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="91.1788%" y="197" width="0.0802%" height="15" fill="rgb(222,186,2)" fg:x="1137" fg:w="1"/><text x="91.4288%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="91.1788%" y="181" width="0.0802%" height="15" fill="rgb(221,206,53)" fg:x="1137" fg:w="1"/><text x="91.4288%" y="191.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="91.1788%" y="165" width="0.0802%" height="15" fill="rgb(230,150,21)" fg:x="1137" fg:w="1"/><text x="91.4288%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="91.1788%" y="149" width="0.0802%" height="15" fill="rgb(253,202,10)" fg:x="1137" fg:w="1"/><text x="91.4288%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.1788%" y="133" width="0.0802%" height="15" fill="rgb(238,109,40)" fg:x="1137" fg:w="1"/><text x="91.4288%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="91.2590%" y="133" width="0.2406%" height="15" fill="rgb(247,120,22)" fg:x="1138" fg:w="3"/><text x="91.5090%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="91.3392%" y="117" width="0.1604%" height="15" fill="rgb(207,43,30)" fg:x="1139" fg:w="2"/><text x="91.5892%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="91.3392%" y="101" width="0.1604%" height="15" fill="rgb(213,211,24)" fg:x="1139" fg:w="2"/><text x="91.5892%" y="111.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="91.3392%" y="85" width="0.1604%" height="15" fill="rgb(239,73,39)" fg:x="1139" fg:w="2"/><text x="91.5892%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="91.4996%" y="133" width="0.0802%" height="15" fill="rgb(245,182,19)" fg:x="1141" fg:w="1"/><text x="91.7496%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.4996%" y="117" width="0.0802%" height="15" fill="rgb(247,143,26)" fg:x="1141" fg:w="1"/><text x="91.7496%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.4996%" y="101" width="0.0802%" height="15" fill="rgb(228,191,23)" fg:x="1141" fg:w="1"/><text x="91.7496%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.4996%" y="85" width="0.0802%" height="15" fill="rgb(253,165,31)" fg:x="1141" fg:w="1"/><text x="91.7496%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.5798%" y="117" width="0.0802%" height="15" fill="rgb(234,138,20)" fg:x="1142" fg:w="1"/><text x="91.8298%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.5798%" y="101" width="0.0802%" height="15" fill="rgb(218,191,29)" fg:x="1142" fg:w="1"/><text x="91.8298%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.5798%" y="85" width="0.0802%" height="15" fill="rgb(221,157,19)" fg:x="1142" fg:w="1"/><text x="91.8298%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.6600%" y="101" width="0.0802%" height="15" fill="rgb(237,26,42)" fg:x="1143" fg:w="1"/><text x="91.9100%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.96%)</title><rect x="91.2590%" y="181" width="0.9623%" height="15" fill="rgb(220,163,24)" fg:x="1138" fg:w="12"/><text x="91.5090%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (12 samples, 0.96%)</title><rect x="91.2590%" y="165" width="0.9623%" height="15" fill="rgb(242,115,20)" fg:x="1138" fg:w="12"/><text x="91.5090%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (12 samples, 0.96%)</title><rect x="91.2590%" y="149" width="0.9623%" height="15" fill="rgb(210,206,9)" fg:x="1138" fg:w="12"/><text x="91.5090%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (8 samples, 0.64%)</title><rect x="91.5798%" y="133" width="0.6415%" height="15" fill="rgb(208,71,17)" fg:x="1142" fg:w="8"/><text x="91.8298%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (7 samples, 0.56%)</title><rect x="91.6600%" y="117" width="0.5613%" height="15" fill="rgb(233,7,5)" fg:x="1143" fg:w="7"/><text x="91.9100%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (6 samples, 0.48%)</title><rect x="91.7402%" y="101" width="0.4812%" height="15" fill="rgb(207,92,33)" fg:x="1144" fg:w="6"/><text x="91.9902%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.3015%" y="165" width="0.0802%" height="15" fill="rgb(218,87,9)" fg:x="1151" fg:w="1"/><text x="92.5515%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="92.3817%" y="165" width="0.0802%" height="15" fill="rgb(219,47,37)" fg:x="1152" fg:w="1"/><text x="92.6317%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="92.2213%" y="181" width="0.3208%" height="15" fill="rgb(221,152,34)" fg:x="1150" fg:w="4"/><text x="92.4713%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="92.4619%" y="165" width="0.0802%" height="15" fill="rgb(235,176,21)" fg:x="1153" fg:w="1"/><text x="92.7119%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (21 samples, 1.68%)</title><rect x="90.9383%" y="213" width="1.6840%" height="15" fill="rgb(232,212,21)" fg:x="1134" fg:w="21"/><text x="91.1883%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (17 samples, 1.36%)</title><rect x="91.2590%" y="197" width="1.3633%" height="15" fill="rgb(245,82,39)" fg:x="1138" fg:w="17"/><text x="91.5090%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="92.5421%" y="181" width="0.0802%" height="15" fill="rgb(241,52,51)" fg:x="1154" fg:w="1"/><text x="92.7921%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="92.5421%" y="165" width="0.0802%" height="15" fill="rgb(219,91,24)" fg:x="1154" fg:w="1"/><text x="92.7921%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.5421%" y="149" width="0.0802%" height="15" fill="rgb(241,142,12)" fg:x="1154" fg:w="1"/><text x="92.7921%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.5421%" y="133" width="0.0802%" height="15" fill="rgb(230,27,9)" fg:x="1154" fg:w="1"/><text x="92.7921%" y="143.50"></text></g><g><title>regex::regex::string::Regex::new (23 samples, 1.84%)</title><rect x="90.9383%" y="261" width="1.8444%" height="15" fill="rgb(249,181,32)" fg:x="1134" fg:w="23"/><text x="91.1883%" y="271.50">r..</text></g><g><title>regex::builders::string::RegexBuilder::build (23 samples, 1.84%)</title><rect x="90.9383%" y="245" width="1.8444%" height="15" fill="rgb(230,107,3)" fg:x="1134" fg:w="23"/><text x="91.1883%" y="255.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (23 samples, 1.84%)</title><rect x="90.9383%" y="229" width="1.8444%" height="15" fill="rgb(246,204,14)" fg:x="1134" fg:w="23"/><text x="91.1883%" y="239.50">r..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="92.6223%" y="213" width="0.1604%" height="15" fill="rgb(213,192,47)" fg:x="1155" fg:w="2"/><text x="92.8723%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="92.6223%" y="197" width="0.1604%" height="15" fill="rgb(240,44,36)" fg:x="1155" fg:w="2"/><text x="92.8723%" y="207.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="92.7025%" y="181" width="0.0802%" height="15" fill="rgb(244,209,38)" fg:x="1156" fg:w="1"/><text x="92.9525%" y="191.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="92.7025%" y="165" width="0.0802%" height="15" fill="rgb(219,34,37)" fg:x="1156" fg:w="1"/><text x="92.9525%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="92.9431%" y="181" width="0.0802%" height="15" fill="rgb(210,28,6)" fg:x="1159" fg:w="1"/><text x="93.1931%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="92.9431%" y="165" width="0.0802%" height="15" fill="rgb(244,110,52)" fg:x="1159" fg:w="1"/><text x="93.1931%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="92.9431%" y="149" width="0.0802%" height="15" fill="rgb(254,124,47)" fg:x="1159" fg:w="1"/><text x="93.1931%" y="159.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="92.7827%" y="197" width="0.4010%" height="15" fill="rgb(254,110,13)" fg:x="1157" fg:w="5"/><text x="93.0327%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="93.0233%" y="181" width="0.1604%" height="15" fill="rgb(252,57,21)" fg:x="1160" fg:w="2"/><text x="93.2733%" y="191.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (34 samples, 2.73%)</title><rect x="90.5373%" y="277" width="2.7265%" height="15" fill="rgb(242,60,45)" fg:x="1129" fg:w="34"/><text x="90.7873%" y="287.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.48%)</title><rect x="92.7827%" y="261" width="0.4812%" height="15" fill="rgb(234,49,30)" fg:x="1157" fg:w="6"/><text x="93.0327%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.48%)</title><rect x="92.7827%" y="245" width="0.4812%" height="15" fill="rgb(218,98,6)" fg:x="1157" fg:w="6"/><text x="93.0327%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.48%)</title><rect x="92.7827%" y="229" width="0.4812%" height="15" fill="rgb(220,174,29)" fg:x="1157" fg:w="6"/><text x="93.0327%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="92.7827%" y="213" width="0.4812%" height="15" fill="rgb(236,163,23)" fg:x="1157" fg:w="6"/><text x="93.0327%" y="223.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="93.1836%" y="197" width="0.0802%" height="15" fill="rgb(242,114,45)" fg:x="1162" fg:w="1"/><text x="93.4336%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="93.1836%" y="181" width="0.0802%" height="15" fill="rgb(232,10,53)" fg:x="1162" fg:w="1"/><text x="93.4336%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.1836%" y="165" width="0.0802%" height="15" fill="rgb(245,108,29)" fg:x="1162" fg:w="1"/><text x="93.4336%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.3440%" y="229" width="0.0802%" height="15" fill="rgb(240,89,53)" fg:x="1164" fg:w="1"/><text x="93.5940%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="93.3440%" y="261" width="0.1604%" height="15" fill="rgb(226,60,45)" fg:x="1164" fg:w="2"/><text x="93.5940%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="93.3440%" y="245" width="0.1604%" height="15" fill="rgb(230,41,44)" fg:x="1164" fg:w="2"/><text x="93.5940%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="93.4242%" y="229" width="0.0802%" height="15" fill="rgb(230,26,20)" fg:x="1165" fg:w="1"/><text x="93.6742%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="93.4242%" y="213" width="0.0802%" height="15" fill="rgb(237,170,32)" fg:x="1165" fg:w="1"/><text x="93.6742%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.4242%" y="197" width="0.0802%" height="15" fill="rgb(212,35,42)" fg:x="1165" fg:w="1"/><text x="93.6742%" y="207.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="93.5846%" y="245" width="0.1604%" height="15" fill="rgb(227,31,34)" fg:x="1167" fg:w="2"/><text x="93.8346%" y="255.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="93.5846%" y="229" width="0.1604%" height="15" fill="rgb(216,19,18)" fg:x="1167" fg:w="2"/><text x="93.8346%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="93.6648%" y="213" width="0.0802%" height="15" fill="rgb(211,133,42)" fg:x="1168" fg:w="1"/><text x="93.9148%" y="223.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (6 samples, 0.48%)</title><rect x="93.5044%" y="261" width="0.4812%" height="15" fill="rgb(244,66,13)" fg:x="1166" fg:w="6"/><text x="93.7544%" y="271.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="93.7450%" y="245" width="0.2406%" height="15" fill="rgb(218,185,50)" fg:x="1169" fg:w="3"/><text x="93.9950%" y="255.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="93.7450%" y="229" width="0.2406%" height="15" fill="rgb(219,149,13)" fg:x="1169" fg:w="3"/><text x="93.9950%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="93.7450%" y="213" width="0.2406%" height="15" fill="rgb(221,125,0)" fg:x="1169" fg:w="3"/><text x="93.9950%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="93.7450%" y="197" width="0.2406%" height="15" fill="rgb(247,126,27)" fg:x="1169" fg:w="3"/><text x="93.9950%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="93.8252%" y="181" width="0.1604%" height="15" fill="rgb(250,138,30)" fg:x="1170" fg:w="2"/><text x="94.0752%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.9856%" y="213" width="0.0802%" height="15" fill="rgb(230,151,9)" fg:x="1172" fg:w="1"/><text x="94.2356%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.9856%" y="197" width="0.0802%" height="15" fill="rgb(233,80,38)" fg:x="1172" fg:w="1"/><text x="94.2356%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="94.0658%" y="213" width="0.0802%" height="15" fill="rgb(232,68,43)" fg:x="1173" fg:w="1"/><text x="94.3158%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="94.0658%" y="197" width="0.0802%" height="15" fill="rgb(254,5,50)" fg:x="1173" fg:w="1"/><text x="94.3158%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="94.0658%" y="181" width="0.0802%" height="15" fill="rgb(225,45,5)" fg:x="1173" fg:w="1"/><text x="94.3158%" y="191.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="94.0658%" y="165" width="0.0802%" height="15" fill="rgb(239,22,3)" fg:x="1173" fg:w="1"/><text x="94.3158%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="94.0658%" y="149" width="0.0802%" height="15" fill="rgb(243,129,0)" fg:x="1173" fg:w="1"/><text x="94.3158%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="94.0658%" y="133" width="0.0802%" height="15" fill="rgb(223,164,0)" fg:x="1173" fg:w="1"/><text x="94.3158%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (2 samples, 0.16%)</title><rect x="94.2261%" y="181" width="0.1604%" height="15" fill="rgb(221,46,29)" fg:x="1175" fg:w="2"/><text x="94.4761%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (4 samples, 0.32%)</title><rect x="94.1460%" y="197" width="0.3208%" height="15" fill="rgb(205,97,47)" fg:x="1174" fg:w="4"/><text x="94.3960%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="94.3865%" y="181" width="0.0802%" height="15" fill="rgb(249,14,8)" fg:x="1177" fg:w="1"/><text x="94.6365%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="94.3865%" y="165" width="0.0802%" height="15" fill="rgb(216,77,3)" fg:x="1177" fg:w="1"/><text x="94.6365%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="94.5469%" y="165" width="0.0802%" height="15" fill="rgb(206,168,54)" fg:x="1179" fg:w="1"/><text x="94.7969%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (1 samples, 0.08%)</title><rect x="94.6271%" y="165" width="0.0802%" height="15" fill="rgb(236,3,41)" fg:x="1180" fg:w="1"/><text x="94.8771%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="94.6271%" y="149" width="0.0802%" height="15" fill="rgb(231,132,24)" fg:x="1180" fg:w="1"/><text x="94.8771%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.6271%" y="133" width="0.0802%" height="15" fill="rgb(227,221,40)" fg:x="1180" fg:w="1"/><text x="94.8771%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.6271%" y="117" width="0.0802%" height="15" fill="rgb(233,151,11)" fg:x="1180" fg:w="1"/><text x="94.8771%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.6271%" y="101" width="0.0802%" height="15" fill="rgb(247,81,35)" fg:x="1180" fg:w="1"/><text x="94.8771%" y="111.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (5 samples, 0.40%)</title><rect x="94.4667%" y="197" width="0.4010%" height="15" fill="rgb(243,128,48)" fg:x="1178" fg:w="5"/><text x="94.7167%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="94.4667%" y="181" width="0.4010%" height="15" fill="rgb(253,16,10)" fg:x="1178" fg:w="5"/><text x="94.7167%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (2 samples, 0.16%)</title><rect x="94.7073%" y="165" width="0.1604%" height="15" fill="rgb(228,67,27)" fg:x="1181" fg:w="2"/><text x="94.9573%" y="175.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (2 samples, 0.16%)</title><rect x="94.7073%" y="149" width="0.1604%" height="15" fill="rgb(231,105,25)" fg:x="1181" fg:w="2"/><text x="94.9573%" y="159.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.16%)</title><rect x="94.7073%" y="133" width="0.1604%" height="15" fill="rgb(213,166,47)" fg:x="1181" fg:w="2"/><text x="94.9573%" y="143.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="94.8677%" y="85" width="0.0802%" height="15" fill="rgb(209,27,10)" fg:x="1183" fg:w="1"/><text x="95.1177%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="94.9479%" y="85" width="0.1604%" height="15" fill="rgb(241,44,30)" fg:x="1184" fg:w="2"/><text x="95.1979%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="94.9479%" y="69" width="0.1604%" height="15" fill="rgb(223,216,15)" fg:x="1184" fg:w="2"/><text x="95.1979%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="94.9479%" y="53" width="0.1604%" height="15" fill="rgb(227,14,7)" fg:x="1184" fg:w="2"/><text x="95.1979%" y="63.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="94.9479%" y="37" width="0.1604%" height="15" fill="rgb(237,14,5)" fg:x="1184" fg:w="2"/><text x="95.1979%" y="47.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.3488%" y="37" width="0.0802%" height="15" fill="rgb(232,14,36)" fg:x="1189" fg:w="1"/><text x="95.5988%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (6 samples, 0.48%)</title><rect x="95.1083%" y="85" width="0.4812%" height="15" fill="rgb(234,0,38)" fg:x="1186" fg:w="6"/><text x="95.3583%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.32%)</title><rect x="95.2686%" y="69" width="0.3208%" height="15" fill="rgb(207,170,14)" fg:x="1188" fg:w="4"/><text x="95.5186%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="95.3488%" y="53" width="0.2406%" height="15" fill="rgb(252,45,13)" fg:x="1189" fg:w="3"/><text x="95.5988%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="95.4290%" y="37" width="0.1604%" height="15" fill="rgb(213,142,7)" fg:x="1190" fg:w="2"/><text x="95.6790%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (8 samples, 0.64%)</title><rect x="95.5894%" y="85" width="0.6415%" height="15" fill="rgb(216,157,23)" fg:x="1192" fg:w="8"/><text x="95.8394%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (8 samples, 0.64%)</title><rect x="95.5894%" y="69" width="0.6415%" height="15" fill="rgb(212,145,33)" fg:x="1192" fg:w="8"/><text x="95.8394%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (8 samples, 0.64%)</title><rect x="95.5894%" y="53" width="0.6415%" height="15" fill="rgb(233,26,13)" fg:x="1192" fg:w="8"/><text x="95.8394%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="96.2310%" y="85" width="0.0802%" height="15" fill="rgb(219,196,19)" fg:x="1200" fg:w="1"/><text x="96.4810%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.2310%" y="69" width="0.0802%" height="15" fill="rgb(246,56,21)" fg:x="1200" fg:w="1"/><text x="96.4810%" y="79.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 1.52%)</title><rect x="94.8677%" y="181" width="1.5237%" height="15" fill="rgb(222,28,53)" fg:x="1183" fg:w="19"/><text x="95.1177%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (19 samples, 1.52%)</title><rect x="94.8677%" y="165" width="1.5237%" height="15" fill="rgb(224,5,27)" fg:x="1183" fg:w="19"/><text x="95.1177%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (19 samples, 1.52%)</title><rect x="94.8677%" y="149" width="1.5237%" height="15" fill="rgb(220,153,33)" fg:x="1183" fg:w="19"/><text x="95.1177%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (19 samples, 1.52%)</title><rect x="94.8677%" y="133" width="1.5237%" height="15" fill="rgb(226,58,19)" fg:x="1183" fg:w="19"/><text x="95.1177%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (19 samples, 1.52%)</title><rect x="94.8677%" y="117" width="1.5237%" height="15" fill="rgb(239,112,23)" fg:x="1183" fg:w="19"/><text x="95.1177%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (19 samples, 1.52%)</title><rect x="94.8677%" y="101" width="1.5237%" height="15" fill="rgb(251,213,20)" fg:x="1183" fg:w="19"/><text x="95.1177%" y="111.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="96.3111%" y="85" width="0.0802%" height="15" fill="rgb(215,181,21)" fg:x="1201" fg:w="1"/><text x="96.5611%" y="95.50"></text></g><g><title>regex_automata::meta::strategy::new (31 samples, 2.49%)</title><rect x="94.1460%" y="213" width="2.4860%" height="15" fill="rgb(240,8,35)" fg:x="1174" fg:w="31"/><text x="94.3960%" y="223.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (22 samples, 1.76%)</title><rect x="94.8677%" y="197" width="1.7642%" height="15" fill="rgb(232,203,3)" fg:x="1183" fg:w="22"/><text x="95.1177%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="96.3913%" y="181" width="0.2406%" height="15" fill="rgb(214,202,43)" fg:x="1202" fg:w="3"/><text x="96.6413%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="96.4715%" y="165" width="0.1604%" height="15" fill="rgb(254,35,11)" fg:x="1203" fg:w="2"/><text x="96.7215%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="96.6319%" y="213" width="0.0802%" height="15" fill="rgb(239,173,13)" fg:x="1205" fg:w="1"/><text x="96.8819%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="96.6319%" y="197" width="0.0802%" height="15" fill="rgb(220,141,0)" fg:x="1205" fg:w="1"/><text x="96.8819%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="96.6319%" y="181" width="0.0802%" height="15" fill="rgb(210,98,12)" fg:x="1205" fg:w="1"/><text x="96.8819%" y="191.50"></text></g><g><title>indefinite::rules::number::Number::check (44 samples, 3.53%)</title><rect x="93.2638%" y="277" width="3.5285%" height="15" fill="rgb(254,153,22)" fg:x="1163" fg:w="44"/><text x="93.5138%" y="287.50">ind..</text></g><g><title>regex::regex::string::Regex::new (35 samples, 2.81%)</title><rect x="93.9856%" y="261" width="2.8067%" height="15" fill="rgb(247,223,17)" fg:x="1172" fg:w="35"/><text x="94.2356%" y="271.50">re..</text></g><g><title>regex::builders::string::RegexBuilder::build (35 samples, 2.81%)</title><rect x="93.9856%" y="245" width="2.8067%" height="15" fill="rgb(246,56,7)" fg:x="1172" fg:w="35"/><text x="94.2356%" y="255.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (35 samples, 2.81%)</title><rect x="93.9856%" y="229" width="2.8067%" height="15" fill="rgb(240,226,12)" fg:x="1172" fg:w="35"/><text x="94.2356%" y="239.50">re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="96.7121%" y="213" width="0.0802%" height="15" fill="rgb(205,87,46)" fg:x="1206" fg:w="1"/><text x="96.9621%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="96.7121%" y="197" width="0.0802%" height="15" fill="rgb(245,214,51)" fg:x="1206" fg:w="1"/><text x="96.9621%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="96.7121%" y="181" width="0.0802%" height="15" fill="rgb(223,172,33)" fg:x="1206" fg:w="1"/><text x="96.9621%" y="191.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="96.7923%" y="245" width="0.0802%" height="15" fill="rgb(227,203,34)" fg:x="1207" fg:w="1"/><text x="97.0423%" y="255.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="96.7923%" y="229" width="0.0802%" height="15" fill="rgb(248,143,44)" fg:x="1207" fg:w="1"/><text x="97.0423%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="96.7923%" y="213" width="0.0802%" height="15" fill="rgb(226,162,5)" fg:x="1207" fg:w="1"/><text x="97.0423%" y="223.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="96.7923%" y="197" width="0.0802%" height="15" fill="rgb(211,143,1)" fg:x="1207" fg:w="1"/><text x="97.0423%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="96.8725%" y="197" width="0.0802%" height="15" fill="rgb(224,96,15)" fg:x="1208" fg:w="1"/><text x="97.1225%" y="207.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.8725%" y="181" width="0.0802%" height="15" fill="rgb(222,4,38)" fg:x="1208" fg:w="1"/><text x="97.1225%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="96.8725%" y="165" width="0.0802%" height="15" fill="rgb(253,228,15)" fg:x="1208" fg:w="1"/><text x="97.1225%" y="175.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.8725%" y="149" width="0.0802%" height="15" fill="rgb(242,194,12)" fg:x="1208" fg:w="1"/><text x="97.1225%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="96.8725%" y="133" width="0.0802%" height="15" fill="rgb(214,177,31)" fg:x="1208" fg:w="1"/><text x="97.1225%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="96.8725%" y="117" width="0.0802%" height="15" fill="rgb(226,58,51)" fg:x="1208" fg:w="1"/><text x="97.1225%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.8725%" y="101" width="0.0802%" height="15" fill="rgb(250,119,16)" fg:x="1208" fg:w="1"/><text x="97.1225%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.8725%" y="85" width="0.0802%" height="15" fill="rgb(223,128,53)" fg:x="1208" fg:w="1"/><text x="97.1225%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="96.9527%" y="165" width="0.0802%" height="15" fill="rgb(251,199,15)" fg:x="1209" fg:w="1"/><text x="97.2027%" y="175.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="97.0329%" y="165" width="0.0802%" height="15" fill="rgb(235,168,42)" fg:x="1210" fg:w="1"/><text x="97.2829%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (3 samples, 0.24%)</title><rect x="96.9527%" y="197" width="0.2406%" height="15" fill="rgb(250,210,17)" fg:x="1209" fg:w="3"/><text x="97.2027%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="96.9527%" y="181" width="0.2406%" height="15" fill="rgb(226,36,41)" fg:x="1209" fg:w="3"/><text x="97.2027%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="97.1131%" y="165" width="0.0802%" height="15" fill="rgb(225,87,10)" fg:x="1211" fg:w="1"/><text x="97.3631%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="97.1933%" y="197" width="0.0802%" height="15" fill="rgb(228,83,9)" fg:x="1212" fg:w="1"/><text x="97.4433%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="97.1933%" y="181" width="0.0802%" height="15" fill="rgb(225,16,36)" fg:x="1212" fg:w="1"/><text x="97.4433%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="97.1933%" y="165" width="0.0802%" height="15" fill="rgb(242,198,13)" fg:x="1212" fg:w="1"/><text x="97.4433%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="97.1933%" y="149" width="0.0802%" height="15" fill="rgb(239,25,51)" fg:x="1212" fg:w="1"/><text x="97.4433%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="97.1933%" y="133" width="0.0802%" height="15" fill="rgb(239,28,37)" fg:x="1212" fg:w="1"/><text x="97.4433%" y="143.50"></text></g><g><title>regex::regex::string::Regex::new (6 samples, 0.48%)</title><rect x="96.8725%" y="245" width="0.4812%" height="15" fill="rgb(234,70,17)" fg:x="1208" fg:w="6"/><text x="97.1225%" y="255.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (6 samples, 0.48%)</title><rect x="96.8725%" y="229" width="0.4812%" height="15" fill="rgb(231,215,53)" fg:x="1208" fg:w="6"/><text x="97.1225%" y="239.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (6 samples, 0.48%)</title><rect x="96.8725%" y="213" width="0.4812%" height="15" fill="rgb(218,140,42)" fg:x="1208" fg:w="6"/><text x="97.1225%" y="223.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="97.2735%" y="197" width="0.0802%" height="15" fill="rgb(233,227,45)" fg:x="1213" fg:w="1"/><text x="97.5235%" y="207.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="97.2735%" y="181" width="0.0802%" height="15" fill="rgb(225,189,21)" fg:x="1213" fg:w="1"/><text x="97.5235%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="97.2735%" y="165" width="0.0802%" height="15" fill="rgb(237,176,54)" fg:x="1213" fg:w="1"/><text x="97.5235%" y="175.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (8 samples, 0.64%)</title><rect x="96.7923%" y="261" width="0.6415%" height="15" fill="rgb(215,131,46)" fg:x="1207" fg:w="8"/><text x="97.0423%" y="271.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="97.3536%" y="245" width="0.0802%" height="15" fill="rgb(218,95,20)" fg:x="1214" fg:w="1"/><text x="97.6036%" y="255.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="97.3536%" y="229" width="0.0802%" height="15" fill="rgb(208,198,12)" fg:x="1214" fg:w="1"/><text x="97.6036%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="97.3536%" y="213" width="0.0802%" height="15" fill="rgb(239,107,50)" fg:x="1214" fg:w="1"/><text x="97.6036%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="97.3536%" y="197" width="0.0802%" height="15" fill="rgb(240,217,37)" fg:x="1214" fg:w="1"/><text x="97.6036%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="97.3536%" y="181" width="0.0802%" height="15" fill="rgb(242,197,49)" fg:x="1214" fg:w="1"/><text x="97.6036%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="97.3536%" y="165" width="0.0802%" height="15" fill="rgb(219,171,17)" fg:x="1214" fg:w="1"/><text x="97.6036%" y="175.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (98 samples, 7.86%)</title><rect x="89.6552%" y="357" width="7.8589%" height="15" fill="rgb(209,81,40)" fg:x="1118" fg:w="98"/><text x="89.9052%" y="367.50">&lt;&amp;kernel::m..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (88 samples, 7.06%)</title><rect x="90.4571%" y="341" width="7.0569%" height="15" fill="rgb(237,156,30)" fg:x="1128" fg:w="88"/><text x="90.7071%" y="351.50">plugins_c..</text></g><g><title>indefinite::indefinite (88 samples, 7.06%)</title><rect x="90.4571%" y="325" width="7.0569%" height="15" fill="rgb(212,127,16)" fg:x="1128" fg:w="88"/><text x="90.7071%" y="335.50">indefinit..</text></g><g><title>indefinite::methods::indefinite (88 samples, 7.06%)</title><rect x="90.4571%" y="309" width="7.0569%" height="15" fill="rgb(226,66,32)" fg:x="1128" fg:w="88"/><text x="90.7071%" y="319.50">indefinit..</text></g><g><title>indefinite::methods::apply_rules (88 samples, 7.06%)</title><rect x="90.4571%" y="293" width="7.0569%" height="15" fill="rgb(245,22,46)" fg:x="1128" fg:w="88"/><text x="90.7071%" y="303.50">indefinit..</text></g><g><title>indefinite::rules::other::Other::run (9 samples, 0.72%)</title><rect x="96.7923%" y="277" width="0.7217%" height="15" fill="rgb(210,112,21)" fg:x="1207" fg:w="9"/><text x="97.0423%" y="287.50"></text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="97.4338%" y="261" width="0.0802%" height="15" fill="rgb(207,118,39)" fg:x="1215" fg:w="1"/><text x="97.6838%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="97.5140%" y="341" width="0.0802%" height="15" fill="rgb(205,206,35)" fg:x="1216" fg:w="1"/><text x="97.7640%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="97.5140%" y="357" width="0.2406%" height="15" fill="rgb(222,120,2)" fg:x="1216" fg:w="3"/><text x="97.7640%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="97.5942%" y="341" width="0.1604%" height="15" fill="rgb(205,38,18)" fg:x="1217" fg:w="2"/><text x="97.8442%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.5942%" y="325" width="0.1604%" height="15" fill="rgb(226,61,2)" fg:x="1217" fg:w="2"/><text x="97.8442%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="97.5942%" y="309" width="0.1604%" height="15" fill="rgb(242,161,23)" fg:x="1217" fg:w="2"/><text x="97.8442%" y="319.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="97.5942%" y="293" width="0.1604%" height="15" fill="rgb(213,13,52)" fg:x="1217" fg:w="2"/><text x="97.8442%" y="303.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="97.5942%" y="277" width="0.1604%" height="15" fill="rgb(246,209,47)" fg:x="1217" fg:w="2"/><text x="97.8442%" y="287.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (2 samples, 0.16%)</title><rect x="97.5942%" y="261" width="0.1604%" height="15" fill="rgb(214,41,3)" fg:x="1217" fg:w="2"/><text x="97.8442%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="97.5942%" y="245" width="0.1604%" height="15" fill="rgb(236,119,38)" fg:x="1217" fg:w="2"/><text x="97.8442%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.5942%" y="229" width="0.1604%" height="15" fill="rgb(218,50,11)" fg:x="1217" fg:w="2"/><text x="97.8442%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.6744%" y="213" width="0.0802%" height="15" fill="rgb(228,38,11)" fg:x="1218" fg:w="1"/><text x="97.9244%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.6744%" y="197" width="0.0802%" height="15" fill="rgb(212,13,9)" fg:x="1218" fg:w="1"/><text x="97.9244%" y="207.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="97.7546%" y="277" width="0.0802%" height="15" fill="rgb(208,211,9)" fg:x="1219" fg:w="1"/><text x="98.0046%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.7546%" y="261" width="0.0802%" height="15" fill="rgb(239,39,32)" fg:x="1219" fg:w="1"/><text x="98.0046%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7546%" y="245" width="0.0802%" height="15" fill="rgb(254,179,26)" fg:x="1219" fg:w="1"/><text x="98.0046%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.7546%" y="229" width="0.0802%" height="15" fill="rgb(249,165,28)" fg:x="1219" fg:w="1"/><text x="98.0046%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7546%" y="213" width="0.0802%" height="15" fill="rgb(225,59,50)" fg:x="1219" fg:w="1"/><text x="98.0046%" y="223.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.7546%" y="197" width="0.0802%" height="15" fill="rgb(209,122,5)" fg:x="1219" fg:w="1"/><text x="98.0046%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7546%" y="181" width="0.0802%" height="15" fill="rgb(214,65,34)" fg:x="1219" fg:w="1"/><text x="98.0046%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.7546%" y="165" width="0.0802%" height="15" fill="rgb(249,183,32)" fg:x="1219" fg:w="1"/><text x="98.0046%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="97.7546%" y="149" width="0.0802%" height="15" fill="rgb(218,122,24)" fg:x="1219" fg:w="1"/><text x="98.0046%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7546%" y="133" width="0.0802%" height="15" fill="rgb(224,109,18)" fg:x="1219" fg:w="1"/><text x="98.0046%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.7546%" y="117" width="0.0802%" height="15" fill="rgb(210,68,50)" fg:x="1219" fg:w="1"/><text x="98.0046%" y="127.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="97.7546%" y="101" width="0.0802%" height="15" fill="rgb(212,184,34)" fg:x="1219" fg:w="1"/><text x="98.0046%" y="111.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7546%" y="85" width="0.0802%" height="15" fill="rgb(238,105,48)" fg:x="1219" fg:w="1"/><text x="98.0046%" y="95.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.7546%" y="69" width="0.0802%" height="15" fill="rgb(222,134,54)" fg:x="1219" fg:w="1"/><text x="98.0046%" y="79.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (111 samples, 8.90%)</title><rect x="89.0136%" y="517" width="8.9014%" height="15" fill="rgb(246,24,43)" fg:x="1110" fg:w="111"/><text x="89.2636%" y="527.50">kernel::plugi..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (111 samples, 8.90%)</title><rect x="89.0136%" y="501" width="8.9014%" height="15" fill="rgb(227,169,22)" fg:x="1110" fg:w="111"/><text x="89.2636%" y="511.50">&lt;plugins_dynl..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (110 samples, 8.82%)</title><rect x="89.0938%" y="485" width="8.8212%" height="15" fill="rgb(253,152,4)" fg:x="1111" fg:w="110"/><text x="89.3438%" y="495.50">kernel::plug..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (110 samples, 8.82%)</title><rect x="89.0938%" y="469" width="8.8212%" height="15" fill="rgb(219,158,36)" fg:x="1111" fg:w="110"/><text x="89.3438%" y="479.50">core::ops::f..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (110 samples, 8.82%)</title><rect x="89.0938%" y="453" width="8.8212%" height="15" fill="rgb(251,128,40)" fg:x="1111" fg:w="110"/><text x="89.3438%" y="463.50">kernel::plug..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (110 samples, 8.82%)</title><rect x="89.0938%" y="437" width="8.8212%" height="15" fill="rgb(254,101,39)" fg:x="1111" fg:w="110"/><text x="89.3438%" y="447.50">core::ops::f..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (110 samples, 8.82%)</title><rect x="89.0938%" y="421" width="8.8212%" height="15" fill="rgb(221,168,40)" fg:x="1111" fg:w="110"/><text x="89.3438%" y="431.50">&lt;alloc::boxe..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (110 samples, 8.82%)</title><rect x="89.0938%" y="405" width="8.8212%" height="15" fill="rgb(221,14,27)" fg:x="1111" fg:w="110"/><text x="89.3438%" y="415.50">&lt;engine::ses..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (110 samples, 8.82%)</title><rect x="89.0938%" y="389" width="8.8212%" height="15" fill="rgb(207,36,43)" fg:x="1111" fg:w="110"/><text x="89.3438%" y="399.50">&lt;plugins_cor..</text></g><g><title>plugins_core::looking::model::new_area_observation (103 samples, 8.26%)</title><rect x="89.6552%" y="373" width="8.2598%" height="15" fill="rgb(240,172,53)" fg:x="1118" fg:w="103"/><text x="89.9052%" y="383.50">plugins_cor..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="97.7546%" y="357" width="0.1604%" height="15" fill="rgb(241,138,43)" fg:x="1219" fg:w="2"/><text x="98.0046%" y="367.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (2 samples, 0.16%)</title><rect x="97.7546%" y="341" width="0.1604%" height="15" fill="rgb(227,78,19)" fg:x="1219" fg:w="2"/><text x="98.0046%" y="351.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (2 samples, 0.16%)</title><rect x="97.7546%" y="325" width="0.1604%" height="15" fill="rgb(215,127,44)" fg:x="1219" fg:w="2"/><text x="98.0046%" y="335.50"></text></g><g><title>engine::session::Session::load_entity (2 samples, 0.16%)</title><rect x="97.7546%" y="309" width="0.1604%" height="15" fill="rgb(227,13,10)" fg:x="1219" fg:w="2"/><text x="98.0046%" y="319.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="97.7546%" y="293" width="0.1604%" height="15" fill="rgb(249,177,6)" fg:x="1219" fg:w="2"/><text x="98.0046%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="97.8348%" y="277" width="0.0802%" height="15" fill="rgb(215,154,26)" fg:x="1220" fg:w="1"/><text x="98.0848%" y="287.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="97.8348%" y="261" width="0.0802%" height="15" fill="rgb(250,168,20)" fg:x="1220" fg:w="1"/><text x="98.0848%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.8348%" y="245" width="0.0802%" height="15" fill="rgb(222,53,38)" fg:x="1220" fg:w="1"/><text x="98.0848%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.8348%" y="229" width="0.0802%" height="15" fill="rgb(245,154,5)" fg:x="1220" fg:w="1"/><text x="98.0848%" y="239.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.8348%" y="213" width="0.0802%" height="15" fill="rgb(214,89,50)" fg:x="1220" fg:w="1"/><text x="98.0848%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.8348%" y="197" width="0.0802%" height="15" fill="rgb(232,73,14)" fg:x="1220" fg:w="1"/><text x="98.0848%" y="207.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.8348%" y="181" width="0.0802%" height="15" fill="rgb(230,101,20)" fg:x="1220" fg:w="1"/><text x="98.0848%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.8348%" y="165" width="0.0802%" height="15" fill="rgb(208,56,28)" fg:x="1220" fg:w="1"/><text x="98.0848%" y="175.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.8348%" y="149" width="0.0802%" height="15" fill="rgb(247,205,22)" fg:x="1220" fg:w="1"/><text x="98.0848%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.8348%" y="133" width="0.0802%" height="15" fill="rgb(252,109,51)" fg:x="1220" fg:w="1"/><text x="98.0848%" y="143.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.8348%" y="117" width="0.0802%" height="15" fill="rgb(220,40,24)" fg:x="1220" fg:w="1"/><text x="98.0848%" y="127.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.8348%" y="101" width="0.0802%" height="15" fill="rgb(251,108,7)" fg:x="1220" fg:w="1"/><text x="98.0848%" y="111.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.8348%" y="85" width="0.0802%" height="15" fill="rgb(238,102,51)" fg:x="1220" fg:w="1"/><text x="98.0848%" y="95.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="98.0754%" y="453" width="0.0802%" height="15" fill="rgb(219,149,34)" fg:x="1223" fg:w="1"/><text x="98.3254%" y="463.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="98.0754%" y="469" width="0.1604%" height="15" fill="rgb(239,70,0)" fg:x="1223" fg:w="2"/><text x="98.3254%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.1556%" y="453" width="0.0802%" height="15" fill="rgb(246,214,23)" fg:x="1224" fg:w="1"/><text x="98.4056%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.1556%" y="437" width="0.0802%" height="15" fill="rgb(239,221,51)" fg:x="1224" fg:w="1"/><text x="98.4056%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2358%" y="405" width="0.0802%" height="15" fill="rgb(254,62,14)" fg:x="1225" fg:w="1"/><text x="98.4858%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2358%" y="389" width="0.0802%" height="15" fill="rgb(253,57,33)" fg:x="1225" fg:w="1"/><text x="98.4858%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2358%" y="373" width="0.0802%" height="15" fill="rgb(229,34,6)" fg:x="1225" fg:w="1"/><text x="98.4858%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2358%" y="357" width="0.0802%" height="15" fill="rgb(235,191,23)" fg:x="1225" fg:w="1"/><text x="98.4858%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2358%" y="341" width="0.0802%" height="15" fill="rgb(217,207,27)" fg:x="1225" fg:w="1"/><text x="98.4858%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.2358%" y="325" width="0.0802%" height="15" fill="rgb(232,41,44)" fg:x="1225" fg:w="1"/><text x="98.4858%" y="335.50"></text></g><g><title>plugins_core::tools::contained_by (5 samples, 0.40%)</title><rect x="97.9952%" y="485" width="0.4010%" height="15" fill="rgb(221,188,19)" fg:x="1222" fg:w="5"/><text x="98.2452%" y="495.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (2 samples, 0.16%)</title><rect x="98.2358%" y="469" width="0.1604%" height="15" fill="rgb(245,180,45)" fg:x="1225" fg:w="2"/><text x="98.4858%" y="479.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (2 samples, 0.16%)</title><rect x="98.2358%" y="453" width="0.1604%" height="15" fill="rgb(250,220,42)" fg:x="1225" fg:w="2"/><text x="98.4858%" y="463.50"></text></g><g><title>engine::session::Session::load_entity (2 samples, 0.16%)</title><rect x="98.2358%" y="437" width="0.1604%" height="15" fill="rgb(234,16,34)" fg:x="1225" fg:w="2"/><text x="98.4858%" y="447.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="98.2358%" y="421" width="0.1604%" height="15" fill="rgb(233,217,23)" fg:x="1225" fg:w="2"/><text x="98.4858%" y="431.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="98.3160%" y="405" width="0.0802%" height="15" fill="rgb(209,22,46)" fg:x="1226" fg:w="1"/><text x="98.5660%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.3160%" y="389" width="0.0802%" height="15" fill="rgb(213,101,18)" fg:x="1226" fg:w="1"/><text x="98.5660%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="98.3160%" y="373" width="0.0802%" height="15" fill="rgb(215,179,52)" fg:x="1226" fg:w="1"/><text x="98.5660%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.3160%" y="357" width="0.0802%" height="15" fill="rgb(223,50,25)" fg:x="1226" fg:w="1"/><text x="98.5660%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.3962%" y="453" width="0.0802%" height="15" fill="rgb(224,51,44)" fg:x="1227" fg:w="1"/><text x="98.6462%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.3962%" y="437" width="0.0802%" height="15" fill="rgb(224,13,54)" fg:x="1227" fg:w="1"/><text x="98.6462%" y="447.50"></text></g><g><title>engine::session::Session::captured (128 samples, 10.26%)</title><rect x="88.2919%" y="661" width="10.2646%" height="15" fill="rgb(219,58,47)" fg:x="1101" fg:w="128"/><text x="88.5419%" y="671.50">engine::session..</text></g><g><title>engine::session::logs::capture (128 samples, 10.26%)</title><rect x="88.2919%" y="645" width="10.2646%" height="15" fill="rgb(246,124,34)" fg:x="1101" fg:w="128"/><text x="88.5419%" y="655.50">engine::session..</text></g><g><title>tracing_core::dispatcher::with_default (125 samples, 10.02%)</title><rect x="88.5325%" y="629" width="10.0241%" height="15" fill="rgb(245,109,25)" fg:x="1104" fg:w="125"/><text x="88.7825%" y="639.50">tracing_core::..</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (125 samples, 10.02%)</title><rect x="88.5325%" y="613" width="10.0241%" height="15" fill="rgb(235,48,23)" fg:x="1104" fg:w="125"/><text x="88.7825%" y="623.50">&lt;engine::sessi..</text></g><g><title>kernel::plugins::mw::apply_middleware (125 samples, 10.02%)</title><rect x="88.5325%" y="597" width="10.0241%" height="15" fill="rgb(229,203,36)" fg:x="1104" fg:w="125"/><text x="88.7825%" y="607.50">kernel::plugin..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (125 samples, 10.02%)</title><rect x="88.5325%" y="581" width="10.0241%" height="15" fill="rgb(234,180,9)" fg:x="1104" fg:w="125"/><text x="88.7825%" y="591.50">kernel::plugin..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (125 samples, 10.02%)</title><rect x="88.5325%" y="565" width="10.0241%" height="15" fill="rgb(228,98,45)" fg:x="1104" fg:w="125"/><text x="88.7825%" y="575.50">&lt;engine::sessi..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (119 samples, 9.54%)</title><rect x="89.0136%" y="549" width="9.5429%" height="15" fill="rgb(240,24,36)" fg:x="1110" fg:w="119"/><text x="89.2636%" y="559.50">kernel::plugin..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (119 samples, 9.54%)</title><rect x="89.0136%" y="533" width="9.5429%" height="15" fill="rgb(227,154,19)" fg:x="1110" fg:w="119"/><text x="89.2636%" y="543.50">&lt;plugins_rune:..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (8 samples, 0.64%)</title><rect x="97.9150%" y="517" width="0.6415%" height="15" fill="rgb(231,2,48)" fg:x="1221" fg:w="8"/><text x="98.1650%" y="527.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (8 samples, 0.64%)</title><rect x="97.9150%" y="501" width="0.6415%" height="15" fill="rgb(219,216,0)" fg:x="1221" fg:w="8"/><text x="98.1650%" y="511.50"></text></g><g><title>plugins_core::tools::occupied_by (2 samples, 0.16%)</title><rect x="98.3962%" y="485" width="0.1604%" height="15" fill="rgb(251,88,0)" fg:x="1227" fg:w="2"/><text x="98.6462%" y="495.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="98.3962%" y="469" width="0.1604%" height="15" fill="rgb(242,45,45)" fg:x="1227" fg:w="2"/><text x="98.6462%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.4763%" y="453" width="0.0802%" height="15" fill="rgb(218,149,45)" fg:x="1228" fg:w="1"/><text x="98.7263%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.4763%" y="437" width="0.0802%" height="15" fill="rgb(247,194,10)" fg:x="1228" fg:w="1"/><text x="98.7263%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="98.4763%" y="421" width="0.0802%" height="15" fill="rgb(234,33,37)" fg:x="1228" fg:w="1"/><text x="98.7263%" y="431.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="98.4763%" y="405" width="0.0802%" height="15" fill="rgb(218,61,13)" fg:x="1228" fg:w="1"/><text x="98.7263%" y="415.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="98.4763%" y="389" width="0.0802%" height="15" fill="rgb(210,80,52)" fg:x="1228" fg:w="1"/><text x="98.7263%" y="399.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.4763%" y="373" width="0.0802%" height="15" fill="rgb(218,203,27)" fg:x="1228" fg:w="1"/><text x="98.7263%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.4763%" y="357" width="0.0802%" height="15" fill="rgb(209,126,33)" fg:x="1228" fg:w="1"/><text x="98.7263%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.4763%" y="341" width="0.0802%" height="15" fill="rgb(234,173,41)" fg:x="1228" fg:w="1"/><text x="98.7263%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.4763%" y="325" width="0.0802%" height="15" fill="rgb(228,166,9)" fg:x="1228" fg:w="1"/><text x="98.7263%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.4763%" y="309" width="0.0802%" height="15" fill="rgb(208,124,43)" fg:x="1228" fg:w="1"/><text x="98.7263%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.5565%" y="565" width="0.0802%" height="15" fill="rgb(212,154,38)" fg:x="1229" fg:w="1"/><text x="98.8065%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.6367%" y="565" width="0.0802%" height="15" fill="rgb(246,179,35)" fg:x="1230" fg:w="1"/><text x="98.8867%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.6367%" y="549" width="0.0802%" height="15" fill="rgb(251,3,50)" fg:x="1230" fg:w="1"/><text x="98.8867%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.6367%" y="533" width="0.0802%" height="15" fill="rgb(219,96,8)" fg:x="1230" fg:w="1"/><text x="98.8867%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.6367%" y="517" width="0.0802%" height="15" fill="rgb(251,216,33)" fg:x="1230" fg:w="1"/><text x="98.8867%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.6367%" y="501" width="0.0802%" height="15" fill="rgb(243,145,29)" fg:x="1230" fg:w="1"/><text x="98.8867%" y="511.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.6367%" y="485" width="0.0802%" height="15" fill="rgb(210,75,20)" fg:x="1230" fg:w="1"/><text x="98.8867%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.6367%" y="469" width="0.0802%" height="15" fill="rgb(235,56,8)" fg:x="1230" fg:w="1"/><text x="98.8867%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.6367%" y="453" width="0.0802%" height="15" fill="rgb(226,175,49)" fg:x="1230" fg:w="1"/><text x="98.8867%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="98.6367%" y="437" width="0.0802%" height="15" fill="rgb(242,204,23)" fg:x="1230" fg:w="1"/><text x="98.8867%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (1 samples, 0.08%)</title><rect x="98.6367%" y="421" width="0.0802%" height="15" fill="rgb(225,104,24)" fg:x="1230" fg:w="1"/><text x="98.8867%" y="431.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (1 samples, 0.08%)</title><rect x="98.6367%" y="405" width="0.0802%" height="15" fill="rgb(253,34,1)" fg:x="1230" fg:w="1"/><text x="98.8867%" y="415.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (1 samples, 0.08%)</title><rect x="98.6367%" y="389" width="0.0802%" height="15" fill="rgb(233,199,23)" fg:x="1230" fg:w="1"/><text x="98.8867%" y="399.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="98.6367%" y="373" width="0.0802%" height="15" fill="rgb(247,7,51)" fg:x="1230" fg:w="1"/><text x="98.8867%" y="383.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="98.6367%" y="357" width="0.0802%" height="15" fill="rgb(214,146,12)" fg:x="1230" fg:w="1"/><text x="98.8867%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="98.6367%" y="341" width="0.0802%" height="15" fill="rgb(234,181,43)" fg:x="1230" fg:w="1"/><text x="98.8867%" y="351.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="98.6367%" y="325" width="0.0802%" height="15" fill="rgb(239,148,6)" fg:x="1230" fg:w="1"/><text x="98.8867%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="98.6367%" y="309" width="0.0802%" height="15" fill="rgb(206,151,17)" fg:x="1230" fg:w="1"/><text x="98.8867%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="98.6367%" y="293" width="0.0802%" height="15" fill="rgb(213,215,10)" fg:x="1230" fg:w="1"/><text x="98.8867%" y="303.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.08%)</title><rect x="98.6367%" y="277" width="0.0802%" height="15" fill="rgb(215,220,44)" fg:x="1230" fg:w="1"/><text x="98.8867%" y="287.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (1 samples, 0.08%)</title><rect x="98.6367%" y="261" width="0.0802%" height="15" fill="rgb(245,205,37)" fg:x="1230" fg:w="1"/><text x="98.8867%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="98.5565%" y="613" width="0.2406%" height="15" fill="rgb(245,130,43)" fg:x="1229" fg:w="3"/><text x="98.8065%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="98.5565%" y="597" width="0.2406%" height="15" fill="rgb(231,227,38)" fg:x="1229" fg:w="3"/><text x="98.8065%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="98.5565%" y="581" width="0.2406%" height="15" fill="rgb(233,185,4)" fg:x="1229" fg:w="3"/><text x="98.8065%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.7169%" y="565" width="0.0802%" height="15" fill="rgb(224,154,43)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.7169%" y="549" width="0.0802%" height="15" fill="rgb(235,156,15)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="559.50"></text></g><g><title>engine::session::internal::Added::find_refs (4 samples, 0.32%)</title><rect x="98.5565%" y="645" width="0.3208%" height="15" fill="rgb(211,55,43)" fg:x="1229" fg:w="4"/><text x="98.8065%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="98.5565%" y="629" width="0.3208%" height="15" fill="rgb(247,149,40)" fg:x="1229" fg:w="4"/><text x="98.8065%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.7971%" y="613" width="0.0802%" height="15" fill="rgb(232,171,16)" fg:x="1232" fg:w="1"/><text x="99.0471%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.7971%" y="597" width="0.0802%" height="15" fill="rgb(215,117,49)" fg:x="1232" fg:w="1"/><text x="99.0471%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.7971%" y="581" width="0.0802%" height="15" fill="rgb(246,194,11)" fg:x="1232" fg:w="1"/><text x="99.0471%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="98.8773%" y="629" width="0.0802%" height="15" fill="rgb(242,101,44)" fg:x="1233" fg:w="1"/><text x="99.1273%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.8773%" y="613" width="0.0802%" height="15" fill="rgb(226,174,6)" fg:x="1233" fg:w="1"/><text x="99.1273%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.8773%" y="597" width="0.0802%" height="15" fill="rgb(213,150,20)" fg:x="1233" fg:w="1"/><text x="99.1273%" y="607.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="98.9575%" y="629" width="0.0802%" height="15" fill="rgb(222,124,42)" fg:x="1234" fg:w="1"/><text x="99.2075%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.9575%" y="613" width="0.0802%" height="15" fill="rgb(250,19,47)" fg:x="1234" fg:w="1"/><text x="99.2075%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.9575%" y="597" width="0.0802%" height="15" fill="rgb(241,217,19)" fg:x="1234" fg:w="1"/><text x="99.2075%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.9575%" y="581" width="0.0802%" height="15" fill="rgb(207,210,34)" fg:x="1234" fg:w="1"/><text x="99.2075%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.9575%" y="565" width="0.0802%" height="15" fill="rgb(244,45,4)" fg:x="1234" fg:w="1"/><text x="99.2075%" y="575.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.9575%" y="549" width="0.0802%" height="15" fill="rgb(252,134,50)" fg:x="1234" fg:w="1"/><text x="99.2075%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="98.9575%" y="533" width="0.0802%" height="15" fill="rgb(238,74,2)" fg:x="1234" fg:w="1"/><text x="99.2075%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.9575%" y="517" width="0.0802%" height="15" fill="rgb(226,58,46)" fg:x="1234" fg:w="1"/><text x="99.2075%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="98.9575%" y="501" width="0.0802%" height="15" fill="rgb(232,83,35)" fg:x="1234" fg:w="1"/><text x="99.2075%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="98.9575%" y="485" width="0.0802%" height="15" fill="rgb(212,148,47)" fg:x="1234" fg:w="1"/><text x="99.2075%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.9575%" y="469" width="0.0802%" height="15" fill="rgb(235,29,1)" fg:x="1234" fg:w="1"/><text x="99.2075%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (7 samples, 0.56%)</title><rect x="98.5565%" y="661" width="0.5613%" height="15" fill="rgb(247,55,37)" fg:x="1229" fg:w="7"/><text x="98.8065%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="98.8773%" y="645" width="0.2406%" height="15" fill="rgb(222,48,3)" fg:x="1233" fg:w="3"/><text x="99.1273%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="99.0377%" y="629" width="0.0802%" height="15" fill="rgb(234,21,33)" fg:x="1235" fg:w="1"/><text x="99.2877%" y="639.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.0377%" y="613" width="0.0802%" height="15" fill="rgb(247,178,53)" fg:x="1235" fg:w="1"/><text x="99.2877%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.0377%" y="597" width="0.0802%" height="15" fill="rgb(225,75,7)" fg:x="1235" fg:w="1"/><text x="99.2877%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.0377%" y="581" width="0.0802%" height="15" fill="rgb(219,199,7)" fg:x="1235" fg:w="1"/><text x="99.2877%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.0377%" y="565" width="0.0802%" height="15" fill="rgb(209,93,42)" fg:x="1235" fg:w="1"/><text x="99.2877%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.0377%" y="549" width="0.0802%" height="15" fill="rgb(240,175,17)" fg:x="1235" fg:w="1"/><text x="99.2877%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.0377%" y="533" width="0.0802%" height="15" fill="rgb(232,106,7)" fg:x="1235" fg:w="1"/><text x="99.2877%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.0377%" y="517" width="0.0802%" height="15" fill="rgb(242,106,43)" fg:x="1235" fg:w="1"/><text x="99.2877%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="99.1179%" y="581" width="0.1604%" height="15" fill="rgb(242,61,37)" fg:x="1236" fg:w="2"/><text x="99.3679%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="99.1179%" y="565" width="0.1604%" height="15" fill="rgb(205,72,10)" fg:x="1236" fg:w="2"/><text x="99.3679%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1981%" y="549" width="0.0802%" height="15" fill="rgb(214,184,36)" fg:x="1237" fg:w="1"/><text x="99.4481%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.1981%" y="533" width="0.0802%" height="15" fill="rgb(206,107,18)" fg:x="1237" fg:w="1"/><text x="99.4481%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.40%)</title><rect x="99.1179%" y="613" width="0.4010%" height="15" fill="rgb(210,75,5)" fg:x="1236" fg:w="5"/><text x="99.3679%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.40%)</title><rect x="99.1179%" y="597" width="0.4010%" height="15" fill="rgb(205,3,19)" fg:x="1236" fg:w="5"/><text x="99.3679%" y="607.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="99.2783%" y="581" width="0.2406%" height="15" fill="rgb(207,181,42)" fg:x="1238" fg:w="3"/><text x="99.5283%" y="591.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="99.5188%" y="613" width="0.0802%" height="15" fill="rgb(229,179,43)" fg:x="1241" fg:w="1"/><text x="99.7688%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.5188%" y="597" width="0.0802%" height="15" fill="rgb(246,95,30)" fg:x="1241" fg:w="1"/><text x="99.7688%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="99.5188%" y="581" width="0.0802%" height="15" fill="rgb(234,144,45)" fg:x="1241" fg:w="1"/><text x="99.7688%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.5188%" y="565" width="0.0802%" height="15" fill="rgb(250,54,25)" fg:x="1241" fg:w="1"/><text x="99.7688%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.5990%" y="437" width="0.0802%" height="15" fill="rgb(215,195,40)" fg:x="1242" fg:w="1"/><text x="99.8490%" y="447.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (143 samples, 11.47%)</title><rect x="88.2919%" y="693" width="11.4675%" height="15" fill="rgb(233,188,42)" fg:x="1101" fg:w="143"/><text x="88.5419%" y="703.50">engine::session::..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (143 samples, 11.47%)</title><rect x="88.2919%" y="677" width="11.4675%" height="15" fill="rgb(247,227,35)" fg:x="1101" fg:w="143"/><text x="88.5419%" y="687.50">engine::session::..</text></g><g><title>kernel::model::EntityPtrResolver::world (8 samples, 0.64%)</title><rect x="99.1179%" y="661" width="0.6415%" height="15" fill="rgb(249,124,27)" fg:x="1236" fg:w="8"/><text x="99.3679%" y="671.50"></text></g><g><title>engine::session::Session::load_entity (8 samples, 0.64%)</title><rect x="99.1179%" y="645" width="0.6415%" height="15" fill="rgb(219,207,25)" fg:x="1236" fg:w="8"/><text x="99.3679%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (8 samples, 0.64%)</title><rect x="99.1179%" y="629" width="0.6415%" height="15" fill="rgb(241,216,47)" fg:x="1236" fg:w="8"/><text x="99.3679%" y="639.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="99.5990%" y="613" width="0.1604%" height="15" fill="rgb(233,82,50)" fg:x="1242" fg:w="2"/><text x="99.8490%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.5990%" y="597" width="0.1604%" height="15" fill="rgb(232,63,2)" fg:x="1242" fg:w="2"/><text x="99.8490%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.5990%" y="581" width="0.1604%" height="15" fill="rgb(236,184,28)" fg:x="1242" fg:w="2"/><text x="99.8490%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.5990%" y="565" width="0.1604%" height="15" fill="rgb(254,63,27)" fg:x="1242" fg:w="2"/><text x="99.8490%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.5990%" y="549" width="0.1604%" height="15" fill="rgb(253,106,28)" fg:x="1242" fg:w="2"/><text x="99.8490%" y="559.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.5990%" y="533" width="0.1604%" height="15" fill="rgb(225,141,39)" fg:x="1242" fg:w="2"/><text x="99.8490%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.5990%" y="517" width="0.1604%" height="15" fill="rgb(222,157,20)" fg:x="1242" fg:w="2"/><text x="99.8490%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.5990%" y="501" width="0.1604%" height="15" fill="rgb(210,190,9)" fg:x="1242" fg:w="2"/><text x="99.8490%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="99.5990%" y="485" width="0.1604%" height="15" fill="rgb(242,167,7)" fg:x="1242" fg:w="2"/><text x="99.8490%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.5990%" y="469" width="0.1604%" height="15" fill="rgb(227,82,41)" fg:x="1242" fg:w="2"/><text x="99.8490%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.5990%" y="453" width="0.1604%" height="15" fill="rgb(222,131,13)" fg:x="1242" fg:w="2"/><text x="99.8490%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.6792%" y="437" width="0.0802%" height="15" fill="rgb(221,98,26)" fg:x="1243" fg:w="1"/><text x="99.9292%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6792%" y="421" width="0.0802%" height="15" fill="rgb(251,63,52)" fg:x="1243" fg:w="1"/><text x="99.9292%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6792%" y="405" width="0.0802%" height="15" fill="rgb(246,25,43)" fg:x="1243" fg:w="1"/><text x="99.9292%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.7594%" y="677" width="0.0802%" height="15" fill="rgb(247,167,15)" fg:x="1244" fg:w="1"/><text x="100.0094%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="99.8396%" y="677" width="0.0802%" height="15" fill="rgb(240,104,42)" fg:x="1245" fg:w="1"/><text x="100.0896%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="99.8396%" y="661" width="0.0802%" height="15" fill="rgb(224,54,6)" fg:x="1245" fg:w="1"/><text x="100.0896%" y="671.50"></text></g><g><title>all (1,247 samples, 100%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(244,108,35)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="1055.50"></text></g><g><title>simple-fa9e39e2 (1,247 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(216,154,2)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="1039.50">simple-fa9e39e2</text></g><g><title>_start (1,247 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(222,8,47)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="1023.50">_start</text></g><g><title>__libc_start_main (1,247 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(252,93,1)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="1007.50">__libc_start_main</text></g><g><title>main (1,247 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(223,226,51)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="991.50">main</text></g><g><title>std::rt::lang_start_internal (1,247 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(206,147,9)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="975.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,247 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(248,180,41)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="959.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,247 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(209,47,50)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="943.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,247 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(243,65,31)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="927.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,247 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(228,128,1)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="911.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,247 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(231,192,16)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="895.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,247 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(224,26,40)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="879.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,247 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(214,192,17)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="863.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,247 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(225,147,18)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="847.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,247 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(205,35,11)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="831.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,247 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(242,40,42)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="815.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,247 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(250,170,13)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="799.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,247 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(240,161,28)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="783.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,247 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(245,179,12)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="767.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (295 samples, 23.66%)</title><rect x="76.3432%" y="741" width="23.6568%" height="15" fill="rgb(250,92,32)" fg:x="952" fg:w="295"/><text x="76.5932%" y="751.50">&lt;criterion::routine::Function&lt;M,F,T&gt; a..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (295 samples, 23.66%)</title><rect x="76.3432%" y="725" width="23.6568%" height="15" fill="rgb(233,10,40)" fg:x="952" fg:w="295"/><text x="76.5932%" y="735.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (295 samples, 23.66%)</title><rect x="76.3432%" y="709" width="23.6568%" height="15" fill="rgb(217,98,1)" fg:x="952" fg:w="295"/><text x="76.5932%" y="719.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (3 samples, 0.24%)</title><rect x="99.7594%" y="693" width="0.2406%" height="15" fill="rgb(238,202,7)" fg:x="1244" fg:w="3"/><text x="100.0094%" y="703.50"></text></g><g><title>engine::domain::Domain::new (1 samples, 0.08%)</title><rect x="99.9198%" y="677" width="0.0802%" height="15" fill="rgb(222,91,3)" fg:x="1246" fg:w="1"/><text x="100.1698%" y="687.50"></text></g></svg></svg>