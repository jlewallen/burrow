<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1110" onload="init(evt)" viewBox="0 0 1200 1110" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1110" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1093.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1093.00"> </text><svg id="frames" x="10" width="1180" total_samples="1243"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.1609%" y="629" width="0.0805%" height="15" fill="rgb(243,151,13)" fg:x="2" fg:w="1"/><text x="0.4109%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="0.0805%" y="677" width="0.2414%" height="15" fill="rgb(233,165,41)" fg:x="1" fg:w="3"/><text x="0.3305%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="0.0805%" y="661" width="0.2414%" height="15" fill="rgb(246,176,45)" fg:x="1" fg:w="3"/><text x="0.3305%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="0.0805%" y="645" width="0.2414%" height="15" fill="rgb(217,170,52)" fg:x="1" fg:w="3"/><text x="0.3305%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.2414%" y="629" width="0.0805%" height="15" fill="rgb(214,203,54)" fg:x="3" fg:w="1"/><text x="0.4914%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="0.0000%" y="709" width="0.4023%" height="15" fill="rgb(248,215,49)" fg:x="0" fg:w="5"/><text x="0.2500%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="0.0000%" y="693" width="0.4023%" height="15" fill="rgb(208,46,10)" fg:x="0" fg:w="5"/><text x="0.2500%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.3218%" y="677" width="0.0805%" height="15" fill="rgb(254,5,31)" fg:x="4" fg:w="1"/><text x="0.5718%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4023%" y="645" width="0.0805%" height="15" fill="rgb(222,104,33)" fg:x="5" fg:w="1"/><text x="0.6523%" y="655.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (5 samples, 0.40%)</title><rect x="0.4023%" y="693" width="0.4023%" height="15" fill="rgb(248,49,16)" fg:x="5" fg:w="5"/><text x="0.6523%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="0.4023%" y="677" width="0.4023%" height="15" fill="rgb(232,198,41)" fg:x="5" fg:w="5"/><text x="0.6523%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (5 samples, 0.40%)</title><rect x="0.4023%" y="661" width="0.4023%" height="15" fill="rgb(214,125,3)" fg:x="5" fg:w="5"/><text x="0.6523%" y="671.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (4 samples, 0.32%)</title><rect x="0.4827%" y="645" width="0.3218%" height="15" fill="rgb(229,220,28)" fg:x="6" fg:w="4"/><text x="0.7327%" y="655.50"></text></g><g><title>__libc_free (4 samples, 0.32%)</title><rect x="0.4827%" y="629" width="0.3218%" height="15" fill="rgb(222,64,37)" fg:x="6" fg:w="4"/><text x="0.7327%" y="639.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.9654%" y="613" width="0.1609%" height="15" fill="rgb(249,184,13)" fg:x="12" fg:w="2"/><text x="1.2154%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.1263%" y="613" width="0.0805%" height="15" fill="rgb(252,176,6)" fg:x="14" fg:w="1"/><text x="1.3763%" y="623.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.2872%" y="597" width="0.1609%" height="15" fill="rgb(228,153,7)" fg:x="16" fg:w="2"/><text x="1.5372%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="1.4481%" y="597" width="0.2414%" height="15" fill="rgb(242,193,5)" fg:x="18" fg:w="3"/><text x="1.6981%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.6090%" y="581" width="0.0805%" height="15" fill="rgb(232,140,9)" fg:x="20" fg:w="1"/><text x="1.8590%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.6895%" y="581" width="0.0805%" height="15" fill="rgb(213,222,16)" fg:x="21" fg:w="1"/><text x="1.9395%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="1.7699%" y="565" width="0.0805%" height="15" fill="rgb(222,75,50)" fg:x="22" fg:w="1"/><text x="2.0199%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="1.7699%" y="549" width="0.0805%" height="15" fill="rgb(205,180,2)" fg:x="22" fg:w="1"/><text x="2.0199%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.7699%" y="533" width="0.0805%" height="15" fill="rgb(216,34,7)" fg:x="22" fg:w="1"/><text x="2.0199%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.8504%" y="565" width="0.0805%" height="15" fill="rgb(253,16,32)" fg:x="23" fg:w="1"/><text x="2.1004%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.0113%" y="549" width="0.0805%" height="15" fill="rgb(208,97,28)" fg:x="25" fg:w="1"/><text x="2.2613%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 1.29%)</title><rect x="0.8850%" y="629" width="1.2872%" height="15" fill="rgb(225,92,11)" fg:x="11" fg:w="16"/><text x="1.1350%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (12 samples, 0.97%)</title><rect x="1.2068%" y="613" width="0.9654%" height="15" fill="rgb(243,38,12)" fg:x="15" fg:w="12"/><text x="1.4568%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="1.6895%" y="597" width="0.4827%" height="15" fill="rgb(208,139,16)" fg:x="21" fg:w="6"/><text x="1.9395%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="1.7699%" y="581" width="0.4023%" height="15" fill="rgb(227,24,9)" fg:x="22" fg:w="5"/><text x="2.0199%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="1.9308%" y="565" width="0.2414%" height="15" fill="rgb(206,62,11)" fg:x="24" fg:w="3"/><text x="2.1808%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.0917%" y="549" width="0.0805%" height="15" fill="rgb(228,134,27)" fg:x="26" fg:w="1"/><text x="2.3417%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (4 samples, 0.32%)</title><rect x="2.2526%" y="597" width="0.3218%" height="15" fill="rgb(205,55,33)" fg:x="28" fg:w="4"/><text x="2.5026%" y="607.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="2.3331%" y="581" width="0.2414%" height="15" fill="rgb(243,75,43)" fg:x="29" fg:w="3"/><text x="2.5831%" y="591.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="2.6549%" y="549" width="0.1609%" height="15" fill="rgb(223,27,42)" fg:x="33" fg:w="2"/><text x="2.9049%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="2.6549%" y="581" width="0.2414%" height="15" fill="rgb(232,189,33)" fg:x="33" fg:w="3"/><text x="2.9049%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="2.6549%" y="565" width="0.2414%" height="15" fill="rgb(210,9,39)" fg:x="33" fg:w="3"/><text x="2.9049%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.8158%" y="549" width="0.0805%" height="15" fill="rgb(242,85,26)" fg:x="35" fg:w="1"/><text x="3.0658%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.8158%" y="533" width="0.0805%" height="15" fill="rgb(248,44,4)" fg:x="35" fg:w="1"/><text x="3.0658%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.8962%" y="581" width="0.0805%" height="15" fill="rgb(250,96,46)" fg:x="36" fg:w="1"/><text x="3.1462%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="2.9767%" y="581" width="0.2414%" height="15" fill="rgb(229,116,26)" fg:x="37" fg:w="3"/><text x="3.2267%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.1376%" y="565" width="0.0805%" height="15" fill="rgb(246,94,34)" fg:x="39" fg:w="1"/><text x="3.3876%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 1.21%)</title><rect x="2.1722%" y="629" width="1.2068%" height="15" fill="rgb(251,73,21)" fg:x="27" fg:w="15"/><text x="2.4222%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 1.21%)</title><rect x="2.1722%" y="613" width="1.2068%" height="15" fill="rgb(254,121,25)" fg:x="27" fg:w="15"/><text x="2.4222%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (10 samples, 0.80%)</title><rect x="2.5744%" y="597" width="0.8045%" height="15" fill="rgb(215,161,49)" fg:x="32" fg:w="10"/><text x="2.8244%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="3.2180%" y="581" width="0.1609%" height="15" fill="rgb(221,43,13)" fg:x="40" fg:w="2"/><text x="3.4680%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.2985%" y="565" width="0.0805%" height="15" fill="rgb(249,5,37)" fg:x="41" fg:w="1"/><text x="3.5485%" y="575.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 2.65%)</title><rect x="0.8045%" y="645" width="2.6549%" height="15" fill="rgb(226,25,44)" fg:x="10" fg:w="33"/><text x="1.0545%" y="655.50">&lt;a..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.3789%" y="629" width="0.0805%" height="15" fill="rgb(238,189,16)" fg:x="42" fg:w="1"/><text x="3.6289%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 2.74%)</title><rect x="0.8045%" y="677" width="2.7353%" height="15" fill="rgb(251,186,8)" fg:x="10" fg:w="34"/><text x="1.0545%" y="687.50">&lt;h..</text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (34 samples, 2.74%)</title><rect x="0.8045%" y="661" width="2.7353%" height="15" fill="rgb(254,34,31)" fg:x="10" fg:w="34"/><text x="1.0545%" y="671.50">co..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.4594%" y="645" width="0.0805%" height="15" fill="rgb(225,215,27)" fg:x="43" fg:w="1"/><text x="3.7094%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (35 samples, 2.82%)</title><rect x="0.8045%" y="693" width="2.8158%" height="15" fill="rgb(221,192,48)" fg:x="10" fg:w="35"/><text x="1.0545%" y="703.50">co..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.5398%" y="677" width="0.0805%" height="15" fill="rgb(219,137,20)" fg:x="44" fg:w="1"/><text x="3.7898%" y="687.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 3.30%)</title><rect x="0.4023%" y="709" width="3.2985%" height="15" fill="rgb(219,84,11)" fg:x="5" fg:w="41"/><text x="0.6523%" y="719.50">&lt;al..</text></g><g><title>core::ptr::drop_in_place&lt;engine::storage::InMemoryStorage&gt; (1 samples, 0.08%)</title><rect x="3.6203%" y="693" width="0.0805%" height="15" fill="rgb(224,10,23)" fg:x="45" fg:w="1"/><text x="3.8703%" y="703.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new_cyclic (3 samples, 0.24%)</title><rect x="3.8616%" y="661" width="0.2414%" height="15" fill="rgb(248,22,39)" fg:x="48" fg:w="3"/><text x="4.1116%" y="671.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="3.9421%" y="645" width="0.1609%" height="15" fill="rgb(212,154,20)" fg:x="49" fg:w="2"/><text x="4.1921%" y="655.50"></text></g><g><title>&lt;plugins_core::building::actions::BidirectionalDigAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="4.3443%" y="581" width="0.0805%" height="15" fill="rgb(236,199,50)" fg:x="54" fg:w="1"/><text x="4.5943%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (3 samples, 0.24%)</title><rect x="4.4248%" y="581" width="0.2414%" height="15" fill="rgb(211,9,17)" fg:x="55" fg:w="3"/><text x="4.6748%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="4.5052%" y="565" width="0.1609%" height="15" fill="rgb(243,216,36)" fg:x="56" fg:w="2"/><text x="4.7552%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="4.5052%" y="549" width="0.1609%" height="15" fill="rgb(250,2,10)" fg:x="56" fg:w="2"/><text x="4.7552%" y="559.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="4.5052%" y="533" width="0.1609%" height="15" fill="rgb(226,50,48)" fg:x="56" fg:w="2"/><text x="4.7552%" y="543.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="4.6661%" y="581" width="0.0805%" height="15" fill="rgb(243,81,16)" fg:x="58" fg:w="1"/><text x="4.9161%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.6661%" y="565" width="0.0805%" height="15" fill="rgb(250,14,2)" fg:x="58" fg:w="1"/><text x="4.9161%" y="575.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (6 samples, 0.48%)</title><rect x="4.3443%" y="613" width="0.4827%" height="15" fill="rgb(233,135,29)" fg:x="54" fg:w="6"/><text x="4.5943%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (6 samples, 0.48%)</title><rect x="4.3443%" y="597" width="0.4827%" height="15" fill="rgb(224,64,43)" fg:x="54" fg:w="6"/><text x="4.5943%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="4.7466%" y="581" width="0.0805%" height="15" fill="rgb(238,84,13)" fg:x="59" fg:w="1"/><text x="4.9966%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.7466%" y="565" width="0.0805%" height="15" fill="rgb(253,48,26)" fg:x="59" fg:w="1"/><text x="4.9966%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.7466%" y="549" width="0.0805%" height="15" fill="rgb(205,223,31)" fg:x="59" fg:w="1"/><text x="4.9966%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.7466%" y="533" width="0.0805%" height="15" fill="rgb(221,41,32)" fg:x="59" fg:w="1"/><text x="4.9966%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.7466%" y="517" width="0.0805%" height="15" fill="rgb(213,158,31)" fg:x="59" fg:w="1"/><text x="4.9966%" y="527.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="4.9075%" y="581" width="0.0805%" height="15" fill="rgb(245,126,43)" fg:x="61" fg:w="1"/><text x="5.1575%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="4.9075%" y="565" width="0.0805%" height="15" fill="rgb(227,7,22)" fg:x="61" fg:w="1"/><text x="5.1575%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.9075%" y="549" width="0.0805%" height="15" fill="rgb(252,90,44)" fg:x="61" fg:w="1"/><text x="5.1575%" y="559.50"></text></g><g><title>&lt;plugins_core::carrying::actions::TakeOutAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="4.9879%" y="581" width="0.0805%" height="15" fill="rgb(253,91,0)" fg:x="62" fg:w="1"/><text x="5.2379%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="4.9879%" y="565" width="0.0805%" height="15" fill="rgb(252,175,49)" fg:x="62" fg:w="1"/><text x="5.2379%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="4.9879%" y="549" width="0.0805%" height="15" fill="rgb(246,150,1)" fg:x="62" fg:w="1"/><text x="5.2379%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.9879%" y="533" width="0.0805%" height="15" fill="rgb(241,192,25)" fg:x="62" fg:w="1"/><text x="5.2379%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.9879%" y="517" width="0.0805%" height="15" fill="rgb(239,187,11)" fg:x="62" fg:w="1"/><text x="5.2379%" y="527.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (5 samples, 0.40%)</title><rect x="4.8270%" y="613" width="0.4023%" height="15" fill="rgb(218,202,51)" fg:x="60" fg:w="5"/><text x="5.0770%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (5 samples, 0.40%)</title><rect x="4.8270%" y="597" width="0.4023%" height="15" fill="rgb(225,176,8)" fg:x="60" fg:w="5"/><text x="5.0770%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::new (2 samples, 0.16%)</title><rect x="5.0684%" y="581" width="0.1609%" height="15" fill="rgb(219,122,41)" fg:x="63" fg:w="2"/><text x="5.3184%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.2293%" y="549" width="0.0805%" height="15" fill="rgb(248,140,20)" fg:x="65" fg:w="1"/><text x="5.4793%" y="559.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="5.2293%" y="613" width="0.1609%" height="15" fill="rgb(245,41,37)" fg:x="65" fg:w="2"/><text x="5.4793%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="5.2293%" y="597" width="0.1609%" height="15" fill="rgb(235,82,39)" fg:x="65" fg:w="2"/><text x="5.4793%" y="607.50"></text></g><g><title>&lt;plugins_core::fashion::actions::RemoveAction as kernel::plugins::HasActionSchema&gt;::action_schema (2 samples, 0.16%)</title><rect x="5.2293%" y="581" width="0.1609%" height="15" fill="rgb(230,108,42)" fg:x="65" fg:w="2"/><text x="5.4793%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (2 samples, 0.16%)</title><rect x="5.2293%" y="565" width="0.1609%" height="15" fill="rgb(215,150,50)" fg:x="65" fg:w="2"/><text x="5.4793%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="5.3097%" y="549" width="0.0805%" height="15" fill="rgb(233,212,5)" fg:x="66" fg:w="1"/><text x="5.5597%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.3097%" y="533" width="0.0805%" height="15" fill="rgb(245,80,22)" fg:x="66" fg:w="1"/><text x="5.5597%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.3097%" y="517" width="0.0805%" height="15" fill="rgb(238,129,16)" fg:x="66" fg:w="1"/><text x="5.5597%" y="527.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="5.3902%" y="613" width="0.0805%" height="15" fill="rgb(240,19,0)" fg:x="67" fg:w="1"/><text x="5.6402%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="5.3902%" y="597" width="0.0805%" height="15" fill="rgb(232,42,35)" fg:x="67" fg:w="1"/><text x="5.6402%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="5.3902%" y="581" width="0.0805%" height="15" fill="rgb(223,130,24)" fg:x="67" fg:w="1"/><text x="5.6402%" y="591.50"></text></g><g><title>&lt;plugins_core::moving::actions::AddRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="5.4706%" y="581" width="0.0805%" height="15" fill="rgb(237,16,22)" fg:x="68" fg:w="1"/><text x="5.7206%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="5.4706%" y="565" width="0.0805%" height="15" fill="rgb(248,192,20)" fg:x="68" fg:w="1"/><text x="5.7206%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.4706%" y="549" width="0.0805%" height="15" fill="rgb(233,167,2)" fg:x="68" fg:w="1"/><text x="5.7206%" y="559.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (18 samples, 1.45%)</title><rect x="4.1834%" y="629" width="1.4481%" height="15" fill="rgb(252,71,44)" fg:x="52" fg:w="18"/><text x="4.4334%" y="639.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="5.4706%" y="613" width="0.1609%" height="15" fill="rgb(238,37,47)" fg:x="68" fg:w="2"/><text x="5.7206%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="5.4706%" y="597" width="0.1609%" height="15" fill="rgb(214,202,54)" fg:x="68" fg:w="2"/><text x="5.7206%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="5.5511%" y="581" width="0.0805%" height="15" fill="rgb(254,165,40)" fg:x="69" fg:w="1"/><text x="5.8011%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.5511%" y="565" width="0.0805%" height="15" fill="rgb(246,173,38)" fg:x="69" fg:w="1"/><text x="5.8011%" y="575.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.5511%" y="549" width="0.0805%" height="15" fill="rgb(215,3,27)" fg:x="69" fg:w="1"/><text x="5.8011%" y="559.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.6315%" y="565" width="0.0805%" height="15" fill="rgb(239,169,51)" fg:x="70" fg:w="1"/><text x="5.8815%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.6315%" y="549" width="0.0805%" height="15" fill="rgb(212,5,25)" fg:x="70" fg:w="1"/><text x="5.8815%" y="559.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="5.6315%" y="533" width="0.0805%" height="15" fill="rgb(243,45,17)" fg:x="70" fg:w="1"/><text x="5.8815%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="5.6315%" y="517" width="0.0805%" height="15" fill="rgb(242,97,9)" fg:x="70" fg:w="1"/><text x="5.8815%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="5.6315%" y="501" width="0.0805%" height="15" fill="rgb(228,71,31)" fg:x="70" fg:w="1"/><text x="5.8815%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="5.6315%" y="485" width="0.0805%" height="15" fill="rgb(252,184,16)" fg:x="70" fg:w="1"/><text x="5.8815%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="5.6315%" y="469" width="0.0805%" height="15" fill="rgb(236,169,46)" fg:x="70" fg:w="1"/><text x="5.8815%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="5.6315%" y="453" width="0.0805%" height="15" fill="rgb(207,17,47)" fg:x="70" fg:w="1"/><text x="5.8815%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.6315%" y="437" width="0.0805%" height="15" fill="rgb(206,201,28)" fg:x="70" fg:w="1"/><text x="5.8815%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="5.6315%" y="421" width="0.0805%" height="15" fill="rgb(224,184,23)" fg:x="70" fg:w="1"/><text x="5.8815%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.6315%" y="405" width="0.0805%" height="15" fill="rgb(208,139,48)" fg:x="70" fg:w="1"/><text x="5.8815%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="5.6315%" y="389" width="0.0805%" height="15" fill="rgb(208,130,10)" fg:x="70" fg:w="1"/><text x="5.8815%" y="399.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="5.6315%" y="373" width="0.0805%" height="15" fill="rgb(211,213,45)" fg:x="70" fg:w="1"/><text x="5.8815%" y="383.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="5.6315%" y="357" width="0.0805%" height="15" fill="rgb(235,100,30)" fg:x="70" fg:w="1"/><text x="5.8815%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.6315%" y="341" width="0.0805%" height="15" fill="rgb(206,144,31)" fg:x="70" fg:w="1"/><text x="5.8815%" y="351.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (3 samples, 0.24%)</title><rect x="5.6315%" y="629" width="0.2414%" height="15" fill="rgb(224,200,26)" fg:x="70" fg:w="3"/><text x="5.8815%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.24%)</title><rect x="5.6315%" y="613" width="0.2414%" height="15" fill="rgb(247,104,53)" fg:x="70" fg:w="3"/><text x="5.8815%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.24%)</title><rect x="5.6315%" y="597" width="0.2414%" height="15" fill="rgb(220,14,17)" fg:x="70" fg:w="3"/><text x="5.8815%" y="607.50"></text></g><g><title>core::fmt::write (3 samples, 0.24%)</title><rect x="5.6315%" y="581" width="0.2414%" height="15" fill="rgb(230,140,40)" fg:x="70" fg:w="3"/><text x="5.8815%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="5.7120%" y="565" width="0.1609%" height="15" fill="rgb(229,2,41)" fg:x="71" fg:w="2"/><text x="5.9620%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="5.7120%" y="549" width="0.1609%" height="15" fill="rgb(232,89,16)" fg:x="71" fg:w="2"/><text x="5.9620%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="5.7120%" y="533" width="0.1609%" height="15" fill="rgb(247,59,52)" fg:x="71" fg:w="2"/><text x="5.9620%" y="543.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.16%)</title><rect x="5.7120%" y="517" width="0.1609%" height="15" fill="rgb(226,110,21)" fg:x="71" fg:w="2"/><text x="5.9620%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.16%)</title><rect x="5.7120%" y="501" width="0.1609%" height="15" fill="rgb(224,176,43)" fg:x="71" fg:w="2"/><text x="5.9620%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="5.7120%" y="485" width="0.1609%" height="15" fill="rgb(221,73,6)" fg:x="71" fg:w="2"/><text x="5.9620%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.16%)</title><rect x="5.7120%" y="469" width="0.1609%" height="15" fill="rgb(232,78,19)" fg:x="71" fg:w="2"/><text x="5.9620%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.16%)</title><rect x="5.7120%" y="453" width="0.1609%" height="15" fill="rgb(233,112,48)" fg:x="71" fg:w="2"/><text x="5.9620%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.16%)</title><rect x="5.7120%" y="437" width="0.1609%" height="15" fill="rgb(243,131,47)" fg:x="71" fg:w="2"/><text x="5.9620%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="5.7120%" y="421" width="0.1609%" height="15" fill="rgb(226,51,1)" fg:x="71" fg:w="2"/><text x="5.9620%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.16%)</title><rect x="5.7120%" y="405" width="0.1609%" height="15" fill="rgb(247,58,7)" fg:x="71" fg:w="2"/><text x="5.9620%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="5.7120%" y="389" width="0.1609%" height="15" fill="rgb(209,7,32)" fg:x="71" fg:w="2"/><text x="5.9620%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.16%)</title><rect x="5.7120%" y="373" width="0.1609%" height="15" fill="rgb(209,39,41)" fg:x="71" fg:w="2"/><text x="5.9620%" y="383.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.16%)</title><rect x="5.7120%" y="357" width="0.1609%" height="15" fill="rgb(226,182,46)" fg:x="71" fg:w="2"/><text x="5.9620%" y="367.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.16%)</title><rect x="5.7120%" y="341" width="0.1609%" height="15" fill="rgb(230,219,10)" fg:x="71" fg:w="2"/><text x="5.9620%" y="351.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="5.7120%" y="325" width="0.1609%" height="15" fill="rgb(227,175,30)" fg:x="71" fg:w="2"/><text x="5.9620%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="6.1142%" y="485" width="0.1609%" height="15" fill="rgb(217,2,50)" fg:x="76" fg:w="2"/><text x="6.3642%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="6.1142%" y="469" width="0.1609%" height="15" fill="rgb(229,160,0)" fg:x="76" fg:w="2"/><text x="6.3642%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="6.1142%" y="453" width="0.1609%" height="15" fill="rgb(207,78,37)" fg:x="76" fg:w="2"/><text x="6.3642%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="6.1142%" y="437" width="0.1609%" height="15" fill="rgb(225,57,0)" fg:x="76" fg:w="2"/><text x="6.3642%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="6.1142%" y="421" width="0.1609%" height="15" fill="rgb(232,154,2)" fg:x="76" fg:w="2"/><text x="6.3642%" y="431.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="6.1142%" y="405" width="0.1609%" height="15" fill="rgb(241,212,25)" fg:x="76" fg:w="2"/><text x="6.3642%" y="415.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="6.1142%" y="389" width="0.1609%" height="15" fill="rgb(226,69,20)" fg:x="76" fg:w="2"/><text x="6.3642%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="6.1142%" y="565" width="0.2414%" height="15" fill="rgb(247,184,54)" fg:x="76" fg:w="3"/><text x="6.3642%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="6.1142%" y="549" width="0.2414%" height="15" fill="rgb(210,145,0)" fg:x="76" fg:w="3"/><text x="6.3642%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.24%)</title><rect x="6.1142%" y="533" width="0.2414%" height="15" fill="rgb(253,82,12)" fg:x="76" fg:w="3"/><text x="6.3642%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.24%)</title><rect x="6.1142%" y="517" width="0.2414%" height="15" fill="rgb(245,42,11)" fg:x="76" fg:w="3"/><text x="6.3642%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.24%)</title><rect x="6.1142%" y="501" width="0.2414%" height="15" fill="rgb(219,147,32)" fg:x="76" fg:w="3"/><text x="6.3642%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="6.2751%" y="485" width="0.0805%" height="15" fill="rgb(246,12,7)" fg:x="78" fg:w="1"/><text x="6.5251%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="6.2751%" y="469" width="0.0805%" height="15" fill="rgb(243,50,9)" fg:x="78" fg:w="1"/><text x="6.5251%" y="479.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (10 samples, 0.80%)</title><rect x="5.8729%" y="613" width="0.8045%" height="15" fill="rgb(219,149,6)" fg:x="73" fg:w="10"/><text x="6.1229%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (10 samples, 0.80%)</title><rect x="5.8729%" y="597" width="0.8045%" height="15" fill="rgb(241,51,42)" fg:x="73" fg:w="10"/><text x="6.1229%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (8 samples, 0.64%)</title><rect x="6.0338%" y="581" width="0.6436%" height="15" fill="rgb(226,128,27)" fg:x="75" fg:w="8"/><text x="6.2838%" y="591.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="6.3556%" y="565" width="0.3218%" height="15" fill="rgb(244,144,4)" fg:x="79" fg:w="4"/><text x="6.6056%" y="575.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="6.7578%" y="597" width="0.4023%" height="15" fill="rgb(221,4,13)" fg:x="84" fg:w="5"/><text x="7.0078%" y="607.50"></text></g><g><title>glob::fill_todo (5 samples, 0.40%)</title><rect x="6.7578%" y="581" width="0.4023%" height="15" fill="rgb(208,170,28)" fg:x="84" fg:w="5"/><text x="7.0078%" y="591.50"></text></g><g><title>glob::is_dir (4 samples, 0.32%)</title><rect x="6.8383%" y="565" width="0.3218%" height="15" fill="rgb(226,131,13)" fg:x="85" fg:w="4"/><text x="7.0883%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat (4 samples, 0.32%)</title><rect x="6.8383%" y="549" width="0.3218%" height="15" fill="rgb(215,72,41)" fg:x="85" fg:w="4"/><text x="7.0883%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (4 samples, 0.32%)</title><rect x="6.8383%" y="533" width="0.3218%" height="15" fill="rgb(243,108,20)" fg:x="85" fg:w="4"/><text x="7.0883%" y="543.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (4 samples, 0.32%)</title><rect x="6.8383%" y="517" width="0.3218%" height="15" fill="rgb(230,189,17)" fg:x="85" fg:w="4"/><text x="7.0883%" y="527.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (4 samples, 0.32%)</title><rect x="6.8383%" y="501" width="0.3218%" height="15" fill="rgb(220,50,17)" fg:x="85" fg:w="4"/><text x="7.0883%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx (4 samples, 0.32%)</title><rect x="6.8383%" y="485" width="0.3218%" height="15" fill="rgb(248,152,48)" fg:x="85" fg:w="4"/><text x="7.0883%" y="495.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (4 samples, 0.32%)</title><rect x="6.8383%" y="469" width="0.3218%" height="15" fill="rgb(244,91,11)" fg:x="85" fg:w="4"/><text x="7.0883%" y="479.50"></text></g><g><title>statx (4 samples, 0.32%)</title><rect x="6.8383%" y="453" width="0.3218%" height="15" fill="rgb(220,157,5)" fg:x="85" fg:w="4"/><text x="7.0883%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;glob::Paths&gt; (1 samples, 0.08%)</title><rect x="7.1601%" y="597" width="0.0805%" height="15" fill="rgb(253,137,8)" fg:x="89" fg:w="1"/><text x="7.4101%" y="607.50"></text></g><g><title>glob::Pattern::new (2 samples, 0.16%)</title><rect x="7.2405%" y="565" width="0.1609%" height="15" fill="rgb(217,137,51)" fg:x="90" fg:w="2"/><text x="7.4905%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="7.2405%" y="549" width="0.1609%" height="15" fill="rgb(218,209,53)" fg:x="90" fg:w="2"/><text x="7.4905%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="7.2405%" y="533" width="0.1609%" height="15" fill="rgb(249,137,25)" fg:x="90" fg:w="2"/><text x="7.4905%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="7.2405%" y="517" width="0.1609%" height="15" fill="rgb(239,155,26)" fg:x="90" fg:w="2"/><text x="7.4905%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.3210%" y="501" width="0.0805%" height="15" fill="rgb(227,85,46)" fg:x="91" fg:w="1"/><text x="7.5710%" y="511.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (21 samples, 1.69%)</title><rect x="5.8729%" y="629" width="1.6895%" height="15" fill="rgb(251,107,43)" fg:x="73" fg:w="21"/><text x="6.1229%" y="639.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (11 samples, 0.88%)</title><rect x="6.6774%" y="613" width="0.8850%" height="15" fill="rgb(234,170,33)" fg:x="83" fg:w="11"/><text x="6.9274%" y="623.50"></text></g><g><title>glob::glob (4 samples, 0.32%)</title><rect x="7.2405%" y="597" width="0.3218%" height="15" fill="rgb(206,29,35)" fg:x="90" fg:w="4"/><text x="7.4905%" y="607.50"></text></g><g><title>glob::glob_with (4 samples, 0.32%)</title><rect x="7.2405%" y="581" width="0.3218%" height="15" fill="rgb(227,138,25)" fg:x="90" fg:w="4"/><text x="7.4905%" y="591.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_string_lossy (2 samples, 0.16%)</title><rect x="7.4014%" y="565" width="0.1609%" height="15" fill="rgb(249,131,35)" fg:x="92" fg:w="2"/><text x="7.6514%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (1 samples, 0.08%)</title><rect x="7.5623%" y="629" width="0.0805%" height="15" fill="rgb(239,6,40)" fg:x="94" fg:w="1"/><text x="7.8123%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="7.5623%" y="613" width="0.0805%" height="15" fill="rgb(246,136,47)" fg:x="94" fg:w="1"/><text x="7.8123%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.5623%" y="597" width="0.0805%" height="15" fill="rgb(253,58,26)" fg:x="94" fg:w="1"/><text x="7.8123%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::EnteredSpan&gt; (1 samples, 0.08%)</title><rect x="7.6428%" y="629" width="0.0805%" height="15" fill="rgb(237,141,10)" fg:x="95" fg:w="1"/><text x="7.8928%" y="639.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (45 samples, 3.62%)</title><rect x="4.1834%" y="645" width="3.6203%" height="15" fill="rgb(234,156,12)" fg:x="52" fg:w="45"/><text x="4.4334%" y="655.50">kern..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="7.7233%" y="629" width="0.0805%" height="15" fill="rgb(243,224,36)" fg:x="96" fg:w="1"/><text x="7.9733%" y="639.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="7.7233%" y="613" width="0.0805%" height="15" fill="rgb(205,229,51)" fg:x="96" fg:w="1"/><text x="7.9733%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="8.0451%" y="613" width="0.0805%" height="15" fill="rgb(223,189,4)" fg:x="100" fg:w="1"/><text x="8.2951%" y="623.50"></text></g><g><title>engine::session::Session::initialize (53 samples, 4.26%)</title><rect x="4.1030%" y="661" width="4.2639%" height="15" fill="rgb(249,167,54)" fg:x="51" fg:w="53"/><text x="4.3530%" y="671.50">engin..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (7 samples, 0.56%)</title><rect x="7.8037%" y="645" width="0.5632%" height="15" fill="rgb(218,34,28)" fg:x="97" fg:w="7"/><text x="8.0537%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.56%)</title><rect x="7.8037%" y="629" width="0.5632%" height="15" fill="rgb(232,109,42)" fg:x="97" fg:w="7"/><text x="8.0537%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="8.1255%" y="613" width="0.2414%" height="15" fill="rgb(248,214,46)" fg:x="101" fg:w="3"/><text x="8.3755%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="8.2060%" y="597" width="0.1609%" height="15" fill="rgb(244,216,40)" fg:x="102" fg:w="2"/><text x="8.4560%" y="607.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="8.2060%" y="581" width="0.1609%" height="15" fill="rgb(231,226,31)" fg:x="102" fg:w="2"/><text x="8.4560%" y="591.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPluginFactory as kernel::plugins::PluginFactory&gt;::create_plugin (1 samples, 0.08%)</title><rect x="8.5278%" y="629" width="0.0805%" height="15" fill="rgb(238,38,43)" fg:x="106" fg:w="1"/><text x="8.7778%" y="639.50"></text></g><g><title>&lt;plugins_rune::RunePluginFactory as kernel::plugins::PluginFactory&gt;::create_plugin (1 samples, 0.08%)</title><rect x="8.6082%" y="629" width="0.0805%" height="15" fill="rgb(208,88,43)" fg:x="107" fg:w="1"/><text x="8.8582%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.6082%" y="613" width="0.0805%" height="15" fill="rgb(205,136,37)" fg:x="107" fg:w="1"/><text x="8.8582%" y="623.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (6 samples, 0.48%)</title><rect x="8.3669%" y="661" width="0.4827%" height="15" fill="rgb(237,34,14)" fg:x="104" fg:w="6"/><text x="8.6169%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="8.3669%" y="645" width="0.4827%" height="15" fill="rgb(236,193,44)" fg:x="104" fg:w="6"/><text x="8.6169%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="8.6887%" y="629" width="0.1609%" height="15" fill="rgb(231,48,10)" fg:x="108" fg:w="2"/><text x="8.9387%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="8.6887%" y="613" width="0.1609%" height="15" fill="rgb(213,141,34)" fg:x="108" fg:w="2"/><text x="8.9387%" y="623.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="8.6887%" y="597" width="0.1609%" height="15" fill="rgb(249,130,34)" fg:x="108" fg:w="2"/><text x="8.9387%" y="607.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (65 samples, 5.23%)</title><rect x="3.7007%" y="709" width="5.2293%" height="15" fill="rgb(219,42,41)" fg:x="46" fg:w="65"/><text x="3.9507%" y="719.50">&lt;engin..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (65 samples, 5.23%)</title><rect x="3.7007%" y="693" width="5.2293%" height="15" fill="rgb(224,100,54)" fg:x="46" fg:w="65"/><text x="3.9507%" y="703.50">engine..</text></g><g><title>engine::session::Session::new (65 samples, 5.23%)</title><rect x="3.7007%" y="677" width="5.2293%" height="15" fill="rgb(229,200,27)" fg:x="46" fg:w="65"/><text x="3.9507%" y="687.50">engine..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="8.8496%" y="661" width="0.0805%" height="15" fill="rgb(217,118,10)" fg:x="110" fg:w="1"/><text x="9.0996%" y="671.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="8.8496%" y="645" width="0.0805%" height="15" fill="rgb(206,22,3)" fg:x="110" fg:w="1"/><text x="9.0996%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="8.9300%" y="677" width="0.1609%" height="15" fill="rgb(232,163,46)" fg:x="111" fg:w="2"/><text x="9.1800%" y="687.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="8.9300%" y="661" width="0.1609%" height="15" fill="rgb(206,95,13)" fg:x="111" fg:w="2"/><text x="9.1800%" y="671.50"></text></g><g><title>&lt;kernel::session::SetSession&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="9.0909%" y="677" width="0.0805%" height="15" fill="rgb(253,154,18)" fg:x="113" fg:w="1"/><text x="9.3409%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="9.1714%" y="613" width="0.0805%" height="15" fill="rgb(219,32,23)" fg:x="114" fg:w="1"/><text x="9.4214%" y="623.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="9.1714%" y="645" width="0.1609%" height="15" fill="rgb(230,191,45)" fg:x="114" fg:w="2"/><text x="9.4214%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="9.1714%" y="629" width="0.1609%" height="15" fill="rgb(229,64,36)" fg:x="114" fg:w="2"/><text x="9.4214%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.2518%" y="613" width="0.0805%" height="15" fill="rgb(205,129,25)" fg:x="115" fg:w="1"/><text x="9.5018%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="9.4932%" y="597" width="0.0805%" height="15" fill="rgb(254,112,7)" fg:x="118" fg:w="1"/><text x="9.7432%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="9.4932%" y="581" width="0.0805%" height="15" fill="rgb(226,53,48)" fg:x="118" fg:w="1"/><text x="9.7432%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="9.4932%" y="565" width="0.0805%" height="15" fill="rgb(214,153,38)" fg:x="118" fg:w="1"/><text x="9.7432%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="9.4932%" y="549" width="0.0805%" height="15" fill="rgb(243,101,7)" fg:x="118" fg:w="1"/><text x="9.7432%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.4932%" y="533" width="0.0805%" height="15" fill="rgb(240,140,22)" fg:x="118" fg:w="1"/><text x="9.7432%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="9.4932%" y="517" width="0.0805%" height="15" fill="rgb(235,114,2)" fg:x="118" fg:w="1"/><text x="9.7432%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="9.4932%" y="501" width="0.0805%" height="15" fill="rgb(242,59,12)" fg:x="118" fg:w="1"/><text x="9.7432%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.4932%" y="485" width="0.0805%" height="15" fill="rgb(252,134,9)" fg:x="118" fg:w="1"/><text x="9.7432%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.6541%" y="565" width="0.0805%" height="15" fill="rgb(236,4,44)" fg:x="120" fg:w="1"/><text x="9.9041%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.6541%" y="549" width="0.0805%" height="15" fill="rgb(254,172,41)" fg:x="120" fg:w="1"/><text x="9.9041%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.6541%" y="533" width="0.0805%" height="15" fill="rgb(244,63,20)" fg:x="120" fg:w="1"/><text x="9.9041%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.6541%" y="517" width="0.0805%" height="15" fill="rgb(250,73,31)" fg:x="120" fg:w="1"/><text x="9.9041%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="9.5736%" y="581" width="0.2414%" height="15" fill="rgb(241,38,36)" fg:x="119" fg:w="3"/><text x="9.8236%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.7345%" y="565" width="0.0805%" height="15" fill="rgb(245,211,2)" fg:x="121" fg:w="1"/><text x="9.9845%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (6 samples, 0.48%)</title><rect x="9.8954%" y="565" width="0.4827%" height="15" fill="rgb(206,120,28)" fg:x="123" fg:w="6"/><text x="10.1454%" y="575.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.40%)</title><rect x="9.9759%" y="549" width="0.4023%" height="15" fill="rgb(211,59,34)" fg:x="124" fg:w="5"/><text x="10.2259%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.32%)</title><rect x="10.0563%" y="533" width="0.3218%" height="15" fill="rgb(233,168,5)" fg:x="125" fg:w="4"/><text x="10.3063%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.32%)</title><rect x="10.0563%" y="517" width="0.3218%" height="15" fill="rgb(234,33,13)" fg:x="125" fg:w="4"/><text x="10.3063%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="10.1368%" y="501" width="0.2414%" height="15" fill="rgb(231,150,26)" fg:x="126" fg:w="3"/><text x="10.3868%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="10.1368%" y="485" width="0.2414%" height="15" fill="rgb(217,191,4)" fg:x="126" fg:w="3"/><text x="10.3868%" y="495.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="10.1368%" y="469" width="0.2414%" height="15" fill="rgb(246,198,38)" fg:x="126" fg:w="3"/><text x="10.3868%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="10.4586%" y="517" width="0.0805%" height="15" fill="rgb(245,64,37)" fg:x="130" fg:w="1"/><text x="10.7086%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="10.4586%" y="533" width="0.1609%" height="15" fill="rgb(250,30,36)" fg:x="130" fg:w="2"/><text x="10.7086%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="10.5390%" y="517" width="0.0805%" height="15" fill="rgb(217,86,53)" fg:x="131" fg:w="1"/><text x="10.7890%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="10.5390%" y="501" width="0.0805%" height="15" fill="rgb(228,157,16)" fg:x="131" fg:w="1"/><text x="10.7890%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.5390%" y="485" width="0.0805%" height="15" fill="rgb(217,59,31)" fg:x="131" fg:w="1"/><text x="10.7890%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.5390%" y="469" width="0.0805%" height="15" fill="rgb(237,138,41)" fg:x="131" fg:w="1"/><text x="10.7890%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.5390%" y="453" width="0.0805%" height="15" fill="rgb(227,91,49)" fg:x="131" fg:w="1"/><text x="10.7890%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="10.4586%" y="549" width="0.2414%" height="15" fill="rgb(247,21,44)" fg:x="130" fg:w="3"/><text x="10.7086%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.6195%" y="533" width="0.0805%" height="15" fill="rgb(219,210,51)" fg:x="132" fg:w="1"/><text x="10.8695%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.6195%" y="517" width="0.0805%" height="15" fill="rgb(209,140,6)" fg:x="132" fg:w="1"/><text x="10.8695%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="10.6195%" y="501" width="0.0805%" height="15" fill="rgb(221,188,24)" fg:x="132" fg:w="1"/><text x="10.8695%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="10.6999%" y="549" width="0.1609%" height="15" fill="rgb(232,154,20)" fg:x="133" fg:w="2"/><text x="10.9499%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.7804%" y="533" width="0.0805%" height="15" fill="rgb(244,137,50)" fg:x="134" fg:w="1"/><text x="11.0304%" y="543.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="10.8608%" y="533" width="0.0805%" height="15" fill="rgb(225,185,43)" fg:x="135" fg:w="1"/><text x="11.1108%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="10.9413%" y="533" width="0.1609%" height="15" fill="rgb(213,205,38)" fg:x="136" fg:w="2"/><text x="11.1913%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="10.9413%" y="517" width="0.1609%" height="15" fill="rgb(236,73,12)" fg:x="136" fg:w="2"/><text x="11.1913%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.0217%" y="501" width="0.0805%" height="15" fill="rgb(235,219,13)" fg:x="137" fg:w="1"/><text x="11.2717%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.0217%" y="485" width="0.0805%" height="15" fill="rgb(218,59,36)" fg:x="137" fg:w="1"/><text x="11.2717%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="11.0217%" y="469" width="0.0805%" height="15" fill="rgb(205,110,39)" fg:x="137" fg:w="1"/><text x="11.2717%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="11.0217%" y="453" width="0.0805%" height="15" fill="rgb(218,206,42)" fg:x="137" fg:w="1"/><text x="11.2717%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="11.0217%" y="437" width="0.0805%" height="15" fill="rgb(248,125,24)" fg:x="137" fg:w="1"/><text x="11.2717%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="11.1022%" y="517" width="0.0805%" height="15" fill="rgb(242,28,27)" fg:x="138" fg:w="1"/><text x="11.3522%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="10.8608%" y="549" width="0.4023%" height="15" fill="rgb(216,228,15)" fg:x="135" fg:w="5"/><text x="11.1108%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="11.1022%" y="533" width="0.1609%" height="15" fill="rgb(235,116,46)" fg:x="138" fg:w="2"/><text x="11.3522%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="11.1826%" y="517" width="0.0805%" height="15" fill="rgb(224,18,32)" fg:x="139" fg:w="1"/><text x="11.4326%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.97%)</title><rect x="10.3781%" y="565" width="0.9654%" height="15" fill="rgb(252,5,12)" fg:x="129" fg:w="12"/><text x="10.6281%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.2631%" y="549" width="0.0805%" height="15" fill="rgb(251,36,5)" fg:x="140" fg:w="1"/><text x="11.5131%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (21 samples, 1.69%)</title><rect x="9.8150%" y="581" width="1.6895%" height="15" fill="rgb(217,53,14)" fg:x="122" fg:w="21"/><text x="10.0650%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="11.3435%" y="565" width="0.1609%" height="15" fill="rgb(215,86,45)" fg:x="141" fg:w="2"/><text x="11.5935%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.4240%" y="549" width="0.0805%" height="15" fill="rgb(242,169,11)" fg:x="142" fg:w="1"/><text x="11.6740%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (25 samples, 2.01%)</title><rect x="9.5736%" y="597" width="2.0113%" height="15" fill="rgb(211,213,45)" fg:x="119" fg:w="25"/><text x="9.8236%" y="607.50">&lt;..</text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.5044%" y="581" width="0.0805%" height="15" fill="rgb(205,88,11)" fg:x="143" fg:w="1"/><text x="11.7544%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.5044%" y="565" width="0.0805%" height="15" fill="rgb(252,69,26)" fg:x="143" fg:w="1"/><text x="11.7544%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.5044%" y="549" width="0.0805%" height="15" fill="rgb(246,123,37)" fg:x="143" fg:w="1"/><text x="11.7544%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="11.5044%" y="533" width="0.0805%" height="15" fill="rgb(212,205,5)" fg:x="143" fg:w="1"/><text x="11.7544%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="11.5044%" y="517" width="0.0805%" height="15" fill="rgb(253,148,0)" fg:x="143" fg:w="1"/><text x="11.7544%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.5044%" y="501" width="0.0805%" height="15" fill="rgb(239,22,4)" fg:x="143" fg:w="1"/><text x="11.7544%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.5849%" y="565" width="0.0805%" height="15" fill="rgb(226,26,53)" fg:x="144" fg:w="1"/><text x="11.8349%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.6653%" y="549" width="0.0805%" height="15" fill="rgb(225,229,45)" fg:x="145" fg:w="1"/><text x="11.9153%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.7458%" y="533" width="0.0805%" height="15" fill="rgb(220,60,37)" fg:x="146" fg:w="1"/><text x="11.9958%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.8262%" y="517" width="0.0805%" height="15" fill="rgb(217,180,35)" fg:x="147" fg:w="1"/><text x="12.0762%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.9067%" y="517" width="0.0805%" height="15" fill="rgb(229,7,53)" fg:x="148" fg:w="1"/><text x="12.1567%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.9067%" y="501" width="0.0805%" height="15" fill="rgb(254,137,3)" fg:x="148" fg:w="1"/><text x="12.1567%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="11.9871%" y="517" width="0.0805%" height="15" fill="rgb(215,140,41)" fg:x="149" fg:w="1"/><text x="12.2371%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="11.9871%" y="501" width="0.0805%" height="15" fill="rgb(250,80,15)" fg:x="149" fg:w="1"/><text x="12.2371%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.9871%" y="485" width="0.0805%" height="15" fill="rgb(252,191,6)" fg:x="149" fg:w="1"/><text x="12.2371%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="11.5849%" y="597" width="0.5632%" height="15" fill="rgb(246,217,18)" fg:x="144" fg:w="7"/><text x="11.8349%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.56%)</title><rect x="11.5849%" y="581" width="0.5632%" height="15" fill="rgb(223,93,7)" fg:x="144" fg:w="7"/><text x="11.8349%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="11.6653%" y="565" width="0.4827%" height="15" fill="rgb(225,55,52)" fg:x="145" fg:w="6"/><text x="11.9153%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="11.7458%" y="549" width="0.4023%" height="15" fill="rgb(240,31,24)" fg:x="146" fg:w="5"/><text x="11.9958%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="11.8262%" y="533" width="0.3218%" height="15" fill="rgb(205,56,52)" fg:x="147" fg:w="4"/><text x="12.0762%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.0676%" y="517" width="0.0805%" height="15" fill="rgb(246,146,12)" fg:x="150" fg:w="1"/><text x="12.3176%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.0676%" y="501" width="0.0805%" height="15" fill="rgb(239,84,36)" fg:x="150" fg:w="1"/><text x="12.3176%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="12.1480%" y="549" width="0.1609%" height="15" fill="rgb(207,41,40)" fg:x="151" fg:w="2"/><text x="12.3980%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="12.3089%" y="549" width="0.0805%" height="15" fill="rgb(241,179,25)" fg:x="153" fg:w="1"/><text x="12.5589%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.3089%" y="533" width="0.0805%" height="15" fill="rgb(210,0,34)" fg:x="153" fg:w="1"/><text x="12.5589%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.3089%" y="517" width="0.0805%" height="15" fill="rgb(225,217,29)" fg:x="153" fg:w="1"/><text x="12.5589%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.5503%" y="469" width="0.0805%" height="15" fill="rgb(216,191,38)" fg:x="156" fg:w="1"/><text x="12.8003%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="12.6307%" y="453" width="0.0805%" height="15" fill="rgb(232,140,52)" fg:x="157" fg:w="1"/><text x="12.8807%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="12.7112%" y="453" width="0.0805%" height="15" fill="rgb(223,158,51)" fg:x="158" fg:w="1"/><text x="12.9612%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.7112%" y="437" width="0.0805%" height="15" fill="rgb(235,29,51)" fg:x="158" fg:w="1"/><text x="12.9612%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.7112%" y="421" width="0.0805%" height="15" fill="rgb(215,181,18)" fg:x="158" fg:w="1"/><text x="12.9612%" y="431.50"></text></g><g><title>engine::session::Session::flush (51 samples, 4.10%)</title><rect x="8.9300%" y="693" width="4.1030%" height="15" fill="rgb(227,125,34)" fg:x="111" fg:w="51"/><text x="9.1800%" y="703.50">engi..</text></g><g><title>engine::session::state::State::close (48 samples, 3.86%)</title><rect x="9.1714%" y="677" width="3.8616%" height="15" fill="rgb(230,197,49)" fg:x="114" fg:w="48"/><text x="9.4214%" y="687.50">engi..</text></g><g><title>engine::session::state::State::flush_entities (48 samples, 3.86%)</title><rect x="9.1714%" y="661" width="3.8616%" height="15" fill="rgb(239,141,16)" fg:x="114" fg:w="48"/><text x="9.4214%" y="671.50">engi..</text></g><g><title>core::iter::adapters::try_process (46 samples, 3.70%)</title><rect x="9.3323%" y="645" width="3.7007%" height="15" fill="rgb(225,105,43)" fg:x="116" fg:w="46"/><text x="9.5823%" y="655.50">core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (45 samples, 3.62%)</title><rect x="9.4127%" y="629" width="3.6203%" height="15" fill="rgb(214,131,14)" fg:x="117" fg:w="45"/><text x="9.6627%" y="639.50">&lt;all..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (44 samples, 3.54%)</title><rect x="9.4932%" y="613" width="3.5398%" height="15" fill="rgb(229,177,11)" fg:x="118" fg:w="44"/><text x="9.7432%" y="623.50">eng..</text></g><g><title>kernel::model::any_entity_changes (11 samples, 0.88%)</title><rect x="12.1480%" y="597" width="0.8850%" height="15" fill="rgb(231,180,14)" fg:x="151" fg:w="11"/><text x="12.3980%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (11 samples, 0.88%)</title><rect x="12.1480%" y="581" width="0.8850%" height="15" fill="rgb(232,88,2)" fg:x="151" fg:w="11"/><text x="12.3980%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (11 samples, 0.88%)</title><rect x="12.1480%" y="565" width="0.8850%" height="15" fill="rgb(205,220,8)" fg:x="151" fg:w="11"/><text x="12.3980%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.64%)</title><rect x="12.3894%" y="549" width="0.6436%" height="15" fill="rgb(225,23,53)" fg:x="154" fg:w="8"/><text x="12.6394%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.56%)</title><rect x="12.4698%" y="533" width="0.5632%" height="15" fill="rgb(213,62,29)" fg:x="155" fg:w="7"/><text x="12.7198%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.56%)</title><rect x="12.4698%" y="517" width="0.5632%" height="15" fill="rgb(227,75,7)" fg:x="155" fg:w="7"/><text x="12.7198%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7 samples, 0.56%)</title><rect x="12.4698%" y="501" width="0.5632%" height="15" fill="rgb(207,105,14)" fg:x="155" fg:w="7"/><text x="12.7198%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.56%)</title><rect x="12.4698%" y="485" width="0.5632%" height="15" fill="rgb(245,62,29)" fg:x="155" fg:w="7"/><text x="12.7198%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="12.6307%" y="469" width="0.4023%" height="15" fill="rgb(236,202,4)" fg:x="157" fg:w="5"/><text x="12.8807%" y="479.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="12.7916%" y="453" width="0.2414%" height="15" fill="rgb(250,67,1)" fg:x="159" fg:w="3"/><text x="13.0416%" y="463.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="13.0330%" y="661" width="0.0805%" height="15" fill="rgb(253,115,44)" fg:x="162" fg:w="1"/><text x="13.2830%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.0330%" y="645" width="0.0805%" height="15" fill="rgb(251,139,18)" fg:x="162" fg:w="1"/><text x="13.2830%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.0330%" y="629" width="0.0805%" height="15" fill="rgb(218,22,32)" fg:x="162" fg:w="1"/><text x="13.2830%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.0330%" y="613" width="0.0805%" height="15" fill="rgb(243,53,5)" fg:x="162" fg:w="1"/><text x="13.2830%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.0330%" y="597" width="0.0805%" height="15" fill="rgb(227,56,16)" fg:x="162" fg:w="1"/><text x="13.2830%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="13.1134%" y="661" width="0.0805%" height="15" fill="rgb(245,53,0)" fg:x="163" fg:w="1"/><text x="13.3634%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.1134%" y="645" width="0.0805%" height="15" fill="rgb(216,170,35)" fg:x="163" fg:w="1"/><text x="13.3634%" y="655.50"></text></g><g><title>plugins_core::build::Build::named (3 samples, 0.24%)</title><rect x="13.0330%" y="693" width="0.2414%" height="15" fill="rgb(211,200,8)" fg:x="162" fg:w="3"/><text x="13.2830%" y="703.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (3 samples, 0.24%)</title><rect x="13.0330%" y="677" width="0.2414%" height="15" fill="rgb(228,204,44)" fg:x="162" fg:w="3"/><text x="13.2830%" y="687.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="13.1939%" y="661" width="0.0805%" height="15" fill="rgb(214,121,17)" fg:x="164" fg:w="1"/><text x="13.4439%" y="671.50"></text></g><g><title>serde_json::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for serde_json::value::Value&gt;::from (1 samples, 0.08%)</title><rect x="13.1939%" y="645" width="0.0805%" height="15" fill="rgb(233,64,38)" fg:x="164" fg:w="1"/><text x="13.4439%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="13.2743%" y="677" width="0.0805%" height="15" fill="rgb(253,54,19)" fg:x="165" fg:w="1"/><text x="13.5243%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="13.2743%" y="661" width="0.0805%" height="15" fill="rgb(253,94,18)" fg:x="165" fg:w="1"/><text x="13.5243%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.2743%" y="645" width="0.0805%" height="15" fill="rgb(227,57,52)" fg:x="165" fg:w="1"/><text x="13.5243%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.2743%" y="629" width="0.0805%" height="15" fill="rgb(230,228,50)" fg:x="165" fg:w="1"/><text x="13.5243%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.2743%" y="613" width="0.0805%" height="15" fill="rgb(217,205,27)" fg:x="165" fg:w="1"/><text x="13.5243%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="13.3548%" y="661" width="0.0805%" height="15" fill="rgb(252,71,50)" fg:x="166" fg:w="1"/><text x="13.6048%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.3548%" y="645" width="0.0805%" height="15" fill="rgb(209,86,4)" fg:x="166" fg:w="1"/><text x="13.6048%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.3548%" y="629" width="0.0805%" height="15" fill="rgb(229,94,0)" fg:x="166" fg:w="1"/><text x="13.6048%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.3548%" y="613" width="0.0805%" height="15" fill="rgb(252,223,21)" fg:x="166" fg:w="1"/><text x="13.6048%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.3548%" y="597" width="0.0805%" height="15" fill="rgb(230,210,4)" fg:x="166" fg:w="1"/><text x="13.6048%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.3548%" y="581" width="0.0805%" height="15" fill="rgb(240,149,38)" fg:x="166" fg:w="1"/><text x="13.6048%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.3548%" y="565" width="0.0805%" height="15" fill="rgb(254,105,20)" fg:x="166" fg:w="1"/><text x="13.6048%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.3548%" y="549" width="0.0805%" height="15" fill="rgb(253,87,46)" fg:x="166" fg:w="1"/><text x="13.6048%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.3548%" y="533" width="0.0805%" height="15" fill="rgb(253,116,33)" fg:x="166" fg:w="1"/><text x="13.6048%" y="543.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="13.4352%" y="645" width="0.0805%" height="15" fill="rgb(229,198,5)" fg:x="167" fg:w="1"/><text x="13.6852%" y="655.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (1 samples, 0.08%)</title><rect x="13.4352%" y="629" width="0.0805%" height="15" fill="rgb(242,38,37)" fg:x="167" fg:w="1"/><text x="13.6852%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.4352%" y="613" width="0.0805%" height="15" fill="rgb(242,69,53)" fg:x="167" fg:w="1"/><text x="13.6852%" y="623.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="13.4352%" y="597" width="0.0805%" height="15" fill="rgb(249,80,16)" fg:x="167" fg:w="1"/><text x="13.6852%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.5157%" y="597" width="0.0805%" height="15" fill="rgb(206,128,11)" fg:x="168" fg:w="1"/><text x="13.7657%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.5157%" y="581" width="0.0805%" height="15" fill="rgb(212,35,20)" fg:x="168" fg:w="1"/><text x="13.7657%" y="591.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (3 samples, 0.24%)</title><rect x="13.4352%" y="661" width="0.2414%" height="15" fill="rgb(236,79,13)" fg:x="167" fg:w="3"/><text x="13.6852%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="13.5157%" y="645" width="0.1609%" height="15" fill="rgb(233,123,3)" fg:x="168" fg:w="2"/><text x="13.7657%" y="655.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="13.5157%" y="629" width="0.1609%" height="15" fill="rgb(214,93,52)" fg:x="168" fg:w="2"/><text x="13.7657%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="13.5157%" y="613" width="0.1609%" height="15" fill="rgb(251,37,40)" fg:x="168" fg:w="2"/><text x="13.7657%" y="623.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="13.5961%" y="597" width="0.0805%" height="15" fill="rgb(227,80,54)" fg:x="169" fg:w="1"/><text x="13.8461%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.5961%" y="581" width="0.0805%" height="15" fill="rgb(254,48,11)" fg:x="169" fg:w="1"/><text x="13.8461%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.5961%" y="565" width="0.0805%" height="15" fill="rgb(235,193,26)" fg:x="169" fg:w="1"/><text x="13.8461%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="13.6766%" y="645" width="0.0805%" height="15" fill="rgb(229,99,21)" fg:x="170" fg:w="1"/><text x="13.9266%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="13.6766%" y="629" width="0.0805%" height="15" fill="rgb(211,140,41)" fg:x="170" fg:w="1"/><text x="13.9266%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="13.6766%" y="613" width="0.0805%" height="15" fill="rgb(240,227,30)" fg:x="170" fg:w="1"/><text x="13.9266%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.6766%" y="597" width="0.0805%" height="15" fill="rgb(215,224,45)" fg:x="170" fg:w="1"/><text x="13.9266%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.6766%" y="581" width="0.0805%" height="15" fill="rgb(206,123,31)" fg:x="170" fg:w="1"/><text x="13.9266%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.6766%" y="565" width="0.0805%" height="15" fill="rgb(210,138,16)" fg:x="170" fg:w="1"/><text x="13.9266%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.6766%" y="549" width="0.0805%" height="15" fill="rgb(228,57,28)" fg:x="170" fg:w="1"/><text x="13.9266%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.6766%" y="533" width="0.0805%" height="15" fill="rgb(242,170,10)" fg:x="170" fg:w="1"/><text x="13.9266%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.6766%" y="517" width="0.0805%" height="15" fill="rgb(228,214,39)" fg:x="170" fg:w="1"/><text x="13.9266%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.6766%" y="501" width="0.0805%" height="15" fill="rgb(218,179,33)" fg:x="170" fg:w="1"/><text x="13.9266%" y="511.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="13.7570%" y="645" width="0.0805%" height="15" fill="rgb(235,193,39)" fg:x="171" fg:w="1"/><text x="14.0070%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.7570%" y="629" width="0.0805%" height="15" fill="rgb(219,221,36)" fg:x="171" fg:w="1"/><text x="14.0070%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="13.7570%" y="613" width="0.0805%" height="15" fill="rgb(248,218,19)" fg:x="171" fg:w="1"/><text x="14.0070%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.7570%" y="597" width="0.0805%" height="15" fill="rgb(205,50,9)" fg:x="171" fg:w="1"/><text x="14.0070%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="13.7570%" y="581" width="0.0805%" height="15" fill="rgb(238,81,28)" fg:x="171" fg:w="1"/><text x="14.0070%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="13.8375%" y="613" width="0.0805%" height="15" fill="rgb(235,110,19)" fg:x="172" fg:w="1"/><text x="14.0875%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.8375%" y="597" width="0.0805%" height="15" fill="rgb(214,7,14)" fg:x="172" fg:w="1"/><text x="14.0875%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (8 samples, 0.64%)</title><rect x="13.3548%" y="677" width="0.6436%" height="15" fill="rgb(211,77,3)" fg:x="166" fg:w="8"/><text x="13.6048%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="13.6766%" y="661" width="0.3218%" height="15" fill="rgb(229,5,9)" fg:x="170" fg:w="4"/><text x="13.9266%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="13.8375%" y="645" width="0.1609%" height="15" fill="rgb(225,90,11)" fg:x="172" fg:w="2"/><text x="14.0875%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="13.8375%" y="629" width="0.1609%" height="15" fill="rgb(242,56,8)" fg:x="172" fg:w="2"/><text x="14.0875%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="13.9179%" y="613" width="0.0805%" height="15" fill="rgb(249,212,39)" fg:x="173" fg:w="1"/><text x="14.1679%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (10 samples, 0.80%)</title><rect x="13.2743%" y="693" width="0.8045%" height="15" fill="rgb(236,90,9)" fg:x="165" fg:w="10"/><text x="13.5243%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.9984%" y="677" width="0.0805%" height="15" fill="rgb(206,88,35)" fg:x="174" fg:w="1"/><text x="14.2484%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.9984%" y="661" width="0.0805%" height="15" fill="rgb(205,126,30)" fg:x="174" fg:w="1"/><text x="14.2484%" y="671.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="14.0788%" y="661" width="0.0805%" height="15" fill="rgb(230,176,12)" fg:x="175" fg:w="1"/><text x="14.3288%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="14.0788%" y="645" width="0.0805%" height="15" fill="rgb(243,19,9)" fg:x="175" fg:w="1"/><text x="14.3288%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="14.0788%" y="629" width="0.0805%" height="15" fill="rgb(245,171,17)" fg:x="175" fg:w="1"/><text x="14.3288%" y="639.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (2 samples, 0.16%)</title><rect x="14.0788%" y="693" width="0.1609%" height="15" fill="rgb(227,52,21)" fg:x="175" fg:w="2"/><text x="14.3288%" y="703.50"></text></g><g><title>plugins_core::tools::set_quantity (2 samples, 0.16%)</title><rect x="14.0788%" y="677" width="0.1609%" height="15" fill="rgb(238,69,14)" fg:x="175" fg:w="2"/><text x="14.3288%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="14.1593%" y="661" width="0.0805%" height="15" fill="rgb(241,156,39)" fg:x="176" fg:w="1"/><text x="14.4093%" y="671.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (1 samples, 0.08%)</title><rect x="14.1593%" y="645" width="0.0805%" height="15" fill="rgb(212,227,28)" fg:x="176" fg:w="1"/><text x="14.4093%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.1593%" y="629" width="0.0805%" height="15" fill="rgb(209,118,27)" fg:x="176" fg:w="1"/><text x="14.4093%" y="639.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Kind&gt;::serialize (1 samples, 0.08%)</title><rect x="14.1593%" y="613" width="0.0805%" height="15" fill="rgb(226,102,5)" fg:x="176" fg:w="1"/><text x="14.4093%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.1593%" y="597" width="0.0805%" height="15" fill="rgb(223,34,3)" fg:x="176" fg:w="1"/><text x="14.4093%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="14.1593%" y="581" width="0.0805%" height="15" fill="rgb(221,81,38)" fg:x="176" fg:w="1"/><text x="14.4093%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.1593%" y="565" width="0.0805%" height="15" fill="rgb(236,219,28)" fg:x="176" fg:w="1"/><text x="14.4093%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.1593%" y="549" width="0.0805%" height="15" fill="rgb(213,200,14)" fg:x="176" fg:w="1"/><text x="14.4093%" y="559.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="14.2397%" y="661" width="0.0805%" height="15" fill="rgb(240,33,19)" fg:x="177" fg:w="1"/><text x="14.4897%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="14.2397%" y="645" width="0.0805%" height="15" fill="rgb(233,113,27)" fg:x="177" fg:w="1"/><text x="14.4897%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="14.3202%" y="629" width="0.0805%" height="15" fill="rgb(220,221,18)" fg:x="178" fg:w="1"/><text x="14.5702%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="14.3202%" y="613" width="0.0805%" height="15" fill="rgb(238,92,8)" fg:x="178" fg:w="1"/><text x="14.5702%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.3202%" y="597" width="0.0805%" height="15" fill="rgb(222,164,16)" fg:x="178" fg:w="1"/><text x="14.5702%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.3202%" y="581" width="0.0805%" height="15" fill="rgb(241,119,3)" fg:x="178" fg:w="1"/><text x="14.5702%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="14.3202%" y="565" width="0.0805%" height="15" fill="rgb(241,44,8)" fg:x="178" fg:w="1"/><text x="14.5702%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.3202%" y="549" width="0.0805%" height="15" fill="rgb(230,36,40)" fg:x="178" fg:w="1"/><text x="14.5702%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="14.3202%" y="533" width="0.0805%" height="15" fill="rgb(243,16,36)" fg:x="178" fg:w="1"/><text x="14.5702%" y="543.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="14.3202%" y="661" width="0.1609%" height="15" fill="rgb(231,4,26)" fg:x="178" fg:w="2"/><text x="14.5702%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="14.3202%" y="645" width="0.1609%" height="15" fill="rgb(240,9,31)" fg:x="178" fg:w="2"/><text x="14.5702%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="14.4006%" y="629" width="0.0805%" height="15" fill="rgb(207,173,15)" fg:x="179" fg:w="1"/><text x="14.6506%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="14.4006%" y="613" width="0.0805%" height="15" fill="rgb(224,192,53)" fg:x="179" fg:w="1"/><text x="14.6506%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.4006%" y="597" width="0.0805%" height="15" fill="rgb(223,67,28)" fg:x="179" fg:w="1"/><text x="14.6506%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.4006%" y="581" width="0.0805%" height="15" fill="rgb(211,20,47)" fg:x="179" fg:w="1"/><text x="14.6506%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="14.4006%" y="565" width="0.0805%" height="15" fill="rgb(240,228,2)" fg:x="179" fg:w="1"/><text x="14.6506%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.4006%" y="549" width="0.0805%" height="15" fill="rgb(248,151,12)" fg:x="179" fg:w="1"/><text x="14.6506%" y="559.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="14.4811%" y="661" width="0.1609%" height="15" fill="rgb(244,8,39)" fg:x="180" fg:w="2"/><text x="14.7311%" y="671.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (2 samples, 0.16%)</title><rect x="14.4811%" y="645" width="0.1609%" height="15" fill="rgb(222,26,8)" fg:x="180" fg:w="2"/><text x="14.7311%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.5615%" y="629" width="0.0805%" height="15" fill="rgb(213,106,44)" fg:x="181" fg:w="1"/><text x="14.8115%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.5615%" y="613" width="0.0805%" height="15" fill="rgb(214,129,20)" fg:x="181" fg:w="1"/><text x="14.8115%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.5615%" y="597" width="0.0805%" height="15" fill="rgb(212,32,13)" fg:x="181" fg:w="1"/><text x="14.8115%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="14.6420%" y="645" width="0.0805%" height="15" fill="rgb(208,168,33)" fg:x="182" fg:w="1"/><text x="14.8920%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.6420%" y="629" width="0.0805%" height="15" fill="rgb(231,207,8)" fg:x="182" fg:w="1"/><text x="14.8920%" y="639.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="14.6420%" y="661" width="0.1609%" height="15" fill="rgb(235,219,23)" fg:x="182" fg:w="2"/><text x="14.8920%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="14.7224%" y="645" width="0.0805%" height="15" fill="rgb(226,216,26)" fg:x="183" fg:w="1"/><text x="14.9724%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="14.7224%" y="629" width="0.0805%" height="15" fill="rgb(239,137,16)" fg:x="183" fg:w="1"/><text x="14.9724%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="14.7224%" y="613" width="0.0805%" height="15" fill="rgb(207,12,36)" fg:x="183" fg:w="1"/><text x="14.9724%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="14.7224%" y="597" width="0.0805%" height="15" fill="rgb(210,214,24)" fg:x="183" fg:w="1"/><text x="14.9724%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.7224%" y="581" width="0.0805%" height="15" fill="rgb(206,56,30)" fg:x="183" fg:w="1"/><text x="14.9724%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.8029%" y="597" width="0.0805%" height="15" fill="rgb(228,143,26)" fg:x="184" fg:w="1"/><text x="15.0529%" y="607.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (9 samples, 0.72%)</title><rect x="14.2397%" y="693" width="0.7241%" height="15" fill="rgb(216,218,46)" fg:x="177" fg:w="9"/><text x="14.4897%" y="703.50"></text></g><g><title>plugins_core::tools::set_container (9 samples, 0.72%)</title><rect x="14.2397%" y="677" width="0.7241%" height="15" fill="rgb(206,6,19)" fg:x="177" fg:w="9"/><text x="14.4897%" y="687.50"></text></g><g><title>plugins_core::location::model::Location::set (2 samples, 0.16%)</title><rect x="14.8029%" y="661" width="0.1609%" height="15" fill="rgb(239,177,51)" fg:x="184" fg:w="2"/><text x="15.0529%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="14.8029%" y="645" width="0.1609%" height="15" fill="rgb(216,55,25)" fg:x="184" fg:w="2"/><text x="15.0529%" y="655.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (2 samples, 0.16%)</title><rect x="14.8029%" y="629" width="0.1609%" height="15" fill="rgb(231,163,29)" fg:x="184" fg:w="2"/><text x="15.0529%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="14.8029%" y="613" width="0.1609%" height="15" fill="rgb(232,149,50)" fg:x="184" fg:w="2"/><text x="15.0529%" y="623.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="14.8833%" y="597" width="0.0805%" height="15" fill="rgb(223,142,48)" fg:x="185" fg:w="1"/><text x="15.1333%" y="607.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="15.0442%" y="677" width="0.0805%" height="15" fill="rgb(245,83,23)" fg:x="187" fg:w="1"/><text x="15.2942%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="15.0442%" y="661" width="0.0805%" height="15" fill="rgb(224,63,2)" fg:x="187" fg:w="1"/><text x="15.2942%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="15.0442%" y="645" width="0.0805%" height="15" fill="rgb(218,65,53)" fg:x="187" fg:w="1"/><text x="15.2942%" y="655.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="15.0442%" y="629" width="0.0805%" height="15" fill="rgb(221,84,29)" fg:x="187" fg:w="1"/><text x="15.2942%" y="639.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="15.0442%" y="613" width="0.0805%" height="15" fill="rgb(234,0,32)" fg:x="187" fg:w="1"/><text x="15.2942%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="15.0442%" y="597" width="0.0805%" height="15" fill="rgb(206,20,16)" fg:x="187" fg:w="1"/><text x="15.2942%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="15.0442%" y="581" width="0.0805%" height="15" fill="rgb(244,172,18)" fg:x="187" fg:w="1"/><text x="15.2942%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.0442%" y="565" width="0.0805%" height="15" fill="rgb(254,133,1)" fg:x="187" fg:w="1"/><text x="15.2942%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.0442%" y="549" width="0.0805%" height="15" fill="rgb(222,206,41)" fg:x="187" fg:w="1"/><text x="15.2942%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="15.0442%" y="533" width="0.0805%" height="15" fill="rgb(212,3,42)" fg:x="187" fg:w="1"/><text x="15.2942%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.0442%" y="517" width="0.0805%" height="15" fill="rgb(241,11,4)" fg:x="187" fg:w="1"/><text x="15.2942%" y="527.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="15.0442%" y="501" width="0.0805%" height="15" fill="rgb(205,19,26)" fg:x="187" fg:w="1"/><text x="15.2942%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.1247%" y="645" width="0.0805%" height="15" fill="rgb(210,179,32)" fg:x="188" fg:w="1"/><text x="15.3747%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="15.1247%" y="661" width="0.1609%" height="15" fill="rgb(227,116,49)" fg:x="188" fg:w="2"/><text x="15.3747%" y="671.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="15.2051%" y="645" width="0.0805%" height="15" fill="rgb(211,146,6)" fg:x="189" fg:w="1"/><text x="15.4551%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.2051%" y="629" width="0.0805%" height="15" fill="rgb(219,44,39)" fg:x="189" fg:w="1"/><text x="15.4551%" y="639.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="15.2856%" y="645" width="0.0805%" height="15" fill="rgb(234,128,11)" fg:x="190" fg:w="1"/><text x="15.5356%" y="655.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="15.2856%" y="629" width="0.0805%" height="15" fill="rgb(220,183,53)" fg:x="190" fg:w="1"/><text x="15.5356%" y="639.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="15.2856%" y="613" width="0.0805%" height="15" fill="rgb(213,219,32)" fg:x="190" fg:w="1"/><text x="15.5356%" y="623.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="15.2856%" y="597" width="0.0805%" height="15" fill="rgb(232,156,16)" fg:x="190" fg:w="1"/><text x="15.5356%" y="607.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="15.2856%" y="581" width="0.0805%" height="15" fill="rgb(246,135,34)" fg:x="190" fg:w="1"/><text x="15.5356%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="15.2856%" y="565" width="0.0805%" height="15" fill="rgb(241,99,0)" fg:x="190" fg:w="1"/><text x="15.5356%" y="575.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="15.2856%" y="549" width="0.0805%" height="15" fill="rgb(222,103,45)" fg:x="190" fg:w="1"/><text x="15.5356%" y="559.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="15.2856%" y="533" width="0.0805%" height="15" fill="rgb(212,57,4)" fg:x="190" fg:w="1"/><text x="15.5356%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.3660%" y="581" width="0.0805%" height="15" fill="rgb(215,68,47)" fg:x="191" fg:w="1"/><text x="15.6160%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="15.4465%" y="565" width="0.0805%" height="15" fill="rgb(230,84,2)" fg:x="192" fg:w="1"/><text x="15.6965%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="15.4465%" y="549" width="0.0805%" height="15" fill="rgb(220,102,14)" fg:x="192" fg:w="1"/><text x="15.6965%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="15.4465%" y="533" width="0.0805%" height="15" fill="rgb(240,10,32)" fg:x="192" fg:w="1"/><text x="15.6965%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="15.4465%" y="517" width="0.0805%" height="15" fill="rgb(215,47,27)" fg:x="192" fg:w="1"/><text x="15.6965%" y="527.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="15.4465%" y="501" width="0.0805%" height="15" fill="rgb(233,188,43)" fg:x="192" fg:w="1"/><text x="15.6965%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.32%)</title><rect x="15.6074%" y="549" width="0.3218%" height="15" fill="rgb(253,190,1)" fg:x="194" fg:w="4"/><text x="15.8574%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="15.6879%" y="533" width="0.2414%" height="15" fill="rgb(206,114,52)" fg:x="195" fg:w="3"/><text x="15.9379%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="15.7683%" y="517" width="0.1609%" height="15" fill="rgb(233,120,37)" fg:x="196" fg:w="2"/><text x="16.0183%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="15.7683%" y="501" width="0.1609%" height="15" fill="rgb(214,52,39)" fg:x="196" fg:w="2"/><text x="16.0183%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.8488%" y="485" width="0.0805%" height="15" fill="rgb(223,80,29)" fg:x="197" fg:w="1"/><text x="16.0988%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="15.8488%" y="469" width="0.0805%" height="15" fill="rgb(230,101,40)" fg:x="197" fg:w="1"/><text x="16.0988%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="15.8488%" y="453" width="0.0805%" height="15" fill="rgb(219,211,8)" fg:x="197" fg:w="1"/><text x="16.0988%" y="463.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="15.8488%" y="437" width="0.0805%" height="15" fill="rgb(252,126,28)" fg:x="197" fg:w="1"/><text x="16.0988%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="16.0097%" y="533" width="0.0805%" height="15" fill="rgb(215,56,38)" fg:x="199" fg:w="1"/><text x="16.2597%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="16.0097%" y="517" width="0.0805%" height="15" fill="rgb(249,55,44)" fg:x="199" fg:w="1"/><text x="16.2597%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="16.0097%" y="501" width="0.0805%" height="15" fill="rgb(220,221,32)" fg:x="199" fg:w="1"/><text x="16.2597%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="16.1706%" y="517" width="0.0805%" height="15" fill="rgb(212,216,41)" fg:x="201" fg:w="1"/><text x="16.4206%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="16.2510%" y="517" width="0.0805%" height="15" fill="rgb(228,213,43)" fg:x="202" fg:w="1"/><text x="16.5010%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="16.2510%" y="501" width="0.0805%" height="15" fill="rgb(211,31,26)" fg:x="202" fg:w="1"/><text x="16.5010%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="16.2510%" y="485" width="0.0805%" height="15" fill="rgb(229,202,19)" fg:x="202" fg:w="1"/><text x="16.5010%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="16.2510%" y="469" width="0.0805%" height="15" fill="rgb(229,105,46)" fg:x="202" fg:w="1"/><text x="16.5010%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="16.3315%" y="517" width="0.2414%" height="15" fill="rgb(235,108,1)" fg:x="203" fg:w="3"/><text x="16.5815%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="16.5728%" y="501" width="0.2414%" height="15" fill="rgb(245,111,35)" fg:x="206" fg:w="3"/><text x="16.8228%" y="511.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="16.5728%" y="485" width="0.2414%" height="15" fill="rgb(219,185,31)" fg:x="206" fg:w="3"/><text x="16.8228%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="16.5728%" y="469" width="0.2414%" height="15" fill="rgb(214,4,43)" fg:x="206" fg:w="3"/><text x="16.8228%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="16.5728%" y="453" width="0.2414%" height="15" fill="rgb(235,227,40)" fg:x="206" fg:w="3"/><text x="16.8228%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="16.5728%" y="437" width="0.2414%" height="15" fill="rgb(230,88,30)" fg:x="206" fg:w="3"/><text x="16.8228%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="16.5728%" y="421" width="0.2414%" height="15" fill="rgb(216,217,1)" fg:x="206" fg:w="3"/><text x="16.8228%" y="431.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="16.5728%" y="405" width="0.2414%" height="15" fill="rgb(248,139,50)" fg:x="206" fg:w="3"/><text x="16.8228%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (19 samples, 1.53%)</title><rect x="16.0901%" y="533" width="1.5286%" height="15" fill="rgb(233,1,21)" fg:x="200" fg:w="19"/><text x="16.3401%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (13 samples, 1.05%)</title><rect x="16.5728%" y="517" width="1.0459%" height="15" fill="rgb(215,183,12)" fg:x="206" fg:w="13"/><text x="16.8228%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.80%)</title><rect x="16.8142%" y="501" width="0.8045%" height="15" fill="rgb(229,104,42)" fg:x="209" fg:w="10"/><text x="17.0642%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (10 samples, 0.80%)</title><rect x="16.8142%" y="485" width="0.8045%" height="15" fill="rgb(243,34,48)" fg:x="209" fg:w="10"/><text x="17.0642%" y="495.50"></text></g><g><title>std::io::Write::write_all (8 samples, 0.64%)</title><rect x="16.9751%" y="469" width="0.6436%" height="15" fill="rgb(239,11,44)" fg:x="211" fg:w="8"/><text x="17.2251%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (6 samples, 0.48%)</title><rect x="17.1360%" y="453" width="0.4827%" height="15" fill="rgb(231,98,35)" fg:x="213" fg:w="6"/><text x="17.3860%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (6 samples, 0.48%)</title><rect x="17.1360%" y="437" width="0.4827%" height="15" fill="rgb(233,28,25)" fg:x="213" fg:w="6"/><text x="17.3860%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 0.48%)</title><rect x="17.1360%" y="421" width="0.4827%" height="15" fill="rgb(234,123,11)" fg:x="213" fg:w="6"/><text x="17.3860%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.48%)</title><rect x="17.1360%" y="405" width="0.4827%" height="15" fill="rgb(220,69,3)" fg:x="213" fg:w="6"/><text x="17.3860%" y="415.50"></text></g><g><title>realloc (6 samples, 0.48%)</title><rect x="17.1360%" y="389" width="0.4827%" height="15" fill="rgb(214,64,36)" fg:x="213" fg:w="6"/><text x="17.3860%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (27 samples, 2.17%)</title><rect x="15.9292%" y="549" width="2.1722%" height="15" fill="rgb(211,138,32)" fg:x="198" fg:w="27"/><text x="16.1792%" y="559.50">s..</text></g><g><title>std::io::Write::write_all (6 samples, 0.48%)</title><rect x="17.6187%" y="533" width="0.4827%" height="15" fill="rgb(213,118,47)" fg:x="219" fg:w="6"/><text x="17.8687%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.32%)</title><rect x="17.7796%" y="517" width="0.3218%" height="15" fill="rgb(243,124,49)" fg:x="221" fg:w="4"/><text x="18.0296%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.32%)</title><rect x="17.7796%" y="501" width="0.3218%" height="15" fill="rgb(221,30,28)" fg:x="221" fg:w="4"/><text x="18.0296%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="17.8600%" y="485" width="0.2414%" height="15" fill="rgb(246,37,13)" fg:x="222" fg:w="3"/><text x="18.1100%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="17.8600%" y="469" width="0.2414%" height="15" fill="rgb(249,66,14)" fg:x="222" fg:w="3"/><text x="18.1100%" y="479.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="17.8600%" y="453" width="0.2414%" height="15" fill="rgb(213,166,5)" fg:x="222" fg:w="3"/><text x="18.1100%" y="463.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (34 samples, 2.74%)</title><rect x="15.5270%" y="565" width="2.7353%" height="15" fill="rgb(221,66,24)" fg:x="193" fg:w="34"/><text x="15.7770%" y="575.50">&lt;s..</text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="18.1014%" y="549" width="0.1609%" height="15" fill="rgb(210,132,17)" fg:x="225" fg:w="2"/><text x="18.3514%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="18.1014%" y="533" width="0.1609%" height="15" fill="rgb(243,202,5)" fg:x="225" fg:w="2"/><text x="18.3514%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.1818%" y="517" width="0.0805%" height="15" fill="rgb(233,70,48)" fg:x="226" fg:w="1"/><text x="18.4318%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="18.1818%" y="501" width="0.0805%" height="15" fill="rgb(238,41,26)" fg:x="226" fg:w="1"/><text x="18.4318%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="18.1818%" y="485" width="0.0805%" height="15" fill="rgb(241,19,31)" fg:x="226" fg:w="1"/><text x="18.4318%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.1818%" y="469" width="0.0805%" height="15" fill="rgb(214,76,10)" fg:x="226" fg:w="1"/><text x="18.4318%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.2623%" y="501" width="0.0805%" height="15" fill="rgb(254,202,22)" fg:x="227" fg:w="1"/><text x="18.5123%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="18.3427%" y="501" width="0.0805%" height="15" fill="rgb(214,72,24)" fg:x="228" fg:w="1"/><text x="18.5927%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.4232%" y="485" width="0.0805%" height="15" fill="rgb(221,92,46)" fg:x="229" fg:w="1"/><text x="18.6732%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="18.2623%" y="565" width="0.4827%" height="15" fill="rgb(246,13,50)" fg:x="227" fg:w="6"/><text x="18.5123%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.48%)</title><rect x="18.2623%" y="549" width="0.4827%" height="15" fill="rgb(240,165,38)" fg:x="227" fg:w="6"/><text x="18.5123%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="18.2623%" y="533" width="0.4827%" height="15" fill="rgb(241,24,51)" fg:x="227" fg:w="6"/><text x="18.5123%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="18.2623%" y="517" width="0.4827%" height="15" fill="rgb(227,51,44)" fg:x="227" fg:w="6"/><text x="18.5123%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="18.4232%" y="501" width="0.3218%" height="15" fill="rgb(231,121,3)" fg:x="229" fg:w="4"/><text x="18.6732%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="18.5036%" y="485" width="0.2414%" height="15" fill="rgb(245,3,41)" fg:x="230" fg:w="3"/><text x="18.7536%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="18.5841%" y="469" width="0.1609%" height="15" fill="rgb(214,13,26)" fg:x="231" fg:w="2"/><text x="18.8341%" y="479.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="18.7450%" y="549" width="0.1609%" height="15" fill="rgb(252,75,11)" fg:x="233" fg:w="2"/><text x="18.9950%" y="559.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="18.8254%" y="533" width="0.0805%" height="15" fill="rgb(218,226,17)" fg:x="234" fg:w="1"/><text x="19.0754%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="18.8254%" y="517" width="0.0805%" height="15" fill="rgb(248,89,38)" fg:x="234" fg:w="1"/><text x="19.0754%" y="527.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="18.8254%" y="501" width="0.0805%" height="15" fill="rgb(237,73,46)" fg:x="234" fg:w="1"/><text x="19.0754%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.9863%" y="517" width="0.0805%" height="15" fill="rgb(242,78,33)" fg:x="236" fg:w="1"/><text x="19.2363%" y="527.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="19.0668%" y="517" width="0.0805%" height="15" fill="rgb(235,60,3)" fg:x="237" fg:w="1"/><text x="19.3168%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="19.0668%" y="501" width="0.0805%" height="15" fill="rgb(216,172,19)" fg:x="237" fg:w="1"/><text x="19.3168%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="19.0668%" y="485" width="0.0805%" height="15" fill="rgb(227,6,42)" fg:x="237" fg:w="1"/><text x="19.3168%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="19.0668%" y="469" width="0.0805%" height="15" fill="rgb(223,207,42)" fg:x="237" fg:w="1"/><text x="19.3168%" y="479.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="19.1472%" y="517" width="0.0805%" height="15" fill="rgb(246,138,30)" fg:x="238" fg:w="1"/><text x="19.3972%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_struct (1 samples, 0.08%)</title><rect x="19.1472%" y="501" width="0.0805%" height="15" fill="rgb(251,199,47)" fg:x="238" fg:w="1"/><text x="19.3972%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.3886%" y="469" width="0.0805%" height="15" fill="rgb(228,218,44)" fg:x="241" fg:w="1"/><text x="19.6386%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.3886%" y="453" width="0.0805%" height="15" fill="rgb(220,68,6)" fg:x="241" fg:w="1"/><text x="19.6386%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="19.4690%" y="469" width="0.0805%" height="15" fill="rgb(240,60,26)" fg:x="242" fg:w="1"/><text x="19.7190%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="19.4690%" y="453" width="0.0805%" height="15" fill="rgb(211,200,19)" fg:x="242" fg:w="1"/><text x="19.7190%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="19.4690%" y="437" width="0.0805%" height="15" fill="rgb(242,145,30)" fg:x="242" fg:w="1"/><text x="19.7190%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="19.4690%" y="421" width="0.0805%" height="15" fill="rgb(225,64,13)" fg:x="242" fg:w="1"/><text x="19.7190%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="19.4690%" y="405" width="0.0805%" height="15" fill="rgb(218,103,35)" fg:x="242" fg:w="1"/><text x="19.7190%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="19.4690%" y="389" width="0.0805%" height="15" fill="rgb(216,93,46)" fg:x="242" fg:w="1"/><text x="19.7190%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="19.4690%" y="373" width="0.0805%" height="15" fill="rgb(225,159,27)" fg:x="242" fg:w="1"/><text x="19.7190%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.4690%" y="357" width="0.0805%" height="15" fill="rgb(225,204,11)" fg:x="242" fg:w="1"/><text x="19.7190%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.4690%" y="341" width="0.0805%" height="15" fill="rgb(205,56,4)" fg:x="242" fg:w="1"/><text x="19.7190%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="19.3886%" y="485" width="0.4023%" height="15" fill="rgb(206,6,35)" fg:x="241" fg:w="5"/><text x="19.6386%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="19.5495%" y="469" width="0.2414%" height="15" fill="rgb(247,73,52)" fg:x="243" fg:w="3"/><text x="19.7995%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="19.5495%" y="453" width="0.2414%" height="15" fill="rgb(246,97,4)" fg:x="243" fg:w="3"/><text x="19.7995%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="19.7104%" y="437" width="0.0805%" height="15" fill="rgb(212,37,15)" fg:x="245" fg:w="1"/><text x="19.9604%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="19.7104%" y="421" width="0.0805%" height="15" fill="rgb(208,130,40)" fg:x="245" fg:w="1"/><text x="19.9604%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="19.7104%" y="405" width="0.0805%" height="15" fill="rgb(236,55,29)" fg:x="245" fg:w="1"/><text x="19.9604%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.7104%" y="389" width="0.0805%" height="15" fill="rgb(209,156,45)" fg:x="245" fg:w="1"/><text x="19.9604%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (8 samples, 0.64%)</title><rect x="19.3081%" y="501" width="0.6436%" height="15" fill="rgb(249,107,4)" fg:x="240" fg:w="8"/><text x="19.5581%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="19.7908%" y="485" width="0.1609%" height="15" fill="rgb(227,7,13)" fg:x="246" fg:w="2"/><text x="20.0408%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.8713%" y="469" width="0.0805%" height="15" fill="rgb(250,129,14)" fg:x="247" fg:w="1"/><text x="20.1213%" y="479.50"></text></g><g><title>engine::session::Session::flush (61 samples, 4.91%)</title><rect x="15.1247%" y="677" width="4.9075%" height="15" fill="rgb(229,92,13)" fg:x="188" fg:w="61"/><text x="15.3747%" y="687.50">engine..</text></g><g><title>engine::session::Session::save_changes (59 samples, 4.75%)</title><rect x="15.2856%" y="661" width="4.7466%" height="15" fill="rgb(245,98,39)" fg:x="190" fg:w="59"/><text x="15.5356%" y="671.50">engine..</text></g><g><title>engine::session::state::State::close (58 samples, 4.67%)</title><rect x="15.3660%" y="645" width="4.6661%" height="15" fill="rgb(234,135,48)" fg:x="191" fg:w="58"/><text x="15.6160%" y="655.50">engin..</text></g><g><title>engine::session::state::State::flush_entities (58 samples, 4.67%)</title><rect x="15.3660%" y="629" width="4.6661%" height="15" fill="rgb(230,98,28)" fg:x="191" fg:w="58"/><text x="15.6160%" y="639.50">engin..</text></g><g><title>core::iter::adapters::try_process (58 samples, 4.67%)</title><rect x="15.3660%" y="613" width="4.6661%" height="15" fill="rgb(223,121,0)" fg:x="191" fg:w="58"/><text x="15.6160%" y="623.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (58 samples, 4.67%)</title><rect x="15.3660%" y="597" width="4.6661%" height="15" fill="rgb(234,173,33)" fg:x="191" fg:w="58"/><text x="15.6160%" y="607.50">&lt;allo..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (57 samples, 4.59%)</title><rect x="15.4465%" y="581" width="4.5857%" height="15" fill="rgb(245,47,8)" fg:x="192" fg:w="57"/><text x="15.6965%" y="591.50">engin..</text></g><g><title>kernel::model::any_entity_changes (16 samples, 1.29%)</title><rect x="18.7450%" y="565" width="1.2872%" height="15" fill="rgb(205,17,20)" fg:x="233" fg:w="16"/><text x="18.9950%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (14 samples, 1.13%)</title><rect x="18.9059%" y="549" width="1.1263%" height="15" fill="rgb(232,151,16)" fg:x="235" fg:w="14"/><text x="19.1559%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (13 samples, 1.05%)</title><rect x="18.9863%" y="533" width="1.0459%" height="15" fill="rgb(208,30,32)" fg:x="236" fg:w="13"/><text x="19.2363%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (10 samples, 0.80%)</title><rect x="19.2277%" y="517" width="0.8045%" height="15" fill="rgb(254,26,3)" fg:x="239" fg:w="10"/><text x="19.4777%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.9517%" y="501" width="0.0805%" height="15" fill="rgb(240,177,30)" fg:x="248" fg:w="1"/><text x="20.2017%" y="511.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="20.0322%" y="677" width="0.0805%" height="15" fill="rgb(248,76,44)" fg:x="249" fg:w="1"/><text x="20.2822%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="20.0322%" y="661" width="0.0805%" height="15" fill="rgb(241,186,54)" fg:x="249" fg:w="1"/><text x="20.2822%" y="671.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="20.0322%" y="645" width="0.0805%" height="15" fill="rgb(249,171,29)" fg:x="249" fg:w="1"/><text x="20.2822%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.0322%" y="629" width="0.0805%" height="15" fill="rgb(237,151,44)" fg:x="249" fg:w="1"/><text x="20.2822%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.0322%" y="613" width="0.0805%" height="15" fill="rgb(228,174,30)" fg:x="249" fg:w="1"/><text x="20.2822%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="20.0322%" y="597" width="0.0805%" height="15" fill="rgb(252,14,37)" fg:x="249" fg:w="1"/><text x="20.2822%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.0322%" y="581" width="0.0805%" height="15" fill="rgb(207,111,40)" fg:x="249" fg:w="1"/><text x="20.2822%" y="591.50"></text></g><g><title>plugins_core::build::Build::new (2 samples, 0.16%)</title><rect x="20.1126%" y="677" width="0.1609%" height="15" fill="rgb(248,171,54)" fg:x="250" fg:w="2"/><text x="20.3626%" y="687.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="20.1126%" y="661" width="0.1609%" height="15" fill="rgb(211,127,2)" fg:x="250" fg:w="2"/><text x="20.3626%" y="671.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="20.1126%" y="645" width="0.1609%" height="15" fill="rgb(236,87,47)" fg:x="250" fg:w="2"/><text x="20.3626%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="20.1126%" y="629" width="0.1609%" height="15" fill="rgb(223,190,45)" fg:x="250" fg:w="2"/><text x="20.3626%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="20.1931%" y="613" width="0.0805%" height="15" fill="rgb(215,5,16)" fg:x="251" fg:w="1"/><text x="20.4431%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="20.2735%" y="629" width="0.1609%" height="15" fill="rgb(252,82,33)" fg:x="252" fg:w="2"/><text x="20.5235%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.3540%" y="613" width="0.0805%" height="15" fill="rgb(247,213,44)" fg:x="253" fg:w="1"/><text x="20.6040%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.3540%" y="597" width="0.0805%" height="15" fill="rgb(205,196,44)" fg:x="253" fg:w="1"/><text x="20.6040%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.3540%" y="581" width="0.0805%" height="15" fill="rgb(237,96,54)" fg:x="253" fg:w="1"/><text x="20.6040%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.3540%" y="565" width="0.0805%" height="15" fill="rgb(230,113,34)" fg:x="253" fg:w="1"/><text x="20.6040%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="20.3540%" y="549" width="0.0805%" height="15" fill="rgb(221,224,12)" fg:x="253" fg:w="1"/><text x="20.6040%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="20.3540%" y="533" width="0.0805%" height="15" fill="rgb(219,112,44)" fg:x="253" fg:w="1"/><text x="20.6040%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="20.3540%" y="517" width="0.0805%" height="15" fill="rgb(210,31,13)" fg:x="253" fg:w="1"/><text x="20.6040%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.3540%" y="501" width="0.0805%" height="15" fill="rgb(230,25,16)" fg:x="253" fg:w="1"/><text x="20.6040%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.3540%" y="485" width="0.0805%" height="15" fill="rgb(246,108,53)" fg:x="253" fg:w="1"/><text x="20.6040%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="20.3540%" y="469" width="0.0805%" height="15" fill="rgb(241,172,50)" fg:x="253" fg:w="1"/><text x="20.6040%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="20.3540%" y="453" width="0.0805%" height="15" fill="rgb(235,141,10)" fg:x="253" fg:w="1"/><text x="20.6040%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="20.3540%" y="437" width="0.0805%" height="15" fill="rgb(220,174,43)" fg:x="253" fg:w="1"/><text x="20.6040%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="20.3540%" y="421" width="0.0805%" height="15" fill="rgb(215,181,40)" fg:x="253" fg:w="1"/><text x="20.6040%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.3540%" y="405" width="0.0805%" height="15" fill="rgb(230,97,2)" fg:x="253" fg:w="1"/><text x="20.6040%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="20.2735%" y="645" width="0.2414%" height="15" fill="rgb(211,25,27)" fg:x="252" fg:w="3"/><text x="20.5235%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.4344%" y="629" width="0.0805%" height="15" fill="rgb(230,87,26)" fg:x="254" fg:w="1"/><text x="20.6844%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.4344%" y="613" width="0.0805%" height="15" fill="rgb(227,160,17)" fg:x="254" fg:w="1"/><text x="20.6844%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (4 samples, 0.32%)</title><rect x="20.2735%" y="661" width="0.3218%" height="15" fill="rgb(244,85,34)" fg:x="252" fg:w="4"/><text x="20.5235%" y="671.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="20.5149%" y="645" width="0.0805%" height="15" fill="rgb(207,70,0)" fg:x="255" fg:w="1"/><text x="20.7649%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="20.5953%" y="645" width="0.0805%" height="15" fill="rgb(223,129,7)" fg:x="256" fg:w="1"/><text x="20.8453%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.5953%" y="629" width="0.0805%" height="15" fill="rgb(246,105,7)" fg:x="256" fg:w="1"/><text x="20.8453%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.5953%" y="613" width="0.0805%" height="15" fill="rgb(215,154,42)" fg:x="256" fg:w="1"/><text x="20.8453%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.5953%" y="597" width="0.0805%" height="15" fill="rgb(220,215,30)" fg:x="256" fg:w="1"/><text x="20.8453%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.5953%" y="581" width="0.0805%" height="15" fill="rgb(228,81,51)" fg:x="256" fg:w="1"/><text x="20.8453%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.5953%" y="565" width="0.0805%" height="15" fill="rgb(247,71,54)" fg:x="256" fg:w="1"/><text x="20.8453%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="20.5953%" y="549" width="0.0805%" height="15" fill="rgb(234,176,34)" fg:x="256" fg:w="1"/><text x="20.8453%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="20.5953%" y="533" width="0.0805%" height="15" fill="rgb(241,103,54)" fg:x="256" fg:w="1"/><text x="20.8453%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="20.5953%" y="517" width="0.0805%" height="15" fill="rgb(228,22,34)" fg:x="256" fg:w="1"/><text x="20.8453%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.5953%" y="501" width="0.0805%" height="15" fill="rgb(241,179,48)" fg:x="256" fg:w="1"/><text x="20.8453%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.5953%" y="485" width="0.0805%" height="15" fill="rgb(235,167,37)" fg:x="256" fg:w="1"/><text x="20.8453%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="20.5953%" y="469" width="0.0805%" height="15" fill="rgb(213,109,30)" fg:x="256" fg:w="1"/><text x="20.8453%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="20.5953%" y="453" width="0.0805%" height="15" fill="rgb(222,172,16)" fg:x="256" fg:w="1"/><text x="20.8453%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="20.5953%" y="437" width="0.0805%" height="15" fill="rgb(233,192,5)" fg:x="256" fg:w="1"/><text x="20.8453%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="20.5953%" y="421" width="0.0805%" height="15" fill="rgb(247,189,41)" fg:x="256" fg:w="1"/><text x="20.8453%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.5953%" y="405" width="0.0805%" height="15" fill="rgb(218,134,47)" fg:x="256" fg:w="1"/><text x="20.8453%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.6758%" y="549" width="0.0805%" height="15" fill="rgb(216,29,3)" fg:x="257" fg:w="1"/><text x="20.9258%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="20.6758%" y="581" width="0.1609%" height="15" fill="rgb(246,140,12)" fg:x="257" fg:w="2"/><text x="20.9258%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="20.6758%" y="565" width="0.1609%" height="15" fill="rgb(230,136,11)" fg:x="257" fg:w="2"/><text x="20.9258%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="20.7562%" y="549" width="0.0805%" height="15" fill="rgb(247,22,47)" fg:x="258" fg:w="1"/><text x="21.0062%" y="559.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (3 samples, 0.24%)</title><rect x="20.6758%" y="645" width="0.2414%" height="15" fill="rgb(218,84,22)" fg:x="257" fg:w="3"/><text x="20.9258%" y="655.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="20.6758%" y="629" width="0.2414%" height="15" fill="rgb(216,87,39)" fg:x="257" fg:w="3"/><text x="20.9258%" y="639.50"></text></g><g><title>serde_json::value::to_value (3 samples, 0.24%)</title><rect x="20.6758%" y="613" width="0.2414%" height="15" fill="rgb(221,178,8)" fg:x="257" fg:w="3"/><text x="20.9258%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="20.6758%" y="597" width="0.2414%" height="15" fill="rgb(230,42,11)" fg:x="257" fg:w="3"/><text x="20.9258%" y="607.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="20.8367%" y="581" width="0.0805%" height="15" fill="rgb(237,229,4)" fg:x="259" fg:w="1"/><text x="21.0867%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="20.9171%" y="629" width="0.0805%" height="15" fill="rgb(222,31,33)" fg:x="260" fg:w="1"/><text x="21.1671%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="20.9171%" y="613" width="0.0805%" height="15" fill="rgb(210,17,39)" fg:x="260" fg:w="1"/><text x="21.1671%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="20.9171%" y="597" width="0.0805%" height="15" fill="rgb(244,93,20)" fg:x="260" fg:w="1"/><text x="21.1671%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.9171%" y="581" width="0.0805%" height="15" fill="rgb(210,40,47)" fg:x="260" fg:w="1"/><text x="21.1671%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.9171%" y="565" width="0.0805%" height="15" fill="rgb(239,211,47)" fg:x="260" fg:w="1"/><text x="21.1671%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="20.9171%" y="549" width="0.0805%" height="15" fill="rgb(251,223,49)" fg:x="260" fg:w="1"/><text x="21.1671%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.9171%" y="533" width="0.0805%" height="15" fill="rgb(221,149,5)" fg:x="260" fg:w="1"/><text x="21.1671%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.9171%" y="517" width="0.0805%" height="15" fill="rgb(219,224,51)" fg:x="260" fg:w="1"/><text x="21.1671%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.9171%" y="501" width="0.0805%" height="15" fill="rgb(223,7,8)" fg:x="260" fg:w="1"/><text x="21.1671%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.48%)</title><rect x="20.5953%" y="661" width="0.4827%" height="15" fill="rgb(241,217,22)" fg:x="256" fg:w="6"/><text x="20.8453%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="20.9171%" y="645" width="0.1609%" height="15" fill="rgb(248,209,0)" fg:x="260" fg:w="2"/><text x="21.1671%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="20.9976%" y="629" width="0.0805%" height="15" fill="rgb(217,205,4)" fg:x="261" fg:w="1"/><text x="21.2476%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="20.9976%" y="613" width="0.0805%" height="15" fill="rgb(228,124,39)" fg:x="261" fg:w="1"/><text x="21.2476%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="20.9976%" y="597" width="0.0805%" height="15" fill="rgb(250,116,42)" fg:x="261" fg:w="1"/><text x="21.2476%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="20.9976%" y="581" width="0.0805%" height="15" fill="rgb(223,202,9)" fg:x="261" fg:w="1"/><text x="21.2476%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="20.9976%" y="565" width="0.0805%" height="15" fill="rgb(242,222,40)" fg:x="261" fg:w="1"/><text x="21.2476%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="20.9976%" y="549" width="0.0805%" height="15" fill="rgb(229,99,46)" fg:x="261" fg:w="1"/><text x="21.2476%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="20.9976%" y="533" width="0.0805%" height="15" fill="rgb(225,56,46)" fg:x="261" fg:w="1"/><text x="21.2476%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="20.9976%" y="517" width="0.0805%" height="15" fill="rgb(227,94,5)" fg:x="261" fg:w="1"/><text x="21.2476%" y="527.50"></text></g><g><title>plugins_core::build::Build::save (11 samples, 0.88%)</title><rect x="20.2735%" y="677" width="0.8850%" height="15" fill="rgb(205,112,38)" fg:x="252" fg:w="11"/><text x="20.5235%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.0780%" y="661" width="0.0805%" height="15" fill="rgb(231,133,46)" fg:x="262" fg:w="1"/><text x="21.3280%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.0780%" y="645" width="0.0805%" height="15" fill="rgb(217,16,9)" fg:x="262" fg:w="1"/><text x="21.3280%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.0780%" y="629" width="0.0805%" height="15" fill="rgb(249,173,9)" fg:x="262" fg:w="1"/><text x="21.3280%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.0780%" y="613" width="0.0805%" height="15" fill="rgb(205,163,53)" fg:x="262" fg:w="1"/><text x="21.3280%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (1 samples, 0.08%)</title><rect x="21.1585%" y="677" width="0.0805%" height="15" fill="rgb(217,54,41)" fg:x="263" fg:w="1"/><text x="21.4085%" y="687.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="21.1585%" y="661" width="0.0805%" height="15" fill="rgb(228,216,12)" fg:x="263" fg:w="1"/><text x="21.4085%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="21.1585%" y="645" width="0.0805%" height="15" fill="rgb(244,228,15)" fg:x="263" fg:w="1"/><text x="21.4085%" y="655.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="21.1585%" y="629" width="0.0805%" height="15" fill="rgb(221,176,53)" fg:x="263" fg:w="1"/><text x="21.4085%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="21.1585%" y="613" width="0.0805%" height="15" fill="rgb(205,94,34)" fg:x="263" fg:w="1"/><text x="21.4085%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.1585%" y="597" width="0.0805%" height="15" fill="rgb(213,110,48)" fg:x="263" fg:w="1"/><text x="21.4085%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.1585%" y="581" width="0.0805%" height="15" fill="rgb(236,142,28)" fg:x="263" fg:w="1"/><text x="21.4085%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.1585%" y="565" width="0.0805%" height="15" fill="rgb(225,135,29)" fg:x="263" fg:w="1"/><text x="21.4085%" y="575.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="21.2389%" y="645" width="0.0805%" height="15" fill="rgb(252,45,31)" fg:x="264" fg:w="1"/><text x="21.4889%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="21.2389%" y="629" width="0.0805%" height="15" fill="rgb(211,187,50)" fg:x="264" fg:w="1"/><text x="21.4889%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="21.3194%" y="613" width="0.0805%" height="15" fill="rgb(229,109,7)" fg:x="265" fg:w="1"/><text x="21.5694%" y="623.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="21.3194%" y="597" width="0.0805%" height="15" fill="rgb(251,131,51)" fg:x="265" fg:w="1"/><text x="21.5694%" y="607.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (3 samples, 0.24%)</title><rect x="21.2389%" y="677" width="0.2414%" height="15" fill="rgb(251,180,35)" fg:x="264" fg:w="3"/><text x="21.4889%" y="687.50"></text></g><g><title>plugins_core::tools::set_occupying (3 samples, 0.24%)</title><rect x="21.2389%" y="661" width="0.2414%" height="15" fill="rgb(211,46,32)" fg:x="264" fg:w="3"/><text x="21.4889%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="21.3194%" y="645" width="0.1609%" height="15" fill="rgb(248,123,17)" fg:x="265" fg:w="2"/><text x="21.5694%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="21.3194%" y="629" width="0.1609%" height="15" fill="rgb(227,141,18)" fg:x="265" fg:w="2"/><text x="21.5694%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.3998%" y="613" width="0.0805%" height="15" fill="rgb(216,102,9)" fg:x="266" fg:w="1"/><text x="21.6498%" y="623.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="21.4803%" y="661" width="0.1609%" height="15" fill="rgb(253,47,13)" fg:x="267" fg:w="2"/><text x="21.7303%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="21.5607%" y="645" width="0.0805%" height="15" fill="rgb(226,93,23)" fg:x="268" fg:w="1"/><text x="21.8107%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.5607%" y="629" width="0.0805%" height="15" fill="rgb(247,104,17)" fg:x="268" fg:w="1"/><text x="21.8107%" y="639.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (3 samples, 0.24%)</title><rect x="21.4803%" y="677" width="0.2414%" height="15" fill="rgb(233,203,26)" fg:x="267" fg:w="3"/><text x="21.7303%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="21.6412%" y="661" width="0.0805%" height="15" fill="rgb(244,98,49)" fg:x="269" fg:w="1"/><text x="21.8912%" y="671.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="21.6412%" y="645" width="0.0805%" height="15" fill="rgb(235,134,22)" fg:x="269" fg:w="1"/><text x="21.8912%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="21.6412%" y="629" width="0.0805%" height="15" fill="rgb(221,70,32)" fg:x="269" fg:w="1"/><text x="21.8912%" y="639.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Route&gt;::serialize (1 samples, 0.08%)</title><rect x="21.6412%" y="613" width="0.0805%" height="15" fill="rgb(238,15,50)" fg:x="269" fg:w="1"/><text x="21.8912%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.6412%" y="597" width="0.0805%" height="15" fill="rgb(215,221,48)" fg:x="269" fg:w="1"/><text x="21.8912%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.7216%" y="597" width="0.0805%" height="15" fill="rgb(236,73,3)" fg:x="270" fg:w="1"/><text x="21.9716%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.7216%" y="581" width="0.0805%" height="15" fill="rgb(250,107,11)" fg:x="270" fg:w="1"/><text x="21.9716%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.7216%" y="565" width="0.0805%" height="15" fill="rgb(242,39,14)" fg:x="270" fg:w="1"/><text x="21.9716%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.7216%" y="549" width="0.0805%" height="15" fill="rgb(248,164,37)" fg:x="270" fg:w="1"/><text x="21.9716%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.7216%" y="533" width="0.0805%" height="15" fill="rgb(217,60,12)" fg:x="270" fg:w="1"/><text x="21.9716%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="21.7216%" y="517" width="0.0805%" height="15" fill="rgb(240,125,29)" fg:x="270" fg:w="1"/><text x="21.9716%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="21.7216%" y="501" width="0.0805%" height="15" fill="rgb(208,207,28)" fg:x="270" fg:w="1"/><text x="21.9716%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="21.7216%" y="485" width="0.0805%" height="15" fill="rgb(209,159,27)" fg:x="270" fg:w="1"/><text x="21.9716%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="21.7216%" y="469" width="0.0805%" height="15" fill="rgb(251,176,53)" fg:x="270" fg:w="1"/><text x="21.9716%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="21.7216%" y="453" width="0.0805%" height="15" fill="rgb(211,85,7)" fg:x="270" fg:w="1"/><text x="21.9716%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="21.7216%" y="437" width="0.0805%" height="15" fill="rgb(216,64,54)" fg:x="270" fg:w="1"/><text x="21.9716%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="21.7216%" y="421" width="0.0805%" height="15" fill="rgb(217,54,24)" fg:x="270" fg:w="1"/><text x="21.9716%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="21.7216%" y="405" width="0.0805%" height="15" fill="rgb(208,206,53)" fg:x="270" fg:w="1"/><text x="21.9716%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="21.7216%" y="389" width="0.0805%" height="15" fill="rgb(251,74,39)" fg:x="270" fg:w="1"/><text x="21.9716%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.7216%" y="373" width="0.0805%" height="15" fill="rgb(226,47,5)" fg:x="270" fg:w="1"/><text x="21.9716%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="21.7216%" y="629" width="0.1609%" height="15" fill="rgb(234,111,33)" fg:x="270" fg:w="2"/><text x="21.9716%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="21.7216%" y="613" width="0.1609%" height="15" fill="rgb(251,14,10)" fg:x="270" fg:w="2"/><text x="21.9716%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="21.8021%" y="597" width="0.0805%" height="15" fill="rgb(232,43,0)" fg:x="271" fg:w="1"/><text x="22.0521%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.8021%" y="581" width="0.0805%" height="15" fill="rgb(222,68,43)" fg:x="271" fg:w="1"/><text x="22.0521%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="21.8021%" y="565" width="0.0805%" height="15" fill="rgb(217,24,23)" fg:x="271" fg:w="1"/><text x="22.0521%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.8021%" y="549" width="0.0805%" height="15" fill="rgb(229,209,14)" fg:x="271" fg:w="1"/><text x="22.0521%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="21.8021%" y="533" width="0.0805%" height="15" fill="rgb(250,149,48)" fg:x="271" fg:w="1"/><text x="22.0521%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.8021%" y="517" width="0.0805%" height="15" fill="rgb(210,120,37)" fg:x="271" fg:w="1"/><text x="22.0521%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.8021%" y="501" width="0.0805%" height="15" fill="rgb(210,21,8)" fg:x="271" fg:w="1"/><text x="22.0521%" y="511.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="21.7216%" y="661" width="0.2414%" height="15" fill="rgb(243,145,7)" fg:x="270" fg:w="3"/><text x="21.9716%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="21.7216%" y="645" width="0.2414%" height="15" fill="rgb(238,178,32)" fg:x="270" fg:w="3"/><text x="21.9716%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="21.8825%" y="629" width="0.0805%" height="15" fill="rgb(222,4,10)" fg:x="272" fg:w="1"/><text x="22.1325%" y="639.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="21.8825%" y="613" width="0.0805%" height="15" fill="rgb(239,7,37)" fg:x="272" fg:w="1"/><text x="22.1325%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="21.9630%" y="645" width="0.1609%" height="15" fill="rgb(215,31,37)" fg:x="273" fg:w="2"/><text x="22.2130%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="21.9630%" y="629" width="0.1609%" height="15" fill="rgb(224,83,33)" fg:x="273" fg:w="2"/><text x="22.2130%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="21.9630%" y="613" width="0.1609%" height="15" fill="rgb(239,55,3)" fg:x="273" fg:w="2"/><text x="22.2130%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="21.9630%" y="597" width="0.1609%" height="15" fill="rgb(247,92,11)" fg:x="273" fg:w="2"/><text x="22.2130%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="21.9630%" y="581" width="0.1609%" height="15" fill="rgb(239,200,7)" fg:x="273" fg:w="2"/><text x="22.2130%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="21.9630%" y="565" width="0.1609%" height="15" fill="rgb(227,115,8)" fg:x="273" fg:w="2"/><text x="22.2130%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="21.9630%" y="549" width="0.1609%" height="15" fill="rgb(215,189,27)" fg:x="273" fg:w="2"/><text x="22.2130%" y="559.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="21.9630%" y="533" width="0.1609%" height="15" fill="rgb(251,216,39)" fg:x="273" fg:w="2"/><text x="22.2130%" y="543.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="21.9630%" y="661" width="0.2414%" height="15" fill="rgb(207,29,47)" fg:x="273" fg:w="3"/><text x="22.2130%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="22.1239%" y="645" width="0.0805%" height="15" fill="rgb(210,71,34)" fg:x="275" fg:w="1"/><text x="22.3739%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="22.1239%" y="629" width="0.0805%" height="15" fill="rgb(253,217,51)" fg:x="275" fg:w="1"/><text x="22.3739%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="22.1239%" y="613" width="0.0805%" height="15" fill="rgb(222,117,46)" fg:x="275" fg:w="1"/><text x="22.3739%" y="623.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (91 samples, 7.32%)</title><rect x="14.9638%" y="693" width="7.3210%" height="15" fill="rgb(226,132,6)" fg:x="186" fg:w="91"/><text x="15.2138%" y="703.50">plugins_co..</text></g><g><title>plugins_core::tools::set_container (7 samples, 0.56%)</title><rect x="21.7216%" y="677" width="0.5632%" height="15" fill="rgb(254,145,51)" fg:x="270" fg:w="7"/><text x="21.9716%" y="687.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="22.2043%" y="661" width="0.0805%" height="15" fill="rgb(231,199,27)" fg:x="276" fg:w="1"/><text x="22.4543%" y="671.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="22.2848%" y="693" width="0.0805%" height="15" fill="rgb(245,158,14)" fg:x="277" fg:w="1"/><text x="22.5348%" y="703.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="22.2848%" y="677" width="0.0805%" height="15" fill="rgb(240,113,14)" fg:x="277" fg:w="1"/><text x="22.5348%" y="687.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="22.2848%" y="661" width="0.0805%" height="15" fill="rgb(210,20,13)" fg:x="277" fg:w="1"/><text x="22.5348%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="22.2848%" y="645" width="0.0805%" height="15" fill="rgb(241,144,13)" fg:x="277" fg:w="1"/><text x="22.5348%" y="655.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="22.2848%" y="629" width="0.0805%" height="15" fill="rgb(235,43,34)" fg:x="277" fg:w="1"/><text x="22.5348%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="22.2848%" y="613" width="0.0805%" height="15" fill="rgb(208,36,20)" fg:x="277" fg:w="1"/><text x="22.5348%" y="623.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="22.2848%" y="597" width="0.0805%" height="15" fill="rgb(239,204,10)" fg:x="277" fg:w="1"/><text x="22.5348%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="22.2848%" y="581" width="0.0805%" height="15" fill="rgb(217,84,43)" fg:x="277" fg:w="1"/><text x="22.5348%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="22.2848%" y="565" width="0.0805%" height="15" fill="rgb(241,170,50)" fg:x="277" fg:w="1"/><text x="22.5348%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="22.2848%" y="549" width="0.0805%" height="15" fill="rgb(226,205,29)" fg:x="277" fg:w="1"/><text x="22.5348%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="22.2848%" y="533" width="0.0805%" height="15" fill="rgb(233,113,1)" fg:x="277" fg:w="1"/><text x="22.5348%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="22.2848%" y="517" width="0.0805%" height="15" fill="rgb(253,98,13)" fg:x="277" fg:w="1"/><text x="22.5348%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="22.2848%" y="501" width="0.0805%" height="15" fill="rgb(211,115,12)" fg:x="277" fg:w="1"/><text x="22.5348%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="22.2848%" y="485" width="0.0805%" height="15" fill="rgb(208,12,16)" fg:x="277" fg:w="1"/><text x="22.5348%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.2848%" y="469" width="0.0805%" height="15" fill="rgb(237,193,54)" fg:x="277" fg:w="1"/><text x="22.5348%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="22.3652%" y="645" width="0.0805%" height="15" fill="rgb(243,22,42)" fg:x="278" fg:w="1"/><text x="22.6152%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="22.3652%" y="629" width="0.0805%" height="15" fill="rgb(233,151,36)" fg:x="278" fg:w="1"/><text x="22.6152%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="22.3652%" y="613" width="0.0805%" height="15" fill="rgb(237,57,45)" fg:x="278" fg:w="1"/><text x="22.6152%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="22.3652%" y="597" width="0.0805%" height="15" fill="rgb(221,88,17)" fg:x="278" fg:w="1"/><text x="22.6152%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="22.3652%" y="661" width="0.1609%" height="15" fill="rgb(230,79,15)" fg:x="278" fg:w="2"/><text x="22.6152%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.4457%" y="645" width="0.0805%" height="15" fill="rgb(213,57,13)" fg:x="279" fg:w="1"/><text x="22.6957%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="22.5261%" y="613" width="0.1609%" height="15" fill="rgb(222,116,39)" fg:x="280" fg:w="2"/><text x="22.7761%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="22.5261%" y="597" width="0.1609%" height="15" fill="rgb(245,107,2)" fg:x="280" fg:w="2"/><text x="22.7761%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="22.6066%" y="581" width="0.0805%" height="15" fill="rgb(238,1,10)" fg:x="281" fg:w="1"/><text x="22.8566%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="22.5261%" y="629" width="0.2414%" height="15" fill="rgb(249,4,48)" fg:x="280" fg:w="3"/><text x="22.7761%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="22.6870%" y="613" width="0.0805%" height="15" fill="rgb(223,151,18)" fg:x="282" fg:w="1"/><text x="22.9370%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.6870%" y="597" width="0.0805%" height="15" fill="rgb(227,65,43)" fg:x="282" fg:w="1"/><text x="22.9370%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="22.6870%" y="581" width="0.0805%" height="15" fill="rgb(218,40,45)" fg:x="282" fg:w="1"/><text x="22.9370%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.6870%" y="565" width="0.0805%" height="15" fill="rgb(252,121,31)" fg:x="282" fg:w="1"/><text x="22.9370%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="22.6870%" y="549" width="0.0805%" height="15" fill="rgb(219,158,43)" fg:x="282" fg:w="1"/><text x="22.9370%" y="559.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (4 samples, 0.32%)</title><rect x="22.5261%" y="645" width="0.3218%" height="15" fill="rgb(231,162,42)" fg:x="280" fg:w="4"/><text x="22.7761%" y="655.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="22.7675%" y="629" width="0.0805%" height="15" fill="rgb(217,179,25)" fg:x="283" fg:w="1"/><text x="23.0175%" y="639.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="22.8479%" y="629" width="0.0805%" height="15" fill="rgb(206,212,31)" fg:x="284" fg:w="1"/><text x="23.0979%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="22.8479%" y="613" width="0.0805%" height="15" fill="rgb(235,144,12)" fg:x="284" fg:w="1"/><text x="23.0979%" y="623.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="22.8479%" y="597" width="0.0805%" height="15" fill="rgb(213,51,10)" fg:x="284" fg:w="1"/><text x="23.0979%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="22.8479%" y="581" width="0.0805%" height="15" fill="rgb(231,145,14)" fg:x="284" fg:w="1"/><text x="23.0979%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.8479%" y="565" width="0.0805%" height="15" fill="rgb(235,15,28)" fg:x="284" fg:w="1"/><text x="23.0979%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="22.9284%" y="581" width="0.0805%" height="15" fill="rgb(237,206,10)" fg:x="285" fg:w="1"/><text x="23.1784%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="22.9284%" y="565" width="0.0805%" height="15" fill="rgb(236,227,27)" fg:x="285" fg:w="1"/><text x="23.1784%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.9284%" y="549" width="0.0805%" height="15" fill="rgb(246,83,35)" fg:x="285" fg:w="1"/><text x="23.1784%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="22.9284%" y="533" width="0.0805%" height="15" fill="rgb(220,136,24)" fg:x="285" fg:w="1"/><text x="23.1784%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.9284%" y="517" width="0.0805%" height="15" fill="rgb(217,3,25)" fg:x="285" fg:w="1"/><text x="23.1784%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="22.9284%" y="501" width="0.0805%" height="15" fill="rgb(239,24,14)" fg:x="285" fg:w="1"/><text x="23.1784%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.9284%" y="485" width="0.0805%" height="15" fill="rgb(244,16,53)" fg:x="285" fg:w="1"/><text x="23.1784%" y="495.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (10 samples, 0.80%)</title><rect x="22.3652%" y="693" width="0.8045%" height="15" fill="rgb(208,175,44)" fg:x="278" fg:w="10"/><text x="22.6152%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (10 samples, 0.80%)</title><rect x="22.3652%" y="677" width="0.8045%" height="15" fill="rgb(252,18,48)" fg:x="278" fg:w="10"/><text x="22.6152%" y="687.50"></text></g><g><title>plugins_core::build::Build::save (8 samples, 0.64%)</title><rect x="22.5261%" y="661" width="0.6436%" height="15" fill="rgb(234,199,32)" fg:x="280" fg:w="8"/><text x="22.7761%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="22.8479%" y="645" width="0.3218%" height="15" fill="rgb(225,77,54)" fg:x="284" fg:w="4"/><text x="23.0979%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="22.9284%" y="629" width="0.2414%" height="15" fill="rgb(225,42,25)" fg:x="285" fg:w="3"/><text x="23.1784%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="22.9284%" y="613" width="0.2414%" height="15" fill="rgb(242,227,46)" fg:x="285" fg:w="3"/><text x="23.1784%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.24%)</title><rect x="22.9284%" y="597" width="0.2414%" height="15" fill="rgb(246,197,35)" fg:x="285" fg:w="3"/><text x="23.1784%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="23.0088%" y="581" width="0.1609%" height="15" fill="rgb(215,159,26)" fg:x="286" fg:w="2"/><text x="23.2588%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (2 samples, 0.16%)</title><rect x="23.0088%" y="565" width="0.1609%" height="15" fill="rgb(212,194,50)" fg:x="286" fg:w="2"/><text x="23.2588%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="23.0088%" y="549" width="0.1609%" height="15" fill="rgb(246,132,1)" fg:x="286" fg:w="2"/><text x="23.2588%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.0893%" y="533" width="0.0805%" height="15" fill="rgb(217,71,7)" fg:x="287" fg:w="1"/><text x="23.3393%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="23.1698%" y="661" width="0.1609%" height="15" fill="rgb(252,59,32)" fg:x="288" fg:w="2"/><text x="23.4198%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="23.1698%" y="645" width="0.1609%" height="15" fill="rgb(253,204,25)" fg:x="288" fg:w="2"/><text x="23.4198%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="23.1698%" y="629" width="0.1609%" height="15" fill="rgb(232,21,16)" fg:x="288" fg:w="2"/><text x="23.4198%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="23.2502%" y="613" width="0.0805%" height="15" fill="rgb(248,90,29)" fg:x="289" fg:w="1"/><text x="23.5002%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="23.2502%" y="597" width="0.0805%" height="15" fill="rgb(249,223,7)" fg:x="289" fg:w="1"/><text x="23.5002%" y="607.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="23.2502%" y="581" width="0.0805%" height="15" fill="rgb(231,119,42)" fg:x="289" fg:w="1"/><text x="23.5002%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.4111%" y="613" width="0.0805%" height="15" fill="rgb(215,41,35)" fg:x="291" fg:w="1"/><text x="23.6611%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (5 samples, 0.40%)</title><rect x="23.1698%" y="677" width="0.4023%" height="15" fill="rgb(220,44,45)" fg:x="288" fg:w="5"/><text x="23.4198%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (3 samples, 0.24%)</title><rect x="23.3307%" y="661" width="0.2414%" height="15" fill="rgb(253,197,36)" fg:x="290" fg:w="3"/><text x="23.5807%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="23.4111%" y="645" width="0.1609%" height="15" fill="rgb(245,225,54)" fg:x="291" fg:w="2"/><text x="23.6611%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="23.4111%" y="629" width="0.1609%" height="15" fill="rgb(239,94,37)" fg:x="291" fg:w="2"/><text x="23.6611%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="23.4916%" y="613" width="0.0805%" height="15" fill="rgb(242,217,10)" fg:x="292" fg:w="1"/><text x="23.7416%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="23.4916%" y="597" width="0.0805%" height="15" fill="rgb(250,193,7)" fg:x="292" fg:w="1"/><text x="23.7416%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.4916%" y="581" width="0.0805%" height="15" fill="rgb(230,104,19)" fg:x="292" fg:w="1"/><text x="23.7416%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="23.5720%" y="677" width="0.0805%" height="15" fill="rgb(230,181,4)" fg:x="293" fg:w="1"/><text x="23.8220%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="23.8134%" y="645" width="0.0805%" height="15" fill="rgb(216,219,49)" fg:x="296" fg:w="1"/><text x="24.0634%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="23.8938%" y="645" width="0.1609%" height="15" fill="rgb(254,144,0)" fg:x="297" fg:w="2"/><text x="24.1438%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="23.8938%" y="629" width="0.1609%" height="15" fill="rgb(205,209,38)" fg:x="297" fg:w="2"/><text x="24.1438%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="23.8938%" y="613" width="0.1609%" height="15" fill="rgb(240,21,42)" fg:x="297" fg:w="2"/><text x="24.1438%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="23.8938%" y="597" width="0.1609%" height="15" fill="rgb(241,132,3)" fg:x="297" fg:w="2"/><text x="24.1438%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="23.9743%" y="581" width="0.0805%" height="15" fill="rgb(225,14,2)" fg:x="298" fg:w="1"/><text x="24.2243%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="23.9743%" y="565" width="0.0805%" height="15" fill="rgb(210,141,35)" fg:x="298" fg:w="1"/><text x="24.2243%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="24.0547%" y="597" width="0.0805%" height="15" fill="rgb(251,14,44)" fg:x="299" fg:w="1"/><text x="24.3047%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="24.0547%" y="581" width="0.0805%" height="15" fill="rgb(247,48,18)" fg:x="299" fg:w="1"/><text x="24.3047%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="24.0547%" y="565" width="0.0805%" height="15" fill="rgb(225,0,40)" fg:x="299" fg:w="1"/><text x="24.3047%" y="575.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="24.0547%" y="549" width="0.0805%" height="15" fill="rgb(221,31,33)" fg:x="299" fg:w="1"/><text x="24.3047%" y="559.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="24.0547%" y="629" width="0.1609%" height="15" fill="rgb(237,42,40)" fg:x="299" fg:w="2"/><text x="24.3047%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="24.0547%" y="613" width="0.1609%" height="15" fill="rgb(233,51,29)" fg:x="299" fg:w="2"/><text x="24.3047%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="24.1352%" y="597" width="0.0805%" height="15" fill="rgb(226,58,20)" fg:x="300" fg:w="1"/><text x="24.3852%" y="607.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="24.2156%" y="629" width="0.0805%" height="15" fill="rgb(208,98,7)" fg:x="301" fg:w="1"/><text x="24.4656%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.2156%" y="613" width="0.0805%" height="15" fill="rgb(228,143,44)" fg:x="301" fg:w="1"/><text x="24.4656%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="24.2156%" y="597" width="0.0805%" height="15" fill="rgb(246,55,38)" fg:x="301" fg:w="1"/><text x="24.4656%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="24.2961%" y="597" width="0.0805%" height="15" fill="rgb(247,87,16)" fg:x="302" fg:w="1"/><text x="24.5461%" y="607.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (193 samples, 15.53%)</title><rect x="8.9300%" y="709" width="15.5270%" height="15" fill="rgb(234,129,42)" fg:x="111" fg:w="193"/><text x="9.1800%" y="719.50">&lt;tests::HoldingKeyInVess..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (16 samples, 1.29%)</title><rect x="23.1698%" y="693" width="1.2872%" height="15" fill="rgb(220,82,16)" fg:x="288" fg:w="16"/><text x="23.4198%" y="703.50"></text></g><g><title>plugins_core::build::Build::save (10 samples, 0.80%)</title><rect x="23.6525%" y="677" width="0.8045%" height="15" fill="rgb(211,88,4)" fg:x="294" fg:w="10"/><text x="23.9025%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (9 samples, 0.72%)</title><rect x="23.7329%" y="661" width="0.7241%" height="15" fill="rgb(248,151,21)" fg:x="295" fg:w="9"/><text x="23.9829%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.40%)</title><rect x="24.0547%" y="645" width="0.4023%" height="15" fill="rgb(238,163,6)" fg:x="299" fg:w="5"/><text x="24.3047%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="24.2961%" y="629" width="0.1609%" height="15" fill="rgb(209,183,11)" fg:x="302" fg:w="2"/><text x="24.5461%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="24.2961%" y="613" width="0.1609%" height="15" fill="rgb(219,37,20)" fg:x="302" fg:w="2"/><text x="24.5461%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="24.3765%" y="597" width="0.0805%" height="15" fill="rgb(210,158,4)" fg:x="303" fg:w="1"/><text x="24.6265%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="24.3765%" y="581" width="0.0805%" height="15" fill="rgb(221,167,53)" fg:x="303" fg:w="1"/><text x="24.6265%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="24.3765%" y="565" width="0.0805%" height="15" fill="rgb(237,151,45)" fg:x="303" fg:w="1"/><text x="24.6265%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="24.3765%" y="549" width="0.0805%" height="15" fill="rgb(231,39,3)" fg:x="303" fg:w="1"/><text x="24.6265%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="24.3765%" y="533" width="0.0805%" height="15" fill="rgb(212,167,28)" fg:x="303" fg:w="1"/><text x="24.6265%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="24.3765%" y="517" width="0.0805%" height="15" fill="rgb(232,178,8)" fg:x="303" fg:w="1"/><text x="24.6265%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="24.3765%" y="501" width="0.0805%" height="15" fill="rgb(225,151,20)" fg:x="303" fg:w="1"/><text x="24.6265%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="24.6179%" y="677" width="0.0805%" height="15" fill="rgb(238,3,37)" fg:x="306" fg:w="1"/><text x="24.8679%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="24.6179%" y="661" width="0.0805%" height="15" fill="rgb(251,147,42)" fg:x="306" fg:w="1"/><text x="24.8679%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="24.6179%" y="645" width="0.0805%" height="15" fill="rgb(208,173,10)" fg:x="306" fg:w="1"/><text x="24.8679%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="24.6179%" y="629" width="0.0805%" height="15" fill="rgb(246,225,4)" fg:x="306" fg:w="1"/><text x="24.8679%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="24.6179%" y="613" width="0.0805%" height="15" fill="rgb(248,102,6)" fg:x="306" fg:w="1"/><text x="24.8679%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="24.6179%" y="597" width="0.0805%" height="15" fill="rgb(232,6,21)" fg:x="306" fg:w="1"/><text x="24.8679%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="24.6179%" y="581" width="0.0805%" height="15" fill="rgb(221,179,22)" fg:x="306" fg:w="1"/><text x="24.8679%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="24.6179%" y="565" width="0.0805%" height="15" fill="rgb(252,50,20)" fg:x="306" fg:w="1"/><text x="24.8679%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="24.6179%" y="549" width="0.0805%" height="15" fill="rgb(222,56,38)" fg:x="306" fg:w="1"/><text x="24.8679%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="24.6179%" y="533" width="0.0805%" height="15" fill="rgb(206,193,29)" fg:x="306" fg:w="1"/><text x="24.8679%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="24.6179%" y="517" width="0.0805%" height="15" fill="rgb(239,192,45)" fg:x="306" fg:w="1"/><text x="24.8679%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.6179%" y="501" width="0.0805%" height="15" fill="rgb(254,18,36)" fg:x="306" fg:w="1"/><text x="24.8679%" y="511.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (3 samples, 0.24%)</title><rect x="24.5374%" y="693" width="0.2414%" height="15" fill="rgb(221,127,11)" fg:x="305" fg:w="3"/><text x="24.7874%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.6983%" y="677" width="0.0805%" height="15" fill="rgb(234,146,35)" fg:x="307" fg:w="1"/><text x="24.9483%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="24.7788%" y="661" width="0.0805%" height="15" fill="rgb(254,201,37)" fg:x="308" fg:w="1"/><text x="25.0288%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="24.7788%" y="645" width="0.0805%" height="15" fill="rgb(211,202,23)" fg:x="308" fg:w="1"/><text x="25.0288%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="24.7788%" y="629" width="0.0805%" height="15" fill="rgb(237,91,2)" fg:x="308" fg:w="1"/><text x="25.0288%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="24.7788%" y="613" width="0.0805%" height="15" fill="rgb(226,228,36)" fg:x="308" fg:w="1"/><text x="25.0288%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="24.7788%" y="597" width="0.0805%" height="15" fill="rgb(213,63,50)" fg:x="308" fg:w="1"/><text x="25.0288%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="24.7788%" y="581" width="0.0805%" height="15" fill="rgb(235,194,19)" fg:x="308" fg:w="1"/><text x="25.0288%" y="591.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="24.7788%" y="565" width="0.0805%" height="15" fill="rgb(207,204,18)" fg:x="308" fg:w="1"/><text x="25.0288%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="24.7788%" y="549" width="0.0805%" height="15" fill="rgb(248,8,7)" fg:x="308" fg:w="1"/><text x="25.0288%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="24.8592%" y="661" width="0.0805%" height="15" fill="rgb(223,145,47)" fg:x="309" fg:w="1"/><text x="25.1092%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="24.8592%" y="645" width="0.0805%" height="15" fill="rgb(228,84,11)" fg:x="309" fg:w="1"/><text x="25.1092%" y="655.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="24.9397%" y="661" width="0.1609%" height="15" fill="rgb(218,76,45)" fg:x="310" fg:w="2"/><text x="25.1897%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="24.9397%" y="645" width="0.1609%" height="15" fill="rgb(223,80,15)" fg:x="310" fg:w="2"/><text x="25.1897%" y="655.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="25.0201%" y="629" width="0.0805%" height="15" fill="rgb(219,218,33)" fg:x="311" fg:w="1"/><text x="25.2701%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="25.1006%" y="581" width="0.1609%" height="15" fill="rgb(208,51,11)" fg:x="312" fg:w="2"/><text x="25.3506%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="25.1006%" y="565" width="0.1609%" height="15" fill="rgb(229,165,39)" fg:x="312" fg:w="2"/><text x="25.3506%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="25.1006%" y="549" width="0.1609%" height="15" fill="rgb(241,100,24)" fg:x="312" fg:w="2"/><text x="25.3506%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="25.1006%" y="533" width="0.1609%" height="15" fill="rgb(228,14,23)" fg:x="312" fg:w="2"/><text x="25.3506%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="25.1006%" y="517" width="0.1609%" height="15" fill="rgb(247,116,52)" fg:x="312" fg:w="2"/><text x="25.3506%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="25.1006%" y="501" width="0.1609%" height="15" fill="rgb(216,149,33)" fg:x="312" fg:w="2"/><text x="25.3506%" y="511.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="25.1006%" y="485" width="0.1609%" height="15" fill="rgb(238,142,29)" fg:x="312" fg:w="2"/><text x="25.3506%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="25.1006%" y="597" width="0.2414%" height="15" fill="rgb(224,83,40)" fg:x="312" fg:w="3"/><text x="25.3506%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="25.2615%" y="581" width="0.0805%" height="15" fill="rgb(234,165,11)" fg:x="314" fg:w="1"/><text x="25.5115%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="25.2615%" y="565" width="0.0805%" height="15" fill="rgb(215,96,23)" fg:x="314" fg:w="1"/><text x="25.5115%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.2615%" y="549" width="0.0805%" height="15" fill="rgb(233,179,26)" fg:x="314" fg:w="1"/><text x="25.5115%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="25.3419%" y="581" width="0.1609%" height="15" fill="rgb(225,129,33)" fg:x="315" fg:w="2"/><text x="25.5919%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="25.4224%" y="565" width="0.0805%" height="15" fill="rgb(237,49,13)" fg:x="316" fg:w="1"/><text x="25.6724%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="25.5028%" y="533" width="0.1609%" height="15" fill="rgb(211,3,31)" fg:x="317" fg:w="2"/><text x="25.7528%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="25.5028%" y="517" width="0.1609%" height="15" fill="rgb(216,152,19)" fg:x="317" fg:w="2"/><text x="25.7528%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="25.5028%" y="501" width="0.1609%" height="15" fill="rgb(251,121,35)" fg:x="317" fg:w="2"/><text x="25.7528%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="25.5028%" y="549" width="0.2414%" height="15" fill="rgb(210,217,47)" fg:x="317" fg:w="3"/><text x="25.7528%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="25.6637%" y="533" width="0.0805%" height="15" fill="rgb(244,116,22)" fg:x="319" fg:w="1"/><text x="25.9137%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="25.5028%" y="565" width="0.3218%" height="15" fill="rgb(228,17,21)" fg:x="317" fg:w="4"/><text x="25.7528%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="25.7442%" y="549" width="0.0805%" height="15" fill="rgb(240,149,34)" fg:x="320" fg:w="1"/><text x="25.9942%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="25.7442%" y="533" width="0.0805%" height="15" fill="rgb(208,125,47)" fg:x="320" fg:w="1"/><text x="25.9942%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="25.7442%" y="517" width="0.0805%" height="15" fill="rgb(249,186,39)" fg:x="320" fg:w="1"/><text x="25.9942%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="25.8246%" y="565" width="0.2414%" height="15" fill="rgb(240,220,33)" fg:x="321" fg:w="3"/><text x="26.0746%" y="575.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="25.8246%" y="549" width="0.2414%" height="15" fill="rgb(243,110,23)" fg:x="321" fg:w="3"/><text x="26.0746%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="25.9051%" y="533" width="0.1609%" height="15" fill="rgb(219,163,46)" fg:x="322" fg:w="2"/><text x="26.1551%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.9855%" y="517" width="0.0805%" height="15" fill="rgb(216,126,30)" fg:x="323" fg:w="1"/><text x="26.2355%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="26.0660%" y="565" width="0.0805%" height="15" fill="rgb(208,139,11)" fg:x="324" fg:w="1"/><text x="26.3160%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="26.0660%" y="549" width="0.0805%" height="15" fill="rgb(213,118,36)" fg:x="324" fg:w="1"/><text x="26.3160%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.72%)</title><rect x="25.5028%" y="581" width="0.7241%" height="15" fill="rgb(226,43,17)" fg:x="317" fg:w="9"/><text x="25.7528%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="26.1464%" y="565" width="0.0805%" height="15" fill="rgb(254,217,4)" fg:x="325" fg:w="1"/><text x="26.3964%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="26.1464%" y="549" width="0.0805%" height="15" fill="rgb(210,134,47)" fg:x="325" fg:w="1"/><text x="26.3964%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="26.1464%" y="533" width="0.0805%" height="15" fill="rgb(237,24,49)" fg:x="325" fg:w="1"/><text x="26.3964%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (15 samples, 1.21%)</title><rect x="25.1006%" y="613" width="1.2068%" height="15" fill="rgb(251,39,46)" fg:x="312" fg:w="15"/><text x="25.3506%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.97%)</title><rect x="25.3419%" y="597" width="0.9654%" height="15" fill="rgb(251,220,3)" fg:x="315" fg:w="12"/><text x="25.5919%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="26.2269%" y="581" width="0.0805%" height="15" fill="rgb(228,105,12)" fg:x="326" fg:w="1"/><text x="26.4769%" y="591.50"></text></g><g><title>burrow_bon::perms::find_acls (1 samples, 0.08%)</title><rect x="26.3073%" y="613" width="0.0805%" height="15" fill="rgb(215,196,1)" fg:x="327" fg:w="1"/><text x="26.5573%" y="623.50"></text></g><g><title>burrow_bon::scour::scour (1 samples, 0.08%)</title><rect x="26.3073%" y="597" width="0.0805%" height="15" fill="rgb(214,33,39)" fg:x="327" fg:w="1"/><text x="26.5573%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.4682%" y="565" width="0.0805%" height="15" fill="rgb(220,19,52)" fg:x="329" fg:w="1"/><text x="26.7182%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="26.5487%" y="565" width="0.1609%" height="15" fill="rgb(221,78,38)" fg:x="330" fg:w="2"/><text x="26.7987%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.6291%" y="549" width="0.0805%" height="15" fill="rgb(253,30,16)" fg:x="331" fg:w="1"/><text x="26.8791%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="26.7096%" y="533" width="0.0805%" height="15" fill="rgb(242,65,0)" fg:x="332" fg:w="1"/><text x="26.9596%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.7096%" y="517" width="0.0805%" height="15" fill="rgb(235,201,12)" fg:x="332" fg:w="1"/><text x="26.9596%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="26.3878%" y="613" width="0.5632%" height="15" fill="rgb(233,161,9)" fg:x="328" fg:w="7"/><text x="26.6378%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.56%)</title><rect x="26.3878%" y="597" width="0.5632%" height="15" fill="rgb(241,207,41)" fg:x="328" fg:w="7"/><text x="26.6378%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="26.3878%" y="581" width="0.5632%" height="15" fill="rgb(212,69,46)" fg:x="328" fg:w="7"/><text x="26.6378%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="26.7096%" y="565" width="0.2414%" height="15" fill="rgb(239,69,45)" fg:x="332" fg:w="3"/><text x="26.9596%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="26.7096%" y="549" width="0.2414%" height="15" fill="rgb(242,117,48)" fg:x="332" fg:w="3"/><text x="26.9596%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="26.7900%" y="533" width="0.1609%" height="15" fill="rgb(228,41,36)" fg:x="333" fg:w="2"/><text x="27.0400%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="26.7900%" y="517" width="0.1609%" height="15" fill="rgb(212,3,32)" fg:x="333" fg:w="2"/><text x="27.0400%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.8705%" y="501" width="0.0805%" height="15" fill="rgb(233,41,49)" fg:x="334" fg:w="1"/><text x="27.1205%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.0314%" y="565" width="0.0805%" height="15" fill="rgb(252,170,49)" fg:x="336" fg:w="1"/><text x="27.2814%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="27.1118%" y="565" width="0.0805%" height="15" fill="rgb(229,53,26)" fg:x="337" fg:w="1"/><text x="27.3618%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="27.1923%" y="549" width="0.0805%" height="15" fill="rgb(217,157,12)" fg:x="338" fg:w="1"/><text x="27.4423%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.1923%" y="533" width="0.0805%" height="15" fill="rgb(227,17,9)" fg:x="338" fg:w="1"/><text x="27.4423%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.4336%" y="533" width="0.0805%" height="15" fill="rgb(218,84,12)" fg:x="341" fg:w="1"/><text x="27.6836%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="27.5141%" y="517" width="0.0805%" height="15" fill="rgb(212,79,24)" fg:x="342" fg:w="1"/><text x="27.7641%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="27.5945%" y="517" width="0.0805%" height="15" fill="rgb(217,222,37)" fg:x="343" fg:w="1"/><text x="27.8445%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="27.5945%" y="501" width="0.0805%" height="15" fill="rgb(246,208,8)" fg:x="343" fg:w="1"/><text x="27.8445%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.5945%" y="485" width="0.0805%" height="15" fill="rgb(244,133,10)" fg:x="343" fg:w="1"/><text x="27.8445%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.80%)</title><rect x="26.9509%" y="581" width="0.8045%" height="15" fill="rgb(209,219,41)" fg:x="335" fg:w="10"/><text x="27.2009%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="27.1923%" y="565" width="0.5632%" height="15" fill="rgb(253,175,45)" fg:x="338" fg:w="7"/><text x="27.4423%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="27.2727%" y="549" width="0.4827%" height="15" fill="rgb(235,100,37)" fg:x="339" fg:w="6"/><text x="27.5227%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="27.5141%" y="533" width="0.2414%" height="15" fill="rgb(225,87,19)" fg:x="342" fg:w="3"/><text x="27.7641%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="27.6750%" y="517" width="0.0805%" height="15" fill="rgb(217,152,17)" fg:x="344" fg:w="1"/><text x="27.9250%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="27.6750%" y="501" width="0.0805%" height="15" fill="rgb(235,72,13)" fg:x="344" fg:w="1"/><text x="27.9250%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="27.7554%" y="581" width="0.1609%" height="15" fill="rgb(233,140,18)" fg:x="345" fg:w="2"/><text x="28.0054%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.8359%" y="565" width="0.0805%" height="15" fill="rgb(207,212,28)" fg:x="346" fg:w="1"/><text x="28.0859%" y="575.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPaths as core::convert::Into&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::into (1 samples, 0.08%)</title><rect x="27.9163%" y="581" width="0.0805%" height="15" fill="rgb(220,130,25)" fg:x="347" fg:w="1"/><text x="28.1663%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.9968%" y="581" width="0.0805%" height="15" fill="rgb(205,55,34)" fg:x="348" fg:w="1"/><text x="28.2468%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;treediff::tools::record::Recorder&lt;treediff::value::shared::Key,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="28.0772%" y="581" width="0.0805%" height="15" fill="rgb(237,54,35)" fg:x="349" fg:w="1"/><text x="28.3272%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="28.1577%" y="549" width="0.1609%" height="15" fill="rgb(208,67,23)" fg:x="350" fg:w="2"/><text x="28.4077%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="28.1577%" y="533" width="0.1609%" height="15" fill="rgb(206,207,50)" fg:x="350" fg:w="2"/><text x="28.4077%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="28.2381%" y="517" width="0.0805%" height="15" fill="rgb(213,211,42)" fg:x="351" fg:w="1"/><text x="28.4881%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="28.2381%" y="501" width="0.0805%" height="15" fill="rgb(252,197,50)" fg:x="351" fg:w="1"/><text x="28.4881%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="28.2381%" y="485" width="0.0805%" height="15" fill="rgb(251,211,41)" fg:x="351" fg:w="1"/><text x="28.4881%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="28.1577%" y="565" width="0.2414%" height="15" fill="rgb(229,211,5)" fg:x="350" fg:w="3"/><text x="28.4077%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="28.3186%" y="549" width="0.0805%" height="15" fill="rgb(239,36,31)" fg:x="352" fg:w="1"/><text x="28.5686%" y="559.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (21 samples, 1.69%)</title><rect x="26.9509%" y="597" width="1.6895%" height="15" fill="rgb(248,67,31)" fg:x="335" fg:w="21"/><text x="27.2009%" y="607.50"></text></g><g><title>treediff::diff::diff (6 samples, 0.48%)</title><rect x="28.1577%" y="581" width="0.4827%" height="15" fill="rgb(249,55,44)" fg:x="350" fg:w="6"/><text x="28.4077%" y="591.50"></text></g><g><title>treediff::tools::record::mk (3 samples, 0.24%)</title><rect x="28.3990%" y="565" width="0.2414%" height="15" fill="rgb(216,82,12)" fg:x="353" fg:w="3"/><text x="28.6490%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.9622%" y="565" width="0.0805%" height="15" fill="rgb(242,174,1)" fg:x="360" fg:w="1"/><text x="29.2122%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="29.0426%" y="565" width="0.2414%" height="15" fill="rgb(208,120,29)" fg:x="361" fg:w="3"/><text x="29.2926%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="29.1231%" y="549" width="0.1609%" height="15" fill="rgb(221,105,43)" fg:x="362" fg:w="2"/><text x="29.3731%" y="559.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="29.2840%" y="565" width="0.0805%" height="15" fill="rgb(234,124,22)" fg:x="364" fg:w="1"/><text x="29.5340%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="29.5253%" y="533" width="0.0805%" height="15" fill="rgb(212,23,30)" fg:x="367" fg:w="1"/><text x="29.7753%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.6862%" y="517" width="0.0805%" height="15" fill="rgb(219,122,53)" fg:x="369" fg:w="1"/><text x="29.9362%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.6862%" y="501" width="0.0805%" height="15" fill="rgb(248,84,24)" fg:x="369" fg:w="1"/><text x="29.9362%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.8471%" y="469" width="0.0805%" height="15" fill="rgb(245,115,18)" fg:x="371" fg:w="1"/><text x="30.0971%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.8471%" y="453" width="0.0805%" height="15" fill="rgb(227,176,51)" fg:x="371" fg:w="1"/><text x="30.0971%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="30.0080%" y="453" width="0.0805%" height="15" fill="rgb(229,63,42)" fg:x="373" fg:w="1"/><text x="30.2580%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="30.0080%" y="437" width="0.0805%" height="15" fill="rgb(247,202,24)" fg:x="373" fg:w="1"/><text x="30.2580%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="30.0080%" y="421" width="0.0805%" height="15" fill="rgb(244,173,20)" fg:x="373" fg:w="1"/><text x="30.2580%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="30.0080%" y="405" width="0.0805%" height="15" fill="rgb(242,81,47)" fg:x="373" fg:w="1"/><text x="30.2580%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.0080%" y="389" width="0.0805%" height="15" fill="rgb(231,185,54)" fg:x="373" fg:w="1"/><text x="30.2580%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="29.8471%" y="485" width="0.3218%" height="15" fill="rgb(243,55,32)" fg:x="371" fg:w="4"/><text x="30.0971%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="29.9276%" y="469" width="0.2414%" height="15" fill="rgb(208,167,19)" fg:x="372" fg:w="3"/><text x="30.1776%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.0885%" y="453" width="0.0805%" height="15" fill="rgb(231,72,35)" fg:x="374" fg:w="1"/><text x="30.3385%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (6 samples, 0.48%)</title><rect x="29.7667%" y="517" width="0.4827%" height="15" fill="rgb(250,173,51)" fg:x="370" fg:w="6"/><text x="30.0167%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.48%)</title><rect x="29.7667%" y="501" width="0.4827%" height="15" fill="rgb(209,5,22)" fg:x="370" fg:w="6"/><text x="30.0167%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.1689%" y="485" width="0.0805%" height="15" fill="rgb(250,174,19)" fg:x="375" fg:w="1"/><text x="30.4189%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="30.3298%" y="501" width="0.0805%" height="15" fill="rgb(217,3,49)" fg:x="377" fg:w="1"/><text x="30.5798%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4 samples, 0.32%)</title><rect x="30.5712%" y="485" width="0.3218%" height="15" fill="rgb(218,225,5)" fg:x="380" fg:w="4"/><text x="30.8212%" y="495.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="30.7321%" y="469" width="0.1609%" height="15" fill="rgb(236,89,11)" fg:x="382" fg:w="2"/><text x="30.9821%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.64%)</title><rect x="30.4103%" y="501" width="0.6436%" height="15" fill="rgb(206,33,28)" fg:x="378" fg:w="8"/><text x="30.6603%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="30.8930%" y="485" width="0.1609%" height="15" fill="rgb(241,56,42)" fg:x="384" fg:w="2"/><text x="31.1430%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="30.8930%" y="469" width="0.1609%" height="15" fill="rgb(222,44,11)" fg:x="384" fg:w="2"/><text x="31.1430%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="30.9735%" y="453" width="0.0805%" height="15" fill="rgb(234,111,20)" fg:x="385" fg:w="1"/><text x="31.2235%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.9735%" y="437" width="0.0805%" height="15" fill="rgb(237,77,6)" fg:x="385" fg:w="1"/><text x="31.2235%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (20 samples, 1.61%)</title><rect x="29.6058%" y="533" width="1.6090%" height="15" fill="rgb(235,111,23)" fg:x="368" fg:w="20"/><text x="29.8558%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (12 samples, 0.97%)</title><rect x="30.2494%" y="517" width="0.9654%" height="15" fill="rgb(251,135,29)" fg:x="376" fg:w="12"/><text x="30.4994%" y="527.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="31.0539%" y="501" width="0.1609%" height="15" fill="rgb(217,57,1)" fg:x="386" fg:w="2"/><text x="31.3039%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (24 samples, 1.93%)</title><rect x="29.4449%" y="549" width="1.9308%" height="15" fill="rgb(249,119,31)" fg:x="366" fg:w="24"/><text x="29.6949%" y="559.50">&lt;..</text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="31.2148%" y="533" width="0.1609%" height="15" fill="rgb(233,164,33)" fg:x="388" fg:w="2"/><text x="31.4648%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.2953%" y="517" width="0.0805%" height="15" fill="rgb(250,217,43)" fg:x="389" fg:w="1"/><text x="31.5453%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (36 samples, 2.90%)</title><rect x="28.6404%" y="597" width="2.8962%" height="15" fill="rgb(232,154,50)" fg:x="356" fg:w="36"/><text x="28.8904%" y="607.50">ke..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (33 samples, 2.65%)</title><rect x="28.8817%" y="581" width="2.6549%" height="15" fill="rgb(227,190,8)" fg:x="359" fg:w="33"/><text x="29.1317%" y="591.50">&lt;s..</text></g><g><title>serde::ser::Serializer::collect_map (27 samples, 2.17%)</title><rect x="29.3644%" y="565" width="2.1722%" height="15" fill="rgb(209,217,32)" fg:x="365" fg:w="27"/><text x="29.6144%" y="575.50">s..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="31.3757%" y="549" width="0.1609%" height="15" fill="rgb(243,203,50)" fg:x="390" fg:w="2"/><text x="31.6257%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.4562%" y="533" width="0.0805%" height="15" fill="rgb(232,152,27)" fg:x="391" fg:w="1"/><text x="31.7062%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="32.0193%" y="453" width="0.0805%" height="15" fill="rgb(240,34,29)" fg:x="398" fg:w="1"/><text x="32.2693%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="32.1802%" y="437" width="0.0805%" height="15" fill="rgb(215,185,52)" fg:x="400" fg:w="1"/><text x="32.4302%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="32.1802%" y="421" width="0.0805%" height="15" fill="rgb(240,89,49)" fg:x="400" fg:w="1"/><text x="32.4302%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.1802%" y="405" width="0.0805%" height="15" fill="rgb(225,12,52)" fg:x="400" fg:w="1"/><text x="32.4302%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.1802%" y="389" width="0.0805%" height="15" fill="rgb(239,128,45)" fg:x="400" fg:w="1"/><text x="32.4302%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="31.9389%" y="469" width="0.4023%" height="15" fill="rgb(211,78,47)" fg:x="397" fg:w="5"/><text x="32.1889%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="32.0998%" y="453" width="0.2414%" height="15" fill="rgb(232,31,21)" fg:x="399" fg:w="3"/><text x="32.3498%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="32.2607%" y="437" width="0.0805%" height="15" fill="rgb(222,168,14)" fg:x="401" fg:w="1"/><text x="32.5107%" y="447.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="32.2607%" y="421" width="0.0805%" height="15" fill="rgb(209,128,24)" fg:x="401" fg:w="1"/><text x="32.5107%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="32.3411%" y="469" width="0.0805%" height="15" fill="rgb(249,35,13)" fg:x="402" fg:w="1"/><text x="32.5911%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.80%)</title><rect x="31.6975%" y="501" width="0.8045%" height="15" fill="rgb(218,7,2)" fg:x="394" fg:w="10"/><text x="31.9475%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 0.72%)</title><rect x="31.7780%" y="485" width="0.7241%" height="15" fill="rgb(238,107,27)" fg:x="395" fg:w="9"/><text x="32.0280%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.4216%" y="469" width="0.0805%" height="15" fill="rgb(217,88,38)" fg:x="403" fg:w="1"/><text x="32.6716%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.4216%" y="453" width="0.0805%" height="15" fill="rgb(230,207,0)" fg:x="403" fg:w="1"/><text x="32.6716%" y="463.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="32.5825%" y="485" width="0.0805%" height="15" fill="rgb(249,64,54)" fg:x="405" fg:w="1"/><text x="32.8325%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (17 samples, 1.37%)</title><rect x="31.6171%" y="533" width="1.3677%" height="15" fill="rgb(231,7,11)" fg:x="393" fg:w="17"/><text x="31.8671%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (16 samples, 1.29%)</title><rect x="31.6975%" y="517" width="1.2872%" height="15" fill="rgb(205,149,21)" fg:x="394" fg:w="16"/><text x="31.9475%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (6 samples, 0.48%)</title><rect x="32.5020%" y="501" width="0.4827%" height="15" fill="rgb(215,126,34)" fg:x="404" fg:w="6"/><text x="32.7520%" y="511.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="32.6629%" y="485" width="0.3218%" height="15" fill="rgb(241,132,45)" fg:x="406" fg:w="4"/><text x="32.9129%" y="495.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="33.0652%" y="517" width="0.0805%" height="15" fill="rgb(252,69,32)" fg:x="411" fg:w="1"/><text x="33.3152%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.24%)</title><rect x="32.9847%" y="533" width="0.2414%" height="15" fill="rgb(232,204,19)" fg:x="410" fg:w="3"/><text x="33.2347%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.1456%" y="517" width="0.0805%" height="15" fill="rgb(249,15,47)" fg:x="412" fg:w="1"/><text x="33.3956%" y="527.50"></text></g><g><title>engine::session::state::State::close (107 samples, 8.61%)</title><rect x="24.7788%" y="693" width="8.6082%" height="15" fill="rgb(209,227,23)" fg:x="308" fg:w="107"/><text x="25.0288%" y="703.50">engine::sess..</text></g><g><title>engine::session::state::State::flush_entities (107 samples, 8.61%)</title><rect x="24.7788%" y="677" width="8.6082%" height="15" fill="rgb(248,92,24)" fg:x="308" fg:w="107"/><text x="25.0288%" y="687.50">engine::sess..</text></g><g><title>core::iter::adapters::try_process (103 samples, 8.29%)</title><rect x="25.1006%" y="661" width="8.2864%" height="15" fill="rgb(247,59,2)" fg:x="312" fg:w="103"/><text x="25.3506%" y="671.50">core::iter::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (103 samples, 8.29%)</title><rect x="25.1006%" y="645" width="8.2864%" height="15" fill="rgb(221,30,5)" fg:x="312" fg:w="103"/><text x="25.3506%" y="655.50">&lt;alloc::vec:..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (103 samples, 8.29%)</title><rect x="25.1006%" y="629" width="8.2864%" height="15" fill="rgb(208,108,53)" fg:x="312" fg:w="103"/><text x="25.3506%" y="639.50">engine::sess..</text></g><g><title>kernel::model::any_entity_changes (80 samples, 6.44%)</title><rect x="26.9509%" y="613" width="6.4360%" height="15" fill="rgb(211,183,26)" fg:x="335" fg:w="80"/><text x="27.2009%" y="623.50">kernel::..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (23 samples, 1.85%)</title><rect x="31.5366%" y="597" width="1.8504%" height="15" fill="rgb(232,132,4)" fg:x="392" fg:w="23"/><text x="31.7866%" y="607.50">s..</text></g><g><title>serde_json::de::from_trait (23 samples, 1.85%)</title><rect x="31.5366%" y="581" width="1.8504%" height="15" fill="rgb(253,128,37)" fg:x="392" fg:w="23"/><text x="31.7866%" y="591.50">s..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (23 samples, 1.85%)</title><rect x="31.5366%" y="565" width="1.8504%" height="15" fill="rgb(221,58,24)" fg:x="392" fg:w="23"/><text x="31.7866%" y="575.50">&lt;..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (23 samples, 1.85%)</title><rect x="31.5366%" y="549" width="1.8504%" height="15" fill="rgb(230,54,45)" fg:x="392" fg:w="23"/><text x="31.7866%" y="559.50">&lt;..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="33.2261%" y="533" width="0.1609%" height="15" fill="rgb(254,21,18)" fg:x="413" fg:w="2"/><text x="33.4761%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="33.3065%" y="517" width="0.0805%" height="15" fill="rgb(221,108,0)" fg:x="414" fg:w="1"/><text x="33.5565%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.3065%" y="501" width="0.0805%" height="15" fill="rgb(206,95,1)" fg:x="414" fg:w="1"/><text x="33.5565%" y="511.50"></text></g><g><title>kernel::plugins::SessionPlugins::stop (1 samples, 0.08%)</title><rect x="33.3870%" y="693" width="0.0805%" height="15" fill="rgb(237,52,5)" fg:x="415" fg:w="1"/><text x="33.6370%" y="703.50"></text></g><g><title>engine::session::Session::close (113 samples, 9.09%)</title><rect x="24.4570%" y="709" width="9.0909%" height="15" fill="rgb(218,150,34)" fg:x="304" fg:w="113"/><text x="24.7070%" y="719.50">engine::sessi..</text></g><g><title>std::time::Instant::elapsed (1 samples, 0.08%)</title><rect x="33.4674%" y="693" width="0.0805%" height="15" fill="rgb(235,194,28)" fg:x="416" fg:w="1"/><text x="33.7174%" y="703.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.08%)</title><rect x="33.4674%" y="677" width="0.0805%" height="15" fill="rgb(245,92,18)" fg:x="416" fg:w="1"/><text x="33.7174%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.08%)</title><rect x="33.4674%" y="661" width="0.0805%" height="15" fill="rgb(253,203,53)" fg:x="416" fg:w="1"/><text x="33.7174%" y="671.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="33.4674%" y="645" width="0.0805%" height="15" fill="rgb(249,185,47)" fg:x="416" fg:w="1"/><text x="33.7174%" y="655.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="33.4674%" y="629" width="0.0805%" height="15" fill="rgb(252,194,52)" fg:x="416" fg:w="1"/><text x="33.7174%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.6283%" y="677" width="0.0805%" height="15" fill="rgb(210,53,36)" fg:x="418" fg:w="1"/><text x="33.8783%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::base::DomainError&gt; (1 samples, 0.08%)</title><rect x="33.7088%" y="677" width="0.0805%" height="15" fill="rgb(237,37,25)" fg:x="419" fg:w="1"/><text x="33.9588%" y="687.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="33.8697%" y="517" width="0.0805%" height="15" fill="rgb(242,116,27)" fg:x="421" fg:w="1"/><text x="34.1197%" y="527.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="33.8697%" y="501" width="0.0805%" height="15" fill="rgb(213,185,26)" fg:x="421" fg:w="1"/><text x="34.1197%" y="511.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (1 samples, 0.08%)</title><rect x="33.8697%" y="485" width="0.0805%" height="15" fill="rgb(225,204,8)" fg:x="421" fg:w="1"/><text x="34.1197%" y="495.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="33.8697%" y="469" width="0.0805%" height="15" fill="rgb(254,111,37)" fg:x="421" fg:w="1"/><text x="34.1197%" y="479.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (1 samples, 0.08%)</title><rect x="33.8697%" y="453" width="0.0805%" height="15" fill="rgb(242,35,9)" fg:x="421" fg:w="1"/><text x="34.1197%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="33.8697%" y="437" width="0.0805%" height="15" fill="rgb(232,138,49)" fg:x="421" fg:w="1"/><text x="34.1197%" y="447.50"></text></g><g><title>alloc::fmt::format::format_inner (4 samples, 0.32%)</title><rect x="33.7892%" y="661" width="0.3218%" height="15" fill="rgb(247,56,4)" fg:x="420" fg:w="4"/><text x="34.0392%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (4 samples, 0.32%)</title><rect x="33.7892%" y="645" width="0.3218%" height="15" fill="rgb(226,179,17)" fg:x="420" fg:w="4"/><text x="34.0392%" y="655.50"></text></g><g><title>core::fmt::write (4 samples, 0.32%)</title><rect x="33.7892%" y="629" width="0.3218%" height="15" fill="rgb(216,163,45)" fg:x="420" fg:w="4"/><text x="34.0392%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (4 samples, 0.32%)</title><rect x="33.7892%" y="613" width="0.3218%" height="15" fill="rgb(211,157,3)" fg:x="420" fg:w="4"/><text x="34.0392%" y="623.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (4 samples, 0.32%)</title><rect x="33.7892%" y="597" width="0.3218%" height="15" fill="rgb(234,44,20)" fg:x="420" fg:w="4"/><text x="34.0392%" y="607.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (4 samples, 0.32%)</title><rect x="33.7892%" y="581" width="0.3218%" height="15" fill="rgb(254,138,23)" fg:x="420" fg:w="4"/><text x="34.0392%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (4 samples, 0.32%)</title><rect x="33.7892%" y="565" width="0.3218%" height="15" fill="rgb(206,119,39)" fg:x="420" fg:w="4"/><text x="34.0392%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (3 samples, 0.24%)</title><rect x="33.8697%" y="549" width="0.2414%" height="15" fill="rgb(231,105,52)" fg:x="421" fg:w="3"/><text x="34.1197%" y="559.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (3 samples, 0.24%)</title><rect x="33.8697%" y="533" width="0.2414%" height="15" fill="rgb(250,20,5)" fg:x="421" fg:w="3"/><text x="34.1197%" y="543.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="33.9501%" y="517" width="0.1609%" height="15" fill="rgb(215,198,30)" fg:x="422" fg:w="2"/><text x="34.2001%" y="527.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (2 samples, 0.16%)</title><rect x="33.9501%" y="501" width="0.1609%" height="15" fill="rgb(246,142,8)" fg:x="422" fg:w="2"/><text x="34.2001%" y="511.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (2 samples, 0.16%)</title><rect x="33.9501%" y="485" width="0.1609%" height="15" fill="rgb(243,26,38)" fg:x="422" fg:w="2"/><text x="34.2001%" y="495.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (2 samples, 0.16%)</title><rect x="33.9501%" y="469" width="0.1609%" height="15" fill="rgb(205,133,28)" fg:x="422" fg:w="2"/><text x="34.2001%" y="479.50"></text></g><g><title>core::fmt::Formatter::write_str (2 samples, 0.16%)</title><rect x="33.9501%" y="453" width="0.1609%" height="15" fill="rgb(212,34,0)" fg:x="422" fg:w="2"/><text x="34.2001%" y="463.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="33.9501%" y="437" width="0.1609%" height="15" fill="rgb(251,226,22)" fg:x="422" fg:w="2"/><text x="34.2001%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="34.0306%" y="421" width="0.0805%" height="15" fill="rgb(252,119,9)" fg:x="423" fg:w="1"/><text x="34.2806%" y="431.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="34.0306%" y="405" width="0.0805%" height="15" fill="rgb(213,150,50)" fg:x="423" fg:w="1"/><text x="34.2806%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="34.0306%" y="389" width="0.0805%" height="15" fill="rgb(212,24,39)" fg:x="423" fg:w="1"/><text x="34.2806%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="34.0306%" y="373" width="0.0805%" height="15" fill="rgb(213,46,39)" fg:x="423" fg:w="1"/><text x="34.2806%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="34.0306%" y="357" width="0.0805%" height="15" fill="rgb(239,106,12)" fg:x="423" fg:w="1"/><text x="34.2806%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="34.0306%" y="341" width="0.0805%" height="15" fill="rgb(249,229,21)" fg:x="423" fg:w="1"/><text x="34.2806%" y="351.50"></text></g><g><title>chrono::offset::utc::Utc::now (1 samples, 0.08%)</title><rect x="34.1110%" y="645" width="0.0805%" height="15" fill="rgb(212,158,3)" fg:x="424" fg:w="1"/><text x="34.3610%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::logs::SessionSubscriber&gt; (1 samples, 0.08%)</title><rect x="34.1915%" y="645" width="0.0805%" height="15" fill="rgb(253,26,48)" fg:x="425" fg:w="1"/><text x="34.4415%" y="655.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (2 samples, 0.16%)</title><rect x="34.2719%" y="645" width="0.1609%" height="15" fill="rgb(238,178,20)" fg:x="426" fg:w="2"/><text x="34.5219%" y="655.50"></text></g><g><title>tracing_core::callsite::register_dispatch (2 samples, 0.16%)</title><rect x="34.2719%" y="629" width="0.1609%" height="15" fill="rgb(208,86,15)" fg:x="426" fg:w="2"/><text x="34.5219%" y="639.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (2 samples, 0.16%)</title><rect x="34.2719%" y="613" width="0.1609%" height="15" fill="rgb(239,42,53)" fg:x="426" fg:w="2"/><text x="34.5219%" y="623.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (2 samples, 0.16%)</title><rect x="34.2719%" y="597" width="0.1609%" height="15" fill="rgb(245,226,8)" fg:x="426" fg:w="2"/><text x="34.5219%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="34.4328%" y="517" width="0.0805%" height="15" fill="rgb(216,176,32)" fg:x="428" fg:w="1"/><text x="34.6828%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="34.4328%" y="501" width="0.0805%" height="15" fill="rgb(231,186,21)" fg:x="428" fg:w="1"/><text x="34.6828%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="34.4328%" y="485" width="0.0805%" height="15" fill="rgb(205,95,49)" fg:x="428" fg:w="1"/><text x="34.6828%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="34.4328%" y="469" width="0.0805%" height="15" fill="rgb(217,145,8)" fg:x="428" fg:w="1"/><text x="34.6828%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="34.4328%" y="453" width="0.0805%" height="15" fill="rgb(239,144,48)" fg:x="428" fg:w="1"/><text x="34.6828%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="34.4328%" y="437" width="0.0805%" height="15" fill="rgb(214,189,23)" fg:x="428" fg:w="1"/><text x="34.6828%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="34.4328%" y="421" width="0.0805%" height="15" fill="rgb(229,157,17)" fg:x="428" fg:w="1"/><text x="34.6828%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="34.4328%" y="405" width="0.0805%" height="15" fill="rgb(230,5,48)" fg:x="428" fg:w="1"/><text x="34.6828%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="34.4328%" y="389" width="0.0805%" height="15" fill="rgb(224,156,48)" fg:x="428" fg:w="1"/><text x="34.6828%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="34.4328%" y="373" width="0.0805%" height="15" fill="rgb(223,14,29)" fg:x="428" fg:w="1"/><text x="34.6828%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="34.4328%" y="357" width="0.0805%" height="15" fill="rgb(229,96,36)" fg:x="428" fg:w="1"/><text x="34.6828%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="34.4328%" y="341" width="0.0805%" height="15" fill="rgb(231,102,53)" fg:x="428" fg:w="1"/><text x="34.6828%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="34.4328%" y="325" width="0.0805%" height="15" fill="rgb(210,77,38)" fg:x="428" fg:w="1"/><text x="34.6828%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="34.4328%" y="533" width="0.1609%" height="15" fill="rgb(235,131,6)" fg:x="428" fg:w="2"/><text x="34.6828%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="34.5133%" y="517" width="0.0805%" height="15" fill="rgb(252,55,38)" fg:x="429" fg:w="1"/><text x="34.7633%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="34.5133%" y="501" width="0.0805%" height="15" fill="rgb(246,38,14)" fg:x="429" fg:w="1"/><text x="34.7633%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="34.5133%" y="485" width="0.0805%" height="15" fill="rgb(242,27,5)" fg:x="429" fg:w="1"/><text x="34.7633%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="34.5937%" y="469" width="0.0805%" height="15" fill="rgb(228,65,35)" fg:x="430" fg:w="1"/><text x="34.8437%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="34.5937%" y="453" width="0.0805%" height="15" fill="rgb(245,93,11)" fg:x="430" fg:w="1"/><text x="34.8437%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="34.5937%" y="437" width="0.0805%" height="15" fill="rgb(213,1,31)" fg:x="430" fg:w="1"/><text x="34.8437%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.5937%" y="421" width="0.0805%" height="15" fill="rgb(237,205,14)" fg:x="430" fg:w="1"/><text x="34.8437%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="34.6742%" y="421" width="0.0805%" height="15" fill="rgb(232,118,45)" fg:x="431" fg:w="1"/><text x="34.9242%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="34.7546%" y="309" width="0.0805%" height="15" fill="rgb(218,5,6)" fg:x="432" fg:w="1"/><text x="35.0046%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="34.7546%" y="293" width="0.0805%" height="15" fill="rgb(251,87,51)" fg:x="432" fg:w="1"/><text x="35.0046%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="34.7546%" y="277" width="0.0805%" height="15" fill="rgb(207,225,20)" fg:x="432" fg:w="1"/><text x="35.0046%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.7546%" y="261" width="0.0805%" height="15" fill="rgb(222,78,54)" fg:x="432" fg:w="1"/><text x="35.0046%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="34.7546%" y="341" width="0.1609%" height="15" fill="rgb(232,85,16)" fg:x="432" fg:w="2"/><text x="35.0046%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="34.7546%" y="325" width="0.1609%" height="15" fill="rgb(244,25,33)" fg:x="432" fg:w="2"/><text x="35.0046%" y="335.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="34.8351%" y="309" width="0.0805%" height="15" fill="rgb(233,24,36)" fg:x="433" fg:w="1"/><text x="35.0851%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="34.8351%" y="293" width="0.0805%" height="15" fill="rgb(253,49,54)" fg:x="433" fg:w="1"/><text x="35.0851%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="34.8351%" y="277" width="0.0805%" height="15" fill="rgb(245,12,22)" fg:x="433" fg:w="1"/><text x="35.0851%" y="287.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="34.8351%" y="261" width="0.0805%" height="15" fill="rgb(253,141,28)" fg:x="433" fg:w="1"/><text x="35.0851%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="34.8351%" y="245" width="0.0805%" height="15" fill="rgb(225,207,27)" fg:x="433" fg:w="1"/><text x="35.0851%" y="255.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="34.9155%" y="341" width="0.0805%" height="15" fill="rgb(220,84,2)" fg:x="434" fg:w="1"/><text x="35.1655%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="34.9155%" y="325" width="0.0805%" height="15" fill="rgb(224,37,37)" fg:x="434" fg:w="1"/><text x="35.1655%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="34.9155%" y="309" width="0.0805%" height="15" fill="rgb(220,143,18)" fg:x="434" fg:w="1"/><text x="35.1655%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="34.9155%" y="293" width="0.0805%" height="15" fill="rgb(210,88,33)" fg:x="434" fg:w="1"/><text x="35.1655%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="34.9155%" y="277" width="0.0805%" height="15" fill="rgb(219,87,51)" fg:x="434" fg:w="1"/><text x="35.1655%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="34.9155%" y="261" width="0.0805%" height="15" fill="rgb(211,7,35)" fg:x="434" fg:w="1"/><text x="35.1655%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="34.9155%" y="245" width="0.0805%" height="15" fill="rgb(232,77,2)" fg:x="434" fg:w="1"/><text x="35.1655%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.9155%" y="229" width="0.0805%" height="15" fill="rgb(249,94,25)" fg:x="434" fg:w="1"/><text x="35.1655%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="34.7546%" y="373" width="0.3218%" height="15" fill="rgb(215,112,2)" fg:x="432" fg:w="4"/><text x="35.0046%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="34.7546%" y="357" width="0.3218%" height="15" fill="rgb(226,115,48)" fg:x="432" fg:w="4"/><text x="35.0046%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="34.9960%" y="341" width="0.0805%" height="15" fill="rgb(249,196,10)" fg:x="435" fg:w="1"/><text x="35.2460%" y="351.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="34.9960%" y="325" width="0.0805%" height="15" fill="rgb(237,109,14)" fg:x="435" fg:w="1"/><text x="35.2460%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.40%)</title><rect x="34.7546%" y="421" width="0.4023%" height="15" fill="rgb(217,103,53)" fg:x="432" fg:w="5"/><text x="35.0046%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="34.7546%" y="405" width="0.4023%" height="15" fill="rgb(244,137,9)" fg:x="432" fg:w="5"/><text x="35.0046%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (5 samples, 0.40%)</title><rect x="34.7546%" y="389" width="0.4023%" height="15" fill="rgb(227,201,3)" fg:x="432" fg:w="5"/><text x="35.0046%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="35.0764%" y="373" width="0.0805%" height="15" fill="rgb(243,94,6)" fg:x="436" fg:w="1"/><text x="35.3264%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="35.0764%" y="357" width="0.0805%" height="15" fill="rgb(235,118,5)" fg:x="436" fg:w="1"/><text x="35.3264%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="35.0764%" y="341" width="0.0805%" height="15" fill="rgb(247,10,30)" fg:x="436" fg:w="1"/><text x="35.3264%" y="351.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="35.0764%" y="325" width="0.0805%" height="15" fill="rgb(205,26,28)" fg:x="436" fg:w="1"/><text x="35.3264%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="35.0764%" y="309" width="0.0805%" height="15" fill="rgb(206,99,35)" fg:x="436" fg:w="1"/><text x="35.3264%" y="319.50"></text></g><g><title>kernel::model::entity::Entity::from_value (8 samples, 0.64%)</title><rect x="34.6742%" y="469" width="0.6436%" height="15" fill="rgb(238,130,40)" fg:x="431" fg:w="8"/><text x="34.9242%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (8 samples, 0.64%)</title><rect x="34.6742%" y="453" width="0.6436%" height="15" fill="rgb(224,126,31)" fg:x="431" fg:w="8"/><text x="34.9242%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.64%)</title><rect x="34.6742%" y="437" width="0.6436%" height="15" fill="rgb(254,105,17)" fg:x="431" fg:w="8"/><text x="34.9242%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="35.1569%" y="421" width="0.1609%" height="15" fill="rgb(216,87,36)" fg:x="437" fg:w="2"/><text x="35.4069%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="35.1569%" y="405" width="0.1609%" height="15" fill="rgb(240,21,12)" fg:x="437" fg:w="2"/><text x="35.4069%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="35.2373%" y="389" width="0.0805%" height="15" fill="rgb(245,192,34)" fg:x="438" fg:w="1"/><text x="35.4873%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="35.3178%" y="373" width="0.0805%" height="15" fill="rgb(226,100,49)" fg:x="439" fg:w="1"/><text x="35.5678%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="35.3178%" y="357" width="0.0805%" height="15" fill="rgb(245,188,27)" fg:x="439" fg:w="1"/><text x="35.5678%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="35.3178%" y="341" width="0.0805%" height="15" fill="rgb(212,170,8)" fg:x="439" fg:w="1"/><text x="35.5678%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="35.3178%" y="325" width="0.0805%" height="15" fill="rgb(217,113,29)" fg:x="439" fg:w="1"/><text x="35.5678%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="35.3178%" y="309" width="0.0805%" height="15" fill="rgb(237,30,3)" fg:x="439" fg:w="1"/><text x="35.5678%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="35.3178%" y="293" width="0.0805%" height="15" fill="rgb(227,19,28)" fg:x="439" fg:w="1"/><text x="35.5678%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="35.3178%" y="277" width="0.0805%" height="15" fill="rgb(239,172,45)" fg:x="439" fg:w="1"/><text x="35.5678%" y="287.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="35.3178%" y="261" width="0.0805%" height="15" fill="rgb(254,55,39)" fg:x="439" fg:w="1"/><text x="35.5678%" y="271.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="35.3178%" y="245" width="0.0805%" height="15" fill="rgb(249,208,12)" fg:x="439" fg:w="1"/><text x="35.5678%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="35.3178%" y="229" width="0.0805%" height="15" fill="rgb(240,52,13)" fg:x="439" fg:w="1"/><text x="35.5678%" y="239.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (11 samples, 0.88%)</title><rect x="34.5937%" y="485" width="0.8850%" height="15" fill="rgb(252,149,13)" fg:x="430" fg:w="11"/><text x="34.8437%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="35.3178%" y="469" width="0.1609%" height="15" fill="rgb(232,81,48)" fg:x="439" fg:w="2"/><text x="35.5678%" y="479.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="35.3178%" y="453" width="0.1609%" height="15" fill="rgb(222,144,2)" fg:x="439" fg:w="2"/><text x="35.5678%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="35.3178%" y="437" width="0.1609%" height="15" fill="rgb(216,81,32)" fg:x="439" fg:w="2"/><text x="35.5678%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="35.3178%" y="421" width="0.1609%" height="15" fill="rgb(244,78,51)" fg:x="439" fg:w="2"/><text x="35.5678%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="35.3178%" y="405" width="0.1609%" height="15" fill="rgb(217,66,21)" fg:x="439" fg:w="2"/><text x="35.5678%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="35.3178%" y="389" width="0.1609%" height="15" fill="rgb(247,101,42)" fg:x="439" fg:w="2"/><text x="35.5678%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="35.3982%" y="373" width="0.0805%" height="15" fill="rgb(227,81,39)" fg:x="440" fg:w="1"/><text x="35.6482%" y="383.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="35.3982%" y="357" width="0.0805%" height="15" fill="rgb(220,223,44)" fg:x="440" fg:w="1"/><text x="35.6482%" y="367.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (14 samples, 1.13%)</title><rect x="34.4328%" y="549" width="1.1263%" height="15" fill="rgb(205,218,2)" fg:x="428" fg:w="14"/><text x="34.6828%" y="559.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (12 samples, 0.97%)</title><rect x="34.5937%" y="533" width="0.9654%" height="15" fill="rgb(212,207,28)" fg:x="430" fg:w="12"/><text x="34.8437%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (12 samples, 0.97%)</title><rect x="34.5937%" y="517" width="0.9654%" height="15" fill="rgb(224,12,41)" fg:x="430" fg:w="12"/><text x="34.8437%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (12 samples, 0.97%)</title><rect x="34.5937%" y="501" width="0.9654%" height="15" fill="rgb(216,118,12)" fg:x="430" fg:w="12"/><text x="34.8437%" y="511.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="35.4787%" y="485" width="0.0805%" height="15" fill="rgb(252,97,46)" fg:x="441" fg:w="1"/><text x="35.7287%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="35.4787%" y="469" width="0.0805%" height="15" fill="rgb(244,206,19)" fg:x="441" fg:w="1"/><text x="35.7287%" y="479.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (15 samples, 1.21%)</title><rect x="34.4328%" y="565" width="1.2068%" height="15" fill="rgb(231,84,31)" fg:x="428" fg:w="15"/><text x="34.6828%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="35.5591%" y="549" width="0.0805%" height="15" fill="rgb(244,133,0)" fg:x="442" fg:w="1"/><text x="35.8091%" y="559.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="35.5591%" y="533" width="0.0805%" height="15" fill="rgb(223,15,50)" fg:x="442" fg:w="1"/><text x="35.8091%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="36.2832%" y="325" width="0.0805%" height="15" fill="rgb(250,118,49)" fg:x="451" fg:w="1"/><text x="36.5332%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="36.2832%" y="309" width="0.0805%" height="15" fill="rgb(248,25,38)" fg:x="451" fg:w="1"/><text x="36.5332%" y="319.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="36.2832%" y="293" width="0.0805%" height="15" fill="rgb(215,70,14)" fg:x="451" fg:w="1"/><text x="36.5332%" y="303.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="36.4441%" y="293" width="0.1609%" height="15" fill="rgb(215,28,15)" fg:x="453" fg:w="2"/><text x="36.6941%" y="303.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (6 samples, 0.48%)</title><rect x="36.3636%" y="325" width="0.4827%" height="15" fill="rgb(243,6,28)" fg:x="452" fg:w="6"/><text x="36.6136%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="36.3636%" y="309" width="0.4827%" height="15" fill="rgb(222,130,1)" fg:x="452" fg:w="6"/><text x="36.6136%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="36.6050%" y="293" width="0.2414%" height="15" fill="rgb(236,166,44)" fg:x="455" fg:w="3"/><text x="36.8550%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="36.6050%" y="277" width="0.2414%" height="15" fill="rgb(221,108,14)" fg:x="455" fg:w="3"/><text x="36.8550%" y="287.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="36.6854%" y="261" width="0.1609%" height="15" fill="rgb(252,3,45)" fg:x="456" fg:w="2"/><text x="36.9354%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.9268%" y="277" width="0.0805%" height="15" fill="rgb(237,68,30)" fg:x="459" fg:w="1"/><text x="37.1768%" y="287.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (4 samples, 0.32%)</title><rect x="36.8463%" y="309" width="0.3218%" height="15" fill="rgb(211,79,22)" fg:x="458" fg:w="4"/><text x="37.0963%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="36.8463%" y="293" width="0.3218%" height="15" fill="rgb(252,185,21)" fg:x="458" fg:w="4"/><text x="37.0963%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="37.0072%" y="277" width="0.1609%" height="15" fill="rgb(225,189,26)" fg:x="460" fg:w="2"/><text x="37.2572%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="37.0877%" y="261" width="0.0805%" height="15" fill="rgb(241,30,40)" fg:x="461" fg:w="1"/><text x="37.3377%" y="271.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (16 samples, 1.29%)</title><rect x="35.9614%" y="373" width="1.2872%" height="15" fill="rgb(235,215,44)" fg:x="447" fg:w="16"/><text x="36.2114%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (16 samples, 1.29%)</title><rect x="35.9614%" y="357" width="1.2872%" height="15" fill="rgb(205,8,29)" fg:x="447" fg:w="16"/><text x="36.2114%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (16 samples, 1.29%)</title><rect x="35.9614%" y="341" width="1.2872%" height="15" fill="rgb(241,137,42)" fg:x="447" fg:w="16"/><text x="36.2114%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_seq (5 samples, 0.40%)</title><rect x="36.8463%" y="325" width="0.4023%" height="15" fill="rgb(237,155,2)" fg:x="458" fg:w="5"/><text x="37.0963%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (1 samples, 0.08%)</title><rect x="37.1681%" y="309" width="0.0805%" height="15" fill="rgb(245,29,42)" fg:x="462" fg:w="1"/><text x="37.4181%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="37.1681%" y="293" width="0.0805%" height="15" fill="rgb(234,101,35)" fg:x="462" fg:w="1"/><text x="37.4181%" y="303.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="37.1681%" y="277" width="0.0805%" height="15" fill="rgb(228,64,37)" fg:x="462" fg:w="1"/><text x="37.4181%" y="287.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="37.1681%" y="261" width="0.0805%" height="15" fill="rgb(217,214,36)" fg:x="462" fg:w="1"/><text x="37.4181%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.2486%" y="373" width="0.0805%" height="15" fill="rgb(243,70,3)" fg:x="463" fg:w="1"/><text x="37.4986%" y="383.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (19 samples, 1.53%)</title><rect x="35.9614%" y="389" width="1.5286%" height="15" fill="rgb(253,158,52)" fg:x="447" fg:w="19"/><text x="36.2114%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (2 samples, 0.16%)</title><rect x="37.3290%" y="373" width="0.1609%" height="15" fill="rgb(234,111,54)" fg:x="464" fg:w="2"/><text x="37.5790%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.4095%" y="357" width="0.0805%" height="15" fill="rgb(217,70,32)" fg:x="465" fg:w="1"/><text x="37.6595%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="37.7313%" y="357" width="0.0805%" height="15" fill="rgb(234,18,33)" fg:x="469" fg:w="1"/><text x="37.9813%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="37.7313%" y="341" width="0.0805%" height="15" fill="rgb(234,12,49)" fg:x="469" fg:w="1"/><text x="37.9813%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="37.7313%" y="325" width="0.0805%" height="15" fill="rgb(236,10,21)" fg:x="469" fg:w="1"/><text x="37.9813%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="37.7313%" y="309" width="0.0805%" height="15" fill="rgb(248,182,45)" fg:x="469" fg:w="1"/><text x="37.9813%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="37.8117%" y="325" width="0.1609%" height="15" fill="rgb(217,95,36)" fg:x="470" fg:w="2"/><text x="38.0617%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="37.8117%" y="309" width="0.1609%" height="15" fill="rgb(212,110,31)" fg:x="470" fg:w="2"/><text x="38.0617%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="37.8117%" y="293" width="0.1609%" height="15" fill="rgb(206,32,53)" fg:x="470" fg:w="2"/><text x="38.0617%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="37.8922%" y="277" width="0.0805%" height="15" fill="rgb(246,141,37)" fg:x="471" fg:w="1"/><text x="38.1422%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="37.8922%" y="261" width="0.0805%" height="15" fill="rgb(219,16,7)" fg:x="471" fg:w="1"/><text x="38.1422%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="37.8922%" y="245" width="0.0805%" height="15" fill="rgb(230,205,45)" fg:x="471" fg:w="1"/><text x="38.1422%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="37.8922%" y="229" width="0.0805%" height="15" fill="rgb(231,43,49)" fg:x="471" fg:w="1"/><text x="38.1422%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="37.8922%" y="213" width="0.0805%" height="15" fill="rgb(212,106,34)" fg:x="471" fg:w="1"/><text x="38.1422%" y="223.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="37.8117%" y="341" width="0.3218%" height="15" fill="rgb(206,83,17)" fg:x="470" fg:w="4"/><text x="38.0617%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="37.9726%" y="325" width="0.1609%" height="15" fill="rgb(244,154,49)" fg:x="472" fg:w="2"/><text x="38.2226%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="37.9726%" y="309" width="0.1609%" height="15" fill="rgb(244,149,49)" fg:x="472" fg:w="2"/><text x="38.2226%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="38.0531%" y="293" width="0.0805%" height="15" fill="rgb(227,134,18)" fg:x="473" fg:w="1"/><text x="38.3031%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="38.0531%" y="277" width="0.0805%" height="15" fill="rgb(237,116,36)" fg:x="473" fg:w="1"/><text x="38.3031%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="38.0531%" y="261" width="0.0805%" height="15" fill="rgb(205,129,40)" fg:x="473" fg:w="1"/><text x="38.3031%" y="271.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (5 samples, 0.40%)</title><rect x="37.8117%" y="357" width="0.4023%" height="15" fill="rgb(236,178,4)" fg:x="470" fg:w="5"/><text x="38.0617%" y="367.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="38.1335%" y="341" width="0.0805%" height="15" fill="rgb(251,76,53)" fg:x="474" fg:w="1"/><text x="38.3835%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="38.1335%" y="325" width="0.0805%" height="15" fill="rgb(242,92,40)" fg:x="474" fg:w="1"/><text x="38.3835%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="38.1335%" y="309" width="0.0805%" height="15" fill="rgb(209,45,30)" fg:x="474" fg:w="1"/><text x="38.3835%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="38.1335%" y="293" width="0.0805%" height="15" fill="rgb(218,157,36)" fg:x="474" fg:w="1"/><text x="38.3835%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="38.1335%" y="277" width="0.0805%" height="15" fill="rgb(222,186,16)" fg:x="474" fg:w="1"/><text x="38.3835%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="38.1335%" y="261" width="0.0805%" height="15" fill="rgb(254,72,35)" fg:x="474" fg:w="1"/><text x="38.3835%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="38.1335%" y="245" width="0.0805%" height="15" fill="rgb(224,25,35)" fg:x="474" fg:w="1"/><text x="38.3835%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="38.1335%" y="229" width="0.0805%" height="15" fill="rgb(206,135,52)" fg:x="474" fg:w="1"/><text x="38.3835%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="38.1335%" y="213" width="0.0805%" height="15" fill="rgb(229,174,47)" fg:x="474" fg:w="1"/><text x="38.3835%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="38.1335%" y="197" width="0.0805%" height="15" fill="rgb(242,184,21)" fg:x="474" fg:w="1"/><text x="38.3835%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="38.1335%" y="181" width="0.0805%" height="15" fill="rgb(213,22,45)" fg:x="474" fg:w="1"/><text x="38.3835%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="38.1335%" y="165" width="0.0805%" height="15" fill="rgb(237,81,54)" fg:x="474" fg:w="1"/><text x="38.3835%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.1335%" y="149" width="0.0805%" height="15" fill="rgb(248,177,18)" fg:x="474" fg:w="1"/><text x="38.3835%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="38.2140%" y="357" width="0.0805%" height="15" fill="rgb(254,31,16)" fg:x="475" fg:w="1"/><text x="38.4640%" y="367.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="38.2944%" y="357" width="0.0805%" height="15" fill="rgb(235,20,31)" fg:x="476" fg:w="1"/><text x="38.5444%" y="367.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="38.2944%" y="341" width="0.0805%" height="15" fill="rgb(240,56,43)" fg:x="476" fg:w="1"/><text x="38.5444%" y="351.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="38.2944%" y="325" width="0.0805%" height="15" fill="rgb(237,197,51)" fg:x="476" fg:w="1"/><text x="38.5444%" y="335.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="38.2944%" y="309" width="0.0805%" height="15" fill="rgb(241,162,44)" fg:x="476" fg:w="1"/><text x="38.5444%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="38.2944%" y="293" width="0.0805%" height="15" fill="rgb(224,23,20)" fg:x="476" fg:w="1"/><text x="38.5444%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="38.6163%" y="277" width="0.0805%" height="15" fill="rgb(250,109,34)" fg:x="480" fg:w="1"/><text x="38.8663%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="38.6163%" y="261" width="0.0805%" height="15" fill="rgb(214,175,50)" fg:x="480" fg:w="1"/><text x="38.8663%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.6163%" y="245" width="0.0805%" height="15" fill="rgb(213,182,5)" fg:x="480" fg:w="1"/><text x="38.8663%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (5 samples, 0.40%)</title><rect x="38.3749%" y="357" width="0.4023%" height="15" fill="rgb(209,199,19)" fg:x="477" fg:w="5"/><text x="38.6249%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="38.4553%" y="341" width="0.3218%" height="15" fill="rgb(236,224,42)" fg:x="478" fg:w="4"/><text x="38.7053%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="38.5358%" y="325" width="0.2414%" height="15" fill="rgb(246,226,29)" fg:x="479" fg:w="3"/><text x="38.7858%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="38.6163%" y="309" width="0.1609%" height="15" fill="rgb(227,223,11)" fg:x="480" fg:w="2"/><text x="38.8663%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="38.6163%" y="293" width="0.1609%" height="15" fill="rgb(219,7,51)" fg:x="480" fg:w="2"/><text x="38.8663%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="38.6967%" y="277" width="0.0805%" height="15" fill="rgb(245,167,10)" fg:x="481" fg:w="1"/><text x="38.9467%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="38.6967%" y="261" width="0.0805%" height="15" fill="rgb(237,224,16)" fg:x="481" fg:w="1"/><text x="38.9467%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="38.6967%" y="245" width="0.0805%" height="15" fill="rgb(226,132,13)" fg:x="481" fg:w="1"/><text x="38.9467%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="38.7772%" y="325" width="0.0805%" height="15" fill="rgb(214,140,3)" fg:x="482" fg:w="1"/><text x="39.0272%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="38.7772%" y="309" width="0.0805%" height="15" fill="rgb(221,177,4)" fg:x="482" fg:w="1"/><text x="39.0272%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="38.7772%" y="293" width="0.0805%" height="15" fill="rgb(238,139,3)" fg:x="482" fg:w="1"/><text x="39.0272%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="38.7772%" y="277" width="0.0805%" height="15" fill="rgb(216,17,39)" fg:x="482" fg:w="1"/><text x="39.0272%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="38.8576%" y="325" width="0.0805%" height="15" fill="rgb(238,120,9)" fg:x="483" fg:w="1"/><text x="39.1076%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.8576%" y="309" width="0.0805%" height="15" fill="rgb(244,92,53)" fg:x="483" fg:w="1"/><text x="39.1076%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="39.0185%" y="261" width="0.0805%" height="15" fill="rgb(224,148,33)" fg:x="485" fg:w="1"/><text x="39.2685%" y="271.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="39.0185%" y="245" width="0.0805%" height="15" fill="rgb(243,6,36)" fg:x="485" fg:w="1"/><text x="39.2685%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (6 samples, 0.48%)</title><rect x="38.7772%" y="341" width="0.4827%" height="15" fill="rgb(230,102,11)" fg:x="482" fg:w="6"/><text x="39.0272%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="38.9381%" y="325" width="0.3218%" height="15" fill="rgb(234,148,36)" fg:x="484" fg:w="4"/><text x="39.1881%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="38.9381%" y="309" width="0.3218%" height="15" fill="rgb(251,153,25)" fg:x="484" fg:w="4"/><text x="39.1881%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="39.0185%" y="293" width="0.2414%" height="15" fill="rgb(215,129,8)" fg:x="485" fg:w="3"/><text x="39.2685%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="39.0185%" y="277" width="0.2414%" height="15" fill="rgb(224,128,35)" fg:x="485" fg:w="3"/><text x="39.2685%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="39.0990%" y="261" width="0.1609%" height="15" fill="rgb(237,56,52)" fg:x="486" fg:w="2"/><text x="39.3490%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="39.0990%" y="245" width="0.1609%" height="15" fill="rgb(234,213,19)" fg:x="486" fg:w="2"/><text x="39.3490%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="39.1794%" y="229" width="0.0805%" height="15" fill="rgb(252,82,23)" fg:x="487" fg:w="1"/><text x="39.4294%" y="239.50"></text></g><g><title>kernel::model::EntityPtr::gid (7 samples, 0.56%)</title><rect x="38.7772%" y="357" width="0.5632%" height="15" fill="rgb(254,201,21)" fg:x="482" fg:w="7"/><text x="39.0272%" y="367.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="39.2599%" y="341" width="0.0805%" height="15" fill="rgb(250,186,11)" fg:x="488" fg:w="1"/><text x="39.5099%" y="351.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="39.3403%" y="357" width="0.0805%" height="15" fill="rgb(211,174,5)" fg:x="489" fg:w="1"/><text x="39.5903%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.5012%" y="309" width="0.0805%" height="15" fill="rgb(214,121,10)" fg:x="491" fg:w="1"/><text x="39.7512%" y="319.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="39.5817%" y="309" width="0.1609%" height="15" fill="rgb(241,66,2)" fg:x="492" fg:w="2"/><text x="39.8317%" y="319.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="39.5817%" y="293" width="0.1609%" height="15" fill="rgb(220,167,19)" fg:x="492" fg:w="2"/><text x="39.8317%" y="303.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="39.5817%" y="277" width="0.1609%" height="15" fill="rgb(231,54,50)" fg:x="492" fg:w="2"/><text x="39.8317%" y="287.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="39.5817%" y="261" width="0.1609%" height="15" fill="rgb(239,217,53)" fg:x="492" fg:w="2"/><text x="39.8317%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="39.5817%" y="245" width="0.1609%" height="15" fill="rgb(248,8,0)" fg:x="492" fg:w="2"/><text x="39.8317%" y="255.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.16%)</title><rect x="39.5817%" y="229" width="0.1609%" height="15" fill="rgb(229,118,37)" fg:x="492" fg:w="2"/><text x="39.8317%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.16%)</title><rect x="39.5817%" y="213" width="0.1609%" height="15" fill="rgb(253,223,43)" fg:x="492" fg:w="2"/><text x="39.8317%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="39.5817%" y="197" width="0.1609%" height="15" fill="rgb(211,77,36)" fg:x="492" fg:w="2"/><text x="39.8317%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.16%)</title><rect x="39.5817%" y="181" width="0.1609%" height="15" fill="rgb(219,3,53)" fg:x="492" fg:w="2"/><text x="39.8317%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.16%)</title><rect x="39.5817%" y="165" width="0.1609%" height="15" fill="rgb(244,45,42)" fg:x="492" fg:w="2"/><text x="39.8317%" y="175.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="39.9035%" y="213" width="0.0805%" height="15" fill="rgb(225,95,27)" fg:x="496" fg:w="1"/><text x="40.1535%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="39.9035%" y="277" width="0.1609%" height="15" fill="rgb(207,74,8)" fg:x="496" fg:w="2"/><text x="40.1535%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="39.9035%" y="261" width="0.1609%" height="15" fill="rgb(243,63,36)" fg:x="496" fg:w="2"/><text x="40.1535%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="39.9035%" y="245" width="0.1609%" height="15" fill="rgb(211,180,12)" fg:x="496" fg:w="2"/><text x="40.1535%" y="255.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="39.9035%" y="229" width="0.1609%" height="15" fill="rgb(254,166,49)" fg:x="496" fg:w="2"/><text x="40.1535%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="39.9839%" y="213" width="0.0805%" height="15" fill="rgb(205,19,0)" fg:x="497" fg:w="1"/><text x="40.2339%" y="223.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="39.9839%" y="197" width="0.0805%" height="15" fill="rgb(224,172,32)" fg:x="497" fg:w="1"/><text x="40.2339%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="39.9839%" y="181" width="0.0805%" height="15" fill="rgb(254,136,30)" fg:x="497" fg:w="1"/><text x="40.2339%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.9839%" y="165" width="0.0805%" height="15" fill="rgb(246,19,35)" fg:x="497" fg:w="1"/><text x="40.2339%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="40.0644%" y="229" width="0.2414%" height="15" fill="rgb(219,24,36)" fg:x="498" fg:w="3"/><text x="40.3144%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="40.2253%" y="213" width="0.0805%" height="15" fill="rgb(251,55,1)" fg:x="500" fg:w="1"/><text x="40.4753%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (3 samples, 0.24%)</title><rect x="40.3057%" y="229" width="0.2414%" height="15" fill="rgb(218,117,39)" fg:x="501" fg:w="3"/><text x="40.5557%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="40.3862%" y="213" width="0.1609%" height="15" fill="rgb(248,169,11)" fg:x="502" fg:w="2"/><text x="40.6362%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.5471%" y="213" width="0.0805%" height="15" fill="rgb(244,40,44)" fg:x="504" fg:w="1"/><text x="40.7971%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (10 samples, 0.80%)</title><rect x="40.6275%" y="213" width="0.8045%" height="15" fill="rgb(234,62,37)" fg:x="505" fg:w="10"/><text x="40.8775%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (10 samples, 0.80%)</title><rect x="40.6275%" y="197" width="0.8045%" height="15" fill="rgb(207,117,42)" fg:x="505" fg:w="10"/><text x="40.8775%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="41.5125%" y="197" width="0.2414%" height="15" fill="rgb(213,43,2)" fg:x="516" fg:w="3"/><text x="41.7625%" y="207.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="41.6734%" y="181" width="0.0805%" height="15" fill="rgb(244,202,51)" fg:x="518" fg:w="1"/><text x="41.9234%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="41.6734%" y="165" width="0.0805%" height="15" fill="rgb(253,174,46)" fg:x="518" fg:w="1"/><text x="41.9234%" y="175.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="41.4320%" y="213" width="0.4827%" height="15" fill="rgb(251,23,1)" fg:x="515" fg:w="6"/><text x="41.6820%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (2 samples, 0.16%)</title><rect x="41.7538%" y="197" width="0.1609%" height="15" fill="rgb(253,26,1)" fg:x="519" fg:w="2"/><text x="42.0038%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.0756%" y="149" width="0.0805%" height="15" fill="rgb(216,89,31)" fg:x="523" fg:w="1"/><text x="42.3256%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="42.1561%" y="149" width="0.0805%" height="15" fill="rgb(209,109,5)" fg:x="524" fg:w="1"/><text x="42.4061%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="42.2365%" y="149" width="0.0805%" height="15" fill="rgb(229,63,13)" fg:x="525" fg:w="1"/><text x="42.4865%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="42.2365%" y="133" width="0.0805%" height="15" fill="rgb(238,137,54)" fg:x="525" fg:w="1"/><text x="42.4865%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="42.2365%" y="117" width="0.0805%" height="15" fill="rgb(228,1,9)" fg:x="525" fg:w="1"/><text x="42.4865%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="42.2365%" y="101" width="0.0805%" height="15" fill="rgb(249,120,48)" fg:x="525" fg:w="1"/><text x="42.4865%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="42.2365%" y="85" width="0.0805%" height="15" fill="rgb(209,72,36)" fg:x="525" fg:w="1"/><text x="42.4865%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="42.3170%" y="149" width="0.0805%" height="15" fill="rgb(247,98,49)" fg:x="526" fg:w="1"/><text x="42.5670%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="42.3170%" y="133" width="0.0805%" height="15" fill="rgb(233,75,36)" fg:x="526" fg:w="1"/><text x="42.5670%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="42.3170%" y="117" width="0.0805%" height="15" fill="rgb(225,14,24)" fg:x="526" fg:w="1"/><text x="42.5670%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="42.3170%" y="101" width="0.0805%" height="15" fill="rgb(237,193,20)" fg:x="526" fg:w="1"/><text x="42.5670%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="42.3974%" y="133" width="0.0805%" height="15" fill="rgb(239,122,19)" fg:x="527" fg:w="1"/><text x="42.6474%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="42.3974%" y="117" width="0.0805%" height="15" fill="rgb(231,220,10)" fg:x="527" fg:w="1"/><text x="42.6474%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.3974%" y="101" width="0.0805%" height="15" fill="rgb(220,66,15)" fg:x="527" fg:w="1"/><text x="42.6474%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (42 samples, 3.38%)</title><rect x="42.3974%" y="149" width="3.3789%" height="15" fill="rgb(215,171,52)" fg:x="527" fg:w="42"/><text x="42.6474%" y="159.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (41 samples, 3.30%)</title><rect x="42.4779%" y="133" width="3.2985%" height="15" fill="rgb(241,169,50)" fg:x="528" fg:w="41"/><text x="42.7279%" y="143.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (41 samples, 3.30%)</title><rect x="42.4779%" y="117" width="3.2985%" height="15" fill="rgb(236,189,0)" fg:x="528" fg:w="41"/><text x="42.7279%" y="127.50">all..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 4.18%)</title><rect x="41.9147%" y="197" width="4.1834%" height="15" fill="rgb(217,147,20)" fg:x="521" fg:w="52"/><text x="42.1647%" y="207.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (52 samples, 4.18%)</title><rect x="41.9147%" y="181" width="4.1834%" height="15" fill="rgb(206,188,39)" fg:x="521" fg:w="52"/><text x="42.1647%" y="191.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (52 samples, 4.18%)</title><rect x="41.9147%" y="165" width="4.1834%" height="15" fill="rgb(227,118,25)" fg:x="521" fg:w="52"/><text x="42.1647%" y="175.50">regex..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.32%)</title><rect x="45.7763%" y="149" width="0.3218%" height="15" fill="rgb(248,171,40)" fg:x="569" fg:w="4"/><text x="46.0263%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="46.0177%" y="133" width="0.0805%" height="15" fill="rgb(251,90,54)" fg:x="572" fg:w="1"/><text x="46.2677%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.1786%" y="181" width="0.0805%" height="15" fill="rgb(234,11,46)" fg:x="574" fg:w="1"/><text x="46.4286%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="46.2591%" y="181" width="0.1609%" height="15" fill="rgb(229,134,13)" fg:x="575" fg:w="2"/><text x="46.5091%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="46.4200%" y="181" width="0.3218%" height="15" fill="rgb(223,129,3)" fg:x="577" fg:w="4"/><text x="46.6700%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.6613%" y="165" width="0.0805%" height="15" fill="rgb(221,124,13)" fg:x="580" fg:w="1"/><text x="46.9113%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="46.7418%" y="181" width="0.1609%" height="15" fill="rgb(234,3,18)" fg:x="581" fg:w="2"/><text x="46.9918%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="46.9027%" y="165" width="0.1609%" height="15" fill="rgb(249,199,20)" fg:x="583" fg:w="2"/><text x="47.1527%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (13 samples, 1.05%)</title><rect x="46.0981%" y="197" width="1.0459%" height="15" fill="rgb(224,134,6)" fg:x="573" fg:w="13"/><text x="46.3481%" y="207.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (3 samples, 0.24%)</title><rect x="46.9027%" y="181" width="0.2414%" height="15" fill="rgb(254,83,26)" fg:x="583" fg:w="3"/><text x="47.1527%" y="191.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="47.0636%" y="165" width="0.0805%" height="15" fill="rgb(217,88,9)" fg:x="585" fg:w="1"/><text x="47.3136%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="47.0636%" y="149" width="0.0805%" height="15" fill="rgb(225,73,2)" fg:x="585" fg:w="1"/><text x="47.3136%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.0636%" y="133" width="0.0805%" height="15" fill="rgb(226,44,39)" fg:x="585" fg:w="1"/><text x="47.3136%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="47.0636%" y="117" width="0.0805%" height="15" fill="rgb(228,53,17)" fg:x="585" fg:w="1"/><text x="47.3136%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="47.1440%" y="197" width="0.0805%" height="15" fill="rgb(212,27,27)" fg:x="586" fg:w="1"/><text x="47.3940%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="47.2245%" y="181" width="0.0805%" height="15" fill="rgb(241,50,6)" fg:x="587" fg:w="1"/><text x="47.4745%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="47.2245%" y="165" width="0.0805%" height="15" fill="rgb(225,28,51)" fg:x="587" fg:w="1"/><text x="47.4745%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.2245%" y="149" width="0.0805%" height="15" fill="rgb(215,33,16)" fg:x="587" fg:w="1"/><text x="47.4745%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="47.2245%" y="133" width="0.0805%" height="15" fill="rgb(243,40,39)" fg:x="587" fg:w="1"/><text x="47.4745%" y="143.50"></text></g><g><title>regex_automata::meta::strategy::new (85 samples, 6.84%)</title><rect x="40.5471%" y="229" width="6.8383%" height="15" fill="rgb(225,11,42)" fg:x="504" fg:w="85"/><text x="40.7971%" y="239.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (68 samples, 5.47%)</title><rect x="41.9147%" y="213" width="5.4706%" height="15" fill="rgb(241,220,38)" fg:x="521" fg:w="68"/><text x="42.1647%" y="223.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (2 samples, 0.16%)</title><rect x="47.2245%" y="197" width="0.1609%" height="15" fill="rgb(244,52,35)" fg:x="587" fg:w="2"/><text x="47.4745%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="47.3049%" y="181" width="0.0805%" height="15" fill="rgb(246,42,46)" fg:x="588" fg:w="1"/><text x="47.5549%" y="191.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="47.6267%" y="181" width="0.0805%" height="15" fill="rgb(205,184,13)" fg:x="592" fg:w="1"/><text x="47.8767%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="47.7072%" y="181" width="0.0805%" height="15" fill="rgb(209,48,36)" fg:x="593" fg:w="1"/><text x="47.9572%" y="191.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::into_item (1 samples, 0.08%)</title><rect x="47.7072%" y="165" width="0.0805%" height="15" fill="rgb(244,34,51)" fg:x="593" fg:w="1"/><text x="47.9572%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="47.3854%" y="229" width="0.4827%" height="15" fill="rgb(221,107,33)" fg:x="589" fg:w="6"/><text x="47.6354%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="47.4658%" y="213" width="0.4023%" height="15" fill="rgb(224,203,12)" fg:x="590" fg:w="5"/><text x="47.7158%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="47.5463%" y="197" width="0.3218%" height="15" fill="rgb(230,215,18)" fg:x="591" fg:w="4"/><text x="47.7963%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="47.7876%" y="181" width="0.0805%" height="15" fill="rgb(206,185,35)" fg:x="594" fg:w="1"/><text x="48.0376%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="47.7876%" y="165" width="0.0805%" height="15" fill="rgb(228,140,34)" fg:x="594" fg:w="1"/><text x="48.0376%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.7876%" y="149" width="0.0805%" height="15" fill="rgb(208,93,13)" fg:x="594" fg:w="1"/><text x="48.0376%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="47.7876%" y="133" width="0.0805%" height="15" fill="rgb(221,193,39)" fg:x="594" fg:w="1"/><text x="48.0376%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="48.0290%" y="165" width="0.3218%" height="15" fill="rgb(241,132,34)" fg:x="597" fg:w="4"/><text x="48.2790%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="48.1094%" y="149" width="0.2414%" height="15" fill="rgb(221,141,10)" fg:x="598" fg:w="3"/><text x="48.3594%" y="159.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="48.1094%" y="133" width="0.2414%" height="15" fill="rgb(226,90,31)" fg:x="598" fg:w="3"/><text x="48.3594%" y="143.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (7 samples, 0.56%)</title><rect x="47.8681%" y="197" width="0.5632%" height="15" fill="rgb(243,75,5)" fg:x="595" fg:w="7"/><text x="48.1181%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (7 samples, 0.56%)</title><rect x="47.8681%" y="181" width="0.5632%" height="15" fill="rgb(227,156,21)" fg:x="595" fg:w="7"/><text x="48.1181%" y="191.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="48.3508%" y="165" width="0.0805%" height="15" fill="rgb(250,195,8)" fg:x="601" fg:w="1"/><text x="48.6008%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="48.4312%" y="197" width="0.0805%" height="15" fill="rgb(220,134,5)" fg:x="602" fg:w="1"/><text x="48.6812%" y="207.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="48.4312%" y="181" width="0.0805%" height="15" fill="rgb(246,106,34)" fg:x="602" fg:w="1"/><text x="48.6812%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (106 samples, 8.53%)</title><rect x="40.0644%" y="277" width="8.5278%" height="15" fill="rgb(205,1,4)" fg:x="498" fg:w="106"/><text x="40.3144%" y="287.50">&lt;regex::rege..</text></g><g><title>regex::builders::string::RegexBuilder::build (106 samples, 8.53%)</title><rect x="40.0644%" y="261" width="8.5278%" height="15" fill="rgb(224,151,29)" fg:x="498" fg:w="106"/><text x="40.3144%" y="271.50">regex::build..</text></g><g><title>regex_automata::meta::regex::Builder::build (106 samples, 8.53%)</title><rect x="40.0644%" y="245" width="8.5278%" height="15" fill="rgb(251,196,0)" fg:x="498" fg:w="106"/><text x="40.3144%" y="255.50">regex_automa..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (9 samples, 0.72%)</title><rect x="47.8681%" y="229" width="0.7241%" height="15" fill="rgb(212,127,0)" fg:x="595" fg:w="9"/><text x="48.1181%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (9 samples, 0.72%)</title><rect x="47.8681%" y="213" width="0.7241%" height="15" fill="rgb(236,71,53)" fg:x="595" fg:w="9"/><text x="48.1181%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="48.5117%" y="197" width="0.0805%" height="15" fill="rgb(227,99,0)" fg:x="603" fg:w="1"/><text x="48.7617%" y="207.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="48.5117%" y="181" width="0.0805%" height="15" fill="rgb(239,89,21)" fg:x="603" fg:w="1"/><text x="48.7617%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="48.5117%" y="165" width="0.0805%" height="15" fill="rgb(243,122,19)" fg:x="603" fg:w="1"/><text x="48.7617%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.5117%" y="149" width="0.0805%" height="15" fill="rgb(229,192,45)" fg:x="603" fg:w="1"/><text x="48.7617%" y="159.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.5921%" y="277" width="0.0805%" height="15" fill="rgb(235,165,35)" fg:x="604" fg:w="1"/><text x="48.8421%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="48.6726%" y="277" width="0.1609%" height="15" fill="rgb(253,202,0)" fg:x="605" fg:w="2"/><text x="48.9226%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::panic::unwind_safe::UnwindSafe+core::marker::Sync+core::panic::unwind_safe::RefUnwindSafe+core::marker::Send&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="48.6726%" y="261" width="0.1609%" height="15" fill="rgb(235,51,20)" fg:x="605" fg:w="2"/><text x="48.9226%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="48.6726%" y="245" width="0.1609%" height="15" fill="rgb(218,95,46)" fg:x="605" fg:w="2"/><text x="48.9226%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="48.6726%" y="229" width="0.1609%" height="15" fill="rgb(212,81,10)" fg:x="605" fg:w="2"/><text x="48.9226%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="48.6726%" y="213" width="0.1609%" height="15" fill="rgb(240,59,0)" fg:x="605" fg:w="2"/><text x="48.9226%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="48.7530%" y="197" width="0.0805%" height="15" fill="rgb(212,191,42)" fg:x="606" fg:w="1"/><text x="49.0030%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="49.1553%" y="181" width="0.0805%" height="15" fill="rgb(233,140,3)" fg:x="611" fg:w="1"/><text x="49.4053%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="49.1553%" y="165" width="0.0805%" height="15" fill="rgb(215,69,23)" fg:x="611" fg:w="1"/><text x="49.4053%" y="175.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.48%)</title><rect x="48.8335%" y="213" width="0.4827%" height="15" fill="rgb(240,202,20)" fg:x="607" fg:w="6"/><text x="49.0835%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="49.1553%" y="197" width="0.1609%" height="15" fill="rgb(209,146,50)" fg:x="611" fg:w="2"/><text x="49.4053%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="49.2357%" y="181" width="0.0805%" height="15" fill="rgb(253,102,54)" fg:x="612" fg:w="1"/><text x="49.4857%" y="191.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (120 samples, 9.65%)</title><rect x="39.8230%" y="293" width="9.6541%" height="15" fill="rgb(250,173,47)" fg:x="495" fg:w="120"/><text x="40.0730%" y="303.50">indefinite::he..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.64%)</title><rect x="48.8335%" y="277" width="0.6436%" height="15" fill="rgb(232,142,7)" fg:x="607" fg:w="8"/><text x="49.0835%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.64%)</title><rect x="48.8335%" y="261" width="0.6436%" height="15" fill="rgb(230,157,47)" fg:x="607" fg:w="8"/><text x="49.0835%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.64%)</title><rect x="48.8335%" y="245" width="0.6436%" height="15" fill="rgb(214,177,35)" fg:x="607" fg:w="8"/><text x="49.0835%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (8 samples, 0.64%)</title><rect x="48.8335%" y="229" width="0.6436%" height="15" fill="rgb(234,119,46)" fg:x="607" fg:w="8"/><text x="49.0835%" y="239.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="49.3162%" y="213" width="0.1609%" height="15" fill="rgb(241,180,50)" fg:x="613" fg:w="2"/><text x="49.5662%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="49.3966%" y="197" width="0.0805%" height="15" fill="rgb(221,54,25)" fg:x="614" fg:w="1"/><text x="49.6466%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="49.5575%" y="197" width="0.0805%" height="15" fill="rgb(209,157,44)" fg:x="616" fg:w="1"/><text x="49.8075%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="49.6380%" y="197" width="0.0805%" height="15" fill="rgb(246,115,41)" fg:x="617" fg:w="1"/><text x="49.8880%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="49.4771%" y="229" width="0.3218%" height="15" fill="rgb(229,86,1)" fg:x="615" fg:w="4"/><text x="49.7271%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="49.4771%" y="213" width="0.3218%" height="15" fill="rgb(240,108,53)" fg:x="615" fg:w="4"/><text x="49.7271%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.7184%" y="197" width="0.0805%" height="15" fill="rgb(227,134,2)" fg:x="618" fg:w="1"/><text x="49.9684%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="49.7989%" y="197" width="0.1609%" height="15" fill="rgb(213,129,25)" fg:x="619" fg:w="2"/><text x="50.0489%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="49.8793%" y="181" width="0.0805%" height="15" fill="rgb(226,35,21)" fg:x="620" fg:w="1"/><text x="50.1293%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.8793%" y="165" width="0.0805%" height="15" fill="rgb(208,129,26)" fg:x="620" fg:w="1"/><text x="50.1293%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="49.8793%" y="149" width="0.0805%" height="15" fill="rgb(224,83,6)" fg:x="620" fg:w="1"/><text x="50.1293%" y="159.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.9598%" y="197" width="0.0805%" height="15" fill="rgb(227,52,39)" fg:x="621" fg:w="1"/><text x="50.2098%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (5 samples, 0.40%)</title><rect x="49.7989%" y="229" width="0.4023%" height="15" fill="rgb(241,30,17)" fg:x="619" fg:w="5"/><text x="50.0489%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="49.7989%" y="213" width="0.4023%" height="15" fill="rgb(246,186,42)" fg:x="619" fg:w="5"/><text x="50.0489%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="50.0402%" y="197" width="0.1609%" height="15" fill="rgb(221,169,15)" fg:x="622" fg:w="2"/><text x="50.2902%" y="207.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="50.1207%" y="181" width="0.0805%" height="15" fill="rgb(235,108,21)" fg:x="623" fg:w="1"/><text x="50.3707%" y="191.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="50.2816%" y="197" width="0.1609%" height="15" fill="rgb(219,148,30)" fg:x="625" fg:w="2"/><text x="50.5316%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (13 samples, 1.05%)</title><rect x="50.2816%" y="213" width="1.0459%" height="15" fill="rgb(220,109,5)" fg:x="625" fg:w="13"/><text x="50.5316%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (11 samples, 0.88%)</title><rect x="50.4425%" y="197" width="0.8850%" height="15" fill="rgb(213,203,48)" fg:x="627" fg:w="11"/><text x="50.6925%" y="207.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="51.0861%" y="181" width="0.2414%" height="15" fill="rgb(244,71,33)" fg:x="635" fg:w="3"/><text x="51.3361%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="51.3274%" y="213" width="0.3218%" height="15" fill="rgb(209,23,2)" fg:x="638" fg:w="4"/><text x="51.5774%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="51.4079%" y="197" width="0.2414%" height="15" fill="rgb(219,97,7)" fg:x="639" fg:w="3"/><text x="51.6579%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.40%)</title><rect x="51.9710%" y="149" width="0.4023%" height="15" fill="rgb(216,161,23)" fg:x="646" fg:w="5"/><text x="52.2210%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="52.0515%" y="133" width="0.3218%" height="15" fill="rgb(207,45,42)" fg:x="647" fg:w="4"/><text x="52.3015%" y="143.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="52.0515%" y="117" width="0.3218%" height="15" fill="rgb(241,61,4)" fg:x="647" fg:w="4"/><text x="52.3015%" y="127.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (9 samples, 0.72%)</title><rect x="51.8101%" y="181" width="0.7241%" height="15" fill="rgb(236,170,1)" fg:x="644" fg:w="9"/><text x="52.0601%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (8 samples, 0.64%)</title><rect x="51.8906%" y="165" width="0.6436%" height="15" fill="rgb(239,72,5)" fg:x="645" fg:w="8"/><text x="52.1406%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="52.3733%" y="149" width="0.1609%" height="15" fill="rgb(214,13,50)" fg:x="651" fg:w="2"/><text x="52.6233%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="52.3733%" y="133" width="0.1609%" height="15" fill="rgb(224,88,9)" fg:x="651" fg:w="2"/><text x="52.6233%" y="143.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="52.3733%" y="117" width="0.1609%" height="15" fill="rgb(238,192,34)" fg:x="651" fg:w="2"/><text x="52.6233%" y="127.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (2 samples, 0.16%)</title><rect x="52.5342%" y="165" width="0.1609%" height="15" fill="rgb(217,203,50)" fg:x="653" fg:w="2"/><text x="52.7842%" y="175.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.16%)</title><rect x="52.5342%" y="149" width="0.1609%" height="15" fill="rgb(241,123,32)" fg:x="653" fg:w="2"/><text x="52.7842%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (15 samples, 1.21%)</title><rect x="51.6492%" y="213" width="1.2068%" height="15" fill="rgb(248,151,39)" fg:x="642" fg:w="15"/><text x="51.8992%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (15 samples, 1.21%)</title><rect x="51.6492%" y="197" width="1.2068%" height="15" fill="rgb(208,89,6)" fg:x="642" fg:w="15"/><text x="51.8992%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (4 samples, 0.32%)</title><rect x="52.5342%" y="181" width="0.3218%" height="15" fill="rgb(254,43,26)" fg:x="653" fg:w="4"/><text x="52.7842%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (2 samples, 0.16%)</title><rect x="52.6951%" y="165" width="0.1609%" height="15" fill="rgb(216,158,13)" fg:x="655" fg:w="2"/><text x="52.9451%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="52.8560%" y="165" width="0.0805%" height="15" fill="rgb(212,47,37)" fg:x="657" fg:w="1"/><text x="53.1060%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="52.8560%" y="149" width="0.0805%" height="15" fill="rgb(254,16,10)" fg:x="657" fg:w="1"/><text x="53.1060%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.8560%" y="133" width="0.0805%" height="15" fill="rgb(223,228,16)" fg:x="657" fg:w="1"/><text x="53.1060%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.8560%" y="117" width="0.0805%" height="15" fill="rgb(249,108,50)" fg:x="657" fg:w="1"/><text x="53.1060%" y="127.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="53.5800%" y="101" width="0.3218%" height="15" fill="rgb(208,220,5)" fg:x="666" fg:w="4"/><text x="53.8300%" y="111.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="53.9019%" y="101" width="0.0805%" height="15" fill="rgb(217,89,48)" fg:x="670" fg:w="1"/><text x="54.1519%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="53.9823%" y="101" width="0.2414%" height="15" fill="rgb(212,113,41)" fg:x="671" fg:w="3"/><text x="54.2323%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="54.0628%" y="85" width="0.1609%" height="15" fill="rgb(231,127,5)" fg:x="672" fg:w="2"/><text x="54.3128%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="54.0628%" y="69" width="0.1609%" height="15" fill="rgb(217,141,17)" fg:x="672" fg:w="2"/><text x="54.3128%" y="79.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="54.0628%" y="53" width="0.1609%" height="15" fill="rgb(245,125,54)" fg:x="672" fg:w="2"/><text x="54.3128%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="54.2237%" y="101" width="0.0805%" height="15" fill="rgb(248,125,3)" fg:x="674" fg:w="1"/><text x="54.4737%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="54.2237%" y="85" width="0.0805%" height="15" fill="rgb(236,119,51)" fg:x="674" fg:w="1"/><text x="54.4737%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.2237%" y="69" width="0.0805%" height="15" fill="rgb(239,99,8)" fg:x="674" fg:w="1"/><text x="54.4737%" y="79.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="54.2237%" y="53" width="0.0805%" height="15" fill="rgb(224,228,4)" fg:x="674" fg:w="1"/><text x="54.4737%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.7064%" y="37" width="0.0805%" height="15" fill="rgb(220,131,45)" fg:x="680" fg:w="1"/><text x="54.9564%" y="47.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="54.5455%" y="69" width="0.3218%" height="15" fill="rgb(215,62,5)" fg:x="678" fg:w="4"/><text x="54.7955%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="54.7064%" y="53" width="0.1609%" height="15" fill="rgb(253,12,24)" fg:x="680" fg:w="2"/><text x="54.9564%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="54.7868%" y="37" width="0.0805%" height="15" fill="rgb(248,120,50)" fg:x="681" fg:w="1"/><text x="55.0368%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (9 samples, 0.72%)</title><rect x="54.3041%" y="101" width="0.7241%" height="15" fill="rgb(245,194,10)" fg:x="675" fg:w="9"/><text x="54.5541%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (9 samples, 0.72%)</title><rect x="54.3041%" y="85" width="0.7241%" height="15" fill="rgb(241,149,38)" fg:x="675" fg:w="9"/><text x="54.5541%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="54.8673%" y="69" width="0.1609%" height="15" fill="rgb(219,215,7)" fg:x="682" fg:w="2"/><text x="55.1173%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (49 samples, 3.94%)</title><rect x="55.0282%" y="101" width="3.9421%" height="15" fill="rgb(208,120,31)" fg:x="684" fg:w="49"/><text x="55.2782%" y="111.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (49 samples, 3.94%)</title><rect x="55.0282%" y="85" width="3.9421%" height="15" fill="rgb(244,30,8)" fg:x="684" fg:w="49"/><text x="55.2782%" y="95.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (49 samples, 3.94%)</title><rect x="55.0282%" y="69" width="3.9421%" height="15" fill="rgb(238,35,44)" fg:x="684" fg:w="49"/><text x="55.2782%" y="79.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="58.9702%" y="101" width="0.1609%" height="15" fill="rgb(243,218,37)" fg:x="733" fg:w="2"/><text x="59.2202%" y="111.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (3 samples, 0.24%)</title><rect x="59.1311%" y="101" width="0.2414%" height="15" fill="rgb(218,169,10)" fg:x="735" fg:w="3"/><text x="59.3811%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.5334%" y="53" width="0.0805%" height="15" fill="rgb(221,144,10)" fg:x="740" fg:w="1"/><text x="59.7834%" y="63.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (85 samples, 6.84%)</title><rect x="52.8560%" y="197" width="6.8383%" height="15" fill="rgb(226,41,38)" fg:x="657" fg:w="85"/><text x="53.1060%" y="207.50">&lt;core::it..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (85 samples, 6.84%)</title><rect x="52.8560%" y="181" width="6.8383%" height="15" fill="rgb(228,3,1)" fg:x="657" fg:w="85"/><text x="53.1060%" y="191.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (84 samples, 6.76%)</title><rect x="52.9364%" y="165" width="6.7578%" height="15" fill="rgb(209,129,12)" fg:x="658" fg:w="84"/><text x="53.1864%" y="175.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (84 samples, 6.76%)</title><rect x="52.9364%" y="149" width="6.7578%" height="15" fill="rgb(213,136,33)" fg:x="658" fg:w="84"/><text x="53.1864%" y="159.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (84 samples, 6.76%)</title><rect x="52.9364%" y="133" width="6.7578%" height="15" fill="rgb(209,181,29)" fg:x="658" fg:w="84"/><text x="53.1864%" y="143.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (84 samples, 6.76%)</title><rect x="52.9364%" y="117" width="6.7578%" height="15" fill="rgb(234,173,18)" fg:x="658" fg:w="84"/><text x="53.1864%" y="127.50">regex_aut..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (4 samples, 0.32%)</title><rect x="59.3725%" y="101" width="0.3218%" height="15" fill="rgb(227,73,47)" fg:x="738" fg:w="4"/><text x="59.6225%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="59.5334%" y="85" width="0.1609%" height="15" fill="rgb(234,9,34)" fg:x="740" fg:w="2"/><text x="59.7834%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="59.5334%" y="69" width="0.1609%" height="15" fill="rgb(235,172,15)" fg:x="740" fg:w="2"/><text x="59.7834%" y="79.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="59.6138%" y="53" width="0.0805%" height="15" fill="rgb(245,61,2)" fg:x="741" fg:w="1"/><text x="59.8638%" y="63.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="59.6138%" y="37" width="0.0805%" height="15" fill="rgb(238,39,47)" fg:x="741" fg:w="1"/><text x="59.8638%" y="47.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.0965%" y="181" width="0.0805%" height="15" fill="rgb(234,37,24)" fg:x="747" fg:w="1"/><text x="60.3465%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="60.1770%" y="181" width="0.2414%" height="15" fill="rgb(248,223,24)" fg:x="748" fg:w="3"/><text x="60.4270%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.3379%" y="165" width="0.0805%" height="15" fill="rgb(223,12,15)" fg:x="750" fg:w="1"/><text x="60.5879%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.3379%" y="149" width="0.0805%" height="15" fill="rgb(249,6,3)" fg:x="750" fg:w="1"/><text x="60.5879%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="60.3379%" y="133" width="0.0805%" height="15" fill="rgb(237,105,33)" fg:x="750" fg:w="1"/><text x="60.5879%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (9 samples, 0.72%)</title><rect x="60.4183%" y="181" width="0.7241%" height="15" fill="rgb(252,208,35)" fg:x="751" fg:w="9"/><text x="60.6683%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="61.0619%" y="165" width="0.0805%" height="15" fill="rgb(215,181,35)" fg:x="759" fg:w="1"/><text x="61.3119%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.0619%" y="149" width="0.0805%" height="15" fill="rgb(246,212,3)" fg:x="759" fg:w="1"/><text x="61.3119%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="61.0619%" y="133" width="0.0805%" height="15" fill="rgb(247,156,24)" fg:x="759" fg:w="1"/><text x="61.3119%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="61.1424%" y="181" width="0.0805%" height="15" fill="rgb(248,9,31)" fg:x="760" fg:w="1"/><text x="61.3924%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.3033%" y="165" width="0.0805%" height="15" fill="rgb(234,26,45)" fg:x="762" fg:w="1"/><text x="61.5533%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (108 samples, 8.69%)</title><rect x="52.8560%" y="213" width="8.6887%" height="15" fill="rgb(249,11,32)" fg:x="657" fg:w="108"/><text x="53.1060%" y="223.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (23 samples, 1.85%)</title><rect x="59.6943%" y="197" width="1.8504%" height="15" fill="rgb(249,162,33)" fg:x="742" fg:w="23"/><text x="59.9443%" y="207.50">r..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (4 samples, 0.32%)</title><rect x="61.2228%" y="181" width="0.3218%" height="15" fill="rgb(232,4,32)" fg:x="761" fg:w="4"/><text x="61.4728%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="61.3837%" y="165" width="0.1609%" height="15" fill="rgb(212,5,45)" fg:x="763" fg:w="2"/><text x="61.6337%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="61.3837%" y="149" width="0.1609%" height="15" fill="rgb(227,95,13)" fg:x="763" fg:w="2"/><text x="61.6337%" y="159.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="61.3837%" y="133" width="0.1609%" height="15" fill="rgb(223,205,10)" fg:x="763" fg:w="2"/><text x="61.6337%" y="143.50"></text></g><g><title>regex_automata::meta::strategy::new (142 samples, 11.42%)</title><rect x="50.2011%" y="229" width="11.4240%" height="15" fill="rgb(222,178,8)" fg:x="624" fg:w="142"/><text x="50.4511%" y="239.50">regex_automata::m..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="61.5447%" y="213" width="0.0805%" height="15" fill="rgb(216,13,22)" fg:x="765" fg:w="1"/><text x="61.7947%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="61.5447%" y="197" width="0.0805%" height="15" fill="rgb(240,167,12)" fg:x="765" fg:w="1"/><text x="61.7947%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="61.5447%" y="181" width="0.0805%" height="15" fill="rgb(235,68,35)" fg:x="765" fg:w="1"/><text x="61.7947%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.5447%" y="165" width="0.0805%" height="15" fill="rgb(253,40,27)" fg:x="765" fg:w="1"/><text x="61.7947%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.5447%" y="149" width="0.0805%" height="15" fill="rgb(214,19,28)" fg:x="765" fg:w="1"/><text x="61.7947%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.5447%" y="133" width="0.0805%" height="15" fill="rgb(210,167,45)" fg:x="765" fg:w="1"/><text x="61.7947%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="61.7056%" y="197" width="0.0805%" height="15" fill="rgb(232,97,40)" fg:x="767" fg:w="1"/><text x="61.9556%" y="207.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="61.7056%" y="181" width="0.0805%" height="15" fill="rgb(250,35,23)" fg:x="767" fg:w="1"/><text x="61.9556%" y="191.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="61.7860%" y="181" width="0.0805%" height="15" fill="rgb(248,47,53)" fg:x="768" fg:w="1"/><text x="62.0360%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (2 samples, 0.16%)</title><rect x="61.7860%" y="197" width="0.1609%" height="15" fill="rgb(226,58,50)" fg:x="768" fg:w="2"/><text x="62.0360%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="61.8665%" y="181" width="0.0805%" height="15" fill="rgb(217,105,26)" fg:x="769" fg:w="1"/><text x="62.1165%" y="191.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="61.9469%" y="181" width="0.0805%" height="15" fill="rgb(208,64,1)" fg:x="770" fg:w="1"/><text x="62.1969%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="61.6251%" y="229" width="0.4827%" height="15" fill="rgb(214,80,1)" fg:x="766" fg:w="6"/><text x="61.8751%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.48%)</title><rect x="61.6251%" y="213" width="0.4827%" height="15" fill="rgb(206,175,26)" fg:x="766" fg:w="6"/><text x="61.8751%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="61.9469%" y="197" width="0.1609%" height="15" fill="rgb(235,156,37)" fg:x="770" fg:w="2"/><text x="62.1969%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.0274%" y="181" width="0.0805%" height="15" fill="rgb(213,100,9)" fg:x="771" fg:w="1"/><text x="62.2774%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (7 samples, 0.56%)</title><rect x="62.2687%" y="181" width="0.5632%" height="15" fill="rgb(241,15,13)" fg:x="774" fg:w="7"/><text x="62.5187%" y="191.50"></text></g><g><title>core::slice::sort::merge_sort (5 samples, 0.40%)</title><rect x="62.4296%" y="165" width="0.4023%" height="15" fill="rgb(205,97,43)" fg:x="776" fg:w="5"/><text x="62.6796%" y="175.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="62.8319%" y="181" width="0.0805%" height="15" fill="rgb(216,106,32)" fg:x="781" fg:w="1"/><text x="63.0819%" y="191.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="62.8319%" y="165" width="0.0805%" height="15" fill="rgb(226,200,8)" fg:x="781" fg:w="1"/><text x="63.0819%" y="175.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="62.8319%" y="149" width="0.0805%" height="15" fill="rgb(244,54,29)" fg:x="781" fg:w="1"/><text x="63.0819%" y="159.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (10 samples, 0.80%)</title><rect x="62.1883%" y="197" width="0.8045%" height="15" fill="rgb(252,169,12)" fg:x="773" fg:w="10"/><text x="62.4383%" y="207.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="62.9123%" y="181" width="0.0805%" height="15" fill="rgb(231,199,11)" fg:x="782" fg:w="1"/><text x="63.1623%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="62.9928%" y="197" width="0.1609%" height="15" fill="rgb(233,191,18)" fg:x="783" fg:w="2"/><text x="63.2428%" y="207.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="63.0732%" y="181" width="0.0805%" height="15" fill="rgb(215,83,47)" fg:x="784" fg:w="1"/><text x="63.3232%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.0732%" y="165" width="0.0805%" height="15" fill="rgb(251,67,19)" fg:x="784" fg:w="1"/><text x="63.3232%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (171 samples, 13.76%)</title><rect x="49.4771%" y="277" width="13.7570%" height="15" fill="rgb(240,7,20)" fg:x="615" fg:w="171"/><text x="49.7271%" y="287.50">&lt;regex::regex::string..</text></g><g><title>regex::builders::string::RegexBuilder::build (171 samples, 13.76%)</title><rect x="49.4771%" y="261" width="13.7570%" height="15" fill="rgb(210,150,26)" fg:x="615" fg:w="171"/><text x="49.7271%" y="271.50">regex::builders::stri..</text></g><g><title>regex_automata::meta::regex::Builder::build (171 samples, 13.76%)</title><rect x="49.4771%" y="245" width="13.7570%" height="15" fill="rgb(228,75,42)" fg:x="615" fg:w="171"/><text x="49.7271%" y="255.50">regex_automata::meta:..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (14 samples, 1.13%)</title><rect x="62.1078%" y="229" width="1.1263%" height="15" fill="rgb(237,134,48)" fg:x="772" fg:w="14"/><text x="62.3578%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (14 samples, 1.13%)</title><rect x="62.1078%" y="213" width="1.1263%" height="15" fill="rgb(205,80,50)" fg:x="772" fg:w="14"/><text x="62.3578%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="63.1537%" y="197" width="0.0805%" height="15" fill="rgb(217,74,48)" fg:x="785" fg:w="1"/><text x="63.4037%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="63.1537%" y="181" width="0.0805%" height="15" fill="rgb(205,82,50)" fg:x="785" fg:w="1"/><text x="63.4037%" y="191.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="63.3146%" y="229" width="0.0805%" height="15" fill="rgb(228,1,33)" fg:x="787" fg:w="1"/><text x="63.5646%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="63.3950%" y="213" width="0.0805%" height="15" fill="rgb(214,50,23)" fg:x="788" fg:w="1"/><text x="63.6450%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::RegexInfoI&gt; (1 samples, 0.08%)</title><rect x="63.3950%" y="197" width="0.0805%" height="15" fill="rgb(210,62,9)" fg:x="788" fg:w="1"/><text x="63.6450%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (2 samples, 0.16%)</title><rect x="63.3950%" y="229" width="0.1609%" height="15" fill="rgb(210,104,37)" fg:x="788" fg:w="2"/><text x="63.6450%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::OnePass&gt; (1 samples, 0.08%)</title><rect x="63.4755%" y="213" width="0.0805%" height="15" fill="rgb(232,104,43)" fg:x="789" fg:w="1"/><text x="63.7255%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.4755%" y="197" width="0.0805%" height="15" fill="rgb(244,52,6)" fg:x="789" fg:w="1"/><text x="63.7255%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.32%)</title><rect x="63.3146%" y="245" width="0.3218%" height="15" fill="rgb(211,174,52)" fg:x="787" fg:w="4"/><text x="63.5646%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="63.5559%" y="229" width="0.0805%" height="15" fill="rgb(229,48,4)" fg:x="790" fg:w="1"/><text x="63.8059%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="63.5559%" y="213" width="0.0805%" height="15" fill="rgb(205,155,16)" fg:x="790" fg:w="1"/><text x="63.8059%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.5559%" y="197" width="0.0805%" height="15" fill="rgb(211,141,53)" fg:x="790" fg:w="1"/><text x="63.8059%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (7 samples, 0.56%)</title><rect x="63.2341%" y="277" width="0.5632%" height="15" fill="rgb(240,148,11)" fg:x="786" fg:w="7"/><text x="63.4841%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::panic::unwind_safe::UnwindSafe+core::marker::Sync+core::panic::unwind_safe::RefUnwindSafe+core::marker::Send&gt;&gt;&gt; (7 samples, 0.56%)</title><rect x="63.2341%" y="261" width="0.5632%" height="15" fill="rgb(214,45,23)" fg:x="786" fg:w="7"/><text x="63.4841%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="63.6364%" y="245" width="0.1609%" height="15" fill="rgb(248,74,26)" fg:x="791" fg:w="2"/><text x="63.8864%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="63.6364%" y="229" width="0.1609%" height="15" fill="rgb(218,121,16)" fg:x="791" fg:w="2"/><text x="63.8864%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.7168%" y="213" width="0.0805%" height="15" fill="rgb(218,10,47)" fg:x="792" fg:w="1"/><text x="63.9668%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="63.8777%" y="229" width="0.0805%" height="15" fill="rgb(227,99,14)" fg:x="794" fg:w="1"/><text x="64.1277%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="64.0386%" y="213" width="0.0805%" height="15" fill="rgb(229,83,46)" fg:x="796" fg:w="1"/><text x="64.2886%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.0386%" y="197" width="0.0805%" height="15" fill="rgb(228,25,1)" fg:x="796" fg:w="1"/><text x="64.2886%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.0386%" y="181" width="0.0805%" height="15" fill="rgb(252,190,15)" fg:x="796" fg:w="1"/><text x="64.2886%" y="191.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (5 samples, 0.40%)</title><rect x="63.7973%" y="261" width="0.4023%" height="15" fill="rgb(213,103,51)" fg:x="793" fg:w="5"/><text x="64.0473%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (5 samples, 0.40%)</title><rect x="63.7973%" y="245" width="0.4023%" height="15" fill="rgb(220,38,44)" fg:x="793" fg:w="5"/><text x="64.0473%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (3 samples, 0.24%)</title><rect x="63.9582%" y="229" width="0.2414%" height="15" fill="rgb(210,45,26)" fg:x="795" fg:w="3"/><text x="64.2082%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.1191%" y="213" width="0.0805%" height="15" fill="rgb(205,95,48)" fg:x="797" fg:w="1"/><text x="64.3691%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="64.1191%" y="197" width="0.0805%" height="15" fill="rgb(225,179,37)" fg:x="797" fg:w="1"/><text x="64.3691%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="64.1191%" y="181" width="0.0805%" height="15" fill="rgb(230,209,3)" fg:x="797" fg:w="1"/><text x="64.3691%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::Cache::new (1 samples, 0.08%)</title><rect x="64.1995%" y="213" width="0.0805%" height="15" fill="rgb(248,12,46)" fg:x="798" fg:w="1"/><text x="64.4495%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="64.1995%" y="197" width="0.0805%" height="15" fill="rgb(234,18,0)" fg:x="798" fg:w="1"/><text x="64.4495%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.1995%" y="181" width="0.0805%" height="15" fill="rgb(238,197,14)" fg:x="798" fg:w="1"/><text x="64.4495%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.48%)</title><rect x="64.2800%" y="197" width="0.4827%" height="15" fill="rgb(251,162,48)" fg:x="799" fg:w="6"/><text x="64.5300%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="64.5213%" y="181" width="0.2414%" height="15" fill="rgb(237,73,42)" fg:x="802" fg:w="3"/><text x="64.7713%" y="191.50"></text></g><g><title>indefinite::rules::number::Number::check (191 samples, 15.37%)</title><rect x="49.4771%" y="293" width="15.3660%" height="15" fill="rgb(211,108,8)" fg:x="615" fg:w="191"/><text x="49.7271%" y="303.50">indefinite::rules::numbe..</text></g><g><title>regex::regex::string::Regex::is_match_at (13 samples, 1.05%)</title><rect x="63.7973%" y="277" width="1.0459%" height="15" fill="rgb(213,45,22)" fg:x="793" fg:w="13"/><text x="64.0473%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.64%)</title><rect x="64.1995%" y="261" width="0.6436%" height="15" fill="rgb(252,154,5)" fg:x="798" fg:w="8"/><text x="64.4495%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.64%)</title><rect x="64.1995%" y="245" width="0.6436%" height="15" fill="rgb(221,79,52)" fg:x="798" fg:w="8"/><text x="64.4495%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.64%)</title><rect x="64.1995%" y="229" width="0.6436%" height="15" fill="rgb(229,220,36)" fg:x="798" fg:w="8"/><text x="64.4495%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.56%)</title><rect x="64.2800%" y="213" width="0.5632%" height="15" fill="rgb(211,17,16)" fg:x="799" fg:w="7"/><text x="64.5300%" y="223.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="64.7627%" y="197" width="0.0805%" height="15" fill="rgb(222,55,31)" fg:x="805" fg:w="1"/><text x="65.0127%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="64.7627%" y="181" width="0.0805%" height="15" fill="rgb(221,221,31)" fg:x="805" fg:w="1"/><text x="65.0127%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.7627%" y="165" width="0.0805%" height="15" fill="rgb(227,168,26)" fg:x="805" fg:w="1"/><text x="65.0127%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.7627%" y="149" width="0.0805%" height="15" fill="rgb(224,139,9)" fg:x="805" fg:w="1"/><text x="65.0127%" y="159.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="64.8431%" y="277" width="0.0805%" height="15" fill="rgb(254,172,0)" fg:x="806" fg:w="1"/><text x="65.0931%" y="287.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.08%)</title><rect x="64.8431%" y="261" width="0.0805%" height="15" fill="rgb(235,203,1)" fg:x="806" fg:w="1"/><text x="65.0931%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.08%)</title><rect x="64.8431%" y="245" width="0.0805%" height="15" fill="rgb(216,205,24)" fg:x="806" fg:w="1"/><text x="65.0931%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.0040%" y="213" width="0.0805%" height="15" fill="rgb(233,24,6)" fg:x="808" fg:w="1"/><text x="65.2540%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.0040%" y="197" width="0.0805%" height="15" fill="rgb(244,110,9)" fg:x="808" fg:w="1"/><text x="65.2540%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="65.0040%" y="181" width="0.0805%" height="15" fill="rgb(239,222,42)" fg:x="808" fg:w="1"/><text x="65.2540%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="65.0040%" y="165" width="0.0805%" height="15" fill="rgb(218,145,13)" fg:x="808" fg:w="1"/><text x="65.2540%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.0040%" y="149" width="0.0805%" height="15" fill="rgb(207,69,11)" fg:x="808" fg:w="1"/><text x="65.2540%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="65.0040%" y="133" width="0.0805%" height="15" fill="rgb(220,223,22)" fg:x="808" fg:w="1"/><text x="65.2540%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="65.0845%" y="213" width="0.1609%" height="15" fill="rgb(245,102,5)" fg:x="809" fg:w="2"/><text x="65.3345%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="65.0845%" y="197" width="0.1609%" height="15" fill="rgb(211,148,2)" fg:x="809" fg:w="2"/><text x="65.3345%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="65.0845%" y="181" width="0.1609%" height="15" fill="rgb(241,13,44)" fg:x="809" fg:w="2"/><text x="65.3345%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="65.2454%" y="197" width="0.0805%" height="15" fill="rgb(219,137,21)" fg:x="811" fg:w="1"/><text x="65.4954%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.2454%" y="181" width="0.0805%" height="15" fill="rgb(242,206,5)" fg:x="811" fg:w="1"/><text x="65.4954%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="65.3258%" y="181" width="0.0805%" height="15" fill="rgb(217,114,22)" fg:x="812" fg:w="1"/><text x="65.5758%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="65.3258%" y="165" width="0.0805%" height="15" fill="rgb(253,206,42)" fg:x="812" fg:w="1"/><text x="65.5758%" y="175.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="65.3258%" y="197" width="0.1609%" height="15" fill="rgb(236,102,18)" fg:x="812" fg:w="2"/><text x="65.5758%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="65.4063%" y="181" width="0.0805%" height="15" fill="rgb(208,59,49)" fg:x="813" fg:w="1"/><text x="65.6563%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="65.4867%" y="149" width="0.0805%" height="15" fill="rgb(215,194,28)" fg:x="814" fg:w="1"/><text x="65.7367%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.4867%" y="133" width="0.0805%" height="15" fill="rgb(243,207,11)" fg:x="814" fg:w="1"/><text x="65.7367%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="65.5672%" y="117" width="0.0805%" height="15" fill="rgb(254,179,35)" fg:x="815" fg:w="1"/><text x="65.8172%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="65.4867%" y="181" width="0.2414%" height="15" fill="rgb(235,97,3)" fg:x="814" fg:w="3"/><text x="65.7367%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (3 samples, 0.24%)</title><rect x="65.4867%" y="165" width="0.2414%" height="15" fill="rgb(215,155,33)" fg:x="814" fg:w="3"/><text x="65.7367%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="65.5672%" y="149" width="0.1609%" height="15" fill="rgb(223,128,12)" fg:x="815" fg:w="2"/><text x="65.8172%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="65.5672%" y="133" width="0.1609%" height="15" fill="rgb(208,157,18)" fg:x="815" fg:w="2"/><text x="65.8172%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="65.6476%" y="117" width="0.0805%" height="15" fill="rgb(249,70,54)" fg:x="816" fg:w="1"/><text x="65.8976%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.6476%" y="101" width="0.0805%" height="15" fill="rgb(244,118,24)" fg:x="816" fg:w="1"/><text x="65.8976%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.6476%" y="85" width="0.0805%" height="15" fill="rgb(211,54,0)" fg:x="816" fg:w="1"/><text x="65.8976%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="65.6476%" y="69" width="0.0805%" height="15" fill="rgb(245,137,45)" fg:x="816" fg:w="1"/><text x="65.8976%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="65.7281%" y="165" width="0.0805%" height="15" fill="rgb(232,154,31)" fg:x="817" fg:w="1"/><text x="65.9781%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (11 samples, 0.88%)</title><rect x="65.2454%" y="213" width="0.8850%" height="15" fill="rgb(253,6,39)" fg:x="811" fg:w="11"/><text x="65.4954%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (8 samples, 0.64%)</title><rect x="65.4867%" y="197" width="0.6436%" height="15" fill="rgb(234,183,24)" fg:x="814" fg:w="8"/><text x="65.7367%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="65.7281%" y="181" width="0.4023%" height="15" fill="rgb(252,84,40)" fg:x="817" fg:w="5"/><text x="65.9781%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="65.8085%" y="165" width="0.3218%" height="15" fill="rgb(224,65,2)" fg:x="818" fg:w="4"/><text x="66.0585%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.0499%" y="149" width="0.0805%" height="15" fill="rgb(229,38,24)" fg:x="821" fg:w="1"/><text x="66.2999%" y="159.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="66.1303%" y="165" width="0.0805%" height="15" fill="rgb(218,131,50)" fg:x="822" fg:w="1"/><text x="66.3803%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="66.2108%" y="133" width="0.0805%" height="15" fill="rgb(233,106,18)" fg:x="823" fg:w="1"/><text x="66.4608%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="66.2108%" y="165" width="0.1609%" height="15" fill="rgb(220,216,11)" fg:x="823" fg:w="2"/><text x="66.4608%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (2 samples, 0.16%)</title><rect x="66.2108%" y="149" width="0.1609%" height="15" fill="rgb(251,100,45)" fg:x="823" fg:w="2"/><text x="66.4608%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="66.2912%" y="133" width="0.0805%" height="15" fill="rgb(235,143,32)" fg:x="824" fg:w="1"/><text x="66.5412%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="66.3717%" y="165" width="0.0805%" height="15" fill="rgb(248,124,34)" fg:x="825" fg:w="1"/><text x="66.6217%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="66.3717%" y="149" width="0.0805%" height="15" fill="rgb(225,221,4)" fg:x="825" fg:w="1"/><text x="66.6217%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (7 samples, 0.56%)</title><rect x="66.1303%" y="181" width="0.5632%" height="15" fill="rgb(242,27,43)" fg:x="822" fg:w="7"/><text x="66.3803%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="66.4521%" y="165" width="0.2414%" height="15" fill="rgb(227,54,8)" fg:x="826" fg:w="3"/><text x="66.7021%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="66.4521%" y="149" width="0.2414%" height="15" fill="rgb(253,139,49)" fg:x="826" fg:w="3"/><text x="66.7021%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="66.4521%" y="133" width="0.2414%" height="15" fill="rgb(231,26,43)" fg:x="826" fg:w="3"/><text x="66.7021%" y="143.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="66.4521%" y="117" width="0.2414%" height="15" fill="rgb(207,121,39)" fg:x="826" fg:w="3"/><text x="66.7021%" y="127.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.64%)</title><rect x="66.1303%" y="213" width="0.6436%" height="15" fill="rgb(223,101,35)" fg:x="822" fg:w="8"/><text x="66.3803%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.64%)</title><rect x="66.1303%" y="197" width="0.6436%" height="15" fill="rgb(232,87,23)" fg:x="822" fg:w="8"/><text x="66.3803%" y="207.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="66.6935%" y="181" width="0.0805%" height="15" fill="rgb(225,180,29)" fg:x="829" fg:w="1"/><text x="66.9435%" y="191.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="66.6935%" y="165" width="0.0805%" height="15" fill="rgb(225,25,17)" fg:x="829" fg:w="1"/><text x="66.9435%" y="175.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (23 samples, 1.85%)</title><rect x="65.0040%" y="245" width="1.8504%" height="15" fill="rgb(223,8,52)" fg:x="808" fg:w="23"/><text x="65.2540%" y="255.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (23 samples, 1.85%)</title><rect x="65.0040%" y="229" width="1.8504%" height="15" fill="rgb(246,42,21)" fg:x="808" fg:w="23"/><text x="65.2540%" y="239.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="66.7739%" y="213" width="0.0805%" height="15" fill="rgb(205,64,43)" fg:x="830" fg:w="1"/><text x="67.0239%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="66.7739%" y="197" width="0.0805%" height="15" fill="rgb(221,160,13)" fg:x="830" fg:w="1"/><text x="67.0239%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="66.7739%" y="181" width="0.0805%" height="15" fill="rgb(239,58,35)" fg:x="830" fg:w="1"/><text x="67.0239%" y="191.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="66.7739%" y="165" width="0.0805%" height="15" fill="rgb(251,26,40)" fg:x="830" fg:w="1"/><text x="67.0239%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.7739%" y="149" width="0.0805%" height="15" fill="rgb(247,0,4)" fg:x="830" fg:w="1"/><text x="67.0239%" y="159.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (24 samples, 1.93%)</title><rect x="65.0040%" y="261" width="1.9308%" height="15" fill="rgb(218,130,10)" fg:x="808" fg:w="24"/><text x="65.2540%" y="271.50">&lt;..</text></g><g><title>regex::builders::string::RegexBuilder::new (1 samples, 0.08%)</title><rect x="66.8544%" y="245" width="0.0805%" height="15" fill="rgb(239,32,7)" fg:x="831" fg:w="1"/><text x="67.1044%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="66.8544%" y="229" width="0.0805%" height="15" fill="rgb(210,192,24)" fg:x="831" fg:w="1"/><text x="67.1044%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="66.9348%" y="229" width="0.0805%" height="15" fill="rgb(226,212,17)" fg:x="832" fg:w="1"/><text x="67.1848%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="66.9348%" y="213" width="0.0805%" height="15" fill="rgb(219,201,28)" fg:x="832" fg:w="1"/><text x="67.1848%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="66.9348%" y="197" width="0.0805%" height="15" fill="rgb(235,207,41)" fg:x="832" fg:w="1"/><text x="67.1848%" y="207.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="66.9348%" y="261" width="0.1609%" height="15" fill="rgb(241,95,54)" fg:x="832" fg:w="2"/><text x="67.1848%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="66.9348%" y="245" width="0.1609%" height="15" fill="rgb(248,12,23)" fg:x="832" fg:w="2"/><text x="67.1848%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="67.0153%" y="229" width="0.0805%" height="15" fill="rgb(228,173,4)" fg:x="833" fg:w="1"/><text x="67.2653%" y="239.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="67.0153%" y="213" width="0.0805%" height="15" fill="rgb(254,99,5)" fg:x="833" fg:w="1"/><text x="67.2653%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="67.0957%" y="229" width="0.0805%" height="15" fill="rgb(212,184,17)" fg:x="834" fg:w="1"/><text x="67.3457%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="67.0957%" y="213" width="0.0805%" height="15" fill="rgb(252,174,1)" fg:x="834" fg:w="1"/><text x="67.3457%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="67.0957%" y="197" width="0.0805%" height="15" fill="rgb(241,118,51)" fg:x="834" fg:w="1"/><text x="67.3457%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="67.0957%" y="261" width="0.2414%" height="15" fill="rgb(227,94,47)" fg:x="834" fg:w="3"/><text x="67.3457%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::panic::unwind_safe::UnwindSafe+core::marker::Sync+core::panic::unwind_safe::RefUnwindSafe+core::marker::Send&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="67.0957%" y="245" width="0.2414%" height="15" fill="rgb(229,104,2)" fg:x="834" fg:w="3"/><text x="67.3457%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="67.1762%" y="229" width="0.1609%" height="15" fill="rgb(219,28,31)" fg:x="835" fg:w="2"/><text x="67.4262%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="67.1762%" y="213" width="0.1609%" height="15" fill="rgb(233,109,36)" fg:x="835" fg:w="2"/><text x="67.4262%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.2566%" y="197" width="0.0805%" height="15" fill="rgb(246,88,11)" fg:x="836" fg:w="1"/><text x="67.5066%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="67.3371%" y="213" width="0.2414%" height="15" fill="rgb(209,212,17)" fg:x="837" fg:w="3"/><text x="67.5871%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="67.3371%" y="197" width="0.2414%" height="15" fill="rgb(243,59,29)" fg:x="837" fg:w="3"/><text x="67.5871%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="67.4980%" y="181" width="0.0805%" height="15" fill="rgb(244,205,48)" fg:x="839" fg:w="1"/><text x="67.7480%" y="191.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (374 samples, 30.09%)</title><rect x="37.5704%" y="373" width="30.0885%" height="15" fill="rgb(227,30,6)" fg:x="467" fg:w="374"/><text x="37.8204%" y="383.50">&lt;&amp;kernel::model::EntityPtr as plugins_core::look..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (351 samples, 28.24%)</title><rect x="39.4208%" y="357" width="28.2381%" height="15" fill="rgb(220,205,48)" fg:x="490" fg:w="351"/><text x="39.6708%" y="367.50">plugins_core::looking::model::Unqualified::qu..</text></g><g><title>indefinite::indefinite (350 samples, 28.16%)</title><rect x="39.5012%" y="341" width="28.1577%" height="15" fill="rgb(250,94,14)" fg:x="491" fg:w="350"/><text x="39.7512%" y="351.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (350 samples, 28.16%)</title><rect x="39.5012%" y="325" width="28.1577%" height="15" fill="rgb(216,119,42)" fg:x="491" fg:w="350"/><text x="39.7512%" y="335.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (347 samples, 27.92%)</title><rect x="39.7426%" y="309" width="27.9163%" height="15" fill="rgb(232,155,0)" fg:x="494" fg:w="347"/><text x="39.9926%" y="319.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (35 samples, 2.82%)</title><rect x="64.8431%" y="293" width="2.8158%" height="15" fill="rgb(212,24,32)" fg:x="806" fg:w="35"/><text x="65.0931%" y="303.50">in..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (34 samples, 2.74%)</title><rect x="64.9236%" y="277" width="2.7353%" height="15" fill="rgb(216,69,20)" fg:x="807" fg:w="34"/><text x="65.1736%" y="287.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="67.3371%" y="261" width="0.3218%" height="15" fill="rgb(229,73,31)" fg:x="837" fg:w="4"/><text x="67.5871%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="67.3371%" y="245" width="0.3218%" height="15" fill="rgb(224,219,20)" fg:x="837" fg:w="4"/><text x="67.5871%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="67.3371%" y="229" width="0.3218%" height="15" fill="rgb(215,146,41)" fg:x="837" fg:w="4"/><text x="67.5871%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="67.5784%" y="213" width="0.0805%" height="15" fill="rgb(244,71,31)" fg:x="840" fg:w="1"/><text x="67.8284%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="67.5784%" y="197" width="0.0805%" height="15" fill="rgb(224,24,11)" fg:x="840" fg:w="1"/><text x="67.8284%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.5784%" y="181" width="0.0805%" height="15" fill="rgb(229,76,15)" fg:x="840" fg:w="1"/><text x="67.8284%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.5784%" y="165" width="0.0805%" height="15" fill="rgb(209,93,2)" fg:x="840" fg:w="1"/><text x="67.8284%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.5784%" y="149" width="0.0805%" height="15" fill="rgb(216,200,50)" fg:x="840" fg:w="1"/><text x="67.8284%" y="159.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="67.8198%" y="325" width="0.0805%" height="15" fill="rgb(211,67,34)" fg:x="843" fg:w="1"/><text x="68.0698%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.8198%" y="309" width="0.0805%" height="15" fill="rgb(225,87,47)" fg:x="843" fg:w="1"/><text x="68.0698%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.40%)</title><rect x="67.6589%" y="373" width="0.4023%" height="15" fill="rgb(217,185,16)" fg:x="841" fg:w="5"/><text x="67.9089%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="67.6589%" y="357" width="0.4023%" height="15" fill="rgb(205,0,0)" fg:x="841" fg:w="5"/><text x="67.9089%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="67.6589%" y="341" width="0.4023%" height="15" fill="rgb(207,116,45)" fg:x="841" fg:w="5"/><text x="67.9089%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="67.9002%" y="325" width="0.1609%" height="15" fill="rgb(221,156,26)" fg:x="844" fg:w="2"/><text x="68.1502%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="67.9002%" y="309" width="0.1609%" height="15" fill="rgb(213,140,4)" fg:x="844" fg:w="2"/><text x="68.1502%" y="319.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="67.9002%" y="293" width="0.1609%" height="15" fill="rgb(231,224,15)" fg:x="844" fg:w="2"/><text x="68.1502%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="67.9002%" y="277" width="0.1609%" height="15" fill="rgb(244,76,20)" fg:x="844" fg:w="2"/><text x="68.1502%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="67.9002%" y="261" width="0.1609%" height="15" fill="rgb(238,117,7)" fg:x="844" fg:w="2"/><text x="68.1502%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="67.9807%" y="245" width="0.0805%" height="15" fill="rgb(235,1,10)" fg:x="845" fg:w="1"/><text x="68.2307%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.9807%" y="229" width="0.0805%" height="15" fill="rgb(216,165,6)" fg:x="845" fg:w="1"/><text x="68.2307%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="68.0611%" y="373" width="0.0805%" height="15" fill="rgb(246,91,35)" fg:x="846" fg:w="1"/><text x="68.3111%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::into_iter::IntoIter&lt;core::option::Option&lt;replies::ObservedEntity&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="68.0611%" y="357" width="0.0805%" height="15" fill="rgb(228,96,24)" fg:x="846" fg:w="1"/><text x="68.3111%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.0611%" y="341" width="0.0805%" height="15" fill="rgb(254,217,53)" fg:x="846" fg:w="1"/><text x="68.3111%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.1416%" y="309" width="0.0805%" height="15" fill="rgb(209,60,0)" fg:x="847" fg:w="1"/><text x="68.3916%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.1416%" y="293" width="0.0805%" height="15" fill="rgb(250,93,26)" fg:x="847" fg:w="1"/><text x="68.3916%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.1416%" y="277" width="0.0805%" height="15" fill="rgb(211,9,40)" fg:x="847" fg:w="1"/><text x="68.3916%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.1416%" y="261" width="0.0805%" height="15" fill="rgb(242,57,20)" fg:x="847" fg:w="1"/><text x="68.3916%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.1416%" y="245" width="0.0805%" height="15" fill="rgb(248,85,48)" fg:x="847" fg:w="1"/><text x="68.3916%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.1416%" y="229" width="0.0805%" height="15" fill="rgb(212,117,2)" fg:x="847" fg:w="1"/><text x="68.3916%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.1416%" y="213" width="0.0805%" height="15" fill="rgb(243,19,3)" fg:x="847" fg:w="1"/><text x="68.3916%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.1416%" y="197" width="0.0805%" height="15" fill="rgb(232,217,24)" fg:x="847" fg:w="1"/><text x="68.3916%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.1416%" y="181" width="0.0805%" height="15" fill="rgb(224,175,40)" fg:x="847" fg:w="1"/><text x="68.3916%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.1416%" y="165" width="0.0805%" height="15" fill="rgb(212,162,32)" fg:x="847" fg:w="1"/><text x="68.3916%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.1416%" y="149" width="0.0805%" height="15" fill="rgb(215,9,4)" fg:x="847" fg:w="1"/><text x="68.3916%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.1416%" y="133" width="0.0805%" height="15" fill="rgb(242,42,7)" fg:x="847" fg:w="1"/><text x="68.3916%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.1416%" y="117" width="0.0805%" height="15" fill="rgb(242,184,45)" fg:x="847" fg:w="1"/><text x="68.3916%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.1416%" y="101" width="0.0805%" height="15" fill="rgb(228,111,51)" fg:x="847" fg:w="1"/><text x="68.3916%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.1416%" y="85" width="0.0805%" height="15" fill="rgb(236,147,17)" fg:x="847" fg:w="1"/><text x="68.3916%" y="95.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="68.1416%" y="341" width="0.1609%" height="15" fill="rgb(210,75,22)" fg:x="847" fg:w="2"/><text x="68.3916%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="68.1416%" y="325" width="0.1609%" height="15" fill="rgb(217,159,45)" fg:x="847" fg:w="2"/><text x="68.3916%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.2220%" y="309" width="0.0805%" height="15" fill="rgb(245,165,53)" fg:x="848" fg:w="1"/><text x="68.4720%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.2220%" y="293" width="0.0805%" height="15" fill="rgb(251,190,50)" fg:x="848" fg:w="1"/><text x="68.4720%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.2220%" y="277" width="0.0805%" height="15" fill="rgb(208,203,29)" fg:x="848" fg:w="1"/><text x="68.4720%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="68.3025%" y="325" width="0.0805%" height="15" fill="rgb(207,209,35)" fg:x="849" fg:w="1"/><text x="68.5525%" y="335.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="68.3829%" y="325" width="0.0805%" height="15" fill="rgb(230,144,49)" fg:x="850" fg:w="1"/><text x="68.6329%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="68.3025%" y="341" width="0.2414%" height="15" fill="rgb(229,31,6)" fg:x="849" fg:w="3"/><text x="68.5525%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.4634%" y="325" width="0.0805%" height="15" fill="rgb(251,129,24)" fg:x="851" fg:w="1"/><text x="68.7134%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.4634%" y="309" width="0.0805%" height="15" fill="rgb(235,105,15)" fg:x="851" fg:w="1"/><text x="68.7134%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.5438%" y="245" width="0.0805%" height="15" fill="rgb(216,52,43)" fg:x="852" fg:w="1"/><text x="68.7938%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="68.5438%" y="325" width="0.1609%" height="15" fill="rgb(238,144,41)" fg:x="852" fg:w="2"/><text x="68.7938%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="68.5438%" y="309" width="0.1609%" height="15" fill="rgb(243,63,9)" fg:x="852" fg:w="2"/><text x="68.7938%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.5438%" y="293" width="0.1609%" height="15" fill="rgb(246,208,1)" fg:x="852" fg:w="2"/><text x="68.7938%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="68.5438%" y="277" width="0.1609%" height="15" fill="rgb(233,182,18)" fg:x="852" fg:w="2"/><text x="68.7938%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.5438%" y="261" width="0.1609%" height="15" fill="rgb(242,224,8)" fg:x="852" fg:w="2"/><text x="68.7938%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.6243%" y="245" width="0.0805%" height="15" fill="rgb(243,54,37)" fg:x="853" fg:w="1"/><text x="68.8743%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.6243%" y="229" width="0.0805%" height="15" fill="rgb(233,192,12)" fg:x="853" fg:w="1"/><text x="68.8743%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.6243%" y="213" width="0.0805%" height="15" fill="rgb(251,192,53)" fg:x="853" fg:w="1"/><text x="68.8743%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (8 samples, 0.64%)</title><rect x="68.1416%" y="357" width="0.6436%" height="15" fill="rgb(246,141,26)" fg:x="847" fg:w="8"/><text x="68.3916%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::gid (3 samples, 0.24%)</title><rect x="68.5438%" y="341" width="0.2414%" height="15" fill="rgb(239,195,19)" fg:x="852" fg:w="3"/><text x="68.7938%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.7047%" y="325" width="0.0805%" height="15" fill="rgb(241,16,39)" fg:x="854" fg:w="1"/><text x="68.9547%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.7852%" y="293" width="0.0805%" height="15" fill="rgb(223,13,53)" fg:x="855" fg:w="1"/><text x="69.0352%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.7852%" y="277" width="0.0805%" height="15" fill="rgb(214,227,0)" fg:x="855" fg:w="1"/><text x="69.0352%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.7852%" y="261" width="0.0805%" height="15" fill="rgb(228,103,26)" fg:x="855" fg:w="1"/><text x="69.0352%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.8656%" y="165" width="0.0805%" height="15" fill="rgb(254,177,53)" fg:x="856" fg:w="1"/><text x="69.1156%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.8656%" y="149" width="0.0805%" height="15" fill="rgb(208,201,34)" fg:x="856" fg:w="1"/><text x="69.1156%" y="159.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="68.8656%" y="133" width="0.0805%" height="15" fill="rgb(212,39,5)" fg:x="856" fg:w="1"/><text x="69.1156%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.8656%" y="117" width="0.0805%" height="15" fill="rgb(246,117,3)" fg:x="856" fg:w="1"/><text x="69.1156%" y="127.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.8656%" y="101" width="0.0805%" height="15" fill="rgb(244,118,39)" fg:x="856" fg:w="1"/><text x="69.1156%" y="111.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="68.8656%" y="85" width="0.0805%" height="15" fill="rgb(241,64,10)" fg:x="856" fg:w="1"/><text x="69.1156%" y="95.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.8656%" y="69" width="0.0805%" height="15" fill="rgb(229,39,44)" fg:x="856" fg:w="1"/><text x="69.1156%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.8656%" y="53" width="0.0805%" height="15" fill="rgb(230,226,3)" fg:x="856" fg:w="1"/><text x="69.1156%" y="63.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="68.8656%" y="197" width="0.1609%" height="15" fill="rgb(222,13,42)" fg:x="856" fg:w="2"/><text x="69.1156%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.8656%" y="181" width="0.1609%" height="15" fill="rgb(247,180,54)" fg:x="856" fg:w="2"/><text x="69.1156%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.9461%" y="165" width="0.0805%" height="15" fill="rgb(205,96,16)" fg:x="857" fg:w="1"/><text x="69.1961%" y="175.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="68.9461%" y="149" width="0.0805%" height="15" fill="rgb(205,100,21)" fg:x="857" fg:w="1"/><text x="69.1961%" y="159.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="68.8656%" y="293" width="0.2414%" height="15" fill="rgb(248,51,4)" fg:x="856" fg:w="3"/><text x="69.1156%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="68.8656%" y="277" width="0.2414%" height="15" fill="rgb(217,197,30)" fg:x="856" fg:w="3"/><text x="69.1156%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="68.8656%" y="261" width="0.2414%" height="15" fill="rgb(240,179,40)" fg:x="856" fg:w="3"/><text x="69.1156%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="68.8656%" y="245" width="0.2414%" height="15" fill="rgb(212,185,35)" fg:x="856" fg:w="3"/><text x="69.1156%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="68.8656%" y="229" width="0.2414%" height="15" fill="rgb(251,222,31)" fg:x="856" fg:w="3"/><text x="69.1156%" y="239.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="68.8656%" y="213" width="0.2414%" height="15" fill="rgb(208,140,36)" fg:x="856" fg:w="3"/><text x="69.1156%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="69.0265%" y="197" width="0.0805%" height="15" fill="rgb(220,148,1)" fg:x="858" fg:w="1"/><text x="69.2765%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.0265%" y="181" width="0.0805%" height="15" fill="rgb(254,4,28)" fg:x="858" fg:w="1"/><text x="69.2765%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="69.0265%" y="165" width="0.0805%" height="15" fill="rgb(222,185,44)" fg:x="858" fg:w="1"/><text x="69.2765%" y="175.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.1070%" y="197" width="0.0805%" height="15" fill="rgb(215,74,39)" fg:x="859" fg:w="1"/><text x="69.3570%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.1070%" y="181" width="0.0805%" height="15" fill="rgb(247,86,4)" fg:x="859" fg:w="1"/><text x="69.3570%" y="191.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.1070%" y="165" width="0.0805%" height="15" fill="rgb(231,105,32)" fg:x="859" fg:w="1"/><text x="69.3570%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.1070%" y="149" width="0.0805%" height="15" fill="rgb(222,65,35)" fg:x="859" fg:w="1"/><text x="69.3570%" y="159.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.1874%" y="197" width="0.0805%" height="15" fill="rgb(218,145,35)" fg:x="860" fg:w="1"/><text x="69.4374%" y="207.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (7 samples, 0.56%)</title><rect x="68.7852%" y="357" width="0.5632%" height="15" fill="rgb(208,7,15)" fg:x="855" fg:w="7"/><text x="69.0352%" y="367.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (7 samples, 0.56%)</title><rect x="68.7852%" y="341" width="0.5632%" height="15" fill="rgb(209,83,13)" fg:x="855" fg:w="7"/><text x="69.0352%" y="351.50"></text></g><g><title>engine::session::Session::load_entity (7 samples, 0.56%)</title><rect x="68.7852%" y="325" width="0.5632%" height="15" fill="rgb(218,3,10)" fg:x="855" fg:w="7"/><text x="69.0352%" y="335.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.56%)</title><rect x="68.7852%" y="309" width="0.5632%" height="15" fill="rgb(211,219,4)" fg:x="855" fg:w="7"/><text x="69.0352%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="69.1070%" y="293" width="0.2414%" height="15" fill="rgb(228,194,12)" fg:x="859" fg:w="3"/><text x="69.3570%" y="303.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="69.1070%" y="277" width="0.2414%" height="15" fill="rgb(210,175,7)" fg:x="859" fg:w="3"/><text x="69.3570%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="69.1070%" y="261" width="0.2414%" height="15" fill="rgb(243,132,6)" fg:x="859" fg:w="3"/><text x="69.3570%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="69.1070%" y="245" width="0.2414%" height="15" fill="rgb(207,72,18)" fg:x="859" fg:w="3"/><text x="69.3570%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="69.1070%" y="229" width="0.2414%" height="15" fill="rgb(236,1,18)" fg:x="859" fg:w="3"/><text x="69.3570%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="69.1070%" y="213" width="0.2414%" height="15" fill="rgb(227,0,18)" fg:x="859" fg:w="3"/><text x="69.3570%" y="223.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.2679%" y="197" width="0.0805%" height="15" fill="rgb(247,37,5)" fg:x="861" fg:w="1"/><text x="69.5179%" y="207.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.2679%" y="181" width="0.0805%" height="15" fill="rgb(237,179,24)" fg:x="861" fg:w="1"/><text x="69.5179%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.2679%" y="165" width="0.0805%" height="15" fill="rgb(226,53,20)" fg:x="861" fg:w="1"/><text x="69.5179%" y="175.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (419 samples, 33.71%)</title><rect x="35.7200%" y="533" width="33.7088%" height="15" fill="rgb(247,75,7)" fg:x="444" fg:w="419"/><text x="35.9700%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (419 samples, 33.71%)</title><rect x="35.7200%" y="517" width="33.7088%" height="15" fill="rgb(233,96,12)" fg:x="444" fg:w="419"/><text x="35.9700%" y="527.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (419 samples, 33.71%)</title><rect x="35.7200%" y="501" width="33.7088%" height="15" fill="rgb(224,125,0)" fg:x="444" fg:w="419"/><text x="35.9700%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (419 samples, 33.71%)</title><rect x="35.7200%" y="485" width="33.7088%" height="15" fill="rgb(224,92,25)" fg:x="444" fg:w="419"/><text x="35.9700%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (419 samples, 33.71%)</title><rect x="35.7200%" y="469" width="33.7088%" height="15" fill="rgb(224,42,24)" fg:x="444" fg:w="419"/><text x="35.9700%" y="479.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (419 samples, 33.71%)</title><rect x="35.7200%" y="453" width="33.7088%" height="15" fill="rgb(234,132,49)" fg:x="444" fg:w="419"/><text x="35.9700%" y="463.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (419 samples, 33.71%)</title><rect x="35.7200%" y="437" width="33.7088%" height="15" fill="rgb(248,100,35)" fg:x="444" fg:w="419"/><text x="35.9700%" y="447.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (418 samples, 33.63%)</title><rect x="35.8005%" y="421" width="33.6283%" height="15" fill="rgb(239,94,40)" fg:x="445" fg:w="418"/><text x="36.0505%" y="431.50">&lt;engine::session::state::State as kernel::actions::Per..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (416 samples, 33.47%)</title><rect x="35.9614%" y="405" width="33.4674%" height="15" fill="rgb(235,139,28)" fg:x="447" fg:w="416"/><text x="36.2114%" y="415.50">&lt;plugins_core::looking::actions::LookAction as kernel:..</text></g><g><title>plugins_core::looking::model::new_area_observation (397 samples, 31.94%)</title><rect x="37.4899%" y="389" width="31.9389%" height="15" fill="rgb(217,144,7)" fg:x="466" fg:w="397"/><text x="37.7399%" y="399.50">plugins_core::looking::model::new_area_observation</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16 samples, 1.29%)</title><rect x="68.1416%" y="373" width="1.2872%" height="15" fill="rgb(227,55,4)" fg:x="847" fg:w="16"/><text x="68.3916%" y="383.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="69.3484%" y="357" width="0.0805%" height="15" fill="rgb(252,82,54)" fg:x="862" fg:w="1"/><text x="69.5984%" y="367.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.4288%" y="517" width="0.0805%" height="15" fill="rgb(245,172,4)" fg:x="863" fg:w="1"/><text x="69.6788%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="69.6702%" y="485" width="0.3218%" height="15" fill="rgb(207,26,27)" fg:x="866" fg:w="4"/><text x="69.9202%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="69.7506%" y="469" width="0.2414%" height="15" fill="rgb(252,98,18)" fg:x="867" fg:w="3"/><text x="70.0006%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="69.7506%" y="453" width="0.2414%" height="15" fill="rgb(244,8,26)" fg:x="867" fg:w="3"/><text x="70.0006%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="69.9115%" y="437" width="0.0805%" height="15" fill="rgb(237,173,45)" fg:x="869" fg:w="1"/><text x="70.1615%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="69.9115%" y="421" width="0.0805%" height="15" fill="rgb(208,213,49)" fg:x="869" fg:w="1"/><text x="70.1615%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="69.9115%" y="405" width="0.0805%" height="15" fill="rgb(212,122,37)" fg:x="869" fg:w="1"/><text x="70.1615%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.9115%" y="389" width="0.0805%" height="15" fill="rgb(213,80,17)" fg:x="869" fg:w="1"/><text x="70.1615%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.9115%" y="373" width="0.0805%" height="15" fill="rgb(206,210,43)" fg:x="869" fg:w="1"/><text x="70.1615%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.9920%" y="421" width="0.0805%" height="15" fill="rgb(229,214,3)" fg:x="870" fg:w="1"/><text x="70.2420%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.9920%" y="405" width="0.0805%" height="15" fill="rgb(235,213,29)" fg:x="870" fg:w="1"/><text x="70.2420%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.9920%" y="389" width="0.0805%" height="15" fill="rgb(248,135,26)" fg:x="870" fg:w="1"/><text x="70.2420%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.9920%" y="373" width="0.0805%" height="15" fill="rgb(242,188,12)" fg:x="870" fg:w="1"/><text x="70.2420%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.9920%" y="357" width="0.0805%" height="15" fill="rgb(245,38,12)" fg:x="870" fg:w="1"/><text x="70.2420%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.9920%" y="341" width="0.0805%" height="15" fill="rgb(218,42,13)" fg:x="870" fg:w="1"/><text x="70.2420%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.9920%" y="325" width="0.0805%" height="15" fill="rgb(238,132,49)" fg:x="870" fg:w="1"/><text x="70.2420%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.9920%" y="309" width="0.0805%" height="15" fill="rgb(209,196,19)" fg:x="870" fg:w="1"/><text x="70.2420%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.9920%" y="293" width="0.0805%" height="15" fill="rgb(244,131,22)" fg:x="870" fg:w="1"/><text x="70.2420%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.9920%" y="277" width="0.0805%" height="15" fill="rgb(223,18,34)" fg:x="870" fg:w="1"/><text x="70.2420%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.9920%" y="261" width="0.0805%" height="15" fill="rgb(252,124,54)" fg:x="870" fg:w="1"/><text x="70.2420%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.9920%" y="245" width="0.0805%" height="15" fill="rgb(229,106,42)" fg:x="870" fg:w="1"/><text x="70.2420%" y="255.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.08%)</title><rect x="69.9920%" y="229" width="0.0805%" height="15" fill="rgb(221,129,1)" fg:x="870" fg:w="1"/><text x="70.2420%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.0724%" y="325" width="0.0805%" height="15" fill="rgb(229,74,15)" fg:x="871" fg:w="1"/><text x="70.3224%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.0724%" y="309" width="0.0805%" height="15" fill="rgb(210,206,50)" fg:x="871" fg:w="1"/><text x="70.3224%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.0724%" y="293" width="0.0805%" height="15" fill="rgb(251,114,31)" fg:x="871" fg:w="1"/><text x="70.3224%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.0724%" y="277" width="0.0805%" height="15" fill="rgb(215,225,28)" fg:x="871" fg:w="1"/><text x="70.3224%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="70.1529%" y="325" width="0.1609%" height="15" fill="rgb(237,109,14)" fg:x="872" fg:w="2"/><text x="70.4029%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="70.1529%" y="309" width="0.1609%" height="15" fill="rgb(230,13,37)" fg:x="872" fg:w="2"/><text x="70.4029%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="70.1529%" y="293" width="0.1609%" height="15" fill="rgb(231,40,28)" fg:x="872" fg:w="2"/><text x="70.4029%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="70.1529%" y="277" width="0.1609%" height="15" fill="rgb(231,202,18)" fg:x="872" fg:w="2"/><text x="70.4029%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="70.1529%" y="261" width="0.1609%" height="15" fill="rgb(225,33,18)" fg:x="872" fg:w="2"/><text x="70.4029%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="70.0724%" y="373" width="0.3218%" height="15" fill="rgb(223,64,47)" fg:x="871" fg:w="4"/><text x="70.3224%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="70.0724%" y="357" width="0.3218%" height="15" fill="rgb(234,114,13)" fg:x="871" fg:w="4"/><text x="70.3224%" y="367.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="70.0724%" y="341" width="0.3218%" height="15" fill="rgb(248,56,40)" fg:x="871" fg:w="4"/><text x="70.3224%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.3138%" y="325" width="0.0805%" height="15" fill="rgb(221,194,21)" fg:x="874" fg:w="1"/><text x="70.5638%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.3138%" y="309" width="0.0805%" height="15" fill="rgb(242,108,46)" fg:x="874" fg:w="1"/><text x="70.5638%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="70.3138%" y="293" width="0.0805%" height="15" fill="rgb(220,106,10)" fg:x="874" fg:w="1"/><text x="70.5638%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.3138%" y="277" width="0.0805%" height="15" fill="rgb(211,88,4)" fg:x="874" fg:w="1"/><text x="70.5638%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.3138%" y="261" width="0.0805%" height="15" fill="rgb(214,95,34)" fg:x="874" fg:w="1"/><text x="70.5638%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.3138%" y="245" width="0.0805%" height="15" fill="rgb(250,160,33)" fg:x="874" fg:w="1"/><text x="70.5638%" y="255.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.40%)</title><rect x="70.0724%" y="421" width="0.4023%" height="15" fill="rgb(225,29,10)" fg:x="871" fg:w="5"/><text x="70.3224%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="70.0724%" y="405" width="0.4023%" height="15" fill="rgb(224,28,30)" fg:x="871" fg:w="5"/><text x="70.3224%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="70.0724%" y="389" width="0.4023%" height="15" fill="rgb(231,77,4)" fg:x="871" fg:w="5"/><text x="70.3224%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.3942%" y="373" width="0.0805%" height="15" fill="rgb(209,63,21)" fg:x="875" fg:w="1"/><text x="70.6442%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.3942%" y="357" width="0.0805%" height="15" fill="rgb(226,22,11)" fg:x="875" fg:w="1"/><text x="70.6442%" y="367.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (8 samples, 0.64%)</title><rect x="69.9920%" y="485" width="0.6436%" height="15" fill="rgb(216,82,30)" fg:x="870" fg:w="8"/><text x="70.2420%" y="495.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (8 samples, 0.64%)</title><rect x="69.9920%" y="469" width="0.6436%" height="15" fill="rgb(246,227,38)" fg:x="870" fg:w="8"/><text x="70.2420%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (8 samples, 0.64%)</title><rect x="69.9920%" y="453" width="0.6436%" height="15" fill="rgb(251,203,53)" fg:x="870" fg:w="8"/><text x="70.2420%" y="463.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (8 samples, 0.64%)</title><rect x="69.9920%" y="437" width="0.6436%" height="15" fill="rgb(254,101,1)" fg:x="870" fg:w="8"/><text x="70.2420%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="70.4747%" y="421" width="0.1609%" height="15" fill="rgb(241,180,5)" fg:x="876" fg:w="2"/><text x="70.7247%" y="431.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="70.4747%" y="405" width="0.1609%" height="15" fill="rgb(218,168,4)" fg:x="876" fg:w="2"/><text x="70.7247%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="70.4747%" y="389" width="0.1609%" height="15" fill="rgb(224,223,32)" fg:x="876" fg:w="2"/><text x="70.7247%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="70.4747%" y="373" width="0.1609%" height="15" fill="rgb(236,106,22)" fg:x="876" fg:w="2"/><text x="70.7247%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="70.4747%" y="357" width="0.1609%" height="15" fill="rgb(206,121,5)" fg:x="876" fg:w="2"/><text x="70.7247%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="70.4747%" y="341" width="0.1609%" height="15" fill="rgb(233,87,28)" fg:x="876" fg:w="2"/><text x="70.7247%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="70.4747%" y="325" width="0.1609%" height="15" fill="rgb(236,137,17)" fg:x="876" fg:w="2"/><text x="70.7247%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="70.4747%" y="309" width="0.1609%" height="15" fill="rgb(209,183,38)" fg:x="876" fg:w="2"/><text x="70.7247%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="70.4747%" y="293" width="0.1609%" height="15" fill="rgb(206,162,44)" fg:x="876" fg:w="2"/><text x="70.7247%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="70.4747%" y="277" width="0.1609%" height="15" fill="rgb(237,70,39)" fg:x="876" fg:w="2"/><text x="70.7247%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.5551%" y="261" width="0.0805%" height="15" fill="rgb(212,176,5)" fg:x="877" fg:w="1"/><text x="70.8051%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.5551%" y="245" width="0.0805%" height="15" fill="rgb(232,95,16)" fg:x="877" fg:w="1"/><text x="70.8051%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.5551%" y="229" width="0.0805%" height="15" fill="rgb(219,115,35)" fg:x="877" fg:w="1"/><text x="70.8051%" y="239.50"></text></g><g><title>plugins_core::tools::contained_by (14 samples, 1.13%)</title><rect x="69.5897%" y="501" width="1.1263%" height="15" fill="rgb(251,67,27)" fg:x="865" fg:w="14"/><text x="69.8397%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="70.6356%" y="485" width="0.0805%" height="15" fill="rgb(222,95,40)" fg:x="878" fg:w="1"/><text x="70.8856%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="70.6356%" y="469" width="0.0805%" height="15" fill="rgb(250,35,16)" fg:x="878" fg:w="1"/><text x="70.8856%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.6356%" y="453" width="0.0805%" height="15" fill="rgb(224,86,44)" fg:x="878" fg:w="1"/><text x="70.8856%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.7160%" y="469" width="0.0805%" height="15" fill="rgb(237,53,53)" fg:x="879" fg:w="1"/><text x="70.9660%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.7160%" y="453" width="0.0805%" height="15" fill="rgb(208,171,33)" fg:x="879" fg:w="1"/><text x="70.9660%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.7160%" y="437" width="0.0805%" height="15" fill="rgb(222,64,27)" fg:x="879" fg:w="1"/><text x="70.9660%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.7160%" y="421" width="0.0805%" height="15" fill="rgb(221,121,35)" fg:x="879" fg:w="1"/><text x="70.9660%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.8769%" y="389" width="0.0805%" height="15" fill="rgb(228,137,42)" fg:x="881" fg:w="1"/><text x="71.1269%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="70.7160%" y="485" width="0.3218%" height="15" fill="rgb(227,54,21)" fg:x="879" fg:w="4"/><text x="70.9660%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="70.7965%" y="469" width="0.2414%" height="15" fill="rgb(240,168,33)" fg:x="880" fg:w="3"/><text x="71.0465%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="70.7965%" y="453" width="0.2414%" height="15" fill="rgb(243,159,6)" fg:x="880" fg:w="3"/><text x="71.0465%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="70.8769%" y="437" width="0.1609%" height="15" fill="rgb(205,211,41)" fg:x="881" fg:w="2"/><text x="71.1269%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="70.8769%" y="421" width="0.1609%" height="15" fill="rgb(253,30,1)" fg:x="881" fg:w="2"/><text x="71.1269%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="70.8769%" y="405" width="0.1609%" height="15" fill="rgb(226,80,18)" fg:x="881" fg:w="2"/><text x="71.1269%" y="415.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.9574%" y="389" width="0.0805%" height="15" fill="rgb(253,156,46)" fg:x="882" fg:w="1"/><text x="71.2074%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.9574%" y="373" width="0.0805%" height="15" fill="rgb(248,87,27)" fg:x="882" fg:w="1"/><text x="71.2074%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.9574%" y="357" width="0.0805%" height="15" fill="rgb(227,122,2)" fg:x="882" fg:w="1"/><text x="71.2074%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.9574%" y="341" width="0.0805%" height="15" fill="rgb(229,94,39)" fg:x="882" fg:w="1"/><text x="71.2074%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.9574%" y="325" width="0.0805%" height="15" fill="rgb(225,173,31)" fg:x="882" fg:w="1"/><text x="71.2074%" y="335.50"></text></g><g><title>plugins_core::tools::occupied_by (5 samples, 0.40%)</title><rect x="70.7160%" y="501" width="0.4023%" height="15" fill="rgb(239,176,30)" fg:x="879" fg:w="5"/><text x="70.9660%" y="511.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="71.0378%" y="485" width="0.0805%" height="15" fill="rgb(212,104,21)" fg:x="883" fg:w="1"/><text x="71.2878%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="71.0378%" y="469" width="0.0805%" height="15" fill="rgb(240,209,40)" fg:x="883" fg:w="1"/><text x="71.2878%" y="479.50"></text></g><g><title>engine::session::Session::captured (465 samples, 37.41%)</title><rect x="33.7892%" y="677" width="37.4095%" height="15" fill="rgb(234,195,5)" fg:x="420" fg:w="465"/><text x="34.0392%" y="687.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (461 samples, 37.09%)</title><rect x="34.1110%" y="661" width="37.0877%" height="15" fill="rgb(238,213,1)" fg:x="424" fg:w="461"/><text x="34.3610%" y="671.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (457 samples, 36.77%)</title><rect x="34.4328%" y="645" width="36.7659%" height="15" fill="rgb(235,182,54)" fg:x="428" fg:w="457"/><text x="34.6828%" y="655.50">tracing_core::dispatcher::with_default</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (457 samples, 36.77%)</title><rect x="34.4328%" y="629" width="36.7659%" height="15" fill="rgb(229,50,46)" fg:x="428" fg:w="457"/><text x="34.6828%" y="639.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::pe..</text></g><g><title>kernel::plugins::mw::apply_middleware (457 samples, 36.77%)</title><rect x="34.4328%" y="613" width="36.7659%" height="15" fill="rgb(219,145,13)" fg:x="428" fg:w="457"/><text x="34.6828%" y="623.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (457 samples, 36.77%)</title><rect x="34.4328%" y="597" width="36.7659%" height="15" fill="rgb(220,226,10)" fg:x="428" fg:w="457"/><text x="34.6828%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (457 samples, 36.77%)</title><rect x="34.4328%" y="581" width="36.7659%" height="15" fill="rgb(248,47,30)" fg:x="428" fg:w="457"/><text x="34.6828%" y="591.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::pl..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (442 samples, 35.56%)</title><rect x="35.6396%" y="565" width="35.5591%" height="15" fill="rgb(231,209,44)" fg:x="443" fg:w="442"/><text x="35.8896%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (441 samples, 35.48%)</title><rect x="35.7200%" y="549" width="35.4787%" height="15" fill="rgb(209,80,30)" fg:x="444" fg:w="441"/><text x="35.9700%" y="559.50">&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Midd..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (22 samples, 1.77%)</title><rect x="69.4288%" y="533" width="1.7699%" height="15" fill="rgb(232,9,14)" fg:x="863" fg:w="22"/><text x="69.6788%" y="543.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (21 samples, 1.69%)</title><rect x="69.5093%" y="517" width="1.6895%" height="15" fill="rgb(243,91,43)" fg:x="864" fg:w="21"/><text x="69.7593%" y="527.50"></text></g><g><title>plugins_core::tools::worn_by (1 samples, 0.08%)</title><rect x="71.1183%" y="501" width="0.0805%" height="15" fill="rgb(231,90,52)" fg:x="884" fg:w="1"/><text x="71.3683%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.2792%" y="565" width="0.0805%" height="15" fill="rgb(253,192,44)" fg:x="886" fg:w="1"/><text x="71.5292%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.2792%" y="549" width="0.0805%" height="15" fill="rgb(241,66,31)" fg:x="886" fg:w="1"/><text x="71.5292%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.2792%" y="533" width="0.0805%" height="15" fill="rgb(235,81,37)" fg:x="886" fg:w="1"/><text x="71.5292%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.2792%" y="517" width="0.0805%" height="15" fill="rgb(223,221,9)" fg:x="886" fg:w="1"/><text x="71.5292%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.2792%" y="501" width="0.0805%" height="15" fill="rgb(242,180,7)" fg:x="886" fg:w="1"/><text x="71.5292%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.2792%" y="485" width="0.0805%" height="15" fill="rgb(243,78,19)" fg:x="886" fg:w="1"/><text x="71.5292%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.2792%" y="469" width="0.0805%" height="15" fill="rgb(233,23,17)" fg:x="886" fg:w="1"/><text x="71.5292%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.2792%" y="453" width="0.0805%" height="15" fill="rgb(252,122,45)" fg:x="886" fg:w="1"/><text x="71.5292%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.2792%" y="437" width="0.0805%" height="15" fill="rgb(247,108,20)" fg:x="886" fg:w="1"/><text x="71.5292%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.2792%" y="421" width="0.0805%" height="15" fill="rgb(235,84,21)" fg:x="886" fg:w="1"/><text x="71.5292%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.2792%" y="405" width="0.0805%" height="15" fill="rgb(247,129,10)" fg:x="886" fg:w="1"/><text x="71.5292%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.2792%" y="389" width="0.0805%" height="15" fill="rgb(208,173,14)" fg:x="886" fg:w="1"/><text x="71.5292%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.2792%" y="597" width="0.1609%" height="15" fill="rgb(236,31,38)" fg:x="886" fg:w="2"/><text x="71.5292%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.2792%" y="581" width="0.1609%" height="15" fill="rgb(232,65,17)" fg:x="886" fg:w="2"/><text x="71.5292%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.3596%" y="565" width="0.0805%" height="15" fill="rgb(224,45,49)" fg:x="887" fg:w="1"/><text x="71.6096%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="71.2792%" y="629" width="0.2414%" height="15" fill="rgb(225,2,53)" fg:x="886" fg:w="3"/><text x="71.5292%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="71.2792%" y="613" width="0.2414%" height="15" fill="rgb(248,210,53)" fg:x="886" fg:w="3"/><text x="71.5292%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.4401%" y="597" width="0.0805%" height="15" fill="rgb(211,1,30)" fg:x="888" fg:w="1"/><text x="71.6901%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.5205%" y="581" width="0.0805%" height="15" fill="rgb(224,96,15)" fg:x="889" fg:w="1"/><text x="71.7705%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.5205%" y="565" width="0.0805%" height="15" fill="rgb(252,45,11)" fg:x="889" fg:w="1"/><text x="71.7705%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.5205%" y="549" width="0.0805%" height="15" fill="rgb(220,125,38)" fg:x="889" fg:w="1"/><text x="71.7705%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.5205%" y="533" width="0.0805%" height="15" fill="rgb(243,161,33)" fg:x="889" fg:w="1"/><text x="71.7705%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.5205%" y="517" width="0.0805%" height="15" fill="rgb(248,197,34)" fg:x="889" fg:w="1"/><text x="71.7705%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.5205%" y="501" width="0.0805%" height="15" fill="rgb(228,165,23)" fg:x="889" fg:w="1"/><text x="71.7705%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.5205%" y="485" width="0.0805%" height="15" fill="rgb(236,94,38)" fg:x="889" fg:w="1"/><text x="71.7705%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.5205%" y="469" width="0.0805%" height="15" fill="rgb(220,13,23)" fg:x="889" fg:w="1"/><text x="71.7705%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.5205%" y="453" width="0.0805%" height="15" fill="rgb(234,26,39)" fg:x="889" fg:w="1"/><text x="71.7705%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="71.5205%" y="437" width="0.0805%" height="15" fill="rgb(205,117,44)" fg:x="889" fg:w="1"/><text x="71.7705%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="71.5205%" y="421" width="0.0805%" height="15" fill="rgb(250,42,2)" fg:x="889" fg:w="1"/><text x="71.7705%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="71.6814%" y="533" width="0.1609%" height="15" fill="rgb(223,83,14)" fg:x="891" fg:w="2"/><text x="71.9314%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="71.6814%" y="517" width="0.1609%" height="15" fill="rgb(241,147,50)" fg:x="891" fg:w="2"/><text x="71.9314%" y="527.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="71.6814%" y="501" width="0.1609%" height="15" fill="rgb(218,90,6)" fg:x="891" fg:w="2"/><text x="71.9314%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="71.6814%" y="485" width="0.1609%" height="15" fill="rgb(210,191,5)" fg:x="891" fg:w="2"/><text x="71.9314%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="71.6814%" y="469" width="0.1609%" height="15" fill="rgb(225,139,19)" fg:x="891" fg:w="2"/><text x="71.9314%" y="479.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="71.6814%" y="453" width="0.1609%" height="15" fill="rgb(210,1,33)" fg:x="891" fg:w="2"/><text x="71.9314%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.6814%" y="437" width="0.1609%" height="15" fill="rgb(213,50,3)" fg:x="891" fg:w="2"/><text x="71.9314%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="71.6814%" y="421" width="0.1609%" height="15" fill="rgb(234,227,4)" fg:x="891" fg:w="2"/><text x="71.9314%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="71.6814%" y="405" width="0.1609%" height="15" fill="rgb(246,63,5)" fg:x="891" fg:w="2"/><text x="71.9314%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="71.6814%" y="389" width="0.1609%" height="15" fill="rgb(245,136,27)" fg:x="891" fg:w="2"/><text x="71.9314%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="71.6814%" y="373" width="0.1609%" height="15" fill="rgb(247,199,27)" fg:x="891" fg:w="2"/><text x="71.9314%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="71.6814%" y="357" width="0.1609%" height="15" fill="rgb(252,158,49)" fg:x="891" fg:w="2"/><text x="71.9314%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="71.6814%" y="341" width="0.1609%" height="15" fill="rgb(254,73,1)" fg:x="891" fg:w="2"/><text x="71.9314%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="71.6814%" y="325" width="0.1609%" height="15" fill="rgb(248,93,19)" fg:x="891" fg:w="2"/><text x="71.9314%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="71.6814%" y="309" width="0.1609%" height="15" fill="rgb(206,67,5)" fg:x="891" fg:w="2"/><text x="71.9314%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="71.6814%" y="293" width="0.1609%" height="15" fill="rgb(209,210,4)" fg:x="891" fg:w="2"/><text x="71.9314%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="71.6814%" y="277" width="0.1609%" height="15" fill="rgb(214,185,36)" fg:x="891" fg:w="2"/><text x="71.9314%" y="287.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="71.6814%" y="261" width="0.1609%" height="15" fill="rgb(233,191,26)" fg:x="891" fg:w="2"/><text x="71.9314%" y="271.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="71.6814%" y="245" width="0.1609%" height="15" fill="rgb(248,94,17)" fg:x="891" fg:w="2"/><text x="71.9314%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="71.8423%" y="501" width="0.1609%" height="15" fill="rgb(250,64,4)" fg:x="893" fg:w="2"/><text x="72.0923%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="71.8423%" y="485" width="0.1609%" height="15" fill="rgb(218,41,53)" fg:x="893" fg:w="2"/><text x="72.0923%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.9228%" y="469" width="0.0805%" height="15" fill="rgb(251,176,28)" fg:x="894" fg:w="1"/><text x="72.1728%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="71.6010%" y="581" width="0.4827%" height="15" fill="rgb(247,22,9)" fg:x="890" fg:w="6"/><text x="71.8510%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="71.6814%" y="565" width="0.4023%" height="15" fill="rgb(218,201,14)" fg:x="891" fg:w="5"/><text x="71.9314%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (5 samples, 0.40%)</title><rect x="71.6814%" y="549" width="0.4023%" height="15" fill="rgb(218,94,10)" fg:x="891" fg:w="5"/><text x="71.9314%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="71.8423%" y="533" width="0.2414%" height="15" fill="rgb(222,183,52)" fg:x="893" fg:w="3"/><text x="72.0923%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="71.8423%" y="517" width="0.2414%" height="15" fill="rgb(242,140,25)" fg:x="893" fg:w="3"/><text x="72.0923%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.0032%" y="501" width="0.0805%" height="15" fill="rgb(235,197,38)" fg:x="895" fg:w="1"/><text x="72.2532%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="72.0032%" y="485" width="0.0805%" height="15" fill="rgb(237,136,15)" fg:x="895" fg:w="1"/><text x="72.2532%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="72.0032%" y="469" width="0.0805%" height="15" fill="rgb(223,44,49)" fg:x="895" fg:w="1"/><text x="72.2532%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.0032%" y="453" width="0.0805%" height="15" fill="rgb(227,71,15)" fg:x="895" fg:w="1"/><text x="72.2532%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.0032%" y="437" width="0.0805%" height="15" fill="rgb(225,153,20)" fg:x="895" fg:w="1"/><text x="72.2532%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.0837%" y="517" width="0.0805%" height="15" fill="rgb(210,190,26)" fg:x="896" fg:w="1"/><text x="72.3337%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.72%)</title><rect x="71.5205%" y="629" width="0.7241%" height="15" fill="rgb(223,147,5)" fg:x="889" fg:w="9"/><text x="71.7705%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.72%)</title><rect x="71.5205%" y="613" width="0.7241%" height="15" fill="rgb(207,14,23)" fg:x="889" fg:w="9"/><text x="71.7705%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (9 samples, 0.72%)</title><rect x="71.5205%" y="597" width="0.7241%" height="15" fill="rgb(211,195,53)" fg:x="889" fg:w="9"/><text x="71.7705%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="72.0837%" y="581" width="0.1609%" height="15" fill="rgb(237,75,46)" fg:x="896" fg:w="2"/><text x="72.3337%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.0837%" y="565" width="0.1609%" height="15" fill="rgb(254,55,14)" fg:x="896" fg:w="2"/><text x="72.3337%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="72.0837%" y="549" width="0.1609%" height="15" fill="rgb(230,185,30)" fg:x="896" fg:w="2"/><text x="72.3337%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="72.0837%" y="533" width="0.1609%" height="15" fill="rgb(220,14,11)" fg:x="896" fg:w="2"/><text x="72.3337%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="72.1641%" y="517" width="0.0805%" height="15" fill="rgb(215,169,44)" fg:x="897" fg:w="1"/><text x="72.4141%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="72.1641%" y="501" width="0.0805%" height="15" fill="rgb(253,203,20)" fg:x="897" fg:w="1"/><text x="72.4141%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.1641%" y="485" width="0.0805%" height="15" fill="rgb(229,225,17)" fg:x="897" fg:w="1"/><text x="72.4141%" y="495.50"></text></g><g><title>engine::session::internal::Added::find_refs (14 samples, 1.13%)</title><rect x="71.1987%" y="661" width="1.1263%" height="15" fill="rgb(236,76,26)" fg:x="885" fg:w="14"/><text x="71.4487%" y="671.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (13 samples, 1.05%)</title><rect x="71.2792%" y="645" width="1.0459%" height="15" fill="rgb(234,15,30)" fg:x="886" fg:w="13"/><text x="71.5292%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.2446%" y="629" width="0.0805%" height="15" fill="rgb(211,113,48)" fg:x="898" fg:w="1"/><text x="72.4946%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.2446%" y="613" width="0.0805%" height="15" fill="rgb(221,31,36)" fg:x="898" fg:w="1"/><text x="72.4946%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="72.2446%" y="597" width="0.0805%" height="15" fill="rgb(215,118,52)" fg:x="898" fg:w="1"/><text x="72.4946%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.2446%" y="581" width="0.0805%" height="15" fill="rgb(241,151,27)" fg:x="898" fg:w="1"/><text x="72.4946%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.4055%" y="629" width="0.0805%" height="15" fill="rgb(253,51,3)" fg:x="900" fg:w="1"/><text x="72.6555%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.4055%" y="613" width="0.0805%" height="15" fill="rgb(216,201,24)" fg:x="900" fg:w="1"/><text x="72.6555%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="72.3250%" y="645" width="0.2414%" height="15" fill="rgb(231,107,4)" fg:x="899" fg:w="3"/><text x="72.5750%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.4859%" y="629" width="0.0805%" height="15" fill="rgb(243,97,54)" fg:x="901" fg:w="1"/><text x="72.7359%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.4859%" y="613" width="0.0805%" height="15" fill="rgb(221,32,51)" fg:x="901" fg:w="1"/><text x="72.7359%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.4859%" y="597" width="0.0805%" height="15" fill="rgb(218,171,35)" fg:x="901" fg:w="1"/><text x="72.7359%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.4859%" y="581" width="0.0805%" height="15" fill="rgb(214,20,53)" fg:x="901" fg:w="1"/><text x="72.7359%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.4859%" y="565" width="0.0805%" height="15" fill="rgb(239,9,52)" fg:x="901" fg:w="1"/><text x="72.7359%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.4859%" y="549" width="0.0805%" height="15" fill="rgb(215,114,45)" fg:x="901" fg:w="1"/><text x="72.7359%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.4859%" y="533" width="0.0805%" height="15" fill="rgb(208,118,9)" fg:x="901" fg:w="1"/><text x="72.7359%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="72.4859%" y="517" width="0.0805%" height="15" fill="rgb(235,7,39)" fg:x="901" fg:w="1"/><text x="72.7359%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="72.4859%" y="501" width="0.0805%" height="15" fill="rgb(243,225,15)" fg:x="901" fg:w="1"/><text x="72.7359%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="72.4859%" y="485" width="0.0805%" height="15" fill="rgb(225,216,18)" fg:x="901" fg:w="1"/><text x="72.7359%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="72.4859%" y="469" width="0.0805%" height="15" fill="rgb(233,36,38)" fg:x="901" fg:w="1"/><text x="72.7359%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.4859%" y="453" width="0.0805%" height="15" fill="rgb(239,88,23)" fg:x="901" fg:w="1"/><text x="72.7359%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="72.5664%" y="645" width="0.0805%" height="15" fill="rgb(219,181,35)" fg:x="902" fg:w="1"/><text x="72.8164%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="72.5664%" y="629" width="0.0805%" height="15" fill="rgb(215,18,46)" fg:x="902" fg:w="1"/><text x="72.8164%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.5664%" y="613" width="0.0805%" height="15" fill="rgb(241,38,11)" fg:x="902" fg:w="1"/><text x="72.8164%" y="623.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="72.6468%" y="645" width="0.0805%" height="15" fill="rgb(248,169,45)" fg:x="903" fg:w="1"/><text x="72.8968%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.8077%" y="565" width="0.0805%" height="15" fill="rgb(239,50,49)" fg:x="905" fg:w="1"/><text x="73.0577%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="72.8077%" y="549" width="0.0805%" height="15" fill="rgb(231,96,31)" fg:x="905" fg:w="1"/><text x="73.0577%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="72.8077%" y="533" width="0.0805%" height="15" fill="rgb(224,193,37)" fg:x="905" fg:w="1"/><text x="73.0577%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.8882%" y="501" width="0.0805%" height="15" fill="rgb(227,153,50)" fg:x="906" fg:w="1"/><text x="73.1382%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.8882%" y="485" width="0.0805%" height="15" fill="rgb(249,228,3)" fg:x="906" fg:w="1"/><text x="73.1382%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.8882%" y="469" width="0.0805%" height="15" fill="rgb(219,164,43)" fg:x="906" fg:w="1"/><text x="73.1382%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.8882%" y="453" width="0.0805%" height="15" fill="rgb(216,45,41)" fg:x="906" fg:w="1"/><text x="73.1382%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="72.8882%" y="549" width="0.1609%" height="15" fill="rgb(210,226,51)" fg:x="906" fg:w="2"/><text x="73.1382%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="72.8882%" y="533" width="0.1609%" height="15" fill="rgb(209,117,49)" fg:x="906" fg:w="2"/><text x="73.1382%" y="543.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="72.8882%" y="517" width="0.1609%" height="15" fill="rgb(206,196,24)" fg:x="906" fg:w="2"/><text x="73.1382%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="72.9686%" y="501" width="0.0805%" height="15" fill="rgb(253,218,3)" fg:x="907" fg:w="1"/><text x="73.2186%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.9686%" y="485" width="0.0805%" height="15" fill="rgb(252,166,2)" fg:x="907" fg:w="1"/><text x="73.2186%" y="495.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.40%)</title><rect x="72.7273%" y="645" width="0.4023%" height="15" fill="rgb(236,218,26)" fg:x="904" fg:w="5"/><text x="72.9773%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="72.7273%" y="629" width="0.4023%" height="15" fill="rgb(254,84,19)" fg:x="904" fg:w="5"/><text x="72.9773%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="72.7273%" y="613" width="0.4023%" height="15" fill="rgb(219,137,29)" fg:x="904" fg:w="5"/><text x="72.9773%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.40%)</title><rect x="72.7273%" y="597" width="0.4023%" height="15" fill="rgb(227,47,52)" fg:x="904" fg:w="5"/><text x="72.9773%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="72.8077%" y="581" width="0.3218%" height="15" fill="rgb(229,167,24)" fg:x="905" fg:w="4"/><text x="73.0577%" y="591.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="72.8882%" y="565" width="0.2414%" height="15" fill="rgb(233,164,1)" fg:x="906" fg:w="3"/><text x="73.1382%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.0491%" y="549" width="0.0805%" height="15" fill="rgb(218,88,48)" fg:x="908" fg:w="1"/><text x="73.2991%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.1295%" y="549" width="0.0805%" height="15" fill="rgb(226,214,24)" fg:x="909" fg:w="1"/><text x="73.3795%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.1295%" y="533" width="0.0805%" height="15" fill="rgb(233,29,12)" fg:x="909" fg:w="1"/><text x="73.3795%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.1295%" y="517" width="0.0805%" height="15" fill="rgb(219,120,34)" fg:x="909" fg:w="1"/><text x="73.3795%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.1295%" y="501" width="0.0805%" height="15" fill="rgb(226,78,44)" fg:x="909" fg:w="1"/><text x="73.3795%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.1295%" y="485" width="0.0805%" height="15" fill="rgb(240,15,48)" fg:x="909" fg:w="1"/><text x="73.3795%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.1295%" y="469" width="0.0805%" height="15" fill="rgb(253,176,7)" fg:x="909" fg:w="1"/><text x="73.3795%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.1295%" y="453" width="0.0805%" height="15" fill="rgb(206,166,28)" fg:x="909" fg:w="1"/><text x="73.3795%" y="463.50"></text></g><g><title>engine::session::Session::load_entity (26 samples, 2.09%)</title><rect x="71.1987%" y="677" width="2.0917%" height="15" fill="rgb(241,53,51)" fg:x="885" fg:w="26"/><text x="71.4487%" y="687.50">e..</text></g><g><title>engine::session::internal::Entities::add_persisted (12 samples, 0.97%)</title><rect x="72.3250%" y="661" width="0.9654%" height="15" fill="rgb(249,112,30)" fg:x="899" fg:w="12"/><text x="72.5750%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="73.1295%" y="645" width="0.1609%" height="15" fill="rgb(217,85,30)" fg:x="909" fg:w="2"/><text x="73.3795%" y="655.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="73.1295%" y="629" width="0.1609%" height="15" fill="rgb(233,49,7)" fg:x="909" fg:w="2"/><text x="73.3795%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.1295%" y="613" width="0.1609%" height="15" fill="rgb(234,109,9)" fg:x="909" fg:w="2"/><text x="73.3795%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.1295%" y="597" width="0.1609%" height="15" fill="rgb(253,95,22)" fg:x="909" fg:w="2"/><text x="73.3795%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.1295%" y="581" width="0.1609%" height="15" fill="rgb(233,176,25)" fg:x="909" fg:w="2"/><text x="73.3795%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.1295%" y="565" width="0.1609%" height="15" fill="rgb(236,33,39)" fg:x="909" fg:w="2"/><text x="73.3795%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.2100%" y="549" width="0.0805%" height="15" fill="rgb(223,226,42)" fg:x="910" fg:w="1"/><text x="73.4600%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.2100%" y="533" width="0.0805%" height="15" fill="rgb(216,99,33)" fg:x="910" fg:w="1"/><text x="73.4600%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="73.2100%" y="517" width="0.0805%" height="15" fill="rgb(235,84,23)" fg:x="910" fg:w="1"/><text x="73.4600%" y="527.50"></text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="73.2904%" y="677" width="0.0805%" height="15" fill="rgb(232,2,27)" fg:x="911" fg:w="1"/><text x="73.5404%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="73.2904%" y="661" width="0.0805%" height="15" fill="rgb(241,23,22)" fg:x="911" fg:w="1"/><text x="73.5404%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.2904%" y="645" width="0.0805%" height="15" fill="rgb(211,73,27)" fg:x="911" fg:w="1"/><text x="73.5404%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.2904%" y="629" width="0.0805%" height="15" fill="rgb(235,109,49)" fg:x="911" fg:w="1"/><text x="73.5404%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="73.2904%" y="613" width="0.0805%" height="15" fill="rgb(230,99,29)" fg:x="911" fg:w="1"/><text x="73.5404%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.2904%" y="597" width="0.0805%" height="15" fill="rgb(245,199,7)" fg:x="911" fg:w="1"/><text x="73.5404%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.2904%" y="581" width="0.0805%" height="15" fill="rgb(217,179,10)" fg:x="911" fg:w="1"/><text x="73.5404%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.3709%" y="629" width="0.0805%" height="15" fill="rgb(254,99,47)" fg:x="912" fg:w="1"/><text x="73.6209%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.3709%" y="613" width="0.0805%" height="15" fill="rgb(251,121,7)" fg:x="912" fg:w="1"/><text x="73.6209%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.3709%" y="597" width="0.0805%" height="15" fill="rgb(250,177,26)" fg:x="912" fg:w="1"/><text x="73.6209%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="73.4513%" y="629" width="0.0805%" height="15" fill="rgb(232,88,15)" fg:x="913" fg:w="1"/><text x="73.7013%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.4513%" y="613" width="0.0805%" height="15" fill="rgb(251,54,54)" fg:x="913" fg:w="1"/><text x="73.7013%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.4513%" y="597" width="0.0805%" height="15" fill="rgb(208,177,15)" fg:x="913" fg:w="1"/><text x="73.7013%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.4513%" y="581" width="0.0805%" height="15" fill="rgb(205,97,32)" fg:x="913" fg:w="1"/><text x="73.7013%" y="591.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="73.5318%" y="629" width="0.0805%" height="15" fill="rgb(217,192,13)" fg:x="914" fg:w="1"/><text x="73.7818%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.6122%" y="581" width="0.0805%" height="15" fill="rgb(215,163,41)" fg:x="915" fg:w="1"/><text x="73.8622%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="73.7731%" y="469" width="0.0805%" height="15" fill="rgb(246,83,29)" fg:x="917" fg:w="1"/><text x="74.0231%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.7731%" y="453" width="0.0805%" height="15" fill="rgb(219,2,45)" fg:x="917" fg:w="1"/><text x="74.0231%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.7731%" y="533" width="0.1609%" height="15" fill="rgb(242,215,33)" fg:x="917" fg:w="2"/><text x="74.0231%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.7731%" y="517" width="0.1609%" height="15" fill="rgb(217,1,6)" fg:x="917" fg:w="2"/><text x="74.0231%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.7731%" y="501" width="0.1609%" height="15" fill="rgb(207,85,52)" fg:x="917" fg:w="2"/><text x="74.0231%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.7731%" y="485" width="0.1609%" height="15" fill="rgb(231,171,19)" fg:x="917" fg:w="2"/><text x="74.0231%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.8536%" y="469" width="0.0805%" height="15" fill="rgb(207,128,4)" fg:x="918" fg:w="1"/><text x="74.1036%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="73.9340%" y="533" width="0.0805%" height="15" fill="rgb(219,208,4)" fg:x="919" fg:w="1"/><text x="74.1840%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.9340%" y="517" width="0.0805%" height="15" fill="rgb(235,161,42)" fg:x="919" fg:w="1"/><text x="74.1840%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="73.9340%" y="501" width="0.0805%" height="15" fill="rgb(247,218,18)" fg:x="919" fg:w="1"/><text x="74.1840%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.0145%" y="501" width="0.0805%" height="15" fill="rgb(232,114,51)" fg:x="920" fg:w="1"/><text x="74.2645%" y="511.50"></text></g><g><title>kernel::model::entity::Entity::from_value (7 samples, 0.56%)</title><rect x="73.6122%" y="629" width="0.5632%" height="15" fill="rgb(222,95,3)" fg:x="915" fg:w="7"/><text x="73.8622%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (7 samples, 0.56%)</title><rect x="73.6122%" y="613" width="0.5632%" height="15" fill="rgb(240,65,29)" fg:x="915" fg:w="7"/><text x="73.8622%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.56%)</title><rect x="73.6122%" y="597" width="0.5632%" height="15" fill="rgb(249,209,20)" fg:x="915" fg:w="7"/><text x="73.8622%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (6 samples, 0.48%)</title><rect x="73.6927%" y="581" width="0.4827%" height="15" fill="rgb(241,48,37)" fg:x="916" fg:w="6"/><text x="73.9427%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="73.6927%" y="565" width="0.4827%" height="15" fill="rgb(230,140,42)" fg:x="916" fg:w="6"/><text x="73.9427%" y="575.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (5 samples, 0.40%)</title><rect x="73.7731%" y="549" width="0.4023%" height="15" fill="rgb(230,176,45)" fg:x="917" fg:w="5"/><text x="74.0231%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.0145%" y="533" width="0.1609%" height="15" fill="rgb(245,112,21)" fg:x="920" fg:w="2"/><text x="74.2645%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.0145%" y="517" width="0.1609%" height="15" fill="rgb(207,183,35)" fg:x="920" fg:w="2"/><text x="74.2645%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="74.0949%" y="501" width="0.0805%" height="15" fill="rgb(227,44,33)" fg:x="921" fg:w="1"/><text x="74.3449%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.0949%" y="485" width="0.0805%" height="15" fill="rgb(246,120,21)" fg:x="921" fg:w="1"/><text x="74.3449%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.0949%" y="469" width="0.0805%" height="15" fill="rgb(235,57,52)" fg:x="921" fg:w="1"/><text x="74.3449%" y="479.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (506 samples, 40.71%)</title><rect x="33.5479%" y="709" width="40.7080%" height="15" fill="rgb(238,84,10)" fg:x="417" fg:w="506"/><text x="33.7979%" y="719.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (506 samples, 40.71%)</title><rect x="33.5479%" y="693" width="40.7080%" height="15" fill="rgb(251,200,32)" fg:x="417" fg:w="506"/><text x="33.7979%" y="703.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (11 samples, 0.88%)</title><rect x="73.3709%" y="677" width="0.8850%" height="15" fill="rgb(247,159,13)" fg:x="912" fg:w="11"/><text x="73.6209%" y="687.50"></text></g><g><title>engine::session::Session::load_entity (11 samples, 0.88%)</title><rect x="73.3709%" y="661" width="0.8850%" height="15" fill="rgb(238,64,4)" fg:x="912" fg:w="11"/><text x="73.6209%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (11 samples, 0.88%)</title><rect x="73.3709%" y="645" width="0.8850%" height="15" fill="rgb(221,131,51)" fg:x="912" fg:w="11"/><text x="73.6209%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="74.1754%" y="629" width="0.0805%" height="15" fill="rgb(242,5,29)" fg:x="922" fg:w="1"/><text x="74.4254%" y="639.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="74.1754%" y="613" width="0.0805%" height="15" fill="rgb(214,130,32)" fg:x="922" fg:w="1"/><text x="74.4254%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.1754%" y="597" width="0.0805%" height="15" fill="rgb(244,210,16)" fg:x="922" fg:w="1"/><text x="74.4254%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.1754%" y="581" width="0.0805%" height="15" fill="rgb(234,48,26)" fg:x="922" fg:w="1"/><text x="74.4254%" y="591.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.1754%" y="565" width="0.0805%" height="15" fill="rgb(231,82,38)" fg:x="922" fg:w="1"/><text x="74.4254%" y="575.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="74.1754%" y="549" width="0.0805%" height="15" fill="rgb(254,128,41)" fg:x="922" fg:w="1"/><text x="74.4254%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (925 samples, 74.42%)</title><rect x="0.0000%" y="757" width="74.4167%" height="15" fill="rgb(212,73,49)" fg:x="0" fg:w="925"/><text x="0.2500%" y="767.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (925 samples, 74.42%)</title><rect x="0.0000%" y="741" width="74.4167%" height="15" fill="rgb(205,62,54)" fg:x="0" fg:w="925"/><text x="0.2500%" y="751.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (925 samples, 74.42%)</title><rect x="0.0000%" y="725" width="74.4167%" height="15" fill="rgb(228,0,8)" fg:x="0" fg:w="925"/><text x="0.2500%" y="735.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (2 samples, 0.16%)</title><rect x="74.2558%" y="709" width="0.1609%" height="15" fill="rgb(251,28,17)" fg:x="923" fg:w="2"/><text x="74.5058%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="74.2558%" y="693" width="0.1609%" height="15" fill="rgb(238,105,27)" fg:x="923" fg:w="2"/><text x="74.5058%" y="703.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="74.2558%" y="677" width="0.1609%" height="15" fill="rgb(237,216,33)" fg:x="923" fg:w="2"/><text x="74.5058%" y="687.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="74.2558%" y="661" width="0.1609%" height="15" fill="rgb(229,228,25)" fg:x="923" fg:w="2"/><text x="74.5058%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.5776%" y="645" width="0.0805%" height="15" fill="rgb(233,75,23)" fg:x="927" fg:w="1"/><text x="74.8276%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="74.4167%" y="709" width="0.3218%" height="15" fill="rgb(231,207,16)" fg:x="925" fg:w="4"/><text x="74.6667%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.5776%" y="693" width="0.1609%" height="15" fill="rgb(231,191,45)" fg:x="927" fg:w="2"/><text x="74.8276%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="74.5776%" y="677" width="0.1609%" height="15" fill="rgb(224,133,17)" fg:x="927" fg:w="2"/><text x="74.8276%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="74.5776%" y="661" width="0.1609%" height="15" fill="rgb(209,178,27)" fg:x="927" fg:w="2"/><text x="74.8276%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.6581%" y="645" width="0.0805%" height="15" fill="rgb(218,37,11)" fg:x="928" fg:w="1"/><text x="74.9081%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.7385%" y="629" width="0.0805%" height="15" fill="rgb(251,226,25)" fg:x="929" fg:w="1"/><text x="74.9885%" y="639.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="74.7385%" y="693" width="0.1609%" height="15" fill="rgb(209,222,27)" fg:x="929" fg:w="2"/><text x="74.9885%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="74.7385%" y="677" width="0.1609%" height="15" fill="rgb(238,22,21)" fg:x="929" fg:w="2"/><text x="74.9885%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="74.7385%" y="661" width="0.1609%" height="15" fill="rgb(233,161,25)" fg:x="929" fg:w="2"/><text x="74.9885%" y="671.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (2 samples, 0.16%)</title><rect x="74.7385%" y="645" width="0.1609%" height="15" fill="rgb(226,122,53)" fg:x="929" fg:w="2"/><text x="74.9885%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="74.8190%" y="629" width="0.0805%" height="15" fill="rgb(220,123,17)" fg:x="930" fg:w="1"/><text x="75.0690%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.8190%" y="613" width="0.0805%" height="15" fill="rgb(230,224,35)" fg:x="930" fg:w="1"/><text x="75.0690%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.8994%" y="597" width="0.0805%" height="15" fill="rgb(246,83,8)" fg:x="931" fg:w="1"/><text x="75.1494%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.9799%" y="581" width="0.0805%" height="15" fill="rgb(230,214,17)" fg:x="932" fg:w="1"/><text x="75.2299%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.9799%" y="565" width="0.0805%" height="15" fill="rgb(222,97,18)" fg:x="932" fg:w="1"/><text x="75.2299%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (3 samples, 0.24%)</title><rect x="74.8994%" y="693" width="0.2414%" height="15" fill="rgb(206,79,1)" fg:x="931" fg:w="3"/><text x="75.1494%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="74.8994%" y="677" width="0.2414%" height="15" fill="rgb(214,121,34)" fg:x="931" fg:w="3"/><text x="75.1494%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (3 samples, 0.24%)</title><rect x="74.8994%" y="661" width="0.2414%" height="15" fill="rgb(249,199,46)" fg:x="931" fg:w="3"/><text x="75.1494%" y="671.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="74.8994%" y="645" width="0.2414%" height="15" fill="rgb(214,222,46)" fg:x="931" fg:w="3"/><text x="75.1494%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="74.8994%" y="629" width="0.2414%" height="15" fill="rgb(248,168,30)" fg:x="931" fg:w="3"/><text x="75.1494%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="74.8994%" y="613" width="0.2414%" height="15" fill="rgb(226,14,28)" fg:x="931" fg:w="3"/><text x="75.1494%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.9799%" y="597" width="0.1609%" height="15" fill="rgb(253,123,1)" fg:x="932" fg:w="2"/><text x="75.2299%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.0603%" y="581" width="0.0805%" height="15" fill="rgb(225,24,42)" fg:x="933" fg:w="1"/><text x="75.3103%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.0603%" y="565" width="0.0805%" height="15" fill="rgb(216,161,37)" fg:x="933" fg:w="1"/><text x="75.3103%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.0603%" y="549" width="0.0805%" height="15" fill="rgb(251,164,26)" fg:x="933" fg:w="1"/><text x="75.3103%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.0603%" y="533" width="0.0805%" height="15" fill="rgb(219,177,3)" fg:x="933" fg:w="1"/><text x="75.3103%" y="543.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="74.7385%" y="709" width="0.4827%" height="15" fill="rgb(222,65,0)" fg:x="929" fg:w="6"/><text x="74.9885%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::storage::InMemoryStorage&gt; (1 samples, 0.08%)</title><rect x="75.1408%" y="693" width="0.0805%" height="15" fill="rgb(223,69,54)" fg:x="934" fg:w="1"/><text x="75.3908%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.4626%" y="645" width="0.0805%" height="15" fill="rgb(235,30,27)" fg:x="938" fg:w="1"/><text x="75.7126%" y="655.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="75.6235%" y="613" width="0.1609%" height="15" fill="rgb(220,183,50)" fg:x="940" fg:w="2"/><text x="75.8735%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="75.6235%" y="597" width="0.1609%" height="15" fill="rgb(248,198,15)" fg:x="940" fg:w="2"/><text x="75.8735%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="75.7039%" y="581" width="0.0805%" height="15" fill="rgb(222,211,4)" fg:x="941" fg:w="1"/><text x="75.9539%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.7039%" y="565" width="0.0805%" height="15" fill="rgb(214,102,34)" fg:x="941" fg:w="1"/><text x="75.9539%" y="575.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="75.7844%" y="613" width="0.0805%" height="15" fill="rgb(245,92,5)" fg:x="942" fg:w="1"/><text x="76.0344%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="75.7844%" y="597" width="0.0805%" height="15" fill="rgb(252,72,51)" fg:x="942" fg:w="1"/><text x="76.0344%" y="607.50"></text></g><g><title>&lt;plugins_core::fashion::actions::RemoveAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="75.7844%" y="581" width="0.0805%" height="15" fill="rgb(252,208,19)" fg:x="942" fg:w="1"/><text x="76.0344%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="75.7844%" y="565" width="0.0805%" height="15" fill="rgb(211,69,7)" fg:x="942" fg:w="1"/><text x="76.0344%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="75.7844%" y="549" width="0.0805%" height="15" fill="rgb(211,27,16)" fg:x="942" fg:w="1"/><text x="76.0344%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.7844%" y="533" width="0.0805%" height="15" fill="rgb(219,216,14)" fg:x="942" fg:w="1"/><text x="76.0344%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.7844%" y="517" width="0.0805%" height="15" fill="rgb(219,71,8)" fg:x="942" fg:w="1"/><text x="76.0344%" y="527.50"></text></g><g><title>&lt;plugins_core::moving::actions::RemoveRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="75.8648%" y="581" width="0.0805%" height="15" fill="rgb(223,170,53)" fg:x="943" fg:w="1"/><text x="76.1148%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="75.8648%" y="565" width="0.0805%" height="15" fill="rgb(246,21,26)" fg:x="943" fg:w="1"/><text x="76.1148%" y="575.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="75.8648%" y="613" width="0.1609%" height="15" fill="rgb(248,20,46)" fg:x="943" fg:w="2"/><text x="76.1148%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="75.8648%" y="597" width="0.1609%" height="15" fill="rgb(252,94,11)" fg:x="943" fg:w="2"/><text x="76.1148%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="75.9453%" y="581" width="0.0805%" height="15" fill="rgb(236,163,8)" fg:x="944" fg:w="1"/><text x="76.1953%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="75.9453%" y="565" width="0.0805%" height="15" fill="rgb(217,221,45)" fg:x="944" fg:w="1"/><text x="76.1953%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.9453%" y="549" width="0.0805%" height="15" fill="rgb(238,38,17)" fg:x="944" fg:w="1"/><text x="76.1953%" y="559.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="75.9453%" y="533" width="0.0805%" height="15" fill="rgb(242,210,23)" fg:x="944" fg:w="1"/><text x="76.1953%" y="543.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (7 samples, 0.56%)</title><rect x="75.5430%" y="629" width="0.5632%" height="15" fill="rgb(250,86,53)" fg:x="939" fg:w="7"/><text x="75.7930%" y="639.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="76.0257%" y="613" width="0.0805%" height="15" fill="rgb(223,168,25)" fg:x="945" fg:w="1"/><text x="76.2757%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="76.0257%" y="597" width="0.0805%" height="15" fill="rgb(251,189,4)" fg:x="945" fg:w="1"/><text x="76.2757%" y="607.50"></text></g><g><title>&lt;plugins_rune::actions::RuneAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="76.0257%" y="581" width="0.0805%" height="15" fill="rgb(245,19,28)" fg:x="945" fg:w="1"/><text x="76.2757%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="76.0257%" y="565" width="0.0805%" height="15" fill="rgb(207,10,34)" fg:x="945" fg:w="1"/><text x="76.2757%" y="575.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (1 samples, 0.08%)</title><rect x="76.1062%" y="629" width="0.0805%" height="15" fill="rgb(235,153,31)" fg:x="946" fg:w="1"/><text x="76.3562%" y="639.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="76.1062%" y="613" width="0.0805%" height="15" fill="rgb(228,72,37)" fg:x="946" fg:w="1"/><text x="76.3562%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="76.1062%" y="597" width="0.0805%" height="15" fill="rgb(215,15,16)" fg:x="946" fg:w="1"/><text x="76.3562%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="76.1062%" y="581" width="0.0805%" height="15" fill="rgb(250,119,29)" fg:x="946" fg:w="1"/><text x="76.3562%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="76.1062%" y="565" width="0.0805%" height="15" fill="rgb(214,59,1)" fg:x="946" fg:w="1"/><text x="76.3562%" y="575.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="76.1062%" y="549" width="0.0805%" height="15" fill="rgb(223,109,25)" fg:x="946" fg:w="1"/><text x="76.3562%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="76.1062%" y="533" width="0.0805%" height="15" fill="rgb(230,198,22)" fg:x="946" fg:w="1"/><text x="76.3562%" y="543.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="76.1062%" y="517" width="0.0805%" height="15" fill="rgb(245,184,46)" fg:x="946" fg:w="1"/><text x="76.3562%" y="527.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (3 samples, 0.24%)</title><rect x="76.1866%" y="613" width="0.2414%" height="15" fill="rgb(253,73,16)" fg:x="947" fg:w="3"/><text x="76.4366%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="76.1866%" y="597" width="0.2414%" height="15" fill="rgb(206,94,45)" fg:x="947" fg:w="3"/><text x="76.4366%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="76.2671%" y="581" width="0.1609%" height="15" fill="rgb(236,83,27)" fg:x="948" fg:w="2"/><text x="76.5171%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="76.2671%" y="565" width="0.1609%" height="15" fill="rgb(220,196,8)" fg:x="948" fg:w="2"/><text x="76.5171%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="76.2671%" y="549" width="0.1609%" height="15" fill="rgb(254,185,14)" fg:x="948" fg:w="2"/><text x="76.5171%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="76.2671%" y="533" width="0.1609%" height="15" fill="rgb(226,50,22)" fg:x="948" fg:w="2"/><text x="76.5171%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="76.2671%" y="517" width="0.1609%" height="15" fill="rgb(253,147,0)" fg:x="948" fg:w="2"/><text x="76.5171%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="76.2671%" y="501" width="0.1609%" height="15" fill="rgb(252,46,33)" fg:x="948" fg:w="2"/><text x="76.5171%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="76.2671%" y="485" width="0.1609%" height="15" fill="rgb(242,22,54)" fg:x="948" fg:w="2"/><text x="76.5171%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="76.2671%" y="469" width="0.1609%" height="15" fill="rgb(223,178,32)" fg:x="948" fg:w="2"/><text x="76.5171%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="76.2671%" y="453" width="0.1609%" height="15" fill="rgb(214,106,53)" fg:x="948" fg:w="2"/><text x="76.5171%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="76.2671%" y="437" width="0.1609%" height="15" fill="rgb(232,65,50)" fg:x="948" fg:w="2"/><text x="76.5171%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="76.2671%" y="421" width="0.1609%" height="15" fill="rgb(231,110,28)" fg:x="948" fg:w="2"/><text x="76.5171%" y="431.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="76.2671%" y="405" width="0.1609%" height="15" fill="rgb(216,71,40)" fg:x="948" fg:w="2"/><text x="76.5171%" y="415.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="76.2671%" y="389" width="0.1609%" height="15" fill="rgb(229,89,53)" fg:x="948" fg:w="2"/><text x="76.5171%" y="399.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="76.4280%" y="597" width="0.0805%" height="15" fill="rgb(210,124,14)" fg:x="950" fg:w="1"/><text x="76.6780%" y="607.50"></text></g><g><title>glob::fill_todo (1 samples, 0.08%)</title><rect x="76.4280%" y="581" width="0.0805%" height="15" fill="rgb(236,213,6)" fg:x="950" fg:w="1"/><text x="76.6780%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="76.4280%" y="565" width="0.0805%" height="15" fill="rgb(228,41,5)" fg:x="950" fg:w="1"/><text x="76.6780%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="76.4280%" y="549" width="0.0805%" height="15" fill="rgb(221,167,25)" fg:x="950" fg:w="1"/><text x="76.6780%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="76.4280%" y="533" width="0.0805%" height="15" fill="rgb(228,144,37)" fg:x="950" fg:w="1"/><text x="76.6780%" y="543.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="76.4280%" y="517" width="0.0805%" height="15" fill="rgb(227,189,38)" fg:x="950" fg:w="1"/><text x="76.6780%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="76.4280%" y="501" width="0.0805%" height="15" fill="rgb(218,8,2)" fg:x="950" fg:w="1"/><text x="76.6780%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="76.4280%" y="485" width="0.0805%" height="15" fill="rgb(209,61,28)" fg:x="950" fg:w="1"/><text x="76.6780%" y="495.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="76.4280%" y="469" width="0.0805%" height="15" fill="rgb(233,140,39)" fg:x="950" fg:w="1"/><text x="76.6780%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="76.5084%" y="549" width="0.0805%" height="15" fill="rgb(251,66,48)" fg:x="951" fg:w="1"/><text x="76.7584%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="76.5084%" y="533" width="0.0805%" height="15" fill="rgb(210,44,45)" fg:x="951" fg:w="1"/><text x="76.7584%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.5084%" y="517" width="0.0805%" height="15" fill="rgb(214,136,46)" fg:x="951" fg:w="1"/><text x="76.7584%" y="527.50"></text></g><g><title>glob::Pattern::new (2 samples, 0.16%)</title><rect x="76.5084%" y="565" width="0.1609%" height="15" fill="rgb(207,130,50)" fg:x="951" fg:w="2"/><text x="76.7584%" y="575.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="76.5889%" y="549" width="0.0805%" height="15" fill="rgb(228,102,49)" fg:x="952" fg:w="1"/><text x="76.8389%" y="559.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="76.5889%" y="533" width="0.0805%" height="15" fill="rgb(253,55,1)" fg:x="952" fg:w="1"/><text x="76.8389%" y="543.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (7 samples, 0.56%)</title><rect x="76.1866%" y="629" width="0.5632%" height="15" fill="rgb(238,222,9)" fg:x="947" fg:w="7"/><text x="76.4366%" y="639.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (4 samples, 0.32%)</title><rect x="76.4280%" y="613" width="0.3218%" height="15" fill="rgb(246,99,6)" fg:x="950" fg:w="4"/><text x="76.6780%" y="623.50"></text></g><g><title>glob::glob (3 samples, 0.24%)</title><rect x="76.5084%" y="597" width="0.2414%" height="15" fill="rgb(219,110,26)" fg:x="951" fg:w="3"/><text x="76.7584%" y="607.50"></text></g><g><title>glob::glob_with (3 samples, 0.24%)</title><rect x="76.5084%" y="581" width="0.2414%" height="15" fill="rgb(239,160,33)" fg:x="951" fg:w="3"/><text x="76.7584%" y="591.50"></text></g><g><title>std::ffi::os_str::&lt;impl core::convert::TryFrom&lt;&amp;std::ffi::os_str::OsStr&gt; for &amp;str&gt;::try_from (1 samples, 0.08%)</title><rect x="76.6693%" y="565" width="0.0805%" height="15" fill="rgb(220,202,23)" fg:x="953" fg:w="1"/><text x="76.9193%" y="575.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_str (1 samples, 0.08%)</title><rect x="76.6693%" y="549" width="0.0805%" height="15" fill="rgb(208,80,26)" fg:x="953" fg:w="1"/><text x="76.9193%" y="559.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.08%)</title><rect x="76.6693%" y="533" width="0.0805%" height="15" fill="rgb(243,85,7)" fg:x="953" fg:w="1"/><text x="76.9193%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (2 samples, 0.16%)</title><rect x="76.7498%" y="629" width="0.1609%" height="15" fill="rgb(228,77,47)" fg:x="954" fg:w="2"/><text x="76.9998%" y="639.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="76.7498%" y="613" width="0.1609%" height="15" fill="rgb(212,226,8)" fg:x="954" fg:w="2"/><text x="76.9998%" y="623.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (22 samples, 1.77%)</title><rect x="75.2212%" y="709" width="1.7699%" height="15" fill="rgb(241,120,54)" fg:x="935" fg:w="22"/><text x="75.4712%" y="719.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (22 samples, 1.77%)</title><rect x="75.2212%" y="693" width="1.7699%" height="15" fill="rgb(226,80,16)" fg:x="935" fg:w="22"/><text x="75.4712%" y="703.50"></text></g><g><title>engine::session::Session::new (20 samples, 1.61%)</title><rect x="75.3821%" y="677" width="1.6090%" height="15" fill="rgb(240,76,13)" fg:x="937" fg:w="20"/><text x="75.6321%" y="687.50"></text></g><g><title>engine::session::Session::initialize (20 samples, 1.61%)</title><rect x="75.3821%" y="661" width="1.6090%" height="15" fill="rgb(252,74,8)" fg:x="937" fg:w="20"/><text x="75.6321%" y="671.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (18 samples, 1.45%)</title><rect x="75.5430%" y="645" width="1.4481%" height="15" fill="rgb(244,155,2)" fg:x="939" fg:w="18"/><text x="75.7930%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="76.9107%" y="629" width="0.0805%" height="15" fill="rgb(215,81,35)" fg:x="956" fg:w="1"/><text x="77.1607%" y="639.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="76.9107%" y="613" width="0.0805%" height="15" fill="rgb(206,55,2)" fg:x="956" fg:w="1"/><text x="77.1607%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.9912%" y="693" width="0.0805%" height="15" fill="rgb(231,2,34)" fg:x="957" fg:w="1"/><text x="77.2412%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.9912%" y="677" width="0.0805%" height="15" fill="rgb(242,176,48)" fg:x="957" fg:w="1"/><text x="77.2412%" y="687.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.9912%" y="661" width="0.0805%" height="15" fill="rgb(249,31,36)" fg:x="957" fg:w="1"/><text x="77.2412%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.9912%" y="645" width="0.0805%" height="15" fill="rgb(205,18,17)" fg:x="957" fg:w="1"/><text x="77.2412%" y="655.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="77.0716%" y="597" width="0.0805%" height="15" fill="rgb(254,130,5)" fg:x="958" fg:w="1"/><text x="77.3216%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="77.0716%" y="581" width="0.0805%" height="15" fill="rgb(229,42,45)" fg:x="958" fg:w="1"/><text x="77.3216%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="77.0716%" y="565" width="0.0805%" height="15" fill="rgb(245,95,25)" fg:x="958" fg:w="1"/><text x="77.3216%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="77.2325%" y="565" width="0.0805%" height="15" fill="rgb(249,193,38)" fg:x="960" fg:w="1"/><text x="77.4825%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.2325%" y="549" width="0.0805%" height="15" fill="rgb(241,140,43)" fg:x="960" fg:w="1"/><text x="77.4825%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.2325%" y="533" width="0.0805%" height="15" fill="rgb(245,78,48)" fg:x="960" fg:w="1"/><text x="77.4825%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.2325%" y="517" width="0.0805%" height="15" fill="rgb(214,92,39)" fg:x="960" fg:w="1"/><text x="77.4825%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="77.2325%" y="501" width="0.0805%" height="15" fill="rgb(211,189,14)" fg:x="960" fg:w="1"/><text x="77.4825%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.2325%" y="485" width="0.0805%" height="15" fill="rgb(218,7,24)" fg:x="960" fg:w="1"/><text x="77.4825%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="77.2325%" y="469" width="0.0805%" height="15" fill="rgb(224,200,49)" fg:x="960" fg:w="1"/><text x="77.4825%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="77.3934%" y="549" width="0.0805%" height="15" fill="rgb(218,210,14)" fg:x="962" fg:w="1"/><text x="77.6434%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="77.4739%" y="517" width="0.0805%" height="15" fill="rgb(234,142,31)" fg:x="963" fg:w="1"/><text x="77.7239%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.4739%" y="501" width="0.0805%" height="15" fill="rgb(227,165,2)" fg:x="963" fg:w="1"/><text x="77.7239%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.4739%" y="485" width="0.0805%" height="15" fill="rgb(232,44,46)" fg:x="963" fg:w="1"/><text x="77.7239%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.4739%" y="469" width="0.0805%" height="15" fill="rgb(236,149,47)" fg:x="963" fg:w="1"/><text x="77.7239%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="77.4739%" y="533" width="0.1609%" height="15" fill="rgb(227,45,31)" fg:x="963" fg:w="2"/><text x="77.7239%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.5543%" y="517" width="0.0805%" height="15" fill="rgb(240,176,51)" fg:x="964" fg:w="1"/><text x="77.8043%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.56%)</title><rect x="77.1521%" y="597" width="0.5632%" height="15" fill="rgb(249,146,41)" fg:x="959" fg:w="7"/><text x="77.4021%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="77.1521%" y="581" width="0.5632%" height="15" fill="rgb(213,208,4)" fg:x="959" fg:w="7"/><text x="77.4021%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="77.3130%" y="565" width="0.4023%" height="15" fill="rgb(245,84,36)" fg:x="961" fg:w="5"/><text x="77.5630%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="77.4739%" y="549" width="0.2414%" height="15" fill="rgb(254,84,18)" fg:x="963" fg:w="3"/><text x="77.7239%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.6348%" y="533" width="0.0805%" height="15" fill="rgb(225,38,54)" fg:x="965" fg:w="1"/><text x="77.8848%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.7152%" y="565" width="0.0805%" height="15" fill="rgb(246,50,30)" fg:x="966" fg:w="1"/><text x="77.9652%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.7152%" y="549" width="0.0805%" height="15" fill="rgb(246,148,9)" fg:x="966" fg:w="1"/><text x="77.9652%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="77.7152%" y="597" width="0.1609%" height="15" fill="rgb(223,75,4)" fg:x="966" fg:w="2"/><text x="77.9652%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="77.7152%" y="581" width="0.1609%" height="15" fill="rgb(239,148,41)" fg:x="966" fg:w="2"/><text x="77.9652%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.7957%" y="565" width="0.0805%" height="15" fill="rgb(205,195,3)" fg:x="967" fg:w="1"/><text x="78.0457%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.7957%" y="549" width="0.0805%" height="15" fill="rgb(254,161,1)" fg:x="967" fg:w="1"/><text x="78.0457%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.7957%" y="533" width="0.0805%" height="15" fill="rgb(211,229,8)" fg:x="967" fg:w="1"/><text x="78.0457%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.7957%" y="517" width="0.0805%" height="15" fill="rgb(220,97,9)" fg:x="967" fg:w="1"/><text x="78.0457%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="77.9566%" y="501" width="0.2414%" height="15" fill="rgb(240,218,8)" fg:x="969" fg:w="3"/><text x="78.2066%" y="511.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="78.0370%" y="485" width="0.1609%" height="15" fill="rgb(250,44,0)" fg:x="970" fg:w="2"/><text x="78.2870%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="78.1979%" y="501" width="0.0805%" height="15" fill="rgb(236,41,53)" fg:x="972" fg:w="1"/><text x="78.4479%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="78.1979%" y="485" width="0.0805%" height="15" fill="rgb(218,227,13)" fg:x="972" fg:w="1"/><text x="78.4479%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="78.1979%" y="469" width="0.0805%" height="15" fill="rgb(217,94,32)" fg:x="972" fg:w="1"/><text x="78.4479%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="78.1979%" y="453" width="0.0805%" height="15" fill="rgb(213,217,12)" fg:x="972" fg:w="1"/><text x="78.4479%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.40%)</title><rect x="77.9566%" y="533" width="0.4023%" height="15" fill="rgb(229,13,46)" fg:x="969" fg:w="5"/><text x="78.2066%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="77.9566%" y="517" width="0.4023%" height="15" fill="rgb(243,139,5)" fg:x="969" fg:w="5"/><text x="78.2066%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="78.2784%" y="501" width="0.0805%" height="15" fill="rgb(249,38,45)" fg:x="973" fg:w="1"/><text x="78.5284%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="78.2784%" y="485" width="0.0805%" height="15" fill="rgb(216,70,11)" fg:x="973" fg:w="1"/><text x="78.5284%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="78.2784%" y="469" width="0.0805%" height="15" fill="rgb(253,101,25)" fg:x="973" fg:w="1"/><text x="78.5284%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="78.2784%" y="453" width="0.0805%" height="15" fill="rgb(207,197,30)" fg:x="973" fg:w="1"/><text x="78.5284%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.2784%" y="437" width="0.0805%" height="15" fill="rgb(238,87,13)" fg:x="973" fg:w="1"/><text x="78.5284%" y="447.50"></text></g><g><title>engine::session::Session::flush (17 samples, 1.37%)</title><rect x="77.0716%" y="693" width="1.3677%" height="15" fill="rgb(215,155,8)" fg:x="958" fg:w="17"/><text x="77.3216%" y="703.50"></text></g><g><title>engine::session::state::State::close (17 samples, 1.37%)</title><rect x="77.0716%" y="677" width="1.3677%" height="15" fill="rgb(239,166,38)" fg:x="958" fg:w="17"/><text x="77.3216%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (17 samples, 1.37%)</title><rect x="77.0716%" y="661" width="1.3677%" height="15" fill="rgb(240,194,35)" fg:x="958" fg:w="17"/><text x="77.3216%" y="671.50"></text></g><g><title>core::iter::adapters::try_process (17 samples, 1.37%)</title><rect x="77.0716%" y="645" width="1.3677%" height="15" fill="rgb(219,10,44)" fg:x="958" fg:w="17"/><text x="77.3216%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (17 samples, 1.37%)</title><rect x="77.0716%" y="629" width="1.3677%" height="15" fill="rgb(251,220,35)" fg:x="958" fg:w="17"/><text x="77.3216%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (17 samples, 1.37%)</title><rect x="77.0716%" y="613" width="1.3677%" height="15" fill="rgb(218,117,13)" fg:x="958" fg:w="17"/><text x="77.3216%" y="623.50"></text></g><g><title>kernel::model::any_entity_changes (7 samples, 0.56%)</title><rect x="77.8761%" y="597" width="0.5632%" height="15" fill="rgb(221,213,40)" fg:x="968" fg:w="7"/><text x="78.1261%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.56%)</title><rect x="77.8761%" y="581" width="0.5632%" height="15" fill="rgb(251,224,35)" fg:x="968" fg:w="7"/><text x="78.1261%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.56%)</title><rect x="77.8761%" y="565" width="0.5632%" height="15" fill="rgb(241,33,39)" fg:x="968" fg:w="7"/><text x="78.1261%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.48%)</title><rect x="77.9566%" y="549" width="0.4827%" height="15" fill="rgb(222,74,17)" fg:x="969" fg:w="6"/><text x="78.2066%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.3588%" y="533" width="0.0805%" height="15" fill="rgb(225,103,0)" fg:x="974" fg:w="1"/><text x="78.6088%" y="543.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="78.4393%" y="645" width="0.0805%" height="15" fill="rgb(240,0,12)" fg:x="975" fg:w="1"/><text x="78.6893%" y="655.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.4393%" y="629" width="0.0805%" height="15" fill="rgb(233,213,37)" fg:x="975" fg:w="1"/><text x="78.6893%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.4393%" y="613" width="0.0805%" height="15" fill="rgb(225,84,52)" fg:x="975" fg:w="1"/><text x="78.6893%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.4393%" y="597" width="0.0805%" height="15" fill="rgb(247,160,51)" fg:x="975" fg:w="1"/><text x="78.6893%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.4393%" y="581" width="0.0805%" height="15" fill="rgb(244,60,51)" fg:x="975" fg:w="1"/><text x="78.6893%" y="591.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="78.4393%" y="661" width="0.1609%" height="15" fill="rgb(233,114,7)" fg:x="975" fg:w="2"/><text x="78.6893%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="78.5197%" y="645" width="0.0805%" height="15" fill="rgb(246,136,16)" fg:x="976" fg:w="1"/><text x="78.7697%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="78.5197%" y="629" width="0.0805%" height="15" fill="rgb(243,114,45)" fg:x="976" fg:w="1"/><text x="78.7697%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.5197%" y="613" width="0.0805%" height="15" fill="rgb(247,183,43)" fg:x="976" fg:w="1"/><text x="78.7697%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="78.4393%" y="693" width="0.2414%" height="15" fill="rgb(251,210,42)" fg:x="975" fg:w="3"/><text x="78.6893%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="78.4393%" y="677" width="0.2414%" height="15" fill="rgb(221,88,35)" fg:x="975" fg:w="3"/><text x="78.6893%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="78.6002%" y="661" width="0.0805%" height="15" fill="rgb(242,21,20)" fg:x="977" fg:w="1"/><text x="78.8502%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="78.6002%" y="645" width="0.0805%" height="15" fill="rgb(233,226,36)" fg:x="977" fg:w="1"/><text x="78.8502%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="78.6002%" y="629" width="0.0805%" height="15" fill="rgb(243,189,34)" fg:x="977" fg:w="1"/><text x="78.8502%" y="639.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (1 samples, 0.08%)</title><rect x="78.6806%" y="693" width="0.0805%" height="15" fill="rgb(207,145,50)" fg:x="978" fg:w="1"/><text x="78.9306%" y="703.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="78.6806%" y="677" width="0.0805%" height="15" fill="rgb(242,1,50)" fg:x="978" fg:w="1"/><text x="78.9306%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="78.6806%" y="661" width="0.0805%" height="15" fill="rgb(231,65,32)" fg:x="978" fg:w="1"/><text x="78.9306%" y="671.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="78.6806%" y="645" width="0.0805%" height="15" fill="rgb(208,68,49)" fg:x="978" fg:w="1"/><text x="78.9306%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="78.6806%" y="629" width="0.0805%" height="15" fill="rgb(253,54,49)" fg:x="978" fg:w="1"/><text x="78.9306%" y="639.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="78.6806%" y="613" width="0.0805%" height="15" fill="rgb(245,186,24)" fg:x="978" fg:w="1"/><text x="78.9306%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.7611%" y="549" width="0.0805%" height="15" fill="rgb(209,2,41)" fg:x="979" fg:w="1"/><text x="79.0111%" y="559.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="78.7611%" y="613" width="0.1609%" height="15" fill="rgb(242,208,54)" fg:x="979" fg:w="2"/><text x="79.0111%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="78.7611%" y="597" width="0.1609%" height="15" fill="rgb(225,9,51)" fg:x="979" fg:w="2"/><text x="79.0111%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="78.7611%" y="581" width="0.1609%" height="15" fill="rgb(207,207,25)" fg:x="979" fg:w="2"/><text x="79.0111%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.7611%" y="565" width="0.1609%" height="15" fill="rgb(253,96,18)" fg:x="979" fg:w="2"/><text x="79.0111%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="78.8415%" y="549" width="0.0805%" height="15" fill="rgb(252,215,20)" fg:x="980" fg:w="1"/><text x="79.0915%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.8415%" y="533" width="0.0805%" height="15" fill="rgb(245,227,26)" fg:x="980" fg:w="1"/><text x="79.0915%" y="543.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (3 samples, 0.24%)</title><rect x="78.7611%" y="693" width="0.2414%" height="15" fill="rgb(241,208,0)" fg:x="979" fg:w="3"/><text x="79.0111%" y="703.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="78.7611%" y="677" width="0.2414%" height="15" fill="rgb(224,130,10)" fg:x="979" fg:w="3"/><text x="79.0111%" y="687.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="78.7611%" y="661" width="0.2414%" height="15" fill="rgb(237,29,0)" fg:x="979" fg:w="3"/><text x="79.0111%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="78.7611%" y="645" width="0.2414%" height="15" fill="rgb(219,27,41)" fg:x="979" fg:w="3"/><text x="79.0111%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="78.7611%" y="629" width="0.2414%" height="15" fill="rgb(245,101,19)" fg:x="979" fg:w="3"/><text x="79.0111%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="78.9220%" y="613" width="0.0805%" height="15" fill="rgb(243,44,37)" fg:x="981" fg:w="1"/><text x="79.1720%" y="623.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="78.9220%" y="597" width="0.0805%" height="15" fill="rgb(228,213,43)" fg:x="981" fg:w="1"/><text x="79.1720%" y="607.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="79.0829%" y="677" width="0.0805%" height="15" fill="rgb(219,163,21)" fg:x="983" fg:w="1"/><text x="79.3329%" y="687.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="79.0829%" y="661" width="0.0805%" height="15" fill="rgb(234,86,24)" fg:x="983" fg:w="1"/><text x="79.3329%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="79.0829%" y="645" width="0.0805%" height="15" fill="rgb(225,10,24)" fg:x="983" fg:w="1"/><text x="79.3329%" y="655.50"></text></g><g><title>engine::users::model::_::&lt;impl serde::ser::Serialize for engine::users::model::Usernames&gt;::serialize (1 samples, 0.08%)</title><rect x="79.0829%" y="629" width="0.0805%" height="15" fill="rgb(218,109,7)" fg:x="983" fg:w="1"/><text x="79.3329%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.0829%" y="613" width="0.0805%" height="15" fill="rgb(210,20,26)" fg:x="983" fg:w="1"/><text x="79.3329%" y="623.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="79.1633%" y="677" width="0.0805%" height="15" fill="rgb(216,18,1)" fg:x="984" fg:w="1"/><text x="79.4133%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="79.1633%" y="661" width="0.0805%" height="15" fill="rgb(206,163,23)" fg:x="984" fg:w="1"/><text x="79.4133%" y="671.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="79.2438%" y="661" width="0.1609%" height="15" fill="rgb(229,150,31)" fg:x="985" fg:w="2"/><text x="79.4938%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.3242%" y="645" width="0.0805%" height="15" fill="rgb(231,10,5)" fg:x="986" fg:w="1"/><text x="79.5742%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="79.4047%" y="533" width="0.1609%" height="15" fill="rgb(250,40,50)" fg:x="987" fg:w="2"/><text x="79.6547%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.5656%" y="533" width="0.0805%" height="15" fill="rgb(217,119,7)" fg:x="989" fg:w="1"/><text x="79.8156%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.5656%" y="517" width="0.0805%" height="15" fill="rgb(245,214,40)" fg:x="989" fg:w="1"/><text x="79.8156%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.5656%" y="501" width="0.0805%" height="15" fill="rgb(216,187,1)" fg:x="989" fg:w="1"/><text x="79.8156%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.5656%" y="485" width="0.0805%" height="15" fill="rgb(237,146,21)" fg:x="989" fg:w="1"/><text x="79.8156%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="79.6460%" y="517" width="0.1609%" height="15" fill="rgb(210,174,47)" fg:x="990" fg:w="2"/><text x="79.8960%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="79.8069%" y="501" width="0.1609%" height="15" fill="rgb(218,111,39)" fg:x="992" fg:w="2"/><text x="80.0569%" y="511.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="79.8069%" y="485" width="0.1609%" height="15" fill="rgb(224,95,19)" fg:x="992" fg:w="2"/><text x="80.0569%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="79.8069%" y="469" width="0.1609%" height="15" fill="rgb(234,15,38)" fg:x="992" fg:w="2"/><text x="80.0569%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="79.8069%" y="453" width="0.1609%" height="15" fill="rgb(246,56,12)" fg:x="992" fg:w="2"/><text x="80.0569%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="79.8069%" y="437" width="0.1609%" height="15" fill="rgb(247,16,17)" fg:x="992" fg:w="2"/><text x="80.0569%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="79.8069%" y="421" width="0.1609%" height="15" fill="rgb(215,151,11)" fg:x="992" fg:w="2"/><text x="80.0569%" y="431.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="79.8069%" y="405" width="0.1609%" height="15" fill="rgb(225,16,24)" fg:x="992" fg:w="2"/><text x="80.0569%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="79.9678%" y="485" width="0.2414%" height="15" fill="rgb(217,117,5)" fg:x="994" fg:w="3"/><text x="80.2178%" y="495.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="80.0483%" y="469" width="0.1609%" height="15" fill="rgb(246,187,53)" fg:x="995" fg:w="2"/><text x="80.2983%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="80.0483%" y="453" width="0.1609%" height="15" fill="rgb(241,71,40)" fg:x="995" fg:w="2"/><text x="80.2983%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="80.0483%" y="437" width="0.1609%" height="15" fill="rgb(231,67,39)" fg:x="995" fg:w="2"/><text x="80.2983%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="80.0483%" y="421" width="0.1609%" height="15" fill="rgb(222,120,24)" fg:x="995" fg:w="2"/><text x="80.2983%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="80.0483%" y="405" width="0.1609%" height="15" fill="rgb(248,3,3)" fg:x="995" fg:w="2"/><text x="80.2983%" y="415.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="80.0483%" y="389" width="0.1609%" height="15" fill="rgb(228,218,5)" fg:x="995" fg:w="2"/><text x="80.2983%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="79.9678%" y="501" width="0.3218%" height="15" fill="rgb(212,202,43)" fg:x="994" fg:w="4"/><text x="80.2178%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.2092%" y="485" width="0.0805%" height="15" fill="rgb(235,183,2)" fg:x="997" fg:w="1"/><text x="80.4592%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.72%)</title><rect x="79.6460%" y="533" width="0.7241%" height="15" fill="rgb(230,165,10)" fg:x="990" fg:w="9"/><text x="79.8960%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="79.8069%" y="517" width="0.5632%" height="15" fill="rgb(219,54,40)" fg:x="992" fg:w="7"/><text x="80.0569%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.2896%" y="501" width="0.0805%" height="15" fill="rgb(244,73,9)" fg:x="998" fg:w="1"/><text x="80.5396%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (14 samples, 1.13%)</title><rect x="79.4047%" y="565" width="1.1263%" height="15" fill="rgb(212,32,45)" fg:x="987" fg:w="14"/><text x="79.6547%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (14 samples, 1.13%)</title><rect x="79.4047%" y="549" width="1.1263%" height="15" fill="rgb(205,58,31)" fg:x="987" fg:w="14"/><text x="79.6547%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="80.3701%" y="533" width="0.1609%" height="15" fill="rgb(250,120,43)" fg:x="999" fg:w="2"/><text x="80.6201%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="80.3701%" y="517" width="0.1609%" height="15" fill="rgb(235,13,10)" fg:x="999" fg:w="2"/><text x="80.6201%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="80.3701%" y="501" width="0.1609%" height="15" fill="rgb(232,219,31)" fg:x="999" fg:w="2"/><text x="80.6201%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="80.3701%" y="485" width="0.1609%" height="15" fill="rgb(218,157,51)" fg:x="999" fg:w="2"/><text x="80.6201%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="80.3701%" y="469" width="0.1609%" height="15" fill="rgb(211,91,52)" fg:x="999" fg:w="2"/><text x="80.6201%" y="479.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="80.3701%" y="453" width="0.1609%" height="15" fill="rgb(240,173,1)" fg:x="999" fg:w="2"/><text x="80.6201%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="80.5310%" y="533" width="0.0805%" height="15" fill="rgb(248,20,47)" fg:x="1001" fg:w="1"/><text x="80.7810%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="80.5310%" y="565" width="0.1609%" height="15" fill="rgb(217,221,40)" fg:x="1001" fg:w="2"/><text x="80.7810%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="80.5310%" y="549" width="0.1609%" height="15" fill="rgb(226,149,51)" fg:x="1001" fg:w="2"/><text x="80.7810%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.6114%" y="533" width="0.0805%" height="15" fill="rgb(252,193,7)" fg:x="1002" fg:w="1"/><text x="80.8614%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.6114%" y="517" width="0.0805%" height="15" fill="rgb(205,123,0)" fg:x="1002" fg:w="1"/><text x="80.8614%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="80.6919%" y="533" width="0.0805%" height="15" fill="rgb(233,173,25)" fg:x="1003" fg:w="1"/><text x="80.9419%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="80.6919%" y="549" width="0.1609%" height="15" fill="rgb(216,63,32)" fg:x="1003" fg:w="2"/><text x="80.9419%" y="559.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="80.7723%" y="533" width="0.0805%" height="15" fill="rgb(209,56,45)" fg:x="1004" fg:w="1"/><text x="81.0223%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="80.7723%" y="517" width="0.0805%" height="15" fill="rgb(226,111,49)" fg:x="1004" fg:w="1"/><text x="81.0223%" y="527.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="80.7723%" y="501" width="0.0805%" height="15" fill="rgb(244,181,21)" fg:x="1004" fg:w="1"/><text x="81.0223%" y="511.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="80.7723%" y="485" width="0.0805%" height="15" fill="rgb(222,126,15)" fg:x="1004" fg:w="1"/><text x="81.0223%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="80.7723%" y="469" width="0.0805%" height="15" fill="rgb(222,95,17)" fg:x="1004" fg:w="1"/><text x="81.0223%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.7723%" y="453" width="0.0805%" height="15" fill="rgb(254,46,5)" fg:x="1004" fg:w="1"/><text x="81.0223%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="80.8528%" y="469" width="0.0805%" height="15" fill="rgb(236,216,35)" fg:x="1005" fg:w="1"/><text x="81.1028%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.8528%" y="453" width="0.0805%" height="15" fill="rgb(217,187,26)" fg:x="1005" fg:w="1"/><text x="81.1028%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="80.8528%" y="437" width="0.0805%" height="15" fill="rgb(207,192,25)" fg:x="1005" fg:w="1"/><text x="81.1028%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.8528%" y="421" width="0.0805%" height="15" fill="rgb(253,135,27)" fg:x="1005" fg:w="1"/><text x="81.1028%" y="431.50"></text></g><g><title>engine::session::Session::flush (22 samples, 1.77%)</title><rect x="79.2438%" y="677" width="1.7699%" height="15" fill="rgb(211,122,29)" fg:x="985" fg:w="22"/><text x="79.4938%" y="687.50"></text></g><g><title>engine::session::Session::save_changes (20 samples, 1.61%)</title><rect x="79.4047%" y="661" width="1.6090%" height="15" fill="rgb(233,162,40)" fg:x="987" fg:w="20"/><text x="79.6547%" y="671.50"></text></g><g><title>engine::session::state::State::close (20 samples, 1.61%)</title><rect x="79.4047%" y="645" width="1.6090%" height="15" fill="rgb(222,184,47)" fg:x="987" fg:w="20"/><text x="79.6547%" y="655.50"></text></g><g><title>engine::session::state::State::flush_entities (20 samples, 1.61%)</title><rect x="79.4047%" y="629" width="1.6090%" height="15" fill="rgb(249,99,23)" fg:x="987" fg:w="20"/><text x="79.6547%" y="639.50"></text></g><g><title>core::iter::adapters::try_process (20 samples, 1.61%)</title><rect x="79.4047%" y="613" width="1.6090%" height="15" fill="rgb(214,60,12)" fg:x="987" fg:w="20"/><text x="79.6547%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (20 samples, 1.61%)</title><rect x="79.4047%" y="597" width="1.6090%" height="15" fill="rgb(250,229,36)" fg:x="987" fg:w="20"/><text x="79.6547%" y="607.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (20 samples, 1.61%)</title><rect x="79.4047%" y="581" width="1.6090%" height="15" fill="rgb(232,195,10)" fg:x="987" fg:w="20"/><text x="79.6547%" y="591.50"></text></g><g><title>kernel::model::any_entity_changes (4 samples, 0.32%)</title><rect x="80.6919%" y="565" width="0.3218%" height="15" fill="rgb(205,213,31)" fg:x="1003" fg:w="4"/><text x="80.9419%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="80.8528%" y="549" width="0.1609%" height="15" fill="rgb(237,43,8)" fg:x="1005" fg:w="2"/><text x="81.1028%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="80.8528%" y="533" width="0.1609%" height="15" fill="rgb(216,208,3)" fg:x="1005" fg:w="2"/><text x="81.1028%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="80.8528%" y="517" width="0.1609%" height="15" fill="rgb(228,179,44)" fg:x="1005" fg:w="2"/><text x="81.1028%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="80.8528%" y="501" width="0.1609%" height="15" fill="rgb(230,192,27)" fg:x="1005" fg:w="2"/><text x="81.1028%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="80.8528%" y="485" width="0.1609%" height="15" fill="rgb(251,30,38)" fg:x="1005" fg:w="2"/><text x="81.1028%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.9332%" y="469" width="0.0805%" height="15" fill="rgb(246,55,52)" fg:x="1006" fg:w="1"/><text x="81.1832%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.0137%" y="629" width="0.0805%" height="15" fill="rgb(249,79,26)" fg:x="1007" fg:w="1"/><text x="81.2637%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="81.0137%" y="661" width="0.1609%" height="15" fill="rgb(220,202,16)" fg:x="1007" fg:w="2"/><text x="81.2637%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="81.0137%" y="645" width="0.1609%" height="15" fill="rgb(250,170,23)" fg:x="1007" fg:w="2"/><text x="81.2637%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="81.0941%" y="629" width="0.0805%" height="15" fill="rgb(230,7,37)" fg:x="1008" fg:w="1"/><text x="81.3441%" y="639.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="81.1746%" y="645" width="0.0805%" height="15" fill="rgb(213,71,1)" fg:x="1009" fg:w="1"/><text x="81.4246%" y="655.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="81.1746%" y="629" width="0.0805%" height="15" fill="rgb(227,87,39)" fg:x="1009" fg:w="1"/><text x="81.4246%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="81.1746%" y="613" width="0.0805%" height="15" fill="rgb(210,41,29)" fg:x="1009" fg:w="1"/><text x="81.4246%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.1746%" y="597" width="0.0805%" height="15" fill="rgb(206,191,31)" fg:x="1009" fg:w="1"/><text x="81.4246%" y="607.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.32%)</title><rect x="81.0137%" y="677" width="0.3218%" height="15" fill="rgb(247,75,54)" fg:x="1007" fg:w="4"/><text x="81.2637%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="81.1746%" y="661" width="0.1609%" height="15" fill="rgb(208,54,50)" fg:x="1009" fg:w="2"/><text x="81.4246%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="81.2550%" y="645" width="0.0805%" height="15" fill="rgb(214,90,37)" fg:x="1010" fg:w="1"/><text x="81.5050%" y="655.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="81.2550%" y="629" width="0.0805%" height="15" fill="rgb(220,132,6)" fg:x="1010" fg:w="1"/><text x="81.5050%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="81.2550%" y="613" width="0.0805%" height="15" fill="rgb(213,167,7)" fg:x="1010" fg:w="1"/><text x="81.5050%" y="623.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="81.2550%" y="597" width="0.0805%" height="15" fill="rgb(243,36,27)" fg:x="1010" fg:w="1"/><text x="81.5050%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.2550%" y="581" width="0.0805%" height="15" fill="rgb(235,147,12)" fg:x="1010" fg:w="1"/><text x="81.5050%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="81.2550%" y="565" width="0.0805%" height="15" fill="rgb(212,198,44)" fg:x="1010" fg:w="1"/><text x="81.5050%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="81.2550%" y="549" width="0.0805%" height="15" fill="rgb(218,68,50)" fg:x="1010" fg:w="1"/><text x="81.5050%" y="559.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="81.3355%" y="645" width="0.0805%" height="15" fill="rgb(224,79,48)" fg:x="1011" fg:w="1"/><text x="81.5855%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="81.3355%" y="629" width="0.0805%" height="15" fill="rgb(213,191,50)" fg:x="1011" fg:w="1"/><text x="81.5855%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="81.3355%" y="613" width="0.0805%" height="15" fill="rgb(254,146,10)" fg:x="1011" fg:w="1"/><text x="81.5855%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="81.3355%" y="597" width="0.0805%" height="15" fill="rgb(215,175,11)" fg:x="1011" fg:w="1"/><text x="81.5855%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="81.3355%" y="581" width="0.0805%" height="15" fill="rgb(207,49,7)" fg:x="1011" fg:w="1"/><text x="81.5855%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.3355%" y="565" width="0.0805%" height="15" fill="rgb(234,144,29)" fg:x="1011" fg:w="1"/><text x="81.5855%" y="575.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (2 samples, 0.16%)</title><rect x="81.3355%" y="677" width="0.1609%" height="15" fill="rgb(213,222,48)" fg:x="1011" fg:w="2"/><text x="81.5855%" y="687.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="81.3355%" y="661" width="0.1609%" height="15" fill="rgb(222,8,6)" fg:x="1011" fg:w="2"/><text x="81.5855%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="81.4159%" y="645" width="0.0805%" height="15" fill="rgb(221,114,49)" fg:x="1012" fg:w="1"/><text x="81.6659%" y="655.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="81.4159%" y="629" width="0.0805%" height="15" fill="rgb(250,140,42)" fg:x="1012" fg:w="1"/><text x="81.6659%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.4159%" y="613" width="0.0805%" height="15" fill="rgb(250,150,27)" fg:x="1012" fg:w="1"/><text x="81.6659%" y="623.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="81.4159%" y="597" width="0.0805%" height="15" fill="rgb(252,159,3)" fg:x="1012" fg:w="1"/><text x="81.6659%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.4159%" y="581" width="0.0805%" height="15" fill="rgb(241,182,3)" fg:x="1012" fg:w="1"/><text x="81.6659%" y="591.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (1 samples, 0.08%)</title><rect x="81.4964%" y="677" width="0.0805%" height="15" fill="rgb(236,3,9)" fg:x="1013" fg:w="1"/><text x="81.7464%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="81.4964%" y="661" width="0.0805%" height="15" fill="rgb(223,227,51)" fg:x="1013" fg:w="1"/><text x="81.7464%" y="671.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="81.4964%" y="645" width="0.0805%" height="15" fill="rgb(232,133,30)" fg:x="1013" fg:w="1"/><text x="81.7464%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="81.4964%" y="629" width="0.0805%" height="15" fill="rgb(209,93,27)" fg:x="1013" fg:w="1"/><text x="81.7464%" y="639.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Route&gt;::serialize (1 samples, 0.08%)</title><rect x="81.4964%" y="613" width="0.0805%" height="15" fill="rgb(208,108,34)" fg:x="1013" fg:w="1"/><text x="81.7464%" y="623.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::SimpleRoute&gt;::serialize (1 samples, 0.08%)</title><rect x="81.4964%" y="597" width="0.0805%" height="15" fill="rgb(215,189,13)" fg:x="1013" fg:w="1"/><text x="81.7464%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="81.4964%" y="581" width="0.0805%" height="15" fill="rgb(206,88,23)" fg:x="1013" fg:w="1"/><text x="81.7464%" y="591.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="81.5768%" y="661" width="0.0805%" height="15" fill="rgb(240,173,0)" fg:x="1014" fg:w="1"/><text x="81.8268%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="81.5768%" y="645" width="0.0805%" height="15" fill="rgb(223,106,52)" fg:x="1014" fg:w="1"/><text x="81.8268%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="81.5768%" y="629" width="0.0805%" height="15" fill="rgb(206,130,16)" fg:x="1014" fg:w="1"/><text x="81.8268%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="81.5768%" y="613" width="0.0805%" height="15" fill="rgb(220,54,25)" fg:x="1014" fg:w="1"/><text x="81.8268%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.5768%" y="597" width="0.0805%" height="15" fill="rgb(210,4,38)" fg:x="1014" fg:w="1"/><text x="81.8268%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="81.6573%" y="613" width="0.0805%" height="15" fill="rgb(238,94,39)" fg:x="1015" fg:w="1"/><text x="81.9073%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="81.6573%" y="597" width="0.0805%" height="15" fill="rgb(234,124,34)" fg:x="1015" fg:w="1"/><text x="81.9073%" y="607.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (35 samples, 2.82%)</title><rect x="79.0024%" y="693" width="2.8158%" height="15" fill="rgb(221,91,40)" fg:x="982" fg:w="35"/><text x="79.2524%" y="703.50">pl..</text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="81.5768%" y="677" width="0.2414%" height="15" fill="rgb(246,53,28)" fg:x="1014" fg:w="3"/><text x="81.8268%" y="687.50"></text></g><g><title>plugins_core::location::model::Location::set (2 samples, 0.16%)</title><rect x="81.6573%" y="661" width="0.1609%" height="15" fill="rgb(229,109,7)" fg:x="1015" fg:w="2"/><text x="81.9073%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="81.6573%" y="645" width="0.1609%" height="15" fill="rgb(249,117,8)" fg:x="1015" fg:w="2"/><text x="81.9073%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="81.6573%" y="629" width="0.1609%" height="15" fill="rgb(210,181,1)" fg:x="1015" fg:w="2"/><text x="81.9073%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.7377%" y="613" width="0.0805%" height="15" fill="rgb(211,66,1)" fg:x="1016" fg:w="1"/><text x="81.9877%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="81.7377%" y="597" width="0.0805%" height="15" fill="rgb(221,90,14)" fg:x="1016" fg:w="1"/><text x="81.9877%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="81.7377%" y="581" width="0.0805%" height="15" fill="rgb(219,222,44)" fg:x="1016" fg:w="1"/><text x="81.9877%" y="591.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="81.8182%" y="661" width="0.0805%" height="15" fill="rgb(246,34,33)" fg:x="1017" fg:w="1"/><text x="82.0682%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="81.8182%" y="645" width="0.0805%" height="15" fill="rgb(227,135,41)" fg:x="1017" fg:w="1"/><text x="82.0682%" y="655.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="81.8182%" y="629" width="0.0805%" height="15" fill="rgb(226,15,14)" fg:x="1017" fg:w="1"/><text x="82.0682%" y="639.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.16%)</title><rect x="81.8182%" y="693" width="0.1609%" height="15" fill="rgb(236,148,47)" fg:x="1017" fg:w="2"/><text x="82.0682%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="81.8182%" y="677" width="0.1609%" height="15" fill="rgb(233,162,52)" fg:x="1017" fg:w="2"/><text x="82.0682%" y="687.50"></text></g><g><title>plugins_core::build::Build::save (1 samples, 0.08%)</title><rect x="81.8986%" y="661" width="0.0805%" height="15" fill="rgb(244,35,28)" fg:x="1018" fg:w="1"/><text x="82.1486%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="81.8986%" y="645" width="0.0805%" height="15" fill="rgb(205,121,10)" fg:x="1018" fg:w="1"/><text x="82.1486%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="81.8986%" y="629" width="0.0805%" height="15" fill="rgb(250,58,18)" fg:x="1018" fg:w="1"/><text x="82.1486%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="81.8986%" y="613" width="0.0805%" height="15" fill="rgb(216,37,13)" fg:x="1018" fg:w="1"/><text x="82.1486%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="81.8986%" y="597" width="0.0805%" height="15" fill="rgb(221,215,42)" fg:x="1018" fg:w="1"/><text x="82.1486%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="81.8986%" y="581" width="0.0805%" height="15" fill="rgb(217,214,19)" fg:x="1018" fg:w="1"/><text x="82.1486%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.8986%" y="565" width="0.0805%" height="15" fill="rgb(233,139,13)" fg:x="1018" fg:w="1"/><text x="82.1486%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.8986%" y="549" width="0.0805%" height="15" fill="rgb(247,168,23)" fg:x="1018" fg:w="1"/><text x="82.1486%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.8986%" y="533" width="0.0805%" height="15" fill="rgb(207,202,1)" fg:x="1018" fg:w="1"/><text x="82.1486%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.8986%" y="517" width="0.0805%" height="15" fill="rgb(220,155,48)" fg:x="1018" fg:w="1"/><text x="82.1486%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="81.8986%" y="501" width="0.0805%" height="15" fill="rgb(250,43,26)" fg:x="1018" fg:w="1"/><text x="82.1486%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="81.8986%" y="485" width="0.0805%" height="15" fill="rgb(212,190,23)" fg:x="1018" fg:w="1"/><text x="82.1486%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="81.8986%" y="469" width="0.0805%" height="15" fill="rgb(216,39,24)" fg:x="1018" fg:w="1"/><text x="82.1486%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="81.8986%" y="453" width="0.0805%" height="15" fill="rgb(252,113,16)" fg:x="1018" fg:w="1"/><text x="82.1486%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="81.8986%" y="437" width="0.0805%" height="15" fill="rgb(208,113,19)" fg:x="1018" fg:w="1"/><text x="82.1486%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="81.8986%" y="421" width="0.0805%" height="15" fill="rgb(234,107,25)" fg:x="1018" fg:w="1"/><text x="82.1486%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="81.8986%" y="405" width="0.0805%" height="15" fill="rgb(234,217,51)" fg:x="1018" fg:w="1"/><text x="82.1486%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="81.8986%" y="389" width="0.0805%" height="15" fill="rgb(251,29,42)" fg:x="1018" fg:w="1"/><text x="82.1486%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="81.8986%" y="373" width="0.0805%" height="15" fill="rgb(221,62,51)" fg:x="1018" fg:w="1"/><text x="82.1486%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.8986%" y="357" width="0.0805%" height="15" fill="rgb(240,192,43)" fg:x="1018" fg:w="1"/><text x="82.1486%" y="367.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="81.9791%" y="677" width="0.0805%" height="15" fill="rgb(224,157,47)" fg:x="1019" fg:w="1"/><text x="82.2291%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="82.0595%" y="501" width="0.0805%" height="15" fill="rgb(226,84,45)" fg:x="1020" fg:w="1"/><text x="82.3095%" y="511.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (66 samples, 5.31%)</title><rect x="76.9912%" y="709" width="5.3097%" height="15" fill="rgb(208,207,23)" fg:x="957" fg:w="66"/><text x="77.2412%" y="719.50">&lt;tests..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (4 samples, 0.32%)</title><rect x="81.9791%" y="693" width="0.3218%" height="15" fill="rgb(253,34,51)" fg:x="1019" fg:w="4"/><text x="82.2291%" y="703.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="82.0595%" y="677" width="0.2414%" height="15" fill="rgb(227,26,34)" fg:x="1020" fg:w="3"/><text x="82.3095%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="82.0595%" y="661" width="0.2414%" height="15" fill="rgb(245,75,19)" fg:x="1020" fg:w="3"/><text x="82.3095%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="82.0595%" y="645" width="0.2414%" height="15" fill="rgb(250,191,31)" fg:x="1020" fg:w="3"/><text x="82.3095%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="82.0595%" y="629" width="0.2414%" height="15" fill="rgb(224,11,50)" fg:x="1020" fg:w="3"/><text x="82.3095%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="82.0595%" y="613" width="0.2414%" height="15" fill="rgb(231,171,7)" fg:x="1020" fg:w="3"/><text x="82.3095%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="82.0595%" y="597" width="0.2414%" height="15" fill="rgb(252,214,10)" fg:x="1020" fg:w="3"/><text x="82.3095%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="82.0595%" y="581" width="0.2414%" height="15" fill="rgb(249,45,46)" fg:x="1020" fg:w="3"/><text x="82.3095%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="82.0595%" y="565" width="0.2414%" height="15" fill="rgb(240,173,7)" fg:x="1020" fg:w="3"/><text x="82.3095%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="82.0595%" y="549" width="0.2414%" height="15" fill="rgb(235,214,13)" fg:x="1020" fg:w="3"/><text x="82.3095%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="82.0595%" y="533" width="0.2414%" height="15" fill="rgb(245,156,8)" fg:x="1020" fg:w="3"/><text x="82.3095%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="82.0595%" y="517" width="0.2414%" height="15" fill="rgb(235,46,12)" fg:x="1020" fg:w="3"/><text x="82.3095%" y="527.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="82.1400%" y="501" width="0.1609%" height="15" fill="rgb(221,81,14)" fg:x="1021" fg:w="2"/><text x="82.3900%" y="511.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="82.3009%" y="709" width="0.0805%" height="15" fill="rgb(238,207,9)" fg:x="1023" fg:w="1"/><text x="82.5509%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.3009%" y="693" width="0.0805%" height="15" fill="rgb(224,129,35)" fg:x="1023" fg:w="1"/><text x="82.5509%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="82.3813%" y="693" width="0.0805%" height="15" fill="rgb(243,218,34)" fg:x="1024" fg:w="1"/><text x="82.6313%" y="703.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="82.4618%" y="693" width="0.0805%" height="15" fill="rgb(220,166,13)" fg:x="1025" fg:w="1"/><text x="82.7118%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="82.4618%" y="677" width="0.0805%" height="15" fill="rgb(227,167,49)" fg:x="1025" fg:w="1"/><text x="82.7118%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="82.4618%" y="661" width="0.0805%" height="15" fill="rgb(234,142,12)" fg:x="1025" fg:w="1"/><text x="82.7118%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="82.4618%" y="645" width="0.0805%" height="15" fill="rgb(207,100,48)" fg:x="1025" fg:w="1"/><text x="82.7118%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="82.4618%" y="629" width="0.0805%" height="15" fill="rgb(210,25,14)" fg:x="1025" fg:w="1"/><text x="82.7118%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="82.4618%" y="613" width="0.0805%" height="15" fill="rgb(246,116,27)" fg:x="1025" fg:w="1"/><text x="82.7118%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="82.4618%" y="597" width="0.0805%" height="15" fill="rgb(214,193,42)" fg:x="1025" fg:w="1"/><text x="82.7118%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="82.4618%" y="581" width="0.0805%" height="15" fill="rgb(214,122,8)" fg:x="1025" fg:w="1"/><text x="82.7118%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="82.4618%" y="565" width="0.0805%" height="15" fill="rgb(244,173,18)" fg:x="1025" fg:w="1"/><text x="82.7118%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="82.4618%" y="549" width="0.0805%" height="15" fill="rgb(232,68,19)" fg:x="1025" fg:w="1"/><text x="82.7118%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="82.4618%" y="533" width="0.0805%" height="15" fill="rgb(236,224,1)" fg:x="1025" fg:w="1"/><text x="82.7118%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="82.4618%" y="517" width="0.0805%" height="15" fill="rgb(240,11,8)" fg:x="1025" fg:w="1"/><text x="82.7118%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.4618%" y="501" width="0.0805%" height="15" fill="rgb(244,159,20)" fg:x="1025" fg:w="1"/><text x="82.7118%" y="511.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="82.5422%" y="693" width="0.0805%" height="15" fill="rgb(240,223,54)" fg:x="1026" fg:w="1"/><text x="82.7922%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="82.5422%" y="677" width="0.0805%" height="15" fill="rgb(237,146,5)" fg:x="1026" fg:w="1"/><text x="82.7922%" y="687.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="82.5422%" y="661" width="0.0805%" height="15" fill="rgb(218,221,32)" fg:x="1026" fg:w="1"/><text x="82.7922%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="82.5422%" y="645" width="0.0805%" height="15" fill="rgb(244,96,26)" fg:x="1026" fg:w="1"/><text x="82.7922%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="82.5422%" y="629" width="0.0805%" height="15" fill="rgb(245,184,37)" fg:x="1026" fg:w="1"/><text x="82.7922%" y="639.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="82.5422%" y="613" width="0.0805%" height="15" fill="rgb(248,91,47)" fg:x="1026" fg:w="1"/><text x="82.7922%" y="623.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="82.5422%" y="597" width="0.0805%" height="15" fill="rgb(243,199,8)" fg:x="1026" fg:w="1"/><text x="82.7922%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="82.5422%" y="581" width="0.0805%" height="15" fill="rgb(249,12,15)" fg:x="1026" fg:w="1"/><text x="82.7922%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="82.5422%" y="565" width="0.0805%" height="15" fill="rgb(245,97,12)" fg:x="1026" fg:w="1"/><text x="82.7922%" y="575.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="82.6227%" y="693" width="0.0805%" height="15" fill="rgb(244,61,1)" fg:x="1027" fg:w="1"/><text x="82.8727%" y="703.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="82.6227%" y="677" width="0.0805%" height="15" fill="rgb(222,194,10)" fg:x="1027" fg:w="1"/><text x="82.8727%" y="687.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="82.6227%" y="661" width="0.0805%" height="15" fill="rgb(226,178,8)" fg:x="1027" fg:w="1"/><text x="82.8727%" y="671.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="82.6227%" y="645" width="0.0805%" height="15" fill="rgb(241,32,34)" fg:x="1027" fg:w="1"/><text x="82.8727%" y="655.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="82.6227%" y="629" width="0.0805%" height="15" fill="rgb(254,26,6)" fg:x="1027" fg:w="1"/><text x="82.8727%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="82.6227%" y="613" width="0.0805%" height="15" fill="rgb(249,71,11)" fg:x="1027" fg:w="1"/><text x="82.8727%" y="623.50"></text></g><g><title>core::ffi::c_str::CStr::from_bytes_with_nul (1 samples, 0.08%)</title><rect x="82.6227%" y="597" width="0.0805%" height="15" fill="rgb(232,170,27)" fg:x="1027" fg:w="1"/><text x="82.8727%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="82.7031%" y="629" width="0.0805%" height="15" fill="rgb(214,223,17)" fg:x="1028" fg:w="1"/><text x="82.9531%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.7031%" y="613" width="0.0805%" height="15" fill="rgb(250,18,15)" fg:x="1028" fg:w="1"/><text x="82.9531%" y="623.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="82.7031%" y="597" width="0.0805%" height="15" fill="rgb(212,153,51)" fg:x="1028" fg:w="1"/><text x="82.9531%" y="607.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="82.7836%" y="597" width="0.0805%" height="15" fill="rgb(219,194,12)" fg:x="1029" fg:w="1"/><text x="83.0336%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="82.7836%" y="581" width="0.0805%" height="15" fill="rgb(212,58,17)" fg:x="1029" fg:w="1"/><text x="83.0336%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.7836%" y="565" width="0.0805%" height="15" fill="rgb(254,5,10)" fg:x="1029" fg:w="1"/><text x="83.0336%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="82.7836%" y="549" width="0.0805%" height="15" fill="rgb(246,91,7)" fg:x="1029" fg:w="1"/><text x="83.0336%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="82.7836%" y="533" width="0.0805%" height="15" fill="rgb(218,108,49)" fg:x="1029" fg:w="1"/><text x="83.0336%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="82.7836%" y="517" width="0.0805%" height="15" fill="rgb(238,123,20)" fg:x="1029" fg:w="1"/><text x="83.0336%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.7836%" y="501" width="0.0805%" height="15" fill="rgb(231,69,23)" fg:x="1029" fg:w="1"/><text x="83.0336%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="82.7836%" y="485" width="0.0805%" height="15" fill="rgb(230,209,3)" fg:x="1029" fg:w="1"/><text x="83.0336%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="82.8640%" y="581" width="0.0805%" height="15" fill="rgb(231,19,0)" fg:x="1030" fg:w="1"/><text x="83.1140%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.8640%" y="565" width="0.0805%" height="15" fill="rgb(226,192,25)" fg:x="1030" fg:w="1"/><text x="83.1140%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="82.8640%" y="549" width="0.0805%" height="15" fill="rgb(223,175,53)" fg:x="1030" fg:w="1"/><text x="83.1140%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="82.8640%" y="533" width="0.0805%" height="15" fill="rgb(248,35,51)" fg:x="1030" fg:w="1"/><text x="83.1140%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="82.9445%" y="549" width="0.0805%" height="15" fill="rgb(230,37,26)" fg:x="1031" fg:w="1"/><text x="83.1945%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="82.9445%" y="533" width="0.0805%" height="15" fill="rgb(206,120,22)" fg:x="1031" fg:w="1"/><text x="83.1945%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="82.9445%" y="517" width="0.0805%" height="15" fill="rgb(207,165,28)" fg:x="1031" fg:w="1"/><text x="83.1945%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.9445%" y="501" width="0.0805%" height="15" fill="rgb(226,23,46)" fg:x="1031" fg:w="1"/><text x="83.1945%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="82.9445%" y="485" width="0.0805%" height="15" fill="rgb(208,130,44)" fg:x="1031" fg:w="1"/><text x="83.1945%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="82.9445%" y="469" width="0.0805%" height="15" fill="rgb(231,67,8)" fg:x="1031" fg:w="1"/><text x="83.1945%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="82.9445%" y="565" width="0.1609%" height="15" fill="rgb(205,183,22)" fg:x="1031" fg:w="2"/><text x="83.1945%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="83.0249%" y="549" width="0.0805%" height="15" fill="rgb(224,47,9)" fg:x="1032" fg:w="1"/><text x="83.2749%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="83.1054%" y="565" width="0.0805%" height="15" fill="rgb(250,183,49)" fg:x="1033" fg:w="1"/><text x="83.3554%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="83.1054%" y="549" width="0.0805%" height="15" fill="rgb(220,151,39)" fg:x="1033" fg:w="1"/><text x="83.3554%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="83.1054%" y="533" width="0.0805%" height="15" fill="rgb(220,118,20)" fg:x="1033" fg:w="1"/><text x="83.3554%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="83.1054%" y="517" width="0.0805%" height="15" fill="rgb(231,65,51)" fg:x="1033" fg:w="1"/><text x="83.3554%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="83.1858%" y="549" width="0.0805%" height="15" fill="rgb(253,125,37)" fg:x="1034" fg:w="1"/><text x="83.4358%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="83.2663%" y="549" width="0.0805%" height="15" fill="rgb(232,102,6)" fg:x="1035" fg:w="1"/><text x="83.5163%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="83.2663%" y="533" width="0.0805%" height="15" fill="rgb(251,105,13)" fg:x="1035" fg:w="1"/><text x="83.5163%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="83.2663%" y="517" width="0.0805%" height="15" fill="rgb(222,179,29)" fg:x="1035" fg:w="1"/><text x="83.5163%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="83.2663%" y="501" width="0.0805%" height="15" fill="rgb(229,180,53)" fg:x="1035" fg:w="1"/><text x="83.5163%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="83.2663%" y="485" width="0.0805%" height="15" fill="rgb(238,104,13)" fg:x="1035" fg:w="1"/><text x="83.5163%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.2663%" y="469" width="0.0805%" height="15" fill="rgb(210,130,5)" fg:x="1035" fg:w="1"/><text x="83.5163%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="83.2663%" y="453" width="0.0805%" height="15" fill="rgb(233,87,49)" fg:x="1035" fg:w="1"/><text x="83.5163%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="83.3467%" y="517" width="0.0805%" height="15" fill="rgb(243,34,9)" fg:x="1036" fg:w="1"/><text x="83.5967%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="83.3467%" y="501" width="0.0805%" height="15" fill="rgb(235,225,10)" fg:x="1036" fg:w="1"/><text x="83.5967%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="83.3467%" y="485" width="0.0805%" height="15" fill="rgb(212,0,30)" fg:x="1036" fg:w="1"/><text x="83.5967%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="83.3467%" y="469" width="0.0805%" height="15" fill="rgb(211,177,0)" fg:x="1036" fg:w="1"/><text x="83.5967%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="83.3467%" y="533" width="0.1609%" height="15" fill="rgb(225,220,11)" fg:x="1036" fg:w="2"/><text x="83.5967%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="83.4272%" y="517" width="0.0805%" height="15" fill="rgb(215,10,13)" fg:x="1037" fg:w="1"/><text x="83.6772%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="83.4272%" y="501" width="0.0805%" height="15" fill="rgb(240,177,14)" fg:x="1037" fg:w="1"/><text x="83.6772%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="83.4272%" y="485" width="0.0805%" height="15" fill="rgb(243,7,39)" fg:x="1037" fg:w="1"/><text x="83.6772%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="82.9445%" y="581" width="0.6436%" height="15" fill="rgb(212,99,0)" fg:x="1031" fg:w="8"/><text x="83.1945%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="83.1858%" y="565" width="0.4023%" height="15" fill="rgb(225,162,48)" fg:x="1034" fg:w="5"/><text x="83.4358%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="83.3467%" y="549" width="0.2414%" height="15" fill="rgb(246,16,25)" fg:x="1036" fg:w="3"/><text x="83.5967%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="83.5076%" y="533" width="0.0805%" height="15" fill="rgb(220,150,2)" fg:x="1038" fg:w="1"/><text x="83.7576%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="83.5076%" y="517" width="0.0805%" height="15" fill="rgb(237,113,11)" fg:x="1038" fg:w="1"/><text x="83.7576%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="83.5076%" y="501" width="0.0805%" height="15" fill="rgb(236,70,20)" fg:x="1038" fg:w="1"/><text x="83.7576%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (12 samples, 0.97%)</title><rect x="82.7836%" y="613" width="0.9654%" height="15" fill="rgb(234,94,7)" fg:x="1029" fg:w="12"/><text x="83.0336%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.88%)</title><rect x="82.8640%" y="597" width="0.8850%" height="15" fill="rgb(250,221,0)" fg:x="1030" fg:w="11"/><text x="83.1140%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="83.5881%" y="581" width="0.1609%" height="15" fill="rgb(245,149,46)" fg:x="1039" fg:w="2"/><text x="83.8381%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="83.5881%" y="565" width="0.1609%" height="15" fill="rgb(215,37,27)" fg:x="1039" fg:w="2"/><text x="83.8381%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="83.6685%" y="549" width="0.0805%" height="15" fill="rgb(232,65,3)" fg:x="1040" fg:w="1"/><text x="83.9185%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="83.7490%" y="581" width="0.0805%" height="15" fill="rgb(214,2,16)" fg:x="1041" fg:w="1"/><text x="83.9990%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.8294%" y="533" width="0.0805%" height="15" fill="rgb(227,131,50)" fg:x="1042" fg:w="1"/><text x="84.0794%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="83.9099%" y="533" width="0.0805%" height="15" fill="rgb(247,131,45)" fg:x="1043" fg:w="1"/><text x="84.1599%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="83.7490%" y="613" width="0.3218%" height="15" fill="rgb(215,97,47)" fg:x="1041" fg:w="4"/><text x="83.9990%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="83.7490%" y="597" width="0.3218%" height="15" fill="rgb(233,143,12)" fg:x="1041" fg:w="4"/><text x="83.9990%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="83.8294%" y="581" width="0.2414%" height="15" fill="rgb(222,57,17)" fg:x="1042" fg:w="3"/><text x="84.0794%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="83.8294%" y="565" width="0.2414%" height="15" fill="rgb(214,119,38)" fg:x="1042" fg:w="3"/><text x="84.0794%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="83.8294%" y="549" width="0.2414%" height="15" fill="rgb(217,28,47)" fg:x="1042" fg:w="3"/><text x="84.0794%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="83.9903%" y="533" width="0.0805%" height="15" fill="rgb(231,14,52)" fg:x="1044" fg:w="1"/><text x="84.2403%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.0708%" y="565" width="0.0805%" height="15" fill="rgb(220,158,18)" fg:x="1045" fg:w="1"/><text x="84.3208%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.1512%" y="549" width="0.0805%" height="15" fill="rgb(222,143,46)" fg:x="1046" fg:w="1"/><text x="84.4012%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.2317%" y="533" width="0.0805%" height="15" fill="rgb(227,165,5)" fg:x="1047" fg:w="1"/><text x="84.4817%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="84.0708%" y="581" width="0.3218%" height="15" fill="rgb(216,222,49)" fg:x="1045" fg:w="4"/><text x="84.3208%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="84.1512%" y="565" width="0.2414%" height="15" fill="rgb(238,73,39)" fg:x="1046" fg:w="3"/><text x="84.4012%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="84.2317%" y="549" width="0.1609%" height="15" fill="rgb(252,115,9)" fg:x="1047" fg:w="2"/><text x="84.4817%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="84.3121%" y="533" width="0.0805%" height="15" fill="rgb(238,202,4)" fg:x="1048" fg:w="1"/><text x="84.5621%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="84.3121%" y="517" width="0.0805%" height="15" fill="rgb(252,153,44)" fg:x="1048" fg:w="1"/><text x="84.5621%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="84.3121%" y="501" width="0.0805%" height="15" fill="rgb(235,128,27)" fg:x="1048" fg:w="1"/><text x="84.5621%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="84.3121%" y="485" width="0.0805%" height="15" fill="rgb(221,121,47)" fg:x="1048" fg:w="1"/><text x="84.5621%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.3121%" y="469" width="0.0805%" height="15" fill="rgb(247,211,47)" fg:x="1048" fg:w="1"/><text x="84.5621%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.3926%" y="581" width="0.0805%" height="15" fill="rgb(252,47,49)" fg:x="1049" fg:w="1"/><text x="84.6426%" y="591.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="84.4730%" y="581" width="0.0805%" height="15" fill="rgb(219,119,53)" fg:x="1050" fg:w="1"/><text x="84.7230%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="84.4730%" y="565" width="0.0805%" height="15" fill="rgb(243,165,53)" fg:x="1050" fg:w="1"/><text x="84.7230%" y="575.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (7 samples, 0.56%)</title><rect x="84.0708%" y="597" width="0.5632%" height="15" fill="rgb(230,12,35)" fg:x="1045" fg:w="7"/><text x="84.3208%" y="607.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="84.5535%" y="581" width="0.0805%" height="15" fill="rgb(239,57,49)" fg:x="1051" fg:w="1"/><text x="84.8035%" y="591.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="84.5535%" y="565" width="0.0805%" height="15" fill="rgb(231,154,7)" fg:x="1051" fg:w="1"/><text x="84.8035%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.7144%" y="565" width="0.0805%" height="15" fill="rgb(248,81,34)" fg:x="1053" fg:w="1"/><text x="84.9644%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (2 samples, 0.16%)</title><rect x="84.7949%" y="565" width="0.1609%" height="15" fill="rgb(247,9,5)" fg:x="1054" fg:w="2"/><text x="85.0449%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="84.7949%" y="549" width="0.1609%" height="15" fill="rgb(228,172,27)" fg:x="1054" fg:w="2"/><text x="85.0449%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.8753%" y="533" width="0.0805%" height="15" fill="rgb(230,57,44)" fg:x="1055" fg:w="1"/><text x="85.1253%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="84.9558%" y="565" width="0.0805%" height="15" fill="rgb(249,35,22)" fg:x="1056" fg:w="1"/><text x="85.2058%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="84.9558%" y="549" width="0.0805%" height="15" fill="rgb(250,137,27)" fg:x="1056" fg:w="1"/><text x="85.2058%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.0362%" y="517" width="0.0805%" height="15" fill="rgb(251,57,31)" fg:x="1057" fg:w="1"/><text x="85.2862%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="85.0362%" y="501" width="0.0805%" height="15" fill="rgb(238,60,0)" fg:x="1057" fg:w="1"/><text x="85.2862%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="85.1167%" y="485" width="0.0805%" height="15" fill="rgb(242,185,39)" fg:x="1058" fg:w="1"/><text x="85.3667%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="85.1167%" y="469" width="0.0805%" height="15" fill="rgb(240,63,43)" fg:x="1058" fg:w="1"/><text x="85.3667%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.1167%" y="453" width="0.0805%" height="15" fill="rgb(236,155,6)" fg:x="1058" fg:w="1"/><text x="85.3667%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="85.1167%" y="517" width="0.1609%" height="15" fill="rgb(215,11,29)" fg:x="1058" fg:w="2"/><text x="85.3667%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="85.1167%" y="501" width="0.1609%" height="15" fill="rgb(228,180,48)" fg:x="1058" fg:w="2"/><text x="85.3667%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.1971%" y="485" width="0.0805%" height="15" fill="rgb(241,102,12)" fg:x="1059" fg:w="1"/><text x="85.4471%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="85.0362%" y="549" width="0.3218%" height="15" fill="rgb(246,213,4)" fg:x="1057" fg:w="4"/><text x="85.2862%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="85.0362%" y="533" width="0.3218%" height="15" fill="rgb(218,134,35)" fg:x="1057" fg:w="4"/><text x="85.2862%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="85.2776%" y="517" width="0.0805%" height="15" fill="rgb(251,117,35)" fg:x="1060" fg:w="1"/><text x="85.5276%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (10 samples, 0.80%)</title><rect x="84.6340%" y="597" width="0.8045%" height="15" fill="rgb(206,156,45)" fg:x="1052" fg:w="10"/><text x="84.8840%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.72%)</title><rect x="84.7144%" y="581" width="0.7241%" height="15" fill="rgb(218,52,27)" fg:x="1053" fg:w="9"/><text x="84.9644%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="85.0362%" y="565" width="0.4023%" height="15" fill="rgb(238,83,36)" fg:x="1057" fg:w="5"/><text x="85.2862%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.3580%" y="549" width="0.0805%" height="15" fill="rgb(218,53,43)" fg:x="1061" fg:w="1"/><text x="85.6080%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="85.5189%" y="453" width="0.0805%" height="15" fill="rgb(239,54,39)" fg:x="1063" fg:w="1"/><text x="85.7689%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="85.5189%" y="437" width="0.0805%" height="15" fill="rgb(212,198,13)" fg:x="1063" fg:w="1"/><text x="85.7689%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="85.5189%" y="421" width="0.0805%" height="15" fill="rgb(234,54,46)" fg:x="1063" fg:w="1"/><text x="85.7689%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.5189%" y="405" width="0.0805%" height="15" fill="rgb(217,120,7)" fg:x="1063" fg:w="1"/><text x="85.7689%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="85.5994%" y="405" width="0.0805%" height="15" fill="rgb(246,39,15)" fg:x="1064" fg:w="1"/><text x="85.8494%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.5994%" y="389" width="0.0805%" height="15" fill="rgb(242,143,31)" fg:x="1064" fg:w="1"/><text x="85.8494%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="85.5994%" y="437" width="0.1609%" height="15" fill="rgb(252,60,24)" fg:x="1064" fg:w="2"/><text x="85.8494%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="85.5994%" y="421" width="0.1609%" height="15" fill="rgb(249,220,7)" fg:x="1064" fg:w="2"/><text x="85.8494%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="85.6798%" y="405" width="0.0805%" height="15" fill="rgb(236,67,13)" fg:x="1065" fg:w="1"/><text x="85.9298%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="85.4385%" y="469" width="0.4023%" height="15" fill="rgb(210,62,39)" fg:x="1062" fg:w="5"/><text x="85.6885%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="85.5994%" y="453" width="0.2414%" height="15" fill="rgb(219,122,53)" fg:x="1064" fg:w="3"/><text x="85.8494%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="85.7603%" y="437" width="0.0805%" height="15" fill="rgb(218,87,25)" fg:x="1066" fg:w="1"/><text x="86.0103%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.7603%" y="421" width="0.0805%" height="15" fill="rgb(234,179,48)" fg:x="1066" fg:w="1"/><text x="86.0103%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="85.4385%" y="501" width="0.4827%" height="15" fill="rgb(248,90,0)" fg:x="1062" fg:w="6"/><text x="85.6885%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="85.4385%" y="485" width="0.4827%" height="15" fill="rgb(207,228,37)" fg:x="1062" fg:w="6"/><text x="85.6885%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="85.8407%" y="469" width="0.0805%" height="15" fill="rgb(235,214,15)" fg:x="1067" fg:w="1"/><text x="86.0907%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.8407%" y="453" width="0.0805%" height="15" fill="rgb(210,144,39)" fg:x="1067" fg:w="1"/><text x="86.0907%" y="463.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="85.9212%" y="485" width="0.0805%" height="15" fill="rgb(222,67,41)" fg:x="1068" fg:w="1"/><text x="86.1712%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="85.9212%" y="501" width="0.1609%" height="15" fill="rgb(205,35,37)" fg:x="1068" fg:w="2"/><text x="86.1712%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.0016%" y="485" width="0.0805%" height="15" fill="rgb(216,125,40)" fg:x="1069" fg:w="1"/><text x="86.2516%" y="495.50"></text></g><g><title>engine::session::state::State::flush_entities (43 samples, 3.46%)</title><rect x="82.7031%" y="677" width="3.4594%" height="15" fill="rgb(228,227,20)" fg:x="1028" fg:w="43"/><text x="82.9531%" y="687.50">eng..</text></g><g><title>core::iter::adapters::try_process (43 samples, 3.46%)</title><rect x="82.7031%" y="661" width="3.4594%" height="15" fill="rgb(242,173,45)" fg:x="1028" fg:w="43"/><text x="82.9531%" y="671.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (43 samples, 3.46%)</title><rect x="82.7031%" y="645" width="3.4594%" height="15" fill="rgb(215,79,24)" fg:x="1028" fg:w="43"/><text x="82.9531%" y="655.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (42 samples, 3.38%)</title><rect x="82.7836%" y="629" width="3.3789%" height="15" fill="rgb(238,164,38)" fg:x="1029" fg:w="42"/><text x="83.0336%" y="639.50">eng..</text></g><g><title>kernel::model::any_entity_changes (26 samples, 2.09%)</title><rect x="84.0708%" y="613" width="2.0917%" height="15" fill="rgb(245,196,38)" fg:x="1045" fg:w="26"/><text x="84.3208%" y="623.50">k..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (9 samples, 0.72%)</title><rect x="85.4385%" y="597" width="0.7241%" height="15" fill="rgb(231,217,29)" fg:x="1062" fg:w="9"/><text x="85.6885%" y="607.50"></text></g><g><title>serde_json::de::from_trait (9 samples, 0.72%)</title><rect x="85.4385%" y="581" width="0.7241%" height="15" fill="rgb(245,6,4)" fg:x="1062" fg:w="9"/><text x="85.6885%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.72%)</title><rect x="85.4385%" y="565" width="0.7241%" height="15" fill="rgb(214,76,49)" fg:x="1062" fg:w="9"/><text x="85.6885%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 0.72%)</title><rect x="85.4385%" y="549" width="0.7241%" height="15" fill="rgb(205,96,12)" fg:x="1062" fg:w="9"/><text x="85.6885%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.72%)</title><rect x="85.4385%" y="533" width="0.7241%" height="15" fill="rgb(243,131,4)" fg:x="1062" fg:w="9"/><text x="85.6885%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 0.72%)</title><rect x="85.4385%" y="517" width="0.7241%" height="15" fill="rgb(214,114,4)" fg:x="1062" fg:w="9"/><text x="85.6885%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="86.0821%" y="501" width="0.0805%" height="15" fill="rgb(234,215,15)" fg:x="1070" fg:w="1"/><text x="86.3321%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="86.0821%" y="485" width="0.0805%" height="15" fill="rgb(250,216,45)" fg:x="1070" fg:w="1"/><text x="86.3321%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.0821%" y="469" width="0.0805%" height="15" fill="rgb(236,128,4)" fg:x="1070" fg:w="1"/><text x="86.3321%" y="479.50"></text></g><g><title>engine::session::Session::close (48 samples, 3.86%)</title><rect x="82.3813%" y="709" width="3.8616%" height="15" fill="rgb(234,50,33)" fg:x="1024" fg:w="48"/><text x="82.6313%" y="719.50">engi..</text></g><g><title>engine::session::state::State::close (44 samples, 3.54%)</title><rect x="82.7031%" y="693" width="3.5398%" height="15" fill="rgb(253,131,37)" fg:x="1028" fg:w="44"/><text x="82.9531%" y="703.50">eng..</text></g><g><title>engine::session::state::State::flush_futures (1 samples, 0.08%)</title><rect x="86.1625%" y="677" width="0.0805%" height="15" fill="rgb(218,55,27)" fg:x="1071" fg:w="1"/><text x="86.4125%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="86.2430%" y="661" width="0.0805%" height="15" fill="rgb(241,220,28)" fg:x="1072" fg:w="1"/><text x="86.4930%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="86.2430%" y="645" width="0.0805%" height="15" fill="rgb(241,90,48)" fg:x="1072" fg:w="1"/><text x="86.4930%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="86.2430%" y="629" width="0.0805%" height="15" fill="rgb(216,43,37)" fg:x="1072" fg:w="1"/><text x="86.4930%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="86.2430%" y="613" width="0.0805%" height="15" fill="rgb(207,173,9)" fg:x="1072" fg:w="1"/><text x="86.4930%" y="623.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="86.2430%" y="597" width="0.0805%" height="15" fill="rgb(240,126,30)" fg:x="1072" fg:w="1"/><text x="86.4930%" y="607.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (1 samples, 0.08%)</title><rect x="86.2430%" y="581" width="0.0805%" height="15" fill="rgb(228,178,53)" fg:x="1072" fg:w="1"/><text x="86.4930%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::finish (1 samples, 0.08%)</title><rect x="86.2430%" y="565" width="0.0805%" height="15" fill="rgb(217,33,4)" fg:x="1072" fg:w="1"/><text x="86.4930%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="86.2430%" y="549" width="0.0805%" height="15" fill="rgb(206,124,34)" fg:x="1072" fg:w="1"/><text x="86.4930%" y="559.50"></text></g><g><title>core::fmt::builders::DebugStruct::finish::{{closure}} (1 samples, 0.08%)</title><rect x="86.2430%" y="533" width="0.0805%" height="15" fill="rgb(208,122,53)" fg:x="1072" fg:w="1"/><text x="86.4930%" y="543.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="86.2430%" y="517" width="0.0805%" height="15" fill="rgb(215,202,26)" fg:x="1072" fg:w="1"/><text x="86.4930%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="86.2430%" y="501" width="0.0805%" height="15" fill="rgb(232,198,31)" fg:x="1072" fg:w="1"/><text x="86.4930%" y="511.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="86.2430%" y="485" width="0.0805%" height="15" fill="rgb(222,23,35)" fg:x="1072" fg:w="1"/><text x="86.4930%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="86.2430%" y="469" width="0.0805%" height="15" fill="rgb(242,27,53)" fg:x="1072" fg:w="1"/><text x="86.4930%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="86.2430%" y="453" width="0.0805%" height="15" fill="rgb(210,216,42)" fg:x="1072" fg:w="1"/><text x="86.4930%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="86.2430%" y="437" width="0.0805%" height="15" fill="rgb(234,39,38)" fg:x="1072" fg:w="1"/><text x="86.4930%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="86.2430%" y="421" width="0.0805%" height="15" fill="rgb(235,126,54)" fg:x="1072" fg:w="1"/><text x="86.4930%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::logs::SessionSubscriber&gt; (1 samples, 0.08%)</title><rect x="86.3234%" y="645" width="0.0805%" height="15" fill="rgb(235,150,33)" fg:x="1073" fg:w="1"/><text x="86.5734%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.3234%" y="629" width="0.0805%" height="15" fill="rgb(249,49,53)" fg:x="1073" fg:w="1"/><text x="86.5734%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="86.5648%" y="469" width="0.0805%" height="15" fill="rgb(238,60,50)" fg:x="1076" fg:w="1"/><text x="86.8148%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="86.5648%" y="453" width="0.0805%" height="15" fill="rgb(210,5,2)" fg:x="1076" fg:w="1"/><text x="86.8148%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="86.5648%" y="437" width="0.0805%" height="15" fill="rgb(214,207,24)" fg:x="1076" fg:w="1"/><text x="86.8148%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="86.5648%" y="421" width="0.0805%" height="15" fill="rgb(228,173,2)" fg:x="1076" fg:w="1"/><text x="86.8148%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="86.6452%" y="373" width="0.0805%" height="15" fill="rgb(244,26,8)" fg:x="1077" fg:w="1"/><text x="86.8952%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="86.6452%" y="357" width="0.0805%" height="15" fill="rgb(249,153,35)" fg:x="1077" fg:w="1"/><text x="86.8952%" y="367.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (3 samples, 0.24%)</title><rect x="86.5648%" y="565" width="0.2414%" height="15" fill="rgb(221,215,40)" fg:x="1076" fg:w="3"/><text x="86.8148%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (3 samples, 0.24%)</title><rect x="86.5648%" y="549" width="0.2414%" height="15" fill="rgb(238,106,35)" fg:x="1076" fg:w="3"/><text x="86.8148%" y="559.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (3 samples, 0.24%)</title><rect x="86.5648%" y="533" width="0.2414%" height="15" fill="rgb(207,195,21)" fg:x="1076" fg:w="3"/><text x="86.8148%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (3 samples, 0.24%)</title><rect x="86.5648%" y="517" width="0.2414%" height="15" fill="rgb(205,43,29)" fg:x="1076" fg:w="3"/><text x="86.8148%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (3 samples, 0.24%)</title><rect x="86.5648%" y="501" width="0.2414%" height="15" fill="rgb(236,35,21)" fg:x="1076" fg:w="3"/><text x="86.8148%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="86.5648%" y="485" width="0.2414%" height="15" fill="rgb(244,74,8)" fg:x="1076" fg:w="3"/><text x="86.8148%" y="495.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="86.6452%" y="469" width="0.1609%" height="15" fill="rgb(241,229,7)" fg:x="1077" fg:w="2"/><text x="86.8952%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="86.6452%" y="453" width="0.1609%" height="15" fill="rgb(212,223,25)" fg:x="1077" fg:w="2"/><text x="86.8952%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="86.6452%" y="437" width="0.1609%" height="15" fill="rgb(234,58,53)" fg:x="1077" fg:w="2"/><text x="86.8952%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="86.6452%" y="421" width="0.1609%" height="15" fill="rgb(244,36,1)" fg:x="1077" fg:w="2"/><text x="86.8952%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="86.6452%" y="405" width="0.1609%" height="15" fill="rgb(222,40,54)" fg:x="1077" fg:w="2"/><text x="86.8952%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="86.6452%" y="389" width="0.1609%" height="15" fill="rgb(210,207,39)" fg:x="1077" fg:w="2"/><text x="86.8952%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="86.7257%" y="373" width="0.0805%" height="15" fill="rgb(234,52,14)" fg:x="1078" fg:w="1"/><text x="86.9757%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="86.7257%" y="357" width="0.0805%" height="15" fill="rgb(239,108,46)" fg:x="1078" fg:w="1"/><text x="86.9757%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="86.7257%" y="341" width="0.0805%" height="15" fill="rgb(252,223,5)" fg:x="1078" fg:w="1"/><text x="86.9757%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="86.7257%" y="325" width="0.0805%" height="15" fill="rgb(227,181,11)" fg:x="1078" fg:w="1"/><text x="86.9757%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="86.7257%" y="309" width="0.0805%" height="15" fill="rgb(248,126,40)" fg:x="1078" fg:w="1"/><text x="86.9757%" y="319.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (1 samples, 0.08%)</title><rect x="86.9670%" y="389" width="0.0805%" height="15" fill="rgb(243,1,18)" fg:x="1081" fg:w="1"/><text x="87.2170%" y="399.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (1 samples, 0.08%)</title><rect x="86.9670%" y="373" width="0.0805%" height="15" fill="rgb(214,145,23)" fg:x="1081" fg:w="1"/><text x="87.2170%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (1 samples, 0.08%)</title><rect x="86.9670%" y="357" width="0.0805%" height="15" fill="rgb(241,218,11)" fg:x="1081" fg:w="1"/><text x="87.2170%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="86.9670%" y="341" width="0.0805%" height="15" fill="rgb(214,219,24)" fg:x="1081" fg:w="1"/><text x="87.2170%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="86.9670%" y="325" width="0.0805%" height="15" fill="rgb(235,32,7)" fg:x="1081" fg:w="1"/><text x="87.2170%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="86.9670%" y="309" width="0.0805%" height="15" fill="rgb(227,121,28)" fg:x="1081" fg:w="1"/><text x="87.2170%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="86.9670%" y="293" width="0.0805%" height="15" fill="rgb(216,129,49)" fg:x="1081" fg:w="1"/><text x="87.2170%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.0475%" y="325" width="0.0805%" height="15" fill="rgb(207,194,50)" fg:x="1082" fg:w="1"/><text x="87.2975%" y="335.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="87.0475%" y="357" width="0.1609%" height="15" fill="rgb(207,4,18)" fg:x="1082" fg:w="2"/><text x="87.2975%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="87.0475%" y="341" width="0.1609%" height="15" fill="rgb(213,50,30)" fg:x="1082" fg:w="2"/><text x="87.2975%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="87.1279%" y="325" width="0.0805%" height="15" fill="rgb(208,77,22)" fg:x="1083" fg:w="1"/><text x="87.3779%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.1279%" y="309" width="0.0805%" height="15" fill="rgb(244,204,34)" fg:x="1083" fg:w="1"/><text x="87.3779%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="87.1279%" y="293" width="0.0805%" height="15" fill="rgb(230,20,17)" fg:x="1083" fg:w="1"/><text x="87.3779%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.1279%" y="277" width="0.0805%" height="15" fill="rgb(237,83,15)" fg:x="1083" fg:w="1"/><text x="87.3779%" y="287.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="87.2084%" y="357" width="0.0805%" height="15" fill="rgb(221,109,25)" fg:x="1084" fg:w="1"/><text x="87.4584%" y="367.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="87.2084%" y="341" width="0.0805%" height="15" fill="rgb(205,194,52)" fg:x="1084" fg:w="1"/><text x="87.4584%" y="351.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="87.2084%" y="325" width="0.0805%" height="15" fill="rgb(244,173,54)" fg:x="1084" fg:w="1"/><text x="87.4584%" y="335.50"></text></g><g><title>core::fmt::Formatter::new (1 samples, 0.08%)</title><rect x="87.2084%" y="309" width="0.0805%" height="15" fill="rgb(227,181,18)" fg:x="1084" fg:w="1"/><text x="87.4584%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.3693%" y="325" width="0.0805%" height="15" fill="rgb(238,36,30)" fg:x="1086" fg:w="1"/><text x="87.6193%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="87.3693%" y="309" width="0.0805%" height="15" fill="rgb(254,85,0)" fg:x="1086" fg:w="1"/><text x="87.6193%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="87.3693%" y="293" width="0.0805%" height="15" fill="rgb(247,63,33)" fg:x="1086" fg:w="1"/><text x="87.6193%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="87.3693%" y="277" width="0.0805%" height="15" fill="rgb(220,7,54)" fg:x="1086" fg:w="1"/><text x="87.6193%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="87.3693%" y="261" width="0.0805%" height="15" fill="rgb(238,227,21)" fg:x="1086" fg:w="1"/><text x="87.6193%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="87.3693%" y="245" width="0.0805%" height="15" fill="rgb(237,29,31)" fg:x="1086" fg:w="1"/><text x="87.6193%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="87.3693%" y="229" width="0.0805%" height="15" fill="rgb(211,21,50)" fg:x="1086" fg:w="1"/><text x="87.6193%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="87.3693%" y="213" width="0.0805%" height="15" fill="rgb(239,119,2)" fg:x="1086" fg:w="1"/><text x="87.6193%" y="223.50"></text></g><g><title>kernel::model::EntityPtr::gid (3 samples, 0.24%)</title><rect x="87.2888%" y="357" width="0.2414%" height="15" fill="rgb(250,2,39)" fg:x="1085" fg:w="3"/><text x="87.5388%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="87.2888%" y="341" width="0.2414%" height="15" fill="rgb(244,46,53)" fg:x="1085" fg:w="3"/><text x="87.5388%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="87.4497%" y="325" width="0.0805%" height="15" fill="rgb(209,21,19)" fg:x="1087" fg:w="1"/><text x="87.6997%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.4497%" y="309" width="0.0805%" height="15" fill="rgb(236,145,4)" fg:x="1087" fg:w="1"/><text x="87.6997%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="87.4497%" y="293" width="0.0805%" height="15" fill="rgb(220,133,36)" fg:x="1087" fg:w="1"/><text x="87.6997%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.4497%" y="277" width="0.0805%" height="15" fill="rgb(244,18,3)" fg:x="1087" fg:w="1"/><text x="87.6997%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="87.4497%" y="261" width="0.0805%" height="15" fill="rgb(232,171,48)" fg:x="1087" fg:w="1"/><text x="87.6997%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.4497%" y="245" width="0.0805%" height="15" fill="rgb(223,223,53)" fg:x="1087" fg:w="1"/><text x="87.6997%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.4497%" y="229" width="0.0805%" height="15" fill="rgb(246,92,13)" fg:x="1087" fg:w="1"/><text x="87.6997%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="87.5302%" y="277" width="0.0805%" height="15" fill="rgb(229,171,10)" fg:x="1088" fg:w="1"/><text x="87.7802%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="87.5302%" y="261" width="0.0805%" height="15" fill="rgb(213,131,26)" fg:x="1088" fg:w="1"/><text x="87.7802%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.6106%" y="213" width="0.0805%" height="15" fill="rgb(242,87,54)" fg:x="1089" fg:w="1"/><text x="87.8606%" y="223.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="87.6911%" y="197" width="0.1609%" height="15" fill="rgb(237,21,35)" fg:x="1090" fg:w="2"/><text x="87.9411%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (4 samples, 0.32%)</title><rect x="87.6911%" y="213" width="0.3218%" height="15" fill="rgb(253,13,47)" fg:x="1090" fg:w="4"/><text x="87.9411%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (2 samples, 0.16%)</title><rect x="87.8520%" y="197" width="0.1609%" height="15" fill="rgb(215,122,49)" fg:x="1092" fg:w="2"/><text x="88.1020%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="88.0129%" y="213" width="0.0805%" height="15" fill="rgb(209,179,30)" fg:x="1094" fg:w="1"/><text x="88.2629%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="88.0129%" y="197" width="0.0805%" height="15" fill="rgb(235,100,24)" fg:x="1094" fg:w="1"/><text x="88.2629%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.0129%" y="181" width="0.0805%" height="15" fill="rgb(209,67,24)" fg:x="1094" fg:w="1"/><text x="88.2629%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="88.0933%" y="213" width="0.0805%" height="15" fill="rgb(206,74,32)" fg:x="1095" fg:w="1"/><text x="88.3433%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="88.0933%" y="197" width="0.0805%" height="15" fill="rgb(212,45,25)" fg:x="1095" fg:w="1"/><text x="88.3433%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="88.0933%" y="181" width="0.0805%" height="15" fill="rgb(239,26,3)" fg:x="1095" fg:w="1"/><text x="88.3433%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="88.0933%" y="165" width="0.0805%" height="15" fill="rgb(218,36,15)" fg:x="1095" fg:w="1"/><text x="88.3433%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.0933%" y="149" width="0.0805%" height="15" fill="rgb(206,108,24)" fg:x="1095" fg:w="1"/><text x="88.3433%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.0933%" y="133" width="0.0805%" height="15" fill="rgb(234,204,42)" fg:x="1095" fg:w="1"/><text x="88.3433%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (17 samples, 1.37%)</title><rect x="88.3347%" y="149" width="1.3677%" height="15" fill="rgb(229,2,11)" fg:x="1098" fg:w="17"/><text x="88.5847%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (17 samples, 1.37%)</title><rect x="88.3347%" y="133" width="1.3677%" height="15" fill="rgb(221,20,48)" fg:x="1098" fg:w="17"/><text x="88.5847%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (17 samples, 1.37%)</title><rect x="88.3347%" y="117" width="1.3677%" height="15" fill="rgb(244,164,10)" fg:x="1098" fg:w="17"/><text x="88.5847%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 1.61%)</title><rect x="88.1738%" y="197" width="1.6090%" height="15" fill="rgb(243,229,2)" fg:x="1096" fg:w="20"/><text x="88.4238%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (20 samples, 1.61%)</title><rect x="88.1738%" y="181" width="1.6090%" height="15" fill="rgb(232,131,37)" fg:x="1096" fg:w="20"/><text x="88.4238%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (20 samples, 1.61%)</title><rect x="88.1738%" y="165" width="1.6090%" height="15" fill="rgb(217,156,11)" fg:x="1096" fg:w="20"/><text x="88.4238%" y="175.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="89.7023%" y="149" width="0.0805%" height="15" fill="rgb(239,99,48)" fg:x="1115" fg:w="1"/><text x="89.9523%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="89.8632%" y="181" width="0.0805%" height="15" fill="rgb(231,209,9)" fg:x="1117" fg:w="1"/><text x="90.1132%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.8632%" y="165" width="0.0805%" height="15" fill="rgb(254,97,27)" fg:x="1117" fg:w="1"/><text x="90.1132%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.8632%" y="149" width="0.0805%" height="15" fill="rgb(223,151,38)" fg:x="1117" fg:w="1"/><text x="90.1132%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="89.8632%" y="133" width="0.0805%" height="15" fill="rgb(219,206,35)" fg:x="1117" fg:w="1"/><text x="90.1132%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.48%)</title><rect x="89.7828%" y="197" width="0.4827%" height="15" fill="rgb(216,130,31)" fg:x="1116" fg:w="6"/><text x="90.0328%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="89.9437%" y="181" width="0.3218%" height="15" fill="rgb(251,97,34)" fg:x="1118" fg:w="4"/><text x="90.1937%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.1850%" y="165" width="0.0805%" height="15" fill="rgb(246,159,47)" fg:x="1121" fg:w="1"/><text x="90.4350%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (34 samples, 2.74%)</title><rect x="87.6106%" y="229" width="2.7353%" height="15" fill="rgb(232,87,10)" fg:x="1089" fg:w="34"/><text x="87.8606%" y="239.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (27 samples, 2.17%)</title><rect x="88.1738%" y="213" width="2.1722%" height="15" fill="rgb(249,1,37)" fg:x="1096" fg:w="27"/><text x="88.4238%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="90.2655%" y="197" width="0.0805%" height="15" fill="rgb(239,135,14)" fg:x="1122" fg:w="1"/><text x="90.5155%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="90.2655%" y="181" width="0.0805%" height="15" fill="rgb(253,116,46)" fg:x="1122" fg:w="1"/><text x="90.5155%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="90.4264%" y="181" width="0.0805%" height="15" fill="rgb(222,217,37)" fg:x="1124" fg:w="1"/><text x="90.6764%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="90.4264%" y="165" width="0.0805%" height="15" fill="rgb(252,96,8)" fg:x="1124" fg:w="1"/><text x="90.6764%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="90.4264%" y="149" width="0.0805%" height="15" fill="rgb(254,103,41)" fg:x="1124" fg:w="1"/><text x="90.6764%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="90.4264%" y="133" width="0.0805%" height="15" fill="rgb(218,213,19)" fg:x="1124" fg:w="1"/><text x="90.6764%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="90.3459%" y="229" width="0.3218%" height="15" fill="rgb(253,95,21)" fg:x="1123" fg:w="4"/><text x="90.5959%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="90.3459%" y="213" width="0.3218%" height="15" fill="rgb(229,26,28)" fg:x="1123" fg:w="4"/><text x="90.5959%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="90.4264%" y="197" width="0.2414%" height="15" fill="rgb(230,129,16)" fg:x="1124" fg:w="3"/><text x="90.6764%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="90.5068%" y="181" width="0.1609%" height="15" fill="rgb(236,126,17)" fg:x="1125" fg:w="2"/><text x="90.7568%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.5873%" y="165" width="0.0805%" height="15" fill="rgb(209,33,33)" fg:x="1126" fg:w="1"/><text x="90.8373%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.5873%" y="149" width="0.0805%" height="15" fill="rgb(227,85,29)" fg:x="1126" fg:w="1"/><text x="90.8373%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.5873%" y="133" width="0.0805%" height="15" fill="rgb(241,53,46)" fg:x="1126" fg:w="1"/><text x="90.8373%" y="143.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (39 samples, 3.14%)</title><rect x="87.6106%" y="245" width="3.1376%" height="15" fill="rgb(228,167,53)" fg:x="1089" fg:w="39"/><text x="87.8606%" y="255.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="90.6677%" y="229" width="0.0805%" height="15" fill="rgb(238,195,45)" fg:x="1127" fg:w="1"/><text x="90.9177%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="90.6677%" y="213" width="0.0805%" height="15" fill="rgb(252,124,45)" fg:x="1127" fg:w="1"/><text x="90.9177%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="90.6677%" y="197" width="0.0805%" height="15" fill="rgb(251,38,35)" fg:x="1127" fg:w="1"/><text x="90.9177%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (40 samples, 3.22%)</title><rect x="87.6106%" y="277" width="3.2180%" height="15" fill="rgb(227,33,2)" fg:x="1089" fg:w="40"/><text x="87.8606%" y="287.50">&lt;re..</text></g><g><title>regex::builders::string::RegexBuilder::build (40 samples, 3.22%)</title><rect x="87.6106%" y="261" width="3.2180%" height="15" fill="rgb(223,157,46)" fg:x="1089" fg:w="40"/><text x="87.8606%" y="271.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="90.7482%" y="245" width="0.0805%" height="15" fill="rgb(222,78,41)" fg:x="1128" fg:w="1"/><text x="90.9982%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="90.8286%" y="277" width="0.1609%" height="15" fill="rgb(248,176,11)" fg:x="1129" fg:w="2"/><text x="91.0786%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::panic::unwind_safe::UnwindSafe+core::marker::Sync+core::panic::unwind_safe::RefUnwindSafe+core::marker::Send&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="90.9091%" y="261" width="0.0805%" height="15" fill="rgb(241,221,18)" fg:x="1130" fg:w="1"/><text x="91.1591%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="90.9091%" y="245" width="0.0805%" height="15" fill="rgb(218,85,22)" fg:x="1130" fg:w="1"/><text x="91.1591%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="90.9091%" y="229" width="0.0805%" height="15" fill="rgb(222,223,7)" fg:x="1130" fg:w="1"/><text x="91.1591%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="91.0700%" y="197" width="0.0805%" height="15" fill="rgb(254,59,39)" fg:x="1132" fg:w="1"/><text x="91.3200%" y="207.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (47 samples, 3.78%)</title><rect x="87.5302%" y="293" width="3.7812%" height="15" fill="rgb(247,100,27)" fg:x="1088" fg:w="47"/><text x="87.7802%" y="303.50">inde..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="90.9895%" y="277" width="0.3218%" height="15" fill="rgb(237,207,10)" fg:x="1131" fg:w="4"/><text x="91.2395%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="90.9895%" y="261" width="0.3218%" height="15" fill="rgb(220,121,28)" fg:x="1131" fg:w="4"/><text x="91.2395%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="90.9895%" y="245" width="0.3218%" height="15" fill="rgb(213,223,20)" fg:x="1131" fg:w="4"/><text x="91.2395%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="90.9895%" y="229" width="0.3218%" height="15" fill="rgb(205,121,27)" fg:x="1131" fg:w="4"/><text x="91.2395%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="91.0700%" y="213" width="0.2414%" height="15" fill="rgb(253,24,53)" fg:x="1132" fg:w="3"/><text x="91.3200%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="91.1504%" y="197" width="0.1609%" height="15" fill="rgb(224,224,47)" fg:x="1133" fg:w="2"/><text x="91.4004%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="91.3113%" y="229" width="0.0805%" height="15" fill="rgb(250,125,36)" fg:x="1135" fg:w="1"/><text x="91.5613%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="91.3113%" y="213" width="0.0805%" height="15" fill="rgb(240,144,38)" fg:x="1135" fg:w="1"/><text x="91.5613%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.3918%" y="229" width="0.0805%" height="15" fill="rgb(250,15,50)" fg:x="1136" fg:w="1"/><text x="91.6418%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.5527%" y="197" width="0.0805%" height="15" fill="rgb(210,24,26)" fg:x="1138" fg:w="1"/><text x="91.8027%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (3 samples, 0.24%)</title><rect x="91.5527%" y="213" width="0.2414%" height="15" fill="rgb(234,53,53)" fg:x="1138" fg:w="3"/><text x="91.8027%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (2 samples, 0.16%)</title><rect x="91.6331%" y="197" width="0.1609%" height="15" fill="rgb(208,108,28)" fg:x="1139" fg:w="2"/><text x="91.8831%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="91.7940%" y="213" width="0.0805%" height="15" fill="rgb(227,143,7)" fg:x="1141" fg:w="1"/><text x="92.0440%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="91.7940%" y="197" width="0.0805%" height="15" fill="rgb(238,189,38)" fg:x="1141" fg:w="1"/><text x="92.0440%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (1 samples, 0.08%)</title><rect x="91.9549%" y="181" width="0.0805%" height="15" fill="rgb(222,69,15)" fg:x="1143" fg:w="1"/><text x="92.2049%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="91.9549%" y="165" width="0.0805%" height="15" fill="rgb(213,169,7)" fg:x="1143" fg:w="1"/><text x="92.2049%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="91.9549%" y="149" width="0.0805%" height="15" fill="rgb(251,219,4)" fg:x="1143" fg:w="1"/><text x="92.2049%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.9549%" y="133" width="0.0805%" height="15" fill="rgb(241,55,40)" fg:x="1143" fg:w="1"/><text x="92.2049%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.9549%" y="117" width="0.0805%" height="15" fill="rgb(243,57,30)" fg:x="1143" fg:w="1"/><text x="92.2049%" y="127.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.0354%" y="149" width="0.0805%" height="15" fill="rgb(234,50,30)" fg:x="1144" fg:w="1"/><text x="92.2854%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (3 samples, 0.24%)</title><rect x="92.0354%" y="181" width="0.2414%" height="15" fill="rgb(239,23,42)" fg:x="1144" fg:w="3"/><text x="92.2854%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (3 samples, 0.24%)</title><rect x="92.0354%" y="165" width="0.2414%" height="15" fill="rgb(217,38,19)" fg:x="1144" fg:w="3"/><text x="92.2854%" y="175.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.16%)</title><rect x="92.1158%" y="149" width="0.1609%" height="15" fill="rgb(215,179,16)" fg:x="1145" fg:w="2"/><text x="92.3658%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (6 samples, 0.48%)</title><rect x="91.8745%" y="213" width="0.4827%" height="15" fill="rgb(254,21,37)" fg:x="1142" fg:w="6"/><text x="92.1245%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (6 samples, 0.48%)</title><rect x="91.8745%" y="197" width="0.4827%" height="15" fill="rgb(219,207,48)" fg:x="1142" fg:w="6"/><text x="92.1245%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="92.2767%" y="181" width="0.0805%" height="15" fill="rgb(227,225,41)" fg:x="1147" fg:w="1"/><text x="92.5267%" y="191.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="92.6790%" y="101" width="0.0805%" height="15" fill="rgb(223,130,1)" fg:x="1152" fg:w="1"/><text x="92.9290%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="92.7595%" y="101" width="0.0805%" height="15" fill="rgb(249,54,42)" fg:x="1153" fg:w="1"/><text x="93.0095%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="92.8399%" y="101" width="0.0805%" height="15" fill="rgb(248,69,25)" fg:x="1154" fg:w="1"/><text x="93.0899%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.8399%" y="85" width="0.0805%" height="15" fill="rgb(234,21,32)" fg:x="1154" fg:w="1"/><text x="93.0899%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.8399%" y="69" width="0.0805%" height="15" fill="rgb(252,136,6)" fg:x="1154" fg:w="1"/><text x="93.0899%" y="79.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="92.8399%" y="53" width="0.0805%" height="15" fill="rgb(245,87,12)" fg:x="1154" fg:w="1"/><text x="93.0899%" y="63.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.0008%" y="69" width="0.0805%" height="15" fill="rgb(208,12,15)" fg:x="1156" fg:w="1"/><text x="93.2508%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.0008%" y="53" width="0.0805%" height="15" fill="rgb(250,98,2)" fg:x="1156" fg:w="1"/><text x="93.2508%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="93.0008%" y="37" width="0.0805%" height="15" fill="rgb(205,213,15)" fg:x="1156" fg:w="1"/><text x="93.2508%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="92.9204%" y="101" width="0.2414%" height="15" fill="rgb(248,192,44)" fg:x="1155" fg:w="3"/><text x="93.1704%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="92.9204%" y="85" width="0.2414%" height="15" fill="rgb(221,89,17)" fg:x="1155" fg:w="3"/><text x="93.1704%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="93.0813%" y="69" width="0.0805%" height="15" fill="rgb(209,55,3)" fg:x="1157" fg:w="1"/><text x="93.3313%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="93.0813%" y="53" width="0.0805%" height="15" fill="rgb(247,23,45)" fg:x="1157" fg:w="1"/><text x="93.3313%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (18 samples, 1.45%)</title><rect x="93.1617%" y="101" width="1.4481%" height="15" fill="rgb(235,152,23)" fg:x="1158" fg:w="18"/><text x="93.4117%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (18 samples, 1.45%)</title><rect x="93.1617%" y="85" width="1.4481%" height="15" fill="rgb(244,63,13)" fg:x="1158" fg:w="18"/><text x="93.4117%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (18 samples, 1.45%)</title><rect x="93.1617%" y="69" width="1.4481%" height="15" fill="rgb(227,30,37)" fg:x="1158" fg:w="18"/><text x="93.4117%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="94.6098%" y="101" width="0.0805%" height="15" fill="rgb(224,49,42)" fg:x="1176" fg:w="1"/><text x="94.8598%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 2.49%)</title><rect x="92.3572%" y="197" width="2.4940%" height="15" fill="rgb(218,129,5)" fg:x="1148" fg:w="31"/><text x="92.6072%" y="207.50">&lt;c..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (31 samples, 2.49%)</title><rect x="92.3572%" y="181" width="2.4940%" height="15" fill="rgb(240,199,54)" fg:x="1148" fg:w="31"/><text x="92.6072%" y="191.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (31 samples, 2.49%)</title><rect x="92.3572%" y="165" width="2.4940%" height="15" fill="rgb(234,31,13)" fg:x="1148" fg:w="31"/><text x="92.6072%" y="175.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (31 samples, 2.49%)</title><rect x="92.3572%" y="149" width="2.4940%" height="15" fill="rgb(219,73,54)" fg:x="1148" fg:w="31"/><text x="92.6072%" y="159.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (31 samples, 2.49%)</title><rect x="92.3572%" y="133" width="2.4940%" height="15" fill="rgb(251,162,10)" fg:x="1148" fg:w="31"/><text x="92.6072%" y="143.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (31 samples, 2.49%)</title><rect x="92.3572%" y="117" width="2.4940%" height="15" fill="rgb(240,138,47)" fg:x="1148" fg:w="31"/><text x="92.6072%" y="127.50">re..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="94.6903%" y="101" width="0.1609%" height="15" fill="rgb(216,138,26)" fg:x="1177" fg:w="2"/><text x="94.9403%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="94.6903%" y="85" width="0.1609%" height="15" fill="rgb(243,17,35)" fg:x="1177" fg:w="2"/><text x="94.9403%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.7707%" y="69" width="0.0805%" height="15" fill="rgb(241,60,18)" fg:x="1178" fg:w="1"/><text x="95.0207%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.7707%" y="53" width="0.0805%" height="15" fill="rgb(234,2,44)" fg:x="1178" fg:w="1"/><text x="95.0207%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="94.8512%" y="181" width="0.2414%" height="15" fill="rgb(225,225,33)" fg:x="1179" fg:w="3"/><text x="95.1012%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.0121%" y="165" width="0.0805%" height="15" fill="rgb(234,50,31)" fg:x="1181" fg:w="1"/><text x="95.2621%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.0121%" y="149" width="0.0805%" height="15" fill="rgb(249,6,25)" fg:x="1181" fg:w="1"/><text x="95.2621%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.0121%" y="133" width="0.0805%" height="15" fill="rgb(241,5,17)" fg:x="1181" fg:w="1"/><text x="95.2621%" y="143.50"></text></g><g><title>regex_automata::meta::strategy::new (47 samples, 3.78%)</title><rect x="91.4722%" y="229" width="3.7812%" height="15" fill="rgb(207,116,10)" fg:x="1137" fg:w="47"/><text x="91.7222%" y="239.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (36 samples, 2.90%)</title><rect x="92.3572%" y="213" width="2.8962%" height="15" fill="rgb(222,128,18)" fg:x="1148" fg:w="36"/><text x="92.6072%" y="223.50">re..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="94.8512%" y="197" width="0.4023%" height="15" fill="rgb(229,109,25)" fg:x="1179" fg:w="5"/><text x="95.1012%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="95.0925%" y="181" width="0.1609%" height="15" fill="rgb(222,102,25)" fg:x="1182" fg:w="2"/><text x="95.3425%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.1730%" y="165" width="0.0805%" height="15" fill="rgb(239,211,5)" fg:x="1183" fg:w="1"/><text x="95.4230%" y="175.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::new (1 samples, 0.08%)</title><rect x="95.2534%" y="229" width="0.0805%" height="15" fill="rgb(223,136,26)" fg:x="1184" fg:w="1"/><text x="95.5034%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="95.2534%" y="213" width="0.0805%" height="15" fill="rgb(227,30,15)" fg:x="1184" fg:w="1"/><text x="95.5034%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="95.3339%" y="197" width="0.0805%" height="15" fill="rgb(247,76,4)" fg:x="1185" fg:w="1"/><text x="95.5839%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="95.3339%" y="229" width="0.1609%" height="15" fill="rgb(245,38,48)" fg:x="1185" fg:w="2"/><text x="95.5839%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="95.3339%" y="213" width="0.1609%" height="15" fill="rgb(210,220,14)" fg:x="1185" fg:w="2"/><text x="95.5839%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="95.4143%" y="197" width="0.0805%" height="15" fill="rgb(224,60,51)" fg:x="1186" fg:w="1"/><text x="95.6643%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="95.4948%" y="197" width="0.0805%" height="15" fill="rgb(212,133,49)" fg:x="1187" fg:w="1"/><text x="95.7448%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="95.4948%" y="181" width="0.0805%" height="15" fill="rgb(231,39,22)" fg:x="1187" fg:w="1"/><text x="95.7448%" y="191.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="95.4948%" y="165" width="0.0805%" height="15" fill="rgb(236,173,22)" fg:x="1187" fg:w="1"/><text x="95.7448%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="95.5752%" y="197" width="0.0805%" height="15" fill="rgb(210,70,0)" fg:x="1188" fg:w="1"/><text x="95.8252%" y="207.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="95.5752%" y="181" width="0.0805%" height="15" fill="rgb(215,170,11)" fg:x="1188" fg:w="1"/><text x="95.8252%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (55 samples, 4.42%)</title><rect x="91.3113%" y="277" width="4.4248%" height="15" fill="rgb(220,154,28)" fg:x="1135" fg:w="55"/><text x="91.5613%" y="287.50">&lt;rege..</text></g><g><title>regex::builders::string::RegexBuilder::build (55 samples, 4.42%)</title><rect x="91.3113%" y="261" width="4.4248%" height="15" fill="rgb(240,160,41)" fg:x="1135" fg:w="55"/><text x="91.5613%" y="271.50">regex..</text></g><g><title>regex_automata::meta::regex::Builder::build (55 samples, 4.42%)</title><rect x="91.3113%" y="245" width="4.4248%" height="15" fill="rgb(243,215,41)" fg:x="1135" fg:w="55"/><text x="91.5613%" y="255.50">regex..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="95.4948%" y="229" width="0.2414%" height="15" fill="rgb(214,208,31)" fg:x="1187" fg:w="3"/><text x="95.7448%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="95.4948%" y="213" width="0.2414%" height="15" fill="rgb(247,57,22)" fg:x="1187" fg:w="3"/><text x="95.7448%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="95.6557%" y="197" width="0.0805%" height="15" fill="rgb(228,73,52)" fg:x="1189" fg:w="1"/><text x="95.9057%" y="207.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="95.6557%" y="181" width="0.0805%" height="15" fill="rgb(252,60,9)" fg:x="1189" fg:w="1"/><text x="95.9057%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.6557%" y="165" width="0.0805%" height="15" fill="rgb(233,9,51)" fg:x="1189" fg:w="1"/><text x="95.9057%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.6557%" y="149" width="0.0805%" height="15" fill="rgb(223,67,14)" fg:x="1189" fg:w="1"/><text x="95.9057%" y="159.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.7361%" y="245" width="0.0805%" height="15" fill="rgb(222,86,2)" fg:x="1190" fg:w="1"/><text x="95.9861%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="95.7361%" y="229" width="0.0805%" height="15" fill="rgb(243,58,54)" fg:x="1190" fg:w="1"/><text x="95.9861%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.7361%" y="213" width="0.0805%" height="15" fill="rgb(210,200,39)" fg:x="1190" fg:w="1"/><text x="95.9861%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.7361%" y="197" width="0.0805%" height="15" fill="rgb(238,135,9)" fg:x="1190" fg:w="1"/><text x="95.9861%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="95.7361%" y="277" width="0.1609%" height="15" fill="rgb(232,179,7)" fg:x="1190" fg:w="2"/><text x="95.9861%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::panic::unwind_safe::UnwindSafe+core::marker::Sync+core::panic::unwind_safe::RefUnwindSafe+core::marker::Send&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="95.7361%" y="261" width="0.1609%" height="15" fill="rgb(245,65,41)" fg:x="1190" fg:w="2"/><text x="95.9861%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="95.8166%" y="245" width="0.0805%" height="15" fill="rgb(227,43,8)" fg:x="1191" fg:w="1"/><text x="96.0666%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="95.8166%" y="229" width="0.0805%" height="15" fill="rgb(235,91,14)" fg:x="1191" fg:w="1"/><text x="96.0666%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.8166%" y="213" width="0.0805%" height="15" fill="rgb(235,219,31)" fg:x="1191" fg:w="1"/><text x="96.0666%" y="223.50"></text></g><g><title>indefinite::rules::number::Number::check (63 samples, 5.07%)</title><rect x="91.3113%" y="293" width="5.0684%" height="15" fill="rgb(227,121,25)" fg:x="1135" fg:w="63"/><text x="91.5613%" y="303.50">indefi..</text></g><g><title>regex::regex::string::Regex::is_match_at (6 samples, 0.48%)</title><rect x="95.8970%" y="277" width="0.4827%" height="15" fill="rgb(254,129,24)" fg:x="1192" fg:w="6"/><text x="96.1470%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.48%)</title><rect x="95.8970%" y="261" width="0.4827%" height="15" fill="rgb(226,144,49)" fg:x="1192" fg:w="6"/><text x="96.1470%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="95.9775%" y="245" width="0.4023%" height="15" fill="rgb(214,187,32)" fg:x="1193" fg:w="5"/><text x="96.2275%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="95.9775%" y="229" width="0.4023%" height="15" fill="rgb(243,129,46)" fg:x="1193" fg:w="5"/><text x="96.2275%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="95.9775%" y="213" width="0.4023%" height="15" fill="rgb(221,185,35)" fg:x="1193" fg:w="5"/><text x="96.2275%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="95.9775%" y="197" width="0.4023%" height="15" fill="rgb(205,0,32)" fg:x="1193" fg:w="5"/><text x="96.2275%" y="207.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="96.2993%" y="181" width="0.0805%" height="15" fill="rgb(229,179,12)" fg:x="1197" fg:w="1"/><text x="96.5493%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.2993%" y="165" width="0.0805%" height="15" fill="rgb(252,107,19)" fg:x="1197" fg:w="1"/><text x="96.5493%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="96.3797%" y="213" width="0.0805%" height="15" fill="rgb(220,95,27)" fg:x="1198" fg:w="1"/><text x="96.6297%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.3797%" y="197" width="0.0805%" height="15" fill="rgb(240,113,40)" fg:x="1198" fg:w="1"/><text x="96.6297%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (1 samples, 0.08%)</title><rect x="96.4602%" y="213" width="0.0805%" height="15" fill="rgb(208,4,43)" fg:x="1199" fg:w="1"/><text x="96.7102%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1 samples, 0.08%)</title><rect x="96.4602%" y="197" width="0.0805%" height="15" fill="rgb(247,189,30)" fg:x="1199" fg:w="1"/><text x="96.7102%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="96.4602%" y="181" width="0.0805%" height="15" fill="rgb(231,157,17)" fg:x="1199" fg:w="1"/><text x="96.7102%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="96.5406%" y="213" width="0.2414%" height="15" fill="rgb(224,139,6)" fg:x="1200" fg:w="3"/><text x="96.7906%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="96.5406%" y="197" width="0.2414%" height="15" fill="rgb(223,83,16)" fg:x="1200" fg:w="3"/><text x="96.7906%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="96.6211%" y="181" width="0.1609%" height="15" fill="rgb(232,211,20)" fg:x="1201" fg:w="2"/><text x="96.8711%" y="191.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="96.6211%" y="165" width="0.1609%" height="15" fill="rgb(225,203,35)" fg:x="1201" fg:w="2"/><text x="96.8711%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="96.6211%" y="149" width="0.1609%" height="15" fill="rgb(215,211,44)" fg:x="1201" fg:w="2"/><text x="96.8711%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.7015%" y="133" width="0.0805%" height="15" fill="rgb(248,213,26)" fg:x="1202" fg:w="1"/><text x="96.9515%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.7015%" y="117" width="0.0805%" height="15" fill="rgb(214,23,52)" fg:x="1202" fg:w="1"/><text x="96.9515%" y="127.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (6 samples, 0.48%)</title><rect x="96.3797%" y="261" width="0.4827%" height="15" fill="rgb(225,173,50)" fg:x="1198" fg:w="6"/><text x="96.6297%" y="271.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (6 samples, 0.48%)</title><rect x="96.3797%" y="245" width="0.4827%" height="15" fill="rgb(206,150,22)" fg:x="1198" fg:w="6"/><text x="96.6297%" y="255.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (6 samples, 0.48%)</title><rect x="96.3797%" y="229" width="0.4827%" height="15" fill="rgb(239,64,23)" fg:x="1198" fg:w="6"/><text x="96.6297%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="96.7820%" y="213" width="0.0805%" height="15" fill="rgb(242,50,38)" fg:x="1203" fg:w="1"/><text x="97.0320%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="96.7820%" y="197" width="0.0805%" height="15" fill="rgb(217,91,15)" fg:x="1203" fg:w="1"/><text x="97.0320%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="96.7820%" y="181" width="0.0805%" height="15" fill="rgb(230,172,6)" fg:x="1203" fg:w="1"/><text x="97.0320%" y="191.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="96.8624%" y="261" width="0.0805%" height="15" fill="rgb(221,98,26)" fg:x="1204" fg:w="1"/><text x="97.1124%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="96.8624%" y="245" width="0.0805%" height="15" fill="rgb(227,210,45)" fg:x="1204" fg:w="1"/><text x="97.1124%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="96.8624%" y="229" width="0.0805%" height="15" fill="rgb(206,8,30)" fg:x="1204" fg:w="1"/><text x="97.1124%" y="239.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="96.8624%" y="213" width="0.0805%" height="15" fill="rgb(241,219,17)" fg:x="1204" fg:w="1"/><text x="97.1124%" y="223.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="96.8624%" y="197" width="0.0805%" height="15" fill="rgb(247,121,29)" fg:x="1204" fg:w="1"/><text x="97.1124%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="96.9429%" y="261" width="0.1609%" height="15" fill="rgb(219,169,49)" fg:x="1205" fg:w="2"/><text x="97.1929%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::panic::unwind_safe::UnwindSafe+core::marker::Sync+core::panic::unwind_safe::RefUnwindSafe+core::marker::Send&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="96.9429%" y="245" width="0.1609%" height="15" fill="rgb(253,49,49)" fg:x="1205" fg:w="2"/><text x="97.1929%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="96.9429%" y="229" width="0.1609%" height="15" fill="rgb(217,178,3)" fg:x="1205" fg:w="2"/><text x="97.1929%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="96.9429%" y="213" width="0.1609%" height="15" fill="rgb(234,73,37)" fg:x="1205" fg:w="2"/><text x="97.1929%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.0233%" y="197" width="0.0805%" height="15" fill="rgb(250,98,22)" fg:x="1206" fg:w="1"/><text x="97.2733%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="97.1038%" y="197" width="0.0805%" height="15" fill="rgb(220,108,37)" fg:x="1207" fg:w="1"/><text x="97.3538%" y="207.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="97.1038%" y="181" width="0.0805%" height="15" fill="rgb(225,168,10)" fg:x="1207" fg:w="1"/><text x="97.3538%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.1038%" y="165" width="0.0805%" height="15" fill="rgb(247,215,21)" fg:x="1207" fg:w="1"/><text x="97.3538%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.1038%" y="149" width="0.0805%" height="15" fill="rgb(253,189,31)" fg:x="1207" fg:w="1"/><text x="97.3538%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.1038%" y="133" width="0.0805%" height="15" fill="rgb(241,54,22)" fg:x="1207" fg:w="1"/><text x="97.3538%" y="143.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="97.1038%" y="213" width="0.1609%" height="15" fill="rgb(211,87,4)" fg:x="1207" fg:w="2"/><text x="97.3538%" y="223.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="97.1842%" y="197" width="0.0805%" height="15" fill="rgb(245,112,24)" fg:x="1208" fg:w="1"/><text x="97.4342%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.1842%" y="181" width="0.0805%" height="15" fill="rgb(235,190,41)" fg:x="1208" fg:w="1"/><text x="97.4342%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.1842%" y="165" width="0.0805%" height="15" fill="rgb(214,89,8)" fg:x="1208" fg:w="1"/><text x="97.4342%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.1842%" y="149" width="0.0805%" height="15" fill="rgb(249,155,35)" fg:x="1208" fg:w="1"/><text x="97.4342%" y="159.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (128 samples, 10.30%)</title><rect x="87.0475%" y="373" width="10.2977%" height="15" fill="rgb(249,88,26)" fg:x="1082" fg:w="128"/><text x="87.2975%" y="383.50">&lt;&amp;kernel::model..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (122 samples, 9.81%)</title><rect x="87.5302%" y="357" width="9.8150%" height="15" fill="rgb(232,56,8)" fg:x="1088" fg:w="122"/><text x="87.7802%" y="367.50">plugins_core::..</text></g><g><title>indefinite::indefinite (122 samples, 9.81%)</title><rect x="87.5302%" y="341" width="9.8150%" height="15" fill="rgb(240,95,3)" fg:x="1088" fg:w="122"/><text x="87.7802%" y="351.50">indefinite::in..</text></g><g><title>indefinite::methods::indefinite (122 samples, 9.81%)</title><rect x="87.5302%" y="325" width="9.8150%" height="15" fill="rgb(222,44,28)" fg:x="1088" fg:w="122"/><text x="87.7802%" y="335.50">indefinite::me..</text></g><g><title>indefinite::methods::apply_rules (122 samples, 9.81%)</title><rect x="87.5302%" y="309" width="9.8150%" height="15" fill="rgb(234,16,30)" fg:x="1088" fg:w="122"/><text x="87.7802%" y="319.50">indefinite::me..</text></g><g><title>indefinite::rules::other::Other::run (12 samples, 0.97%)</title><rect x="96.3797%" y="293" width="0.9654%" height="15" fill="rgb(223,26,17)" fg:x="1198" fg:w="12"/><text x="96.6297%" y="303.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (12 samples, 0.97%)</title><rect x="96.3797%" y="277" width="0.9654%" height="15" fill="rgb(239,187,47)" fg:x="1198" fg:w="12"/><text x="96.6297%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="97.1038%" y="261" width="0.2414%" height="15" fill="rgb(247,102,50)" fg:x="1207" fg:w="3"/><text x="97.3538%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="97.1038%" y="245" width="0.2414%" height="15" fill="rgb(231,216,22)" fg:x="1207" fg:w="3"/><text x="97.3538%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="97.1038%" y="229" width="0.2414%" height="15" fill="rgb(216,201,26)" fg:x="1207" fg:w="3"/><text x="97.3538%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="97.2647%" y="213" width="0.0805%" height="15" fill="rgb(214,186,23)" fg:x="1209" fg:w="1"/><text x="97.5147%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="97.2647%" y="197" width="0.0805%" height="15" fill="rgb(235,184,4)" fg:x="1209" fg:w="1"/><text x="97.5147%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.2647%" y="181" width="0.0805%" height="15" fill="rgb(244,46,17)" fg:x="1209" fg:w="1"/><text x="97.5147%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.2647%" y="165" width="0.0805%" height="15" fill="rgb(248,74,46)" fg:x="1209" fg:w="1"/><text x="97.5147%" y="175.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="97.3451%" y="373" width="0.0805%" height="15" fill="rgb(243,79,5)" fg:x="1210" fg:w="1"/><text x="97.5951%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.3451%" y="357" width="0.0805%" height="15" fill="rgb(213,148,1)" fg:x="1210" fg:w="1"/><text x="97.5951%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.3451%" y="341" width="0.0805%" height="15" fill="rgb(221,30,0)" fg:x="1210" fg:w="1"/><text x="97.5951%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.3451%" y="325" width="0.0805%" height="15" fill="rgb(207,85,29)" fg:x="1210" fg:w="1"/><text x="97.5951%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.3451%" y="309" width="0.0805%" height="15" fill="rgb(239,31,46)" fg:x="1210" fg:w="1"/><text x="97.5951%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.3451%" y="293" width="0.0805%" height="15" fill="rgb(219,6,1)" fg:x="1210" fg:w="1"/><text x="97.5951%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.3451%" y="277" width="0.0805%" height="15" fill="rgb(229,90,29)" fg:x="1210" fg:w="1"/><text x="97.5951%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="97.4256%" y="309" width="0.1609%" height="15" fill="rgb(242,201,42)" fg:x="1211" fg:w="2"/><text x="97.6756%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="97.4256%" y="293" width="0.1609%" height="15" fill="rgb(243,80,54)" fg:x="1211" fg:w="2"/><text x="97.6756%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="97.4256%" y="277" width="0.1609%" height="15" fill="rgb(223,166,15)" fg:x="1211" fg:w="2"/><text x="97.6756%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.5060%" y="261" width="0.0805%" height="15" fill="rgb(238,78,27)" fg:x="1212" fg:w="1"/><text x="97.7560%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.5060%" y="245" width="0.0805%" height="15" fill="rgb(235,28,43)" fg:x="1212" fg:w="1"/><text x="97.7560%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.5060%" y="229" width="0.0805%" height="15" fill="rgb(240,210,28)" fg:x="1212" fg:w="1"/><text x="97.7560%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.5060%" y="213" width="0.0805%" height="15" fill="rgb(253,6,46)" fg:x="1212" fg:w="1"/><text x="97.7560%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.5060%" y="197" width="0.0805%" height="15" fill="rgb(250,159,47)" fg:x="1212" fg:w="1"/><text x="97.7560%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.5060%" y="181" width="0.0805%" height="15" fill="rgb(216,139,2)" fg:x="1212" fg:w="1"/><text x="97.7560%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.5060%" y="165" width="0.0805%" height="15" fill="rgb(221,124,44)" fg:x="1212" fg:w="1"/><text x="97.7560%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.5060%" y="149" width="0.0805%" height="15" fill="rgb(205,37,22)" fg:x="1212" fg:w="1"/><text x="97.7560%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.5060%" y="133" width="0.0805%" height="15" fill="rgb(250,55,8)" fg:x="1212" fg:w="1"/><text x="97.7560%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.5060%" y="117" width="0.0805%" height="15" fill="rgb(215,83,48)" fg:x="1212" fg:w="1"/><text x="97.7560%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.5060%" y="101" width="0.0805%" height="15" fill="rgb(253,2,32)" fg:x="1212" fg:w="1"/><text x="97.7560%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.5060%" y="85" width="0.0805%" height="15" fill="rgb(236,67,28)" fg:x="1212" fg:w="1"/><text x="97.7560%" y="95.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (3 samples, 0.24%)</title><rect x="97.4256%" y="357" width="0.2414%" height="15" fill="rgb(252,55,15)" fg:x="1211" fg:w="3"/><text x="97.6756%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="97.4256%" y="341" width="0.2414%" height="15" fill="rgb(243,173,17)" fg:x="1211" fg:w="3"/><text x="97.6756%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="97.4256%" y="325" width="0.2414%" height="15" fill="rgb(215,212,13)" fg:x="1211" fg:w="3"/><text x="97.6756%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="97.5865%" y="309" width="0.0805%" height="15" fill="rgb(253,176,6)" fg:x="1213" fg:w="1"/><text x="97.8365%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.5865%" y="293" width="0.0805%" height="15" fill="rgb(236,105,26)" fg:x="1213" fg:w="1"/><text x="97.8365%" y="303.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.6669%" y="245" width="0.0805%" height="15" fill="rgb(239,226,32)" fg:x="1214" fg:w="1"/><text x="97.9169%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.6669%" y="229" width="0.0805%" height="15" fill="rgb(236,104,51)" fg:x="1214" fg:w="1"/><text x="97.9169%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.6669%" y="213" width="0.0805%" height="15" fill="rgb(220,172,33)" fg:x="1214" fg:w="1"/><text x="97.9169%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.7474%" y="165" width="0.0805%" height="15" fill="rgb(224,182,25)" fg:x="1215" fg:w="1"/><text x="97.9974%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.7474%" y="149" width="0.0805%" height="15" fill="rgb(236,184,24)" fg:x="1215" fg:w="1"/><text x="97.9974%" y="159.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="97.7474%" y="133" width="0.0805%" height="15" fill="rgb(241,221,14)" fg:x="1215" fg:w="1"/><text x="97.9974%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="97.7474%" y="117" width="0.0805%" height="15" fill="rgb(227,146,5)" fg:x="1215" fg:w="1"/><text x="97.9974%" y="127.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="97.7474%" y="197" width="0.1609%" height="15" fill="rgb(214,15,23)" fg:x="1215" fg:w="2"/><text x="97.9974%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="97.7474%" y="181" width="0.1609%" height="15" fill="rgb(233,157,31)" fg:x="1215" fg:w="2"/><text x="97.9974%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.8278%" y="165" width="0.0805%" height="15" fill="rgb(211,27,52)" fg:x="1216" fg:w="1"/><text x="98.0778%" y="175.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="97.8278%" y="149" width="0.0805%" height="15" fill="rgb(212,223,15)" fg:x="1216" fg:w="1"/><text x="98.0778%" y="159.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="97.6669%" y="293" width="0.3218%" height="15" fill="rgb(254,211,0)" fg:x="1214" fg:w="4"/><text x="97.9169%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="97.6669%" y="277" width="0.3218%" height="15" fill="rgb(205,43,38)" fg:x="1214" fg:w="4"/><text x="97.9169%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="97.6669%" y="261" width="0.3218%" height="15" fill="rgb(242,206,46)" fg:x="1214" fg:w="4"/><text x="97.9169%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="97.7474%" y="245" width="0.2414%" height="15" fill="rgb(220,221,12)" fg:x="1215" fg:w="3"/><text x="97.9974%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="97.7474%" y="229" width="0.2414%" height="15" fill="rgb(217,156,35)" fg:x="1215" fg:w="3"/><text x="97.9974%" y="239.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="97.7474%" y="213" width="0.2414%" height="15" fill="rgb(207,181,49)" fg:x="1215" fg:w="3"/><text x="97.9974%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.9083%" y="197" width="0.0805%" height="15" fill="rgb(235,103,47)" fg:x="1217" fg:w="1"/><text x="98.1583%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.9083%" y="181" width="0.0805%" height="15" fill="rgb(222,63,28)" fg:x="1217" fg:w="1"/><text x="98.1583%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="97.9083%" y="165" width="0.0805%" height="15" fill="rgb(244,137,21)" fg:x="1217" fg:w="1"/><text x="98.1583%" y="175.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.9083%" y="149" width="0.0805%" height="15" fill="rgb(228,35,27)" fg:x="1217" fg:w="1"/><text x="98.1583%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.9083%" y="133" width="0.0805%" height="15" fill="rgb(226,191,41)" fg:x="1217" fg:w="1"/><text x="98.1583%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.9083%" y="117" width="0.0805%" height="15" fill="rgb(210,154,3)" fg:x="1217" fg:w="1"/><text x="98.1583%" y="127.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (140 samples, 11.26%)</title><rect x="86.8061%" y="533" width="11.2631%" height="15" fill="rgb(216,60,49)" fg:x="1079" fg:w="140"/><text x="87.0561%" y="543.50">kernel::plugins::..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (140 samples, 11.26%)</title><rect x="86.8061%" y="517" width="11.2631%" height="15" fill="rgb(226,17,20)" fg:x="1079" fg:w="140"/><text x="87.0561%" y="527.50">&lt;plugins_dynlib::..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (140 samples, 11.26%)</title><rect x="86.8061%" y="501" width="11.2631%" height="15" fill="rgb(206,115,35)" fg:x="1079" fg:w="140"/><text x="87.0561%" y="511.50">kernel::plugins::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (139 samples, 11.18%)</title><rect x="86.8866%" y="485" width="11.1826%" height="15" fill="rgb(227,88,1)" fg:x="1080" fg:w="139"/><text x="87.1366%" y="495.50">core::ops::funct..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (139 samples, 11.18%)</title><rect x="86.8866%" y="469" width="11.1826%" height="15" fill="rgb(230,222,24)" fg:x="1080" fg:w="139"/><text x="87.1366%" y="479.50">kernel::plugins:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (139 samples, 11.18%)</title><rect x="86.8866%" y="453" width="11.1826%" height="15" fill="rgb(214,124,32)" fg:x="1080" fg:w="139"/><text x="87.1366%" y="463.50">core::ops::funct..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (139 samples, 11.18%)</title><rect x="86.8866%" y="437" width="11.1826%" height="15" fill="rgb(240,41,36)" fg:x="1080" fg:w="139"/><text x="87.1366%" y="447.50">&lt;alloc::boxed::B..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (139 samples, 11.18%)</title><rect x="86.8866%" y="421" width="11.1826%" height="15" fill="rgb(221,17,52)" fg:x="1080" fg:w="139"/><text x="87.1366%" y="431.50">&lt;engine::session..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (138 samples, 11.10%)</title><rect x="86.9670%" y="405" width="11.1022%" height="15" fill="rgb(252,70,16)" fg:x="1081" fg:w="138"/><text x="87.2170%" y="415.50">&lt;plugins_core::l..</text></g><g><title>plugins_core::looking::model::new_area_observation (137 samples, 11.02%)</title><rect x="87.0475%" y="389" width="11.0217%" height="15" fill="rgb(250,177,4)" fg:x="1082" fg:w="137"/><text x="87.2975%" y="399.50">plugins_core::lo..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.64%)</title><rect x="97.4256%" y="373" width="0.6436%" height="15" fill="rgb(240,188,47)" fg:x="1211" fg:w="8"/><text x="97.6756%" y="383.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (5 samples, 0.40%)</title><rect x="97.6669%" y="357" width="0.4023%" height="15" fill="rgb(215,92,12)" fg:x="1214" fg:w="5"/><text x="97.9169%" y="367.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (5 samples, 0.40%)</title><rect x="97.6669%" y="341" width="0.4023%" height="15" fill="rgb(242,110,29)" fg:x="1214" fg:w="5"/><text x="97.9169%" y="351.50"></text></g><g><title>engine::session::Session::load_entity (5 samples, 0.40%)</title><rect x="97.6669%" y="325" width="0.4023%" height="15" fill="rgb(208,211,26)" fg:x="1214" fg:w="5"/><text x="97.9169%" y="335.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="97.6669%" y="309" width="0.4023%" height="15" fill="rgb(244,147,6)" fg:x="1214" fg:w="5"/><text x="97.9169%" y="319.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="97.9887%" y="293" width="0.0805%" height="15" fill="rgb(211,130,42)" fg:x="1218" fg:w="1"/><text x="98.2387%" y="303.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.0692%" y="485" width="0.0805%" height="15" fill="rgb(220,63,1)" fg:x="1219" fg:w="1"/><text x="98.3192%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="98.0692%" y="469" width="0.0805%" height="15" fill="rgb(241,212,30)" fg:x="1219" fg:w="1"/><text x="98.3192%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.1496%" y="325" width="0.0805%" height="15" fill="rgb(233,153,17)" fg:x="1220" fg:w="1"/><text x="98.3996%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.1496%" y="309" width="0.0805%" height="15" fill="rgb(236,3,10)" fg:x="1220" fg:w="1"/><text x="98.3996%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.1496%" y="293" width="0.0805%" height="15" fill="rgb(232,41,21)" fg:x="1220" fg:w="1"/><text x="98.3996%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.1496%" y="277" width="0.0805%" height="15" fill="rgb(206,63,51)" fg:x="1220" fg:w="1"/><text x="98.3996%" y="287.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="98.1496%" y="261" width="0.0805%" height="15" fill="rgb(250,214,3)" fg:x="1220" fg:w="1"/><text x="98.3996%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.1496%" y="245" width="0.0805%" height="15" fill="rgb(254,89,27)" fg:x="1220" fg:w="1"/><text x="98.3996%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.1496%" y="229" width="0.0805%" height="15" fill="rgb(249,41,14)" fg:x="1220" fg:w="1"/><text x="98.3996%" y="239.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="98.1496%" y="213" width="0.0805%" height="15" fill="rgb(221,196,51)" fg:x="1220" fg:w="1"/><text x="98.3996%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="98.1496%" y="197" width="0.0805%" height="15" fill="rgb(214,116,26)" fg:x="1220" fg:w="1"/><text x="98.3996%" y="207.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="98.1496%" y="421" width="0.1609%" height="15" fill="rgb(236,67,7)" fg:x="1220" fg:w="2"/><text x="98.3996%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.1496%" y="405" width="0.1609%" height="15" fill="rgb(253,179,32)" fg:x="1220" fg:w="2"/><text x="98.3996%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.1496%" y="389" width="0.1609%" height="15" fill="rgb(218,33,15)" fg:x="1220" fg:w="2"/><text x="98.3996%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="98.1496%" y="373" width="0.1609%" height="15" fill="rgb(217,202,41)" fg:x="1220" fg:w="2"/><text x="98.3996%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.1496%" y="357" width="0.1609%" height="15" fill="rgb(234,133,5)" fg:x="1220" fg:w="2"/><text x="98.3996%" y="367.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="98.1496%" y="341" width="0.1609%" height="15" fill="rgb(240,47,40)" fg:x="1220" fg:w="2"/><text x="98.3996%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.2301%" y="325" width="0.0805%" height="15" fill="rgb(234,166,26)" fg:x="1221" fg:w="1"/><text x="98.4801%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.2301%" y="309" width="0.0805%" height="15" fill="rgb(244,125,51)" fg:x="1221" fg:w="1"/><text x="98.4801%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="98.2301%" y="293" width="0.0805%" height="15" fill="rgb(229,171,11)" fg:x="1221" fg:w="1"/><text x="98.4801%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.2301%" y="277" width="0.0805%" height="15" fill="rgb(224,38,45)" fg:x="1221" fg:w="1"/><text x="98.4801%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.2301%" y="261" width="0.0805%" height="15" fill="rgb(237,27,7)" fg:x="1221" fg:w="1"/><text x="98.4801%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.2301%" y="245" width="0.0805%" height="15" fill="rgb(216,52,7)" fg:x="1221" fg:w="1"/><text x="98.4801%" y="255.50"></text></g><g><title>plugins_core::tools::contained_by (4 samples, 0.32%)</title><rect x="98.0692%" y="501" width="0.3218%" height="15" fill="rgb(243,11,11)" fg:x="1219" fg:w="4"/><text x="98.3192%" y="511.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (3 samples, 0.24%)</title><rect x="98.1496%" y="485" width="0.2414%" height="15" fill="rgb(253,167,20)" fg:x="1220" fg:w="3"/><text x="98.3996%" y="495.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (3 samples, 0.24%)</title><rect x="98.1496%" y="469" width="0.2414%" height="15" fill="rgb(215,207,5)" fg:x="1220" fg:w="3"/><text x="98.3996%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (3 samples, 0.24%)</title><rect x="98.1496%" y="453" width="0.2414%" height="15" fill="rgb(252,127,31)" fg:x="1220" fg:w="3"/><text x="98.3996%" y="463.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="98.1496%" y="437" width="0.2414%" height="15" fill="rgb(209,106,27)" fg:x="1220" fg:w="3"/><text x="98.3996%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="98.3105%" y="421" width="0.0805%" height="15" fill="rgb(214,220,18)" fg:x="1222" fg:w="1"/><text x="98.5605%" y="431.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="98.3105%" y="405" width="0.0805%" height="15" fill="rgb(237,89,12)" fg:x="1222" fg:w="1"/><text x="98.5605%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.3105%" y="389" width="0.0805%" height="15" fill="rgb(209,167,36)" fg:x="1222" fg:w="1"/><text x="98.5605%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.3105%" y="373" width="0.0805%" height="15" fill="rgb(243,45,22)" fg:x="1222" fg:w="1"/><text x="98.5605%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.3105%" y="357" width="0.0805%" height="15" fill="rgb(239,2,46)" fg:x="1222" fg:w="1"/><text x="98.5605%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.3105%" y="341" width="0.0805%" height="15" fill="rgb(241,101,0)" fg:x="1222" fg:w="1"/><text x="98.5605%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.3105%" y="325" width="0.0805%" height="15" fill="rgb(244,34,31)" fg:x="1222" fg:w="1"/><text x="98.5605%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.3105%" y="309" width="0.0805%" height="15" fill="rgb(248,23,22)" fg:x="1222" fg:w="1"/><text x="98.5605%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.3105%" y="293" width="0.0805%" height="15" fill="rgb(218,27,48)" fg:x="1222" fg:w="1"/><text x="98.5605%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.3105%" y="277" width="0.0805%" height="15" fill="rgb(232,78,1)" fg:x="1222" fg:w="1"/><text x="98.5605%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.3105%" y="261" width="0.0805%" height="15" fill="rgb(233,169,12)" fg:x="1222" fg:w="1"/><text x="98.5605%" y="271.50"></text></g><g><title>engine::session::Session::captured (152 samples, 12.23%)</title><rect x="86.2430%" y="677" width="12.2285%" height="15" fill="rgb(225,222,54)" fg:x="1072" fg:w="152"/><text x="86.4930%" y="687.50">engine::session::S..</text></g><g><title>engine::session::logs::capture (151 samples, 12.15%)</title><rect x="86.3234%" y="661" width="12.1480%" height="15" fill="rgb(245,126,29)" fg:x="1073" fg:w="151"/><text x="86.5734%" y="671.50">engine::session::l..</text></g><g><title>tracing_core::dispatcher::with_default (150 samples, 12.07%)</title><rect x="86.4039%" y="645" width="12.0676%" height="15" fill="rgb(241,63,48)" fg:x="1074" fg:w="150"/><text x="86.6539%" y="655.50">tracing_core::disp..</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (149 samples, 11.99%)</title><rect x="86.4843%" y="629" width="11.9871%" height="15" fill="rgb(235,126,38)" fg:x="1075" fg:w="149"/><text x="86.7343%" y="639.50">&lt;engine::session::..</text></g><g><title>kernel::plugins::mw::apply_middleware (149 samples, 11.99%)</title><rect x="86.4843%" y="613" width="11.9871%" height="15" fill="rgb(232,96,49)" fg:x="1075" fg:w="149"/><text x="86.7343%" y="623.50">kernel::plugins::m..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (149 samples, 11.99%)</title><rect x="86.4843%" y="597" width="11.9871%" height="15" fill="rgb(211,146,40)" fg:x="1075" fg:w="149"/><text x="86.7343%" y="607.50">kernel::plugins::m..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (149 samples, 11.99%)</title><rect x="86.4843%" y="581" width="11.9871%" height="15" fill="rgb(247,93,44)" fg:x="1075" fg:w="149"/><text x="86.7343%" y="591.50">&lt;engine::session::..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (145 samples, 11.67%)</title><rect x="86.8061%" y="565" width="11.6653%" height="15" fill="rgb(251,41,49)" fg:x="1079" fg:w="145"/><text x="87.0561%" y="575.50">kernel::plugins::..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (145 samples, 11.67%)</title><rect x="86.8061%" y="549" width="11.6653%" height="15" fill="rgb(218,155,12)" fg:x="1079" fg:w="145"/><text x="87.0561%" y="559.50">&lt;plugins_rune::Ru..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (5 samples, 0.40%)</title><rect x="98.0692%" y="533" width="0.4023%" height="15" fill="rgb(221,161,30)" fg:x="1219" fg:w="5"/><text x="98.3192%" y="543.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (5 samples, 0.40%)</title><rect x="98.0692%" y="517" width="0.4023%" height="15" fill="rgb(221,179,11)" fg:x="1219" fg:w="5"/><text x="98.3192%" y="527.50"></text></g><g><title>plugins_core::tools::occupied_by (1 samples, 0.08%)</title><rect x="98.3910%" y="501" width="0.0805%" height="15" fill="rgb(224,170,48)" fg:x="1223" fg:w="1"/><text x="98.6410%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.3910%" y="485" width="0.0805%" height="15" fill="rgb(223,117,5)" fg:x="1223" fg:w="1"/><text x="98.6410%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.3910%" y="469" width="0.0805%" height="15" fill="rgb(209,52,20)" fg:x="1223" fg:w="1"/><text x="98.6410%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.3910%" y="453" width="0.0805%" height="15" fill="rgb(209,19,41)" fg:x="1223" fg:w="1"/><text x="98.6410%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="98.3910%" y="437" width="0.0805%" height="15" fill="rgb(210,177,12)" fg:x="1223" fg:w="1"/><text x="98.6410%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="98.3910%" y="421" width="0.0805%" height="15" fill="rgb(211,159,37)" fg:x="1223" fg:w="1"/><text x="98.6410%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="98.3910%" y="405" width="0.0805%" height="15" fill="rgb(209,20,2)" fg:x="1223" fg:w="1"/><text x="98.6410%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.3910%" y="389" width="0.0805%" height="15" fill="rgb(244,3,46)" fg:x="1223" fg:w="1"/><text x="98.6410%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.3910%" y="373" width="0.0805%" height="15" fill="rgb(220,94,38)" fg:x="1223" fg:w="1"/><text x="98.6410%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.5519%" y="549" width="0.0805%" height="15" fill="rgb(253,14,31)" fg:x="1225" fg:w="1"/><text x="98.8019%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.5519%" y="565" width="0.1609%" height="15" fill="rgb(234,176,13)" fg:x="1225" fg:w="2"/><text x="98.8019%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.6323%" y="549" width="0.0805%" height="15" fill="rgb(218,62,25)" fg:x="1226" fg:w="1"/><text x="98.8823%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.6323%" y="533" width="0.0805%" height="15" fill="rgb(216,124,40)" fg:x="1226" fg:w="1"/><text x="98.8823%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.6323%" y="517" width="0.0805%" height="15" fill="rgb(228,170,12)" fg:x="1226" fg:w="1"/><text x="98.8823%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.6323%" y="501" width="0.0805%" height="15" fill="rgb(231,226,5)" fg:x="1226" fg:w="1"/><text x="98.8823%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.6323%" y="485" width="0.0805%" height="15" fill="rgb(237,122,22)" fg:x="1226" fg:w="1"/><text x="98.8823%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.6323%" y="469" width="0.0805%" height="15" fill="rgb(209,185,25)" fg:x="1226" fg:w="1"/><text x="98.8823%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.6323%" y="453" width="0.0805%" height="15" fill="rgb(228,200,32)" fg:x="1226" fg:w="1"/><text x="98.8823%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.6323%" y="437" width="0.0805%" height="15" fill="rgb(217,140,10)" fg:x="1226" fg:w="1"/><text x="98.8823%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.6323%" y="421" width="0.0805%" height="15" fill="rgb(253,17,24)" fg:x="1226" fg:w="1"/><text x="98.8823%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.6323%" y="405" width="0.0805%" height="15" fill="rgb(212,61,6)" fg:x="1226" fg:w="1"/><text x="98.8823%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.6323%" y="389" width="0.0805%" height="15" fill="rgb(205,14,25)" fg:x="1226" fg:w="1"/><text x="98.8823%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.6323%" y="373" width="0.0805%" height="15" fill="rgb(232,69,41)" fg:x="1226" fg:w="1"/><text x="98.8823%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="98.5519%" y="581" width="0.3218%" height="15" fill="rgb(241,106,47)" fg:x="1225" fg:w="4"/><text x="98.8019%" y="591.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="98.7128%" y="565" width="0.1609%" height="15" fill="rgb(210,213,53)" fg:x="1227" fg:w="2"/><text x="98.9628%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="98.4714%" y="629" width="0.4827%" height="15" fill="rgb(253,175,27)" fg:x="1224" fg:w="6"/><text x="98.7214%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="98.5519%" y="613" width="0.4023%" height="15" fill="rgb(211,171,24)" fg:x="1225" fg:w="5"/><text x="98.8019%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (5 samples, 0.40%)</title><rect x="98.5519%" y="597" width="0.4023%" height="15" fill="rgb(229,80,7)" fg:x="1225" fg:w="5"/><text x="98.8019%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.8737%" y="581" width="0.0805%" height="15" fill="rgb(212,46,39)" fg:x="1229" fg:w="1"/><text x="99.1237%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.8737%" y="565" width="0.0805%" height="15" fill="rgb(240,80,45)" fg:x="1229" fg:w="1"/><text x="99.1237%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.8737%" y="549" width="0.0805%" height="15" fill="rgb(253,177,40)" fg:x="1229" fg:w="1"/><text x="99.1237%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.8737%" y="533" width="0.0805%" height="15" fill="rgb(249,200,15)" fg:x="1229" fg:w="1"/><text x="99.1237%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.8737%" y="517" width="0.0805%" height="15" fill="rgb(217,78,26)" fg:x="1229" fg:w="1"/><text x="99.1237%" y="527.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.8737%" y="501" width="0.0805%" height="15" fill="rgb(254,151,32)" fg:x="1229" fg:w="1"/><text x="99.1237%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.8737%" y="485" width="0.0805%" height="15" fill="rgb(226,165,27)" fg:x="1229" fg:w="1"/><text x="99.1237%" y="495.50"></text></g><g><title>engine::session::internal::Added::find_refs (7 samples, 0.56%)</title><rect x="98.4714%" y="661" width="0.5632%" height="15" fill="rgb(250,206,4)" fg:x="1224" fg:w="7"/><text x="98.7214%" y="671.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (7 samples, 0.56%)</title><rect x="98.4714%" y="645" width="0.5632%" height="15" fill="rgb(231,229,27)" fg:x="1224" fg:w="7"/><text x="98.7214%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.9541%" y="629" width="0.0805%" height="15" fill="rgb(239,217,8)" fg:x="1230" fg:w="1"/><text x="99.2041%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.9541%" y="613" width="0.0805%" height="15" fill="rgb(225,204,27)" fg:x="1230" fg:w="1"/><text x="99.2041%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.9541%" y="597" width="0.0805%" height="15" fill="rgb(230,56,32)" fg:x="1230" fg:w="1"/><text x="99.2041%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="99.0346%" y="645" width="0.0805%" height="15" fill="rgb(222,56,27)" fg:x="1231" fg:w="1"/><text x="99.2846%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.0346%" y="629" width="0.0805%" height="15" fill="rgb(253,108,27)" fg:x="1231" fg:w="1"/><text x="99.2846%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.0346%" y="613" width="0.0805%" height="15" fill="rgb(212,87,36)" fg:x="1231" fg:w="1"/><text x="99.2846%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.0346%" y="597" width="0.0805%" height="15" fill="rgb(247,82,36)" fg:x="1231" fg:w="1"/><text x="99.2846%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.0346%" y="581" width="0.0805%" height="15" fill="rgb(222,143,9)" fg:x="1231" fg:w="1"/><text x="99.2846%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.0346%" y="565" width="0.0805%" height="15" fill="rgb(238,162,48)" fg:x="1231" fg:w="1"/><text x="99.2846%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="99.0346%" y="549" width="0.0805%" height="15" fill="rgb(221,59,43)" fg:x="1231" fg:w="1"/><text x="99.2846%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="99.0346%" y="533" width="0.0805%" height="15" fill="rgb(205,166,41)" fg:x="1231" fg:w="1"/><text x="99.2846%" y="543.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="99.1150%" y="645" width="0.0805%" height="15" fill="rgb(241,186,40)" fg:x="1232" fg:w="1"/><text x="99.3650%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.1150%" y="629" width="0.0805%" height="15" fill="rgb(216,119,35)" fg:x="1232" fg:w="1"/><text x="99.3650%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.1955%" y="549" width="0.0805%" height="15" fill="rgb(208,68,38)" fg:x="1233" fg:w="1"/><text x="99.4455%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.1955%" y="533" width="0.0805%" height="15" fill="rgb(217,113,1)" fg:x="1233" fg:w="1"/><text x="99.4455%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.1955%" y="517" width="0.0805%" height="15" fill="rgb(242,153,3)" fg:x="1233" fg:w="1"/><text x="99.4455%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.1955%" y="501" width="0.0805%" height="15" fill="rgb(229,76,35)" fg:x="1233" fg:w="1"/><text x="99.4455%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.1955%" y="485" width="0.0805%" height="15" fill="rgb(229,125,34)" fg:x="1233" fg:w="1"/><text x="99.4455%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.2759%" y="469" width="0.0805%" height="15" fill="rgb(238,179,36)" fg:x="1234" fg:w="1"/><text x="99.5259%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (12 samples, 0.97%)</title><rect x="98.4714%" y="677" width="0.9654%" height="15" fill="rgb(244,183,19)" fg:x="1224" fg:w="12"/><text x="98.7214%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="99.0346%" y="661" width="0.4023%" height="15" fill="rgb(216,85,49)" fg:x="1231" fg:w="5"/><text x="99.2846%" y="671.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="99.1955%" y="645" width="0.2414%" height="15" fill="rgb(208,161,47)" fg:x="1233" fg:w="3"/><text x="99.4455%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="99.1955%" y="629" width="0.2414%" height="15" fill="rgb(233,210,18)" fg:x="1233" fg:w="3"/><text x="99.4455%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="99.1955%" y="613" width="0.2414%" height="15" fill="rgb(205,104,42)" fg:x="1233" fg:w="3"/><text x="99.4455%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="99.1955%" y="597" width="0.2414%" height="15" fill="rgb(248,90,43)" fg:x="1233" fg:w="3"/><text x="99.4455%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="99.1955%" y="581" width="0.2414%" height="15" fill="rgb(206,198,11)" fg:x="1233" fg:w="3"/><text x="99.4455%" y="591.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="99.1955%" y="565" width="0.2414%" height="15" fill="rgb(239,165,27)" fg:x="1233" fg:w="3"/><text x="99.4455%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.2759%" y="549" width="0.1609%" height="15" fill="rgb(246,44,32)" fg:x="1234" fg:w="2"/><text x="99.5259%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.2759%" y="533" width="0.1609%" height="15" fill="rgb(252,65,42)" fg:x="1234" fg:w="2"/><text x="99.5259%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="99.2759%" y="517" width="0.1609%" height="15" fill="rgb(246,197,18)" fg:x="1234" fg:w="2"/><text x="99.5259%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.2759%" y="501" width="0.1609%" height="15" fill="rgb(216,192,4)" fg:x="1234" fg:w="2"/><text x="99.5259%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.2759%" y="485" width="0.1609%" height="15" fill="rgb(208,117,10)" fg:x="1234" fg:w="2"/><text x="99.5259%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.3564%" y="469" width="0.0805%" height="15" fill="rgb(240,61,47)" fg:x="1235" fg:w="1"/><text x="99.6064%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.3564%" y="453" width="0.0805%" height="15" fill="rgb(228,178,21)" fg:x="1235" fg:w="1"/><text x="99.6064%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3564%" y="437" width="0.0805%" height="15" fill="rgb(219,96,54)" fg:x="1235" fg:w="1"/><text x="99.6064%" y="447.50"></text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="99.4368%" y="677" width="0.0805%" height="15" fill="rgb(250,177,24)" fg:x="1236" fg:w="1"/><text x="99.6868%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="99.4368%" y="661" width="0.0805%" height="15" fill="rgb(242,154,46)" fg:x="1236" fg:w="1"/><text x="99.6868%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.4368%" y="645" width="0.0805%" height="15" fill="rgb(226,176,29)" fg:x="1236" fg:w="1"/><text x="99.6868%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4368%" y="629" width="0.0805%" height="15" fill="rgb(226,29,2)" fg:x="1236" fg:w="1"/><text x="99.6868%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.4368%" y="613" width="0.0805%" height="15" fill="rgb(237,104,14)" fg:x="1236" fg:w="1"/><text x="99.6868%" y="623.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="99.5173%" y="629" width="0.0805%" height="15" fill="rgb(245,207,31)" fg:x="1237" fg:w="1"/><text x="99.7673%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.5173%" y="613" width="0.0805%" height="15" fill="rgb(229,211,45)" fg:x="1237" fg:w="1"/><text x="99.7673%" y="623.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5977%" y="533" width="0.0805%" height="15" fill="rgb(229,113,15)" fg:x="1238" fg:w="1"/><text x="99.8477%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5977%" y="517" width="0.0805%" height="15" fill="rgb(237,147,15)" fg:x="1238" fg:w="1"/><text x="99.8477%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5977%" y="501" width="0.0805%" height="15" fill="rgb(244,120,12)" fg:x="1238" fg:w="1"/><text x="99.8477%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5977%" y="485" width="0.0805%" height="15" fill="rgb(205,120,12)" fg:x="1238" fg:w="1"/><text x="99.8477%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="99.5977%" y="469" width="0.0805%" height="15" fill="rgb(231,26,45)" fg:x="1238" fg:w="1"/><text x="99.8477%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.6782%" y="533" width="0.0805%" height="15" fill="rgb(246,98,1)" fg:x="1239" fg:w="1"/><text x="99.9282%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.6782%" y="517" width="0.0805%" height="15" fill="rgb(207,68,45)" fg:x="1239" fg:w="1"/><text x="99.9282%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="99.5977%" y="629" width="0.2414%" height="15" fill="rgb(231,27,38)" fg:x="1238" fg:w="3"/><text x="99.8477%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="99.5977%" y="613" width="0.2414%" height="15" fill="rgb(214,223,3)" fg:x="1238" fg:w="3"/><text x="99.8477%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="99.5977%" y="597" width="0.2414%" height="15" fill="rgb(228,195,46)" fg:x="1238" fg:w="3"/><text x="99.8477%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="99.5977%" y="581" width="0.2414%" height="15" fill="rgb(231,100,42)" fg:x="1238" fg:w="3"/><text x="99.8477%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="99.5977%" y="565" width="0.2414%" height="15" fill="rgb(236,53,4)" fg:x="1238" fg:w="3"/><text x="99.8477%" y="575.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="99.5977%" y="549" width="0.2414%" height="15" fill="rgb(230,152,12)" fg:x="1238" fg:w="3"/><text x="99.8477%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7586%" y="533" width="0.0805%" height="15" fill="rgb(226,101,19)" fg:x="1240" fg:w="1"/><text x="100.0086%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7586%" y="517" width="0.0805%" height="15" fill="rgb(250,149,32)" fg:x="1240" fg:w="1"/><text x="100.0086%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.7586%" y="501" width="0.0805%" height="15" fill="rgb(232,178,12)" fg:x="1240" fg:w="1"/><text x="100.0086%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7586%" y="485" width="0.0805%" height="15" fill="rgb(246,151,17)" fg:x="1240" fg:w="1"/><text x="100.0086%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7586%" y="469" width="0.0805%" height="15" fill="rgb(252,17,51)" fg:x="1240" fg:w="1"/><text x="100.0086%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.7586%" y="453" width="0.0805%" height="15" fill="rgb(250,207,23)" fg:x="1240" fg:w="1"/><text x="100.0086%" y="463.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (170 samples, 13.68%)</title><rect x="86.2430%" y="709" width="13.6766%" height="15" fill="rgb(205,27,5)" fg:x="1072" fg:w="170"/><text x="86.4930%" y="719.50">engine::session::Sess..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (170 samples, 13.68%)</title><rect x="86.2430%" y="693" width="13.6766%" height="15" fill="rgb(224,32,19)" fg:x="1072" fg:w="170"/><text x="86.4930%" y="703.50">engine::session::Sess..</text></g><g><title>kernel::model::EntityPtrResolver::world (5 samples, 0.40%)</title><rect x="99.5173%" y="677" width="0.4023%" height="15" fill="rgb(247,214,40)" fg:x="1237" fg:w="5"/><text x="99.7673%" y="687.50"></text></g><g><title>engine::session::Session::load_entity (5 samples, 0.40%)</title><rect x="99.5173%" y="661" width="0.4023%" height="15" fill="rgb(239,199,17)" fg:x="1237" fg:w="5"/><text x="99.7673%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="99.5173%" y="645" width="0.4023%" height="15" fill="rgb(251,159,9)" fg:x="1237" fg:w="5"/><text x="99.7673%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="99.8391%" y="629" width="0.0805%" height="15" fill="rgb(225,78,32)" fg:x="1241" fg:w="1"/><text x="100.0891%" y="639.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.8391%" y="613" width="0.0805%" height="15" fill="rgb(206,97,47)" fg:x="1241" fg:w="1"/><text x="100.0891%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8391%" y="597" width="0.0805%" height="15" fill="rgb(227,107,4)" fg:x="1241" fg:w="1"/><text x="100.0891%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8391%" y="581" width="0.0805%" height="15" fill="rgb(241,146,50)" fg:x="1241" fg:w="1"/><text x="100.0891%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8391%" y="565" width="0.0805%" height="15" fill="rgb(232,92,30)" fg:x="1241" fg:w="1"/><text x="100.0891%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8391%" y="549" width="0.0805%" height="15" fill="rgb(222,0,40)" fg:x="1241" fg:w="1"/><text x="100.0891%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.8391%" y="533" width="0.0805%" height="15" fill="rgb(219,54,33)" fg:x="1241" fg:w="1"/><text x="100.0891%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.8391%" y="517" width="0.0805%" height="15" fill="rgb(226,209,28)" fg:x="1241" fg:w="1"/><text x="100.0891%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.8391%" y="501" width="0.0805%" height="15" fill="rgb(254,205,35)" fg:x="1241" fg:w="1"/><text x="100.0891%" y="511.50"></text></g><g><title>all (1,243 samples, 100%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(230,159,3)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="1071.50"></text></g><g><title>simple-e505a893 (1,243 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(232,190,24)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="1055.50">simple-e505a893</text></g><g><title>_start (1,243 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(217,227,44)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="1039.50">_start</text></g><g><title>__libc_start_main (1,243 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(236,211,1)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="1023.50">__libc_start_main</text></g><g><title>main (1,243 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(250,127,46)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="1007.50">main</text></g><g><title>std::rt::lang_start_internal (1,243 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(229,213,6)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="991.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,243 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(237,15,36)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="975.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,243 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(213,131,41)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="959.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,243 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(225,82,44)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="943.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,243 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(249,42,11)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="927.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,243 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(253,11,29)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="911.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,243 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(206,8,54)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="895.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,243 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(222,186,2)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="879.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,243 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(221,206,53)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="863.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,243 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(230,150,21)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="847.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,243 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(253,202,10)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="831.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,243 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(238,109,40)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="815.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,243 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(247,120,22)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="799.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,243 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(207,43,30)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="783.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (318 samples, 25.58%)</title><rect x="74.4167%" y="757" width="25.5833%" height="15" fill="rgb(213,211,24)" fg:x="925" fg:w="318"/><text x="74.6667%" y="767.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as c..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (318 samples, 25.58%)</title><rect x="74.4167%" y="741" width="25.5833%" height="15" fill="rgb(239,73,39)" fg:x="925" fg:w="318"/><text x="74.6667%" y="751.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (318 samples, 25.58%)</title><rect x="74.4167%" y="725" width="25.5833%" height="15" fill="rgb(245,182,19)" fg:x="925" fg:w="318"/><text x="74.6667%" y="735.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="99.9195%" y="709" width="0.0805%" height="15" fill="rgb(247,143,26)" fg:x="1242" fg:w="1"/><text x="100.1695%" y="719.50"></text></g></svg></svg>