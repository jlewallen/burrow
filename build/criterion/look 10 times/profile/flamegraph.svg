<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1030" onload="init(evt)" viewBox="0 0 1200 1030" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1030" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1013.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1013.00"> </text><svg id="frames" x="10" width="1180" total_samples="1214"><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.0824%" y="517" width="0.0824%" height="15" fill="rgb(211,91,47)" fg:x="1" fg:w="1"/><text x="0.3324%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0824%" y="501" width="0.0824%" height="15" fill="rgb(242,88,51)" fg:x="1" fg:w="1"/><text x="0.3324%" y="511.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.25%)</title><rect x="0.0000%" y="629" width="0.2471%" height="15" fill="rgb(230,91,28)" fg:x="0" fg:w="3"/><text x="0.2500%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (3 samples, 0.25%)</title><rect x="0.0000%" y="613" width="0.2471%" height="15" fill="rgb(254,186,29)" fg:x="0" fg:w="3"/><text x="0.2500%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.25%)</title><rect x="0.0000%" y="597" width="0.2471%" height="15" fill="rgb(238,6,4)" fg:x="0" fg:w="3"/><text x="0.2500%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (3 samples, 0.25%)</title><rect x="0.0000%" y="581" width="0.2471%" height="15" fill="rgb(221,151,16)" fg:x="0" fg:w="3"/><text x="0.2500%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.25%)</title><rect x="0.0000%" y="565" width="0.2471%" height="15" fill="rgb(251,143,52)" fg:x="0" fg:w="3"/><text x="0.2500%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.25%)</title><rect x="0.0000%" y="549" width="0.2471%" height="15" fill="rgb(206,90,15)" fg:x="0" fg:w="3"/><text x="0.2500%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.25%)</title><rect x="0.0000%" y="533" width="0.2471%" height="15" fill="rgb(218,35,8)" fg:x="0" fg:w="3"/><text x="0.2500%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.1647%" y="517" width="0.0824%" height="15" fill="rgb(239,215,6)" fg:x="2" fg:w="1"/><text x="0.4147%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.1647%" y="501" width="0.0824%" height="15" fill="rgb(245,116,39)" fg:x="2" fg:w="1"/><text x="0.4147%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.1647%" y="485" width="0.0824%" height="15" fill="rgb(242,65,28)" fg:x="2" fg:w="1"/><text x="0.4147%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.1647%" y="469" width="0.0824%" height="15" fill="rgb(252,132,53)" fg:x="2" fg:w="1"/><text x="0.4147%" y="479.50"></text></g><g><title>dlopen (8 samples, 0.66%)</title><rect x="0.3295%" y="533" width="0.6590%" height="15" fill="rgb(224,159,50)" fg:x="4" fg:w="8"/><text x="0.5795%" y="543.50"></text></g><g><title>_dl_catch_error (8 samples, 0.66%)</title><rect x="0.3295%" y="517" width="0.6590%" height="15" fill="rgb(224,93,4)" fg:x="4" fg:w="8"/><text x="0.5795%" y="527.50"></text></g><g><title>_dl_catch_exception (8 samples, 0.66%)</title><rect x="0.3295%" y="501" width="0.6590%" height="15" fill="rgb(208,81,34)" fg:x="4" fg:w="8"/><text x="0.5795%" y="511.50"></text></g><g><title>_dl_catch_exception (8 samples, 0.66%)</title><rect x="0.3295%" y="485" width="0.6590%" height="15" fill="rgb(233,92,54)" fg:x="4" fg:w="8"/><text x="0.5795%" y="495.50"></text></g><g><title>_dl_catch_exception (8 samples, 0.66%)</title><rect x="0.3295%" y="469" width="0.6590%" height="15" fill="rgb(237,21,14)" fg:x="4" fg:w="8"/><text x="0.5795%" y="479.50"></text></g><g><title>_dl_find_dso_for_object (1 samples, 0.08%)</title><rect x="0.9061%" y="453" width="0.0824%" height="15" fill="rgb(249,128,51)" fg:x="11" fg:w="1"/><text x="1.1561%" y="463.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (10 samples, 0.82%)</title><rect x="0.2471%" y="565" width="0.8237%" height="15" fill="rgb(223,129,24)" fg:x="3" fg:w="10"/><text x="0.4971%" y="575.50"></text></g><g><title>libloading::safe::Library::new (9 samples, 0.74%)</title><rect x="0.3295%" y="549" width="0.7414%" height="15" fill="rgb(231,168,25)" fg:x="4" fg:w="9"/><text x="0.5795%" y="559.50"></text></g><g><title>libloading::util::cstr_cow_from_bytes (1 samples, 0.08%)</title><rect x="0.9885%" y="533" width="0.0824%" height="15" fill="rgb(224,39,20)" fg:x="12" fg:w="1"/><text x="1.2385%" y="543.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (11 samples, 0.91%)</title><rect x="0.2471%" y="581" width="0.9061%" height="15" fill="rgb(225,152,53)" fg:x="3" fg:w="11"/><text x="0.4971%" y="591.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="1.0708%" y="565" width="0.0824%" height="15" fill="rgb(252,17,24)" fg:x="13" fg:w="1"/><text x="1.3208%" y="575.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="1.0708%" y="549" width="0.0824%" height="15" fill="rgb(250,114,30)" fg:x="13" fg:w="1"/><text x="1.3208%" y="559.50"></text></g><g><title>engine::session::Session::initialize (12 samples, 0.99%)</title><rect x="0.2471%" y="597" width="0.9885%" height="15" fill="rgb(229,5,4)" fg:x="3" fg:w="12"/><text x="0.4971%" y="607.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="1.1532%" y="581" width="0.0824%" height="15" fill="rgb(225,176,49)" fg:x="14" fg:w="1"/><text x="1.4032%" y="591.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="1.1532%" y="565" width="0.0824%" height="15" fill="rgb(224,221,49)" fg:x="14" fg:w="1"/><text x="1.4032%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="1.1532%" y="549" width="0.0824%" height="15" fill="rgb(253,169,27)" fg:x="14" fg:w="1"/><text x="1.4032%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.1532%" y="533" width="0.0824%" height="15" fill="rgb(211,206,16)" fg:x="14" fg:w="1"/><text x="1.4032%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.1532%" y="517" width="0.0824%" height="15" fill="rgb(244,87,35)" fg:x="14" fg:w="1"/><text x="1.4032%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="1.1532%" y="501" width="0.0824%" height="15" fill="rgb(246,28,10)" fg:x="14" fg:w="1"/><text x="1.4032%" y="511.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (13 samples, 1.07%)</title><rect x="0.2471%" y="629" width="1.0708%" height="15" fill="rgb(229,12,44)" fg:x="3" fg:w="13"/><text x="0.4971%" y="639.50"></text></g><g><title>engine::session::Session::new (13 samples, 1.07%)</title><rect x="0.2471%" y="613" width="1.0708%" height="15" fill="rgb(210,145,37)" fg:x="3" fg:w="13"/><text x="0.4971%" y="623.50"></text></g><g><title>kernel::plugins::SessionPlugins::hooks (1 samples, 0.08%)</title><rect x="1.2356%" y="597" width="0.0824%" height="15" fill="rgb(227,112,52)" fg:x="15" fg:w="1"/><text x="1.4856%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="1.3180%" y="549" width="0.0824%" height="15" fill="rgb(238,155,34)" fg:x="16" fg:w="1"/><text x="1.5680%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.3180%" y="533" width="0.0824%" height="15" fill="rgb(239,226,36)" fg:x="16" fg:w="1"/><text x="1.5680%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="1.3180%" y="517" width="0.0824%" height="15" fill="rgb(230,16,23)" fg:x="16" fg:w="1"/><text x="1.5680%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="1.4003%" y="517" width="0.0824%" height="15" fill="rgb(236,171,36)" fg:x="17" fg:w="1"/><text x="1.6503%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.4003%" y="501" width="0.0824%" height="15" fill="rgb(221,22,14)" fg:x="17" fg:w="1"/><text x="1.6503%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.4003%" y="485" width="0.0824%" height="15" fill="rgb(242,43,11)" fg:x="17" fg:w="1"/><text x="1.6503%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.4003%" y="469" width="0.0824%" height="15" fill="rgb(232,69,23)" fg:x="17" fg:w="1"/><text x="1.6503%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.4003%" y="453" width="0.0824%" height="15" fill="rgb(216,180,54)" fg:x="17" fg:w="1"/><text x="1.6503%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.4003%" y="437" width="0.0824%" height="15" fill="rgb(216,5,24)" fg:x="17" fg:w="1"/><text x="1.6503%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.4003%" y="421" width="0.0824%" height="15" fill="rgb(225,89,9)" fg:x="17" fg:w="1"/><text x="1.6503%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="1.4003%" y="405" width="0.0824%" height="15" fill="rgb(243,75,33)" fg:x="17" fg:w="1"/><text x="1.6503%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.4827%" y="501" width="0.0824%" height="15" fill="rgb(247,141,45)" fg:x="18" fg:w="1"/><text x="1.7327%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.4827%" y="485" width="0.0824%" height="15" fill="rgb(232,177,36)" fg:x="18" fg:w="1"/><text x="1.7327%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.4827%" y="469" width="0.0824%" height="15" fill="rgb(219,125,36)" fg:x="18" fg:w="1"/><text x="1.7327%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="1.5651%" y="485" width="0.1647%" height="15" fill="rgb(227,94,9)" fg:x="19" fg:w="2"/><text x="1.8151%" y="495.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="1.5651%" y="469" width="0.1647%" height="15" fill="rgb(240,34,52)" fg:x="19" fg:w="2"/><text x="1.8151%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.6474%" y="453" width="0.0824%" height="15" fill="rgb(216,45,12)" fg:x="20" fg:w="1"/><text x="1.8974%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="1.7298%" y="469" width="0.0824%" height="15" fill="rgb(246,21,19)" fg:x="21" fg:w="1"/><text x="1.9798%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.8122%" y="453" width="0.0824%" height="15" fill="rgb(213,98,42)" fg:x="22" fg:w="1"/><text x="2.0622%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.8946%" y="389" width="0.0824%" height="15" fill="rgb(250,136,47)" fg:x="23" fg:w="1"/><text x="2.1446%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="1.8946%" y="437" width="0.1647%" height="15" fill="rgb(251,124,27)" fg:x="23" fg:w="2"/><text x="2.1446%" y="447.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="1.8946%" y="421" width="0.1647%" height="15" fill="rgb(229,180,14)" fg:x="23" fg:w="2"/><text x="2.1446%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="1.8946%" y="405" width="0.1647%" height="15" fill="rgb(245,216,25)" fg:x="23" fg:w="2"/><text x="2.1446%" y="415.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="1.9769%" y="389" width="0.0824%" height="15" fill="rgb(251,43,5)" fg:x="24" fg:w="1"/><text x="2.2269%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.66%)</title><rect x="1.4827%" y="517" width="0.6590%" height="15" fill="rgb(250,128,24)" fg:x="18" fg:w="8"/><text x="1.7327%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.58%)</title><rect x="1.5651%" y="501" width="0.5766%" height="15" fill="rgb(217,117,27)" fg:x="19" fg:w="7"/><text x="1.8151%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="1.7298%" y="485" width="0.4119%" height="15" fill="rgb(245,147,4)" fg:x="21" fg:w="5"/><text x="1.9798%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="1.8122%" y="469" width="0.3295%" height="15" fill="rgb(242,201,35)" fg:x="22" fg:w="4"/><text x="2.0622%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.25%)</title><rect x="1.8946%" y="453" width="0.2471%" height="15" fill="rgb(218,181,1)" fg:x="23" fg:w="3"/><text x="2.1446%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.0593%" y="437" width="0.0824%" height="15" fill="rgb(222,6,29)" fg:x="25" fg:w="1"/><text x="2.3093%" y="447.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.82%)</title><rect x="1.4003%" y="533" width="0.8237%" height="15" fill="rgb(208,186,3)" fg:x="17" fg:w="10"/><text x="1.6503%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.1417%" y="517" width="0.0824%" height="15" fill="rgb(216,36,26)" fg:x="26" fg:w="1"/><text x="2.3917%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.1417%" y="501" width="0.0824%" height="15" fill="rgb(248,201,23)" fg:x="26" fg:w="1"/><text x="2.3917%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.1417%" y="485" width="0.0824%" height="15" fill="rgb(251,170,31)" fg:x="26" fg:w="1"/><text x="2.3917%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.2241%" y="485" width="0.0824%" height="15" fill="rgb(207,110,25)" fg:x="27" fg:w="1"/><text x="2.4741%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.2241%" y="533" width="0.1647%" height="15" fill="rgb(250,54,15)" fg:x="27" fg:w="2"/><text x="2.4741%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="2.2241%" y="517" width="0.1647%" height="15" fill="rgb(227,68,33)" fg:x="27" fg:w="2"/><text x="2.4741%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.2241%" y="501" width="0.1647%" height="15" fill="rgb(238,34,41)" fg:x="27" fg:w="2"/><text x="2.4741%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.3064%" y="485" width="0.0824%" height="15" fill="rgb(220,11,15)" fg:x="28" fg:w="1"/><text x="2.5564%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.3064%" y="469" width="0.0824%" height="15" fill="rgb(246,111,35)" fg:x="28" fg:w="1"/><text x="2.5564%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.3888%" y="485" width="0.0824%" height="15" fill="rgb(209,88,53)" fg:x="29" fg:w="1"/><text x="2.6388%" y="495.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="2.4712%" y="485" width="0.0824%" height="15" fill="rgb(231,185,47)" fg:x="30" fg:w="1"/><text x="2.7212%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.4712%" y="469" width="0.0824%" height="15" fill="rgb(233,154,1)" fg:x="30" fg:w="1"/><text x="2.7212%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="2.5535%" y="437" width="0.0824%" height="15" fill="rgb(225,15,46)" fg:x="31" fg:w="1"/><text x="2.8035%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.5535%" y="421" width="0.0824%" height="15" fill="rgb(211,135,41)" fg:x="31" fg:w="1"/><text x="2.8035%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.5535%" y="405" width="0.0824%" height="15" fill="rgb(208,54,0)" fg:x="31" fg:w="1"/><text x="2.8035%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.5535%" y="389" width="0.0824%" height="15" fill="rgb(244,136,14)" fg:x="31" fg:w="1"/><text x="2.8035%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.5535%" y="373" width="0.0824%" height="15" fill="rgb(241,56,14)" fg:x="31" fg:w="1"/><text x="2.8035%" y="383.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="2.5535%" y="357" width="0.0824%" height="15" fill="rgb(205,80,24)" fg:x="31" fg:w="1"/><text x="2.8035%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="2.5535%" y="469" width="0.1647%" height="15" fill="rgb(220,57,4)" fg:x="31" fg:w="2"/><text x="2.8035%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="2.5535%" y="453" width="0.1647%" height="15" fill="rgb(226,193,50)" fg:x="31" fg:w="2"/><text x="2.8035%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.6359%" y="437" width="0.0824%" height="15" fill="rgb(231,168,22)" fg:x="32" fg:w="1"/><text x="2.8859%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.6359%" y="421" width="0.0824%" height="15" fill="rgb(254,215,14)" fg:x="32" fg:w="1"/><text x="2.8859%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.6359%" y="405" width="0.0824%" height="15" fill="rgb(211,115,16)" fg:x="32" fg:w="1"/><text x="2.8859%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.6359%" y="389" width="0.0824%" height="15" fill="rgb(236,210,16)" fg:x="32" fg:w="1"/><text x="2.8859%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.6359%" y="373" width="0.0824%" height="15" fill="rgb(221,94,12)" fg:x="32" fg:w="1"/><text x="2.8859%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.6359%" y="357" width="0.0824%" height="15" fill="rgb(235,218,49)" fg:x="32" fg:w="1"/><text x="2.8859%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.6359%" y="341" width="0.0824%" height="15" fill="rgb(217,114,14)" fg:x="32" fg:w="1"/><text x="2.8859%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.6359%" y="325" width="0.0824%" height="15" fill="rgb(216,145,22)" fg:x="32" fg:w="1"/><text x="2.8859%" y="335.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.6359%" y="309" width="0.0824%" height="15" fill="rgb(217,112,39)" fg:x="32" fg:w="1"/><text x="2.8859%" y="319.50"></text></g><g><title>engine::session::Session::flush (18 samples, 1.48%)</title><rect x="1.3180%" y="613" width="1.4827%" height="15" fill="rgb(225,85,32)" fg:x="16" fg:w="18"/><text x="1.5680%" y="623.50"></text></g><g><title>engine::session::state::State::close (18 samples, 1.48%)</title><rect x="1.3180%" y="597" width="1.4827%" height="15" fill="rgb(245,209,47)" fg:x="16" fg:w="18"/><text x="1.5680%" y="607.50"></text></g><g><title>engine::session::state::State::flush_entities (18 samples, 1.48%)</title><rect x="1.3180%" y="581" width="1.4827%" height="15" fill="rgb(218,220,15)" fg:x="16" fg:w="18"/><text x="1.5680%" y="591.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (18 samples, 1.48%)</title><rect x="1.3180%" y="565" width="1.4827%" height="15" fill="rgb(222,202,31)" fg:x="16" fg:w="18"/><text x="1.5680%" y="575.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (17 samples, 1.40%)</title><rect x="1.4003%" y="549" width="1.4003%" height="15" fill="rgb(243,203,4)" fg:x="17" fg:w="17"/><text x="1.6503%" y="559.50"></text></g><g><title>kernel::model::any_entity_changes (5 samples, 0.41%)</title><rect x="2.3888%" y="533" width="0.4119%" height="15" fill="rgb(237,92,17)" fg:x="29" fg:w="5"/><text x="2.6388%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.41%)</title><rect x="2.3888%" y="517" width="0.4119%" height="15" fill="rgb(231,119,7)" fg:x="29" fg:w="5"/><text x="2.6388%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.41%)</title><rect x="2.3888%" y="501" width="0.4119%" height="15" fill="rgb(237,82,41)" fg:x="29" fg:w="5"/><text x="2.6388%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.25%)</title><rect x="2.5535%" y="485" width="0.2471%" height="15" fill="rgb(226,81,48)" fg:x="31" fg:w="3"/><text x="2.8035%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.7183%" y="469" width="0.0824%" height="15" fill="rgb(234,70,51)" fg:x="33" fg:w="1"/><text x="2.9683%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.7183%" y="453" width="0.0824%" height="15" fill="rgb(251,86,4)" fg:x="33" fg:w="1"/><text x="2.9683%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.8007%" y="549" width="0.0824%" height="15" fill="rgb(244,144,28)" fg:x="34" fg:w="1"/><text x="3.0507%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="2.8830%" y="533" width="0.0824%" height="15" fill="rgb(232,161,39)" fg:x="35" fg:w="1"/><text x="3.1330%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="2.8830%" y="517" width="0.0824%" height="15" fill="rgb(247,34,51)" fg:x="35" fg:w="1"/><text x="3.1330%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.8830%" y="501" width="0.0824%" height="15" fill="rgb(225,132,2)" fg:x="35" fg:w="1"/><text x="3.1330%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.8830%" y="485" width="0.0824%" height="15" fill="rgb(209,159,44)" fg:x="35" fg:w="1"/><text x="3.1330%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.8830%" y="469" width="0.0824%" height="15" fill="rgb(251,214,1)" fg:x="35" fg:w="1"/><text x="3.1330%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.8830%" y="453" width="0.0824%" height="15" fill="rgb(247,84,47)" fg:x="35" fg:w="1"/><text x="3.1330%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="2.8830%" y="437" width="0.0824%" height="15" fill="rgb(240,111,43)" fg:x="35" fg:w="1"/><text x="3.1330%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.8830%" y="421" width="0.0824%" height="15" fill="rgb(215,214,35)" fg:x="35" fg:w="1"/><text x="3.1330%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.8830%" y="405" width="0.0824%" height="15" fill="rgb(248,207,23)" fg:x="35" fg:w="1"/><text x="3.1330%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.8830%" y="389" width="0.0824%" height="15" fill="rgb(214,186,4)" fg:x="35" fg:w="1"/><text x="3.1330%" y="399.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.8830%" y="373" width="0.0824%" height="15" fill="rgb(220,133,22)" fg:x="35" fg:w="1"/><text x="3.1330%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.8830%" y="357" width="0.0824%" height="15" fill="rgb(239,134,19)" fg:x="35" fg:w="1"/><text x="3.1330%" y="367.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.25%)</title><rect x="2.8007%" y="565" width="0.2471%" height="15" fill="rgb(250,140,9)" fg:x="34" fg:w="3"/><text x="3.0507%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="2.8830%" y="549" width="0.1647%" height="15" fill="rgb(225,59,14)" fg:x="35" fg:w="2"/><text x="3.1330%" y="559.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="2.9654%" y="533" width="0.0824%" height="15" fill="rgb(214,152,51)" fg:x="36" fg:w="1"/><text x="3.2154%" y="543.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="2.9654%" y="517" width="0.0824%" height="15" fill="rgb(251,227,43)" fg:x="36" fg:w="1"/><text x="3.2154%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="2.9654%" y="501" width="0.0824%" height="15" fill="rgb(241,96,17)" fg:x="36" fg:w="1"/><text x="3.2154%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.9654%" y="485" width="0.0824%" height="15" fill="rgb(234,198,43)" fg:x="36" fg:w="1"/><text x="3.2154%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="2.9654%" y="469" width="0.0824%" height="15" fill="rgb(220,108,29)" fg:x="36" fg:w="1"/><text x="3.2154%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.9654%" y="453" width="0.0824%" height="15" fill="rgb(226,163,33)" fg:x="36" fg:w="1"/><text x="3.2154%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="2.9654%" y="437" width="0.0824%" height="15" fill="rgb(205,194,45)" fg:x="36" fg:w="1"/><text x="3.2154%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.9654%" y="421" width="0.0824%" height="15" fill="rgb(206,143,44)" fg:x="36" fg:w="1"/><text x="3.2154%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.49%)</title><rect x="2.8007%" y="597" width="0.4942%" height="15" fill="rgb(236,136,36)" fg:x="34" fg:w="6"/><text x="3.0507%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (6 samples, 0.49%)</title><rect x="2.8007%" y="581" width="0.4942%" height="15" fill="rgb(249,172,42)" fg:x="34" fg:w="6"/><text x="3.0507%" y="591.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (3 samples, 0.25%)</title><rect x="3.0478%" y="565" width="0.2471%" height="15" fill="rgb(216,139,23)" fg:x="37" fg:w="3"/><text x="3.2978%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.25%)</title><rect x="3.0478%" y="549" width="0.2471%" height="15" fill="rgb(207,166,20)" fg:x="37" fg:w="3"/><text x="3.2978%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (3 samples, 0.25%)</title><rect x="3.0478%" y="533" width="0.2471%" height="15" fill="rgb(210,209,22)" fg:x="37" fg:w="3"/><text x="3.2978%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.25%)</title><rect x="3.0478%" y="517" width="0.2471%" height="15" fill="rgb(232,118,20)" fg:x="37" fg:w="3"/><text x="3.2978%" y="527.50"></text></g><g><title>__libc_malloc (3 samples, 0.25%)</title><rect x="3.0478%" y="501" width="0.2471%" height="15" fill="rgb(238,113,42)" fg:x="37" fg:w="3"/><text x="3.2978%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.2949%" y="549" width="0.0824%" height="15" fill="rgb(231,42,5)" fg:x="40" fg:w="1"/><text x="3.5449%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.2949%" y="533" width="0.0824%" height="15" fill="rgb(243,166,24)" fg:x="40" fg:w="1"/><text x="3.5449%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.2949%" y="517" width="0.0824%" height="15" fill="rgb(237,226,12)" fg:x="40" fg:w="1"/><text x="3.5449%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.2949%" y="501" width="0.0824%" height="15" fill="rgb(229,133,24)" fg:x="40" fg:w="1"/><text x="3.5449%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="3.2949%" y="485" width="0.0824%" height="15" fill="rgb(238,33,43)" fg:x="40" fg:w="1"/><text x="3.5449%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.2949%" y="469" width="0.0824%" height="15" fill="rgb(227,59,38)" fg:x="40" fg:w="1"/><text x="3.5449%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="3.2949%" y="453" width="0.0824%" height="15" fill="rgb(230,97,0)" fg:x="40" fg:w="1"/><text x="3.5449%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.2949%" y="437" width="0.0824%" height="15" fill="rgb(250,173,50)" fg:x="40" fg:w="1"/><text x="3.5449%" y="447.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="3.2949%" y="581" width="0.1647%" height="15" fill="rgb(240,15,50)" fg:x="40" fg:w="2"/><text x="3.5449%" y="591.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="3.2949%" y="565" width="0.1647%" height="15" fill="rgb(221,93,22)" fg:x="40" fg:w="2"/><text x="3.5449%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="3.3773%" y="549" width="0.0824%" height="15" fill="rgb(245,180,53)" fg:x="41" fg:w="1"/><text x="3.6273%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.3773%" y="533" width="0.0824%" height="15" fill="rgb(231,88,51)" fg:x="41" fg:w="1"/><text x="3.6273%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.3773%" y="517" width="0.0824%" height="15" fill="rgb(240,58,21)" fg:x="41" fg:w="1"/><text x="3.6273%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.3773%" y="501" width="0.0824%" height="15" fill="rgb(237,21,10)" fg:x="41" fg:w="1"/><text x="3.6273%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="3.3773%" y="485" width="0.0824%" height="15" fill="rgb(218,43,11)" fg:x="41" fg:w="1"/><text x="3.6273%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.3773%" y="469" width="0.0824%" height="15" fill="rgb(218,221,29)" fg:x="41" fg:w="1"/><text x="3.6273%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.3773%" y="453" width="0.0824%" height="15" fill="rgb(214,118,42)" fg:x="41" fg:w="1"/><text x="3.6273%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.3773%" y="437" width="0.0824%" height="15" fill="rgb(251,200,26)" fg:x="41" fg:w="1"/><text x="3.6273%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="3.3773%" y="421" width="0.0824%" height="15" fill="rgb(237,101,39)" fg:x="41" fg:w="1"/><text x="3.6273%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.3773%" y="405" width="0.0824%" height="15" fill="rgb(251,117,11)" fg:x="41" fg:w="1"/><text x="3.6273%" y="415.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.4596%" y="581" width="0.0824%" height="15" fill="rgb(216,223,23)" fg:x="42" fg:w="1"/><text x="3.7096%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.5420%" y="485" width="0.0824%" height="15" fill="rgb(251,54,12)" fg:x="43" fg:w="1"/><text x="3.7920%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.5420%" y="469" width="0.0824%" height="15" fill="rgb(254,176,54)" fg:x="43" fg:w="1"/><text x="3.7920%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.5420%" y="453" width="0.0824%" height="15" fill="rgb(210,32,8)" fg:x="43" fg:w="1"/><text x="3.7920%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.5420%" y="437" width="0.0824%" height="15" fill="rgb(235,52,38)" fg:x="43" fg:w="1"/><text x="3.7920%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="3.5420%" y="533" width="0.1647%" height="15" fill="rgb(231,4,44)" fg:x="43" fg:w="2"/><text x="3.7920%" y="543.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="3.5420%" y="517" width="0.1647%" height="15" fill="rgb(249,2,32)" fg:x="43" fg:w="2"/><text x="3.7920%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="3.5420%" y="501" width="0.1647%" height="15" fill="rgb(224,65,26)" fg:x="43" fg:w="2"/><text x="3.7920%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.6244%" y="485" width="0.0824%" height="15" fill="rgb(250,73,40)" fg:x="44" fg:w="1"/><text x="3.8744%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.6244%" y="469" width="0.0824%" height="15" fill="rgb(253,177,16)" fg:x="44" fg:w="1"/><text x="3.8744%" y="479.50"></text></g><g><title>plugins_core::build::Build::holding (12 samples, 0.99%)</title><rect x="2.8007%" y="613" width="0.9885%" height="15" fill="rgb(217,32,34)" fg:x="34" fg:w="12"/><text x="3.0507%" y="623.50"></text></g><g><title>plugins_core::tools::set_container (6 samples, 0.49%)</title><rect x="3.2949%" y="597" width="0.4942%" height="15" fill="rgb(212,7,10)" fg:x="40" fg:w="6"/><text x="3.5449%" y="607.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.25%)</title><rect x="3.5420%" y="581" width="0.2471%" height="15" fill="rgb(245,89,8)" fg:x="43" fg:w="3"/><text x="3.7920%" y="591.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (3 samples, 0.25%)</title><rect x="3.5420%" y="565" width="0.2471%" height="15" fill="rgb(237,16,53)" fg:x="43" fg:w="3"/><text x="3.7920%" y="575.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.25%)</title><rect x="3.5420%" y="549" width="0.2471%" height="15" fill="rgb(250,204,30)" fg:x="43" fg:w="3"/><text x="3.7920%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="3.7068%" y="533" width="0.0824%" height="15" fill="rgb(208,77,27)" fg:x="45" fg:w="1"/><text x="3.9568%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.7068%" y="517" width="0.0824%" height="15" fill="rgb(250,204,28)" fg:x="45" fg:w="1"/><text x="3.9568%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.7068%" y="501" width="0.0824%" height="15" fill="rgb(244,63,21)" fg:x="45" fg:w="1"/><text x="3.9568%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.7068%" y="485" width="0.0824%" height="15" fill="rgb(236,85,44)" fg:x="45" fg:w="1"/><text x="3.9568%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.7068%" y="469" width="0.0824%" height="15" fill="rgb(215,98,4)" fg:x="45" fg:w="1"/><text x="3.9568%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.7068%" y="453" width="0.0824%" height="15" fill="rgb(235,38,11)" fg:x="45" fg:w="1"/><text x="3.9568%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.7068%" y="437" width="0.0824%" height="15" fill="rgb(254,186,25)" fg:x="45" fg:w="1"/><text x="3.9568%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.7068%" y="421" width="0.0824%" height="15" fill="rgb(225,55,31)" fg:x="45" fg:w="1"/><text x="3.9568%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="3.7891%" y="581" width="0.0824%" height="15" fill="rgb(211,15,21)" fg:x="46" fg:w="1"/><text x="4.0391%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="3.7891%" y="565" width="0.0824%" height="15" fill="rgb(215,187,41)" fg:x="46" fg:w="1"/><text x="4.0391%" y="575.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="3.7891%" y="549" width="0.0824%" height="15" fill="rgb(248,69,32)" fg:x="46" fg:w="1"/><text x="4.0391%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="3.7891%" y="533" width="0.0824%" height="15" fill="rgb(252,102,52)" fg:x="46" fg:w="1"/><text x="4.0391%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="3.7891%" y="517" width="0.0824%" height="15" fill="rgb(253,140,32)" fg:x="46" fg:w="1"/><text x="4.0391%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.8715%" y="533" width="0.0824%" height="15" fill="rgb(216,56,42)" fg:x="47" fg:w="1"/><text x="4.1215%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.8715%" y="517" width="0.0824%" height="15" fill="rgb(216,184,14)" fg:x="47" fg:w="1"/><text x="4.1215%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.8715%" y="501" width="0.0824%" height="15" fill="rgb(237,187,27)" fg:x="47" fg:w="1"/><text x="4.1215%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.8715%" y="485" width="0.0824%" height="15" fill="rgb(219,65,3)" fg:x="47" fg:w="1"/><text x="4.1215%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.8715%" y="469" width="0.0824%" height="15" fill="rgb(245,83,25)" fg:x="47" fg:w="1"/><text x="4.1215%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="3.8715%" y="581" width="0.1647%" height="15" fill="rgb(214,205,45)" fg:x="47" fg:w="2"/><text x="4.1215%" y="591.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="3.8715%" y="565" width="0.1647%" height="15" fill="rgb(241,20,18)" fg:x="47" fg:w="2"/><text x="4.1215%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="3.8715%" y="549" width="0.1647%" height="15" fill="rgb(232,163,23)" fg:x="47" fg:w="2"/><text x="4.1215%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.9539%" y="533" width="0.0824%" height="15" fill="rgb(214,5,46)" fg:x="48" fg:w="1"/><text x="4.2039%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.9539%" y="517" width="0.0824%" height="15" fill="rgb(229,78,17)" fg:x="48" fg:w="1"/><text x="4.2039%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.9539%" y="501" width="0.0824%" height="15" fill="rgb(248,89,10)" fg:x="48" fg:w="1"/><text x="4.2039%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.9539%" y="485" width="0.0824%" height="15" fill="rgb(248,54,15)" fg:x="48" fg:w="1"/><text x="4.2039%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="3.9539%" y="469" width="0.0824%" height="15" fill="rgb(223,116,6)" fg:x="48" fg:w="1"/><text x="4.2039%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.9539%" y="453" width="0.0824%" height="15" fill="rgb(205,125,38)" fg:x="48" fg:w="1"/><text x="4.2039%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.9539%" y="437" width="0.0824%" height="15" fill="rgb(251,78,38)" fg:x="48" fg:w="1"/><text x="4.2039%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.9539%" y="421" width="0.0824%" height="15" fill="rgb(253,78,28)" fg:x="48" fg:w="1"/><text x="4.2039%" y="431.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="4.0362%" y="581" width="0.0824%" height="15" fill="rgb(209,120,3)" fg:x="49" fg:w="1"/><text x="4.2862%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="4.0362%" y="565" width="0.0824%" height="15" fill="rgb(238,229,9)" fg:x="49" fg:w="1"/><text x="4.2862%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.0362%" y="549" width="0.0824%" height="15" fill="rgb(253,159,18)" fg:x="49" fg:w="1"/><text x="4.2862%" y="559.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.0362%" y="533" width="0.0824%" height="15" fill="rgb(244,42,34)" fg:x="49" fg:w="1"/><text x="4.2862%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.0362%" y="517" width="0.0824%" height="15" fill="rgb(224,8,7)" fg:x="49" fg:w="1"/><text x="4.2862%" y="527.50"></text></g><g><title>plugins_core::build::Build::into_entry (5 samples, 0.41%)</title><rect x="3.7891%" y="613" width="0.4119%" height="15" fill="rgb(210,201,45)" fg:x="46" fg:w="5"/><text x="4.0391%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.41%)</title><rect x="3.7891%" y="597" width="0.4119%" height="15" fill="rgb(252,185,21)" fg:x="46" fg:w="5"/><text x="4.0391%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="4.1186%" y="581" width="0.0824%" height="15" fill="rgb(223,131,1)" fg:x="50" fg:w="1"/><text x="4.3686%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="4.1186%" y="565" width="0.0824%" height="15" fill="rgb(245,141,16)" fg:x="50" fg:w="1"/><text x="4.3686%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="4.1186%" y="549" width="0.0824%" height="15" fill="rgb(229,55,45)" fg:x="50" fg:w="1"/><text x="4.3686%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.1186%" y="533" width="0.0824%" height="15" fill="rgb(208,92,15)" fg:x="50" fg:w="1"/><text x="4.3686%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.1186%" y="517" width="0.0824%" height="15" fill="rgb(234,185,47)" fg:x="50" fg:w="1"/><text x="4.3686%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.1186%" y="501" width="0.0824%" height="15" fill="rgb(253,104,50)" fg:x="50" fg:w="1"/><text x="4.3686%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.1186%" y="485" width="0.0824%" height="15" fill="rgb(205,70,7)" fg:x="50" fg:w="1"/><text x="4.3686%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.1186%" y="469" width="0.0824%" height="15" fill="rgb(240,178,43)" fg:x="50" fg:w="1"/><text x="4.3686%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.1186%" y="453" width="0.0824%" height="15" fill="rgb(214,112,2)" fg:x="50" fg:w="1"/><text x="4.3686%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.1186%" y="437" width="0.0824%" height="15" fill="rgb(206,46,17)" fg:x="50" fg:w="1"/><text x="4.3686%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.1186%" y="421" width="0.0824%" height="15" fill="rgb(225,220,16)" fg:x="50" fg:w="1"/><text x="4.3686%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.1186%" y="405" width="0.0824%" height="15" fill="rgb(238,65,40)" fg:x="50" fg:w="1"/><text x="4.3686%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.1186%" y="389" width="0.0824%" height="15" fill="rgb(230,151,21)" fg:x="50" fg:w="1"/><text x="4.3686%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.1186%" y="373" width="0.0824%" height="15" fill="rgb(218,58,49)" fg:x="50" fg:w="1"/><text x="4.3686%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.1186%" y="357" width="0.0824%" height="15" fill="rgb(219,179,14)" fg:x="50" fg:w="1"/><text x="4.3686%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.1186%" y="341" width="0.0824%" height="15" fill="rgb(223,72,1)" fg:x="50" fg:w="1"/><text x="4.3686%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="4.1186%" y="325" width="0.0824%" height="15" fill="rgb(238,126,10)" fg:x="50" fg:w="1"/><text x="4.3686%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="4.1186%" y="309" width="0.0824%" height="15" fill="rgb(224,206,38)" fg:x="50" fg:w="1"/><text x="4.3686%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="4.1186%" y="293" width="0.0824%" height="15" fill="rgb(212,201,54)" fg:x="50" fg:w="1"/><text x="4.3686%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="4.1186%" y="277" width="0.0824%" height="15" fill="rgb(218,154,48)" fg:x="50" fg:w="1"/><text x="4.3686%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.1186%" y="261" width="0.0824%" height="15" fill="rgb(232,93,24)" fg:x="50" fg:w="1"/><text x="4.3686%" y="271.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="4.2010%" y="597" width="0.0824%" height="15" fill="rgb(245,30,21)" fg:x="51" fg:w="1"/><text x="4.4510%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="4.2010%" y="581" width="0.0824%" height="15" fill="rgb(242,148,29)" fg:x="51" fg:w="1"/><text x="4.4510%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.2010%" y="565" width="0.0824%" height="15" fill="rgb(244,153,54)" fg:x="51" fg:w="1"/><text x="4.4510%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.2010%" y="549" width="0.0824%" height="15" fill="rgb(252,87,22)" fg:x="51" fg:w="1"/><text x="4.4510%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.2010%" y="533" width="0.0824%" height="15" fill="rgb(210,51,29)" fg:x="51" fg:w="1"/><text x="4.4510%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.2010%" y="517" width="0.0824%" height="15" fill="rgb(242,136,47)" fg:x="51" fg:w="1"/><text x="4.4510%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.2010%" y="501" width="0.0824%" height="15" fill="rgb(238,68,4)" fg:x="51" fg:w="1"/><text x="4.4510%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.2010%" y="485" width="0.0824%" height="15" fill="rgb(242,161,30)" fg:x="51" fg:w="1"/><text x="4.4510%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.2010%" y="469" width="0.0824%" height="15" fill="rgb(218,58,44)" fg:x="51" fg:w="1"/><text x="4.4510%" y="479.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="4.3657%" y="549" width="0.0824%" height="15" fill="rgb(252,125,32)" fg:x="53" fg:w="1"/><text x="4.6157%" y="559.50"></text></g><g><title>kernel::model::entity::Entity::new_blank (1 samples, 0.08%)</title><rect x="4.3657%" y="533" width="0.0824%" height="15" fill="rgb(219,178,0)" fg:x="53" fg:w="1"/><text x="4.6157%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="4.3657%" y="517" width="0.0824%" height="15" fill="rgb(213,152,7)" fg:x="53" fg:w="1"/><text x="4.6157%" y="527.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="4.3657%" y="501" width="0.0824%" height="15" fill="rgb(249,109,34)" fg:x="53" fg:w="1"/><text x="4.6157%" y="511.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="4.3657%" y="485" width="0.0824%" height="15" fill="rgb(232,96,21)" fg:x="53" fg:w="1"/><text x="4.6157%" y="495.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="4.3657%" y="469" width="0.0824%" height="15" fill="rgb(228,27,39)" fg:x="53" fg:w="1"/><text x="4.6157%" y="479.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="4.3657%" y="453" width="0.0824%" height="15" fill="rgb(211,182,52)" fg:x="53" fg:w="1"/><text x="4.6157%" y="463.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="4.4481%" y="549" width="0.0824%" height="15" fill="rgb(234,178,38)" fg:x="54" fg:w="1"/><text x="4.6981%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="4.4481%" y="533" width="0.0824%" height="15" fill="rgb(221,111,3)" fg:x="54" fg:w="1"/><text x="4.6981%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="4.4481%" y="517" width="0.0824%" height="15" fill="rgb(228,175,21)" fg:x="54" fg:w="1"/><text x="4.6981%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="4.4481%" y="501" width="0.0824%" height="15" fill="rgb(228,174,43)" fg:x="54" fg:w="1"/><text x="4.6981%" y="511.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="4.5305%" y="517" width="0.0824%" height="15" fill="rgb(211,191,0)" fg:x="55" fg:w="1"/><text x="4.7805%" y="527.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="4.5305%" y="501" width="0.0824%" height="15" fill="rgb(253,117,3)" fg:x="55" fg:w="1"/><text x="4.7805%" y="511.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (1 samples, 0.08%)</title><rect x="4.5305%" y="485" width="0.0824%" height="15" fill="rgb(241,127,19)" fg:x="55" fg:w="1"/><text x="4.7805%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.5305%" y="469" width="0.0824%" height="15" fill="rgb(218,103,12)" fg:x="55" fg:w="1"/><text x="4.7805%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.5305%" y="453" width="0.0824%" height="15" fill="rgb(236,214,43)" fg:x="55" fg:w="1"/><text x="4.7805%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.5305%" y="437" width="0.0824%" height="15" fill="rgb(244,144,19)" fg:x="55" fg:w="1"/><text x="4.7805%" y="447.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="4.6129%" y="501" width="0.0824%" height="15" fill="rgb(246,188,10)" fg:x="56" fg:w="1"/><text x="4.8629%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="4.6129%" y="485" width="0.0824%" height="15" fill="rgb(212,193,33)" fg:x="56" fg:w="1"/><text x="4.8629%" y="495.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="4.6129%" y="469" width="0.0824%" height="15" fill="rgb(241,51,29)" fg:x="56" fg:w="1"/><text x="4.8629%" y="479.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="4.6129%" y="453" width="0.0824%" height="15" fill="rgb(211,58,19)" fg:x="56" fg:w="1"/><text x="4.8629%" y="463.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="4.6129%" y="437" width="0.0824%" height="15" fill="rgb(229,111,26)" fg:x="56" fg:w="1"/><text x="4.8629%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.6129%" y="421" width="0.0824%" height="15" fill="rgb(213,115,40)" fg:x="56" fg:w="1"/><text x="4.8629%" y="431.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="4.6129%" y="405" width="0.0824%" height="15" fill="rgb(209,56,44)" fg:x="56" fg:w="1"/><text x="4.8629%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.6129%" y="389" width="0.0824%" height="15" fill="rgb(230,108,32)" fg:x="56" fg:w="1"/><text x="4.8629%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="4.6129%" y="373" width="0.0824%" height="15" fill="rgb(216,165,31)" fg:x="56" fg:w="1"/><text x="4.8629%" y="383.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="4.6129%" y="357" width="0.0824%" height="15" fill="rgb(218,122,21)" fg:x="56" fg:w="1"/><text x="4.8629%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.25%)</title><rect x="4.5305%" y="533" width="0.2471%" height="15" fill="rgb(223,224,47)" fg:x="55" fg:w="3"/><text x="4.7805%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="4.6129%" y="517" width="0.1647%" height="15" fill="rgb(238,102,44)" fg:x="56" fg:w="2"/><text x="4.8629%" y="527.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="4.6952%" y="501" width="0.0824%" height="15" fill="rgb(236,46,40)" fg:x="57" fg:w="1"/><text x="4.9452%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.6952%" y="485" width="0.0824%" height="15" fill="rgb(247,202,50)" fg:x="57" fg:w="1"/><text x="4.9452%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="4.6952%" y="469" width="0.0824%" height="15" fill="rgb(209,99,20)" fg:x="57" fg:w="1"/><text x="4.9452%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="4.7776%" y="533" width="0.0824%" height="15" fill="rgb(252,27,34)" fg:x="58" fg:w="1"/><text x="5.0276%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="4.7776%" y="517" width="0.0824%" height="15" fill="rgb(215,206,23)" fg:x="58" fg:w="1"/><text x="5.0276%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="4.8600%" y="485" width="0.0824%" height="15" fill="rgb(212,135,36)" fg:x="59" fg:w="1"/><text x="5.1100%" y="495.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.8600%" y="469" width="0.0824%" height="15" fill="rgb(240,189,1)" fg:x="59" fg:w="1"/><text x="5.1100%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.8600%" y="453" width="0.0824%" height="15" fill="rgb(242,56,20)" fg:x="59" fg:w="1"/><text x="5.1100%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="4.8600%" y="437" width="0.0824%" height="15" fill="rgb(247,132,33)" fg:x="59" fg:w="1"/><text x="5.1100%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.8600%" y="421" width="0.0824%" height="15" fill="rgb(208,149,11)" fg:x="59" fg:w="1"/><text x="5.1100%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="4.8600%" y="405" width="0.0824%" height="15" fill="rgb(211,33,11)" fg:x="59" fg:w="1"/><text x="5.1100%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.8600%" y="389" width="0.0824%" height="15" fill="rgb(221,29,38)" fg:x="59" fg:w="1"/><text x="5.1100%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="4.8600%" y="373" width="0.0824%" height="15" fill="rgb(206,182,49)" fg:x="59" fg:w="1"/><text x="5.1100%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.8600%" y="357" width="0.0824%" height="15" fill="rgb(216,140,1)" fg:x="59" fg:w="1"/><text x="5.1100%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.8600%" y="341" width="0.0824%" height="15" fill="rgb(232,57,40)" fg:x="59" fg:w="1"/><text x="5.1100%" y="351.50"></text></g><g><title>core::iter::adapters::try_process (9 samples, 0.74%)</title><rect x="4.2834%" y="597" width="0.7414%" height="15" fill="rgb(224,186,18)" fg:x="52" fg:w="9"/><text x="4.5334%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.74%)</title><rect x="4.2834%" y="581" width="0.7414%" height="15" fill="rgb(215,121,11)" fg:x="52" fg:w="9"/><text x="4.5334%" y="591.50"></text></g><g><title>plugins_core::build::QuickThing::make (9 samples, 0.74%)</title><rect x="4.2834%" y="565" width="0.7414%" height="15" fill="rgb(245,147,10)" fg:x="52" fg:w="9"/><text x="4.5334%" y="575.50"></text></g><g><title>plugins_core::build::Build::leads_to (6 samples, 0.49%)</title><rect x="4.5305%" y="549" width="0.4942%" height="15" fill="rgb(238,153,13)" fg:x="55" fg:w="6"/><text x="4.7805%" y="559.50"></text></g><g><title>plugins_core::tools::leads_to (2 samples, 0.16%)</title><rect x="4.8600%" y="533" width="0.1647%" height="15" fill="rgb(233,108,0)" fg:x="59" fg:w="2"/><text x="5.1100%" y="543.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="4.8600%" y="517" width="0.1647%" height="15" fill="rgb(212,157,17)" fg:x="59" fg:w="2"/><text x="5.1100%" y="527.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="4.8600%" y="501" width="0.1647%" height="15" fill="rgb(225,213,38)" fg:x="59" fg:w="2"/><text x="5.1100%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="4.9423%" y="485" width="0.0824%" height="15" fill="rgb(248,16,11)" fg:x="60" fg:w="1"/><text x="5.1923%" y="495.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.9423%" y="469" width="0.0824%" height="15" fill="rgb(241,33,4)" fg:x="60" fg:w="1"/><text x="5.1923%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.9423%" y="453" width="0.0824%" height="15" fill="rgb(222,26,43)" fg:x="60" fg:w="1"/><text x="5.1923%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.9423%" y="437" width="0.0824%" height="15" fill="rgb(243,29,36)" fg:x="60" fg:w="1"/><text x="5.1923%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.9423%" y="421" width="0.0824%" height="15" fill="rgb(241,9,27)" fg:x="60" fg:w="1"/><text x="5.1923%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.9423%" y="405" width="0.0824%" height="15" fill="rgb(205,117,26)" fg:x="60" fg:w="1"/><text x="5.1923%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.9423%" y="389" width="0.0824%" height="15" fill="rgb(209,80,39)" fg:x="60" fg:w="1"/><text x="5.1923%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.9423%" y="373" width="0.0824%" height="15" fill="rgb(239,155,6)" fg:x="60" fg:w="1"/><text x="5.1923%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.9423%" y="357" width="0.0824%" height="15" fill="rgb(212,104,12)" fg:x="60" fg:w="1"/><text x="5.1923%" y="367.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="5.0247%" y="565" width="0.0824%" height="15" fill="rgb(234,204,3)" fg:x="61" fg:w="1"/><text x="5.2747%" y="575.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="5.0247%" y="549" width="0.0824%" height="15" fill="rgb(251,218,7)" fg:x="61" fg:w="1"/><text x="5.2747%" y="559.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="5.0247%" y="533" width="0.0824%" height="15" fill="rgb(221,81,32)" fg:x="61" fg:w="1"/><text x="5.2747%" y="543.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="5.0247%" y="517" width="0.0824%" height="15" fill="rgb(214,152,26)" fg:x="61" fg:w="1"/><text x="5.2747%" y="527.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="5.0247%" y="501" width="0.0824%" height="15" fill="rgb(223,22,3)" fg:x="61" fg:w="1"/><text x="5.2747%" y="511.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="5.0247%" y="485" width="0.0824%" height="15" fill="rgb(207,174,7)" fg:x="61" fg:w="1"/><text x="5.2747%" y="495.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="5.0247%" y="469" width="0.0824%" height="15" fill="rgb(224,19,52)" fg:x="61" fg:w="1"/><text x="5.2747%" y="479.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="5.0247%" y="453" width="0.0824%" height="15" fill="rgb(228,24,14)" fg:x="61" fg:w="1"/><text x="5.2747%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.1071%" y="533" width="0.0824%" height="15" fill="rgb(230,153,43)" fg:x="62" fg:w="1"/><text x="5.3571%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.25%)</title><rect x="5.1895%" y="469" width="0.2471%" height="15" fill="rgb(231,106,12)" fg:x="63" fg:w="3"/><text x="5.4395%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="5.4366%" y="469" width="0.1647%" height="15" fill="rgb(215,92,2)" fg:x="66" fg:w="2"/><text x="5.6866%" y="479.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="5.4366%" y="453" width="0.1647%" height="15" fill="rgb(249,143,25)" fg:x="66" fg:w="2"/><text x="5.6866%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.5189%" y="437" width="0.0824%" height="15" fill="rgb(252,7,35)" fg:x="67" fg:w="1"/><text x="5.7689%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.5189%" y="421" width="0.0824%" height="15" fill="rgb(216,69,40)" fg:x="67" fg:w="1"/><text x="5.7689%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.5189%" y="405" width="0.0824%" height="15" fill="rgb(240,36,33)" fg:x="67" fg:w="1"/><text x="5.7689%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.5189%" y="389" width="0.0824%" height="15" fill="rgb(231,128,14)" fg:x="67" fg:w="1"/><text x="5.7689%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.5189%" y="373" width="0.0824%" height="15" fill="rgb(245,143,14)" fg:x="67" fg:w="1"/><text x="5.7689%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="5.6013%" y="453" width="0.0824%" height="15" fill="rgb(222,130,28)" fg:x="68" fg:w="1"/><text x="5.8513%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.6013%" y="437" width="0.0824%" height="15" fill="rgb(212,10,48)" fg:x="68" fg:w="1"/><text x="5.8513%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="5.6013%" y="421" width="0.0824%" height="15" fill="rgb(254,118,45)" fg:x="68" fg:w="1"/><text x="5.8513%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="5.6837%" y="437" width="0.0824%" height="15" fill="rgb(228,6,45)" fg:x="69" fg:w="1"/><text x="5.9337%" y="447.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.74%)</title><rect x="5.1895%" y="501" width="0.7414%" height="15" fill="rgb(241,18,35)" fg:x="63" fg:w="9"/><text x="5.4395%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.74%)</title><rect x="5.1895%" y="485" width="0.7414%" height="15" fill="rgb(227,214,53)" fg:x="63" fg:w="9"/><text x="5.4395%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="5.6013%" y="469" width="0.3295%" height="15" fill="rgb(224,107,51)" fg:x="68" fg:w="4"/><text x="5.8513%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.25%)</title><rect x="5.6837%" y="453" width="0.2471%" height="15" fill="rgb(248,60,28)" fg:x="69" fg:w="3"/><text x="5.9337%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="5.7661%" y="437" width="0.1647%" height="15" fill="rgb(249,101,23)" fg:x="70" fg:w="2"/><text x="6.0161%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="5.7661%" y="421" width="0.1647%" height="15" fill="rgb(228,51,19)" fg:x="70" fg:w="2"/><text x="6.0161%" y="431.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="5.7661%" y="405" width="0.1647%" height="15" fill="rgb(213,20,6)" fg:x="70" fg:w="2"/><text x="6.0161%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.8484%" y="389" width="0.0824%" height="15" fill="rgb(212,124,10)" fg:x="71" fg:w="1"/><text x="6.0984%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="5.9308%" y="501" width="0.1647%" height="15" fill="rgb(248,3,40)" fg:x="72" fg:w="2"/><text x="6.1808%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="5.9308%" y="485" width="0.1647%" height="15" fill="rgb(223,178,23)" fg:x="72" fg:w="2"/><text x="6.1808%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.0132%" y="469" width="0.0824%" height="15" fill="rgb(240,132,45)" fg:x="73" fg:w="1"/><text x="6.2632%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.0132%" y="453" width="0.0824%" height="15" fill="rgb(245,164,36)" fg:x="73" fg:w="1"/><text x="6.2632%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.0132%" y="437" width="0.0824%" height="15" fill="rgb(231,188,53)" fg:x="73" fg:w="1"/><text x="6.2632%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.0132%" y="421" width="0.0824%" height="15" fill="rgb(237,198,39)" fg:x="73" fg:w="1"/><text x="6.2632%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.0132%" y="405" width="0.0824%" height="15" fill="rgb(223,120,35)" fg:x="73" fg:w="1"/><text x="6.2632%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.1779%" y="453" width="0.0824%" height="15" fill="rgb(253,107,49)" fg:x="75" fg:w="1"/><text x="6.4279%" y="463.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="6.2603%" y="453" width="0.0824%" height="15" fill="rgb(216,44,31)" fg:x="76" fg:w="1"/><text x="6.5103%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="6.2603%" y="437" width="0.0824%" height="15" fill="rgb(253,87,21)" fg:x="76" fg:w="1"/><text x="6.5103%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="6.3427%" y="421" width="0.1647%" height="15" fill="rgb(226,18,2)" fg:x="77" fg:w="2"/><text x="6.5927%" y="431.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (3 samples, 0.25%)</title><rect x="6.3427%" y="453" width="0.2471%" height="15" fill="rgb(216,8,46)" fg:x="77" fg:w="3"/><text x="6.5927%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.25%)</title><rect x="6.3427%" y="437" width="0.2471%" height="15" fill="rgb(226,140,39)" fg:x="77" fg:w="3"/><text x="6.5927%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.5074%" y="421" width="0.0824%" height="15" fill="rgb(221,194,54)" fg:x="79" fg:w="1"/><text x="6.7574%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="6.6722%" y="405" width="0.1647%" height="15" fill="rgb(213,92,11)" fg:x="81" fg:w="2"/><text x="6.9222%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="6.6722%" y="389" width="0.1647%" height="15" fill="rgb(229,162,46)" fg:x="81" fg:w="2"/><text x="6.9222%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="6.7545%" y="373" width="0.0824%" height="15" fill="rgb(214,111,36)" fg:x="82" fg:w="1"/><text x="7.0045%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.7545%" y="357" width="0.0824%" height="15" fill="rgb(207,6,21)" fg:x="82" fg:w="1"/><text x="7.0045%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.7545%" y="341" width="0.0824%" height="15" fill="rgb(213,127,38)" fg:x="82" fg:w="1"/><text x="7.0045%" y="351.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="6.7545%" y="325" width="0.0824%" height="15" fill="rgb(238,118,32)" fg:x="82" fg:w="1"/><text x="7.0045%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.9193%" y="373" width="0.0824%" height="15" fill="rgb(240,139,39)" fg:x="84" fg:w="1"/><text x="7.1693%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.9193%" y="357" width="0.0824%" height="15" fill="rgb(235,10,37)" fg:x="84" fg:w="1"/><text x="7.1693%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.9193%" y="341" width="0.0824%" height="15" fill="rgb(249,171,38)" fg:x="84" fg:w="1"/><text x="7.1693%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.0016%" y="341" width="0.0824%" height="15" fill="rgb(242,144,32)" fg:x="85" fg:w="1"/><text x="7.2516%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.0016%" y="325" width="0.0824%" height="15" fill="rgb(217,117,21)" fg:x="85" fg:w="1"/><text x="7.2516%" y="335.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="7.0016%" y="309" width="0.0824%" height="15" fill="rgb(249,87,1)" fg:x="85" fg:w="1"/><text x="7.2516%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="7.2488%" y="309" width="0.1647%" height="15" fill="rgb(248,196,48)" fg:x="88" fg:w="2"/><text x="7.4988%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.3311%" y="293" width="0.0824%" height="15" fill="rgb(251,206,33)" fg:x="89" fg:w="1"/><text x="7.5811%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.3311%" y="277" width="0.0824%" height="15" fill="rgb(232,141,28)" fg:x="89" fg:w="1"/><text x="7.5811%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.4135%" y="277" width="0.0824%" height="15" fill="rgb(209,167,14)" fg:x="90" fg:w="1"/><text x="7.6635%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.4135%" y="261" width="0.0824%" height="15" fill="rgb(225,11,50)" fg:x="90" fg:w="1"/><text x="7.6635%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.4135%" y="245" width="0.0824%" height="15" fill="rgb(209,50,20)" fg:x="90" fg:w="1"/><text x="7.6635%" y="255.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (11 samples, 0.91%)</title><rect x="6.6722%" y="421" width="0.9061%" height="15" fill="rgb(212,17,46)" fg:x="81" fg:w="11"/><text x="6.9222%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (9 samples, 0.74%)</title><rect x="6.8369%" y="405" width="0.7414%" height="15" fill="rgb(216,101,39)" fg:x="83" fg:w="9"/><text x="7.0869%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (9 samples, 0.74%)</title><rect x="6.8369%" y="389" width="0.7414%" height="15" fill="rgb(212,228,48)" fg:x="83" fg:w="9"/><text x="7.0869%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7 samples, 0.58%)</title><rect x="7.0016%" y="373" width="0.5766%" height="15" fill="rgb(250,6,50)" fg:x="85" fg:w="7"/><text x="7.2516%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.58%)</title><rect x="7.0016%" y="357" width="0.5766%" height="15" fill="rgb(250,160,48)" fg:x="85" fg:w="7"/><text x="7.2516%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.49%)</title><rect x="7.0840%" y="341" width="0.4942%" height="15" fill="rgb(244,216,33)" fg:x="86" fg:w="6"/><text x="7.3340%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.41%)</title><rect x="7.1664%" y="325" width="0.4119%" height="15" fill="rgb(207,157,5)" fg:x="87" fg:w="5"/><text x="7.4164%" y="335.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="7.4135%" y="309" width="0.1647%" height="15" fill="rgb(228,199,8)" fg:x="90" fg:w="2"/><text x="7.6635%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="7.4135%" y="293" width="0.1647%" height="15" fill="rgb(227,80,20)" fg:x="90" fg:w="2"/><text x="7.6635%" y="303.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.4959%" y="277" width="0.0824%" height="15" fill="rgb(222,9,33)" fg:x="91" fg:w="1"/><text x="7.7459%" y="287.50"></text></g><g><title>engine::session::Session::flush (32 samples, 2.64%)</title><rect x="5.0247%" y="597" width="2.6359%" height="15" fill="rgb(239,44,28)" fg:x="61" fg:w="32"/><text x="5.2747%" y="607.50">en..</text></g><g><title>engine::session::Session::save_changes (32 samples, 2.64%)</title><rect x="5.0247%" y="581" width="2.6359%" height="15" fill="rgb(249,187,43)" fg:x="61" fg:w="32"/><text x="5.2747%" y="591.50">en..</text></g><g><title>engine::session::state::State::close (31 samples, 2.55%)</title><rect x="5.1071%" y="565" width="2.5535%" height="15" fill="rgb(216,141,28)" fg:x="62" fg:w="31"/><text x="5.3571%" y="575.50">en..</text></g><g><title>engine::session::state::State::flush_entities (31 samples, 2.55%)</title><rect x="5.1071%" y="549" width="2.5535%" height="15" fill="rgb(230,154,53)" fg:x="62" fg:w="31"/><text x="5.3571%" y="559.50">en..</text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (30 samples, 2.47%)</title><rect x="5.1895%" y="533" width="2.4712%" height="15" fill="rgb(227,82,4)" fg:x="63" fg:w="30"/><text x="5.4395%" y="543.50">en..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (30 samples, 2.47%)</title><rect x="5.1895%" y="517" width="2.4712%" height="15" fill="rgb(220,107,16)" fg:x="63" fg:w="30"/><text x="5.4395%" y="527.50">en..</text></g><g><title>kernel::model::any_entity_changes (19 samples, 1.57%)</title><rect x="6.0956%" y="501" width="1.5651%" height="15" fill="rgb(207,187,2)" fg:x="74" fg:w="19"/><text x="6.3456%" y="511.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (19 samples, 1.57%)</title><rect x="6.0956%" y="485" width="1.5651%" height="15" fill="rgb(210,162,52)" fg:x="74" fg:w="19"/><text x="6.3456%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (19 samples, 1.57%)</title><rect x="6.0956%" y="469" width="1.5651%" height="15" fill="rgb(217,216,49)" fg:x="74" fg:w="19"/><text x="6.3456%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_map (13 samples, 1.07%)</title><rect x="6.5898%" y="453" width="1.0708%" height="15" fill="rgb(218,146,49)" fg:x="80" fg:w="13"/><text x="6.8398%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (13 samples, 1.07%)</title><rect x="6.5898%" y="437" width="1.0708%" height="15" fill="rgb(216,55,40)" fg:x="80" fg:w="13"/><text x="6.8398%" y="447.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="7.5783%" y="421" width="0.0824%" height="15" fill="rgb(208,196,21)" fg:x="92" fg:w="1"/><text x="7.8283%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="7.6606%" y="581" width="0.0824%" height="15" fill="rgb(242,117,42)" fg:x="93" fg:w="1"/><text x="7.9106%" y="591.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="7.6606%" y="565" width="0.0824%" height="15" fill="rgb(210,11,23)" fg:x="93" fg:w="1"/><text x="7.9106%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScopeMut&lt;engine::identifiers::model::Identifiers&gt;&gt; (1 samples, 0.08%)</title><rect x="7.6606%" y="549" width="0.0824%" height="15" fill="rgb(217,110,2)" fg:x="93" fg:w="1"/><text x="7.9106%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="7.7430%" y="581" width="0.0824%" height="15" fill="rgb(229,77,54)" fg:x="94" fg:w="1"/><text x="7.9930%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="7.7430%" y="565" width="0.0824%" height="15" fill="rgb(218,53,16)" fg:x="94" fg:w="1"/><text x="7.9930%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.8254%" y="517" width="0.0824%" height="15" fill="rgb(215,38,13)" fg:x="95" fg:w="1"/><text x="8.0754%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.8254%" y="501" width="0.0824%" height="15" fill="rgb(235,42,18)" fg:x="95" fg:w="1"/><text x="8.0754%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.8254%" y="485" width="0.0824%" height="15" fill="rgb(219,66,54)" fg:x="95" fg:w="1"/><text x="8.0754%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.8254%" y="469" width="0.0824%" height="15" fill="rgb(222,205,4)" fg:x="95" fg:w="1"/><text x="8.0754%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="7.8254%" y="453" width="0.0824%" height="15" fill="rgb(227,213,46)" fg:x="95" fg:w="1"/><text x="8.0754%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.9077%" y="405" width="0.0824%" height="15" fill="rgb(250,145,42)" fg:x="96" fg:w="1"/><text x="8.1577%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.9077%" y="389" width="0.0824%" height="15" fill="rgb(219,15,2)" fg:x="96" fg:w="1"/><text x="8.1577%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="7.9077%" y="453" width="0.1647%" height="15" fill="rgb(231,181,52)" fg:x="96" fg:w="2"/><text x="8.1577%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="7.9077%" y="437" width="0.1647%" height="15" fill="rgb(235,1,42)" fg:x="96" fg:w="2"/><text x="8.1577%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="7.9077%" y="421" width="0.1647%" height="15" fill="rgb(249,88,27)" fg:x="96" fg:w="2"/><text x="8.1577%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.9901%" y="405" width="0.0824%" height="15" fill="rgb(235,145,16)" fg:x="97" fg:w="1"/><text x="8.2401%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.9901%" y="389" width="0.0824%" height="15" fill="rgb(237,114,19)" fg:x="97" fg:w="1"/><text x="8.2401%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.9901%" y="373" width="0.0824%" height="15" fill="rgb(238,51,50)" fg:x="97" fg:w="1"/><text x="8.2401%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.9901%" y="357" width="0.0824%" height="15" fill="rgb(205,194,25)" fg:x="97" fg:w="1"/><text x="8.2401%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.9901%" y="341" width="0.0824%" height="15" fill="rgb(215,203,17)" fg:x="97" fg:w="1"/><text x="8.2401%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.9901%" y="325" width="0.0824%" height="15" fill="rgb(233,112,49)" fg:x="97" fg:w="1"/><text x="8.2401%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.9901%" y="309" width="0.0824%" height="15" fill="rgb(241,130,26)" fg:x="97" fg:w="1"/><text x="8.2401%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="7.9901%" y="293" width="0.0824%" height="15" fill="rgb(252,223,19)" fg:x="97" fg:w="1"/><text x="8.2401%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="7.9901%" y="277" width="0.0824%" height="15" fill="rgb(211,95,25)" fg:x="97" fg:w="1"/><text x="8.2401%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="7.9901%" y="261" width="0.0824%" height="15" fill="rgb(251,182,27)" fg:x="97" fg:w="1"/><text x="8.2401%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="7.9901%" y="245" width="0.0824%" height="15" fill="rgb(238,24,4)" fg:x="97" fg:w="1"/><text x="8.2401%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.9901%" y="229" width="0.0824%" height="15" fill="rgb(224,220,25)" fg:x="97" fg:w="1"/><text x="8.2401%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.25%)</title><rect x="7.9077%" y="469" width="0.2471%" height="15" fill="rgb(239,133,26)" fg:x="96" fg:w="3"/><text x="8.1577%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.0725%" y="453" width="0.0824%" height="15" fill="rgb(211,94,48)" fg:x="98" fg:w="1"/><text x="8.3225%" y="463.50"></text></g><g><title>plugins_core::build::Build::holding (8 samples, 0.66%)</title><rect x="7.6606%" y="597" width="0.6590%" height="15" fill="rgb(239,87,6)" fg:x="93" fg:w="8"/><text x="7.9106%" y="607.50"></text></g><g><title>plugins_core::tools::set_container (6 samples, 0.49%)</title><rect x="7.8254%" y="581" width="0.4942%" height="15" fill="rgb(227,62,0)" fg:x="95" fg:w="6"/><text x="8.0754%" y="591.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (6 samples, 0.49%)</title><rect x="7.8254%" y="565" width="0.4942%" height="15" fill="rgb(211,226,4)" fg:x="95" fg:w="6"/><text x="8.0754%" y="575.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (6 samples, 0.49%)</title><rect x="7.8254%" y="549" width="0.4942%" height="15" fill="rgb(253,38,52)" fg:x="95" fg:w="6"/><text x="8.0754%" y="559.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (6 samples, 0.49%)</title><rect x="7.8254%" y="533" width="0.4942%" height="15" fill="rgb(229,126,40)" fg:x="95" fg:w="6"/><text x="8.0754%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (5 samples, 0.41%)</title><rect x="7.9077%" y="517" width="0.4119%" height="15" fill="rgb(229,165,44)" fg:x="96" fg:w="5"/><text x="8.1577%" y="527.50"></text></g><g><title>kernel::model::props::load_props (5 samples, 0.41%)</title><rect x="7.9077%" y="501" width="0.4119%" height="15" fill="rgb(247,95,47)" fg:x="96" fg:w="5"/><text x="8.1577%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (5 samples, 0.41%)</title><rect x="7.9077%" y="485" width="0.4119%" height="15" fill="rgb(216,140,30)" fg:x="96" fg:w="5"/><text x="8.1577%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="8.1549%" y="469" width="0.1647%" height="15" fill="rgb(246,214,8)" fg:x="99" fg:w="2"/><text x="8.4049%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="8.1549%" y="453" width="0.1647%" height="15" fill="rgb(227,224,15)" fg:x="99" fg:w="2"/><text x="8.4049%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.2372%" y="437" width="0.0824%" height="15" fill="rgb(233,175,4)" fg:x="100" fg:w="1"/><text x="8.4872%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.2372%" y="421" width="0.0824%" height="15" fill="rgb(221,66,45)" fg:x="100" fg:w="1"/><text x="8.4872%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.2372%" y="405" width="0.0824%" height="15" fill="rgb(221,178,18)" fg:x="100" fg:w="1"/><text x="8.4872%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.2372%" y="389" width="0.0824%" height="15" fill="rgb(213,81,29)" fg:x="100" fg:w="1"/><text x="8.4872%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.2372%" y="373" width="0.0824%" height="15" fill="rgb(220,89,49)" fg:x="100" fg:w="1"/><text x="8.4872%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.2372%" y="357" width="0.0824%" height="15" fill="rgb(227,60,33)" fg:x="100" fg:w="1"/><text x="8.4872%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.2372%" y="341" width="0.0824%" height="15" fill="rgb(205,113,12)" fg:x="100" fg:w="1"/><text x="8.4872%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.2372%" y="325" width="0.0824%" height="15" fill="rgb(211,32,1)" fg:x="100" fg:w="1"/><text x="8.4872%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.2372%" y="309" width="0.0824%" height="15" fill="rgb(246,2,12)" fg:x="100" fg:w="1"/><text x="8.4872%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.2372%" y="293" width="0.0824%" height="15" fill="rgb(243,37,27)" fg:x="100" fg:w="1"/><text x="8.4872%" y="303.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="8.3196%" y="597" width="0.1647%" height="15" fill="rgb(248,211,31)" fg:x="101" fg:w="2"/><text x="8.5696%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="8.4020%" y="581" width="0.0824%" height="15" fill="rgb(242,146,47)" fg:x="102" fg:w="1"/><text x="8.6520%" y="591.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="8.4020%" y="565" width="0.0824%" height="15" fill="rgb(206,70,20)" fg:x="102" fg:w="1"/><text x="8.6520%" y="575.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="8.4020%" y="549" width="0.0824%" height="15" fill="rgb(215,10,51)" fg:x="102" fg:w="1"/><text x="8.6520%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="8.4020%" y="533" width="0.0824%" height="15" fill="rgb(243,178,53)" fg:x="102" fg:w="1"/><text x="8.6520%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.4020%" y="517" width="0.0824%" height="15" fill="rgb(233,221,20)" fg:x="102" fg:w="1"/><text x="8.6520%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.4020%" y="501" width="0.0824%" height="15" fill="rgb(218,95,35)" fg:x="102" fg:w="1"/><text x="8.6520%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.4020%" y="485" width="0.0824%" height="15" fill="rgb(229,13,5)" fg:x="102" fg:w="1"/><text x="8.6520%" y="495.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="8.4843%" y="565" width="0.0824%" height="15" fill="rgb(252,164,30)" fg:x="103" fg:w="1"/><text x="8.7343%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="8.4843%" y="549" width="0.0824%" height="15" fill="rgb(232,68,36)" fg:x="103" fg:w="1"/><text x="8.7343%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="8.4843%" y="533" width="0.0824%" height="15" fill="rgb(219,59,54)" fg:x="103" fg:w="1"/><text x="8.7343%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.4843%" y="517" width="0.0824%" height="15" fill="rgb(250,92,33)" fg:x="103" fg:w="1"/><text x="8.7343%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="8.4843%" y="581" width="0.1647%" height="15" fill="rgb(229,162,54)" fg:x="103" fg:w="2"/><text x="8.7343%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="8.5667%" y="565" width="0.0824%" height="15" fill="rgb(244,114,52)" fg:x="104" fg:w="1"/><text x="8.8167%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="8.5667%" y="549" width="0.0824%" height="15" fill="rgb(212,211,43)" fg:x="104" fg:w="1"/><text x="8.8167%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="8.5667%" y="533" width="0.0824%" height="15" fill="rgb(226,147,8)" fg:x="104" fg:w="1"/><text x="8.8167%" y="543.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="8.5667%" y="517" width="0.0824%" height="15" fill="rgb(226,23,13)" fg:x="104" fg:w="1"/><text x="8.8167%" y="527.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="8.5667%" y="501" width="0.0824%" height="15" fill="rgb(240,63,4)" fg:x="104" fg:w="1"/><text x="8.8167%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.5667%" y="485" width="0.0824%" height="15" fill="rgb(221,1,32)" fg:x="104" fg:w="1"/><text x="8.8167%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.5667%" y="469" width="0.0824%" height="15" fill="rgb(242,117,10)" fg:x="104" fg:w="1"/><text x="8.8167%" y="479.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="8.6491%" y="565" width="0.0824%" height="15" fill="rgb(249,172,44)" fg:x="105" fg:w="1"/><text x="8.8991%" y="575.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="8.6491%" y="549" width="0.0824%" height="15" fill="rgb(244,46,45)" fg:x="105" fg:w="1"/><text x="8.8991%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.6491%" y="533" width="0.0824%" height="15" fill="rgb(206,43,17)" fg:x="105" fg:w="1"/><text x="8.8991%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.6491%" y="517" width="0.0824%" height="15" fill="rgb(239,218,39)" fg:x="105" fg:w="1"/><text x="8.8991%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="8.6491%" y="501" width="0.0824%" height="15" fill="rgb(208,169,54)" fg:x="105" fg:w="1"/><text x="8.8991%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.6491%" y="485" width="0.0824%" height="15" fill="rgb(247,25,42)" fg:x="105" fg:w="1"/><text x="8.8991%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.6491%" y="469" width="0.0824%" height="15" fill="rgb(226,23,31)" fg:x="105" fg:w="1"/><text x="8.8991%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.6491%" y="453" width="0.0824%" height="15" fill="rgb(247,16,28)" fg:x="105" fg:w="1"/><text x="8.8991%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.6491%" y="437" width="0.0824%" height="15" fill="rgb(231,147,38)" fg:x="105" fg:w="1"/><text x="8.8991%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.6491%" y="421" width="0.0824%" height="15" fill="rgb(253,81,48)" fg:x="105" fg:w="1"/><text x="8.8991%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.6491%" y="405" width="0.0824%" height="15" fill="rgb(249,222,43)" fg:x="105" fg:w="1"/><text x="8.8991%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="8.6491%" y="389" width="0.0824%" height="15" fill="rgb(221,3,27)" fg:x="105" fg:w="1"/><text x="8.8991%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="8.6491%" y="373" width="0.0824%" height="15" fill="rgb(228,180,5)" fg:x="105" fg:w="1"/><text x="8.8991%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="8.6491%" y="357" width="0.0824%" height="15" fill="rgb(227,131,42)" fg:x="105" fg:w="1"/><text x="8.8991%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.6491%" y="341" width="0.0824%" height="15" fill="rgb(212,3,39)" fg:x="105" fg:w="1"/><text x="8.8991%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.6491%" y="325" width="0.0824%" height="15" fill="rgb(226,45,5)" fg:x="105" fg:w="1"/><text x="8.8991%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="8.6491%" y="309" width="0.0824%" height="15" fill="rgb(215,167,45)" fg:x="105" fg:w="1"/><text x="8.8991%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="8.6491%" y="293" width="0.0824%" height="15" fill="rgb(250,218,53)" fg:x="105" fg:w="1"/><text x="8.8991%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="8.6491%" y="277" width="0.0824%" height="15" fill="rgb(207,140,0)" fg:x="105" fg:w="1"/><text x="8.8991%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="8.6491%" y="261" width="0.0824%" height="15" fill="rgb(238,133,51)" fg:x="105" fg:w="1"/><text x="8.8991%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.6491%" y="245" width="0.0824%" height="15" fill="rgb(218,203,53)" fg:x="105" fg:w="1"/><text x="8.8991%" y="255.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="8.7315%" y="565" width="0.0824%" height="15" fill="rgb(226,184,25)" fg:x="106" fg:w="1"/><text x="8.9815%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.7315%" y="549" width="0.0824%" height="15" fill="rgb(231,121,21)" fg:x="106" fg:w="1"/><text x="8.9815%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="8.8138%" y="549" width="0.0824%" height="15" fill="rgb(251,14,34)" fg:x="107" fg:w="1"/><text x="9.0638%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.8138%" y="533" width="0.0824%" height="15" fill="rgb(249,193,11)" fg:x="107" fg:w="1"/><text x="9.0638%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.8138%" y="517" width="0.0824%" height="15" fill="rgb(220,172,37)" fg:x="107" fg:w="1"/><text x="9.0638%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.8962%" y="517" width="0.0824%" height="15" fill="rgb(231,229,43)" fg:x="108" fg:w="1"/><text x="9.1462%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.8962%" y="501" width="0.0824%" height="15" fill="rgb(250,161,5)" fg:x="108" fg:w="1"/><text x="9.1462%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="8.8962%" y="485" width="0.0824%" height="15" fill="rgb(218,225,18)" fg:x="108" fg:w="1"/><text x="9.1462%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.8962%" y="469" width="0.0824%" height="15" fill="rgb(245,45,42)" fg:x="108" fg:w="1"/><text x="9.1462%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.8962%" y="453" width="0.0824%" height="15" fill="rgb(211,115,1)" fg:x="108" fg:w="1"/><text x="9.1462%" y="463.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (59 samples, 4.86%)</title><rect x="4.2010%" y="613" width="4.8600%" height="15" fill="rgb(248,133,52)" fg:x="51" fg:w="59"/><text x="4.4510%" y="623.50">plugin..</text></g><g><title>plugins_core::build::Build::occupying (7 samples, 0.58%)</title><rect x="8.4843%" y="597" width="0.5766%" height="15" fill="rgb(238,100,21)" fg:x="103" fg:w="7"/><text x="8.7343%" y="607.50"></text></g><g><title>plugins_core::tools::set_occupying (5 samples, 0.41%)</title><rect x="8.6491%" y="581" width="0.4119%" height="15" fill="rgb(247,144,11)" fg:x="105" fg:w="5"/><text x="8.8991%" y="591.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (3 samples, 0.25%)</title><rect x="8.8138%" y="565" width="0.2471%" height="15" fill="rgb(206,164,16)" fg:x="107" fg:w="3"/><text x="9.0638%" y="575.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="8.8962%" y="549" width="0.1647%" height="15" fill="rgb(222,34,3)" fg:x="108" fg:w="2"/><text x="9.1462%" y="559.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="8.8962%" y="533" width="0.1647%" height="15" fill="rgb(248,82,4)" fg:x="108" fg:w="2"/><text x="9.1462%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="8.9786%" y="517" width="0.0824%" height="15" fill="rgb(228,81,46)" fg:x="109" fg:w="1"/><text x="9.2286%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.9786%" y="501" width="0.0824%" height="15" fill="rgb(227,67,47)" fg:x="109" fg:w="1"/><text x="9.2286%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="8.9786%" y="485" width="0.0824%" height="15" fill="rgb(215,93,53)" fg:x="109" fg:w="1"/><text x="9.2286%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.9786%" y="469" width="0.0824%" height="15" fill="rgb(248,194,39)" fg:x="109" fg:w="1"/><text x="9.2286%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.9786%" y="453" width="0.0824%" height="15" fill="rgb(215,5,19)" fg:x="109" fg:w="1"/><text x="9.2286%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.9786%" y="437" width="0.0824%" height="15" fill="rgb(226,215,51)" fg:x="109" fg:w="1"/><text x="9.2286%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.9786%" y="421" width="0.0824%" height="15" fill="rgb(225,56,26)" fg:x="109" fg:w="1"/><text x="9.2286%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.9786%" y="405" width="0.0824%" height="15" fill="rgb(222,75,29)" fg:x="109" fg:w="1"/><text x="9.2286%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.9786%" y="389" width="0.0824%" height="15" fill="rgb(236,139,6)" fg:x="109" fg:w="1"/><text x="9.2286%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.9786%" y="373" width="0.0824%" height="15" fill="rgb(223,137,36)" fg:x="109" fg:w="1"/><text x="9.2286%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="8.9786%" y="357" width="0.0824%" height="15" fill="rgb(226,99,2)" fg:x="109" fg:w="1"/><text x="9.2286%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="8.9786%" y="341" width="0.0824%" height="15" fill="rgb(206,133,23)" fg:x="109" fg:w="1"/><text x="9.2286%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="8.9786%" y="325" width="0.0824%" height="15" fill="rgb(243,173,15)" fg:x="109" fg:w="1"/><text x="9.2286%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.9786%" y="309" width="0.0824%" height="15" fill="rgb(228,69,28)" fg:x="109" fg:w="1"/><text x="9.2286%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.9786%" y="293" width="0.0824%" height="15" fill="rgb(212,51,22)" fg:x="109" fg:w="1"/><text x="9.2286%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="8.9786%" y="277" width="0.0824%" height="15" fill="rgb(227,113,0)" fg:x="109" fg:w="1"/><text x="9.2286%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="8.9786%" y="261" width="0.0824%" height="15" fill="rgb(252,84,27)" fg:x="109" fg:w="1"/><text x="9.2286%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="8.9786%" y="245" width="0.0824%" height="15" fill="rgb(223,145,39)" fg:x="109" fg:w="1"/><text x="9.2286%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="8.9786%" y="229" width="0.0824%" height="15" fill="rgb(239,219,30)" fg:x="109" fg:w="1"/><text x="9.2286%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.9786%" y="213" width="0.0824%" height="15" fill="rgb(224,196,39)" fg:x="109" fg:w="1"/><text x="9.2286%" y="223.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="9.0610%" y="565" width="0.0824%" height="15" fill="rgb(205,35,43)" fg:x="110" fg:w="1"/><text x="9.3110%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="9.0610%" y="549" width="0.0824%" height="15" fill="rgb(228,201,21)" fg:x="110" fg:w="1"/><text x="9.3110%" y="559.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="9.0610%" y="533" width="0.0824%" height="15" fill="rgb(237,118,16)" fg:x="110" fg:w="1"/><text x="9.3110%" y="543.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="9.0610%" y="517" width="0.0824%" height="15" fill="rgb(241,17,19)" fg:x="110" fg:w="1"/><text x="9.3110%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="9.0610%" y="501" width="0.0824%" height="15" fill="rgb(214,10,25)" fg:x="110" fg:w="1"/><text x="9.3110%" y="511.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="9.0610%" y="485" width="0.0824%" height="15" fill="rgb(238,37,29)" fg:x="110" fg:w="1"/><text x="9.3110%" y="495.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="9.0610%" y="469" width="0.0824%" height="15" fill="rgb(253,83,25)" fg:x="110" fg:w="1"/><text x="9.3110%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.0610%" y="453" width="0.0824%" height="15" fill="rgb(234,192,12)" fg:x="110" fg:w="1"/><text x="9.3110%" y="463.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.16%)</title><rect x="9.0610%" y="613" width="0.1647%" height="15" fill="rgb(241,216,45)" fg:x="110" fg:w="2"/><text x="9.3110%" y="623.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="9.0610%" y="597" width="0.1647%" height="15" fill="rgb(242,22,33)" fg:x="110" fg:w="2"/><text x="9.3110%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="9.0610%" y="581" width="0.1647%" height="15" fill="rgb(231,105,49)" fg:x="110" fg:w="2"/><text x="9.3110%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="9.1433%" y="565" width="0.0824%" height="15" fill="rgb(218,204,15)" fg:x="111" fg:w="1"/><text x="9.3933%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="9.1433%" y="549" width="0.0824%" height="15" fill="rgb(235,138,41)" fg:x="111" fg:w="1"/><text x="9.3933%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="9.1433%" y="533" width="0.0824%" height="15" fill="rgb(246,0,9)" fg:x="111" fg:w="1"/><text x="9.3933%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="9.1433%" y="517" width="0.0824%" height="15" fill="rgb(210,74,4)" fg:x="111" fg:w="1"/><text x="9.3933%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="9.1433%" y="501" width="0.0824%" height="15" fill="rgb(250,60,41)" fg:x="111" fg:w="1"/><text x="9.3933%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.1433%" y="485" width="0.0824%" height="15" fill="rgb(220,115,12)" fg:x="111" fg:w="1"/><text x="9.3933%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.1433%" y="469" width="0.0824%" height="15" fill="rgb(237,100,13)" fg:x="111" fg:w="1"/><text x="9.3933%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.1433%" y="453" width="0.0824%" height="15" fill="rgb(213,55,26)" fg:x="111" fg:w="1"/><text x="9.3933%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.1433%" y="437" width="0.0824%" height="15" fill="rgb(216,17,4)" fg:x="111" fg:w="1"/><text x="9.3933%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="9.2257%" y="581" width="0.0824%" height="15" fill="rgb(220,153,47)" fg:x="112" fg:w="1"/><text x="9.4757%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="9.2257%" y="565" width="0.0824%" height="15" fill="rgb(215,131,9)" fg:x="112" fg:w="1"/><text x="9.4757%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="9.2257%" y="597" width="0.1647%" height="15" fill="rgb(233,46,42)" fg:x="112" fg:w="2"/><text x="9.4757%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="9.3081%" y="581" width="0.0824%" height="15" fill="rgb(226,86,7)" fg:x="113" fg:w="1"/><text x="9.5581%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="9.3081%" y="565" width="0.0824%" height="15" fill="rgb(239,226,21)" fg:x="113" fg:w="1"/><text x="9.5581%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="9.3081%" y="549" width="0.0824%" height="15" fill="rgb(244,137,22)" fg:x="113" fg:w="1"/><text x="9.5581%" y="559.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="9.3081%" y="533" width="0.0824%" height="15" fill="rgb(211,139,35)" fg:x="113" fg:w="1"/><text x="9.5581%" y="543.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="9.3081%" y="517" width="0.0824%" height="15" fill="rgb(214,62,50)" fg:x="113" fg:w="1"/><text x="9.5581%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="9.3081%" y="501" width="0.0824%" height="15" fill="rgb(212,113,44)" fg:x="113" fg:w="1"/><text x="9.5581%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.3081%" y="485" width="0.0824%" height="15" fill="rgb(226,150,43)" fg:x="113" fg:w="1"/><text x="9.5581%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="9.3081%" y="469" width="0.0824%" height="15" fill="rgb(250,71,37)" fg:x="113" fg:w="1"/><text x="9.5581%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.3081%" y="453" width="0.0824%" height="15" fill="rgb(219,76,19)" fg:x="113" fg:w="1"/><text x="9.5581%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.3081%" y="437" width="0.0824%" height="15" fill="rgb(250,39,11)" fg:x="113" fg:w="1"/><text x="9.5581%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.3081%" y="421" width="0.0824%" height="15" fill="rgb(230,64,31)" fg:x="113" fg:w="1"/><text x="9.5581%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.3081%" y="405" width="0.0824%" height="15" fill="rgb(208,222,23)" fg:x="113" fg:w="1"/><text x="9.5581%" y="415.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (99 samples, 8.15%)</title><rect x="1.3180%" y="629" width="8.1549%" height="15" fill="rgb(227,125,18)" fg:x="16" fg:w="99"/><text x="1.5680%" y="639.50">&lt;tests::Hol..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (3 samples, 0.25%)</title><rect x="9.2257%" y="613" width="0.2471%" height="15" fill="rgb(234,210,9)" fg:x="112" fg:w="3"/><text x="9.4757%" y="623.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="9.3904%" y="597" width="0.0824%" height="15" fill="rgb(217,127,24)" fg:x="114" fg:w="1"/><text x="9.6404%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="9.3904%" y="581" width="0.0824%" height="15" fill="rgb(239,141,48)" fg:x="114" fg:w="1"/><text x="9.6404%" y="591.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="9.3904%" y="565" width="0.0824%" height="15" fill="rgb(227,109,8)" fg:x="114" fg:w="1"/><text x="9.6404%" y="575.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="9.3904%" y="549" width="0.0824%" height="15" fill="rgb(235,184,23)" fg:x="114" fg:w="1"/><text x="9.6404%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="9.3904%" y="533" width="0.0824%" height="15" fill="rgb(227,226,48)" fg:x="114" fg:w="1"/><text x="9.6404%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.3904%" y="517" width="0.0824%" height="15" fill="rgb(206,150,11)" fg:x="114" fg:w="1"/><text x="9.6404%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="9.3904%" y="501" width="0.0824%" height="15" fill="rgb(254,2,33)" fg:x="114" fg:w="1"/><text x="9.6404%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.3904%" y="485" width="0.0824%" height="15" fill="rgb(243,160,20)" fg:x="114" fg:w="1"/><text x="9.6404%" y="495.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="9.4728%" y="613" width="0.0824%" height="15" fill="rgb(218,208,30)" fg:x="115" fg:w="1"/><text x="9.7228%" y="623.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="9.5552%" y="613" width="0.0824%" height="15" fill="rgb(224,120,49)" fg:x="116" fg:w="1"/><text x="9.8052%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="9.5552%" y="597" width="0.0824%" height="15" fill="rgb(246,12,2)" fg:x="116" fg:w="1"/><text x="9.8052%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="9.5552%" y="581" width="0.0824%" height="15" fill="rgb(236,117,3)" fg:x="116" fg:w="1"/><text x="9.8052%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="9.5552%" y="565" width="0.0824%" height="15" fill="rgb(216,128,52)" fg:x="116" fg:w="1"/><text x="9.8052%" y="575.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="9.5552%" y="549" width="0.0824%" height="15" fill="rgb(246,145,19)" fg:x="116" fg:w="1"/><text x="9.8052%" y="559.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="9.5552%" y="533" width="0.0824%" height="15" fill="rgb(222,11,46)" fg:x="116" fg:w="1"/><text x="9.8052%" y="543.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="9.5552%" y="517" width="0.0824%" height="15" fill="rgb(245,82,36)" fg:x="116" fg:w="1"/><text x="9.8052%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="9.5552%" y="501" width="0.0824%" height="15" fill="rgb(250,73,51)" fg:x="116" fg:w="1"/><text x="9.8052%" y="511.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="9.5552%" y="485" width="0.0824%" height="15" fill="rgb(221,189,23)" fg:x="116" fg:w="1"/><text x="9.8052%" y="495.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="9.5552%" y="469" width="0.0824%" height="15" fill="rgb(210,33,7)" fg:x="116" fg:w="1"/><text x="9.8052%" y="479.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="9.6376%" y="549" width="0.0824%" height="15" fill="rgb(210,107,22)" fg:x="117" fg:w="1"/><text x="9.8876%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="9.6376%" y="533" width="0.0824%" height="15" fill="rgb(222,116,37)" fg:x="117" fg:w="1"/><text x="9.8876%" y="543.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="9.6376%" y="517" width="0.0824%" height="15" fill="rgb(254,17,48)" fg:x="117" fg:w="1"/><text x="9.8876%" y="527.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="9.6376%" y="501" width="0.0824%" height="15" fill="rgb(224,36,32)" fg:x="117" fg:w="1"/><text x="9.8876%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.6376%" y="485" width="0.0824%" height="15" fill="rgb(232,90,46)" fg:x="117" fg:w="1"/><text x="9.8876%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.7199%" y="501" width="0.0824%" height="15" fill="rgb(241,66,40)" fg:x="118" fg:w="1"/><text x="9.9699%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.7199%" y="485" width="0.0824%" height="15" fill="rgb(249,184,29)" fg:x="118" fg:w="1"/><text x="9.9699%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="9.8023%" y="485" width="0.0824%" height="15" fill="rgb(231,181,1)" fg:x="119" fg:w="1"/><text x="10.0523%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="9.8023%" y="469" width="0.0824%" height="15" fill="rgb(224,94,2)" fg:x="119" fg:w="1"/><text x="10.0523%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="9.8023%" y="453" width="0.0824%" height="15" fill="rgb(229,170,15)" fg:x="119" fg:w="1"/><text x="10.0523%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="9.8023%" y="437" width="0.0824%" height="15" fill="rgb(240,127,35)" fg:x="119" fg:w="1"/><text x="10.0523%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="9.8023%" y="501" width="0.1647%" height="15" fill="rgb(248,196,34)" fg:x="119" fg:w="2"/><text x="10.0523%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.8847%" y="485" width="0.0824%" height="15" fill="rgb(236,137,7)" fg:x="120" fg:w="1"/><text x="10.1347%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.33%)</title><rect x="9.7199%" y="549" width="0.3295%" height="15" fill="rgb(235,127,16)" fg:x="118" fg:w="4"/><text x="9.9699%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="9.7199%" y="533" width="0.3295%" height="15" fill="rgb(250,192,54)" fg:x="118" fg:w="4"/><text x="9.9699%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="9.7199%" y="517" width="0.3295%" height="15" fill="rgb(218,98,20)" fg:x="118" fg:w="4"/><text x="9.9699%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.9671%" y="501" width="0.0824%" height="15" fill="rgb(230,176,47)" fg:x="121" fg:w="1"/><text x="10.2171%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.9671%" y="485" width="0.0824%" height="15" fill="rgb(244,2,33)" fg:x="121" fg:w="1"/><text x="10.2171%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="10.0494%" y="549" width="0.1647%" height="15" fill="rgb(231,100,17)" fg:x="122" fg:w="2"/><text x="10.2994%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="10.0494%" y="533" width="0.1647%" height="15" fill="rgb(245,23,12)" fg:x="122" fg:w="2"/><text x="10.2994%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="10.0494%" y="517" width="0.1647%" height="15" fill="rgb(249,55,22)" fg:x="122" fg:w="2"/><text x="10.2994%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="10.0494%" y="501" width="0.1647%" height="15" fill="rgb(207,134,9)" fg:x="122" fg:w="2"/><text x="10.2994%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="10.0494%" y="485" width="0.1647%" height="15" fill="rgb(218,134,0)" fg:x="122" fg:w="2"/><text x="10.2994%" y="495.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="10.2965%" y="469" width="0.1647%" height="15" fill="rgb(213,212,33)" fg:x="125" fg:w="2"/><text x="10.5465%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.4613%" y="469" width="0.0824%" height="15" fill="rgb(252,106,18)" fg:x="127" fg:w="1"/><text x="10.7113%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.4613%" y="453" width="0.0824%" height="15" fill="rgb(208,126,42)" fg:x="127" fg:w="1"/><text x="10.7113%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.5437%" y="453" width="0.0824%" height="15" fill="rgb(246,175,29)" fg:x="128" fg:w="1"/><text x="10.7937%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.5437%" y="437" width="0.0824%" height="15" fill="rgb(215,13,50)" fg:x="128" fg:w="1"/><text x="10.7937%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="10.2965%" y="517" width="0.4119%" height="15" fill="rgb(216,172,15)" fg:x="125" fg:w="5"/><text x="10.5465%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.41%)</title><rect x="10.2965%" y="501" width="0.4119%" height="15" fill="rgb(212,103,13)" fg:x="125" fg:w="5"/><text x="10.5465%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="10.2965%" y="485" width="0.4119%" height="15" fill="rgb(231,171,36)" fg:x="125" fg:w="5"/><text x="10.5465%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="10.5437%" y="469" width="0.1647%" height="15" fill="rgb(250,123,20)" fg:x="128" fg:w="2"/><text x="10.7937%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.6260%" y="453" width="0.0824%" height="15" fill="rgb(212,53,50)" fg:x="129" fg:w="1"/><text x="10.8760%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="10.6260%" y="437" width="0.0824%" height="15" fill="rgb(243,54,12)" fg:x="129" fg:w="1"/><text x="10.8760%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="10.6260%" y="421" width="0.0824%" height="15" fill="rgb(234,101,34)" fg:x="129" fg:w="1"/><text x="10.8760%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.6260%" y="405" width="0.0824%" height="15" fill="rgb(254,67,22)" fg:x="129" fg:w="1"/><text x="10.8760%" y="415.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (8 samples, 0.66%)</title><rect x="10.2142%" y="533" width="0.6590%" height="15" fill="rgb(250,35,47)" fg:x="124" fg:w="8"/><text x="10.4642%" y="543.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="10.7084%" y="517" width="0.1647%" height="15" fill="rgb(226,126,38)" fg:x="130" fg:w="2"/><text x="10.9584%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="10.7084%" y="501" width="0.1647%" height="15" fill="rgb(216,138,53)" fg:x="130" fg:w="2"/><text x="10.9584%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="10.7908%" y="485" width="0.0824%" height="15" fill="rgb(246,199,43)" fg:x="131" fg:w="1"/><text x="11.0408%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="10.7908%" y="469" width="0.0824%" height="15" fill="rgb(232,125,11)" fg:x="131" fg:w="1"/><text x="11.0408%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.8731%" y="501" width="0.1647%" height="15" fill="rgb(218,219,45)" fg:x="132" fg:w="2"/><text x="11.1231%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="11.2850%" y="469" width="0.0824%" height="15" fill="rgb(216,102,54)" fg:x="137" fg:w="1"/><text x="11.5350%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.3674%" y="453" width="0.0824%" height="15" fill="rgb(250,228,7)" fg:x="138" fg:w="1"/><text x="11.6174%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.3674%" y="437" width="0.0824%" height="15" fill="rgb(226,125,25)" fg:x="138" fg:w="1"/><text x="11.6174%" y="447.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="11.3674%" y="421" width="0.0824%" height="15" fill="rgb(224,165,27)" fg:x="138" fg:w="1"/><text x="11.6174%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="11.6969%" y="373" width="0.0824%" height="15" fill="rgb(233,86,3)" fg:x="142" fg:w="1"/><text x="11.9469%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.25%)</title><rect x="11.6145%" y="405" width="0.2471%" height="15" fill="rgb(228,116,20)" fg:x="141" fg:w="3"/><text x="11.8645%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.25%)</title><rect x="11.6145%" y="389" width="0.2471%" height="15" fill="rgb(209,192,17)" fg:x="141" fg:w="3"/><text x="11.8645%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="11.7792%" y="373" width="0.0824%" height="15" fill="rgb(224,88,34)" fg:x="143" fg:w="1"/><text x="12.0292%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="11.7792%" y="357" width="0.0824%" height="15" fill="rgb(233,38,6)" fg:x="143" fg:w="1"/><text x="12.0292%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="11.7792%" y="341" width="0.0824%" height="15" fill="rgb(212,59,30)" fg:x="143" fg:w="1"/><text x="12.0292%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="11.7792%" y="325" width="0.0824%" height="15" fill="rgb(213,80,3)" fg:x="143" fg:w="1"/><text x="12.0292%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="11.7792%" y="309" width="0.0824%" height="15" fill="rgb(251,178,7)" fg:x="143" fg:w="1"/><text x="12.0292%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (10 samples, 0.82%)</title><rect x="11.1203%" y="485" width="0.8237%" height="15" fill="rgb(213,154,26)" fg:x="135" fg:w="10"/><text x="11.3703%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.58%)</title><rect x="11.3674%" y="469" width="0.5766%" height="15" fill="rgb(238,165,49)" fg:x="138" fg:w="7"/><text x="11.6174%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.49%)</title><rect x="11.4498%" y="453" width="0.4942%" height="15" fill="rgb(248,91,46)" fg:x="139" fg:w="6"/><text x="11.6998%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.33%)</title><rect x="11.6145%" y="437" width="0.3295%" height="15" fill="rgb(244,21,52)" fg:x="141" fg:w="4"/><text x="11.8645%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.33%)</title><rect x="11.6145%" y="421" width="0.3295%" height="15" fill="rgb(247,122,20)" fg:x="141" fg:w="4"/><text x="11.8645%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.8616%" y="405" width="0.0824%" height="15" fill="rgb(218,27,9)" fg:x="144" fg:w="1"/><text x="12.1116%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.9440%" y="485" width="0.0824%" height="15" fill="rgb(246,7,6)" fg:x="145" fg:w="1"/><text x="12.1940%" y="495.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (16 samples, 1.32%)</title><rect x="10.8731%" y="533" width="1.3180%" height="15" fill="rgb(227,135,54)" fg:x="132" fg:w="16"/><text x="11.1231%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (16 samples, 1.32%)</title><rect x="10.8731%" y="517" width="1.3180%" height="15" fill="rgb(247,14,11)" fg:x="132" fg:w="16"/><text x="11.1231%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (14 samples, 1.15%)</title><rect x="11.0379%" y="501" width="1.1532%" height="15" fill="rgb(206,149,34)" fg:x="134" fg:w="14"/><text x="11.2879%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="12.0264%" y="485" width="0.1647%" height="15" fill="rgb(227,228,4)" fg:x="146" fg:w="2"/><text x="12.2764%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="12.0264%" y="469" width="0.1647%" height="15" fill="rgb(238,218,28)" fg:x="146" fg:w="2"/><text x="12.2764%" y="479.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="12.0264%" y="453" width="0.1647%" height="15" fill="rgb(252,86,40)" fg:x="146" fg:w="2"/><text x="12.2764%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="12.4382%" y="389" width="0.0824%" height="15" fill="rgb(251,225,11)" fg:x="151" fg:w="1"/><text x="12.6882%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.4382%" y="373" width="0.0824%" height="15" fill="rgb(206,46,49)" fg:x="151" fg:w="1"/><text x="12.6882%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="12.4382%" y="357" width="0.0824%" height="15" fill="rgb(245,128,24)" fg:x="151" fg:w="1"/><text x="12.6882%" y="367.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="12.4382%" y="341" width="0.0824%" height="15" fill="rgb(219,177,34)" fg:x="151" fg:w="1"/><text x="12.6882%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="12.6030%" y="309" width="0.0824%" height="15" fill="rgb(218,60,48)" fg:x="153" fg:w="1"/><text x="12.8530%" y="319.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="12.6853%" y="309" width="0.0824%" height="15" fill="rgb(221,11,5)" fg:x="154" fg:w="1"/><text x="12.9353%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.58%)</title><rect x="12.2735%" y="469" width="0.5766%" height="15" fill="rgb(220,148,13)" fg:x="149" fg:w="7"/><text x="12.5235%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.49%)</title><rect x="12.3558%" y="453" width="0.4942%" height="15" fill="rgb(210,16,3)" fg:x="150" fg:w="6"/><text x="12.6058%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.49%)</title><rect x="12.3558%" y="437" width="0.4942%" height="15" fill="rgb(236,80,2)" fg:x="150" fg:w="6"/><text x="12.6058%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.49%)</title><rect x="12.3558%" y="421" width="0.4942%" height="15" fill="rgb(239,129,19)" fg:x="150" fg:w="6"/><text x="12.6058%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.49%)</title><rect x="12.3558%" y="405" width="0.4942%" height="15" fill="rgb(220,106,35)" fg:x="150" fg:w="6"/><text x="12.6058%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="12.5206%" y="389" width="0.3295%" height="15" fill="rgb(252,139,45)" fg:x="152" fg:w="4"/><text x="12.7706%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="12.5206%" y="373" width="0.3295%" height="15" fill="rgb(229,8,36)" fg:x="152" fg:w="4"/><text x="12.7706%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="12.5206%" y="357" width="0.3295%" height="15" fill="rgb(230,126,33)" fg:x="152" fg:w="4"/><text x="12.7706%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="12.5206%" y="341" width="0.3295%" height="15" fill="rgb(239,140,21)" fg:x="152" fg:w="4"/><text x="12.7706%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="12.5206%" y="325" width="0.3295%" height="15" fill="rgb(254,104,9)" fg:x="152" fg:w="4"/><text x="12.7706%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.7677%" y="309" width="0.0824%" height="15" fill="rgb(239,52,14)" fg:x="155" fg:w="1"/><text x="13.0177%" y="319.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="12.8501%" y="469" width="0.0824%" height="15" fill="rgb(208,227,44)" fg:x="156" fg:w="1"/><text x="13.1001%" y="479.50"></text></g><g><title>engine::session::state::State::close (42 samples, 3.46%)</title><rect x="9.6376%" y="613" width="3.4596%" height="15" fill="rgb(246,18,19)" fg:x="117" fg:w="42"/><text x="9.8876%" y="623.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (42 samples, 3.46%)</title><rect x="9.6376%" y="597" width="3.4596%" height="15" fill="rgb(235,228,25)" fg:x="117" fg:w="42"/><text x="9.8876%" y="607.50">eng..</text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (42 samples, 3.46%)</title><rect x="9.6376%" y="581" width="3.4596%" height="15" fill="rgb(240,156,20)" fg:x="117" fg:w="42"/><text x="9.8876%" y="591.50">eng..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (42 samples, 3.46%)</title><rect x="9.6376%" y="565" width="3.4596%" height="15" fill="rgb(224,8,20)" fg:x="117" fg:w="42"/><text x="9.8876%" y="575.50">eng..</text></g><g><title>kernel::model::any_entity_changes (35 samples, 2.88%)</title><rect x="10.2142%" y="549" width="2.8830%" height="15" fill="rgb(214,12,52)" fg:x="124" fg:w="35"/><text x="10.4642%" y="559.50">ke..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (11 samples, 0.91%)</title><rect x="12.1911%" y="533" width="0.9061%" height="15" fill="rgb(211,220,47)" fg:x="148" fg:w="11"/><text x="12.4411%" y="543.50"></text></g><g><title>serde_json::de::from_trait (11 samples, 0.91%)</title><rect x="12.1911%" y="517" width="0.9061%" height="15" fill="rgb(250,173,5)" fg:x="148" fg:w="11"/><text x="12.4411%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.91%)</title><rect x="12.1911%" y="501" width="0.9061%" height="15" fill="rgb(250,125,52)" fg:x="148" fg:w="11"/><text x="12.4411%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (10 samples, 0.82%)</title><rect x="12.2735%" y="485" width="0.8237%" height="15" fill="rgb(209,133,18)" fg:x="149" fg:w="10"/><text x="12.5235%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="12.9325%" y="469" width="0.1647%" height="15" fill="rgb(216,173,22)" fg:x="157" fg:w="2"/><text x="13.1825%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.0148%" y="453" width="0.0824%" height="15" fill="rgb(205,3,22)" fg:x="158" fg:w="1"/><text x="13.2648%" y="463.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="13.0148%" y="437" width="0.0824%" height="15" fill="rgb(248,22,20)" fg:x="158" fg:w="1"/><text x="13.2648%" y="447.50"></text></g><g><title>engine::session::Session::close (46 samples, 3.79%)</title><rect x="9.4728%" y="629" width="3.7891%" height="15" fill="rgb(233,6,29)" fg:x="115" fg:w="46"/><text x="9.7228%" y="639.50">engi..</text></g><g><title>kernel::plugins::SessionPlugins::stop (2 samples, 0.16%)</title><rect x="13.0972%" y="613" width="0.1647%" height="15" fill="rgb(240,22,54)" fg:x="159" fg:w="2"/><text x="13.3472%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="13.3443%" y="357" width="0.0824%" height="15" fill="rgb(231,133,32)" fg:x="162" fg:w="1"/><text x="13.5943%" y="367.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (3 samples, 0.25%)</title><rect x="13.2619%" y="533" width="0.2471%" height="15" fill="rgb(248,193,4)" fg:x="161" fg:w="3"/><text x="13.5119%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.25%)</title><rect x="13.2619%" y="517" width="0.2471%" height="15" fill="rgb(211,178,46)" fg:x="161" fg:w="3"/><text x="13.5119%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.25%)</title><rect x="13.2619%" y="501" width="0.2471%" height="15" fill="rgb(224,5,42)" fg:x="161" fg:w="3"/><text x="13.5119%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (3 samples, 0.25%)</title><rect x="13.2619%" y="485" width="0.2471%" height="15" fill="rgb(239,176,25)" fg:x="161" fg:w="3"/><text x="13.5119%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.25%)</title><rect x="13.2619%" y="469" width="0.2471%" height="15" fill="rgb(245,187,50)" fg:x="161" fg:w="3"/><text x="13.5119%" y="479.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.25%)</title><rect x="13.2619%" y="453" width="0.2471%" height="15" fill="rgb(248,24,15)" fg:x="161" fg:w="3"/><text x="13.5119%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (3 samples, 0.25%)</title><rect x="13.2619%" y="437" width="0.2471%" height="15" fill="rgb(205,166,13)" fg:x="161" fg:w="3"/><text x="13.5119%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.25%)</title><rect x="13.2619%" y="421" width="0.2471%" height="15" fill="rgb(208,114,23)" fg:x="161" fg:w="3"/><text x="13.5119%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="13.2619%" y="405" width="0.2471%" height="15" fill="rgb(239,127,18)" fg:x="161" fg:w="3"/><text x="13.5119%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.25%)</title><rect x="13.2619%" y="389" width="0.2471%" height="15" fill="rgb(219,154,28)" fg:x="161" fg:w="3"/><text x="13.5119%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="13.2619%" y="373" width="0.2471%" height="15" fill="rgb(225,157,23)" fg:x="161" fg:w="3"/><text x="13.5119%" y="383.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="13.4267%" y="357" width="0.0824%" height="15" fill="rgb(219,8,6)" fg:x="163" fg:w="1"/><text x="13.6767%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="13.4267%" y="341" width="0.0824%" height="15" fill="rgb(212,47,6)" fg:x="163" fg:w="1"/><text x="13.6767%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="13.4267%" y="325" width="0.0824%" height="15" fill="rgb(224,190,4)" fg:x="163" fg:w="1"/><text x="13.6767%" y="335.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="13.4267%" y="309" width="0.0824%" height="15" fill="rgb(239,183,29)" fg:x="163" fg:w="1"/><text x="13.6767%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="13.4267%" y="293" width="0.0824%" height="15" fill="rgb(213,57,7)" fg:x="163" fg:w="1"/><text x="13.6767%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="13.4267%" y="277" width="0.0824%" height="15" fill="rgb(216,148,1)" fg:x="163" fg:w="1"/><text x="13.6767%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="13.4267%" y="261" width="0.0824%" height="15" fill="rgb(236,182,29)" fg:x="163" fg:w="1"/><text x="13.6767%" y="271.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="13.4267%" y="245" width="0.0824%" height="15" fill="rgb(244,120,48)" fg:x="163" fg:w="1"/><text x="13.6767%" y="255.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (4 samples, 0.33%)</title><rect x="13.2619%" y="549" width="0.3295%" height="15" fill="rgb(206,71,34)" fg:x="161" fg:w="4"/><text x="13.5119%" y="559.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="13.5091%" y="533" width="0.0824%" height="15" fill="rgb(242,32,6)" fg:x="164" fg:w="1"/><text x="13.7591%" y="543.50"></text></g><g><title>kernel::model::entry::EntryResolver::world (1 samples, 0.08%)</title><rect x="13.5091%" y="517" width="0.0824%" height="15" fill="rgb(241,35,3)" fg:x="164" fg:w="1"/><text x="13.7591%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="13.5091%" y="501" width="0.0824%" height="15" fill="rgb(222,62,19)" fg:x="164" fg:w="1"/><text x="13.7591%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="13.5091%" y="485" width="0.0824%" height="15" fill="rgb(223,110,41)" fg:x="164" fg:w="1"/><text x="13.7591%" y="495.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="13.5091%" y="469" width="0.0824%" height="15" fill="rgb(208,224,4)" fg:x="164" fg:w="1"/><text x="13.7591%" y="479.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="13.5091%" y="453" width="0.0824%" height="15" fill="rgb(241,137,19)" fg:x="164" fg:w="1"/><text x="13.7591%" y="463.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="13.5091%" y="437" width="0.0824%" height="15" fill="rgb(244,24,17)" fg:x="164" fg:w="1"/><text x="13.7591%" y="447.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="13.5091%" y="421" width="0.0824%" height="15" fill="rgb(245,178,49)" fg:x="164" fg:w="1"/><text x="13.7591%" y="431.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="13.5091%" y="405" width="0.0824%" height="15" fill="rgb(219,160,38)" fg:x="164" fg:w="1"/><text x="13.7591%" y="415.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="13.5091%" y="389" width="0.0824%" height="15" fill="rgb(228,137,14)" fg:x="164" fg:w="1"/><text x="13.7591%" y="399.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="13.5091%" y="373" width="0.0824%" height="15" fill="rgb(237,134,11)" fg:x="164" fg:w="1"/><text x="13.7591%" y="383.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="13.5091%" y="357" width="0.0824%" height="15" fill="rgb(211,126,44)" fg:x="164" fg:w="1"/><text x="13.7591%" y="367.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="13.5091%" y="341" width="0.0824%" height="15" fill="rgb(226,171,33)" fg:x="164" fg:w="1"/><text x="13.7591%" y="351.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="13.5091%" y="325" width="0.0824%" height="15" fill="rgb(253,99,13)" fg:x="164" fg:w="1"/><text x="13.7591%" y="335.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="13.5091%" y="309" width="0.0824%" height="15" fill="rgb(244,48,7)" fg:x="164" fg:w="1"/><text x="13.7591%" y="319.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="13.5091%" y="293" width="0.0824%" height="15" fill="rgb(244,217,54)" fg:x="164" fg:w="1"/><text x="13.7591%" y="303.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.5091%" y="277" width="0.0824%" height="15" fill="rgb(224,15,18)" fg:x="164" fg:w="1"/><text x="13.7591%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.5091%" y="261" width="0.0824%" height="15" fill="rgb(244,99,12)" fg:x="164" fg:w="1"/><text x="13.7591%" y="271.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="13.5091%" y="245" width="0.0824%" height="15" fill="rgb(233,226,8)" fg:x="164" fg:w="1"/><text x="13.7591%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="13.5091%" y="229" width="0.0824%" height="15" fill="rgb(229,211,3)" fg:x="164" fg:w="1"/><text x="13.7591%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="13.5091%" y="213" width="0.0824%" height="15" fill="rgb(216,140,21)" fg:x="164" fg:w="1"/><text x="13.7591%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="13.5091%" y="197" width="0.0824%" height="15" fill="rgb(234,122,30)" fg:x="164" fg:w="1"/><text x="13.7591%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="13.5091%" y="181" width="0.0824%" height="15" fill="rgb(236,25,46)" fg:x="164" fg:w="1"/><text x="13.7591%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="13.5091%" y="165" width="0.0824%" height="15" fill="rgb(217,52,54)" fg:x="164" fg:w="1"/><text x="13.7591%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="13.5091%" y="149" width="0.0824%" height="15" fill="rgb(222,29,26)" fg:x="164" fg:w="1"/><text x="13.7591%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="13.5091%" y="133" width="0.0824%" height="15" fill="rgb(216,177,29)" fg:x="164" fg:w="1"/><text x="13.7591%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="13.5091%" y="117" width="0.0824%" height="15" fill="rgb(247,136,51)" fg:x="164" fg:w="1"/><text x="13.7591%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="13.5091%" y="101" width="0.0824%" height="15" fill="rgb(231,47,47)" fg:x="164" fg:w="1"/><text x="13.7591%" y="111.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="13.5091%" y="85" width="0.0824%" height="15" fill="rgb(211,192,36)" fg:x="164" fg:w="1"/><text x="13.7591%" y="95.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="13.5091%" y="69" width="0.0824%" height="15" fill="rgb(229,156,32)" fg:x="164" fg:w="1"/><text x="13.7591%" y="79.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="13.5091%" y="53" width="0.0824%" height="15" fill="rgb(248,213,20)" fg:x="164" fg:w="1"/><text x="13.7591%" y="63.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (2 samples, 0.16%)</title><rect x="13.7562%" y="389" width="0.1647%" height="15" fill="rgb(217,64,7)" fg:x="167" fg:w="2"/><text x="14.0062%" y="399.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="13.8386%" y="373" width="0.0824%" height="15" fill="rgb(232,142,8)" fg:x="168" fg:w="1"/><text x="14.0886%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.9209%" y="293" width="0.0824%" height="15" fill="rgb(224,92,44)" fg:x="169" fg:w="1"/><text x="14.1709%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.9209%" y="277" width="0.0824%" height="15" fill="rgb(214,169,17)" fg:x="169" fg:w="1"/><text x="14.1709%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.9209%" y="261" width="0.0824%" height="15" fill="rgb(210,59,37)" fg:x="169" fg:w="1"/><text x="14.1709%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.9209%" y="325" width="0.1647%" height="15" fill="rgb(214,116,48)" fg:x="169" fg:w="2"/><text x="14.1709%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.9209%" y="309" width="0.1647%" height="15" fill="rgb(244,191,6)" fg:x="169" fg:w="2"/><text x="14.1709%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.0033%" y="293" width="0.0824%" height="15" fill="rgb(241,50,52)" fg:x="170" fg:w="1"/><text x="14.2533%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.25%)</title><rect x="13.9209%" y="341" width="0.2471%" height="15" fill="rgb(236,75,39)" fg:x="169" fg:w="3"/><text x="14.1709%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.0857%" y="325" width="0.0824%" height="15" fill="rgb(236,99,0)" fg:x="171" fg:w="1"/><text x="14.3357%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.1680%" y="341" width="0.0824%" height="15" fill="rgb(207,202,15)" fg:x="172" fg:w="1"/><text x="14.4180%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="14.1680%" y="325" width="0.0824%" height="15" fill="rgb(233,207,14)" fg:x="172" fg:w="1"/><text x="14.4180%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.1680%" y="309" width="0.0824%" height="15" fill="rgb(226,27,51)" fg:x="172" fg:w="1"/><text x="14.4180%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.1680%" y="293" width="0.0824%" height="15" fill="rgb(206,104,42)" fg:x="172" fg:w="1"/><text x="14.4180%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.1680%" y="277" width="0.0824%" height="15" fill="rgb(212,225,4)" fg:x="172" fg:w="1"/><text x="14.4180%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="14.2504%" y="277" width="0.0824%" height="15" fill="rgb(233,96,42)" fg:x="173" fg:w="1"/><text x="14.5004%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.2504%" y="261" width="0.0824%" height="15" fill="rgb(229,21,32)" fg:x="173" fg:w="1"/><text x="14.5004%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (8 samples, 0.66%)</title><rect x="13.9209%" y="389" width="0.6590%" height="15" fill="rgb(226,216,24)" fg:x="169" fg:w="8"/><text x="14.1709%" y="399.50"></text></g><g><title>kernel::model::props::load_props (8 samples, 0.66%)</title><rect x="13.9209%" y="373" width="0.6590%" height="15" fill="rgb(221,163,17)" fg:x="169" fg:w="8"/><text x="14.1709%" y="383.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (8 samples, 0.66%)</title><rect x="13.9209%" y="357" width="0.6590%" height="15" fill="rgb(216,216,42)" fg:x="169" fg:w="8"/><text x="14.1709%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.33%)</title><rect x="14.2504%" y="341" width="0.3295%" height="15" fill="rgb(240,118,7)" fg:x="173" fg:w="4"/><text x="14.5004%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="14.2504%" y="325" width="0.3295%" height="15" fill="rgb(221,67,37)" fg:x="173" fg:w="4"/><text x="14.5004%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.33%)</title><rect x="14.2504%" y="309" width="0.3295%" height="15" fill="rgb(241,32,44)" fg:x="173" fg:w="4"/><text x="14.5004%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="14.2504%" y="293" width="0.3295%" height="15" fill="rgb(235,204,43)" fg:x="173" fg:w="4"/><text x="14.5004%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.25%)</title><rect x="14.3328%" y="277" width="0.2471%" height="15" fill="rgb(213,116,10)" fg:x="174" fg:w="3"/><text x="14.5828%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="14.3328%" y="261" width="0.2471%" height="15" fill="rgb(239,15,48)" fg:x="174" fg:w="3"/><text x="14.5828%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.25%)</title><rect x="14.3328%" y="245" width="0.2471%" height="15" fill="rgb(207,123,36)" fg:x="174" fg:w="3"/><text x="14.5828%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="14.3328%" y="229" width="0.2471%" height="15" fill="rgb(209,103,30)" fg:x="174" fg:w="3"/><text x="14.5828%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.25%)</title><rect x="14.3328%" y="213" width="0.2471%" height="15" fill="rgb(238,100,19)" fg:x="174" fg:w="3"/><text x="14.5828%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.4152%" y="197" width="0.1647%" height="15" fill="rgb(244,30,14)" fg:x="175" fg:w="2"/><text x="14.6652%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="14.4975%" y="181" width="0.0824%" height="15" fill="rgb(249,174,6)" fg:x="176" fg:w="1"/><text x="14.7475%" y="191.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="14.5799%" y="389" width="0.1647%" height="15" fill="rgb(235,213,41)" fg:x="177" fg:w="2"/><text x="14.8299%" y="399.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="14.9094%" y="309" width="0.0824%" height="15" fill="rgb(213,118,6)" fg:x="181" fg:w="1"/><text x="15.1594%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="14.9094%" y="293" width="0.0824%" height="15" fill="rgb(235,44,51)" fg:x="181" fg:w="1"/><text x="15.1594%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.9094%" y="277" width="0.0824%" height="15" fill="rgb(217,9,53)" fg:x="181" fg:w="1"/><text x="15.1594%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.9094%" y="261" width="0.0824%" height="15" fill="rgb(237,172,34)" fg:x="181" fg:w="1"/><text x="15.1594%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.9094%" y="245" width="0.0824%" height="15" fill="rgb(206,206,11)" fg:x="181" fg:w="1"/><text x="15.1594%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.9094%" y="229" width="0.0824%" height="15" fill="rgb(214,149,29)" fg:x="181" fg:w="1"/><text x="15.1594%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.9094%" y="213" width="0.0824%" height="15" fill="rgb(208,123,3)" fg:x="181" fg:w="1"/><text x="15.1594%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.9094%" y="197" width="0.0824%" height="15" fill="rgb(229,126,4)" fg:x="181" fg:w="1"/><text x="15.1594%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.9094%" y="181" width="0.0824%" height="15" fill="rgb(222,92,36)" fg:x="181" fg:w="1"/><text x="15.1594%" y="191.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.9918%" y="277" width="0.0824%" height="15" fill="rgb(216,39,41)" fg:x="182" fg:w="1"/><text x="15.2418%" y="287.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (4 samples, 0.33%)</title><rect x="14.8270%" y="357" width="0.3295%" height="15" fill="rgb(253,127,28)" fg:x="180" fg:w="4"/><text x="15.0770%" y="367.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (4 samples, 0.33%)</title><rect x="14.8270%" y="341" width="0.3295%" height="15" fill="rgb(249,152,51)" fg:x="180" fg:w="4"/><text x="15.0770%" y="351.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.25%)</title><rect x="14.9094%" y="325" width="0.2471%" height="15" fill="rgb(209,123,42)" fg:x="181" fg:w="3"/><text x="15.1594%" y="335.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="14.9918%" y="309" width="0.1647%" height="15" fill="rgb(241,118,22)" fg:x="182" fg:w="2"/><text x="15.2418%" y="319.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="14.9918%" y="293" width="0.1647%" height="15" fill="rgb(208,25,7)" fg:x="182" fg:w="2"/><text x="15.2418%" y="303.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="15.0741%" y="277" width="0.0824%" height="15" fill="rgb(243,144,39)" fg:x="183" fg:w="1"/><text x="15.3241%" y="287.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="15.0741%" y="261" width="0.0824%" height="15" fill="rgb(250,50,5)" fg:x="183" fg:w="1"/><text x="15.3241%" y="271.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="15.0741%" y="245" width="0.0824%" height="15" fill="rgb(207,67,11)" fg:x="183" fg:w="1"/><text x="15.3241%" y="255.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.08%)</title><rect x="15.0741%" y="229" width="0.0824%" height="15" fill="rgb(245,204,40)" fg:x="183" fg:w="1"/><text x="15.3241%" y="239.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.08%)</title><rect x="15.0741%" y="213" width="0.0824%" height="15" fill="rgb(238,228,24)" fg:x="183" fg:w="1"/><text x="15.3241%" y="223.50"></text></g><g><title>kernel::model::entry::Entry::scope (6 samples, 0.49%)</title><rect x="14.7446%" y="389" width="0.4942%" height="15" fill="rgb(217,116,22)" fg:x="179" fg:w="6"/><text x="14.9946%" y="399.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (6 samples, 0.49%)</title><rect x="14.7446%" y="373" width="0.4942%" height="15" fill="rgb(234,98,12)" fg:x="179" fg:w="6"/><text x="14.9946%" y="383.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="15.1565%" y="357" width="0.0824%" height="15" fill="rgb(242,170,50)" fg:x="184" fg:w="1"/><text x="15.4065%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="15.4860%" y="213" width="0.0824%" height="15" fill="rgb(235,7,5)" fg:x="188" fg:w="1"/><text x="15.7360%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.5684%" y="213" width="0.0824%" height="15" fill="rgb(241,114,28)" fg:x="189" fg:w="1"/><text x="15.8184%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.5684%" y="197" width="0.0824%" height="15" fill="rgb(246,112,42)" fg:x="189" fg:w="1"/><text x="15.8184%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="15.5684%" y="181" width="0.0824%" height="15" fill="rgb(248,228,14)" fg:x="189" fg:w="1"/><text x="15.8184%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="15.5684%" y="165" width="0.0824%" height="15" fill="rgb(208,133,18)" fg:x="189" fg:w="1"/><text x="15.8184%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="15.5684%" y="149" width="0.0824%" height="15" fill="rgb(207,35,49)" fg:x="189" fg:w="1"/><text x="15.8184%" y="159.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (2 samples, 0.16%)</title><rect x="15.6507%" y="197" width="0.1647%" height="15" fill="rgb(205,68,36)" fg:x="190" fg:w="2"/><text x="15.9007%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (5 samples, 0.41%)</title><rect x="15.4860%" y="229" width="0.4119%" height="15" fill="rgb(245,62,40)" fg:x="188" fg:w="5"/><text x="15.7360%" y="239.50"></text></g><g><title>regex_automata::util::determinize::next (3 samples, 0.25%)</title><rect x="15.6507%" y="213" width="0.2471%" height="15" fill="rgb(228,27,24)" fg:x="190" fg:w="3"/><text x="15.9007%" y="223.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="15.8155%" y="197" width="0.0824%" height="15" fill="rgb(253,19,12)" fg:x="192" fg:w="1"/><text x="16.0655%" y="207.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (6 samples, 0.49%)</title><rect x="15.4860%" y="245" width="0.4942%" height="15" fill="rgb(232,28,20)" fg:x="188" fg:w="6"/><text x="15.7360%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="15.8979%" y="229" width="0.0824%" height="15" fill="rgb(218,35,51)" fg:x="193" fg:w="1"/><text x="16.1479%" y="239.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="15.8979%" y="213" width="0.0824%" height="15" fill="rgb(212,90,40)" fg:x="193" fg:w="1"/><text x="16.1479%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="15.8979%" y="197" width="0.0824%" height="15" fill="rgb(220,172,12)" fg:x="193" fg:w="1"/><text x="16.1479%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="15.8979%" y="181" width="0.0824%" height="15" fill="rgb(226,159,20)" fg:x="193" fg:w="1"/><text x="16.1479%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.8979%" y="165" width="0.0824%" height="15" fill="rgb(234,205,16)" fg:x="193" fg:w="1"/><text x="16.1479%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.66%)</title><rect x="15.4036%" y="309" width="0.6590%" height="15" fill="rgb(207,9,39)" fg:x="187" fg:w="8"/><text x="15.6536%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.58%)</title><rect x="15.4860%" y="293" width="0.5766%" height="15" fill="rgb(249,143,15)" fg:x="188" fg:w="7"/><text x="15.7360%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (7 samples, 0.58%)</title><rect x="15.4860%" y="277" width="0.5766%" height="15" fill="rgb(253,133,29)" fg:x="188" fg:w="7"/><text x="15.7360%" y="287.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (7 samples, 0.58%)</title><rect x="15.4860%" y="261" width="0.5766%" height="15" fill="rgb(221,187,0)" fg:x="188" fg:w="7"/><text x="15.7360%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1 samples, 0.08%)</title><rect x="15.9802%" y="245" width="0.0824%" height="15" fill="rgb(205,204,26)" fg:x="194" fg:w="1"/><text x="16.2302%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="15.9802%" y="229" width="0.0824%" height="15" fill="rgb(224,68,54)" fg:x="194" fg:w="1"/><text x="16.2302%" y="239.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="15.9802%" y="213" width="0.0824%" height="15" fill="rgb(209,67,4)" fg:x="194" fg:w="1"/><text x="16.2302%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="15.9802%" y="197" width="0.0824%" height="15" fill="rgb(228,229,18)" fg:x="194" fg:w="1"/><text x="16.2302%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="16.0626%" y="293" width="0.0824%" height="15" fill="rgb(231,89,13)" fg:x="195" fg:w="1"/><text x="16.3126%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="16.1450%" y="261" width="0.0824%" height="15" fill="rgb(210,182,18)" fg:x="196" fg:w="1"/><text x="16.3950%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.1450%" y="245" width="0.0824%" height="15" fill="rgb(240,105,2)" fg:x="196" fg:w="1"/><text x="16.3950%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="16.2273%" y="261" width="0.0824%" height="15" fill="rgb(207,170,50)" fg:x="197" fg:w="1"/><text x="16.4773%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.33%)</title><rect x="16.0626%" y="309" width="0.3295%" height="15" fill="rgb(232,133,24)" fg:x="195" fg:w="4"/><text x="16.3126%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.25%)</title><rect x="16.1450%" y="293" width="0.2471%" height="15" fill="rgb(235,166,27)" fg:x="196" fg:w="3"/><text x="16.3950%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.25%)</title><rect x="16.1450%" y="277" width="0.2471%" height="15" fill="rgb(209,19,13)" fg:x="196" fg:w="3"/><text x="16.3950%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="16.3097%" y="261" width="0.0824%" height="15" fill="rgb(226,79,39)" fg:x="198" fg:w="1"/><text x="16.5597%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="16.4745%" y="261" width="0.0824%" height="15" fill="rgb(222,163,10)" fg:x="200" fg:w="1"/><text x="16.7245%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.4745%" y="245" width="0.0824%" height="15" fill="rgb(214,44,19)" fg:x="200" fg:w="1"/><text x="16.7245%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.5568%" y="261" width="0.0824%" height="15" fill="rgb(210,217,13)" fg:x="201" fg:w="1"/><text x="16.8068%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.6392%" y="261" width="0.0824%" height="15" fill="rgb(237,61,54)" fg:x="202" fg:w="1"/><text x="16.8892%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="16.7216%" y="229" width="0.0824%" height="15" fill="rgb(226,184,24)" fg:x="203" fg:w="1"/><text x="16.9716%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (2 samples, 0.16%)</title><rect x="16.7216%" y="261" width="0.1647%" height="15" fill="rgb(223,226,4)" fg:x="203" fg:w="2"/><text x="16.9716%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="16.7216%" y="245" width="0.1647%" height="15" fill="rgb(210,26,41)" fg:x="203" fg:w="2"/><text x="16.9716%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.8040%" y="229" width="0.0824%" height="15" fill="rgb(220,221,6)" fg:x="204" fg:w="1"/><text x="17.0540%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.9687%" y="245" width="0.0824%" height="15" fill="rgb(225,89,49)" fg:x="206" fg:w="1"/><text x="17.2187%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.0511%" y="245" width="0.0824%" height="15" fill="rgb(218,70,45)" fg:x="207" fg:w="1"/><text x="17.3011%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (48 samples, 3.95%)</title><rect x="17.1334%" y="245" width="3.9539%" height="15" fill="rgb(238,166,21)" fg:x="208" fg:w="48"/><text x="17.3834%" y="255.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (46 samples, 3.79%)</title><rect x="17.2982%" y="229" width="3.7891%" height="15" fill="rgb(224,141,44)" fg:x="210" fg:w="46"/><text x="17.5482%" y="239.50">core..</text></g><g><title>__libc_free (5 samples, 0.41%)</title><rect x="20.6755%" y="213" width="0.4119%" height="15" fill="rgb(230,12,49)" fg:x="251" fg:w="5"/><text x="20.9255%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="21.0873%" y="229" width="0.1647%" height="15" fill="rgb(212,174,12)" fg:x="256" fg:w="2"/><text x="21.3373%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="21.1697%" y="213" width="0.0824%" height="15" fill="rgb(246,67,9)" fg:x="257" fg:w="1"/><text x="21.4197%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.41%)</title><rect x="21.0873%" y="245" width="0.4119%" height="15" fill="rgb(239,35,23)" fg:x="256" fg:w="5"/><text x="21.3373%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.25%)</title><rect x="21.2521%" y="229" width="0.2471%" height="15" fill="rgb(211,167,0)" fg:x="258" fg:w="3"/><text x="21.5021%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="21.4168%" y="213" width="0.0824%" height="15" fill="rgb(225,119,45)" fg:x="260" fg:w="1"/><text x="21.6668%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="21.6639%" y="197" width="0.0824%" height="15" fill="rgb(210,162,6)" fg:x="263" fg:w="1"/><text x="21.9139%" y="207.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="21.9110%" y="181" width="0.1647%" height="15" fill="rgb(208,118,35)" fg:x="266" fg:w="2"/><text x="22.1610%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.25%)</title><rect x="22.0758%" y="181" width="0.2471%" height="15" fill="rgb(239,4,53)" fg:x="268" fg:w="3"/><text x="22.3258%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.25%)</title><rect x="22.0758%" y="165" width="0.2471%" height="15" fill="rgb(213,130,21)" fg:x="268" fg:w="3"/><text x="22.3258%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="22.1582%" y="149" width="0.1647%" height="15" fill="rgb(235,148,0)" fg:x="269" fg:w="2"/><text x="22.4082%" y="159.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="22.1582%" y="133" width="0.1647%" height="15" fill="rgb(244,224,18)" fg:x="269" fg:w="2"/><text x="22.4082%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="22.4053%" y="149" width="0.0824%" height="15" fill="rgb(211,214,4)" fg:x="272" fg:w="1"/><text x="22.6553%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="22.4053%" y="133" width="0.0824%" height="15" fill="rgb(206,119,25)" fg:x="272" fg:w="1"/><text x="22.6553%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (5 samples, 0.41%)</title><rect x="22.3229%" y="181" width="0.4119%" height="15" fill="rgb(243,93,47)" fg:x="271" fg:w="5"/><text x="22.5729%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (5 samples, 0.41%)</title><rect x="22.3229%" y="165" width="0.4119%" height="15" fill="rgb(224,194,6)" fg:x="271" fg:w="5"/><text x="22.5729%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.25%)</title><rect x="22.4876%" y="149" width="0.2471%" height="15" fill="rgb(243,229,6)" fg:x="273" fg:w="3"/><text x="22.7376%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="22.6524%" y="133" width="0.0824%" height="15" fill="rgb(207,23,50)" fg:x="275" fg:w="1"/><text x="22.9024%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="22.7348%" y="181" width="0.0824%" height="15" fill="rgb(253,192,32)" fg:x="276" fg:w="1"/><text x="22.9848%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="22.7348%" y="165" width="0.0824%" height="15" fill="rgb(213,21,6)" fg:x="276" fg:w="1"/><text x="22.9848%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="22.7348%" y="149" width="0.0824%" height="15" fill="rgb(243,151,13)" fg:x="276" fg:w="1"/><text x="22.9848%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="22.8171%" y="165" width="0.0824%" height="15" fill="rgb(233,165,41)" fg:x="277" fg:w="1"/><text x="23.0671%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="22.8171%" y="149" width="0.0824%" height="15" fill="rgb(246,176,45)" fg:x="277" fg:w="1"/><text x="23.0671%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="22.8171%" y="133" width="0.0824%" height="15" fill="rgb(217,170,52)" fg:x="277" fg:w="1"/><text x="23.0671%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="22.8171%" y="117" width="0.0824%" height="15" fill="rgb(214,203,54)" fg:x="277" fg:w="1"/><text x="23.0671%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (135 samples, 11.12%)</title><rect x="22.8171%" y="181" width="11.1203%" height="15" fill="rgb(248,215,49)" fg:x="277" fg:w="135"/><text x="23.0671%" y="191.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (134 samples, 11.04%)</title><rect x="22.8995%" y="165" width="11.0379%" height="15" fill="rgb(208,46,10)" fg:x="278" fg:w="134"/><text x="23.1495%" y="175.50">regex_automata::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (134 samples, 11.04%)</title><rect x="22.8995%" y="149" width="11.0379%" height="15" fill="rgb(254,5,31)" fg:x="278" fg:w="134"/><text x="23.1495%" y="159.50">alloc::vec::Vec&lt;..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.33%)</title><rect x="33.9374%" y="181" width="0.3295%" height="15" fill="rgb(222,104,33)" fg:x="412" fg:w="4"/><text x="34.1874%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="34.1021%" y="165" width="0.1647%" height="15" fill="rgb(248,49,16)" fg:x="414" fg:w="2"/><text x="34.3521%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (156 samples, 12.85%)</title><rect x="21.5815%" y="229" width="12.8501%" height="15" fill="rgb(232,198,41)" fg:x="262" fg:w="156"/><text x="21.8315%" y="239.50">&lt;core::iter::adapte..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (155 samples, 12.77%)</title><rect x="21.6639%" y="213" width="12.7677%" height="15" fill="rgb(214,125,3)" fg:x="263" fg:w="155"/><text x="21.9139%" y="223.50">regex_automata::nfa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (154 samples, 12.69%)</title><rect x="21.7463%" y="197" width="12.6853%" height="15" fill="rgb(229,220,28)" fg:x="264" fg:w="154"/><text x="21.9963%" y="207.50">regex_automata::nfa..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="34.2669%" y="181" width="0.1647%" height="15" fill="rgb(222,64,37)" fg:x="416" fg:w="2"/><text x="34.5169%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="34.2669%" y="165" width="0.1647%" height="15" fill="rgb(249,184,13)" fg:x="416" fg:w="2"/><text x="34.5169%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="34.2669%" y="149" width="0.1647%" height="15" fill="rgb(252,176,6)" fg:x="416" fg:w="2"/><text x="34.5169%" y="159.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="34.2669%" y="133" width="0.1647%" height="15" fill="rgb(228,153,7)" fg:x="416" fg:w="2"/><text x="34.5169%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="34.4316%" y="229" width="0.0824%" height="15" fill="rgb(242,193,5)" fg:x="418" fg:w="1"/><text x="34.6816%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.5140%" y="213" width="0.0824%" height="15" fill="rgb(232,140,9)" fg:x="419" fg:w="1"/><text x="34.7640%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="34.5964%" y="213" width="0.1647%" height="15" fill="rgb(213,222,16)" fg:x="420" fg:w="2"/><text x="34.8464%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.33%)</title><rect x="34.7611%" y="213" width="0.3295%" height="15" fill="rgb(222,75,50)" fg:x="422" fg:w="4"/><text x="35.0111%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="35.0082%" y="197" width="0.0824%" height="15" fill="rgb(205,180,2)" fg:x="425" fg:w="1"/><text x="35.2582%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.0082%" y="181" width="0.0824%" height="15" fill="rgb(216,34,7)" fg:x="425" fg:w="1"/><text x="35.2582%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="35.0082%" y="165" width="0.0824%" height="15" fill="rgb(253,16,32)" fg:x="425" fg:w="1"/><text x="35.2582%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (3 samples, 0.25%)</title><rect x="35.0906%" y="213" width="0.2471%" height="15" fill="rgb(208,97,28)" fg:x="426" fg:w="3"/><text x="35.3406%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (12 samples, 0.99%)</title><rect x="34.5140%" y="229" width="0.9885%" height="15" fill="rgb(225,92,11)" fg:x="419" fg:w="12"/><text x="34.7640%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="35.3377%" y="213" width="0.1647%" height="15" fill="rgb(243,38,12)" fg:x="429" fg:w="2"/><text x="35.5877%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (2 samples, 0.16%)</title><rect x="35.3377%" y="197" width="0.1647%" height="15" fill="rgb(208,139,16)" fg:x="429" fg:w="2"/><text x="35.5877%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="35.3377%" y="181" width="0.1647%" height="15" fill="rgb(227,24,9)" fg:x="429" fg:w="2"/><text x="35.5877%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="35.3377%" y="165" width="0.1647%" height="15" fill="rgb(206,62,11)" fg:x="429" fg:w="2"/><text x="35.5877%" y="175.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="35.3377%" y="149" width="0.1647%" height="15" fill="rgb(228,134,27)" fg:x="429" fg:w="2"/><text x="35.5877%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="35.5025%" y="229" width="0.0824%" height="15" fill="rgb(205,55,33)" fg:x="431" fg:w="1"/><text x="35.7525%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="35.5025%" y="213" width="0.0824%" height="15" fill="rgb(243,75,43)" fg:x="431" fg:w="1"/><text x="35.7525%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (172 samples, 14.17%)</title><rect x="21.4992%" y="245" width="14.1680%" height="15" fill="rgb(223,27,42)" fg:x="261" fg:w="172"/><text x="21.7492%" y="255.50">regex_automata::nfa::t..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="35.5848%" y="229" width="0.0824%" height="15" fill="rgb(232,189,33)" fg:x="432" fg:w="1"/><text x="35.8348%" y="239.50"></text></g><g><title>regex_syntax::hir::ClassBytes::push (1 samples, 0.08%)</title><rect x="35.5848%" y="213" width="0.0824%" height="15" fill="rgb(210,9,39)" fg:x="432" fg:w="1"/><text x="35.8348%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="35.5848%" y="197" width="0.0824%" height="15" fill="rgb(242,85,26)" fg:x="432" fg:w="1"/><text x="35.8348%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (229 samples, 18.86%)</title><rect x="16.8863%" y="261" width="18.8633%" height="15" fill="rgb(248,44,4)" fg:x="205" fg:w="229"/><text x="17.1363%" y="271.50">regex_automata::meta::strateg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="35.6672%" y="245" width="0.0824%" height="15" fill="rgb(250,96,46)" fg:x="433" fg:w="1"/><text x="35.9172%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="35.6672%" y="229" width="0.0824%" height="15" fill="rgb(229,116,26)" fg:x="433" fg:w="1"/><text x="35.9172%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="35.7496%" y="213" width="0.1647%" height="15" fill="rgb(246,94,34)" fg:x="434" fg:w="2"/><text x="35.9996%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::peek (1 samples, 0.08%)</title><rect x="35.8320%" y="197" width="0.0824%" height="15" fill="rgb(251,73,21)" fg:x="435" fg:w="1"/><text x="36.0820%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (3 samples, 0.25%)</title><rect x="35.9143%" y="213" width="0.2471%" height="15" fill="rgb(254,121,25)" fg:x="436" fg:w="3"/><text x="36.1643%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="35.9967%" y="197" width="0.1647%" height="15" fill="rgb(215,161,49)" fg:x="437" fg:w="2"/><text x="36.2467%" y="207.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="36.0791%" y="181" width="0.0824%" height="15" fill="rgb(221,43,13)" fg:x="438" fg:w="1"/><text x="36.3291%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.49%)</title><rect x="35.7496%" y="229" width="0.4942%" height="15" fill="rgb(249,5,37)" fg:x="434" fg:w="6"/><text x="35.9996%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="36.1614%" y="213" width="0.0824%" height="15" fill="rgb(226,25,44)" fg:x="439" fg:w="1"/><text x="36.4114%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="36.1614%" y="197" width="0.0824%" height="15" fill="rgb(238,189,16)" fg:x="439" fg:w="1"/><text x="36.4114%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="36.1614%" y="181" width="0.0824%" height="15" fill="rgb(251,186,8)" fg:x="439" fg:w="1"/><text x="36.4114%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.1614%" y="165" width="0.0824%" height="15" fill="rgb(254,34,31)" fg:x="439" fg:w="1"/><text x="36.4114%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.58%)</title><rect x="35.7496%" y="261" width="0.5766%" height="15" fill="rgb(225,215,27)" fg:x="434" fg:w="7"/><text x="35.9996%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.58%)</title><rect x="35.7496%" y="245" width="0.5766%" height="15" fill="rgb(221,192,48)" fg:x="434" fg:w="7"/><text x="35.9996%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="36.2438%" y="229" width="0.0824%" height="15" fill="rgb(219,137,20)" fg:x="440" fg:w="1"/><text x="36.4938%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="36.2438%" y="213" width="0.0824%" height="15" fill="rgb(219,84,11)" fg:x="440" fg:w="1"/><text x="36.4938%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::finish (1 samples, 0.08%)</title><rect x="36.3262%" y="229" width="0.0824%" height="15" fill="rgb(224,10,23)" fg:x="441" fg:w="1"/><text x="36.5762%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::HirFrame::unwrap_expr (1 samples, 0.08%)</title><rect x="36.3262%" y="213" width="0.0824%" height="15" fill="rgb(248,22,39)" fg:x="441" fg:w="1"/><text x="36.5762%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="36.4086%" y="229" width="0.1647%" height="15" fill="rgb(212,154,20)" fg:x="442" fg:w="2"/><text x="36.6586%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="36.5733%" y="229" width="0.0824%" height="15" fill="rgb(236,199,50)" fg:x="444" fg:w="1"/><text x="36.8233%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="36.5733%" y="213" width="0.0824%" height="15" fill="rgb(211,9,17)" fg:x="444" fg:w="1"/><text x="36.8233%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="36.5733%" y="197" width="0.0824%" height="15" fill="rgb(243,216,36)" fg:x="444" fg:w="1"/><text x="36.8233%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="36.5733%" y="181" width="0.0824%" height="15" fill="rgb(250,2,10)" fg:x="444" fg:w="1"/><text x="36.8233%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.5733%" y="165" width="0.0824%" height="15" fill="rgb(226,50,48)" fg:x="444" fg:w="1"/><text x="36.8233%" y="175.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.41%)</title><rect x="36.3262%" y="261" width="0.4119%" height="15" fill="rgb(243,81,16)" fg:x="441" fg:w="5"/><text x="36.5762%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.41%)</title><rect x="36.3262%" y="245" width="0.4119%" height="15" fill="rgb(250,14,2)" fg:x="441" fg:w="5"/><text x="36.5762%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="36.6557%" y="229" width="0.0824%" height="15" fill="rgb(233,135,29)" fg:x="445" fg:w="1"/><text x="36.9057%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="36.6557%" y="213" width="0.0824%" height="15" fill="rgb(224,64,43)" fg:x="445" fg:w="1"/><text x="36.9057%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.6557%" y="197" width="0.0824%" height="15" fill="rgb(238,84,13)" fg:x="445" fg:w="1"/><text x="36.9057%" y="207.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (248 samples, 20.43%)</title><rect x="16.3921%" y="277" width="20.4283%" height="15" fill="rgb(253,48,26)" fg:x="199" fg:w="248"/><text x="16.6421%" y="287.50">regex_automata::meta::regex::Bui..</text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="36.7381%" y="261" width="0.0824%" height="15" fill="rgb(205,223,31)" fg:x="446" fg:w="1"/><text x="36.9881%" y="271.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="36.7381%" y="245" width="0.0824%" height="15" fill="rgb(221,41,32)" fg:x="446" fg:w="1"/><text x="36.9881%" y="255.50"></text></g><g><title>regex::regex::string::Regex::new (249 samples, 20.51%)</title><rect x="16.3921%" y="309" width="20.5107%" height="15" fill="rgb(213,158,31)" fg:x="199" fg:w="249"/><text x="16.6421%" y="319.50">regex::regex::string::Regex::new</text></g><g><title>regex::builders::Builder::build_one_string (249 samples, 20.51%)</title><rect x="16.3921%" y="293" width="20.5107%" height="15" fill="rgb(245,126,43)" fg:x="199" fg:w="249"/><text x="16.6421%" y="303.50">regex::builders::Builder::build_..</text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="36.8204%" y="277" width="0.0824%" height="15" fill="rgb(227,7,22)" fg:x="447" fg:w="1"/><text x="37.0704%" y="287.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="36.8204%" y="261" width="0.0824%" height="15" fill="rgb(252,90,44)" fg:x="447" fg:w="1"/><text x="37.0704%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="37.3970%" y="229" width="0.1647%" height="15" fill="rgb(253,91,0)" fg:x="454" fg:w="2"/><text x="37.6470%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="37.3970%" y="213" width="0.1647%" height="15" fill="rgb(252,175,49)" fg:x="454" fg:w="2"/><text x="37.6470%" y="223.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="37.3970%" y="197" width="0.1647%" height="15" fill="rgb(246,150,1)" fg:x="454" fg:w="2"/><text x="37.6470%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="37.5618%" y="213" width="0.0824%" height="15" fill="rgb(241,192,25)" fg:x="456" fg:w="1"/><text x="37.8118%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="37.5618%" y="197" width="0.0824%" height="15" fill="rgb(239,187,11)" fg:x="456" fg:w="1"/><text x="37.8118%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.66%)</title><rect x="37.0675%" y="245" width="0.6590%" height="15" fill="rgb(218,202,51)" fg:x="450" fg:w="8"/><text x="37.3175%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="37.5618%" y="229" width="0.1647%" height="15" fill="rgb(225,176,8)" fg:x="456" fg:w="2"/><text x="37.8118%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="37.6442%" y="213" width="0.0824%" height="15" fill="rgb(219,122,41)" fg:x="457" fg:w="1"/><text x="37.8942%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.74%)</title><rect x="37.0675%" y="261" width="0.7414%" height="15" fill="rgb(248,140,20)" fg:x="450" fg:w="9"/><text x="37.3175%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="37.7265%" y="245" width="0.0824%" height="15" fill="rgb(245,41,37)" fg:x="458" fg:w="1"/><text x="37.9765%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="37.7265%" y="229" width="0.0824%" height="15" fill="rgb(235,82,39)" fg:x="458" fg:w="1"/><text x="37.9765%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.7265%" y="213" width="0.0824%" height="15" fill="rgb(230,108,42)" fg:x="458" fg:w="1"/><text x="37.9765%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.7265%" y="197" width="0.0824%" height="15" fill="rgb(215,150,50)" fg:x="458" fg:w="1"/><text x="37.9765%" y="207.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (273 samples, 22.49%)</title><rect x="15.4036%" y="325" width="22.4876%" height="15" fill="rgb(233,212,5)" fg:x="187" fg:w="273"/><text x="15.6536%" y="335.50">indefinite::helper::Helper::get_firs..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (12 samples, 0.99%)</title><rect x="36.9028%" y="309" width="0.9885%" height="15" fill="rgb(245,80,22)" fg:x="448" fg:w="12"/><text x="37.1528%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (11 samples, 0.91%)</title><rect x="36.9852%" y="293" width="0.9061%" height="15" fill="rgb(238,129,16)" fg:x="449" fg:w="11"/><text x="37.2352%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (11 samples, 0.91%)</title><rect x="36.9852%" y="277" width="0.9061%" height="15" fill="rgb(240,19,0)" fg:x="449" fg:w="11"/><text x="37.2352%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="37.8089%" y="261" width="0.0824%" height="15" fill="rgb(232,42,35)" fg:x="459" fg:w="1"/><text x="38.0589%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="37.8089%" y="245" width="0.0824%" height="15" fill="rgb(223,130,24)" fg:x="459" fg:w="1"/><text x="38.0589%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="37.8089%" y="229" width="0.0824%" height="15" fill="rgb(237,16,22)" fg:x="459" fg:w="1"/><text x="38.0589%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="37.8913%" y="277" width="0.0824%" height="15" fill="rgb(248,192,20)" fg:x="460" fg:w="1"/><text x="38.1413%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="37.8913%" y="261" width="0.0824%" height="15" fill="rgb(233,167,2)" fg:x="460" fg:w="1"/><text x="38.1413%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="37.8913%" y="245" width="0.0824%" height="15" fill="rgb(252,71,44)" fg:x="460" fg:w="1"/><text x="38.1413%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="37.8913%" y="309" width="0.1647%" height="15" fill="rgb(238,37,47)" fg:x="460" fg:w="2"/><text x="38.1413%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="37.8913%" y="293" width="0.1647%" height="15" fill="rgb(214,202,54)" fg:x="460" fg:w="2"/><text x="38.1413%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="37.9736%" y="277" width="0.0824%" height="15" fill="rgb(254,165,40)" fg:x="461" fg:w="1"/><text x="38.2236%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="38.0560%" y="293" width="0.0824%" height="15" fill="rgb(246,173,38)" fg:x="462" fg:w="1"/><text x="38.3060%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="38.0560%" y="277" width="0.0824%" height="15" fill="rgb(215,3,27)" fg:x="462" fg:w="1"/><text x="38.3060%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="38.0560%" y="261" width="0.0824%" height="15" fill="rgb(239,169,51)" fg:x="462" fg:w="1"/><text x="38.3060%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="38.0560%" y="245" width="0.0824%" height="15" fill="rgb(212,5,25)" fg:x="462" fg:w="1"/><text x="38.3060%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="38.0560%" y="229" width="0.0824%" height="15" fill="rgb(243,45,17)" fg:x="462" fg:w="1"/><text x="38.3060%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::Cache::new (1 samples, 0.08%)</title><rect x="38.1384%" y="245" width="0.0824%" height="15" fill="rgb(242,97,9)" fg:x="463" fg:w="1"/><text x="38.3884%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="38.1384%" y="229" width="0.0824%" height="15" fill="rgb(228,71,31)" fg:x="463" fg:w="1"/><text x="38.3884%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.7974%" y="181" width="0.0824%" height="15" fill="rgb(252,184,16)" fg:x="471" fg:w="1"/><text x="39.0474%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.33%)</title><rect x="38.6326%" y="213" width="0.3295%" height="15" fill="rgb(236,169,46)" fg:x="469" fg:w="4"/><text x="38.8826%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="38.7150%" y="197" width="0.2471%" height="15" fill="rgb(207,17,47)" fg:x="470" fg:w="3"/><text x="38.9650%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="38.8797%" y="181" width="0.0824%" height="15" fill="rgb(206,201,28)" fg:x="472" fg:w="1"/><text x="39.1297%" y="191.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (18 samples, 1.48%)</title><rect x="38.0560%" y="309" width="1.4827%" height="15" fill="rgb(224,184,23)" fg:x="462" fg:w="18"/><text x="38.3060%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (17 samples, 1.40%)</title><rect x="38.1384%" y="293" width="1.4003%" height="15" fill="rgb(208,139,48)" fg:x="463" fg:w="17"/><text x="38.3884%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (17 samples, 1.40%)</title><rect x="38.1384%" y="277" width="1.4003%" height="15" fill="rgb(208,130,10)" fg:x="463" fg:w="17"/><text x="38.3884%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (17 samples, 1.40%)</title><rect x="38.1384%" y="261" width="1.4003%" height="15" fill="rgb(211,213,45)" fg:x="463" fg:w="17"/><text x="38.3884%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (16 samples, 1.32%)</title><rect x="38.2208%" y="245" width="1.3180%" height="15" fill="rgb(235,100,30)" fg:x="464" fg:w="16"/><text x="38.4708%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (16 samples, 1.32%)</title><rect x="38.2208%" y="229" width="1.3180%" height="15" fill="rgb(206,144,31)" fg:x="464" fg:w="16"/><text x="38.4708%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (7 samples, 0.58%)</title><rect x="38.9621%" y="213" width="0.5766%" height="15" fill="rgb(224,200,26)" fg:x="473" fg:w="7"/><text x="39.2121%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="39.6211%" y="293" width="0.0824%" height="15" fill="rgb(247,104,53)" fg:x="481" fg:w="1"/><text x="39.8711%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="39.6211%" y="277" width="0.0824%" height="15" fill="rgb(220,14,17)" fg:x="481" fg:w="1"/><text x="39.8711%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="39.8682%" y="229" width="0.0824%" height="15" fill="rgb(230,140,40)" fg:x="484" fg:w="1"/><text x="40.1182%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="39.8682%" y="213" width="0.0824%" height="15" fill="rgb(229,2,41)" fg:x="484" fg:w="1"/><text x="40.1182%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (3 samples, 0.25%)</title><rect x="39.7858%" y="245" width="0.2471%" height="15" fill="rgb(232,89,16)" fg:x="483" fg:w="3"/><text x="40.0358%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.9506%" y="229" width="0.0824%" height="15" fill="rgb(247,59,52)" fg:x="485" fg:w="1"/><text x="40.2006%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.33%)</title><rect x="39.7858%" y="261" width="0.3295%" height="15" fill="rgb(226,110,21)" fg:x="483" fg:w="4"/><text x="40.0358%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.0329%" y="245" width="0.0824%" height="15" fill="rgb(224,176,43)" fg:x="486" fg:w="1"/><text x="40.2829%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="40.1153%" y="229" width="0.0824%" height="15" fill="rgb(221,73,6)" fg:x="487" fg:w="1"/><text x="40.3653%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.25%)</title><rect x="40.1977%" y="229" width="0.2471%" height="15" fill="rgb(232,78,19)" fg:x="488" fg:w="3"/><text x="40.4477%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (5 samples, 0.41%)</title><rect x="40.1153%" y="261" width="0.4119%" height="15" fill="rgb(233,112,48)" fg:x="487" fg:w="5"/><text x="40.3653%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (5 samples, 0.41%)</title><rect x="40.1153%" y="245" width="0.4119%" height="15" fill="rgb(243,131,47)" fg:x="487" fg:w="5"/><text x="40.3653%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="40.4448%" y="229" width="0.0824%" height="15" fill="rgb(226,51,1)" fg:x="491" fg:w="1"/><text x="40.6948%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="40.4448%" y="213" width="0.0824%" height="15" fill="rgb(247,58,7)" fg:x="491" fg:w="1"/><text x="40.6948%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.8567%" y="229" width="0.0824%" height="15" fill="rgb(209,7,32)" fg:x="496" fg:w="1"/><text x="41.1067%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (43 samples, 3.54%)</title><rect x="40.7743%" y="245" width="3.5420%" height="15" fill="rgb(209,39,41)" fg:x="495" fg:w="43"/><text x="41.0243%" y="255.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (41 samples, 3.38%)</title><rect x="40.9390%" y="229" width="3.3773%" height="15" fill="rgb(226,182,46)" fg:x="497" fg:w="41"/><text x="41.1890%" y="239.50">cor..</text></g><g><title>__libc_free (4 samples, 0.33%)</title><rect x="43.9868%" y="213" width="0.3295%" height="15" fill="rgb(230,219,10)" fg:x="534" fg:w="4"/><text x="44.2368%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (7 samples, 0.58%)</title><rect x="44.3163%" y="229" width="0.5766%" height="15" fill="rgb(227,175,30)" fg:x="538" fg:w="7"/><text x="44.5663%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (8 samples, 0.66%)</title><rect x="44.3163%" y="245" width="0.6590%" height="15" fill="rgb(217,2,50)" fg:x="538" fg:w="8"/><text x="44.5663%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="44.8929%" y="229" width="0.0824%" height="15" fill="rgb(229,160,0)" fg:x="545" fg:w="1"/><text x="45.1429%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="44.8929%" y="213" width="0.0824%" height="15" fill="rgb(207,78,37)" fg:x="545" fg:w="1"/><text x="45.1429%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="45.3871%" y="213" width="0.0824%" height="15" fill="rgb(225,57,0)" fg:x="551" fg:w="1"/><text x="45.6371%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="45.3871%" y="197" width="0.0824%" height="15" fill="rgb(232,154,2)" fg:x="551" fg:w="1"/><text x="45.6371%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (5 samples, 0.41%)</title><rect x="45.4695%" y="213" width="0.4119%" height="15" fill="rgb(241,212,25)" fg:x="552" fg:w="5"/><text x="45.7195%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (4 samples, 0.33%)</title><rect x="45.5519%" y="197" width="0.3295%" height="15" fill="rgb(226,69,20)" fg:x="553" fg:w="4"/><text x="45.8019%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="45.7166%" y="181" width="0.1647%" height="15" fill="rgb(247,184,54)" fg:x="555" fg:w="2"/><text x="45.9666%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="45.7166%" y="165" width="0.1647%" height="15" fill="rgb(210,145,0)" fg:x="555" fg:w="2"/><text x="45.9666%" y="175.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="45.7166%" y="149" width="0.1647%" height="15" fill="rgb(253,82,12)" fg:x="555" fg:w="2"/><text x="45.9666%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (6 samples, 0.49%)</title><rect x="45.8814%" y="213" width="0.4942%" height="15" fill="rgb(245,42,11)" fg:x="557" fg:w="6"/><text x="46.1314%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (6 samples, 0.49%)</title><rect x="45.8814%" y="197" width="0.4942%" height="15" fill="rgb(219,147,32)" fg:x="557" fg:w="6"/><text x="46.1314%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (6 samples, 0.49%)</title><rect x="45.8814%" y="181" width="0.4942%" height="15" fill="rgb(246,12,7)" fg:x="557" fg:w="6"/><text x="46.1314%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (18 samples, 1.48%)</title><rect x="44.9753%" y="245" width="1.4827%" height="15" fill="rgb(243,50,9)" fg:x="546" fg:w="18"/><text x="45.2253%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (18 samples, 1.48%)</title><rect x="44.9753%" y="229" width="1.4827%" height="15" fill="rgb(219,149,6)" fg:x="546" fg:w="18"/><text x="45.2253%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="46.3756%" y="213" width="0.0824%" height="15" fill="rgb(241,51,42)" fg:x="563" fg:w="1"/><text x="46.6256%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="46.3756%" y="197" width="0.0824%" height="15" fill="rgb(226,128,27)" fg:x="563" fg:w="1"/><text x="46.6256%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="46.4580%" y="245" width="0.0824%" height="15" fill="rgb(244,144,4)" fg:x="564" fg:w="1"/><text x="46.7080%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="46.4580%" y="229" width="0.0824%" height="15" fill="rgb(221,4,13)" fg:x="564" fg:w="1"/><text x="46.7080%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="46.4580%" y="213" width="0.0824%" height="15" fill="rgb(208,170,28)" fg:x="564" fg:w="1"/><text x="46.7080%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="46.4580%" y="197" width="0.0824%" height="15" fill="rgb(226,131,13)" fg:x="564" fg:w="1"/><text x="46.7080%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="47.0346%" y="197" width="0.0824%" height="15" fill="rgb(215,72,41)" fg:x="571" fg:w="1"/><text x="47.2846%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="47.0346%" y="181" width="0.0824%" height="15" fill="rgb(243,108,20)" fg:x="571" fg:w="1"/><text x="47.2846%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.0346%" y="165" width="0.0824%" height="15" fill="rgb(230,189,17)" fg:x="571" fg:w="1"/><text x="47.2846%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="47.0346%" y="149" width="0.0824%" height="15" fill="rgb(220,50,17)" fg:x="571" fg:w="1"/><text x="47.2846%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="47.2817%" y="181" width="0.0824%" height="15" fill="rgb(248,152,48)" fg:x="574" fg:w="1"/><text x="47.5317%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="47.3641%" y="165" width="0.0824%" height="15" fill="rgb(244,91,11)" fg:x="575" fg:w="1"/><text x="47.6141%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::ClassUnicodeIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.25%)</title><rect x="48.6820%" y="133" width="0.2471%" height="15" fill="rgb(220,157,5)" fg:x="591" fg:w="3"/><text x="48.9320%" y="143.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.49%)</title><rect x="48.9292%" y="133" width="0.4942%" height="15" fill="rgb(253,137,8)" fg:x="594" fg:w="6"/><text x="49.1792%" y="143.50"></text></g><g><title>__libc_free (3 samples, 0.25%)</title><rect x="49.4234%" y="133" width="0.2471%" height="15" fill="rgb(217,137,51)" fg:x="600" fg:w="3"/><text x="49.6734%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (9 samples, 0.74%)</title><rect x="49.6705%" y="133" width="0.7414%" height="15" fill="rgb(218,209,53)" fg:x="603" fg:w="9"/><text x="49.9205%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.49%)</title><rect x="49.9176%" y="117" width="0.4942%" height="15" fill="rgb(249,137,25)" fg:x="606" fg:w="6"/><text x="50.1676%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.49%)</title><rect x="49.9176%" y="101" width="0.4942%" height="15" fill="rgb(239,155,26)" fg:x="606" fg:w="6"/><text x="50.1676%" y="111.50"></text></g><g><title>realloc (6 samples, 0.49%)</title><rect x="49.9176%" y="85" width="0.4942%" height="15" fill="rgb(227,85,46)" fg:x="606" fg:w="6"/><text x="50.1676%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="50.4119%" y="133" width="0.1647%" height="15" fill="rgb(251,107,43)" fg:x="612" fg:w="2"/><text x="50.6619%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="50.4942%" y="117" width="0.0824%" height="15" fill="rgb(234,170,33)" fg:x="613" fg:w="1"/><text x="50.7442%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="50.9885%" y="69" width="0.0824%" height="15" fill="rgb(206,29,35)" fg:x="619" fg:w="1"/><text x="51.2385%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.25%)</title><rect x="50.9885%" y="101" width="0.2471%" height="15" fill="rgb(227,138,25)" fg:x="619" fg:w="3"/><text x="51.2385%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="50.9885%" y="85" width="0.2471%" height="15" fill="rgb(249,131,35)" fg:x="619" fg:w="3"/><text x="51.2385%" y="95.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="51.0708%" y="69" width="0.1647%" height="15" fill="rgb(239,6,40)" fg:x="620" fg:w="2"/><text x="51.3208%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (14 samples, 1.15%)</title><rect x="50.5766%" y="133" width="1.1532%" height="15" fill="rgb(246,136,47)" fg:x="614" fg:w="14"/><text x="50.8266%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (12 samples, 0.99%)</title><rect x="50.7414%" y="117" width="0.9885%" height="15" fill="rgb(253,58,26)" fg:x="616" fg:w="12"/><text x="50.9914%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (6 samples, 0.49%)</title><rect x="51.2356%" y="101" width="0.4942%" height="15" fill="rgb(237,141,10)" fg:x="622" fg:w="6"/><text x="51.4856%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="51.7298%" y="117" width="0.0824%" height="15" fill="rgb(234,156,12)" fg:x="628" fg:w="1"/><text x="51.9798%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="51.7298%" y="101" width="0.0824%" height="15" fill="rgb(243,224,36)" fg:x="628" fg:w="1"/><text x="51.9798%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.7298%" y="85" width="0.0824%" height="15" fill="rgb(205,229,51)" fg:x="628" fg:w="1"/><text x="51.9798%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="51.7298%" y="69" width="0.0824%" height="15" fill="rgb(223,189,4)" fg:x="628" fg:w="1"/><text x="51.9798%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (125 samples, 10.30%)</title><rect x="51.7298%" y="133" width="10.2965%" height="15" fill="rgb(249,167,54)" fg:x="628" fg:w="125"/><text x="51.9798%" y="143.50">regex_automata:..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (124 samples, 10.21%)</title><rect x="51.8122%" y="117" width="10.2142%" height="15" fill="rgb(218,34,28)" fg:x="629" fg:w="124"/><text x="52.0622%" y="127.50">regex_automata:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (124 samples, 10.21%)</title><rect x="51.8122%" y="101" width="10.2142%" height="15" fill="rgb(232,109,42)" fg:x="629" fg:w="124"/><text x="52.0622%" y="111.50">alloc::vec::Vec..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (7 samples, 0.58%)</title><rect x="62.0264%" y="133" width="0.5766%" height="15" fill="rgb(248,214,46)" fg:x="753" fg:w="7"/><text x="62.2764%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.5206%" y="117" width="0.0824%" height="15" fill="rgb(244,216,40)" fg:x="759" fg:w="1"/><text x="62.7706%" y="127.50"></text></g><g><title>regex_syntax::hir::ClassUnicodeRange::start (1 samples, 0.08%)</title><rect x="62.6030%" y="133" width="0.0824%" height="15" fill="rgb(231,226,31)" fg:x="760" fg:w="1"/><text x="62.8530%" y="143.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (4 samples, 0.33%)</title><rect x="62.6853%" y="133" width="0.3295%" height="15" fill="rgb(238,38,43)" fg:x="761" fg:w="4"/><text x="62.9353%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (207 samples, 17.05%)</title><rect x="46.7051%" y="229" width="17.0511%" height="15" fill="rgb(208,88,43)" fg:x="567" fg:w="207"/><text x="46.9551%" y="239.50">&lt;core::iter::adapters::map..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (207 samples, 17.05%)</title><rect x="46.7051%" y="213" width="17.0511%" height="15" fill="rgb(205,136,37)" fg:x="567" fg:w="207"/><text x="46.9551%" y="223.50">regex_automata::nfa::thomp..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (202 samples, 16.64%)</title><rect x="47.1170%" y="197" width="16.6392%" height="15" fill="rgb(237,34,14)" fg:x="572" fg:w="202"/><text x="47.3670%" y="207.50">regex_automata::nfa::thomp..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (199 samples, 16.39%)</title><rect x="47.3641%" y="181" width="16.3921%" height="15" fill="rgb(236,193,44)" fg:x="575" fg:w="199"/><text x="47.6141%" y="191.50">regex_automata::nfa::thom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (198 samples, 16.31%)</title><rect x="47.4465%" y="165" width="16.3097%" height="15" fill="rgb(231,48,10)" fg:x="576" fg:w="198"/><text x="47.6965%" y="175.50">regex_automata::nfa::thom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (198 samples, 16.31%)</title><rect x="47.4465%" y="149" width="16.3097%" height="15" fill="rgb(213,141,34)" fg:x="576" fg:w="198"/><text x="47.6965%" y="159.50">regex_automata::nfa::thom..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (9 samples, 0.74%)</title><rect x="63.0148%" y="133" width="0.7414%" height="15" fill="rgb(249,130,34)" fg:x="765" fg:w="9"/><text x="63.2648%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.58%)</title><rect x="63.1796%" y="117" width="0.5766%" height="15" fill="rgb(219,42,41)" fg:x="767" fg:w="7"/><text x="63.4296%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.49%)</title><rect x="63.2619%" y="101" width="0.4942%" height="15" fill="rgb(224,100,54)" fg:x="768" fg:w="6"/><text x="63.5119%" y="111.50"></text></g><g><title>__libc_malloc (6 samples, 0.49%)</title><rect x="63.2619%" y="85" width="0.4942%" height="15" fill="rgb(229,200,27)" fg:x="768" fg:w="6"/><text x="63.5119%" y="95.50"></text></g><g><title>__libc_calloc (2 samples, 0.16%)</title><rect x="63.9209%" y="213" width="0.1647%" height="15" fill="rgb(217,118,10)" fg:x="776" fg:w="2"/><text x="64.1709%" y="223.50"></text></g><g><title>__libc_malloc (3 samples, 0.25%)</title><rect x="64.0857%" y="213" width="0.2471%" height="15" fill="rgb(206,22,3)" fg:x="778" fg:w="3"/><text x="64.3357%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="64.3328%" y="213" width="0.0824%" height="15" fill="rgb(232,163,46)" fg:x="781" fg:w="1"/><text x="64.5828%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.3328%" y="197" width="0.0824%" height="15" fill="rgb(206,95,13)" fg:x="781" fg:w="1"/><text x="64.5828%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.3328%" y="181" width="0.0824%" height="15" fill="rgb(253,154,18)" fg:x="781" fg:w="1"/><text x="64.5828%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (19 samples, 1.57%)</title><rect x="64.4152%" y="213" width="1.5651%" height="15" fill="rgb(219,32,23)" fg:x="782" fg:w="19"/><text x="64.6652%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.49%)</title><rect x="65.4860%" y="197" width="0.4942%" height="15" fill="rgb(230,191,45)" fg:x="795" fg:w="6"/><text x="65.7360%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.41%)</title><rect x="65.5684%" y="181" width="0.4119%" height="15" fill="rgb(229,64,36)" fg:x="796" fg:w="5"/><text x="65.8184%" y="191.50"></text></g><g><title>realloc (5 samples, 0.41%)</title><rect x="65.5684%" y="165" width="0.4119%" height="15" fill="rgb(205,129,25)" fg:x="796" fg:w="5"/><text x="65.8184%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.25%)</title><rect x="65.9802%" y="213" width="0.2471%" height="15" fill="rgb(254,112,7)" fg:x="801" fg:w="3"/><text x="66.2302%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.1450%" y="197" width="0.0824%" height="15" fill="rgb(226,53,48)" fg:x="803" fg:w="1"/><text x="66.3950%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.1450%" y="181" width="0.0824%" height="15" fill="rgb(214,153,38)" fg:x="803" fg:w="1"/><text x="66.3950%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="66.2273%" y="213" width="0.1647%" height="15" fill="rgb(243,101,7)" fg:x="804" fg:w="2"/><text x="66.4773%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (242 samples, 19.93%)</title><rect x="46.5404%" y="245" width="19.9341%" height="15" fill="rgb(240,140,22)" fg:x="565" fg:w="242"/><text x="46.7904%" y="255.50">regex_automata::nfa::thompson::..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (33 samples, 2.72%)</title><rect x="63.7562%" y="229" width="2.7183%" height="15" fill="rgb(235,114,2)" fg:x="774" fg:w="33"/><text x="64.0062%" y="239.50">re..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="66.3921%" y="213" width="0.0824%" height="15" fill="rgb(242,59,12)" fg:x="806" fg:w="1"/><text x="66.6421%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.3921%" y="197" width="0.0824%" height="15" fill="rgb(252,134,9)" fg:x="806" fg:w="1"/><text x="66.6421%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.3921%" y="181" width="0.0824%" height="15" fill="rgb(236,4,44)" fg:x="806" fg:w="1"/><text x="66.6421%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="66.3921%" y="165" width="0.0824%" height="15" fill="rgb(254,172,41)" fg:x="806" fg:w="1"/><text x="66.6421%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (316 samples, 26.03%)</title><rect x="40.5272%" y="261" width="26.0297%" height="15" fill="rgb(244,63,20)" fg:x="492" fg:w="316"/><text x="40.7772%" y="271.50">regex_automata::meta::strategy::new</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="66.4745%" y="245" width="0.0824%" height="15" fill="rgb(250,73,31)" fg:x="807" fg:w="1"/><text x="66.7245%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="66.4745%" y="229" width="0.0824%" height="15" fill="rgb(241,38,36)" fg:x="807" fg:w="1"/><text x="66.7245%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="66.5568%" y="213" width="0.0824%" height="15" fill="rgb(245,211,2)" fg:x="808" fg:w="1"/><text x="66.8068%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="66.5568%" y="197" width="0.0824%" height="15" fill="rgb(206,120,28)" fg:x="808" fg:w="1"/><text x="66.8068%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.25%)</title><rect x="66.5568%" y="261" width="0.2471%" height="15" fill="rgb(211,59,34)" fg:x="808" fg:w="3"/><text x="66.8068%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.25%)</title><rect x="66.5568%" y="245" width="0.2471%" height="15" fill="rgb(233,168,5)" fg:x="808" fg:w="3"/><text x="66.8068%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.25%)</title><rect x="66.5568%" y="229" width="0.2471%" height="15" fill="rgb(234,33,13)" fg:x="808" fg:w="3"/><text x="66.8068%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="66.6392%" y="213" width="0.1647%" height="15" fill="rgb(231,150,26)" fg:x="809" fg:w="2"/><text x="66.8892%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="66.6392%" y="197" width="0.1647%" height="15" fill="rgb(217,191,4)" fg:x="809" fg:w="2"/><text x="66.8892%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="66.6392%" y="181" width="0.1647%" height="15" fill="rgb(246,198,38)" fg:x="809" fg:w="2"/><text x="66.8892%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="66.6392%" y="165" width="0.1647%" height="15" fill="rgb(245,64,37)" fg:x="809" fg:w="2"/><text x="66.8892%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="67.2982%" y="197" width="0.1647%" height="15" fill="rgb(250,30,36)" fg:x="817" fg:w="2"/><text x="67.5482%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="67.2982%" y="181" width="0.1647%" height="15" fill="rgb(217,86,53)" fg:x="817" fg:w="2"/><text x="67.5482%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="67.2982%" y="165" width="0.1647%" height="15" fill="rgb(228,157,16)" fg:x="817" fg:w="2"/><text x="67.5482%" y="175.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (8 samples, 0.66%)</title><rect x="66.8863%" y="213" width="0.6590%" height="15" fill="rgb(217,59,31)" fg:x="812" fg:w="8"/><text x="67.1363%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::merge_sort::RunVec&lt;alloc::slice::stable_sort&lt;regex_syntax::ast::Span,&lt;regex_syntax::ast::Span as core::cmp::PartialOrd&gt;::lt&gt;::{{closure}},alloc::slice::stable_sort&lt;regex_syntax::ast::Span,&lt;regex_syntax::ast::Span as core::cmp::PartialOrd&gt;::lt&gt;::{{closure}}&gt;&gt; (1 samples, 0.08%)</title><rect x="67.4629%" y="197" width="0.0824%" height="15" fill="rgb(237,138,41)" fg:x="819" fg:w="1"/><text x="67.7129%" y="207.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="67.5453%" y="213" width="0.0824%" height="15" fill="rgb(227,91,49)" fg:x="820" fg:w="1"/><text x="67.7953%" y="223.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="67.5453%" y="197" width="0.0824%" height="15" fill="rgb(247,21,44)" fg:x="820" fg:w="1"/><text x="67.7953%" y="207.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="67.5453%" y="181" width="0.0824%" height="15" fill="rgb(219,210,51)" fg:x="820" fg:w="1"/><text x="67.7953%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (11 samples, 0.91%)</title><rect x="66.8040%" y="229" width="0.9061%" height="15" fill="rgb(209,140,6)" fg:x="811" fg:w="11"/><text x="67.0540%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="67.6277%" y="213" width="0.0824%" height="15" fill="rgb(221,188,24)" fg:x="821" fg:w="1"/><text x="67.8777%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="67.7100%" y="213" width="0.0824%" height="15" fill="rgb(232,154,20)" fg:x="822" fg:w="1"/><text x="67.9600%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="67.7100%" y="197" width="0.0824%" height="15" fill="rgb(244,137,50)" fg:x="822" fg:w="1"/><text x="67.9600%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.7100%" y="181" width="0.0824%" height="15" fill="rgb(225,185,43)" fg:x="822" fg:w="1"/><text x="67.9600%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="67.7100%" y="229" width="0.1647%" height="15" fill="rgb(213,205,38)" fg:x="822" fg:w="2"/><text x="67.9600%" y="239.50"></text></g><g><title>regex_syntax::hir::Properties::capture (1 samples, 0.08%)</title><rect x="67.7924%" y="213" width="0.0824%" height="15" fill="rgb(236,73,12)" fg:x="823" fg:w="1"/><text x="68.0424%" y="223.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (344 samples, 28.34%)</title><rect x="39.7035%" y="277" width="28.3361%" height="15" fill="rgb(235,219,13)" fg:x="482" fg:w="344"/><text x="39.9535%" y="287.50">regex_automata::meta::regex::Builder::build</text></g><g><title>regex_syntax::hir::translate::Translator::translate (15 samples, 1.24%)</title><rect x="66.8040%" y="261" width="1.2356%" height="15" fill="rgb(218,59,36)" fg:x="811" fg:w="15"/><text x="67.0540%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (15 samples, 1.24%)</title><rect x="66.8040%" y="245" width="1.2356%" height="15" fill="rgb(205,110,39)" fg:x="811" fg:w="15"/><text x="67.0540%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (2 samples, 0.16%)</title><rect x="67.8748%" y="229" width="0.1647%" height="15" fill="rgb(218,206,42)" fg:x="824" fg:w="2"/><text x="68.1248%" y="239.50"></text></g><g><title>indefinite::rules::number::Number::check (367 samples, 30.23%)</title><rect x="37.8913%" y="325" width="30.2306%" height="15" fill="rgb(248,125,24)" fg:x="460" fg:w="367"/><text x="38.1413%" y="335.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::new (347 samples, 28.58%)</title><rect x="39.5387%" y="309" width="28.5832%" height="15" fill="rgb(242,28,27)" fg:x="480" fg:w="347"/><text x="39.7887%" y="319.50">regex::regex::string::Regex::new</text></g><g><title>regex::builders::Builder::build_one_string (345 samples, 28.42%)</title><rect x="39.7035%" y="293" width="28.4185%" height="15" fill="rgb(216,228,15)" fg:x="482" fg:w="345"/><text x="39.9535%" y="303.50">regex::builders::Builder::build_one_string</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="68.0395%" y="277" width="0.0824%" height="15" fill="rgb(235,116,46)" fg:x="826" fg:w="1"/><text x="68.2895%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.1219%" y="309" width="0.0824%" height="15" fill="rgb(224,18,32)" fg:x="827" fg:w="1"/><text x="68.3719%" y="319.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="68.2043%" y="309" width="0.0824%" height="15" fill="rgb(252,5,12)" fg:x="828" fg:w="1"/><text x="68.4543%" y="319.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="68.2867%" y="309" width="0.0824%" height="15" fill="rgb(251,36,5)" fg:x="829" fg:w="1"/><text x="68.5367%" y="319.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_lower (1 samples, 0.08%)</title><rect x="68.2867%" y="293" width="0.0824%" height="15" fill="rgb(217,53,14)" fg:x="829" fg:w="1"/><text x="68.5367%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="68.4514%" y="261" width="0.0824%" height="15" fill="rgb(215,86,45)" fg:x="831" fg:w="1"/><text x="68.7014%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.4514%" y="245" width="0.0824%" height="15" fill="rgb(242,169,11)" fg:x="831" fg:w="1"/><text x="68.7014%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.4514%" y="229" width="0.0824%" height="15" fill="rgb(211,213,45)" fg:x="831" fg:w="1"/><text x="68.7014%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="68.4514%" y="213" width="0.0824%" height="15" fill="rgb(205,88,11)" fg:x="831" fg:w="1"/><text x="68.7014%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="68.4514%" y="197" width="0.0824%" height="15" fill="rgb(252,69,26)" fg:x="831" fg:w="1"/><text x="68.7014%" y="207.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="68.4514%" y="293" width="0.1647%" height="15" fill="rgb(246,123,37)" fg:x="831" fg:w="2"/><text x="68.7014%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="68.4514%" y="277" width="0.1647%" height="15" fill="rgb(212,205,5)" fg:x="831" fg:w="2"/><text x="68.7014%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="68.5338%" y="261" width="0.0824%" height="15" fill="rgb(253,148,0)" fg:x="832" fg:w="1"/><text x="68.7838%" y="271.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="68.5338%" y="245" width="0.0824%" height="15" fill="rgb(239,22,4)" fg:x="832" fg:w="1"/><text x="68.7838%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="68.5338%" y="229" width="0.0824%" height="15" fill="rgb(226,26,53)" fg:x="832" fg:w="1"/><text x="68.7838%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.5338%" y="213" width="0.0824%" height="15" fill="rgb(225,229,45)" fg:x="832" fg:w="1"/><text x="68.7838%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.5338%" y="197" width="0.0824%" height="15" fill="rgb(220,60,37)" fg:x="832" fg:w="1"/><text x="68.7838%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="68.6161%" y="261" width="0.0824%" height="15" fill="rgb(217,180,35)" fg:x="833" fg:w="1"/><text x="68.8661%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="68.6161%" y="245" width="0.0824%" height="15" fill="rgb(229,7,53)" fg:x="833" fg:w="1"/><text x="68.8661%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="68.6161%" y="229" width="0.0824%" height="15" fill="rgb(254,137,3)" fg:x="833" fg:w="1"/><text x="68.8661%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="68.6161%" y="293" width="0.1647%" height="15" fill="rgb(215,140,41)" fg:x="833" fg:w="2"/><text x="68.8661%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="68.6161%" y="277" width="0.1647%" height="15" fill="rgb(250,80,15)" fg:x="833" fg:w="2"/><text x="68.8661%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="68.6985%" y="261" width="0.0824%" height="15" fill="rgb(252,191,6)" fg:x="834" fg:w="1"/><text x="68.9485%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.6985%" y="245" width="0.0824%" height="15" fill="rgb(246,217,18)" fg:x="834" fg:w="1"/><text x="68.9485%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="68.9456%" y="245" width="0.1647%" height="15" fill="rgb(223,93,7)" fg:x="837" fg:w="2"/><text x="69.1956%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="68.9456%" y="229" width="0.1647%" height="15" fill="rgb(225,55,52)" fg:x="837" fg:w="2"/><text x="69.1956%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.0280%" y="213" width="0.0824%" height="15" fill="rgb(240,31,24)" fg:x="838" fg:w="1"/><text x="69.2780%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="69.1104%" y="245" width="0.1647%" height="15" fill="rgb(205,56,52)" fg:x="839" fg:w="2"/><text x="69.3604%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="69.1104%" y="229" width="0.1647%" height="15" fill="rgb(246,146,12)" fg:x="839" fg:w="2"/><text x="69.3604%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="69.1928%" y="213" width="0.0824%" height="15" fill="rgb(239,84,36)" fg:x="840" fg:w="1"/><text x="69.4428%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="69.1928%" y="197" width="0.0824%" height="15" fill="rgb(207,41,40)" fg:x="840" fg:w="1"/><text x="69.4428%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.1928%" y="181" width="0.0824%" height="15" fill="rgb(241,179,25)" fg:x="840" fg:w="1"/><text x="69.4428%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="69.1928%" y="165" width="0.0824%" height="15" fill="rgb(210,0,34)" fg:x="840" fg:w="1"/><text x="69.4428%" y="175.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="69.2751%" y="245" width="0.0824%" height="15" fill="rgb(225,217,29)" fg:x="841" fg:w="1"/><text x="69.5251%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.2751%" y="229" width="0.0824%" height="15" fill="rgb(216,191,38)" fg:x="841" fg:w="1"/><text x="69.5251%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="69.5222%" y="229" width="0.1647%" height="15" fill="rgb(232,140,52)" fg:x="844" fg:w="2"/><text x="69.7722%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.6046%" y="213" width="0.0824%" height="15" fill="rgb(223,158,51)" fg:x="845" fg:w="1"/><text x="69.8546%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.49%)</title><rect x="69.6870%" y="229" width="0.4942%" height="15" fill="rgb(235,29,51)" fg:x="846" fg:w="6"/><text x="69.9370%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (6 samples, 0.49%)</title><rect x="69.6870%" y="213" width="0.4942%" height="15" fill="rgb(215,181,18)" fg:x="846" fg:w="6"/><text x="69.9370%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (1 samples, 0.08%)</title><rect x="70.1812%" y="229" width="0.0824%" height="15" fill="rgb(227,125,34)" fg:x="852" fg:w="1"/><text x="70.4312%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="70.2636%" y="213" width="0.0824%" height="15" fill="rgb(230,197,49)" fg:x="853" fg:w="1"/><text x="70.5136%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="70.2636%" y="197" width="0.0824%" height="15" fill="rgb(239,141,16)" fg:x="853" fg:w="1"/><text x="70.5136%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="70.2636%" y="181" width="0.0824%" height="15" fill="rgb(225,105,43)" fg:x="853" fg:w="1"/><text x="70.5136%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="70.2636%" y="165" width="0.0824%" height="15" fill="rgb(214,131,14)" fg:x="853" fg:w="1"/><text x="70.5136%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="70.3460%" y="213" width="0.0824%" height="15" fill="rgb(229,177,11)" fg:x="854" fg:w="1"/><text x="70.5960%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="70.5107%" y="197" width="0.1647%" height="15" fill="rgb(231,180,14)" fg:x="856" fg:w="2"/><text x="70.7607%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.58%)</title><rect x="70.6755%" y="197" width="0.5766%" height="15" fill="rgb(232,88,2)" fg:x="858" fg:w="7"/><text x="70.9255%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="71.1697%" y="181" width="0.0824%" height="15" fill="rgb(205,220,8)" fg:x="864" fg:w="1"/><text x="71.4197%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (24 samples, 1.98%)</title><rect x="69.3575%" y="245" width="1.9769%" height="15" fill="rgb(225,23,53)" fg:x="842" fg:w="24"/><text x="69.6075%" y="255.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (13 samples, 1.07%)</title><rect x="70.2636%" y="229" width="1.0708%" height="15" fill="rgb(213,62,29)" fg:x="853" fg:w="13"/><text x="70.5136%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.91%)</title><rect x="70.4283%" y="213" width="0.9061%" height="15" fill="rgb(227,75,7)" fg:x="855" fg:w="11"/><text x="70.6783%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="71.2521%" y="197" width="0.0824%" height="15" fill="rgb(207,105,14)" fg:x="865" fg:w="1"/><text x="71.5021%" y="207.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="71.4168%" y="197" width="0.1647%" height="15" fill="rgb(245,62,29)" fg:x="867" fg:w="2"/><text x="71.6668%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="71.4992%" y="181" width="0.0824%" height="15" fill="rgb(236,202,4)" fg:x="868" fg:w="1"/><text x="71.7492%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="71.5815%" y="197" width="0.0824%" height="15" fill="rgb(250,67,1)" fg:x="869" fg:w="1"/><text x="71.8315%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="71.5815%" y="181" width="0.0824%" height="15" fill="rgb(253,115,44)" fg:x="869" fg:w="1"/><text x="71.8315%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="71.5815%" y="165" width="0.0824%" height="15" fill="rgb(251,139,18)" fg:x="869" fg:w="1"/><text x="71.8315%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (2 samples, 0.16%)</title><rect x="71.6639%" y="197" width="0.1647%" height="15" fill="rgb(218,22,32)" fg:x="870" fg:w="2"/><text x="71.9139%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="71.7463%" y="181" width="0.0824%" height="15" fill="rgb(243,53,5)" fg:x="871" fg:w="1"/><text x="71.9963%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.25%)</title><rect x="71.8287%" y="181" width="0.2471%" height="15" fill="rgb(227,56,16)" fg:x="872" fg:w="3"/><text x="72.0787%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="71.8287%" y="165" width="0.2471%" height="15" fill="rgb(245,53,0)" fg:x="872" fg:w="3"/><text x="72.0787%" y="175.50"></text></g><g><title>__libc_malloc (3 samples, 0.25%)</title><rect x="71.8287%" y="149" width="0.2471%" height="15" fill="rgb(216,170,35)" fg:x="872" fg:w="3"/><text x="72.0787%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (9 samples, 0.74%)</title><rect x="71.4168%" y="213" width="0.7414%" height="15" fill="rgb(211,200,8)" fg:x="867" fg:w="9"/><text x="71.6668%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (4 samples, 0.33%)</title><rect x="71.8287%" y="197" width="0.3295%" height="15" fill="rgb(228,204,44)" fg:x="872" fg:w="4"/><text x="72.0787%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="72.0758%" y="181" width="0.0824%" height="15" fill="rgb(214,121,17)" fg:x="875" fg:w="1"/><text x="72.3258%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (11 samples, 0.91%)</title><rect x="71.3344%" y="245" width="0.9061%" height="15" fill="rgb(233,64,38)" fg:x="866" fg:w="11"/><text x="71.5844%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (11 samples, 0.91%)</title><rect x="71.3344%" y="229" width="0.9061%" height="15" fill="rgb(253,54,19)" fg:x="866" fg:w="11"/><text x="71.5844%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="72.1582%" y="213" width="0.0824%" height="15" fill="rgb(253,94,18)" fg:x="876" fg:w="1"/><text x="72.4082%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (10 samples, 0.82%)</title><rect x="72.3229%" y="213" width="0.8237%" height="15" fill="rgb(227,57,52)" fg:x="878" fg:w="10"/><text x="72.5729%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (5 samples, 0.41%)</title><rect x="72.7348%" y="197" width="0.4119%" height="15" fill="rgb(230,228,50)" fg:x="883" fg:w="5"/><text x="72.9848%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="72.9819%" y="181" width="0.1647%" height="15" fill="rgb(217,205,27)" fg:x="886" fg:w="2"/><text x="73.2319%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="72.9819%" y="165" width="0.1647%" height="15" fill="rgb(252,71,50)" fg:x="886" fg:w="2"/><text x="73.2319%" y="175.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="72.9819%" y="149" width="0.1647%" height="15" fill="rgb(209,86,4)" fg:x="886" fg:w="2"/><text x="73.2319%" y="159.50"></text></g><g><title>regex::regex::string::Regex::new (54 samples, 4.45%)</title><rect x="68.7809%" y="293" width="4.4481%" height="15" fill="rgb(229,94,0)" fg:x="835" fg:w="54"/><text x="69.0309%" y="303.50">regex..</text></g><g><title>regex::builders::Builder::build_one_string (54 samples, 4.45%)</title><rect x="68.7809%" y="277" width="4.4481%" height="15" fill="rgb(252,223,21)" fg:x="835" fg:w="54"/><text x="69.0309%" y="287.50">regex..</text></g><g><title>regex_automata::meta::regex::Builder::build (53 samples, 4.37%)</title><rect x="68.8633%" y="261" width="4.3657%" height="15" fill="rgb(230,210,4)" fg:x="836" fg:w="53"/><text x="69.1133%" y="271.50">regex..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (12 samples, 0.99%)</title><rect x="72.2405%" y="245" width="0.9885%" height="15" fill="rgb(240,149,38)" fg:x="877" fg:w="12"/><text x="72.4905%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (12 samples, 0.99%)</title><rect x="72.2405%" y="229" width="0.9885%" height="15" fill="rgb(254,105,20)" fg:x="877" fg:w="12"/><text x="72.4905%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="73.1466%" y="213" width="0.0824%" height="15" fill="rgb(253,87,46)" fg:x="888" fg:w="1"/><text x="73.3966%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="73.1466%" y="197" width="0.0824%" height="15" fill="rgb(253,116,33)" fg:x="888" fg:w="1"/><text x="73.3966%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.3114%" y="229" width="0.0824%" height="15" fill="rgb(229,198,5)" fg:x="890" fg:w="1"/><text x="73.5614%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.8880%" y="213" width="0.0824%" height="15" fill="rgb(242,38,37)" fg:x="897" fg:w="1"/><text x="74.1380%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="73.8880%" y="197" width="0.0824%" height="15" fill="rgb(242,69,53)" fg:x="897" fg:w="1"/><text x="74.1380%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="73.8880%" y="181" width="0.0824%" height="15" fill="rgb(249,80,16)" fg:x="897" fg:w="1"/><text x="74.1380%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (10 samples, 0.82%)</title><rect x="73.3937%" y="229" width="0.8237%" height="15" fill="rgb(206,128,11)" fg:x="891" fg:w="10"/><text x="73.6437%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.25%)</title><rect x="73.9703%" y="213" width="0.2471%" height="15" fill="rgb(212,35,20)" fg:x="898" fg:w="3"/><text x="74.2203%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (12 samples, 0.99%)</title><rect x="73.3114%" y="245" width="0.9885%" height="15" fill="rgb(236,79,13)" fg:x="890" fg:w="12"/><text x="73.5614%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="74.2175%" y="229" width="0.0824%" height="15" fill="rgb(233,123,3)" fg:x="901" fg:w="1"/><text x="74.4675%" y="239.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (737 samples, 60.71%)</title><rect x="13.6738%" y="405" width="60.7084%" height="15" fill="rgb(214,93,52)" fg:x="166" fg:w="737"/><text x="13.9238%" y="415.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::ob..</text></g><g><title>plugins_core::looking::model::qualify_name (718 samples, 59.14%)</title><rect x="15.2389%" y="389" width="59.1433%" height="15" fill="rgb(251,37,40)" fg:x="185" fg:w="718"/><text x="15.4889%" y="399.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (718 samples, 59.14%)</title><rect x="15.2389%" y="373" width="59.1433%" height="15" fill="rgb(227,80,54)" fg:x="185" fg:w="718"/><text x="15.4889%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (718 samples, 59.14%)</title><rect x="15.2389%" y="357" width="59.1433%" height="15" fill="rgb(254,48,11)" fg:x="185" fg:w="718"/><text x="15.4889%" y="367.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (718 samples, 59.14%)</title><rect x="15.2389%" y="341" width="59.1433%" height="15" fill="rgb(235,193,26)" fg:x="185" fg:w="718"/><text x="15.4889%" y="351.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (76 samples, 6.26%)</title><rect x="68.1219%" y="325" width="6.2603%" height="15" fill="rgb(229,99,21)" fg:x="827" fg:w="76"/><text x="68.3719%" y="335.50">indefini..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (73 samples, 6.01%)</title><rect x="68.3690%" y="309" width="6.0132%" height="15" fill="rgb(211,140,41)" fg:x="830" fg:w="73"/><text x="68.6190%" y="319.50">indefini..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (14 samples, 1.15%)</title><rect x="73.2290%" y="293" width="1.1532%" height="15" fill="rgb(240,227,30)" fg:x="889" fg:w="14"/><text x="73.4790%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (14 samples, 1.15%)</title><rect x="73.2290%" y="277" width="1.1532%" height="15" fill="rgb(215,224,45)" fg:x="889" fg:w="14"/><text x="73.4790%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (14 samples, 1.15%)</title><rect x="73.2290%" y="261" width="1.1532%" height="15" fill="rgb(206,123,31)" fg:x="889" fg:w="14"/><text x="73.4790%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="74.2998%" y="245" width="0.0824%" height="15" fill="rgb(210,138,16)" fg:x="902" fg:w="1"/><text x="74.5498%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="74.2998%" y="229" width="0.0824%" height="15" fill="rgb(228,57,28)" fg:x="902" fg:w="1"/><text x="74.5498%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="74.2998%" y="213" width="0.0824%" height="15" fill="rgb(242,170,10)" fg:x="902" fg:w="1"/><text x="74.5498%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="74.2998%" y="197" width="0.0824%" height="15" fill="rgb(228,214,39)" fg:x="902" fg:w="1"/><text x="74.5498%" y="207.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="74.2998%" y="181" width="0.0824%" height="15" fill="rgb(218,179,33)" fg:x="902" fg:w="1"/><text x="74.5498%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="74.2998%" y="165" width="0.0824%" height="15" fill="rgb(235,193,39)" fg:x="902" fg:w="1"/><text x="74.5498%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="74.3822%" y="405" width="0.1647%" height="15" fill="rgb(219,221,36)" fg:x="903" fg:w="2"/><text x="74.6322%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="74.3822%" y="389" width="0.1647%" height="15" fill="rgb(248,218,19)" fg:x="903" fg:w="2"/><text x="74.6322%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.4646%" y="373" width="0.0824%" height="15" fill="rgb(205,50,9)" fg:x="904" fg:w="1"/><text x="74.7146%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScope&lt;plugins_core::moving::model::Occupyable&gt;&gt; (1 samples, 0.08%)</title><rect x="74.5470%" y="405" width="0.0824%" height="15" fill="rgb(238,81,28)" fg:x="905" fg:w="1"/><text x="74.7970%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.5470%" y="389" width="0.0824%" height="15" fill="rgb(235,110,19)" fg:x="905" fg:w="1"/><text x="74.7970%" y="399.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="74.6293%" y="373" width="0.1647%" height="15" fill="rgb(214,7,14)" fg:x="906" fg:w="2"/><text x="74.8793%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="74.6293%" y="357" width="0.1647%" height="15" fill="rgb(211,77,3)" fg:x="906" fg:w="2"/><text x="74.8793%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.7117%" y="341" width="0.0824%" height="15" fill="rgb(229,5,9)" fg:x="907" fg:w="1"/><text x="74.9617%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.7117%" y="325" width="0.0824%" height="15" fill="rgb(225,90,11)" fg:x="907" fg:w="1"/><text x="74.9617%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.7117%" y="309" width="0.0824%" height="15" fill="rgb(242,56,8)" fg:x="907" fg:w="1"/><text x="74.9617%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.7117%" y="293" width="0.0824%" height="15" fill="rgb(249,212,39)" fg:x="907" fg:w="1"/><text x="74.9617%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.7117%" y="277" width="0.0824%" height="15" fill="rgb(236,90,9)" fg:x="907" fg:w="1"/><text x="74.9617%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.7117%" y="261" width="0.0824%" height="15" fill="rgb(206,88,35)" fg:x="907" fg:w="1"/><text x="74.9617%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.7117%" y="245" width="0.0824%" height="15" fill="rgb(205,126,30)" fg:x="907" fg:w="1"/><text x="74.9617%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="74.7117%" y="229" width="0.0824%" height="15" fill="rgb(230,176,12)" fg:x="907" fg:w="1"/><text x="74.9617%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="74.7117%" y="213" width="0.0824%" height="15" fill="rgb(243,19,9)" fg:x="907" fg:w="1"/><text x="74.9617%" y="223.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.7941%" y="213" width="0.0824%" height="15" fill="rgb(245,171,17)" fg:x="908" fg:w="1"/><text x="75.0441%" y="223.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.9588%" y="181" width="0.0824%" height="15" fill="rgb(227,52,21)" fg:x="910" fg:w="1"/><text x="75.2088%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.9588%" y="165" width="0.0824%" height="15" fill="rgb(238,69,14)" fg:x="910" fg:w="1"/><text x="75.2088%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.0412%" y="149" width="0.0824%" height="15" fill="rgb(241,156,39)" fg:x="911" fg:w="1"/><text x="75.2912%" y="159.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.0412%" y="133" width="0.0824%" height="15" fill="rgb(212,227,28)" fg:x="911" fg:w="1"/><text x="75.2912%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.0412%" y="117" width="0.0824%" height="15" fill="rgb(209,118,27)" fg:x="911" fg:w="1"/><text x="75.2912%" y="127.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.1236%" y="117" width="0.0824%" height="15" fill="rgb(226,102,5)" fg:x="912" fg:w="1"/><text x="75.3736%" y="127.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.1236%" y="101" width="0.0824%" height="15" fill="rgb(223,34,3)" fg:x="912" fg:w="1"/><text x="75.3736%" y="111.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.49%)</title><rect x="74.7941%" y="261" width="0.4942%" height="15" fill="rgb(221,81,38)" fg:x="908" fg:w="6"/><text x="75.0441%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (6 samples, 0.49%)</title><rect x="74.7941%" y="245" width="0.4942%" height="15" fill="rgb(236,219,28)" fg:x="908" fg:w="6"/><text x="75.0441%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.49%)</title><rect x="74.7941%" y="229" width="0.4942%" height="15" fill="rgb(213,200,14)" fg:x="908" fg:w="6"/><text x="75.0441%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (5 samples, 0.41%)</title><rect x="74.8764%" y="213" width="0.4119%" height="15" fill="rgb(240,33,19)" fg:x="909" fg:w="5"/><text x="75.1264%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="74.9588%" y="197" width="0.3295%" height="15" fill="rgb(233,113,27)" fg:x="910" fg:w="4"/><text x="75.2088%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.25%)</title><rect x="75.0412%" y="181" width="0.2471%" height="15" fill="rgb(220,221,18)" fg:x="911" fg:w="3"/><text x="75.2912%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="75.0412%" y="165" width="0.2471%" height="15" fill="rgb(238,92,8)" fg:x="911" fg:w="3"/><text x="75.2912%" y="175.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="75.1236%" y="149" width="0.1647%" height="15" fill="rgb(222,164,16)" fg:x="912" fg:w="2"/><text x="75.3736%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.1236%" y="133" width="0.1647%" height="15" fill="rgb(241,119,3)" fg:x="912" fg:w="2"/><text x="75.3736%" y="143.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.2059%" y="117" width="0.0824%" height="15" fill="rgb(241,44,8)" fg:x="913" fg:w="1"/><text x="75.4559%" y="127.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.2059%" y="101" width="0.0824%" height="15" fill="rgb(230,36,40)" fg:x="913" fg:w="1"/><text x="75.4559%" y="111.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.2059%" y="85" width="0.0824%" height="15" fill="rgb(243,16,36)" fg:x="913" fg:w="1"/><text x="75.4559%" y="95.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.2059%" y="69" width="0.0824%" height="15" fill="rgb(231,4,26)" fg:x="913" fg:w="1"/><text x="75.4559%" y="79.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.2059%" y="53" width="0.0824%" height="15" fill="rgb(240,9,31)" fg:x="913" fg:w="1"/><text x="75.4559%" y="63.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.2059%" y="37" width="0.0824%" height="15" fill="rgb(207,173,15)" fg:x="913" fg:w="1"/><text x="75.4559%" y="47.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.4530%" y="149" width="0.0824%" height="15" fill="rgb(224,192,53)" fg:x="916" fg:w="1"/><text x="75.7030%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.4530%" y="133" width="0.0824%" height="15" fill="rgb(223,67,28)" fg:x="916" fg:w="1"/><text x="75.7030%" y="143.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="75.4530%" y="117" width="0.0824%" height="15" fill="rgb(211,20,47)" fg:x="916" fg:w="1"/><text x="75.7030%" y="127.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="75.4530%" y="101" width="0.0824%" height="15" fill="rgb(240,228,2)" fg:x="916" fg:w="1"/><text x="75.7030%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.4530%" y="85" width="0.0824%" height="15" fill="rgb(248,151,12)" fg:x="916" fg:w="1"/><text x="75.7030%" y="95.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="75.4530%" y="181" width="0.1647%" height="15" fill="rgb(244,8,39)" fg:x="916" fg:w="2"/><text x="75.7030%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.4530%" y="165" width="0.1647%" height="15" fill="rgb(222,26,8)" fg:x="916" fg:w="2"/><text x="75.7030%" y="175.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="75.5354%" y="149" width="0.0824%" height="15" fill="rgb(213,106,44)" fg:x="917" fg:w="1"/><text x="75.7854%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.5354%" y="133" width="0.0824%" height="15" fill="rgb(214,129,20)" fg:x="917" fg:w="1"/><text x="75.7854%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.5354%" y="117" width="0.0824%" height="15" fill="rgb(212,32,13)" fg:x="917" fg:w="1"/><text x="75.7854%" y="127.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.5354%" y="101" width="0.0824%" height="15" fill="rgb(208,168,33)" fg:x="917" fg:w="1"/><text x="75.7854%" y="111.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="75.5354%" y="85" width="0.0824%" height="15" fill="rgb(231,207,8)" fg:x="917" fg:w="1"/><text x="75.7854%" y="95.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.5354%" y="69" width="0.0824%" height="15" fill="rgb(235,219,23)" fg:x="917" fg:w="1"/><text x="75.7854%" y="79.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="75.6178%" y="117" width="0.1647%" height="15" fill="rgb(226,216,26)" fg:x="918" fg:w="2"/><text x="75.8678%" y="127.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (13 samples, 1.07%)</title><rect x="74.7941%" y="277" width="1.0708%" height="15" fill="rgb(239,137,16)" fg:x="908" fg:w="13"/><text x="75.0441%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (7 samples, 0.58%)</title><rect x="75.2883%" y="261" width="0.5766%" height="15" fill="rgb(207,12,36)" fg:x="914" fg:w="7"/><text x="75.5383%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.58%)</title><rect x="75.2883%" y="245" width="0.5766%" height="15" fill="rgb(210,214,24)" fg:x="914" fg:w="7"/><text x="75.5383%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (6 samples, 0.49%)</title><rect x="75.3707%" y="229" width="0.4942%" height="15" fill="rgb(206,56,30)" fg:x="915" fg:w="6"/><text x="75.6207%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.49%)</title><rect x="75.3707%" y="213" width="0.4942%" height="15" fill="rgb(228,143,26)" fg:x="915" fg:w="6"/><text x="75.6207%" y="223.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (5 samples, 0.41%)</title><rect x="75.4530%" y="197" width="0.4119%" height="15" fill="rgb(216,218,46)" fg:x="916" fg:w="5"/><text x="75.7030%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (3 samples, 0.25%)</title><rect x="75.6178%" y="181" width="0.2471%" height="15" fill="rgb(206,6,19)" fg:x="918" fg:w="3"/><text x="75.8678%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.25%)</title><rect x="75.6178%" y="165" width="0.2471%" height="15" fill="rgb(239,177,51)" fg:x="918" fg:w="3"/><text x="75.8678%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (3 samples, 0.25%)</title><rect x="75.6178%" y="149" width="0.2471%" height="15" fill="rgb(216,55,25)" fg:x="918" fg:w="3"/><text x="75.8678%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (3 samples, 0.25%)</title><rect x="75.6178%" y="133" width="0.2471%" height="15" fill="rgb(231,163,29)" fg:x="918" fg:w="3"/><text x="75.8678%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="75.7825%" y="117" width="0.0824%" height="15" fill="rgb(232,149,50)" fg:x="920" fg:w="1"/><text x="76.0325%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="75.7825%" y="101" width="0.0824%" height="15" fill="rgb(223,142,48)" fg:x="920" fg:w="1"/><text x="76.0325%" y="111.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.7825%" y="85" width="0.0824%" height="15" fill="rgb(245,83,23)" fg:x="920" fg:w="1"/><text x="76.0325%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="75.8649%" y="261" width="0.0824%" height="15" fill="rgb(224,63,2)" fg:x="921" fg:w="1"/><text x="76.1149%" y="271.50"></text></g><g><title>core::iter::adapters::try_process (16 samples, 1.32%)</title><rect x="74.7941%" y="357" width="1.3180%" height="15" fill="rgb(218,65,53)" fg:x="908" fg:w="16"/><text x="75.0441%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (16 samples, 1.32%)</title><rect x="74.7941%" y="341" width="1.3180%" height="15" fill="rgb(221,84,29)" fg:x="908" fg:w="16"/><text x="75.0441%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (16 samples, 1.32%)</title><rect x="74.7941%" y="325" width="1.3180%" height="15" fill="rgb(234,0,32)" fg:x="908" fg:w="16"/><text x="75.0441%" y="335.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (16 samples, 1.32%)</title><rect x="74.7941%" y="309" width="1.3180%" height="15" fill="rgb(206,20,16)" fg:x="908" fg:w="16"/><text x="75.0441%" y="319.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (16 samples, 1.32%)</title><rect x="74.7941%" y="293" width="1.3180%" height="15" fill="rgb(244,172,18)" fg:x="908" fg:w="16"/><text x="75.0441%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.25%)</title><rect x="75.8649%" y="277" width="0.2471%" height="15" fill="rgb(254,133,1)" fg:x="921" fg:w="3"/><text x="76.1149%" y="287.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="75.9473%" y="261" width="0.1647%" height="15" fill="rgb(222,206,41)" fg:x="922" fg:w="2"/><text x="76.1973%" y="271.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="75.9473%" y="245" width="0.1647%" height="15" fill="rgb(212,3,42)" fg:x="922" fg:w="2"/><text x="76.1973%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="75.9473%" y="229" width="0.1647%" height="15" fill="rgb(241,11,4)" fg:x="922" fg:w="2"/><text x="76.1973%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.9473%" y="213" width="0.1647%" height="15" fill="rgb(205,19,26)" fg:x="922" fg:w="2"/><text x="76.1973%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="75.9473%" y="197" width="0.1647%" height="15" fill="rgb(210,179,32)" fg:x="922" fg:w="2"/><text x="76.1973%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.9473%" y="181" width="0.1647%" height="15" fill="rgb(227,116,49)" fg:x="922" fg:w="2"/><text x="76.1973%" y="191.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="76.0297%" y="165" width="0.0824%" height="15" fill="rgb(211,146,6)" fg:x="923" fg:w="1"/><text x="76.2797%" y="175.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.0297%" y="149" width="0.0824%" height="15" fill="rgb(219,44,39)" fg:x="923" fg:w="1"/><text x="76.2797%" y="159.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.0297%" y="133" width="0.0824%" height="15" fill="rgb(234,128,11)" fg:x="923" fg:w="1"/><text x="76.2797%" y="143.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.0297%" y="117" width="0.0824%" height="15" fill="rgb(220,183,53)" fg:x="923" fg:w="1"/><text x="76.2797%" y="127.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.0297%" y="101" width="0.0824%" height="15" fill="rgb(213,219,32)" fg:x="923" fg:w="1"/><text x="76.2797%" y="111.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.0297%" y="85" width="0.0824%" height="15" fill="rgb(232,156,16)" fg:x="923" fg:w="1"/><text x="76.2797%" y="95.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (17 samples, 1.40%)</title><rect x="74.7941%" y="373" width="1.4003%" height="15" fill="rgb(246,135,34)" fg:x="908" fg:w="17"/><text x="75.0441%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="76.1120%" y="357" width="0.0824%" height="15" fill="rgb(241,99,0)" fg:x="924" fg:w="1"/><text x="76.3620%" y="367.50"></text></g><g><title>&lt;plugins_core::moving::model::Occupyable as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="76.1944%" y="373" width="0.0824%" height="15" fill="rgb(222,103,45)" fg:x="925" fg:w="1"/><text x="76.4444%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="76.1944%" y="357" width="0.0824%" height="15" fill="rgb(212,57,4)" fg:x="925" fg:w="1"/><text x="76.4444%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="76.1944%" y="341" width="0.0824%" height="15" fill="rgb(215,68,47)" fg:x="925" fg:w="1"/><text x="76.4444%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="76.1944%" y="325" width="0.0824%" height="15" fill="rgb(230,84,2)" fg:x="925" fg:w="1"/><text x="76.4444%" y="335.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="76.1944%" y="309" width="0.0824%" height="15" fill="rgb(220,102,14)" fg:x="925" fg:w="1"/><text x="76.4444%" y="319.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="76.1944%" y="293" width="0.0824%" height="15" fill="rgb(240,10,32)" fg:x="925" fg:w="1"/><text x="76.4444%" y="303.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (766 samples, 63.10%)</title><rect x="13.2619%" y="613" width="63.0972%" height="15" fill="rgb(215,47,27)" fg:x="161" fg:w="766"/><text x="13.5119%" y="623.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (766 samples, 63.10%)</title><rect x="13.2619%" y="597" width="63.0972%" height="15" fill="rgb(233,188,43)" fg:x="161" fg:w="766"/><text x="13.5119%" y="607.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (766 samples, 63.10%)</title><rect x="13.2619%" y="581" width="63.0972%" height="15" fill="rgb(253,190,1)" fg:x="161" fg:w="766"/><text x="13.5119%" y="591.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (766 samples, 63.10%)</title><rect x="13.2619%" y="565" width="63.0972%" height="15" fill="rgb(206,114,52)" fg:x="161" fg:w="766"/><text x="13.5119%" y="575.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (762 samples, 62.77%)</title><rect x="13.5914%" y="549" width="62.7677%" height="15" fill="rgb(233,120,37)" fg:x="165" fg:w="762"/><text x="13.8414%" y="559.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (762 samples, 62.77%)</title><rect x="13.5914%" y="533" width="62.7677%" height="15" fill="rgb(214,52,39)" fg:x="165" fg:w="762"/><text x="13.8414%" y="543.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (762 samples, 62.77%)</title><rect x="13.5914%" y="517" width="62.7677%" height="15" fill="rgb(223,80,29)" fg:x="165" fg:w="762"/><text x="13.8414%" y="527.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (762 samples, 62.77%)</title><rect x="13.5914%" y="501" width="62.7677%" height="15" fill="rgb(230,101,40)" fg:x="165" fg:w="762"/><text x="13.8414%" y="511.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (762 samples, 62.77%)</title><rect x="13.5914%" y="485" width="62.7677%" height="15" fill="rgb(219,211,8)" fg:x="165" fg:w="762"/><text x="13.8414%" y="495.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (762 samples, 62.77%)</title><rect x="13.5914%" y="469" width="62.7677%" height="15" fill="rgb(252,126,28)" fg:x="165" fg:w="762"/><text x="13.8414%" y="479.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (762 samples, 62.77%)</title><rect x="13.5914%" y="453" width="62.7677%" height="15" fill="rgb(215,56,38)" fg:x="165" fg:w="762"/><text x="13.8414%" y="463.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (762 samples, 62.77%)</title><rect x="13.5914%" y="437" width="62.7677%" height="15" fill="rgb(249,55,44)" fg:x="165" fg:w="762"/><text x="13.8414%" y="447.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (762 samples, 62.77%)</title><rect x="13.5914%" y="421" width="62.7677%" height="15" fill="rgb(220,221,32)" fg:x="165" fg:w="762"/><text x="13.8414%" y="431.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (21 samples, 1.73%)</title><rect x="74.6293%" y="405" width="1.7298%" height="15" fill="rgb(212,216,41)" fg:x="906" fg:w="21"/><text x="74.8793%" y="415.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (21 samples, 1.73%)</title><rect x="74.6293%" y="389" width="1.7298%" height="15" fill="rgb(228,213,43)" fg:x="906" fg:w="21"/><text x="74.8793%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.2768%" y="373" width="0.0824%" height="15" fill="rgb(211,31,26)" fg:x="926" fg:w="1"/><text x="76.5268%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.2768%" y="357" width="0.0824%" height="15" fill="rgb(229,202,19)" fg:x="926" fg:w="1"/><text x="76.5268%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.3591%" y="437" width="0.0824%" height="15" fill="rgb(229,105,46)" fg:x="927" fg:w="1"/><text x="76.6091%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.3591%" y="421" width="0.0824%" height="15" fill="rgb(235,108,1)" fg:x="927" fg:w="1"/><text x="76.6091%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.3591%" y="405" width="0.0824%" height="15" fill="rgb(245,111,35)" fg:x="927" fg:w="1"/><text x="76.6091%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.3591%" y="389" width="0.0824%" height="15" fill="rgb(219,185,31)" fg:x="927" fg:w="1"/><text x="76.6091%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.3591%" y="373" width="0.0824%" height="15" fill="rgb(214,4,43)" fg:x="927" fg:w="1"/><text x="76.6091%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.3591%" y="357" width="0.0824%" height="15" fill="rgb(235,227,40)" fg:x="927" fg:w="1"/><text x="76.6091%" y="367.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="76.3591%" y="565" width="0.1647%" height="15" fill="rgb(230,88,30)" fg:x="927" fg:w="2"/><text x="76.6091%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="76.3591%" y="549" width="0.1647%" height="15" fill="rgb(216,217,1)" fg:x="927" fg:w="2"/><text x="76.6091%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="76.3591%" y="533" width="0.1647%" height="15" fill="rgb(248,139,50)" fg:x="927" fg:w="2"/><text x="76.6091%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="76.3591%" y="517" width="0.1647%" height="15" fill="rgb(233,1,21)" fg:x="927" fg:w="2"/><text x="76.6091%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="76.3591%" y="501" width="0.1647%" height="15" fill="rgb(215,183,12)" fg:x="927" fg:w="2"/><text x="76.6091%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="76.3591%" y="485" width="0.1647%" height="15" fill="rgb(229,104,42)" fg:x="927" fg:w="2"/><text x="76.6091%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="76.3591%" y="469" width="0.1647%" height="15" fill="rgb(243,34,48)" fg:x="927" fg:w="2"/><text x="76.6091%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="76.3591%" y="453" width="0.1647%" height="15" fill="rgb(239,11,44)" fg:x="927" fg:w="2"/><text x="76.6091%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.4415%" y="437" width="0.0824%" height="15" fill="rgb(231,98,35)" fg:x="928" fg:w="1"/><text x="76.6915%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="76.5239%" y="485" width="0.0824%" height="15" fill="rgb(233,28,25)" fg:x="929" fg:w="1"/><text x="76.7739%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.5239%" y="469" width="0.0824%" height="15" fill="rgb(234,123,11)" fg:x="929" fg:w="1"/><text x="76.7739%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="76.5239%" y="453" width="0.0824%" height="15" fill="rgb(220,69,3)" fg:x="929" fg:w="1"/><text x="76.7739%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="76.5239%" y="437" width="0.0824%" height="15" fill="rgb(214,64,36)" fg:x="929" fg:w="1"/><text x="76.7739%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="76.5239%" y="421" width="0.0824%" height="15" fill="rgb(211,138,32)" fg:x="929" fg:w="1"/><text x="76.7739%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (4 samples, 0.33%)</title><rect x="76.3591%" y="613" width="0.3295%" height="15" fill="rgb(213,118,47)" fg:x="927" fg:w="4"/><text x="76.6091%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.33%)</title><rect x="76.3591%" y="597" width="0.3295%" height="15" fill="rgb(243,124,49)" fg:x="927" fg:w="4"/><text x="76.6091%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (4 samples, 0.33%)</title><rect x="76.3591%" y="581" width="0.3295%" height="15" fill="rgb(221,30,28)" fg:x="927" fg:w="4"/><text x="76.6091%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="76.5239%" y="565" width="0.1647%" height="15" fill="rgb(246,37,13)" fg:x="929" fg:w="2"/><text x="76.7739%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="76.5239%" y="549" width="0.1647%" height="15" fill="rgb(249,66,14)" fg:x="929" fg:w="2"/><text x="76.7739%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="76.5239%" y="533" width="0.1647%" height="15" fill="rgb(213,166,5)" fg:x="929" fg:w="2"/><text x="76.7739%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="76.5239%" y="517" width="0.1647%" height="15" fill="rgb(221,66,24)" fg:x="929" fg:w="2"/><text x="76.7739%" y="527.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="76.5239%" y="501" width="0.1647%" height="15" fill="rgb(210,132,17)" fg:x="929" fg:w="2"/><text x="76.7739%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.6063%" y="485" width="0.0824%" height="15" fill="rgb(243,202,5)" fg:x="930" fg:w="1"/><text x="76.8563%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.6063%" y="469" width="0.0824%" height="15" fill="rgb(233,70,48)" fg:x="930" fg:w="1"/><text x="76.8563%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="76.6063%" y="453" width="0.0824%" height="15" fill="rgb(238,41,26)" fg:x="930" fg:w="1"/><text x="76.8563%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.6063%" y="437" width="0.0824%" height="15" fill="rgb(241,19,31)" fg:x="930" fg:w="1"/><text x="76.8563%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.6063%" y="421" width="0.0824%" height="15" fill="rgb(214,76,10)" fg:x="930" fg:w="1"/><text x="76.8563%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="76.6886%" y="437" width="0.0824%" height="15" fill="rgb(254,202,22)" fg:x="931" fg:w="1"/><text x="76.9386%" y="447.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="76.6886%" y="421" width="0.0824%" height="15" fill="rgb(214,72,24)" fg:x="931" fg:w="1"/><text x="76.9386%" y="431.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="76.6886%" y="549" width="0.1647%" height="15" fill="rgb(221,92,46)" fg:x="931" fg:w="2"/><text x="76.9386%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="76.6886%" y="533" width="0.1647%" height="15" fill="rgb(246,13,50)" fg:x="931" fg:w="2"/><text x="76.9386%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="76.6886%" y="517" width="0.1647%" height="15" fill="rgb(240,165,38)" fg:x="931" fg:w="2"/><text x="76.9386%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="76.6886%" y="501" width="0.1647%" height="15" fill="rgb(241,24,51)" fg:x="931" fg:w="2"/><text x="76.9386%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="76.6886%" y="485" width="0.1647%" height="15" fill="rgb(227,51,44)" fg:x="931" fg:w="2"/><text x="76.9386%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="76.6886%" y="469" width="0.1647%" height="15" fill="rgb(231,121,3)" fg:x="931" fg:w="2"/><text x="76.9386%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="76.6886%" y="453" width="0.1647%" height="15" fill="rgb(245,3,41)" fg:x="931" fg:w="2"/><text x="76.9386%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.7710%" y="437" width="0.0824%" height="15" fill="rgb(214,13,26)" fg:x="932" fg:w="1"/><text x="77.0210%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.7710%" y="421" width="0.0824%" height="15" fill="rgb(252,75,11)" fg:x="932" fg:w="1"/><text x="77.0210%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.7710%" y="405" width="0.0824%" height="15" fill="rgb(218,226,17)" fg:x="932" fg:w="1"/><text x="77.0210%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="76.8534%" y="517" width="0.0824%" height="15" fill="rgb(248,89,38)" fg:x="933" fg:w="1"/><text x="77.1034%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.8534%" y="501" width="0.0824%" height="15" fill="rgb(237,73,46)" fg:x="933" fg:w="1"/><text x="77.1034%" y="511.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.8534%" y="485" width="0.0824%" height="15" fill="rgb(242,78,33)" fg:x="933" fg:w="1"/><text x="77.1034%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.8534%" y="469" width="0.0824%" height="15" fill="rgb(235,60,3)" fg:x="933" fg:w="1"/><text x="77.1034%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.8534%" y="453" width="0.0824%" height="15" fill="rgb(216,172,19)" fg:x="933" fg:w="1"/><text x="77.1034%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.8534%" y="437" width="0.0824%" height="15" fill="rgb(227,6,42)" fg:x="933" fg:w="1"/><text x="77.1034%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.8534%" y="421" width="0.0824%" height="15" fill="rgb(223,207,42)" fg:x="933" fg:w="1"/><text x="77.1034%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.8534%" y="405" width="0.0824%" height="15" fill="rgb(246,138,30)" fg:x="933" fg:w="1"/><text x="77.1034%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.8534%" y="389" width="0.0824%" height="15" fill="rgb(251,199,47)" fg:x="933" fg:w="1"/><text x="77.1034%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.8534%" y="373" width="0.0824%" height="15" fill="rgb(228,218,44)" fg:x="933" fg:w="1"/><text x="77.1034%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.8534%" y="357" width="0.0824%" height="15" fill="rgb(220,68,6)" fg:x="933" fg:w="1"/><text x="77.1034%" y="367.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="76.8534%" y="341" width="0.0824%" height="15" fill="rgb(240,60,26)" fg:x="933" fg:w="1"/><text x="77.1034%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (4 samples, 0.33%)</title><rect x="76.6886%" y="565" width="0.3295%" height="15" fill="rgb(211,200,19)" fg:x="931" fg:w="4"/><text x="76.9386%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="76.8534%" y="549" width="0.1647%" height="15" fill="rgb(242,145,30)" fg:x="933" fg:w="2"/><text x="77.1034%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="76.8534%" y="533" width="0.1647%" height="15" fill="rgb(225,64,13)" fg:x="933" fg:w="2"/><text x="77.1034%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.9357%" y="517" width="0.0824%" height="15" fill="rgb(218,103,35)" fg:x="934" fg:w="1"/><text x="77.1857%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.9357%" y="501" width="0.0824%" height="15" fill="rgb(216,93,46)" fg:x="934" fg:w="1"/><text x="77.1857%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.0181%" y="517" width="0.0824%" height="15" fill="rgb(225,159,27)" fg:x="935" fg:w="1"/><text x="77.2681%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (6 samples, 0.49%)</title><rect x="76.6886%" y="613" width="0.4942%" height="15" fill="rgb(225,204,11)" fg:x="931" fg:w="6"/><text x="76.9386%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (6 samples, 0.49%)</title><rect x="76.6886%" y="597" width="0.4942%" height="15" fill="rgb(205,56,4)" fg:x="931" fg:w="6"/><text x="76.9386%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.49%)</title><rect x="76.6886%" y="581" width="0.4942%" height="15" fill="rgb(206,6,35)" fg:x="931" fg:w="6"/><text x="76.9386%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="77.0181%" y="565" width="0.1647%" height="15" fill="rgb(247,73,52)" fg:x="935" fg:w="2"/><text x="77.2681%" y="575.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="77.0181%" y="549" width="0.1647%" height="15" fill="rgb(246,97,4)" fg:x="935" fg:w="2"/><text x="77.2681%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="77.0181%" y="533" width="0.1647%" height="15" fill="rgb(212,37,15)" fg:x="935" fg:w="2"/><text x="77.2681%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.1005%" y="517" width="0.0824%" height="15" fill="rgb(208,130,40)" fg:x="936" fg:w="1"/><text x="77.3505%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.1005%" y="501" width="0.0824%" height="15" fill="rgb(236,55,29)" fg:x="936" fg:w="1"/><text x="77.3505%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.1005%" y="485" width="0.0824%" height="15" fill="rgb(209,156,45)" fg:x="936" fg:w="1"/><text x="77.3505%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.1005%" y="469" width="0.0824%" height="15" fill="rgb(249,107,4)" fg:x="936" fg:w="1"/><text x="77.3505%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="77.1005%" y="453" width="0.0824%" height="15" fill="rgb(227,7,13)" fg:x="936" fg:w="1"/><text x="77.3505%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.1005%" y="437" width="0.0824%" height="15" fill="rgb(250,129,14)" fg:x="936" fg:w="1"/><text x="77.3505%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.1005%" y="421" width="0.0824%" height="15" fill="rgb(229,92,13)" fg:x="936" fg:w="1"/><text x="77.3505%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.1005%" y="405" width="0.0824%" height="15" fill="rgb(245,98,39)" fg:x="936" fg:w="1"/><text x="77.3505%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (938 samples, 77.27%)</title><rect x="0.0000%" y="677" width="77.2652%" height="15" fill="rgb(234,135,48)" fg:x="0" fg:w="938"/><text x="0.2500%" y="687.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (938 samples, 77.27%)</title><rect x="0.0000%" y="661" width="77.2652%" height="15" fill="rgb(230,98,28)" fg:x="0" fg:w="938"/><text x="0.2500%" y="671.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (938 samples, 77.27%)</title><rect x="0.0000%" y="645" width="77.2652%" height="15" fill="rgb(223,121,0)" fg:x="0" fg:w="938"/><text x="0.2500%" y="655.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (777 samples, 64.00%)</title><rect x="13.2619%" y="629" width="64.0033%" height="15" fill="rgb(234,173,33)" fg:x="161" fg:w="777"/><text x="13.5119%" y="639.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="77.1829%" y="613" width="0.0824%" height="15" fill="rgb(245,47,8)" fg:x="937" fg:w="1"/><text x="77.4329%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="77.1829%" y="597" width="0.0824%" height="15" fill="rgb(205,17,20)" fg:x="937" fg:w="1"/><text x="77.4329%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="77.1829%" y="581" width="0.0824%" height="15" fill="rgb(232,151,16)" fg:x="937" fg:w="1"/><text x="77.4329%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.1829%" y="565" width="0.0824%" height="15" fill="rgb(208,30,32)" fg:x="937" fg:w="1"/><text x="77.4329%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.1829%" y="549" width="0.0824%" height="15" fill="rgb(254,26,3)" fg:x="937" fg:w="1"/><text x="77.4329%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="77.1829%" y="533" width="0.0824%" height="15" fill="rgb(240,177,30)" fg:x="937" fg:w="1"/><text x="77.4329%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.1829%" y="517" width="0.0824%" height="15" fill="rgb(248,76,44)" fg:x="937" fg:w="1"/><text x="77.4329%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.1829%" y="501" width="0.0824%" height="15" fill="rgb(241,186,54)" fg:x="937" fg:w="1"/><text x="77.4329%" y="511.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.2652%" y="629" width="0.0824%" height="15" fill="rgb(249,171,29)" fg:x="938" fg:w="1"/><text x="77.5152%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (1 samples, 0.08%)</title><rect x="77.2652%" y="613" width="0.0824%" height="15" fill="rgb(237,151,44)" fg:x="938" fg:w="1"/><text x="77.5152%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.2652%" y="597" width="0.0824%" height="15" fill="rgb(228,174,30)" fg:x="938" fg:w="1"/><text x="77.5152%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (1 samples, 0.08%)</title><rect x="77.2652%" y="581" width="0.0824%" height="15" fill="rgb(252,14,37)" fg:x="938" fg:w="1"/><text x="77.5152%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.2652%" y="565" width="0.0824%" height="15" fill="rgb(207,111,40)" fg:x="938" fg:w="1"/><text x="77.5152%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.2652%" y="549" width="0.0824%" height="15" fill="rgb(248,171,54)" fg:x="938" fg:w="1"/><text x="77.5152%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.2652%" y="533" width="0.0824%" height="15" fill="rgb(211,127,2)" fg:x="938" fg:w="1"/><text x="77.5152%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.2652%" y="517" width="0.0824%" height="15" fill="rgb(236,87,47)" fg:x="938" fg:w="1"/><text x="77.5152%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.2652%" y="501" width="0.0824%" height="15" fill="rgb(223,190,45)" fg:x="938" fg:w="1"/><text x="77.5152%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.2652%" y="485" width="0.0824%" height="15" fill="rgb(215,5,16)" fg:x="938" fg:w="1"/><text x="77.5152%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.2652%" y="469" width="0.0824%" height="15" fill="rgb(252,82,33)" fg:x="938" fg:w="1"/><text x="77.5152%" y="479.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (1 samples, 0.08%)</title><rect x="77.3476%" y="629" width="0.0824%" height="15" fill="rgb(247,213,44)" fg:x="939" fg:w="1"/><text x="77.5976%" y="639.50"></text></g><g><title>engine::session::Session::new (1 samples, 0.08%)</title><rect x="77.3476%" y="613" width="0.0824%" height="15" fill="rgb(205,196,44)" fg:x="939" fg:w="1"/><text x="77.5976%" y="623.50"></text></g><g><title>engine::session::Session::initialize (1 samples, 0.08%)</title><rect x="77.3476%" y="597" width="0.0824%" height="15" fill="rgb(237,96,54)" fg:x="939" fg:w="1"/><text x="77.5976%" y="607.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (1 samples, 0.08%)</title><rect x="77.3476%" y="581" width="0.0824%" height="15" fill="rgb(230,113,34)" fg:x="939" fg:w="1"/><text x="77.5976%" y="591.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (1 samples, 0.08%)</title><rect x="77.3476%" y="565" width="0.0824%" height="15" fill="rgb(221,224,12)" fg:x="939" fg:w="1"/><text x="77.5976%" y="575.50"></text></g><g><title>libloading::safe::Library::new (1 samples, 0.08%)</title><rect x="77.3476%" y="549" width="0.0824%" height="15" fill="rgb(219,112,44)" fg:x="939" fg:w="1"/><text x="77.5976%" y="559.50"></text></g><g><title>dlopen (1 samples, 0.08%)</title><rect x="77.3476%" y="533" width="0.0824%" height="15" fill="rgb(210,31,13)" fg:x="939" fg:w="1"/><text x="77.5976%" y="543.50"></text></g><g><title>_dl_catch_error (1 samples, 0.08%)</title><rect x="77.3476%" y="517" width="0.0824%" height="15" fill="rgb(230,25,16)" fg:x="939" fg:w="1"/><text x="77.5976%" y="527.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="77.3476%" y="501" width="0.0824%" height="15" fill="rgb(246,108,53)" fg:x="939" fg:w="1"/><text x="77.5976%" y="511.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="77.3476%" y="485" width="0.0824%" height="15" fill="rgb(241,172,50)" fg:x="939" fg:w="1"/><text x="77.5976%" y="495.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="77.3476%" y="469" width="0.0824%" height="15" fill="rgb(235,141,10)" fg:x="939" fg:w="1"/><text x="77.5976%" y="479.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="77.4300%" y="565" width="0.0824%" height="15" fill="rgb(220,174,43)" fg:x="940" fg:w="1"/><text x="77.6800%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="77.4300%" y="549" width="0.0824%" height="15" fill="rgb(215,181,40)" fg:x="940" fg:w="1"/><text x="77.6800%" y="559.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="77.4300%" y="533" width="0.0824%" height="15" fill="rgb(230,97,2)" fg:x="940" fg:w="1"/><text x="77.6800%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="77.5124%" y="517" width="0.0824%" height="15" fill="rgb(211,25,27)" fg:x="941" fg:w="1"/><text x="77.7624%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="77.5124%" y="501" width="0.0824%" height="15" fill="rgb(230,87,26)" fg:x="941" fg:w="1"/><text x="77.7624%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.5124%" y="485" width="0.0824%" height="15" fill="rgb(227,160,17)" fg:x="941" fg:w="1"/><text x="77.7624%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="77.5124%" y="533" width="0.1647%" height="15" fill="rgb(244,85,34)" fg:x="941" fg:w="2"/><text x="77.7624%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.5947%" y="517" width="0.0824%" height="15" fill="rgb(207,70,0)" fg:x="942" fg:w="1"/><text x="77.8447%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.5947%" y="501" width="0.0824%" height="15" fill="rgb(223,129,7)" fg:x="942" fg:w="1"/><text x="77.8447%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.5947%" y="485" width="0.0824%" height="15" fill="rgb(246,105,7)" fg:x="942" fg:w="1"/><text x="77.8447%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.5947%" y="469" width="0.0824%" height="15" fill="rgb(215,154,42)" fg:x="942" fg:w="1"/><text x="77.8447%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.5947%" y="453" width="0.0824%" height="15" fill="rgb(220,215,30)" fg:x="942" fg:w="1"/><text x="77.8447%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.5947%" y="437" width="0.0824%" height="15" fill="rgb(228,81,51)" fg:x="942" fg:w="1"/><text x="77.8447%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="77.5947%" y="421" width="0.0824%" height="15" fill="rgb(247,71,54)" fg:x="942" fg:w="1"/><text x="77.8447%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.5947%" y="405" width="0.0824%" height="15" fill="rgb(234,176,34)" fg:x="942" fg:w="1"/><text x="77.8447%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.5947%" y="389" width="0.0824%" height="15" fill="rgb(241,103,54)" fg:x="942" fg:w="1"/><text x="77.8447%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.5947%" y="373" width="0.0824%" height="15" fill="rgb(228,22,34)" fg:x="942" fg:w="1"/><text x="77.8447%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.6771%" y="533" width="0.0824%" height="15" fill="rgb(241,179,48)" fg:x="943" fg:w="1"/><text x="77.9271%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="77.6771%" y="517" width="0.0824%" height="15" fill="rgb(235,167,37)" fg:x="943" fg:w="1"/><text x="77.9271%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.6771%" y="501" width="0.0824%" height="15" fill="rgb(213,109,30)" fg:x="943" fg:w="1"/><text x="77.9271%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.6771%" y="485" width="0.0824%" height="15" fill="rgb(222,172,16)" fg:x="943" fg:w="1"/><text x="77.9271%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.6771%" y="469" width="0.0824%" height="15" fill="rgb(233,192,5)" fg:x="943" fg:w="1"/><text x="77.9271%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="77.6771%" y="453" width="0.0824%" height="15" fill="rgb(247,189,41)" fg:x="943" fg:w="1"/><text x="77.9271%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="77.6771%" y="437" width="0.0824%" height="15" fill="rgb(218,134,47)" fg:x="943" fg:w="1"/><text x="77.9271%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.6771%" y="421" width="0.0824%" height="15" fill="rgb(216,29,3)" fg:x="943" fg:w="1"/><text x="77.9271%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.6771%" y="405" width="0.0824%" height="15" fill="rgb(246,140,12)" fg:x="943" fg:w="1"/><text x="77.9271%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.7595%" y="485" width="0.0824%" height="15" fill="rgb(230,136,11)" fg:x="944" fg:w="1"/><text x="78.0095%" y="495.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="77.8418%" y="485" width="0.0824%" height="15" fill="rgb(247,22,47)" fg:x="945" fg:w="1"/><text x="78.0918%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.8418%" y="469" width="0.0824%" height="15" fill="rgb(218,84,22)" fg:x="945" fg:w="1"/><text x="78.0918%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="77.8418%" y="453" width="0.0824%" height="15" fill="rgb(216,87,39)" fg:x="945" fg:w="1"/><text x="78.0918%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="77.8418%" y="437" width="0.0824%" height="15" fill="rgb(221,178,8)" fg:x="945" fg:w="1"/><text x="78.0918%" y="447.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="77.9242%" y="485" width="0.0824%" height="15" fill="rgb(230,42,11)" fg:x="946" fg:w="1"/><text x="78.1742%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.9242%" y="469" width="0.0824%" height="15" fill="rgb(237,229,4)" fg:x="946" fg:w="1"/><text x="78.1742%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.9242%" y="453" width="0.0824%" height="15" fill="rgb(222,31,33)" fg:x="946" fg:w="1"/><text x="78.1742%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.9242%" y="437" width="0.0824%" height="15" fill="rgb(210,17,39)" fg:x="946" fg:w="1"/><text x="78.1742%" y="447.50"></text></g><g><title>engine::session::Session::flush (8 samples, 0.66%)</title><rect x="77.4300%" y="613" width="0.6590%" height="15" fill="rgb(244,93,20)" fg:x="940" fg:w="8"/><text x="77.6800%" y="623.50"></text></g><g><title>engine::session::state::State::close (8 samples, 0.66%)</title><rect x="77.4300%" y="597" width="0.6590%" height="15" fill="rgb(210,40,47)" fg:x="940" fg:w="8"/><text x="77.6800%" y="607.50"></text></g><g><title>engine::session::state::State::flush_entities (8 samples, 0.66%)</title><rect x="77.4300%" y="581" width="0.6590%" height="15" fill="rgb(239,211,47)" fg:x="940" fg:w="8"/><text x="77.6800%" y="591.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (7 samples, 0.58%)</title><rect x="77.5124%" y="565" width="0.5766%" height="15" fill="rgb(251,223,49)" fg:x="941" fg:w="7"/><text x="77.7624%" y="575.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (7 samples, 0.58%)</title><rect x="77.5124%" y="549" width="0.5766%" height="15" fill="rgb(221,149,5)" fg:x="941" fg:w="7"/><text x="77.7624%" y="559.50"></text></g><g><title>kernel::model::any_entity_changes (4 samples, 0.33%)</title><rect x="77.7595%" y="533" width="0.3295%" height="15" fill="rgb(219,224,51)" fg:x="944" fg:w="4"/><text x="78.0095%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.33%)</title><rect x="77.7595%" y="517" width="0.3295%" height="15" fill="rgb(223,7,8)" fg:x="944" fg:w="4"/><text x="78.0095%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.33%)</title><rect x="77.7595%" y="501" width="0.3295%" height="15" fill="rgb(241,217,22)" fg:x="944" fg:w="4"/><text x="78.0095%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="78.0066%" y="485" width="0.0824%" height="15" fill="rgb(248,209,0)" fg:x="947" fg:w="1"/><text x="78.2566%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="78.0066%" y="469" width="0.0824%" height="15" fill="rgb(217,205,4)" fg:x="947" fg:w="1"/><text x="78.2566%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="78.0066%" y="453" width="0.0824%" height="15" fill="rgb(228,124,39)" fg:x="947" fg:w="1"/><text x="78.2566%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="78.0066%" y="437" width="0.0824%" height="15" fill="rgb(250,116,42)" fg:x="947" fg:w="1"/><text x="78.2566%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="78.0066%" y="421" width="0.0824%" height="15" fill="rgb(223,202,9)" fg:x="947" fg:w="1"/><text x="78.2566%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.0066%" y="405" width="0.0824%" height="15" fill="rgb(242,222,40)" fg:x="947" fg:w="1"/><text x="78.2566%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="78.1713%" y="597" width="0.0824%" height="15" fill="rgb(229,99,46)" fg:x="949" fg:w="1"/><text x="78.4213%" y="607.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="78.1713%" y="581" width="0.0824%" height="15" fill="rgb(225,56,46)" fg:x="949" fg:w="1"/><text x="78.4213%" y="591.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="78.1713%" y="565" width="0.0824%" height="15" fill="rgb(227,94,5)" fg:x="949" fg:w="1"/><text x="78.4213%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="78.1713%" y="549" width="0.0824%" height="15" fill="rgb(205,112,38)" fg:x="949" fg:w="1"/><text x="78.4213%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="78.1713%" y="533" width="0.0824%" height="15" fill="rgb(231,133,46)" fg:x="949" fg:w="1"/><text x="78.4213%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.1713%" y="517" width="0.0824%" height="15" fill="rgb(217,16,9)" fg:x="949" fg:w="1"/><text x="78.4213%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.1713%" y="501" width="0.0824%" height="15" fill="rgb(249,173,9)" fg:x="949" fg:w="1"/><text x="78.4213%" y="511.50"></text></g><g><title>plugins_core::build::Build::holding (3 samples, 0.25%)</title><rect x="78.0890%" y="613" width="0.2471%" height="15" fill="rgb(205,163,53)" fg:x="948" fg:w="3"/><text x="78.3390%" y="623.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="78.2537%" y="597" width="0.0824%" height="15" fill="rgb(217,54,41)" fg:x="950" fg:w="1"/><text x="78.5037%" y="607.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="78.2537%" y="581" width="0.0824%" height="15" fill="rgb(228,216,12)" fg:x="950" fg:w="1"/><text x="78.5037%" y="591.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="78.2537%" y="565" width="0.0824%" height="15" fill="rgb(244,228,15)" fg:x="950" fg:w="1"/><text x="78.5037%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="78.2537%" y="549" width="0.0824%" height="15" fill="rgb(221,176,53)" fg:x="950" fg:w="1"/><text x="78.5037%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.2537%" y="533" width="0.0824%" height="15" fill="rgb(205,94,34)" fg:x="950" fg:w="1"/><text x="78.5037%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.2537%" y="517" width="0.0824%" height="15" fill="rgb(213,110,48)" fg:x="950" fg:w="1"/><text x="78.5037%" y="527.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="78.3361%" y="597" width="0.0824%" height="15" fill="rgb(236,142,28)" fg:x="951" fg:w="1"/><text x="78.5861%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="78.3361%" y="581" width="0.0824%" height="15" fill="rgb(225,135,29)" fg:x="951" fg:w="1"/><text x="78.5861%" y="591.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="78.3361%" y="565" width="0.0824%" height="15" fill="rgb(252,45,31)" fg:x="951" fg:w="1"/><text x="78.5861%" y="575.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="78.3361%" y="549" width="0.0824%" height="15" fill="rgb(211,187,50)" fg:x="951" fg:w="1"/><text x="78.5861%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="78.3361%" y="533" width="0.0824%" height="15" fill="rgb(229,109,7)" fg:x="951" fg:w="1"/><text x="78.5861%" y="543.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="78.3361%" y="517" width="0.0824%" height="15" fill="rgb(251,131,51)" fg:x="951" fg:w="1"/><text x="78.5861%" y="527.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="78.3361%" y="501" width="0.0824%" height="15" fill="rgb(251,180,35)" fg:x="951" fg:w="1"/><text x="78.5861%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="78.3361%" y="485" width="0.0824%" height="15" fill="rgb(211,46,32)" fg:x="951" fg:w="1"/><text x="78.5861%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="78.3361%" y="469" width="0.0824%" height="15" fill="rgb(248,123,17)" fg:x="951" fg:w="1"/><text x="78.5861%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="78.3361%" y="453" width="0.0824%" height="15" fill="rgb(227,141,18)" fg:x="951" fg:w="1"/><text x="78.5861%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="78.3361%" y="437" width="0.0824%" height="15" fill="rgb(216,102,9)" fg:x="951" fg:w="1"/><text x="78.5861%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="78.3361%" y="421" width="0.0824%" height="15" fill="rgb(253,47,13)" fg:x="951" fg:w="1"/><text x="78.5861%" y="431.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="78.3361%" y="405" width="0.0824%" height="15" fill="rgb(226,93,23)" fg:x="951" fg:w="1"/><text x="78.5861%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="78.3361%" y="389" width="0.0824%" height="15" fill="rgb(247,104,17)" fg:x="951" fg:w="1"/><text x="78.5861%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.3361%" y="373" width="0.0824%" height="15" fill="rgb(233,203,26)" fg:x="951" fg:w="1"/><text x="78.5861%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.3361%" y="357" width="0.0824%" height="15" fill="rgb(244,98,49)" fg:x="951" fg:w="1"/><text x="78.5861%" y="367.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="78.4185%" y="565" width="0.0824%" height="15" fill="rgb(235,134,22)" fg:x="952" fg:w="1"/><text x="78.6685%" y="575.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="78.4185%" y="549" width="0.0824%" height="15" fill="rgb(221,70,32)" fg:x="952" fg:w="1"/><text x="78.6685%" y="559.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="78.4185%" y="533" width="0.0824%" height="15" fill="rgb(238,15,50)" fg:x="952" fg:w="1"/><text x="78.6685%" y="543.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="78.4185%" y="517" width="0.0824%" height="15" fill="rgb(215,221,48)" fg:x="952" fg:w="1"/><text x="78.6685%" y="527.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="78.4185%" y="501" width="0.0824%" height="15" fill="rgb(236,73,3)" fg:x="952" fg:w="1"/><text x="78.6685%" y="511.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="78.4185%" y="485" width="0.0824%" height="15" fill="rgb(250,107,11)" fg:x="952" fg:w="1"/><text x="78.6685%" y="495.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="78.4185%" y="469" width="0.0824%" height="15" fill="rgb(242,39,14)" fg:x="952" fg:w="1"/><text x="78.6685%" y="479.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="78.4185%" y="453" width="0.0824%" height="15" fill="rgb(248,164,37)" fg:x="952" fg:w="1"/><text x="78.6685%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="78.5008%" y="469" width="0.0824%" height="15" fill="rgb(217,60,12)" fg:x="953" fg:w="1"/><text x="78.7508%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.5008%" y="453" width="0.0824%" height="15" fill="rgb(240,125,29)" fg:x="953" fg:w="1"/><text x="78.7508%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="78.5008%" y="437" width="0.0824%" height="15" fill="rgb(208,207,28)" fg:x="953" fg:w="1"/><text x="78.7508%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.5008%" y="421" width="0.0824%" height="15" fill="rgb(209,159,27)" fg:x="953" fg:w="1"/><text x="78.7508%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="78.5008%" y="405" width="0.0824%" height="15" fill="rgb(251,176,53)" fg:x="953" fg:w="1"/><text x="78.7508%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.5008%" y="389" width="0.0824%" height="15" fill="rgb(211,85,7)" fg:x="953" fg:w="1"/><text x="78.7508%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="78.5008%" y="373" width="0.0824%" height="15" fill="rgb(216,64,54)" fg:x="953" fg:w="1"/><text x="78.7508%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="78.5832%" y="453" width="0.0824%" height="15" fill="rgb(217,54,24)" fg:x="954" fg:w="1"/><text x="78.8332%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="78.5832%" y="437" width="0.0824%" height="15" fill="rgb(208,206,53)" fg:x="954" fg:w="1"/><text x="78.8332%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="78.5832%" y="421" width="0.0824%" height="15" fill="rgb(251,74,39)" fg:x="954" fg:w="1"/><text x="78.8332%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.25%)</title><rect x="78.5008%" y="501" width="0.2471%" height="15" fill="rgb(226,47,5)" fg:x="953" fg:w="3"/><text x="78.7508%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.25%)</title><rect x="78.5008%" y="485" width="0.2471%" height="15" fill="rgb(234,111,33)" fg:x="953" fg:w="3"/><text x="78.7508%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="78.5832%" y="469" width="0.1647%" height="15" fill="rgb(251,14,10)" fg:x="954" fg:w="2"/><text x="78.8332%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="78.6656%" y="453" width="0.0824%" height="15" fill="rgb(232,43,0)" fg:x="955" fg:w="1"/><text x="78.9156%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="78.6656%" y="437" width="0.0824%" height="15" fill="rgb(222,68,43)" fg:x="955" fg:w="1"/><text x="78.9156%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.6656%" y="421" width="0.0824%" height="15" fill="rgb(217,24,23)" fg:x="955" fg:w="1"/><text x="78.9156%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="78.6656%" y="405" width="0.0824%" height="15" fill="rgb(229,209,14)" fg:x="955" fg:w="1"/><text x="78.9156%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.7479%" y="469" width="0.0824%" height="15" fill="rgb(250,149,48)" fg:x="956" fg:w="1"/><text x="78.9979%" y="479.50"></text></g><g><title>engine::session::Session::flush (6 samples, 0.49%)</title><rect x="78.4185%" y="597" width="0.4942%" height="15" fill="rgb(210,120,37)" fg:x="952" fg:w="6"/><text x="78.6685%" y="607.50"></text></g><g><title>engine::session::Session::save_changes (6 samples, 0.49%)</title><rect x="78.4185%" y="581" width="0.4942%" height="15" fill="rgb(210,21,8)" fg:x="952" fg:w="6"/><text x="78.6685%" y="591.50"></text></g><g><title>engine::session::state::State::close (5 samples, 0.41%)</title><rect x="78.5008%" y="565" width="0.4119%" height="15" fill="rgb(243,145,7)" fg:x="953" fg:w="5"/><text x="78.7508%" y="575.50"></text></g><g><title>engine::session::state::State::flush_entities (5 samples, 0.41%)</title><rect x="78.5008%" y="549" width="0.4119%" height="15" fill="rgb(238,178,32)" fg:x="953" fg:w="5"/><text x="78.7508%" y="559.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (5 samples, 0.41%)</title><rect x="78.5008%" y="533" width="0.4119%" height="15" fill="rgb(222,4,10)" fg:x="953" fg:w="5"/><text x="78.7508%" y="543.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (5 samples, 0.41%)</title><rect x="78.5008%" y="517" width="0.4119%" height="15" fill="rgb(239,7,37)" fg:x="953" fg:w="5"/><text x="78.7508%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="78.7479%" y="501" width="0.1647%" height="15" fill="rgb(215,31,37)" fg:x="956" fg:w="2"/><text x="78.9979%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="78.7479%" y="485" width="0.1647%" height="15" fill="rgb(224,83,33)" fg:x="956" fg:w="2"/><text x="78.9979%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.8303%" y="469" width="0.0824%" height="15" fill="rgb(239,55,3)" fg:x="957" fg:w="1"/><text x="79.0803%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.8303%" y="453" width="0.0824%" height="15" fill="rgb(247,92,11)" fg:x="957" fg:w="1"/><text x="79.0803%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.8303%" y="437" width="0.0824%" height="15" fill="rgb(239,200,7)" fg:x="957" fg:w="1"/><text x="79.0803%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.8303%" y="421" width="0.0824%" height="15" fill="rgb(227,115,8)" fg:x="957" fg:w="1"/><text x="79.0803%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="78.9951%" y="533" width="0.0824%" height="15" fill="rgb(215,189,27)" fg:x="959" fg:w="1"/><text x="79.2451%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="78.9951%" y="517" width="0.0824%" height="15" fill="rgb(251,216,39)" fg:x="959" fg:w="1"/><text x="79.2451%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="78.9951%" y="501" width="0.0824%" height="15" fill="rgb(207,29,47)" fg:x="959" fg:w="1"/><text x="79.2451%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.9951%" y="485" width="0.0824%" height="15" fill="rgb(210,71,34)" fg:x="959" fg:w="1"/><text x="79.2451%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="78.9951%" y="469" width="0.0824%" height="15" fill="rgb(253,217,51)" fg:x="959" fg:w="1"/><text x="79.2451%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.9951%" y="453" width="0.0824%" height="15" fill="rgb(222,117,46)" fg:x="959" fg:w="1"/><text x="79.2451%" y="463.50"></text></g><g><title>plugins_core::build::Build::holding (3 samples, 0.25%)</title><rect x="78.9127%" y="597" width="0.2471%" height="15" fill="rgb(226,132,6)" fg:x="958" fg:w="3"/><text x="79.1627%" y="607.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.25%)</title><rect x="78.9127%" y="581" width="0.2471%" height="15" fill="rgb(254,145,51)" fg:x="958" fg:w="3"/><text x="79.1627%" y="591.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="78.9951%" y="565" width="0.1647%" height="15" fill="rgb(231,199,27)" fg:x="959" fg:w="2"/><text x="79.2451%" y="575.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="78.9951%" y="549" width="0.1647%" height="15" fill="rgb(245,158,14)" fg:x="959" fg:w="2"/><text x="79.2451%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="79.0774%" y="533" width="0.0824%" height="15" fill="rgb(240,113,14)" fg:x="960" fg:w="1"/><text x="79.3274%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="79.0774%" y="517" width="0.0824%" height="15" fill="rgb(210,20,13)" fg:x="960" fg:w="1"/><text x="79.3274%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="79.0774%" y="501" width="0.0824%" height="15" fill="rgb(241,144,13)" fg:x="960" fg:w="1"/><text x="79.3274%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.0774%" y="485" width="0.0824%" height="15" fill="rgb(235,43,34)" fg:x="960" fg:w="1"/><text x="79.3274%" y="495.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="79.1598%" y="597" width="0.0824%" height="15" fill="rgb(208,36,20)" fg:x="961" fg:w="1"/><text x="79.4098%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="79.1598%" y="581" width="0.0824%" height="15" fill="rgb(239,204,10)" fg:x="961" fg:w="1"/><text x="79.4098%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="79.1598%" y="565" width="0.0824%" height="15" fill="rgb(217,84,43)" fg:x="961" fg:w="1"/><text x="79.4098%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="79.1598%" y="549" width="0.0824%" height="15" fill="rgb(241,170,50)" fg:x="961" fg:w="1"/><text x="79.4098%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="79.1598%" y="533" width="0.0824%" height="15" fill="rgb(226,205,29)" fg:x="961" fg:w="1"/><text x="79.4098%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.1598%" y="517" width="0.0824%" height="15" fill="rgb(233,113,1)" fg:x="961" fg:w="1"/><text x="79.4098%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.1598%" y="501" width="0.0824%" height="15" fill="rgb(253,98,13)" fg:x="961" fg:w="1"/><text x="79.4098%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.1598%" y="485" width="0.0824%" height="15" fill="rgb(211,115,12)" fg:x="961" fg:w="1"/><text x="79.4098%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.1598%" y="469" width="0.0824%" height="15" fill="rgb(208,12,16)" fg:x="961" fg:w="1"/><text x="79.4098%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="79.1598%" y="453" width="0.0824%" height="15" fill="rgb(237,193,54)" fg:x="961" fg:w="1"/><text x="79.4098%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.1598%" y="437" width="0.0824%" height="15" fill="rgb(243,22,42)" fg:x="961" fg:w="1"/><text x="79.4098%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.1598%" y="421" width="0.0824%" height="15" fill="rgb(233,151,36)" fg:x="961" fg:w="1"/><text x="79.4098%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.1598%" y="405" width="0.0824%" height="15" fill="rgb(237,57,45)" fg:x="961" fg:w="1"/><text x="79.4098%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.1598%" y="389" width="0.0824%" height="15" fill="rgb(221,88,17)" fg:x="961" fg:w="1"/><text x="79.4098%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.1598%" y="373" width="0.0824%" height="15" fill="rgb(230,79,15)" fg:x="961" fg:w="1"/><text x="79.4098%" y="383.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (12 samples, 0.99%)</title><rect x="78.3361%" y="613" width="0.9885%" height="15" fill="rgb(213,57,13)" fg:x="951" fg:w="12"/><text x="78.5861%" y="623.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="79.2422%" y="597" width="0.0824%" height="15" fill="rgb(222,116,39)" fg:x="962" fg:w="1"/><text x="79.4922%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="79.2422%" y="581" width="0.0824%" height="15" fill="rgb(245,107,2)" fg:x="962" fg:w="1"/><text x="79.4922%" y="591.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="79.2422%" y="565" width="0.0824%" height="15" fill="rgb(238,1,10)" fg:x="962" fg:w="1"/><text x="79.4922%" y="575.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="79.2422%" y="549" width="0.0824%" height="15" fill="rgb(249,4,48)" fg:x="962" fg:w="1"/><text x="79.4922%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.2422%" y="533" width="0.0824%" height="15" fill="rgb(223,151,18)" fg:x="962" fg:w="1"/><text x="79.4922%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="79.3245%" y="597" width="0.0824%" height="15" fill="rgb(227,65,43)" fg:x="963" fg:w="1"/><text x="79.5745%" y="607.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (25 samples, 2.06%)</title><rect x="77.4300%" y="629" width="2.0593%" height="15" fill="rgb(218,40,45)" fg:x="940" fg:w="25"/><text x="77.6800%" y="639.50">&lt;..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (2 samples, 0.16%)</title><rect x="79.3245%" y="613" width="0.1647%" height="15" fill="rgb(252,121,31)" fg:x="963" fg:w="2"/><text x="79.5745%" y="623.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="79.4069%" y="597" width="0.0824%" height="15" fill="rgb(219,158,43)" fg:x="964" fg:w="1"/><text x="79.6569%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="79.4069%" y="581" width="0.0824%" height="15" fill="rgb(231,162,42)" fg:x="964" fg:w="1"/><text x="79.6569%" y="591.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="79.4069%" y="565" width="0.0824%" height="15" fill="rgb(217,179,25)" fg:x="964" fg:w="1"/><text x="79.6569%" y="575.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="79.4069%" y="549" width="0.0824%" height="15" fill="rgb(206,212,31)" fg:x="964" fg:w="1"/><text x="79.6569%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="79.4069%" y="533" width="0.0824%" height="15" fill="rgb(235,144,12)" fg:x="964" fg:w="1"/><text x="79.6569%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.4069%" y="517" width="0.0824%" height="15" fill="rgb(213,51,10)" fg:x="964" fg:w="1"/><text x="79.6569%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="79.4069%" y="501" width="0.0824%" height="15" fill="rgb(231,145,14)" fg:x="964" fg:w="1"/><text x="79.6569%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.4069%" y="485" width="0.0824%" height="15" fill="rgb(235,15,28)" fg:x="964" fg:w="1"/><text x="79.6569%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="79.4069%" y="469" width="0.0824%" height="15" fill="rgb(237,206,10)" fg:x="964" fg:w="1"/><text x="79.6569%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="79.4069%" y="453" width="0.0824%" height="15" fill="rgb(236,227,27)" fg:x="964" fg:w="1"/><text x="79.6569%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.4069%" y="437" width="0.0824%" height="15" fill="rgb(246,83,35)" fg:x="964" fg:w="1"/><text x="79.6569%" y="447.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="79.4893%" y="629" width="0.0824%" height="15" fill="rgb(220,136,24)" fg:x="965" fg:w="1"/><text x="79.7393%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.4893%" y="613" width="0.0824%" height="15" fill="rgb(217,3,25)" fg:x="965" fg:w="1"/><text x="79.7393%" y="623.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="79.5717%" y="533" width="0.0824%" height="15" fill="rgb(239,24,14)" fg:x="966" fg:w="1"/><text x="79.8217%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.5717%" y="517" width="0.0824%" height="15" fill="rgb(244,16,53)" fg:x="966" fg:w="1"/><text x="79.8217%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.5717%" y="501" width="0.0824%" height="15" fill="rgb(208,175,44)" fg:x="966" fg:w="1"/><text x="79.8217%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="79.6540%" y="517" width="0.0824%" height="15" fill="rgb(252,18,48)" fg:x="967" fg:w="1"/><text x="79.9040%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.25%)</title><rect x="79.5717%" y="549" width="0.2471%" height="15" fill="rgb(234,199,32)" fg:x="966" fg:w="3"/><text x="79.8217%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="79.6540%" y="533" width="0.1647%" height="15" fill="rgb(225,77,54)" fg:x="967" fg:w="2"/><text x="79.9040%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.7364%" y="517" width="0.0824%" height="15" fill="rgb(225,42,25)" fg:x="968" fg:w="1"/><text x="79.9864%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.7364%" y="501" width="0.0824%" height="15" fill="rgb(242,227,46)" fg:x="968" fg:w="1"/><text x="79.9864%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.7364%" y="485" width="0.0824%" height="15" fill="rgb(246,197,35)" fg:x="968" fg:w="1"/><text x="79.9864%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.7364%" y="469" width="0.0824%" height="15" fill="rgb(215,159,26)" fg:x="968" fg:w="1"/><text x="79.9864%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.8188%" y="501" width="0.0824%" height="15" fill="rgb(212,194,50)" fg:x="969" fg:w="1"/><text x="80.0688%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.8188%" y="485" width="0.0824%" height="15" fill="rgb(246,132,1)" fg:x="969" fg:w="1"/><text x="80.0688%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="79.8188%" y="469" width="0.0824%" height="15" fill="rgb(217,71,7)" fg:x="969" fg:w="1"/><text x="80.0688%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.33%)</title><rect x="79.9012%" y="485" width="0.3295%" height="15" fill="rgb(252,59,32)" fg:x="970" fg:w="4"/><text x="80.1512%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.33%)</title><rect x="79.9012%" y="469" width="0.3295%" height="15" fill="rgb(253,204,25)" fg:x="970" fg:w="4"/><text x="80.1512%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.33%)</title><rect x="79.9012%" y="453" width="0.3295%" height="15" fill="rgb(232,21,16)" fg:x="970" fg:w="4"/><text x="80.1512%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.33%)</title><rect x="79.9012%" y="437" width="0.3295%" height="15" fill="rgb(248,90,29)" fg:x="970" fg:w="4"/><text x="80.1512%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.33%)</title><rect x="79.9012%" y="421" width="0.3295%" height="15" fill="rgb(249,223,7)" fg:x="970" fg:w="4"/><text x="80.1512%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.33%)</title><rect x="79.9012%" y="405" width="0.3295%" height="15" fill="rgb(231,119,42)" fg:x="970" fg:w="4"/><text x="80.1512%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.25%)</title><rect x="79.9835%" y="389" width="0.2471%" height="15" fill="rgb(215,41,35)" fg:x="971" fg:w="3"/><text x="80.2335%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="80.0659%" y="373" width="0.1647%" height="15" fill="rgb(220,44,45)" fg:x="972" fg:w="2"/><text x="80.3159%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="80.0659%" y="357" width="0.1647%" height="15" fill="rgb(253,197,36)" fg:x="972" fg:w="2"/><text x="80.3159%" y="367.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.49%)</title><rect x="79.8188%" y="533" width="0.4942%" height="15" fill="rgb(245,225,54)" fg:x="969" fg:w="6"/><text x="80.0688%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.49%)</title><rect x="79.8188%" y="517" width="0.4942%" height="15" fill="rgb(239,94,37)" fg:x="969" fg:w="6"/><text x="80.0688%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.41%)</title><rect x="79.9012%" y="501" width="0.4119%" height="15" fill="rgb(242,217,10)" fg:x="970" fg:w="5"/><text x="80.1512%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.2306%" y="485" width="0.0824%" height="15" fill="rgb(250,193,7)" fg:x="974" fg:w="1"/><text x="80.4806%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.2306%" y="469" width="0.0824%" height="15" fill="rgb(230,104,19)" fg:x="974" fg:w="1"/><text x="80.4806%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="80.2306%" y="453" width="0.0824%" height="15" fill="rgb(230,181,4)" fg:x="974" fg:w="1"/><text x="80.4806%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="80.3130%" y="469" width="0.0824%" height="15" fill="rgb(216,219,49)" fg:x="975" fg:w="1"/><text x="80.5630%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="80.3130%" y="453" width="0.0824%" height="15" fill="rgb(254,144,0)" fg:x="975" fg:w="1"/><text x="80.5630%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="80.3130%" y="437" width="0.0824%" height="15" fill="rgb(205,209,38)" fg:x="975" fg:w="1"/><text x="80.5630%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="80.3130%" y="421" width="0.0824%" height="15" fill="rgb(240,21,42)" fg:x="975" fg:w="1"/><text x="80.5630%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="80.3130%" y="405" width="0.0824%" height="15" fill="rgb(241,132,3)" fg:x="975" fg:w="1"/><text x="80.5630%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="80.3130%" y="389" width="0.0824%" height="15" fill="rgb(225,14,2)" fg:x="975" fg:w="1"/><text x="80.5630%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="80.3130%" y="373" width="0.0824%" height="15" fill="rgb(210,141,35)" fg:x="975" fg:w="1"/><text x="80.5630%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="80.3130%" y="357" width="0.0824%" height="15" fill="rgb(251,14,44)" fg:x="975" fg:w="1"/><text x="80.5630%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="80.3130%" y="341" width="0.0824%" height="15" fill="rgb(247,48,18)" fg:x="975" fg:w="1"/><text x="80.5630%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="80.3130%" y="325" width="0.0824%" height="15" fill="rgb(225,0,40)" fg:x="975" fg:w="1"/><text x="80.5630%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="80.3130%" y="309" width="0.0824%" height="15" fill="rgb(221,31,33)" fg:x="975" fg:w="1"/><text x="80.5630%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="80.3130%" y="293" width="0.0824%" height="15" fill="rgb(237,42,40)" fg:x="975" fg:w="1"/><text x="80.5630%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.3130%" y="277" width="0.0824%" height="15" fill="rgb(233,51,29)" fg:x="975" fg:w="1"/><text x="80.5630%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.3130%" y="261" width="0.0824%" height="15" fill="rgb(226,58,20)" fg:x="975" fg:w="1"/><text x="80.5630%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.3130%" y="245" width="0.0824%" height="15" fill="rgb(208,98,7)" fg:x="975" fg:w="1"/><text x="80.5630%" y="255.50"></text></g><g><title>engine::session::Session::close (11 samples, 0.91%)</title><rect x="79.5717%" y="629" width="0.9061%" height="15" fill="rgb(228,143,44)" fg:x="966" fg:w="11"/><text x="79.8217%" y="639.50"></text></g><g><title>engine::session::state::State::close (11 samples, 0.91%)</title><rect x="79.5717%" y="613" width="0.9061%" height="15" fill="rgb(246,55,38)" fg:x="966" fg:w="11"/><text x="79.8217%" y="623.50"></text></g><g><title>engine::session::state::State::flush_entities (11 samples, 0.91%)</title><rect x="79.5717%" y="597" width="0.9061%" height="15" fill="rgb(247,87,16)" fg:x="966" fg:w="11"/><text x="79.8217%" y="607.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (11 samples, 0.91%)</title><rect x="79.5717%" y="581" width="0.9061%" height="15" fill="rgb(234,129,42)" fg:x="966" fg:w="11"/><text x="79.8217%" y="591.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (11 samples, 0.91%)</title><rect x="79.5717%" y="565" width="0.9061%" height="15" fill="rgb(220,82,16)" fg:x="966" fg:w="11"/><text x="79.8217%" y="575.50"></text></g><g><title>kernel::model::any_entity_changes (8 samples, 0.66%)</title><rect x="79.8188%" y="549" width="0.6590%" height="15" fill="rgb(211,88,4)" fg:x="969" fg:w="8"/><text x="80.0688%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="80.3130%" y="533" width="0.1647%" height="15" fill="rgb(248,151,21)" fg:x="975" fg:w="2"/><text x="80.5630%" y="543.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="80.3130%" y="517" width="0.1647%" height="15" fill="rgb(238,163,6)" fg:x="975" fg:w="2"/><text x="80.5630%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="80.3130%" y="501" width="0.1647%" height="15" fill="rgb(209,183,11)" fg:x="975" fg:w="2"/><text x="80.5630%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="80.3130%" y="485" width="0.1647%" height="15" fill="rgb(219,37,20)" fg:x="975" fg:w="2"/><text x="80.5630%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.3954%" y="469" width="0.0824%" height="15" fill="rgb(210,158,4)" fg:x="976" fg:w="1"/><text x="80.6454%" y="479.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="80.4778%" y="549" width="0.1647%" height="15" fill="rgb(221,167,53)" fg:x="977" fg:w="2"/><text x="80.7278%" y="559.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (1 samples, 0.08%)</title><rect x="80.5601%" y="533" width="0.0824%" height="15" fill="rgb(237,151,45)" fg:x="978" fg:w="1"/><text x="80.8101%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="80.5601%" y="517" width="0.0824%" height="15" fill="rgb(231,39,3)" fg:x="978" fg:w="1"/><text x="80.8101%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="80.5601%" y="501" width="0.0824%" height="15" fill="rgb(212,167,28)" fg:x="978" fg:w="1"/><text x="80.8101%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="80.5601%" y="485" width="0.0824%" height="15" fill="rgb(232,178,8)" fg:x="978" fg:w="1"/><text x="80.8101%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="80.5601%" y="469" width="0.0824%" height="15" fill="rgb(225,151,20)" fg:x="978" fg:w="1"/><text x="80.8101%" y="479.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="80.5601%" y="453" width="0.0824%" height="15" fill="rgb(238,3,37)" fg:x="978" fg:w="1"/><text x="80.8101%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (1 samples, 0.08%)</title><rect x="80.5601%" y="437" width="0.0824%" height="15" fill="rgb(251,147,42)" fg:x="978" fg:w="1"/><text x="80.8101%" y="447.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="80.5601%" y="421" width="0.0824%" height="15" fill="rgb(208,173,10)" fg:x="978" fg:w="1"/><text x="80.8101%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="80.5601%" y="405" width="0.0824%" height="15" fill="rgb(246,225,4)" fg:x="978" fg:w="1"/><text x="80.8101%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="80.5601%" y="389" width="0.0824%" height="15" fill="rgb(248,102,6)" fg:x="978" fg:w="1"/><text x="80.8101%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="80.5601%" y="373" width="0.0824%" height="15" fill="rgb(232,6,21)" fg:x="978" fg:w="1"/><text x="80.8101%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="80.5601%" y="357" width="0.0824%" height="15" fill="rgb(221,179,22)" fg:x="978" fg:w="1"/><text x="80.8101%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="80.5601%" y="341" width="0.0824%" height="15" fill="rgb(252,50,20)" fg:x="978" fg:w="1"/><text x="80.8101%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="80.5601%" y="325" width="0.0824%" height="15" fill="rgb(222,56,38)" fg:x="978" fg:w="1"/><text x="80.8101%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.8072%" y="341" width="0.0824%" height="15" fill="rgb(206,193,29)" fg:x="981" fg:w="1"/><text x="81.0572%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.8072%" y="325" width="0.0824%" height="15" fill="rgb(239,192,45)" fg:x="981" fg:w="1"/><text x="81.0572%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.8072%" y="309" width="0.0824%" height="15" fill="rgb(254,18,36)" fg:x="981" fg:w="1"/><text x="81.0572%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.8072%" y="293" width="0.0824%" height="15" fill="rgb(221,127,11)" fg:x="981" fg:w="1"/><text x="81.0572%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.8072%" y="277" width="0.0824%" height="15" fill="rgb(234,146,35)" fg:x="981" fg:w="1"/><text x="81.0572%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.8072%" y="261" width="0.0824%" height="15" fill="rgb(254,201,37)" fg:x="981" fg:w="1"/><text x="81.0572%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (2 samples, 0.16%)</title><rect x="80.8072%" y="389" width="0.1647%" height="15" fill="rgb(211,202,23)" fg:x="981" fg:w="2"/><text x="81.0572%" y="399.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="80.8072%" y="373" width="0.1647%" height="15" fill="rgb(237,91,2)" fg:x="981" fg:w="2"/><text x="81.0572%" y="383.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="80.8072%" y="357" width="0.1647%" height="15" fill="rgb(226,228,36)" fg:x="981" fg:w="2"/><text x="81.0572%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.8896%" y="341" width="0.0824%" height="15" fill="rgb(213,63,50)" fg:x="982" fg:w="1"/><text x="81.1396%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.8896%" y="325" width="0.0824%" height="15" fill="rgb(235,194,19)" fg:x="982" fg:w="1"/><text x="81.1396%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.8896%" y="309" width="0.0824%" height="15" fill="rgb(207,204,18)" fg:x="982" fg:w="1"/><text x="81.1396%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="81.0544%" y="245" width="0.0824%" height="15" fill="rgb(248,8,7)" fg:x="984" fg:w="1"/><text x="81.3044%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (3 samples, 0.25%)</title><rect x="80.9720%" y="389" width="0.2471%" height="15" fill="rgb(223,145,47)" fg:x="983" fg:w="3"/><text x="81.2220%" y="399.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.25%)</title><rect x="80.9720%" y="373" width="0.2471%" height="15" fill="rgb(228,84,11)" fg:x="983" fg:w="3"/><text x="81.2220%" y="383.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.25%)</title><rect x="80.9720%" y="357" width="0.2471%" height="15" fill="rgb(218,76,45)" fg:x="983" fg:w="3"/><text x="81.2220%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.25%)</title><rect x="80.9720%" y="341" width="0.2471%" height="15" fill="rgb(223,80,15)" fg:x="983" fg:w="3"/><text x="81.2220%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="80.9720%" y="325" width="0.2471%" height="15" fill="rgb(219,218,33)" fg:x="983" fg:w="3"/><text x="81.2220%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.25%)</title><rect x="80.9720%" y="309" width="0.2471%" height="15" fill="rgb(208,51,11)" fg:x="983" fg:w="3"/><text x="81.2220%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="80.9720%" y="293" width="0.2471%" height="15" fill="rgb(229,165,39)" fg:x="983" fg:w="3"/><text x="81.2220%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="81.0544%" y="277" width="0.1647%" height="15" fill="rgb(241,100,24)" fg:x="984" fg:w="2"/><text x="81.3044%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="81.0544%" y="261" width="0.1647%" height="15" fill="rgb(228,14,23)" fg:x="984" fg:w="2"/><text x="81.3044%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="81.1367%" y="245" width="0.0824%" height="15" fill="rgb(247,116,52)" fg:x="985" fg:w="1"/><text x="81.3867%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.1367%" y="229" width="0.0824%" height="15" fill="rgb(216,149,33)" fg:x="985" fg:w="1"/><text x="81.3867%" y="239.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="81.2191%" y="389" width="0.1647%" height="15" fill="rgb(238,142,29)" fg:x="986" fg:w="2"/><text x="81.4691%" y="399.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="81.2191%" y="373" width="0.1647%" height="15" fill="rgb(224,83,40)" fg:x="986" fg:w="2"/><text x="81.4691%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="81.3015%" y="357" width="0.0824%" height="15" fill="rgb(234,165,11)" fg:x="987" fg:w="1"/><text x="81.5515%" y="367.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="81.3015%" y="341" width="0.0824%" height="15" fill="rgb(215,96,23)" fg:x="987" fg:w="1"/><text x="81.5515%" y="351.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="81.3015%" y="325" width="0.0824%" height="15" fill="rgb(233,179,26)" fg:x="987" fg:w="1"/><text x="81.5515%" y="335.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="81.3015%" y="309" width="0.0824%" height="15" fill="rgb(225,129,33)" fg:x="987" fg:w="1"/><text x="81.5515%" y="319.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="81.3015%" y="293" width="0.0824%" height="15" fill="rgb(237,49,13)" fg:x="987" fg:w="1"/><text x="81.5515%" y="303.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="81.3015%" y="277" width="0.0824%" height="15" fill="rgb(211,3,31)" fg:x="987" fg:w="1"/><text x="81.5515%" y="287.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="81.3839%" y="341" width="0.0824%" height="15" fill="rgb(216,152,19)" fg:x="988" fg:w="1"/><text x="81.6339%" y="351.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="81.3839%" y="325" width="0.0824%" height="15" fill="rgb(251,121,35)" fg:x="988" fg:w="1"/><text x="81.6339%" y="335.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="81.3839%" y="309" width="0.0824%" height="15" fill="rgb(210,217,47)" fg:x="988" fg:w="1"/><text x="81.6339%" y="319.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="81.3839%" y="293" width="0.0824%" height="15" fill="rgb(244,116,22)" fg:x="988" fg:w="1"/><text x="81.6339%" y="303.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="81.3839%" y="277" width="0.0824%" height="15" fill="rgb(228,17,21)" fg:x="988" fg:w="1"/><text x="81.6339%" y="287.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="81.5486%" y="325" width="0.0824%" height="15" fill="rgb(240,149,34)" fg:x="990" fg:w="1"/><text x="81.7986%" y="335.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="81.7133%" y="245" width="0.0824%" height="15" fill="rgb(208,125,47)" fg:x="992" fg:w="1"/><text x="81.9633%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="81.7133%" y="229" width="0.0824%" height="15" fill="rgb(249,186,39)" fg:x="992" fg:w="1"/><text x="81.9633%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="81.7133%" y="213" width="0.0824%" height="15" fill="rgb(240,220,33)" fg:x="992" fg:w="1"/><text x="81.9633%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.25%)</title><rect x="81.6310%" y="309" width="0.2471%" height="15" fill="rgb(243,110,23)" fg:x="991" fg:w="3"/><text x="81.8810%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="81.7133%" y="293" width="0.1647%" height="15" fill="rgb(219,163,46)" fg:x="992" fg:w="2"/><text x="81.9633%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="81.7133%" y="277" width="0.1647%" height="15" fill="rgb(216,126,30)" fg:x="992" fg:w="2"/><text x="81.9633%" y="287.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (2 samples, 0.16%)</title><rect x="81.7133%" y="261" width="0.1647%" height="15" fill="rgb(208,139,11)" fg:x="992" fg:w="2"/><text x="81.9633%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1 samples, 0.08%)</title><rect x="81.7957%" y="245" width="0.0824%" height="15" fill="rgb(213,118,36)" fg:x="993" fg:w="1"/><text x="82.0457%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (2 samples, 0.16%)</title><rect x="81.8781%" y="261" width="0.1647%" height="15" fill="rgb(226,43,17)" fg:x="994" fg:w="2"/><text x="82.1281%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="81.8781%" y="245" width="0.1647%" height="15" fill="rgb(254,217,4)" fg:x="994" fg:w="2"/><text x="82.1281%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.9605%" y="229" width="0.0824%" height="15" fill="rgb(210,134,47)" fg:x="995" fg:w="1"/><text x="82.2105%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.25%)</title><rect x="81.8781%" y="277" width="0.2471%" height="15" fill="rgb(237,24,49)" fg:x="994" fg:w="3"/><text x="82.1281%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="82.0428%" y="261" width="0.0824%" height="15" fill="rgb(251,39,46)" fg:x="996" fg:w="1"/><text x="82.2928%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="82.0428%" y="245" width="0.0824%" height="15" fill="rgb(251,220,3)" fg:x="996" fg:w="1"/><text x="82.2928%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.33%)</title><rect x="81.8781%" y="309" width="0.3295%" height="15" fill="rgb(228,105,12)" fg:x="994" fg:w="4"/><text x="82.1281%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.33%)</title><rect x="81.8781%" y="293" width="0.3295%" height="15" fill="rgb(215,196,1)" fg:x="994" fg:w="4"/><text x="82.1281%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="82.1252%" y="277" width="0.0824%" height="15" fill="rgb(214,33,39)" fg:x="997" fg:w="1"/><text x="82.3752%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="82.1252%" y="261" width="0.0824%" height="15" fill="rgb(220,19,52)" fg:x="997" fg:w="1"/><text x="82.3752%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.1252%" y="245" width="0.0824%" height="15" fill="rgb(221,78,38)" fg:x="997" fg:w="1"/><text x="82.3752%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="82.2076%" y="293" width="0.0824%" height="15" fill="rgb(253,30,16)" fg:x="998" fg:w="1"/><text x="82.4576%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="82.2076%" y="277" width="0.0824%" height="15" fill="rgb(242,65,0)" fg:x="998" fg:w="1"/><text x="82.4576%" y="287.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="82.2900%" y="293" width="0.0824%" height="15" fill="rgb(235,201,12)" fg:x="999" fg:w="1"/><text x="82.5400%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Config::nfa_size_limit (1 samples, 0.08%)</title><rect x="82.2900%" y="277" width="0.0824%" height="15" fill="rgb(233,161,9)" fg:x="999" fg:w="1"/><text x="82.5400%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.4547%" y="245" width="0.0824%" height="15" fill="rgb(241,207,41)" fg:x="1001" fg:w="1"/><text x="82.7047%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.5371%" y="229" width="0.0824%" height="15" fill="rgb(212,69,46)" fg:x="1002" fg:w="1"/><text x="82.7871%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (7 samples, 0.58%)</title><rect x="82.5371%" y="245" width="0.5766%" height="15" fill="rgb(239,69,45)" fg:x="1002" fg:w="7"/><text x="82.7871%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.49%)</title><rect x="82.6194%" y="229" width="0.4942%" height="15" fill="rgb(242,117,48)" fg:x="1003" fg:w="6"/><text x="82.8694%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="83.1137%" y="245" width="0.0824%" height="15" fill="rgb(228,41,36)" fg:x="1009" fg:w="1"/><text x="83.3637%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="83.1960%" y="229" width="0.0824%" height="15" fill="rgb(212,3,32)" fg:x="1010" fg:w="1"/><text x="83.4460%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="83.2784%" y="229" width="0.0824%" height="15" fill="rgb(233,41,49)" fg:x="1011" fg:w="1"/><text x="83.5284%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.25%)</title><rect x="83.1960%" y="245" width="0.2471%" height="15" fill="rgb(252,170,49)" fg:x="1010" fg:w="3"/><text x="83.4460%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="83.3608%" y="229" width="0.0824%" height="15" fill="rgb(229,53,26)" fg:x="1012" fg:w="1"/><text x="83.6108%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="83.3608%" y="213" width="0.0824%" height="15" fill="rgb(217,157,12)" fg:x="1012" fg:w="1"/><text x="83.6108%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="83.3608%" y="197" width="0.0824%" height="15" fill="rgb(227,17,9)" fg:x="1012" fg:w="1"/><text x="83.6108%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="83.3608%" y="181" width="0.0824%" height="15" fill="rgb(218,84,12)" fg:x="1012" fg:w="1"/><text x="83.6108%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.3608%" y="165" width="0.0824%" height="15" fill="rgb(212,79,24)" fg:x="1012" fg:w="1"/><text x="83.6108%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.3608%" y="149" width="0.0824%" height="15" fill="rgb(217,222,37)" fg:x="1012" fg:w="1"/><text x="83.6108%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="83.5255%" y="181" width="0.0824%" height="15" fill="rgb(246,208,8)" fg:x="1014" fg:w="1"/><text x="83.7755%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="83.5255%" y="165" width="0.0824%" height="15" fill="rgb(244,133,10)" fg:x="1014" fg:w="1"/><text x="83.7755%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.5255%" y="149" width="0.0824%" height="15" fill="rgb(209,219,41)" fg:x="1014" fg:w="1"/><text x="83.7755%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="83.5255%" y="133" width="0.0824%" height="15" fill="rgb(253,175,45)" fg:x="1014" fg:w="1"/><text x="83.7755%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.6079%" y="117" width="0.0824%" height="15" fill="rgb(235,100,37)" fg:x="1015" fg:w="1"/><text x="83.8579%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="83.6079%" y="181" width="0.1647%" height="15" fill="rgb(225,87,19)" fg:x="1015" fg:w="2"/><text x="83.8579%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="83.6079%" y="165" width="0.1647%" height="15" fill="rgb(217,152,17)" fg:x="1015" fg:w="2"/><text x="83.8579%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="83.6079%" y="149" width="0.1647%" height="15" fill="rgb(235,72,13)" fg:x="1015" fg:w="2"/><text x="83.8579%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="83.6079%" y="133" width="0.1647%" height="15" fill="rgb(233,140,18)" fg:x="1015" fg:w="2"/><text x="83.8579%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="83.6903%" y="117" width="0.0824%" height="15" fill="rgb(207,212,28)" fg:x="1016" fg:w="1"/><text x="83.9403%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (30 samples, 2.47%)</title><rect x="83.7727%" y="181" width="2.4712%" height="15" fill="rgb(220,130,25)" fg:x="1017" fg:w="30"/><text x="84.0227%" y="191.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (30 samples, 2.47%)</title><rect x="83.7727%" y="165" width="2.4712%" height="15" fill="rgb(205,55,34)" fg:x="1017" fg:w="30"/><text x="84.0227%" y="175.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (30 samples, 2.47%)</title><rect x="83.7727%" y="149" width="2.4712%" height="15" fill="rgb(237,54,35)" fg:x="1017" fg:w="30"/><text x="84.0227%" y="159.50">al..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="86.2438%" y="181" width="0.0824%" height="15" fill="rgb(208,67,23)" fg:x="1047" fg:w="1"/><text x="86.4938%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.2438%" y="165" width="0.0824%" height="15" fill="rgb(206,207,50)" fg:x="1047" fg:w="1"/><text x="86.4938%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 2.97%)</title><rect x="83.4432%" y="229" width="2.9654%" height="15" fill="rgb(213,211,42)" fg:x="1013" fg:w="36"/><text x="83.6932%" y="239.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (36 samples, 2.97%)</title><rect x="83.4432%" y="213" width="2.9654%" height="15" fill="rgb(252,197,50)" fg:x="1013" fg:w="36"/><text x="83.6932%" y="223.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (36 samples, 2.97%)</title><rect x="83.4432%" y="197" width="2.9654%" height="15" fill="rgb(251,211,41)" fg:x="1013" fg:w="36"/><text x="83.6932%" y="207.50">reg..</text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="86.3262%" y="181" width="0.0824%" height="15" fill="rgb(229,211,5)" fg:x="1048" fg:w="1"/><text x="86.5762%" y="191.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="86.4909%" y="213" width="0.0824%" height="15" fill="rgb(239,36,31)" fg:x="1050" fg:w="1"/><text x="86.7409%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (39 samples, 3.21%)</title><rect x="83.4432%" y="245" width="3.2125%" height="15" fill="rgb(248,67,31)" fg:x="1013" fg:w="39"/><text x="83.6932%" y="255.50">reg..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.25%)</title><rect x="86.4086%" y="229" width="0.2471%" height="15" fill="rgb(249,55,44)" fg:x="1049" fg:w="3"/><text x="86.6586%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="86.5733%" y="213" width="0.0824%" height="15" fill="rgb(216,82,12)" fg:x="1051" fg:w="1"/><text x="86.8233%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (52 samples, 4.28%)</title><rect x="82.4547%" y="261" width="4.2834%" height="15" fill="rgb(242,174,1)" fg:x="1001" fg:w="52"/><text x="82.7047%" y="271.50">regex..</text></g><g><title>regex_automata::util::prefilter::suffixes (1 samples, 0.08%)</title><rect x="86.6557%" y="245" width="0.0824%" height="15" fill="rgb(208,120,29)" fg:x="1052" fg:w="1"/><text x="86.9057%" y="255.50"></text></g><g><title>regex::regex::string::Regex::new (56 samples, 4.61%)</title><rect x="82.2076%" y="309" width="4.6129%" height="15" fill="rgb(221,105,43)" fg:x="998" fg:w="56"/><text x="82.4576%" y="319.50">regex..</text></g><g><title>regex::builders::Builder::build_one_string (54 samples, 4.45%)</title><rect x="82.3723%" y="293" width="4.4481%" height="15" fill="rgb(234,124,22)" fg:x="1000" fg:w="54"/><text x="82.6223%" y="303.50">regex..</text></g><g><title>regex_automata::meta::regex::Builder::build (54 samples, 4.45%)</title><rect x="82.3723%" y="277" width="4.4481%" height="15" fill="rgb(212,23,30)" fg:x="1000" fg:w="54"/><text x="82.6223%" y="287.50">regex..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="86.7381%" y="261" width="0.0824%" height="15" fill="rgb(219,122,53)" fg:x="1053" fg:w="1"/><text x="86.9881%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="86.7381%" y="245" width="0.0824%" height="15" fill="rgb(248,84,24)" fg:x="1053" fg:w="1"/><text x="86.9881%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="86.9852%" y="229" width="0.0824%" height="15" fill="rgb(245,115,18)" fg:x="1056" fg:w="1"/><text x="87.2352%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="87.0675%" y="229" width="0.0824%" height="15" fill="rgb(227,176,51)" fg:x="1057" fg:w="1"/><text x="87.3175%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (68 samples, 5.60%)</title><rect x="81.6310%" y="325" width="5.6013%" height="15" fill="rgb(229,63,42)" fg:x="991" fg:w="68"/><text x="81.8810%" y="335.50">indefin..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.41%)</title><rect x="86.8204%" y="309" width="0.4119%" height="15" fill="rgb(247,202,24)" fg:x="1054" fg:w="5"/><text x="87.0704%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.41%)</title><rect x="86.8204%" y="293" width="0.4119%" height="15" fill="rgb(244,173,20)" fg:x="1054" fg:w="5"/><text x="87.0704%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.41%)</title><rect x="86.8204%" y="277" width="0.4119%" height="15" fill="rgb(242,81,47)" fg:x="1054" fg:w="5"/><text x="87.0704%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.41%)</title><rect x="86.8204%" y="261" width="0.4119%" height="15" fill="rgb(231,185,54)" fg:x="1054" fg:w="5"/><text x="87.0704%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.41%)</title><rect x="86.8204%" y="245" width="0.4119%" height="15" fill="rgb(243,55,32)" fg:x="1054" fg:w="5"/><text x="87.0704%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="87.1499%" y="229" width="0.0824%" height="15" fill="rgb(208,167,19)" fg:x="1058" fg:w="1"/><text x="87.3999%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="87.2323%" y="309" width="0.0824%" height="15" fill="rgb(231,72,35)" fg:x="1059" fg:w="1"/><text x="87.4823%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="87.2323%" y="293" width="0.0824%" height="15" fill="rgb(250,173,51)" fg:x="1059" fg:w="1"/><text x="87.4823%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="87.2323%" y="277" width="0.0824%" height="15" fill="rgb(209,5,22)" fg:x="1059" fg:w="1"/><text x="87.4823%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="87.2323%" y="261" width="0.0824%" height="15" fill="rgb(250,174,19)" fg:x="1059" fg:w="1"/><text x="87.4823%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.25%)</title><rect x="87.3147%" y="293" width="0.2471%" height="15" fill="rgb(217,3,49)" fg:x="1060" fg:w="3"/><text x="87.5647%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.25%)</title><rect x="87.3147%" y="277" width="0.2471%" height="15" fill="rgb(218,225,5)" fg:x="1060" fg:w="3"/><text x="87.5647%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="87.4794%" y="261" width="0.0824%" height="15" fill="rgb(236,89,11)" fg:x="1062" fg:w="1"/><text x="87.7294%" y="271.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (7 samples, 0.58%)</title><rect x="87.3147%" y="309" width="0.5766%" height="15" fill="rgb(206,33,28)" fg:x="1060" fg:w="7"/><text x="87.5647%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.33%)</title><rect x="87.5618%" y="293" width="0.3295%" height="15" fill="rgb(241,56,42)" fg:x="1063" fg:w="4"/><text x="87.8118%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.33%)</title><rect x="87.5618%" y="277" width="0.3295%" height="15" fill="rgb(222,44,11)" fg:x="1063" fg:w="4"/><text x="87.8118%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.33%)</title><rect x="87.5618%" y="261" width="0.3295%" height="15" fill="rgb(234,111,20)" fg:x="1063" fg:w="4"/><text x="87.8118%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.33%)</title><rect x="87.5618%" y="245" width="0.3295%" height="15" fill="rgb(237,77,6)" fg:x="1063" fg:w="4"/><text x="87.8118%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.33%)</title><rect x="87.5618%" y="229" width="0.3295%" height="15" fill="rgb(235,111,23)" fg:x="1063" fg:w="4"/><text x="87.8118%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="87.8089%" y="213" width="0.0824%" height="15" fill="rgb(251,135,29)" fg:x="1066" fg:w="1"/><text x="88.0589%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="87.8913%" y="261" width="0.0824%" height="15" fill="rgb(217,57,1)" fg:x="1067" fg:w="1"/><text x="88.1413%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="87.8913%" y="245" width="0.0824%" height="15" fill="rgb(249,119,31)" fg:x="1067" fg:w="1"/><text x="88.1413%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.0560%" y="229" width="0.0824%" height="15" fill="rgb(233,164,33)" fg:x="1069" fg:w="1"/><text x="88.3060%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (18 samples, 1.48%)</title><rect x="88.0560%" y="245" width="1.4827%" height="15" fill="rgb(250,217,43)" fg:x="1069" fg:w="18"/><text x="88.3060%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (17 samples, 1.40%)</title><rect x="88.1384%" y="229" width="1.4003%" height="15" fill="rgb(232,154,50)" fg:x="1070" fg:w="17"/><text x="88.3884%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.4563%" y="213" width="0.0824%" height="15" fill="rgb(227,190,8)" fg:x="1086" fg:w="1"/><text x="89.7063%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="89.5387%" y="229" width="0.0824%" height="15" fill="rgb(209,217,32)" fg:x="1087" fg:w="1"/><text x="89.7887%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.25%)</title><rect x="89.5387%" y="245" width="0.2471%" height="15" fill="rgb(243,203,50)" fg:x="1087" fg:w="3"/><text x="89.7887%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="89.6211%" y="229" width="0.1647%" height="15" fill="rgb(232,152,27)" fg:x="1088" fg:w="2"/><text x="89.8711%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="89.7035%" y="213" width="0.0824%" height="15" fill="rgb(240,34,29)" fg:x="1089" fg:w="1"/><text x="89.9535%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="89.7035%" y="197" width="0.0824%" height="15" fill="rgb(215,185,52)" fg:x="1089" fg:w="1"/><text x="89.9535%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.7035%" y="181" width="0.0824%" height="15" fill="rgb(240,89,49)" fg:x="1089" fg:w="1"/><text x="89.9535%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.7035%" y="165" width="0.0824%" height="15" fill="rgb(225,12,52)" fg:x="1089" fg:w="1"/><text x="89.9535%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (3 samples, 0.25%)</title><rect x="89.8682%" y="213" width="0.2471%" height="15" fill="rgb(239,128,45)" fg:x="1091" fg:w="3"/><text x="90.1182%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="90.0329%" y="197" width="0.0824%" height="15" fill="rgb(211,78,47)" fg:x="1093" fg:w="1"/><text x="90.2829%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.0329%" y="181" width="0.0824%" height="15" fill="rgb(232,31,21)" fg:x="1093" fg:w="1"/><text x="90.2829%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.0329%" y="165" width="0.0824%" height="15" fill="rgb(222,168,14)" fg:x="1093" fg:w="1"/><text x="90.2829%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.0329%" y="149" width="0.0824%" height="15" fill="rgb(209,128,24)" fg:x="1093" fg:w="1"/><text x="90.2829%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (5 samples, 0.41%)</title><rect x="89.7858%" y="245" width="0.4119%" height="15" fill="rgb(249,35,13)" fg:x="1090" fg:w="5"/><text x="90.0358%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (5 samples, 0.41%)</title><rect x="89.7858%" y="229" width="0.4119%" height="15" fill="rgb(218,7,2)" fg:x="1090" fg:w="5"/><text x="90.0358%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (1 samples, 0.08%)</title><rect x="90.1153%" y="213" width="0.0824%" height="15" fill="rgb(238,107,27)" fg:x="1094" fg:w="1"/><text x="90.3653%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="90.1153%" y="197" width="0.0824%" height="15" fill="rgb(217,88,38)" fg:x="1094" fg:w="1"/><text x="90.3653%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="90.1153%" y="181" width="0.0824%" height="15" fill="rgb(230,207,0)" fg:x="1094" fg:w="1"/><text x="90.3653%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (2 samples, 0.16%)</title><rect x="90.1977%" y="197" width="0.1647%" height="15" fill="rgb(249,64,54)" fg:x="1095" fg:w="2"/><text x="90.4477%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="90.1977%" y="181" width="0.1647%" height="15" fill="rgb(231,7,11)" fg:x="1095" fg:w="2"/><text x="90.4477%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="90.1977%" y="165" width="0.1647%" height="15" fill="rgb(205,149,21)" fg:x="1095" fg:w="2"/><text x="90.4477%" y="175.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="90.1977%" y="149" width="0.1647%" height="15" fill="rgb(215,126,34)" fg:x="1095" fg:w="2"/><text x="90.4477%" y="159.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="90.6096%" y="133" width="0.1647%" height="15" fill="rgb(241,132,45)" fg:x="1100" fg:w="2"/><text x="90.8596%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="91.0214%" y="101" width="0.1647%" height="15" fill="rgb(252,69,32)" fg:x="1105" fg:w="2"/><text x="91.2714%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="91.0214%" y="85" width="0.1647%" height="15" fill="rgb(232,204,19)" fg:x="1105" fg:w="2"/><text x="91.2714%" y="95.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="91.0214%" y="69" width="0.1647%" height="15" fill="rgb(249,15,47)" fg:x="1105" fg:w="2"/><text x="91.2714%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (8 samples, 0.66%)</title><rect x="90.7743%" y="133" width="0.6590%" height="15" fill="rgb(209,227,23)" fg:x="1102" fg:w="8"/><text x="91.0243%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (6 samples, 0.49%)</title><rect x="90.9390%" y="117" width="0.4942%" height="15" fill="rgb(248,92,24)" fg:x="1104" fg:w="6"/><text x="91.1890%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.25%)</title><rect x="91.1862%" y="101" width="0.2471%" height="15" fill="rgb(247,59,2)" fg:x="1107" fg:w="3"/><text x="91.4362%" y="111.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="91.5157%" y="101" width="0.1647%" height="15" fill="rgb(221,30,5)" fg:x="1111" fg:w="2"/><text x="91.7657%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (52 samples, 4.28%)</title><rect x="91.4333%" y="133" width="4.2834%" height="15" fill="rgb(208,108,53)" fg:x="1110" fg:w="52"/><text x="91.6833%" y="143.50">regex..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (51 samples, 4.20%)</title><rect x="91.5157%" y="117" width="4.2010%" height="15" fill="rgb(211,183,26)" fg:x="1111" fg:w="51"/><text x="91.7657%" y="127.50">regex..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (49 samples, 4.04%)</title><rect x="91.6804%" y="101" width="4.0362%" height="15" fill="rgb(232,132,4)" fg:x="1113" fg:w="49"/><text x="91.9304%" y="111.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="95.7166%" y="133" width="0.0824%" height="15" fill="rgb(253,128,37)" fg:x="1162" fg:w="1"/><text x="95.9666%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (69 samples, 5.68%)</title><rect x="90.1977%" y="229" width="5.6837%" height="15" fill="rgb(221,58,24)" fg:x="1095" fg:w="69"/><text x="90.4477%" y="239.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (69 samples, 5.68%)</title><rect x="90.1977%" y="213" width="5.6837%" height="15" fill="rgb(230,54,45)" fg:x="1095" fg:w="69"/><text x="90.4477%" y="223.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (67 samples, 5.52%)</title><rect x="90.3624%" y="197" width="5.5189%" height="15" fill="rgb(254,21,18)" fg:x="1097" fg:w="67"/><text x="90.6124%" y="207.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (67 samples, 5.52%)</title><rect x="90.3624%" y="181" width="5.5189%" height="15" fill="rgb(221,108,0)" fg:x="1097" fg:w="67"/><text x="90.6124%" y="191.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (67 samples, 5.52%)</title><rect x="90.3624%" y="165" width="5.5189%" height="15" fill="rgb(206,95,1)" fg:x="1097" fg:w="67"/><text x="90.6124%" y="175.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (67 samples, 5.52%)</title><rect x="90.3624%" y="149" width="5.5189%" height="15" fill="rgb(237,52,5)" fg:x="1097" fg:w="67"/><text x="90.6124%" y="159.50">regex_a..</text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="95.7990%" y="133" width="0.0824%" height="15" fill="rgb(218,150,34)" fg:x="1163" fg:w="1"/><text x="96.0490%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.1285%" y="213" width="0.0824%" height="15" fill="rgb(235,194,28)" fg:x="1167" fg:w="1"/><text x="96.3785%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="96.2109%" y="213" width="0.1647%" height="15" fill="rgb(245,92,18)" fg:x="1168" fg:w="2"/><text x="96.4609%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.41%)</title><rect x="96.3756%" y="213" width="0.4119%" height="15" fill="rgb(253,203,53)" fg:x="1170" fg:w="5"/><text x="96.6256%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (108 samples, 8.90%)</title><rect x="87.9736%" y="261" width="8.8962%" height="15" fill="rgb(249,185,47)" fg:x="1068" fg:w="108"/><text x="88.2236%" y="271.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (81 samples, 6.67%)</title><rect x="90.1977%" y="245" width="6.6722%" height="15" fill="rgb(252,194,52)" fg:x="1095" fg:w="81"/><text x="90.4477%" y="255.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (12 samples, 0.99%)</title><rect x="95.8814%" y="229" width="0.9885%" height="15" fill="rgb(210,53,36)" fg:x="1164" fg:w="12"/><text x="96.1314%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="96.7875%" y="213" width="0.0824%" height="15" fill="rgb(237,37,25)" fg:x="1175" fg:w="1"/><text x="97.0375%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="96.8699%" y="229" width="0.0824%" height="15" fill="rgb(242,116,27)" fg:x="1176" fg:w="1"/><text x="97.1199%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="96.8699%" y="213" width="0.0824%" height="15" fill="rgb(213,185,26)" fg:x="1176" fg:w="1"/><text x="97.1199%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.8699%" y="197" width="0.0824%" height="15" fill="rgb(225,204,8)" fg:x="1176" fg:w="1"/><text x="97.1199%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.8699%" y="181" width="0.0824%" height="15" fill="rgb(254,111,37)" fg:x="1176" fg:w="1"/><text x="97.1199%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.8699%" y="165" width="0.0824%" height="15" fill="rgb(242,35,9)" fg:x="1176" fg:w="1"/><text x="97.1199%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="96.8699%" y="261" width="0.1647%" height="15" fill="rgb(232,138,49)" fg:x="1176" fg:w="2"/><text x="97.1199%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="96.8699%" y="245" width="0.1647%" height="15" fill="rgb(247,56,4)" fg:x="1176" fg:w="2"/><text x="97.1199%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="96.9522%" y="229" width="0.0824%" height="15" fill="rgb(226,179,17)" fg:x="1177" fg:w="1"/><text x="97.2022%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.0346%" y="213" width="0.0824%" height="15" fill="rgb(216,163,45)" fg:x="1178" fg:w="1"/><text x="97.2846%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.0346%" y="197" width="0.0824%" height="15" fill="rgb(211,157,3)" fg:x="1178" fg:w="1"/><text x="97.2846%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.0346%" y="181" width="0.0824%" height="15" fill="rgb(234,44,20)" fg:x="1178" fg:w="1"/><text x="97.2846%" y="191.50"></text></g><g><title>indefinite::rules::number::Number::check (121 samples, 9.97%)</title><rect x="87.2323%" y="325" width="9.9671%" height="15" fill="rgb(254,138,23)" fg:x="1059" fg:w="121"/><text x="87.4823%" y="335.50">indefinite::ru..</text></g><g><title>regex::regex::string::Regex::new (113 samples, 9.31%)</title><rect x="87.8913%" y="309" width="9.3081%" height="15" fill="rgb(206,119,39)" fg:x="1067" fg:w="113"/><text x="88.1413%" y="319.50">regex::regex:..</text></g><g><title>regex::builders::Builder::build_one_string (113 samples, 9.31%)</title><rect x="87.8913%" y="293" width="9.3081%" height="15" fill="rgb(231,105,52)" fg:x="1067" fg:w="113"/><text x="88.1413%" y="303.50">regex::builde..</text></g><g><title>regex_automata::meta::regex::Builder::build (113 samples, 9.31%)</title><rect x="87.8913%" y="277" width="9.3081%" height="15" fill="rgb(250,20,5)" fg:x="1067" fg:w="113"/><text x="88.1413%" y="287.50">regex_automat..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="97.0346%" y="261" width="0.1647%" height="15" fill="rgb(215,198,30)" fg:x="1178" fg:w="2"/><text x="97.2846%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="97.0346%" y="245" width="0.1647%" height="15" fill="rgb(246,142,8)" fg:x="1178" fg:w="2"/><text x="97.2846%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="97.0346%" y="229" width="0.1647%" height="15" fill="rgb(243,26,38)" fg:x="1178" fg:w="2"/><text x="97.2846%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="97.1170%" y="213" width="0.0824%" height="15" fill="rgb(205,133,28)" fg:x="1179" fg:w="1"/><text x="97.3670%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="97.1170%" y="197" width="0.0824%" height="15" fill="rgb(212,34,0)" fg:x="1179" fg:w="1"/><text x="97.3670%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;str&gt;&gt; (1 samples, 0.08%)</title><rect x="97.1993%" y="293" width="0.0824%" height="15" fill="rgb(251,226,22)" fg:x="1180" fg:w="1"/><text x="97.4493%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="97.2817%" y="277" width="0.1647%" height="15" fill="rgb(252,119,9)" fg:x="1181" fg:w="2"/><text x="97.5317%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="97.4465%" y="261" width="0.0824%" height="15" fill="rgb(213,150,50)" fg:x="1183" fg:w="1"/><text x="97.6965%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="97.4465%" y="245" width="0.0824%" height="15" fill="rgb(212,24,39)" fg:x="1183" fg:w="1"/><text x="97.6965%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.4465%" y="229" width="0.0824%" height="15" fill="rgb(213,46,39)" fg:x="1183" fg:w="1"/><text x="97.6965%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.41%)</title><rect x="97.2817%" y="293" width="0.4119%" height="15" fill="rgb(239,106,12)" fg:x="1181" fg:w="5"/><text x="97.5317%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.25%)</title><rect x="97.4465%" y="277" width="0.2471%" height="15" fill="rgb(249,229,21)" fg:x="1183" fg:w="3"/><text x="97.6965%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="97.5288%" y="261" width="0.1647%" height="15" fill="rgb(212,158,3)" fg:x="1184" fg:w="2"/><text x="97.7788%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="97.5288%" y="245" width="0.1647%" height="15" fill="rgb(253,26,48)" fg:x="1184" fg:w="2"/><text x="97.7788%" y="255.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="97.5288%" y="229" width="0.1647%" height="15" fill="rgb(238,178,20)" fg:x="1184" fg:w="2"/><text x="97.7788%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="97.7759%" y="181" width="0.0824%" height="15" fill="rgb(208,86,15)" fg:x="1187" fg:w="1"/><text x="98.0259%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="97.7759%" y="245" width="0.1647%" height="15" fill="rgb(239,42,53)" fg:x="1187" fg:w="2"/><text x="98.0259%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="97.7759%" y="229" width="0.1647%" height="15" fill="rgb(245,226,8)" fg:x="1187" fg:w="2"/><text x="98.0259%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="97.7759%" y="213" width="0.1647%" height="15" fill="rgb(216,176,32)" fg:x="1187" fg:w="2"/><text x="98.0259%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="97.7759%" y="197" width="0.1647%" height="15" fill="rgb(231,186,21)" fg:x="1187" fg:w="2"/><text x="98.0259%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.8583%" y="181" width="0.0824%" height="15" fill="rgb(205,95,49)" fg:x="1188" fg:w="1"/><text x="98.1083%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.0231%" y="229" width="0.0824%" height="15" fill="rgb(217,145,8)" fg:x="1190" fg:w="1"/><text x="98.2731%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.1054%" y="213" width="0.0824%" height="15" fill="rgb(239,144,48)" fg:x="1191" fg:w="1"/><text x="98.3554%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="98.1054%" y="197" width="0.0824%" height="15" fill="rgb(214,189,23)" fg:x="1191" fg:w="1"/><text x="98.3554%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="98.1054%" y="181" width="0.0824%" height="15" fill="rgb(229,157,17)" fg:x="1191" fg:w="1"/><text x="98.3554%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (4 samples, 0.33%)</title><rect x="97.9407%" y="245" width="0.3295%" height="15" fill="rgb(230,5,48)" fg:x="1189" fg:w="4"/><text x="98.1907%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (2 samples, 0.16%)</title><rect x="98.1054%" y="229" width="0.1647%" height="15" fill="rgb(224,156,48)" fg:x="1191" fg:w="2"/><text x="98.3554%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="98.1878%" y="213" width="0.0824%" height="15" fill="rgb(223,14,29)" fg:x="1192" fg:w="1"/><text x="98.4378%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="98.1878%" y="197" width="0.0824%" height="15" fill="rgb(229,96,36)" fg:x="1192" fg:w="1"/><text x="98.4378%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.25%)</title><rect x="98.2702%" y="245" width="0.2471%" height="15" fill="rgb(231,102,53)" fg:x="1193" fg:w="3"/><text x="98.5202%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.25%)</title><rect x="98.2702%" y="229" width="0.2471%" height="15" fill="rgb(210,77,38)" fg:x="1193" fg:w="3"/><text x="98.5202%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="98.3526%" y="213" width="0.1647%" height="15" fill="rgb(235,131,6)" fg:x="1194" fg:w="2"/><text x="98.6026%" y="223.50"></text></g><g><title>regex::regex::string::Regex::new (13 samples, 1.07%)</title><rect x="97.6936%" y="293" width="1.0708%" height="15" fill="rgb(252,55,38)" fg:x="1186" fg:w="13"/><text x="97.9436%" y="303.50"></text></g><g><title>regex::builders::Builder::build_one_string (13 samples, 1.07%)</title><rect x="97.6936%" y="277" width="1.0708%" height="15" fill="rgb(246,38,14)" fg:x="1186" fg:w="13"/><text x="97.9436%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (13 samples, 1.07%)</title><rect x="97.6936%" y="261" width="1.0708%" height="15" fill="rgb(242,27,5)" fg:x="1186" fg:w="13"/><text x="97.9436%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.25%)</title><rect x="98.5173%" y="245" width="0.2471%" height="15" fill="rgb(228,65,35)" fg:x="1196" fg:w="3"/><text x="98.7673%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.25%)</title><rect x="98.5173%" y="229" width="0.2471%" height="15" fill="rgb(245,93,11)" fg:x="1196" fg:w="3"/><text x="98.7673%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.25%)</title><rect x="98.5173%" y="213" width="0.2471%" height="15" fill="rgb(213,1,31)" fg:x="1196" fg:w="3"/><text x="98.7673%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.25%)</title><rect x="98.5173%" y="197" width="0.2471%" height="15" fill="rgb(237,205,14)" fg:x="1196" fg:w="3"/><text x="98.7673%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="98.5173%" y="181" width="0.2471%" height="15" fill="rgb(232,118,45)" fg:x="1196" fg:w="3"/><text x="98.7673%" y="191.50"></text></g><g><title>realloc (3 samples, 0.25%)</title><rect x="98.5173%" y="165" width="0.2471%" height="15" fill="rgb(218,5,6)" fg:x="1196" fg:w="3"/><text x="98.7673%" y="175.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="98.7644%" y="229" width="0.1647%" height="15" fill="rgb(251,87,51)" fg:x="1199" fg:w="2"/><text x="99.0144%" y="239.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (222 samples, 18.29%)</title><rect x="80.7249%" y="405" width="18.2867%" height="15" fill="rgb(207,225,20)" fg:x="980" fg:w="222"/><text x="80.9749%" y="415.50">&lt;&amp;kernel::model::entry::Entr..</text></g><g><title>plugins_core::looking::model::qualify_name (214 samples, 17.63%)</title><rect x="81.3839%" y="389" width="17.6277%" height="15" fill="rgb(222,78,54)" fg:x="988" fg:w="214"/><text x="81.6339%" y="399.50">plugins_core::looking::mode..</text></g><g><title>indefinite::indefinite (214 samples, 17.63%)</title><rect x="81.3839%" y="373" width="17.6277%" height="15" fill="rgb(232,85,16)" fg:x="988" fg:w="214"/><text x="81.6339%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (214 samples, 17.63%)</title><rect x="81.3839%" y="357" width="17.6277%" height="15" fill="rgb(244,25,33)" fg:x="988" fg:w="214"/><text x="81.6339%" y="367.50">indefinite::methods::indefi..</text></g><g><title>indefinite::methods::apply_rules (213 samples, 17.55%)</title><rect x="81.4662%" y="341" width="17.5453%" height="15" fill="rgb(233,24,36)" fg:x="989" fg:w="213"/><text x="81.7162%" y="351.50">indefinite::methods::apply_..</text></g><g><title>indefinite::rules::other::Other::run (22 samples, 1.81%)</title><rect x="97.1993%" y="325" width="1.8122%" height="15" fill="rgb(253,49,54)" fg:x="1180" fg:w="22"/><text x="97.4493%" y="335.50">i..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (22 samples, 1.81%)</title><rect x="97.1993%" y="309" width="1.8122%" height="15" fill="rgb(245,12,22)" fg:x="1180" fg:w="22"/><text x="97.4493%" y="319.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.25%)</title><rect x="98.7644%" y="293" width="0.2471%" height="15" fill="rgb(253,141,28)" fg:x="1199" fg:w="3"/><text x="99.0144%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.25%)</title><rect x="98.7644%" y="277" width="0.2471%" height="15" fill="rgb(225,207,27)" fg:x="1199" fg:w="3"/><text x="99.0144%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.25%)</title><rect x="98.7644%" y="261" width="0.2471%" height="15" fill="rgb(220,84,2)" fg:x="1199" fg:w="3"/><text x="99.0144%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.25%)</title><rect x="98.7644%" y="245" width="0.2471%" height="15" fill="rgb(224,37,37)" fg:x="1199" fg:w="3"/><text x="99.0144%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="98.9292%" y="229" width="0.0824%" height="15" fill="rgb(220,143,18)" fg:x="1201" fg:w="1"/><text x="99.1792%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="98.9292%" y="213" width="0.0824%" height="15" fill="rgb(210,88,33)" fg:x="1201" fg:w="1"/><text x="99.1792%" y="223.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="99.0115%" y="373" width="0.1647%" height="15" fill="rgb(219,87,51)" fg:x="1202" fg:w="2"/><text x="99.2615%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="99.0115%" y="357" width="0.1647%" height="15" fill="rgb(211,7,35)" fg:x="1202" fg:w="2"/><text x="99.2615%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.0939%" y="341" width="0.0824%" height="15" fill="rgb(232,77,2)" fg:x="1203" fg:w="1"/><text x="99.3439%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.0939%" y="325" width="0.0824%" height="15" fill="rgb(249,94,25)" fg:x="1203" fg:w="1"/><text x="99.3439%" y="335.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.1763%" y="277" width="0.0824%" height="15" fill="rgb(215,112,2)" fg:x="1204" fg:w="1"/><text x="99.4263%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (2 samples, 0.16%)</title><rect x="99.2586%" y="277" width="0.1647%" height="15" fill="rgb(226,115,48)" fg:x="1205" fg:w="2"/><text x="99.5086%" y="287.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.2586%" y="261" width="0.1647%" height="15" fill="rgb(249,196,10)" fg:x="1205" fg:w="2"/><text x="99.5086%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.2586%" y="245" width="0.1647%" height="15" fill="rgb(237,109,14)" fg:x="1205" fg:w="2"/><text x="99.5086%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.2586%" y="229" width="0.1647%" height="15" fill="rgb(217,103,53)" fg:x="1205" fg:w="2"/><text x="99.5086%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.2586%" y="213" width="0.1647%" height="15" fill="rgb(244,137,9)" fg:x="1205" fg:w="2"/><text x="99.5086%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3410%" y="197" width="0.0824%" height="15" fill="rgb(227,201,3)" fg:x="1206" fg:w="1"/><text x="99.5910%" y="207.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.3410%" y="181" width="0.0824%" height="15" fill="rgb(243,94,6)" fg:x="1206" fg:w="1"/><text x="99.5910%" y="191.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.3410%" y="165" width="0.0824%" height="15" fill="rgb(235,118,5)" fg:x="1206" fg:w="1"/><text x="99.5910%" y="175.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (231 samples, 19.03%)</title><rect x="80.4778%" y="613" width="19.0280%" height="15" fill="rgb(247,10,30)" fg:x="977" fg:w="231"/><text x="80.7278%" y="623.50">&lt;engine::session::Session as k..</text></g><g><title>kernel::plugins::mw::apply_middleware (231 samples, 19.03%)</title><rect x="80.4778%" y="597" width="19.0280%" height="15" fill="rgb(205,26,28)" fg:x="977" fg:w="231"/><text x="80.7278%" y="607.50">kernel::plugins::mw::apply_mid..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (231 samples, 19.03%)</title><rect x="80.4778%" y="581" width="19.0280%" height="15" fill="rgb(206,99,35)" fg:x="977" fg:w="231"/><text x="80.7278%" y="591.50">kernel::plugins::mw::Middlewar..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (231 samples, 19.03%)</title><rect x="80.4778%" y="565" width="19.0280%" height="15" fill="rgb(238,130,40)" fg:x="977" fg:w="231"/><text x="80.7278%" y="575.50">&lt;engine::session::ExpandSurrou..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (229 samples, 18.86%)</title><rect x="80.6425%" y="549" width="18.8633%" height="15" fill="rgb(224,126,31)" fg:x="979" fg:w="229"/><text x="80.8925%" y="559.50">kernel::plugins::mw::Middlewa..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (229 samples, 18.86%)</title><rect x="80.6425%" y="533" width="18.8633%" height="15" fill="rgb(254,105,17)" fg:x="979" fg:w="229"/><text x="80.8925%" y="543.50">&lt;plugins_dynlib::DynamicMiddl..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (229 samples, 18.86%)</title><rect x="80.6425%" y="517" width="18.8633%" height="15" fill="rgb(216,87,36)" fg:x="979" fg:w="229"/><text x="80.8925%" y="527.50">kernel::plugins::mw::Middlewa..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (229 samples, 18.86%)</title><rect x="80.6425%" y="501" width="18.8633%" height="15" fill="rgb(240,21,12)" fg:x="979" fg:w="229"/><text x="80.8925%" y="511.50">core::ops::function::FnOnce::..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (229 samples, 18.86%)</title><rect x="80.6425%" y="485" width="18.8633%" height="15" fill="rgb(245,192,34)" fg:x="979" fg:w="229"/><text x="80.8925%" y="495.50">kernel::plugins::mw::Middlewa..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (229 samples, 18.86%)</title><rect x="80.6425%" y="469" width="18.8633%" height="15" fill="rgb(226,100,49)" fg:x="979" fg:w="229"/><text x="80.8925%" y="479.50">core::ops::function::FnOnce::..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (229 samples, 18.86%)</title><rect x="80.6425%" y="453" width="18.8633%" height="15" fill="rgb(245,188,27)" fg:x="979" fg:w="229"/><text x="80.8925%" y="463.50">&lt;engine::session::state::Stat..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (229 samples, 18.86%)</title><rect x="80.6425%" y="437" width="18.8633%" height="15" fill="rgb(212,170,8)" fg:x="979" fg:w="229"/><text x="80.8925%" y="447.50">&lt;plugins_core::looking::actio..</text></g><g><title>plugins_core::looking::model::new_area_observation (229 samples, 18.86%)</title><rect x="80.6425%" y="421" width="18.8633%" height="15" fill="rgb(217,113,29)" fg:x="979" fg:w="229"/><text x="80.8925%" y="431.50">plugins_core::looking::model:..</text></g><g><title>kernel::model::entry::Entry::scope (6 samples, 0.49%)</title><rect x="99.0115%" y="405" width="0.4942%" height="15" fill="rgb(237,30,3)" fg:x="1202" fg:w="6"/><text x="99.2615%" y="415.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (6 samples, 0.49%)</title><rect x="99.0115%" y="389" width="0.4942%" height="15" fill="rgb(227,19,28)" fg:x="1202" fg:w="6"/><text x="99.2615%" y="399.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (4 samples, 0.33%)</title><rect x="99.1763%" y="373" width="0.3295%" height="15" fill="rgb(239,172,45)" fg:x="1204" fg:w="4"/><text x="99.4263%" y="383.50"></text></g><g><title>core::iter::adapters::try_process (4 samples, 0.33%)</title><rect x="99.1763%" y="357" width="0.3295%" height="15" fill="rgb(254,55,39)" fg:x="1204" fg:w="4"/><text x="99.4263%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.33%)</title><rect x="99.1763%" y="341" width="0.3295%" height="15" fill="rgb(249,208,12)" fg:x="1204" fg:w="4"/><text x="99.4263%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (4 samples, 0.33%)</title><rect x="99.1763%" y="325" width="0.3295%" height="15" fill="rgb(240,52,13)" fg:x="1204" fg:w="4"/><text x="99.4263%" y="335.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (4 samples, 0.33%)</title><rect x="99.1763%" y="309" width="0.3295%" height="15" fill="rgb(252,149,13)" fg:x="1204" fg:w="4"/><text x="99.4263%" y="319.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.33%)</title><rect x="99.1763%" y="293" width="0.3295%" height="15" fill="rgb(232,81,48)" fg:x="1204" fg:w="4"/><text x="99.4263%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="99.4234%" y="277" width="0.0824%" height="15" fill="rgb(222,144,2)" fg:x="1207" fg:w="1"/><text x="99.6734%" y="287.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.4234%" y="261" width="0.0824%" height="15" fill="rgb(216,81,32)" fg:x="1207" fg:w="1"/><text x="99.6734%" y="271.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.4234%" y="245" width="0.0824%" height="15" fill="rgb(244,78,51)" fg:x="1207" fg:w="1"/><text x="99.6734%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.4234%" y="229" width="0.0824%" height="15" fill="rgb(217,66,21)" fg:x="1207" fg:w="1"/><text x="99.6734%" y="239.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.5058%" y="549" width="0.0824%" height="15" fill="rgb(247,101,42)" fg:x="1208" fg:w="1"/><text x="99.7558%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5058%" y="533" width="0.0824%" height="15" fill="rgb(227,81,39)" fg:x="1208" fg:w="1"/><text x="99.7558%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5058%" y="517" width="0.0824%" height="15" fill="rgb(220,223,44)" fg:x="1208" fg:w="1"/><text x="99.7558%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5058%" y="501" width="0.0824%" height="15" fill="rgb(205,218,2)" fg:x="1208" fg:w="1"/><text x="99.7558%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5058%" y="485" width="0.0824%" height="15" fill="rgb(212,207,28)" fg:x="1208" fg:w="1"/><text x="99.7558%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.5058%" y="469" width="0.0824%" height="15" fill="rgb(224,12,41)" fg:x="1208" fg:w="1"/><text x="99.7558%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.5058%" y="453" width="0.0824%" height="15" fill="rgb(216,118,12)" fg:x="1208" fg:w="1"/><text x="99.7558%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.5058%" y="437" width="0.0824%" height="15" fill="rgb(252,97,46)" fg:x="1208" fg:w="1"/><text x="99.7558%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (2 samples, 0.16%)</title><rect x="99.5058%" y="565" width="0.1647%" height="15" fill="rgb(244,206,19)" fg:x="1208" fg:w="2"/><text x="99.7558%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.5881%" y="549" width="0.0824%" height="15" fill="rgb(231,84,31)" fg:x="1209" fg:w="1"/><text x="99.8381%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5881%" y="533" width="0.0824%" height="15" fill="rgb(244,133,0)" fg:x="1209" fg:w="1"/><text x="99.8381%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.5881%" y="517" width="0.0824%" height="15" fill="rgb(223,15,50)" fg:x="1209" fg:w="1"/><text x="99.8381%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5881%" y="501" width="0.0824%" height="15" fill="rgb(250,118,49)" fg:x="1209" fg:w="1"/><text x="99.8381%" y="511.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5881%" y="485" width="0.0824%" height="15" fill="rgb(248,25,38)" fg:x="1209" fg:w="1"/><text x="99.8381%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5881%" y="469" width="0.0824%" height="15" fill="rgb(215,70,14)" fg:x="1209" fg:w="1"/><text x="99.8381%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5881%" y="453" width="0.0824%" height="15" fill="rgb(215,28,15)" fg:x="1209" fg:w="1"/><text x="99.8381%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.5881%" y="437" width="0.0824%" height="15" fill="rgb(243,6,28)" fg:x="1209" fg:w="1"/><text x="99.8381%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (3 samples, 0.25%)</title><rect x="99.5058%" y="613" width="0.2471%" height="15" fill="rgb(222,130,1)" fg:x="1208" fg:w="3"/><text x="99.7558%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.25%)</title><rect x="99.5058%" y="597" width="0.2471%" height="15" fill="rgb(236,166,44)" fg:x="1208" fg:w="3"/><text x="99.7558%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.25%)</title><rect x="99.5058%" y="581" width="0.2471%" height="15" fill="rgb(221,108,14)" fg:x="1208" fg:w="3"/><text x="99.7558%" y="591.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="99.6705%" y="565" width="0.0824%" height="15" fill="rgb(252,3,45)" fg:x="1210" fg:w="1"/><text x="99.9205%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="99.6705%" y="549" width="0.0824%" height="15" fill="rgb(237,68,30)" fg:x="1210" fg:w="1"/><text x="99.9205%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="99.6705%" y="533" width="0.0824%" height="15" fill="rgb(211,79,22)" fg:x="1210" fg:w="1"/><text x="99.9205%" y="543.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (236 samples, 19.44%)</title><rect x="80.4778%" y="629" width="19.4399%" height="15" fill="rgb(252,185,21)" fg:x="977" fg:w="236"/><text x="80.7278%" y="639.50">engine::session::Session::eval..</text></g><g><title>engine::users::model::username_to_key (2 samples, 0.16%)</title><rect x="99.7529%" y="613" width="0.1647%" height="15" fill="rgb(225,189,26)" fg:x="1211" fg:w="2"/><text x="100.0029%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="99.7529%" y="597" width="0.1647%" height="15" fill="rgb(241,30,40)" fg:x="1211" fg:w="2"/><text x="100.0029%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="99.7529%" y="581" width="0.1647%" height="15" fill="rgb(235,215,44)" fg:x="1211" fg:w="2"/><text x="100.0029%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.8353%" y="565" width="0.0824%" height="15" fill="rgb(205,8,29)" fg:x="1212" fg:w="1"/><text x="100.0853%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8353%" y="549" width="0.0824%" height="15" fill="rgb(241,137,42)" fg:x="1212" fg:w="1"/><text x="100.0853%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.8353%" y="533" width="0.0824%" height="15" fill="rgb(237,155,2)" fg:x="1212" fg:w="1"/><text x="100.0853%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8353%" y="517" width="0.0824%" height="15" fill="rgb(245,29,42)" fg:x="1212" fg:w="1"/><text x="100.0853%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.8353%" y="501" width="0.0824%" height="15" fill="rgb(234,101,35)" fg:x="1212" fg:w="1"/><text x="100.0853%" y="511.50"></text></g><g><title>all (1,214 samples, 100%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(228,64,37)" fg:x="0" fg:w="1214"/><text x="0.2500%" y="991.50"></text></g><g><title>simple-484c7248 (1,214 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(217,214,36)" fg:x="0" fg:w="1214"/><text x="0.2500%" y="975.50">simple-484c7248</text></g><g><title>_start (1,214 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(243,70,3)" fg:x="0" fg:w="1214"/><text x="0.2500%" y="959.50">_start</text></g><g><title>__libc_start_main (1,214 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(253,158,52)" fg:x="0" fg:w="1214"/><text x="0.2500%" y="943.50">__libc_start_main</text></g><g><title>main (1,214 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(234,111,54)" fg:x="0" fg:w="1214"/><text x="0.2500%" y="927.50">main</text></g><g><title>std::rt::lang_start_internal (1,214 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(217,70,32)" fg:x="0" fg:w="1214"/><text x="0.2500%" y="911.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,214 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(234,18,33)" fg:x="0" fg:w="1214"/><text x="0.2500%" y="895.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,214 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(234,12,49)" fg:x="0" fg:w="1214"/><text x="0.2500%" y="879.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,214 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(236,10,21)" fg:x="0" fg:w="1214"/><text x="0.2500%" y="863.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,214 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(248,182,45)" fg:x="0" fg:w="1214"/><text x="0.2500%" y="847.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,214 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(217,95,36)" fg:x="0" fg:w="1214"/><text x="0.2500%" y="831.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,214 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(212,110,31)" fg:x="0" fg:w="1214"/><text x="0.2500%" y="815.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,214 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(206,32,53)" fg:x="0" fg:w="1214"/><text x="0.2500%" y="799.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,214 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(246,141,37)" fg:x="0" fg:w="1214"/><text x="0.2500%" y="783.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,214 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(219,16,7)" fg:x="0" fg:w="1214"/><text x="0.2500%" y="767.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,214 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(230,205,45)" fg:x="0" fg:w="1214"/><text x="0.2500%" y="751.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,214 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(231,43,49)" fg:x="0" fg:w="1214"/><text x="0.2500%" y="735.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,214 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(212,106,34)" fg:x="0" fg:w="1214"/><text x="0.2500%" y="719.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,214 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(206,83,17)" fg:x="0" fg:w="1214"/><text x="0.2500%" y="703.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (276 samples, 22.73%)</title><rect x="77.2652%" y="677" width="22.7348%" height="15" fill="rgb(244,154,49)" fg:x="938" fg:w="276"/><text x="77.5152%" y="687.50">&lt;criterion::routine::Function&lt;M,F,T&gt;..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (276 samples, 22.73%)</title><rect x="77.2652%" y="661" width="22.7348%" height="15" fill="rgb(244,149,49)" fg:x="938" fg:w="276"/><text x="77.5152%" y="671.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (276 samples, 22.73%)</title><rect x="77.2652%" y="645" width="22.7348%" height="15" fill="rgb(227,134,18)" fg:x="938" fg:w="276"/><text x="77.5152%" y="655.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="99.9176%" y="629" width="0.0824%" height="15" fill="rgb(237,116,36)" fg:x="1213" fg:w="1"/><text x="100.1676%" y="639.50"></text></g></svg></svg>