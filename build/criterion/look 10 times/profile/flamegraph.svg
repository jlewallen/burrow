<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1062" onload="init(evt)" viewBox="0 0 1200 1062" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1062" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1045.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1045.00"> </text><svg id="frames" x="10" width="1180" total_samples="1236"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0809%" y="613" width="0.0809%" height="15" fill="rgb(218,154,48)" fg:x="1" fg:w="1"/><text x="0.3309%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="0.1618%" y="549" width="0.1618%" height="15" fill="rgb(232,93,24)" fg:x="2" fg:w="2"/><text x="0.4118%" y="559.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.49%)</title><rect x="0.0000%" y="661" width="0.4854%" height="15" fill="rgb(245,30,21)" fg:x="0" fg:w="6"/><text x="0.2500%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (5 samples, 0.40%)</title><rect x="0.0809%" y="645" width="0.4045%" height="15" fill="rgb(242,148,29)" fg:x="1" fg:w="5"/><text x="0.3309%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="0.0809%" y="629" width="0.4045%" height="15" fill="rgb(244,153,54)" fg:x="1" fg:w="5"/><text x="0.3309%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (4 samples, 0.32%)</title><rect x="0.1618%" y="613" width="0.3236%" height="15" fill="rgb(252,87,22)" fg:x="2" fg:w="4"/><text x="0.4118%" y="623.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.1618%" y="597" width="0.3236%" height="15" fill="rgb(210,51,29)" fg:x="2" fg:w="4"/><text x="0.4118%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.1618%" y="581" width="0.3236%" height="15" fill="rgb(242,136,47)" fg:x="2" fg:w="4"/><text x="0.4118%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.1618%" y="565" width="0.3236%" height="15" fill="rgb(238,68,4)" fg:x="2" fg:w="4"/><text x="0.4118%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.3236%" y="549" width="0.1618%" height="15" fill="rgb(242,161,30)" fg:x="4" fg:w="2"/><text x="0.5736%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.4045%" y="533" width="0.0809%" height="15" fill="rgb(218,58,44)" fg:x="5" fg:w="1"/><text x="0.6545%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.4045%" y="517" width="0.0809%" height="15" fill="rgb(252,125,32)" fg:x="5" fg:w="1"/><text x="0.6545%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.4045%" y="501" width="0.0809%" height="15" fill="rgb(219,178,0)" fg:x="5" fg:w="1"/><text x="0.6545%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4045%" y="485" width="0.0809%" height="15" fill="rgb(213,152,7)" fg:x="5" fg:w="1"/><text x="0.6545%" y="495.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new_cyclic (1 samples, 0.08%)</title><rect x="0.4854%" y="629" width="0.0809%" height="15" fill="rgb(249,109,34)" fg:x="6" fg:w="1"/><text x="0.7354%" y="639.50"></text></g><g><title>engine::session::Session::initialize (3 samples, 0.24%)</title><rect x="0.5663%" y="629" width="0.2427%" height="15" fill="rgb(232,96,21)" fg:x="7" fg:w="3"/><text x="0.8163%" y="639.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (3 samples, 0.24%)</title><rect x="0.5663%" y="613" width="0.2427%" height="15" fill="rgb(228,27,39)" fg:x="7" fg:w="3"/><text x="0.8163%" y="623.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (3 samples, 0.24%)</title><rect x="0.5663%" y="597" width="0.2427%" height="15" fill="rgb(211,182,52)" fg:x="7" fg:w="3"/><text x="0.8163%" y="607.50"></text></g><g><title>libloading::os::unix::Library::open (2 samples, 0.16%)</title><rect x="0.6472%" y="581" width="0.1618%" height="15" fill="rgb(234,178,38)" fg:x="8" fg:w="2"/><text x="0.8972%" y="591.50"></text></g><g><title>dlopen (2 samples, 0.16%)</title><rect x="0.6472%" y="565" width="0.1618%" height="15" fill="rgb(221,111,3)" fg:x="8" fg:w="2"/><text x="0.8972%" y="575.50"></text></g><g><title>_dl_catch_error (2 samples, 0.16%)</title><rect x="0.6472%" y="549" width="0.1618%" height="15" fill="rgb(228,175,21)" fg:x="8" fg:w="2"/><text x="0.8972%" y="559.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="0.6472%" y="533" width="0.1618%" height="15" fill="rgb(228,174,43)" fg:x="8" fg:w="2"/><text x="0.8972%" y="543.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="0.6472%" y="517" width="0.1618%" height="15" fill="rgb(211,191,0)" fg:x="8" fg:w="2"/><text x="0.8972%" y="527.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="0.6472%" y="501" width="0.1618%" height="15" fill="rgb(253,117,3)" fg:x="8" fg:w="2"/><text x="0.8972%" y="511.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (5 samples, 0.40%)</title><rect x="0.4854%" y="661" width="0.4045%" height="15" fill="rgb(241,127,19)" fg:x="6" fg:w="5"/><text x="0.7354%" y="671.50"></text></g><g><title>engine::session::Session::new (5 samples, 0.40%)</title><rect x="0.4854%" y="645" width="0.4045%" height="15" fill="rgb(218,103,12)" fg:x="6" fg:w="5"/><text x="0.7354%" y="655.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="0.8091%" y="629" width="0.0809%" height="15" fill="rgb(236,214,43)" fg:x="10" fg:w="1"/><text x="1.0591%" y="639.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="0.8091%" y="613" width="0.0809%" height="15" fill="rgb(244,144,19)" fg:x="10" fg:w="1"/><text x="1.0591%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="0.8091%" y="597" width="0.0809%" height="15" fill="rgb(246,188,10)" fg:x="10" fg:w="1"/><text x="1.0591%" y="607.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="0.8900%" y="597" width="0.0809%" height="15" fill="rgb(212,193,33)" fg:x="11" fg:w="1"/><text x="1.1400%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="0.8900%" y="581" width="0.0809%" height="15" fill="rgb(241,51,29)" fg:x="11" fg:w="1"/><text x="1.1400%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="0.9709%" y="533" width="0.0809%" height="15" fill="rgb(211,58,19)" fg:x="12" fg:w="1"/><text x="1.2209%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="0.9709%" y="517" width="0.0809%" height="15" fill="rgb(229,111,26)" fg:x="12" fg:w="1"/><text x="1.2209%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="0.9709%" y="549" width="0.1618%" height="15" fill="rgb(213,115,40)" fg:x="12" fg:w="2"/><text x="1.2209%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.0518%" y="533" width="0.0809%" height="15" fill="rgb(209,56,44)" fg:x="13" fg:w="1"/><text x="1.3018%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.0518%" y="517" width="0.0809%" height="15" fill="rgb(230,108,32)" fg:x="13" fg:w="1"/><text x="1.3018%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.0518%" y="501" width="0.0809%" height="15" fill="rgb(216,165,31)" fg:x="13" fg:w="1"/><text x="1.3018%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="1.1327%" y="517" width="0.0809%" height="15" fill="rgb(218,122,21)" fg:x="14" fg:w="1"/><text x="1.3827%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.1327%" y="501" width="0.0809%" height="15" fill="rgb(223,224,47)" fg:x="14" fg:w="1"/><text x="1.3827%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.1327%" y="485" width="0.0809%" height="15" fill="rgb(238,102,44)" fg:x="14" fg:w="1"/><text x="1.3827%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.1327%" y="469" width="0.0809%" height="15" fill="rgb(236,46,40)" fg:x="14" fg:w="1"/><text x="1.3827%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.2136%" y="517" width="0.0809%" height="15" fill="rgb(247,202,50)" fg:x="15" fg:w="1"/><text x="1.4636%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.2136%" y="501" width="0.0809%" height="15" fill="rgb(209,99,20)" fg:x="15" fg:w="1"/><text x="1.4636%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.2136%" y="485" width="0.0809%" height="15" fill="rgb(252,27,34)" fg:x="15" fg:w="1"/><text x="1.4636%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="1.2136%" y="469" width="0.0809%" height="15" fill="rgb(215,206,23)" fg:x="15" fg:w="1"/><text x="1.4636%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="1.1327%" y="533" width="0.2427%" height="15" fill="rgb(212,135,36)" fg:x="14" fg:w="3"/><text x="1.3827%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.2945%" y="517" width="0.0809%" height="15" fill="rgb(240,189,1)" fg:x="16" fg:w="1"/><text x="1.5445%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.49%)</title><rect x="0.9709%" y="565" width="0.4854%" height="15" fill="rgb(242,56,20)" fg:x="12" fg:w="6"/><text x="1.2209%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="1.1327%" y="549" width="0.3236%" height="15" fill="rgb(247,132,33)" fg:x="14" fg:w="4"/><text x="1.3827%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.3754%" y="533" width="0.0809%" height="15" fill="rgb(208,149,11)" fg:x="17" fg:w="1"/><text x="1.6254%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.3754%" y="517" width="0.0809%" height="15" fill="rgb(211,33,11)" fg:x="17" fg:w="1"/><text x="1.6254%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.3754%" y="501" width="0.0809%" height="15" fill="rgb(221,29,38)" fg:x="17" fg:w="1"/><text x="1.6254%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.3754%" y="485" width="0.0809%" height="15" fill="rgb(206,182,49)" fg:x="17" fg:w="1"/><text x="1.6254%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.3754%" y="469" width="0.0809%" height="15" fill="rgb(216,140,1)" fg:x="17" fg:w="1"/><text x="1.6254%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="1.3754%" y="453" width="0.0809%" height="15" fill="rgb(232,57,40)" fg:x="17" fg:w="1"/><text x="1.6254%" y="463.50"></text></g><g><title>engine::session::Session::flush (11 samples, 0.89%)</title><rect x="0.8900%" y="645" width="0.8900%" height="15" fill="rgb(224,186,18)" fg:x="11" fg:w="11"/><text x="1.1400%" y="655.50"></text></g><g><title>engine::session::state::State::close (11 samples, 0.89%)</title><rect x="0.8900%" y="629" width="0.8900%" height="15" fill="rgb(215,121,11)" fg:x="11" fg:w="11"/><text x="1.1400%" y="639.50"></text></g><g><title>engine::session::state::State::flush_entities (11 samples, 0.89%)</title><rect x="0.8900%" y="613" width="0.8900%" height="15" fill="rgb(245,147,10)" fg:x="11" fg:w="11"/><text x="1.1400%" y="623.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (10 samples, 0.81%)</title><rect x="0.9709%" y="597" width="0.8091%" height="15" fill="rgb(238,153,13)" fg:x="12" fg:w="10"/><text x="1.2209%" y="607.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (10 samples, 0.81%)</title><rect x="0.9709%" y="581" width="0.8091%" height="15" fill="rgb(233,108,0)" fg:x="12" fg:w="10"/><text x="1.2209%" y="591.50"></text></g><g><title>kernel::model::any_entity_changes (4 samples, 0.32%)</title><rect x="1.4563%" y="565" width="0.3236%" height="15" fill="rgb(212,157,17)" fg:x="18" fg:w="4"/><text x="1.7063%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="1.4563%" y="549" width="0.3236%" height="15" fill="rgb(225,213,38)" fg:x="18" fg:w="4"/><text x="1.7063%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="1.4563%" y="533" width="0.3236%" height="15" fill="rgb(248,16,11)" fg:x="18" fg:w="4"/><text x="1.7063%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="1.5372%" y="517" width="0.2427%" height="15" fill="rgb(241,33,4)" fg:x="19" fg:w="3"/><text x="1.7872%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="1.5372%" y="501" width="0.2427%" height="15" fill="rgb(222,26,43)" fg:x="19" fg:w="3"/><text x="1.7872%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="1.5372%" y="485" width="0.2427%" height="15" fill="rgb(243,29,36)" fg:x="19" fg:w="3"/><text x="1.7872%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="1.5372%" y="469" width="0.2427%" height="15" fill="rgb(241,9,27)" fg:x="19" fg:w="3"/><text x="1.7872%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="1.5372%" y="453" width="0.2427%" height="15" fill="rgb(205,117,26)" fg:x="19" fg:w="3"/><text x="1.7872%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="1.5372%" y="437" width="0.2427%" height="15" fill="rgb(209,80,39)" fg:x="19" fg:w="3"/><text x="1.7872%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="1.5372%" y="421" width="0.2427%" height="15" fill="rgb(239,155,6)" fg:x="19" fg:w="3"/><text x="1.7872%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="1.5372%" y="405" width="0.2427%" height="15" fill="rgb(212,104,12)" fg:x="19" fg:w="3"/><text x="1.7872%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="1.5372%" y="389" width="0.2427%" height="15" fill="rgb(234,204,3)" fg:x="19" fg:w="3"/><text x="1.7872%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="1.5372%" y="373" width="0.2427%" height="15" fill="rgb(251,218,7)" fg:x="19" fg:w="3"/><text x="1.7872%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="1.6181%" y="357" width="0.1618%" height="15" fill="rgb(221,81,32)" fg:x="20" fg:w="2"/><text x="1.8681%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="1.6990%" y="341" width="0.0809%" height="15" fill="rgb(214,152,26)" fg:x="21" fg:w="1"/><text x="1.9490%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="1.6990%" y="325" width="0.0809%" height="15" fill="rgb(223,22,3)" fg:x="21" fg:w="1"/><text x="1.9490%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.6990%" y="309" width="0.0809%" height="15" fill="rgb(207,174,7)" fg:x="21" fg:w="1"/><text x="1.9490%" y="319.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="1.7799%" y="613" width="0.0809%" height="15" fill="rgb(224,19,52)" fg:x="22" fg:w="1"/><text x="2.0299%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="1.7799%" y="597" width="0.0809%" height="15" fill="rgb(228,24,14)" fg:x="22" fg:w="1"/><text x="2.0299%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="1.7799%" y="581" width="0.0809%" height="15" fill="rgb(230,153,43)" fg:x="22" fg:w="1"/><text x="2.0299%" y="591.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.7799%" y="565" width="0.0809%" height="15" fill="rgb(231,106,12)" fg:x="22" fg:w="1"/><text x="2.0299%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="1.7799%" y="549" width="0.0809%" height="15" fill="rgb(215,92,2)" fg:x="22" fg:w="1"/><text x="2.0299%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="1.7799%" y="533" width="0.0809%" height="15" fill="rgb(249,143,25)" fg:x="22" fg:w="1"/><text x="2.0299%" y="543.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="1.8608%" y="597" width="0.0809%" height="15" fill="rgb(252,7,35)" fg:x="23" fg:w="1"/><text x="2.1108%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="1.8608%" y="581" width="0.0809%" height="15" fill="rgb(216,69,40)" fg:x="23" fg:w="1"/><text x="2.1108%" y="591.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="1.8608%" y="565" width="0.0809%" height="15" fill="rgb(240,36,33)" fg:x="23" fg:w="1"/><text x="2.1108%" y="575.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="1.8608%" y="549" width="0.0809%" height="15" fill="rgb(231,128,14)" fg:x="23" fg:w="1"/><text x="2.1108%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="1.8608%" y="533" width="0.0809%" height="15" fill="rgb(245,143,14)" fg:x="23" fg:w="1"/><text x="2.1108%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="1.8608%" y="517" width="0.0809%" height="15" fill="rgb(222,130,28)" fg:x="23" fg:w="1"/><text x="2.1108%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="1.7799%" y="629" width="0.3236%" height="15" fill="rgb(212,10,48)" fg:x="22" fg:w="4"/><text x="2.0299%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="1.8608%" y="613" width="0.2427%" height="15" fill="rgb(254,118,45)" fg:x="23" fg:w="3"/><text x="2.1108%" y="623.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="1.9417%" y="597" width="0.1618%" height="15" fill="rgb(228,6,45)" fg:x="24" fg:w="2"/><text x="2.1917%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="1.9417%" y="581" width="0.1618%" height="15" fill="rgb(241,18,35)" fg:x="24" fg:w="2"/><text x="2.1917%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.16%)</title><rect x="1.9417%" y="565" width="0.1618%" height="15" fill="rgb(227,214,53)" fg:x="24" fg:w="2"/><text x="2.1917%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="1.9417%" y="549" width="0.1618%" height="15" fill="rgb(224,107,51)" fg:x="24" fg:w="2"/><text x="2.1917%" y="559.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="1.9417%" y="533" width="0.1618%" height="15" fill="rgb(248,60,28)" fg:x="24" fg:w="2"/><text x="2.1917%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.1036%" y="533" width="0.0809%" height="15" fill="rgb(249,101,23)" fg:x="26" fg:w="1"/><text x="2.3536%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.1036%" y="517" width="0.0809%" height="15" fill="rgb(228,51,19)" fg:x="26" fg:w="1"/><text x="2.3536%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.1036%" y="501" width="0.0809%" height="15" fill="rgb(213,20,6)" fg:x="26" fg:w="1"/><text x="2.3536%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.1036%" y="485" width="0.0809%" height="15" fill="rgb(212,124,10)" fg:x="26" fg:w="1"/><text x="2.3536%" y="495.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="2.1036%" y="613" width="0.1618%" height="15" fill="rgb(248,3,40)" fg:x="26" fg:w="2"/><text x="2.3536%" y="623.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="2.1036%" y="597" width="0.1618%" height="15" fill="rgb(223,178,23)" fg:x="26" fg:w="2"/><text x="2.3536%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="2.1036%" y="581" width="0.1618%" height="15" fill="rgb(240,132,45)" fg:x="26" fg:w="2"/><text x="2.3536%" y="591.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="2.1036%" y="565" width="0.1618%" height="15" fill="rgb(245,164,36)" fg:x="26" fg:w="2"/><text x="2.3536%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="2.1036%" y="549" width="0.1618%" height="15" fill="rgb(231,188,53)" fg:x="26" fg:w="2"/><text x="2.3536%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="2.1845%" y="533" width="0.0809%" height="15" fill="rgb(237,198,39)" fg:x="27" fg:w="1"/><text x="2.4345%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="2.1845%" y="517" width="0.0809%" height="15" fill="rgb(223,120,35)" fg:x="27" fg:w="1"/><text x="2.4345%" y="527.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="2.2654%" y="613" width="0.0809%" height="15" fill="rgb(253,107,49)" fg:x="28" fg:w="1"/><text x="2.5154%" y="623.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="2.2654%" y="597" width="0.0809%" height="15" fill="rgb(216,44,31)" fg:x="28" fg:w="1"/><text x="2.5154%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.2654%" y="581" width="0.0809%" height="15" fill="rgb(253,87,21)" fg:x="28" fg:w="1"/><text x="2.5154%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="2.3463%" y="565" width="0.0809%" height="15" fill="rgb(226,18,2)" fg:x="29" fg:w="1"/><text x="2.5963%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="2.3463%" y="549" width="0.0809%" height="15" fill="rgb(216,8,46)" fg:x="29" fg:w="1"/><text x="2.5963%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="2.3463%" y="533" width="0.0809%" height="15" fill="rgb(226,140,39)" fg:x="29" fg:w="1"/><text x="2.5963%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.3463%" y="517" width="0.0809%" height="15" fill="rgb(221,194,54)" fg:x="29" fg:w="1"/><text x="2.5963%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.3463%" y="501" width="0.0809%" height="15" fill="rgb(213,92,11)" fg:x="29" fg:w="1"/><text x="2.5963%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.3463%" y="485" width="0.0809%" height="15" fill="rgb(229,162,46)" fg:x="29" fg:w="1"/><text x="2.5963%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.3463%" y="469" width="0.0809%" height="15" fill="rgb(214,111,36)" fg:x="29" fg:w="1"/><text x="2.5963%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="2.3463%" y="453" width="0.0809%" height="15" fill="rgb(207,6,21)" fg:x="29" fg:w="1"/><text x="2.5963%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.3463%" y="437" width="0.0809%" height="15" fill="rgb(213,127,38)" fg:x="29" fg:w="1"/><text x="2.5963%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.3463%" y="421" width="0.0809%" height="15" fill="rgb(238,118,32)" fg:x="29" fg:w="1"/><text x="2.5963%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.3463%" y="405" width="0.0809%" height="15" fill="rgb(240,139,39)" fg:x="29" fg:w="1"/><text x="2.5963%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.3463%" y="389" width="0.0809%" height="15" fill="rgb(235,10,37)" fg:x="29" fg:w="1"/><text x="2.5963%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.3463%" y="373" width="0.0809%" height="15" fill="rgb(249,171,38)" fg:x="29" fg:w="1"/><text x="2.5963%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.3463%" y="357" width="0.0809%" height="15" fill="rgb(242,144,32)" fg:x="29" fg:w="1"/><text x="2.5963%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.3463%" y="341" width="0.0809%" height="15" fill="rgb(217,117,21)" fg:x="29" fg:w="1"/><text x="2.5963%" y="351.50"></text></g><g><title>plugins_core::build::Build::holding (9 samples, 0.73%)</title><rect x="1.7799%" y="645" width="0.7282%" height="15" fill="rgb(249,87,1)" fg:x="22" fg:w="9"/><text x="2.0299%" y="655.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.40%)</title><rect x="2.1036%" y="629" width="0.4045%" height="15" fill="rgb(248,196,48)" fg:x="26" fg:w="5"/><text x="2.3536%" y="639.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="2.3463%" y="613" width="0.1618%" height="15" fill="rgb(251,206,33)" fg:x="29" fg:w="2"/><text x="2.5963%" y="623.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="2.3463%" y="597" width="0.1618%" height="15" fill="rgb(232,141,28)" fg:x="29" fg:w="2"/><text x="2.5963%" y="607.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="2.3463%" y="581" width="0.1618%" height="15" fill="rgb(209,167,14)" fg:x="29" fg:w="2"/><text x="2.5963%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="2.4272%" y="565" width="0.0809%" height="15" fill="rgb(225,11,50)" fg:x="30" fg:w="1"/><text x="2.6772%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="2.4272%" y="549" width="0.0809%" height="15" fill="rgb(209,50,20)" fg:x="30" fg:w="1"/><text x="2.6772%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="2.4272%" y="533" width="0.0809%" height="15" fill="rgb(212,17,46)" fg:x="30" fg:w="1"/><text x="2.6772%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.4272%" y="517" width="0.0809%" height="15" fill="rgb(216,101,39)" fg:x="30" fg:w="1"/><text x="2.6772%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.4272%" y="501" width="0.0809%" height="15" fill="rgb(212,228,48)" fg:x="30" fg:w="1"/><text x="2.6772%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.4272%" y="485" width="0.0809%" height="15" fill="rgb(250,6,50)" fg:x="30" fg:w="1"/><text x="2.6772%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.4272%" y="469" width="0.0809%" height="15" fill="rgb(250,160,48)" fg:x="30" fg:w="1"/><text x="2.6772%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="2.4272%" y="453" width="0.0809%" height="15" fill="rgb(244,216,33)" fg:x="30" fg:w="1"/><text x="2.6772%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.4272%" y="437" width="0.0809%" height="15" fill="rgb(207,157,5)" fg:x="30" fg:w="1"/><text x="2.6772%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.4272%" y="421" width="0.0809%" height="15" fill="rgb(228,199,8)" fg:x="30" fg:w="1"/><text x="2.6772%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.4272%" y="405" width="0.0809%" height="15" fill="rgb(227,80,20)" fg:x="30" fg:w="1"/><text x="2.6772%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.4272%" y="389" width="0.0809%" height="15" fill="rgb(222,9,33)" fg:x="30" fg:w="1"/><text x="2.6772%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.4272%" y="373" width="0.0809%" height="15" fill="rgb(239,44,28)" fg:x="30" fg:w="1"/><text x="2.6772%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.4272%" y="357" width="0.0809%" height="15" fill="rgb(249,187,43)" fg:x="30" fg:w="1"/><text x="2.6772%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.5081%" y="565" width="0.0809%" height="15" fill="rgb(216,141,28)" fg:x="31" fg:w="1"/><text x="2.7581%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.5081%" y="549" width="0.0809%" height="15" fill="rgb(230,154,53)" fg:x="31" fg:w="1"/><text x="2.7581%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.5081%" y="533" width="0.0809%" height="15" fill="rgb(227,82,4)" fg:x="31" fg:w="1"/><text x="2.7581%" y="543.50"></text></g><g><title>plugins_core::build::Build::into_entry (2 samples, 0.16%)</title><rect x="2.5081%" y="645" width="0.1618%" height="15" fill="rgb(220,107,16)" fg:x="31" fg:w="2"/><text x="2.7581%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="2.5081%" y="629" width="0.1618%" height="15" fill="rgb(207,187,2)" fg:x="31" fg:w="2"/><text x="2.7581%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="2.5081%" y="613" width="0.1618%" height="15" fill="rgb(210,162,52)" fg:x="31" fg:w="2"/><text x="2.7581%" y="623.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="2.5081%" y="597" width="0.1618%" height="15" fill="rgb(217,216,49)" fg:x="31" fg:w="2"/><text x="2.7581%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="2.5081%" y="581" width="0.1618%" height="15" fill="rgb(218,146,49)" fg:x="31" fg:w="2"/><text x="2.7581%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.5890%" y="565" width="0.0809%" height="15" fill="rgb(216,55,40)" fg:x="32" fg:w="1"/><text x="2.8390%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.5890%" y="549" width="0.0809%" height="15" fill="rgb(208,196,21)" fg:x="32" fg:w="1"/><text x="2.8390%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.5890%" y="533" width="0.0809%" height="15" fill="rgb(242,117,42)" fg:x="32" fg:w="1"/><text x="2.8390%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.5890%" y="517" width="0.0809%" height="15" fill="rgb(210,11,23)" fg:x="32" fg:w="1"/><text x="2.8390%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="2.5890%" y="501" width="0.0809%" height="15" fill="rgb(217,110,2)" fg:x="32" fg:w="1"/><text x="2.8390%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.5890%" y="485" width="0.0809%" height="15" fill="rgb(229,77,54)" fg:x="32" fg:w="1"/><text x="2.8390%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.5890%" y="469" width="0.0809%" height="15" fill="rgb(218,53,16)" fg:x="32" fg:w="1"/><text x="2.8390%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.5890%" y="453" width="0.0809%" height="15" fill="rgb(215,38,13)" fg:x="32" fg:w="1"/><text x="2.8390%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.5890%" y="437" width="0.0809%" height="15" fill="rgb(235,42,18)" fg:x="32" fg:w="1"/><text x="2.8390%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.5890%" y="421" width="0.0809%" height="15" fill="rgb(219,66,54)" fg:x="32" fg:w="1"/><text x="2.8390%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="2.5890%" y="405" width="0.0809%" height="15" fill="rgb(222,205,4)" fg:x="32" fg:w="1"/><text x="2.8390%" y="415.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="2.6699%" y="629" width="0.0809%" height="15" fill="rgb(227,213,46)" fg:x="33" fg:w="1"/><text x="2.9199%" y="639.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="2.6699%" y="613" width="0.0809%" height="15" fill="rgb(250,145,42)" fg:x="33" fg:w="1"/><text x="2.9199%" y="623.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="2.6699%" y="597" width="0.0809%" height="15" fill="rgb(219,15,2)" fg:x="33" fg:w="1"/><text x="2.9199%" y="607.50"></text></g><g><title>engine::users::model::_::&lt;impl serde::ser::Serialize for engine::users::model::Usernames&gt;::serialize (1 samples, 0.08%)</title><rect x="2.6699%" y="581" width="0.0809%" height="15" fill="rgb(231,181,52)" fg:x="33" fg:w="1"/><text x="2.9199%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.6699%" y="565" width="0.0809%" height="15" fill="rgb(235,1,42)" fg:x="33" fg:w="1"/><text x="2.9199%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="2.6699%" y="549" width="0.0809%" height="15" fill="rgb(249,88,27)" fg:x="33" fg:w="1"/><text x="2.9199%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.6699%" y="533" width="0.0809%" height="15" fill="rgb(235,145,16)" fg:x="33" fg:w="1"/><text x="2.9199%" y="543.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="2.7508%" y="581" width="0.0809%" height="15" fill="rgb(237,114,19)" fg:x="34" fg:w="1"/><text x="3.0008%" y="591.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="2.8317%" y="581" width="0.0809%" height="15" fill="rgb(238,51,50)" fg:x="35" fg:w="1"/><text x="3.0817%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="2.8317%" y="565" width="0.0809%" height="15" fill="rgb(205,194,25)" fg:x="35" fg:w="1"/><text x="3.0817%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="2.8317%" y="549" width="0.0809%" height="15" fill="rgb(215,203,17)" fg:x="35" fg:w="1"/><text x="3.0817%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="2.8317%" y="533" width="0.0809%" height="15" fill="rgb(233,112,49)" fg:x="35" fg:w="1"/><text x="3.0817%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="2.8317%" y="517" width="0.0809%" height="15" fill="rgb(241,130,26)" fg:x="35" fg:w="1"/><text x="3.0817%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="2.9126%" y="549" width="0.0809%" height="15" fill="rgb(252,223,19)" fg:x="36" fg:w="1"/><text x="3.1626%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="2.9126%" y="533" width="0.0809%" height="15" fill="rgb(211,95,25)" fg:x="36" fg:w="1"/><text x="3.1626%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="2.9126%" y="517" width="0.0809%" height="15" fill="rgb(251,182,27)" fg:x="36" fg:w="1"/><text x="3.1626%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.9126%" y="501" width="0.0809%" height="15" fill="rgb(238,24,4)" fg:x="36" fg:w="1"/><text x="3.1626%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.9126%" y="485" width="0.0809%" height="15" fill="rgb(224,220,25)" fg:x="36" fg:w="1"/><text x="3.1626%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.9126%" y="469" width="0.0809%" height="15" fill="rgb(239,133,26)" fg:x="36" fg:w="1"/><text x="3.1626%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.9126%" y="453" width="0.0809%" height="15" fill="rgb(211,94,48)" fg:x="36" fg:w="1"/><text x="3.1626%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="2.9126%" y="437" width="0.0809%" height="15" fill="rgb(239,87,6)" fg:x="36" fg:w="1"/><text x="3.1626%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.9126%" y="421" width="0.0809%" height="15" fill="rgb(227,62,0)" fg:x="36" fg:w="1"/><text x="3.1626%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.9126%" y="405" width="0.0809%" height="15" fill="rgb(211,226,4)" fg:x="36" fg:w="1"/><text x="3.1626%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="2.9126%" y="389" width="0.0809%" height="15" fill="rgb(253,38,52)" fg:x="36" fg:w="1"/><text x="3.1626%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="2.9126%" y="373" width="0.0809%" height="15" fill="rgb(229,126,40)" fg:x="36" fg:w="1"/><text x="3.1626%" y="383.50"></text></g><g><title>engine::identifiers::model::set_gid (1 samples, 0.08%)</title><rect x="2.9935%" y="549" width="0.0809%" height="15" fill="rgb(229,165,44)" fg:x="37" fg:w="1"/><text x="3.2435%" y="559.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="2.9935%" y="533" width="0.0809%" height="15" fill="rgb(247,95,47)" fg:x="37" fg:w="1"/><text x="3.2435%" y="543.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (1 samples, 0.08%)</title><rect x="2.9935%" y="517" width="0.0809%" height="15" fill="rgb(216,140,30)" fg:x="37" fg:w="1"/><text x="3.2435%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="2.9935%" y="501" width="0.0809%" height="15" fill="rgb(246,214,8)" fg:x="37" fg:w="1"/><text x="3.2435%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.9935%" y="485" width="0.0809%" height="15" fill="rgb(227,224,15)" fg:x="37" fg:w="1"/><text x="3.2435%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="3.0744%" y="485" width="0.0809%" height="15" fill="rgb(233,175,4)" fg:x="38" fg:w="1"/><text x="3.3244%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.0744%" y="469" width="0.0809%" height="15" fill="rgb(221,66,45)" fg:x="38" fg:w="1"/><text x="3.3244%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="2.9126%" y="565" width="0.3236%" height="15" fill="rgb(221,178,18)" fg:x="36" fg:w="4"/><text x="3.1626%" y="575.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="3.0744%" y="549" width="0.1618%" height="15" fill="rgb(213,81,29)" fg:x="38" fg:w="2"/><text x="3.3244%" y="559.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="3.0744%" y="533" width="0.1618%" height="15" fill="rgb(220,89,49)" fg:x="38" fg:w="2"/><text x="3.3244%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="3.0744%" y="517" width="0.1618%" height="15" fill="rgb(227,60,33)" fg:x="38" fg:w="2"/><text x="3.3244%" y="527.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="3.0744%" y="501" width="0.1618%" height="15" fill="rgb(205,113,12)" fg:x="38" fg:w="2"/><text x="3.3244%" y="511.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.1553%" y="485" width="0.0809%" height="15" fill="rgb(211,32,1)" fg:x="39" fg:w="1"/><text x="3.4053%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.1553%" y="469" width="0.0809%" height="15" fill="rgb(246,2,12)" fg:x="39" fg:w="1"/><text x="3.4053%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.1553%" y="453" width="0.0809%" height="15" fill="rgb(243,37,27)" fg:x="39" fg:w="1"/><text x="3.4053%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.1553%" y="437" width="0.0809%" height="15" fill="rgb(248,211,31)" fg:x="39" fg:w="1"/><text x="3.4053%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.1553%" y="421" width="0.0809%" height="15" fill="rgb(242,146,47)" fg:x="39" fg:w="1"/><text x="3.4053%" y="431.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="3.2362%" y="549" width="0.0809%" height="15" fill="rgb(206,70,20)" fg:x="40" fg:w="1"/><text x="3.4862%" y="559.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="3.2362%" y="533" width="0.0809%" height="15" fill="rgb(215,10,51)" fg:x="40" fg:w="1"/><text x="3.4862%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="3.2362%" y="517" width="0.0809%" height="15" fill="rgb(243,178,53)" fg:x="40" fg:w="1"/><text x="3.4862%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.2362%" y="501" width="0.0809%" height="15" fill="rgb(233,221,20)" fg:x="40" fg:w="1"/><text x="3.4862%" y="511.50"></text></g><g><title>core::iter::adapters::try_process (8 samples, 0.65%)</title><rect x="2.7508%" y="629" width="0.6472%" height="15" fill="rgb(218,95,35)" fg:x="34" fg:w="8"/><text x="3.0008%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.65%)</title><rect x="2.7508%" y="613" width="0.6472%" height="15" fill="rgb(229,13,5)" fg:x="34" fg:w="8"/><text x="3.0008%" y="623.50"></text></g><g><title>plugins_core::build::QuickThing::make (8 samples, 0.65%)</title><rect x="2.7508%" y="597" width="0.6472%" height="15" fill="rgb(252,164,30)" fg:x="34" fg:w="8"/><text x="3.0008%" y="607.50"></text></g><g><title>plugins_core::build::Build::leads_to (6 samples, 0.49%)</title><rect x="2.9126%" y="581" width="0.4854%" height="15" fill="rgb(232,68,36)" fg:x="36" fg:w="6"/><text x="3.1626%" y="591.50"></text></g><g><title>plugins_core::tools::leads_to (2 samples, 0.16%)</title><rect x="3.2362%" y="565" width="0.1618%" height="15" fill="rgb(219,59,54)" fg:x="40" fg:w="2"/><text x="3.4862%" y="575.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.3172%" y="549" width="0.0809%" height="15" fill="rgb(250,92,33)" fg:x="41" fg:w="1"/><text x="3.5672%" y="559.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Exit&gt;::serialize (1 samples, 0.08%)</title><rect x="3.3172%" y="533" width="0.0809%" height="15" fill="rgb(229,162,54)" fg:x="41" fg:w="1"/><text x="3.5672%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.3172%" y="517" width="0.0809%" height="15" fill="rgb(244,114,52)" fg:x="41" fg:w="1"/><text x="3.5672%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="3.3172%" y="501" width="0.0809%" height="15" fill="rgb(212,211,43)" fg:x="41" fg:w="1"/><text x="3.5672%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.3172%" y="485" width="0.0809%" height="15" fill="rgb(226,147,8)" fg:x="41" fg:w="1"/><text x="3.5672%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.3172%" y="469" width="0.0809%" height="15" fill="rgb(226,23,13)" fg:x="41" fg:w="1"/><text x="3.5672%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.3172%" y="453" width="0.0809%" height="15" fill="rgb(240,63,4)" fg:x="41" fg:w="1"/><text x="3.5672%" y="463.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="3.3172%" y="437" width="0.0809%" height="15" fill="rgb(221,1,32)" fg:x="41" fg:w="1"/><text x="3.5672%" y="447.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.3981%" y="565" width="0.0809%" height="15" fill="rgb(242,117,10)" fg:x="42" fg:w="1"/><text x="3.6481%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="3.3981%" y="549" width="0.0809%" height="15" fill="rgb(249,172,44)" fg:x="42" fg:w="1"/><text x="3.6481%" y="559.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="3.3981%" y="533" width="0.0809%" height="15" fill="rgb(244,46,45)" fg:x="42" fg:w="1"/><text x="3.6481%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="3.6408%" y="517" width="0.0809%" height="15" fill="rgb(206,43,17)" fg:x="45" fg:w="1"/><text x="3.8908%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.6408%" y="501" width="0.0809%" height="15" fill="rgb(239,218,39)" fg:x="45" fg:w="1"/><text x="3.8908%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.6408%" y="485" width="0.0809%" height="15" fill="rgb(208,169,54)" fg:x="45" fg:w="1"/><text x="3.8908%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.6408%" y="469" width="0.0809%" height="15" fill="rgb(247,25,42)" fg:x="45" fg:w="1"/><text x="3.8908%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="3.7217%" y="501" width="0.0809%" height="15" fill="rgb(226,23,31)" fg:x="46" fg:w="1"/><text x="3.9717%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.7217%" y="485" width="0.0809%" height="15" fill="rgb(247,16,28)" fg:x="46" fg:w="1"/><text x="3.9717%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.7217%" y="469" width="0.0809%" height="15" fill="rgb(231,147,38)" fg:x="46" fg:w="1"/><text x="3.9717%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="3.8026%" y="437" width="0.0809%" height="15" fill="rgb(253,81,48)" fg:x="47" fg:w="1"/><text x="4.0526%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="3.8026%" y="421" width="0.0809%" height="15" fill="rgb(249,222,43)" fg:x="47" fg:w="1"/><text x="4.0526%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="3.8026%" y="469" width="0.1618%" height="15" fill="rgb(221,3,27)" fg:x="47" fg:w="2"/><text x="4.0526%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="3.8026%" y="453" width="0.1618%" height="15" fill="rgb(228,180,5)" fg:x="47" fg:w="2"/><text x="4.0526%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.8835%" y="437" width="0.0809%" height="15" fill="rgb(227,131,42)" fg:x="48" fg:w="1"/><text x="4.1335%" y="447.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.40%)</title><rect x="3.6408%" y="533" width="0.4045%" height="15" fill="rgb(212,3,39)" fg:x="45" fg:w="5"/><text x="3.8908%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="3.7217%" y="517" width="0.3236%" height="15" fill="rgb(226,45,5)" fg:x="46" fg:w="4"/><text x="3.9717%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="3.8026%" y="501" width="0.2427%" height="15" fill="rgb(215,167,45)" fg:x="47" fg:w="3"/><text x="4.0526%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="3.8026%" y="485" width="0.2427%" height="15" fill="rgb(250,218,53)" fg:x="47" fg:w="3"/><text x="4.0526%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.9644%" y="469" width="0.0809%" height="15" fill="rgb(207,140,0)" fg:x="49" fg:w="1"/><text x="4.2144%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.9644%" y="453" width="0.0809%" height="15" fill="rgb(238,133,51)" fg:x="49" fg:w="1"/><text x="4.2144%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.9644%" y="437" width="0.0809%" height="15" fill="rgb(218,203,53)" fg:x="49" fg:w="1"/><text x="4.2144%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.0453%" y="501" width="0.0809%" height="15" fill="rgb(226,184,25)" fg:x="50" fg:w="1"/><text x="4.2953%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.1262%" y="453" width="0.0809%" height="15" fill="rgb(231,121,21)" fg:x="51" fg:w="1"/><text x="4.3762%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="4.2071%" y="453" width="0.0809%" height="15" fill="rgb(251,14,34)" fg:x="52" fg:w="1"/><text x="4.4571%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="4.2071%" y="437" width="0.0809%" height="15" fill="rgb(249,193,11)" fg:x="52" fg:w="1"/><text x="4.4571%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="4.2071%" y="421" width="0.0809%" height="15" fill="rgb(220,172,37)" fg:x="52" fg:w="1"/><text x="4.4571%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.2071%" y="405" width="0.0809%" height="15" fill="rgb(231,229,43)" fg:x="52" fg:w="1"/><text x="4.4571%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="4.0453%" y="533" width="0.3236%" height="15" fill="rgb(250,161,5)" fg:x="50" fg:w="4"/><text x="4.2953%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="4.0453%" y="517" width="0.3236%" height="15" fill="rgb(218,225,18)" fg:x="50" fg:w="4"/><text x="4.2953%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="4.1262%" y="501" width="0.2427%" height="15" fill="rgb(245,45,42)" fg:x="51" fg:w="3"/><text x="4.3762%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="4.1262%" y="485" width="0.2427%" height="15" fill="rgb(211,115,1)" fg:x="51" fg:w="3"/><text x="4.3762%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="4.1262%" y="469" width="0.2427%" height="15" fill="rgb(248,133,52)" fg:x="51" fg:w="3"/><text x="4.3762%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.2880%" y="453" width="0.0809%" height="15" fill="rgb(238,100,21)" fg:x="53" fg:w="1"/><text x="4.5380%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.2880%" y="437" width="0.0809%" height="15" fill="rgb(247,144,11)" fg:x="53" fg:w="1"/><text x="4.5380%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.2880%" y="421" width="0.0809%" height="15" fill="rgb(206,164,16)" fg:x="53" fg:w="1"/><text x="4.5380%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="4.6117%" y="405" width="0.1618%" height="15" fill="rgb(222,34,3)" fg:x="57" fg:w="2"/><text x="4.8617%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="4.6117%" y="389" width="0.1618%" height="15" fill="rgb(248,82,4)" fg:x="57" fg:w="2"/><text x="4.8617%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.6926%" y="373" width="0.0809%" height="15" fill="rgb(228,81,46)" fg:x="58" fg:w="1"/><text x="4.9426%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="4.4498%" y="453" width="0.4045%" height="15" fill="rgb(227,67,47)" fg:x="55" fg:w="5"/><text x="4.6998%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="4.5307%" y="437" width="0.3236%" height="15" fill="rgb(215,93,53)" fg:x="56" fg:w="4"/><text x="4.7807%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="4.5307%" y="421" width="0.3236%" height="15" fill="rgb(248,194,39)" fg:x="56" fg:w="4"/><text x="4.7807%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="4.7735%" y="405" width="0.0809%" height="15" fill="rgb(215,5,19)" fg:x="59" fg:w="1"/><text x="5.0235%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="4.7735%" y="389" width="0.0809%" height="15" fill="rgb(226,215,51)" fg:x="59" fg:w="1"/><text x="5.0235%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="4.7735%" y="373" width="0.0809%" height="15" fill="rgb(225,56,26)" fg:x="59" fg:w="1"/><text x="5.0235%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="4.7735%" y="357" width="0.0809%" height="15" fill="rgb(222,75,29)" fg:x="59" fg:w="1"/><text x="5.0235%" y="367.50"></text></g><g><title>engine::session::Session::flush (20 samples, 1.62%)</title><rect x="3.3981%" y="629" width="1.6181%" height="15" fill="rgb(236,139,6)" fg:x="42" fg:w="20"/><text x="3.6481%" y="639.50"></text></g><g><title>engine::session::Session::save_changes (20 samples, 1.62%)</title><rect x="3.3981%" y="613" width="1.6181%" height="15" fill="rgb(223,137,36)" fg:x="42" fg:w="20"/><text x="3.6481%" y="623.50"></text></g><g><title>engine::session::state::State::close (20 samples, 1.62%)</title><rect x="3.3981%" y="597" width="1.6181%" height="15" fill="rgb(226,99,2)" fg:x="42" fg:w="20"/><text x="3.6481%" y="607.50"></text></g><g><title>engine::session::state::State::flush_entities (20 samples, 1.62%)</title><rect x="3.3981%" y="581" width="1.6181%" height="15" fill="rgb(206,133,23)" fg:x="42" fg:w="20"/><text x="3.6481%" y="591.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (19 samples, 1.54%)</title><rect x="3.4790%" y="565" width="1.5372%" height="15" fill="rgb(243,173,15)" fg:x="43" fg:w="19"/><text x="3.7290%" y="575.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (18 samples, 1.46%)</title><rect x="3.5599%" y="549" width="1.4563%" height="15" fill="rgb(228,69,28)" fg:x="44" fg:w="18"/><text x="3.8099%" y="559.50"></text></g><g><title>kernel::model::any_entity_changes (8 samples, 0.65%)</title><rect x="4.3689%" y="533" width="0.6472%" height="15" fill="rgb(212,51,22)" fg:x="54" fg:w="8"/><text x="4.6189%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.65%)</title><rect x="4.3689%" y="517" width="0.6472%" height="15" fill="rgb(227,113,0)" fg:x="54" fg:w="8"/><text x="4.6189%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.65%)</title><rect x="4.3689%" y="501" width="0.6472%" height="15" fill="rgb(252,84,27)" fg:x="54" fg:w="8"/><text x="4.6189%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.57%)</title><rect x="4.4498%" y="485" width="0.5663%" height="15" fill="rgb(223,145,39)" fg:x="55" fg:w="7"/><text x="4.6998%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.57%)</title><rect x="4.4498%" y="469" width="0.5663%" height="15" fill="rgb(239,219,30)" fg:x="55" fg:w="7"/><text x="4.6998%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="4.8544%" y="453" width="0.1618%" height="15" fill="rgb(224,196,39)" fg:x="60" fg:w="2"/><text x="5.1044%" y="463.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="4.8544%" y="437" width="0.1618%" height="15" fill="rgb(205,35,43)" fg:x="60" fg:w="2"/><text x="5.1044%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="5.0162%" y="581" width="0.0809%" height="15" fill="rgb(228,201,21)" fg:x="62" fg:w="1"/><text x="5.2662%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="5.0162%" y="565" width="0.0809%" height="15" fill="rgb(237,118,16)" fg:x="62" fg:w="1"/><text x="5.2662%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="5.0162%" y="597" width="0.1618%" height="15" fill="rgb(241,17,19)" fg:x="62" fg:w="2"/><text x="5.2662%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="5.0971%" y="581" width="0.0809%" height="15" fill="rgb(214,10,25)" fg:x="63" fg:w="1"/><text x="5.3471%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="5.0971%" y="565" width="0.0809%" height="15" fill="rgb(238,37,29)" fg:x="63" fg:w="1"/><text x="5.3471%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.0971%" y="549" width="0.0809%" height="15" fill="rgb(253,83,25)" fg:x="63" fg:w="1"/><text x="5.3471%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.0971%" y="533" width="0.0809%" height="15" fill="rgb(234,192,12)" fg:x="63" fg:w="1"/><text x="5.3471%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.0971%" y="517" width="0.0809%" height="15" fill="rgb(241,216,45)" fg:x="63" fg:w="1"/><text x="5.3471%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.0971%" y="501" width="0.0809%" height="15" fill="rgb(242,22,33)" fg:x="63" fg:w="1"/><text x="5.3471%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="5.0162%" y="613" width="0.2427%" height="15" fill="rgb(231,105,49)" fg:x="62" fg:w="3"/><text x="5.2662%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="5.1780%" y="597" width="0.0809%" height="15" fill="rgb(218,204,15)" fg:x="64" fg:w="1"/><text x="5.4280%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="5.1780%" y="581" width="0.0809%" height="15" fill="rgb(235,138,41)" fg:x="64" fg:w="1"/><text x="5.4280%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="5.1780%" y="565" width="0.0809%" height="15" fill="rgb(246,0,9)" fg:x="64" fg:w="1"/><text x="5.4280%" y="575.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="5.1780%" y="549" width="0.0809%" height="15" fill="rgb(210,74,4)" fg:x="64" fg:w="1"/><text x="5.4280%" y="559.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="5.1780%" y="533" width="0.0809%" height="15" fill="rgb(250,60,41)" fg:x="64" fg:w="1"/><text x="5.4280%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.1780%" y="517" width="0.0809%" height="15" fill="rgb(220,115,12)" fg:x="64" fg:w="1"/><text x="5.4280%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.1780%" y="501" width="0.0809%" height="15" fill="rgb(237,100,13)" fg:x="64" fg:w="1"/><text x="5.4280%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.1780%" y="485" width="0.0809%" height="15" fill="rgb(213,55,26)" fg:x="64" fg:w="1"/><text x="5.4280%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.1780%" y="469" width="0.0809%" height="15" fill="rgb(216,17,4)" fg:x="64" fg:w="1"/><text x="5.4280%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.2589%" y="565" width="0.0809%" height="15" fill="rgb(220,153,47)" fg:x="65" fg:w="1"/><text x="5.5089%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.2589%" y="549" width="0.0809%" height="15" fill="rgb(215,131,9)" fg:x="65" fg:w="1"/><text x="5.5089%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.2589%" y="533" width="0.0809%" height="15" fill="rgb(233,46,42)" fg:x="65" fg:w="1"/><text x="5.5089%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.2589%" y="517" width="0.0809%" height="15" fill="rgb(226,86,7)" fg:x="65" fg:w="1"/><text x="5.5089%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.2589%" y="501" width="0.0809%" height="15" fill="rgb(239,226,21)" fg:x="65" fg:w="1"/><text x="5.5089%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="5.2589%" y="485" width="0.0809%" height="15" fill="rgb(244,137,22)" fg:x="65" fg:w="1"/><text x="5.5089%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="5.2589%" y="469" width="0.0809%" height="15" fill="rgb(211,139,35)" fg:x="65" fg:w="1"/><text x="5.5089%" y="479.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="5.2589%" y="597" width="0.1618%" height="15" fill="rgb(214,62,50)" fg:x="65" fg:w="2"/><text x="5.5089%" y="607.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="5.2589%" y="581" width="0.1618%" height="15" fill="rgb(212,113,44)" fg:x="65" fg:w="2"/><text x="5.5089%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="5.3398%" y="565" width="0.0809%" height="15" fill="rgb(226,150,43)" fg:x="66" fg:w="1"/><text x="5.5898%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="5.3398%" y="549" width="0.0809%" height="15" fill="rgb(250,71,37)" fg:x="66" fg:w="1"/><text x="5.5898%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="5.3398%" y="533" width="0.0809%" height="15" fill="rgb(219,76,19)" fg:x="66" fg:w="1"/><text x="5.5898%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.3398%" y="517" width="0.0809%" height="15" fill="rgb(250,39,11)" fg:x="66" fg:w="1"/><text x="5.5898%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.3398%" y="501" width="0.0809%" height="15" fill="rgb(230,64,31)" fg:x="66" fg:w="1"/><text x="5.5898%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.3398%" y="485" width="0.0809%" height="15" fill="rgb(208,222,23)" fg:x="66" fg:w="1"/><text x="5.5898%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.3398%" y="469" width="0.0809%" height="15" fill="rgb(227,125,18)" fg:x="66" fg:w="1"/><text x="5.5898%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="5.3398%" y="453" width="0.0809%" height="15" fill="rgb(234,210,9)" fg:x="66" fg:w="1"/><text x="5.5898%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.3398%" y="437" width="0.0809%" height="15" fill="rgb(217,127,24)" fg:x="66" fg:w="1"/><text x="5.5898%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="5.3398%" y="421" width="0.0809%" height="15" fill="rgb(239,141,48)" fg:x="66" fg:w="1"/><text x="5.5898%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.4207%" y="549" width="0.0809%" height="15" fill="rgb(227,109,8)" fg:x="67" fg:w="1"/><text x="5.6707%" y="559.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="5.4207%" y="597" width="0.1618%" height="15" fill="rgb(235,184,23)" fg:x="67" fg:w="2"/><text x="5.6707%" y="607.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (2 samples, 0.16%)</title><rect x="5.4207%" y="581" width="0.1618%" height="15" fill="rgb(227,226,48)" fg:x="67" fg:w="2"/><text x="5.6707%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="5.4207%" y="565" width="0.1618%" height="15" fill="rgb(206,150,11)" fg:x="67" fg:w="2"/><text x="5.6707%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="5.5016%" y="549" width="0.0809%" height="15" fill="rgb(254,2,33)" fg:x="68" fg:w="1"/><text x="5.7516%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="5.5016%" y="533" width="0.0809%" height="15" fill="rgb(243,160,20)" fg:x="68" fg:w="1"/><text x="5.7516%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.5016%" y="517" width="0.0809%" height="15" fill="rgb(218,208,30)" fg:x="68" fg:w="1"/><text x="5.7516%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.5016%" y="501" width="0.0809%" height="15" fill="rgb(224,120,49)" fg:x="68" fg:w="1"/><text x="5.7516%" y="511.50"></text></g><g><title>plugins_core::build::Build::holding (8 samples, 0.65%)</title><rect x="5.0162%" y="629" width="0.6472%" height="15" fill="rgb(246,12,2)" fg:x="62" fg:w="8"/><text x="5.2662%" y="639.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.40%)</title><rect x="5.2589%" y="613" width="0.4045%" height="15" fill="rgb(236,117,3)" fg:x="65" fg:w="5"/><text x="5.5089%" y="623.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="5.5825%" y="597" width="0.0809%" height="15" fill="rgb(216,128,52)" fg:x="69" fg:w="1"/><text x="5.8325%" y="607.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="5.5825%" y="581" width="0.0809%" height="15" fill="rgb(246,145,19)" fg:x="69" fg:w="1"/><text x="5.8325%" y="591.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="5.5825%" y="565" width="0.0809%" height="15" fill="rgb(222,11,46)" fg:x="69" fg:w="1"/><text x="5.8325%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="5.5825%" y="549" width="0.0809%" height="15" fill="rgb(245,82,36)" fg:x="69" fg:w="1"/><text x="5.8325%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="5.5825%" y="533" width="0.0809%" height="15" fill="rgb(250,73,51)" fg:x="69" fg:w="1"/><text x="5.8325%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="5.5825%" y="517" width="0.0809%" height="15" fill="rgb(221,189,23)" fg:x="69" fg:w="1"/><text x="5.8325%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.5825%" y="501" width="0.0809%" height="15" fill="rgb(210,33,7)" fg:x="69" fg:w="1"/><text x="5.8325%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.5825%" y="485" width="0.0809%" height="15" fill="rgb(210,107,22)" fg:x="69" fg:w="1"/><text x="5.8325%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.5825%" y="469" width="0.0809%" height="15" fill="rgb(222,116,37)" fg:x="69" fg:w="1"/><text x="5.8325%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.5825%" y="453" width="0.0809%" height="15" fill="rgb(254,17,48)" fg:x="69" fg:w="1"/><text x="5.8325%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="5.5825%" y="437" width="0.0809%" height="15" fill="rgb(224,36,32)" fg:x="69" fg:w="1"/><text x="5.8325%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.5825%" y="421" width="0.0809%" height="15" fill="rgb(232,90,46)" fg:x="69" fg:w="1"/><text x="5.8325%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="5.6634%" y="613" width="0.1618%" height="15" fill="rgb(241,66,40)" fg:x="70" fg:w="2"/><text x="5.9134%" y="623.50"></text></g><g><title>engine::identifiers::model::get_gid (2 samples, 0.16%)</title><rect x="5.6634%" y="597" width="0.1618%" height="15" fill="rgb(249,184,29)" fg:x="70" fg:w="2"/><text x="5.9134%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="5.6634%" y="581" width="0.1618%" height="15" fill="rgb(231,181,1)" fg:x="70" fg:w="2"/><text x="5.9134%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="5.6634%" y="565" width="0.1618%" height="15" fill="rgb(224,94,2)" fg:x="70" fg:w="2"/><text x="5.9134%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="5.6634%" y="549" width="0.1618%" height="15" fill="rgb(229,170,15)" fg:x="70" fg:w="2"/><text x="5.9134%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="5.6634%" y="533" width="0.1618%" height="15" fill="rgb(240,127,35)" fg:x="70" fg:w="2"/><text x="5.9134%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.7443%" y="517" width="0.0809%" height="15" fill="rgb(248,196,34)" fg:x="71" fg:w="1"/><text x="5.9943%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.7443%" y="501" width="0.0809%" height="15" fill="rgb(236,137,7)" fg:x="71" fg:w="1"/><text x="5.9943%" y="511.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="5.7443%" y="485" width="0.0809%" height="15" fill="rgb(235,127,16)" fg:x="71" fg:w="1"/><text x="5.9943%" y="495.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="5.8252%" y="549" width="0.0809%" height="15" fill="rgb(250,192,54)" fg:x="72" fg:w="1"/><text x="6.0752%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.9061%" y="517" width="0.0809%" height="15" fill="rgb(218,98,20)" fg:x="73" fg:w="1"/><text x="6.1561%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.9061%" y="501" width="0.0809%" height="15" fill="rgb(230,176,47)" fg:x="73" fg:w="1"/><text x="6.1561%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.9061%" y="485" width="0.0809%" height="15" fill="rgb(244,2,33)" fg:x="73" fg:w="1"/><text x="6.1561%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.9061%" y="469" width="0.0809%" height="15" fill="rgb(231,100,17)" fg:x="73" fg:w="1"/><text x="6.1561%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.9061%" y="453" width="0.0809%" height="15" fill="rgb(245,23,12)" fg:x="73" fg:w="1"/><text x="6.1561%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.9061%" y="437" width="0.0809%" height="15" fill="rgb(249,55,22)" fg:x="73" fg:w="1"/><text x="6.1561%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.9061%" y="421" width="0.0809%" height="15" fill="rgb(207,134,9)" fg:x="73" fg:w="1"/><text x="6.1561%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.9061%" y="405" width="0.0809%" height="15" fill="rgb(218,134,0)" fg:x="73" fg:w="1"/><text x="6.1561%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.9061%" y="389" width="0.0809%" height="15" fill="rgb(213,212,33)" fg:x="73" fg:w="1"/><text x="6.1561%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.9061%" y="373" width="0.0809%" height="15" fill="rgb(252,106,18)" fg:x="73" fg:w="1"/><text x="6.1561%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="5.9061%" y="357" width="0.0809%" height="15" fill="rgb(208,126,42)" fg:x="73" fg:w="1"/><text x="6.1561%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="5.9061%" y="341" width="0.0809%" height="15" fill="rgb(246,175,29)" fg:x="73" fg:w="1"/><text x="6.1561%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="5.9061%" y="325" width="0.0809%" height="15" fill="rgb(215,13,50)" fg:x="73" fg:w="1"/><text x="6.1561%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="5.9061%" y="309" width="0.0809%" height="15" fill="rgb(216,172,15)" fg:x="73" fg:w="1"/><text x="6.1561%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.9061%" y="293" width="0.0809%" height="15" fill="rgb(212,103,13)" fg:x="73" fg:w="1"/><text x="6.1561%" y="303.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="5.8252%" y="597" width="0.2427%" height="15" fill="rgb(231,171,36)" fg:x="72" fg:w="3"/><text x="6.0752%" y="607.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="5.8252%" y="581" width="0.2427%" height="15" fill="rgb(250,123,20)" fg:x="72" fg:w="3"/><text x="6.0752%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="5.8252%" y="565" width="0.2427%" height="15" fill="rgb(212,53,50)" fg:x="72" fg:w="3"/><text x="6.0752%" y="575.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="5.9061%" y="549" width="0.1618%" height="15" fill="rgb(243,54,12)" fg:x="73" fg:w="2"/><text x="6.1561%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="5.9061%" y="533" width="0.1618%" height="15" fill="rgb(234,101,34)" fg:x="73" fg:w="2"/><text x="6.1561%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="5.9871%" y="517" width="0.0809%" height="15" fill="rgb(254,67,22)" fg:x="74" fg:w="1"/><text x="6.2371%" y="527.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="6.0680%" y="597" width="0.0809%" height="15" fill="rgb(250,35,47)" fg:x="75" fg:w="1"/><text x="6.3180%" y="607.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="6.0680%" y="581" width="0.0809%" height="15" fill="rgb(226,126,38)" fg:x="75" fg:w="1"/><text x="6.3180%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.0680%" y="565" width="0.0809%" height="15" fill="rgb(216,138,53)" fg:x="75" fg:w="1"/><text x="6.3180%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="6.0680%" y="549" width="0.0809%" height="15" fill="rgb(246,199,43)" fg:x="75" fg:w="1"/><text x="6.3180%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.0680%" y="533" width="0.0809%" height="15" fill="rgb(232,125,11)" fg:x="75" fg:w="1"/><text x="6.3180%" y="543.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (44 samples, 3.56%)</title><rect x="2.6699%" y="645" width="3.5599%" height="15" fill="rgb(218,219,45)" fg:x="33" fg:w="44"/><text x="2.9199%" y="655.50">plug..</text></g><g><title>plugins_core::build::Build::occupying (7 samples, 0.57%)</title><rect x="5.6634%" y="629" width="0.5663%" height="15" fill="rgb(216,102,54)" fg:x="70" fg:w="7"/><text x="5.9134%" y="639.50"></text></g><g><title>plugins_core::tools::set_occupying (5 samples, 0.40%)</title><rect x="5.8252%" y="613" width="0.4045%" height="15" fill="rgb(250,228,7)" fg:x="72" fg:w="5"/><text x="6.0752%" y="623.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (1 samples, 0.08%)</title><rect x="6.1489%" y="597" width="0.0809%" height="15" fill="rgb(226,125,25)" fg:x="76" fg:w="1"/><text x="6.3989%" y="607.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="6.1489%" y="581" width="0.0809%" height="15" fill="rgb(224,165,27)" fg:x="76" fg:w="1"/><text x="6.3989%" y="591.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="6.1489%" y="565" width="0.0809%" height="15" fill="rgb(233,86,3)" fg:x="76" fg:w="1"/><text x="6.3989%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="6.1489%" y="549" width="0.0809%" height="15" fill="rgb(228,116,20)" fg:x="76" fg:w="1"/><text x="6.3989%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.1489%" y="533" width="0.0809%" height="15" fill="rgb(209,192,17)" fg:x="76" fg:w="1"/><text x="6.3989%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.1489%" y="517" width="0.0809%" height="15" fill="rgb(224,88,34)" fg:x="76" fg:w="1"/><text x="6.3989%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.1489%" y="501" width="0.0809%" height="15" fill="rgb(233,38,6)" fg:x="76" fg:w="1"/><text x="6.3989%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.1489%" y="485" width="0.0809%" height="15" fill="rgb(212,59,30)" fg:x="76" fg:w="1"/><text x="6.3989%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.1489%" y="469" width="0.0809%" height="15" fill="rgb(213,80,3)" fg:x="76" fg:w="1"/><text x="6.3989%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.1489%" y="453" width="0.0809%" height="15" fill="rgb(251,178,7)" fg:x="76" fg:w="1"/><text x="6.3989%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.1489%" y="437" width="0.0809%" height="15" fill="rgb(213,154,26)" fg:x="76" fg:w="1"/><text x="6.3989%" y="447.50"></text></g><g><title>engine::identifiers::model::set_gid (1 samples, 0.08%)</title><rect x="6.2298%" y="597" width="0.0809%" height="15" fill="rgb(238,165,49)" fg:x="77" fg:w="1"/><text x="6.4798%" y="607.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="6.2298%" y="581" width="0.0809%" height="15" fill="rgb(248,91,46)" fg:x="77" fg:w="1"/><text x="6.4798%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="6.2298%" y="565" width="0.0809%" height="15" fill="rgb(244,21,52)" fg:x="77" fg:w="1"/><text x="6.4798%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="6.2298%" y="549" width="0.0809%" height="15" fill="rgb(247,122,20)" fg:x="77" fg:w="1"/><text x="6.4798%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="6.2298%" y="613" width="0.1618%" height="15" fill="rgb(218,27,9)" fg:x="77" fg:w="2"/><text x="6.4798%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="6.3107%" y="597" width="0.0809%" height="15" fill="rgb(246,7,6)" fg:x="78" fg:w="1"/><text x="6.5607%" y="607.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="6.3107%" y="581" width="0.0809%" height="15" fill="rgb(227,135,54)" fg:x="78" fg:w="1"/><text x="6.5607%" y="591.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (4 samples, 0.32%)</title><rect x="6.2298%" y="645" width="0.3236%" height="15" fill="rgb(247,14,11)" fg:x="77" fg:w="4"/><text x="6.4798%" y="655.50"></text></g><g><title>plugins_core::build::QuickThing::make (4 samples, 0.32%)</title><rect x="6.2298%" y="629" width="0.3236%" height="15" fill="rgb(206,149,34)" fg:x="77" fg:w="4"/><text x="6.4798%" y="639.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="6.3916%" y="613" width="0.1618%" height="15" fill="rgb(227,228,4)" fg:x="79" fg:w="2"/><text x="6.6416%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="6.4725%" y="597" width="0.0809%" height="15" fill="rgb(238,218,28)" fg:x="80" fg:w="1"/><text x="6.7225%" y="607.50"></text></g><g><title>kernel::model::props::Props::set_property (1 samples, 0.08%)</title><rect x="6.4725%" y="581" width="0.0809%" height="15" fill="rgb(252,86,40)" fg:x="80" fg:w="1"/><text x="6.7225%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.4725%" y="565" width="0.0809%" height="15" fill="rgb(251,225,11)" fg:x="80" fg:w="1"/><text x="6.7225%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.4725%" y="549" width="0.0809%" height="15" fill="rgb(206,46,49)" fg:x="80" fg:w="1"/><text x="6.7225%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="6.4725%" y="533" width="0.0809%" height="15" fill="rgb(245,128,24)" fg:x="80" fg:w="1"/><text x="6.7225%" y="543.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (71 samples, 5.74%)</title><rect x="0.8900%" y="661" width="5.7443%" height="15" fill="rgb(219,177,34)" fg:x="11" fg:w="71"/><text x="1.1400%" y="671.50">&lt;tests:..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (1 samples, 0.08%)</title><rect x="6.5534%" y="645" width="0.0809%" height="15" fill="rgb(218,60,48)" fg:x="81" fg:w="1"/><text x="6.8034%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="6.5534%" y="629" width="0.0809%" height="15" fill="rgb(221,11,5)" fg:x="81" fg:w="1"/><text x="6.8034%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="6.5534%" y="613" width="0.0809%" height="15" fill="rgb(220,148,13)" fg:x="81" fg:w="1"/><text x="6.8034%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="6.5534%" y="597" width="0.0809%" height="15" fill="rgb(210,16,3)" fg:x="81" fg:w="1"/><text x="6.8034%" y="607.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="6.5534%" y="581" width="0.0809%" height="15" fill="rgb(236,80,2)" fg:x="81" fg:w="1"/><text x="6.8034%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.5534%" y="565" width="0.0809%" height="15" fill="rgb(239,129,19)" fg:x="81" fg:w="1"/><text x="6.8034%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.5534%" y="549" width="0.0809%" height="15" fill="rgb(220,106,35)" fg:x="81" fg:w="1"/><text x="6.8034%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.5534%" y="533" width="0.0809%" height="15" fill="rgb(252,139,45)" fg:x="81" fg:w="1"/><text x="6.8034%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.5534%" y="517" width="0.0809%" height="15" fill="rgb(229,8,36)" fg:x="81" fg:w="1"/><text x="6.8034%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.5534%" y="501" width="0.0809%" height="15" fill="rgb(230,126,33)" fg:x="81" fg:w="1"/><text x="6.8034%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="6.5534%" y="485" width="0.0809%" height="15" fill="rgb(239,140,21)" fg:x="81" fg:w="1"/><text x="6.8034%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="6.5534%" y="469" width="0.0809%" height="15" fill="rgb(254,104,9)" fg:x="81" fg:w="1"/><text x="6.8034%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="6.6343%" y="661" width="0.0809%" height="15" fill="rgb(239,52,14)" fg:x="82" fg:w="1"/><text x="6.8843%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="6.6343%" y="645" width="0.0809%" height="15" fill="rgb(208,227,44)" fg:x="82" fg:w="1"/><text x="6.8843%" y="655.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="6.6343%" y="629" width="0.0809%" height="15" fill="rgb(246,18,19)" fg:x="82" fg:w="1"/><text x="6.8843%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="6.6343%" y="613" width="0.0809%" height="15" fill="rgb(235,228,25)" fg:x="82" fg:w="1"/><text x="6.8843%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.6343%" y="597" width="0.0809%" height="15" fill="rgb(240,156,20)" fg:x="82" fg:w="1"/><text x="6.8843%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (2 samples, 0.16%)</title><rect x="6.7152%" y="661" width="0.1618%" height="15" fill="rgb(224,8,20)" fg:x="83" fg:w="2"/><text x="6.9652%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::ObservedEntity&gt; (2 samples, 0.16%)</title><rect x="6.7152%" y="645" width="0.1618%" height="15" fill="rgb(214,12,52)" fg:x="83" fg:w="2"/><text x="6.9652%" y="655.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="6.7152%" y="629" width="0.1618%" height="15" fill="rgb(211,220,47)" fg:x="83" fg:w="2"/><text x="6.9652%" y="639.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="6.8770%" y="613" width="0.0809%" height="15" fill="rgb(250,173,5)" fg:x="85" fg:w="1"/><text x="7.1270%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="6.8770%" y="597" width="0.0809%" height="15" fill="rgb(250,125,52)" fg:x="85" fg:w="1"/><text x="7.1270%" y="607.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="6.8770%" y="581" width="0.0809%" height="15" fill="rgb(209,133,18)" fg:x="85" fg:w="1"/><text x="7.1270%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.0388%" y="549" width="0.0809%" height="15" fill="rgb(216,173,22)" fg:x="87" fg:w="1"/><text x="7.2888%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.0388%" y="533" width="0.0809%" height="15" fill="rgb(205,3,22)" fg:x="87" fg:w="1"/><text x="7.2888%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.0388%" y="517" width="0.0809%" height="15" fill="rgb(248,22,20)" fg:x="87" fg:w="1"/><text x="7.2888%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="7.0388%" y="565" width="0.1618%" height="15" fill="rgb(233,6,29)" fg:x="87" fg:w="2"/><text x="7.2888%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.1197%" y="549" width="0.0809%" height="15" fill="rgb(240,22,54)" fg:x="88" fg:w="1"/><text x="7.3697%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.1197%" y="533" width="0.0809%" height="15" fill="rgb(231,133,32)" fg:x="88" fg:w="1"/><text x="7.3697%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="7.2006%" y="549" width="0.1618%" height="15" fill="rgb(248,193,4)" fg:x="89" fg:w="2"/><text x="7.4506%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.2816%" y="533" width="0.0809%" height="15" fill="rgb(211,178,46)" fg:x="90" fg:w="1"/><text x="7.5316%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="7.3625%" y="533" width="0.0809%" height="15" fill="rgb(224,5,42)" fg:x="91" fg:w="1"/><text x="7.6125%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="7.3625%" y="517" width="0.0809%" height="15" fill="rgb(239,176,25)" fg:x="91" fg:w="1"/><text x="7.6125%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.4434%" y="533" width="0.0809%" height="15" fill="rgb(245,187,50)" fg:x="92" fg:w="1"/><text x="7.6934%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.4434%" y="517" width="0.0809%" height="15" fill="rgb(248,24,15)" fg:x="92" fg:w="1"/><text x="7.6934%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.5243%" y="517" width="0.0809%" height="15" fill="rgb(205,166,13)" fg:x="93" fg:w="1"/><text x="7.7743%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.5243%" y="501" width="0.0809%" height="15" fill="rgb(208,114,23)" fg:x="93" fg:w="1"/><text x="7.7743%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="7.3625%" y="549" width="0.3236%" height="15" fill="rgb(239,127,18)" fg:x="91" fg:w="4"/><text x="7.6125%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="7.5243%" y="533" width="0.1618%" height="15" fill="rgb(219,154,28)" fg:x="93" fg:w="2"/><text x="7.7743%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="7.6052%" y="517" width="0.0809%" height="15" fill="rgb(225,157,23)" fg:x="94" fg:w="1"/><text x="7.8552%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.6052%" y="501" width="0.0809%" height="15" fill="rgb(219,8,6)" fg:x="94" fg:w="1"/><text x="7.8552%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (14 samples, 1.13%)</title><rect x="7.0388%" y="581" width="1.1327%" height="15" fill="rgb(212,47,6)" fg:x="87" fg:w="14"/><text x="7.2888%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.97%)</title><rect x="7.2006%" y="565" width="0.9709%" height="15" fill="rgb(224,190,4)" fg:x="89" fg:w="12"/><text x="7.4506%" y="575.50"></text></g><g><title>std::io::Write::write_all (6 samples, 0.49%)</title><rect x="7.6861%" y="549" width="0.4854%" height="15" fill="rgb(239,183,29)" fg:x="95" fg:w="6"/><text x="7.9361%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (6 samples, 0.49%)</title><rect x="7.6861%" y="533" width="0.4854%" height="15" fill="rgb(213,57,7)" fg:x="95" fg:w="6"/><text x="7.9361%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.32%)</title><rect x="7.8479%" y="517" width="0.3236%" height="15" fill="rgb(216,148,1)" fg:x="97" fg:w="4"/><text x="8.0979%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="7.8479%" y="501" width="0.3236%" height="15" fill="rgb(236,182,29)" fg:x="97" fg:w="4"/><text x="8.0979%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="7.9288%" y="485" width="0.2427%" height="15" fill="rgb(244,120,48)" fg:x="98" fg:w="3"/><text x="8.1788%" y="495.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="7.9288%" y="469" width="0.2427%" height="15" fill="rgb(206,71,34)" fg:x="98" fg:w="3"/><text x="8.1788%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.1715%" y="549" width="0.0809%" height="15" fill="rgb(242,32,6)" fg:x="101" fg:w="1"/><text x="8.4215%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.1715%" y="533" width="0.0809%" height="15" fill="rgb(241,35,3)" fg:x="101" fg:w="1"/><text x="8.4215%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.2524%" y="533" width="0.0809%" height="15" fill="rgb(222,62,19)" fg:x="102" fg:w="1"/><text x="8.5024%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="8.1715%" y="581" width="0.2427%" height="15" fill="rgb(223,110,41)" fg:x="101" fg:w="3"/><text x="8.4215%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="8.1715%" y="565" width="0.2427%" height="15" fill="rgb(208,224,4)" fg:x="101" fg:w="3"/><text x="8.4215%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.2524%" y="549" width="0.1618%" height="15" fill="rgb(241,137,19)" fg:x="102" fg:w="2"/><text x="8.5024%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.3333%" y="533" width="0.0809%" height="15" fill="rgb(244,24,17)" fg:x="103" fg:w="1"/><text x="8.5833%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.3333%" y="517" width="0.0809%" height="15" fill="rgb(245,178,49)" fg:x="103" fg:w="1"/><text x="8.5833%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.3333%" y="501" width="0.0809%" height="15" fill="rgb(219,160,38)" fg:x="103" fg:w="1"/><text x="8.5833%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.3333%" y="485" width="0.0809%" height="15" fill="rgb(228,137,14)" fg:x="103" fg:w="1"/><text x="8.5833%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.3333%" y="469" width="0.0809%" height="15" fill="rgb(237,134,11)" fg:x="103" fg:w="1"/><text x="8.5833%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.3333%" y="453" width="0.0809%" height="15" fill="rgb(211,126,44)" fg:x="103" fg:w="1"/><text x="8.5833%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.3333%" y="437" width="0.0809%" height="15" fill="rgb(226,171,33)" fg:x="103" fg:w="1"/><text x="8.5833%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.4142%" y="517" width="0.0809%" height="15" fill="rgb(253,99,13)" fg:x="104" fg:w="1"/><text x="8.6642%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.5761%" y="485" width="0.0809%" height="15" fill="rgb(244,48,7)" fg:x="106" fg:w="1"/><text x="8.8261%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.6570%" y="485" width="0.0809%" height="15" fill="rgb(244,217,54)" fg:x="107" fg:w="1"/><text x="8.9070%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.9806%" y="453" width="0.0809%" height="15" fill="rgb(224,15,18)" fg:x="111" fg:w="1"/><text x="9.2306%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.9806%" y="437" width="0.0809%" height="15" fill="rgb(244,99,12)" fg:x="111" fg:w="1"/><text x="9.2306%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.73%)</title><rect x="8.4142%" y="549" width="0.7282%" height="15" fill="rgb(233,226,8)" fg:x="104" fg:w="9"/><text x="8.6642%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (9 samples, 0.73%)</title><rect x="8.4142%" y="533" width="0.7282%" height="15" fill="rgb(229,211,3)" fg:x="104" fg:w="9"/><text x="8.6642%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.65%)</title><rect x="8.4951%" y="517" width="0.6472%" height="15" fill="rgb(216,140,21)" fg:x="105" fg:w="8"/><text x="8.7451%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.57%)</title><rect x="8.5761%" y="501" width="0.5663%" height="15" fill="rgb(234,122,30)" fg:x="106" fg:w="7"/><text x="8.8261%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="8.7379%" y="485" width="0.4045%" height="15" fill="rgb(236,25,46)" fg:x="108" fg:w="5"/><text x="8.9879%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="8.8188%" y="469" width="0.3236%" height="15" fill="rgb(217,52,54)" fg:x="109" fg:w="4"/><text x="9.0688%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.0615%" y="453" width="0.0809%" height="15" fill="rgb(222,29,26)" fg:x="112" fg:w="1"/><text x="9.3115%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.0615%" y="437" width="0.0809%" height="15" fill="rgb(216,177,29)" fg:x="112" fg:w="1"/><text x="9.3115%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.0615%" y="421" width="0.0809%" height="15" fill="rgb(247,136,51)" fg:x="112" fg:w="1"/><text x="9.3115%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.0615%" y="405" width="0.0809%" height="15" fill="rgb(231,47,47)" fg:x="112" fg:w="1"/><text x="9.3115%" y="415.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="9.2233%" y="485" width="0.0809%" height="15" fill="rgb(211,192,36)" fg:x="114" fg:w="1"/><text x="9.4733%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="9.2233%" y="469" width="0.0809%" height="15" fill="rgb(229,156,32)" fg:x="114" fg:w="1"/><text x="9.4733%" y="479.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (13 samples, 1.05%)</title><rect x="8.4142%" y="565" width="1.0518%" height="15" fill="rgb(248,213,20)" fg:x="104" fg:w="13"/><text x="8.6642%" y="575.50"></text></g><g><title>treediff::diff::diff (4 samples, 0.32%)</title><rect x="9.1424%" y="549" width="0.3236%" height="15" fill="rgb(217,64,7)" fg:x="113" fg:w="4"/><text x="9.3924%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.32%)</title><rect x="9.1424%" y="533" width="0.3236%" height="15" fill="rgb(232,142,8)" fg:x="113" fg:w="4"/><text x="9.3924%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.32%)</title><rect x="9.1424%" y="517" width="0.3236%" height="15" fill="rgb(224,92,44)" fg:x="113" fg:w="4"/><text x="9.3924%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="9.2233%" y="501" width="0.2427%" height="15" fill="rgb(214,169,17)" fg:x="114" fg:w="3"/><text x="9.4733%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="9.3042%" y="485" width="0.1618%" height="15" fill="rgb(210,59,37)" fg:x="115" fg:w="2"/><text x="9.5542%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="9.3042%" y="469" width="0.1618%" height="15" fill="rgb(214,116,48)" fg:x="115" fg:w="2"/><text x="9.5542%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="9.3042%" y="453" width="0.1618%" height="15" fill="rgb(244,191,6)" fg:x="115" fg:w="2"/><text x="9.5542%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="9.3042%" y="437" width="0.1618%" height="15" fill="rgb(241,50,52)" fg:x="115" fg:w="2"/><text x="9.5542%" y="447.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="9.3851%" y="421" width="0.0809%" height="15" fill="rgb(236,75,39)" fg:x="116" fg:w="1"/><text x="9.6351%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="9.5469%" y="533" width="0.1618%" height="15" fill="rgb(236,99,0)" fg:x="118" fg:w="2"/><text x="9.7969%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="9.5469%" y="517" width="0.1618%" height="15" fill="rgb(207,202,15)" fg:x="118" fg:w="2"/><text x="9.7969%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="9.7087%" y="533" width="0.0809%" height="15" fill="rgb(233,207,14)" fg:x="120" fg:w="1"/><text x="9.9587%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.7087%" y="517" width="0.0809%" height="15" fill="rgb(226,27,51)" fg:x="120" fg:w="1"/><text x="9.9587%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.7087%" y="501" width="0.0809%" height="15" fill="rgb(206,104,42)" fg:x="120" fg:w="1"/><text x="9.9587%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="9.7896%" y="533" width="0.0809%" height="15" fill="rgb(212,225,4)" fg:x="121" fg:w="1"/><text x="10.0396%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.7896%" y="517" width="0.0809%" height="15" fill="rgb(233,96,42)" fg:x="121" fg:w="1"/><text x="10.0396%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.7896%" y="501" width="0.0809%" height="15" fill="rgb(229,21,32)" fg:x="121" fg:w="1"/><text x="10.0396%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.9515%" y="485" width="0.0809%" height="15" fill="rgb(226,216,24)" fg:x="123" fg:w="1"/><text x="10.2015%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="10.0324%" y="469" width="0.0809%" height="15" fill="rgb(221,163,17)" fg:x="124" fg:w="1"/><text x="10.2824%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.1133%" y="453" width="0.1618%" height="15" fill="rgb(216,216,42)" fg:x="125" fg:w="2"/><text x="10.3633%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.1133%" y="437" width="0.1618%" height="15" fill="rgb(240,118,7)" fg:x="125" fg:w="2"/><text x="10.3633%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="10.1133%" y="421" width="0.1618%" height="15" fill="rgb(221,67,37)" fg:x="125" fg:w="2"/><text x="10.3633%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="10.4369%" y="405" width="0.0809%" height="15" fill="rgb(241,32,44)" fg:x="129" fg:w="1"/><text x="10.6869%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.65%)</title><rect x="9.9515%" y="501" width="0.6472%" height="15" fill="rgb(235,204,43)" fg:x="123" fg:w="8"/><text x="10.2015%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7 samples, 0.57%)</title><rect x="10.0324%" y="485" width="0.5663%" height="15" fill="rgb(213,116,10)" fg:x="124" fg:w="7"/><text x="10.2824%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.49%)</title><rect x="10.1133%" y="469" width="0.4854%" height="15" fill="rgb(239,15,48)" fg:x="125" fg:w="6"/><text x="10.3633%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="10.2751%" y="453" width="0.3236%" height="15" fill="rgb(207,123,36)" fg:x="127" fg:w="4"/><text x="10.5251%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="10.3560%" y="437" width="0.2427%" height="15" fill="rgb(209,103,30)" fg:x="128" fg:w="3"/><text x="10.6060%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="10.4369%" y="421" width="0.1618%" height="15" fill="rgb(238,100,19)" fg:x="129" fg:w="2"/><text x="10.6869%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="10.5178%" y="405" width="0.0809%" height="15" fill="rgb(244,30,14)" fg:x="130" fg:w="1"/><text x="10.7678%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.5178%" y="389" width="0.0809%" height="15" fill="rgb(249,174,6)" fg:x="130" fg:w="1"/><text x="10.7678%" y="399.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (15 samples, 1.21%)</title><rect x="9.4660%" y="565" width="1.2136%" height="15" fill="rgb(235,213,41)" fg:x="117" fg:w="15"/><text x="9.7160%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (15 samples, 1.21%)</title><rect x="9.4660%" y="549" width="1.2136%" height="15" fill="rgb(213,118,6)" fg:x="117" fg:w="15"/><text x="9.7160%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (10 samples, 0.81%)</title><rect x="9.8706%" y="533" width="0.8091%" height="15" fill="rgb(235,44,51)" fg:x="122" fg:w="10"/><text x="10.1206%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (10 samples, 0.81%)</title><rect x="9.8706%" y="517" width="0.8091%" height="15" fill="rgb(217,9,53)" fg:x="122" fg:w="10"/><text x="10.1206%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="10.5987%" y="501" width="0.0809%" height="15" fill="rgb(237,172,34)" fg:x="131" fg:w="1"/><text x="10.8487%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.5987%" y="485" width="0.0809%" height="15" fill="rgb(206,206,11)" fg:x="131" fg:w="1"/><text x="10.8487%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="10.6796%" y="389" width="0.0809%" height="15" fill="rgb(214,149,29)" fg:x="132" fg:w="1"/><text x="10.9296%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.6796%" y="373" width="0.0809%" height="15" fill="rgb(208,123,3)" fg:x="132" fg:w="1"/><text x="10.9296%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="10.6796%" y="421" width="0.1618%" height="15" fill="rgb(229,126,4)" fg:x="132" fg:w="2"/><text x="10.9296%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="10.6796%" y="405" width="0.1618%" height="15" fill="rgb(222,92,36)" fg:x="132" fg:w="2"/><text x="10.9296%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.7605%" y="389" width="0.0809%" height="15" fill="rgb(216,39,41)" fg:x="133" fg:w="1"/><text x="11.0105%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.7605%" y="373" width="0.0809%" height="15" fill="rgb(253,127,28)" fg:x="133" fg:w="1"/><text x="11.0105%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="10.8414%" y="373" width="0.0809%" height="15" fill="rgb(249,152,51)" fg:x="134" fg:w="1"/><text x="11.0914%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="10.8414%" y="357" width="0.0809%" height="15" fill="rgb(209,123,42)" fg:x="134" fg:w="1"/><text x="11.0914%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="10.6796%" y="469" width="0.3236%" height="15" fill="rgb(241,118,22)" fg:x="132" fg:w="4"/><text x="10.9296%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="10.6796%" y="453" width="0.3236%" height="15" fill="rgb(208,25,7)" fg:x="132" fg:w="4"/><text x="10.9296%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="10.6796%" y="437" width="0.3236%" height="15" fill="rgb(243,144,39)" fg:x="132" fg:w="4"/><text x="10.9296%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="10.8414%" y="421" width="0.1618%" height="15" fill="rgb(250,50,5)" fg:x="134" fg:w="2"/><text x="11.0914%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="10.8414%" y="405" width="0.1618%" height="15" fill="rgb(207,67,11)" fg:x="134" fg:w="2"/><text x="11.0914%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="10.8414%" y="389" width="0.1618%" height="15" fill="rgb(245,204,40)" fg:x="134" fg:w="2"/><text x="11.0914%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="10.9223%" y="373" width="0.0809%" height="15" fill="rgb(238,228,24)" fg:x="135" fg:w="1"/><text x="11.1723%" y="383.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="10.9223%" y="357" width="0.0809%" height="15" fill="rgb(217,116,22)" fg:x="135" fg:w="1"/><text x="11.1723%" y="367.50"></text></g><g><title>engine::session::Session::close (52 samples, 4.21%)</title><rect x="6.8770%" y="661" width="4.2071%" height="15" fill="rgb(234,98,12)" fg:x="85" fg:w="52"/><text x="7.1270%" y="671.50">engin..</text></g><g><title>engine::session::state::State::close (52 samples, 4.21%)</title><rect x="6.8770%" y="645" width="4.2071%" height="15" fill="rgb(242,170,50)" fg:x="85" fg:w="52"/><text x="7.1270%" y="655.50">engin..</text></g><g><title>engine::session::state::State::flush_entities (52 samples, 4.21%)</title><rect x="6.8770%" y="629" width="4.2071%" height="15" fill="rgb(235,7,5)" fg:x="85" fg:w="52"/><text x="7.1270%" y="639.50">engin..</text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (51 samples, 4.13%)</title><rect x="6.9579%" y="613" width="4.1262%" height="15" fill="rgb(241,114,28)" fg:x="86" fg:w="51"/><text x="7.2079%" y="623.50">engi..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (51 samples, 4.13%)</title><rect x="6.9579%" y="597" width="4.1262%" height="15" fill="rgb(246,112,42)" fg:x="86" fg:w="51"/><text x="7.2079%" y="607.50">engi..</text></g><g><title>kernel::model::any_entity_changes (33 samples, 2.67%)</title><rect x="8.4142%" y="581" width="2.6699%" height="15" fill="rgb(248,228,14)" fg:x="104" fg:w="33"/><text x="8.6642%" y="591.50">ke..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.40%)</title><rect x="10.6796%" y="565" width="0.4045%" height="15" fill="rgb(208,133,18)" fg:x="132" fg:w="5"/><text x="10.9296%" y="575.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="10.6796%" y="549" width="0.4045%" height="15" fill="rgb(207,35,49)" fg:x="132" fg:w="5"/><text x="10.9296%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="10.6796%" y="533" width="0.4045%" height="15" fill="rgb(205,68,36)" fg:x="132" fg:w="5"/><text x="10.9296%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="10.6796%" y="517" width="0.4045%" height="15" fill="rgb(245,62,40)" fg:x="132" fg:w="5"/><text x="10.9296%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="10.6796%" y="501" width="0.4045%" height="15" fill="rgb(228,27,24)" fg:x="132" fg:w="5"/><text x="10.9296%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="10.6796%" y="485" width="0.4045%" height="15" fill="rgb(253,19,12)" fg:x="132" fg:w="5"/><text x="10.9296%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.0032%" y="469" width="0.0809%" height="15" fill="rgb(232,28,20)" fg:x="136" fg:w="1"/><text x="11.2532%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.0032%" y="453" width="0.0809%" height="15" fill="rgb(218,35,51)" fg:x="136" fg:w="1"/><text x="11.2532%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.0032%" y="437" width="0.0809%" height="15" fill="rgb(212,90,40)" fg:x="136" fg:w="1"/><text x="11.2532%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="11.1650%" y="517" width="0.1618%" height="15" fill="rgb(220,172,12)" fg:x="138" fg:w="2"/><text x="11.4150%" y="527.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="11.1650%" y="501" width="0.1618%" height="15" fill="rgb(226,159,20)" fg:x="138" fg:w="2"/><text x="11.4150%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="11.1650%" y="485" width="0.1618%" height="15" fill="rgb(234,205,16)" fg:x="138" fg:w="2"/><text x="11.4150%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.2460%" y="469" width="0.0809%" height="15" fill="rgb(207,9,39)" fg:x="139" fg:w="1"/><text x="11.4960%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.2460%" y="453" width="0.0809%" height="15" fill="rgb(249,143,15)" fg:x="139" fg:w="1"/><text x="11.4960%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.2460%" y="437" width="0.0809%" height="15" fill="rgb(253,133,29)" fg:x="139" fg:w="1"/><text x="11.4960%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.2460%" y="421" width="0.0809%" height="15" fill="rgb(221,187,0)" fg:x="139" fg:w="1"/><text x="11.4960%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.2460%" y="405" width="0.0809%" height="15" fill="rgb(205,204,26)" fg:x="139" fg:w="1"/><text x="11.4960%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="11.3269%" y="357" width="0.0809%" height="15" fill="rgb(224,68,54)" fg:x="140" fg:w="1"/><text x="11.5769%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="11.1650%" y="533" width="0.3236%" height="15" fill="rgb(209,67,4)" fg:x="138" fg:w="4"/><text x="11.4150%" y="543.50"></text></g><g><title>kernel::model::entity::Entity::from_str (2 samples, 0.16%)</title><rect x="11.3269%" y="517" width="0.1618%" height="15" fill="rgb(228,229,18)" fg:x="140" fg:w="2"/><text x="11.5769%" y="527.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="11.3269%" y="501" width="0.1618%" height="15" fill="rgb(231,89,13)" fg:x="140" fg:w="2"/><text x="11.5769%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="11.3269%" y="485" width="0.1618%" height="15" fill="rgb(210,182,18)" fg:x="140" fg:w="2"/><text x="11.5769%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="11.3269%" y="469" width="0.1618%" height="15" fill="rgb(240,105,2)" fg:x="140" fg:w="2"/><text x="11.5769%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="11.3269%" y="453" width="0.1618%" height="15" fill="rgb(207,170,50)" fg:x="140" fg:w="2"/><text x="11.5769%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="11.3269%" y="437" width="0.1618%" height="15" fill="rgb(232,133,24)" fg:x="140" fg:w="2"/><text x="11.5769%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="11.3269%" y="421" width="0.1618%" height="15" fill="rgb(235,166,27)" fg:x="140" fg:w="2"/><text x="11.5769%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="11.3269%" y="405" width="0.1618%" height="15" fill="rgb(209,19,13)" fg:x="140" fg:w="2"/><text x="11.5769%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="11.3269%" y="389" width="0.1618%" height="15" fill="rgb(226,79,39)" fg:x="140" fg:w="2"/><text x="11.5769%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="11.3269%" y="373" width="0.1618%" height="15" fill="rgb(222,163,10)" fg:x="140" fg:w="2"/><text x="11.5769%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="11.4078%" y="357" width="0.0809%" height="15" fill="rgb(214,44,19)" fg:x="141" fg:w="1"/><text x="11.6578%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.4078%" y="341" width="0.0809%" height="15" fill="rgb(210,217,13)" fg:x="141" fg:w="1"/><text x="11.6578%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="11.4078%" y="325" width="0.0809%" height="15" fill="rgb(237,61,54)" fg:x="141" fg:w="1"/><text x="11.6578%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.4078%" y="309" width="0.0809%" height="15" fill="rgb(226,184,24)" fg:x="141" fg:w="1"/><text x="11.6578%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.4078%" y="293" width="0.0809%" height="15" fill="rgb(223,226,4)" fg:x="141" fg:w="1"/><text x="11.6578%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.4078%" y="277" width="0.0809%" height="15" fill="rgb(210,26,41)" fg:x="141" fg:w="1"/><text x="11.6578%" y="287.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (5 samples, 0.40%)</title><rect x="11.1650%" y="565" width="0.4045%" height="15" fill="rgb(220,221,6)" fg:x="138" fg:w="5"/><text x="11.4150%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (5 samples, 0.40%)</title><rect x="11.1650%" y="549" width="0.4045%" height="15" fill="rgb(225,89,49)" fg:x="138" fg:w="5"/><text x="11.4150%" y="559.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="11.4887%" y="533" width="0.0809%" height="15" fill="rgb(218,70,45)" fg:x="142" fg:w="1"/><text x="11.7387%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="11.4887%" y="517" width="0.0809%" height="15" fill="rgb(238,166,21)" fg:x="142" fg:w="1"/><text x="11.7387%" y="527.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (6 samples, 0.49%)</title><rect x="11.1650%" y="629" width="0.4854%" height="15" fill="rgb(224,141,44)" fg:x="138" fg:w="6"/><text x="11.4150%" y="639.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (6 samples, 0.49%)</title><rect x="11.1650%" y="613" width="0.4854%" height="15" fill="rgb(230,12,49)" fg:x="138" fg:w="6"/><text x="11.4150%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::scope (6 samples, 0.49%)</title><rect x="11.1650%" y="597" width="0.4854%" height="15" fill="rgb(212,174,12)" fg:x="138" fg:w="6"/><text x="11.4150%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (6 samples, 0.49%)</title><rect x="11.1650%" y="581" width="0.4854%" height="15" fill="rgb(246,67,9)" fg:x="138" fg:w="6"/><text x="11.4150%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.5696%" y="565" width="0.0809%" height="15" fill="rgb(239,35,23)" fg:x="143" fg:w="1"/><text x="11.8196%" y="575.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="11.5696%" y="549" width="0.0809%" height="15" fill="rgb(211,167,0)" fg:x="143" fg:w="1"/><text x="11.8196%" y="559.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="11.6505%" y="597" width="0.0809%" height="15" fill="rgb(225,119,45)" fg:x="144" fg:w="1"/><text x="11.9005%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.6505%" y="581" width="0.0809%" height="15" fill="rgb(210,162,6)" fg:x="144" fg:w="1"/><text x="11.9005%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="11.8932%" y="533" width="0.0809%" height="15" fill="rgb(208,118,35)" fg:x="147" fg:w="1"/><text x="12.1432%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="11.8932%" y="517" width="0.0809%" height="15" fill="rgb(239,4,53)" fg:x="147" fg:w="1"/><text x="12.1432%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="11.8932%" y="501" width="0.0809%" height="15" fill="rgb(213,130,21)" fg:x="147" fg:w="1"/><text x="12.1432%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="11.8932%" y="485" width="0.0809%" height="15" fill="rgb(235,148,0)" fg:x="147" fg:w="1"/><text x="12.1432%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="11.7314%" y="549" width="0.3236%" height="15" fill="rgb(244,224,18)" fg:x="145" fg:w="4"/><text x="11.9814%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;rpc_proto::JsonValue&gt; (1 samples, 0.08%)</title><rect x="11.9741%" y="533" width="0.0809%" height="15" fill="rgb(211,214,4)" fg:x="148" fg:w="1"/><text x="12.2241%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="11.9741%" y="517" width="0.0809%" height="15" fill="rgb(206,119,25)" fg:x="148" fg:w="1"/><text x="12.2241%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="11.7314%" y="565" width="0.4045%" height="15" fill="rgb(243,93,47)" fg:x="145" fg:w="5"/><text x="11.9814%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;rpc_proto::JsonValue&gt; (1 samples, 0.08%)</title><rect x="12.0550%" y="549" width="0.0809%" height="15" fill="rgb(224,194,6)" fg:x="149" fg:w="1"/><text x="12.3050%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (8 samples, 0.65%)</title><rect x="11.7314%" y="597" width="0.6472%" height="15" fill="rgb(243,229,6)" fg:x="145" fg:w="8"/><text x="11.9814%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.65%)</title><rect x="11.7314%" y="581" width="0.6472%" height="15" fill="rgb(207,23,50)" fg:x="145" fg:w="8"/><text x="11.9814%" y="591.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="12.1359%" y="565" width="0.2427%" height="15" fill="rgb(253,192,32)" fg:x="150" fg:w="3"/><text x="12.3859%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="12.3786%" y="565" width="0.0809%" height="15" fill="rgb(213,21,6)" fg:x="153" fg:w="1"/><text x="12.6286%" y="575.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.08%)</title><rect x="12.3786%" y="549" width="0.0809%" height="15" fill="rgb(243,151,13)" fg:x="153" fg:w="1"/><text x="12.6286%" y="559.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="12.3786%" y="533" width="0.0809%" height="15" fill="rgb(233,165,41)" fg:x="153" fg:w="1"/><text x="12.6286%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="12.3786%" y="517" width="0.0809%" height="15" fill="rgb(246,176,45)" fg:x="153" fg:w="1"/><text x="12.6286%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="12.3786%" y="501" width="0.0809%" height="15" fill="rgb(217,170,52)" fg:x="153" fg:w="1"/><text x="12.6286%" y="511.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="12.3786%" y="485" width="0.0809%" height="15" fill="rgb(214,203,54)" fg:x="153" fg:w="1"/><text x="12.6286%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.3786%" y="469" width="0.0809%" height="15" fill="rgb(248,215,49)" fg:x="153" fg:w="1"/><text x="12.6286%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="12.3786%" y="453" width="0.0809%" height="15" fill="rgb(208,46,10)" fg:x="153" fg:w="1"/><text x="12.6286%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="12.3786%" y="437" width="0.0809%" height="15" fill="rgb(254,5,31)" fg:x="153" fg:w="1"/><text x="12.6286%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.3786%" y="421" width="0.0809%" height="15" fill="rgb(222,104,33)" fg:x="153" fg:w="1"/><text x="12.6286%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.4595%" y="517" width="0.0809%" height="15" fill="rgb(248,49,16)" fg:x="154" fg:w="1"/><text x="12.7095%" y="527.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="12.4595%" y="565" width="0.1618%" height="15" fill="rgb(232,198,41)" fg:x="154" fg:w="2"/><text x="12.7095%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="12.4595%" y="549" width="0.1618%" height="15" fill="rgb(214,125,3)" fg:x="154" fg:w="2"/><text x="12.7095%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (2 samples, 0.16%)</title><rect x="12.4595%" y="533" width="0.1618%" height="15" fill="rgb(229,220,28)" fg:x="154" fg:w="2"/><text x="12.7095%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::entity::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="12.5405%" y="517" width="0.0809%" height="15" fill="rgb(222,64,37)" fg:x="155" fg:w="1"/><text x="12.7905%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.5405%" y="501" width="0.0809%" height="15" fill="rgb(249,184,13)" fg:x="155" fg:w="1"/><text x="12.7905%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="12.6214%" y="501" width="0.1618%" height="15" fill="rgb(252,176,6)" fg:x="156" fg:w="2"/><text x="12.8714%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.7832%" y="485" width="0.0809%" height="15" fill="rgb(228,153,7)" fg:x="158" fg:w="1"/><text x="13.0332%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="12.9450%" y="437" width="0.0809%" height="15" fill="rgb(242,193,5)" fg:x="160" fg:w="1"/><text x="13.1950%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="12.9450%" y="421" width="0.0809%" height="15" fill="rgb(232,140,9)" fg:x="160" fg:w="1"/><text x="13.1950%" y="431.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="12.9450%" y="405" width="0.0809%" height="15" fill="rgb(213,222,16)" fg:x="160" fg:w="1"/><text x="13.1950%" y="415.50"></text></g><g><title>kernel::model::entity::Entity::from_str (1 samples, 0.08%)</title><rect x="12.9450%" y="389" width="0.0809%" height="15" fill="rgb(222,75,50)" fg:x="160" fg:w="1"/><text x="13.1950%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.9450%" y="373" width="0.0809%" height="15" fill="rgb(205,180,2)" fg:x="160" fg:w="1"/><text x="13.1950%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.9450%" y="357" width="0.0809%" height="15" fill="rgb(216,34,7)" fg:x="160" fg:w="1"/><text x="13.1950%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="12.9450%" y="341" width="0.0809%" height="15" fill="rgb(253,16,32)" fg:x="160" fg:w="1"/><text x="13.1950%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.9450%" y="325" width="0.0809%" height="15" fill="rgb(208,97,28)" fg:x="160" fg:w="1"/><text x="13.1950%" y="335.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.9450%" y="309" width="0.0809%" height="15" fill="rgb(225,92,11)" fg:x="160" fg:w="1"/><text x="13.1950%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.9450%" y="293" width="0.0809%" height="15" fill="rgb(243,38,12)" fg:x="160" fg:w="1"/><text x="13.1950%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.9450%" y="277" width="0.0809%" height="15" fill="rgb(208,139,16)" fg:x="160" fg:w="1"/><text x="13.1950%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="12.9450%" y="261" width="0.0809%" height="15" fill="rgb(227,24,9)" fg:x="160" fg:w="1"/><text x="13.1950%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.9450%" y="245" width="0.0809%" height="15" fill="rgb(206,62,11)" fg:x="160" fg:w="1"/><text x="13.1950%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.9450%" y="229" width="0.0809%" height="15" fill="rgb(228,134,27)" fg:x="160" fg:w="1"/><text x="13.1950%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="12.9450%" y="213" width="0.0809%" height="15" fill="rgb(205,55,33)" fg:x="160" fg:w="1"/><text x="13.1950%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.9450%" y="197" width="0.0809%" height="15" fill="rgb(243,75,43)" fg:x="160" fg:w="1"/><text x="13.1950%" y="207.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="12.9450%" y="181" width="0.0809%" height="15" fill="rgb(223,27,42)" fg:x="160" fg:w="1"/><text x="13.1950%" y="191.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="12.7832%" y="501" width="0.3236%" height="15" fill="rgb(232,189,33)" fg:x="158" fg:w="4"/><text x="13.0332%" y="511.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (3 samples, 0.24%)</title><rect x="12.8641%" y="485" width="0.2427%" height="15" fill="rgb(210,9,39)" fg:x="159" fg:w="3"/><text x="13.1141%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (3 samples, 0.24%)</title><rect x="12.8641%" y="469" width="0.2427%" height="15" fill="rgb(242,85,26)" fg:x="159" fg:w="3"/><text x="13.1141%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="12.8641%" y="453" width="0.2427%" height="15" fill="rgb(248,44,4)" fg:x="159" fg:w="3"/><text x="13.1141%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.0259%" y="437" width="0.0809%" height="15" fill="rgb(250,96,46)" fg:x="161" fg:w="1"/><text x="13.2759%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.0259%" y="421" width="0.0809%" height="15" fill="rgb(229,116,26)" fg:x="161" fg:w="1"/><text x="13.2759%" y="431.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="13.0259%" y="405" width="0.0809%" height="15" fill="rgb(246,94,34)" fg:x="161" fg:w="1"/><text x="13.2759%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;plugins_core::carrying::model::Containing&gt;&gt; (1 samples, 0.08%)</title><rect x="13.1068%" y="501" width="0.0809%" height="15" fill="rgb(251,73,21)" fg:x="162" fg:w="1"/><text x="13.3568%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="13.1068%" y="485" width="0.0809%" height="15" fill="rgb(254,121,25)" fg:x="162" fg:w="1"/><text x="13.3568%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.1068%" y="469" width="0.0809%" height="15" fill="rgb(215,161,49)" fg:x="162" fg:w="1"/><text x="13.3568%" y="479.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.2686%" y="469" width="0.0809%" height="15" fill="rgb(221,43,13)" fg:x="164" fg:w="1"/><text x="13.5186%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.2686%" y="453" width="0.0809%" height="15" fill="rgb(249,5,37)" fg:x="164" fg:w="1"/><text x="13.5186%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.2686%" y="437" width="0.0809%" height="15" fill="rgb(226,25,44)" fg:x="164" fg:w="1"/><text x="13.5186%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.3495%" y="437" width="0.0809%" height="15" fill="rgb(238,189,16)" fg:x="165" fg:w="1"/><text x="13.5995%" y="447.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (11 samples, 0.89%)</title><rect x="12.6214%" y="517" width="0.8900%" height="15" fill="rgb(251,186,8)" fg:x="156" fg:w="11"/><text x="12.8714%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::scope (4 samples, 0.32%)</title><rect x="13.1877%" y="501" width="0.3236%" height="15" fill="rgb(254,34,31)" fg:x="163" fg:w="4"/><text x="13.4377%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="13.1877%" y="485" width="0.3236%" height="15" fill="rgb(225,215,27)" fg:x="163" fg:w="4"/><text x="13.4377%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="13.3495%" y="469" width="0.1618%" height="15" fill="rgb(221,192,48)" fg:x="165" fg:w="2"/><text x="13.5995%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="13.3495%" y="453" width="0.1618%" height="15" fill="rgb(219,137,20)" fg:x="165" fg:w="2"/><text x="13.5995%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.4304%" y="437" width="0.0809%" height="15" fill="rgb(219,84,11)" fg:x="166" fg:w="1"/><text x="13.6804%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.6731%" y="437" width="0.0809%" height="15" fill="rgb(224,10,23)" fg:x="169" fg:w="1"/><text x="13.9231%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.6731%" y="421" width="0.0809%" height="15" fill="rgb(248,22,39)" fg:x="169" fg:w="1"/><text x="13.9231%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.6731%" y="405" width="0.0809%" height="15" fill="rgb(212,154,20)" fg:x="169" fg:w="1"/><text x="13.9231%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.6731%" y="389" width="0.0809%" height="15" fill="rgb(236,199,50)" fg:x="169" fg:w="1"/><text x="13.9231%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.6731%" y="373" width="0.0809%" height="15" fill="rgb(211,9,17)" fg:x="169" fg:w="1"/><text x="13.9231%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.6731%" y="357" width="0.0809%" height="15" fill="rgb(243,216,36)" fg:x="169" fg:w="1"/><text x="13.9231%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.6731%" y="341" width="0.0809%" height="15" fill="rgb(250,2,10)" fg:x="169" fg:w="1"/><text x="13.9231%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.6731%" y="325" width="0.0809%" height="15" fill="rgb(226,50,48)" fg:x="169" fg:w="1"/><text x="13.9231%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.6731%" y="309" width="0.0809%" height="15" fill="rgb(243,81,16)" fg:x="169" fg:w="1"/><text x="13.9231%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.6731%" y="293" width="0.0809%" height="15" fill="rgb(250,14,2)" fg:x="169" fg:w="1"/><text x="13.9231%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.6731%" y="277" width="0.0809%" height="15" fill="rgb(233,135,29)" fg:x="169" fg:w="1"/><text x="13.9231%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.6731%" y="261" width="0.0809%" height="15" fill="rgb(224,64,43)" fg:x="169" fg:w="1"/><text x="13.9231%" y="271.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="13.6731%" y="469" width="0.1618%" height="15" fill="rgb(238,84,13)" fg:x="169" fg:w="2"/><text x="13.9231%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.6731%" y="453" width="0.1618%" height="15" fill="rgb(253,48,26)" fg:x="169" fg:w="2"/><text x="13.9231%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.7540%" y="437" width="0.0809%" height="15" fill="rgb(205,223,31)" fg:x="170" fg:w="1"/><text x="14.0040%" y="447.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="13.8350%" y="373" width="0.0809%" height="15" fill="rgb(221,41,32)" fg:x="171" fg:w="1"/><text x="14.0850%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.8350%" y="357" width="0.0809%" height="15" fill="rgb(213,158,31)" fg:x="171" fg:w="1"/><text x="14.0850%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.8350%" y="341" width="0.0809%" height="15" fill="rgb(245,126,43)" fg:x="171" fg:w="1"/><text x="14.0850%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.8350%" y="325" width="0.0809%" height="15" fill="rgb(227,7,22)" fg:x="171" fg:w="1"/><text x="14.0850%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.8350%" y="309" width="0.0809%" height="15" fill="rgb(252,90,44)" fg:x="171" fg:w="1"/><text x="14.0850%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.8350%" y="293" width="0.0809%" height="15" fill="rgb(253,91,0)" fg:x="171" fg:w="1"/><text x="14.0850%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.8350%" y="277" width="0.0809%" height="15" fill="rgb(252,175,49)" fg:x="171" fg:w="1"/><text x="14.0850%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.8350%" y="261" width="0.0809%" height="15" fill="rgb(246,150,1)" fg:x="171" fg:w="1"/><text x="14.0850%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.8350%" y="245" width="0.0809%" height="15" fill="rgb(241,192,25)" fg:x="171" fg:w="1"/><text x="14.0850%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.8350%" y="229" width="0.0809%" height="15" fill="rgb(239,187,11)" fg:x="171" fg:w="1"/><text x="14.0850%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.8350%" y="213" width="0.0809%" height="15" fill="rgb(218,202,51)" fg:x="171" fg:w="1"/><text x="14.0850%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.8350%" y="197" width="0.0809%" height="15" fill="rgb(225,176,8)" fg:x="171" fg:w="1"/><text x="14.0850%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.8350%" y="181" width="0.0809%" height="15" fill="rgb(219,122,41)" fg:x="171" fg:w="1"/><text x="14.0850%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="13.9159%" y="309" width="0.0809%" height="15" fill="rgb(248,140,20)" fg:x="172" fg:w="1"/><text x="14.1659%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.9968%" y="277" width="0.0809%" height="15" fill="rgb(245,41,37)" fg:x="173" fg:w="1"/><text x="14.2468%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.9968%" y="261" width="0.0809%" height="15" fill="rgb(235,82,39)" fg:x="173" fg:w="1"/><text x="14.2468%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.9968%" y="245" width="0.0809%" height="15" fill="rgb(230,108,42)" fg:x="173" fg:w="1"/><text x="14.2468%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.9968%" y="229" width="0.0809%" height="15" fill="rgb(215,150,50)" fg:x="173" fg:w="1"/><text x="14.2468%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.9968%" y="213" width="0.0809%" height="15" fill="rgb(233,212,5)" fg:x="173" fg:w="1"/><text x="14.2468%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.9968%" y="197" width="0.0809%" height="15" fill="rgb(245,80,22)" fg:x="173" fg:w="1"/><text x="14.2468%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.9968%" y="181" width="0.0809%" height="15" fill="rgb(238,129,16)" fg:x="173" fg:w="1"/><text x="14.2468%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.9968%" y="165" width="0.0809%" height="15" fill="rgb(240,19,0)" fg:x="173" fg:w="1"/><text x="14.2468%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.9968%" y="149" width="0.0809%" height="15" fill="rgb(232,42,35)" fg:x="173" fg:w="1"/><text x="14.2468%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.9968%" y="133" width="0.0809%" height="15" fill="rgb(223,130,24)" fg:x="173" fg:w="1"/><text x="14.2468%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.9968%" y="117" width="0.0809%" height="15" fill="rgb(237,16,22)" fg:x="173" fg:w="1"/><text x="14.2468%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.9968%" y="101" width="0.0809%" height="15" fill="rgb(248,192,20)" fg:x="173" fg:w="1"/><text x="14.2468%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.9968%" y="85" width="0.0809%" height="15" fill="rgb(233,167,2)" fg:x="173" fg:w="1"/><text x="14.2468%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.9968%" y="69" width="0.0809%" height="15" fill="rgb(252,71,44)" fg:x="173" fg:w="1"/><text x="14.2468%" y="79.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.9968%" y="53" width="0.0809%" height="15" fill="rgb(238,37,47)" fg:x="173" fg:w="1"/><text x="14.2468%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.9968%" y="37" width="0.0809%" height="15" fill="rgb(214,202,54)" fg:x="173" fg:w="1"/><text x="14.2468%" y="47.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="13.9159%" y="325" width="0.2427%" height="15" fill="rgb(254,165,40)" fg:x="172" fg:w="3"/><text x="14.1659%" y="335.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="13.9968%" y="309" width="0.1618%" height="15" fill="rgb(246,173,38)" fg:x="173" fg:w="2"/><text x="14.2468%" y="319.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="13.9968%" y="293" width="0.1618%" height="15" fill="rgb(215,3,27)" fg:x="173" fg:w="2"/><text x="14.2468%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.0777%" y="277" width="0.0809%" height="15" fill="rgb(239,169,51)" fg:x="174" fg:w="1"/><text x="14.3277%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.0777%" y="261" width="0.0809%" height="15" fill="rgb(212,5,25)" fg:x="174" fg:w="1"/><text x="14.3277%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.0777%" y="245" width="0.0809%" height="15" fill="rgb(243,45,17)" fg:x="174" fg:w="1"/><text x="14.3277%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.0777%" y="229" width="0.0809%" height="15" fill="rgb(242,97,9)" fg:x="174" fg:w="1"/><text x="14.3277%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="14.0777%" y="213" width="0.0809%" height="15" fill="rgb(228,71,31)" fg:x="174" fg:w="1"/><text x="14.3277%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.0777%" y="197" width="0.0809%" height="15" fill="rgb(252,184,16)" fg:x="174" fg:w="1"/><text x="14.3277%" y="207.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="14.1586%" y="309" width="0.0809%" height="15" fill="rgb(236,169,46)" fg:x="175" fg:w="1"/><text x="14.4086%" y="319.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (5 samples, 0.40%)</title><rect x="13.9159%" y="357" width="0.4045%" height="15" fill="rgb(207,17,47)" fg:x="172" fg:w="5"/><text x="14.1659%" y="367.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (5 samples, 0.40%)</title><rect x="13.9159%" y="341" width="0.4045%" height="15" fill="rgb(206,201,28)" fg:x="172" fg:w="5"/><text x="14.1659%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="14.1586%" y="325" width="0.1618%" height="15" fill="rgb(224,184,23)" fg:x="175" fg:w="2"/><text x="14.4086%" y="335.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="14.2395%" y="309" width="0.0809%" height="15" fill="rgb(208,139,48)" fg:x="176" fg:w="1"/><text x="14.4895%" y="319.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="14.2395%" y="293" width="0.0809%" height="15" fill="rgb(208,130,10)" fg:x="176" fg:w="1"/><text x="14.4895%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.2395%" y="277" width="0.0809%" height="15" fill="rgb(211,213,45)" fg:x="176" fg:w="1"/><text x="14.4895%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.2395%" y="261" width="0.0809%" height="15" fill="rgb(235,100,30)" fg:x="176" fg:w="1"/><text x="14.4895%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.2395%" y="245" width="0.0809%" height="15" fill="rgb(206,144,31)" fg:x="176" fg:w="1"/><text x="14.4895%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.2395%" y="229" width="0.0809%" height="15" fill="rgb(224,200,26)" fg:x="176" fg:w="1"/><text x="14.4895%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="14.2395%" y="213" width="0.0809%" height="15" fill="rgb(247,104,53)" fg:x="176" fg:w="1"/><text x="14.4895%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.2395%" y="197" width="0.0809%" height="15" fill="rgb(220,14,17)" fg:x="176" fg:w="1"/><text x="14.4895%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="14.2395%" y="181" width="0.0809%" height="15" fill="rgb(230,140,40)" fg:x="176" fg:w="1"/><text x="14.4895%" y="191.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.2395%" y="165" width="0.0809%" height="15" fill="rgb(229,2,41)" fg:x="176" fg:w="1"/><text x="14.4895%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.2395%" y="149" width="0.0809%" height="15" fill="rgb(232,89,16)" fg:x="176" fg:w="1"/><text x="14.4895%" y="159.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="14.3204%" y="341" width="0.0809%" height="15" fill="rgb(247,59,52)" fg:x="177" fg:w="1"/><text x="14.5704%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="14.3204%" y="357" width="0.1618%" height="15" fill="rgb(226,110,21)" fg:x="177" fg:w="2"/><text x="14.5704%" y="367.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="14.4013%" y="341" width="0.0809%" height="15" fill="rgb(224,176,43)" fg:x="178" fg:w="1"/><text x="14.6513%" y="351.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="14.4013%" y="325" width="0.0809%" height="15" fill="rgb(221,73,6)" fg:x="178" fg:w="1"/><text x="14.6513%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.4013%" y="309" width="0.0809%" height="15" fill="rgb(232,78,19)" fg:x="178" fg:w="1"/><text x="14.6513%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.4013%" y="293" width="0.0809%" height="15" fill="rgb(233,112,48)" fg:x="178" fg:w="1"/><text x="14.6513%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.4013%" y="277" width="0.0809%" height="15" fill="rgb(243,131,47)" fg:x="178" fg:w="1"/><text x="14.6513%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.4013%" y="261" width="0.0809%" height="15" fill="rgb(226,51,1)" fg:x="178" fg:w="1"/><text x="14.6513%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="14.4013%" y="245" width="0.0809%" height="15" fill="rgb(247,58,7)" fg:x="178" fg:w="1"/><text x="14.6513%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.4013%" y="229" width="0.0809%" height="15" fill="rgb(209,7,32)" fg:x="178" fg:w="1"/><text x="14.6513%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.4013%" y="213" width="0.0809%" height="15" fill="rgb(209,39,41)" fg:x="178" fg:w="1"/><text x="14.6513%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.4013%" y="197" width="0.0809%" height="15" fill="rgb(226,182,46)" fg:x="178" fg:w="1"/><text x="14.6513%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.4013%" y="181" width="0.0809%" height="15" fill="rgb(230,219,10)" fg:x="178" fg:w="1"/><text x="14.6513%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.4822%" y="309" width="0.0809%" height="15" fill="rgb(227,175,30)" fg:x="179" fg:w="1"/><text x="14.7322%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="14.5631%" y="261" width="0.0809%" height="15" fill="rgb(217,2,50)" fg:x="180" fg:w="1"/><text x="14.8131%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="14.5631%" y="245" width="0.0809%" height="15" fill="rgb(229,160,0)" fg:x="180" fg:w="1"/><text x="14.8131%" y="255.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (11 samples, 0.89%)</title><rect x="13.8350%" y="469" width="0.8900%" height="15" fill="rgb(207,78,37)" fg:x="171" fg:w="11"/><text x="14.0850%" y="479.50"></text></g><g><title>core::iter::adapters::try_process (11 samples, 0.89%)</title><rect x="13.8350%" y="453" width="0.8900%" height="15" fill="rgb(225,57,0)" fg:x="171" fg:w="11"/><text x="14.0850%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (11 samples, 0.89%)</title><rect x="13.8350%" y="437" width="0.8900%" height="15" fill="rgb(232,154,2)" fg:x="171" fg:w="11"/><text x="14.0850%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (11 samples, 0.89%)</title><rect x="13.8350%" y="421" width="0.8900%" height="15" fill="rgb(241,212,25)" fg:x="171" fg:w="11"/><text x="14.0850%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (11 samples, 0.89%)</title><rect x="13.8350%" y="405" width="0.8900%" height="15" fill="rgb(226,69,20)" fg:x="171" fg:w="11"/><text x="14.0850%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (11 samples, 0.89%)</title><rect x="13.8350%" y="389" width="0.8900%" height="15" fill="rgb(247,184,54)" fg:x="171" fg:w="11"/><text x="14.0850%" y="399.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (10 samples, 0.81%)</title><rect x="13.9159%" y="373" width="0.8091%" height="15" fill="rgb(210,145,0)" fg:x="172" fg:w="10"/><text x="14.1659%" y="383.50"></text></g><g><title>kernel::model::entity::Entity::from_str (3 samples, 0.24%)</title><rect x="14.4822%" y="357" width="0.2427%" height="15" fill="rgb(253,82,12)" fg:x="179" fg:w="3"/><text x="14.7322%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="14.4822%" y="341" width="0.2427%" height="15" fill="rgb(245,42,11)" fg:x="179" fg:w="3"/><text x="14.7322%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="14.4822%" y="325" width="0.2427%" height="15" fill="rgb(219,147,32)" fg:x="179" fg:w="3"/><text x="14.7322%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="14.5631%" y="309" width="0.1618%" height="15" fill="rgb(246,12,7)" fg:x="180" fg:w="2"/><text x="14.8131%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.5631%" y="293" width="0.1618%" height="15" fill="rgb(243,50,9)" fg:x="180" fg:w="2"/><text x="14.8131%" y="303.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="14.5631%" y="277" width="0.1618%" height="15" fill="rgb(219,149,6)" fg:x="180" fg:w="2"/><text x="14.8131%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.6440%" y="261" width="0.0809%" height="15" fill="rgb(241,51,42)" fg:x="181" fg:w="1"/><text x="14.8940%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="14.8058%" y="437" width="0.0809%" height="15" fill="rgb(226,128,27)" fg:x="183" fg:w="1"/><text x="15.0558%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.8058%" y="421" width="0.0809%" height="15" fill="rgb(244,144,4)" fg:x="183" fg:w="1"/><text x="15.0558%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="14.8867%" y="357" width="0.0809%" height="15" fill="rgb(221,4,13)" fg:x="184" fg:w="1"/><text x="15.1367%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.8867%" y="341" width="0.0809%" height="15" fill="rgb(208,170,28)" fg:x="184" fg:w="1"/><text x="15.1367%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (30 samples, 2.43%)</title><rect x="12.6214%" y="549" width="2.4272%" height="15" fill="rgb(226,131,13)" fg:x="156" fg:w="30"/><text x="12.8714%" y="559.50">&lt;a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (30 samples, 2.43%)</title><rect x="12.6214%" y="533" width="2.4272%" height="15" fill="rgb(215,72,41)" fg:x="156" fg:w="30"/><text x="12.8714%" y="543.50">&lt;c..</text></g><g><title>plugins_core::tools::get_contained_keys (19 samples, 1.54%)</title><rect x="13.5113%" y="517" width="1.5372%" height="15" fill="rgb(243,108,20)" fg:x="167" fg:w="19"/><text x="13.7613%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::scope (19 samples, 1.54%)</title><rect x="13.5113%" y="501" width="1.5372%" height="15" fill="rgb(230,189,17)" fg:x="167" fg:w="19"/><text x="13.7613%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (19 samples, 1.54%)</title><rect x="13.5113%" y="485" width="1.5372%" height="15" fill="rgb(220,50,17)" fg:x="167" fg:w="19"/><text x="13.7613%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="14.7249%" y="469" width="0.3236%" height="15" fill="rgb(248,152,48)" fg:x="182" fg:w="4"/><text x="14.9749%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="14.7249%" y="453" width="0.3236%" height="15" fill="rgb(244,91,11)" fg:x="182" fg:w="4"/><text x="14.9749%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="14.8867%" y="437" width="0.1618%" height="15" fill="rgb(220,157,5)" fg:x="184" fg:w="2"/><text x="15.1367%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="14.8867%" y="421" width="0.1618%" height="15" fill="rgb(253,137,8)" fg:x="184" fg:w="2"/><text x="15.1367%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="14.8867%" y="405" width="0.1618%" height="15" fill="rgb(217,137,51)" fg:x="184" fg:w="2"/><text x="15.1367%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="14.8867%" y="389" width="0.1618%" height="15" fill="rgb(218,209,53)" fg:x="184" fg:w="2"/><text x="15.1367%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.8867%" y="373" width="0.1618%" height="15" fill="rgb(249,137,25)" fg:x="184" fg:w="2"/><text x="15.1367%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.9676%" y="357" width="0.0809%" height="15" fill="rgb(239,155,26)" fg:x="185" fg:w="1"/><text x="15.2176%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="15.0485%" y="485" width="0.0809%" height="15" fill="rgb(227,85,46)" fg:x="186" fg:w="1"/><text x="15.2985%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.0485%" y="469" width="0.0809%" height="15" fill="rgb(251,107,43)" fg:x="186" fg:w="1"/><text x="15.2985%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.0485%" y="453" width="0.0809%" height="15" fill="rgb(234,170,33)" fg:x="186" fg:w="1"/><text x="15.2985%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="15.0485%" y="437" width="0.0809%" height="15" fill="rgb(206,29,35)" fg:x="186" fg:w="1"/><text x="15.2985%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="15.0485%" y="421" width="0.0809%" height="15" fill="rgb(227,138,25)" fg:x="186" fg:w="1"/><text x="15.2985%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="15.0485%" y="405" width="0.0809%" height="15" fill="rgb(249,131,35)" fg:x="186" fg:w="1"/><text x="15.2985%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.0485%" y="389" width="0.0809%" height="15" fill="rgb(239,6,40)" fg:x="186" fg:w="1"/><text x="15.2985%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.0485%" y="373" width="0.0809%" height="15" fill="rgb(246,136,47)" fg:x="186" fg:w="1"/><text x="15.2985%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="15.0485%" y="357" width="0.0809%" height="15" fill="rgb(253,58,26)" fg:x="186" fg:w="1"/><text x="15.2985%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="15.0485%" y="341" width="0.0809%" height="15" fill="rgb(237,141,10)" fg:x="186" fg:w="1"/><text x="15.2985%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="15.0485%" y="325" width="0.0809%" height="15" fill="rgb(234,156,12)" fg:x="186" fg:w="1"/><text x="15.2985%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="15.0485%" y="309" width="0.0809%" height="15" fill="rgb(243,224,36)" fg:x="186" fg:w="1"/><text x="15.2985%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.0485%" y="293" width="0.0809%" height="15" fill="rgb(205,229,51)" fg:x="186" fg:w="1"/><text x="15.2985%" y="303.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="15.0485%" y="501" width="0.1618%" height="15" fill="rgb(223,189,4)" fg:x="186" fg:w="2"/><text x="15.2985%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="15.1294%" y="485" width="0.0809%" height="15" fill="rgb(249,167,54)" fg:x="187" fg:w="1"/><text x="15.3794%" y="495.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="15.1294%" y="469" width="0.0809%" height="15" fill="rgb(218,34,28)" fg:x="187" fg:w="1"/><text x="15.3794%" y="479.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="15.1294%" y="453" width="0.0809%" height="15" fill="rgb(232,109,42)" fg:x="187" fg:w="1"/><text x="15.3794%" y="463.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="15.1294%" y="437" width="0.0809%" height="15" fill="rgb(248,214,46)" fg:x="187" fg:w="1"/><text x="15.3794%" y="447.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="15.1294%" y="421" width="0.0809%" height="15" fill="rgb(244,216,40)" fg:x="187" fg:w="1"/><text x="15.3794%" y="431.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="15.1294%" y="405" width="0.0809%" height="15" fill="rgb(231,226,31)" fg:x="187" fg:w="1"/><text x="15.3794%" y="415.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="15.1294%" y="389" width="0.0809%" height="15" fill="rgb(238,38,43)" fg:x="187" fg:w="1"/><text x="15.3794%" y="399.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="15.1294%" y="373" width="0.0809%" height="15" fill="rgb(208,88,43)" fg:x="187" fg:w="1"/><text x="15.3794%" y="383.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="15.1294%" y="357" width="0.0809%" height="15" fill="rgb(205,136,37)" fg:x="187" fg:w="1"/><text x="15.3794%" y="367.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="15.5340%" y="197" width="0.0809%" height="15" fill="rgb(237,34,14)" fg:x="192" fg:w="1"/><text x="15.7840%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="15.5340%" y="181" width="0.0809%" height="15" fill="rgb(236,193,44)" fg:x="192" fg:w="1"/><text x="15.7840%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="15.5340%" y="165" width="0.0809%" height="15" fill="rgb(231,48,10)" fg:x="192" fg:w="1"/><text x="15.7840%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.5340%" y="149" width="0.0809%" height="15" fill="rgb(213,141,34)" fg:x="192" fg:w="1"/><text x="15.7840%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="15.5340%" y="133" width="0.0809%" height="15" fill="rgb(249,130,34)" fg:x="192" fg:w="1"/><text x="15.7840%" y="143.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.6149%" y="197" width="0.0809%" height="15" fill="rgb(219,42,41)" fg:x="193" fg:w="1"/><text x="15.8649%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.32%)</title><rect x="15.5340%" y="213" width="0.3236%" height="15" fill="rgb(224,100,54)" fg:x="192" fg:w="4"/><text x="15.7840%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="15.6958%" y="197" width="0.1618%" height="15" fill="rgb(229,200,27)" fg:x="194" fg:w="2"/><text x="15.9458%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="15.7767%" y="181" width="0.0809%" height="15" fill="rgb(217,118,10)" fg:x="195" fg:w="1"/><text x="16.0267%" y="191.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (8 samples, 0.65%)</title><rect x="15.4531%" y="293" width="0.6472%" height="15" fill="rgb(206,22,3)" fg:x="191" fg:w="8"/><text x="15.7031%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (8 samples, 0.65%)</title><rect x="15.4531%" y="277" width="0.6472%" height="15" fill="rgb(232,163,46)" fg:x="191" fg:w="8"/><text x="15.7031%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.65%)</title><rect x="15.4531%" y="261" width="0.6472%" height="15" fill="rgb(206,95,13)" fg:x="191" fg:w="8"/><text x="15.7031%" y="271.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (7 samples, 0.57%)</title><rect x="15.5340%" y="245" width="0.5663%" height="15" fill="rgb(253,154,18)" fg:x="192" fg:w="7"/><text x="15.7840%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (7 samples, 0.57%)</title><rect x="15.5340%" y="229" width="0.5663%" height="15" fill="rgb(219,32,23)" fg:x="192" fg:w="7"/><text x="15.7840%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.24%)</title><rect x="15.8576%" y="213" width="0.2427%" height="15" fill="rgb(230,191,45)" fg:x="196" fg:w="3"/><text x="16.1076%" y="223.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="15.9385%" y="197" width="0.1618%" height="15" fill="rgb(229,64,36)" fg:x="197" fg:w="2"/><text x="16.1885%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.73%)</title><rect x="15.4531%" y="309" width="0.7282%" height="15" fill="rgb(205,129,25)" fg:x="191" fg:w="9"/><text x="15.7031%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.1003%" y="293" width="0.0809%" height="15" fill="rgb(254,112,7)" fg:x="199" fg:w="1"/><text x="16.3503%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="16.1003%" y="277" width="0.0809%" height="15" fill="rgb(226,53,48)" fg:x="199" fg:w="1"/><text x="16.3503%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (10 samples, 0.81%)</title><rect x="15.4531%" y="325" width="0.8091%" height="15" fill="rgb(214,153,38)" fg:x="191" fg:w="10"/><text x="15.7031%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="16.1812%" y="309" width="0.0809%" height="15" fill="rgb(243,101,7)" fg:x="200" fg:w="1"/><text x="16.4312%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.1812%" y="293" width="0.0809%" height="15" fill="rgb(240,140,22)" fg:x="200" fg:w="1"/><text x="16.4312%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="16.2621%" y="309" width="0.0809%" height="15" fill="rgb(235,114,2)" fg:x="201" fg:w="1"/><text x="16.5121%" y="319.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="16.2621%" y="293" width="0.0809%" height="15" fill="rgb(242,59,12)" fg:x="201" fg:w="1"/><text x="16.5121%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="16.2621%" y="277" width="0.0809%" height="15" fill="rgb(252,134,9)" fg:x="201" fg:w="1"/><text x="16.5121%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="16.2621%" y="261" width="0.0809%" height="15" fill="rgb(236,4,44)" fg:x="201" fg:w="1"/><text x="16.5121%" y="271.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (13 samples, 1.05%)</title><rect x="15.3722%" y="341" width="1.0518%" height="15" fill="rgb(254,172,41)" fg:x="190" fg:w="13"/><text x="15.6222%" y="351.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="16.2621%" y="325" width="0.1618%" height="15" fill="rgb(244,63,20)" fg:x="201" fg:w="2"/><text x="16.5121%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.3430%" y="309" width="0.0809%" height="15" fill="rgb(250,73,31)" fg:x="202" fg:w="1"/><text x="16.5930%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (14 samples, 1.13%)</title><rect x="15.3722%" y="357" width="1.1327%" height="15" fill="rgb(241,38,36)" fg:x="190" fg:w="14"/><text x="15.6222%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.4239%" y="341" width="0.0809%" height="15" fill="rgb(245,211,2)" fg:x="203" fg:w="1"/><text x="16.6739%" y="351.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (16 samples, 1.29%)</title><rect x="15.2913%" y="389" width="1.2945%" height="15" fill="rgb(206,120,28)" fg:x="189" fg:w="16"/><text x="15.5413%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (16 samples, 1.29%)</title><rect x="15.2913%" y="373" width="1.2945%" height="15" fill="rgb(211,59,34)" fg:x="189" fg:w="16"/><text x="15.5413%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="16.5049%" y="357" width="0.0809%" height="15" fill="rgb(233,168,5)" fg:x="204" fg:w="1"/><text x="16.7549%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.5049%" y="341" width="0.0809%" height="15" fill="rgb(234,33,13)" fg:x="204" fg:w="1"/><text x="16.7549%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (17 samples, 1.38%)</title><rect x="15.2913%" y="405" width="1.3754%" height="15" fill="rgb(231,150,26)" fg:x="189" fg:w="17"/><text x="15.5413%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.5858%" y="389" width="0.0809%" height="15" fill="rgb(217,191,4)" fg:x="205" fg:w="1"/><text x="16.8358%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="16.5858%" y="373" width="0.0809%" height="15" fill="rgb(246,198,38)" fg:x="205" fg:w="1"/><text x="16.8358%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="16.5858%" y="357" width="0.0809%" height="15" fill="rgb(245,64,37)" fg:x="205" fg:w="1"/><text x="16.8358%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (19 samples, 1.54%)</title><rect x="15.2104%" y="453" width="1.5372%" height="15" fill="rgb(250,30,36)" fg:x="188" fg:w="19"/><text x="15.4604%" y="463.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (19 samples, 1.54%)</title><rect x="15.2104%" y="437" width="1.5372%" height="15" fill="rgb(217,86,53)" fg:x="188" fg:w="19"/><text x="15.4604%" y="447.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (19 samples, 1.54%)</title><rect x="15.2104%" y="421" width="1.5372%" height="15" fill="rgb(228,157,16)" fg:x="188" fg:w="19"/><text x="15.4604%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="16.6667%" y="405" width="0.0809%" height="15" fill="rgb(217,59,31)" fg:x="206" fg:w="1"/><text x="16.9167%" y="415.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (20 samples, 1.62%)</title><rect x="15.2104%" y="485" width="1.6181%" height="15" fill="rgb(237,138,41)" fg:x="188" fg:w="20"/><text x="15.4604%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (20 samples, 1.62%)</title><rect x="15.2104%" y="469" width="1.6181%" height="15" fill="rgb(227,91,49)" fg:x="188" fg:w="20"/><text x="15.4604%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="16.7476%" y="453" width="0.0809%" height="15" fill="rgb(247,21,44)" fg:x="207" fg:w="1"/><text x="16.9976%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.7476%" y="437" width="0.0809%" height="15" fill="rgb(219,210,51)" fg:x="207" fg:w="1"/><text x="16.9976%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.9094%" y="437" width="0.0809%" height="15" fill="rgb(209,140,6)" fg:x="209" fg:w="1"/><text x="17.1594%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.9903%" y="437" width="0.0809%" height="15" fill="rgb(221,188,24)" fg:x="210" fg:w="1"/><text x="17.2403%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.9903%" y="421" width="0.0809%" height="15" fill="rgb(232,154,20)" fg:x="210" fg:w="1"/><text x="17.2403%" y="431.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="16.9903%" y="405" width="0.0809%" height="15" fill="rgb(244,137,50)" fg:x="210" fg:w="1"/><text x="17.2403%" y="415.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="17.0712%" y="437" width="0.0809%" height="15" fill="rgb(225,185,43)" fg:x="211" fg:w="1"/><text x="17.3212%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.0712%" y="421" width="0.0809%" height="15" fill="rgb(213,205,38)" fg:x="211" fg:w="1"/><text x="17.3212%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.0712%" y="405" width="0.0809%" height="15" fill="rgb(236,73,12)" fg:x="211" fg:w="1"/><text x="17.3212%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.2330%" y="357" width="0.0809%" height="15" fill="rgb(235,219,13)" fg:x="213" fg:w="1"/><text x="17.4830%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="17.2330%" y="389" width="0.1618%" height="15" fill="rgb(218,59,36)" fg:x="213" fg:w="2"/><text x="17.4830%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="17.2330%" y="373" width="0.1618%" height="15" fill="rgb(205,110,39)" fg:x="213" fg:w="2"/><text x="17.4830%" y="383.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="17.3139%" y="357" width="0.0809%" height="15" fill="rgb(218,206,42)" fg:x="214" fg:w="1"/><text x="17.5639%" y="367.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="17.3139%" y="341" width="0.0809%" height="15" fill="rgb(248,125,24)" fg:x="214" fg:w="1"/><text x="17.5639%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="17.3948%" y="373" width="0.0809%" height="15" fill="rgb(242,28,27)" fg:x="215" fg:w="1"/><text x="17.6448%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.3948%" y="357" width="0.0809%" height="15" fill="rgb(216,228,15)" fg:x="215" fg:w="1"/><text x="17.6448%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="17.4757%" y="357" width="0.0809%" height="15" fill="rgb(235,116,46)" fg:x="216" fg:w="1"/><text x="17.7257%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.4757%" y="341" width="0.0809%" height="15" fill="rgb(224,18,32)" fg:x="216" fg:w="1"/><text x="17.7257%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.4757%" y="325" width="0.0809%" height="15" fill="rgb(252,5,12)" fg:x="216" fg:w="1"/><text x="17.7257%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.4757%" y="309" width="0.0809%" height="15" fill="rgb(251,36,5)" fg:x="216" fg:w="1"/><text x="17.7257%" y="319.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="17.3948%" y="389" width="0.2427%" height="15" fill="rgb(217,53,14)" fg:x="215" fg:w="3"/><text x="17.6448%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="17.4757%" y="373" width="0.1618%" height="15" fill="rgb(215,86,45)" fg:x="216" fg:w="2"/><text x="17.7257%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.5566%" y="357" width="0.0809%" height="15" fill="rgb(242,169,11)" fg:x="217" fg:w="1"/><text x="17.8066%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.9612%" y="357" width="0.0809%" height="15" fill="rgb(211,213,45)" fg:x="222" fg:w="1"/><text x="18.2112%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.9612%" y="341" width="0.0809%" height="15" fill="rgb(205,88,11)" fg:x="222" fg:w="1"/><text x="18.2112%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.9612%" y="325" width="0.0809%" height="15" fill="rgb(252,69,26)" fg:x="222" fg:w="1"/><text x="18.2112%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.0421%" y="325" width="0.0809%" height="15" fill="rgb(246,123,37)" fg:x="223" fg:w="1"/><text x="18.2921%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.0421%" y="309" width="0.0809%" height="15" fill="rgb(212,205,5)" fg:x="223" fg:w="1"/><text x="18.2921%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.0421%" y="293" width="0.0809%" height="15" fill="rgb(253,148,0)" fg:x="223" fg:w="1"/><text x="18.2921%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="18.1230%" y="309" width="0.0809%" height="15" fill="rgb(239,22,4)" fg:x="224" fg:w="1"/><text x="18.3730%" y="319.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="18.1230%" y="293" width="0.0809%" height="15" fill="rgb(226,26,53)" fg:x="224" fg:w="1"/><text x="18.3730%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.1230%" y="277" width="0.0809%" height="15" fill="rgb(225,229,45)" fg:x="224" fg:w="1"/><text x="18.3730%" y="287.50"></text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (73 samples, 5.91%)</title><rect x="12.3786%" y="581" width="5.9061%" height="15" fill="rgb(220,60,37)" fg:x="153" fg:w="73"/><text x="12.6286%" y="591.50">&lt;plugins..</text></g><g><title>core::iter::adapters::try_process (70 samples, 5.66%)</title><rect x="12.6214%" y="565" width="5.6634%" height="15" fill="rgb(217,180,35)" fg:x="156" fg:w="70"/><text x="12.8714%" y="575.50">core::i..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (40 samples, 3.24%)</title><rect x="15.0485%" y="549" width="3.2362%" height="15" fill="rgb(229,7,53)" fg:x="186" fg:w="40"/><text x="15.2985%" y="559.50">all..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (40 samples, 3.24%)</title><rect x="15.0485%" y="533" width="3.2362%" height="15" fill="rgb(254,137,3)" fg:x="186" fg:w="40"/><text x="15.2985%" y="543.50">&lt;co..</text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (40 samples, 3.24%)</title><rect x="15.0485%" y="517" width="3.2362%" height="15" fill="rgb(215,140,41)" fg:x="186" fg:w="40"/><text x="15.2985%" y="527.50">plu..</text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (38 samples, 3.07%)</title><rect x="15.2104%" y="501" width="3.0744%" height="15" fill="rgb(250,80,15)" fg:x="188" fg:w="38"/><text x="15.4604%" y="511.50">&lt;rp..</text></g><g><title>kernel::model::EntityPtr::to_json_value (18 samples, 1.46%)</title><rect x="16.8285%" y="485" width="1.4563%" height="15" fill="rgb(252,191,6)" fg:x="208" fg:w="18"/><text x="17.0785%" y="495.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (17 samples, 1.38%)</title><rect x="16.9094%" y="469" width="1.3754%" height="15" fill="rgb(246,217,18)" fg:x="209" fg:w="17"/><text x="17.1594%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (17 samples, 1.38%)</title><rect x="16.9094%" y="453" width="1.3754%" height="15" fill="rgb(223,93,7)" fg:x="209" fg:w="17"/><text x="17.1594%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_map (14 samples, 1.13%)</title><rect x="17.1521%" y="437" width="1.1327%" height="15" fill="rgb(225,55,52)" fg:x="212" fg:w="14"/><text x="17.4021%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (13 samples, 1.05%)</title><rect x="17.2330%" y="421" width="1.0518%" height="15" fill="rgb(240,31,24)" fg:x="213" fg:w="13"/><text x="17.4830%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (13 samples, 1.05%)</title><rect x="17.2330%" y="405" width="1.0518%" height="15" fill="rgb(205,56,52)" fg:x="213" fg:w="13"/><text x="17.4830%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (8 samples, 0.65%)</title><rect x="17.6375%" y="389" width="0.6472%" height="15" fill="rgb(246,146,12)" fg:x="218" fg:w="8"/><text x="17.8875%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="17.9612%" y="373" width="0.3236%" height="15" fill="rgb(239,84,36)" fg:x="222" fg:w="4"/><text x="18.2112%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="18.0421%" y="357" width="0.2427%" height="15" fill="rgb(207,41,40)" fg:x="223" fg:w="3"/><text x="18.2921%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="18.0421%" y="341" width="0.2427%" height="15" fill="rgb(241,179,25)" fg:x="223" fg:w="3"/><text x="18.2921%" y="351.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="18.1230%" y="325" width="0.1618%" height="15" fill="rgb(210,0,34)" fg:x="224" fg:w="2"/><text x="18.3730%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.2039%" y="309" width="0.0809%" height="15" fill="rgb(225,217,29)" fg:x="225" fg:w="1"/><text x="18.4539%" y="319.50"></text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (83 samples, 6.72%)</title><rect x="11.6505%" y="629" width="6.7152%" height="15" fill="rgb(216,191,38)" fg:x="144" fg:w="83"/><text x="11.9005%" y="639.50">kernel::p..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (83 samples, 6.72%)</title><rect x="11.6505%" y="613" width="6.7152%" height="15" fill="rgb(232,140,52)" fg:x="144" fg:w="83"/><text x="11.9005%" y="623.50">&lt;plugins_..</text></g><g><title>plugins_rpc::querying::have_surroundings (74 samples, 5.99%)</title><rect x="12.3786%" y="597" width="5.9871%" height="15" fill="rgb(223,158,51)" fg:x="153" fg:w="74"/><text x="12.6286%" y="607.50">plugins_..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="18.2848%" y="581" width="0.0809%" height="15" fill="rgb(235,29,51)" fg:x="226" fg:w="1"/><text x="18.5348%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="18.2848%" y="565" width="0.0809%" height="15" fill="rgb(215,181,18)" fg:x="226" fg:w="1"/><text x="18.5348%" y="575.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="18.2848%" y="549" width="0.0809%" height="15" fill="rgb(227,125,34)" fg:x="226" fg:w="1"/><text x="18.5348%" y="559.50"></text></g><g><title>kernel::surround::Surroundings::unpack (1 samples, 0.08%)</title><rect x="18.4466%" y="485" width="0.0809%" height="15" fill="rgb(230,197,49)" fg:x="228" fg:w="1"/><text x="18.6966%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="18.5275%" y="437" width="0.0809%" height="15" fill="rgb(239,141,16)" fg:x="229" fg:w="1"/><text x="18.7775%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.5275%" y="421" width="0.0809%" height="15" fill="rgb(225,105,43)" fg:x="229" fg:w="1"/><text x="18.7775%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="18.6084%" y="389" width="0.1618%" height="15" fill="rgb(214,131,14)" fg:x="230" fg:w="2"/><text x="18.8584%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="18.6084%" y="373" width="0.1618%" height="15" fill="rgb(229,177,11)" fg:x="230" fg:w="2"/><text x="18.8584%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="18.6084%" y="357" width="0.1618%" height="15" fill="rgb(231,180,14)" fg:x="230" fg:w="2"/><text x="18.8584%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.6893%" y="341" width="0.0809%" height="15" fill="rgb(232,88,2)" fg:x="231" fg:w="1"/><text x="18.9393%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.6893%" y="325" width="0.0809%" height="15" fill="rgb(205,220,8)" fg:x="231" fg:w="1"/><text x="18.9393%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="18.6893%" y="309" width="0.0809%" height="15" fill="rgb(225,23,53)" fg:x="231" fg:w="1"/><text x="18.9393%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="18.6893%" y="293" width="0.0809%" height="15" fill="rgb(213,62,29)" fg:x="231" fg:w="1"/><text x="18.9393%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="18.6893%" y="277" width="0.0809%" height="15" fill="rgb(227,75,7)" fg:x="231" fg:w="1"/><text x="18.9393%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.6893%" y="261" width="0.0809%" height="15" fill="rgb(207,105,14)" fg:x="231" fg:w="1"/><text x="18.9393%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.6893%" y="245" width="0.0809%" height="15" fill="rgb(245,62,29)" fg:x="231" fg:w="1"/><text x="18.9393%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="18.6893%" y="229" width="0.0809%" height="15" fill="rgb(236,202,4)" fg:x="231" fg:w="1"/><text x="18.9393%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="18.6893%" y="213" width="0.0809%" height="15" fill="rgb(250,67,1)" fg:x="231" fg:w="1"/><text x="18.9393%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="18.6893%" y="197" width="0.0809%" height="15" fill="rgb(253,115,44)" fg:x="231" fg:w="1"/><text x="18.9393%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="18.6893%" y="181" width="0.0809%" height="15" fill="rgb(251,139,18)" fg:x="231" fg:w="1"/><text x="18.9393%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.6893%" y="165" width="0.0809%" height="15" fill="rgb(218,22,32)" fg:x="231" fg:w="1"/><text x="18.9393%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="18.6084%" y="405" width="0.2427%" height="15" fill="rgb(243,53,5)" fg:x="230" fg:w="3"/><text x="18.8584%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.7702%" y="389" width="0.0809%" height="15" fill="rgb(227,56,16)" fg:x="232" fg:w="1"/><text x="19.0202%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.7702%" y="373" width="0.0809%" height="15" fill="rgb(245,53,0)" fg:x="232" fg:w="1"/><text x="19.0202%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="18.7702%" y="357" width="0.0809%" height="15" fill="rgb(216,170,35)" fg:x="232" fg:w="1"/><text x="19.0202%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="18.7702%" y="341" width="0.0809%" height="15" fill="rgb(211,200,8)" fg:x="232" fg:w="1"/><text x="19.0202%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="18.7702%" y="325" width="0.0809%" height="15" fill="rgb(228,204,44)" fg:x="232" fg:w="1"/><text x="19.0202%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.7702%" y="309" width="0.0809%" height="15" fill="rgb(214,121,17)" fg:x="232" fg:w="1"/><text x="19.0202%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.7702%" y="293" width="0.0809%" height="15" fill="rgb(233,64,38)" fg:x="232" fg:w="1"/><text x="19.0202%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="18.7702%" y="277" width="0.0809%" height="15" fill="rgb(253,54,19)" fg:x="232" fg:w="1"/><text x="19.0202%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="18.7702%" y="261" width="0.0809%" height="15" fill="rgb(253,94,18)" fg:x="232" fg:w="1"/><text x="19.0202%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="18.7702%" y="245" width="0.0809%" height="15" fill="rgb(227,57,52)" fg:x="232" fg:w="1"/><text x="19.0202%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="18.7702%" y="229" width="0.0809%" height="15" fill="rgb(230,228,50)" fg:x="232" fg:w="1"/><text x="19.0202%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.7702%" y="213" width="0.0809%" height="15" fill="rgb(217,205,27)" fg:x="232" fg:w="1"/><text x="19.0202%" y="223.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (7 samples, 0.57%)</title><rect x="18.5275%" y="453" width="0.5663%" height="15" fill="rgb(252,71,50)" fg:x="229" fg:w="7"/><text x="18.7775%" y="463.50"></text></g><g><title>kernel::model::props::load_props (6 samples, 0.49%)</title><rect x="18.6084%" y="437" width="0.4854%" height="15" fill="rgb(209,86,4)" fg:x="230" fg:w="6"/><text x="18.8584%" y="447.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (6 samples, 0.49%)</title><rect x="18.6084%" y="421" width="0.4854%" height="15" fill="rgb(229,94,0)" fg:x="230" fg:w="6"/><text x="18.8584%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="18.8511%" y="405" width="0.2427%" height="15" fill="rgb(252,223,21)" fg:x="233" fg:w="3"/><text x="19.1011%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="18.8511%" y="389" width="0.2427%" height="15" fill="rgb(230,210,4)" fg:x="233" fg:w="3"/><text x="19.1011%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="18.9320%" y="373" width="0.1618%" height="15" fill="rgb(240,149,38)" fg:x="234" fg:w="2"/><text x="19.1820%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="18.9320%" y="357" width="0.1618%" height="15" fill="rgb(254,105,20)" fg:x="234" fg:w="2"/><text x="19.1820%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="18.9320%" y="341" width="0.1618%" height="15" fill="rgb(253,87,46)" fg:x="234" fg:w="2"/><text x="19.1820%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="18.9320%" y="325" width="0.1618%" height="15" fill="rgb(253,116,33)" fg:x="234" fg:w="2"/><text x="19.1820%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="18.9320%" y="309" width="0.1618%" height="15" fill="rgb(229,198,5)" fg:x="234" fg:w="2"/><text x="19.1820%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="18.9320%" y="293" width="0.1618%" height="15" fill="rgb(242,38,37)" fg:x="234" fg:w="2"/><text x="19.1820%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.0129%" y="277" width="0.0809%" height="15" fill="rgb(242,69,53)" fg:x="235" fg:w="1"/><text x="19.2629%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.0129%" y="261" width="0.0809%" height="15" fill="rgb(249,80,16)" fg:x="235" fg:w="1"/><text x="19.2629%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.0129%" y="245" width="0.0809%" height="15" fill="rgb(206,128,11)" fg:x="235" fg:w="1"/><text x="19.2629%" y="255.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="19.0939%" y="437" width="0.0809%" height="15" fill="rgb(212,35,20)" fg:x="236" fg:w="1"/><text x="19.3439%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.1748%" y="405" width="0.0809%" height="15" fill="rgb(236,79,13)" fg:x="237" fg:w="1"/><text x="19.4248%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.1748%" y="389" width="0.0809%" height="15" fill="rgb(233,123,3)" fg:x="237" fg:w="1"/><text x="19.4248%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.1748%" y="373" width="0.0809%" height="15" fill="rgb(214,93,52)" fg:x="237" fg:w="1"/><text x="19.4248%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.1748%" y="357" width="0.0809%" height="15" fill="rgb(251,37,40)" fg:x="237" fg:w="1"/><text x="19.4248%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.1748%" y="341" width="0.0809%" height="15" fill="rgb(227,80,54)" fg:x="237" fg:w="1"/><text x="19.4248%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.1748%" y="325" width="0.0809%" height="15" fill="rgb(254,48,11)" fg:x="237" fg:w="1"/><text x="19.4248%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="19.1748%" y="309" width="0.0809%" height="15" fill="rgb(235,193,26)" fg:x="237" fg:w="1"/><text x="19.4248%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="19.1748%" y="293" width="0.0809%" height="15" fill="rgb(229,99,21)" fg:x="237" fg:w="1"/><text x="19.4248%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="19.1748%" y="277" width="0.0809%" height="15" fill="rgb(211,140,41)" fg:x="237" fg:w="1"/><text x="19.4248%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.1748%" y="261" width="0.0809%" height="15" fill="rgb(240,227,30)" fg:x="237" fg:w="1"/><text x="19.4248%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.1748%" y="245" width="0.0809%" height="15" fill="rgb(215,224,45)" fg:x="237" fg:w="1"/><text x="19.4248%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="19.1748%" y="229" width="0.0809%" height="15" fill="rgb(206,123,31)" fg:x="237" fg:w="1"/><text x="19.4248%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="19.1748%" y="213" width="0.0809%" height="15" fill="rgb(210,138,16)" fg:x="237" fg:w="1"/><text x="19.4248%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="19.1748%" y="197" width="0.0809%" height="15" fill="rgb(228,57,28)" fg:x="237" fg:w="1"/><text x="19.4248%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="19.1748%" y="181" width="0.0809%" height="15" fill="rgb(242,170,10)" fg:x="237" fg:w="1"/><text x="19.4248%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.1748%" y="165" width="0.0809%" height="15" fill="rgb(228,214,39)" fg:x="237" fg:w="1"/><text x="19.4248%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="19.2557%" y="405" width="0.0809%" height="15" fill="rgb(218,179,33)" fg:x="238" fg:w="1"/><text x="19.5057%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="19.2557%" y="389" width="0.0809%" height="15" fill="rgb(235,193,39)" fg:x="238" fg:w="1"/><text x="19.5057%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="19.0939%" y="453" width="0.3236%" height="15" fill="rgb(219,221,36)" fg:x="236" fg:w="4"/><text x="19.3439%" y="463.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="19.1748%" y="437" width="0.2427%" height="15" fill="rgb(248,218,19)" fg:x="237" fg:w="3"/><text x="19.4248%" y="447.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="19.1748%" y="421" width="0.2427%" height="15" fill="rgb(205,50,9)" fg:x="237" fg:w="3"/><text x="19.4248%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.3366%" y="405" width="0.0809%" height="15" fill="rgb(238,81,28)" fg:x="239" fg:w="1"/><text x="19.5866%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.3366%" y="389" width="0.0809%" height="15" fill="rgb(235,110,19)" fg:x="239" fg:w="1"/><text x="19.5866%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.3366%" y="373" width="0.0809%" height="15" fill="rgb(214,7,14)" fg:x="239" fg:w="1"/><text x="19.5866%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.3366%" y="357" width="0.0809%" height="15" fill="rgb(211,77,3)" fg:x="239" fg:w="1"/><text x="19.5866%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="19.3366%" y="341" width="0.0809%" height="15" fill="rgb(229,5,9)" fg:x="239" fg:w="1"/><text x="19.5866%" y="351.50"></text></g><g><title>&lt;plugins_core::carrying::parser::PutInsideActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="19.4175%" y="453" width="0.0809%" height="15" fill="rgb(225,90,11)" fg:x="240" fg:w="1"/><text x="19.6675%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.4984%" y="453" width="0.0809%" height="15" fill="rgb(242,56,8)" fg:x="241" fg:w="1"/><text x="19.7484%" y="463.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="19.5793%" y="453" width="0.0809%" height="15" fill="rgb(249,212,39)" fg:x="242" fg:w="1"/><text x="19.8293%" y="463.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="19.5793%" y="437" width="0.0809%" height="15" fill="rgb(236,90,9)" fg:x="242" fg:w="1"/><text x="19.8293%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="19.5793%" y="421" width="0.0809%" height="15" fill="rgb(206,88,35)" fg:x="242" fg:w="1"/><text x="19.8293%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.6602%" y="405" width="0.0809%" height="15" fill="rgb(205,126,30)" fg:x="243" fg:w="1"/><text x="19.9102%" y="415.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="19.7411%" y="405" width="0.0809%" height="15" fill="rgb(230,176,12)" fg:x="244" fg:w="1"/><text x="19.9911%" y="415.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="19.7411%" y="389" width="0.0809%" height="15" fill="rgb(243,19,9)" fg:x="244" fg:w="1"/><text x="19.9911%" y="399.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="19.7411%" y="373" width="0.0809%" height="15" fill="rgb(245,171,17)" fg:x="244" fg:w="1"/><text x="19.9911%" y="383.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="19.7411%" y="357" width="0.0809%" height="15" fill="rgb(227,52,21)" fg:x="244" fg:w="1"/><text x="19.9911%" y="367.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="19.7411%" y="341" width="0.0809%" height="15" fill="rgb(238,69,14)" fg:x="244" fg:w="1"/><text x="19.9911%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="19.7411%" y="325" width="0.0809%" height="15" fill="rgb(241,156,39)" fg:x="244" fg:w="1"/><text x="19.9911%" y="335.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="19.7411%" y="309" width="0.0809%" height="15" fill="rgb(212,227,28)" fg:x="244" fg:w="1"/><text x="19.9911%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="19.7411%" y="293" width="0.0809%" height="15" fill="rgb(209,118,27)" fg:x="244" fg:w="1"/><text x="19.9911%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="19.7411%" y="277" width="0.0809%" height="15" fill="rgb(226,102,5)" fg:x="244" fg:w="1"/><text x="19.9911%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="19.7411%" y="261" width="0.0809%" height="15" fill="rgb(223,34,3)" fg:x="244" fg:w="1"/><text x="19.9911%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="19.7411%" y="245" width="0.0809%" height="15" fill="rgb(221,81,38)" fg:x="244" fg:w="1"/><text x="19.9911%" y="255.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (2 samples, 0.16%)</title><rect x="19.9838%" y="389" width="0.1618%" height="15" fill="rgb(236,219,28)" fg:x="247" fg:w="2"/><text x="20.2338%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="20.3074%" y="293" width="0.1618%" height="15" fill="rgb(213,200,14)" fg:x="251" fg:w="2"/><text x="20.5574%" y="303.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="20.3883%" y="277" width="0.0809%" height="15" fill="rgb(240,33,19)" fg:x="252" fg:w="1"/><text x="20.6383%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="20.2265%" y="373" width="0.3236%" height="15" fill="rgb(233,113,27)" fg:x="250" fg:w="4"/><text x="20.4765%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="20.2265%" y="357" width="0.3236%" height="15" fill="rgb(220,221,18)" fg:x="250" fg:w="4"/><text x="20.4765%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (4 samples, 0.32%)</title><rect x="20.2265%" y="341" width="0.3236%" height="15" fill="rgb(238,92,8)" fg:x="250" fg:w="4"/><text x="20.4765%" y="351.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (4 samples, 0.32%)</title><rect x="20.2265%" y="325" width="0.3236%" height="15" fill="rgb(222,164,16)" fg:x="250" fg:w="4"/><text x="20.4765%" y="335.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.32%)</title><rect x="20.2265%" y="309" width="0.3236%" height="15" fill="rgb(241,119,3)" fg:x="250" fg:w="4"/><text x="20.4765%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="20.4693%" y="293" width="0.0809%" height="15" fill="rgb(241,44,8)" fg:x="253" fg:w="1"/><text x="20.7193%" y="303.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="20.4693%" y="277" width="0.0809%" height="15" fill="rgb(230,36,40)" fg:x="253" fg:w="1"/><text x="20.7193%" y="287.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="20.5502%" y="357" width="0.0809%" height="15" fill="rgb(243,16,36)" fg:x="254" fg:w="1"/><text x="20.8002%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.6311%" y="325" width="0.0809%" height="15" fill="rgb(231,4,26)" fg:x="255" fg:w="1"/><text x="20.8811%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (3 samples, 0.24%)</title><rect x="20.7120%" y="325" width="0.2427%" height="15" fill="rgb(240,9,31)" fg:x="256" fg:w="3"/><text x="20.9620%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="20.7120%" y="309" width="0.2427%" height="15" fill="rgb(207,173,15)" fg:x="256" fg:w="3"/><text x="20.9620%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.8738%" y="293" width="0.0809%" height="15" fill="rgb(224,192,53)" fg:x="258" fg:w="1"/><text x="21.1238%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (45 samples, 3.64%)</title><rect x="21.1165%" y="309" width="3.6408%" height="15" fill="rgb(223,67,28)" fg:x="261" fg:w="45"/><text x="21.3665%" y="319.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (45 samples, 3.64%)</title><rect x="21.1165%" y="293" width="3.6408%" height="15" fill="rgb(211,20,47)" fg:x="261" fg:w="45"/><text x="21.3665%" y="303.50">core..</text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="24.5955%" y="277" width="0.1618%" height="15" fill="rgb(240,228,2)" fg:x="304" fg:w="2"/><text x="24.8455%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="24.7573%" y="309" width="0.0809%" height="15" fill="rgb(248,151,12)" fg:x="306" fg:w="1"/><text x="25.0073%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="25.1618%" y="293" width="0.2427%" height="15" fill="rgb(244,8,39)" fg:x="311" fg:w="3"/><text x="25.4118%" y="303.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="25.3236%" y="277" width="0.0809%" height="15" fill="rgb(222,26,8)" fg:x="313" fg:w="1"/><text x="25.5736%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (8 samples, 0.65%)</title><rect x="24.8382%" y="309" width="0.6472%" height="15" fill="rgb(213,106,44)" fg:x="307" fg:w="8"/><text x="25.0882%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="25.4045%" y="293" width="0.0809%" height="15" fill="rgb(214,129,20)" fg:x="314" fg:w="1"/><text x="25.6545%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="25.4045%" y="277" width="0.0809%" height="15" fill="rgb(212,32,13)" fg:x="314" fg:w="1"/><text x="25.6545%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="25.4045%" y="261" width="0.0809%" height="15" fill="rgb(208,168,33)" fg:x="314" fg:w="1"/><text x="25.6545%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="25.4045%" y="245" width="0.0809%" height="15" fill="rgb(231,207,8)" fg:x="314" fg:w="1"/><text x="25.6545%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="25.4045%" y="229" width="0.0809%" height="15" fill="rgb(235,219,23)" fg:x="314" fg:w="1"/><text x="25.6545%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="25.4854%" y="309" width="0.0809%" height="15" fill="rgb(226,216,26)" fg:x="315" fg:w="1"/><text x="25.7354%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="25.4854%" y="293" width="0.0809%" height="15" fill="rgb(239,137,16)" fg:x="315" fg:w="1"/><text x="25.7354%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="25.4854%" y="277" width="0.0809%" height="15" fill="rgb(207,12,36)" fg:x="315" fg:w="1"/><text x="25.7354%" y="287.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="26.0518%" y="245" width="0.1618%" height="15" fill="rgb(210,214,24)" fg:x="322" fg:w="2"/><text x="26.3018%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (5 samples, 0.40%)</title><rect x="26.2136%" y="245" width="0.4045%" height="15" fill="rgb(206,56,30)" fg:x="324" fg:w="5"/><text x="26.4636%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (5 samples, 0.40%)</title><rect x="26.2136%" y="229" width="0.4045%" height="15" fill="rgb(228,143,26)" fg:x="324" fg:w="5"/><text x="26.4636%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="26.3754%" y="213" width="0.2427%" height="15" fill="rgb(216,218,46)" fg:x="326" fg:w="3"/><text x="26.6254%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="26.6181%" y="229" width="0.0809%" height="15" fill="rgb(206,6,19)" fg:x="329" fg:w="1"/><text x="26.8681%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.16%)</title><rect x="26.6181%" y="245" width="0.1618%" height="15" fill="rgb(239,177,51)" fg:x="329" fg:w="2"/><text x="26.8681%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="26.6990%" y="229" width="0.0809%" height="15" fill="rgb(216,55,25)" fg:x="330" fg:w="1"/><text x="26.9490%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (131 samples, 10.60%)</title><rect x="26.7799%" y="245" width="10.5987%" height="15" fill="rgb(231,163,29)" fg:x="331" fg:w="131"/><text x="27.0299%" y="255.50">regex_automata:..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (131 samples, 10.60%)</title><rect x="26.7799%" y="229" width="10.5987%" height="15" fill="rgb(232,149,50)" fg:x="331" fg:w="131"/><text x="27.0299%" y="239.50">regex_automata:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (131 samples, 10.60%)</title><rect x="26.7799%" y="213" width="10.5987%" height="15" fill="rgb(223,142,48)" fg:x="331" fg:w="131"/><text x="27.0299%" y="223.50">alloc::vec::Vec..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="37.3786%" y="245" width="0.2427%" height="15" fill="rgb(245,83,23)" fg:x="462" fg:w="3"/><text x="37.6286%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (151 samples, 12.22%)</title><rect x="25.5663%" y="293" width="12.2168%" height="15" fill="rgb(224,63,2)" fg:x="316" fg:w="151"/><text x="25.8163%" y="303.50">&lt;core::iter::adapt..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (151 samples, 12.22%)</title><rect x="25.5663%" y="277" width="12.2168%" height="15" fill="rgb(218,65,53)" fg:x="316" fg:w="151"/><text x="25.8163%" y="287.50">regex_automata::nf..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (151 samples, 12.22%)</title><rect x="25.5663%" y="261" width="12.2168%" height="15" fill="rgb(221,84,29)" fg:x="316" fg:w="151"/><text x="25.8163%" y="271.50">regex_automata::nf..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="37.6214%" y="245" width="0.1618%" height="15" fill="rgb(234,0,32)" fg:x="465" fg:w="2"/><text x="37.8714%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="37.7023%" y="229" width="0.0809%" height="15" fill="rgb(206,20,16)" fg:x="466" fg:w="1"/><text x="37.9523%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.7023%" y="213" width="0.0809%" height="15" fill="rgb(244,172,18)" fg:x="466" fg:w="1"/><text x="37.9523%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.7023%" y="197" width="0.0809%" height="15" fill="rgb(254,133,1)" fg:x="466" fg:w="1"/><text x="37.9523%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.1877%" y="277" width="0.0809%" height="15" fill="rgb(222,206,41)" fg:x="472" fg:w="1"/><text x="38.4377%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="38.7540%" y="229" width="0.1618%" height="15" fill="rgb(212,3,42)" fg:x="479" fg:w="2"/><text x="39.0040%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (15 samples, 1.21%)</title><rect x="37.7832%" y="293" width="1.2136%" height="15" fill="rgb(241,11,4)" fg:x="467" fg:w="15"/><text x="38.0332%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (9 samples, 0.73%)</title><rect x="38.2686%" y="277" width="0.7282%" height="15" fill="rgb(205,19,26)" fg:x="473" fg:w="9"/><text x="38.5186%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="38.7540%" y="261" width="0.2427%" height="15" fill="rgb(210,179,32)" fg:x="479" fg:w="3"/><text x="39.0040%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="38.7540%" y="245" width="0.2427%" height="15" fill="rgb(227,116,49)" fg:x="479" fg:w="3"/><text x="39.0040%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="38.9159%" y="229" width="0.0809%" height="15" fill="rgb(211,146,6)" fg:x="481" fg:w="1"/><text x="39.1659%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (4 samples, 0.32%)</title><rect x="38.9968%" y="293" width="0.3236%" height="15" fill="rgb(219,44,39)" fg:x="482" fg:w="4"/><text x="39.2468%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="39.1586%" y="277" width="0.1618%" height="15" fill="rgb(234,128,11)" fg:x="484" fg:w="2"/><text x="39.4086%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.2395%" y="261" width="0.0809%" height="15" fill="rgb(220,183,53)" fg:x="485" fg:w="1"/><text x="39.4895%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (171 samples, 13.83%)</title><rect x="25.5663%" y="309" width="13.8350%" height="15" fill="rgb(213,219,32)" fg:x="316" fg:w="171"/><text x="25.8163%" y="319.50">regex_automata::nfa::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_bounded (1 samples, 0.08%)</title><rect x="39.3204%" y="293" width="0.0809%" height="15" fill="rgb(232,156,16)" fg:x="486" fg:w="1"/><text x="39.5704%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (229 samples, 18.53%)</title><rect x="20.9547%" y="325" width="18.5275%" height="15" fill="rgb(246,135,34)" fg:x="259" fg:w="229"/><text x="21.2047%" y="335.50">regex_automata::meta::strateg..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="39.4013%" y="309" width="0.0809%" height="15" fill="rgb(241,99,0)" fg:x="487" fg:w="1"/><text x="39.6513%" y="319.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="39.6440%" y="277" width="0.0809%" height="15" fill="rgb(222,103,45)" fg:x="490" fg:w="1"/><text x="39.8940%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (8 samples, 0.65%)</title><rect x="39.5631%" y="293" width="0.6472%" height="15" fill="rgb(212,57,4)" fg:x="489" fg:w="8"/><text x="39.8131%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (6 samples, 0.49%)</title><rect x="39.7249%" y="277" width="0.4854%" height="15" fill="rgb(215,68,47)" fg:x="491" fg:w="6"/><text x="39.9749%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="39.8058%" y="261" width="0.4045%" height="15" fill="rgb(230,84,2)" fg:x="492" fg:w="5"/><text x="40.0558%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="39.8058%" y="245" width="0.4045%" height="15" fill="rgb(220,102,14)" fg:x="492" fg:w="5"/><text x="40.0558%" y="255.50"></text></g><g><title>__libc_malloc (5 samples, 0.40%)</title><rect x="39.8058%" y="229" width="0.4045%" height="15" fill="rgb(240,10,32)" fg:x="492" fg:w="5"/><text x="40.0558%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (10 samples, 0.81%)</title><rect x="39.4822%" y="325" width="0.8091%" height="15" fill="rgb(215,47,27)" fg:x="488" fg:w="10"/><text x="39.7322%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (10 samples, 0.81%)</title><rect x="39.4822%" y="309" width="0.8091%" height="15" fill="rgb(233,188,43)" fg:x="488" fg:w="10"/><text x="39.7322%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="40.2104%" y="293" width="0.0809%" height="15" fill="rgb(253,190,1)" fg:x="497" fg:w="1"/><text x="40.4604%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.2104%" y="277" width="0.0809%" height="15" fill="rgb(206,114,52)" fg:x="497" fg:w="1"/><text x="40.4604%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.2104%" y="261" width="0.0809%" height="15" fill="rgb(233,120,37)" fg:x="497" fg:w="1"/><text x="40.4604%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (2 samples, 0.16%)</title><rect x="40.2913%" y="293" width="0.1618%" height="15" fill="rgb(214,52,39)" fg:x="498" fg:w="2"/><text x="40.5413%" y="303.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (247 samples, 19.98%)</title><rect x="20.5502%" y="373" width="19.9838%" height="15" fill="rgb(223,80,29)" fg:x="254" fg:w="247"/><text x="20.8002%" y="383.50">&lt;regex::regex::string::Regex as..</text></g><g><title>regex::builders::Builder::build_one_string (246 samples, 19.90%)</title><rect x="20.6311%" y="357" width="19.9029%" height="15" fill="rgb(230,101,40)" fg:x="255" fg:w="246"/><text x="20.8811%" y="367.50">regex::builders::Builder::build..</text></g><g><title>regex_automata::meta::regex::Builder::build (246 samples, 19.90%)</title><rect x="20.6311%" y="341" width="19.9029%" height="15" fill="rgb(219,211,8)" fg:x="255" fg:w="246"/><text x="20.8811%" y="351.50">regex_automata::meta::regex::Bu..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="40.2913%" y="325" width="0.2427%" height="15" fill="rgb(252,126,28)" fg:x="498" fg:w="3"/><text x="40.5413%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="40.2913%" y="309" width="0.2427%" height="15" fill="rgb(215,56,38)" fg:x="498" fg:w="3"/><text x="40.5413%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.4531%" y="293" width="0.0809%" height="15" fill="rgb(249,55,44)" fg:x="500" fg:w="1"/><text x="40.7031%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.4531%" y="277" width="0.0809%" height="15" fill="rgb(220,221,32)" fg:x="500" fg:w="1"/><text x="40.7031%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.4531%" y="261" width="0.0809%" height="15" fill="rgb(212,216,41)" fg:x="500" fg:w="1"/><text x="40.7031%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.5340%" y="373" width="0.0809%" height="15" fill="rgb(228,213,43)" fg:x="501" fg:w="1"/><text x="40.7840%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="40.6958%" y="341" width="0.0809%" height="15" fill="rgb(211,31,26)" fg:x="503" fg:w="1"/><text x="40.9458%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="40.6958%" y="325" width="0.0809%" height="15" fill="rgb(229,202,19)" fg:x="503" fg:w="1"/><text x="40.9458%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="40.7767%" y="309" width="0.0809%" height="15" fill="rgb(229,105,46)" fg:x="504" fg:w="1"/><text x="41.0267%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.7767%" y="293" width="0.0809%" height="15" fill="rgb(235,108,1)" fg:x="504" fg:w="1"/><text x="41.0267%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="40.6149%" y="373" width="0.3236%" height="15" fill="rgb(245,111,35)" fg:x="502" fg:w="4"/><text x="40.8649%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="40.6149%" y="357" width="0.3236%" height="15" fill="rgb(219,185,31)" fg:x="502" fg:w="4"/><text x="40.8649%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="40.7767%" y="341" width="0.1618%" height="15" fill="rgb(214,4,43)" fg:x="504" fg:w="2"/><text x="41.0267%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="40.7767%" y="325" width="0.1618%" height="15" fill="rgb(235,227,40)" fg:x="504" fg:w="2"/><text x="41.0267%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.8576%" y="309" width="0.0809%" height="15" fill="rgb(230,88,30)" fg:x="505" fg:w="1"/><text x="41.1076%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="41.0194%" y="309" width="0.0809%" height="15" fill="rgb(216,217,1)" fg:x="507" fg:w="1"/><text x="41.2694%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="41.5049%" y="293" width="0.2427%" height="15" fill="rgb(248,139,50)" fg:x="513" fg:w="3"/><text x="41.7549%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="41.5858%" y="277" width="0.1618%" height="15" fill="rgb(233,1,21)" fg:x="514" fg:w="2"/><text x="41.8358%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.6667%" y="261" width="0.0809%" height="15" fill="rgb(215,183,12)" fg:x="515" fg:w="1"/><text x="41.9167%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="41.7476%" y="293" width="0.1618%" height="15" fill="rgb(229,104,42)" fg:x="516" fg:w="2"/><text x="41.9976%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="41.8285%" y="277" width="0.0809%" height="15" fill="rgb(243,34,48)" fg:x="517" fg:w="1"/><text x="42.0785%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="41.8285%" y="261" width="0.0809%" height="15" fill="rgb(239,11,44)" fg:x="517" fg:w="1"/><text x="42.0785%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.8285%" y="245" width="0.0809%" height="15" fill="rgb(231,98,35)" fg:x="517" fg:w="1"/><text x="42.0785%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (13 samples, 1.05%)</title><rect x="41.1003%" y="309" width="1.0518%" height="15" fill="rgb(233,28,25)" fg:x="508" fg:w="13"/><text x="41.3503%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="41.9094%" y="293" width="0.2427%" height="15" fill="rgb(234,123,11)" fg:x="518" fg:w="3"/><text x="42.1594%" y="303.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (273 samples, 22.09%)</title><rect x="20.1456%" y="389" width="22.0874%" height="15" fill="rgb(220,69,3)" fg:x="249" fg:w="273"/><text x="20.3956%" y="399.50">indefinite::helper::Helper::get_fir..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (16 samples, 1.29%)</title><rect x="40.9385%" y="373" width="1.2945%" height="15" fill="rgb(214,64,36)" fg:x="506" fg:w="16"/><text x="41.1885%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (16 samples, 1.29%)</title><rect x="40.9385%" y="357" width="1.2945%" height="15" fill="rgb(211,138,32)" fg:x="506" fg:w="16"/><text x="41.1885%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (16 samples, 1.29%)</title><rect x="40.9385%" y="341" width="1.2945%" height="15" fill="rgb(213,118,47)" fg:x="506" fg:w="16"/><text x="41.1885%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (15 samples, 1.21%)</title><rect x="41.0194%" y="325" width="1.2136%" height="15" fill="rgb(243,124,49)" fg:x="507" fg:w="15"/><text x="41.2694%" y="335.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="42.1521%" y="309" width="0.0809%" height="15" fill="rgb(221,30,28)" fg:x="521" fg:w="1"/><text x="42.4021%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="42.1521%" y="293" width="0.0809%" height="15" fill="rgb(246,37,13)" fg:x="521" fg:w="1"/><text x="42.4021%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.2330%" y="293" width="0.0809%" height="15" fill="rgb(249,66,14)" fg:x="522" fg:w="1"/><text x="42.4830%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="42.2330%" y="325" width="0.1618%" height="15" fill="rgb(213,166,5)" fg:x="522" fg:w="2"/><text x="42.4830%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="42.2330%" y="309" width="0.1618%" height="15" fill="rgb(221,66,24)" fg:x="522" fg:w="2"/><text x="42.4830%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="42.3139%" y="293" width="0.0809%" height="15" fill="rgb(210,132,17)" fg:x="523" fg:w="1"/><text x="42.5639%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.3948%" y="325" width="0.0809%" height="15" fill="rgb(243,202,5)" fg:x="524" fg:w="1"/><text x="42.6448%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.4757%" y="325" width="0.0809%" height="15" fill="rgb(233,70,48)" fg:x="525" fg:w="1"/><text x="42.7257%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="42.5566%" y="293" width="0.1618%" height="15" fill="rgb(238,41,26)" fg:x="526" fg:w="2"/><text x="42.8066%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="42.6375%" y="277" width="0.0809%" height="15" fill="rgb(241,19,31)" fg:x="527" fg:w="1"/><text x="42.8875%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="42.6375%" y="261" width="0.0809%" height="15" fill="rgb(214,76,10)" fg:x="527" fg:w="1"/><text x="42.8875%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="42.6375%" y="245" width="0.0809%" height="15" fill="rgb(254,202,22)" fg:x="527" fg:w="1"/><text x="42.8875%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="42.7184%" y="261" width="0.0809%" height="15" fill="rgb(214,72,24)" fg:x="528" fg:w="1"/><text x="42.9684%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="42.7184%" y="245" width="0.0809%" height="15" fill="rgb(221,92,46)" fg:x="528" fg:w="1"/><text x="42.9684%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="42.7184%" y="229" width="0.0809%" height="15" fill="rgb(246,13,50)" fg:x="528" fg:w="1"/><text x="42.9684%" y="239.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="42.7184%" y="213" width="0.0809%" height="15" fill="rgb(240,165,38)" fg:x="528" fg:w="1"/><text x="42.9684%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.32%)</title><rect x="42.5566%" y="325" width="0.3236%" height="15" fill="rgb(241,24,51)" fg:x="526" fg:w="4"/><text x="42.8066%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="42.5566%" y="309" width="0.3236%" height="15" fill="rgb(227,51,44)" fg:x="526" fg:w="4"/><text x="42.8066%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="42.7184%" y="293" width="0.1618%" height="15" fill="rgb(231,121,3)" fg:x="528" fg:w="2"/><text x="42.9684%" y="303.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="42.7184%" y="277" width="0.1618%" height="15" fill="rgb(245,3,41)" fg:x="528" fg:w="2"/><text x="42.9684%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="42.7994%" y="261" width="0.0809%" height="15" fill="rgb(214,13,26)" fg:x="529" fg:w="1"/><text x="43.0494%" y="271.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (2 samples, 0.16%)</title><rect x="42.8803%" y="325" width="0.1618%" height="15" fill="rgb(252,75,11)" fg:x="530" fg:w="2"/><text x="43.1303%" y="335.50"></text></g><g><title>regex_syntax::hir::Properties::union (1 samples, 0.08%)</title><rect x="42.9612%" y="309" width="0.0809%" height="15" fill="rgb(218,226,17)" fg:x="531" fg:w="1"/><text x="43.2112%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.9612%" y="293" width="0.0809%" height="15" fill="rgb(248,89,38)" fg:x="531" fg:w="1"/><text x="43.2112%" y="303.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="43.1230%" y="293" width="0.1618%" height="15" fill="rgb(237,73,46)" fg:x="533" fg:w="2"/><text x="43.3730%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (28 samples, 2.27%)</title><rect x="43.0421%" y="309" width="2.2654%" height="15" fill="rgb(242,78,33)" fg:x="532" fg:w="28"/><text x="43.2921%" y="319.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (25 samples, 2.02%)</title><rect x="43.2848%" y="293" width="2.0227%" height="15" fill="rgb(235,60,3)" fg:x="535" fg:w="25"/><text x="43.5348%" y="303.50">c..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.2265%" y="277" width="0.0809%" height="15" fill="rgb(216,172,19)" fg:x="559" fg:w="1"/><text x="45.4765%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="45.3074%" y="309" width="0.3236%" height="15" fill="rgb(227,6,42)" fg:x="560" fg:w="4"/><text x="45.5574%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="45.3074%" y="293" width="0.3236%" height="15" fill="rgb(223,207,42)" fg:x="560" fg:w="4"/><text x="45.5574%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::sparse_set::SparseSet&gt; (1 samples, 0.08%)</title><rect x="45.8738%" y="277" width="0.0809%" height="15" fill="rgb(246,138,30)" fg:x="567" fg:w="1"/><text x="46.1238%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.8738%" y="261" width="0.0809%" height="15" fill="rgb(251,199,47)" fg:x="567" fg:w="1"/><text x="46.1238%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="45.9547%" y="277" width="0.0809%" height="15" fill="rgb(228,218,44)" fg:x="568" fg:w="1"/><text x="46.2047%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="46.0356%" y="277" width="0.1618%" height="15" fill="rgb(220,68,6)" fg:x="569" fg:w="2"/><text x="46.2856%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="46.0356%" y="261" width="0.1618%" height="15" fill="rgb(240,60,26)" fg:x="569" fg:w="2"/><text x="46.2856%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="46.0356%" y="245" width="0.1618%" height="15" fill="rgb(211,200,19)" fg:x="569" fg:w="2"/><text x="46.2856%" y="255.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="46.0356%" y="229" width="0.1618%" height="15" fill="rgb(242,145,30)" fg:x="569" fg:w="2"/><text x="46.2856%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (10 samples, 0.81%)</title><rect x="46.1974%" y="277" width="0.8091%" height="15" fill="rgb(225,64,13)" fg:x="571" fg:w="10"/><text x="46.4474%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (9 samples, 0.73%)</title><rect x="46.2783%" y="261" width="0.7282%" height="15" fill="rgb(218,103,35)" fg:x="572" fg:w="9"/><text x="46.5283%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="46.7638%" y="245" width="0.2427%" height="15" fill="rgb(216,93,46)" fg:x="578" fg:w="3"/><text x="47.0138%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="46.7638%" y="229" width="0.2427%" height="15" fill="rgb(225,159,27)" fg:x="578" fg:w="3"/><text x="47.0138%" y="239.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="46.7638%" y="213" width="0.2427%" height="15" fill="rgb(225,204,11)" fg:x="578" fg:w="3"/><text x="47.0138%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (9 samples, 0.73%)</title><rect x="47.0874%" y="261" width="0.7282%" height="15" fill="rgb(205,56,4)" fg:x="582" fg:w="9"/><text x="47.3374%" y="271.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (9 samples, 0.73%)</title><rect x="47.0874%" y="245" width="0.7282%" height="15" fill="rgb(206,6,35)" fg:x="582" fg:w="9"/><text x="47.3374%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (28 samples, 2.27%)</title><rect x="45.6311%" y="309" width="2.2654%" height="15" fill="rgb(247,73,52)" fg:x="564" fg:w="28"/><text x="45.8811%" y="319.50">r..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (28 samples, 2.27%)</title><rect x="45.6311%" y="293" width="2.2654%" height="15" fill="rgb(246,97,4)" fg:x="564" fg:w="28"/><text x="45.8811%" y="303.50">r..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (11 samples, 0.89%)</title><rect x="47.0065%" y="277" width="0.8900%" height="15" fill="rgb(212,37,15)" fg:x="581" fg:w="11"/><text x="47.2565%" y="287.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="47.8155%" y="261" width="0.0809%" height="15" fill="rgb(208,130,40)" fg:x="591" fg:w="1"/><text x="48.0655%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="47.8964%" y="309" width="0.0809%" height="15" fill="rgb(236,55,29)" fg:x="592" fg:w="1"/><text x="48.1464%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="47.8964%" y="293" width="0.0809%" height="15" fill="rgb(209,156,45)" fg:x="592" fg:w="1"/><text x="48.1464%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="47.8964%" y="277" width="0.0809%" height="15" fill="rgb(249,107,4)" fg:x="592" fg:w="1"/><text x="48.1464%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="47.8964%" y="261" width="0.0809%" height="15" fill="rgb(227,7,13)" fg:x="592" fg:w="1"/><text x="48.1464%" y="271.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="49.1100%" y="197" width="0.3236%" height="15" fill="rgb(250,129,14)" fg:x="607" fg:w="4"/><text x="49.3600%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.4337%" y="197" width="0.0809%" height="15" fill="rgb(229,92,13)" fg:x="611" fg:w="1"/><text x="49.6837%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (5 samples, 0.40%)</title><rect x="49.5146%" y="197" width="0.4045%" height="15" fill="rgb(245,98,39)" fg:x="612" fg:w="5"/><text x="49.7646%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="49.7573%" y="181" width="0.1618%" height="15" fill="rgb(234,135,48)" fg:x="615" fg:w="2"/><text x="50.0073%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="49.7573%" y="165" width="0.1618%" height="15" fill="rgb(230,98,28)" fg:x="615" fg:w="2"/><text x="50.0073%" y="175.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="49.7573%" y="149" width="0.1618%" height="15" fill="rgb(223,121,0)" fg:x="615" fg:w="2"/><text x="50.0073%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="49.9191%" y="197" width="0.1618%" height="15" fill="rgb(234,173,33)" fg:x="617" fg:w="2"/><text x="50.1691%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="50.8091%" y="165" width="0.0809%" height="15" fill="rgb(245,47,8)" fg:x="628" fg:w="1"/><text x="51.0591%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="50.9709%" y="133" width="0.0809%" height="15" fill="rgb(205,17,20)" fg:x="630" fg:w="1"/><text x="51.2209%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="50.8900%" y="165" width="0.4045%" height="15" fill="rgb(232,151,16)" fg:x="629" fg:w="5"/><text x="51.1400%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="50.8900%" y="149" width="0.4045%" height="15" fill="rgb(208,30,32)" fg:x="629" fg:w="5"/><text x="51.1400%" y="159.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="51.0518%" y="133" width="0.2427%" height="15" fill="rgb(254,26,3)" fg:x="631" fg:w="3"/><text x="51.3018%" y="143.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="51.8608%" y="149" width="0.1618%" height="15" fill="rgb(240,177,30)" fg:x="641" fg:w="2"/><text x="52.1108%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (26 samples, 2.10%)</title><rect x="50.0809%" y="197" width="2.1036%" height="15" fill="rgb(248,76,44)" fg:x="619" fg:w="26"/><text x="50.3309%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (22 samples, 1.78%)</title><rect x="50.4045%" y="181" width="1.7799%" height="15" fill="rgb(241,186,54)" fg:x="623" fg:w="22"/><text x="50.6545%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (11 samples, 0.89%)</title><rect x="51.2945%" y="165" width="0.8900%" height="15" fill="rgb(249,171,29)" fg:x="634" fg:w="11"/><text x="51.5445%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="52.0227%" y="149" width="0.1618%" height="15" fill="rgb(237,151,44)" fg:x="643" fg:w="2"/><text x="52.2727%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="52.0227%" y="133" width="0.1618%" height="15" fill="rgb(228,174,30)" fg:x="643" fg:w="2"/><text x="52.2727%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="52.0227%" y="117" width="0.1618%" height="15" fill="rgb(252,14,37)" fg:x="643" fg:w="2"/><text x="52.2727%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="52.1036%" y="101" width="0.0809%" height="15" fill="rgb(207,111,40)" fg:x="644" fg:w="1"/><text x="52.3536%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="52.1845%" y="181" width="0.0809%" height="15" fill="rgb(248,171,54)" fg:x="645" fg:w="1"/><text x="52.4345%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="52.1845%" y="165" width="0.0809%" height="15" fill="rgb(211,127,2)" fg:x="645" fg:w="1"/><text x="52.4345%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.1845%" y="149" width="0.0809%" height="15" fill="rgb(236,87,47)" fg:x="645" fg:w="1"/><text x="52.4345%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="52.1845%" y="133" width="0.0809%" height="15" fill="rgb(223,190,45)" fg:x="645" fg:w="1"/><text x="52.4345%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (116 samples, 9.39%)</title><rect x="52.1845%" y="197" width="9.3851%" height="15" fill="rgb(215,5,16)" fg:x="645" fg:w="116"/><text x="52.4345%" y="207.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (115 samples, 9.30%)</title><rect x="52.2654%" y="181" width="9.3042%" height="15" fill="rgb(252,82,33)" fg:x="646" fg:w="115"/><text x="52.5154%" y="191.50">regex_automat..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (115 samples, 9.30%)</title><rect x="52.2654%" y="165" width="9.3042%" height="15" fill="rgb(247,213,44)" fg:x="646" fg:w="115"/><text x="52.5154%" y="175.50">alloc::vec::V..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (5 samples, 0.40%)</title><rect x="61.5696%" y="197" width="0.4045%" height="15" fill="rgb(205,196,44)" fg:x="761" fg:w="5"/><text x="61.8196%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.8932%" y="181" width="0.0809%" height="15" fill="rgb(237,96,54)" fg:x="765" fg:w="1"/><text x="62.1432%" y="191.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="61.9741%" y="197" width="0.0809%" height="15" fill="rgb(230,113,34)" fg:x="766" fg:w="1"/><text x="62.2241%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (181 samples, 14.64%)</title><rect x="47.9773%" y="293" width="14.6440%" height="15" fill="rgb(221,224,12)" fg:x="593" fg:w="181"/><text x="48.2273%" y="303.50">&lt;core::iter::adapters:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (181 samples, 14.64%)</title><rect x="47.9773%" y="277" width="14.6440%" height="15" fill="rgb(219,112,44)" fg:x="593" fg:w="181"/><text x="48.2273%" y="287.50">regex_automata::nfa::t..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (181 samples, 14.64%)</title><rect x="47.9773%" y="261" width="14.6440%" height="15" fill="rgb(210,31,13)" fg:x="593" fg:w="181"/><text x="48.2273%" y="271.50">regex_automata::nfa::t..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (181 samples, 14.64%)</title><rect x="47.9773%" y="245" width="14.6440%" height="15" fill="rgb(230,25,16)" fg:x="593" fg:w="181"/><text x="48.2273%" y="255.50">regex_automata::nfa::t..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (181 samples, 14.64%)</title><rect x="47.9773%" y="229" width="14.6440%" height="15" fill="rgb(246,108,53)" fg:x="593" fg:w="181"/><text x="48.2273%" y="239.50">regex_automata::nfa::t..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (181 samples, 14.64%)</title><rect x="47.9773%" y="213" width="14.6440%" height="15" fill="rgb(241,172,50)" fg:x="593" fg:w="181"/><text x="48.2273%" y="223.50">regex_automata::nfa::t..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (7 samples, 0.57%)</title><rect x="62.0550%" y="197" width="0.5663%" height="15" fill="rgb(235,141,10)" fg:x="767" fg:w="7"/><text x="62.3050%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="62.2168%" y="181" width="0.4045%" height="15" fill="rgb(220,174,43)" fg:x="769" fg:w="5"/><text x="62.4668%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="62.2977%" y="165" width="0.3236%" height="15" fill="rgb(215,181,40)" fg:x="770" fg:w="4"/><text x="62.5477%" y="175.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="62.2977%" y="149" width="0.3236%" height="15" fill="rgb(230,97,2)" fg:x="770" fg:w="4"/><text x="62.5477%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="62.7832%" y="277" width="0.0809%" height="15" fill="rgb(211,25,27)" fg:x="776" fg:w="1"/><text x="63.0332%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.7832%" y="261" width="0.0809%" height="15" fill="rgb(230,87,26)" fg:x="776" fg:w="1"/><text x="63.0332%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="62.8641%" y="277" width="0.0809%" height="15" fill="rgb(227,160,17)" fg:x="777" fg:w="1"/><text x="63.1141%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.8641%" y="261" width="0.0809%" height="15" fill="rgb(244,85,34)" fg:x="777" fg:w="1"/><text x="63.1141%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.8641%" y="245" width="0.0809%" height="15" fill="rgb(207,70,0)" fg:x="777" fg:w="1"/><text x="63.1141%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (15 samples, 1.21%)</title><rect x="62.9450%" y="277" width="1.2136%" height="15" fill="rgb(223,129,7)" fg:x="778" fg:w="15"/><text x="63.1950%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="63.7540%" y="261" width="0.4045%" height="15" fill="rgb(246,105,7)" fg:x="788" fg:w="5"/><text x="64.0040%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="63.7540%" y="245" width="0.4045%" height="15" fill="rgb(215,154,42)" fg:x="788" fg:w="5"/><text x="64.0040%" y="255.50"></text></g><g><title>realloc (5 samples, 0.40%)</title><rect x="63.7540%" y="229" width="0.4045%" height="15" fill="rgb(220,215,30)" fg:x="788" fg:w="5"/><text x="64.0040%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="64.1586%" y="277" width="0.4045%" height="15" fill="rgb(228,81,51)" fg:x="793" fg:w="5"/><text x="64.4086%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.4822%" y="261" width="0.0809%" height="15" fill="rgb(247,71,54)" fg:x="797" fg:w="1"/><text x="64.7322%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (3 samples, 0.24%)</title><rect x="64.5631%" y="277" width="0.2427%" height="15" fill="rgb(234,176,34)" fg:x="798" fg:w="3"/><text x="64.8131%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.8058%" y="261" width="0.0809%" height="15" fill="rgb(241,103,54)" fg:x="801" fg:w="1"/><text x="65.0558%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::new (271 samples, 21.93%)</title><rect x="43.0421%" y="325" width="21.9256%" height="15" fill="rgb(228,22,34)" fg:x="532" fg:w="271"/><text x="43.2921%" y="335.50">regex_automata::meta::strategy::new</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (210 samples, 16.99%)</title><rect x="47.9773%" y="309" width="16.9903%" height="15" fill="rgb(241,179,48)" fg:x="593" fg:w="210"/><text x="48.2273%" y="319.50">regex_automata::nfa::thomp..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (29 samples, 2.35%)</title><rect x="62.6214%" y="293" width="2.3463%" height="15" fill="rgb(235,167,37)" fg:x="774" fg:w="29"/><text x="62.8714%" y="303.50">r..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="64.8058%" y="277" width="0.1618%" height="15" fill="rgb(213,109,30)" fg:x="801" fg:w="2"/><text x="65.0558%" y="287.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::fixup_slot_ranges (1 samples, 0.08%)</title><rect x="64.8867%" y="261" width="0.0809%" height="15" fill="rgb(222,172,16)" fg:x="802" fg:w="1"/><text x="65.1367%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="65.1294%" y="293" width="0.0809%" height="15" fill="rgb(233,192,5)" fg:x="805" fg:w="1"/><text x="65.3794%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="65.1294%" y="277" width="0.0809%" height="15" fill="rgb(247,189,41)" fg:x="805" fg:w="1"/><text x="65.3794%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="65.2913%" y="277" width="0.0809%" height="15" fill="rgb(218,134,47)" fg:x="807" fg:w="1"/><text x="65.5413%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="65.4531%" y="261" width="0.1618%" height="15" fill="rgb(216,29,3)" fg:x="809" fg:w="2"/><text x="65.7031%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="65.4531%" y="245" width="0.1618%" height="15" fill="rgb(246,140,12)" fg:x="809" fg:w="2"/><text x="65.7031%" y="255.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="65.4531%" y="229" width="0.1618%" height="15" fill="rgb(230,136,11)" fg:x="809" fg:w="2"/><text x="65.7031%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.49%)</title><rect x="65.2104%" y="293" width="0.4854%" height="15" fill="rgb(247,22,47)" fg:x="806" fg:w="6"/><text x="65.4604%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (4 samples, 0.32%)</title><rect x="65.3722%" y="277" width="0.3236%" height="15" fill="rgb(218,84,22)" fg:x="808" fg:w="4"/><text x="65.6222%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="65.6149%" y="261" width="0.0809%" height="15" fill="rgb(216,87,39)" fg:x="811" fg:w="1"/><text x="65.8649%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="65.6958%" y="293" width="0.0809%" height="15" fill="rgb(221,178,8)" fg:x="812" fg:w="1"/><text x="65.9458%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.6958%" y="277" width="0.0809%" height="15" fill="rgb(230,42,11)" fg:x="812" fg:w="1"/><text x="65.9458%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.6958%" y="261" width="0.0809%" height="15" fill="rgb(237,229,4)" fg:x="812" fg:w="1"/><text x="65.9458%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.6958%" y="245" width="0.0809%" height="15" fill="rgb(222,31,33)" fg:x="812" fg:w="1"/><text x="65.9458%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (2 samples, 0.16%)</title><rect x="65.7767%" y="277" width="0.1618%" height="15" fill="rgb(210,17,39)" fg:x="813" fg:w="2"/><text x="66.0267%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (13 samples, 1.05%)</title><rect x="64.9676%" y="325" width="1.0518%" height="15" fill="rgb(244,93,20)" fg:x="803" fg:w="13"/><text x="65.2176%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (13 samples, 1.05%)</title><rect x="64.9676%" y="309" width="1.0518%" height="15" fill="rgb(210,40,47)" fg:x="803" fg:w="13"/><text x="65.2176%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="65.7767%" y="293" width="0.2427%" height="15" fill="rgb(239,211,47)" fg:x="813" fg:w="3"/><text x="66.0267%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.9385%" y="277" width="0.0809%" height="15" fill="rgb(251,223,49)" fg:x="815" fg:w="1"/><text x="66.1885%" y="287.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="66.1812%" y="277" width="0.0809%" height="15" fill="rgb(221,149,5)" fg:x="818" fg:w="1"/><text x="66.4312%" y="287.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="66.1812%" y="261" width="0.0809%" height="15" fill="rgb(219,224,51)" fg:x="818" fg:w="1"/><text x="66.4312%" y="271.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="66.2621%" y="277" width="0.0809%" height="15" fill="rgb(223,7,8)" fg:x="819" fg:w="1"/><text x="66.5121%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.2621%" y="261" width="0.0809%" height="15" fill="rgb(241,217,22)" fg:x="819" fg:w="1"/><text x="66.5121%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.2621%" y="245" width="0.0809%" height="15" fill="rgb(248,209,0)" fg:x="819" fg:w="1"/><text x="66.5121%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.2621%" y="229" width="0.0809%" height="15" fill="rgb(217,205,4)" fg:x="819" fg:w="1"/><text x="66.5121%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="66.1812%" y="293" width="0.3236%" height="15" fill="rgb(228,124,39)" fg:x="818" fg:w="4"/><text x="66.4312%" y="303.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (2 samples, 0.16%)</title><rect x="66.3430%" y="277" width="0.1618%" height="15" fill="rgb(250,116,42)" fg:x="820" fg:w="2"/><text x="66.5930%" y="287.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="66.4239%" y="261" width="0.0809%" height="15" fill="rgb(223,202,9)" fg:x="821" fg:w="1"/><text x="66.6739%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.4239%" y="245" width="0.0809%" height="15" fill="rgb(242,222,40)" fg:x="821" fg:w="1"/><text x="66.6739%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.5858%" y="277" width="0.0809%" height="15" fill="rgb(229,99,46)" fg:x="823" fg:w="1"/><text x="66.8358%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.24%)</title><rect x="66.5049%" y="293" width="0.2427%" height="15" fill="rgb(225,56,46)" fg:x="822" fg:w="3"/><text x="66.7549%" y="303.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="66.6667%" y="277" width="0.0809%" height="15" fill="rgb(227,94,5)" fg:x="824" fg:w="1"/><text x="66.9167%" y="287.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="66.6667%" y="261" width="0.0809%" height="15" fill="rgb(205,112,38)" fg:x="824" fg:w="1"/><text x="66.9167%" y="271.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (306 samples, 24.76%)</title><rect x="42.2330%" y="373" width="24.7573%" height="15" fill="rgb(231,133,46)" fg:x="522" fg:w="306"/><text x="42.4830%" y="383.50">&lt;regex::regex::string::Regex as core::s..</text></g><g><title>regex::builders::Builder::build_one_string (306 samples, 24.76%)</title><rect x="42.2330%" y="357" width="24.7573%" height="15" fill="rgb(217,16,9)" fg:x="522" fg:w="306"/><text x="42.4830%" y="367.50">regex::builders::Builder::build_one_str..</text></g><g><title>regex_automata::meta::regex::Builder::build (306 samples, 24.76%)</title><rect x="42.2330%" y="341" width="24.7573%" height="15" fill="rgb(249,173,9)" fg:x="522" fg:w="306"/><text x="42.4830%" y="351.50">regex_automata::meta::regex::Builder::b..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (12 samples, 0.97%)</title><rect x="66.0194%" y="325" width="0.9709%" height="15" fill="rgb(205,163,53)" fg:x="816" fg:w="12"/><text x="66.2694%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (11 samples, 0.89%)</title><rect x="66.1003%" y="309" width="0.8900%" height="15" fill="rgb(217,54,41)" fg:x="817" fg:w="11"/><text x="66.3503%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (3 samples, 0.24%)</title><rect x="66.7476%" y="293" width="0.2427%" height="15" fill="rgb(228,216,12)" fg:x="825" fg:w="3"/><text x="66.9976%" y="303.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (2 samples, 0.16%)</title><rect x="66.8285%" y="277" width="0.1618%" height="15" fill="rgb(244,228,15)" fg:x="826" fg:w="2"/><text x="67.0785%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="66.8285%" y="261" width="0.1618%" height="15" fill="rgb(221,176,53)" fg:x="826" fg:w="2"/><text x="67.0785%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="66.8285%" y="245" width="0.1618%" height="15" fill="rgb(205,94,34)" fg:x="826" fg:w="2"/><text x="67.0785%" y="255.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="66.8285%" y="229" width="0.1618%" height="15" fill="rgb(213,110,48)" fg:x="826" fg:w="2"/><text x="67.0785%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="67.1521%" y="341" width="0.1618%" height="15" fill="rgb(236,142,28)" fg:x="830" fg:w="2"/><text x="67.4021%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="67.2330%" y="325" width="0.0809%" height="15" fill="rgb(225,135,29)" fg:x="831" fg:w="1"/><text x="67.4830%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.3139%" y="325" width="0.0809%" height="15" fill="rgb(252,45,31)" fg:x="832" fg:w="1"/><text x="67.5639%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.3948%" y="309" width="0.0809%" height="15" fill="rgb(211,187,50)" fg:x="833" fg:w="1"/><text x="67.6448%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="67.3948%" y="293" width="0.0809%" height="15" fill="rgb(229,109,7)" fg:x="833" fg:w="1"/><text x="67.6448%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (8 samples, 0.65%)</title><rect x="66.9903%" y="373" width="0.6472%" height="15" fill="rgb(251,131,51)" fg:x="828" fg:w="8"/><text x="67.2403%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (7 samples, 0.57%)</title><rect x="67.0712%" y="357" width="0.5663%" height="15" fill="rgb(251,180,35)" fg:x="829" fg:w="7"/><text x="67.3212%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (4 samples, 0.32%)</title><rect x="67.3139%" y="341" width="0.3236%" height="15" fill="rgb(211,46,32)" fg:x="832" fg:w="4"/><text x="67.5639%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.24%)</title><rect x="67.3948%" y="325" width="0.2427%" height="15" fill="rgb(248,123,17)" fg:x="833" fg:w="3"/><text x="67.6448%" y="335.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="67.4757%" y="309" width="0.1618%" height="15" fill="rgb(227,141,18)" fg:x="834" fg:w="2"/><text x="67.7257%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="67.7184%" y="325" width="0.0809%" height="15" fill="rgb(216,102,9)" fg:x="837" fg:w="1"/><text x="67.9684%" y="335.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="67.7184%" y="309" width="0.0809%" height="15" fill="rgb(253,47,13)" fg:x="837" fg:w="1"/><text x="67.9684%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.24%)</title><rect x="67.6375%" y="357" width="0.2427%" height="15" fill="rgb(226,93,23)" fg:x="836" fg:w="3"/><text x="67.8875%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="67.6375%" y="341" width="0.2427%" height="15" fill="rgb(247,104,17)" fg:x="836" fg:w="3"/><text x="67.8875%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="67.7994%" y="325" width="0.0809%" height="15" fill="rgb(233,203,26)" fg:x="838" fg:w="1"/><text x="68.0494%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="67.7994%" y="309" width="0.0809%" height="15" fill="rgb(244,98,49)" fg:x="838" fg:w="1"/><text x="68.0494%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="67.7994%" y="293" width="0.0809%" height="15" fill="rgb(235,134,22)" fg:x="838" fg:w="1"/><text x="68.0494%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="68.2848%" y="277" width="0.1618%" height="15" fill="rgb(221,70,32)" fg:x="844" fg:w="2"/><text x="68.5348%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="68.2848%" y="261" width="0.1618%" height="15" fill="rgb(238,15,50)" fg:x="844" fg:w="2"/><text x="68.5348%" y="271.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="68.2848%" y="245" width="0.1618%" height="15" fill="rgb(215,221,48)" fg:x="844" fg:w="2"/><text x="68.5348%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.4466%" y="277" width="0.0809%" height="15" fill="rgb(236,73,3)" fg:x="846" fg:w="1"/><text x="68.6966%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="68.4466%" y="261" width="0.0809%" height="15" fill="rgb(250,107,11)" fg:x="846" fg:w="1"/><text x="68.6966%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.73%)</title><rect x="68.0421%" y="309" width="0.7282%" height="15" fill="rgb(242,39,14)" fg:x="841" fg:w="9"/><text x="68.2921%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (9 samples, 0.73%)</title><rect x="68.0421%" y="293" width="0.7282%" height="15" fill="rgb(248,164,37)" fg:x="841" fg:w="9"/><text x="68.2921%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="68.5275%" y="277" width="0.2427%" height="15" fill="rgb(217,60,12)" fg:x="847" fg:w="3"/><text x="68.7775%" y="287.50"></text></g><g><title>indefinite::rules::number::Number::check (329 samples, 26.62%)</title><rect x="42.2330%" y="389" width="26.6181%" height="15" fill="rgb(240,125,29)" fg:x="522" fg:w="329"/><text x="42.4830%" y="399.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::is_match_at (15 samples, 1.21%)</title><rect x="67.6375%" y="373" width="1.2136%" height="15" fill="rgb(208,207,28)" fg:x="836" fg:w="15"/><text x="67.8875%" y="383.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (12 samples, 0.97%)</title><rect x="67.8803%" y="357" width="0.9709%" height="15" fill="rgb(209,159,27)" fg:x="839" fg:w="12"/><text x="68.1303%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (10 samples, 0.81%)</title><rect x="68.0421%" y="341" width="0.8091%" height="15" fill="rgb(251,176,53)" fg:x="841" fg:w="10"/><text x="68.2921%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (10 samples, 0.81%)</title><rect x="68.0421%" y="325" width="0.8091%" height="15" fill="rgb(211,85,7)" fg:x="841" fg:w="10"/><text x="68.2921%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="68.7702%" y="309" width="0.0809%" height="15" fill="rgb(216,64,54)" fg:x="850" fg:w="1"/><text x="69.0202%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="68.7702%" y="293" width="0.0809%" height="15" fill="rgb(217,54,24)" fg:x="850" fg:w="1"/><text x="69.0202%" y="303.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="68.8511%" y="341" width="0.0809%" height="15" fill="rgb(208,206,53)" fg:x="851" fg:w="1"/><text x="69.1011%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (2 samples, 0.16%)</title><rect x="68.9320%" y="309" width="0.1618%" height="15" fill="rgb(251,74,39)" fg:x="852" fg:w="2"/><text x="69.1820%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.0129%" y="293" width="0.0809%" height="15" fill="rgb(226,47,5)" fg:x="853" fg:w="1"/><text x="69.2629%" y="303.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="69.1748%" y="293" width="0.1618%" height="15" fill="rgb(234,111,33)" fg:x="855" fg:w="2"/><text x="69.4248%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="69.3366%" y="293" width="0.0809%" height="15" fill="rgb(251,14,10)" fg:x="857" fg:w="1"/><text x="69.5866%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="69.3366%" y="277" width="0.0809%" height="15" fill="rgb(232,43,0)" fg:x="857" fg:w="1"/><text x="69.5866%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="69.3366%" y="261" width="0.0809%" height="15" fill="rgb(222,68,43)" fg:x="857" fg:w="1"/><text x="69.5866%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="69.3366%" y="245" width="0.0809%" height="15" fill="rgb(217,24,23)" fg:x="857" fg:w="1"/><text x="69.5866%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="69.4175%" y="277" width="0.2427%" height="15" fill="rgb(229,209,14)" fg:x="858" fg:w="3"/><text x="69.6675%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="69.4175%" y="293" width="0.3236%" height="15" fill="rgb(250,149,48)" fg:x="858" fg:w="4"/><text x="69.6675%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="69.6602%" y="277" width="0.0809%" height="15" fill="rgb(210,120,37)" fg:x="861" fg:w="1"/><text x="69.9102%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="69.6602%" y="261" width="0.0809%" height="15" fill="rgb(210,21,8)" fg:x="861" fg:w="1"/><text x="69.9102%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (1 samples, 0.08%)</title><rect x="69.7411%" y="293" width="0.0809%" height="15" fill="rgb(243,145,7)" fg:x="862" fg:w="1"/><text x="69.9911%" y="303.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="69.8220%" y="213" width="0.0809%" height="15" fill="rgb(238,178,32)" fg:x="863" fg:w="1"/><text x="70.0720%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="69.8220%" y="261" width="0.1618%" height="15" fill="rgb(222,4,10)" fg:x="863" fg:w="2"/><text x="70.0720%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="69.8220%" y="245" width="0.1618%" height="15" fill="rgb(239,7,37)" fg:x="863" fg:w="2"/><text x="70.0720%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="69.8220%" y="229" width="0.1618%" height="15" fill="rgb(215,31,37)" fg:x="863" fg:w="2"/><text x="70.0720%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="69.9029%" y="213" width="0.0809%" height="15" fill="rgb(224,83,33)" fg:x="864" fg:w="1"/><text x="70.1529%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="69.8220%" y="277" width="0.4045%" height="15" fill="rgb(239,55,3)" fg:x="863" fg:w="5"/><text x="70.0720%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (3 samples, 0.24%)</title><rect x="69.9838%" y="261" width="0.2427%" height="15" fill="rgb(247,92,11)" fg:x="865" fg:w="3"/><text x="70.2338%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="70.0647%" y="245" width="0.1618%" height="15" fill="rgb(239,200,7)" fg:x="866" fg:w="2"/><text x="70.3147%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="70.1456%" y="229" width="0.0809%" height="15" fill="rgb(227,115,8)" fg:x="867" fg:w="1"/><text x="70.3956%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="70.1456%" y="213" width="0.0809%" height="15" fill="rgb(215,189,27)" fg:x="867" fg:w="1"/><text x="70.3956%" y="223.50"></text></g><g><title>__libc_calloc (2 samples, 0.16%)</title><rect x="70.4693%" y="261" width="0.1618%" height="15" fill="rgb(251,216,39)" fg:x="871" fg:w="2"/><text x="70.7193%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="70.6311%" y="261" width="0.0809%" height="15" fill="rgb(207,29,47)" fg:x="873" fg:w="1"/><text x="70.8811%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="70.7120%" y="261" width="0.2427%" height="15" fill="rgb(210,71,34)" fg:x="874" fg:w="3"/><text x="70.9620%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="70.9547%" y="261" width="0.0809%" height="15" fill="rgb(253,217,51)" fg:x="877" fg:w="1"/><text x="71.2047%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (16 samples, 1.29%)</title><rect x="69.8220%" y="293" width="1.2945%" height="15" fill="rgb(222,117,46)" fg:x="863" fg:w="16"/><text x="70.0720%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.89%)</title><rect x="70.2265%" y="277" width="0.8900%" height="15" fill="rgb(226,132,6)" fg:x="868" fg:w="11"/><text x="70.4765%" y="287.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="71.0356%" y="261" width="0.0809%" height="15" fill="rgb(254,145,51)" fg:x="878" fg:w="1"/><text x="71.2856%" y="271.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="71.0356%" y="245" width="0.0809%" height="15" fill="rgb(231,199,27)" fg:x="878" fg:w="1"/><text x="71.2856%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (26 samples, 2.10%)</title><rect x="69.0939%" y="309" width="2.1036%" height="15" fill="rgb(245,158,14)" fg:x="854" fg:w="26"/><text x="69.3439%" y="319.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="71.1165%" y="293" width="0.0809%" height="15" fill="rgb(240,113,14)" fg:x="879" fg:w="1"/><text x="71.3665%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="71.1165%" y="277" width="0.0809%" height="15" fill="rgb(210,20,13)" fg:x="879" fg:w="1"/><text x="71.3665%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="71.1165%" y="261" width="0.0809%" height="15" fill="rgb(241,144,13)" fg:x="879" fg:w="1"/><text x="71.3665%" y="271.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="71.6828%" y="261" width="0.1618%" height="15" fill="rgb(235,43,34)" fg:x="886" fg:w="2"/><text x="71.9328%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="71.7638%" y="245" width="0.0809%" height="15" fill="rgb(208,36,20)" fg:x="887" fg:w="1"/><text x="72.0138%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.7638%" y="229" width="0.0809%" height="15" fill="rgb(239,204,10)" fg:x="887" fg:w="1"/><text x="72.0138%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="71.7638%" y="213" width="0.0809%" height="15" fill="rgb(217,84,43)" fg:x="887" fg:w="1"/><text x="72.0138%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (7 samples, 0.57%)</title><rect x="71.3592%" y="277" width="0.5663%" height="15" fill="rgb(241,170,50)" fg:x="882" fg:w="7"/><text x="71.6092%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="71.8447%" y="261" width="0.0809%" height="15" fill="rgb(226,205,29)" fg:x="888" fg:w="1"/><text x="72.0947%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="71.8447%" y="245" width="0.0809%" height="15" fill="rgb(233,113,1)" fg:x="888" fg:w="1"/><text x="72.0947%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.8447%" y="229" width="0.0809%" height="15" fill="rgb(253,98,13)" fg:x="888" fg:w="1"/><text x="72.0947%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.8447%" y="213" width="0.0809%" height="15" fill="rgb(211,115,12)" fg:x="888" fg:w="1"/><text x="72.0947%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (11 samples, 0.89%)</title><rect x="71.1974%" y="309" width="0.8900%" height="15" fill="rgb(208,12,16)" fg:x="880" fg:w="11"/><text x="71.4474%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (11 samples, 0.89%)</title><rect x="71.1974%" y="293" width="0.8900%" height="15" fill="rgb(237,193,54)" fg:x="880" fg:w="11"/><text x="71.4474%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="71.9256%" y="277" width="0.1618%" height="15" fill="rgb(243,22,42)" fg:x="889" fg:w="2"/><text x="72.1756%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="72.0874%" y="277" width="0.0809%" height="15" fill="rgb(233,151,36)" fg:x="891" fg:w="1"/><text x="72.3374%" y="287.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="72.0874%" y="261" width="0.0809%" height="15" fill="rgb(237,57,45)" fg:x="891" fg:w="1"/><text x="72.3374%" y="271.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (42 samples, 3.40%)</title><rect x="68.8511%" y="357" width="3.3981%" height="15" fill="rgb(221,88,17)" fg:x="851" fg:w="42"/><text x="69.1011%" y="367.50">&lt;re..</text></g><g><title>regex::builders::Builder::build_one_string (41 samples, 3.32%)</title><rect x="68.9320%" y="341" width="3.3172%" height="15" fill="rgb(230,79,15)" fg:x="852" fg:w="41"/><text x="69.1820%" y="351.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (41 samples, 3.32%)</title><rect x="68.9320%" y="325" width="3.3172%" height="15" fill="rgb(213,57,13)" fg:x="852" fg:w="41"/><text x="69.1820%" y="335.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="72.0874%" y="309" width="0.1618%" height="15" fill="rgb(222,116,39)" fg:x="891" fg:w="2"/><text x="72.3374%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="72.0874%" y="293" width="0.1618%" height="15" fill="rgb(245,107,2)" fg:x="891" fg:w="2"/><text x="72.3374%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="72.1683%" y="277" width="0.0809%" height="15" fill="rgb(238,1,10)" fg:x="892" fg:w="1"/><text x="72.4183%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="72.1683%" y="261" width="0.0809%" height="15" fill="rgb(249,4,48)" fg:x="892" fg:w="1"/><text x="72.4183%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.1683%" y="245" width="0.0809%" height="15" fill="rgb(223,151,18)" fg:x="892" fg:w="1"/><text x="72.4183%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="72.2492%" y="357" width="0.0809%" height="15" fill="rgb(227,65,43)" fg:x="893" fg:w="1"/><text x="72.4992%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="72.2492%" y="341" width="0.0809%" height="15" fill="rgb(218,40,45)" fg:x="893" fg:w="1"/><text x="72.4992%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="72.2492%" y="325" width="0.0809%" height="15" fill="rgb(252,121,31)" fg:x="893" fg:w="1"/><text x="72.4992%" y="335.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="72.2492%" y="309" width="0.0809%" height="15" fill="rgb(219,158,43)" fg:x="893" fg:w="1"/><text x="72.4992%" y="319.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="72.2492%" y="293" width="0.0809%" height="15" fill="rgb(231,162,42)" fg:x="893" fg:w="1"/><text x="72.4992%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="72.3301%" y="357" width="0.2427%" height="15" fill="rgb(217,179,25)" fg:x="894" fg:w="3"/><text x="72.5801%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="72.3301%" y="341" width="0.2427%" height="15" fill="rgb(206,212,31)" fg:x="894" fg:w="3"/><text x="72.5801%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="72.3301%" y="325" width="0.2427%" height="15" fill="rgb(235,144,12)" fg:x="894" fg:w="3"/><text x="72.5801%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.24%)</title><rect x="72.3301%" y="309" width="0.2427%" height="15" fill="rgb(213,51,10)" fg:x="894" fg:w="3"/><text x="72.5801%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.4919%" y="293" width="0.0809%" height="15" fill="rgb(231,145,14)" fg:x="896" fg:w="1"/><text x="72.7419%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.8155%" y="293" width="0.0809%" height="15" fill="rgb(235,15,28)" fg:x="900" fg:w="1"/><text x="73.0655%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="72.8155%" y="277" width="0.0809%" height="15" fill="rgb(237,206,10)" fg:x="900" fg:w="1"/><text x="73.0655%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="73.2201%" y="277" width="0.1618%" height="15" fill="rgb(236,227,27)" fg:x="905" fg:w="2"/><text x="73.4701%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.3010%" y="261" width="0.0809%" height="15" fill="rgb(246,83,35)" fg:x="906" fg:w="1"/><text x="73.5510%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="73.3010%" y="245" width="0.0809%" height="15" fill="rgb(220,136,24)" fg:x="906" fg:w="1"/><text x="73.5510%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.73%)</title><rect x="72.7346%" y="309" width="0.7282%" height="15" fill="rgb(217,3,25)" fg:x="899" fg:w="9"/><text x="72.9846%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.57%)</title><rect x="72.8964%" y="293" width="0.5663%" height="15" fill="rgb(239,24,14)" fg:x="901" fg:w="7"/><text x="73.1464%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="73.3819%" y="277" width="0.0809%" height="15" fill="rgb(244,16,53)" fg:x="907" fg:w="1"/><text x="73.6319%" y="287.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (681 samples, 55.10%)</title><rect x="18.5275%" y="469" width="55.0971%" height="15" fill="rgb(208,175,44)" fg:x="229" fg:w="681"/><text x="18.7775%" y="479.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEnt..</text></g><g><title>plugins_core::looking::model::qualify_name (667 samples, 53.96%)</title><rect x="19.6602%" y="453" width="53.9644%" height="15" fill="rgb(252,18,48)" fg:x="243" fg:w="667"/><text x="19.9102%" y="463.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (667 samples, 53.96%)</title><rect x="19.6602%" y="437" width="53.9644%" height="15" fill="rgb(234,199,32)" fg:x="243" fg:w="667"/><text x="19.9102%" y="447.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (667 samples, 53.96%)</title><rect x="19.6602%" y="421" width="53.9644%" height="15" fill="rgb(225,77,54)" fg:x="243" fg:w="667"/><text x="19.9102%" y="431.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (665 samples, 53.80%)</title><rect x="19.8220%" y="405" width="53.8026%" height="15" fill="rgb(225,42,25)" fg:x="245" fg:w="665"/><text x="20.0720%" y="415.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (59 samples, 4.77%)</title><rect x="68.8511%" y="389" width="4.7735%" height="15" fill="rgb(242,227,46)" fg:x="851" fg:w="59"/><text x="69.1011%" y="399.50">indefi..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (59 samples, 4.77%)</title><rect x="68.8511%" y="373" width="4.7735%" height="15" fill="rgb(246,197,35)" fg:x="851" fg:w="59"/><text x="69.1011%" y="383.50">indefi..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (13 samples, 1.05%)</title><rect x="72.5728%" y="357" width="1.0518%" height="15" fill="rgb(215,159,26)" fg:x="897" fg:w="13"/><text x="72.8228%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (13 samples, 1.05%)</title><rect x="72.5728%" y="341" width="1.0518%" height="15" fill="rgb(212,194,50)" fg:x="897" fg:w="13"/><text x="72.8228%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (13 samples, 1.05%)</title><rect x="72.5728%" y="325" width="1.0518%" height="15" fill="rgb(246,132,1)" fg:x="897" fg:w="13"/><text x="72.8228%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (2 samples, 0.16%)</title><rect x="73.4628%" y="309" width="0.1618%" height="15" fill="rgb(217,71,7)" fg:x="908" fg:w="2"/><text x="73.7128%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (2 samples, 0.16%)</title><rect x="73.4628%" y="293" width="0.1618%" height="15" fill="rgb(252,59,32)" fg:x="908" fg:w="2"/><text x="73.7128%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="73.5437%" y="277" width="0.0809%" height="15" fill="rgb(253,204,25)" fg:x="909" fg:w="1"/><text x="73.7937%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="73.5437%" y="261" width="0.0809%" height="15" fill="rgb(232,21,16)" fg:x="909" fg:w="1"/><text x="73.7937%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.5437%" y="245" width="0.0809%" height="15" fill="rgb(248,90,29)" fg:x="909" fg:w="1"/><text x="73.7937%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::into_entry (1 samples, 0.08%)</title><rect x="73.6246%" y="469" width="0.0809%" height="15" fill="rgb(249,223,7)" fg:x="910" fg:w="1"/><text x="73.8746%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="73.6246%" y="453" width="0.0809%" height="15" fill="rgb(231,119,42)" fg:x="910" fg:w="1"/><text x="73.8746%" y="463.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="73.6246%" y="437" width="0.0809%" height="15" fill="rgb(215,41,35)" fg:x="910" fg:w="1"/><text x="73.8746%" y="447.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="73.6246%" y="421" width="0.0809%" height="15" fill="rgb(220,44,45)" fg:x="910" fg:w="1"/><text x="73.8746%" y="431.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="73.6246%" y="405" width="0.0809%" height="15" fill="rgb(253,197,36)" fg:x="910" fg:w="1"/><text x="73.8746%" y="415.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="73.6246%" y="389" width="0.0809%" height="15" fill="rgb(245,225,54)" fg:x="910" fg:w="1"/><text x="73.8746%" y="399.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="73.6246%" y="373" width="0.0809%" height="15" fill="rgb(239,94,37)" fg:x="910" fg:w="1"/><text x="73.8746%" y="383.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="73.6246%" y="357" width="0.0809%" height="15" fill="rgb(242,217,10)" fg:x="910" fg:w="1"/><text x="73.8746%" y="367.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="73.6246%" y="341" width="0.0809%" height="15" fill="rgb(250,193,7)" fg:x="910" fg:w="1"/><text x="73.8746%" y="351.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="73.6246%" y="325" width="0.0809%" height="15" fill="rgb(230,104,19)" fg:x="910" fg:w="1"/><text x="73.8746%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="73.6246%" y="309" width="0.0809%" height="15" fill="rgb(230,181,4)" fg:x="910" fg:w="1"/><text x="73.8746%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="73.6246%" y="293" width="0.0809%" height="15" fill="rgb(216,219,49)" fg:x="910" fg:w="1"/><text x="73.8746%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.7055%" y="453" width="0.0809%" height="15" fill="rgb(254,144,0)" fg:x="911" fg:w="1"/><text x="73.9555%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (2 samples, 0.16%)</title><rect x="73.7055%" y="469" width="0.1618%" height="15" fill="rgb(205,209,38)" fg:x="911" fg:w="2"/><text x="73.9555%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="73.7864%" y="453" width="0.0809%" height="15" fill="rgb(240,21,42)" fg:x="912" fg:w="1"/><text x="74.0364%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.7864%" y="437" width="0.0809%" height="15" fill="rgb(241,132,3)" fg:x="912" fg:w="1"/><text x="74.0364%" y="447.50"></text></g><g><title>&lt;plugins_core::moving::model::Occupyable as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="73.8673%" y="437" width="0.0809%" height="15" fill="rgb(225,14,2)" fg:x="913" fg:w="1"/><text x="74.1173%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="73.8673%" y="421" width="0.0809%" height="15" fill="rgb(210,141,35)" fg:x="913" fg:w="1"/><text x="74.1173%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="73.8673%" y="405" width="0.0809%" height="15" fill="rgb(251,14,44)" fg:x="913" fg:w="1"/><text x="74.1173%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="73.8673%" y="389" width="0.0809%" height="15" fill="rgb(247,48,18)" fg:x="913" fg:w="1"/><text x="74.1173%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="73.8673%" y="373" width="0.0809%" height="15" fill="rgb(225,0,40)" fg:x="913" fg:w="1"/><text x="74.1173%" y="383.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="73.8673%" y="357" width="0.0809%" height="15" fill="rgb(221,31,33)" fg:x="913" fg:w="1"/><text x="74.1173%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (777 samples, 62.86%)</title><rect x="11.1650%" y="645" width="62.8641%" height="15" fill="rgb(237,42,40)" fg:x="138" fg:w="777"/><text x="11.4150%" y="655.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (688 samples, 55.66%)</title><rect x="18.3657%" y="629" width="55.6634%" height="15" fill="rgb(233,51,29)" fg:x="227" fg:w="688"/><text x="18.6157%" y="639.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (688 samples, 55.66%)</title><rect x="18.3657%" y="613" width="55.6634%" height="15" fill="rgb(226,58,20)" fg:x="227" fg:w="688"/><text x="18.6157%" y="623.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (688 samples, 55.66%)</title><rect x="18.3657%" y="597" width="55.6634%" height="15" fill="rgb(208,98,7)" fg:x="227" fg:w="688"/><text x="18.6157%" y="607.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (688 samples, 55.66%)</title><rect x="18.3657%" y="581" width="55.6634%" height="15" fill="rgb(228,143,44)" fg:x="227" fg:w="688"/><text x="18.6157%" y="591.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (688 samples, 55.66%)</title><rect x="18.3657%" y="565" width="55.6634%" height="15" fill="rgb(246,55,38)" fg:x="227" fg:w="688"/><text x="18.6157%" y="575.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (688 samples, 55.66%)</title><rect x="18.3657%" y="549" width="55.6634%" height="15" fill="rgb(247,87,16)" fg:x="227" fg:w="688"/><text x="18.6157%" y="559.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (688 samples, 55.66%)</title><rect x="18.3657%" y="533" width="55.6634%" height="15" fill="rgb(234,129,42)" fg:x="227" fg:w="688"/><text x="18.6157%" y="543.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (687 samples, 55.58%)</title><rect x="18.4466%" y="517" width="55.5825%" height="15" fill="rgb(220,82,16)" fg:x="228" fg:w="687"/><text x="18.6966%" y="527.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (687 samples, 55.58%)</title><rect x="18.4466%" y="501" width="55.5825%" height="15" fill="rgb(211,88,4)" fg:x="228" fg:w="687"/><text x="18.6966%" y="511.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (686 samples, 55.50%)</title><rect x="18.5275%" y="485" width="55.5016%" height="15" fill="rgb(248,151,21)" fg:x="229" fg:w="686"/><text x="18.7775%" y="495.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="73.8673%" y="469" width="0.1618%" height="15" fill="rgb(238,163,6)" fg:x="913" fg:w="2"/><text x="74.1173%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="73.8673%" y="453" width="0.1618%" height="15" fill="rgb(209,183,11)" fg:x="913" fg:w="2"/><text x="74.1173%" y="463.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="73.9482%" y="437" width="0.0809%" height="15" fill="rgb(219,37,20)" fg:x="914" fg:w="1"/><text x="74.1982%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="74.0291%" y="613" width="0.0809%" height="15" fill="rgb(210,158,4)" fg:x="915" fg:w="1"/><text x="74.2791%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="74.0291%" y="597" width="0.0809%" height="15" fill="rgb(221,167,53)" fg:x="915" fg:w="1"/><text x="74.2791%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="74.0291%" y="581" width="0.0809%" height="15" fill="rgb(237,151,45)" fg:x="915" fg:w="1"/><text x="74.2791%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.0291%" y="565" width="0.0809%" height="15" fill="rgb(231,39,3)" fg:x="915" fg:w="1"/><text x="74.2791%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.0291%" y="549" width="0.0809%" height="15" fill="rgb(212,167,28)" fg:x="915" fg:w="1"/><text x="74.2791%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.0291%" y="533" width="0.0809%" height="15" fill="rgb(232,178,8)" fg:x="915" fg:w="1"/><text x="74.2791%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.0291%" y="517" width="0.0809%" height="15" fill="rgb(225,151,20)" fg:x="915" fg:w="1"/><text x="74.2791%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.0291%" y="501" width="0.0809%" height="15" fill="rgb(238,3,37)" fg:x="915" fg:w="1"/><text x="74.2791%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.0291%" y="485" width="0.0809%" height="15" fill="rgb(251,147,42)" fg:x="915" fg:w="1"/><text x="74.2791%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.0291%" y="469" width="0.0809%" height="15" fill="rgb(208,173,10)" fg:x="915" fg:w="1"/><text x="74.2791%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.0291%" y="453" width="0.0809%" height="15" fill="rgb(246,225,4)" fg:x="915" fg:w="1"/><text x="74.2791%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.0291%" y="437" width="0.0809%" height="15" fill="rgb(248,102,6)" fg:x="915" fg:w="1"/><text x="74.2791%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.0291%" y="421" width="0.0809%" height="15" fill="rgb(232,6,21)" fg:x="915" fg:w="1"/><text x="74.2791%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.0291%" y="405" width="0.0809%" height="15" fill="rgb(221,179,22)" fg:x="915" fg:w="1"/><text x="74.2791%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.0291%" y="389" width="0.0809%" height="15" fill="rgb(252,50,20)" fg:x="915" fg:w="1"/><text x="74.2791%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.0291%" y="373" width="0.0809%" height="15" fill="rgb(222,56,38)" fg:x="915" fg:w="1"/><text x="74.2791%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.0291%" y="357" width="0.0809%" height="15" fill="rgb(206,193,29)" fg:x="915" fg:w="1"/><text x="74.2791%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.0291%" y="341" width="0.0809%" height="15" fill="rgb(239,192,45)" fg:x="915" fg:w="1"/><text x="74.2791%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.0291%" y="325" width="0.0809%" height="15" fill="rgb(254,18,36)" fg:x="915" fg:w="1"/><text x="74.2791%" y="335.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.1100%" y="453" width="0.0809%" height="15" fill="rgb(221,127,11)" fg:x="916" fg:w="1"/><text x="74.3600%" y="463.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="74.1100%" y="597" width="0.1618%" height="15" fill="rgb(234,146,35)" fg:x="916" fg:w="2"/><text x="74.3600%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="74.1100%" y="581" width="0.1618%" height="15" fill="rgb(254,201,37)" fg:x="916" fg:w="2"/><text x="74.3600%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.1100%" y="565" width="0.1618%" height="15" fill="rgb(211,202,23)" fg:x="916" fg:w="2"/><text x="74.3600%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="74.1100%" y="549" width="0.1618%" height="15" fill="rgb(237,91,2)" fg:x="916" fg:w="2"/><text x="74.3600%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.1100%" y="533" width="0.1618%" height="15" fill="rgb(226,228,36)" fg:x="916" fg:w="2"/><text x="74.3600%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="74.1100%" y="517" width="0.1618%" height="15" fill="rgb(213,63,50)" fg:x="916" fg:w="2"/><text x="74.3600%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.1100%" y="501" width="0.1618%" height="15" fill="rgb(235,194,19)" fg:x="916" fg:w="2"/><text x="74.3600%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="74.1100%" y="485" width="0.1618%" height="15" fill="rgb(207,204,18)" fg:x="916" fg:w="2"/><text x="74.3600%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.1100%" y="469" width="0.1618%" height="15" fill="rgb(248,8,7)" fg:x="916" fg:w="2"/><text x="74.3600%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.1909%" y="453" width="0.0809%" height="15" fill="rgb(223,145,47)" fg:x="917" fg:w="1"/><text x="74.4409%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.1909%" y="437" width="0.0809%" height="15" fill="rgb(228,84,11)" fg:x="917" fg:w="1"/><text x="74.4409%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.1909%" y="421" width="0.0809%" height="15" fill="rgb(218,76,45)" fg:x="917" fg:w="1"/><text x="74.4409%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.2718%" y="533" width="0.0809%" height="15" fill="rgb(223,80,15)" fg:x="918" fg:w="1"/><text x="74.5218%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (5 samples, 0.40%)</title><rect x="74.0291%" y="645" width="0.4045%" height="15" fill="rgb(219,218,33)" fg:x="915" fg:w="5"/><text x="74.2791%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="74.0291%" y="629" width="0.4045%" height="15" fill="rgb(208,51,11)" fg:x="915" fg:w="5"/><text x="74.2791%" y="639.50"></text></g><g><title>kernel::model::entity::Entity::from_str (4 samples, 0.32%)</title><rect x="74.1100%" y="613" width="0.3236%" height="15" fill="rgb(229,165,39)" fg:x="916" fg:w="4"/><text x="74.3600%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="74.2718%" y="597" width="0.1618%" height="15" fill="rgb(241,100,24)" fg:x="918" fg:w="2"/><text x="74.5218%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.2718%" y="581" width="0.1618%" height="15" fill="rgb(228,14,23)" fg:x="918" fg:w="2"/><text x="74.5218%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="74.2718%" y="565" width="0.1618%" height="15" fill="rgb(247,116,52)" fg:x="918" fg:w="2"/><text x="74.5218%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.2718%" y="549" width="0.1618%" height="15" fill="rgb(216,149,33)" fg:x="918" fg:w="2"/><text x="74.5218%" y="559.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.3528%" y="533" width="0.0809%" height="15" fill="rgb(238,142,29)" fg:x="919" fg:w="1"/><text x="74.6028%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.3528%" y="517" width="0.0809%" height="15" fill="rgb(224,83,40)" fg:x="919" fg:w="1"/><text x="74.6028%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.3528%" y="501" width="0.0809%" height="15" fill="rgb(234,165,11)" fg:x="919" fg:w="1"/><text x="74.6028%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.3528%" y="485" width="0.0809%" height="15" fill="rgb(215,96,23)" fg:x="919" fg:w="1"/><text x="74.6028%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.3528%" y="469" width="0.0809%" height="15" fill="rgb(233,179,26)" fg:x="919" fg:w="1"/><text x="74.6028%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.3528%" y="453" width="0.0809%" height="15" fill="rgb(225,129,33)" fg:x="919" fg:w="1"/><text x="74.6028%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.3528%" y="437" width="0.0809%" height="15" fill="rgb(237,49,13)" fg:x="919" fg:w="1"/><text x="74.6028%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.3528%" y="421" width="0.0809%" height="15" fill="rgb(211,3,31)" fg:x="919" fg:w="1"/><text x="74.6028%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.3528%" y="405" width="0.0809%" height="15" fill="rgb(216,152,19)" fg:x="919" fg:w="1"/><text x="74.6028%" y="415.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="74.3528%" y="389" width="0.0809%" height="15" fill="rgb(251,121,35)" fg:x="919" fg:w="1"/><text x="74.6028%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="74.4337%" y="597" width="0.0809%" height="15" fill="rgb(210,217,47)" fg:x="920" fg:w="1"/><text x="74.6837%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="74.4337%" y="581" width="0.0809%" height="15" fill="rgb(244,116,22)" fg:x="920" fg:w="1"/><text x="74.6837%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="74.4337%" y="565" width="0.0809%" height="15" fill="rgb(228,17,21)" fg:x="920" fg:w="1"/><text x="74.6837%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.4337%" y="549" width="0.0809%" height="15" fill="rgb(240,149,34)" fg:x="920" fg:w="1"/><text x="74.6837%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.4337%" y="533" width="0.0809%" height="15" fill="rgb(208,125,47)" fg:x="920" fg:w="1"/><text x="74.6837%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.4337%" y="517" width="0.0809%" height="15" fill="rgb(249,186,39)" fg:x="920" fg:w="1"/><text x="74.6837%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.4337%" y="501" width="0.0809%" height="15" fill="rgb(240,220,33)" fg:x="920" fg:w="1"/><text x="74.6837%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="74.4337%" y="485" width="0.0809%" height="15" fill="rgb(243,110,23)" fg:x="920" fg:w="1"/><text x="74.6837%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.4337%" y="469" width="0.0809%" height="15" fill="rgb(219,163,46)" fg:x="920" fg:w="1"/><text x="74.6837%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.4337%" y="453" width="0.0809%" height="15" fill="rgb(216,126,30)" fg:x="920" fg:w="1"/><text x="74.6837%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.5146%" y="501" width="0.0809%" height="15" fill="rgb(208,139,11)" fg:x="921" fg:w="1"/><text x="74.7646%" y="511.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="74.5146%" y="581" width="0.1618%" height="15" fill="rgb(213,118,36)" fg:x="921" fg:w="2"/><text x="74.7646%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="74.5146%" y="565" width="0.1618%" height="15" fill="rgb(226,43,17)" fg:x="921" fg:w="2"/><text x="74.7646%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.5146%" y="549" width="0.1618%" height="15" fill="rgb(254,217,4)" fg:x="921" fg:w="2"/><text x="74.7646%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="74.5146%" y="533" width="0.1618%" height="15" fill="rgb(210,134,47)" fg:x="921" fg:w="2"/><text x="74.7646%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.5146%" y="517" width="0.1618%" height="15" fill="rgb(237,24,49)" fg:x="921" fg:w="2"/><text x="74.7646%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.5955%" y="501" width="0.0809%" height="15" fill="rgb(251,39,46)" fg:x="922" fg:w="1"/><text x="74.8455%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.5955%" y="485" width="0.0809%" height="15" fill="rgb(251,220,3)" fg:x="922" fg:w="1"/><text x="74.8455%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.5955%" y="469" width="0.0809%" height="15" fill="rgb(228,105,12)" fg:x="922" fg:w="1"/><text x="74.8455%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.5955%" y="453" width="0.0809%" height="15" fill="rgb(215,196,1)" fg:x="922" fg:w="1"/><text x="74.8455%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.5955%" y="437" width="0.0809%" height="15" fill="rgb(214,33,39)" fg:x="922" fg:w="1"/><text x="74.8455%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.5955%" y="421" width="0.0809%" height="15" fill="rgb(220,19,52)" fg:x="922" fg:w="1"/><text x="74.8455%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.5955%" y="405" width="0.0809%" height="15" fill="rgb(221,78,38)" fg:x="922" fg:w="1"/><text x="74.8455%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.5955%" y="389" width="0.0809%" height="15" fill="rgb(253,30,16)" fg:x="922" fg:w="1"/><text x="74.8455%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.5955%" y="373" width="0.0809%" height="15" fill="rgb(242,65,0)" fg:x="922" fg:w="1"/><text x="74.8455%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.5955%" y="357" width="0.0809%" height="15" fill="rgb(235,201,12)" fg:x="922" fg:w="1"/><text x="74.8455%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.5955%" y="341" width="0.0809%" height="15" fill="rgb(233,161,9)" fg:x="922" fg:w="1"/><text x="74.8455%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.5955%" y="325" width="0.0809%" height="15" fill="rgb(241,207,41)" fg:x="922" fg:w="1"/><text x="74.8455%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.5955%" y="309" width="0.0809%" height="15" fill="rgb(212,69,46)" fg:x="922" fg:w="1"/><text x="74.8455%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="74.7573%" y="549" width="0.0809%" height="15" fill="rgb(239,69,45)" fg:x="924" fg:w="1"/><text x="75.0073%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="74.8382%" y="549" width="0.0809%" height="15" fill="rgb(242,117,48)" fg:x="925" fg:w="1"/><text x="75.0882%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.8382%" y="533" width="0.0809%" height="15" fill="rgb(228,41,36)" fg:x="925" fg:w="1"/><text x="75.0882%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.8382%" y="517" width="0.0809%" height="15" fill="rgb(212,3,32)" fg:x="925" fg:w="1"/><text x="75.0882%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (7 samples, 0.57%)</title><rect x="74.4337%" y="645" width="0.5663%" height="15" fill="rgb(233,41,49)" fg:x="920" fg:w="7"/><text x="74.6837%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (7 samples, 0.57%)</title><rect x="74.4337%" y="629" width="0.5663%" height="15" fill="rgb(252,170,49)" fg:x="920" fg:w="7"/><text x="74.6837%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.57%)</title><rect x="74.4337%" y="613" width="0.5663%" height="15" fill="rgb(229,53,26)" fg:x="920" fg:w="7"/><text x="74.6837%" y="623.50"></text></g><g><title>kernel::model::entity::Entity::from_str (6 samples, 0.49%)</title><rect x="74.5146%" y="597" width="0.4854%" height="15" fill="rgb(217,157,12)" fg:x="921" fg:w="6"/><text x="74.7646%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="74.6764%" y="581" width="0.3236%" height="15" fill="rgb(227,17,9)" fg:x="923" fg:w="4"/><text x="74.9264%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="74.6764%" y="565" width="0.3236%" height="15" fill="rgb(218,84,12)" fg:x="923" fg:w="4"/><text x="74.9264%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.9191%" y="549" width="0.0809%" height="15" fill="rgb(212,79,24)" fg:x="926" fg:w="1"/><text x="75.1691%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.9191%" y="533" width="0.0809%" height="15" fill="rgb(217,222,37)" fg:x="926" fg:w="1"/><text x="75.1691%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (928 samples, 75.08%)</title><rect x="0.0000%" y="709" width="75.0809%" height="15" fill="rgb(246,208,8)" fg:x="0" fg:w="928"/><text x="0.2500%" y="719.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (928 samples, 75.08%)</title><rect x="0.0000%" y="693" width="75.0809%" height="15" fill="rgb(244,133,10)" fg:x="0" fg:w="928"/><text x="0.2500%" y="703.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (928 samples, 75.08%)</title><rect x="0.0000%" y="677" width="75.0809%" height="15" fill="rgb(209,219,41)" fg:x="0" fg:w="928"/><text x="0.2500%" y="687.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (791 samples, 64.00%)</title><rect x="11.0841%" y="661" width="63.9968%" height="15" fill="rgb(253,175,45)" fg:x="137" fg:w="791"/><text x="11.3341%" y="671.50">engine::session::Session::evaluate_and_perform</text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="75.0000%" y="645" width="0.0809%" height="15" fill="rgb(235,100,37)" fg:x="927" fg:w="1"/><text x="75.2500%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="75.0809%" y="533" width="0.1618%" height="15" fill="rgb(225,87,19)" fg:x="928" fg:w="2"/><text x="75.3309%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.1618%" y="517" width="0.0809%" height="15" fill="rgb(217,152,17)" fg:x="929" fg:w="1"/><text x="75.4118%" y="527.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="75.0809%" y="661" width="0.2427%" height="15" fill="rgb(235,72,13)" fg:x="928" fg:w="3"/><text x="75.3309%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (3 samples, 0.24%)</title><rect x="75.0809%" y="645" width="0.2427%" height="15" fill="rgb(233,140,18)" fg:x="928" fg:w="3"/><text x="75.3309%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="75.0809%" y="629" width="0.2427%" height="15" fill="rgb(207,212,28)" fg:x="928" fg:w="3"/><text x="75.3309%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (3 samples, 0.24%)</title><rect x="75.0809%" y="613" width="0.2427%" height="15" fill="rgb(220,130,25)" fg:x="928" fg:w="3"/><text x="75.3309%" y="623.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="75.0809%" y="597" width="0.2427%" height="15" fill="rgb(205,55,34)" fg:x="928" fg:w="3"/><text x="75.3309%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="75.0809%" y="581" width="0.2427%" height="15" fill="rgb(237,54,35)" fg:x="928" fg:w="3"/><text x="75.3309%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="75.0809%" y="565" width="0.2427%" height="15" fill="rgb(208,67,23)" fg:x="928" fg:w="3"/><text x="75.3309%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="75.0809%" y="549" width="0.2427%" height="15" fill="rgb(206,207,50)" fg:x="928" fg:w="3"/><text x="75.3309%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.2427%" y="533" width="0.0809%" height="15" fill="rgb(213,211,42)" fg:x="930" fg:w="1"/><text x="75.4927%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.2427%" y="517" width="0.0809%" height="15" fill="rgb(252,197,50)" fg:x="930" fg:w="1"/><text x="75.4927%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.2427%" y="501" width="0.0809%" height="15" fill="rgb(251,211,41)" fg:x="930" fg:w="1"/><text x="75.4927%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.2427%" y="485" width="0.0809%" height="15" fill="rgb(229,211,5)" fg:x="930" fg:w="1"/><text x="75.4927%" y="495.50"></text></g><g><title>&lt;kernel::session::SetSession as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.3236%" y="613" width="0.0809%" height="15" fill="rgb(239,36,31)" fg:x="931" fg:w="1"/><text x="75.5736%" y="623.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (3 samples, 0.24%)</title><rect x="75.3236%" y="661" width="0.2427%" height="15" fill="rgb(248,67,31)" fg:x="931" fg:w="3"/><text x="75.5736%" y="671.50"></text></g><g><title>engine::session::Session::new (3 samples, 0.24%)</title><rect x="75.3236%" y="645" width="0.2427%" height="15" fill="rgb(249,55,44)" fg:x="931" fg:w="3"/><text x="75.5736%" y="655.50"></text></g><g><title>engine::session::Session::initialize (3 samples, 0.24%)</title><rect x="75.3236%" y="629" width="0.2427%" height="15" fill="rgb(216,82,12)" fg:x="931" fg:w="3"/><text x="75.5736%" y="639.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (2 samples, 0.16%)</title><rect x="75.4045%" y="613" width="0.1618%" height="15" fill="rgb(242,174,1)" fg:x="932" fg:w="2"/><text x="75.6545%" y="623.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (2 samples, 0.16%)</title><rect x="75.4045%" y="597" width="0.1618%" height="15" fill="rgb(208,120,29)" fg:x="932" fg:w="2"/><text x="75.6545%" y="607.50"></text></g><g><title>libloading::os::unix::Library::open (2 samples, 0.16%)</title><rect x="75.4045%" y="581" width="0.1618%" height="15" fill="rgb(221,105,43)" fg:x="932" fg:w="2"/><text x="75.6545%" y="591.50"></text></g><g><title>dlopen (2 samples, 0.16%)</title><rect x="75.4045%" y="565" width="0.1618%" height="15" fill="rgb(234,124,22)" fg:x="932" fg:w="2"/><text x="75.6545%" y="575.50"></text></g><g><title>_dl_catch_error (2 samples, 0.16%)</title><rect x="75.4045%" y="549" width="0.1618%" height="15" fill="rgb(212,23,30)" fg:x="932" fg:w="2"/><text x="75.6545%" y="559.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="75.4045%" y="533" width="0.1618%" height="15" fill="rgb(219,122,53)" fg:x="932" fg:w="2"/><text x="75.6545%" y="543.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="75.4045%" y="517" width="0.1618%" height="15" fill="rgb(248,84,24)" fg:x="932" fg:w="2"/><text x="75.6545%" y="527.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="75.4045%" y="501" width="0.1618%" height="15" fill="rgb(245,115,18)" fg:x="932" fg:w="2"/><text x="75.6545%" y="511.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="75.5663%" y="597" width="0.0809%" height="15" fill="rgb(227,176,51)" fg:x="934" fg:w="1"/><text x="75.8163%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="75.5663%" y="581" width="0.0809%" height="15" fill="rgb(229,63,42)" fg:x="934" fg:w="1"/><text x="75.8163%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.5663%" y="565" width="0.0809%" height="15" fill="rgb(247,202,24)" fg:x="934" fg:w="1"/><text x="75.8163%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.6472%" y="565" width="0.0809%" height="15" fill="rgb(244,173,20)" fg:x="935" fg:w="1"/><text x="75.8972%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.6472%" y="549" width="0.0809%" height="15" fill="rgb(242,81,47)" fg:x="935" fg:w="1"/><text x="75.8972%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="75.6472%" y="533" width="0.0809%" height="15" fill="rgb(231,185,54)" fg:x="935" fg:w="1"/><text x="75.8972%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="75.6472%" y="517" width="0.0809%" height="15" fill="rgb(243,55,32)" fg:x="935" fg:w="1"/><text x="75.8972%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="75.6472%" y="501" width="0.0809%" height="15" fill="rgb(208,167,19)" fg:x="935" fg:w="1"/><text x="75.8972%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="75.6472%" y="485" width="0.0809%" height="15" fill="rgb(231,72,35)" fg:x="935" fg:w="1"/><text x="75.8972%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="75.6472%" y="469" width="0.0809%" height="15" fill="rgb(250,173,51)" fg:x="935" fg:w="1"/><text x="75.8972%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="75.7282%" y="533" width="0.0809%" height="15" fill="rgb(209,5,22)" fg:x="936" fg:w="1"/><text x="75.9782%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.7282%" y="517" width="0.0809%" height="15" fill="rgb(250,174,19)" fg:x="936" fg:w="1"/><text x="75.9782%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.7282%" y="501" width="0.0809%" height="15" fill="rgb(217,3,49)" fg:x="936" fg:w="1"/><text x="75.9782%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="75.8091%" y="533" width="0.0809%" height="15" fill="rgb(218,225,5)" fg:x="937" fg:w="1"/><text x="76.0591%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="75.8091%" y="517" width="0.0809%" height="15" fill="rgb(236,89,11)" fg:x="937" fg:w="1"/><text x="76.0591%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="75.8091%" y="501" width="0.0809%" height="15" fill="rgb(206,33,28)" fg:x="937" fg:w="1"/><text x="76.0591%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="75.8091%" y="485" width="0.0809%" height="15" fill="rgb(241,56,42)" fg:x="937" fg:w="1"/><text x="76.0591%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="75.8091%" y="469" width="0.0809%" height="15" fill="rgb(222,44,11)" fg:x="937" fg:w="1"/><text x="76.0591%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="75.7282%" y="565" width="0.2427%" height="15" fill="rgb(234,111,20)" fg:x="936" fg:w="3"/><text x="75.9782%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="75.7282%" y="549" width="0.2427%" height="15" fill="rgb(237,77,6)" fg:x="936" fg:w="3"/><text x="75.9782%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.8900%" y="533" width="0.0809%" height="15" fill="rgb(235,111,23)" fg:x="938" fg:w="1"/><text x="76.1400%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.8900%" y="517" width="0.0809%" height="15" fill="rgb(251,135,29)" fg:x="938" fg:w="1"/><text x="76.1400%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.8900%" y="501" width="0.0809%" height="15" fill="rgb(217,57,1)" fg:x="938" fg:w="1"/><text x="76.1400%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="75.8900%" y="485" width="0.0809%" height="15" fill="rgb(249,119,31)" fg:x="938" fg:w="1"/><text x="76.1400%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.8900%" y="469" width="0.0809%" height="15" fill="rgb(233,164,33)" fg:x="938" fg:w="1"/><text x="76.1400%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="75.8900%" y="453" width="0.0809%" height="15" fill="rgb(250,217,43)" fg:x="938" fg:w="1"/><text x="76.1400%" y="463.50"></text></g><g><title>engine::session::Session::flush (7 samples, 0.57%)</title><rect x="75.5663%" y="645" width="0.5663%" height="15" fill="rgb(232,154,50)" fg:x="934" fg:w="7"/><text x="75.8163%" y="655.50"></text></g><g><title>engine::session::state::State::close (7 samples, 0.57%)</title><rect x="75.5663%" y="629" width="0.5663%" height="15" fill="rgb(227,190,8)" fg:x="934" fg:w="7"/><text x="75.8163%" y="639.50"></text></g><g><title>engine::session::state::State::flush_entities (7 samples, 0.57%)</title><rect x="75.5663%" y="613" width="0.5663%" height="15" fill="rgb(209,217,32)" fg:x="934" fg:w="7"/><text x="75.8163%" y="623.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (6 samples, 0.49%)</title><rect x="75.6472%" y="597" width="0.4854%" height="15" fill="rgb(243,203,50)" fg:x="935" fg:w="6"/><text x="75.8972%" y="607.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (6 samples, 0.49%)</title><rect x="75.6472%" y="581" width="0.4854%" height="15" fill="rgb(232,152,27)" fg:x="935" fg:w="6"/><text x="75.8972%" y="591.50"></text></g><g><title>kernel::model::any_entity_changes (2 samples, 0.16%)</title><rect x="75.9709%" y="565" width="0.1618%" height="15" fill="rgb(240,34,29)" fg:x="939" fg:w="2"/><text x="76.2209%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="75.9709%" y="549" width="0.1618%" height="15" fill="rgb(215,185,52)" fg:x="939" fg:w="2"/><text x="76.2209%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="75.9709%" y="533" width="0.1618%" height="15" fill="rgb(240,89,49)" fg:x="939" fg:w="2"/><text x="76.2209%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="75.9709%" y="517" width="0.1618%" height="15" fill="rgb(225,12,52)" fg:x="939" fg:w="2"/><text x="76.2209%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="75.9709%" y="501" width="0.1618%" height="15" fill="rgb(239,128,45)" fg:x="939" fg:w="2"/><text x="76.2209%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.0518%" y="485" width="0.0809%" height="15" fill="rgb(211,78,47)" fg:x="940" fg:w="1"/><text x="76.3018%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.0518%" y="469" width="0.0809%" height="15" fill="rgb(232,31,21)" fg:x="940" fg:w="1"/><text x="76.3018%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.0518%" y="453" width="0.0809%" height="15" fill="rgb(222,168,14)" fg:x="940" fg:w="1"/><text x="76.3018%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.0518%" y="437" width="0.0809%" height="15" fill="rgb(209,128,24)" fg:x="940" fg:w="1"/><text x="76.3018%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="76.1327%" y="565" width="0.0809%" height="15" fill="rgb(249,35,13)" fg:x="941" fg:w="1"/><text x="76.3827%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="76.1327%" y="549" width="0.0809%" height="15" fill="rgb(218,7,2)" fg:x="941" fg:w="1"/><text x="76.3827%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="76.1327%" y="629" width="0.2427%" height="15" fill="rgb(238,107,27)" fg:x="941" fg:w="3"/><text x="76.3827%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="76.1327%" y="613" width="0.2427%" height="15" fill="rgb(217,88,38)" fg:x="941" fg:w="3"/><text x="76.3827%" y="623.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (3 samples, 0.24%)</title><rect x="76.1327%" y="597" width="0.2427%" height="15" fill="rgb(230,207,0)" fg:x="941" fg:w="3"/><text x="76.3827%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.24%)</title><rect x="76.1327%" y="581" width="0.2427%" height="15" fill="rgb(249,64,54)" fg:x="941" fg:w="3"/><text x="76.3827%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.16%)</title><rect x="76.2136%" y="565" width="0.1618%" height="15" fill="rgb(231,7,11)" fg:x="942" fg:w="2"/><text x="76.4636%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="76.2136%" y="549" width="0.1618%" height="15" fill="rgb(205,149,21)" fg:x="942" fg:w="2"/><text x="76.4636%" y="559.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="76.2136%" y="533" width="0.1618%" height="15" fill="rgb(215,126,34)" fg:x="942" fg:w="2"/><text x="76.4636%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScopeMut&lt;plugins_core::carrying::model::Location&gt;&gt; (1 samples, 0.08%)</title><rect x="76.3754%" y="613" width="0.0809%" height="15" fill="rgb(241,132,45)" fg:x="944" fg:w="1"/><text x="76.6254%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="76.3754%" y="597" width="0.0809%" height="15" fill="rgb(252,69,32)" fg:x="944" fg:w="1"/><text x="76.6254%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.3754%" y="581" width="0.0809%" height="15" fill="rgb(232,204,19)" fg:x="944" fg:w="1"/><text x="76.6254%" y="591.50"></text></g><g><title>plugins_core::build::Build::holding (5 samples, 0.40%)</title><rect x="76.1327%" y="645" width="0.4045%" height="15" fill="rgb(249,15,47)" fg:x="941" fg:w="5"/><text x="76.3827%" y="655.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="76.3754%" y="629" width="0.1618%" height="15" fill="rgb(209,227,23)" fg:x="944" fg:w="2"/><text x="76.6254%" y="639.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="76.4563%" y="613" width="0.0809%" height="15" fill="rgb(248,92,24)" fg:x="945" fg:w="1"/><text x="76.7063%" y="623.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="76.4563%" y="597" width="0.0809%" height="15" fill="rgb(247,59,2)" fg:x="945" fg:w="1"/><text x="76.7063%" y="607.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="76.4563%" y="581" width="0.0809%" height="15" fill="rgb(221,30,5)" fg:x="945" fg:w="1"/><text x="76.7063%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="76.4563%" y="565" width="0.0809%" height="15" fill="rgb(208,108,53)" fg:x="945" fg:w="1"/><text x="76.7063%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="76.4563%" y="549" width="0.0809%" height="15" fill="rgb(211,183,26)" fg:x="945" fg:w="1"/><text x="76.7063%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="76.4563%" y="533" width="0.0809%" height="15" fill="rgb(232,132,4)" fg:x="945" fg:w="1"/><text x="76.7063%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.4563%" y="517" width="0.0809%" height="15" fill="rgb(253,128,37)" fg:x="945" fg:w="1"/><text x="76.7063%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.4563%" y="501" width="0.0809%" height="15" fill="rgb(221,58,24)" fg:x="945" fg:w="1"/><text x="76.7063%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.4563%" y="485" width="0.0809%" height="15" fill="rgb(230,54,45)" fg:x="945" fg:w="1"/><text x="76.7063%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.4563%" y="469" width="0.0809%" height="15" fill="rgb(254,21,18)" fg:x="945" fg:w="1"/><text x="76.7063%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.4563%" y="453" width="0.0809%" height="15" fill="rgb(221,108,0)" fg:x="945" fg:w="1"/><text x="76.7063%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.4563%" y="437" width="0.0809%" height="15" fill="rgb(206,95,1)" fg:x="945" fg:w="1"/><text x="76.7063%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.4563%" y="421" width="0.0809%" height="15" fill="rgb(237,52,5)" fg:x="945" fg:w="1"/><text x="76.7063%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.4563%" y="405" width="0.0809%" height="15" fill="rgb(218,150,34)" fg:x="945" fg:w="1"/><text x="76.7063%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.4563%" y="389" width="0.0809%" height="15" fill="rgb(235,194,28)" fg:x="945" fg:w="1"/><text x="76.7063%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.4563%" y="373" width="0.0809%" height="15" fill="rgb(245,92,18)" fg:x="945" fg:w="1"/><text x="76.7063%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.4563%" y="357" width="0.0809%" height="15" fill="rgb(253,203,53)" fg:x="945" fg:w="1"/><text x="76.7063%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.4563%" y="341" width="0.0809%" height="15" fill="rgb(249,185,47)" fg:x="945" fg:w="1"/><text x="76.7063%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.4563%" y="325" width="0.0809%" height="15" fill="rgb(252,194,52)" fg:x="945" fg:w="1"/><text x="76.7063%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.4563%" y="309" width="0.0809%" height="15" fill="rgb(210,53,36)" fg:x="945" fg:w="1"/><text x="76.7063%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.4563%" y="293" width="0.0809%" height="15" fill="rgb(237,37,25)" fg:x="945" fg:w="1"/><text x="76.7063%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.4563%" y="277" width="0.0809%" height="15" fill="rgb(242,116,27)" fg:x="945" fg:w="1"/><text x="76.7063%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.4563%" y="261" width="0.0809%" height="15" fill="rgb(213,185,26)" fg:x="945" fg:w="1"/><text x="76.7063%" y="271.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="76.5372%" y="645" width="0.0809%" height="15" fill="rgb(225,204,8)" fg:x="946" fg:w="1"/><text x="76.7872%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="76.5372%" y="629" width="0.0809%" height="15" fill="rgb(254,111,37)" fg:x="946" fg:w="1"/><text x="76.7872%" y="639.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="76.5372%" y="613" width="0.0809%" height="15" fill="rgb(242,35,9)" fg:x="946" fg:w="1"/><text x="76.7872%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="76.5372%" y="597" width="0.0809%" height="15" fill="rgb(232,138,49)" fg:x="946" fg:w="1"/><text x="76.7872%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="76.5372%" y="581" width="0.0809%" height="15" fill="rgb(247,56,4)" fg:x="946" fg:w="1"/><text x="76.7872%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.5372%" y="565" width="0.0809%" height="15" fill="rgb(226,179,17)" fg:x="946" fg:w="1"/><text x="76.7872%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.5372%" y="549" width="0.0809%" height="15" fill="rgb(216,163,45)" fg:x="946" fg:w="1"/><text x="76.7872%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.5372%" y="533" width="0.0809%" height="15" fill="rgb(211,157,3)" fg:x="946" fg:w="1"/><text x="76.7872%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.5372%" y="517" width="0.0809%" height="15" fill="rgb(234,44,20)" fg:x="946" fg:w="1"/><text x="76.7872%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="76.5372%" y="501" width="0.0809%" height="15" fill="rgb(254,138,23)" fg:x="946" fg:w="1"/><text x="76.7872%" y="511.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="76.5372%" y="485" width="0.0809%" height="15" fill="rgb(206,119,39)" fg:x="946" fg:w="1"/><text x="76.7872%" y="495.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="76.6181%" y="645" width="0.0809%" height="15" fill="rgb(231,105,52)" fg:x="947" fg:w="1"/><text x="76.8681%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="76.6181%" y="629" width="0.0809%" height="15" fill="rgb(250,20,5)" fg:x="947" fg:w="1"/><text x="76.8681%" y="639.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="76.6181%" y="613" width="0.0809%" height="15" fill="rgb(215,198,30)" fg:x="947" fg:w="1"/><text x="76.8681%" y="623.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="76.6181%" y="597" width="0.0809%" height="15" fill="rgb(246,142,8)" fg:x="947" fg:w="1"/><text x="76.8681%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="76.6181%" y="581" width="0.0809%" height="15" fill="rgb(243,26,38)" fg:x="947" fg:w="1"/><text x="76.8681%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.6181%" y="565" width="0.0809%" height="15" fill="rgb(205,133,28)" fg:x="947" fg:w="1"/><text x="76.8681%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="76.6181%" y="549" width="0.0809%" height="15" fill="rgb(212,34,0)" fg:x="947" fg:w="1"/><text x="76.8681%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.6181%" y="533" width="0.0809%" height="15" fill="rgb(251,226,22)" fg:x="947" fg:w="1"/><text x="76.8681%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="76.6181%" y="517" width="0.0809%" height="15" fill="rgb(252,119,9)" fg:x="947" fg:w="1"/><text x="76.8681%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.6181%" y="501" width="0.0809%" height="15" fill="rgb(213,150,50)" fg:x="947" fg:w="1"/><text x="76.8681%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.6181%" y="485" width="0.0809%" height="15" fill="rgb(212,24,39)" fg:x="947" fg:w="1"/><text x="76.8681%" y="495.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="76.6181%" y="469" width="0.0809%" height="15" fill="rgb(213,46,39)" fg:x="947" fg:w="1"/><text x="76.8681%" y="479.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="76.6181%" y="453" width="0.0809%" height="15" fill="rgb(239,106,12)" fg:x="947" fg:w="1"/><text x="76.8681%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.6990%" y="501" width="0.0809%" height="15" fill="rgb(249,229,21)" fg:x="948" fg:w="1"/><text x="76.9490%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.6990%" y="485" width="0.0809%" height="15" fill="rgb(212,158,3)" fg:x="948" fg:w="1"/><text x="76.9490%" y="495.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="76.6990%" y="629" width="0.1618%" height="15" fill="rgb(253,26,48)" fg:x="948" fg:w="2"/><text x="76.9490%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="76.6990%" y="613" width="0.1618%" height="15" fill="rgb(238,178,20)" fg:x="948" fg:w="2"/><text x="76.9490%" y="623.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="76.6990%" y="597" width="0.1618%" height="15" fill="rgb(208,86,15)" fg:x="948" fg:w="2"/><text x="76.9490%" y="607.50"></text></g><g><title>plugins_core::build::Build::leads_to (2 samples, 0.16%)</title><rect x="76.6990%" y="581" width="0.1618%" height="15" fill="rgb(239,42,53)" fg:x="948" fg:w="2"/><text x="76.9490%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="76.6990%" y="565" width="0.1618%" height="15" fill="rgb(245,226,8)" fg:x="948" fg:w="2"/><text x="76.9490%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="76.6990%" y="549" width="0.1618%" height="15" fill="rgb(216,176,32)" fg:x="948" fg:w="2"/><text x="76.9490%" y="559.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="76.6990%" y="533" width="0.1618%" height="15" fill="rgb(231,186,21)" fg:x="948" fg:w="2"/><text x="76.9490%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="76.6990%" y="517" width="0.1618%" height="15" fill="rgb(205,95,49)" fg:x="948" fg:w="2"/><text x="76.9490%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.7799%" y="501" width="0.0809%" height="15" fill="rgb(217,145,8)" fg:x="949" fg:w="1"/><text x="77.0299%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.7799%" y="485" width="0.0809%" height="15" fill="rgb(239,144,48)" fg:x="949" fg:w="1"/><text x="77.0299%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.7799%" y="469" width="0.0809%" height="15" fill="rgb(214,189,23)" fg:x="949" fg:w="1"/><text x="77.0299%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.7799%" y="453" width="0.0809%" height="15" fill="rgb(229,157,17)" fg:x="949" fg:w="1"/><text x="77.0299%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="76.7799%" y="437" width="0.0809%" height="15" fill="rgb(230,5,48)" fg:x="949" fg:w="1"/><text x="77.0299%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.7799%" y="421" width="0.0809%" height="15" fill="rgb(224,156,48)" fg:x="949" fg:w="1"/><text x="77.0299%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.7799%" y="405" width="0.0809%" height="15" fill="rgb(223,14,29)" fg:x="949" fg:w="1"/><text x="77.0299%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.7799%" y="389" width="0.0809%" height="15" fill="rgb(229,96,36)" fg:x="949" fg:w="1"/><text x="77.0299%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.7799%" y="373" width="0.0809%" height="15" fill="rgb(231,102,53)" fg:x="949" fg:w="1"/><text x="77.0299%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.7799%" y="357" width="0.0809%" height="15" fill="rgb(210,77,38)" fg:x="949" fg:w="1"/><text x="77.0299%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="76.8608%" y="565" width="0.0809%" height="15" fill="rgb(235,131,6)" fg:x="950" fg:w="1"/><text x="77.1108%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="76.9417%" y="533" width="0.0809%" height="15" fill="rgb(252,55,38)" fg:x="951" fg:w="1"/><text x="77.1917%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.9417%" y="517" width="0.0809%" height="15" fill="rgb(246,38,14)" fg:x="951" fg:w="1"/><text x="77.1917%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="76.9417%" y="501" width="0.0809%" height="15" fill="rgb(242,27,5)" fg:x="951" fg:w="1"/><text x="77.1917%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.9417%" y="485" width="0.0809%" height="15" fill="rgb(228,65,35)" fg:x="951" fg:w="1"/><text x="77.1917%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.9417%" y="469" width="0.0809%" height="15" fill="rgb(245,93,11)" fg:x="951" fg:w="1"/><text x="77.1917%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.9417%" y="453" width="0.0809%" height="15" fill="rgb(213,1,31)" fg:x="951" fg:w="1"/><text x="77.1917%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="76.9417%" y="437" width="0.0809%" height="15" fill="rgb(237,205,14)" fg:x="951" fg:w="1"/><text x="77.1917%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.9417%" y="421" width="0.0809%" height="15" fill="rgb(232,118,45)" fg:x="951" fg:w="1"/><text x="77.1917%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="76.9417%" y="405" width="0.0809%" height="15" fill="rgb(218,5,6)" fg:x="951" fg:w="1"/><text x="77.1917%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.0227%" y="533" width="0.0809%" height="15" fill="rgb(251,87,51)" fg:x="952" fg:w="1"/><text x="77.2727%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="77.0227%" y="517" width="0.0809%" height="15" fill="rgb(207,225,20)" fg:x="952" fg:w="1"/><text x="77.2727%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.0227%" y="501" width="0.0809%" height="15" fill="rgb(222,78,54)" fg:x="952" fg:w="1"/><text x="77.2727%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.0227%" y="485" width="0.0809%" height="15" fill="rgb(232,85,16)" fg:x="952" fg:w="1"/><text x="77.2727%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.0227%" y="469" width="0.0809%" height="15" fill="rgb(244,25,33)" fg:x="952" fg:w="1"/><text x="77.2727%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.0227%" y="453" width="0.0809%" height="15" fill="rgb(233,24,36)" fg:x="952" fg:w="1"/><text x="77.2727%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.0227%" y="437" width="0.0809%" height="15" fill="rgb(253,49,54)" fg:x="952" fg:w="1"/><text x="77.2727%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="77.1036%" y="437" width="0.0809%" height="15" fill="rgb(245,12,22)" fg:x="953" fg:w="1"/><text x="77.3536%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.1036%" y="421" width="0.0809%" height="15" fill="rgb(253,141,28)" fg:x="953" fg:w="1"/><text x="77.3536%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.1036%" y="405" width="0.0809%" height="15" fill="rgb(225,207,27)" fg:x="953" fg:w="1"/><text x="77.3536%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.1036%" y="389" width="0.0809%" height="15" fill="rgb(220,84,2)" fg:x="953" fg:w="1"/><text x="77.3536%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.1036%" y="373" width="0.0809%" height="15" fill="rgb(224,37,37)" fg:x="953" fg:w="1"/><text x="77.3536%" y="383.50"></text></g><g><title>engine::session::Session::save_changes (5 samples, 0.40%)</title><rect x="76.8608%" y="613" width="0.4045%" height="15" fill="rgb(220,143,18)" fg:x="950" fg:w="5"/><text x="77.1108%" y="623.50"></text></g><g><title>engine::session::state::State::close (5 samples, 0.40%)</title><rect x="76.8608%" y="597" width="0.4045%" height="15" fill="rgb(210,88,33)" fg:x="950" fg:w="5"/><text x="77.1108%" y="607.50"></text></g><g><title>engine::session::state::State::flush_entities (5 samples, 0.40%)</title><rect x="76.8608%" y="581" width="0.4045%" height="15" fill="rgb(219,87,51)" fg:x="950" fg:w="5"/><text x="77.1108%" y="591.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (4 samples, 0.32%)</title><rect x="76.9417%" y="565" width="0.3236%" height="15" fill="rgb(211,7,35)" fg:x="951" fg:w="4"/><text x="77.1917%" y="575.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (4 samples, 0.32%)</title><rect x="76.9417%" y="549" width="0.3236%" height="15" fill="rgb(232,77,2)" fg:x="951" fg:w="4"/><text x="77.1917%" y="559.50"></text></g><g><title>kernel::model::any_entity_changes (2 samples, 0.16%)</title><rect x="77.1036%" y="533" width="0.1618%" height="15" fill="rgb(249,94,25)" fg:x="953" fg:w="2"/><text x="77.3536%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="77.1036%" y="517" width="0.1618%" height="15" fill="rgb(215,112,2)" fg:x="953" fg:w="2"/><text x="77.3536%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="77.1036%" y="501" width="0.1618%" height="15" fill="rgb(226,115,48)" fg:x="953" fg:w="2"/><text x="77.3536%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="77.1036%" y="485" width="0.1618%" height="15" fill="rgb(249,196,10)" fg:x="953" fg:w="2"/><text x="77.3536%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="77.1036%" y="469" width="0.1618%" height="15" fill="rgb(237,109,14)" fg:x="953" fg:w="2"/><text x="77.3536%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="77.1036%" y="453" width="0.1618%" height="15" fill="rgb(217,103,53)" fg:x="953" fg:w="2"/><text x="77.3536%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.1845%" y="437" width="0.0809%" height="15" fill="rgb(244,137,9)" fg:x="954" fg:w="1"/><text x="77.4345%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.1845%" y="421" width="0.0809%" height="15" fill="rgb(227,201,3)" fg:x="954" fg:w="1"/><text x="77.4345%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.1845%" y="405" width="0.0809%" height="15" fill="rgb(243,94,6)" fg:x="954" fg:w="1"/><text x="77.4345%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.1845%" y="389" width="0.0809%" height="15" fill="rgb(235,118,5)" fg:x="954" fg:w="1"/><text x="77.4345%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.1845%" y="373" width="0.0809%" height="15" fill="rgb(247,10,30)" fg:x="954" fg:w="1"/><text x="77.4345%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.1845%" y="357" width="0.0809%" height="15" fill="rgb(205,26,28)" fg:x="954" fg:w="1"/><text x="77.4345%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.1845%" y="341" width="0.0809%" height="15" fill="rgb(206,99,35)" fg:x="954" fg:w="1"/><text x="77.4345%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.1845%" y="325" width="0.0809%" height="15" fill="rgb(238,130,40)" fg:x="954" fg:w="1"/><text x="77.4345%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.1845%" y="309" width="0.0809%" height="15" fill="rgb(224,126,31)" fg:x="954" fg:w="1"/><text x="77.4345%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.1845%" y="293" width="0.0809%" height="15" fill="rgb(254,105,17)" fg:x="954" fg:w="1"/><text x="77.4345%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.1845%" y="277" width="0.0809%" height="15" fill="rgb(216,87,36)" fg:x="954" fg:w="1"/><text x="77.4345%" y="287.50"></text></g><g><title>engine::session::Session::flush (6 samples, 0.49%)</title><rect x="76.8608%" y="629" width="0.4854%" height="15" fill="rgb(240,21,12)" fg:x="950" fg:w="6"/><text x="77.1108%" y="639.50"></text></g><g><title>engine::session::Session::set_session (1 samples, 0.08%)</title><rect x="77.2654%" y="613" width="0.0809%" height="15" fill="rgb(245,192,34)" fg:x="955" fg:w="1"/><text x="77.5154%" y="623.50"></text></g><g><title>plugins_core::build::Build::holding (1 samples, 0.08%)</title><rect x="77.3463%" y="629" width="0.0809%" height="15" fill="rgb(226,100,49)" fg:x="956" fg:w="1"/><text x="77.5963%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="77.3463%" y="613" width="0.0809%" height="15" fill="rgb(245,188,27)" fg:x="956" fg:w="1"/><text x="77.5963%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="77.3463%" y="597" width="0.0809%" height="15" fill="rgb(212,170,8)" fg:x="956" fg:w="1"/><text x="77.5963%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="77.3463%" y="581" width="0.0809%" height="15" fill="rgb(217,113,29)" fg:x="956" fg:w="1"/><text x="77.5963%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="77.3463%" y="565" width="0.0809%" height="15" fill="rgb(237,30,3)" fg:x="956" fg:w="1"/><text x="77.5963%" y="575.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="77.3463%" y="549" width="0.0809%" height="15" fill="rgb(227,19,28)" fg:x="956" fg:w="1"/><text x="77.5963%" y="559.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="77.3463%" y="533" width="0.0809%" height="15" fill="rgb(239,172,45)" fg:x="956" fg:w="1"/><text x="77.5963%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="77.3463%" y="517" width="0.0809%" height="15" fill="rgb(254,55,39)" fg:x="956" fg:w="1"/><text x="77.5963%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="77.3463%" y="501" width="0.0809%" height="15" fill="rgb(249,208,12)" fg:x="956" fg:w="1"/><text x="77.5963%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.3463%" y="485" width="0.0809%" height="15" fill="rgb(240,52,13)" fg:x="956" fg:w="1"/><text x="77.5963%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.3463%" y="469" width="0.0809%" height="15" fill="rgb(252,149,13)" fg:x="956" fg:w="1"/><text x="77.5963%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.3463%" y="453" width="0.0809%" height="15" fill="rgb(232,81,48)" fg:x="956" fg:w="1"/><text x="77.5963%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.3463%" y="437" width="0.0809%" height="15" fill="rgb(222,144,2)" fg:x="956" fg:w="1"/><text x="77.5963%" y="447.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (24 samples, 1.94%)</title><rect x="75.5663%" y="661" width="1.9417%" height="15" fill="rgb(216,81,32)" fg:x="934" fg:w="24"/><text x="75.8163%" y="671.50">&lt;..</text></g><g><title>plugins_core::build::BuildSurroundings::build (10 samples, 0.81%)</title><rect x="76.6990%" y="645" width="0.8091%" height="15" fill="rgb(244,78,51)" fg:x="948" fg:w="10"/><text x="76.9490%" y="655.50"></text></g><g><title>plugins_core::build::Build::occupying (1 samples, 0.08%)</title><rect x="77.4272%" y="629" width="0.0809%" height="15" fill="rgb(217,66,21)" fg:x="957" fg:w="1"/><text x="77.6772%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="77.4272%" y="613" width="0.0809%" height="15" fill="rgb(247,101,42)" fg:x="957" fg:w="1"/><text x="77.6772%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="77.4272%" y="597" width="0.0809%" height="15" fill="rgb(227,81,39)" fg:x="957" fg:w="1"/><text x="77.6772%" y="607.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="77.4272%" y="581" width="0.0809%" height="15" fill="rgb(220,223,44)" fg:x="957" fg:w="1"/><text x="77.6772%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.4272%" y="565" width="0.0809%" height="15" fill="rgb(205,218,2)" fg:x="957" fg:w="1"/><text x="77.6772%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.4272%" y="549" width="0.0809%" height="15" fill="rgb(212,207,28)" fg:x="957" fg:w="1"/><text x="77.6772%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="77.4272%" y="533" width="0.0809%" height="15" fill="rgb(224,12,41)" fg:x="957" fg:w="1"/><text x="77.6772%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="77.4272%" y="517" width="0.0809%" height="15" fill="rgb(216,118,12)" fg:x="957" fg:w="1"/><text x="77.6772%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="77.4272%" y="501" width="0.0809%" height="15" fill="rgb(252,97,46)" fg:x="957" fg:w="1"/><text x="77.6772%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="77.4272%" y="485" width="0.0809%" height="15" fill="rgb(244,206,19)" fg:x="957" fg:w="1"/><text x="77.6772%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="77.4272%" y="469" width="0.0809%" height="15" fill="rgb(231,84,31)" fg:x="957" fg:w="1"/><text x="77.6772%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="77.5081%" y="533" width="0.0809%" height="15" fill="rgb(244,133,0)" fg:x="958" fg:w="1"/><text x="77.7581%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.5081%" y="517" width="0.0809%" height="15" fill="rgb(223,15,50)" fg:x="958" fg:w="1"/><text x="77.7581%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.5081%" y="501" width="0.0809%" height="15" fill="rgb(250,118,49)" fg:x="958" fg:w="1"/><text x="77.7581%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.5081%" y="485" width="0.0809%" height="15" fill="rgb(248,25,38)" fg:x="958" fg:w="1"/><text x="77.7581%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="77.5081%" y="581" width="0.1618%" height="15" fill="rgb(215,70,14)" fg:x="958" fg:w="2"/><text x="77.7581%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="77.5081%" y="565" width="0.1618%" height="15" fill="rgb(215,28,15)" fg:x="958" fg:w="2"/><text x="77.7581%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="77.5081%" y="549" width="0.1618%" height="15" fill="rgb(243,6,28)" fg:x="958" fg:w="2"/><text x="77.7581%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.5890%" y="533" width="0.0809%" height="15" fill="rgb(222,130,1)" fg:x="959" fg:w="1"/><text x="77.8390%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.5890%" y="517" width="0.0809%" height="15" fill="rgb(236,166,44)" fg:x="959" fg:w="1"/><text x="77.8390%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.5890%" y="501" width="0.0809%" height="15" fill="rgb(221,108,14)" fg:x="959" fg:w="1"/><text x="77.8390%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.5890%" y="485" width="0.0809%" height="15" fill="rgb(252,3,45)" fg:x="959" fg:w="1"/><text x="77.8390%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.5890%" y="469" width="0.0809%" height="15" fill="rgb(237,68,30)" fg:x="959" fg:w="1"/><text x="77.8390%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.6699%" y="549" width="0.0809%" height="15" fill="rgb(211,79,22)" fg:x="960" fg:w="1"/><text x="77.9199%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="77.6699%" y="533" width="0.0809%" height="15" fill="rgb(252,185,21)" fg:x="960" fg:w="1"/><text x="77.9199%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.6699%" y="517" width="0.0809%" height="15" fill="rgb(225,189,26)" fg:x="960" fg:w="1"/><text x="77.9199%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.6699%" y="501" width="0.0809%" height="15" fill="rgb(241,30,40)" fg:x="960" fg:w="1"/><text x="77.9199%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.6699%" y="485" width="0.0809%" height="15" fill="rgb(235,215,44)" fg:x="960" fg:w="1"/><text x="77.9199%" y="495.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="77.6699%" y="565" width="0.1618%" height="15" fill="rgb(205,8,29)" fg:x="960" fg:w="2"/><text x="77.9199%" y="575.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="77.7508%" y="549" width="0.0809%" height="15" fill="rgb(241,137,42)" fg:x="961" fg:w="1"/><text x="78.0008%" y="559.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="77.7508%" y="533" width="0.0809%" height="15" fill="rgb(237,155,2)" fg:x="961" fg:w="1"/><text x="78.0008%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.7508%" y="517" width="0.0809%" height="15" fill="rgb(245,29,42)" fg:x="961" fg:w="1"/><text x="78.0008%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.9126%" y="533" width="0.0809%" height="15" fill="rgb(234,101,35)" fg:x="963" fg:w="1"/><text x="78.1626%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="77.8317%" y="565" width="0.2427%" height="15" fill="rgb(228,64,37)" fg:x="962" fg:w="3"/><text x="78.0817%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="77.8317%" y="549" width="0.2427%" height="15" fill="rgb(217,214,36)" fg:x="962" fg:w="3"/><text x="78.0817%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="77.9935%" y="533" width="0.0809%" height="15" fill="rgb(243,70,3)" fg:x="964" fg:w="1"/><text x="78.2435%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="77.9935%" y="517" width="0.0809%" height="15" fill="rgb(253,158,52)" fg:x="964" fg:w="1"/><text x="78.2435%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.0744%" y="389" width="0.0809%" height="15" fill="rgb(234,111,54)" fg:x="965" fg:w="1"/><text x="78.3244%" y="399.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="78.0744%" y="373" width="0.0809%" height="15" fill="rgb(217,70,32)" fg:x="965" fg:w="1"/><text x="78.3244%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="78.0744%" y="421" width="0.1618%" height="15" fill="rgb(234,18,33)" fg:x="965" fg:w="2"/><text x="78.3244%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="78.0744%" y="405" width="0.1618%" height="15" fill="rgb(234,12,49)" fg:x="965" fg:w="2"/><text x="78.3244%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.1553%" y="389" width="0.0809%" height="15" fill="rgb(236,10,21)" fg:x="966" fg:w="1"/><text x="78.4053%" y="399.50"></text></g><g><title>engine::session::Session::close (10 samples, 0.81%)</title><rect x="77.5081%" y="661" width="0.8091%" height="15" fill="rgb(248,182,45)" fg:x="958" fg:w="10"/><text x="77.7581%" y="671.50"></text></g><g><title>engine::session::state::State::close (10 samples, 0.81%)</title><rect x="77.5081%" y="645" width="0.8091%" height="15" fill="rgb(217,95,36)" fg:x="958" fg:w="10"/><text x="77.7581%" y="655.50"></text></g><g><title>engine::session::state::State::flush_entities (10 samples, 0.81%)</title><rect x="77.5081%" y="629" width="0.8091%" height="15" fill="rgb(212,110,31)" fg:x="958" fg:w="10"/><text x="77.7581%" y="639.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (10 samples, 0.81%)</title><rect x="77.5081%" y="613" width="0.8091%" height="15" fill="rgb(206,32,53)" fg:x="958" fg:w="10"/><text x="77.7581%" y="623.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (10 samples, 0.81%)</title><rect x="77.5081%" y="597" width="0.8091%" height="15" fill="rgb(246,141,37)" fg:x="958" fg:w="10"/><text x="77.7581%" y="607.50"></text></g><g><title>kernel::model::any_entity_changes (8 samples, 0.65%)</title><rect x="77.6699%" y="581" width="0.6472%" height="15" fill="rgb(219,16,7)" fg:x="960" fg:w="8"/><text x="77.9199%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="78.0744%" y="565" width="0.2427%" height="15" fill="rgb(230,205,45)" fg:x="965" fg:w="3"/><text x="78.3244%" y="575.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="78.0744%" y="549" width="0.2427%" height="15" fill="rgb(231,43,49)" fg:x="965" fg:w="3"/><text x="78.3244%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="78.0744%" y="533" width="0.2427%" height="15" fill="rgb(212,106,34)" fg:x="965" fg:w="3"/><text x="78.3244%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="78.0744%" y="517" width="0.2427%" height="15" fill="rgb(206,83,17)" fg:x="965" fg:w="3"/><text x="78.3244%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="78.0744%" y="501" width="0.2427%" height="15" fill="rgb(244,154,49)" fg:x="965" fg:w="3"/><text x="78.3244%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="78.0744%" y="485" width="0.2427%" height="15" fill="rgb(244,149,49)" fg:x="965" fg:w="3"/><text x="78.3244%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="78.0744%" y="469" width="0.2427%" height="15" fill="rgb(227,134,18)" fg:x="965" fg:w="3"/><text x="78.3244%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="78.0744%" y="453" width="0.2427%" height="15" fill="rgb(237,116,36)" fg:x="965" fg:w="3"/><text x="78.3244%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="78.0744%" y="437" width="0.2427%" height="15" fill="rgb(205,129,40)" fg:x="965" fg:w="3"/><text x="78.3244%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.2362%" y="421" width="0.0809%" height="15" fill="rgb(236,178,4)" fg:x="967" fg:w="1"/><text x="78.4862%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.2362%" y="405" width="0.0809%" height="15" fill="rgb(251,76,53)" fg:x="967" fg:w="1"/><text x="78.4862%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.2362%" y="389" width="0.0809%" height="15" fill="rgb(242,92,40)" fg:x="967" fg:w="1"/><text x="78.4862%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.2362%" y="373" width="0.0809%" height="15" fill="rgb(209,45,30)" fg:x="967" fg:w="1"/><text x="78.4862%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.2362%" y="357" width="0.0809%" height="15" fill="rgb(218,157,36)" fg:x="967" fg:w="1"/><text x="78.4862%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.2362%" y="341" width="0.0809%" height="15" fill="rgb(222,186,16)" fg:x="967" fg:w="1"/><text x="78.4862%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.2362%" y="325" width="0.0809%" height="15" fill="rgb(254,72,35)" fg:x="967" fg:w="1"/><text x="78.4862%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.2362%" y="309" width="0.0809%" height="15" fill="rgb(224,25,35)" fg:x="967" fg:w="1"/><text x="78.4862%" y="319.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="78.3172%" y="629" width="0.0809%" height="15" fill="rgb(206,135,52)" fg:x="968" fg:w="1"/><text x="78.5672%" y="639.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (1 samples, 0.08%)</title><rect x="78.3172%" y="613" width="0.0809%" height="15" fill="rgb(229,174,47)" fg:x="968" fg:w="1"/><text x="78.5672%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="78.3172%" y="597" width="0.0809%" height="15" fill="rgb(242,184,21)" fg:x="968" fg:w="1"/><text x="78.5672%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="78.3172%" y="581" width="0.0809%" height="15" fill="rgb(213,22,45)" fg:x="968" fg:w="1"/><text x="78.5672%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.3172%" y="565" width="0.0809%" height="15" fill="rgb(237,81,54)" fg:x="968" fg:w="1"/><text x="78.5672%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.3172%" y="549" width="0.0809%" height="15" fill="rgb(248,177,18)" fg:x="968" fg:w="1"/><text x="78.5672%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.3172%" y="533" width="0.0809%" height="15" fill="rgb(254,31,16)" fg:x="968" fg:w="1"/><text x="78.5672%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.3172%" y="517" width="0.0809%" height="15" fill="rgb(235,20,31)" fg:x="968" fg:w="1"/><text x="78.5672%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (1 samples, 0.08%)</title><rect x="78.3981%" y="597" width="0.0809%" height="15" fill="rgb(240,56,43)" fg:x="969" fg:w="1"/><text x="78.6481%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.3981%" y="581" width="0.0809%" height="15" fill="rgb(237,197,51)" fg:x="969" fg:w="1"/><text x="78.6481%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.3981%" y="565" width="0.0809%" height="15" fill="rgb(241,162,44)" fg:x="969" fg:w="1"/><text x="78.6481%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.3981%" y="549" width="0.0809%" height="15" fill="rgb(224,23,20)" fg:x="969" fg:w="1"/><text x="78.6481%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.3981%" y="533" width="0.0809%" height="15" fill="rgb(250,109,34)" fg:x="969" fg:w="1"/><text x="78.6481%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="78.4790%" y="565" width="0.0809%" height="15" fill="rgb(214,175,50)" fg:x="970" fg:w="1"/><text x="78.7290%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="78.4790%" y="549" width="0.0809%" height="15" fill="rgb(213,182,5)" fg:x="970" fg:w="1"/><text x="78.7290%" y="559.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.4790%" y="533" width="0.0809%" height="15" fill="rgb(209,199,19)" fg:x="970" fg:w="1"/><text x="78.7290%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="78.6408%" y="501" width="0.1618%" height="15" fill="rgb(236,224,42)" fg:x="972" fg:w="2"/><text x="78.8908%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="78.7217%" y="485" width="0.0809%" height="15" fill="rgb(246,226,29)" fg:x="973" fg:w="1"/><text x="78.9717%" y="495.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="78.8026%" y="501" width="0.1618%" height="15" fill="rgb(227,223,11)" fg:x="974" fg:w="2"/><text x="79.0526%" y="511.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (1 samples, 0.08%)</title><rect x="78.8835%" y="485" width="0.0809%" height="15" fill="rgb(219,7,51)" fg:x="975" fg:w="1"/><text x="79.1335%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.8835%" y="469" width="0.0809%" height="15" fill="rgb(245,167,10)" fg:x="975" fg:w="1"/><text x="79.1335%" y="479.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (5 samples, 0.40%)</title><rect x="78.6408%" y="517" width="0.4045%" height="15" fill="rgb(237,224,16)" fg:x="972" fg:w="5"/><text x="78.8908%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="78.9644%" y="501" width="0.0809%" height="15" fill="rgb(226,132,13)" fg:x="976" fg:w="1"/><text x="79.2144%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="78.9644%" y="485" width="0.0809%" height="15" fill="rgb(214,140,3)" fg:x="976" fg:w="1"/><text x="79.2144%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.9644%" y="469" width="0.0809%" height="15" fill="rgb(221,177,4)" fg:x="976" fg:w="1"/><text x="79.2144%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.9644%" y="453" width="0.0809%" height="15" fill="rgb(238,139,3)" fg:x="976" fg:w="1"/><text x="79.2144%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="78.9644%" y="437" width="0.0809%" height="15" fill="rgb(216,17,39)" fg:x="976" fg:w="1"/><text x="79.2144%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="78.9644%" y="421" width="0.0809%" height="15" fill="rgb(238,120,9)" fg:x="976" fg:w="1"/><text x="79.2144%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="78.9644%" y="405" width="0.0809%" height="15" fill="rgb(244,92,53)" fg:x="976" fg:w="1"/><text x="79.2144%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.9644%" y="389" width="0.0809%" height="15" fill="rgb(224,148,33)" fg:x="976" fg:w="1"/><text x="79.2144%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.9644%" y="373" width="0.0809%" height="15" fill="rgb(243,6,36)" fg:x="976" fg:w="1"/><text x="79.2144%" y="383.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="79.0453%" y="341" width="0.0809%" height="15" fill="rgb(230,102,11)" fg:x="977" fg:w="1"/><text x="79.2953%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="79.0453%" y="325" width="0.0809%" height="15" fill="rgb(234,148,36)" fg:x="977" fg:w="1"/><text x="79.2953%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.0453%" y="309" width="0.0809%" height="15" fill="rgb(251,153,25)" fg:x="977" fg:w="1"/><text x="79.2953%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="79.0453%" y="293" width="0.0809%" height="15" fill="rgb(215,129,8)" fg:x="977" fg:w="1"/><text x="79.2953%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.0453%" y="277" width="0.0809%" height="15" fill="rgb(224,128,35)" fg:x="977" fg:w="1"/><text x="79.2953%" y="287.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (2 samples, 0.16%)</title><rect x="79.0453%" y="469" width="0.1618%" height="15" fill="rgb(237,56,52)" fg:x="977" fg:w="2"/><text x="79.2953%" y="479.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="79.0453%" y="453" width="0.1618%" height="15" fill="rgb(234,213,19)" fg:x="977" fg:w="2"/><text x="79.2953%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="79.0453%" y="437" width="0.1618%" height="15" fill="rgb(252,82,23)" fg:x="977" fg:w="2"/><text x="79.2953%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="79.0453%" y="421" width="0.1618%" height="15" fill="rgb(254,201,21)" fg:x="977" fg:w="2"/><text x="79.2953%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="79.0453%" y="405" width="0.1618%" height="15" fill="rgb(250,186,11)" fg:x="977" fg:w="2"/><text x="79.2953%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="79.0453%" y="389" width="0.1618%" height="15" fill="rgb(211,174,5)" fg:x="977" fg:w="2"/><text x="79.2953%" y="399.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="79.0453%" y="373" width="0.1618%" height="15" fill="rgb(214,121,10)" fg:x="977" fg:w="2"/><text x="79.2953%" y="383.50"></text></g><g><title>kernel::model::entity::Entity::from_str (2 samples, 0.16%)</title><rect x="79.0453%" y="357" width="0.1618%" height="15" fill="rgb(241,66,2)" fg:x="977" fg:w="2"/><text x="79.2953%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.1262%" y="341" width="0.0809%" height="15" fill="rgb(220,167,19)" fg:x="978" fg:w="1"/><text x="79.3762%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.1262%" y="325" width="0.0809%" height="15" fill="rgb(231,54,50)" fg:x="978" fg:w="1"/><text x="79.3762%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="79.1262%" y="309" width="0.0809%" height="15" fill="rgb(239,217,53)" fg:x="978" fg:w="1"/><text x="79.3762%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.1262%" y="293" width="0.0809%" height="15" fill="rgb(248,8,0)" fg:x="978" fg:w="1"/><text x="79.3762%" y="303.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="79.1262%" y="277" width="0.0809%" height="15" fill="rgb(229,118,37)" fg:x="978" fg:w="1"/><text x="79.3762%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="79.1262%" y="261" width="0.0809%" height="15" fill="rgb(253,223,43)" fg:x="978" fg:w="1"/><text x="79.3762%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="79.1262%" y="245" width="0.0809%" height="15" fill="rgb(211,77,36)" fg:x="978" fg:w="1"/><text x="79.3762%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="79.1262%" y="229" width="0.0809%" height="15" fill="rgb(219,3,53)" fg:x="978" fg:w="1"/><text x="79.3762%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.1262%" y="213" width="0.0809%" height="15" fill="rgb(244,45,42)" fg:x="978" fg:w="1"/><text x="79.3762%" y="223.50"></text></g><g><title>plugins_core::tools::get_contained_keys (3 samples, 0.24%)</title><rect x="79.0453%" y="517" width="0.2427%" height="15" fill="rgb(225,95,27)" fg:x="977" fg:w="3"/><text x="79.2953%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="79.0453%" y="501" width="0.2427%" height="15" fill="rgb(207,74,8)" fg:x="977" fg:w="3"/><text x="79.2953%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="79.0453%" y="485" width="0.2427%" height="15" fill="rgb(243,63,36)" fg:x="977" fg:w="3"/><text x="79.2953%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.2071%" y="469" width="0.0809%" height="15" fill="rgb(211,180,12)" fg:x="979" fg:w="1"/><text x="79.4571%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.2071%" y="453" width="0.0809%" height="15" fill="rgb(254,166,49)" fg:x="979" fg:w="1"/><text x="79.4571%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="79.2071%" y="437" width="0.0809%" height="15" fill="rgb(205,19,0)" fg:x="979" fg:w="1"/><text x="79.4571%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="79.2071%" y="421" width="0.0809%" height="15" fill="rgb(224,172,32)" fg:x="979" fg:w="1"/><text x="79.4571%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="79.2071%" y="405" width="0.0809%" height="15" fill="rgb(254,136,30)" fg:x="979" fg:w="1"/><text x="79.4571%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.2071%" y="389" width="0.0809%" height="15" fill="rgb(246,19,35)" fg:x="979" fg:w="1"/><text x="79.4571%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.2071%" y="373" width="0.0809%" height="15" fill="rgb(219,24,36)" fg:x="979" fg:w="1"/><text x="79.4571%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (11 samples, 0.89%)</title><rect x="78.5599%" y="549" width="0.8900%" height="15" fill="rgb(251,55,1)" fg:x="971" fg:w="11"/><text x="78.8099%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (11 samples, 0.89%)</title><rect x="78.5599%" y="533" width="0.8900%" height="15" fill="rgb(218,117,39)" fg:x="971" fg:w="11"/><text x="78.8099%" y="543.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (2 samples, 0.16%)</title><rect x="79.2880%" y="517" width="0.1618%" height="15" fill="rgb(248,169,11)" fg:x="980" fg:w="2"/><text x="79.5380%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="79.2880%" y="501" width="0.1618%" height="15" fill="rgb(244,40,44)" fg:x="980" fg:w="2"/><text x="79.5380%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="79.2880%" y="485" width="0.1618%" height="15" fill="rgb(234,62,37)" fg:x="980" fg:w="2"/><text x="79.5380%" y="495.50"></text></g><g><title>&lt;plugins_core::moving::model::Occupyable as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (2 samples, 0.16%)</title><rect x="79.2880%" y="469" width="0.1618%" height="15" fill="rgb(207,117,42)" fg:x="980" fg:w="2"/><text x="79.5380%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="79.2880%" y="453" width="0.1618%" height="15" fill="rgb(213,43,2)" fg:x="980" fg:w="2"/><text x="79.5380%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="79.2880%" y="437" width="0.1618%" height="15" fill="rgb(244,202,51)" fg:x="980" fg:w="2"/><text x="79.5380%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="79.2880%" y="421" width="0.1618%" height="15" fill="rgb(253,174,46)" fg:x="980" fg:w="2"/><text x="79.5380%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="79.2880%" y="405" width="0.1618%" height="15" fill="rgb(251,23,1)" fg:x="980" fg:w="2"/><text x="79.5380%" y="415.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (2 samples, 0.16%)</title><rect x="79.2880%" y="389" width="0.1618%" height="15" fill="rgb(253,26,1)" fg:x="980" fg:w="2"/><text x="79.5380%" y="399.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="79.2880%" y="373" width="0.1618%" height="15" fill="rgb(216,89,31)" fg:x="980" fg:w="2"/><text x="79.5380%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.3689%" y="357" width="0.0809%" height="15" fill="rgb(209,109,5)" fg:x="981" fg:w="1"/><text x="79.6189%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.3689%" y="341" width="0.0809%" height="15" fill="rgb(229,63,13)" fg:x="981" fg:w="1"/><text x="79.6189%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.3689%" y="325" width="0.0809%" height="15" fill="rgb(238,137,54)" fg:x="981" fg:w="1"/><text x="79.6189%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.3689%" y="309" width="0.0809%" height="15" fill="rgb(228,1,9)" fg:x="981" fg:w="1"/><text x="79.6189%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.3689%" y="293" width="0.0809%" height="15" fill="rgb(249,120,48)" fg:x="981" fg:w="1"/><text x="79.6189%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="79.3689%" y="277" width="0.0809%" height="15" fill="rgb(209,72,36)" fg:x="981" fg:w="1"/><text x="79.6189%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="79.3689%" y="261" width="0.0809%" height="15" fill="rgb(247,98,49)" fg:x="981" fg:w="1"/><text x="79.6189%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="79.4498%" y="261" width="0.0809%" height="15" fill="rgb(233,75,36)" fg:x="982" fg:w="1"/><text x="79.6998%" y="271.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="79.4498%" y="245" width="0.0809%" height="15" fill="rgb(225,14,24)" fg:x="982" fg:w="1"/><text x="79.6998%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="79.4498%" y="229" width="0.0809%" height="15" fill="rgb(237,193,20)" fg:x="982" fg:w="1"/><text x="79.6998%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="79.4498%" y="213" width="0.0809%" height="15" fill="rgb(239,122,19)" fg:x="982" fg:w="1"/><text x="79.6998%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="79.4498%" y="309" width="0.1618%" height="15" fill="rgb(231,220,10)" fg:x="982" fg:w="2"/><text x="79.6998%" y="319.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="79.4498%" y="293" width="0.1618%" height="15" fill="rgb(220,66,15)" fg:x="982" fg:w="2"/><text x="79.6998%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="79.4498%" y="277" width="0.1618%" height="15" fill="rgb(215,171,52)" fg:x="982" fg:w="2"/><text x="79.6998%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="79.5307%" y="261" width="0.0809%" height="15" fill="rgb(241,169,50)" fg:x="983" fg:w="1"/><text x="79.7807%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.5307%" y="245" width="0.0809%" height="15" fill="rgb(236,189,0)" fg:x="983" fg:w="1"/><text x="79.7807%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="79.4498%" y="325" width="0.2427%" height="15" fill="rgb(217,147,20)" fg:x="982" fg:w="3"/><text x="79.6998%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="79.6117%" y="309" width="0.0809%" height="15" fill="rgb(206,188,39)" fg:x="984" fg:w="1"/><text x="79.8617%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.6117%" y="293" width="0.0809%" height="15" fill="rgb(227,118,25)" fg:x="984" fg:w="1"/><text x="79.8617%" y="303.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (4 samples, 0.32%)</title><rect x="79.4498%" y="485" width="0.3236%" height="15" fill="rgb(248,171,40)" fg:x="982" fg:w="4"/><text x="79.6998%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="79.4498%" y="469" width="0.3236%" height="15" fill="rgb(251,90,54)" fg:x="982" fg:w="4"/><text x="79.6998%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.32%)</title><rect x="79.4498%" y="453" width="0.3236%" height="15" fill="rgb(234,11,46)" fg:x="982" fg:w="4"/><text x="79.6998%" y="463.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (4 samples, 0.32%)</title><rect x="79.4498%" y="437" width="0.3236%" height="15" fill="rgb(229,134,13)" fg:x="982" fg:w="4"/><text x="79.6998%" y="447.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="79.4498%" y="421" width="0.3236%" height="15" fill="rgb(223,129,3)" fg:x="982" fg:w="4"/><text x="79.6998%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.32%)</title><rect x="79.4498%" y="405" width="0.3236%" height="15" fill="rgb(221,124,13)" fg:x="982" fg:w="4"/><text x="79.6998%" y="415.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (4 samples, 0.32%)</title><rect x="79.4498%" y="389" width="0.3236%" height="15" fill="rgb(234,3,18)" fg:x="982" fg:w="4"/><text x="79.6998%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="79.4498%" y="373" width="0.3236%" height="15" fill="rgb(249,199,20)" fg:x="982" fg:w="4"/><text x="79.6998%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.32%)</title><rect x="79.4498%" y="357" width="0.3236%" height="15" fill="rgb(224,134,6)" fg:x="982" fg:w="4"/><text x="79.6998%" y="367.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (4 samples, 0.32%)</title><rect x="79.4498%" y="341" width="0.3236%" height="15" fill="rgb(254,83,26)" fg:x="982" fg:w="4"/><text x="79.6998%" y="351.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="79.6926%" y="325" width="0.0809%" height="15" fill="rgb(217,88,9)" fg:x="985" fg:w="1"/><text x="79.9426%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="79.6926%" y="309" width="0.0809%" height="15" fill="rgb(225,73,2)" fg:x="985" fg:w="1"/><text x="79.9426%" y="319.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="79.6926%" y="293" width="0.0809%" height="15" fill="rgb(226,44,39)" fg:x="985" fg:w="1"/><text x="79.9426%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="79.6926%" y="277" width="0.0809%" height="15" fill="rgb(228,53,17)" fg:x="985" fg:w="1"/><text x="79.9426%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="79.6926%" y="261" width="0.0809%" height="15" fill="rgb(212,27,27)" fg:x="985" fg:w="1"/><text x="79.9426%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.6926%" y="245" width="0.0809%" height="15" fill="rgb(241,50,6)" fg:x="985" fg:w="1"/><text x="79.9426%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="79.6926%" y="229" width="0.0809%" height="15" fill="rgb(225,28,51)" fg:x="985" fg:w="1"/><text x="79.9426%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="79.6926%" y="213" width="0.0809%" height="15" fill="rgb(215,33,16)" fg:x="985" fg:w="1"/><text x="79.9426%" y="223.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="79.8544%" y="421" width="0.0809%" height="15" fill="rgb(243,40,39)" fg:x="987" fg:w="1"/><text x="80.1044%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="79.8544%" y="405" width="0.0809%" height="15" fill="rgb(225,11,42)" fg:x="987" fg:w="1"/><text x="80.1044%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="79.8544%" y="389" width="0.0809%" height="15" fill="rgb(241,220,38)" fg:x="987" fg:w="1"/><text x="80.1044%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="79.8544%" y="373" width="0.0809%" height="15" fill="rgb(244,52,35)" fg:x="987" fg:w="1"/><text x="80.1044%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="79.8544%" y="357" width="0.0809%" height="15" fill="rgb(246,42,46)" fg:x="987" fg:w="1"/><text x="80.1044%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="79.8544%" y="341" width="0.0809%" height="15" fill="rgb(205,184,13)" fg:x="987" fg:w="1"/><text x="80.1044%" y="351.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="79.8544%" y="325" width="0.0809%" height="15" fill="rgb(209,48,36)" fg:x="987" fg:w="1"/><text x="80.1044%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="79.8544%" y="309" width="0.0809%" height="15" fill="rgb(244,34,51)" fg:x="987" fg:w="1"/><text x="80.1044%" y="319.50"></text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (20 samples, 1.62%)</title><rect x="78.3981%" y="629" width="1.6181%" height="15" fill="rgb(221,107,33)" fg:x="969" fg:w="20"/><text x="78.6481%" y="639.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (20 samples, 1.62%)</title><rect x="78.3981%" y="613" width="1.6181%" height="15" fill="rgb(224,203,12)" fg:x="969" fg:w="20"/><text x="78.6481%" y="623.50"></text></g><g><title>plugins_rpc::querying::have_surroundings (19 samples, 1.54%)</title><rect x="78.4790%" y="597" width="1.5372%" height="15" fill="rgb(230,215,18)" fg:x="970" fg:w="19"/><text x="78.7290%" y="607.50"></text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (19 samples, 1.54%)</title><rect x="78.4790%" y="581" width="1.5372%" height="15" fill="rgb(206,185,35)" fg:x="970" fg:w="19"/><text x="78.7290%" y="591.50"></text></g><g><title>core::iter::adapters::try_process (18 samples, 1.46%)</title><rect x="78.5599%" y="565" width="1.4563%" height="15" fill="rgb(228,140,34)" fg:x="971" fg:w="18"/><text x="78.8099%" y="575.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (7 samples, 0.57%)</title><rect x="79.4498%" y="549" width="0.5663%" height="15" fill="rgb(208,93,13)" fg:x="982" fg:w="7"/><text x="79.6998%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (7 samples, 0.57%)</title><rect x="79.4498%" y="533" width="0.5663%" height="15" fill="rgb(221,193,39)" fg:x="982" fg:w="7"/><text x="79.6998%" y="543.50"></text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (7 samples, 0.57%)</title><rect x="79.4498%" y="517" width="0.5663%" height="15" fill="rgb(241,132,34)" fg:x="982" fg:w="7"/><text x="79.6998%" y="527.50"></text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (7 samples, 0.57%)</title><rect x="79.4498%" y="501" width="0.5663%" height="15" fill="rgb(221,141,10)" fg:x="982" fg:w="7"/><text x="79.6998%" y="511.50"></text></g><g><title>kernel::model::EntityPtr::to_json_value (3 samples, 0.24%)</title><rect x="79.7735%" y="485" width="0.2427%" height="15" fill="rgb(226,90,31)" fg:x="986" fg:w="3"/><text x="80.0235%" y="495.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="79.7735%" y="469" width="0.2427%" height="15" fill="rgb(243,75,5)" fg:x="986" fg:w="3"/><text x="80.0235%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="79.7735%" y="453" width="0.2427%" height="15" fill="rgb(227,156,21)" fg:x="986" fg:w="3"/><text x="80.0235%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="79.7735%" y="437" width="0.2427%" height="15" fill="rgb(250,195,8)" fg:x="986" fg:w="3"/><text x="80.0235%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.9353%" y="421" width="0.0809%" height="15" fill="rgb(220,134,5)" fg:x="988" fg:w="1"/><text x="80.1853%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.9353%" y="405" width="0.0809%" height="15" fill="rgb(246,106,34)" fg:x="988" fg:w="1"/><text x="80.1853%" y="415.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="79.9353%" y="389" width="0.0809%" height="15" fill="rgb(205,1,4)" fg:x="988" fg:w="1"/><text x="80.1853%" y="399.50"></text></g><g><title>kernel::surround::Surroundings::unpack (1 samples, 0.08%)</title><rect x="80.0162%" y="485" width="0.0809%" height="15" fill="rgb(224,151,29)" fg:x="989" fg:w="1"/><text x="80.2662%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (1 samples, 0.08%)</title><rect x="80.0971%" y="453" width="0.0809%" height="15" fill="rgb(251,196,0)" fg:x="990" fg:w="1"/><text x="80.3471%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.0971%" y="437" width="0.0809%" height="15" fill="rgb(212,127,0)" fg:x="990" fg:w="1"/><text x="80.3471%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="80.1780%" y="405" width="0.0809%" height="15" fill="rgb(236,71,53)" fg:x="991" fg:w="1"/><text x="80.4280%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="80.1780%" y="389" width="0.0809%" height="15" fill="rgb(227,99,0)" fg:x="991" fg:w="1"/><text x="80.4280%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="80.1780%" y="453" width="0.2427%" height="15" fill="rgb(239,89,21)" fg:x="991" fg:w="3"/><text x="80.4280%" y="463.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="80.1780%" y="437" width="0.2427%" height="15" fill="rgb(243,122,19)" fg:x="991" fg:w="3"/><text x="80.4280%" y="447.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="80.1780%" y="421" width="0.2427%" height="15" fill="rgb(229,192,45)" fg:x="991" fg:w="3"/><text x="80.4280%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="80.2589%" y="405" width="0.1618%" height="15" fill="rgb(235,165,35)" fg:x="992" fg:w="2"/><text x="80.5089%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="80.2589%" y="389" width="0.1618%" height="15" fill="rgb(253,202,0)" fg:x="992" fg:w="2"/><text x="80.5089%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="80.2589%" y="373" width="0.1618%" height="15" fill="rgb(235,51,20)" fg:x="992" fg:w="2"/><text x="80.5089%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="80.2589%" y="357" width="0.1618%" height="15" fill="rgb(218,95,46)" fg:x="992" fg:w="2"/><text x="80.5089%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="80.2589%" y="341" width="0.1618%" height="15" fill="rgb(212,81,10)" fg:x="992" fg:w="2"/><text x="80.5089%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="80.2589%" y="325" width="0.1618%" height="15" fill="rgb(240,59,0)" fg:x="992" fg:w="2"/><text x="80.5089%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="80.2589%" y="309" width="0.1618%" height="15" fill="rgb(212,191,42)" fg:x="992" fg:w="2"/><text x="80.5089%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="80.2589%" y="293" width="0.1618%" height="15" fill="rgb(233,140,3)" fg:x="992" fg:w="2"/><text x="80.5089%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="80.2589%" y="277" width="0.1618%" height="15" fill="rgb(215,69,23)" fg:x="992" fg:w="2"/><text x="80.5089%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="80.2589%" y="261" width="0.1618%" height="15" fill="rgb(240,202,20)" fg:x="992" fg:w="2"/><text x="80.5089%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="80.3398%" y="245" width="0.0809%" height="15" fill="rgb(209,146,50)" fg:x="993" fg:w="1"/><text x="80.5898%" y="255.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="80.3398%" y="229" width="0.0809%" height="15" fill="rgb(253,102,54)" fg:x="993" fg:w="1"/><text x="80.5898%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="80.5016%" y="357" width="0.0809%" height="15" fill="rgb(250,173,47)" fg:x="995" fg:w="1"/><text x="80.7516%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="80.5016%" y="341" width="0.0809%" height="15" fill="rgb(232,142,7)" fg:x="995" fg:w="1"/><text x="80.7516%" y="351.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (1 samples, 0.08%)</title><rect x="80.5016%" y="325" width="0.0809%" height="15" fill="rgb(230,157,47)" fg:x="995" fg:w="1"/><text x="80.7516%" y="335.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="80.5016%" y="309" width="0.0809%" height="15" fill="rgb(214,177,35)" fg:x="995" fg:w="1"/><text x="80.7516%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="80.5016%" y="293" width="0.0809%" height="15" fill="rgb(234,119,46)" fg:x="995" fg:w="1"/><text x="80.7516%" y="303.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="80.5016%" y="277" width="0.0809%" height="15" fill="rgb(241,180,50)" fg:x="995" fg:w="1"/><text x="80.7516%" y="287.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="80.5016%" y="261" width="0.0809%" height="15" fill="rgb(221,54,25)" fg:x="995" fg:w="1"/><text x="80.7516%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="80.5016%" y="373" width="0.1618%" height="15" fill="rgb(209,157,44)" fg:x="995" fg:w="2"/><text x="80.7516%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.5825%" y="357" width="0.0809%" height="15" fill="rgb(246,115,41)" fg:x="996" fg:w="1"/><text x="80.8325%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (12 samples, 0.97%)</title><rect x="80.6634%" y="309" width="0.9709%" height="15" fill="rgb(229,86,1)" fg:x="997" fg:w="12"/><text x="80.9134%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (12 samples, 0.97%)</title><rect x="80.6634%" y="293" width="0.9709%" height="15" fill="rgb(240,108,53)" fg:x="997" fg:w="12"/><text x="80.9134%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::error::BuildError&gt; (1 samples, 0.08%)</title><rect x="81.6343%" y="309" width="0.0809%" height="15" fill="rgb(227,134,2)" fg:x="1009" fg:w="1"/><text x="81.8843%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="81.7152%" y="309" width="0.0809%" height="15" fill="rgb(213,129,25)" fg:x="1010" fg:w="1"/><text x="81.9652%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="81.7152%" y="293" width="0.0809%" height="15" fill="rgb(226,35,21)" fg:x="1010" fg:w="1"/><text x="81.9652%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="81.7152%" y="277" width="0.0809%" height="15" fill="rgb(208,129,26)" fg:x="1010" fg:w="1"/><text x="81.9652%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="81.7961%" y="309" width="0.0809%" height="15" fill="rgb(224,83,6)" fg:x="1011" fg:w="1"/><text x="82.0461%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="81.7961%" y="293" width="0.0809%" height="15" fill="rgb(227,52,39)" fg:x="1011" fg:w="1"/><text x="82.0461%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="81.7961%" y="277" width="0.0809%" height="15" fill="rgb(241,30,17)" fg:x="1011" fg:w="1"/><text x="82.0461%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.8770%" y="245" width="0.0809%" height="15" fill="rgb(246,186,42)" fg:x="1012" fg:w="1"/><text x="82.1270%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="81.9579%" y="245" width="0.0809%" height="15" fill="rgb(221,169,15)" fg:x="1013" fg:w="1"/><text x="82.2079%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="81.9579%" y="229" width="0.0809%" height="15" fill="rgb(235,108,21)" fg:x="1013" fg:w="1"/><text x="82.2079%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.9579%" y="213" width="0.0809%" height="15" fill="rgb(219,148,30)" fg:x="1013" fg:w="1"/><text x="82.2079%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="81.9579%" y="197" width="0.0809%" height="15" fill="rgb(220,109,5)" fg:x="1013" fg:w="1"/><text x="82.2079%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="82.0388%" y="245" width="0.0809%" height="15" fill="rgb(213,203,48)" fg:x="1014" fg:w="1"/><text x="82.2888%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="82.0388%" y="229" width="0.0809%" height="15" fill="rgb(244,71,33)" fg:x="1014" fg:w="1"/><text x="82.2888%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="82.0388%" y="213" width="0.0809%" height="15" fill="rgb(209,23,2)" fg:x="1014" fg:w="1"/><text x="82.2888%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.0388%" y="197" width="0.0809%" height="15" fill="rgb(219,97,7)" fg:x="1014" fg:w="1"/><text x="82.2888%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (40 samples, 3.24%)</title><rect x="82.1197%" y="245" width="3.2362%" height="15" fill="rgb(216,161,23)" fg:x="1015" fg:w="40"/><text x="82.3697%" y="255.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (40 samples, 3.24%)</title><rect x="82.1197%" y="229" width="3.2362%" height="15" fill="rgb(207,45,42)" fg:x="1015" fg:w="40"/><text x="82.3697%" y="239.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (40 samples, 3.24%)</title><rect x="82.1197%" y="213" width="3.2362%" height="15" fill="rgb(241,61,4)" fg:x="1015" fg:w="40"/><text x="82.3697%" y="223.50">all..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (45 samples, 3.64%)</title><rect x="81.8770%" y="293" width="3.6408%" height="15" fill="rgb(236,170,1)" fg:x="1012" fg:w="45"/><text x="82.1270%" y="303.50">&lt;cor..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (45 samples, 3.64%)</title><rect x="81.8770%" y="277" width="3.6408%" height="15" fill="rgb(239,72,5)" fg:x="1012" fg:w="45"/><text x="82.1270%" y="287.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (45 samples, 3.64%)</title><rect x="81.8770%" y="261" width="3.6408%" height="15" fill="rgb(214,13,50)" fg:x="1012" fg:w="45"/><text x="82.1270%" y="271.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="85.3560%" y="245" width="0.1618%" height="15" fill="rgb(224,88,9)" fg:x="1055" fg:w="2"/><text x="85.6060%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.4369%" y="229" width="0.0809%" height="15" fill="rgb(238,192,34)" fg:x="1056" fg:w="1"/><text x="85.6869%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="85.5987%" y="277" width="0.1618%" height="15" fill="rgb(217,203,50)" fg:x="1058" fg:w="2"/><text x="85.8487%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="85.5987%" y="261" width="0.1618%" height="15" fill="rgb(241,123,32)" fg:x="1058" fg:w="2"/><text x="85.8487%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="85.5987%" y="245" width="0.1618%" height="15" fill="rgb(248,151,39)" fg:x="1058" fg:w="2"/><text x="85.8487%" y="255.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="85.5987%" y="229" width="0.1618%" height="15" fill="rgb(208,89,6)" fg:x="1058" fg:w="2"/><text x="85.8487%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.0032%" y="229" width="0.0809%" height="15" fill="rgb(254,43,26)" fg:x="1063" fg:w="1"/><text x="86.2532%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.65%)</title><rect x="85.5178%" y="293" width="0.6472%" height="15" fill="rgb(216,158,13)" fg:x="1057" fg:w="8"/><text x="85.7678%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="85.7605%" y="277" width="0.4045%" height="15" fill="rgb(212,47,37)" fg:x="1060" fg:w="5"/><text x="86.0105%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="86.0032%" y="261" width="0.1618%" height="15" fill="rgb(254,16,10)" fg:x="1063" fg:w="2"/><text x="86.2532%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="86.0032%" y="245" width="0.1618%" height="15" fill="rgb(223,228,16)" fg:x="1063" fg:w="2"/><text x="86.2532%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="86.0841%" y="229" width="0.0809%" height="15" fill="rgb(249,108,50)" fg:x="1064" fg:w="1"/><text x="86.3341%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (70 samples, 5.66%)</title><rect x="80.6634%" y="325" width="5.6634%" height="15" fill="rgb(208,220,5)" fg:x="997" fg:w="70"/><text x="80.9134%" y="335.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (55 samples, 4.45%)</title><rect x="81.8770%" y="309" width="4.4498%" height="15" fill="rgb(217,89,48)" fg:x="1012" fg:w="55"/><text x="82.1270%" y="319.50">regex..</text></g><g><title>regex_syntax::hir::Hir::dot (2 samples, 0.16%)</title><rect x="86.1650%" y="293" width="0.1618%" height="15" fill="rgb(212,113,41)" fg:x="1065" fg:w="2"/><text x="86.4150%" y="303.50"></text></g><g><title>regex_syntax::hir::ClassBytes::empty (1 samples, 0.08%)</title><rect x="86.2460%" y="277" width="0.0809%" height="15" fill="rgb(231,127,5)" fg:x="1066" fg:w="1"/><text x="86.4960%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="86.3269%" y="325" width="0.2427%" height="15" fill="rgb(217,141,17)" fg:x="1067" fg:w="3"/><text x="86.5769%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="86.3269%" y="309" width="0.2427%" height="15" fill="rgb(245,125,54)" fg:x="1067" fg:w="3"/><text x="86.5769%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="86.3269%" y="293" width="0.2427%" height="15" fill="rgb(248,125,3)" fg:x="1067" fg:w="3"/><text x="86.5769%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="86.3269%" y="277" width="0.2427%" height="15" fill="rgb(236,119,51)" fg:x="1067" fg:w="3"/><text x="86.5769%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="86.3269%" y="261" width="0.2427%" height="15" fill="rgb(239,99,8)" fg:x="1067" fg:w="3"/><text x="86.5769%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="86.3269%" y="245" width="0.2427%" height="15" fill="rgb(224,228,4)" fg:x="1067" fg:w="3"/><text x="86.5769%" y="255.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="86.3269%" y="229" width="0.2427%" height="15" fill="rgb(220,131,45)" fg:x="1067" fg:w="3"/><text x="86.5769%" y="239.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (76 samples, 6.15%)</title><rect x="80.6634%" y="373" width="6.1489%" height="15" fill="rgb(215,62,5)" fg:x="997" fg:w="76"/><text x="80.9134%" y="383.50">&lt;regex::..</text></g><g><title>regex::builders::Builder::build_one_string (76 samples, 6.15%)</title><rect x="80.6634%" y="357" width="6.1489%" height="15" fill="rgb(253,12,24)" fg:x="997" fg:w="76"/><text x="80.9134%" y="367.50">regex::b..</text></g><g><title>regex_automata::meta::regex::Builder::build (76 samples, 6.15%)</title><rect x="80.6634%" y="341" width="6.1489%" height="15" fill="rgb(248,120,50)" fg:x="997" fg:w="76"/><text x="80.9134%" y="351.50">regex_au..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="86.5696%" y="325" width="0.2427%" height="15" fill="rgb(245,194,10)" fg:x="1070" fg:w="3"/><text x="86.8196%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="86.6505%" y="309" width="0.1618%" height="15" fill="rgb(241,149,38)" fg:x="1071" fg:w="2"/><text x="86.9005%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="86.7314%" y="293" width="0.0809%" height="15" fill="rgb(219,215,7)" fg:x="1072" fg:w="1"/><text x="86.9814%" y="303.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="86.7314%" y="277" width="0.0809%" height="15" fill="rgb(208,120,31)" fg:x="1072" fg:w="1"/><text x="86.9814%" y="287.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="86.8123%" y="373" width="0.0809%" height="15" fill="rgb(244,30,8)" fg:x="1073" fg:w="1"/><text x="87.0623%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="86.8932%" y="341" width="0.0809%" height="15" fill="rgb(238,35,44)" fg:x="1074" fg:w="1"/><text x="87.1432%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="86.8932%" y="325" width="0.0809%" height="15" fill="rgb(243,218,37)" fg:x="1074" fg:w="1"/><text x="87.1432%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="86.8932%" y="309" width="0.0809%" height="15" fill="rgb(218,169,10)" fg:x="1074" fg:w="1"/><text x="87.1432%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.8932%" y="293" width="0.0809%" height="15" fill="rgb(221,144,10)" fg:x="1074" fg:w="1"/><text x="87.1432%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="86.8932%" y="373" width="0.1618%" height="15" fill="rgb(226,41,38)" fg:x="1074" fg:w="2"/><text x="87.1432%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="86.8932%" y="357" width="0.1618%" height="15" fill="rgb(228,3,1)" fg:x="1074" fg:w="2"/><text x="87.1432%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="86.9741%" y="341" width="0.0809%" height="15" fill="rgb(209,129,12)" fg:x="1075" fg:w="1"/><text x="87.2241%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.9741%" y="325" width="0.0809%" height="15" fill="rgb(213,136,33)" fg:x="1075" fg:w="1"/><text x="87.2241%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="87.0550%" y="309" width="0.1618%" height="15" fill="rgb(209,181,29)" fg:x="1076" fg:w="2"/><text x="87.3050%" y="319.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (84 samples, 6.80%)</title><rect x="80.5016%" y="389" width="6.7961%" height="15" fill="rgb(234,173,18)" fg:x="995" fg:w="84"/><text x="80.7516%" y="399.50">indefinit..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="87.0550%" y="373" width="0.2427%" height="15" fill="rgb(227,73,47)" fg:x="1076" fg:w="3"/><text x="87.3050%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="87.0550%" y="357" width="0.2427%" height="15" fill="rgb(234,9,34)" fg:x="1076" fg:w="3"/><text x="87.3050%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="87.0550%" y="341" width="0.2427%" height="15" fill="rgb(235,172,15)" fg:x="1076" fg:w="3"/><text x="87.3050%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="87.0550%" y="325" width="0.2427%" height="15" fill="rgb(245,61,2)" fg:x="1076" fg:w="3"/><text x="87.3050%" y="335.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="87.2168%" y="309" width="0.0809%" height="15" fill="rgb(238,39,47)" fg:x="1078" fg:w="1"/><text x="87.4668%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="87.2168%" y="293" width="0.0809%" height="15" fill="rgb(234,37,24)" fg:x="1078" fg:w="1"/><text x="87.4668%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.2168%" y="277" width="0.0809%" height="15" fill="rgb(248,223,24)" fg:x="1078" fg:w="1"/><text x="87.4668%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.2168%" y="261" width="0.0809%" height="15" fill="rgb(223,12,15)" fg:x="1078" fg:w="1"/><text x="87.4668%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="87.2977%" y="325" width="0.0809%" height="15" fill="rgb(249,6,3)" fg:x="1079" fg:w="1"/><text x="87.5477%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="87.2977%" y="309" width="0.0809%" height="15" fill="rgb(237,105,33)" fg:x="1079" fg:w="1"/><text x="87.5477%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="87.2977%" y="293" width="0.0809%" height="15" fill="rgb(252,208,35)" fg:x="1079" fg:w="1"/><text x="87.5477%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.3786%" y="325" width="0.0809%" height="15" fill="rgb(215,181,35)" fg:x="1080" fg:w="1"/><text x="87.6286%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="87.4595%" y="325" width="0.0809%" height="15" fill="rgb(246,212,3)" fg:x="1081" fg:w="1"/><text x="87.7095%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="87.4595%" y="309" width="0.0809%" height="15" fill="rgb(247,156,24)" fg:x="1081" fg:w="1"/><text x="87.7095%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (16 samples, 1.29%)</title><rect x="87.6214%" y="309" width="1.2945%" height="15" fill="rgb(248,9,31)" fg:x="1083" fg:w="16"/><text x="87.8714%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (16 samples, 1.29%)</title><rect x="87.6214%" y="293" width="1.2945%" height="15" fill="rgb(234,26,45)" fg:x="1083" fg:w="16"/><text x="87.8714%" y="303.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="88.7540%" y="277" width="0.1618%" height="15" fill="rgb(249,11,32)" fg:x="1097" fg:w="2"/><text x="89.0040%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="88.9159%" y="309" width="0.1618%" height="15" fill="rgb(249,162,33)" fg:x="1099" fg:w="2"/><text x="89.1659%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="88.9968%" y="293" width="0.0809%" height="15" fill="rgb(232,4,32)" fg:x="1100" fg:w="1"/><text x="89.2468%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="89.2395%" y="277" width="0.0809%" height="15" fill="rgb(212,5,45)" fg:x="1103" fg:w="1"/><text x="89.4895%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="89.2395%" y="261" width="0.0809%" height="15" fill="rgb(227,95,13)" fg:x="1103" fg:w="1"/><text x="89.4895%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.2395%" y="245" width="0.0809%" height="15" fill="rgb(223,205,10)" fg:x="1103" fg:w="1"/><text x="89.4895%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="89.2395%" y="229" width="0.0809%" height="15" fill="rgb(222,178,8)" fg:x="1103" fg:w="1"/><text x="89.4895%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (1 samples, 0.08%)</title><rect x="89.3204%" y="277" width="0.0809%" height="15" fill="rgb(216,13,22)" fg:x="1104" fg:w="1"/><text x="89.5704%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (1 samples, 0.08%)</title><rect x="89.4013%" y="277" width="0.0809%" height="15" fill="rgb(240,167,12)" fg:x="1105" fg:w="1"/><text x="89.6513%" y="287.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="89.4013%" y="261" width="0.0809%" height="15" fill="rgb(235,68,35)" fg:x="1105" fg:w="1"/><text x="89.6513%" y="271.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="89.4013%" y="245" width="0.0809%" height="15" fill="rgb(253,40,27)" fg:x="1105" fg:w="1"/><text x="89.6513%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (6 samples, 0.49%)</title><rect x="89.0777%" y="309" width="0.4854%" height="15" fill="rgb(214,19,28)" fg:x="1101" fg:w="6"/><text x="89.3277%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (6 samples, 0.49%)</title><rect x="89.0777%" y="293" width="0.4854%" height="15" fill="rgb(210,167,45)" fg:x="1101" fg:w="6"/><text x="89.3277%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="89.4822%" y="277" width="0.0809%" height="15" fill="rgb(232,97,40)" fg:x="1106" fg:w="1"/><text x="89.7322%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.4822%" y="261" width="0.0809%" height="15" fill="rgb(250,35,23)" fg:x="1106" fg:w="1"/><text x="89.7322%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.4822%" y="245" width="0.0809%" height="15" fill="rgb(248,47,53)" fg:x="1106" fg:w="1"/><text x="89.7322%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.4822%" y="229" width="0.0809%" height="15" fill="rgb(226,58,50)" fg:x="1106" fg:w="1"/><text x="89.7322%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="89.5631%" y="309" width="0.0809%" height="15" fill="rgb(217,105,26)" fg:x="1107" fg:w="1"/><text x="89.8131%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="89.6440%" y="229" width="0.0809%" height="15" fill="rgb(208,64,1)" fg:x="1108" fg:w="1"/><text x="89.8940%" y="239.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="90.2913%" y="197" width="0.0809%" height="15" fill="rgb(214,80,1)" fg:x="1116" fg:w="1"/><text x="90.5413%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.3722%" y="197" width="0.0809%" height="15" fill="rgb(206,175,26)" fg:x="1117" fg:w="1"/><text x="90.6222%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (4 samples, 0.32%)</title><rect x="90.4531%" y="197" width="0.3236%" height="15" fill="rgb(235,156,37)" fg:x="1118" fg:w="4"/><text x="90.7031%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="90.5340%" y="181" width="0.2427%" height="15" fill="rgb(213,100,9)" fg:x="1119" fg:w="3"/><text x="90.7840%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="90.5340%" y="165" width="0.2427%" height="15" fill="rgb(241,15,13)" fg:x="1119" fg:w="3"/><text x="90.7840%" y="175.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="90.5340%" y="149" width="0.2427%" height="15" fill="rgb(205,97,43)" fg:x="1119" fg:w="3"/><text x="90.7840%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="90.8576%" y="165" width="0.1618%" height="15" fill="rgb(216,106,32)" fg:x="1123" fg:w="2"/><text x="91.1076%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.9385%" y="149" width="0.0809%" height="15" fill="rgb(226,200,8)" fg:x="1124" fg:w="1"/><text x="91.1885%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.9385%" y="133" width="0.0809%" height="15" fill="rgb(244,54,29)" fg:x="1124" fg:w="1"/><text x="91.1885%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (8 samples, 0.65%)</title><rect x="90.7767%" y="197" width="0.6472%" height="15" fill="rgb(252,169,12)" fg:x="1122" fg:w="8"/><text x="91.0267%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (8 samples, 0.65%)</title><rect x="90.7767%" y="181" width="0.6472%" height="15" fill="rgb(231,199,11)" fg:x="1122" fg:w="8"/><text x="91.0267%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (5 samples, 0.40%)</title><rect x="91.0194%" y="165" width="0.4045%" height="15" fill="rgb(233,191,18)" fg:x="1125" fg:w="5"/><text x="91.2694%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="91.2621%" y="149" width="0.1618%" height="15" fill="rgb(215,83,47)" fg:x="1128" fg:w="2"/><text x="91.5121%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.3430%" y="133" width="0.0809%" height="15" fill="rgb(251,67,19)" fg:x="1129" fg:w="1"/><text x="91.5930%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.3430%" y="117" width="0.0809%" height="15" fill="rgb(240,7,20)" fg:x="1129" fg:w="1"/><text x="91.5930%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.3430%" y="101" width="0.0809%" height="15" fill="rgb(210,150,26)" fg:x="1129" fg:w="1"/><text x="91.5930%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (45 samples, 3.64%)</title><rect x="91.4239%" y="197" width="3.6408%" height="15" fill="rgb(228,75,42)" fg:x="1130" fg:w="45"/><text x="91.6739%" y="207.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (45 samples, 3.64%)</title><rect x="91.4239%" y="181" width="3.6408%" height="15" fill="rgb(237,134,48)" fg:x="1130" fg:w="45"/><text x="91.6739%" y="191.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (45 samples, 3.64%)</title><rect x="91.4239%" y="165" width="3.6408%" height="15" fill="rgb(205,80,50)" fg:x="1130" fg:w="45"/><text x="91.6739%" y="175.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="95.0647%" y="197" width="0.1618%" height="15" fill="rgb(217,74,48)" fg:x="1175" fg:w="2"/><text x="95.3147%" y="207.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="95.0647%" y="181" width="0.1618%" height="15" fill="rgb(205,82,50)" fg:x="1175" fg:w="2"/><text x="95.3147%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.3074%" y="149" width="0.0809%" height="15" fill="rgb(228,1,33)" fg:x="1178" fg:w="1"/><text x="95.5574%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (72 samples, 5.83%)</title><rect x="89.6440%" y="293" width="5.8252%" height="15" fill="rgb(214,50,23)" fg:x="1108" fg:w="72"/><text x="89.8940%" y="303.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (72 samples, 5.83%)</title><rect x="89.6440%" y="277" width="5.8252%" height="15" fill="rgb(210,62,9)" fg:x="1108" fg:w="72"/><text x="89.8940%" y="287.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (72 samples, 5.83%)</title><rect x="89.6440%" y="261" width="5.8252%" height="15" fill="rgb(210,104,37)" fg:x="1108" fg:w="72"/><text x="89.8940%" y="271.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (72 samples, 5.83%)</title><rect x="89.6440%" y="245" width="5.8252%" height="15" fill="rgb(232,104,43)" fg:x="1108" fg:w="72"/><text x="89.8940%" y="255.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (71 samples, 5.74%)</title><rect x="89.7249%" y="229" width="5.7443%" height="15" fill="rgb(244,52,6)" fg:x="1109" fg:w="71"/><text x="89.9749%" y="239.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (71 samples, 5.74%)</title><rect x="89.7249%" y="213" width="5.7443%" height="15" fill="rgb(211,174,52)" fg:x="1109" fg:w="71"/><text x="89.9749%" y="223.50">regex_a..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.24%)</title><rect x="95.2265%" y="197" width="0.2427%" height="15" fill="rgb(229,48,4)" fg:x="1177" fg:w="3"/><text x="95.4765%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="95.2265%" y="181" width="0.2427%" height="15" fill="rgb(205,155,16)" fg:x="1177" fg:w="3"/><text x="95.4765%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="95.3074%" y="165" width="0.1618%" height="15" fill="rgb(211,141,53)" fg:x="1178" fg:w="2"/><text x="95.5574%" y="175.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="95.3883%" y="149" width="0.0809%" height="15" fill="rgb(240,148,11)" fg:x="1179" fg:w="1"/><text x="95.6383%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="95.3883%" y="133" width="0.0809%" height="15" fill="rgb(214,45,23)" fg:x="1179" fg:w="1"/><text x="95.6383%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.4693%" y="277" width="0.0809%" height="15" fill="rgb(248,74,26)" fg:x="1180" fg:w="1"/><text x="95.7193%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="95.5502%" y="277" width="0.0809%" height="15" fill="rgb(218,121,16)" fg:x="1181" fg:w="1"/><text x="95.8002%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.5502%" y="261" width="0.0809%" height="15" fill="rgb(218,10,47)" fg:x="1181" fg:w="1"/><text x="95.8002%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.5502%" y="245" width="0.0809%" height="15" fill="rgb(227,99,14)" fg:x="1181" fg:w="1"/><text x="95.8002%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.5502%" y="229" width="0.0809%" height="15" fill="rgb(229,83,46)" fg:x="1181" fg:w="1"/><text x="95.8002%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="95.6311%" y="277" width="0.2427%" height="15" fill="rgb(228,25,1)" fg:x="1182" fg:w="3"/><text x="95.8811%" y="287.50"></text></g><g><title>regex_automata::meta::strategy::new (104 samples, 8.41%)</title><rect x="87.5405%" y="325" width="8.4142%" height="15" fill="rgb(252,190,15)" fg:x="1082" fg:w="104"/><text x="87.7905%" y="335.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (78 samples, 6.31%)</title><rect x="89.6440%" y="309" width="6.3107%" height="15" fill="rgb(213,103,51)" fg:x="1108" fg:w="78"/><text x="89.8940%" y="319.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.49%)</title><rect x="95.4693%" y="293" width="0.4854%" height="15" fill="rgb(220,38,44)" fg:x="1180" fg:w="6"/><text x="95.7193%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="95.8738%" y="277" width="0.0809%" height="15" fill="rgb(210,45,26)" fg:x="1185" fg:w="1"/><text x="96.1238%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="95.9547%" y="293" width="0.0809%" height="15" fill="rgb(205,95,48)" fg:x="1186" fg:w="1"/><text x="96.2047%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="95.9547%" y="277" width="0.0809%" height="15" fill="rgb(225,179,37)" fg:x="1186" fg:w="1"/><text x="96.2047%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.9547%" y="261" width="0.0809%" height="15" fill="rgb(230,209,3)" fg:x="1186" fg:w="1"/><text x="96.2047%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.9547%" y="245" width="0.0809%" height="15" fill="rgb(248,12,46)" fg:x="1186" fg:w="1"/><text x="96.2047%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.9547%" y="229" width="0.0809%" height="15" fill="rgb(234,18,0)" fg:x="1186" fg:w="1"/><text x="96.2047%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="96.0356%" y="293" width="0.0809%" height="15" fill="rgb(238,197,14)" fg:x="1187" fg:w="1"/><text x="96.2856%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="95.9547%" y="325" width="0.2427%" height="15" fill="rgb(251,162,48)" fg:x="1186" fg:w="3"/><text x="96.2047%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="95.9547%" y="309" width="0.2427%" height="15" fill="rgb(237,73,42)" fg:x="1186" fg:w="3"/><text x="96.2047%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="96.1165%" y="293" width="0.0809%" height="15" fill="rgb(211,108,8)" fg:x="1188" fg:w="1"/><text x="96.3665%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.1165%" y="277" width="0.0809%" height="15" fill="rgb(213,45,22)" fg:x="1188" fg:w="1"/><text x="96.3665%" y="287.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (115 samples, 9.30%)</title><rect x="87.2977%" y="373" width="9.3042%" height="15" fill="rgb(252,154,5)" fg:x="1079" fg:w="115"/><text x="87.5477%" y="383.50">&lt;regex::regex..</text></g><g><title>regex::builders::Builder::build_one_string (115 samples, 9.30%)</title><rect x="87.2977%" y="357" width="9.3042%" height="15" fill="rgb(221,79,52)" fg:x="1079" fg:w="115"/><text x="87.5477%" y="367.50">regex::builde..</text></g><g><title>regex_automata::meta::regex::Builder::build (115 samples, 9.30%)</title><rect x="87.2977%" y="341" width="9.3042%" height="15" fill="rgb(229,220,36)" fg:x="1079" fg:w="115"/><text x="87.5477%" y="351.50">regex_automat..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.40%)</title><rect x="96.1974%" y="325" width="0.4045%" height="15" fill="rgb(211,17,16)" fg:x="1189" fg:w="5"/><text x="96.4474%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.40%)</title><rect x="96.1974%" y="309" width="0.4045%" height="15" fill="rgb(222,55,31)" fg:x="1189" fg:w="5"/><text x="96.4474%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="96.2783%" y="293" width="0.3236%" height="15" fill="rgb(221,221,31)" fg:x="1190" fg:w="4"/><text x="96.5283%" y="303.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="96.3592%" y="277" width="0.2427%" height="15" fill="rgb(227,168,26)" fg:x="1191" fg:w="3"/><text x="96.6092%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.5210%" y="261" width="0.0809%" height="15" fill="rgb(224,139,9)" fg:x="1193" fg:w="1"/><text x="96.7710%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.5210%" y="245" width="0.0809%" height="15" fill="rgb(254,172,0)" fg:x="1193" fg:w="1"/><text x="96.7710%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.5210%" y="229" width="0.0809%" height="15" fill="rgb(235,203,1)" fg:x="1193" fg:w="1"/><text x="96.7710%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="96.6019%" y="373" width="0.0809%" height="15" fill="rgb(216,205,24)" fg:x="1194" fg:w="1"/><text x="96.8519%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="96.6019%" y="357" width="0.0809%" height="15" fill="rgb(233,24,6)" fg:x="1194" fg:w="1"/><text x="96.8519%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="96.6019%" y="341" width="0.0809%" height="15" fill="rgb(244,110,9)" fg:x="1194" fg:w="1"/><text x="96.8519%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="96.6019%" y="325" width="0.0809%" height="15" fill="rgb(239,222,42)" fg:x="1194" fg:w="1"/><text x="96.8519%" y="335.50"></text></g><g><title>indefinite::rules::number::Number::check (120 samples, 9.71%)</title><rect x="87.2977%" y="389" width="9.7087%" height="15" fill="rgb(218,145,13)" fg:x="1079" fg:w="120"/><text x="87.5477%" y="399.50">indefinite::ru..</text></g><g><title>regex::regex::string::Regex::is_match_at (4 samples, 0.32%)</title><rect x="96.6828%" y="373" width="0.3236%" height="15" fill="rgb(207,69,11)" fg:x="1195" fg:w="4"/><text x="96.9328%" y="383.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="96.6828%" y="357" width="0.3236%" height="15" fill="rgb(220,223,22)" fg:x="1195" fg:w="4"/><text x="96.9328%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="96.6828%" y="341" width="0.3236%" height="15" fill="rgb(245,102,5)" fg:x="1195" fg:w="4"/><text x="96.9328%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="96.6828%" y="325" width="0.3236%" height="15" fill="rgb(211,148,2)" fg:x="1195" fg:w="4"/><text x="96.9328%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="96.6828%" y="309" width="0.3236%" height="15" fill="rgb(241,13,44)" fg:x="1195" fg:w="4"/><text x="96.9328%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="96.6828%" y="293" width="0.3236%" height="15" fill="rgb(219,137,21)" fg:x="1195" fg:w="4"/><text x="96.9328%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="96.9256%" y="277" width="0.0809%" height="15" fill="rgb(242,206,5)" fg:x="1198" fg:w="1"/><text x="97.1756%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.9256%" y="261" width="0.0809%" height="15" fill="rgb(217,114,22)" fg:x="1198" fg:w="1"/><text x="97.1756%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.9256%" y="245" width="0.0809%" height="15" fill="rgb(253,206,42)" fg:x="1198" fg:w="1"/><text x="97.1756%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.1683%" y="309" width="0.0809%" height="15" fill="rgb(236,102,18)" fg:x="1201" fg:w="1"/><text x="97.4183%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.2492%" y="309" width="0.0809%" height="15" fill="rgb(208,59,49)" fg:x="1202" fg:w="1"/><text x="97.4992%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.2492%" y="293" width="0.0809%" height="15" fill="rgb(215,194,28)" fg:x="1202" fg:w="1"/><text x="97.4992%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="97.3301%" y="309" width="0.0809%" height="15" fill="rgb(243,207,11)" fg:x="1203" fg:w="1"/><text x="97.5801%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.3301%" y="293" width="0.0809%" height="15" fill="rgb(254,179,35)" fg:x="1203" fg:w="1"/><text x="97.5801%" y="303.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="97.4110%" y="309" width="0.0809%" height="15" fill="rgb(235,97,3)" fg:x="1204" fg:w="1"/><text x="97.6610%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.4919%" y="293" width="0.0809%" height="15" fill="rgb(215,155,33)" fg:x="1205" fg:w="1"/><text x="97.7419%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="97.5728%" y="293" width="0.2427%" height="15" fill="rgb(223,128,12)" fg:x="1206" fg:w="3"/><text x="97.8228%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="97.6537%" y="277" width="0.1618%" height="15" fill="rgb(208,157,18)" fg:x="1207" fg:w="2"/><text x="97.9037%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="97.8155%" y="277" width="0.0809%" height="15" fill="rgb(249,70,54)" fg:x="1209" fg:w="1"/><text x="98.0655%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="97.8155%" y="261" width="0.0809%" height="15" fill="rgb(244,118,24)" fg:x="1209" fg:w="1"/><text x="98.0655%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="97.8155%" y="245" width="0.0809%" height="15" fill="rgb(211,54,0)" fg:x="1209" fg:w="1"/><text x="98.0655%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.8155%" y="229" width="0.0809%" height="15" fill="rgb(245,137,45)" fg:x="1209" fg:w="1"/><text x="98.0655%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.8155%" y="213" width="0.0809%" height="15" fill="rgb(232,154,31)" fg:x="1209" fg:w="1"/><text x="98.0655%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.8155%" y="197" width="0.0809%" height="15" fill="rgb(253,6,39)" fg:x="1209" fg:w="1"/><text x="98.0655%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="97.8964%" y="277" width="0.0809%" height="15" fill="rgb(234,183,24)" fg:x="1210" fg:w="1"/><text x="98.1464%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.8964%" y="261" width="0.0809%" height="15" fill="rgb(252,84,40)" fg:x="1210" fg:w="1"/><text x="98.1464%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.8964%" y="245" width="0.0809%" height="15" fill="rgb(224,65,2)" fg:x="1210" fg:w="1"/><text x="98.1464%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.8964%" y="229" width="0.0809%" height="15" fill="rgb(229,38,24)" fg:x="1210" fg:w="1"/><text x="98.1464%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="98.1392%" y="261" width="0.0809%" height="15" fill="rgb(218,131,50)" fg:x="1213" fg:w="1"/><text x="98.3892%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::new (10 samples, 0.81%)</title><rect x="97.4919%" y="309" width="0.8091%" height="15" fill="rgb(233,106,18)" fg:x="1205" fg:w="10"/><text x="97.7419%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (6 samples, 0.49%)</title><rect x="97.8155%" y="293" width="0.4854%" height="15" fill="rgb(220,216,11)" fg:x="1209" fg:w="6"/><text x="98.0655%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="97.9773%" y="277" width="0.3236%" height="15" fill="rgb(251,100,45)" fg:x="1211" fg:w="4"/><text x="98.2273%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="98.2201%" y="261" width="0.0809%" height="15" fill="rgb(235,143,32)" fg:x="1214" fg:w="1"/><text x="98.4701%" y="271.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="98.3010%" y="261" width="0.0809%" height="15" fill="rgb(248,124,34)" fg:x="1215" fg:w="1"/><text x="98.5510%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="98.3819%" y="261" width="0.0809%" height="15" fill="rgb(225,221,4)" fg:x="1216" fg:w="1"/><text x="98.6319%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="98.3819%" y="245" width="0.0809%" height="15" fill="rgb(242,27,43)" fg:x="1216" fg:w="1"/><text x="98.6319%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="98.3010%" y="277" width="0.4045%" height="15" fill="rgb(227,54,8)" fg:x="1215" fg:w="5"/><text x="98.5510%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="98.4628%" y="261" width="0.2427%" height="15" fill="rgb(253,139,49)" fg:x="1217" fg:w="3"/><text x="98.7128%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (3 samples, 0.24%)</title><rect x="98.4628%" y="245" width="0.2427%" height="15" fill="rgb(231,26,43)" fg:x="1217" fg:w="3"/><text x="98.7128%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.65%)</title><rect x="98.3010%" y="309" width="0.6472%" height="15" fill="rgb(207,121,39)" fg:x="1215" fg:w="8"/><text x="98.5510%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.65%)</title><rect x="98.3010%" y="293" width="0.6472%" height="15" fill="rgb(223,101,35)" fg:x="1215" fg:w="8"/><text x="98.5510%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="98.7055%" y="277" width="0.2427%" height="15" fill="rgb(232,87,23)" fg:x="1220" fg:w="3"/><text x="98.9555%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="98.8673%" y="261" width="0.0809%" height="15" fill="rgb(225,180,29)" fg:x="1222" fg:w="1"/><text x="99.1173%" y="271.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="98.9482%" y="261" width="0.0809%" height="15" fill="rgb(225,25,17)" fg:x="1223" fg:w="1"/><text x="99.1982%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="98.9482%" y="277" width="0.1618%" height="15" fill="rgb(223,8,52)" fg:x="1223" fg:w="2"/><text x="99.1982%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="99.0291%" y="261" width="0.0809%" height="15" fill="rgb(246,42,21)" fg:x="1224" fg:w="1"/><text x="99.2791%" y="271.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (27 samples, 2.18%)</title><rect x="97.0874%" y="357" width="2.1845%" height="15" fill="rgb(205,64,43)" fg:x="1200" fg:w="27"/><text x="97.3374%" y="367.50">&lt;..</text></g><g><title>regex::builders::Builder::build_one_string (27 samples, 2.18%)</title><rect x="97.0874%" y="341" width="2.1845%" height="15" fill="rgb(221,160,13)" fg:x="1200" fg:w="27"/><text x="97.3374%" y="351.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (27 samples, 2.18%)</title><rect x="97.0874%" y="325" width="2.1845%" height="15" fill="rgb(239,58,35)" fg:x="1200" fg:w="27"/><text x="97.3374%" y="335.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="98.9482%" y="309" width="0.3236%" height="15" fill="rgb(251,26,40)" fg:x="1223" fg:w="4"/><text x="99.1982%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="98.9482%" y="293" width="0.3236%" height="15" fill="rgb(247,0,4)" fg:x="1223" fg:w="4"/><text x="99.1982%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="99.1100%" y="277" width="0.1618%" height="15" fill="rgb(218,130,10)" fg:x="1225" fg:w="2"/><text x="99.3600%" y="287.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="99.1909%" y="261" width="0.0809%" height="15" fill="rgb(239,32,7)" fg:x="1226" fg:w="1"/><text x="99.4409%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="99.2718%" y="357" width="0.0809%" height="15" fill="rgb(210,192,24)" fg:x="1227" fg:w="1"/><text x="99.5218%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="99.2718%" y="341" width="0.0809%" height="15" fill="rgb(226,212,17)" fg:x="1227" fg:w="1"/><text x="99.5218%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="99.2718%" y="325" width="0.0809%" height="15" fill="rgb(219,201,28)" fg:x="1227" fg:w="1"/><text x="99.5218%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="99.2718%" y="309" width="0.0809%" height="15" fill="rgb(235,207,41)" fg:x="1227" fg:w="1"/><text x="99.5218%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.2718%" y="293" width="0.0809%" height="15" fill="rgb(241,95,54)" fg:x="1227" fg:w="1"/><text x="99.5218%" y="303.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (263 samples, 21.28%)</title><rect x="78.3172%" y="645" width="21.2783%" height="15" fill="rgb(248,12,23)" fg:x="968" fg:w="263"/><text x="78.5672%" y="655.50">&lt;engine::session::Session as kerne..</text></g><g><title>kernel::plugins::mw::apply_middleware (242 samples, 19.58%)</title><rect x="80.0162%" y="629" width="19.5793%" height="15" fill="rgb(228,173,4)" fg:x="989" fg:w="242"/><text x="80.2662%" y="639.50">kernel::plugins::mw::apply_midd..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (242 samples, 19.58%)</title><rect x="80.0162%" y="613" width="19.5793%" height="15" fill="rgb(254,99,5)" fg:x="989" fg:w="242"/><text x="80.2662%" y="623.50">kernel::plugins::mw::Middleware..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (242 samples, 19.58%)</title><rect x="80.0162%" y="597" width="19.5793%" height="15" fill="rgb(212,184,17)" fg:x="989" fg:w="242"/><text x="80.2662%" y="607.50">&lt;plugins_dynlib::DynamicMiddlew..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (242 samples, 19.58%)</title><rect x="80.0162%" y="581" width="19.5793%" height="15" fill="rgb(252,174,1)" fg:x="989" fg:w="242"/><text x="80.2662%" y="591.50">kernel::plugins::mw::Middleware..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (242 samples, 19.58%)</title><rect x="80.0162%" y="565" width="19.5793%" height="15" fill="rgb(241,118,51)" fg:x="989" fg:w="242"/><text x="80.2662%" y="575.50">core::ops::function::FnOnce::ca..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (242 samples, 19.58%)</title><rect x="80.0162%" y="549" width="19.5793%" height="15" fill="rgb(227,94,47)" fg:x="989" fg:w="242"/><text x="80.2662%" y="559.50">kernel::plugins::mw::Middleware..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (242 samples, 19.58%)</title><rect x="80.0162%" y="533" width="19.5793%" height="15" fill="rgb(229,104,2)" fg:x="989" fg:w="242"/><text x="80.2662%" y="543.50">core::ops::function::FnOnce::ca..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (242 samples, 19.58%)</title><rect x="80.0162%" y="517" width="19.5793%" height="15" fill="rgb(219,28,31)" fg:x="989" fg:w="242"/><text x="80.2662%" y="527.50">&lt;engine::session::state::State ..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (242 samples, 19.58%)</title><rect x="80.0162%" y="501" width="19.5793%" height="15" fill="rgb(233,109,36)" fg:x="989" fg:w="242"/><text x="80.2662%" y="511.50">&lt;plugins_core::looking::actions..</text></g><g><title>plugins_core::looking::model::new_area_observation (241 samples, 19.50%)</title><rect x="80.0971%" y="485" width="19.4984%" height="15" fill="rgb(246,88,11)" fg:x="990" fg:w="241"/><text x="80.3471%" y="495.50">plugins_core::looking::model::n..</text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (241 samples, 19.50%)</title><rect x="80.0971%" y="469" width="19.4984%" height="15" fill="rgb(209,212,17)" fg:x="990" fg:w="241"/><text x="80.3471%" y="479.50">&lt;&amp;kernel::model::entry::Entry a..</text></g><g><title>plugins_core::looking::model::qualify_name (237 samples, 19.17%)</title><rect x="80.4207%" y="453" width="19.1748%" height="15" fill="rgb(243,59,29)" fg:x="994" fg:w="237"/><text x="80.6707%" y="463.50">plugins_core::looking::model::..</text></g><g><title>indefinite::indefinite (237 samples, 19.17%)</title><rect x="80.4207%" y="437" width="19.1748%" height="15" fill="rgb(244,205,48)" fg:x="994" fg:w="237"/><text x="80.6707%" y="447.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (236 samples, 19.09%)</title><rect x="80.5016%" y="421" width="19.0939%" height="15" fill="rgb(227,30,6)" fg:x="995" fg:w="236"/><text x="80.7516%" y="431.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (236 samples, 19.09%)</title><rect x="80.5016%" y="405" width="19.0939%" height="15" fill="rgb(220,205,48)" fg:x="995" fg:w="236"/><text x="80.7516%" y="415.50">indefinite::methods::apply_rul..</text></g><g><title>indefinite::rules::other::Other::run (32 samples, 2.59%)</title><rect x="97.0065%" y="389" width="2.5890%" height="15" fill="rgb(250,94,14)" fg:x="1199" fg:w="32"/><text x="97.2565%" y="399.50">in..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (32 samples, 2.59%)</title><rect x="97.0065%" y="373" width="2.5890%" height="15" fill="rgb(216,119,42)" fg:x="1199" fg:w="32"/><text x="97.2565%" y="383.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="99.3528%" y="357" width="0.2427%" height="15" fill="rgb(232,155,0)" fg:x="1228" fg:w="3"/><text x="99.6028%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="99.3528%" y="341" width="0.2427%" height="15" fill="rgb(212,24,32)" fg:x="1228" fg:w="3"/><text x="99.6028%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="99.3528%" y="325" width="0.2427%" height="15" fill="rgb(216,69,20)" fg:x="1228" fg:w="3"/><text x="99.6028%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="99.3528%" y="309" width="0.2427%" height="15" fill="rgb(229,73,31)" fg:x="1228" fg:w="3"/><text x="99.6028%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="99.3528%" y="293" width="0.2427%" height="15" fill="rgb(224,219,20)" fg:x="1228" fg:w="3"/><text x="99.6028%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="99.5955%" y="597" width="0.1618%" height="15" fill="rgb(215,146,41)" fg:x="1231" fg:w="2"/><text x="99.8455%" y="607.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="99.5955%" y="581" width="0.1618%" height="15" fill="rgb(244,71,31)" fg:x="1231" fg:w="2"/><text x="99.8455%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="99.5955%" y="565" width="0.1618%" height="15" fill="rgb(224,24,11)" fg:x="1231" fg:w="2"/><text x="99.8455%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.5955%" y="549" width="0.1618%" height="15" fill="rgb(229,76,15)" fg:x="1231" fg:w="2"/><text x="99.8455%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.5955%" y="533" width="0.1618%" height="15" fill="rgb(209,93,2)" fg:x="1231" fg:w="2"/><text x="99.8455%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.5955%" y="517" width="0.1618%" height="15" fill="rgb(216,200,50)" fg:x="1231" fg:w="2"/><text x="99.8455%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.5955%" y="501" width="0.1618%" height="15" fill="rgb(211,67,34)" fg:x="1231" fg:w="2"/><text x="99.8455%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.5955%" y="485" width="0.1618%" height="15" fill="rgb(225,87,47)" fg:x="1231" fg:w="2"/><text x="99.8455%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.5955%" y="469" width="0.1618%" height="15" fill="rgb(217,185,16)" fg:x="1231" fg:w="2"/><text x="99.8455%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.5955%" y="453" width="0.1618%" height="15" fill="rgb(205,0,0)" fg:x="1231" fg:w="2"/><text x="99.8455%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.5955%" y="437" width="0.1618%" height="15" fill="rgb(207,116,45)" fg:x="1231" fg:w="2"/><text x="99.8455%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.6764%" y="421" width="0.0809%" height="15" fill="rgb(221,156,26)" fg:x="1232" fg:w="1"/><text x="99.9264%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6764%" y="405" width="0.0809%" height="15" fill="rgb(213,140,4)" fg:x="1232" fg:w="1"/><text x="99.9264%" y="415.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="99.6764%" y="389" width="0.0809%" height="15" fill="rgb(231,224,15)" fg:x="1232" fg:w="1"/><text x="99.9264%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.7573%" y="501" width="0.0809%" height="15" fill="rgb(244,76,20)" fg:x="1233" fg:w="1"/><text x="100.0073%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.7573%" y="485" width="0.0809%" height="15" fill="rgb(238,117,7)" fg:x="1233" fg:w="1"/><text x="100.0073%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.7573%" y="469" width="0.0809%" height="15" fill="rgb(235,1,10)" fg:x="1233" fg:w="1"/><text x="100.0073%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (4 samples, 0.32%)</title><rect x="99.5955%" y="645" width="0.3236%" height="15" fill="rgb(216,165,6)" fg:x="1231" fg:w="4"/><text x="99.8455%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (4 samples, 0.32%)</title><rect x="99.5955%" y="629" width="0.3236%" height="15" fill="rgb(246,91,35)" fg:x="1231" fg:w="4"/><text x="99.8455%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="99.5955%" y="613" width="0.3236%" height="15" fill="rgb(228,96,24)" fg:x="1231" fg:w="4"/><text x="99.8455%" y="623.50"></text></g><g><title>kernel::model::entity::Entity::from_str (2 samples, 0.16%)</title><rect x="99.7573%" y="597" width="0.1618%" height="15" fill="rgb(254,217,53)" fg:x="1233" fg:w="2"/><text x="100.0073%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.7573%" y="581" width="0.1618%" height="15" fill="rgb(209,60,0)" fg:x="1233" fg:w="2"/><text x="100.0073%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.7573%" y="565" width="0.1618%" height="15" fill="rgb(250,93,26)" fg:x="1233" fg:w="2"/><text x="100.0073%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.7573%" y="549" width="0.1618%" height="15" fill="rgb(211,9,40)" fg:x="1233" fg:w="2"/><text x="100.0073%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.7573%" y="533" width="0.1618%" height="15" fill="rgb(242,57,20)" fg:x="1233" fg:w="2"/><text x="100.0073%" y="543.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.7573%" y="517" width="0.1618%" height="15" fill="rgb(248,85,48)" fg:x="1233" fg:w="2"/><text x="100.0073%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8382%" y="501" width="0.0809%" height="15" fill="rgb(212,117,2)" fg:x="1234" fg:w="1"/><text x="100.0882%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8382%" y="485" width="0.0809%" height="15" fill="rgb(243,19,3)" fg:x="1234" fg:w="1"/><text x="100.0882%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.8382%" y="469" width="0.0809%" height="15" fill="rgb(232,217,24)" fg:x="1234" fg:w="1"/><text x="100.0882%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8382%" y="453" width="0.0809%" height="15" fill="rgb(224,175,40)" fg:x="1234" fg:w="1"/><text x="100.0882%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8382%" y="437" width="0.0809%" height="15" fill="rgb(212,162,32)" fg:x="1234" fg:w="1"/><text x="100.0882%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.8382%" y="421" width="0.0809%" height="15" fill="rgb(215,9,4)" fg:x="1234" fg:w="1"/><text x="100.0882%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8382%" y="405" width="0.0809%" height="15" fill="rgb(242,42,7)" fg:x="1234" fg:w="1"/><text x="100.0882%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8382%" y="389" width="0.0809%" height="15" fill="rgb(242,184,45)" fg:x="1234" fg:w="1"/><text x="100.0882%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.8382%" y="373" width="0.0809%" height="15" fill="rgb(228,111,51)" fg:x="1234" fg:w="1"/><text x="100.0882%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8382%" y="357" width="0.0809%" height="15" fill="rgb(236,147,17)" fg:x="1234" fg:w="1"/><text x="100.0882%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8382%" y="341" width="0.0809%" height="15" fill="rgb(210,75,22)" fg:x="1234" fg:w="1"/><text x="100.0882%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.8382%" y="325" width="0.0809%" height="15" fill="rgb(217,159,45)" fg:x="1234" fg:w="1"/><text x="100.0882%" y="335.50"></text></g><g><title>all (1,236 samples, 100%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(245,165,53)" fg:x="0" fg:w="1236"/><text x="0.2500%" y="1023.50"></text></g><g><title>simple-484c7248 (1,236 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(251,190,50)" fg:x="0" fg:w="1236"/><text x="0.2500%" y="1007.50">simple-484c7248</text></g><g><title>_start (1,236 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(208,203,29)" fg:x="0" fg:w="1236"/><text x="0.2500%" y="991.50">_start</text></g><g><title>__libc_start_main (1,236 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(207,209,35)" fg:x="0" fg:w="1236"/><text x="0.2500%" y="975.50">__libc_start_main</text></g><g><title>main (1,236 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(230,144,49)" fg:x="0" fg:w="1236"/><text x="0.2500%" y="959.50">main</text></g><g><title>std::rt::lang_start_internal (1,236 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(229,31,6)" fg:x="0" fg:w="1236"/><text x="0.2500%" y="943.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,236 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(251,129,24)" fg:x="0" fg:w="1236"/><text x="0.2500%" y="927.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,236 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(235,105,15)" fg:x="0" fg:w="1236"/><text x="0.2500%" y="911.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,236 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(216,52,43)" fg:x="0" fg:w="1236"/><text x="0.2500%" y="895.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,236 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(238,144,41)" fg:x="0" fg:w="1236"/><text x="0.2500%" y="879.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,236 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(243,63,9)" fg:x="0" fg:w="1236"/><text x="0.2500%" y="863.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,236 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(246,208,1)" fg:x="0" fg:w="1236"/><text x="0.2500%" y="847.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,236 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(233,182,18)" fg:x="0" fg:w="1236"/><text x="0.2500%" y="831.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,236 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(242,224,8)" fg:x="0" fg:w="1236"/><text x="0.2500%" y="815.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,236 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(243,54,37)" fg:x="0" fg:w="1236"/><text x="0.2500%" y="799.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,236 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(233,192,12)" fg:x="0" fg:w="1236"/><text x="0.2500%" y="783.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,236 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(251,192,53)" fg:x="0" fg:w="1236"/><text x="0.2500%" y="767.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,236 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(246,141,26)" fg:x="0" fg:w="1236"/><text x="0.2500%" y="751.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,236 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(239,195,19)" fg:x="0" fg:w="1236"/><text x="0.2500%" y="735.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (308 samples, 24.92%)</title><rect x="75.0809%" y="709" width="24.9191%" height="15" fill="rgb(241,16,39)" fg:x="928" fg:w="308"/><text x="75.3309%" y="719.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as ..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (308 samples, 24.92%)</title><rect x="75.0809%" y="693" width="24.9191%" height="15" fill="rgb(223,13,53)" fg:x="928" fg:w="308"/><text x="75.3309%" y="703.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (308 samples, 24.92%)</title><rect x="75.0809%" y="677" width="24.9191%" height="15" fill="rgb(214,227,0)" fg:x="928" fg:w="308"/><text x="75.3309%" y="687.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (268 samples, 21.68%)</title><rect x="78.3172%" y="661" width="21.6828%" height="15" fill="rgb(228,103,26)" fg:x="968" fg:w="268"/><text x="78.5672%" y="671.50">engine::session::Session::evaluate..</text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="99.9191%" y="645" width="0.0809%" height="15" fill="rgb(254,177,53)" fg:x="1235" fg:w="1"/><text x="100.1691%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="99.9191%" y="629" width="0.0809%" height="15" fill="rgb(208,201,34)" fg:x="1235" fg:w="1"/><text x="100.1691%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.9191%" y="613" width="0.0809%" height="15" fill="rgb(212,39,5)" fg:x="1235" fg:w="1"/><text x="100.1691%" y="623.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.9191%" y="597" width="0.0809%" height="15" fill="rgb(246,117,3)" fg:x="1235" fg:w="1"/><text x="100.1691%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.9191%" y="581" width="0.0809%" height="15" fill="rgb(244,118,39)" fg:x="1235" fg:w="1"/><text x="100.1691%" y="591.50"></text></g></svg></svg>