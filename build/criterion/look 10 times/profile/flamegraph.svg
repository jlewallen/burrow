<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1110" onload="init(evt)" viewBox="0 0 1200 1110" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1110" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1093.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1093.00"> </text><svg id="frames" x="10" width="1180" total_samples="1246"><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.4815%" y="629" width="0.1605%" height="15" fill="rgb(224,64,43)" fg:x="6" fg:w="2"/><text x="0.7315%" y="639.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (9 samples, 0.72%)</title><rect x="0.1605%" y="693" width="0.7223%" height="15" fill="rgb(238,84,13)" fg:x="2" fg:w="9"/><text x="0.4105%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.64%)</title><rect x="0.2408%" y="677" width="0.6421%" height="15" fill="rgb(253,48,26)" fg:x="3" fg:w="8"/><text x="0.4908%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (7 samples, 0.56%)</title><rect x="0.3210%" y="661" width="0.5618%" height="15" fill="rgb(205,223,31)" fg:x="4" fg:w="7"/><text x="0.5710%" y="671.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (7 samples, 0.56%)</title><rect x="0.3210%" y="645" width="0.5618%" height="15" fill="rgb(221,41,32)" fg:x="4" fg:w="7"/><text x="0.5710%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (3 samples, 0.24%)</title><rect x="0.6421%" y="629" width="0.2408%" height="15" fill="rgb(213,158,31)" fg:x="8" fg:w="3"/><text x="0.8921%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.8026%" y="613" width="0.0803%" height="15" fill="rgb(245,126,43)" fg:x="10" fg:w="1"/><text x="1.0526%" y="623.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.2039%" y="581" width="0.1605%" height="15" fill="rgb(227,7,22)" fg:x="15" fg:w="2"/><text x="1.4539%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.3644%" y="581" width="0.0803%" height="15" fill="rgb(252,90,44)" fg:x="17" fg:w="1"/><text x="1.6144%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.3644%" y="565" width="0.0803%" height="15" fill="rgb(253,91,0)" fg:x="17" fg:w="1"/><text x="1.6144%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.4446%" y="565" width="0.0803%" height="15" fill="rgb(252,175,49)" fg:x="18" fg:w="1"/><text x="1.6946%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.4446%" y="549" width="0.0803%" height="15" fill="rgb(246,150,1)" fg:x="18" fg:w="1"/><text x="1.6946%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="1.5249%" y="565" width="0.0803%" height="15" fill="rgb(241,192,25)" fg:x="19" fg:w="1"/><text x="1.7749%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="1.5249%" y="549" width="0.0803%" height="15" fill="rgb(239,187,11)" fg:x="19" fg:w="1"/><text x="1.7749%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.5249%" y="533" width="0.0803%" height="15" fill="rgb(218,202,51)" fg:x="19" fg:w="1"/><text x="1.7749%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.5249%" y="517" width="0.0803%" height="15" fill="rgb(225,176,8)" fg:x="19" fg:w="1"/><text x="1.7749%" y="527.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="1.6051%" y="549" width="0.2408%" height="15" fill="rgb(219,122,41)" fg:x="20" fg:w="3"/><text x="1.8551%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.96%)</title><rect x="0.9631%" y="629" width="0.9631%" height="15" fill="rgb(248,140,20)" fg:x="12" fg:w="12"/><text x="1.2131%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (9 samples, 0.72%)</title><rect x="1.2039%" y="613" width="0.7223%" height="15" fill="rgb(245,41,37)" fg:x="15" fg:w="9"/><text x="1.4539%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (9 samples, 0.72%)</title><rect x="1.2039%" y="597" width="0.7223%" height="15" fill="rgb(235,82,39)" fg:x="15" fg:w="9"/><text x="1.4539%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="1.4446%" y="581" width="0.4815%" height="15" fill="rgb(230,108,42)" fg:x="18" fg:w="6"/><text x="1.6946%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="1.6051%" y="565" width="0.3210%" height="15" fill="rgb(215,150,50)" fg:x="20" fg:w="4"/><text x="1.8551%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.8459%" y="549" width="0.0803%" height="15" fill="rgb(233,212,5)" fg:x="23" fg:w="1"/><text x="2.0959%" y="559.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="1.9262%" y="629" width="0.2408%" height="15" fill="rgb(245,80,22)" fg:x="24" fg:w="3"/><text x="2.1762%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="2.1669%" y="613" width="0.1605%" height="15" fill="rgb(238,129,16)" fg:x="27" fg:w="2"/><text x="2.4169%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.2472%" y="597" width="0.0803%" height="15" fill="rgb(240,19,0)" fg:x="28" fg:w="1"/><text x="2.4972%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="2.3274%" y="597" width="0.2408%" height="15" fill="rgb(232,42,35)" fg:x="29" fg:w="3"/><text x="2.5774%" y="607.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="2.3274%" y="581" width="0.2408%" height="15" fill="rgb(223,130,24)" fg:x="29" fg:w="3"/><text x="2.5774%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.7287%" y="581" width="0.0803%" height="15" fill="rgb(237,16,22)" fg:x="34" fg:w="1"/><text x="2.9787%" y="591.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="2.8892%" y="565" width="0.2408%" height="15" fill="rgb(248,192,20)" fg:x="36" fg:w="3"/><text x="3.1392%" y="575.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 2.33%)</title><rect x="0.8828%" y="645" width="2.3274%" height="15" fill="rgb(233,167,2)" fg:x="11" fg:w="29"/><text x="1.1328%" y="655.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (13 samples, 1.04%)</title><rect x="2.1669%" y="629" width="1.0433%" height="15" fill="rgb(252,71,44)" fg:x="27" fg:w="13"/><text x="2.4169%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (11 samples, 0.88%)</title><rect x="2.3274%" y="613" width="0.8828%" height="15" fill="rgb(238,37,47)" fg:x="29" fg:w="11"/><text x="2.5774%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="2.5682%" y="597" width="0.6421%" height="15" fill="rgb(214,202,54)" fg:x="32" fg:w="8"/><text x="2.8182%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="2.8090%" y="581" width="0.4013%" height="15" fill="rgb(254,165,40)" fg:x="35" fg:w="5"/><text x="3.0590%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.1300%" y="565" width="0.0803%" height="15" fill="rgb(246,173,38)" fg:x="39" fg:w="1"/><text x="3.3800%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.1300%" y="549" width="0.0803%" height="15" fill="rgb(215,3,27)" fg:x="39" fg:w="1"/><text x="3.3800%" y="559.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (39 samples, 3.13%)</title><rect x="0.1605%" y="709" width="3.1300%" height="15" fill="rgb(239,169,51)" fg:x="2" fg:w="39"/><text x="0.4105%" y="719.50">&lt;al..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (30 samples, 2.41%)</title><rect x="0.8828%" y="693" width="2.4077%" height="15" fill="rgb(212,5,25)" fg:x="11" fg:w="30"/><text x="1.1328%" y="703.50">co..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 2.41%)</title><rect x="0.8828%" y="677" width="2.4077%" height="15" fill="rgb(243,45,17)" fg:x="11" fg:w="30"/><text x="1.1328%" y="687.50">&lt;h..</text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (30 samples, 2.41%)</title><rect x="0.8828%" y="661" width="2.4077%" height="15" fill="rgb(242,97,9)" fg:x="11" fg:w="30"/><text x="1.1328%" y="671.50">co..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.2103%" y="645" width="0.0803%" height="15" fill="rgb(228,71,31)" fg:x="40" fg:w="1"/><text x="3.4603%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryStorageFactory as engine::storage::StorageFactory&gt;::create_storage (1 samples, 0.08%)</title><rect x="3.5313%" y="661" width="0.0803%" height="15" fill="rgb(252,184,16)" fg:x="44" fg:w="1"/><text x="3.7813%" y="671.50"></text></g><g><title>&lt;plugins_core::building::actions::BidirectionalDigAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="4.0931%" y="581" width="0.0803%" height="15" fill="rgb(236,169,46)" fg:x="51" fg:w="1"/><text x="4.3431%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="4.0931%" y="565" width="0.0803%" height="15" fill="rgb(207,17,47)" fg:x="51" fg:w="1"/><text x="4.3431%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.3339%" y="565" width="0.0803%" height="15" fill="rgb(206,201,28)" fg:x="54" fg:w="1"/><text x="4.5839%" y="575.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (5 samples, 0.40%)</title><rect x="4.1734%" y="581" width="0.4013%" height="15" fill="rgb(224,184,23)" fg:x="52" fg:w="5"/><text x="4.4234%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="4.4141%" y="565" width="0.1605%" height="15" fill="rgb(208,139,48)" fg:x="55" fg:w="2"/><text x="4.6641%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="4.4141%" y="549" width="0.1605%" height="15" fill="rgb(208,130,10)" fg:x="55" fg:w="2"/><text x="4.6641%" y="559.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="4.4141%" y="533" width="0.1605%" height="15" fill="rgb(211,213,45)" fg:x="55" fg:w="2"/><text x="4.6641%" y="543.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (7 samples, 0.56%)</title><rect x="4.0931%" y="613" width="0.5618%" height="15" fill="rgb(235,100,30)" fg:x="51" fg:w="7"/><text x="4.3431%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (7 samples, 0.56%)</title><rect x="4.0931%" y="597" width="0.5618%" height="15" fill="rgb(206,144,31)" fg:x="51" fg:w="7"/><text x="4.3431%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="4.5746%" y="581" width="0.0803%" height="15" fill="rgb(224,200,26)" fg:x="57" fg:w="1"/><text x="4.8246%" y="591.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="4.6549%" y="581" width="0.0803%" height="15" fill="rgb(247,104,53)" fg:x="58" fg:w="1"/><text x="4.9049%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="4.6549%" y="565" width="0.0803%" height="15" fill="rgb(220,14,17)" fg:x="58" fg:w="1"/><text x="4.9049%" y="575.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as replies::DeserializeTagged&gt;::from_tagged_json (1 samples, 0.08%)</title><rect x="4.7352%" y="581" width="0.0803%" height="15" fill="rgb(230,140,40)" fg:x="59" fg:w="1"/><text x="4.9852%" y="591.50"></text></g><g><title>&lt;plugins_core::carrying::actions::GiveToAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="4.8154%" y="581" width="0.0803%" height="15" fill="rgb(229,2,41)" fg:x="60" fg:w="1"/><text x="5.0654%" y="591.50"></text></g><g><title>&lt;plugins_core::carrying::actions::PutInsideAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="4.8957%" y="581" width="0.0803%" height="15" fill="rgb(232,89,16)" fg:x="61" fg:w="1"/><text x="5.1457%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="4.8957%" y="565" width="0.0803%" height="15" fill="rgb(247,59,52)" fg:x="61" fg:w="1"/><text x="5.1457%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="4.8957%" y="549" width="0.0803%" height="15" fill="rgb(226,110,21)" fg:x="61" fg:w="1"/><text x="5.1457%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.8957%" y="533" width="0.0803%" height="15" fill="rgb(224,176,43)" fg:x="61" fg:w="1"/><text x="5.1457%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.8957%" y="517" width="0.0803%" height="15" fill="rgb(221,73,6)" fg:x="61" fg:w="1"/><text x="5.1457%" y="527.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (5 samples, 0.40%)</title><rect x="4.6549%" y="613" width="0.4013%" height="15" fill="rgb(232,78,19)" fg:x="58" fg:w="5"/><text x="4.9049%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (5 samples, 0.40%)</title><rect x="4.6549%" y="597" width="0.4013%" height="15" fill="rgb(233,112,48)" fg:x="58" fg:w="5"/><text x="4.9049%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="4.9759%" y="581" width="0.0803%" height="15" fill="rgb(243,131,47)" fg:x="62" fg:w="1"/><text x="5.2259%" y="591.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="5.0562%" y="613" width="0.1605%" height="15" fill="rgb(226,51,1)" fg:x="63" fg:w="2"/><text x="5.3062%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="5.0562%" y="597" width="0.1605%" height="15" fill="rgb(247,58,7)" fg:x="63" fg:w="2"/><text x="5.3062%" y="607.50"></text></g><g><title>&lt;plugins_core::chat::actions::SpeakAction as kernel::plugins::HasActionSchema&gt;::action_schema (2 samples, 0.16%)</title><rect x="5.0562%" y="581" width="0.1605%" height="15" fill="rgb(209,7,32)" fg:x="63" fg:w="2"/><text x="5.3062%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.1364%" y="565" width="0.0803%" height="15" fill="rgb(209,39,41)" fg:x="64" fg:w="1"/><text x="5.3864%" y="575.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="5.2167%" y="613" width="0.1605%" height="15" fill="rgb(226,182,46)" fg:x="65" fg:w="2"/><text x="5.4667%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="5.2970%" y="597" width="0.0803%" height="15" fill="rgb(230,219,10)" fg:x="66" fg:w="1"/><text x="5.5470%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="5.2970%" y="581" width="0.0803%" height="15" fill="rgb(227,175,30)" fg:x="66" fg:w="1"/><text x="5.5470%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="5.2970%" y="565" width="0.0803%" height="15" fill="rgb(217,2,50)" fg:x="66" fg:w="1"/><text x="5.5470%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.2970%" y="549" width="0.0803%" height="15" fill="rgb(229,160,0)" fg:x="66" fg:w="1"/><text x="5.5470%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.2970%" y="533" width="0.0803%" height="15" fill="rgb(207,78,37)" fg:x="66" fg:w="1"/><text x="5.5470%" y="543.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="5.3772%" y="613" width="0.0803%" height="15" fill="rgb(225,57,0)" fg:x="67" fg:w="1"/><text x="5.6272%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="5.3772%" y="597" width="0.0803%" height="15" fill="rgb(232,154,2)" fg:x="67" fg:w="1"/><text x="5.6272%" y="607.50"></text></g><g><title>&lt;plugins_core::moving::actions::AddRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (2 samples, 0.16%)</title><rect x="5.5377%" y="581" width="0.1605%" height="15" fill="rgb(241,212,25)" fg:x="69" fg:w="2"/><text x="5.7877%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (2 samples, 0.16%)</title><rect x="5.5377%" y="565" width="0.1605%" height="15" fill="rgb(226,69,20)" fg:x="69" fg:w="2"/><text x="5.7877%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.6180%" y="549" width="0.0803%" height="15" fill="rgb(247,184,54)" fg:x="70" fg:w="1"/><text x="5.8680%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="5.6982%" y="581" width="0.0803%" height="15" fill="rgb(210,145,0)" fg:x="71" fg:w="1"/><text x="5.9482%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.6982%" y="565" width="0.0803%" height="15" fill="rgb(253,82,12)" fg:x="71" fg:w="1"/><text x="5.9482%" y="575.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.6982%" y="549" width="0.0803%" height="15" fill="rgb(245,42,11)" fg:x="71" fg:w="1"/><text x="5.9482%" y="559.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="5.7785%" y="581" width="0.0803%" height="15" fill="rgb(219,147,32)" fg:x="72" fg:w="1"/><text x="6.0285%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="5.8587%" y="581" width="0.0803%" height="15" fill="rgb(246,12,7)" fg:x="73" fg:w="1"/><text x="6.1087%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.8587%" y="565" width="0.0803%" height="15" fill="rgb(243,50,9)" fg:x="73" fg:w="1"/><text x="6.1087%" y="575.50"></text></g><g><title>kernel::plugins::Schema::action (7 samples, 0.56%)</title><rect x="5.4575%" y="597" width="0.5618%" height="15" fill="rgb(219,149,6)" fg:x="68" fg:w="7"/><text x="5.7075%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="5.9390%" y="581" width="0.0803%" height="15" fill="rgb(241,51,42)" fg:x="74" fg:w="1"/><text x="6.1890%" y="591.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (8 samples, 0.64%)</title><rect x="5.4575%" y="613" width="0.6421%" height="15" fill="rgb(226,128,27)" fg:x="68" fg:w="8"/><text x="5.7075%" y="623.50"></text></g><g><title>kernel::plugins::Schema::empty (1 samples, 0.08%)</title><rect x="6.0193%" y="597" width="0.0803%" height="15" fill="rgb(244,144,4)" fg:x="75" fg:w="1"/><text x="6.2693%" y="607.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::key (1 samples, 0.08%)</title><rect x="6.0995%" y="613" width="0.0803%" height="15" fill="rgb(221,4,13)" fg:x="76" fg:w="1"/><text x="6.3495%" y="623.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="6.1798%" y="613" width="0.1605%" height="15" fill="rgb(208,170,28)" fg:x="77" fg:w="2"/><text x="6.4298%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="6.1798%" y="597" width="0.1605%" height="15" fill="rgb(226,131,13)" fg:x="77" fg:w="2"/><text x="6.4298%" y="607.50"></text></g><g><title>&lt;plugins_rune::actions::RuneAction as kernel::plugins::HasActionSchema&gt;::action_schema (2 samples, 0.16%)</title><rect x="6.1798%" y="581" width="0.1605%" height="15" fill="rgb(215,72,41)" fg:x="77" fg:w="2"/><text x="6.4298%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="6.2600%" y="565" width="0.0803%" height="15" fill="rgb(243,108,20)" fg:x="78" fg:w="1"/><text x="6.5100%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.2600%" y="549" width="0.0803%" height="15" fill="rgb(230,189,17)" fg:x="78" fg:w="1"/><text x="6.5100%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.3403%" y="613" width="0.0803%" height="15" fill="rgb(220,50,17)" fg:x="79" fg:w="1"/><text x="6.5903%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="6.4205%" y="613" width="0.1605%" height="15" fill="rgb(248,152,48)" fg:x="80" fg:w="2"/><text x="6.6705%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="6.5008%" y="597" width="0.0803%" height="15" fill="rgb(244,91,11)" fg:x="81" fg:w="1"/><text x="6.7508%" y="607.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (36 samples, 2.89%)</title><rect x="3.7721%" y="629" width="2.8892%" height="15" fill="rgb(220,157,5)" fg:x="47" fg:w="36"/><text x="4.0221%" y="639.50">&lt;h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="6.5811%" y="613" width="0.0803%" height="15" fill="rgb(253,137,8)" fg:x="82" fg:w="1"/><text x="6.8311%" y="623.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="6.7416%" y="613" width="0.1605%" height="15" fill="rgb(217,137,51)" fg:x="84" fg:w="2"/><text x="6.9916%" y="623.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="6.9021%" y="613" width="0.0803%" height="15" fill="rgb(218,209,53)" fg:x="86" fg:w="1"/><text x="7.1521%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="6.9021%" y="597" width="0.0803%" height="15" fill="rgb(249,137,25)" fg:x="86" fg:w="1"/><text x="7.1521%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="6.9021%" y="581" width="0.0803%" height="15" fill="rgb(239,155,26)" fg:x="86" fg:w="1"/><text x="7.1521%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="6.9021%" y="565" width="0.0803%" height="15" fill="rgb(227,85,46)" fg:x="86" fg:w="1"/><text x="7.1521%" y="575.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (12 samples, 0.96%)</title><rect x="6.6613%" y="629" width="0.9631%" height="15" fill="rgb(251,107,43)" fg:x="83" fg:w="12"/><text x="6.9113%" y="639.50"></text></g><g><title>std::sys::unix::fs::stat (8 samples, 0.64%)</title><rect x="6.9823%" y="613" width="0.6421%" height="15" fill="rgb(234,170,33)" fg:x="87" fg:w="8"/><text x="7.2323%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (8 samples, 0.64%)</title><rect x="6.9823%" y="597" width="0.6421%" height="15" fill="rgb(206,29,35)" fg:x="87" fg:w="8"/><text x="7.2323%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (8 samples, 0.64%)</title><rect x="6.9823%" y="581" width="0.6421%" height="15" fill="rgb(227,138,25)" fg:x="87" fg:w="8"/><text x="7.2323%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (8 samples, 0.64%)</title><rect x="6.9823%" y="565" width="0.6421%" height="15" fill="rgb(249,131,35)" fg:x="87" fg:w="8"/><text x="7.2323%" y="575.50"></text></g><g><title>std::sys::unix::fs::try_statx (8 samples, 0.64%)</title><rect x="6.9823%" y="549" width="0.6421%" height="15" fill="rgb(239,6,40)" fg:x="87" fg:w="8"/><text x="7.2323%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (8 samples, 0.64%)</title><rect x="6.9823%" y="533" width="0.6421%" height="15" fill="rgb(246,136,47)" fg:x="87" fg:w="8"/><text x="7.2323%" y="543.50"></text></g><g><title>statx (8 samples, 0.64%)</title><rect x="6.9823%" y="517" width="0.6421%" height="15" fill="rgb(253,58,26)" fg:x="87" fg:w="8"/><text x="7.2323%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.7047%" y="581" width="0.0803%" height="15" fill="rgb(237,141,10)" fg:x="96" fg:w="1"/><text x="7.9547%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.7047%" y="565" width="0.0803%" height="15" fill="rgb(234,156,12)" fg:x="96" fg:w="1"/><text x="7.9547%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.7047%" y="549" width="0.0803%" height="15" fill="rgb(243,224,36)" fg:x="96" fg:w="1"/><text x="7.9547%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.7047%" y="533" width="0.0803%" height="15" fill="rgb(205,229,51)" fg:x="96" fg:w="1"/><text x="7.9547%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.7047%" y="517" width="0.0803%" height="15" fill="rgb(223,189,4)" fg:x="96" fg:w="1"/><text x="7.9547%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.7047%" y="501" width="0.0803%" height="15" fill="rgb(249,167,54)" fg:x="96" fg:w="1"/><text x="7.9547%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.7047%" y="485" width="0.0803%" height="15" fill="rgb(218,34,28)" fg:x="96" fg:w="1"/><text x="7.9547%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="7.7047%" y="469" width="0.0803%" height="15" fill="rgb(232,109,42)" fg:x="96" fg:w="1"/><text x="7.9547%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="7.7047%" y="453" width="0.0803%" height="15" fill="rgb(248,214,46)" fg:x="96" fg:w="1"/><text x="7.9547%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="7.7047%" y="437" width="0.0803%" height="15" fill="rgb(244,216,40)" fg:x="96" fg:w="1"/><text x="7.9547%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="7.7047%" y="421" width="0.0803%" height="15" fill="rgb(231,226,31)" fg:x="96" fg:w="1"/><text x="7.9547%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.7047%" y="405" width="0.0803%" height="15" fill="rgb(238,38,43)" fg:x="96" fg:w="1"/><text x="7.9547%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="8.0257%" y="485" width="0.1605%" height="15" fill="rgb(208,88,43)" fg:x="100" fg:w="2"/><text x="8.2757%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="8.0257%" y="469" width="0.1605%" height="15" fill="rgb(205,136,37)" fg:x="100" fg:w="2"/><text x="8.2757%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="8.0257%" y="453" width="0.1605%" height="15" fill="rgb(237,34,14)" fg:x="100" fg:w="2"/><text x="8.2757%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="8.0257%" y="437" width="0.1605%" height="15" fill="rgb(236,193,44)" fg:x="100" fg:w="2"/><text x="8.2757%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="8.0257%" y="421" width="0.1605%" height="15" fill="rgb(231,48,10)" fg:x="100" fg:w="2"/><text x="8.2757%" y="431.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="8.0257%" y="405" width="0.1605%" height="15" fill="rgb(213,141,34)" fg:x="100" fg:w="2"/><text x="8.2757%" y="415.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="8.0257%" y="389" width="0.1605%" height="15" fill="rgb(249,130,34)" fg:x="100" fg:w="2"/><text x="8.2757%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (4 samples, 0.32%)</title><rect x="7.9454%" y="565" width="0.3210%" height="15" fill="rgb(219,42,41)" fg:x="99" fg:w="4"/><text x="8.1954%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="8.0257%" y="549" width="0.2408%" height="15" fill="rgb(224,100,54)" fg:x="100" fg:w="3"/><text x="8.2757%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.24%)</title><rect x="8.0257%" y="533" width="0.2408%" height="15" fill="rgb(229,200,27)" fg:x="100" fg:w="3"/><text x="8.2757%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.24%)</title><rect x="8.0257%" y="517" width="0.2408%" height="15" fill="rgb(217,118,10)" fg:x="100" fg:w="3"/><text x="8.2757%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.24%)</title><rect x="8.0257%" y="501" width="0.2408%" height="15" fill="rgb(206,22,3)" fg:x="100" fg:w="3"/><text x="8.2757%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="8.1862%" y="485" width="0.0803%" height="15" fill="rgb(232,163,46)" fg:x="102" fg:w="1"/><text x="8.4362%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="8.1862%" y="469" width="0.0803%" height="15" fill="rgb(206,95,13)" fg:x="102" fg:w="1"/><text x="8.4362%" y="479.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (9 samples, 0.72%)</title><rect x="7.6244%" y="613" width="0.7223%" height="15" fill="rgb(253,154,18)" fg:x="95" fg:w="9"/><text x="7.8744%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.72%)</title><rect x="7.6244%" y="597" width="0.7223%" height="15" fill="rgb(219,32,23)" fg:x="95" fg:w="9"/><text x="7.8744%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.56%)</title><rect x="7.7849%" y="581" width="0.5618%" height="15" fill="rgb(230,191,45)" fg:x="97" fg:w="7"/><text x="8.0349%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.2665%" y="565" width="0.0803%" height="15" fill="rgb(229,64,36)" fg:x="103" fg:w="1"/><text x="8.5165%" y="575.50"></text></g><g><title>core::mem::zeroed (1 samples, 0.08%)</title><rect x="8.4270%" y="469" width="0.0803%" height="15" fill="rgb(205,129,25)" fg:x="105" fg:w="1"/><text x="8.6770%" y="479.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::zeroed (1 samples, 0.08%)</title><rect x="8.4270%" y="453" width="0.0803%" height="15" fill="rgb(254,112,7)" fg:x="105" fg:w="1"/><text x="8.6770%" y="463.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (1 samples, 0.08%)</title><rect x="8.4270%" y="437" width="0.0803%" height="15" fill="rgb(226,53,48)" fg:x="105" fg:w="1"/><text x="8.6770%" y="447.50"></text></g><g><title>core::intrinsics::write_bytes (1 samples, 0.08%)</title><rect x="8.4270%" y="421" width="0.0803%" height="15" fill="rgb(214,153,38)" fg:x="105" fg:w="1"/><text x="8.6770%" y="431.50"></text></g><g><title>glob::is_dir (8 samples, 0.64%)</title><rect x="8.4270%" y="565" width="0.6421%" height="15" fill="rgb(243,101,7)" fg:x="105" fg:w="8"/><text x="8.6770%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat (8 samples, 0.64%)</title><rect x="8.4270%" y="549" width="0.6421%" height="15" fill="rgb(240,140,22)" fg:x="105" fg:w="8"/><text x="8.6770%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (8 samples, 0.64%)</title><rect x="8.4270%" y="533" width="0.6421%" height="15" fill="rgb(235,114,2)" fg:x="105" fg:w="8"/><text x="8.6770%" y="543.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (8 samples, 0.64%)</title><rect x="8.4270%" y="517" width="0.6421%" height="15" fill="rgb(242,59,12)" fg:x="105" fg:w="8"/><text x="8.6770%" y="527.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (8 samples, 0.64%)</title><rect x="8.4270%" y="501" width="0.6421%" height="15" fill="rgb(252,134,9)" fg:x="105" fg:w="8"/><text x="8.6770%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx (8 samples, 0.64%)</title><rect x="8.4270%" y="485" width="0.6421%" height="15" fill="rgb(236,4,44)" fg:x="105" fg:w="8"/><text x="8.6770%" y="495.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (7 samples, 0.56%)</title><rect x="8.5072%" y="469" width="0.5618%" height="15" fill="rgb(254,172,41)" fg:x="106" fg:w="7"/><text x="8.7572%" y="479.50"></text></g><g><title>statx (7 samples, 0.56%)</title><rect x="8.5072%" y="453" width="0.5618%" height="15" fill="rgb(244,63,20)" fg:x="106" fg:w="7"/><text x="8.7572%" y="463.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.96%)</title><rect x="8.4270%" y="597" width="0.9631%" height="15" fill="rgb(250,73,31)" fg:x="105" fg:w="12"/><text x="8.6770%" y="607.50"></text></g><g><title>glob::fill_todo (12 samples, 0.96%)</title><rect x="8.4270%" y="581" width="0.9631%" height="15" fill="rgb(241,38,36)" fg:x="105" fg:w="12"/><text x="8.6770%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat (4 samples, 0.32%)</title><rect x="9.0690%" y="565" width="0.3210%" height="15" fill="rgb(245,211,2)" fg:x="113" fg:w="4"/><text x="9.3190%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (4 samples, 0.32%)</title><rect x="9.0690%" y="549" width="0.3210%" height="15" fill="rgb(206,120,28)" fg:x="113" fg:w="4"/><text x="9.3190%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (4 samples, 0.32%)</title><rect x="9.0690%" y="533" width="0.3210%" height="15" fill="rgb(211,59,34)" fg:x="113" fg:w="4"/><text x="9.3190%" y="543.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (4 samples, 0.32%)</title><rect x="9.0690%" y="517" width="0.3210%" height="15" fill="rgb(233,168,5)" fg:x="113" fg:w="4"/><text x="9.3190%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx (3 samples, 0.24%)</title><rect x="9.1493%" y="501" width="0.2408%" height="15" fill="rgb(234,33,13)" fg:x="114" fg:w="3"/><text x="9.3993%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (3 samples, 0.24%)</title><rect x="9.1493%" y="485" width="0.2408%" height="15" fill="rgb(231,150,26)" fg:x="114" fg:w="3"/><text x="9.3993%" y="495.50"></text></g><g><title>statx (3 samples, 0.24%)</title><rect x="9.1493%" y="469" width="0.2408%" height="15" fill="rgb(217,191,4)" fg:x="114" fg:w="3"/><text x="9.3993%" y="479.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="9.3900%" y="565" width="0.0803%" height="15" fill="rgb(246,198,38)" fg:x="117" fg:w="1"/><text x="9.6400%" y="575.50"></text></g><g><title>&lt;std::path::PathBuf as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="9.4703%" y="565" width="0.1605%" height="15" fill="rgb(245,64,37)" fg:x="118" fg:w="2"/><text x="9.7203%" y="575.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="9.5506%" y="549" width="0.0803%" height="15" fill="rgb(250,30,36)" fg:x="119" fg:w="1"/><text x="9.8006%" y="559.50"></text></g><g><title>std::path::Components::parse_next_component (1 samples, 0.08%)</title><rect x="9.5506%" y="533" width="0.0803%" height="15" fill="rgb(217,86,53)" fg:x="119" fg:w="1"/><text x="9.8006%" y="543.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (1 samples, 0.08%)</title><rect x="9.5506%" y="517" width="0.0803%" height="15" fill="rgb(228,157,16)" fg:x="119" fg:w="1"/><text x="9.8006%" y="527.50"></text></g><g><title>std::path::Components::parse_next_component::{{closure}} (1 samples, 0.08%)</title><rect x="9.5506%" y="501" width="0.0803%" height="15" fill="rgb(217,59,31)" fg:x="119" fg:w="1"/><text x="9.8006%" y="511.50"></text></g><g><title>std::path::Components::is_sep_byte (1 samples, 0.08%)</title><rect x="9.5506%" y="485" width="0.0803%" height="15" fill="rgb(237,138,41)" fg:x="119" fg:w="1"/><text x="9.8006%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="9.7913%" y="549" width="0.0803%" height="15" fill="rgb(227,91,49)" fg:x="122" fg:w="1"/><text x="10.0413%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="9.7913%" y="533" width="0.0803%" height="15" fill="rgb(247,21,44)" fg:x="122" fg:w="1"/><text x="10.0413%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="9.7913%" y="517" width="0.0803%" height="15" fill="rgb(219,210,51)" fg:x="122" fg:w="1"/><text x="10.0413%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="9.7913%" y="501" width="0.0803%" height="15" fill="rgb(209,140,6)" fg:x="122" fg:w="1"/><text x="10.0413%" y="511.50"></text></g><g><title>glob::Pattern::new (4 samples, 0.32%)</title><rect x="9.6308%" y="565" width="0.3210%" height="15" fill="rgb(221,188,24)" fg:x="120" fg:w="4"/><text x="9.8808%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="9.8716%" y="549" width="0.0803%" height="15" fill="rgb(232,154,20)" fg:x="123" fg:w="1"/><text x="10.1216%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="9.8716%" y="533" width="0.0803%" height="15" fill="rgb(244,137,50)" fg:x="123" fg:w="1"/><text x="10.1216%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="9.8716%" y="517" width="0.0803%" height="15" fill="rgb(225,185,43)" fg:x="123" fg:w="1"/><text x="10.1216%" y="527.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (30 samples, 2.41%)</title><rect x="7.6244%" y="629" width="2.4077%" height="15" fill="rgb(213,205,38)" fg:x="95" fg:w="30"/><text x="7.8744%" y="639.50">&lt;p..</text></g><g><title>plugins_rune::sources::load_directory_sources (21 samples, 1.69%)</title><rect x="8.3467%" y="613" width="1.6854%" height="15" fill="rgb(236,73,12)" fg:x="104" fg:w="21"/><text x="8.5967%" y="623.50"></text></g><g><title>glob::glob (8 samples, 0.64%)</title><rect x="9.3900%" y="597" width="0.6421%" height="15" fill="rgb(235,219,13)" fg:x="117" fg:w="8"/><text x="9.6400%" y="607.50"></text></g><g><title>glob::glob_with (8 samples, 0.64%)</title><rect x="9.3900%" y="581" width="0.6421%" height="15" fill="rgb(218,59,36)" fg:x="117" fg:w="8"/><text x="9.6400%" y="591.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_owned (1 samples, 0.08%)</title><rect x="9.9518%" y="565" width="0.0803%" height="15" fill="rgb(205,110,39)" fg:x="124" fg:w="1"/><text x="10.2018%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.08%)</title><rect x="9.9518%" y="549" width="0.0803%" height="15" fill="rgb(218,206,42)" fg:x="124" fg:w="1"/><text x="10.2018%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="9.9518%" y="533" width="0.0803%" height="15" fill="rgb(248,125,24)" fg:x="124" fg:w="1"/><text x="10.2018%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="9.9518%" y="517" width="0.0803%" height="15" fill="rgb(242,28,27)" fg:x="124" fg:w="1"/><text x="10.2018%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="9.9518%" y="501" width="0.0803%" height="15" fill="rgb(216,228,15)" fg:x="124" fg:w="1"/><text x="10.2018%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="9.9518%" y="485" width="0.0803%" height="15" fill="rgb(235,116,46)" fg:x="124" fg:w="1"/><text x="10.2018%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="9.9518%" y="469" width="0.0803%" height="15" fill="rgb(224,18,32)" fg:x="124" fg:w="1"/><text x="10.2018%" y="479.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (1 samples, 0.08%)</title><rect x="10.0321%" y="629" width="0.0803%" height="15" fill="rgb(252,5,12)" fg:x="125" fg:w="1"/><text x="10.2821%" y="639.50"></text></g><g><title>std::time::Instant::duration_since (1 samples, 0.08%)</title><rect x="10.0321%" y="613" width="0.0803%" height="15" fill="rgb(251,36,5)" fg:x="125" fg:w="1"/><text x="10.2821%" y="623.50"></text></g><g><title>std::time::Instant::checked_duration_since (1 samples, 0.08%)</title><rect x="10.0321%" y="597" width="0.0803%" height="15" fill="rgb(217,53,14)" fg:x="125" fg:w="1"/><text x="10.2821%" y="607.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (1 samples, 0.08%)</title><rect x="10.0321%" y="581" width="0.0803%" height="15" fill="rgb(215,86,45)" fg:x="125" fg:w="1"/><text x="10.2821%" y="591.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (1 samples, 0.08%)</title><rect x="10.0321%" y="565" width="0.0803%" height="15" fill="rgb(242,169,11)" fg:x="125" fg:w="1"/><text x="10.2821%" y="575.50"></text></g><g><title>core::time::Duration::new (1 samples, 0.08%)</title><rect x="10.0321%" y="549" width="0.0803%" height="15" fill="rgb(211,213,45)" fg:x="125" fg:w="1"/><text x="10.2821%" y="559.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="10.1124%" y="613" width="0.1605%" height="15" fill="rgb(205,88,11)" fg:x="126" fg:w="2"/><text x="10.3624%" y="623.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="10.3531%" y="597" width="0.1605%" height="15" fill="rgb(252,69,26)" fg:x="129" fg:w="2"/><text x="10.6031%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (6 samples, 0.48%)</title><rect x="10.1124%" y="629" width="0.4815%" height="15" fill="rgb(246,123,37)" fg:x="126" fg:w="6"/><text x="10.3624%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (4 samples, 0.32%)</title><rect x="10.2729%" y="613" width="0.3210%" height="15" fill="rgb(212,205,5)" fg:x="128" fg:w="4"/><text x="10.5229%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::plugins::ArgumentType&gt; (1 samples, 0.08%)</title><rect x="10.5136%" y="597" width="0.0803%" height="15" fill="rgb(253,148,0)" fg:x="131" fg:w="1"/><text x="10.7636%" y="607.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (91 samples, 7.30%)</title><rect x="3.6116%" y="645" width="7.3034%" height="15" fill="rgb(239,22,4)" fg:x="45" fg:w="91"/><text x="3.8616%" y="655.50">kernel::pl..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (4 samples, 0.32%)</title><rect x="10.5939%" y="629" width="0.3210%" height="15" fill="rgb(226,26,53)" fg:x="132" fg:w="4"/><text x="10.8439%" y="639.50"></text></g><g><title>clock_gettime (4 samples, 0.32%)</title><rect x="10.5939%" y="613" width="0.3210%" height="15" fill="rgb(225,229,45)" fg:x="132" fg:w="4"/><text x="10.8439%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="11.0754%" y="613" width="0.0803%" height="15" fill="rgb(220,60,37)" fg:x="138" fg:w="1"/><text x="11.3254%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.0754%" y="597" width="0.0803%" height="15" fill="rgb(217,180,35)" fg:x="138" fg:w="1"/><text x="11.3254%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="11.1557%" y="613" width="0.1605%" height="15" fill="rgb(229,7,53)" fg:x="139" fg:w="2"/><text x="11.4057%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="11.1557%" y="597" width="0.1605%" height="15" fill="rgb(254,137,3)" fg:x="139" fg:w="2"/><text x="11.4057%" y="607.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="11.1557%" y="581" width="0.1605%" height="15" fill="rgb(215,140,41)" fg:x="139" fg:w="2"/><text x="11.4057%" y="591.50"></text></g><g><title>engine::session::Session::initialize (97 samples, 7.78%)</title><rect x="3.6116%" y="661" width="7.7849%" height="15" fill="rgb(250,80,15)" fg:x="45" fg:w="97"/><text x="3.8616%" y="671.50">engine::ses..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (6 samples, 0.48%)</title><rect x="10.9149%" y="645" width="0.4815%" height="15" fill="rgb(252,191,6)" fg:x="136" fg:w="6"/><text x="11.1649%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="10.9149%" y="629" width="0.4815%" height="15" fill="rgb(246,217,18)" fg:x="136" fg:w="6"/><text x="11.1649%" y="639.50"></text></g><g><title>kernel::plugins::Plugin::middleware (1 samples, 0.08%)</title><rect x="11.3162%" y="613" width="0.0803%" height="15" fill="rgb(223,93,7)" fg:x="141" fg:w="1"/><text x="11.5662%" y="623.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (2 samples, 0.16%)</title><rect x="11.3965%" y="661" width="0.1605%" height="15" fill="rgb(225,55,52)" fg:x="142" fg:w="2"/><text x="11.6465%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="11.4767%" y="645" width="0.0803%" height="15" fill="rgb(240,31,24)" fg:x="143" fg:w="1"/><text x="11.7267%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="11.4767%" y="629" width="0.0803%" height="15" fill="rgb(205,56,52)" fg:x="143" fg:w="1"/><text x="11.7267%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="11.4767%" y="613" width="0.0803%" height="15" fill="rgb(246,146,12)" fg:x="143" fg:w="1"/><text x="11.7267%" y="623.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="11.4767%" y="597" width="0.0803%" height="15" fill="rgb(239,84,36)" fg:x="143" fg:w="1"/><text x="11.7267%" y="607.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (104 samples, 8.35%)</title><rect x="3.2905%" y="709" width="8.3467%" height="15" fill="rgb(207,41,40)" fg:x="41" fg:w="104"/><text x="3.5405%" y="719.50">&lt;engine::dom..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (103 samples, 8.27%)</title><rect x="3.3708%" y="693" width="8.2665%" height="15" fill="rgb(241,179,25)" fg:x="42" fg:w="103"/><text x="3.6208%" y="703.50">engine::doma..</text></g><g><title>engine::session::Session::new (102 samples, 8.19%)</title><rect x="3.4510%" y="677" width="8.1862%" height="15" fill="rgb(210,0,34)" fg:x="43" fg:w="102"/><text x="3.7010%" y="687.50">engine::ses..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="11.5570%" y="661" width="0.0803%" height="15" fill="rgb(225,217,29)" fg:x="144" fg:w="1"/><text x="11.8070%" y="671.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="11.5570%" y="645" width="0.0803%" height="15" fill="rgb(216,191,38)" fg:x="144" fg:w="1"/><text x="11.8070%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.9583%" y="645" width="0.0803%" height="15" fill="rgb(232,140,52)" fg:x="149" fg:w="1"/><text x="12.2083%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.9583%" y="629" width="0.0803%" height="15" fill="rgb(223,158,51)" fg:x="149" fg:w="1"/><text x="12.2083%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="11.9583%" y="693" width="0.1605%" height="15" fill="rgb(235,29,51)" fg:x="149" fg:w="2"/><text x="12.2083%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="11.9583%" y="677" width="0.1605%" height="15" fill="rgb(215,181,18)" fg:x="149" fg:w="2"/><text x="12.2083%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="11.9583%" y="661" width="0.1605%" height="15" fill="rgb(227,125,34)" fg:x="149" fg:w="2"/><text x="12.2083%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.0385%" y="645" width="0.0803%" height="15" fill="rgb(230,197,49)" fg:x="150" fg:w="1"/><text x="12.2885%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.0385%" y="629" width="0.0803%" height="15" fill="rgb(239,141,16)" fg:x="150" fg:w="1"/><text x="12.2885%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (3 samples, 0.24%)</title><rect x="12.1188%" y="677" width="0.2408%" height="15" fill="rgb(225,105,43)" fg:x="151" fg:w="3"/><text x="12.3688%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="12.3596%" y="597" width="0.0803%" height="15" fill="rgb(214,131,14)" fg:x="154" fg:w="1"/><text x="12.6096%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="12.3596%" y="581" width="0.0803%" height="15" fill="rgb(229,177,11)" fg:x="154" fg:w="1"/><text x="12.6096%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="12.4398%" y="581" width="0.1605%" height="15" fill="rgb(231,180,14)" fg:x="155" fg:w="2"/><text x="12.6898%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="12.4398%" y="565" width="0.1605%" height="15" fill="rgb(232,88,2)" fg:x="155" fg:w="2"/><text x="12.6898%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="12.4398%" y="549" width="0.1605%" height="15" fill="rgb(205,220,8)" fg:x="155" fg:w="2"/><text x="12.6898%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="12.4398%" y="533" width="0.1605%" height="15" fill="rgb(225,23,53)" fg:x="155" fg:w="2"/><text x="12.6898%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="12.4398%" y="517" width="0.1605%" height="15" fill="rgb(213,62,29)" fg:x="155" fg:w="2"/><text x="12.6898%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="12.4398%" y="501" width="0.1605%" height="15" fill="rgb(227,75,7)" fg:x="155" fg:w="2"/><text x="12.6898%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="12.4398%" y="485" width="0.1605%" height="15" fill="rgb(207,105,14)" fg:x="155" fg:w="2"/><text x="12.6898%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="12.5201%" y="469" width="0.0803%" height="15" fill="rgb(245,62,29)" fg:x="156" fg:w="1"/><text x="12.7701%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="12.6003%" y="565" width="0.1605%" height="15" fill="rgb(236,202,4)" fg:x="157" fg:w="2"/><text x="12.8503%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="12.6003%" y="549" width="0.1605%" height="15" fill="rgb(250,67,1)" fg:x="157" fg:w="2"/><text x="12.8503%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="12.6003%" y="533" width="0.1605%" height="15" fill="rgb(253,115,44)" fg:x="157" fg:w="2"/><text x="12.8503%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="12.6806%" y="517" width="0.0803%" height="15" fill="rgb(251,139,18)" fg:x="158" fg:w="1"/><text x="12.9306%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="12.8411%" y="549" width="0.1605%" height="15" fill="rgb(218,22,32)" fg:x="160" fg:w="2"/><text x="13.0911%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="12.8411%" y="533" width="0.1605%" height="15" fill="rgb(243,53,5)" fg:x="160" fg:w="2"/><text x="13.0911%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="12.8411%" y="517" width="0.1605%" height="15" fill="rgb(227,56,16)" fg:x="160" fg:w="2"/><text x="13.0911%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="12.8411%" y="501" width="0.1605%" height="15" fill="rgb(245,53,0)" fg:x="160" fg:w="2"/><text x="13.0911%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="13.0016%" y="549" width="0.0803%" height="15" fill="rgb(216,170,35)" fg:x="162" fg:w="1"/><text x="13.2516%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.0016%" y="533" width="0.0803%" height="15" fill="rgb(211,200,8)" fg:x="162" fg:w="1"/><text x="13.2516%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.0016%" y="517" width="0.0803%" height="15" fill="rgb(228,204,44)" fg:x="162" fg:w="1"/><text x="13.2516%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="13.1621%" y="517" width="0.0803%" height="15" fill="rgb(214,121,17)" fg:x="164" fg:w="1"/><text x="13.4121%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="13.2424%" y="517" width="0.1605%" height="15" fill="rgb(233,64,38)" fg:x="165" fg:w="2"/><text x="13.4924%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="13.2424%" y="501" width="0.1605%" height="15" fill="rgb(253,54,19)" fg:x="165" fg:w="2"/><text x="13.4924%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.3226%" y="485" width="0.0803%" height="15" fill="rgb(253,94,18)" fg:x="166" fg:w="1"/><text x="13.5726%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.3226%" y="469" width="0.0803%" height="15" fill="rgb(227,57,52)" fg:x="166" fg:w="1"/><text x="13.5726%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="13.3226%" y="453" width="0.0803%" height="15" fill="rgb(230,228,50)" fg:x="166" fg:w="1"/><text x="13.5726%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="13.3226%" y="437" width="0.0803%" height="15" fill="rgb(217,205,27)" fg:x="166" fg:w="1"/><text x="13.5726%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="13.3226%" y="421" width="0.0803%" height="15" fill="rgb(252,71,50)" fg:x="166" fg:w="1"/><text x="13.5726%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="13.1621%" y="533" width="0.3210%" height="15" fill="rgb(209,86,4)" fg:x="164" fg:w="4"/><text x="13.4121%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.4029%" y="517" width="0.0803%" height="15" fill="rgb(229,94,0)" fg:x="167" fg:w="1"/><text x="13.6529%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.80%)</title><rect x="12.7608%" y="565" width="0.8026%" height="15" fill="rgb(252,223,21)" fg:x="159" fg:w="10"/><text x="13.0108%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="13.0819%" y="549" width="0.4815%" height="15" fill="rgb(230,210,4)" fg:x="163" fg:w="6"/><text x="13.3319%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.4831%" y="533" width="0.0803%" height="15" fill="rgb(240,149,38)" fg:x="168" fg:w="1"/><text x="13.7331%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (15 samples, 1.20%)</title><rect x="12.6003%" y="581" width="1.2039%" height="15" fill="rgb(254,105,20)" fg:x="157" fg:w="15"/><text x="12.8503%" y="591.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="13.5634%" y="565" width="0.2408%" height="15" fill="rgb(253,87,46)" fg:x="169" fg:w="3"/><text x="13.8134%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="13.6437%" y="549" width="0.1605%" height="15" fill="rgb(253,116,33)" fg:x="170" fg:w="2"/><text x="13.8937%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="13.6437%" y="533" width="0.1605%" height="15" fill="rgb(229,198,5)" fg:x="170" fg:w="2"/><text x="13.8937%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="13.7239%" y="517" width="0.0803%" height="15" fill="rgb(242,38,37)" fg:x="171" fg:w="1"/><text x="13.9739%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="13.7239%" y="501" width="0.0803%" height="15" fill="rgb(242,69,53)" fg:x="171" fg:w="1"/><text x="13.9739%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="13.7239%" y="485" width="0.0803%" height="15" fill="rgb(249,80,16)" fg:x="171" fg:w="1"/><text x="13.9739%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (18 samples, 1.44%)</title><rect x="12.4398%" y="597" width="1.4446%" height="15" fill="rgb(206,128,11)" fg:x="155" fg:w="18"/><text x="12.6898%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.8042%" y="581" width="0.0803%" height="15" fill="rgb(212,35,20)" fg:x="172" fg:w="1"/><text x="14.0542%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.8042%" y="565" width="0.0803%" height="15" fill="rgb(236,79,13)" fg:x="172" fg:w="1"/><text x="14.0542%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.8042%" y="549" width="0.0803%" height="15" fill="rgb(233,123,3)" fg:x="172" fg:w="1"/><text x="14.0542%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="13.8042%" y="533" width="0.0803%" height="15" fill="rgb(214,93,52)" fg:x="172" fg:w="1"/><text x="14.0542%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="13.8042%" y="517" width="0.0803%" height="15" fill="rgb(251,37,40)" fg:x="172" fg:w="1"/><text x="14.0542%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.8042%" y="501" width="0.0803%" height="15" fill="rgb(227,80,54)" fg:x="172" fg:w="1"/><text x="14.0542%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.8844%" y="597" width="0.0803%" height="15" fill="rgb(254,48,11)" fg:x="173" fg:w="1"/><text x="14.1344%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="13.8844%" y="581" width="0.0803%" height="15" fill="rgb(235,193,26)" fg:x="173" fg:w="1"/><text x="14.1344%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.8844%" y="565" width="0.0803%" height="15" fill="rgb(229,99,21)" fg:x="173" fg:w="1"/><text x="14.1344%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.8844%" y="549" width="0.0803%" height="15" fill="rgb(211,140,41)" fg:x="173" fg:w="1"/><text x="14.1344%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.8844%" y="533" width="0.0803%" height="15" fill="rgb(240,227,30)" fg:x="173" fg:w="1"/><text x="14.1344%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.9647%" y="565" width="0.0803%" height="15" fill="rgb(215,224,45)" fg:x="174" fg:w="1"/><text x="14.2147%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.9647%" y="549" width="0.0803%" height="15" fill="rgb(206,123,31)" fg:x="174" fg:w="1"/><text x="14.2147%" y="559.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="13.9647%" y="581" width="0.1605%" height="15" fill="rgb(210,138,16)" fg:x="174" fg:w="2"/><text x="14.2147%" y="591.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="14.0449%" y="565" width="0.0803%" height="15" fill="rgb(228,57,28)" fg:x="175" fg:w="1"/><text x="14.2949%" y="575.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="14.0449%" y="549" width="0.0803%" height="15" fill="rgb(242,170,10)" fg:x="175" fg:w="1"/><text x="14.2949%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.2055%" y="501" width="0.0803%" height="15" fill="rgb(228,214,39)" fg:x="177" fg:w="1"/><text x="14.4555%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.2055%" y="485" width="0.0803%" height="15" fill="rgb(218,179,33)" fg:x="177" fg:w="1"/><text x="14.4555%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="14.2857%" y="485" width="0.0803%" height="15" fill="rgb(235,193,39)" fg:x="178" fg:w="1"/><text x="14.5357%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.4462%" y="453" width="0.0803%" height="15" fill="rgb(219,221,36)" fg:x="180" fg:w="1"/><text x="14.6962%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="14.2857%" y="501" width="0.3210%" height="15" fill="rgb(248,218,19)" fg:x="178" fg:w="4"/><text x="14.5357%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="14.3660%" y="485" width="0.2408%" height="15" fill="rgb(205,50,9)" fg:x="179" fg:w="3"/><text x="14.6160%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="14.3660%" y="469" width="0.2408%" height="15" fill="rgb(238,81,28)" fg:x="179" fg:w="3"/><text x="14.6160%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="14.5265%" y="453" width="0.0803%" height="15" fill="rgb(235,110,19)" fg:x="181" fg:w="1"/><text x="14.7765%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="14.5265%" y="437" width="0.0803%" height="15" fill="rgb(214,7,14)" fg:x="181" fg:w="1"/><text x="14.7765%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="14.5265%" y="421" width="0.0803%" height="15" fill="rgb(211,77,3)" fg:x="181" fg:w="1"/><text x="14.7765%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="14.5265%" y="405" width="0.0803%" height="15" fill="rgb(229,5,9)" fg:x="181" fg:w="1"/><text x="14.7765%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.6067%" y="469" width="0.0803%" height="15" fill="rgb(225,90,11)" fg:x="182" fg:w="1"/><text x="14.8567%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="14.6870%" y="453" width="0.2408%" height="15" fill="rgb(242,56,8)" fg:x="183" fg:w="3"/><text x="14.9370%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.8475%" y="437" width="0.0803%" height="15" fill="rgb(249,212,39)" fg:x="185" fg:w="1"/><text x="15.0975%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (11 samples, 0.88%)</title><rect x="14.2055%" y="517" width="0.8828%" height="15" fill="rgb(236,90,9)" fg:x="177" fg:w="11"/><text x="14.4555%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.48%)</title><rect x="14.6067%" y="501" width="0.4815%" height="15" fill="rgb(206,88,35)" fg:x="182" fg:w="6"/><text x="14.8567%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="14.6067%" y="485" width="0.4815%" height="15" fill="rgb(205,126,30)" fg:x="182" fg:w="6"/><text x="14.8567%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="14.6870%" y="469" width="0.4013%" height="15" fill="rgb(230,176,12)" fg:x="183" fg:w="5"/><text x="14.9370%" y="479.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="14.9278%" y="453" width="0.1605%" height="15" fill="rgb(243,19,9)" fg:x="186" fg:w="2"/><text x="15.1778%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (13 samples, 1.04%)</title><rect x="14.1252%" y="533" width="1.0433%" height="15" fill="rgb(245,171,17)" fg:x="176" fg:w="13"/><text x="14.3752%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="15.0883%" y="517" width="0.0803%" height="15" fill="rgb(227,52,21)" fg:x="188" fg:w="1"/><text x="15.3383%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.0883%" y="501" width="0.0803%" height="15" fill="rgb(238,69,14)" fg:x="188" fg:w="1"/><text x="15.3383%" y="511.50"></text></g><g><title>engine::session::Session::flush (39 samples, 3.13%)</title><rect x="12.1188%" y="693" width="3.1300%" height="15" fill="rgb(241,156,39)" fg:x="151" fg:w="39"/><text x="12.3688%" y="703.50">eng..</text></g><g><title>engine::session::state::State::close (36 samples, 2.89%)</title><rect x="12.3596%" y="677" width="2.8892%" height="15" fill="rgb(212,227,28)" fg:x="154" fg:w="36"/><text x="12.6096%" y="687.50">en..</text></g><g><title>engine::session::state::State::flush_entities (36 samples, 2.89%)</title><rect x="12.3596%" y="661" width="2.8892%" height="15" fill="rgb(209,118,27)" fg:x="154" fg:w="36"/><text x="12.6096%" y="671.50">en..</text></g><g><title>core::iter::adapters::try_process (36 samples, 2.89%)</title><rect x="12.3596%" y="645" width="2.8892%" height="15" fill="rgb(226,102,5)" fg:x="154" fg:w="36"/><text x="12.6096%" y="655.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (36 samples, 2.89%)</title><rect x="12.3596%" y="629" width="2.8892%" height="15" fill="rgb(223,34,3)" fg:x="154" fg:w="36"/><text x="12.6096%" y="639.50">&lt;a..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (36 samples, 2.89%)</title><rect x="12.3596%" y="613" width="2.8892%" height="15" fill="rgb(221,81,38)" fg:x="154" fg:w="36"/><text x="12.6096%" y="623.50">en..</text></g><g><title>kernel::model::any_entity_changes (16 samples, 1.28%)</title><rect x="13.9647%" y="597" width="1.2841%" height="15" fill="rgb(236,219,28)" fg:x="174" fg:w="16"/><text x="14.2147%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (14 samples, 1.12%)</title><rect x="14.1252%" y="581" width="1.1236%" height="15" fill="rgb(213,200,14)" fg:x="176" fg:w="14"/><text x="14.3752%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (14 samples, 1.12%)</title><rect x="14.1252%" y="565" width="1.1236%" height="15" fill="rgb(240,33,19)" fg:x="176" fg:w="14"/><text x="14.3752%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (14 samples, 1.12%)</title><rect x="14.1252%" y="549" width="1.1236%" height="15" fill="rgb(233,113,27)" fg:x="176" fg:w="14"/><text x="14.3752%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.1685%" y="533" width="0.0803%" height="15" fill="rgb(220,221,18)" fg:x="189" fg:w="1"/><text x="15.4185%" y="543.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="15.2488%" y="693" width="0.0803%" height="15" fill="rgb(238,92,8)" fg:x="190" fg:w="1"/><text x="15.4988%" y="703.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="15.2488%" y="677" width="0.0803%" height="15" fill="rgb(222,164,16)" fg:x="190" fg:w="1"/><text x="15.4988%" y="687.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="15.2488%" y="661" width="0.0803%" height="15" fill="rgb(241,119,3)" fg:x="190" fg:w="1"/><text x="15.4988%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.2488%" y="645" width="0.0803%" height="15" fill="rgb(241,44,8)" fg:x="190" fg:w="1"/><text x="15.4988%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="15.2488%" y="629" width="0.0803%" height="15" fill="rgb(230,36,40)" fg:x="190" fg:w="1"/><text x="15.4988%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="15.3291%" y="677" width="0.0803%" height="15" fill="rgb(243,16,36)" fg:x="191" fg:w="1"/><text x="15.5791%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="15.3291%" y="661" width="0.0803%" height="15" fill="rgb(231,4,26)" fg:x="191" fg:w="1"/><text x="15.5791%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.3291%" y="645" width="0.0803%" height="15" fill="rgb(240,9,31)" fg:x="191" fg:w="1"/><text x="15.5791%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.3291%" y="629" width="0.0803%" height="15" fill="rgb(207,173,15)" fg:x="191" fg:w="1"/><text x="15.5791%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="15.4093%" y="645" width="0.2408%" height="15" fill="rgb(224,192,53)" fg:x="192" fg:w="3"/><text x="15.6593%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="15.4093%" y="629" width="0.2408%" height="15" fill="rgb(223,67,28)" fg:x="192" fg:w="3"/><text x="15.6593%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="15.4093%" y="613" width="0.2408%" height="15" fill="rgb(211,20,47)" fg:x="192" fg:w="3"/><text x="15.6593%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="15.4093%" y="597" width="0.2408%" height="15" fill="rgb(240,228,2)" fg:x="192" fg:w="3"/><text x="15.6593%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.24%)</title><rect x="15.4093%" y="581" width="0.2408%" height="15" fill="rgb(248,151,12)" fg:x="192" fg:w="3"/><text x="15.6593%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.24%)</title><rect x="15.4093%" y="565" width="0.2408%" height="15" fill="rgb(244,8,39)" fg:x="192" fg:w="3"/><text x="15.6593%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.24%)</title><rect x="15.4093%" y="549" width="0.2408%" height="15" fill="rgb(222,26,8)" fg:x="192" fg:w="3"/><text x="15.6593%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.24%)</title><rect x="15.4093%" y="533" width="0.2408%" height="15" fill="rgb(213,106,44)" fg:x="192" fg:w="3"/><text x="15.6593%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.24%)</title><rect x="15.4093%" y="517" width="0.2408%" height="15" fill="rgb(214,129,20)" fg:x="192" fg:w="3"/><text x="15.6593%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.24%)</title><rect x="15.4093%" y="501" width="0.2408%" height="15" fill="rgb(212,32,13)" fg:x="192" fg:w="3"/><text x="15.6593%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.24%)</title><rect x="15.4093%" y="485" width="0.2408%" height="15" fill="rgb(208,168,33)" fg:x="192" fg:w="3"/><text x="15.6593%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.24%)</title><rect x="15.4093%" y="469" width="0.2408%" height="15" fill="rgb(231,207,8)" fg:x="192" fg:w="3"/><text x="15.6593%" y="479.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.24%)</title><rect x="15.4093%" y="453" width="0.2408%" height="15" fill="rgb(235,219,23)" fg:x="192" fg:w="3"/><text x="15.6593%" y="463.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="15.4093%" y="437" width="0.2408%" height="15" fill="rgb(226,216,26)" fg:x="192" fg:w="3"/><text x="15.6593%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.6501%" y="645" width="0.0803%" height="15" fill="rgb(239,137,16)" fg:x="195" fg:w="1"/><text x="15.9001%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.6501%" y="629" width="0.0803%" height="15" fill="rgb(207,12,36)" fg:x="195" fg:w="1"/><text x="15.9001%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.6501%" y="613" width="0.0803%" height="15" fill="rgb(210,214,24)" fg:x="195" fg:w="1"/><text x="15.9001%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="15.6501%" y="597" width="0.0803%" height="15" fill="rgb(206,56,30)" fg:x="195" fg:w="1"/><text x="15.9001%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="15.6501%" y="581" width="0.0803%" height="15" fill="rgb(228,143,26)" fg:x="195" fg:w="1"/><text x="15.9001%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="15.6501%" y="565" width="0.0803%" height="15" fill="rgb(216,218,46)" fg:x="195" fg:w="1"/><text x="15.9001%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="15.6501%" y="549" width="0.0803%" height="15" fill="rgb(206,6,19)" fg:x="195" fg:w="1"/><text x="15.9001%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="15.6501%" y="533" width="0.0803%" height="15" fill="rgb(239,177,51)" fg:x="195" fg:w="1"/><text x="15.9001%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (5 samples, 0.40%)</title><rect x="15.4093%" y="661" width="0.4013%" height="15" fill="rgb(216,55,25)" fg:x="192" fg:w="5"/><text x="15.6593%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.7303%" y="645" width="0.0803%" height="15" fill="rgb(231,163,29)" fg:x="196" fg:w="1"/><text x="15.9803%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.7303%" y="629" width="0.0803%" height="15" fill="rgb(232,149,50)" fg:x="196" fg:w="1"/><text x="15.9803%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.8106%" y="629" width="0.0803%" height="15" fill="rgb(223,142,48)" fg:x="197" fg:w="1"/><text x="16.0606%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.8106%" y="613" width="0.0803%" height="15" fill="rgb(245,83,23)" fg:x="197" fg:w="1"/><text x="16.0606%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.8106%" y="597" width="0.0803%" height="15" fill="rgb(224,63,2)" fg:x="197" fg:w="1"/><text x="16.0606%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.8106%" y="581" width="0.0803%" height="15" fill="rgb(218,65,53)" fg:x="197" fg:w="1"/><text x="16.0606%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="15.8106%" y="565" width="0.0803%" height="15" fill="rgb(221,84,29)" fg:x="197" fg:w="1"/><text x="16.0606%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="15.8106%" y="549" width="0.0803%" height="15" fill="rgb(234,0,32)" fg:x="197" fg:w="1"/><text x="16.0606%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="15.8106%" y="533" width="0.0803%" height="15" fill="rgb(206,20,16)" fg:x="197" fg:w="1"/><text x="16.0606%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.8106%" y="517" width="0.0803%" height="15" fill="rgb(244,172,18)" fg:x="197" fg:w="1"/><text x="16.0606%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.8106%" y="501" width="0.0803%" height="15" fill="rgb(254,133,1)" fg:x="197" fg:w="1"/><text x="16.0606%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="15.8106%" y="485" width="0.0803%" height="15" fill="rgb(222,206,41)" fg:x="197" fg:w="1"/><text x="16.0606%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="15.8106%" y="469" width="0.0803%" height="15" fill="rgb(212,3,42)" fg:x="197" fg:w="1"/><text x="16.0606%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="15.8106%" y="453" width="0.0803%" height="15" fill="rgb(241,11,4)" fg:x="197" fg:w="1"/><text x="16.0606%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="15.8106%" y="437" width="0.0803%" height="15" fill="rgb(205,19,26)" fg:x="197" fg:w="1"/><text x="16.0606%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.8106%" y="421" width="0.0803%" height="15" fill="rgb(210,179,32)" fg:x="197" fg:w="1"/><text x="16.0606%" y="431.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (4 samples, 0.32%)</title><rect x="15.8106%" y="645" width="0.3210%" height="15" fill="rgb(227,116,49)" fg:x="197" fg:w="4"/><text x="16.0606%" y="655.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (3 samples, 0.24%)</title><rect x="15.8909%" y="629" width="0.2408%" height="15" fill="rgb(211,146,6)" fg:x="198" fg:w="3"/><text x="16.1409%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="15.9711%" y="613" width="0.1605%" height="15" fill="rgb(219,44,39)" fg:x="199" fg:w="2"/><text x="16.2211%" y="623.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (2 samples, 0.16%)</title><rect x="15.9711%" y="597" width="0.1605%" height="15" fill="rgb(234,128,11)" fg:x="199" fg:w="2"/><text x="16.2211%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="15.9711%" y="581" width="0.1605%" height="15" fill="rgb(220,183,53)" fg:x="199" fg:w="2"/><text x="16.2211%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.0514%" y="565" width="0.0803%" height="15" fill="rgb(213,219,32)" fg:x="200" fg:w="1"/><text x="16.3014%" y="575.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (5 samples, 0.40%)</title><rect x="15.8106%" y="661" width="0.4013%" height="15" fill="rgb(232,156,16)" fg:x="197" fg:w="5"/><text x="16.0606%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="16.1316%" y="645" width="0.0803%" height="15" fill="rgb(246,135,34)" fg:x="201" fg:w="1"/><text x="16.3816%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="16.1316%" y="629" width="0.0803%" height="15" fill="rgb(241,99,0)" fg:x="201" fg:w="1"/><text x="16.3816%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.1316%" y="613" width="0.0803%" height="15" fill="rgb(222,103,45)" fg:x="201" fg:w="1"/><text x="16.3816%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="16.2119%" y="613" width="0.1605%" height="15" fill="rgb(212,57,4)" fg:x="202" fg:w="2"/><text x="16.4619%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="16.2119%" y="597" width="0.1605%" height="15" fill="rgb(215,68,47)" fg:x="202" fg:w="2"/><text x="16.4619%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="16.2119%" y="581" width="0.1605%" height="15" fill="rgb(230,84,2)" fg:x="202" fg:w="2"/><text x="16.4619%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="16.2921%" y="565" width="0.0803%" height="15" fill="rgb(220,102,14)" fg:x="203" fg:w="1"/><text x="16.5421%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.2921%" y="549" width="0.0803%" height="15" fill="rgb(240,10,32)" fg:x="203" fg:w="1"/><text x="16.5421%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.3724%" y="613" width="0.0803%" height="15" fill="rgb(215,47,27)" fg:x="204" fg:w="1"/><text x="16.6224%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="16.5329%" y="565" width="0.0803%" height="15" fill="rgb(233,188,43)" fg:x="206" fg:w="1"/><text x="16.7829%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="16.5329%" y="549" width="0.0803%" height="15" fill="rgb(253,190,1)" fg:x="206" fg:w="1"/><text x="16.7829%" y="559.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (6 samples, 0.48%)</title><rect x="16.2119%" y="645" width="0.4815%" height="15" fill="rgb(206,114,52)" fg:x="202" fg:w="6"/><text x="16.4619%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (6 samples, 0.48%)</title><rect x="16.2119%" y="629" width="0.4815%" height="15" fill="rgb(233,120,37)" fg:x="202" fg:w="6"/><text x="16.4619%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (3 samples, 0.24%)</title><rect x="16.4526%" y="613" width="0.2408%" height="15" fill="rgb(214,52,39)" fg:x="205" fg:w="3"/><text x="16.7026%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (3 samples, 0.24%)</title><rect x="16.4526%" y="597" width="0.2408%" height="15" fill="rgb(223,80,29)" fg:x="205" fg:w="3"/><text x="16.7026%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="16.5329%" y="581" width="0.1605%" height="15" fill="rgb(230,101,40)" fg:x="206" fg:w="2"/><text x="16.7829%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.6132%" y="565" width="0.0803%" height="15" fill="rgb(219,211,8)" fg:x="207" fg:w="1"/><text x="16.8632%" y="575.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="16.6934%" y="645" width="0.0803%" height="15" fill="rgb(252,126,28)" fg:x="208" fg:w="1"/><text x="16.9434%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (5 samples, 0.40%)</title><rect x="16.7737%" y="613" width="0.4013%" height="15" fill="rgb(215,56,38)" fg:x="209" fg:w="5"/><text x="17.0237%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.0947%" y="597" width="0.0803%" height="15" fill="rgb(249,55,44)" fg:x="213" fg:w="1"/><text x="17.3447%" y="607.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="17.1750%" y="613" width="0.0803%" height="15" fill="rgb(220,221,32)" fg:x="214" fg:w="1"/><text x="17.4250%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (24 samples, 1.93%)</title><rect x="15.4093%" y="677" width="1.9262%" height="15" fill="rgb(212,216,41)" fg:x="192" fg:w="24"/><text x="15.6593%" y="687.50">&lt;..</text></g><g><title>engine::session::internal::Entities::add_entity (14 samples, 1.12%)</title><rect x="16.2119%" y="661" width="1.1236%" height="15" fill="rgb(228,213,43)" fg:x="202" fg:w="14"/><text x="16.4619%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.56%)</title><rect x="16.7737%" y="645" width="0.5618%" height="15" fill="rgb(211,31,26)" fg:x="209" fg:w="7"/><text x="17.0237%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.56%)</title><rect x="16.7737%" y="629" width="0.5618%" height="15" fill="rgb(229,202,19)" fg:x="209" fg:w="7"/><text x="17.0237%" y="639.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="17.2552%" y="613" width="0.0803%" height="15" fill="rgb(229,105,46)" fg:x="215" fg:w="1"/><text x="17.5052%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.3355%" y="661" width="0.0803%" height="15" fill="rgb(235,108,1)" fg:x="216" fg:w="1"/><text x="17.5855%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.3355%" y="645" width="0.0803%" height="15" fill="rgb(245,111,35)" fg:x="216" fg:w="1"/><text x="17.5855%" y="655.50"></text></g><g><title>plugins_core::build::Build::save (27 samples, 2.17%)</title><rect x="15.3291%" y="693" width="2.1669%" height="15" fill="rgb(219,185,31)" fg:x="191" fg:w="27"/><text x="15.5791%" y="703.50">p..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="17.3355%" y="677" width="0.1605%" height="15" fill="rgb(214,4,43)" fg:x="216" fg:w="2"/><text x="17.5855%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.4157%" y="661" width="0.0803%" height="15" fill="rgb(235,227,40)" fg:x="217" fg:w="1"/><text x="17.6657%" y="671.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (1 samples, 0.08%)</title><rect x="17.4960%" y="693" width="0.0803%" height="15" fill="rgb(230,88,30)" fg:x="218" fg:w="1"/><text x="17.7460%" y="703.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="17.4960%" y="677" width="0.0803%" height="15" fill="rgb(216,217,1)" fg:x="218" fg:w="1"/><text x="17.7460%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="17.4960%" y="661" width="0.0803%" height="15" fill="rgb(248,139,50)" fg:x="218" fg:w="1"/><text x="17.7460%" y="671.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (1 samples, 0.08%)</title><rect x="17.4960%" y="645" width="0.0803%" height="15" fill="rgb(233,1,21)" fg:x="218" fg:w="1"/><text x="17.7460%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.4960%" y="629" width="0.0803%" height="15" fill="rgb(215,183,12)" fg:x="218" fg:w="1"/><text x="17.7460%" y="639.50"></text></g><g><title>serde_json::value::from::&lt;impl core::convert::From&lt;f32&gt; for serde_json::value::Value&gt;::from (1 samples, 0.08%)</title><rect x="17.4960%" y="613" width="0.0803%" height="15" fill="rgb(229,104,42)" fg:x="218" fg:w="1"/><text x="17.7460%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="17.5762%" y="613" width="0.0803%" height="15" fill="rgb(243,34,48)" fg:x="219" fg:w="1"/><text x="17.8262%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.5762%" y="597" width="0.0803%" height="15" fill="rgb(239,11,44)" fg:x="219" fg:w="1"/><text x="17.8262%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="17.5762%" y="629" width="0.1605%" height="15" fill="rgb(231,98,35)" fg:x="219" fg:w="2"/><text x="17.8262%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.6565%" y="613" width="0.0803%" height="15" fill="rgb(233,28,25)" fg:x="220" fg:w="1"/><text x="17.9065%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.7368%" y="597" width="0.0803%" height="15" fill="rgb(234,123,11)" fg:x="221" fg:w="1"/><text x="17.9868%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.7368%" y="581" width="0.0803%" height="15" fill="rgb(220,69,3)" fg:x="221" fg:w="1"/><text x="17.9868%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.7368%" y="565" width="0.0803%" height="15" fill="rgb(214,64,36)" fg:x="221" fg:w="1"/><text x="17.9868%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.7368%" y="549" width="0.0803%" height="15" fill="rgb(211,138,32)" fg:x="221" fg:w="1"/><text x="17.9868%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.7368%" y="533" width="0.0803%" height="15" fill="rgb(213,118,47)" fg:x="221" fg:w="1"/><text x="17.9868%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="17.7368%" y="517" width="0.0803%" height="15" fill="rgb(243,124,49)" fg:x="221" fg:w="1"/><text x="17.9868%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="17.7368%" y="501" width="0.0803%" height="15" fill="rgb(221,30,28)" fg:x="221" fg:w="1"/><text x="17.9868%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="17.7368%" y="485" width="0.0803%" height="15" fill="rgb(246,37,13)" fg:x="221" fg:w="1"/><text x="17.9868%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.7368%" y="469" width="0.0803%" height="15" fill="rgb(249,66,14)" fg:x="221" fg:w="1"/><text x="17.9868%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.7368%" y="453" width="0.0803%" height="15" fill="rgb(213,166,5)" fg:x="221" fg:w="1"/><text x="17.9868%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="17.7368%" y="437" width="0.0803%" height="15" fill="rgb(221,66,24)" fg:x="221" fg:w="1"/><text x="17.9868%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="17.7368%" y="421" width="0.0803%" height="15" fill="rgb(210,132,17)" fg:x="221" fg:w="1"/><text x="17.9868%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="17.7368%" y="405" width="0.0803%" height="15" fill="rgb(243,202,5)" fg:x="221" fg:w="1"/><text x="17.9868%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="17.7368%" y="389" width="0.0803%" height="15" fill="rgb(233,70,48)" fg:x="221" fg:w="1"/><text x="17.9868%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.7368%" y="373" width="0.0803%" height="15" fill="rgb(238,41,26)" fg:x="221" fg:w="1"/><text x="17.9868%" y="383.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.32%)</title><rect x="17.5762%" y="661" width="0.3210%" height="15" fill="rgb(241,19,31)" fg:x="219" fg:w="4"/><text x="17.8262%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="17.5762%" y="645" width="0.3210%" height="15" fill="rgb(214,76,10)" fg:x="219" fg:w="4"/><text x="17.8262%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="17.7368%" y="629" width="0.1605%" height="15" fill="rgb(254,202,22)" fg:x="221" fg:w="2"/><text x="17.9868%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="17.7368%" y="613" width="0.1605%" height="15" fill="rgb(214,72,24)" fg:x="221" fg:w="2"/><text x="17.9868%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.8170%" y="597" width="0.0803%" height="15" fill="rgb(221,92,46)" fg:x="222" fg:w="1"/><text x="18.0670%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.8170%" y="581" width="0.0803%" height="15" fill="rgb(246,13,50)" fg:x="222" fg:w="1"/><text x="18.0670%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="17.8170%" y="565" width="0.0803%" height="15" fill="rgb(240,165,38)" fg:x="222" fg:w="1"/><text x="18.0670%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.8170%" y="549" width="0.0803%" height="15" fill="rgb(241,24,51)" fg:x="222" fg:w="1"/><text x="18.0670%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.8170%" y="533" width="0.0803%" height="15" fill="rgb(227,51,44)" fg:x="222" fg:w="1"/><text x="18.0670%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.8170%" y="517" width="0.0803%" height="15" fill="rgb(231,121,3)" fg:x="222" fg:w="1"/><text x="18.0670%" y="527.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="17.8973%" y="661" width="0.0803%" height="15" fill="rgb(245,3,41)" fg:x="223" fg:w="1"/><text x="18.1473%" y="671.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="17.8973%" y="645" width="0.0803%" height="15" fill="rgb(214,13,26)" fg:x="223" fg:w="1"/><text x="18.1473%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.8973%" y="629" width="0.0803%" height="15" fill="rgb(252,75,11)" fg:x="223" fg:w="1"/><text x="18.1473%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="17.8973%" y="613" width="0.0803%" height="15" fill="rgb(218,226,17)" fg:x="223" fg:w="1"/><text x="18.1473%" y="623.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="17.8973%" y="597" width="0.0803%" height="15" fill="rgb(248,89,38)" fg:x="223" fg:w="1"/><text x="18.1473%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.8973%" y="581" width="0.0803%" height="15" fill="rgb(237,73,46)" fg:x="223" fg:w="1"/><text x="18.1473%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.9775%" y="629" width="0.0803%" height="15" fill="rgb(242,78,33)" fg:x="224" fg:w="1"/><text x="18.2275%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.9775%" y="613" width="0.0803%" height="15" fill="rgb(235,60,3)" fg:x="224" fg:w="1"/><text x="18.2275%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="18.0578%" y="629" width="0.0803%" height="15" fill="rgb(216,172,19)" fg:x="225" fg:w="1"/><text x="18.3078%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="18.0578%" y="613" width="0.0803%" height="15" fill="rgb(227,6,42)" fg:x="225" fg:w="1"/><text x="18.3078%" y="623.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="18.1380%" y="629" width="0.0803%" height="15" fill="rgb(223,207,42)" fg:x="226" fg:w="1"/><text x="18.3880%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.40%)</title><rect x="17.9775%" y="645" width="0.4013%" height="15" fill="rgb(246,138,30)" fg:x="224" fg:w="5"/><text x="18.2275%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="18.2183%" y="629" width="0.1605%" height="15" fill="rgb(251,199,47)" fg:x="227" fg:w="2"/><text x="18.4683%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="18.2183%" y="613" width="0.1605%" height="15" fill="rgb(228,218,44)" fg:x="227" fg:w="2"/><text x="18.4683%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="18.2183%" y="597" width="0.1605%" height="15" fill="rgb(220,68,6)" fg:x="227" fg:w="2"/><text x="18.4683%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="18.2183%" y="581" width="0.1605%" height="15" fill="rgb(240,60,26)" fg:x="227" fg:w="2"/><text x="18.4683%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="18.2183%" y="565" width="0.1605%" height="15" fill="rgb(211,200,19)" fg:x="227" fg:w="2"/><text x="18.4683%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="18.2183%" y="549" width="0.1605%" height="15" fill="rgb(242,145,30)" fg:x="227" fg:w="2"/><text x="18.4683%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="18.2986%" y="533" width="0.0803%" height="15" fill="rgb(225,64,13)" fg:x="228" fg:w="1"/><text x="18.5486%" y="543.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (7 samples, 0.56%)</title><rect x="17.9775%" y="661" width="0.5618%" height="15" fill="rgb(218,103,35)" fg:x="224" fg:w="7"/><text x="18.2275%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="18.3788%" y="645" width="0.1605%" height="15" fill="rgb(216,93,46)" fg:x="229" fg:w="2"/><text x="18.6288%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="18.3788%" y="629" width="0.1605%" height="15" fill="rgb(225,159,27)" fg:x="229" fg:w="2"/><text x="18.6288%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="18.4591%" y="613" width="0.0803%" height="15" fill="rgb(225,204,11)" fg:x="230" fg:w="1"/><text x="18.7091%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="18.4591%" y="597" width="0.0803%" height="15" fill="rgb(205,56,4)" fg:x="230" fg:w="1"/><text x="18.7091%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.4591%" y="581" width="0.0803%" height="15" fill="rgb(206,6,35)" fg:x="230" fg:w="1"/><text x="18.7091%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.4591%" y="565" width="0.0803%" height="15" fill="rgb(247,73,52)" fg:x="230" fg:w="1"/><text x="18.7091%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="18.4591%" y="549" width="0.0803%" height="15" fill="rgb(246,97,4)" fg:x="230" fg:w="1"/><text x="18.7091%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.4591%" y="533" width="0.0803%" height="15" fill="rgb(212,37,15)" fg:x="230" fg:w="1"/><text x="18.7091%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.4591%" y="517" width="0.0803%" height="15" fill="rgb(208,130,40)" fg:x="230" fg:w="1"/><text x="18.7091%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.5393%" y="645" width="0.0803%" height="15" fill="rgb(236,55,29)" fg:x="231" fg:w="1"/><text x="18.7893%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.6196%" y="565" width="0.0803%" height="15" fill="rgb(209,156,45)" fg:x="232" fg:w="1"/><text x="18.8696%" y="575.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (15 samples, 1.20%)</title><rect x="17.5762%" y="693" width="1.2039%" height="15" fill="rgb(249,107,4)" fg:x="219" fg:w="15"/><text x="17.8262%" y="703.50"></text></g><g><title>plugins_core::tools::set_container (15 samples, 1.20%)</title><rect x="17.5762%" y="677" width="1.2039%" height="15" fill="rgb(227,7,13)" fg:x="219" fg:w="15"/><text x="17.8262%" y="687.50"></text></g><g><title>plugins_core::location::model::Location::set (3 samples, 0.24%)</title><rect x="18.5393%" y="661" width="0.2408%" height="15" fill="rgb(250,129,14)" fg:x="231" fg:w="3"/><text x="18.7893%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="18.6196%" y="645" width="0.1605%" height="15" fill="rgb(229,92,13)" fg:x="232" fg:w="2"/><text x="18.8696%" y="655.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (2 samples, 0.16%)</title><rect x="18.6196%" y="629" width="0.1605%" height="15" fill="rgb(245,98,39)" fg:x="232" fg:w="2"/><text x="18.8696%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="18.6196%" y="613" width="0.1605%" height="15" fill="rgb(234,135,48)" fg:x="232" fg:w="2"/><text x="18.8696%" y="623.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (2 samples, 0.16%)</title><rect x="18.6196%" y="597" width="0.1605%" height="15" fill="rgb(230,98,28)" fg:x="232" fg:w="2"/><text x="18.8696%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="18.6196%" y="581" width="0.1605%" height="15" fill="rgb(223,121,0)" fg:x="232" fg:w="2"/><text x="18.8696%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.6998%" y="565" width="0.0803%" height="15" fill="rgb(234,173,33)" fg:x="233" fg:w="1"/><text x="18.9498%" y="575.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="18.8604%" y="677" width="0.0803%" height="15" fill="rgb(245,47,8)" fg:x="235" fg:w="1"/><text x="19.1104%" y="687.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="18.8604%" y="661" width="0.0803%" height="15" fill="rgb(205,17,20)" fg:x="235" fg:w="1"/><text x="19.1104%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.8604%" y="645" width="0.0803%" height="15" fill="rgb(232,151,16)" fg:x="235" fg:w="1"/><text x="19.1104%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.8604%" y="629" width="0.0803%" height="15" fill="rgb(208,30,32)" fg:x="235" fg:w="1"/><text x="19.1104%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="18.9406%" y="677" width="0.0803%" height="15" fill="rgb(254,26,3)" fg:x="236" fg:w="1"/><text x="19.1906%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="18.9406%" y="661" width="0.0803%" height="15" fill="rgb(240,177,30)" fg:x="236" fg:w="1"/><text x="19.1906%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="18.9406%" y="645" width="0.0803%" height="15" fill="rgb(248,76,44)" fg:x="236" fg:w="1"/><text x="19.1906%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="18.9406%" y="629" width="0.0803%" height="15" fill="rgb(241,186,54)" fg:x="236" fg:w="1"/><text x="19.1906%" y="639.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (2 samples, 0.16%)</title><rect x="19.0209%" y="677" width="0.1605%" height="15" fill="rgb(249,171,29)" fg:x="237" fg:w="2"/><text x="19.2709%" y="687.50"></text></g><g><title>engine::users::model::add_username_to_key (2 samples, 0.16%)</title><rect x="19.0209%" y="661" width="0.1605%" height="15" fill="rgb(237,151,44)" fg:x="237" fg:w="2"/><text x="19.2709%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="19.0209%" y="645" width="0.1605%" height="15" fill="rgb(228,174,30)" fg:x="237" fg:w="2"/><text x="19.2709%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="19.0209%" y="629" width="0.1605%" height="15" fill="rgb(252,14,37)" fg:x="237" fg:w="2"/><text x="19.2709%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="19.0209%" y="613" width="0.1605%" height="15" fill="rgb(207,111,40)" fg:x="237" fg:w="2"/><text x="19.2709%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.16%)</title><rect x="19.0209%" y="597" width="0.1605%" height="15" fill="rgb(248,171,54)" fg:x="237" fg:w="2"/><text x="19.2709%" y="607.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="19.1814%" y="677" width="0.0803%" height="15" fill="rgb(211,127,2)" fg:x="239" fg:w="1"/><text x="19.4314%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="19.1814%" y="661" width="0.0803%" height="15" fill="rgb(236,87,47)" fg:x="239" fg:w="1"/><text x="19.4314%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="19.1814%" y="645" width="0.0803%" height="15" fill="rgb(223,190,45)" fg:x="239" fg:w="1"/><text x="19.4314%" y="655.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="19.1814%" y="629" width="0.0803%" height="15" fill="rgb(215,5,16)" fg:x="239" fg:w="1"/><text x="19.4314%" y="639.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="19.1814%" y="613" width="0.0803%" height="15" fill="rgb(252,82,33)" fg:x="239" fg:w="1"/><text x="19.4314%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="19.1814%" y="597" width="0.0803%" height="15" fill="rgb(247,213,44)" fg:x="239" fg:w="1"/><text x="19.4314%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="19.1814%" y="581" width="0.0803%" height="15" fill="rgb(205,196,44)" fg:x="239" fg:w="1"/><text x="19.4314%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.1814%" y="565" width="0.0803%" height="15" fill="rgb(237,96,54)" fg:x="239" fg:w="1"/><text x="19.4314%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.1814%" y="549" width="0.0803%" height="15" fill="rgb(230,113,34)" fg:x="239" fg:w="1"/><text x="19.4314%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="19.1814%" y="533" width="0.0803%" height="15" fill="rgb(221,224,12)" fg:x="239" fg:w="1"/><text x="19.4314%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.1814%" y="517" width="0.0803%" height="15" fill="rgb(219,112,44)" fg:x="239" fg:w="1"/><text x="19.4314%" y="527.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="19.2616%" y="661" width="0.0803%" height="15" fill="rgb(210,31,13)" fg:x="240" fg:w="1"/><text x="19.5116%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.2616%" y="645" width="0.0803%" height="15" fill="rgb(230,25,16)" fg:x="240" fg:w="1"/><text x="19.5116%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="19.2616%" y="629" width="0.0803%" height="15" fill="rgb(246,108,53)" fg:x="240" fg:w="1"/><text x="19.5116%" y="639.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="19.3419%" y="645" width="0.0803%" height="15" fill="rgb(241,172,50)" fg:x="241" fg:w="1"/><text x="19.5919%" y="655.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="19.3419%" y="629" width="0.0803%" height="15" fill="rgb(235,141,10)" fg:x="241" fg:w="1"/><text x="19.5919%" y="639.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="19.3419%" y="613" width="0.0803%" height="15" fill="rgb(220,174,43)" fg:x="241" fg:w="1"/><text x="19.5919%" y="623.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="19.3419%" y="597" width="0.0803%" height="15" fill="rgb(215,181,40)" fg:x="241" fg:w="1"/><text x="19.5919%" y="607.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="19.3419%" y="581" width="0.0803%" height="15" fill="rgb(230,97,2)" fg:x="241" fg:w="1"/><text x="19.5919%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="19.3419%" y="565" width="0.0803%" height="15" fill="rgb(211,25,27)" fg:x="241" fg:w="1"/><text x="19.5919%" y="575.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="19.3419%" y="549" width="0.0803%" height="15" fill="rgb(230,87,26)" fg:x="241" fg:w="1"/><text x="19.5919%" y="559.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="19.3419%" y="533" width="0.0803%" height="15" fill="rgb(227,160,17)" fg:x="241" fg:w="1"/><text x="19.5919%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="19.4222%" y="613" width="0.2408%" height="15" fill="rgb(244,85,34)" fg:x="242" fg:w="3"/><text x="19.6722%" y="623.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="19.6629%" y="613" width="0.0803%" height="15" fill="rgb(207,70,0)" fg:x="245" fg:w="1"/><text x="19.9129%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="19.6629%" y="597" width="0.0803%" height="15" fill="rgb(223,129,7)" fg:x="245" fg:w="1"/><text x="19.9129%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="19.6629%" y="581" width="0.0803%" height="15" fill="rgb(246,105,7)" fg:x="245" fg:w="1"/><text x="19.9129%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.6629%" y="565" width="0.0803%" height="15" fill="rgb(215,154,42)" fg:x="245" fg:w="1"/><text x="19.9129%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.6629%" y="549" width="0.0803%" height="15" fill="rgb(220,215,30)" fg:x="245" fg:w="1"/><text x="19.9129%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="19.6629%" y="533" width="0.0803%" height="15" fill="rgb(228,81,51)" fg:x="245" fg:w="1"/><text x="19.9129%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="19.6629%" y="517" width="0.0803%" height="15" fill="rgb(247,71,54)" fg:x="245" fg:w="1"/><text x="19.9129%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="19.6629%" y="501" width="0.0803%" height="15" fill="rgb(234,176,34)" fg:x="245" fg:w="1"/><text x="19.9129%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="19.6629%" y="485" width="0.0803%" height="15" fill="rgb(241,103,54)" fg:x="245" fg:w="1"/><text x="19.9129%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="19.6629%" y="469" width="0.0803%" height="15" fill="rgb(228,22,34)" fg:x="245" fg:w="1"/><text x="19.9129%" y="479.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="19.8234%" y="565" width="0.0803%" height="15" fill="rgb(241,179,48)" fg:x="247" fg:w="1"/><text x="20.0734%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="19.8234%" y="549" width="0.0803%" height="15" fill="rgb(235,167,37)" fg:x="247" fg:w="1"/><text x="20.0734%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="19.8234%" y="533" width="0.0803%" height="15" fill="rgb(213,109,30)" fg:x="247" fg:w="1"/><text x="20.0734%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="19.8234%" y="517" width="0.0803%" height="15" fill="rgb(222,172,16)" fg:x="247" fg:w="1"/><text x="20.0734%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="19.8234%" y="501" width="0.0803%" height="15" fill="rgb(233,192,5)" fg:x="247" fg:w="1"/><text x="20.0734%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="19.8234%" y="485" width="0.0803%" height="15" fill="rgb(247,189,41)" fg:x="247" fg:w="1"/><text x="20.0734%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="19.8234%" y="469" width="0.0803%" height="15" fill="rgb(218,134,47)" fg:x="247" fg:w="1"/><text x="20.0734%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.8234%" y="453" width="0.0803%" height="15" fill="rgb(216,29,3)" fg:x="247" fg:w="1"/><text x="20.0734%" y="463.50"></text></g><g><title>core::fmt::Formatter::alternate (1 samples, 0.08%)</title><rect x="19.9037%" y="549" width="0.0803%" height="15" fill="rgb(246,140,12)" fg:x="248" fg:w="1"/><text x="20.1537%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="19.9839%" y="533" width="0.1605%" height="15" fill="rgb(230,136,11)" fg:x="249" fg:w="2"/><text x="20.2339%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="19.9839%" y="517" width="0.1605%" height="15" fill="rgb(247,22,47)" fg:x="249" fg:w="2"/><text x="20.2339%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="19.9839%" y="549" width="0.2408%" height="15" fill="rgb(218,84,22)" fg:x="249" fg:w="3"/><text x="20.2339%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="20.1445%" y="533" width="0.0803%" height="15" fill="rgb(216,87,39)" fg:x="251" fg:w="1"/><text x="20.3945%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="20.1445%" y="517" width="0.0803%" height="15" fill="rgb(221,178,8)" fg:x="251" fg:w="1"/><text x="20.3945%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="20.1445%" y="501" width="0.0803%" height="15" fill="rgb(230,42,11)" fg:x="251" fg:w="1"/><text x="20.3945%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="20.2247%" y="533" width="0.3210%" height="15" fill="rgb(237,229,4)" fg:x="252" fg:w="4"/><text x="20.4747%" y="543.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="20.3050%" y="517" width="0.2408%" height="15" fill="rgb(222,31,33)" fg:x="253" fg:w="3"/><text x="20.5550%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="20.3050%" y="501" width="0.2408%" height="15" fill="rgb(210,17,39)" fg:x="253" fg:w="3"/><text x="20.5550%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="20.3852%" y="485" width="0.1605%" height="15" fill="rgb(244,93,20)" fg:x="254" fg:w="2"/><text x="20.6352%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="20.4655%" y="469" width="0.0803%" height="15" fill="rgb(210,40,47)" fg:x="255" fg:w="1"/><text x="20.7155%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="20.4655%" y="453" width="0.0803%" height="15" fill="rgb(239,211,47)" fg:x="255" fg:w="1"/><text x="20.7155%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="20.4655%" y="437" width="0.0803%" height="15" fill="rgb(251,223,49)" fg:x="255" fg:w="1"/><text x="20.7155%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="20.6260%" y="517" width="0.0803%" height="15" fill="rgb(221,149,5)" fg:x="257" fg:w="1"/><text x="20.8760%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="20.6260%" y="501" width="0.0803%" height="15" fill="rgb(219,224,51)" fg:x="257" fg:w="1"/><text x="20.8760%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="20.6260%" y="485" width="0.0803%" height="15" fill="rgb(223,7,8)" fg:x="257" fg:w="1"/><text x="20.8760%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="20.7063%" y="517" width="0.1605%" height="15" fill="rgb(241,217,22)" fg:x="258" fg:w="2"/><text x="20.9563%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="20.7063%" y="501" width="0.1605%" height="15" fill="rgb(248,209,0)" fg:x="258" fg:w="2"/><text x="20.9563%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="20.7865%" y="485" width="0.0803%" height="15" fill="rgb(217,205,4)" fg:x="259" fg:w="1"/><text x="21.0365%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="20.7865%" y="469" width="0.0803%" height="15" fill="rgb(228,124,39)" fg:x="259" fg:w="1"/><text x="21.0365%" y="479.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="21.0273%" y="501" width="0.0803%" height="15" fill="rgb(250,116,42)" fg:x="262" fg:w="1"/><text x="21.2773%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="21.1075%" y="501" width="0.3210%" height="15" fill="rgb(223,202,9)" fg:x="263" fg:w="4"/><text x="21.3575%" y="511.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="21.1075%" y="485" width="0.3210%" height="15" fill="rgb(242,222,40)" fg:x="263" fg:w="4"/><text x="21.3575%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="21.1878%" y="469" width="0.2408%" height="15" fill="rgb(229,99,46)" fg:x="264" fg:w="3"/><text x="21.4378%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="21.1878%" y="453" width="0.2408%" height="15" fill="rgb(225,56,46)" fg:x="264" fg:w="3"/><text x="21.4378%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="21.1878%" y="437" width="0.2408%" height="15" fill="rgb(227,94,5)" fg:x="264" fg:w="3"/><text x="21.4378%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="21.1878%" y="421" width="0.2408%" height="15" fill="rgb(205,112,38)" fg:x="264" fg:w="3"/><text x="21.4378%" y="431.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="21.1878%" y="405" width="0.2408%" height="15" fill="rgb(231,133,46)" fg:x="264" fg:w="3"/><text x="21.4378%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="21.4286%" y="485" width="0.3210%" height="15" fill="rgb(217,16,9)" fg:x="267" fg:w="4"/><text x="21.6786%" y="495.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="21.4286%" y="469" width="0.3210%" height="15" fill="rgb(249,173,9)" fg:x="267" fg:w="4"/><text x="21.6786%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.32%)</title><rect x="21.4286%" y="453" width="0.3210%" height="15" fill="rgb(205,163,53)" fg:x="267" fg:w="4"/><text x="21.6786%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.32%)</title><rect x="21.4286%" y="437" width="0.3210%" height="15" fill="rgb(217,54,41)" fg:x="267" fg:w="4"/><text x="21.6786%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="21.4286%" y="421" width="0.3210%" height="15" fill="rgb(228,216,12)" fg:x="267" fg:w="4"/><text x="21.6786%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="21.4286%" y="405" width="0.3210%" height="15" fill="rgb(244,228,15)" fg:x="267" fg:w="4"/><text x="21.6786%" y="415.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="21.4286%" y="389" width="0.3210%" height="15" fill="rgb(221,176,53)" fg:x="267" fg:w="4"/><text x="21.6786%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="21.7496%" y="485" width="0.0803%" height="15" fill="rgb(205,94,34)" fg:x="271" fg:w="1"/><text x="21.9996%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="21.4286%" y="501" width="0.4815%" height="15" fill="rgb(213,110,48)" fg:x="267" fg:w="6"/><text x="21.6786%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="21.8299%" y="485" width="0.0803%" height="15" fill="rgb(236,142,28)" fg:x="272" fg:w="1"/><text x="22.0799%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="21.8299%" y="469" width="0.0803%" height="15" fill="rgb(225,135,29)" fg:x="272" fg:w="1"/><text x="22.0799%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (17 samples, 1.36%)</title><rect x="20.8668%" y="517" width="1.3644%" height="15" fill="rgb(252,45,31)" fg:x="260" fg:w="17"/><text x="21.1168%" y="527.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="21.9101%" y="501" width="0.3210%" height="15" fill="rgb(211,187,50)" fg:x="273" fg:w="4"/><text x="22.1601%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="21.9904%" y="485" width="0.2408%" height="15" fill="rgb(229,109,7)" fg:x="274" fg:w="3"/><text x="22.2404%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="21.9904%" y="469" width="0.2408%" height="15" fill="rgb(251,131,51)" fg:x="274" fg:w="3"/><text x="22.2404%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (24 samples, 1.93%)</title><rect x="20.5457%" y="533" width="1.9262%" height="15" fill="rgb(251,180,35)" fg:x="256" fg:w="24"/><text x="20.7957%" y="543.50">s..</text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="22.2311%" y="517" width="0.2408%" height="15" fill="rgb(211,46,32)" fg:x="277" fg:w="3"/><text x="22.4811%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="22.3917%" y="501" width="0.0803%" height="15" fill="rgb(248,123,17)" fg:x="279" fg:w="1"/><text x="22.6417%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="22.5522%" y="501" width="0.1605%" height="15" fill="rgb(227,141,18)" fg:x="281" fg:w="2"/><text x="22.8022%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="22.6324%" y="485" width="0.0803%" height="15" fill="rgb(216,102,9)" fg:x="282" fg:w="1"/><text x="22.8824%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (36 samples, 2.89%)</title><rect x="19.9037%" y="565" width="2.8892%" height="15" fill="rgb(253,47,13)" fg:x="248" fg:w="36"/><text x="20.1537%" y="575.50">&lt;s..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (32 samples, 2.57%)</title><rect x="20.2247%" y="549" width="2.5682%" height="15" fill="rgb(226,93,23)" fg:x="252" fg:w="32"/><text x="20.4747%" y="559.50">se..</text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="22.4719%" y="533" width="0.3210%" height="15" fill="rgb(247,104,17)" fg:x="280" fg:w="4"/><text x="22.7219%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="22.5522%" y="517" width="0.2408%" height="15" fill="rgb(233,203,26)" fg:x="281" fg:w="3"/><text x="22.8022%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="22.7127%" y="501" width="0.0803%" height="15" fill="rgb(244,98,49)" fg:x="283" fg:w="1"/><text x="22.9627%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="22.7929%" y="517" width="0.1605%" height="15" fill="rgb(235,134,22)" fg:x="284" fg:w="2"/><text x="23.0429%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.8732%" y="501" width="0.0803%" height="15" fill="rgb(221,70,32)" fg:x="285" fg:w="1"/><text x="23.1232%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.9535%" y="501" width="0.0803%" height="15" fill="rgb(238,15,50)" fg:x="286" fg:w="1"/><text x="23.2035%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="22.7929%" y="565" width="0.4013%" height="15" fill="rgb(215,221,48)" fg:x="284" fg:w="5"/><text x="23.0429%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="22.7929%" y="549" width="0.4013%" height="15" fill="rgb(236,73,3)" fg:x="284" fg:w="5"/><text x="23.0429%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="22.7929%" y="533" width="0.4013%" height="15" fill="rgb(250,107,11)" fg:x="284" fg:w="5"/><text x="23.0429%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="22.9535%" y="517" width="0.2408%" height="15" fill="rgb(242,39,14)" fg:x="286" fg:w="3"/><text x="23.2035%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="23.0337%" y="501" width="0.1605%" height="15" fill="rgb(248,164,37)" fg:x="287" fg:w="2"/><text x="23.2837%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="23.1140%" y="485" width="0.0803%" height="15" fill="rgb(217,60,12)" fg:x="288" fg:w="1"/><text x="23.3640%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.1140%" y="469" width="0.0803%" height="15" fill="rgb(240,125,29)" fg:x="288" fg:w="1"/><text x="23.3640%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="23.1942%" y="533" width="0.1605%" height="15" fill="rgb(208,207,28)" fg:x="289" fg:w="2"/><text x="23.4442%" y="543.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPath as core::convert::From&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::from (1 samples, 0.08%)</title><rect x="23.2745%" y="517" width="0.0803%" height="15" fill="rgb(209,159,27)" fg:x="290" fg:w="1"/><text x="23.5245%" y="527.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPaths as core::convert::Into&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::into (1 samples, 0.08%)</title><rect x="23.3547%" y="533" width="0.0803%" height="15" fill="rgb(251,176,53)" fg:x="291" fg:w="1"/><text x="23.6047%" y="543.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="23.3547%" y="517" width="0.0803%" height="15" fill="rgb(211,85,7)" fg:x="291" fg:w="1"/><text x="23.6047%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="23.3547%" y="501" width="0.0803%" height="15" fill="rgb(216,64,54)" fg:x="291" fg:w="1"/><text x="23.6047%" y="511.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (7 samples, 0.56%)</title><rect x="23.1942%" y="549" width="0.5618%" height="15" fill="rgb(217,54,24)" fg:x="289" fg:w="7"/><text x="23.4442%" y="559.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (4 samples, 0.32%)</title><rect x="23.4350%" y="533" width="0.3210%" height="15" fill="rgb(208,206,53)" fg:x="292" fg:w="4"/><text x="23.6850%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="23.4350%" y="517" width="0.3210%" height="15" fill="rgb(251,74,39)" fg:x="292" fg:w="4"/><text x="23.6850%" y="527.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="23.5152%" y="501" width="0.2408%" height="15" fill="rgb(226,47,5)" fg:x="293" fg:w="3"/><text x="23.7652%" y="511.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="23.6758%" y="485" width="0.0803%" height="15" fill="rgb(234,111,33)" fg:x="295" fg:w="1"/><text x="23.9258%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.8363%" y="517" width="0.0803%" height="15" fill="rgb(251,14,10)" fg:x="297" fg:w="1"/><text x="24.0863%" y="527.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="23.9165%" y="517" width="0.0803%" height="15" fill="rgb(232,43,0)" fg:x="298" fg:w="1"/><text x="24.1665%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="23.9165%" y="501" width="0.0803%" height="15" fill="rgb(222,68,43)" fg:x="298" fg:w="1"/><text x="24.1665%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="23.9968%" y="517" width="0.0803%" height="15" fill="rgb(217,24,23)" fg:x="299" fg:w="1"/><text x="24.2468%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="23.9968%" y="501" width="0.0803%" height="15" fill="rgb(229,209,14)" fg:x="299" fg:w="1"/><text x="24.2468%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.9968%" y="485" width="0.0803%" height="15" fill="rgb(250,149,48)" fg:x="299" fg:w="1"/><text x="24.2468%" y="495.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="24.0770%" y="517" width="0.0803%" height="15" fill="rgb(210,120,37)" fg:x="300" fg:w="1"/><text x="24.3270%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="24.0770%" y="501" width="0.0803%" height="15" fill="rgb(210,21,8)" fg:x="300" fg:w="1"/><text x="24.3270%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.0770%" y="485" width="0.0803%" height="15" fill="rgb(243,145,7)" fg:x="300" fg:w="1"/><text x="24.3270%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.3178%" y="469" width="0.0803%" height="15" fill="rgb(238,178,32)" fg:x="303" fg:w="1"/><text x="24.5678%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.3178%" y="453" width="0.0803%" height="15" fill="rgb(222,4,10)" fg:x="303" fg:w="1"/><text x="24.5678%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="24.3981%" y="469" width="0.0803%" height="15" fill="rgb(239,7,37)" fg:x="304" fg:w="1"/><text x="24.6481%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="24.3981%" y="453" width="0.0803%" height="15" fill="rgb(215,31,37)" fg:x="304" fg:w="1"/><text x="24.6481%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="24.3981%" y="437" width="0.0803%" height="15" fill="rgb(224,83,33)" fg:x="304" fg:w="1"/><text x="24.6481%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="24.3981%" y="421" width="0.0803%" height="15" fill="rgb(239,55,3)" fg:x="304" fg:w="1"/><text x="24.6481%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="24.3981%" y="405" width="0.0803%" height="15" fill="rgb(247,92,11)" fg:x="304" fg:w="1"/><text x="24.6481%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.3981%" y="389" width="0.0803%" height="15" fill="rgb(239,200,7)" fg:x="304" fg:w="1"/><text x="24.6481%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.3981%" y="373" width="0.0803%" height="15" fill="rgb(227,115,8)" fg:x="304" fg:w="1"/><text x="24.6481%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.6388%" y="437" width="0.0803%" height="15" fill="rgb(215,189,27)" fg:x="307" fg:w="1"/><text x="24.8888%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.6388%" y="421" width="0.0803%" height="15" fill="rgb(251,216,39)" fg:x="307" fg:w="1"/><text x="24.8888%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.7191%" y="405" width="0.0803%" height="15" fill="rgb(207,29,47)" fg:x="308" fg:w="1"/><text x="24.9691%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.7191%" y="389" width="0.0803%" height="15" fill="rgb(210,71,34)" fg:x="308" fg:w="1"/><text x="24.9691%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="24.7191%" y="421" width="0.2408%" height="15" fill="rgb(253,217,51)" fg:x="308" fg:w="3"/><text x="24.9691%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="24.7994%" y="405" width="0.1605%" height="15" fill="rgb(222,117,46)" fg:x="309" fg:w="2"/><text x="25.0494%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.8796%" y="389" width="0.0803%" height="15" fill="rgb(226,132,6)" fg:x="310" fg:w="1"/><text x="25.1296%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (10 samples, 0.80%)</title><rect x="24.2376%" y="485" width="0.8026%" height="15" fill="rgb(254,145,51)" fg:x="302" fg:w="10"/><text x="24.4876%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7 samples, 0.56%)</title><rect x="24.4783%" y="469" width="0.5618%" height="15" fill="rgb(231,199,27)" fg:x="305" fg:w="7"/><text x="24.7283%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="24.5586%" y="453" width="0.4815%" height="15" fill="rgb(245,158,14)" fg:x="306" fg:w="6"/><text x="24.8086%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="24.7191%" y="437" width="0.3210%" height="15" fill="rgb(240,113,14)" fg:x="308" fg:w="4"/><text x="24.9691%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.9599%" y="421" width="0.0803%" height="15" fill="rgb(210,20,13)" fg:x="311" fg:w="1"/><text x="25.2099%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (11 samples, 0.88%)</title><rect x="24.2376%" y="501" width="0.8828%" height="15" fill="rgb(241,144,13)" fg:x="302" fg:w="11"/><text x="24.4876%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="25.0401%" y="485" width="0.0803%" height="15" fill="rgb(235,43,34)" fg:x="312" fg:w="1"/><text x="25.2901%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.0401%" y="469" width="0.0803%" height="15" fill="rgb(208,36,20)" fg:x="312" fg:w="1"/><text x="25.2901%" y="479.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="25.1204%" y="485" width="0.0803%" height="15" fill="rgb(239,204,10)" fg:x="313" fg:w="1"/><text x="25.3704%" y="495.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="25.1204%" y="469" width="0.0803%" height="15" fill="rgb(217,84,43)" fg:x="313" fg:w="1"/><text x="25.3704%" y="479.50"></text></g><g><title>engine::session::Session::save_changes (74 samples, 5.94%)</title><rect x="19.3419%" y="661" width="5.9390%" height="15" fill="rgb(241,170,50)" fg:x="241" fg:w="74"/><text x="19.5919%" y="671.50">engine::..</text></g><g><title>engine::session::state::State::close (73 samples, 5.86%)</title><rect x="19.4222%" y="645" width="5.8587%" height="15" fill="rgb(226,205,29)" fg:x="242" fg:w="73"/><text x="19.6722%" y="655.50">engine:..</text></g><g><title>engine::session::state::State::flush_entities (73 samples, 5.86%)</title><rect x="19.4222%" y="629" width="5.8587%" height="15" fill="rgb(233,113,1)" fg:x="242" fg:w="73"/><text x="19.6722%" y="639.50">engine:..</text></g><g><title>core::iter::adapters::try_process (69 samples, 5.54%)</title><rect x="19.7432%" y="613" width="5.5377%" height="15" fill="rgb(253,98,13)" fg:x="246" fg:w="69"/><text x="19.9932%" y="623.50">core::i..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (69 samples, 5.54%)</title><rect x="19.7432%" y="597" width="5.5377%" height="15" fill="rgb(211,115,12)" fg:x="246" fg:w="69"/><text x="19.9932%" y="607.50">&lt;alloc:..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (69 samples, 5.54%)</title><rect x="19.7432%" y="581" width="5.5377%" height="15" fill="rgb(208,12,16)" fg:x="246" fg:w="69"/><text x="19.9932%" y="591.50">engine:..</text></g><g><title>kernel::model::any_entity_changes (26 samples, 2.09%)</title><rect x="23.1942%" y="565" width="2.0867%" height="15" fill="rgb(237,193,54)" fg:x="289" fg:w="26"/><text x="23.4442%" y="575.50">k..</text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (19 samples, 1.52%)</title><rect x="23.7560%" y="549" width="1.5249%" height="15" fill="rgb(243,22,42)" fg:x="296" fg:w="19"/><text x="24.0060%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (18 samples, 1.44%)</title><rect x="23.8363%" y="533" width="1.4446%" height="15" fill="rgb(233,151,36)" fg:x="297" fg:w="18"/><text x="24.0863%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (14 samples, 1.12%)</title><rect x="24.1573%" y="517" width="1.1236%" height="15" fill="rgb(237,57,45)" fg:x="301" fg:w="14"/><text x="24.4073%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="25.1204%" y="501" width="0.1605%" height="15" fill="rgb(221,88,17)" fg:x="313" fg:w="2"/><text x="25.3704%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="25.2006%" y="485" width="0.0803%" height="15" fill="rgb(230,79,15)" fg:x="314" fg:w="1"/><text x="25.4506%" y="495.50"></text></g><g><title>engine::session::Session::flush (76 samples, 6.10%)</title><rect x="19.2616%" y="677" width="6.0995%" height="15" fill="rgb(213,57,13)" fg:x="240" fg:w="76"/><text x="19.5116%" y="687.50">engine::..</text></g><g><title>engine::session::Session::set_session (1 samples, 0.08%)</title><rect x="25.2809%" y="661" width="0.0803%" height="15" fill="rgb(222,116,39)" fg:x="315" fg:w="1"/><text x="25.5309%" y="671.50"></text></g><g><title>kernel::session::SetSession&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="25.2809%" y="645" width="0.0803%" height="15" fill="rgb(245,107,2)" fg:x="315" fg:w="1"/><text x="25.5309%" y="655.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="25.3612%" y="677" width="0.0803%" height="15" fill="rgb(238,1,10)" fg:x="316" fg:w="1"/><text x="25.6112%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.3612%" y="661" width="0.0803%" height="15" fill="rgb(249,4,48)" fg:x="316" fg:w="1"/><text x="25.6112%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.3612%" y="645" width="0.0803%" height="15" fill="rgb(223,151,18)" fg:x="316" fg:w="1"/><text x="25.6112%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="25.3612%" y="629" width="0.0803%" height="15" fill="rgb(227,65,43)" fg:x="316" fg:w="1"/><text x="25.6112%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="25.3612%" y="613" width="0.0803%" height="15" fill="rgb(218,40,45)" fg:x="316" fg:w="1"/><text x="25.6112%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="25.3612%" y="597" width="0.0803%" height="15" fill="rgb(252,121,31)" fg:x="316" fg:w="1"/><text x="25.6112%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="25.3612%" y="581" width="0.0803%" height="15" fill="rgb(219,158,43)" fg:x="316" fg:w="1"/><text x="25.6112%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="25.3612%" y="565" width="0.0803%" height="15" fill="rgb(231,162,42)" fg:x="316" fg:w="1"/><text x="25.6112%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="25.3612%" y="549" width="0.0803%" height="15" fill="rgb(217,179,25)" fg:x="316" fg:w="1"/><text x="25.6112%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="25.3612%" y="533" width="0.0803%" height="15" fill="rgb(206,212,31)" fg:x="316" fg:w="1"/><text x="25.6112%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="25.3612%" y="517" width="0.0803%" height="15" fill="rgb(235,144,12)" fg:x="316" fg:w="1"/><text x="25.6112%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="25.3612%" y="501" width="0.0803%" height="15" fill="rgb(213,51,10)" fg:x="316" fg:w="1"/><text x="25.6112%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.3612%" y="485" width="0.0803%" height="15" fill="rgb(231,145,14)" fg:x="316" fg:w="1"/><text x="25.6112%" y="495.50"></text></g><g><title>plugins_core::build::Build::new (2 samples, 0.16%)</title><rect x="25.4414%" y="677" width="0.1605%" height="15" fill="rgb(235,15,28)" fg:x="317" fg:w="2"/><text x="25.6914%" y="687.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="25.4414%" y="661" width="0.1605%" height="15" fill="rgb(237,206,10)" fg:x="317" fg:w="2"/><text x="25.6914%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="25.5217%" y="645" width="0.0803%" height="15" fill="rgb(236,227,27)" fg:x="318" fg:w="1"/><text x="25.7717%" y="655.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="25.5217%" y="629" width="0.0803%" height="15" fill="rgb(246,83,35)" fg:x="318" fg:w="1"/><text x="25.7717%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="25.6019%" y="629" width="0.1605%" height="15" fill="rgb(220,136,24)" fg:x="319" fg:w="2"/><text x="25.8519%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="25.6822%" y="613" width="0.0803%" height="15" fill="rgb(217,3,25)" fg:x="320" fg:w="1"/><text x="25.9322%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="25.6822%" y="597" width="0.0803%" height="15" fill="rgb(239,24,14)" fg:x="320" fg:w="1"/><text x="25.9322%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="25.6019%" y="661" width="0.2408%" height="15" fill="rgb(244,16,53)" fg:x="319" fg:w="3"/><text x="25.8519%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="25.6019%" y="645" width="0.2408%" height="15" fill="rgb(208,175,44)" fg:x="319" fg:w="3"/><text x="25.8519%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="25.7624%" y="629" width="0.0803%" height="15" fill="rgb(252,18,48)" fg:x="321" fg:w="1"/><text x="26.0124%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="25.7624%" y="613" width="0.0803%" height="15" fill="rgb(234,199,32)" fg:x="321" fg:w="1"/><text x="26.0124%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="25.7624%" y="597" width="0.0803%" height="15" fill="rgb(225,77,54)" fg:x="321" fg:w="1"/><text x="26.0124%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="25.7624%" y="581" width="0.0803%" height="15" fill="rgb(225,42,25)" fg:x="321" fg:w="1"/><text x="26.0124%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="25.7624%" y="565" width="0.0803%" height="15" fill="rgb(242,227,46)" fg:x="321" fg:w="1"/><text x="26.0124%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="25.7624%" y="549" width="0.0803%" height="15" fill="rgb(246,197,35)" fg:x="321" fg:w="1"/><text x="26.0124%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="26.0032%" y="645" width="0.2408%" height="15" fill="rgb(215,159,26)" fg:x="324" fg:w="3"/><text x="26.2532%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="26.0032%" y="629" width="0.2408%" height="15" fill="rgb(212,194,50)" fg:x="324" fg:w="3"/><text x="26.2532%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="26.0032%" y="613" width="0.2408%" height="15" fill="rgb(246,132,1)" fg:x="324" fg:w="3"/><text x="26.2532%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="26.0032%" y="597" width="0.2408%" height="15" fill="rgb(217,71,7)" fg:x="324" fg:w="3"/><text x="26.2532%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="26.0835%" y="581" width="0.1605%" height="15" fill="rgb(252,59,32)" fg:x="325" fg:w="2"/><text x="26.3335%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="26.0835%" y="565" width="0.1605%" height="15" fill="rgb(253,204,25)" fg:x="325" fg:w="2"/><text x="26.3335%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="26.0835%" y="549" width="0.1605%" height="15" fill="rgb(232,21,16)" fg:x="325" fg:w="2"/><text x="26.3335%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="26.0835%" y="533" width="0.1605%" height="15" fill="rgb(248,90,29)" fg:x="325" fg:w="2"/><text x="26.3335%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="26.0835%" y="517" width="0.1605%" height="15" fill="rgb(249,223,7)" fg:x="325" fg:w="2"/><text x="26.3335%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="26.0835%" y="501" width="0.1605%" height="15" fill="rgb(231,119,42)" fg:x="325" fg:w="2"/><text x="26.3335%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="26.0835%" y="485" width="0.1605%" height="15" fill="rgb(215,41,35)" fg:x="325" fg:w="2"/><text x="26.3335%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="26.0835%" y="469" width="0.1605%" height="15" fill="rgb(220,44,45)" fg:x="325" fg:w="2"/><text x="26.3335%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="26.0835%" y="453" width="0.1605%" height="15" fill="rgb(253,197,36)" fg:x="325" fg:w="2"/><text x="26.3335%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="26.0835%" y="437" width="0.1605%" height="15" fill="rgb(245,225,54)" fg:x="325" fg:w="2"/><text x="26.3335%" y="447.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="26.0835%" y="421" width="0.1605%" height="15" fill="rgb(239,94,37)" fg:x="325" fg:w="2"/><text x="26.3335%" y="431.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="26.0835%" y="405" width="0.1605%" height="15" fill="rgb(242,217,10)" fg:x="325" fg:w="2"/><text x="26.3335%" y="415.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="26.3242%" y="629" width="0.0803%" height="15" fill="rgb(250,193,7)" fg:x="328" fg:w="1"/><text x="26.5742%" y="639.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (1 samples, 0.08%)</title><rect x="26.3242%" y="613" width="0.0803%" height="15" fill="rgb(230,104,19)" fg:x="328" fg:w="1"/><text x="26.5742%" y="623.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (3 samples, 0.24%)</title><rect x="26.2440%" y="645" width="0.2408%" height="15" fill="rgb(230,181,4)" fg:x="327" fg:w="3"/><text x="26.4940%" y="655.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="26.4045%" y="629" width="0.0803%" height="15" fill="rgb(216,219,49)" fg:x="329" fg:w="1"/><text x="26.6545%" y="639.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="26.4045%" y="613" width="0.0803%" height="15" fill="rgb(254,144,0)" fg:x="329" fg:w="1"/><text x="26.6545%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="26.4045%" y="597" width="0.0803%" height="15" fill="rgb(205,209,38)" fg:x="329" fg:w="1"/><text x="26.6545%" y="607.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="26.4045%" y="581" width="0.0803%" height="15" fill="rgb(240,21,42)" fg:x="329" fg:w="1"/><text x="26.6545%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="26.4045%" y="565" width="0.0803%" height="15" fill="rgb(241,132,3)" fg:x="329" fg:w="1"/><text x="26.6545%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="26.4848%" y="597" width="0.0803%" height="15" fill="rgb(225,14,2)" fg:x="330" fg:w="1"/><text x="26.7348%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.4848%" y="581" width="0.0803%" height="15" fill="rgb(210,141,35)" fg:x="330" fg:w="1"/><text x="26.7348%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="26.5650%" y="597" width="0.0803%" height="15" fill="rgb(251,14,44)" fg:x="331" fg:w="1"/><text x="26.8150%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.5650%" y="581" width="0.0803%" height="15" fill="rgb(247,48,18)" fg:x="331" fg:w="1"/><text x="26.8150%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="26.6453%" y="565" width="0.1605%" height="15" fill="rgb(225,0,40)" fg:x="332" fg:w="2"/><text x="26.8953%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (6 samples, 0.48%)</title><rect x="26.4848%" y="629" width="0.4815%" height="15" fill="rgb(221,31,33)" fg:x="330" fg:w="6"/><text x="26.7348%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (6 samples, 0.48%)</title><rect x="26.4848%" y="613" width="0.4815%" height="15" fill="rgb(237,42,40)" fg:x="330" fg:w="6"/><text x="26.7348%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (4 samples, 0.32%)</title><rect x="26.6453%" y="597" width="0.3210%" height="15" fill="rgb(233,51,29)" fg:x="332" fg:w="4"/><text x="26.8953%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (4 samples, 0.32%)</title><rect x="26.6453%" y="581" width="0.3210%" height="15" fill="rgb(226,58,20)" fg:x="332" fg:w="4"/><text x="26.8953%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="26.8058%" y="565" width="0.1605%" height="15" fill="rgb(208,98,7)" fg:x="334" fg:w="2"/><text x="27.0558%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="26.8058%" y="549" width="0.1605%" height="15" fill="rgb(228,143,44)" fg:x="334" fg:w="2"/><text x="27.0558%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.8860%" y="533" width="0.0803%" height="15" fill="rgb(246,55,38)" fg:x="335" fg:w="1"/><text x="27.1360%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.8860%" y="517" width="0.0803%" height="15" fill="rgb(247,87,16)" fg:x="335" fg:w="1"/><text x="27.1360%" y="527.50"></text></g><g><title>kernel::model::EntityPtr::new (1 samples, 0.08%)</title><rect x="26.9663%" y="629" width="0.0803%" height="15" fill="rgb(234,129,42)" fg:x="336" fg:w="1"/><text x="27.2163%" y="639.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="27.0465%" y="597" width="0.0803%" height="15" fill="rgb(220,82,16)" fg:x="337" fg:w="1"/><text x="27.2965%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="27.0465%" y="581" width="0.0803%" height="15" fill="rgb(211,88,4)" fg:x="337" fg:w="1"/><text x="27.2965%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.0465%" y="565" width="0.0803%" height="15" fill="rgb(248,151,21)" fg:x="337" fg:w="1"/><text x="27.2965%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.0465%" y="549" width="0.0803%" height="15" fill="rgb(238,163,6)" fg:x="337" fg:w="1"/><text x="27.2965%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.0465%" y="533" width="0.0803%" height="15" fill="rgb(209,183,11)" fg:x="337" fg:w="1"/><text x="27.2965%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.2071%" y="517" width="0.0803%" height="15" fill="rgb(219,37,20)" fg:x="339" fg:w="1"/><text x="27.4571%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.2071%" y="501" width="0.0803%" height="15" fill="rgb(210,158,4)" fg:x="339" fg:w="1"/><text x="27.4571%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.2071%" y="485" width="0.0803%" height="15" fill="rgb(221,167,53)" fg:x="339" fg:w="1"/><text x="27.4571%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (19 samples, 1.52%)</title><rect x="25.8427%" y="661" width="1.5249%" height="15" fill="rgb(237,151,45)" fg:x="322" fg:w="19"/><text x="26.0927%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (11 samples, 0.88%)</title><rect x="26.4848%" y="645" width="0.8828%" height="15" fill="rgb(231,39,3)" fg:x="330" fg:w="11"/><text x="26.7348%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="27.0465%" y="629" width="0.3210%" height="15" fill="rgb(212,167,28)" fg:x="337" fg:w="4"/><text x="27.2965%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="27.0465%" y="613" width="0.3210%" height="15" fill="rgb(232,178,8)" fg:x="337" fg:w="4"/><text x="27.2965%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="27.1268%" y="597" width="0.2408%" height="15" fill="rgb(225,151,20)" fg:x="338" fg:w="3"/><text x="27.3768%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="27.2071%" y="581" width="0.1605%" height="15" fill="rgb(238,3,37)" fg:x="339" fg:w="2"/><text x="27.4571%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="27.2071%" y="565" width="0.1605%" height="15" fill="rgb(251,147,42)" fg:x="339" fg:w="2"/><text x="27.4571%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="27.2071%" y="549" width="0.1605%" height="15" fill="rgb(208,173,10)" fg:x="339" fg:w="2"/><text x="27.4571%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="27.2071%" y="533" width="0.1605%" height="15" fill="rgb(246,225,4)" fg:x="339" fg:w="2"/><text x="27.4571%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="27.2873%" y="517" width="0.0803%" height="15" fill="rgb(248,102,6)" fg:x="340" fg:w="1"/><text x="27.5373%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="27.2873%" y="501" width="0.0803%" height="15" fill="rgb(232,6,21)" fg:x="340" fg:w="1"/><text x="27.5373%" y="511.50"></text></g><g><title>plugins_core::build::Build::save (24 samples, 1.93%)</title><rect x="25.6019%" y="677" width="1.9262%" height="15" fill="rgb(221,179,22)" fg:x="319" fg:w="24"/><text x="25.8519%" y="687.50">p..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="27.3676%" y="661" width="0.1605%" height="15" fill="rgb(252,50,20)" fg:x="341" fg:w="2"/><text x="27.6176%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="27.3676%" y="645" width="0.1605%" height="15" fill="rgb(222,56,38)" fg:x="341" fg:w="2"/><text x="27.6176%" y="655.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="27.3676%" y="629" width="0.1605%" height="15" fill="rgb(206,193,29)" fg:x="341" fg:w="2"/><text x="27.6176%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="27.5281%" y="581" width="0.1605%" height="15" fill="rgb(239,192,45)" fg:x="343" fg:w="2"/><text x="27.7781%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.6083%" y="565" width="0.0803%" height="15" fill="rgb(254,18,36)" fg:x="344" fg:w="1"/><text x="27.8583%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.6083%" y="549" width="0.0803%" height="15" fill="rgb(221,127,11)" fg:x="344" fg:w="1"/><text x="27.8583%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="27.6083%" y="533" width="0.0803%" height="15" fill="rgb(234,146,35)" fg:x="344" fg:w="1"/><text x="27.8583%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="27.6083%" y="517" width="0.0803%" height="15" fill="rgb(254,201,37)" fg:x="344" fg:w="1"/><text x="27.8583%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="27.6083%" y="501" width="0.0803%" height="15" fill="rgb(211,202,23)" fg:x="344" fg:w="1"/><text x="27.8583%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="27.6083%" y="485" width="0.0803%" height="15" fill="rgb(237,91,2)" fg:x="344" fg:w="1"/><text x="27.8583%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="27.6083%" y="469" width="0.0803%" height="15" fill="rgb(226,228,36)" fg:x="344" fg:w="1"/><text x="27.8583%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="27.6083%" y="453" width="0.0803%" height="15" fill="rgb(213,63,50)" fg:x="344" fg:w="1"/><text x="27.8583%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="27.6083%" y="437" width="0.0803%" height="15" fill="rgb(235,194,19)" fg:x="344" fg:w="1"/><text x="27.8583%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="27.6083%" y="421" width="0.0803%" height="15" fill="rgb(207,204,18)" fg:x="344" fg:w="1"/><text x="27.8583%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="27.6083%" y="405" width="0.0803%" height="15" fill="rgb(248,8,7)" fg:x="344" fg:w="1"/><text x="27.8583%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="27.6083%" y="389" width="0.0803%" height="15" fill="rgb(223,145,47)" fg:x="344" fg:w="1"/><text x="27.8583%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="27.6083%" y="373" width="0.0803%" height="15" fill="rgb(228,84,11)" fg:x="344" fg:w="1"/><text x="27.8583%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.6083%" y="357" width="0.0803%" height="15" fill="rgb(218,76,45)" fg:x="344" fg:w="1"/><text x="27.8583%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="27.6886%" y="581" width="0.0803%" height="15" fill="rgb(223,80,15)" fg:x="345" fg:w="1"/><text x="27.9386%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="27.6886%" y="565" width="0.0803%" height="15" fill="rgb(219,218,33)" fg:x="345" fg:w="1"/><text x="27.9386%" y="575.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (5 samples, 0.40%)</title><rect x="27.5281%" y="613" width="0.4013%" height="15" fill="rgb(208,51,11)" fg:x="343" fg:w="5"/><text x="27.7781%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (5 samples, 0.40%)</title><rect x="27.5281%" y="597" width="0.4013%" height="15" fill="rgb(229,165,39)" fg:x="343" fg:w="5"/><text x="27.7781%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="27.7689%" y="581" width="0.1605%" height="15" fill="rgb(241,100,24)" fg:x="346" fg:w="2"/><text x="28.0189%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="27.7689%" y="565" width="0.1605%" height="15" fill="rgb(228,14,23)" fg:x="346" fg:w="2"/><text x="28.0189%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="27.7689%" y="549" width="0.1605%" height="15" fill="rgb(247,116,52)" fg:x="346" fg:w="2"/><text x="28.0189%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="27.7689%" y="533" width="0.1605%" height="15" fill="rgb(216,149,33)" fg:x="346" fg:w="2"/><text x="28.0189%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.9294%" y="581" width="0.0803%" height="15" fill="rgb(238,142,29)" fg:x="348" fg:w="1"/><text x="28.1794%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.9294%" y="565" width="0.0803%" height="15" fill="rgb(224,83,40)" fg:x="348" fg:w="1"/><text x="28.1794%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.9294%" y="549" width="0.0803%" height="15" fill="rgb(234,165,11)" fg:x="348" fg:w="1"/><text x="28.1794%" y="559.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (8 samples, 0.64%)</title><rect x="27.5281%" y="645" width="0.6421%" height="15" fill="rgb(215,96,23)" fg:x="343" fg:w="8"/><text x="27.7781%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (8 samples, 0.64%)</title><rect x="27.5281%" y="629" width="0.6421%" height="15" fill="rgb(233,179,26)" fg:x="343" fg:w="8"/><text x="27.7781%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="27.9294%" y="613" width="0.2408%" height="15" fill="rgb(225,129,33)" fg:x="348" fg:w="3"/><text x="28.1794%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="27.9294%" y="597" width="0.2408%" height="15" fill="rgb(237,49,13)" fg:x="348" fg:w="3"/><text x="28.1794%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="28.0096%" y="581" width="0.1605%" height="15" fill="rgb(211,3,31)" fg:x="349" fg:w="2"/><text x="28.2596%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="28.0096%" y="565" width="0.1605%" height="15" fill="rgb(216,152,19)" fg:x="349" fg:w="2"/><text x="28.2596%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="28.0096%" y="549" width="0.1605%" height="15" fill="rgb(251,121,35)" fg:x="349" fg:w="2"/><text x="28.2596%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="28.0096%" y="533" width="0.1605%" height="15" fill="rgb(210,217,47)" fg:x="349" fg:w="2"/><text x="28.2596%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="28.0096%" y="517" width="0.1605%" height="15" fill="rgb(244,116,22)" fg:x="349" fg:w="2"/><text x="28.2596%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="28.0096%" y="501" width="0.1605%" height="15" fill="rgb(228,17,21)" fg:x="349" fg:w="2"/><text x="28.2596%" y="511.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (9 samples, 0.72%)</title><rect x="27.5281%" y="677" width="0.7223%" height="15" fill="rgb(240,149,34)" fg:x="343" fg:w="9"/><text x="27.7781%" y="687.50"></text></g><g><title>plugins_core::tools::set_occupying (9 samples, 0.72%)</title><rect x="27.5281%" y="661" width="0.7223%" height="15" fill="rgb(208,125,47)" fg:x="343" fg:w="9"/><text x="27.7781%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="28.1701%" y="645" width="0.0803%" height="15" fill="rgb(249,186,39)" fg:x="351" fg:w="1"/><text x="28.4201%" y="655.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="28.1701%" y="629" width="0.0803%" height="15" fill="rgb(240,220,33)" fg:x="351" fg:w="1"/><text x="28.4201%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="28.1701%" y="613" width="0.0803%" height="15" fill="rgb(243,110,23)" fg:x="351" fg:w="1"/><text x="28.4201%" y="623.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="28.1701%" y="597" width="0.0803%" height="15" fill="rgb(219,163,46)" fg:x="351" fg:w="1"/><text x="28.4201%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="28.1701%" y="581" width="0.0803%" height="15" fill="rgb(216,126,30)" fg:x="351" fg:w="1"/><text x="28.4201%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.1701%" y="565" width="0.0803%" height="15" fill="rgb(208,139,11)" fg:x="351" fg:w="1"/><text x="28.4201%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="28.2504%" y="645" width="0.0803%" height="15" fill="rgb(213,118,36)" fg:x="352" fg:w="1"/><text x="28.5004%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="28.2504%" y="629" width="0.0803%" height="15" fill="rgb(226,43,17)" fg:x="352" fg:w="1"/><text x="28.5004%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="28.2504%" y="613" width="0.0803%" height="15" fill="rgb(254,217,4)" fg:x="352" fg:w="1"/><text x="28.5004%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="28.2504%" y="597" width="0.0803%" height="15" fill="rgb(210,134,47)" fg:x="352" fg:w="1"/><text x="28.5004%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="28.2504%" y="581" width="0.0803%" height="15" fill="rgb(237,24,49)" fg:x="352" fg:w="1"/><text x="28.5004%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="28.2504%" y="565" width="0.0803%" height="15" fill="rgb(251,39,46)" fg:x="352" fg:w="1"/><text x="28.5004%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="28.2504%" y="549" width="0.0803%" height="15" fill="rgb(251,220,3)" fg:x="352" fg:w="1"/><text x="28.5004%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="28.2504%" y="533" width="0.0803%" height="15" fill="rgb(228,105,12)" fg:x="352" fg:w="1"/><text x="28.5004%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="28.2504%" y="517" width="0.0803%" height="15" fill="rgb(215,196,1)" fg:x="352" fg:w="1"/><text x="28.5004%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="28.2504%" y="501" width="0.0803%" height="15" fill="rgb(214,33,39)" fg:x="352" fg:w="1"/><text x="28.5004%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="28.2504%" y="485" width="0.0803%" height="15" fill="rgb(220,19,52)" fg:x="352" fg:w="1"/><text x="28.5004%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="28.2504%" y="469" width="0.0803%" height="15" fill="rgb(221,78,38)" fg:x="352" fg:w="1"/><text x="28.5004%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.2504%" y="453" width="0.0803%" height="15" fill="rgb(253,30,16)" fg:x="352" fg:w="1"/><text x="28.5004%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="28.4109%" y="613" width="0.1605%" height="15" fill="rgb(242,65,0)" fg:x="354" fg:w="2"/><text x="28.6609%" y="623.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (5 samples, 0.40%)</title><rect x="28.2504%" y="661" width="0.4013%" height="15" fill="rgb(235,201,12)" fg:x="352" fg:w="5"/><text x="28.5004%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="28.3307%" y="645" width="0.3210%" height="15" fill="rgb(233,161,9)" fg:x="353" fg:w="4"/><text x="28.5807%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="28.4109%" y="629" width="0.2408%" height="15" fill="rgb(241,207,41)" fg:x="354" fg:w="3"/><text x="28.6609%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="28.5714%" y="613" width="0.0803%" height="15" fill="rgb(212,69,46)" fg:x="356" fg:w="1"/><text x="28.8214%" y="623.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="28.5714%" y="597" width="0.0803%" height="15" fill="rgb(239,69,45)" fg:x="356" fg:w="1"/><text x="28.8214%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.5714%" y="581" width="0.0803%" height="15" fill="rgb(242,117,48)" fg:x="356" fg:w="1"/><text x="28.8214%" y="591.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (7 samples, 0.56%)</title><rect x="28.2504%" y="677" width="0.5618%" height="15" fill="rgb(228,41,36)" fg:x="352" fg:w="7"/><text x="28.5004%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="28.6517%" y="661" width="0.1605%" height="15" fill="rgb(212,3,32)" fg:x="357" fg:w="2"/><text x="28.9017%" y="671.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (2 samples, 0.16%)</title><rect x="28.6517%" y="645" width="0.1605%" height="15" fill="rgb(233,41,49)" fg:x="357" fg:w="2"/><text x="28.9017%" y="655.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="28.6517%" y="629" width="0.1605%" height="15" fill="rgb(252,170,49)" fg:x="357" fg:w="2"/><text x="28.9017%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="28.7319%" y="613" width="0.0803%" height="15" fill="rgb(229,53,26)" fg:x="358" fg:w="1"/><text x="28.9819%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="28.8925%" y="661" width="0.0803%" height="15" fill="rgb(217,157,12)" fg:x="360" fg:w="1"/><text x="29.1425%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="28.8925%" y="645" width="0.0803%" height="15" fill="rgb(227,17,9)" fg:x="360" fg:w="1"/><text x="29.1425%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="28.8925%" y="629" width="0.0803%" height="15" fill="rgb(218,84,12)" fg:x="360" fg:w="1"/><text x="29.1425%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="28.8925%" y="613" width="0.0803%" height="15" fill="rgb(212,79,24)" fg:x="360" fg:w="1"/><text x="29.1425%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="28.8925%" y="597" width="0.0803%" height="15" fill="rgb(217,222,37)" fg:x="360" fg:w="1"/><text x="29.1425%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="28.8925%" y="581" width="0.0803%" height="15" fill="rgb(246,208,8)" fg:x="360" fg:w="1"/><text x="29.1425%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="28.8925%" y="565" width="0.0803%" height="15" fill="rgb(244,133,10)" fg:x="360" fg:w="1"/><text x="29.1425%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="28.8925%" y="549" width="0.0803%" height="15" fill="rgb(209,219,41)" fg:x="360" fg:w="1"/><text x="29.1425%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.8925%" y="533" width="0.0803%" height="15" fill="rgb(253,175,45)" fg:x="360" fg:w="1"/><text x="29.1425%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="28.8925%" y="517" width="0.0803%" height="15" fill="rgb(235,100,37)" fg:x="360" fg:w="1"/><text x="29.1425%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="28.9727%" y="645" width="0.0803%" height="15" fill="rgb(225,87,19)" fg:x="361" fg:w="1"/><text x="29.2227%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="28.9727%" y="629" width="0.0803%" height="15" fill="rgb(217,152,17)" fg:x="361" fg:w="1"/><text x="29.2227%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="28.9727%" y="613" width="0.0803%" height="15" fill="rgb(235,72,13)" fg:x="361" fg:w="1"/><text x="29.2227%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.0530%" y="581" width="0.0803%" height="15" fill="rgb(233,140,18)" fg:x="362" fg:w="1"/><text x="29.3030%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.0530%" y="565" width="0.0803%" height="15" fill="rgb(207,212,28)" fg:x="362" fg:w="1"/><text x="29.3030%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="29.1332%" y="581" width="0.0803%" height="15" fill="rgb(220,130,25)" fg:x="363" fg:w="1"/><text x="29.3832%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.2135%" y="501" width="0.0803%" height="15" fill="rgb(205,55,34)" fg:x="364" fg:w="1"/><text x="29.4635%" y="511.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (5 samples, 0.40%)</title><rect x="28.9727%" y="661" width="0.4013%" height="15" fill="rgb(237,54,35)" fg:x="361" fg:w="5"/><text x="29.2227%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.32%)</title><rect x="29.0530%" y="645" width="0.3210%" height="15" fill="rgb(208,67,23)" fg:x="362" fg:w="4"/><text x="29.3030%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="29.0530%" y="629" width="0.3210%" height="15" fill="rgb(206,207,50)" fg:x="362" fg:w="4"/><text x="29.3030%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="29.0530%" y="613" width="0.3210%" height="15" fill="rgb(213,211,42)" fg:x="362" fg:w="4"/><text x="29.3030%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="29.0530%" y="597" width="0.3210%" height="15" fill="rgb(252,197,50)" fg:x="362" fg:w="4"/><text x="29.3030%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="29.2135%" y="581" width="0.1605%" height="15" fill="rgb(251,211,41)" fg:x="364" fg:w="2"/><text x="29.4635%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="29.2135%" y="565" width="0.1605%" height="15" fill="rgb(229,211,5)" fg:x="364" fg:w="2"/><text x="29.4635%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="29.2135%" y="549" width="0.1605%" height="15" fill="rgb(239,36,31)" fg:x="364" fg:w="2"/><text x="29.4635%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="29.2135%" y="533" width="0.1605%" height="15" fill="rgb(248,67,31)" fg:x="364" fg:w="2"/><text x="29.4635%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="29.2135%" y="517" width="0.1605%" height="15" fill="rgb(249,55,44)" fg:x="364" fg:w="2"/><text x="29.4635%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="29.2937%" y="501" width="0.0803%" height="15" fill="rgb(216,82,12)" fg:x="365" fg:w="1"/><text x="29.5437%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="29.3740%" y="629" width="0.0803%" height="15" fill="rgb(242,174,1)" fg:x="366" fg:w="1"/><text x="29.6240%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.3740%" y="613" width="0.0803%" height="15" fill="rgb(208,120,29)" fg:x="366" fg:w="1"/><text x="29.6240%" y="623.50"></text></g><g><title>plugins_core::tools::set_container (9 samples, 0.72%)</title><rect x="28.8122%" y="677" width="0.7223%" height="15" fill="rgb(221,105,43)" fg:x="359" fg:w="9"/><text x="29.0622%" y="687.50"></text></g><g><title>plugins_core::location::model::Location::set (2 samples, 0.16%)</title><rect x="29.3740%" y="661" width="0.1605%" height="15" fill="rgb(234,124,22)" fg:x="366" fg:w="2"/><text x="29.6240%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="29.3740%" y="645" width="0.1605%" height="15" fill="rgb(212,23,30)" fg:x="366" fg:w="2"/><text x="29.6240%" y="655.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="29.4543%" y="629" width="0.0803%" height="15" fill="rgb(219,122,53)" fg:x="367" fg:w="1"/><text x="29.7043%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="29.4543%" y="613" width="0.0803%" height="15" fill="rgb(248,84,24)" fg:x="367" fg:w="1"/><text x="29.7043%" y="623.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="29.4543%" y="597" width="0.0803%" height="15" fill="rgb(245,115,18)" fg:x="367" fg:w="1"/><text x="29.7043%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="29.4543%" y="581" width="0.0803%" height="15" fill="rgb(227,176,51)" fg:x="367" fg:w="1"/><text x="29.7043%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.4543%" y="565" width="0.0803%" height="15" fill="rgb(229,63,42)" fg:x="367" fg:w="1"/><text x="29.7043%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.4543%" y="549" width="0.0803%" height="15" fill="rgb(247,202,24)" fg:x="367" fg:w="1"/><text x="29.7043%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="29.4543%" y="533" width="0.0803%" height="15" fill="rgb(244,173,20)" fg:x="367" fg:w="1"/><text x="29.7043%" y="543.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="29.6148%" y="661" width="0.0803%" height="15" fill="rgb(242,81,47)" fg:x="369" fg:w="1"/><text x="29.8648%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::new (1 samples, 0.08%)</title><rect x="29.6148%" y="645" width="0.0803%" height="15" fill="rgb(231,185,54)" fg:x="369" fg:w="1"/><text x="29.8648%" y="655.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (137 samples, 11.00%)</title><rect x="18.7801%" y="693" width="10.9952%" height="15" fill="rgb(243,55,32)" fg:x="234" fg:w="137"/><text x="19.0301%" y="703.50">plugins_core::bu..</text></g><g><title>plugins_core::tools::set_wearing (3 samples, 0.24%)</title><rect x="29.5345%" y="677" width="0.2408%" height="15" fill="rgb(208,167,19)" fg:x="368" fg:w="3"/><text x="29.7845%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="29.6950%" y="661" width="0.0803%" height="15" fill="rgb(231,72,35)" fg:x="370" fg:w="1"/><text x="29.9450%" y="671.50"></text></g><g><title>plugins_core::fashion::model::_::&lt;impl serde::ser::Serialize for plugins_core::fashion::model::Wearing&gt;::serialize (1 samples, 0.08%)</title><rect x="29.6950%" y="645" width="0.0803%" height="15" fill="rgb(250,173,51)" fg:x="370" fg:w="1"/><text x="29.9450%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="29.6950%" y="629" width="0.0803%" height="15" fill="rgb(209,5,22)" fg:x="370" fg:w="1"/><text x="29.9450%" y="639.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (2 samples, 0.16%)</title><rect x="29.7753%" y="693" width="0.1605%" height="15" fill="rgb(250,174,19)" fg:x="371" fg:w="2"/><text x="30.0253%" y="703.50"></text></g><g><title>plugins_core::build::Build::new (2 samples, 0.16%)</title><rect x="29.7753%" y="677" width="0.1605%" height="15" fill="rgb(217,3,49)" fg:x="371" fg:w="2"/><text x="30.0253%" y="687.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="29.7753%" y="661" width="0.1605%" height="15" fill="rgb(218,225,5)" fg:x="371" fg:w="2"/><text x="30.0253%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="29.8555%" y="645" width="0.0803%" height="15" fill="rgb(236,89,11)" fg:x="372" fg:w="1"/><text x="30.1055%" y="655.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="29.8555%" y="629" width="0.0803%" height="15" fill="rgb(206,33,28)" fg:x="372" fg:w="1"/><text x="30.1055%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="29.8555%" y="613" width="0.0803%" height="15" fill="rgb(241,56,42)" fg:x="372" fg:w="1"/><text x="30.1055%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="29.8555%" y="597" width="0.0803%" height="15" fill="rgb(222,44,11)" fg:x="372" fg:w="1"/><text x="30.1055%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="29.8555%" y="581" width="0.0803%" height="15" fill="rgb(234,111,20)" fg:x="372" fg:w="1"/><text x="30.1055%" y="591.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="29.8555%" y="565" width="0.0803%" height="15" fill="rgb(237,77,6)" fg:x="372" fg:w="1"/><text x="30.1055%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="29.8555%" y="549" width="0.0803%" height="15" fill="rgb(235,111,23)" fg:x="372" fg:w="1"/><text x="30.1055%" y="559.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="29.8555%" y="533" width="0.0803%" height="15" fill="rgb(251,135,29)" fg:x="372" fg:w="1"/><text x="30.1055%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="29.8555%" y="517" width="0.0803%" height="15" fill="rgb(217,57,1)" fg:x="372" fg:w="1"/><text x="30.1055%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="29.8555%" y="501" width="0.0803%" height="15" fill="rgb(249,119,31)" fg:x="372" fg:w="1"/><text x="30.1055%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="29.8555%" y="485" width="0.0803%" height="15" fill="rgb(233,164,33)" fg:x="372" fg:w="1"/><text x="30.1055%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="29.8555%" y="469" width="0.0803%" height="15" fill="rgb(250,217,43)" fg:x="372" fg:w="1"/><text x="30.1055%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="29.8555%" y="453" width="0.0803%" height="15" fill="rgb(232,154,50)" fg:x="372" fg:w="1"/><text x="30.1055%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.08%)</title><rect x="29.8555%" y="437" width="0.0803%" height="15" fill="rgb(227,190,8)" fg:x="372" fg:w="1"/><text x="30.1055%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (1 samples, 0.08%)</title><rect x="29.8555%" y="421" width="0.0803%" height="15" fill="rgb(209,217,32)" fg:x="372" fg:w="1"/><text x="30.1055%" y="431.50"></text></g><g><title>plugins_core::build::BuildSurroundings::hands (1 samples, 0.08%)</title><rect x="29.9358%" y="693" width="0.0803%" height="15" fill="rgb(243,203,50)" fg:x="373" fg:w="1"/><text x="30.1858%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="29.9358%" y="677" width="0.0803%" height="15" fill="rgb(232,152,27)" fg:x="373" fg:w="1"/><text x="30.1858%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.9358%" y="661" width="0.0803%" height="15" fill="rgb(240,34,29)" fg:x="373" fg:w="1"/><text x="30.1858%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.9358%" y="645" width="0.0803%" height="15" fill="rgb(215,185,52)" fg:x="373" fg:w="1"/><text x="30.1858%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="30.0963%" y="661" width="0.0803%" height="15" fill="rgb(240,89,49)" fg:x="375" fg:w="1"/><text x="30.3463%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;kernel::model::entity_ref::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="30.0963%" y="645" width="0.0803%" height="15" fill="rgb(225,12,52)" fg:x="375" fg:w="1"/><text x="30.3463%" y="655.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="30.1766%" y="661" width="0.0803%" height="15" fill="rgb(239,128,45)" fg:x="376" fg:w="1"/><text x="30.4266%" y="671.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="30.1766%" y="645" width="0.0803%" height="15" fill="rgb(211,78,47)" fg:x="376" fg:w="1"/><text x="30.4266%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="30.1766%" y="629" width="0.0803%" height="15" fill="rgb(232,31,21)" fg:x="376" fg:w="1"/><text x="30.4266%" y="639.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="30.1766%" y="613" width="0.0803%" height="15" fill="rgb(222,168,14)" fg:x="376" fg:w="1"/><text x="30.4266%" y="623.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="30.1766%" y="597" width="0.0803%" height="15" fill="rgb(209,128,24)" fg:x="376" fg:w="1"/><text x="30.4266%" y="607.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="30.1766%" y="581" width="0.0803%" height="15" fill="rgb(249,35,13)" fg:x="376" fg:w="1"/><text x="30.4266%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="30.1766%" y="565" width="0.0803%" height="15" fill="rgb(218,7,2)" fg:x="376" fg:w="1"/><text x="30.4266%" y="575.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="30.2568%" y="645" width="0.0803%" height="15" fill="rgb(238,107,27)" fg:x="377" fg:w="1"/><text x="30.5068%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="30.2568%" y="629" width="0.0803%" height="15" fill="rgb(217,88,38)" fg:x="377" fg:w="1"/><text x="30.5068%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="30.2568%" y="613" width="0.0803%" height="15" fill="rgb(230,207,0)" fg:x="377" fg:w="1"/><text x="30.5068%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="30.2568%" y="597" width="0.0803%" height="15" fill="rgb(249,64,54)" fg:x="377" fg:w="1"/><text x="30.5068%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="30.3371%" y="629" width="0.0803%" height="15" fill="rgb(231,7,11)" fg:x="378" fg:w="1"/><text x="30.5871%" y="639.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="30.4173%" y="629" width="0.1605%" height="15" fill="rgb(205,149,21)" fg:x="379" fg:w="2"/><text x="30.6673%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="30.4976%" y="613" width="0.0803%" height="15" fill="rgb(215,126,34)" fg:x="380" fg:w="1"/><text x="30.7476%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="30.5778%" y="581" width="0.0803%" height="15" fill="rgb(241,132,45)" fg:x="381" fg:w="1"/><text x="30.8278%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="30.5778%" y="565" width="0.0803%" height="15" fill="rgb(252,69,32)" fg:x="381" fg:w="1"/><text x="30.8278%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="30.5778%" y="549" width="0.0803%" height="15" fill="rgb(232,204,19)" fg:x="381" fg:w="1"/><text x="30.8278%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="30.5778%" y="533" width="0.0803%" height="15" fill="rgb(249,15,47)" fg:x="381" fg:w="1"/><text x="30.8278%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="30.5778%" y="517" width="0.0803%" height="15" fill="rgb(209,227,23)" fg:x="381" fg:w="1"/><text x="30.8278%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="30.5778%" y="501" width="0.0803%" height="15" fill="rgb(248,92,24)" fg:x="381" fg:w="1"/><text x="30.8278%" y="511.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="30.5778%" y="613" width="0.1605%" height="15" fill="rgb(247,59,2)" fg:x="381" fg:w="2"/><text x="30.8278%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="30.5778%" y="597" width="0.1605%" height="15" fill="rgb(221,30,5)" fg:x="381" fg:w="2"/><text x="30.8278%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="30.6581%" y="581" width="0.0803%" height="15" fill="rgb(208,108,53)" fg:x="382" fg:w="1"/><text x="30.9081%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="30.6581%" y="565" width="0.0803%" height="15" fill="rgb(211,183,26)" fg:x="382" fg:w="1"/><text x="30.9081%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="30.6581%" y="549" width="0.0803%" height="15" fill="rgb(232,132,4)" fg:x="382" fg:w="1"/><text x="30.9081%" y="559.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="30.5778%" y="629" width="0.3210%" height="15" fill="rgb(253,128,37)" fg:x="381" fg:w="4"/><text x="30.8278%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="30.7384%" y="613" width="0.1605%" height="15" fill="rgb(221,58,24)" fg:x="383" fg:w="2"/><text x="30.9884%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="30.7384%" y="597" width="0.1605%" height="15" fill="rgb(230,54,45)" fg:x="383" fg:w="2"/><text x="30.9884%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.8186%" y="581" width="0.0803%" height="15" fill="rgb(254,21,18)" fg:x="384" fg:w="1"/><text x="31.0686%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (8 samples, 0.64%)</title><rect x="30.3371%" y="645" width="0.6421%" height="15" fill="rgb(221,108,0)" fg:x="378" fg:w="8"/><text x="30.5871%" y="655.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="30.8989%" y="629" width="0.0803%" height="15" fill="rgb(206,95,1)" fg:x="385" fg:w="1"/><text x="31.1489%" y="639.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="30.8989%" y="613" width="0.0803%" height="15" fill="rgb(237,52,5)" fg:x="385" fg:w="1"/><text x="31.1489%" y="623.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="30.8989%" y="597" width="0.0803%" height="15" fill="rgb(218,150,34)" fg:x="385" fg:w="1"/><text x="31.1489%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="30.8989%" y="581" width="0.0803%" height="15" fill="rgb(235,194,28)" fg:x="385" fg:w="1"/><text x="31.1489%" y="591.50"></text></g><g><title>plugins_core::build::Build::save (10 samples, 0.80%)</title><rect x="30.2568%" y="661" width="0.8026%" height="15" fill="rgb(245,92,18)" fg:x="377" fg:w="10"/><text x="30.5068%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="30.9791%" y="645" width="0.0803%" height="15" fill="rgb(253,203,53)" fg:x="386" fg:w="1"/><text x="31.2291%" y="655.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (15 samples, 1.20%)</title><rect x="30.0161%" y="693" width="1.2039%" height="15" fill="rgb(249,185,47)" fg:x="374" fg:w="15"/><text x="30.2661%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (15 samples, 1.20%)</title><rect x="30.0161%" y="677" width="1.2039%" height="15" fill="rgb(252,194,52)" fg:x="374" fg:w="15"/><text x="30.2661%" y="687.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (2 samples, 0.16%)</title><rect x="31.0594%" y="661" width="0.1605%" height="15" fill="rgb(210,53,36)" fg:x="387" fg:w="2"/><text x="31.3094%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="31.0594%" y="645" width="0.1605%" height="15" fill="rgb(237,37,25)" fg:x="387" fg:w="2"/><text x="31.3094%" y="655.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (2 samples, 0.16%)</title><rect x="31.0594%" y="629" width="0.1605%" height="15" fill="rgb(242,116,27)" fg:x="387" fg:w="2"/><text x="31.3094%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="31.0594%" y="613" width="0.1605%" height="15" fill="rgb(213,185,26)" fg:x="387" fg:w="2"/><text x="31.3094%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.1396%" y="597" width="0.0803%" height="15" fill="rgb(225,204,8)" fg:x="388" fg:w="1"/><text x="31.3896%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="31.3002%" y="661" width="0.0803%" height="15" fill="rgb(254,111,37)" fg:x="390" fg:w="1"/><text x="31.5502%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="31.3002%" y="645" width="0.0803%" height="15" fill="rgb(242,35,9)" fg:x="390" fg:w="1"/><text x="31.5502%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="31.3002%" y="629" width="0.0803%" height="15" fill="rgb(232,138,49)" fg:x="390" fg:w="1"/><text x="31.5502%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.3002%" y="613" width="0.0803%" height="15" fill="rgb(247,56,4)" fg:x="390" fg:w="1"/><text x="31.5502%" y="623.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="31.3804%" y="661" width="0.0803%" height="15" fill="rgb(226,179,17)" fg:x="391" fg:w="1"/><text x="31.6304%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (4 samples, 0.32%)</title><rect x="31.2199%" y="677" width="0.3210%" height="15" fill="rgb(216,163,45)" fg:x="389" fg:w="4"/><text x="31.4699%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="31.4607%" y="661" width="0.0803%" height="15" fill="rgb(211,157,3)" fg:x="392" fg:w="1"/><text x="31.7107%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="31.4607%" y="645" width="0.0803%" height="15" fill="rgb(234,44,20)" fg:x="392" fg:w="1"/><text x="31.7107%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="31.4607%" y="629" width="0.0803%" height="15" fill="rgb(254,138,23)" fg:x="392" fg:w="1"/><text x="31.7107%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="31.4607%" y="613" width="0.0803%" height="15" fill="rgb(206,119,39)" fg:x="392" fg:w="1"/><text x="31.7107%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="31.4607%" y="597" width="0.0803%" height="15" fill="rgb(231,105,52)" fg:x="392" fg:w="1"/><text x="31.7107%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="31.4607%" y="581" width="0.0803%" height="15" fill="rgb(250,20,5)" fg:x="392" fg:w="1"/><text x="31.7107%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="31.5409%" y="677" width="0.0803%" height="15" fill="rgb(215,198,30)" fg:x="393" fg:w="1"/><text x="31.7909%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="31.5409%" y="661" width="0.0803%" height="15" fill="rgb(246,142,8)" fg:x="393" fg:w="1"/><text x="31.7909%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="31.5409%" y="645" width="0.0803%" height="15" fill="rgb(243,26,38)" fg:x="393" fg:w="1"/><text x="31.7909%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="31.5409%" y="629" width="0.0803%" height="15" fill="rgb(205,133,28)" fg:x="393" fg:w="1"/><text x="31.7909%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="31.5409%" y="613" width="0.0803%" height="15" fill="rgb(212,34,0)" fg:x="393" fg:w="1"/><text x="31.7909%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.5409%" y="597" width="0.0803%" height="15" fill="rgb(251,226,22)" fg:x="393" fg:w="1"/><text x="31.7909%" y="607.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="31.6212%" y="677" width="0.0803%" height="15" fill="rgb(252,119,9)" fg:x="394" fg:w="1"/><text x="31.8712%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="31.7817%" y="661" width="0.0803%" height="15" fill="rgb(213,150,50)" fg:x="396" fg:w="1"/><text x="32.0317%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="31.7817%" y="645" width="0.0803%" height="15" fill="rgb(212,24,39)" fg:x="396" fg:w="1"/><text x="32.0317%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="31.7817%" y="629" width="0.0803%" height="15" fill="rgb(213,46,39)" fg:x="396" fg:w="1"/><text x="32.0317%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="31.7817%" y="613" width="0.0803%" height="15" fill="rgb(239,106,12)" fg:x="396" fg:w="1"/><text x="32.0317%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="31.7817%" y="597" width="0.0803%" height="15" fill="rgb(249,229,21)" fg:x="396" fg:w="1"/><text x="32.0317%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="31.7817%" y="581" width="0.0803%" height="15" fill="rgb(212,158,3)" fg:x="396" fg:w="1"/><text x="32.0317%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="31.7817%" y="565" width="0.0803%" height="15" fill="rgb(253,26,48)" fg:x="396" fg:w="1"/><text x="32.0317%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="31.7817%" y="549" width="0.0803%" height="15" fill="rgb(238,178,20)" fg:x="396" fg:w="1"/><text x="32.0317%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="31.8620%" y="645" width="0.0803%" height="15" fill="rgb(208,86,15)" fg:x="397" fg:w="1"/><text x="32.1120%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="31.8620%" y="629" width="0.0803%" height="15" fill="rgb(239,42,53)" fg:x="397" fg:w="1"/><text x="32.1120%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.8620%" y="613" width="0.0803%" height="15" fill="rgb(245,226,8)" fg:x="397" fg:w="1"/><text x="32.1120%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="32.0225%" y="581" width="0.0803%" height="15" fill="rgb(216,176,32)" fg:x="399" fg:w="1"/><text x="32.2725%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="32.0225%" y="597" width="0.1605%" height="15" fill="rgb(231,186,21)" fg:x="399" fg:w="2"/><text x="32.2725%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.1027%" y="581" width="0.0803%" height="15" fill="rgb(205,95,49)" fg:x="400" fg:w="1"/><text x="32.3527%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="32.1027%" y="565" width="0.0803%" height="15" fill="rgb(217,145,8)" fg:x="400" fg:w="1"/><text x="32.3527%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="32.1027%" y="549" width="0.0803%" height="15" fill="rgb(239,144,48)" fg:x="400" fg:w="1"/><text x="32.3527%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.1830%" y="565" width="0.0803%" height="15" fill="rgb(214,189,23)" fg:x="401" fg:w="1"/><text x="32.4330%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.1830%" y="549" width="0.0803%" height="15" fill="rgb(229,157,17)" fg:x="401" fg:w="1"/><text x="32.4330%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.1830%" y="533" width="0.0803%" height="15" fill="rgb(230,5,48)" fg:x="401" fg:w="1"/><text x="32.4330%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.2632%" y="533" width="0.0803%" height="15" fill="rgb(224,156,48)" fg:x="402" fg:w="1"/><text x="32.5132%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.2632%" y="517" width="0.0803%" height="15" fill="rgb(223,14,29)" fg:x="402" fg:w="1"/><text x="32.5132%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="32.2632%" y="501" width="0.0803%" height="15" fill="rgb(229,96,36)" fg:x="402" fg:w="1"/><text x="32.5132%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="32.2632%" y="549" width="0.2408%" height="15" fill="rgb(231,102,53)" fg:x="402" fg:w="3"/><text x="32.5132%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="32.3435%" y="533" width="0.1605%" height="15" fill="rgb(210,77,38)" fg:x="403" fg:w="2"/><text x="32.5935%" y="543.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="32.4238%" y="517" width="0.0803%" height="15" fill="rgb(235,131,6)" fg:x="404" fg:w="1"/><text x="32.6738%" y="527.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="32.4238%" y="501" width="0.0803%" height="15" fill="rgb(252,55,38)" fg:x="404" fg:w="1"/><text x="32.6738%" y="511.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (8 samples, 0.64%)</title><rect x="31.9422%" y="629" width="0.6421%" height="15" fill="rgb(246,38,14)" fg:x="398" fg:w="8"/><text x="32.1922%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (7 samples, 0.56%)</title><rect x="32.0225%" y="613" width="0.5618%" height="15" fill="rgb(242,27,5)" fg:x="399" fg:w="7"/><text x="32.2725%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (5 samples, 0.40%)</title><rect x="32.1830%" y="597" width="0.4013%" height="15" fill="rgb(228,65,35)" fg:x="401" fg:w="5"/><text x="32.4330%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (5 samples, 0.40%)</title><rect x="32.1830%" y="581" width="0.4013%" height="15" fill="rgb(245,93,11)" fg:x="401" fg:w="5"/><text x="32.4330%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (4 samples, 0.32%)</title><rect x="32.2632%" y="565" width="0.3210%" height="15" fill="rgb(213,1,31)" fg:x="402" fg:w="4"/><text x="32.5132%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.5040%" y="549" width="0.0803%" height="15" fill="rgb(237,205,14)" fg:x="405" fg:w="1"/><text x="32.7540%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.5040%" y="533" width="0.0803%" height="15" fill="rgb(232,118,45)" fg:x="405" fg:w="1"/><text x="32.7540%" y="543.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="32.5843%" y="629" width="0.0803%" height="15" fill="rgb(218,5,6)" fg:x="406" fg:w="1"/><text x="32.8343%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.5843%" y="613" width="0.0803%" height="15" fill="rgb(251,87,51)" fg:x="406" fg:w="1"/><text x="32.8343%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="32.5843%" y="597" width="0.0803%" height="15" fill="rgb(207,225,20)" fg:x="406" fg:w="1"/><text x="32.8343%" y="607.50"></text></g><g><title>kernel::model::EntityPtr::new (1 samples, 0.08%)</title><rect x="32.6645%" y="629" width="0.0803%" height="15" fill="rgb(222,78,54)" fg:x="407" fg:w="1"/><text x="32.9145%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.7448%" y="597" width="0.0803%" height="15" fill="rgb(232,85,16)" fg:x="408" fg:w="1"/><text x="32.9948%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (13 samples, 1.04%)</title><rect x="31.8620%" y="661" width="1.0433%" height="15" fill="rgb(244,25,33)" fg:x="397" fg:w="13"/><text x="32.1120%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (12 samples, 0.96%)</title><rect x="31.9422%" y="645" width="0.9631%" height="15" fill="rgb(233,24,36)" fg:x="398" fg:w="12"/><text x="32.1922%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="32.7448%" y="629" width="0.1605%" height="15" fill="rgb(253,49,54)" fg:x="408" fg:w="2"/><text x="32.9948%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="32.7448%" y="613" width="0.1605%" height="15" fill="rgb(245,12,22)" fg:x="408" fg:w="2"/><text x="32.9948%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.8250%" y="597" width="0.0803%" height="15" fill="rgb(253,141,28)" fg:x="409" fg:w="1"/><text x="33.0750%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.8250%" y="581" width="0.0803%" height="15" fill="rgb(225,207,27)" fg:x="409" fg:w="1"/><text x="33.0750%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="32.8250%" y="565" width="0.0803%" height="15" fill="rgb(220,84,2)" fg:x="409" fg:w="1"/><text x="33.0750%" y="575.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (266 samples, 21.35%)</title><rect x="11.6372%" y="709" width="21.3483%" height="15" fill="rgb(224,37,37)" fg:x="145" fg:w="266"/><text x="11.8872%" y="719.50">&lt;tests::HoldingKeyInVessel as test..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (22 samples, 1.77%)</title><rect x="31.2199%" y="693" width="1.7657%" height="15" fill="rgb(220,143,18)" fg:x="389" fg:w="22"/><text x="31.4699%" y="703.50"></text></g><g><title>plugins_core::build::Build::save (16 samples, 1.28%)</title><rect x="31.7014%" y="677" width="1.2841%" height="15" fill="rgb(210,88,33)" fg:x="395" fg:w="16"/><text x="31.9514%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="32.9053%" y="661" width="0.0803%" height="15" fill="rgb(219,87,51)" fg:x="410" fg:w="1"/><text x="33.1553%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="32.9053%" y="645" width="0.0803%" height="15" fill="rgb(211,7,35)" fg:x="410" fg:w="1"/><text x="33.1553%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="32.9053%" y="629" width="0.0803%" height="15" fill="rgb(232,77,2)" fg:x="410" fg:w="1"/><text x="33.1553%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="32.9053%" y="613" width="0.0803%" height="15" fill="rgb(249,94,25)" fg:x="410" fg:w="1"/><text x="33.1553%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="32.9053%" y="597" width="0.0803%" height="15" fill="rgb(215,112,2)" fg:x="410" fg:w="1"/><text x="33.1553%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (2 samples, 0.16%)</title><rect x="32.9856%" y="709" width="0.1605%" height="15" fill="rgb(226,115,48)" fg:x="411" fg:w="2"/><text x="33.2356%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="32.9856%" y="693" width="0.1605%" height="15" fill="rgb(249,196,10)" fg:x="411" fg:w="2"/><text x="33.2356%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="32.9856%" y="677" width="0.1605%" height="15" fill="rgb(237,109,14)" fg:x="411" fg:w="2"/><text x="33.2356%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="33.0658%" y="661" width="0.0803%" height="15" fill="rgb(217,103,53)" fg:x="412" fg:w="1"/><text x="33.3158%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.0658%" y="645" width="0.0803%" height="15" fill="rgb(244,137,9)" fg:x="412" fg:w="1"/><text x="33.3158%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (3 samples, 0.24%)</title><rect x="33.1461%" y="709" width="0.2408%" height="15" fill="rgb(227,201,3)" fg:x="413" fg:w="3"/><text x="33.3961%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="33.2263%" y="693" width="0.1605%" height="15" fill="rgb(243,94,6)" fg:x="414" fg:w="2"/><text x="33.4763%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="33.2263%" y="677" width="0.1605%" height="15" fill="rgb(235,118,5)" fg:x="414" fg:w="2"/><text x="33.4763%" y="687.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="33.3066%" y="661" width="0.0803%" height="15" fill="rgb(247,10,30)" fg:x="415" fg:w="1"/><text x="33.5566%" y="671.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="33.4671%" y="693" width="0.1605%" height="15" fill="rgb(205,26,28)" fg:x="417" fg:w="2"/><text x="33.7171%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="33.5474%" y="677" width="0.0803%" height="15" fill="rgb(206,99,35)" fg:x="418" fg:w="1"/><text x="33.7974%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="33.5474%" y="661" width="0.0803%" height="15" fill="rgb(238,130,40)" fg:x="418" fg:w="1"/><text x="33.7974%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.24%)</title><rect x="33.6276%" y="693" width="0.2408%" height="15" fill="rgb(224,126,31)" fg:x="419" fg:w="3"/><text x="33.8776%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.24%)</title><rect x="33.6276%" y="677" width="0.2408%" height="15" fill="rgb(254,105,17)" fg:x="419" fg:w="3"/><text x="33.8776%" y="687.50"></text></g><g><title>core::fmt::write (3 samples, 0.24%)</title><rect x="33.6276%" y="661" width="0.2408%" height="15" fill="rgb(216,87,36)" fg:x="419" fg:w="3"/><text x="33.8776%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (3 samples, 0.24%)</title><rect x="33.6276%" y="645" width="0.2408%" height="15" fill="rgb(240,21,12)" fg:x="419" fg:w="3"/><text x="33.8776%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (3 samples, 0.24%)</title><rect x="33.6276%" y="629" width="0.2408%" height="15" fill="rgb(245,192,34)" fg:x="419" fg:w="3"/><text x="33.8776%" y="639.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (3 samples, 0.24%)</title><rect x="33.6276%" y="613" width="0.2408%" height="15" fill="rgb(226,100,49)" fg:x="419" fg:w="3"/><text x="33.8776%" y="623.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (3 samples, 0.24%)</title><rect x="33.6276%" y="597" width="0.2408%" height="15" fill="rgb(245,188,27)" fg:x="419" fg:w="3"/><text x="33.8776%" y="607.50"></text></g><g><title>core::fmt::write (3 samples, 0.24%)</title><rect x="33.6276%" y="581" width="0.2408%" height="15" fill="rgb(212,170,8)" fg:x="419" fg:w="3"/><text x="33.8776%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (3 samples, 0.24%)</title><rect x="33.6276%" y="565" width="0.2408%" height="15" fill="rgb(217,113,29)" fg:x="419" fg:w="3"/><text x="33.8776%" y="575.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="33.7881%" y="549" width="0.0803%" height="15" fill="rgb(237,30,3)" fg:x="421" fg:w="1"/><text x="34.0381%" y="559.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="33.7881%" y="533" width="0.0803%" height="15" fill="rgb(227,19,28)" fg:x="421" fg:w="1"/><text x="34.0381%" y="543.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.08%)</title><rect x="33.7881%" y="517" width="0.0803%" height="15" fill="rgb(239,172,45)" fg:x="421" fg:w="1"/><text x="34.0381%" y="527.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="33.8684%" y="693" width="0.0803%" height="15" fill="rgb(254,55,39)" fg:x="422" fg:w="1"/><text x="34.1184%" y="703.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="33.8684%" y="677" width="0.0803%" height="15" fill="rgb(249,208,12)" fg:x="422" fg:w="1"/><text x="34.1184%" y="687.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="33.8684%" y="661" width="0.0803%" height="15" fill="rgb(240,52,13)" fg:x="422" fg:w="1"/><text x="34.1184%" y="671.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="33.8684%" y="645" width="0.0803%" height="15" fill="rgb(252,149,13)" fg:x="422" fg:w="1"/><text x="34.1184%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="34.0289%" y="661" width="0.0803%" height="15" fill="rgb(232,81,48)" fg:x="424" fg:w="1"/><text x="34.2789%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="34.0289%" y="645" width="0.0803%" height="15" fill="rgb(222,144,2)" fg:x="424" fg:w="1"/><text x="34.2789%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.0289%" y="629" width="0.0803%" height="15" fill="rgb(216,81,32)" fg:x="424" fg:w="1"/><text x="34.2789%" y="639.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="34.0289%" y="613" width="0.0803%" height="15" fill="rgb(244,78,51)" fg:x="424" fg:w="1"/><text x="34.2789%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="34.2697%" y="629" width="0.0803%" height="15" fill="rgb(217,66,21)" fg:x="427" fg:w="1"/><text x="34.5197%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.2697%" y="613" width="0.0803%" height="15" fill="rgb(247,101,42)" fg:x="427" fg:w="1"/><text x="34.5197%" y="623.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="34.2697%" y="597" width="0.0803%" height="15" fill="rgb(227,81,39)" fg:x="427" fg:w="1"/><text x="34.5197%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="34.3499%" y="613" width="0.0803%" height="15" fill="rgb(220,223,44)" fg:x="428" fg:w="1"/><text x="34.5999%" y="623.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="34.3499%" y="597" width="0.0803%" height="15" fill="rgb(205,218,2)" fg:x="428" fg:w="1"/><text x="34.5999%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="34.3499%" y="581" width="0.0803%" height="15" fill="rgb(212,207,28)" fg:x="428" fg:w="1"/><text x="34.5999%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="34.3499%" y="565" width="0.0803%" height="15" fill="rgb(224,12,41)" fg:x="428" fg:w="1"/><text x="34.5999%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="34.3499%" y="549" width="0.0803%" height="15" fill="rgb(216,118,12)" fg:x="428" fg:w="1"/><text x="34.5999%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="34.3499%" y="533" width="0.0803%" height="15" fill="rgb(252,97,46)" fg:x="428" fg:w="1"/><text x="34.5999%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.3499%" y="517" width="0.0803%" height="15" fill="rgb(244,206,19)" fg:x="428" fg:w="1"/><text x="34.5999%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.3499%" y="501" width="0.0803%" height="15" fill="rgb(231,84,31)" fg:x="428" fg:w="1"/><text x="34.5999%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="34.5104%" y="581" width="0.0803%" height="15" fill="rgb(244,133,0)" fg:x="430" fg:w="1"/><text x="34.7604%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="34.5104%" y="565" width="0.0803%" height="15" fill="rgb(223,15,50)" fg:x="430" fg:w="1"/><text x="34.7604%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="34.5104%" y="549" width="0.0803%" height="15" fill="rgb(250,118,49)" fg:x="430" fg:w="1"/><text x="34.7604%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="34.5104%" y="533" width="0.0803%" height="15" fill="rgb(248,25,38)" fg:x="430" fg:w="1"/><text x="34.7604%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="34.5104%" y="517" width="0.0803%" height="15" fill="rgb(215,70,14)" fg:x="430" fg:w="1"/><text x="34.7604%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.5104%" y="501" width="0.0803%" height="15" fill="rgb(215,28,15)" fg:x="430" fg:w="1"/><text x="34.7604%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.32%)</title><rect x="34.4302%" y="597" width="0.3210%" height="15" fill="rgb(243,6,28)" fg:x="429" fg:w="4"/><text x="34.6802%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="34.5907%" y="581" width="0.1605%" height="15" fill="rgb(222,130,1)" fg:x="431" fg:w="2"/><text x="34.8407%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="34.6709%" y="565" width="0.0803%" height="15" fill="rgb(236,166,44)" fg:x="432" fg:w="1"/><text x="34.9209%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="34.6709%" y="549" width="0.0803%" height="15" fill="rgb(221,108,14)" fg:x="432" fg:w="1"/><text x="34.9209%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.40%)</title><rect x="34.8315%" y="581" width="0.4013%" height="15" fill="rgb(252,3,45)" fg:x="434" fg:w="5"/><text x="35.0815%" y="591.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.40%)</title><rect x="34.8315%" y="565" width="0.4013%" height="15" fill="rgb(237,68,30)" fg:x="434" fg:w="5"/><text x="35.0815%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.32%)</title><rect x="34.9117%" y="549" width="0.3210%" height="15" fill="rgb(211,79,22)" fg:x="435" fg:w="4"/><text x="35.1617%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.32%)</title><rect x="34.9117%" y="533" width="0.3210%" height="15" fill="rgb(252,185,21)" fg:x="435" fg:w="4"/><text x="35.1617%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="35.1525%" y="517" width="0.0803%" height="15" fill="rgb(225,189,26)" fg:x="438" fg:w="1"/><text x="35.4025%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.1525%" y="501" width="0.0803%" height="15" fill="rgb(241,30,40)" fg:x="438" fg:w="1"/><text x="35.4025%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="35.3933%" y="517" width="0.0803%" height="15" fill="rgb(235,215,44)" fg:x="441" fg:w="1"/><text x="35.6433%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="35.3933%" y="501" width="0.0803%" height="15" fill="rgb(205,8,29)" fg:x="441" fg:w="1"/><text x="35.6433%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="35.3933%" y="485" width="0.0803%" height="15" fill="rgb(241,137,42)" fg:x="441" fg:w="1"/><text x="35.6433%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="35.3933%" y="549" width="0.1605%" height="15" fill="rgb(237,155,2)" fg:x="441" fg:w="2"/><text x="35.6433%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="35.3933%" y="533" width="0.1605%" height="15" fill="rgb(245,29,42)" fg:x="441" fg:w="2"/><text x="35.6433%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="35.4735%" y="517" width="0.0803%" height="15" fill="rgb(234,101,35)" fg:x="442" fg:w="1"/><text x="35.7235%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="35.3130%" y="565" width="0.3210%" height="15" fill="rgb(228,64,37)" fg:x="440" fg:w="4"/><text x="35.5630%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="35.5538%" y="549" width="0.0803%" height="15" fill="rgb(217,214,36)" fg:x="443" fg:w="1"/><text x="35.8038%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="35.5538%" y="533" width="0.0803%" height="15" fill="rgb(243,70,3)" fg:x="443" fg:w="1"/><text x="35.8038%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (6 samples, 0.48%)</title><rect x="35.6340%" y="565" width="0.4815%" height="15" fill="rgb(253,158,52)" fg:x="444" fg:w="6"/><text x="35.8840%" y="575.50"></text></g><g><title>std::io::Write::write_all (6 samples, 0.48%)</title><rect x="35.6340%" y="549" width="0.4815%" height="15" fill="rgb(234,111,54)" fg:x="444" fg:w="6"/><text x="35.8840%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.32%)</title><rect x="35.7945%" y="533" width="0.3210%" height="15" fill="rgb(217,70,32)" fg:x="446" fg:w="4"/><text x="36.0445%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="35.8748%" y="517" width="0.2408%" height="15" fill="rgb(234,18,33)" fg:x="447" fg:w="3"/><text x="36.1248%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="36.2761%" y="501" width="0.2408%" height="15" fill="rgb(234,12,49)" fg:x="452" fg:w="3"/><text x="36.5261%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="36.3563%" y="485" width="0.1605%" height="15" fill="rgb(236,10,21)" fg:x="453" fg:w="2"/><text x="36.6063%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="36.3563%" y="469" width="0.1605%" height="15" fill="rgb(248,182,45)" fg:x="453" fg:w="2"/><text x="36.6063%" y="479.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="36.3563%" y="453" width="0.1605%" height="15" fill="rgb(217,95,36)" fg:x="453" fg:w="2"/><text x="36.6063%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (6 samples, 0.48%)</title><rect x="36.1156%" y="549" width="0.4815%" height="15" fill="rgb(212,110,31)" fg:x="450" fg:w="6"/><text x="36.3656%" y="559.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="36.2761%" y="533" width="0.3210%" height="15" fill="rgb(206,32,53)" fg:x="452" fg:w="4"/><text x="36.5261%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.32%)</title><rect x="36.2761%" y="517" width="0.3210%" height="15" fill="rgb(246,141,37)" fg:x="452" fg:w="4"/><text x="36.5261%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="36.5169%" y="501" width="0.0803%" height="15" fill="rgb(219,16,7)" fg:x="455" fg:w="1"/><text x="36.7669%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="36.5971%" y="533" width="0.0803%" height="15" fill="rgb(230,205,45)" fg:x="456" fg:w="1"/><text x="36.8471%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="36.6774%" y="533" width="0.0803%" height="15" fill="rgb(231,43,49)" fg:x="457" fg:w="1"/><text x="36.9274%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="36.6774%" y="517" width="0.0803%" height="15" fill="rgb(212,106,34)" fg:x="457" fg:w="1"/><text x="36.9274%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="36.6774%" y="501" width="0.0803%" height="15" fill="rgb(206,83,17)" fg:x="457" fg:w="1"/><text x="36.9274%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="36.6774%" y="485" width="0.0803%" height="15" fill="rgb(244,154,49)" fg:x="457" fg:w="1"/><text x="36.9274%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="36.5971%" y="549" width="0.4013%" height="15" fill="rgb(244,149,49)" fg:x="456" fg:w="5"/><text x="36.8471%" y="559.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="36.7576%" y="533" width="0.2408%" height="15" fill="rgb(227,134,18)" fg:x="458" fg:w="3"/><text x="37.0076%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="36.8379%" y="517" width="0.1605%" height="15" fill="rgb(237,116,36)" fg:x="459" fg:w="2"/><text x="37.0879%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="36.8379%" y="501" width="0.1605%" height="15" fill="rgb(205,129,40)" fg:x="459" fg:w="2"/><text x="37.0879%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.96%)</title><rect x="36.1156%" y="565" width="0.9631%" height="15" fill="rgb(236,178,4)" fg:x="450" fg:w="12"/><text x="36.3656%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="36.9984%" y="549" width="0.0803%" height="15" fill="rgb(251,76,53)" fg:x="461" fg:w="1"/><text x="37.2484%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="36.9984%" y="533" width="0.0803%" height="15" fill="rgb(242,92,40)" fg:x="461" fg:w="1"/><text x="37.2484%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="36.9984%" y="517" width="0.0803%" height="15" fill="rgb(209,45,30)" fg:x="461" fg:w="1"/><text x="37.2484%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (25 samples, 2.01%)</title><rect x="35.2327%" y="581" width="2.0064%" height="15" fill="rgb(218,157,36)" fg:x="439" fg:w="25"/><text x="35.4827%" y="591.50">s..</text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="37.0787%" y="565" width="0.1605%" height="15" fill="rgb(222,186,16)" fg:x="462" fg:w="2"/><text x="37.3287%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="37.1589%" y="549" width="0.0803%" height="15" fill="rgb(254,72,35)" fg:x="463" fg:w="1"/><text x="37.4089%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (32 samples, 2.57%)</title><rect x="34.7512%" y="597" width="2.5682%" height="15" fill="rgb(224,25,35)" fg:x="433" fg:w="32"/><text x="35.0012%" y="607.50">se..</text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="37.2392%" y="581" width="0.0803%" height="15" fill="rgb(206,135,52)" fg:x="464" fg:w="1"/><text x="37.4892%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="37.2392%" y="565" width="0.0803%" height="15" fill="rgb(229,174,47)" fg:x="464" fg:w="1"/><text x="37.4892%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="37.2392%" y="549" width="0.0803%" height="15" fill="rgb(242,184,21)" fg:x="464" fg:w="1"/><text x="37.4892%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="37.2392%" y="533" width="0.0803%" height="15" fill="rgb(213,22,45)" fg:x="464" fg:w="1"/><text x="37.4892%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.2392%" y="517" width="0.0803%" height="15" fill="rgb(237,81,54)" fg:x="464" fg:w="1"/><text x="37.4892%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="37.2392%" y="501" width="0.0803%" height="15" fill="rgb(248,177,18)" fg:x="464" fg:w="1"/><text x="37.4892%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (37 samples, 2.97%)</title><rect x="34.4302%" y="613" width="2.9695%" height="15" fill="rgb(254,31,16)" fg:x="429" fg:w="37"/><text x="34.6802%" y="623.50">&lt;se..</text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="37.3194%" y="597" width="0.0803%" height="15" fill="rgb(235,20,31)" fg:x="465" fg:w="1"/><text x="37.5694%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="37.3194%" y="581" width="0.0803%" height="15" fill="rgb(240,56,43)" fg:x="465" fg:w="1"/><text x="37.5694%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="37.3997%" y="581" width="0.1605%" height="15" fill="rgb(237,197,51)" fg:x="466" fg:w="2"/><text x="37.6497%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.4799%" y="565" width="0.0803%" height="15" fill="rgb(241,162,44)" fg:x="467" fg:w="1"/><text x="37.7299%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.5602%" y="565" width="0.0803%" height="15" fill="rgb(224,23,20)" fg:x="468" fg:w="1"/><text x="37.8102%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="37.6404%" y="565" width="0.0803%" height="15" fill="rgb(250,109,34)" fg:x="469" fg:w="1"/><text x="37.8904%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="37.8010%" y="501" width="0.0803%" height="15" fill="rgb(214,175,50)" fg:x="471" fg:w="1"/><text x="38.0510%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="37.8010%" y="533" width="0.1605%" height="15" fill="rgb(213,182,5)" fg:x="471" fg:w="2"/><text x="38.0510%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="37.8010%" y="517" width="0.1605%" height="15" fill="rgb(209,199,19)" fg:x="471" fg:w="2"/><text x="38.0510%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="37.8812%" y="501" width="0.0803%" height="15" fill="rgb(236,224,42)" fg:x="472" fg:w="1"/><text x="38.1312%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="37.8812%" y="485" width="0.0803%" height="15" fill="rgb(246,226,29)" fg:x="472" fg:w="1"/><text x="38.1312%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.8812%" y="469" width="0.0803%" height="15" fill="rgb(227,223,11)" fg:x="472" fg:w="1"/><text x="38.1312%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.72%)</title><rect x="37.3997%" y="613" width="0.7223%" height="15" fill="rgb(219,7,51)" fg:x="466" fg:w="9"/><text x="37.6497%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (9 samples, 0.72%)</title><rect x="37.3997%" y="597" width="0.7223%" height="15" fill="rgb(245,167,10)" fg:x="466" fg:w="9"/><text x="37.6497%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="37.5602%" y="581" width="0.5618%" height="15" fill="rgb(237,224,16)" fg:x="468" fg:w="7"/><text x="37.8102%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="37.7207%" y="565" width="0.4013%" height="15" fill="rgb(226,132,13)" fg:x="470" fg:w="5"/><text x="37.9707%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="37.7207%" y="549" width="0.4013%" height="15" fill="rgb(214,140,3)" fg:x="470" fg:w="5"/><text x="37.9707%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="37.9615%" y="533" width="0.1605%" height="15" fill="rgb(221,177,4)" fg:x="473" fg:w="2"/><text x="38.2115%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.0417%" y="517" width="0.0803%" height="15" fill="rgb(238,139,3)" fg:x="474" fg:w="1"/><text x="38.2917%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.2022%" y="549" width="0.0803%" height="15" fill="rgb(216,17,39)" fg:x="476" fg:w="1"/><text x="38.4522%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="38.2825%" y="517" width="0.0803%" height="15" fill="rgb(238,120,9)" fg:x="477" fg:w="1"/><text x="38.5325%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="38.2825%" y="501" width="0.0803%" height="15" fill="rgb(244,92,53)" fg:x="477" fg:w="1"/><text x="38.5325%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="38.2825%" y="485" width="0.0803%" height="15" fill="rgb(224,148,33)" fg:x="477" fg:w="1"/><text x="38.5325%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="38.2825%" y="469" width="0.0803%" height="15" fill="rgb(243,6,36)" fg:x="477" fg:w="1"/><text x="38.5325%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.2825%" y="453" width="0.0803%" height="15" fill="rgb(230,102,11)" fg:x="477" fg:w="1"/><text x="38.5325%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="38.2022%" y="581" width="0.2408%" height="15" fill="rgb(234,148,36)" fg:x="476" fg:w="3"/><text x="38.4522%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="38.2022%" y="565" width="0.2408%" height="15" fill="rgb(251,153,25)" fg:x="476" fg:w="3"/><text x="38.4522%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="38.2825%" y="549" width="0.1605%" height="15" fill="rgb(215,129,8)" fg:x="477" fg:w="2"/><text x="38.5325%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="38.2825%" y="533" width="0.1605%" height="15" fill="rgb(224,128,35)" fg:x="477" fg:w="2"/><text x="38.5325%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="38.3628%" y="517" width="0.0803%" height="15" fill="rgb(237,56,52)" fg:x="478" fg:w="1"/><text x="38.6128%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.3628%" y="501" width="0.0803%" height="15" fill="rgb(234,213,19)" fg:x="478" fg:w="1"/><text x="38.6128%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="38.4430%" y="581" width="0.0803%" height="15" fill="rgb(252,82,23)" fg:x="479" fg:w="1"/><text x="38.6930%" y="591.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="38.5233%" y="581" width="0.1605%" height="15" fill="rgb(254,201,21)" fg:x="480" fg:w="2"/><text x="38.7733%" y="591.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (2 samples, 0.16%)</title><rect x="38.6838%" y="581" width="0.1605%" height="15" fill="rgb(250,186,11)" fg:x="482" fg:w="2"/><text x="38.9338%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="38.6838%" y="565" width="0.1605%" height="15" fill="rgb(211,174,5)" fg:x="482" fg:w="2"/><text x="38.9338%" y="575.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="38.6838%" y="549" width="0.1605%" height="15" fill="rgb(214,121,10)" fg:x="482" fg:w="2"/><text x="38.9338%" y="559.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (10 samples, 0.80%)</title><rect x="38.1220%" y="597" width="0.8026%" height="15" fill="rgb(241,66,2)" fg:x="475" fg:w="10"/><text x="38.3720%" y="607.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="38.8443%" y="581" width="0.0803%" height="15" fill="rgb(220,167,19)" fg:x="484" fg:w="1"/><text x="39.0943%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="38.8443%" y="565" width="0.0803%" height="15" fill="rgb(231,54,50)" fg:x="484" fg:w="1"/><text x="39.0943%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="38.8443%" y="549" width="0.0803%" height="15" fill="rgb(239,217,53)" fg:x="484" fg:w="1"/><text x="39.0943%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="38.8443%" y="533" width="0.0803%" height="15" fill="rgb(248,8,0)" fg:x="484" fg:w="1"/><text x="39.0943%" y="543.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="38.8443%" y="517" width="0.0803%" height="15" fill="rgb(229,118,37)" fg:x="484" fg:w="1"/><text x="39.0943%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="38.8443%" y="501" width="0.0803%" height="15" fill="rgb(253,223,43)" fg:x="484" fg:w="1"/><text x="39.0943%" y="511.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="39.1653%" y="565" width="0.1605%" height="15" fill="rgb(211,77,36)" fg:x="488" fg:w="2"/><text x="39.4153%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="39.3258%" y="565" width="0.0803%" height="15" fill="rgb(219,3,53)" fg:x="490" fg:w="1"/><text x="39.5758%" y="575.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="39.4061%" y="565" width="0.0803%" height="15" fill="rgb(244,45,42)" fg:x="491" fg:w="1"/><text x="39.6561%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="39.4061%" y="549" width="0.0803%" height="15" fill="rgb(225,95,27)" fg:x="491" fg:w="1"/><text x="39.6561%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.4061%" y="533" width="0.0803%" height="15" fill="rgb(207,74,8)" fg:x="491" fg:w="1"/><text x="39.6561%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="39.4864%" y="565" width="0.1605%" height="15" fill="rgb(243,63,36)" fg:x="492" fg:w="2"/><text x="39.7364%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="39.5666%" y="549" width="0.0803%" height="15" fill="rgb(211,180,12)" fg:x="493" fg:w="1"/><text x="39.8166%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="39.5666%" y="533" width="0.0803%" height="15" fill="rgb(254,166,49)" fg:x="493" fg:w="1"/><text x="39.8166%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="39.9679%" y="517" width="0.1605%" height="15" fill="rgb(205,19,0)" fg:x="498" fg:w="2"/><text x="40.2179%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.0482%" y="501" width="0.0803%" height="15" fill="rgb(224,172,32)" fg:x="499" fg:w="1"/><text x="40.2982%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="40.1284%" y="469" width="0.0803%" height="15" fill="rgb(254,136,30)" fg:x="500" fg:w="1"/><text x="40.3784%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="40.1284%" y="517" width="0.3210%" height="15" fill="rgb(246,19,35)" fg:x="500" fg:w="4"/><text x="40.3784%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="40.1284%" y="501" width="0.3210%" height="15" fill="rgb(219,24,36)" fg:x="500" fg:w="4"/><text x="40.3784%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="40.1284%" y="485" width="0.3210%" height="15" fill="rgb(251,55,1)" fg:x="500" fg:w="4"/><text x="40.3784%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="40.2087%" y="469" width="0.2408%" height="15" fill="rgb(218,117,39)" fg:x="501" fg:w="3"/><text x="40.4587%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="40.2889%" y="453" width="0.1605%" height="15" fill="rgb(248,169,11)" fg:x="502" fg:w="2"/><text x="40.5389%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="40.2889%" y="437" width="0.1605%" height="15" fill="rgb(244,40,44)" fg:x="502" fg:w="2"/><text x="40.5389%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="40.2889%" y="421" width="0.1605%" height="15" fill="rgb(234,62,37)" fg:x="502" fg:w="2"/><text x="40.5389%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="40.3692%" y="405" width="0.0803%" height="15" fill="rgb(207,117,42)" fg:x="503" fg:w="1"/><text x="40.6192%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (2 samples, 0.16%)</title><rect x="40.4494%" y="501" width="0.1605%" height="15" fill="rgb(213,43,2)" fg:x="504" fg:w="2"/><text x="40.6994%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="40.6902%" y="485" width="0.1605%" height="15" fill="rgb(244,202,51)" fg:x="507" fg:w="2"/><text x="40.9402%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (16 samples, 1.28%)</title><rect x="39.8876%" y="533" width="1.2841%" height="15" fill="rgb(253,174,46)" fg:x="497" fg:w="16"/><text x="40.1376%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (9 samples, 0.72%)</title><rect x="40.4494%" y="517" width="0.7223%" height="15" fill="rgb(251,23,1)" fg:x="504" fg:w="9"/><text x="40.6994%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.56%)</title><rect x="40.6100%" y="501" width="0.5618%" height="15" fill="rgb(253,26,1)" fg:x="506" fg:w="7"/><text x="40.8600%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="40.8507%" y="485" width="0.3210%" height="15" fill="rgb(216,89,31)" fg:x="509" fg:w="4"/><text x="41.1007%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="40.9310%" y="469" width="0.2408%" height="15" fill="rgb(209,109,5)" fg:x="510" fg:w="3"/><text x="41.1810%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (19 samples, 1.52%)</title><rect x="39.7271%" y="549" width="1.5249%" height="15" fill="rgb(229,63,13)" fg:x="495" fg:w="19"/><text x="39.9771%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="41.1717%" y="533" width="0.0803%" height="15" fill="rgb(238,137,54)" fg:x="513" fg:w="1"/><text x="41.4217%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.1717%" y="517" width="0.0803%" height="15" fill="rgb(228,1,9)" fg:x="513" fg:w="1"/><text x="41.4217%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.2520%" y="549" width="0.0803%" height="15" fill="rgb(249,120,48)" fg:x="514" fg:w="1"/><text x="41.5020%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (31 samples, 2.49%)</title><rect x="38.9246%" y="597" width="2.4880%" height="15" fill="rgb(209,72,36)" fg:x="485" fg:w="31"/><text x="39.1746%" y="607.50">ke..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (31 samples, 2.49%)</title><rect x="38.9246%" y="581" width="2.4880%" height="15" fill="rgb(247,98,49)" fg:x="485" fg:w="31"/><text x="39.1746%" y="591.50">&lt;s..</text></g><g><title>serde::ser::Serializer::collect_map (22 samples, 1.77%)</title><rect x="39.6469%" y="565" width="1.7657%" height="15" fill="rgb(233,75,36)" fg:x="494" fg:w="22"/><text x="39.8969%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="41.3323%" y="549" width="0.0803%" height="15" fill="rgb(225,14,24)" fg:x="515" fg:w="1"/><text x="41.5823%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="41.7335%" y="389" width="0.0803%" height="15" fill="rgb(237,193,20)" fg:x="520" fg:w="1"/><text x="41.9835%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="41.7335%" y="373" width="0.0803%" height="15" fill="rgb(239,122,19)" fg:x="520" fg:w="1"/><text x="41.9835%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="41.7335%" y="357" width="0.0803%" height="15" fill="rgb(231,220,10)" fg:x="520" fg:w="1"/><text x="41.9835%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.7335%" y="341" width="0.0803%" height="15" fill="rgb(220,66,15)" fg:x="520" fg:w="1"/><text x="41.9835%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="41.7335%" y="421" width="0.1605%" height="15" fill="rgb(215,171,52)" fg:x="520" fg:w="2"/><text x="41.9835%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="41.7335%" y="405" width="0.1605%" height="15" fill="rgb(241,169,50)" fg:x="520" fg:w="2"/><text x="41.9835%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="41.8138%" y="389" width="0.0803%" height="15" fill="rgb(236,189,0)" fg:x="521" fg:w="1"/><text x="42.0638%" y="399.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="41.8941%" y="405" width="0.0803%" height="15" fill="rgb(217,147,20)" fg:x="522" fg:w="1"/><text x="42.1441%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.24%)</title><rect x="41.8941%" y="421" width="0.2408%" height="15" fill="rgb(206,188,39)" fg:x="522" fg:w="3"/><text x="42.1441%" y="431.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="41.9743%" y="405" width="0.1605%" height="15" fill="rgb(227,118,25)" fg:x="523" fg:w="2"/><text x="42.2243%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="41.7335%" y="453" width="0.4815%" height="15" fill="rgb(248,171,40)" fg:x="520" fg:w="6"/><text x="41.9835%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="41.7335%" y="437" width="0.4815%" height="15" fill="rgb(251,90,54)" fg:x="520" fg:w="6"/><text x="41.9835%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="42.1348%" y="421" width="0.0803%" height="15" fill="rgb(234,11,46)" fg:x="525" fg:w="1"/><text x="42.3848%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="42.1348%" y="405" width="0.0803%" height="15" fill="rgb(229,134,13)" fg:x="525" fg:w="1"/><text x="42.3848%" y="415.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="42.1348%" y="389" width="0.0803%" height="15" fill="rgb(223,129,3)" fg:x="525" fg:w="1"/><text x="42.3848%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="42.2953%" y="405" width="0.0803%" height="15" fill="rgb(221,124,13)" fg:x="527" fg:w="1"/><text x="42.5453%" y="415.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="42.2953%" y="389" width="0.0803%" height="15" fill="rgb(234,3,18)" fg:x="527" fg:w="1"/><text x="42.5453%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="42.2151%" y="437" width="0.2408%" height="15" fill="rgb(249,199,20)" fg:x="526" fg:w="3"/><text x="42.4651%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="42.2151%" y="421" width="0.2408%" height="15" fill="rgb(224,134,6)" fg:x="526" fg:w="3"/><text x="42.4651%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="42.3756%" y="405" width="0.0803%" height="15" fill="rgb(254,83,26)" fg:x="528" fg:w="1"/><text x="42.6256%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="42.3756%" y="389" width="0.0803%" height="15" fill="rgb(217,88,9)" fg:x="528" fg:w="1"/><text x="42.6256%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.80%)</title><rect x="41.7335%" y="469" width="0.8026%" height="15" fill="rgb(225,73,2)" fg:x="520" fg:w="10"/><text x="41.9835%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="42.2151%" y="453" width="0.3210%" height="15" fill="rgb(226,44,39)" fg:x="526" fg:w="4"/><text x="42.4651%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="42.4559%" y="437" width="0.0803%" height="15" fill="rgb(228,53,17)" fg:x="529" fg:w="1"/><text x="42.7059%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (15 samples, 1.20%)</title><rect x="41.4125%" y="485" width="1.2039%" height="15" fill="rgb(212,27,27)" fg:x="516" fg:w="15"/><text x="41.6625%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="42.5361%" y="469" width="0.0803%" height="15" fill="rgb(241,50,6)" fg:x="530" fg:w="1"/><text x="42.7861%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.5361%" y="453" width="0.0803%" height="15" fill="rgb(225,28,51)" fg:x="530" fg:w="1"/><text x="42.7861%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (16 samples, 1.28%)</title><rect x="41.4125%" y="501" width="1.2841%" height="15" fill="rgb(215,33,16)" fg:x="516" fg:w="16"/><text x="41.6625%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.6164%" y="485" width="0.0803%" height="15" fill="rgb(243,40,39)" fg:x="531" fg:w="1"/><text x="42.8664%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.24%)</title><rect x="42.6966%" y="501" width="0.2408%" height="15" fill="rgb(225,11,42)" fg:x="532" fg:w="3"/><text x="42.9466%" y="511.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="42.7769%" y="485" width="0.1605%" height="15" fill="rgb(241,220,38)" fg:x="533" fg:w="2"/><text x="43.0269%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (22 samples, 1.77%)</title><rect x="41.4125%" y="533" width="1.7657%" height="15" fill="rgb(244,52,35)" fg:x="516" fg:w="22"/><text x="41.6625%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (22 samples, 1.77%)</title><rect x="41.4125%" y="517" width="1.7657%" height="15" fill="rgb(246,42,46)" fg:x="516" fg:w="22"/><text x="41.6625%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="42.9374%" y="501" width="0.2408%" height="15" fill="rgb(205,184,13)" fg:x="535" fg:w="3"/><text x="43.1874%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="43.0177%" y="485" width="0.1605%" height="15" fill="rgb(209,48,36)" fg:x="536" fg:w="2"/><text x="43.2677%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.0979%" y="469" width="0.0803%" height="15" fill="rgb(244,34,51)" fg:x="537" fg:w="1"/><text x="43.3479%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="43.1782%" y="533" width="0.1605%" height="15" fill="rgb(221,107,33)" fg:x="538" fg:w="2"/><text x="43.4282%" y="543.50"></text></g><g><title>engine::session::state::State::flush_entities (120 samples, 9.63%)</title><rect x="33.9486%" y="677" width="9.6308%" height="15" fill="rgb(224,203,12)" fg:x="423" fg:w="120"/><text x="34.1986%" y="687.50">engine::sessio..</text></g><g><title>core::iter::adapters::try_process (118 samples, 9.47%)</title><rect x="34.1091%" y="661" width="9.4703%" height="15" fill="rgb(230,215,18)" fg:x="425" fg:w="118"/><text x="34.3591%" y="671.50">core::iter::ad..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (118 samples, 9.47%)</title><rect x="34.1091%" y="645" width="9.4703%" height="15" fill="rgb(206,185,35)" fg:x="425" fg:w="118"/><text x="34.3591%" y="655.50">&lt;alloc::vec::V..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (115 samples, 9.23%)</title><rect x="34.3499%" y="629" width="9.2295%" height="15" fill="rgb(228,140,34)" fg:x="428" fg:w="115"/><text x="34.5999%" y="639.50">engine::sessi..</text></g><g><title>kernel::model::any_entity_changes (68 samples, 5.46%)</title><rect x="38.1220%" y="613" width="5.4575%" height="15" fill="rgb(208,93,13)" fg:x="475" fg:w="68"/><text x="38.3720%" y="623.50">kernel:..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (27 samples, 2.17%)</title><rect x="41.4125%" y="597" width="2.1669%" height="15" fill="rgb(221,193,39)" fg:x="516" fg:w="27"/><text x="41.6625%" y="607.50">s..</text></g><g><title>serde_json::de::from_trait (27 samples, 2.17%)</title><rect x="41.4125%" y="581" width="2.1669%" height="15" fill="rgb(241,132,34)" fg:x="516" fg:w="27"/><text x="41.6625%" y="591.50">s..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (27 samples, 2.17%)</title><rect x="41.4125%" y="565" width="2.1669%" height="15" fill="rgb(221,141,10)" fg:x="516" fg:w="27"/><text x="41.6625%" y="575.50">&lt;..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (27 samples, 2.17%)</title><rect x="41.4125%" y="549" width="2.1669%" height="15" fill="rgb(226,90,31)" fg:x="516" fg:w="27"/><text x="41.6625%" y="559.50">&lt;..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="43.3387%" y="533" width="0.2408%" height="15" fill="rgb(243,75,5)" fg:x="540" fg:w="3"/><text x="43.5887%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="43.4189%" y="517" width="0.1605%" height="15" fill="rgb(227,156,21)" fg:x="541" fg:w="2"/><text x="43.6689%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="43.4189%" y="501" width="0.1605%" height="15" fill="rgb(250,195,8)" fg:x="541" fg:w="2"/><text x="43.6689%" y="511.50"></text></g><g><title>engine::session::Session::close (128 samples, 10.27%)</title><rect x="33.3868%" y="709" width="10.2729%" height="15" fill="rgb(220,134,5)" fg:x="416" fg:w="128"/><text x="33.6368%" y="719.50">engine::session..</text></g><g><title>engine::session::state::State::close (121 samples, 9.71%)</title><rect x="33.9486%" y="693" width="9.7111%" height="15" fill="rgb(246,106,34)" fg:x="423" fg:w="121"/><text x="34.1986%" y="703.50">engine::sessio..</text></g><g><title>engine::session::state::State::flush_futures (1 samples, 0.08%)</title><rect x="43.5795%" y="677" width="0.0803%" height="15" fill="rgb(205,1,4)" fg:x="543" fg:w="1"/><text x="43.8295%" y="687.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="43.7400%" y="677" width="0.1605%" height="15" fill="rgb(224,151,29)" fg:x="545" fg:w="2"/><text x="43.9900%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="43.7400%" y="661" width="0.1605%" height="15" fill="rgb(251,196,0)" fg:x="545" fg:w="2"/><text x="43.9900%" y="671.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="43.7400%" y="645" width="0.1605%" height="15" fill="rgb(212,127,0)" fg:x="545" fg:w="2"/><text x="43.9900%" y="655.50"></text></g><g><title>&lt;plugins_rune::parser::EditActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="43.8202%" y="629" width="0.0803%" height="15" fill="rgb(236,71,53)" fg:x="546" fg:w="1"/><text x="44.0702%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="43.9005%" y="661" width="0.0803%" height="15" fill="rgb(227,99,0)" fg:x="547" fg:w="1"/><text x="44.1505%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.9807%" y="645" width="0.0803%" height="15" fill="rgb(239,89,21)" fg:x="548" fg:w="1"/><text x="44.2307%" y="655.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="44.0610%" y="645" width="0.0803%" height="15" fill="rgb(243,122,19)" fg:x="549" fg:w="1"/><text x="44.3110%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::logs::SessionSubscriber&gt; (1 samples, 0.08%)</title><rect x="44.0610%" y="629" width="0.0803%" height="15" fill="rgb(229,192,45)" fg:x="549" fg:w="1"/><text x="44.3110%" y="639.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (3 samples, 0.24%)</title><rect x="44.1413%" y="645" width="0.2408%" height="15" fill="rgb(235,165,35)" fg:x="550" fg:w="3"/><text x="44.3913%" y="655.50"></text></g><g><title>tracing_core::callsite::register_dispatch (3 samples, 0.24%)</title><rect x="44.1413%" y="629" width="0.2408%" height="15" fill="rgb(253,202,0)" fg:x="550" fg:w="3"/><text x="44.3913%" y="639.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (3 samples, 0.24%)</title><rect x="44.1413%" y="613" width="0.2408%" height="15" fill="rgb(235,51,20)" fg:x="550" fg:w="3"/><text x="44.3913%" y="623.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (2 samples, 0.16%)</title><rect x="44.2215%" y="597" width="0.1605%" height="15" fill="rgb(218,95,46)" fg:x="551" fg:w="2"/><text x="44.4715%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="44.4623%" y="533" width="0.1605%" height="15" fill="rgb(212,81,10)" fg:x="554" fg:w="2"/><text x="44.7123%" y="543.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="44.6228%" y="485" width="0.0803%" height="15" fill="rgb(240,59,0)" fg:x="556" fg:w="1"/><text x="44.8728%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="44.7030%" y="421" width="0.0803%" height="15" fill="rgb(212,191,42)" fg:x="557" fg:w="1"/><text x="44.9530%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="44.7030%" y="405" width="0.0803%" height="15" fill="rgb(233,140,3)" fg:x="557" fg:w="1"/><text x="44.9530%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="44.7030%" y="389" width="0.0803%" height="15" fill="rgb(215,69,23)" fg:x="557" fg:w="1"/><text x="44.9530%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="44.7030%" y="373" width="0.0803%" height="15" fill="rgb(240,202,20)" fg:x="557" fg:w="1"/><text x="44.9530%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="44.7030%" y="357" width="0.0803%" height="15" fill="rgb(209,146,50)" fg:x="557" fg:w="1"/><text x="44.9530%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="44.7030%" y="341" width="0.0803%" height="15" fill="rgb(253,102,54)" fg:x="557" fg:w="1"/><text x="44.9530%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="44.7030%" y="325" width="0.0803%" height="15" fill="rgb(250,173,47)" fg:x="557" fg:w="1"/><text x="44.9530%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="44.7030%" y="309" width="0.0803%" height="15" fill="rgb(232,142,7)" fg:x="557" fg:w="1"/><text x="44.9530%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="44.7030%" y="293" width="0.0803%" height="15" fill="rgb(230,157,47)" fg:x="557" fg:w="1"/><text x="44.9530%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="44.7030%" y="277" width="0.0803%" height="15" fill="rgb(214,177,35)" fg:x="557" fg:w="1"/><text x="44.9530%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="44.7030%" y="261" width="0.0803%" height="15" fill="rgb(234,119,46)" fg:x="557" fg:w="1"/><text x="44.9530%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="44.7030%" y="245" width="0.0803%" height="15" fill="rgb(241,180,50)" fg:x="557" fg:w="1"/><text x="44.9530%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="44.7030%" y="229" width="0.0803%" height="15" fill="rgb(221,54,25)" fg:x="557" fg:w="1"/><text x="44.9530%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="44.7030%" y="213" width="0.0803%" height="15" fill="rgb(209,157,44)" fg:x="557" fg:w="1"/><text x="44.9530%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="44.7030%" y="197" width="0.0803%" height="15" fill="rgb(246,115,41)" fg:x="557" fg:w="1"/><text x="44.9530%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="44.7030%" y="469" width="0.1605%" height="15" fill="rgb(229,86,1)" fg:x="557" fg:w="2"/><text x="44.9530%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="44.7030%" y="453" width="0.1605%" height="15" fill="rgb(240,108,53)" fg:x="557" fg:w="2"/><text x="44.9530%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="44.7030%" y="437" width="0.1605%" height="15" fill="rgb(227,134,2)" fg:x="557" fg:w="2"/><text x="44.9530%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="44.7833%" y="421" width="0.0803%" height="15" fill="rgb(213,129,25)" fg:x="558" fg:w="1"/><text x="45.0333%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="44.7833%" y="405" width="0.0803%" height="15" fill="rgb(226,35,21)" fg:x="558" fg:w="1"/><text x="45.0333%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="44.8636%" y="453" width="0.0803%" height="15" fill="rgb(208,129,26)" fg:x="559" fg:w="1"/><text x="45.1136%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="44.8636%" y="437" width="0.0803%" height="15" fill="rgb(224,83,6)" fg:x="559" fg:w="1"/><text x="45.1136%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="44.8636%" y="421" width="0.0803%" height="15" fill="rgb(227,52,39)" fg:x="559" fg:w="1"/><text x="45.1136%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="44.8636%" y="405" width="0.0803%" height="15" fill="rgb(241,30,17)" fg:x="559" fg:w="1"/><text x="45.1136%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="44.8636%" y="389" width="0.0803%" height="15" fill="rgb(246,186,42)" fg:x="559" fg:w="1"/><text x="45.1136%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="44.8636%" y="373" width="0.0803%" height="15" fill="rgb(221,169,15)" fg:x="559" fg:w="1"/><text x="45.1136%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="44.8636%" y="357" width="0.0803%" height="15" fill="rgb(235,108,21)" fg:x="559" fg:w="1"/><text x="45.1136%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="44.8636%" y="341" width="0.0803%" height="15" fill="rgb(219,148,30)" fg:x="559" fg:w="1"/><text x="45.1136%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="44.8636%" y="325" width="0.0803%" height="15" fill="rgb(220,109,5)" fg:x="559" fg:w="1"/><text x="45.1136%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="44.8636%" y="309" width="0.0803%" height="15" fill="rgb(213,203,48)" fg:x="559" fg:w="1"/><text x="45.1136%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="44.8636%" y="293" width="0.0803%" height="15" fill="rgb(244,71,33)" fg:x="559" fg:w="1"/><text x="45.1136%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="44.8636%" y="277" width="0.0803%" height="15" fill="rgb(209,23,2)" fg:x="559" fg:w="1"/><text x="45.1136%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="44.8636%" y="261" width="0.0803%" height="15" fill="rgb(219,97,7)" fg:x="559" fg:w="1"/><text x="45.1136%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="44.8636%" y="245" width="0.0803%" height="15" fill="rgb(216,161,23)" fg:x="559" fg:w="1"/><text x="45.1136%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.8636%" y="229" width="0.0803%" height="15" fill="rgb(207,45,42)" fg:x="559" fg:w="1"/><text x="45.1136%" y="239.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="44.8636%" y="469" width="0.1605%" height="15" fill="rgb(241,61,4)" fg:x="559" fg:w="2"/><text x="45.1136%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="44.9438%" y="453" width="0.0803%" height="15" fill="rgb(236,170,1)" fg:x="560" fg:w="1"/><text x="45.1938%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="45.0241%" y="325" width="0.1605%" height="15" fill="rgb(239,72,5)" fg:x="561" fg:w="2"/><text x="45.2741%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="45.1043%" y="309" width="0.0803%" height="15" fill="rgb(214,13,50)" fg:x="562" fg:w="1"/><text x="45.3543%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="45.1043%" y="293" width="0.0803%" height="15" fill="rgb(224,88,9)" fg:x="562" fg:w="1"/><text x="45.3543%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="45.1043%" y="277" width="0.0803%" height="15" fill="rgb(238,192,34)" fg:x="562" fg:w="1"/><text x="45.3543%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="45.1043%" y="261" width="0.0803%" height="15" fill="rgb(217,203,50)" fg:x="562" fg:w="1"/><text x="45.3543%" y="271.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="45.1043%" y="245" width="0.0803%" height="15" fill="rgb(241,123,32)" fg:x="562" fg:w="1"/><text x="45.3543%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="45.1043%" y="229" width="0.0803%" height="15" fill="rgb(248,151,39)" fg:x="562" fg:w="1"/><text x="45.3543%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="45.1043%" y="213" width="0.0803%" height="15" fill="rgb(208,89,6)" fg:x="562" fg:w="1"/><text x="45.3543%" y="223.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="45.1043%" y="197" width="0.0803%" height="15" fill="rgb(254,43,26)" fg:x="562" fg:w="1"/><text x="45.3543%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="45.0241%" y="373" width="0.2408%" height="15" fill="rgb(216,158,13)" fg:x="561" fg:w="3"/><text x="45.2741%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="45.0241%" y="357" width="0.2408%" height="15" fill="rgb(212,47,37)" fg:x="561" fg:w="3"/><text x="45.2741%" y="367.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (3 samples, 0.24%)</title><rect x="45.0241%" y="341" width="0.2408%" height="15" fill="rgb(254,16,10)" fg:x="561" fg:w="3"/><text x="45.2741%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="45.1846%" y="325" width="0.0803%" height="15" fill="rgb(223,228,16)" fg:x="563" fg:w="1"/><text x="45.4346%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="45.1846%" y="309" width="0.0803%" height="15" fill="rgb(249,108,50)" fg:x="563" fg:w="1"/><text x="45.4346%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.2648%" y="341" width="0.0803%" height="15" fill="rgb(208,220,5)" fg:x="564" fg:w="1"/><text x="45.5148%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="45.2648%" y="373" width="0.1605%" height="15" fill="rgb(217,89,48)" fg:x="564" fg:w="2"/><text x="45.5148%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="45.2648%" y="357" width="0.1605%" height="15" fill="rgb(212,113,41)" fg:x="564" fg:w="2"/><text x="45.5148%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="45.3451%" y="341" width="0.0803%" height="15" fill="rgb(231,127,5)" fg:x="565" fg:w="1"/><text x="45.5951%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="45.3451%" y="325" width="0.0803%" height="15" fill="rgb(217,141,17)" fg:x="565" fg:w="1"/><text x="45.5951%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="45.3451%" y="309" width="0.0803%" height="15" fill="rgb(245,125,54)" fg:x="565" fg:w="1"/><text x="45.5951%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="45.4254%" y="341" width="0.0803%" height="15" fill="rgb(248,125,3)" fg:x="566" fg:w="1"/><text x="45.6754%" y="351.50"></text></g><g><title>kernel::model::entity::Entity::from_value (7 samples, 0.56%)</title><rect x="45.0241%" y="469" width="0.5618%" height="15" fill="rgb(236,119,51)" fg:x="561" fg:w="7"/><text x="45.2741%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (7 samples, 0.56%)</title><rect x="45.0241%" y="453" width="0.5618%" height="15" fill="rgb(239,99,8)" fg:x="561" fg:w="7"/><text x="45.2741%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.56%)</title><rect x="45.0241%" y="437" width="0.5618%" height="15" fill="rgb(224,228,4)" fg:x="561" fg:w="7"/><text x="45.2741%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (7 samples, 0.56%)</title><rect x="45.0241%" y="421" width="0.5618%" height="15" fill="rgb(220,131,45)" fg:x="561" fg:w="7"/><text x="45.2741%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.56%)</title><rect x="45.0241%" y="405" width="0.5618%" height="15" fill="rgb(215,62,5)" fg:x="561" fg:w="7"/><text x="45.2741%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (7 samples, 0.56%)</title><rect x="45.0241%" y="389" width="0.5618%" height="15" fill="rgb(253,12,24)" fg:x="561" fg:w="7"/><text x="45.2741%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="45.4254%" y="373" width="0.1605%" height="15" fill="rgb(248,120,50)" fg:x="566" fg:w="2"/><text x="45.6754%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="45.4254%" y="357" width="0.1605%" height="15" fill="rgb(245,194,10)" fg:x="566" fg:w="2"/><text x="45.6754%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="45.5056%" y="341" width="0.0803%" height="15" fill="rgb(241,149,38)" fg:x="567" fg:w="1"/><text x="45.7556%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="45.5056%" y="325" width="0.0803%" height="15" fill="rgb(219,215,7)" fg:x="567" fg:w="1"/><text x="45.7556%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="45.5056%" y="309" width="0.0803%" height="15" fill="rgb(208,120,31)" fg:x="567" fg:w="1"/><text x="45.7556%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="45.5859%" y="341" width="0.1605%" height="15" fill="rgb(244,30,8)" fg:x="568" fg:w="2"/><text x="45.8359%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="45.6661%" y="325" width="0.0803%" height="15" fill="rgb(238,35,44)" fg:x="569" fg:w="1"/><text x="45.9161%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="45.6661%" y="309" width="0.0803%" height="15" fill="rgb(243,218,37)" fg:x="569" fg:w="1"/><text x="45.9161%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="45.6661%" y="293" width="0.0803%" height="15" fill="rgb(218,169,10)" fg:x="569" fg:w="1"/><text x="45.9161%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="45.6661%" y="277" width="0.0803%" height="15" fill="rgb(221,144,10)" fg:x="569" fg:w="1"/><text x="45.9161%" y="287.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="45.7464%" y="341" width="0.0803%" height="15" fill="rgb(226,41,38)" fg:x="570" fg:w="1"/><text x="45.9964%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="45.7464%" y="325" width="0.0803%" height="15" fill="rgb(228,3,1)" fg:x="570" fg:w="1"/><text x="45.9964%" y="335.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (19 samples, 1.52%)</title><rect x="44.3820%" y="565" width="1.5249%" height="15" fill="rgb(209,129,12)" fg:x="553" fg:w="19"/><text x="44.6320%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (19 samples, 1.52%)</title><rect x="44.3820%" y="549" width="1.5249%" height="15" fill="rgb(213,136,33)" fg:x="553" fg:w="19"/><text x="44.6320%" y="559.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (16 samples, 1.28%)</title><rect x="44.6228%" y="533" width="1.2841%" height="15" fill="rgb(209,181,29)" fg:x="556" fg:w="16"/><text x="44.8728%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (16 samples, 1.28%)</title><rect x="44.6228%" y="517" width="1.2841%" height="15" fill="rgb(234,173,18)" fg:x="556" fg:w="16"/><text x="44.8728%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (16 samples, 1.28%)</title><rect x="44.6228%" y="501" width="1.2841%" height="15" fill="rgb(227,73,47)" fg:x="556" fg:w="16"/><text x="44.8728%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (15 samples, 1.20%)</title><rect x="44.7030%" y="485" width="1.2039%" height="15" fill="rgb(234,9,34)" fg:x="557" fg:w="15"/><text x="44.9530%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="45.5859%" y="469" width="0.3210%" height="15" fill="rgb(235,172,15)" fg:x="568" fg:w="4"/><text x="45.8359%" y="479.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="45.5859%" y="453" width="0.3210%" height="15" fill="rgb(245,61,2)" fg:x="568" fg:w="4"/><text x="45.8359%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="45.5859%" y="437" width="0.3210%" height="15" fill="rgb(238,39,47)" fg:x="568" fg:w="4"/><text x="45.8359%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="45.5859%" y="421" width="0.3210%" height="15" fill="rgb(234,37,24)" fg:x="568" fg:w="4"/><text x="45.8359%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="45.5859%" y="405" width="0.3210%" height="15" fill="rgb(248,223,24)" fg:x="568" fg:w="4"/><text x="45.8359%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="45.5859%" y="389" width="0.3210%" height="15" fill="rgb(223,12,15)" fg:x="568" fg:w="4"/><text x="45.8359%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="45.5859%" y="373" width="0.3210%" height="15" fill="rgb(249,6,3)" fg:x="568" fg:w="4"/><text x="45.8359%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="45.5859%" y="357" width="0.3210%" height="15" fill="rgb(237,105,33)" fg:x="568" fg:w="4"/><text x="45.8359%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="45.8266%" y="341" width="0.0803%" height="15" fill="rgb(252,208,35)" fg:x="571" fg:w="1"/><text x="46.0766%" y="351.50"></text></g><g><title>&lt;kernel::actions::Perform as plugins_rune::ToCall&gt;::to_call (1 samples, 0.08%)</title><rect x="45.9872%" y="533" width="0.0803%" height="15" fill="rgb(215,181,35)" fg:x="573" fg:w="1"/><text x="46.2372%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="46.0674%" y="501" width="0.0803%" height="15" fill="rgb(246,212,3)" fg:x="574" fg:w="1"/><text x="46.3174%" y="511.50"></text></g><g><title>&lt;twox_hash::sixty_four::XxHash64 as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="46.1477%" y="485" width="0.0803%" height="15" fill="rgb(247,156,24)" fg:x="575" fg:w="1"/><text x="46.3977%" y="495.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="46.2279%" y="357" width="0.0803%" height="15" fill="rgb(248,9,31)" fg:x="576" fg:w="1"/><text x="46.4779%" y="367.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="46.3884%" y="325" width="0.0803%" height="15" fill="rgb(234,26,45)" fg:x="578" fg:w="1"/><text x="46.6384%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="46.3884%" y="309" width="0.0803%" height="15" fill="rgb(249,11,32)" fg:x="578" fg:w="1"/><text x="46.6384%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="46.4687%" y="325" width="0.0803%" height="15" fill="rgb(249,162,33)" fg:x="579" fg:w="1"/><text x="46.7187%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="46.4687%" y="309" width="0.0803%" height="15" fill="rgb(232,4,32)" fg:x="579" fg:w="1"/><text x="46.7187%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="46.6292%" y="293" width="0.0803%" height="15" fill="rgb(212,5,45)" fg:x="581" fg:w="1"/><text x="46.8792%" y="303.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (3 samples, 0.24%)</title><rect x="46.5490%" y="325" width="0.2408%" height="15" fill="rgb(227,95,13)" fg:x="580" fg:w="3"/><text x="46.7990%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="46.5490%" y="309" width="0.2408%" height="15" fill="rgb(223,205,10)" fg:x="580" fg:w="3"/><text x="46.7990%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="46.7095%" y="293" width="0.0803%" height="15" fill="rgb(222,178,8)" fg:x="582" fg:w="1"/><text x="46.9595%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="46.7095%" y="277" width="0.0803%" height="15" fill="rgb(216,13,22)" fg:x="582" fg:w="1"/><text x="46.9595%" y="287.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="46.7095%" y="261" width="0.0803%" height="15" fill="rgb(240,167,12)" fg:x="582" fg:w="1"/><text x="46.9595%" y="271.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="46.7897%" y="293" width="0.0803%" height="15" fill="rgb(235,68,35)" fg:x="583" fg:w="1"/><text x="47.0397%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="46.8700%" y="277" width="0.0803%" height="15" fill="rgb(253,40,27)" fg:x="584" fg:w="1"/><text x="47.1200%" y="287.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (3 samples, 0.24%)</title><rect x="46.7897%" y="309" width="0.2408%" height="15" fill="rgb(214,19,28)" fg:x="583" fg:w="3"/><text x="47.0397%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="46.8700%" y="293" width="0.1605%" height="15" fill="rgb(210,167,45)" fg:x="584" fg:w="2"/><text x="47.1200%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="46.9502%" y="277" width="0.0803%" height="15" fill="rgb(232,97,40)" fg:x="585" fg:w="1"/><text x="47.2002%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="46.9502%" y="261" width="0.0803%" height="15" fill="rgb(250,35,23)" fg:x="585" fg:w="1"/><text x="47.2002%" y="271.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (11 samples, 0.88%)</title><rect x="46.2279%" y="389" width="0.8828%" height="15" fill="rgb(248,47,53)" fg:x="576" fg:w="11"/><text x="46.4779%" y="399.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (11 samples, 0.88%)</title><rect x="46.2279%" y="373" width="0.8828%" height="15" fill="rgb(226,58,50)" fg:x="576" fg:w="11"/><text x="46.4779%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (10 samples, 0.80%)</title><rect x="46.3082%" y="357" width="0.8026%" height="15" fill="rgb(217,105,26)" fg:x="577" fg:w="10"/><text x="46.5582%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.72%)</title><rect x="46.3884%" y="341" width="0.7223%" height="15" fill="rgb(208,64,1)" fg:x="578" fg:w="9"/><text x="46.6384%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="46.7897%" y="325" width="0.3210%" height="15" fill="rgb(214,80,1)" fg:x="583" fg:w="4"/><text x="47.0397%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (1 samples, 0.08%)</title><rect x="47.0305%" y="309" width="0.0803%" height="15" fill="rgb(206,175,26)" fg:x="586" fg:w="1"/><text x="47.2805%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="47.0305%" y="293" width="0.0803%" height="15" fill="rgb(235,156,37)" fg:x="586" fg:w="1"/><text x="47.2805%" y="303.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="47.0305%" y="277" width="0.0803%" height="15" fill="rgb(213,100,9)" fg:x="586" fg:w="1"/><text x="47.2805%" y="287.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="47.0305%" y="261" width="0.0803%" height="15" fill="rgb(241,15,13)" fg:x="586" fg:w="1"/><text x="47.2805%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="47.0305%" y="245" width="0.0803%" height="15" fill="rgb(205,97,43)" fg:x="586" fg:w="1"/><text x="47.2805%" y="255.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="47.0305%" y="229" width="0.0803%" height="15" fill="rgb(216,106,32)" fg:x="586" fg:w="1"/><text x="47.2805%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="47.1910%" y="341" width="0.0803%" height="15" fill="rgb(226,200,8)" fg:x="588" fg:w="1"/><text x="47.4410%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="47.1910%" y="325" width="0.0803%" height="15" fill="rgb(244,54,29)" fg:x="588" fg:w="1"/><text x="47.4410%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="47.1910%" y="309" width="0.0803%" height="15" fill="rgb(252,169,12)" fg:x="588" fg:w="1"/><text x="47.4410%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="47.2713%" y="341" width="0.0803%" height="15" fill="rgb(231,199,11)" fg:x="589" fg:w="1"/><text x="47.5213%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="47.1910%" y="357" width="0.2408%" height="15" fill="rgb(233,191,18)" fg:x="588" fg:w="3"/><text x="47.4410%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="47.3515%" y="341" width="0.0803%" height="15" fill="rgb(215,83,47)" fg:x="590" fg:w="1"/><text x="47.6015%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="47.3515%" y="325" width="0.0803%" height="15" fill="rgb(251,67,19)" fg:x="590" fg:w="1"/><text x="47.6015%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="47.4318%" y="325" width="0.0803%" height="15" fill="rgb(240,7,20)" fg:x="591" fg:w="1"/><text x="47.6818%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="47.4318%" y="309" width="0.0803%" height="15" fill="rgb(210,150,26)" fg:x="591" fg:w="1"/><text x="47.6818%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="47.4318%" y="293" width="0.0803%" height="15" fill="rgb(228,75,42)" fg:x="591" fg:w="1"/><text x="47.6818%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="47.4318%" y="277" width="0.0803%" height="15" fill="rgb(237,134,48)" fg:x="591" fg:w="1"/><text x="47.6818%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="47.4318%" y="261" width="0.0803%" height="15" fill="rgb(205,80,50)" fg:x="591" fg:w="1"/><text x="47.6818%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="47.4318%" y="245" width="0.0803%" height="15" fill="rgb(217,74,48)" fg:x="591" fg:w="1"/><text x="47.6818%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="47.4318%" y="229" width="0.0803%" height="15" fill="rgb(205,82,50)" fg:x="591" fg:w="1"/><text x="47.6818%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="47.4318%" y="213" width="0.0803%" height="15" fill="rgb(228,1,33)" fg:x="591" fg:w="1"/><text x="47.6818%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="47.4318%" y="197" width="0.0803%" height="15" fill="rgb(214,50,23)" fg:x="591" fg:w="1"/><text x="47.6818%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="47.4318%" y="181" width="0.0803%" height="15" fill="rgb(210,62,9)" fg:x="591" fg:w="1"/><text x="47.6818%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="47.4318%" y="165" width="0.0803%" height="15" fill="rgb(210,104,37)" fg:x="591" fg:w="1"/><text x="47.6818%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="47.4318%" y="149" width="0.0803%" height="15" fill="rgb(232,104,43)" fg:x="591" fg:w="1"/><text x="47.6818%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="47.4318%" y="133" width="0.0803%" height="15" fill="rgb(244,52,6)" fg:x="591" fg:w="1"/><text x="47.6818%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="47.4318%" y="117" width="0.0803%" height="15" fill="rgb(211,174,52)" fg:x="591" fg:w="1"/><text x="47.6818%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="47.4318%" y="101" width="0.0803%" height="15" fill="rgb(229,48,4)" fg:x="591" fg:w="1"/><text x="47.6818%" y="111.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="47.5120%" y="261" width="0.0803%" height="15" fill="rgb(205,155,16)" fg:x="592" fg:w="1"/><text x="47.7620%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="47.5120%" y="245" width="0.0803%" height="15" fill="rgb(211,141,53)" fg:x="592" fg:w="1"/><text x="47.7620%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="47.5923%" y="261" width="0.1605%" height="15" fill="rgb(240,148,11)" fg:x="593" fg:w="2"/><text x="47.8423%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="47.6726%" y="245" width="0.0803%" height="15" fill="rgb(214,45,23)" fg:x="594" fg:w="1"/><text x="47.9226%" y="255.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (6 samples, 0.48%)</title><rect x="47.4318%" y="357" width="0.4815%" height="15" fill="rgb(248,74,26)" fg:x="591" fg:w="6"/><text x="47.6818%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (6 samples, 0.48%)</title><rect x="47.4318%" y="341" width="0.4815%" height="15" fill="rgb(218,121,16)" fg:x="591" fg:w="6"/><text x="47.6818%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="47.5120%" y="325" width="0.4013%" height="15" fill="rgb(218,10,47)" fg:x="592" fg:w="5"/><text x="47.7620%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="47.5120%" y="309" width="0.4013%" height="15" fill="rgb(227,99,14)" fg:x="592" fg:w="5"/><text x="47.7620%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.40%)</title><rect x="47.5120%" y="293" width="0.4013%" height="15" fill="rgb(229,83,46)" fg:x="592" fg:w="5"/><text x="47.7620%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="47.5120%" y="277" width="0.4013%" height="15" fill="rgb(228,25,1)" fg:x="592" fg:w="5"/><text x="47.7620%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="47.7528%" y="261" width="0.1605%" height="15" fill="rgb(252,190,15)" fg:x="595" fg:w="2"/><text x="48.0028%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="47.7528%" y="245" width="0.1605%" height="15" fill="rgb(213,103,51)" fg:x="595" fg:w="2"/><text x="48.0028%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.8331%" y="229" width="0.0803%" height="15" fill="rgb(220,38,44)" fg:x="596" fg:w="1"/><text x="48.0831%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="47.9133%" y="357" width="0.1605%" height="15" fill="rgb(210,45,26)" fg:x="597" fg:w="2"/><text x="48.1633%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="47.9936%" y="341" width="0.0803%" height="15" fill="rgb(205,95,48)" fg:x="598" fg:w="1"/><text x="48.2436%" y="351.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="48.0738%" y="357" width="0.0803%" height="15" fill="rgb(225,179,37)" fg:x="599" fg:w="1"/><text x="48.3238%" y="367.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="48.0738%" y="341" width="0.0803%" height="15" fill="rgb(230,209,3)" fg:x="599" fg:w="1"/><text x="48.3238%" y="351.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="48.0738%" y="325" width="0.0803%" height="15" fill="rgb(248,12,46)" fg:x="599" fg:w="1"/><text x="48.3238%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="48.1541%" y="341" width="0.0803%" height="15" fill="rgb(234,18,0)" fg:x="600" fg:w="1"/><text x="48.4041%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="48.1541%" y="325" width="0.0803%" height="15" fill="rgb(238,197,14)" fg:x="600" fg:w="1"/><text x="48.4041%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="48.1541%" y="357" width="0.2408%" height="15" fill="rgb(251,162,48)" fg:x="600" fg:w="3"/><text x="48.4041%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="48.2343%" y="341" width="0.1605%" height="15" fill="rgb(237,73,42)" fg:x="601" fg:w="2"/><text x="48.4843%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="48.2343%" y="325" width="0.1605%" height="15" fill="rgb(211,108,8)" fg:x="601" fg:w="2"/><text x="48.4843%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="48.3146%" y="309" width="0.0803%" height="15" fill="rgb(213,45,22)" fg:x="602" fg:w="1"/><text x="48.5646%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="48.3146%" y="293" width="0.0803%" height="15" fill="rgb(252,154,5)" fg:x="602" fg:w="1"/><text x="48.5646%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="48.3146%" y="277" width="0.0803%" height="15" fill="rgb(221,79,52)" fg:x="602" fg:w="1"/><text x="48.5646%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="48.4751%" y="325" width="0.0803%" height="15" fill="rgb(229,220,36)" fg:x="604" fg:w="1"/><text x="48.7251%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.6356%" y="309" width="0.0803%" height="15" fill="rgb(211,17,16)" fg:x="606" fg:w="1"/><text x="48.8856%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="48.5554%" y="325" width="0.2408%" height="15" fill="rgb(222,55,31)" fg:x="605" fg:w="3"/><text x="48.8054%" y="335.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="48.7159%" y="309" width="0.0803%" height="15" fill="rgb(221,221,31)" fg:x="607" fg:w="1"/><text x="48.9659%" y="319.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="48.7961%" y="293" width="0.0803%" height="15" fill="rgb(227,168,26)" fg:x="608" fg:w="1"/><text x="49.0461%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.7961%" y="277" width="0.0803%" height="15" fill="rgb(224,139,9)" fg:x="608" fg:w="1"/><text x="49.0461%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (10 samples, 0.80%)</title><rect x="48.3949%" y="341" width="0.8026%" height="15" fill="rgb(254,172,0)" fg:x="603" fg:w="10"/><text x="48.6449%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="48.7961%" y="325" width="0.4013%" height="15" fill="rgb(235,203,1)" fg:x="608" fg:w="5"/><text x="49.0461%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="48.7961%" y="309" width="0.4013%" height="15" fill="rgb(216,205,24)" fg:x="608" fg:w="5"/><text x="49.0461%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="48.8764%" y="293" width="0.3210%" height="15" fill="rgb(233,24,6)" fg:x="609" fg:w="4"/><text x="49.1264%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="48.8764%" y="277" width="0.3210%" height="15" fill="rgb(244,110,9)" fg:x="609" fg:w="4"/><text x="49.1264%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="48.9567%" y="261" width="0.2408%" height="15" fill="rgb(239,222,42)" fg:x="610" fg:w="3"/><text x="49.2067%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="48.9567%" y="245" width="0.2408%" height="15" fill="rgb(218,145,13)" fg:x="610" fg:w="3"/><text x="49.2067%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.1172%" y="229" width="0.0803%" height="15" fill="rgb(207,69,11)" fg:x="612" fg:w="1"/><text x="49.3672%" y="239.50"></text></g><g><title>kernel::model::EntityPtr::gid (11 samples, 0.88%)</title><rect x="48.3949%" y="357" width="0.8828%" height="15" fill="rgb(220,223,22)" fg:x="603" fg:w="11"/><text x="48.6449%" y="367.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="49.1974%" y="341" width="0.0803%" height="15" fill="rgb(245,102,5)" fg:x="613" fg:w="1"/><text x="49.4474%" y="351.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="49.2777%" y="293" width="0.0803%" height="15" fill="rgb(211,148,2)" fg:x="614" fg:w="1"/><text x="49.5277%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="49.2777%" y="277" width="0.0803%" height="15" fill="rgb(241,13,44)" fg:x="614" fg:w="1"/><text x="49.5277%" y="287.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="49.2777%" y="261" width="0.0803%" height="15" fill="rgb(219,137,21)" fg:x="614" fg:w="1"/><text x="49.5277%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="49.2777%" y="245" width="0.0803%" height="15" fill="rgb(242,206,5)" fg:x="614" fg:w="1"/><text x="49.5277%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="49.2777%" y="229" width="0.0803%" height="15" fill="rgb(217,114,22)" fg:x="614" fg:w="1"/><text x="49.5277%" y="239.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.08%)</title><rect x="49.2777%" y="213" width="0.0803%" height="15" fill="rgb(253,206,42)" fg:x="614" fg:w="1"/><text x="49.5277%" y="223.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (1 samples, 0.08%)</title><rect x="49.2777%" y="197" width="0.0803%" height="15" fill="rgb(236,102,18)" fg:x="614" fg:w="1"/><text x="49.5277%" y="207.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="49.2777%" y="309" width="0.1605%" height="15" fill="rgb(208,59,49)" fg:x="614" fg:w="2"/><text x="49.5277%" y="319.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="49.3579%" y="293" width="0.0803%" height="15" fill="rgb(215,194,28)" fg:x="615" fg:w="1"/><text x="49.6079%" y="303.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="49.3579%" y="277" width="0.0803%" height="15" fill="rgb(243,207,11)" fg:x="615" fg:w="1"/><text x="49.6079%" y="287.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="49.3579%" y="261" width="0.0803%" height="15" fill="rgb(254,179,35)" fg:x="615" fg:w="1"/><text x="49.6079%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="49.3579%" y="245" width="0.0803%" height="15" fill="rgb(235,97,3)" fg:x="615" fg:w="1"/><text x="49.6079%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.5987%" y="213" width="0.0803%" height="15" fill="rgb(215,155,33)" fg:x="618" fg:w="1"/><text x="49.8487%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="49.5987%" y="229" width="0.1605%" height="15" fill="rgb(223,128,12)" fg:x="618" fg:w="2"/><text x="49.8487%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="49.6790%" y="213" width="0.0803%" height="15" fill="rgb(208,157,18)" fg:x="619" fg:w="1"/><text x="49.9290%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="49.7592%" y="229" width="0.0803%" height="15" fill="rgb(249,70,54)" fg:x="620" fg:w="1"/><text x="50.0092%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="49.8395%" y="229" width="0.0803%" height="15" fill="rgb(244,118,24)" fg:x="621" fg:w="1"/><text x="50.0895%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.8395%" y="213" width="0.0803%" height="15" fill="rgb(211,54,0)" fg:x="621" fg:w="1"/><text x="50.0895%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="50.1605%" y="197" width="0.0803%" height="15" fill="rgb(245,137,45)" fg:x="625" fg:w="1"/><text x="50.4105%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (5 samples, 0.40%)</title><rect x="50.0803%" y="213" width="0.4013%" height="15" fill="rgb(232,154,31)" fg:x="624" fg:w="5"/><text x="50.3303%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (3 samples, 0.24%)</title><rect x="50.2408%" y="197" width="0.2408%" height="15" fill="rgb(253,6,39)" fg:x="626" fg:w="3"/><text x="50.4908%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="50.4013%" y="181" width="0.0803%" height="15" fill="rgb(234,183,24)" fg:x="628" fg:w="1"/><text x="50.6513%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="50.4815%" y="197" width="0.2408%" height="15" fill="rgb(252,84,40)" fg:x="629" fg:w="3"/><text x="50.7315%" y="207.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="50.6421%" y="181" width="0.0803%" height="15" fill="rgb(224,65,2)" fg:x="631" fg:w="1"/><text x="50.8921%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="50.6421%" y="165" width="0.0803%" height="15" fill="rgb(229,38,24)" fg:x="631" fg:w="1"/><text x="50.8921%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.6421%" y="149" width="0.0803%" height="15" fill="rgb(218,131,50)" fg:x="631" fg:w="1"/><text x="50.8921%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="50.6421%" y="133" width="0.0803%" height="15" fill="rgb(233,106,18)" fg:x="631" fg:w="1"/><text x="50.8921%" y="143.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="50.7223%" y="197" width="0.0803%" height="15" fill="rgb(220,216,11)" fg:x="632" fg:w="1"/><text x="50.9723%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.40%)</title><rect x="50.4815%" y="213" width="0.4013%" height="15" fill="rgb(251,100,45)" fg:x="629" fg:w="5"/><text x="50.7315%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="50.8026%" y="197" width="0.0803%" height="15" fill="rgb(235,143,32)" fg:x="633" fg:w="1"/><text x="51.0526%" y="207.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="51.0433%" y="149" width="0.1605%" height="15" fill="rgb(248,124,34)" fg:x="636" fg:w="2"/><text x="51.2933%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="51.2039%" y="149" width="0.0803%" height="15" fill="rgb(225,221,4)" fg:x="638" fg:w="1"/><text x="51.4539%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="51.3644%" y="117" width="0.0803%" height="15" fill="rgb(242,27,43)" fg:x="640" fg:w="1"/><text x="51.6144%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.3644%" y="101" width="0.0803%" height="15" fill="rgb(227,54,8)" fg:x="640" fg:w="1"/><text x="51.6144%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.3644%" y="85" width="0.0803%" height="15" fill="rgb(253,139,49)" fg:x="640" fg:w="1"/><text x="51.6144%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="51.2841%" y="149" width="0.2408%" height="15" fill="rgb(231,26,43)" fg:x="639" fg:w="3"/><text x="51.5341%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="51.3644%" y="133" width="0.1605%" height="15" fill="rgb(207,121,39)" fg:x="640" fg:w="2"/><text x="51.6144%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="51.4446%" y="117" width="0.0803%" height="15" fill="rgb(223,101,35)" fg:x="641" fg:w="1"/><text x="51.6946%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="51.4446%" y="101" width="0.0803%" height="15" fill="rgb(232,87,23)" fg:x="641" fg:w="1"/><text x="51.6946%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="51.4446%" y="85" width="0.0803%" height="15" fill="rgb(225,180,29)" fg:x="641" fg:w="1"/><text x="51.6946%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.4446%" y="69" width="0.0803%" height="15" fill="rgb(225,25,17)" fg:x="641" fg:w="1"/><text x="51.6946%" y="79.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="51.4446%" y="53" width="0.0803%" height="15" fill="rgb(223,8,52)" fg:x="641" fg:w="1"/><text x="51.6946%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="51.5249%" y="149" width="0.0803%" height="15" fill="rgb(246,42,21)" fg:x="642" fg:w="1"/><text x="51.7749%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="51.5249%" y="133" width="0.0803%" height="15" fill="rgb(205,64,43)" fg:x="642" fg:w="1"/><text x="51.7749%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="51.5249%" y="117" width="0.0803%" height="15" fill="rgb(221,160,13)" fg:x="642" fg:w="1"/><text x="51.7749%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="51.5249%" y="101" width="0.0803%" height="15" fill="rgb(239,58,35)" fg:x="642" fg:w="1"/><text x="51.7749%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (31 samples, 2.49%)</title><rect x="51.6051%" y="149" width="2.4880%" height="15" fill="rgb(251,26,40)" fg:x="643" fg:w="31"/><text x="51.8551%" y="159.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (31 samples, 2.49%)</title><rect x="51.6051%" y="133" width="2.4880%" height="15" fill="rgb(247,0,4)" fg:x="643" fg:w="31"/><text x="51.8551%" y="143.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (31 samples, 2.49%)</title><rect x="51.6051%" y="117" width="2.4880%" height="15" fill="rgb(218,130,10)" fg:x="643" fg:w="31"/><text x="51.8551%" y="127.50">al..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="54.0931%" y="149" width="0.2408%" height="15" fill="rgb(239,32,7)" fg:x="674" fg:w="3"/><text x="54.3431%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 3.69%)</title><rect x="50.8828%" y="197" width="3.6918%" height="15" fill="rgb(210,192,24)" fg:x="634" fg:w="46"/><text x="51.1328%" y="207.50">&lt;cor..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (46 samples, 3.69%)</title><rect x="50.8828%" y="181" width="3.6918%" height="15" fill="rgb(226,212,17)" fg:x="634" fg:w="46"/><text x="51.1328%" y="191.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (46 samples, 3.69%)</title><rect x="50.8828%" y="165" width="3.6918%" height="15" fill="rgb(219,201,28)" fg:x="634" fg:w="46"/><text x="51.1328%" y="175.50">rege..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.24%)</title><rect x="54.3339%" y="149" width="0.2408%" height="15" fill="rgb(235,207,41)" fg:x="677" fg:w="3"/><text x="54.5839%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="54.4141%" y="133" width="0.1605%" height="15" fill="rgb(241,95,54)" fg:x="678" fg:w="2"/><text x="54.6641%" y="143.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="54.5746%" y="181" width="0.0803%" height="15" fill="rgb(248,12,23)" fg:x="680" fg:w="1"/><text x="54.8246%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.08%)</title><rect x="54.6549%" y="181" width="0.0803%" height="15" fill="rgb(228,173,4)" fg:x="681" fg:w="1"/><text x="54.9049%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="54.7352%" y="181" width="0.2408%" height="15" fill="rgb(254,99,5)" fg:x="682" fg:w="3"/><text x="54.9852%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="54.8154%" y="165" width="0.1605%" height="15" fill="rgb(212,184,17)" fg:x="683" fg:w="2"/><text x="55.0654%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.8957%" y="149" width="0.0803%" height="15" fill="rgb(252,174,1)" fg:x="684" fg:w="1"/><text x="55.1457%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="54.8957%" y="133" width="0.0803%" height="15" fill="rgb(241,118,51)" fg:x="684" fg:w="1"/><text x="55.1457%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (9 samples, 0.72%)</title><rect x="54.5746%" y="197" width="0.7223%" height="15" fill="rgb(227,94,47)" fg:x="680" fg:w="9"/><text x="54.8246%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="54.9759%" y="181" width="0.3210%" height="15" fill="rgb(229,104,2)" fg:x="685" fg:w="4"/><text x="55.2259%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (56 samples, 4.49%)</title><rect x="50.8828%" y="213" width="4.4944%" height="15" fill="rgb(219,28,31)" fg:x="634" fg:w="56"/><text x="51.1328%" y="223.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="55.2970%" y="197" width="0.0803%" height="15" fill="rgb(233,109,36)" fg:x="689" fg:w="1"/><text x="55.5470%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="55.2970%" y="181" width="0.0803%" height="15" fill="rgb(246,88,11)" fg:x="689" fg:w="1"/><text x="55.5470%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (69 samples, 5.54%)</title><rect x="49.9197%" y="229" width="5.5377%" height="15" fill="rgb(209,212,17)" fg:x="622" fg:w="69"/><text x="50.1697%" y="239.50">regex_a..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="55.3772%" y="213" width="0.0803%" height="15" fill="rgb(243,59,29)" fg:x="690" fg:w="1"/><text x="55.6272%" y="223.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="55.5377%" y="181" width="0.0803%" height="15" fill="rgb(244,205,48)" fg:x="692" fg:w="1"/><text x="55.7877%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="55.6180%" y="181" width="0.0803%" height="15" fill="rgb(227,30,6)" fg:x="693" fg:w="1"/><text x="55.8680%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="55.6180%" y="165" width="0.0803%" height="15" fill="rgb(220,205,48)" fg:x="693" fg:w="1"/><text x="55.8680%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="55.6982%" y="181" width="0.0803%" height="15" fill="rgb(250,94,14)" fg:x="694" fg:w="1"/><text x="55.9482%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="55.6982%" y="165" width="0.0803%" height="15" fill="rgb(216,119,42)" fg:x="694" fg:w="1"/><text x="55.9482%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="55.5377%" y="197" width="0.4013%" height="15" fill="rgb(232,155,0)" fg:x="692" fg:w="5"/><text x="55.7877%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="55.7785%" y="181" width="0.1605%" height="15" fill="rgb(212,24,32)" fg:x="695" fg:w="2"/><text x="56.0285%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="55.7785%" y="165" width="0.1605%" height="15" fill="rgb(216,69,20)" fg:x="695" fg:w="2"/><text x="56.0285%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="55.7785%" y="149" width="0.1605%" height="15" fill="rgb(229,73,31)" fg:x="695" fg:w="2"/><text x="56.0285%" y="159.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="55.7785%" y="133" width="0.1605%" height="15" fill="rgb(224,219,20)" fg:x="695" fg:w="2"/><text x="56.0285%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.56%)</title><rect x="55.4575%" y="229" width="0.5618%" height="15" fill="rgb(215,146,41)" fg:x="691" fg:w="7"/><text x="55.7075%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.56%)</title><rect x="55.4575%" y="213" width="0.5618%" height="15" fill="rgb(244,71,31)" fg:x="691" fg:w="7"/><text x="55.7075%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="55.9390%" y="197" width="0.0803%" height="15" fill="rgb(224,24,11)" fg:x="697" fg:w="1"/><text x="56.1890%" y="207.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="55.9390%" y="181" width="0.0803%" height="15" fill="rgb(229,76,15)" fg:x="697" fg:w="1"/><text x="56.1890%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="56.0193%" y="181" width="0.0803%" height="15" fill="rgb(209,93,2)" fg:x="698" fg:w="1"/><text x="56.2693%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="56.0193%" y="197" width="0.1605%" height="15" fill="rgb(216,200,50)" fg:x="698" fg:w="2"/><text x="56.2693%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="56.0995%" y="181" width="0.0803%" height="15" fill="rgb(211,67,34)" fg:x="699" fg:w="1"/><text x="56.3495%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (84 samples, 6.74%)</title><rect x="49.5185%" y="277" width="6.7416%" height="15" fill="rgb(225,87,47)" fg:x="617" fg:w="84"/><text x="49.7685%" y="287.50">&lt;regex::r..</text></g><g><title>regex::builders::string::RegexBuilder::build (84 samples, 6.74%)</title><rect x="49.5185%" y="261" width="6.7416%" height="15" fill="rgb(217,185,16)" fg:x="617" fg:w="84"/><text x="49.7685%" y="271.50">regex::bu..</text></g><g><title>regex_automata::meta::regex::Builder::build (83 samples, 6.66%)</title><rect x="49.5987%" y="245" width="6.6613%" height="15" fill="rgb(205,0,0)" fg:x="618" fg:w="83"/><text x="49.8487%" y="255.50">regex_aut..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="56.0193%" y="229" width="0.2408%" height="15" fill="rgb(207,116,45)" fg:x="698" fg:w="3"/><text x="56.2693%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="56.0193%" y="213" width="0.2408%" height="15" fill="rgb(221,156,26)" fg:x="698" fg:w="3"/><text x="56.2693%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="56.1798%" y="197" width="0.0803%" height="15" fill="rgb(213,140,4)" fg:x="700" fg:w="1"/><text x="56.4298%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="56.2600%" y="245" width="0.0803%" height="15" fill="rgb(231,224,15)" fg:x="701" fg:w="1"/><text x="56.5100%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="56.2600%" y="229" width="0.0803%" height="15" fill="rgb(244,76,20)" fg:x="701" fg:w="1"/><text x="56.5100%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="56.2600%" y="213" width="0.0803%" height="15" fill="rgb(238,117,7)" fg:x="701" fg:w="1"/><text x="56.5100%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="56.2600%" y="277" width="0.2408%" height="15" fill="rgb(235,1,10)" fg:x="701" fg:w="3"/><text x="56.5100%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="56.2600%" y="261" width="0.2408%" height="15" fill="rgb(216,165,6)" fg:x="701" fg:w="3"/><text x="56.5100%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="56.3403%" y="245" width="0.1605%" height="15" fill="rgb(246,91,35)" fg:x="702" fg:w="2"/><text x="56.5903%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="56.4205%" y="229" width="0.0803%" height="15" fill="rgb(228,96,24)" fg:x="703" fg:w="1"/><text x="56.6705%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.4205%" y="213" width="0.0803%" height="15" fill="rgb(254,217,53)" fg:x="703" fg:w="1"/><text x="56.6705%" y="223.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (94 samples, 7.54%)</title><rect x="49.4382%" y="293" width="7.5441%" height="15" fill="rgb(209,60,0)" fg:x="616" fg:w="94"/><text x="49.6882%" y="303.50">indefinite..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.48%)</title><rect x="56.5008%" y="277" width="0.4815%" height="15" fill="rgb(250,93,26)" fg:x="704" fg:w="6"/><text x="56.7508%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.48%)</title><rect x="56.5008%" y="261" width="0.4815%" height="15" fill="rgb(211,9,40)" fg:x="704" fg:w="6"/><text x="56.7508%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.48%)</title><rect x="56.5008%" y="245" width="0.4815%" height="15" fill="rgb(242,57,20)" fg:x="704" fg:w="6"/><text x="56.7508%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="56.5811%" y="229" width="0.4013%" height="15" fill="rgb(248,85,48)" fg:x="705" fg:w="5"/><text x="56.8311%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="56.5811%" y="213" width="0.4013%" height="15" fill="rgb(212,117,2)" fg:x="705" fg:w="5"/><text x="56.8311%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="56.8218%" y="197" width="0.1605%" height="15" fill="rgb(243,19,3)" fg:x="708" fg:w="2"/><text x="57.0718%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.9823%" y="229" width="0.0803%" height="15" fill="rgb(232,217,24)" fg:x="710" fg:w="1"/><text x="57.2323%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.9823%" y="213" width="0.0803%" height="15" fill="rgb(224,175,40)" fg:x="710" fg:w="1"/><text x="57.2323%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="56.9823%" y="197" width="0.0803%" height="15" fill="rgb(212,162,32)" fg:x="710" fg:w="1"/><text x="57.2323%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="56.9823%" y="181" width="0.0803%" height="15" fill="rgb(215,9,4)" fg:x="710" fg:w="1"/><text x="57.2323%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.9823%" y="165" width="0.0803%" height="15" fill="rgb(242,42,7)" fg:x="710" fg:w="1"/><text x="57.2323%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.0626%" y="229" width="0.0803%" height="15" fill="rgb(242,184,45)" fg:x="711" fg:w="1"/><text x="57.3126%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.3034%" y="213" width="0.0803%" height="15" fill="rgb(228,111,51)" fg:x="714" fg:w="1"/><text x="57.5534%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.4639%" y="197" width="0.0803%" height="15" fill="rgb(236,147,17)" fg:x="716" fg:w="1"/><text x="57.7139%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (7 samples, 0.56%)</title><rect x="57.3836%" y="213" width="0.5618%" height="15" fill="rgb(210,75,22)" fg:x="715" fg:w="7"/><text x="57.6336%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (5 samples, 0.40%)</title><rect x="57.5441%" y="197" width="0.4013%" height="15" fill="rgb(217,159,45)" fg:x="717" fg:w="5"/><text x="57.7941%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.8652%" y="181" width="0.0803%" height="15" fill="rgb(245,165,53)" fg:x="721" fg:w="1"/><text x="58.1152%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="57.9454%" y="213" width="0.1605%" height="15" fill="rgb(251,190,50)" fg:x="722" fg:w="2"/><text x="58.1954%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="57.9454%" y="197" width="0.1605%" height="15" fill="rgb(208,203,29)" fg:x="722" fg:w="2"/><text x="58.1954%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.1059%" y="181" width="0.0803%" height="15" fill="rgb(207,209,35)" fg:x="724" fg:w="1"/><text x="58.3559%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="58.1862%" y="181" width="0.0803%" height="15" fill="rgb(230,144,49)" fg:x="725" fg:w="1"/><text x="58.4362%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="58.1862%" y="165" width="0.0803%" height="15" fill="rgb(229,31,6)" fg:x="725" fg:w="1"/><text x="58.4362%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.1862%" y="149" width="0.0803%" height="15" fill="rgb(251,129,24)" fg:x="725" fg:w="1"/><text x="58.4362%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="58.1862%" y="133" width="0.0803%" height="15" fill="rgb(235,105,15)" fg:x="725" fg:w="1"/><text x="58.4362%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="58.4270%" y="149" width="0.0803%" height="15" fill="rgb(216,52,43)" fg:x="728" fg:w="1"/><text x="58.6770%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.4270%" y="133" width="0.0803%" height="15" fill="rgb(238,144,41)" fg:x="728" fg:w="1"/><text x="58.6770%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="58.4270%" y="117" width="0.0803%" height="15" fill="rgb(243,63,9)" fg:x="728" fg:w="1"/><text x="58.6770%" y="127.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (4 samples, 0.32%)</title><rect x="58.2665%" y="181" width="0.3210%" height="15" fill="rgb(246,208,1)" fg:x="726" fg:w="4"/><text x="58.5165%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="58.3467%" y="165" width="0.2408%" height="15" fill="rgb(233,182,18)" fg:x="727" fg:w="3"/><text x="58.5967%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.5072%" y="149" width="0.0803%" height="15" fill="rgb(242,224,8)" fg:x="729" fg:w="1"/><text x="58.7572%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.5072%" y="133" width="0.0803%" height="15" fill="rgb(243,54,37)" fg:x="729" fg:w="1"/><text x="58.7572%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="58.5072%" y="117" width="0.0803%" height="15" fill="rgb(233,192,12)" fg:x="729" fg:w="1"/><text x="58.7572%" y="127.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (9 samples, 0.72%)</title><rect x="58.1059%" y="213" width="0.7223%" height="15" fill="rgb(251,192,53)" fg:x="724" fg:w="9"/><text x="58.3559%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (9 samples, 0.72%)</title><rect x="58.1059%" y="197" width="0.7223%" height="15" fill="rgb(246,141,26)" fg:x="724" fg:w="9"/><text x="58.3559%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (3 samples, 0.24%)</title><rect x="58.5875%" y="181" width="0.2408%" height="15" fill="rgb(239,195,19)" fg:x="730" fg:w="3"/><text x="58.8375%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (3 samples, 0.24%)</title><rect x="58.5875%" y="165" width="0.2408%" height="15" fill="rgb(241,16,39)" fg:x="730" fg:w="3"/><text x="58.8375%" y="175.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (3 samples, 0.24%)</title><rect x="58.5875%" y="149" width="0.2408%" height="15" fill="rgb(223,13,53)" fg:x="730" fg:w="3"/><text x="58.8375%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="58.8283%" y="213" width="0.0803%" height="15" fill="rgb(214,227,0)" fg:x="733" fg:w="1"/><text x="59.0783%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="58.9085%" y="149" width="0.0803%" height="15" fill="rgb(228,103,26)" fg:x="734" fg:w="1"/><text x="59.1585%" y="159.50"></text></g><g><title>regex_syntax::hir::interval::Interval::difference (1 samples, 0.08%)</title><rect x="58.9085%" y="133" width="0.0803%" height="15" fill="rgb(254,177,53)" fg:x="734" fg:w="1"/><text x="59.1585%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="58.9888%" y="117" width="0.0803%" height="15" fill="rgb(208,201,34)" fg:x="735" fg:w="1"/><text x="59.2388%" y="127.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="59.4703%" y="101" width="0.1605%" height="15" fill="rgb(212,39,5)" fg:x="741" fg:w="2"/><text x="59.7203%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="59.6308%" y="101" width="0.1605%" height="15" fill="rgb(246,117,3)" fg:x="743" fg:w="2"/><text x="59.8808%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.7111%" y="85" width="0.0803%" height="15" fill="rgb(244,118,39)" fg:x="744" fg:w="1"/><text x="59.9611%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.7111%" y="69" width="0.0803%" height="15" fill="rgb(241,64,10)" fg:x="744" fg:w="1"/><text x="59.9611%" y="79.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="59.7111%" y="53" width="0.0803%" height="15" fill="rgb(229,39,44)" fg:x="744" fg:w="1"/><text x="59.9611%" y="63.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="59.8716%" y="69" width="0.2408%" height="15" fill="rgb(230,226,3)" fg:x="746" fg:w="3"/><text x="60.1216%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="59.8716%" y="53" width="0.2408%" height="15" fill="rgb(222,13,42)" fg:x="746" fg:w="3"/><text x="60.1216%" y="63.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="59.9518%" y="37" width="0.1605%" height="15" fill="rgb(247,180,54)" fg:x="747" fg:w="2"/><text x="60.2018%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (10 samples, 0.80%)</title><rect x="59.7913%" y="101" width="0.8026%" height="15" fill="rgb(205,96,16)" fg:x="745" fg:w="10"/><text x="60.0413%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (10 samples, 0.80%)</title><rect x="59.7913%" y="85" width="0.8026%" height="15" fill="rgb(205,100,21)" fg:x="745" fg:w="10"/><text x="60.0413%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (6 samples, 0.48%)</title><rect x="60.1124%" y="69" width="0.4815%" height="15" fill="rgb(248,51,4)" fg:x="749" fg:w="6"/><text x="60.3624%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.5136%" y="53" width="0.0803%" height="15" fill="rgb(217,197,30)" fg:x="754" fg:w="1"/><text x="60.7636%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (22 samples, 1.77%)</title><rect x="60.5939%" y="101" width="1.7657%" height="15" fill="rgb(240,179,40)" fg:x="755" fg:w="22"/><text x="60.8439%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (21 samples, 1.69%)</title><rect x="60.6742%" y="85" width="1.6854%" height="15" fill="rgb(212,185,35)" fg:x="756" fg:w="21"/><text x="60.9242%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (21 samples, 1.69%)</title><rect x="60.6742%" y="69" width="1.6854%" height="15" fill="rgb(251,222,31)" fg:x="756" fg:w="21"/><text x="60.9242%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="62.3596%" y="101" width="0.0803%" height="15" fill="rgb(208,140,36)" fg:x="777" fg:w="1"/><text x="62.6096%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.3596%" y="85" width="0.0803%" height="15" fill="rgb(220,148,1)" fg:x="777" fg:w="1"/><text x="62.6096%" y="95.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="62.4398%" y="101" width="0.0803%" height="15" fill="rgb(254,4,28)" fg:x="778" fg:w="1"/><text x="62.6898%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.6806%" y="53" width="0.0803%" height="15" fill="rgb(222,185,44)" fg:x="781" fg:w="1"/><text x="62.9306%" y="63.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (49 samples, 3.93%)</title><rect x="58.9085%" y="197" width="3.9326%" height="15" fill="rgb(215,74,39)" fg:x="734" fg:w="49"/><text x="59.1585%" y="207.50">&lt;cor..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (49 samples, 3.93%)</title><rect x="58.9085%" y="181" width="3.9326%" height="15" fill="rgb(247,86,4)" fg:x="734" fg:w="49"/><text x="59.1585%" y="191.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (49 samples, 3.93%)</title><rect x="58.9085%" y="165" width="3.9326%" height="15" fill="rgb(231,105,32)" fg:x="734" fg:w="49"/><text x="59.1585%" y="175.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (48 samples, 3.85%)</title><rect x="58.9888%" y="149" width="3.8523%" height="15" fill="rgb(222,65,35)" fg:x="735" fg:w="48"/><text x="59.2388%" y="159.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (48 samples, 3.85%)</title><rect x="58.9888%" y="133" width="3.8523%" height="15" fill="rgb(218,145,35)" fg:x="735" fg:w="48"/><text x="59.2388%" y="143.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (47 samples, 3.77%)</title><rect x="59.0690%" y="117" width="3.7721%" height="15" fill="rgb(208,7,15)" fg:x="736" fg:w="47"/><text x="59.3190%" y="127.50">rege..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (4 samples, 0.32%)</title><rect x="62.5201%" y="101" width="0.3210%" height="15" fill="rgb(209,83,13)" fg:x="779" fg:w="4"/><text x="62.7701%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="62.6003%" y="85" width="0.2408%" height="15" fill="rgb(218,3,10)" fg:x="780" fg:w="3"/><text x="62.8503%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="62.6806%" y="69" width="0.1605%" height="15" fill="rgb(211,219,4)" fg:x="781" fg:w="2"/><text x="62.9306%" y="79.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="62.7608%" y="53" width="0.0803%" height="15" fill="rgb(228,194,12)" fg:x="782" fg:w="1"/><text x="63.0108%" y="63.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="62.7608%" y="37" width="0.0803%" height="15" fill="rgb(210,175,7)" fg:x="782" fg:w="1"/><text x="63.0108%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="62.9213%" y="181" width="0.3210%" height="15" fill="rgb(243,132,6)" fg:x="784" fg:w="4"/><text x="63.1713%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="63.0016%" y="165" width="0.2408%" height="15" fill="rgb(207,72,18)" fg:x="785" fg:w="3"/><text x="63.2516%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="63.0016%" y="149" width="0.2408%" height="15" fill="rgb(236,1,18)" fg:x="785" fg:w="3"/><text x="63.2516%" y="159.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="63.0016%" y="133" width="0.2408%" height="15" fill="rgb(227,0,18)" fg:x="785" fg:w="3"/><text x="63.2516%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="63.2424%" y="181" width="0.1605%" height="15" fill="rgb(247,37,5)" fg:x="788" fg:w="2"/><text x="63.4924%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="63.4029%" y="181" width="0.0803%" height="15" fill="rgb(237,179,24)" fg:x="790" fg:w="1"/><text x="63.6529%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (80 samples, 6.42%)</title><rect x="57.1429%" y="229" width="6.4205%" height="15" fill="rgb(226,53,20)" fg:x="712" fg:w="80"/><text x="57.3929%" y="239.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (58 samples, 4.65%)</title><rect x="58.9085%" y="213" width="4.6549%" height="15" fill="rgb(247,75,7)" fg:x="734" fg:w="58"/><text x="59.1585%" y="223.50">regex..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (9 samples, 0.72%)</title><rect x="62.8411%" y="197" width="0.7223%" height="15" fill="rgb(233,96,12)" fg:x="783" fg:w="9"/><text x="63.0911%" y="207.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="63.4831%" y="181" width="0.0803%" height="15" fill="rgb(224,125,0)" fg:x="791" fg:w="1"/><text x="63.7331%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="63.4831%" y="165" width="0.0803%" height="15" fill="rgb(224,92,25)" fg:x="791" fg:w="1"/><text x="63.7331%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.4831%" y="149" width="0.0803%" height="15" fill="rgb(224,42,24)" fg:x="791" fg:w="1"/><text x="63.7331%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="63.4831%" y="133" width="0.0803%" height="15" fill="rgb(234,132,49)" fg:x="791" fg:w="1"/><text x="63.7331%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="63.5634%" y="181" width="0.0803%" height="15" fill="rgb(248,100,35)" fg:x="792" fg:w="1"/><text x="63.8134%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="63.6437%" y="181" width="0.0803%" height="15" fill="rgb(239,94,40)" fg:x="793" fg:w="1"/><text x="63.8937%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="63.6437%" y="165" width="0.0803%" height="15" fill="rgb(235,139,28)" fg:x="793" fg:w="1"/><text x="63.8937%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="63.5634%" y="197" width="0.3210%" height="15" fill="rgb(217,144,7)" fg:x="792" fg:w="4"/><text x="63.8134%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="63.7239%" y="181" width="0.1605%" height="15" fill="rgb(227,55,4)" fg:x="794" fg:w="2"/><text x="63.9739%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="63.7239%" y="165" width="0.1605%" height="15" fill="rgb(252,82,54)" fg:x="794" fg:w="2"/><text x="63.9739%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="63.7239%" y="149" width="0.1605%" height="15" fill="rgb(245,172,4)" fg:x="794" fg:w="2"/><text x="63.9739%" y="159.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="63.7239%" y="133" width="0.1605%" height="15" fill="rgb(207,26,27)" fg:x="794" fg:w="2"/><text x="63.9739%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="63.5634%" y="229" width="0.4815%" height="15" fill="rgb(252,98,18)" fg:x="792" fg:w="6"/><text x="63.8134%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.48%)</title><rect x="63.5634%" y="213" width="0.4815%" height="15" fill="rgb(244,8,26)" fg:x="792" fg:w="6"/><text x="63.8134%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="63.8844%" y="197" width="0.1605%" height="15" fill="rgb(237,173,45)" fg:x="796" fg:w="2"/><text x="64.1344%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::NestLimiter&lt;P&gt;::check (1 samples, 0.08%)</title><rect x="63.9647%" y="181" width="0.0803%" height="15" fill="rgb(208,213,49)" fg:x="797" fg:w="1"/><text x="64.2147%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="64.0449%" y="197" width="0.2408%" height="15" fill="rgb(212,122,37)" fg:x="798" fg:w="3"/><text x="64.2949%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="64.0449%" y="181" width="0.2408%" height="15" fill="rgb(213,80,17)" fg:x="798" fg:w="3"/><text x="64.2949%" y="191.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="64.2055%" y="165" width="0.0803%" height="15" fill="rgb(206,210,43)" fg:x="800" fg:w="1"/><text x="64.4555%" y="175.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="64.2857%" y="181" width="0.0803%" height="15" fill="rgb(229,214,3)" fg:x="801" fg:w="1"/><text x="64.5357%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.2857%" y="165" width="0.0803%" height="15" fill="rgb(235,213,29)" fg:x="801" fg:w="1"/><text x="64.5357%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.2857%" y="149" width="0.0803%" height="15" fill="rgb(248,135,26)" fg:x="801" fg:w="1"/><text x="64.5357%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.2857%" y="133" width="0.0803%" height="15" fill="rgb(242,188,12)" fg:x="801" fg:w="1"/><text x="64.5357%" y="143.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (93 samples, 7.46%)</title><rect x="56.9823%" y="245" width="7.4639%" height="15" fill="rgb(245,38,12)" fg:x="710" fg:w="93"/><text x="57.2323%" y="255.50">regex_auto..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.40%)</title><rect x="64.0449%" y="229" width="0.4013%" height="15" fill="rgb(218,42,13)" fg:x="798" fg:w="5"/><text x="64.2949%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.40%)</title><rect x="64.0449%" y="213" width="0.4013%" height="15" fill="rgb(238,132,49)" fg:x="798" fg:w="5"/><text x="64.2949%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="64.2857%" y="197" width="0.1605%" height="15" fill="rgb(209,196,19)" fg:x="801" fg:w="2"/><text x="64.5357%" y="207.50"></text></g><g><title>regex_syntax::hir::Properties::capture (1 samples, 0.08%)</title><rect x="64.3660%" y="181" width="0.0803%" height="15" fill="rgb(244,131,22)" fg:x="802" fg:w="1"/><text x="64.6160%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (95 samples, 7.62%)</title><rect x="56.9823%" y="277" width="7.6244%" height="15" fill="rgb(223,18,34)" fg:x="710" fg:w="95"/><text x="57.2323%" y="287.50">&lt;regex::re..</text></g><g><title>regex::builders::string::RegexBuilder::build (95 samples, 7.62%)</title><rect x="56.9823%" y="261" width="7.6244%" height="15" fill="rgb(252,124,54)" fg:x="710" fg:w="95"/><text x="57.2323%" y="271.50">regex::bui..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (2 samples, 0.16%)</title><rect x="64.4462%" y="245" width="0.1605%" height="15" fill="rgb(229,106,42)" fg:x="803" fg:w="2"/><text x="64.6962%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="64.6067%" y="229" width="0.0803%" height="15" fill="rgb(221,129,1)" fg:x="805" fg:w="1"/><text x="64.8567%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="64.6067%" y="213" width="0.0803%" height="15" fill="rgb(229,74,15)" fg:x="805" fg:w="1"/><text x="64.8567%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="64.6067%" y="245" width="0.2408%" height="15" fill="rgb(210,206,50)" fg:x="805" fg:w="3"/><text x="64.8567%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="64.6870%" y="229" width="0.1605%" height="15" fill="rgb(251,114,31)" fg:x="806" fg:w="2"/><text x="64.9370%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="64.6870%" y="213" width="0.1605%" height="15" fill="rgb(215,225,28)" fg:x="806" fg:w="2"/><text x="64.9370%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="64.6870%" y="197" width="0.1605%" height="15" fill="rgb(237,109,14)" fg:x="806" fg:w="2"/><text x="64.9370%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="64.8475%" y="213" width="0.0803%" height="15" fill="rgb(230,13,37)" fg:x="808" fg:w="1"/><text x="65.0975%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (4 samples, 0.32%)</title><rect x="64.8475%" y="229" width="0.3210%" height="15" fill="rgb(231,40,28)" fg:x="808" fg:w="4"/><text x="65.0975%" y="239.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="64.9278%" y="213" width="0.2408%" height="15" fill="rgb(231,202,18)" fg:x="809" fg:w="3"/><text x="65.1778%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (8 samples, 0.64%)</title><rect x="64.6067%" y="277" width="0.6421%" height="15" fill="rgb(225,33,18)" fg:x="805" fg:w="8"/><text x="64.8567%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (8 samples, 0.64%)</title><rect x="64.6067%" y="261" width="0.6421%" height="15" fill="rgb(223,64,47)" fg:x="805" fg:w="8"/><text x="64.8567%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (5 samples, 0.40%)</title><rect x="64.8475%" y="245" width="0.4013%" height="15" fill="rgb(234,114,13)" fg:x="808" fg:w="5"/><text x="65.0975%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="65.1685%" y="229" width="0.0803%" height="15" fill="rgb(248,56,40)" fg:x="812" fg:w="1"/><text x="65.4185%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.1685%" y="213" width="0.0803%" height="15" fill="rgb(221,194,21)" fg:x="812" fg:w="1"/><text x="65.4185%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="65.3291%" y="197" width="0.4013%" height="15" fill="rgb(242,108,46)" fg:x="814" fg:w="5"/><text x="65.5791%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (4 samples, 0.32%)</title><rect x="65.4093%" y="181" width="0.3210%" height="15" fill="rgb(220,106,10)" fg:x="815" fg:w="4"/><text x="65.6593%" y="191.50"></text></g><g><title>indefinite::rules::number::Number::check (110 samples, 8.83%)</title><rect x="56.9823%" y="293" width="8.8283%" height="15" fill="rgb(211,88,4)" fg:x="710" fg:w="110"/><text x="57.2323%" y="303.50">indefinite::..</text></g><g><title>regex::regex::string::Regex::is_match_at (7 samples, 0.56%)</title><rect x="65.2488%" y="277" width="0.5618%" height="15" fill="rgb(214,95,34)" fg:x="813" fg:w="7"/><text x="65.4988%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.48%)</title><rect x="65.3291%" y="261" width="0.4815%" height="15" fill="rgb(250,160,33)" fg:x="814" fg:w="6"/><text x="65.5791%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.48%)</title><rect x="65.3291%" y="245" width="0.4815%" height="15" fill="rgb(225,29,10)" fg:x="814" fg:w="6"/><text x="65.5791%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.48%)</title><rect x="65.3291%" y="229" width="0.4815%" height="15" fill="rgb(224,28,30)" fg:x="814" fg:w="6"/><text x="65.5791%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="65.3291%" y="213" width="0.4815%" height="15" fill="rgb(231,77,4)" fg:x="814" fg:w="6"/><text x="65.5791%" y="223.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="65.7303%" y="197" width="0.0803%" height="15" fill="rgb(209,63,21)" fg:x="819" fg:w="1"/><text x="65.9803%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.8106%" y="213" width="0.0803%" height="15" fill="rgb(226,22,11)" fg:x="820" fg:w="1"/><text x="66.0606%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.8106%" y="197" width="0.0803%" height="15" fill="rgb(216,82,30)" fg:x="820" fg:w="1"/><text x="66.0606%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="65.8909%" y="213" width="0.0803%" height="15" fill="rgb(246,227,38)" fg:x="821" fg:w="1"/><text x="66.1409%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.8909%" y="197" width="0.0803%" height="15" fill="rgb(251,203,53)" fg:x="821" fg:w="1"/><text x="66.1409%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.9711%" y="197" width="0.0803%" height="15" fill="rgb(254,101,1)" fg:x="822" fg:w="1"/><text x="66.2211%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="66.0514%" y="197" width="0.0803%" height="15" fill="rgb(241,180,5)" fg:x="823" fg:w="1"/><text x="66.3014%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="66.1316%" y="197" width="0.2408%" height="15" fill="rgb(218,168,4)" fg:x="824" fg:w="3"/><text x="66.3816%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="66.2119%" y="181" width="0.1605%" height="15" fill="rgb(224,223,32)" fg:x="825" fg:w="2"/><text x="66.4619%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="66.3724%" y="197" width="0.0803%" height="15" fill="rgb(236,106,22)" fg:x="827" fg:w="1"/><text x="66.6224%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="66.3724%" y="181" width="0.0803%" height="15" fill="rgb(206,121,5)" fg:x="827" fg:w="1"/><text x="66.6224%" y="191.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="66.4526%" y="165" width="0.0803%" height="15" fill="rgb(233,87,28)" fg:x="828" fg:w="1"/><text x="66.7026%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (8 samples, 0.64%)</title><rect x="65.9711%" y="213" width="0.6421%" height="15" fill="rgb(236,137,17)" fg:x="822" fg:w="8"/><text x="66.2211%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (2 samples, 0.16%)</title><rect x="66.4526%" y="197" width="0.1605%" height="15" fill="rgb(209,183,38)" fg:x="828" fg:w="2"/><text x="66.7026%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="66.4526%" y="181" width="0.1605%" height="15" fill="rgb(206,162,44)" fg:x="828" fg:w="2"/><text x="66.7026%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="66.5329%" y="165" width="0.0803%" height="15" fill="rgb(237,70,39)" fg:x="829" fg:w="1"/><text x="66.7829%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="66.6934%" y="165" width="0.0803%" height="15" fill="rgb(212,176,5)" fg:x="831" fg:w="1"/><text x="66.9434%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="66.6132%" y="213" width="0.3210%" height="15" fill="rgb(232,95,16)" fg:x="830" fg:w="4"/><text x="66.8632%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="66.6132%" y="197" width="0.3210%" height="15" fill="rgb(219,115,35)" fg:x="830" fg:w="4"/><text x="66.8632%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="66.6934%" y="181" width="0.2408%" height="15" fill="rgb(251,67,27)" fg:x="831" fg:w="3"/><text x="66.9434%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="66.7737%" y="165" width="0.1605%" height="15" fill="rgb(222,95,40)" fg:x="832" fg:w="2"/><text x="67.0237%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.8539%" y="149" width="0.0803%" height="15" fill="rgb(250,35,16)" fg:x="833" fg:w="1"/><text x="67.1039%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.8539%" y="133" width="0.0803%" height="15" fill="rgb(224,86,44)" fg:x="833" fg:w="1"/><text x="67.1039%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.8539%" y="117" width="0.0803%" height="15" fill="rgb(237,53,53)" fg:x="833" fg:w="1"/><text x="67.1039%" y="127.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="67.0144%" y="165" width="0.1605%" height="15" fill="rgb(208,171,33)" fg:x="835" fg:w="2"/><text x="67.2644%" y="175.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="67.0947%" y="149" width="0.0803%" height="15" fill="rgb(222,64,27)" fg:x="836" fg:w="1"/><text x="67.3447%" y="159.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="66.9342%" y="181" width="0.3210%" height="15" fill="rgb(221,121,35)" fg:x="834" fg:w="4"/><text x="67.1842%" y="191.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="67.1750%" y="165" width="0.0803%" height="15" fill="rgb(228,137,42)" fg:x="837" fg:w="1"/><text x="67.4250%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.2552%" y="149" width="0.0803%" height="15" fill="rgb(227,54,21)" fg:x="838" fg:w="1"/><text x="67.5052%" y="159.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2 samples, 0.16%)</title><rect x="67.2552%" y="165" width="0.1605%" height="15" fill="rgb(240,168,33)" fg:x="838" fg:w="2"/><text x="67.5052%" y="175.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="67.3355%" y="149" width="0.0803%" height="15" fill="rgb(243,159,6)" fg:x="839" fg:w="1"/><text x="67.5855%" y="159.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="67.3355%" y="133" width="0.0803%" height="15" fill="rgb(205,211,41)" fg:x="839" fg:w="1"/><text x="67.5855%" y="143.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (21 samples, 1.69%)</title><rect x="65.8106%" y="245" width="1.6854%" height="15" fill="rgb(253,30,1)" fg:x="820" fg:w="21"/><text x="66.0606%" y="255.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (21 samples, 1.69%)</title><rect x="65.8106%" y="229" width="1.6854%" height="15" fill="rgb(226,80,18)" fg:x="820" fg:w="21"/><text x="66.0606%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (7 samples, 0.56%)</title><rect x="66.9342%" y="213" width="0.5618%" height="15" fill="rgb(253,156,46)" fg:x="834" fg:w="7"/><text x="67.1842%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (7 samples, 0.56%)</title><rect x="66.9342%" y="197" width="0.5618%" height="15" fill="rgb(248,87,27)" fg:x="834" fg:w="7"/><text x="67.1842%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.24%)</title><rect x="67.2552%" y="181" width="0.2408%" height="15" fill="rgb(227,122,2)" fg:x="838" fg:w="3"/><text x="67.5052%" y="191.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="67.4157%" y="165" width="0.0803%" height="15" fill="rgb(229,94,39)" fg:x="840" fg:w="1"/><text x="67.6657%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (22 samples, 1.77%)</title><rect x="65.8106%" y="261" width="1.7657%" height="15" fill="rgb(225,173,31)" fg:x="820" fg:w="22"/><text x="66.0606%" y="271.50"></text></g><g><title>regex::builders::string::RegexBuilder::new (1 samples, 0.08%)</title><rect x="67.4960%" y="245" width="0.0803%" height="15" fill="rgb(239,176,30)" fg:x="841" fg:w="1"/><text x="67.7460%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="67.4960%" y="229" width="0.0803%" height="15" fill="rgb(212,104,21)" fg:x="841" fg:w="1"/><text x="67.7460%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="67.5762%" y="261" width="0.0803%" height="15" fill="rgb(240,209,40)" fg:x="842" fg:w="1"/><text x="67.8262%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="67.5762%" y="245" width="0.0803%" height="15" fill="rgb(234,195,5)" fg:x="842" fg:w="1"/><text x="67.8262%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="67.5762%" y="229" width="0.0803%" height="15" fill="rgb(238,213,1)" fg:x="842" fg:w="1"/><text x="67.8262%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="67.5762%" y="213" width="0.0803%" height="15" fill="rgb(235,182,54)" fg:x="842" fg:w="1"/><text x="67.8262%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="67.5762%" y="197" width="0.0803%" height="15" fill="rgb(229,50,46)" fg:x="842" fg:w="1"/><text x="67.8262%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.5762%" y="181" width="0.0803%" height="15" fill="rgb(219,145,13)" fg:x="842" fg:w="1"/><text x="67.8262%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="67.6565%" y="213" width="0.2408%" height="15" fill="rgb(220,226,10)" fg:x="843" fg:w="3"/><text x="67.9065%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="67.7368%" y="197" width="0.1605%" height="15" fill="rgb(248,47,30)" fg:x="844" fg:w="2"/><text x="67.9868%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.8170%" y="181" width="0.0803%" height="15" fill="rgb(231,209,44)" fg:x="845" fg:w="1"/><text x="68.0670%" y="191.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (260 samples, 20.87%)</title><rect x="47.1108%" y="373" width="20.8668%" height="15" fill="rgb(209,80,30)" fg:x="587" fg:w="260"/><text x="47.3608%" y="383.50">&lt;&amp;kernel::model::EntityPtr as plu..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (233 samples, 18.70%)</title><rect x="49.2777%" y="357" width="18.6998%" height="15" fill="rgb(232,9,14)" fg:x="614" fg:w="233"/><text x="49.5277%" y="367.50">plugins_core::looking::model:..</text></g><g><title>indefinite::indefinite (233 samples, 18.70%)</title><rect x="49.2777%" y="341" width="18.6998%" height="15" fill="rgb(243,91,43)" fg:x="614" fg:w="233"/><text x="49.5277%" y="351.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (233 samples, 18.70%)</title><rect x="49.2777%" y="325" width="18.6998%" height="15" fill="rgb(231,90,52)" fg:x="614" fg:w="233"/><text x="49.5277%" y="335.50">indefinite::methods::indefini..</text></g><g><title>indefinite::methods::apply_rules (231 samples, 18.54%)</title><rect x="49.4382%" y="309" width="18.5393%" height="15" fill="rgb(253,192,44)" fg:x="616" fg:w="231"/><text x="49.6882%" y="319.50">indefinite::methods::apply_ru..</text></g><g><title>indefinite::rules::other::Other::run (27 samples, 2.17%)</title><rect x="65.8106%" y="293" width="2.1669%" height="15" fill="rgb(241,66,31)" fg:x="820" fg:w="27"/><text x="66.0606%" y="303.50">i..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (27 samples, 2.17%)</title><rect x="65.8106%" y="277" width="2.1669%" height="15" fill="rgb(235,81,37)" fg:x="820" fg:w="27"/><text x="66.0606%" y="287.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="67.6565%" y="261" width="0.3210%" height="15" fill="rgb(223,221,9)" fg:x="843" fg:w="4"/><text x="67.9065%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="67.6565%" y="245" width="0.3210%" height="15" fill="rgb(242,180,7)" fg:x="843" fg:w="4"/><text x="67.9065%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="67.6565%" y="229" width="0.3210%" height="15" fill="rgb(243,78,19)" fg:x="843" fg:w="4"/><text x="67.9065%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="67.8973%" y="213" width="0.0803%" height="15" fill="rgb(233,23,17)" fg:x="846" fg:w="1"/><text x="68.1473%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="67.8973%" y="197" width="0.0803%" height="15" fill="rgb(252,122,45)" fg:x="846" fg:w="1"/><text x="68.1473%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.8973%" y="181" width="0.0803%" height="15" fill="rgb(247,108,20)" fg:x="846" fg:w="1"/><text x="68.1473%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.8973%" y="165" width="0.0803%" height="15" fill="rgb(235,84,21)" fg:x="846" fg:w="1"/><text x="68.1473%" y="175.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="67.9775%" y="293" width="0.1605%" height="15" fill="rgb(247,129,10)" fg:x="847" fg:w="2"/><text x="68.2275%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="67.9775%" y="277" width="0.1605%" height="15" fill="rgb(208,173,14)" fg:x="847" fg:w="2"/><text x="68.2275%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="67.9775%" y="261" width="0.1605%" height="15" fill="rgb(236,31,38)" fg:x="847" fg:w="2"/><text x="68.2275%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.0578%" y="245" width="0.0803%" height="15" fill="rgb(232,65,17)" fg:x="848" fg:w="1"/><text x="68.3078%" y="255.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="67.9775%" y="373" width="0.2408%" height="15" fill="rgb(224,45,49)" fg:x="847" fg:w="3"/><text x="68.2275%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="67.9775%" y="357" width="0.2408%" height="15" fill="rgb(225,2,53)" fg:x="847" fg:w="3"/><text x="68.2275%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="67.9775%" y="341" width="0.2408%" height="15" fill="rgb(248,210,53)" fg:x="847" fg:w="3"/><text x="68.2275%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (3 samples, 0.24%)</title><rect x="67.9775%" y="325" width="0.2408%" height="15" fill="rgb(211,1,30)" fg:x="847" fg:w="3"/><text x="68.2275%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (3 samples, 0.24%)</title><rect x="67.9775%" y="309" width="0.2408%" height="15" fill="rgb(224,96,15)" fg:x="847" fg:w="3"/><text x="68.2275%" y="319.50"></text></g><g><title>serde_json::value::de::SeqDeserializer::new (1 samples, 0.08%)</title><rect x="68.1380%" y="293" width="0.0803%" height="15" fill="rgb(252,45,11)" fg:x="849" fg:w="1"/><text x="68.3880%" y="303.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="68.2183%" y="341" width="0.1605%" height="15" fill="rgb(220,125,38)" fg:x="850" fg:w="2"/><text x="68.4683%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="68.2183%" y="325" width="0.1605%" height="15" fill="rgb(243,161,33)" fg:x="850" fg:w="2"/><text x="68.4683%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="68.2183%" y="309" width="0.1605%" height="15" fill="rgb(248,197,34)" fg:x="850" fg:w="2"/><text x="68.4683%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.2183%" y="293" width="0.1605%" height="15" fill="rgb(228,165,23)" fg:x="850" fg:w="2"/><text x="68.4683%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="68.2183%" y="277" width="0.1605%" height="15" fill="rgb(236,94,38)" fg:x="850" fg:w="2"/><text x="68.4683%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.2183%" y="261" width="0.1605%" height="15" fill="rgb(220,13,23)" fg:x="850" fg:w="2"/><text x="68.4683%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="68.2183%" y="245" width="0.1605%" height="15" fill="rgb(234,26,39)" fg:x="850" fg:w="2"/><text x="68.4683%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="68.2986%" y="229" width="0.0803%" height="15" fill="rgb(205,117,44)" fg:x="851" fg:w="1"/><text x="68.5486%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="68.2986%" y="213" width="0.0803%" height="15" fill="rgb(250,42,2)" fg:x="851" fg:w="1"/><text x="68.5486%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.3788%" y="261" width="0.0803%" height="15" fill="rgb(223,83,14)" fg:x="852" fg:w="1"/><text x="68.6288%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="68.3788%" y="245" width="0.0803%" height="15" fill="rgb(241,147,50)" fg:x="852" fg:w="1"/><text x="68.6288%" y="255.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (4 samples, 0.32%)</title><rect x="68.2183%" y="357" width="0.3210%" height="15" fill="rgb(218,90,6)" fg:x="850" fg:w="4"/><text x="68.4683%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="68.3788%" y="341" width="0.1605%" height="15" fill="rgb(210,191,5)" fg:x="852" fg:w="2"/><text x="68.6288%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="68.3788%" y="325" width="0.1605%" height="15" fill="rgb(225,139,19)" fg:x="852" fg:w="2"/><text x="68.6288%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.3788%" y="309" width="0.1605%" height="15" fill="rgb(210,1,33)" fg:x="852" fg:w="2"/><text x="68.6288%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="68.3788%" y="293" width="0.1605%" height="15" fill="rgb(213,50,3)" fg:x="852" fg:w="2"/><text x="68.6288%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.3788%" y="277" width="0.1605%" height="15" fill="rgb(234,227,4)" fg:x="852" fg:w="2"/><text x="68.6288%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.4591%" y="261" width="0.0803%" height="15" fill="rgb(246,63,5)" fg:x="853" fg:w="1"/><text x="68.7091%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.4591%" y="245" width="0.0803%" height="15" fill="rgb(245,136,27)" fg:x="853" fg:w="1"/><text x="68.7091%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.4591%" y="229" width="0.0803%" height="15" fill="rgb(247,199,27)" fg:x="853" fg:w="1"/><text x="68.7091%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.4591%" y="213" width="0.0803%" height="15" fill="rgb(252,158,49)" fg:x="853" fg:w="1"/><text x="68.7091%" y="223.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.6196%" y="245" width="0.0803%" height="15" fill="rgb(254,73,1)" fg:x="855" fg:w="1"/><text x="68.8696%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.6998%" y="197" width="0.0803%" height="15" fill="rgb(248,93,19)" fg:x="856" fg:w="1"/><text x="68.9498%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.6998%" y="181" width="0.0803%" height="15" fill="rgb(206,67,5)" fg:x="856" fg:w="1"/><text x="68.9498%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.6998%" y="165" width="0.0803%" height="15" fill="rgb(209,210,4)" fg:x="856" fg:w="1"/><text x="68.9498%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.6998%" y="149" width="0.0803%" height="15" fill="rgb(214,185,36)" fg:x="856" fg:w="1"/><text x="68.9498%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.6998%" y="133" width="0.0803%" height="15" fill="rgb(233,191,26)" fg:x="856" fg:w="1"/><text x="68.9498%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="68.7801%" y="197" width="0.0803%" height="15" fill="rgb(248,94,17)" fg:x="857" fg:w="1"/><text x="69.0301%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="68.7801%" y="181" width="0.0803%" height="15" fill="rgb(250,64,4)" fg:x="857" fg:w="1"/><text x="69.0301%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="68.7801%" y="165" width="0.0803%" height="15" fill="rgb(218,41,53)" fg:x="857" fg:w="1"/><text x="69.0301%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="68.7801%" y="149" width="0.0803%" height="15" fill="rgb(251,176,28)" fg:x="857" fg:w="1"/><text x="69.0301%" y="159.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.7801%" y="133" width="0.0803%" height="15" fill="rgb(247,22,9)" fg:x="857" fg:w="1"/><text x="69.0301%" y="143.50"></text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (283 samples, 22.71%)</title><rect x="46.2279%" y="421" width="22.7127%" height="15" fill="rgb(218,201,14)" fg:x="576" fg:w="283"/><text x="46.4779%" y="431.50">&lt;engine::session::state::State as ke..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (283 samples, 22.71%)</title><rect x="46.2279%" y="405" width="22.7127%" height="15" fill="rgb(218,94,10)" fg:x="576" fg:w="283"/><text x="46.4779%" y="415.50">&lt;plugins_core::looking::actions::Loo..</text></g><g><title>plugins_core::looking::model::new_area_observation (272 samples, 21.83%)</title><rect x="47.1108%" y="389" width="21.8299%" height="15" fill="rgb(222,183,52)" fg:x="587" fg:w="272"/><text x="47.3608%" y="399.50">plugins_core::looking::model::new_..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.72%)</title><rect x="68.2183%" y="373" width="0.7223%" height="15" fill="rgb(242,140,25)" fg:x="850" fg:w="9"/><text x="68.4683%" y="383.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (5 samples, 0.40%)</title><rect x="68.5393%" y="357" width="0.4013%" height="15" fill="rgb(235,197,38)" fg:x="854" fg:w="5"/><text x="68.7893%" y="367.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (5 samples, 0.40%)</title><rect x="68.5393%" y="341" width="0.4013%" height="15" fill="rgb(237,136,15)" fg:x="854" fg:w="5"/><text x="68.7893%" y="351.50"></text></g><g><title>engine::session::Session::load_entity (5 samples, 0.40%)</title><rect x="68.5393%" y="325" width="0.4013%" height="15" fill="rgb(223,44,49)" fg:x="854" fg:w="5"/><text x="68.7893%" y="335.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="68.5393%" y="309" width="0.4013%" height="15" fill="rgb(227,71,15)" fg:x="854" fg:w="5"/><text x="68.7893%" y="319.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.40%)</title><rect x="68.5393%" y="293" width="0.4013%" height="15" fill="rgb(225,153,20)" fg:x="854" fg:w="5"/><text x="68.7893%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="68.5393%" y="277" width="0.4013%" height="15" fill="rgb(210,190,26)" fg:x="854" fg:w="5"/><text x="68.7893%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="68.5393%" y="261" width="0.4013%" height="15" fill="rgb(223,147,5)" fg:x="854" fg:w="5"/><text x="68.7893%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="68.6998%" y="245" width="0.2408%" height="15" fill="rgb(207,14,23)" fg:x="856" fg:w="3"/><text x="68.9498%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="68.6998%" y="229" width="0.2408%" height="15" fill="rgb(211,195,53)" fg:x="856" fg:w="3"/><text x="68.9498%" y="239.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="68.6998%" y="213" width="0.2408%" height="15" fill="rgb(237,75,46)" fg:x="856" fg:w="3"/><text x="68.9498%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.8604%" y="197" width="0.0803%" height="15" fill="rgb(254,55,14)" fg:x="858" fg:w="1"/><text x="69.1104%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.8604%" y="181" width="0.0803%" height="15" fill="rgb(230,185,30)" fg:x="858" fg:w="1"/><text x="69.1104%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="68.8604%" y="165" width="0.0803%" height="15" fill="rgb(220,14,11)" fg:x="858" fg:w="1"/><text x="69.1104%" y="175.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.8604%" y="149" width="0.0803%" height="15" fill="rgb(215,169,44)" fg:x="858" fg:w="1"/><text x="69.1104%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.8604%" y="133" width="0.0803%" height="15" fill="rgb(253,203,20)" fg:x="858" fg:w="1"/><text x="69.1104%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="68.8604%" y="117" width="0.0803%" height="15" fill="rgb(229,225,17)" fg:x="858" fg:w="1"/><text x="69.1104%" y="127.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (286 samples, 22.95%)</title><rect x="46.0674%" y="533" width="22.9535%" height="15" fill="rgb(236,76,26)" fg:x="574" fg:w="286"/><text x="46.3174%" y="543.50">kernel::plugins::mw::MiddlewareNext:..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (286 samples, 22.95%)</title><rect x="46.0674%" y="517" width="22.9535%" height="15" fill="rgb(234,15,30)" fg:x="574" fg:w="286"/><text x="46.3174%" y="527.50">&lt;plugins_dynlib::DynamicMiddleware a..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (285 samples, 22.87%)</title><rect x="46.1477%" y="501" width="22.8732%" height="15" fill="rgb(211,113,48)" fg:x="575" fg:w="285"/><text x="46.3977%" y="511.50">kernel::plugins::mw::MiddlewareNext:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (284 samples, 22.79%)</title><rect x="46.2279%" y="485" width="22.7929%" height="15" fill="rgb(221,31,36)" fg:x="576" fg:w="284"/><text x="46.4779%" y="495.50">core::ops::function::FnOnce::call_on..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (284 samples, 22.79%)</title><rect x="46.2279%" y="469" width="22.7929%" height="15" fill="rgb(215,118,52)" fg:x="576" fg:w="284"/><text x="46.4779%" y="479.50">kernel::plugins::mw::MiddlewareNext:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (284 samples, 22.79%)</title><rect x="46.2279%" y="453" width="22.7929%" height="15" fill="rgb(241,151,27)" fg:x="576" fg:w="284"/><text x="46.4779%" y="463.50">core::ops::function::FnOnce::call_on..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (284 samples, 22.79%)</title><rect x="46.2279%" y="437" width="22.7929%" height="15" fill="rgb(253,51,3)" fg:x="576" fg:w="284"/><text x="46.4779%" y="447.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.9406%" y="421" width="0.0803%" height="15" fill="rgb(216,201,24)" fg:x="859" fg:w="1"/><text x="69.1906%" y="431.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.0209%" y="517" width="0.0803%" height="15" fill="rgb(231,107,4)" fg:x="860" fg:w="1"/><text x="69.2709%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.1011%" y="501" width="0.0803%" height="15" fill="rgb(243,97,54)" fg:x="861" fg:w="1"/><text x="69.3511%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="69.2616%" y="469" width="0.0803%" height="15" fill="rgb(221,32,51)" fg:x="863" fg:w="1"/><text x="69.5116%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="69.4222%" y="437" width="0.1605%" height="15" fill="rgb(218,171,35)" fg:x="865" fg:w="2"/><text x="69.6722%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.4222%" y="421" width="0.1605%" height="15" fill="rgb(214,20,53)" fg:x="865" fg:w="2"/><text x="69.6722%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.5024%" y="405" width="0.0803%" height="15" fill="rgb(239,9,52)" fg:x="866" fg:w="1"/><text x="69.7524%" y="415.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (6 samples, 0.48%)</title><rect x="69.1814%" y="485" width="0.4815%" height="15" fill="rgb(215,114,45)" fg:x="862" fg:w="6"/><text x="69.4314%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="69.3419%" y="469" width="0.3210%" height="15" fill="rgb(208,118,9)" fg:x="864" fg:w="4"/><text x="69.5919%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="69.3419%" y="453" width="0.3210%" height="15" fill="rgb(235,7,39)" fg:x="864" fg:w="4"/><text x="69.5919%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="69.5827%" y="437" width="0.0803%" height="15" fill="rgb(243,225,15)" fg:x="867" fg:w="1"/><text x="69.8327%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="69.5827%" y="421" width="0.0803%" height="15" fill="rgb(225,216,18)" fg:x="867" fg:w="1"/><text x="69.8327%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="69.5827%" y="405" width="0.0803%" height="15" fill="rgb(233,36,38)" fg:x="867" fg:w="1"/><text x="69.8327%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.5827%" y="389" width="0.0803%" height="15" fill="rgb(239,88,23)" fg:x="867" fg:w="1"/><text x="69.8327%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.5827%" y="373" width="0.0803%" height="15" fill="rgb(219,181,35)" fg:x="867" fg:w="1"/><text x="69.8327%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.6629%" y="421" width="0.1605%" height="15" fill="rgb(215,18,46)" fg:x="868" fg:w="2"/><text x="69.9129%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.6629%" y="405" width="0.1605%" height="15" fill="rgb(241,38,11)" fg:x="868" fg:w="2"/><text x="69.9129%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.6629%" y="389" width="0.1605%" height="15" fill="rgb(248,169,45)" fg:x="868" fg:w="2"/><text x="69.9129%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.7432%" y="373" width="0.0803%" height="15" fill="rgb(239,50,49)" fg:x="869" fg:w="1"/><text x="69.9932%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.7432%" y="357" width="0.0803%" height="15" fill="rgb(231,96,31)" fg:x="869" fg:w="1"/><text x="69.9932%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.7432%" y="341" width="0.0803%" height="15" fill="rgb(224,193,37)" fg:x="869" fg:w="1"/><text x="69.9932%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.8234%" y="261" width="0.0803%" height="15" fill="rgb(227,153,50)" fg:x="870" fg:w="1"/><text x="70.0734%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.8234%" y="245" width="0.0803%" height="15" fill="rgb(249,228,3)" fg:x="870" fg:w="1"/><text x="70.0734%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.8234%" y="229" width="0.0803%" height="15" fill="rgb(219,164,43)" fg:x="870" fg:w="1"/><text x="70.0734%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="69.8234%" y="213" width="0.0803%" height="15" fill="rgb(216,45,41)" fg:x="870" fg:w="1"/><text x="70.0734%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="69.8234%" y="197" width="0.0803%" height="15" fill="rgb(210,226,51)" fg:x="870" fg:w="1"/><text x="70.0734%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="69.8234%" y="325" width="0.1605%" height="15" fill="rgb(209,117,49)" fg:x="870" fg:w="2"/><text x="70.0734%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.8234%" y="309" width="0.1605%" height="15" fill="rgb(206,196,24)" fg:x="870" fg:w="2"/><text x="70.0734%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="69.8234%" y="293" width="0.1605%" height="15" fill="rgb(253,218,3)" fg:x="870" fg:w="2"/><text x="70.0734%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.8234%" y="277" width="0.1605%" height="15" fill="rgb(252,166,2)" fg:x="870" fg:w="2"/><text x="70.0734%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.9037%" y="261" width="0.0803%" height="15" fill="rgb(236,218,26)" fg:x="871" fg:w="1"/><text x="70.1537%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.9839%" y="293" width="0.0803%" height="15" fill="rgb(254,84,19)" fg:x="872" fg:w="1"/><text x="70.2339%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (3 samples, 0.24%)</title><rect x="69.9839%" y="325" width="0.2408%" height="15" fill="rgb(219,137,29)" fg:x="872" fg:w="3"/><text x="70.2339%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="69.9839%" y="309" width="0.2408%" height="15" fill="rgb(227,47,52)" fg:x="872" fg:w="3"/><text x="70.2339%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="70.0642%" y="293" width="0.1605%" height="15" fill="rgb(229,167,24)" fg:x="873" fg:w="2"/><text x="70.3142%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="70.1445%" y="277" width="0.0803%" height="15" fill="rgb(233,164,1)" fg:x="874" fg:w="1"/><text x="70.3945%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.1445%" y="261" width="0.0803%" height="15" fill="rgb(218,88,48)" fg:x="874" fg:w="1"/><text x="70.3945%" y="271.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="70.2247%" y="277" width="0.0803%" height="15" fill="rgb(226,214,24)" fg:x="875" fg:w="1"/><text x="70.4747%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="70.2247%" y="261" width="0.0803%" height="15" fill="rgb(233,29,12)" fg:x="875" fg:w="1"/><text x="70.4747%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.2247%" y="245" width="0.0803%" height="15" fill="rgb(219,120,34)" fg:x="875" fg:w="1"/><text x="70.4747%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.2247%" y="229" width="0.0803%" height="15" fill="rgb(226,78,44)" fg:x="875" fg:w="1"/><text x="70.4747%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.2247%" y="213" width="0.0803%" height="15" fill="rgb(240,15,48)" fg:x="875" fg:w="1"/><text x="70.4747%" y="223.50"></text></g><g><title>kernel::model::entity::Entity::from_value (8 samples, 0.64%)</title><rect x="69.8234%" y="421" width="0.6421%" height="15" fill="rgb(253,176,7)" fg:x="870" fg:w="8"/><text x="70.0734%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (8 samples, 0.64%)</title><rect x="69.8234%" y="405" width="0.6421%" height="15" fill="rgb(206,166,28)" fg:x="870" fg:w="8"/><text x="70.0734%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.64%)</title><rect x="69.8234%" y="389" width="0.6421%" height="15" fill="rgb(241,53,51)" fg:x="870" fg:w="8"/><text x="70.0734%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (8 samples, 0.64%)</title><rect x="69.8234%" y="373" width="0.6421%" height="15" fill="rgb(249,112,30)" fg:x="870" fg:w="8"/><text x="70.0734%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.64%)</title><rect x="69.8234%" y="357" width="0.6421%" height="15" fill="rgb(217,85,30)" fg:x="870" fg:w="8"/><text x="70.0734%" y="367.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (8 samples, 0.64%)</title><rect x="69.8234%" y="341" width="0.6421%" height="15" fill="rgb(233,49,7)" fg:x="870" fg:w="8"/><text x="70.0734%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="70.2247%" y="325" width="0.2408%" height="15" fill="rgb(234,109,9)" fg:x="875" fg:w="3"/><text x="70.4747%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="70.2247%" y="309" width="0.2408%" height="15" fill="rgb(253,95,22)" fg:x="875" fg:w="3"/><text x="70.4747%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (3 samples, 0.24%)</title><rect x="70.2247%" y="293" width="0.2408%" height="15" fill="rgb(233,176,25)" fg:x="875" fg:w="3"/><text x="70.4747%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.3050%" y="277" width="0.1605%" height="15" fill="rgb(236,33,39)" fg:x="876" fg:w="2"/><text x="70.5550%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="70.3050%" y="261" width="0.1605%" height="15" fill="rgb(223,226,42)" fg:x="876" fg:w="2"/><text x="70.5550%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="70.3852%" y="245" width="0.0803%" height="15" fill="rgb(216,99,33)" fg:x="877" fg:w="1"/><text x="70.6352%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.3852%" y="229" width="0.0803%" height="15" fill="rgb(235,84,23)" fg:x="877" fg:w="1"/><text x="70.6352%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.3852%" y="213" width="0.0803%" height="15" fill="rgb(232,2,27)" fg:x="877" fg:w="1"/><text x="70.6352%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.3852%" y="197" width="0.0803%" height="15" fill="rgb(241,23,22)" fg:x="877" fg:w="1"/><text x="70.6352%" y="207.50"></text></g><g><title>plugins_core::tools::contained_by (17 samples, 1.36%)</title><rect x="69.1814%" y="501" width="1.3644%" height="15" fill="rgb(211,73,27)" fg:x="862" fg:w="17"/><text x="69.4314%" y="511.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (11 samples, 0.88%)</title><rect x="69.6629%" y="485" width="0.8828%" height="15" fill="rgb(235,109,49)" fg:x="868" fg:w="11"/><text x="69.9129%" y="495.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (11 samples, 0.88%)</title><rect x="69.6629%" y="469" width="0.8828%" height="15" fill="rgb(230,99,29)" fg:x="868" fg:w="11"/><text x="69.9129%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (11 samples, 0.88%)</title><rect x="69.6629%" y="453" width="0.8828%" height="15" fill="rgb(245,199,7)" fg:x="868" fg:w="11"/><text x="69.9129%" y="463.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (11 samples, 0.88%)</title><rect x="69.6629%" y="437" width="0.8828%" height="15" fill="rgb(217,179,10)" fg:x="868" fg:w="11"/><text x="69.9129%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="70.4655%" y="421" width="0.0803%" height="15" fill="rgb(254,99,47)" fg:x="878" fg:w="1"/><text x="70.7155%" y="431.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="70.4655%" y="405" width="0.0803%" height="15" fill="rgb(251,121,7)" fg:x="878" fg:w="1"/><text x="70.7155%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.4655%" y="389" width="0.0803%" height="15" fill="rgb(250,177,26)" fg:x="878" fg:w="1"/><text x="70.7155%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.4655%" y="373" width="0.0803%" height="15" fill="rgb(232,88,15)" fg:x="878" fg:w="1"/><text x="70.7155%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.4655%" y="357" width="0.0803%" height="15" fill="rgb(251,54,54)" fg:x="878" fg:w="1"/><text x="70.7155%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.4655%" y="341" width="0.0803%" height="15" fill="rgb(208,177,15)" fg:x="878" fg:w="1"/><text x="70.7155%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.4655%" y="325" width="0.0803%" height="15" fill="rgb(205,97,32)" fg:x="878" fg:w="1"/><text x="70.7155%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.4655%" y="309" width="0.0803%" height="15" fill="rgb(217,192,13)" fg:x="878" fg:w="1"/><text x="70.7155%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.4655%" y="293" width="0.0803%" height="15" fill="rgb(215,163,41)" fg:x="878" fg:w="1"/><text x="70.7155%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.4655%" y="277" width="0.0803%" height="15" fill="rgb(246,83,29)" fg:x="878" fg:w="1"/><text x="70.7155%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.4655%" y="261" width="0.0803%" height="15" fill="rgb(219,2,45)" fg:x="878" fg:w="1"/><text x="70.7155%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.7063%" y="421" width="0.0803%" height="15" fill="rgb(242,215,33)" fg:x="881" fg:w="1"/><text x="70.9563%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.7063%" y="405" width="0.0803%" height="15" fill="rgb(217,1,6)" fg:x="881" fg:w="1"/><text x="70.9563%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="70.7063%" y="469" width="0.1605%" height="15" fill="rgb(207,85,52)" fg:x="881" fg:w="2"/><text x="70.9563%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="70.7063%" y="453" width="0.1605%" height="15" fill="rgb(231,171,19)" fg:x="881" fg:w="2"/><text x="70.9563%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="70.7063%" y="437" width="0.1605%" height="15" fill="rgb(207,128,4)" fg:x="881" fg:w="2"/><text x="70.9563%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.7865%" y="421" width="0.0803%" height="15" fill="rgb(219,208,4)" fg:x="882" fg:w="1"/><text x="71.0365%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.7865%" y="405" width="0.0803%" height="15" fill="rgb(235,161,42)" fg:x="882" fg:w="1"/><text x="71.0365%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.7865%" y="389" width="0.0803%" height="15" fill="rgb(247,218,18)" fg:x="882" fg:w="1"/><text x="71.0365%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.7865%" y="373" width="0.0803%" height="15" fill="rgb(232,114,51)" fg:x="882" fg:w="1"/><text x="71.0365%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.7865%" y="357" width="0.0803%" height="15" fill="rgb(222,95,3)" fg:x="882" fg:w="1"/><text x="71.0365%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.7865%" y="341" width="0.0803%" height="15" fill="rgb(240,65,29)" fg:x="882" fg:w="1"/><text x="71.0365%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.7865%" y="325" width="0.0803%" height="15" fill="rgb(249,209,20)" fg:x="882" fg:w="1"/><text x="71.0365%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.7865%" y="309" width="0.0803%" height="15" fill="rgb(241,48,37)" fg:x="882" fg:w="1"/><text x="71.0365%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.7865%" y="293" width="0.0803%" height="15" fill="rgb(230,140,42)" fg:x="882" fg:w="1"/><text x="71.0365%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.7865%" y="277" width="0.0803%" height="15" fill="rgb(230,176,45)" fg:x="882" fg:w="1"/><text x="71.0365%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.7865%" y="261" width="0.0803%" height="15" fill="rgb(245,112,21)" fg:x="882" fg:w="1"/><text x="71.0365%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.7865%" y="245" width="0.0803%" height="15" fill="rgb(207,183,35)" fg:x="882" fg:w="1"/><text x="71.0365%" y="255.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (26 samples, 2.09%)</title><rect x="69.1011%" y="517" width="2.0867%" height="15" fill="rgb(227,44,33)" fg:x="861" fg:w="26"/><text x="69.3511%" y="527.50">p..</text></g><g><title>plugins_core::tools::occupied_by (8 samples, 0.64%)</title><rect x="70.5457%" y="501" width="0.6421%" height="15" fill="rgb(246,120,21)" fg:x="879" fg:w="8"/><text x="70.7957%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (7 samples, 0.56%)</title><rect x="70.6260%" y="485" width="0.5618%" height="15" fill="rgb(235,57,52)" fg:x="880" fg:w="7"/><text x="70.8760%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="70.8668%" y="469" width="0.3210%" height="15" fill="rgb(238,84,10)" fg:x="883" fg:w="4"/><text x="71.1168%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="70.8668%" y="453" width="0.3210%" height="15" fill="rgb(251,200,32)" fg:x="883" fg:w="4"/><text x="71.1168%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="71.0273%" y="437" width="0.1605%" height="15" fill="rgb(247,159,13)" fg:x="885" fg:w="2"/><text x="71.2773%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="71.0273%" y="421" width="0.1605%" height="15" fill="rgb(238,64,4)" fg:x="885" fg:w="2"/><text x="71.2773%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="71.0273%" y="405" width="0.1605%" height="15" fill="rgb(221,131,51)" fg:x="885" fg:w="2"/><text x="71.2773%" y="415.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (2 samples, 0.16%)</title><rect x="71.0273%" y="389" width="0.1605%" height="15" fill="rgb(242,5,29)" fg:x="885" fg:w="2"/><text x="71.2773%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.0273%" y="373" width="0.1605%" height="15" fill="rgb(214,130,32)" fg:x="885" fg:w="2"/><text x="71.2773%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.0273%" y="357" width="0.1605%" height="15" fill="rgb(244,210,16)" fg:x="885" fg:w="2"/><text x="71.2773%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.1075%" y="341" width="0.0803%" height="15" fill="rgb(234,48,26)" fg:x="886" fg:w="1"/><text x="71.3575%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.1075%" y="325" width="0.0803%" height="15" fill="rgb(231,82,38)" fg:x="886" fg:w="1"/><text x="71.3575%" y="335.50"></text></g><g><title>engine::session::Session::captured (341 samples, 27.37%)</title><rect x="43.9005%" y="677" width="27.3676%" height="15" fill="rgb(254,128,41)" fg:x="547" fg:w="341"/><text x="44.1505%" y="687.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (340 samples, 27.29%)</title><rect x="43.9807%" y="661" width="27.2873%" height="15" fill="rgb(212,73,49)" fg:x="548" fg:w="340"/><text x="44.2307%" y="671.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (335 samples, 26.89%)</title><rect x="44.3820%" y="645" width="26.8860%" height="15" fill="rgb(205,62,54)" fg:x="553" fg:w="335"/><text x="44.6320%" y="655.50">tracing_core::dispatcher::with_default</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (335 samples, 26.89%)</title><rect x="44.3820%" y="629" width="26.8860%" height="15" fill="rgb(228,0,8)" fg:x="553" fg:w="335"/><text x="44.6320%" y="639.50">&lt;engine::session::Session as kernel::action..</text></g><g><title>kernel::plugins::mw::apply_middleware (335 samples, 26.89%)</title><rect x="44.3820%" y="613" width="26.8860%" height="15" fill="rgb(251,28,17)" fg:x="553" fg:w="335"/><text x="44.6320%" y="623.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (335 samples, 26.89%)</title><rect x="44.3820%" y="597" width="26.8860%" height="15" fill="rgb(238,105,27)" fg:x="553" fg:w="335"/><text x="44.6320%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (335 samples, 26.89%)</title><rect x="44.3820%" y="581" width="26.8860%" height="15" fill="rgb(237,216,33)" fg:x="553" fg:w="335"/><text x="44.6320%" y="591.50">&lt;engine::session::ExpandSurroundingsMiddlew..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (316 samples, 25.36%)</title><rect x="45.9069%" y="565" width="25.3612%" height="15" fill="rgb(229,228,25)" fg:x="572" fg:w="316"/><text x="46.1569%" y="575.50">kernel::plugins::mw::MiddlewareNext::han..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (316 samples, 25.36%)</title><rect x="45.9069%" y="549" width="25.3612%" height="15" fill="rgb(233,75,23)" fg:x="572" fg:w="316"/><text x="46.1569%" y="559.50">&lt;plugins_rune::RuneMiddleware as kernel:..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (28 samples, 2.25%)</title><rect x="69.0209%" y="533" width="2.2472%" height="15" fill="rgb(231,207,16)" fg:x="860" fg:w="28"/><text x="69.2709%" y="543.50">p..</text></g><g><title>plugins_rune::sources::load_sources_from_entity (1 samples, 0.08%)</title><rect x="71.1878%" y="517" width="0.0803%" height="15" fill="rgb(231,191,45)" fg:x="887" fg:w="1"/><text x="71.4378%" y="527.50"></text></g><g><title>plugins_rune::sources::get_script (1 samples, 0.08%)</title><rect x="71.1878%" y="501" width="0.0803%" height="15" fill="rgb(224,133,17)" fg:x="887" fg:w="1"/><text x="71.4378%" y="511.50"></text></g><g><title>&lt;replies::TaggedJson as serde::de::Deserialize&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.1878%" y="485" width="0.0803%" height="15" fill="rgb(209,178,27)" fg:x="887" fg:w="1"/><text x="71.4378%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.2681%" y="581" width="0.1605%" height="15" fill="rgb(218,37,11)" fg:x="888" fg:w="2"/><text x="71.5181%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.3483%" y="565" width="0.0803%" height="15" fill="rgb(251,226,25)" fg:x="889" fg:w="1"/><text x="71.5983%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.3483%" y="549" width="0.0803%" height="15" fill="rgb(209,222,27)" fg:x="889" fg:w="1"/><text x="71.5983%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.4286%" y="549" width="0.0803%" height="15" fill="rgb(238,22,21)" fg:x="890" fg:w="1"/><text x="71.6786%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.4286%" y="533" width="0.0803%" height="15" fill="rgb(233,161,25)" fg:x="890" fg:w="1"/><text x="71.6786%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.4286%" y="517" width="0.0803%" height="15" fill="rgb(226,122,53)" fg:x="890" fg:w="1"/><text x="71.6786%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.4286%" y="501" width="0.0803%" height="15" fill="rgb(220,123,17)" fg:x="890" fg:w="1"/><text x="71.6786%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.4286%" y="485" width="0.0803%" height="15" fill="rgb(230,224,35)" fg:x="890" fg:w="1"/><text x="71.6786%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.4286%" y="469" width="0.0803%" height="15" fill="rgb(246,83,8)" fg:x="890" fg:w="1"/><text x="71.6786%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.4286%" y="453" width="0.0803%" height="15" fill="rgb(230,214,17)" fg:x="890" fg:w="1"/><text x="71.6786%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.4286%" y="437" width="0.0803%" height="15" fill="rgb(222,97,18)" fg:x="890" fg:w="1"/><text x="71.6786%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.4286%" y="421" width="0.0803%" height="15" fill="rgb(206,79,1)" fg:x="890" fg:w="1"/><text x="71.6786%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.4286%" y="405" width="0.0803%" height="15" fill="rgb(214,121,34)" fg:x="890" fg:w="1"/><text x="71.6786%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.4286%" y="389" width="0.0803%" height="15" fill="rgb(249,199,46)" fg:x="890" fg:w="1"/><text x="71.6786%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.4286%" y="373" width="0.0803%" height="15" fill="rgb(214,222,46)" fg:x="890" fg:w="1"/><text x="71.6786%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="71.2681%" y="597" width="0.3210%" height="15" fill="rgb(248,168,30)" fg:x="888" fg:w="4"/><text x="71.5181%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="71.4286%" y="581" width="0.1605%" height="15" fill="rgb(226,14,28)" fg:x="890" fg:w="2"/><text x="71.6786%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.4286%" y="565" width="0.1605%" height="15" fill="rgb(253,123,1)" fg:x="890" fg:w="2"/><text x="71.6786%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.5088%" y="549" width="0.0803%" height="15" fill="rgb(225,24,42)" fg:x="891" fg:w="1"/><text x="71.7588%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.5891%" y="517" width="0.0803%" height="15" fill="rgb(216,161,37)" fg:x="892" fg:w="1"/><text x="71.8391%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.5891%" y="501" width="0.0803%" height="15" fill="rgb(251,164,26)" fg:x="892" fg:w="1"/><text x="71.8391%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.5891%" y="485" width="0.0803%" height="15" fill="rgb(219,177,3)" fg:x="892" fg:w="1"/><text x="71.8391%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.5891%" y="469" width="0.0803%" height="15" fill="rgb(222,65,0)" fg:x="892" fg:w="1"/><text x="71.8391%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.5891%" y="453" width="0.0803%" height="15" fill="rgb(223,69,54)" fg:x="892" fg:w="1"/><text x="71.8391%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.5891%" y="437" width="0.0803%" height="15" fill="rgb(235,30,27)" fg:x="892" fg:w="1"/><text x="71.8391%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.5891%" y="421" width="0.0803%" height="15" fill="rgb(220,183,50)" fg:x="892" fg:w="1"/><text x="71.8391%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (6 samples, 0.48%)</title><rect x="71.2681%" y="629" width="0.4815%" height="15" fill="rgb(248,198,15)" fg:x="888" fg:w="6"/><text x="71.5181%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (6 samples, 0.48%)</title><rect x="71.2681%" y="613" width="0.4815%" height="15" fill="rgb(222,211,4)" fg:x="888" fg:w="6"/><text x="71.5181%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="71.5891%" y="597" width="0.1605%" height="15" fill="rgb(214,102,34)" fg:x="892" fg:w="2"/><text x="71.8391%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="71.5891%" y="581" width="0.1605%" height="15" fill="rgb(245,92,5)" fg:x="892" fg:w="2"/><text x="71.8391%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="71.5891%" y="565" width="0.1605%" height="15" fill="rgb(252,72,51)" fg:x="892" fg:w="2"/><text x="71.8391%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="71.5891%" y="549" width="0.1605%" height="15" fill="rgb(252,208,19)" fg:x="892" fg:w="2"/><text x="71.8391%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="71.5891%" y="533" width="0.1605%" height="15" fill="rgb(211,69,7)" fg:x="892" fg:w="2"/><text x="71.8391%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="71.6693%" y="517" width="0.0803%" height="15" fill="rgb(211,27,16)" fg:x="893" fg:w="1"/><text x="71.9193%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="71.6693%" y="501" width="0.0803%" height="15" fill="rgb(219,216,14)" fg:x="893" fg:w="1"/><text x="71.9193%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.7496%" y="581" width="0.1605%" height="15" fill="rgb(219,71,8)" fg:x="894" fg:w="2"/><text x="71.9996%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.8299%" y="565" width="0.0803%" height="15" fill="rgb(223,170,53)" fg:x="895" fg:w="1"/><text x="72.0799%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.8299%" y="549" width="0.0803%" height="15" fill="rgb(246,21,26)" fg:x="895" fg:w="1"/><text x="72.0799%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.8299%" y="533" width="0.0803%" height="15" fill="rgb(248,20,46)" fg:x="895" fg:w="1"/><text x="72.0799%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.8299%" y="517" width="0.0803%" height="15" fill="rgb(252,94,11)" fg:x="895" fg:w="1"/><text x="72.0799%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.8299%" y="501" width="0.0803%" height="15" fill="rgb(236,163,8)" fg:x="895" fg:w="1"/><text x="72.0799%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.8299%" y="485" width="0.0803%" height="15" fill="rgb(217,221,45)" fg:x="895" fg:w="1"/><text x="72.0799%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.8299%" y="469" width="0.0803%" height="15" fill="rgb(238,38,17)" fg:x="895" fg:w="1"/><text x="72.0799%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.8299%" y="453" width="0.0803%" height="15" fill="rgb(242,210,23)" fg:x="895" fg:w="1"/><text x="72.0799%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.8299%" y="437" width="0.0803%" height="15" fill="rgb(250,86,53)" fg:x="895" fg:w="1"/><text x="72.0799%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.8299%" y="421" width="0.0803%" height="15" fill="rgb(223,168,25)" fg:x="895" fg:w="1"/><text x="72.0799%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.8299%" y="405" width="0.0803%" height="15" fill="rgb(251,189,4)" fg:x="895" fg:w="1"/><text x="72.0799%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.8299%" y="389" width="0.0803%" height="15" fill="rgb(245,19,28)" fg:x="895" fg:w="1"/><text x="72.0799%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.8299%" y="373" width="0.0803%" height="15" fill="rgb(207,10,34)" fg:x="895" fg:w="1"/><text x="72.0799%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.8299%" y="357" width="0.0803%" height="15" fill="rgb(235,153,31)" fg:x="895" fg:w="1"/><text x="72.0799%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.8299%" y="341" width="0.0803%" height="15" fill="rgb(228,72,37)" fg:x="895" fg:w="1"/><text x="72.0799%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.9904%" y="533" width="0.0803%" height="15" fill="rgb(215,15,16)" fg:x="897" fg:w="1"/><text x="72.2404%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.9904%" y="517" width="0.0803%" height="15" fill="rgb(250,119,29)" fg:x="897" fg:w="1"/><text x="72.2404%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.9904%" y="501" width="0.0803%" height="15" fill="rgb(214,59,1)" fg:x="897" fg:w="1"/><text x="72.2404%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.9904%" y="485" width="0.0803%" height="15" fill="rgb(223,109,25)" fg:x="897" fg:w="1"/><text x="72.2404%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.9904%" y="469" width="0.0803%" height="15" fill="rgb(230,198,22)" fg:x="897" fg:w="1"/><text x="72.2404%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.9904%" y="453" width="0.0803%" height="15" fill="rgb(245,184,46)" fg:x="897" fg:w="1"/><text x="72.2404%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.9904%" y="437" width="0.0803%" height="15" fill="rgb(253,73,16)" fg:x="897" fg:w="1"/><text x="72.2404%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.9904%" y="421" width="0.0803%" height="15" fill="rgb(206,94,45)" fg:x="897" fg:w="1"/><text x="72.2404%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.9904%" y="405" width="0.0803%" height="15" fill="rgb(236,83,27)" fg:x="897" fg:w="1"/><text x="72.2404%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.9904%" y="389" width="0.0803%" height="15" fill="rgb(220,196,8)" fg:x="897" fg:w="1"/><text x="72.2404%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.9904%" y="373" width="0.0803%" height="15" fill="rgb(254,185,14)" fg:x="897" fg:w="1"/><text x="72.2404%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.9904%" y="357" width="0.0803%" height="15" fill="rgb(226,50,22)" fg:x="897" fg:w="1"/><text x="72.2404%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.9904%" y="341" width="0.0803%" height="15" fill="rgb(253,147,0)" fg:x="897" fg:w="1"/><text x="72.2404%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.9904%" y="325" width="0.0803%" height="15" fill="rgb(252,46,33)" fg:x="897" fg:w="1"/><text x="72.2404%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.9904%" y="309" width="0.0803%" height="15" fill="rgb(242,22,54)" fg:x="897" fg:w="1"/><text x="72.2404%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.1509%" y="405" width="0.0803%" height="15" fill="rgb(223,178,32)" fg:x="899" fg:w="1"/><text x="72.4009%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="72.1509%" y="485" width="0.2408%" height="15" fill="rgb(214,106,53)" fg:x="899" fg:w="3"/><text x="72.4009%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="72.1509%" y="469" width="0.2408%" height="15" fill="rgb(232,65,50)" fg:x="899" fg:w="3"/><text x="72.4009%" y="479.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="72.1509%" y="453" width="0.2408%" height="15" fill="rgb(231,110,28)" fg:x="899" fg:w="3"/><text x="72.4009%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="72.1509%" y="437" width="0.2408%" height="15" fill="rgb(216,71,40)" fg:x="899" fg:w="3"/><text x="72.4009%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="72.1509%" y="421" width="0.2408%" height="15" fill="rgb(229,89,53)" fg:x="899" fg:w="3"/><text x="72.4009%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="72.2311%" y="405" width="0.1605%" height="15" fill="rgb(210,124,14)" fg:x="900" fg:w="2"/><text x="72.4811%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="72.0706%" y="533" width="0.4013%" height="15" fill="rgb(236,213,6)" fg:x="898" fg:w="5"/><text x="72.3206%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="72.0706%" y="517" width="0.4013%" height="15" fill="rgb(228,41,5)" fg:x="898" fg:w="5"/><text x="72.3206%" y="527.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (5 samples, 0.40%)</title><rect x="72.0706%" y="501" width="0.4013%" height="15" fill="rgb(221,167,25)" fg:x="898" fg:w="5"/><text x="72.3206%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.3917%" y="485" width="0.0803%" height="15" fill="rgb(228,144,37)" fg:x="902" fg:w="1"/><text x="72.6417%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.3917%" y="469" width="0.0803%" height="15" fill="rgb(227,189,38)" fg:x="902" fg:w="1"/><text x="72.6417%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="72.3917%" y="453" width="0.0803%" height="15" fill="rgb(218,8,2)" fg:x="902" fg:w="1"/><text x="72.6417%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (1 samples, 0.08%)</title><rect x="72.3917%" y="437" width="0.0803%" height="15" fill="rgb(209,61,28)" fg:x="902" fg:w="1"/><text x="72.6417%" y="447.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (1 samples, 0.08%)</title><rect x="72.3917%" y="421" width="0.0803%" height="15" fill="rgb(233,140,39)" fg:x="902" fg:w="1"/><text x="72.6417%" y="431.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (1 samples, 0.08%)</title><rect x="72.3917%" y="405" width="0.0803%" height="15" fill="rgb(251,66,48)" fg:x="902" fg:w="1"/><text x="72.6417%" y="415.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="72.3917%" y="389" width="0.0803%" height="15" fill="rgb(210,44,45)" fg:x="902" fg:w="1"/><text x="72.6417%" y="399.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="72.3917%" y="373" width="0.0803%" height="15" fill="rgb(214,136,46)" fg:x="902" fg:w="1"/><text x="72.6417%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="72.3917%" y="357" width="0.0803%" height="15" fill="rgb(207,130,50)" fg:x="902" fg:w="1"/><text x="72.6417%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="72.3917%" y="341" width="0.0803%" height="15" fill="rgb(228,102,49)" fg:x="902" fg:w="1"/><text x="72.6417%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (11 samples, 0.88%)</title><rect x="71.7496%" y="629" width="0.8828%" height="15" fill="rgb(253,55,1)" fg:x="894" fg:w="11"/><text x="71.9996%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.88%)</title><rect x="71.7496%" y="613" width="0.8828%" height="15" fill="rgb(238,222,9)" fg:x="894" fg:w="11"/><text x="71.9996%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (11 samples, 0.88%)</title><rect x="71.7496%" y="597" width="0.8828%" height="15" fill="rgb(246,99,6)" fg:x="894" fg:w="11"/><text x="71.9996%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.72%)</title><rect x="71.9101%" y="581" width="0.7223%" height="15" fill="rgb(219,110,26)" fg:x="896" fg:w="9"/><text x="72.1601%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.64%)</title><rect x="71.9904%" y="565" width="0.6421%" height="15" fill="rgb(239,160,33)" fg:x="897" fg:w="8"/><text x="72.2404%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (8 samples, 0.64%)</title><rect x="71.9904%" y="549" width="0.6421%" height="15" fill="rgb(220,202,23)" fg:x="897" fg:w="8"/><text x="72.2404%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="72.4719%" y="533" width="0.1605%" height="15" fill="rgb(208,80,26)" fg:x="903" fg:w="2"/><text x="72.7219%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.4719%" y="517" width="0.1605%" height="15" fill="rgb(243,85,7)" fg:x="903" fg:w="2"/><text x="72.7219%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="72.5522%" y="501" width="0.0803%" height="15" fill="rgb(228,77,47)" fg:x="904" fg:w="1"/><text x="72.8022%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.5522%" y="485" width="0.0803%" height="15" fill="rgb(212,226,8)" fg:x="904" fg:w="1"/><text x="72.8022%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.5522%" y="469" width="0.0803%" height="15" fill="rgb(241,120,54)" fg:x="904" fg:w="1"/><text x="72.8022%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.6324%" y="581" width="0.0803%" height="15" fill="rgb(226,80,16)" fg:x="905" fg:w="1"/><text x="72.8824%" y="591.50"></text></g><g><title>engine::session::internal::Added::find_refs (19 samples, 1.52%)</title><rect x="71.2681%" y="661" width="1.5249%" height="15" fill="rgb(240,76,13)" fg:x="888" fg:w="19"/><text x="71.5181%" y="671.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (19 samples, 1.52%)</title><rect x="71.2681%" y="645" width="1.5249%" height="15" fill="rgb(252,74,8)" fg:x="888" fg:w="19"/><text x="71.5181%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="72.6324%" y="629" width="0.1605%" height="15" fill="rgb(244,155,2)" fg:x="905" fg:w="2"/><text x="72.8824%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.6324%" y="613" width="0.1605%" height="15" fill="rgb(215,81,35)" fg:x="905" fg:w="2"/><text x="72.8824%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="72.6324%" y="597" width="0.1605%" height="15" fill="rgb(206,55,2)" fg:x="905" fg:w="2"/><text x="72.8824%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.7127%" y="581" width="0.0803%" height="15" fill="rgb(231,2,34)" fg:x="906" fg:w="1"/><text x="72.9627%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.7127%" y="565" width="0.0803%" height="15" fill="rgb(242,176,48)" fg:x="906" fg:w="1"/><text x="72.9627%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="72.7127%" y="549" width="0.0803%" height="15" fill="rgb(249,31,36)" fg:x="906" fg:w="1"/><text x="72.9627%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="72.7127%" y="533" width="0.0803%" height="15" fill="rgb(205,18,17)" fg:x="906" fg:w="1"/><text x="72.9627%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.7929%" y="645" width="0.0803%" height="15" fill="rgb(254,130,5)" fg:x="907" fg:w="1"/><text x="73.0429%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.7929%" y="629" width="0.0803%" height="15" fill="rgb(229,42,45)" fg:x="907" fg:w="1"/><text x="73.0429%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.7929%" y="613" width="0.0803%" height="15" fill="rgb(245,95,25)" fg:x="907" fg:w="1"/><text x="73.0429%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.7929%" y="597" width="0.0803%" height="15" fill="rgb(249,193,38)" fg:x="907" fg:w="1"/><text x="73.0429%" y="607.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.0337%" y="485" width="0.0803%" height="15" fill="rgb(241,140,43)" fg:x="910" fg:w="1"/><text x="73.2837%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.0337%" y="469" width="0.0803%" height="15" fill="rgb(245,78,48)" fg:x="910" fg:w="1"/><text x="73.2837%" y="479.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="73.0337%" y="453" width="0.0803%" height="15" fill="rgb(214,92,39)" fg:x="910" fg:w="1"/><text x="73.2837%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.0337%" y="517" width="0.1605%" height="15" fill="rgb(211,189,14)" fg:x="910" fg:w="2"/><text x="73.2837%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.0337%" y="501" width="0.1605%" height="15" fill="rgb(218,7,24)" fg:x="910" fg:w="2"/><text x="73.2837%" y="511.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="73.1140%" y="485" width="0.0803%" height="15" fill="rgb(224,200,49)" fg:x="911" fg:w="1"/><text x="73.3640%" y="495.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.40%)</title><rect x="72.8732%" y="645" width="0.4013%" height="15" fill="rgb(218,210,14)" fg:x="908" fg:w="5"/><text x="73.1232%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="72.8732%" y="629" width="0.4013%" height="15" fill="rgb(234,142,31)" fg:x="908" fg:w="5"/><text x="73.1232%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="72.8732%" y="613" width="0.4013%" height="15" fill="rgb(227,165,2)" fg:x="908" fg:w="5"/><text x="73.1232%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="73.0337%" y="597" width="0.2408%" height="15" fill="rgb(232,44,46)" fg:x="910" fg:w="3"/><text x="73.2837%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="73.0337%" y="581" width="0.2408%" height="15" fill="rgb(236,149,47)" fg:x="910" fg:w="3"/><text x="73.2837%" y="591.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="73.0337%" y="565" width="0.2408%" height="15" fill="rgb(227,45,31)" fg:x="910" fg:w="3"/><text x="73.2837%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="73.0337%" y="549" width="0.2408%" height="15" fill="rgb(240,176,51)" fg:x="910" fg:w="3"/><text x="73.2837%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="73.0337%" y="533" width="0.2408%" height="15" fill="rgb(249,146,41)" fg:x="910" fg:w="3"/><text x="73.2837%" y="543.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="73.1942%" y="517" width="0.0803%" height="15" fill="rgb(213,208,4)" fg:x="912" fg:w="1"/><text x="73.4442%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.1942%" y="501" width="0.0803%" height="15" fill="rgb(245,84,36)" fg:x="912" fg:w="1"/><text x="73.4442%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.1942%" y="485" width="0.0803%" height="15" fill="rgb(254,84,18)" fg:x="912" fg:w="1"/><text x="73.4442%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.1942%" y="469" width="0.0803%" height="15" fill="rgb(225,38,54)" fg:x="912" fg:w="1"/><text x="73.4442%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.1942%" y="453" width="0.0803%" height="15" fill="rgb(246,50,30)" fg:x="912" fg:w="1"/><text x="73.4442%" y="463.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="73.1942%" y="437" width="0.0803%" height="15" fill="rgb(246,148,9)" fg:x="912" fg:w="1"/><text x="73.4442%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.6758%" y="485" width="0.0803%" height="15" fill="rgb(223,75,4)" fg:x="918" fg:w="1"/><text x="73.9258%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.6758%" y="469" width="0.0803%" height="15" fill="rgb(239,148,41)" fg:x="918" fg:w="1"/><text x="73.9258%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="73.5152%" y="517" width="0.3210%" height="15" fill="rgb(205,195,3)" fg:x="916" fg:w="4"/><text x="73.7652%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.6758%" y="501" width="0.1605%" height="15" fill="rgb(254,161,1)" fg:x="918" fg:w="2"/><text x="73.9258%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.7560%" y="485" width="0.0803%" height="15" fill="rgb(211,229,8)" fg:x="919" fg:w="1"/><text x="74.0060%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="73.5152%" y="549" width="0.4013%" height="15" fill="rgb(220,97,9)" fg:x="916" fg:w="5"/><text x="73.7652%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="73.5152%" y="533" width="0.4013%" height="15" fill="rgb(240,218,8)" fg:x="916" fg:w="5"/><text x="73.7652%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.8363%" y="517" width="0.0803%" height="15" fill="rgb(250,44,0)" fg:x="920" fg:w="1"/><text x="74.0863%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.8363%" y="501" width="0.0803%" height="15" fill="rgb(236,41,53)" fg:x="920" fg:w="1"/><text x="74.0863%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (34 samples, 2.73%)</title><rect x="71.2681%" y="677" width="2.7287%" height="15" fill="rgb(218,227,13)" fg:x="888" fg:w="34"/><text x="71.5181%" y="687.50">en..</text></g><g><title>engine::session::internal::Entities::add_persisted (15 samples, 1.20%)</title><rect x="72.7929%" y="661" width="1.2039%" height="15" fill="rgb(217,94,32)" fg:x="907" fg:w="15"/><text x="73.0429%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (9 samples, 0.72%)</title><rect x="73.2745%" y="645" width="0.7223%" height="15" fill="rgb(213,217,12)" fg:x="913" fg:w="9"/><text x="73.5245%" y="655.50"></text></g><g><title>serde_json::de::from_trait (9 samples, 0.72%)</title><rect x="73.2745%" y="629" width="0.7223%" height="15" fill="rgb(229,13,46)" fg:x="913" fg:w="9"/><text x="73.5245%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.72%)</title><rect x="73.2745%" y="613" width="0.7223%" height="15" fill="rgb(243,139,5)" fg:x="913" fg:w="9"/><text x="73.5245%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 0.72%)</title><rect x="73.2745%" y="597" width="0.7223%" height="15" fill="rgb(249,38,45)" fg:x="913" fg:w="9"/><text x="73.5245%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.64%)</title><rect x="73.3547%" y="581" width="0.6421%" height="15" fill="rgb(216,70,11)" fg:x="914" fg:w="8"/><text x="73.6047%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="73.4350%" y="565" width="0.5618%" height="15" fill="rgb(253,101,25)" fg:x="915" fg:w="7"/><text x="73.6850%" y="575.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.9165%" y="549" width="0.0803%" height="15" fill="rgb(207,197,30)" fg:x="921" fg:w="1"/><text x="74.1665%" y="559.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="73.9165%" y="533" width="0.0803%" height="15" fill="rgb(238,87,13)" fg:x="921" fg:w="1"/><text x="74.1665%" y="543.50"></text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="73.9968%" y="677" width="0.0803%" height="15" fill="rgb(215,155,8)" fg:x="922" fg:w="1"/><text x="74.2468%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="73.9968%" y="661" width="0.0803%" height="15" fill="rgb(239,166,38)" fg:x="922" fg:w="1"/><text x="74.2468%" y="671.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="74.0770%" y="645" width="0.0803%" height="15" fill="rgb(240,194,35)" fg:x="923" fg:w="1"/><text x="74.3270%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.0770%" y="629" width="0.0803%" height="15" fill="rgb(219,10,44)" fg:x="923" fg:w="1"/><text x="74.3270%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.0770%" y="613" width="0.0803%" height="15" fill="rgb(251,220,35)" fg:x="923" fg:w="1"/><text x="74.3270%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.0770%" y="597" width="0.0803%" height="15" fill="rgb(218,117,13)" fg:x="923" fg:w="1"/><text x="74.3270%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.0770%" y="581" width="0.0803%" height="15" fill="rgb(221,213,40)" fg:x="923" fg:w="1"/><text x="74.3270%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.0770%" y="565" width="0.0803%" height="15" fill="rgb(251,224,35)" fg:x="923" fg:w="1"/><text x="74.3270%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.0770%" y="549" width="0.0803%" height="15" fill="rgb(241,33,39)" fg:x="923" fg:w="1"/><text x="74.3270%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.0770%" y="533" width="0.0803%" height="15" fill="rgb(222,74,17)" fg:x="923" fg:w="1"/><text x="74.3270%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.0770%" y="517" width="0.0803%" height="15" fill="rgb(225,103,0)" fg:x="923" fg:w="1"/><text x="74.3270%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.0770%" y="501" width="0.0803%" height="15" fill="rgb(240,0,12)" fg:x="923" fg:w="1"/><text x="74.3270%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.0770%" y="485" width="0.0803%" height="15" fill="rgb(233,213,37)" fg:x="923" fg:w="1"/><text x="74.3270%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.0770%" y="469" width="0.0803%" height="15" fill="rgb(225,84,52)" fg:x="923" fg:w="1"/><text x="74.3270%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.0770%" y="453" width="0.0803%" height="15" fill="rgb(247,160,51)" fg:x="923" fg:w="1"/><text x="74.3270%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.3178%" y="597" width="0.0803%" height="15" fill="rgb(244,60,51)" fg:x="926" fg:w="1"/><text x="74.5678%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.3178%" y="581" width="0.0803%" height="15" fill="rgb(233,114,7)" fg:x="926" fg:w="1"/><text x="74.5678%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.3178%" y="565" width="0.0803%" height="15" fill="rgb(246,136,16)" fg:x="926" fg:w="1"/><text x="74.5678%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.3178%" y="549" width="0.0803%" height="15" fill="rgb(243,114,45)" fg:x="926" fg:w="1"/><text x="74.5678%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.3178%" y="533" width="0.0803%" height="15" fill="rgb(247,183,43)" fg:x="926" fg:w="1"/><text x="74.5678%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.3178%" y="517" width="0.0803%" height="15" fill="rgb(251,210,42)" fg:x="926" fg:w="1"/><text x="74.5678%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.3178%" y="501" width="0.0803%" height="15" fill="rgb(221,88,35)" fg:x="926" fg:w="1"/><text x="74.5678%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.3178%" y="485" width="0.0803%" height="15" fill="rgb(242,21,20)" fg:x="926" fg:w="1"/><text x="74.5678%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.3178%" y="469" width="0.0803%" height="15" fill="rgb(233,226,36)" fg:x="926" fg:w="1"/><text x="74.5678%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.3178%" y="453" width="0.0803%" height="15" fill="rgb(243,189,34)" fg:x="926" fg:w="1"/><text x="74.5678%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.3178%" y="437" width="0.0803%" height="15" fill="rgb(207,145,50)" fg:x="926" fg:w="1"/><text x="74.5678%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.3178%" y="421" width="0.0803%" height="15" fill="rgb(242,1,50)" fg:x="926" fg:w="1"/><text x="74.5678%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.3178%" y="405" width="0.0803%" height="15" fill="rgb(231,65,32)" fg:x="926" fg:w="1"/><text x="74.5678%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="74.3178%" y="629" width="0.1605%" height="15" fill="rgb(208,68,49)" fg:x="926" fg:w="2"/><text x="74.5678%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="74.3178%" y="613" width="0.1605%" height="15" fill="rgb(253,54,49)" fg:x="926" fg:w="2"/><text x="74.5678%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.3981%" y="597" width="0.0803%" height="15" fill="rgb(245,186,24)" fg:x="927" fg:w="1"/><text x="74.6481%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.4783%" y="613" width="0.0803%" height="15" fill="rgb(209,2,41)" fg:x="928" fg:w="1"/><text x="74.7283%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.4783%" y="597" width="0.0803%" height="15" fill="rgb(242,208,54)" fg:x="928" fg:w="1"/><text x="74.7283%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="74.4783%" y="629" width="0.2408%" height="15" fill="rgb(225,9,51)" fg:x="928" fg:w="3"/><text x="74.7283%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="74.5586%" y="613" width="0.1605%" height="15" fill="rgb(207,207,25)" fg:x="929" fg:w="2"/><text x="74.8086%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.5586%" y="597" width="0.1605%" height="15" fill="rgb(253,96,18)" fg:x="929" fg:w="2"/><text x="74.8086%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="74.6388%" y="581" width="0.0803%" height="15" fill="rgb(252,215,20)" fg:x="930" fg:w="1"/><text x="74.8888%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.6388%" y="565" width="0.0803%" height="15" fill="rgb(245,227,26)" fg:x="930" fg:w="1"/><text x="74.8888%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.6388%" y="549" width="0.0803%" height="15" fill="rgb(241,208,0)" fg:x="930" fg:w="1"/><text x="74.8888%" y="559.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="74.7191%" y="629" width="0.0803%" height="15" fill="rgb(224,130,10)" fg:x="931" fg:w="1"/><text x="74.9691%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.7191%" y="613" width="0.0803%" height="15" fill="rgb(237,29,0)" fg:x="931" fg:w="1"/><text x="74.9691%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="74.7191%" y="597" width="0.0803%" height="15" fill="rgb(219,27,41)" fg:x="931" fg:w="1"/><text x="74.9691%" y="607.50"></text></g><g><title>kernel::model::EntityPtr::new (1 samples, 0.08%)</title><rect x="74.7994%" y="629" width="0.0803%" height="15" fill="rgb(245,101,19)" fg:x="932" fg:w="1"/><text x="75.0494%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.0401%" y="453" width="0.0803%" height="15" fill="rgb(243,44,37)" fg:x="935" fg:w="1"/><text x="75.2901%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.0401%" y="437" width="0.0803%" height="15" fill="rgb(228,213,43)" fg:x="935" fg:w="1"/><text x="75.2901%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.0401%" y="421" width="0.0803%" height="15" fill="rgb(219,163,21)" fg:x="935" fg:w="1"/><text x="75.2901%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="75.0401%" y="469" width="0.1605%" height="15" fill="rgb(234,86,24)" fg:x="935" fg:w="2"/><text x="75.2901%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.1204%" y="453" width="0.0803%" height="15" fill="rgb(225,10,24)" fg:x="936" fg:w="1"/><text x="75.3704%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="75.0401%" y="501" width="0.2408%" height="15" fill="rgb(218,109,7)" fg:x="935" fg:w="3"/><text x="75.2901%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="75.0401%" y="485" width="0.2408%" height="15" fill="rgb(210,20,26)" fg:x="935" fg:w="3"/><text x="75.2901%" y="495.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="75.2006%" y="469" width="0.0803%" height="15" fill="rgb(216,18,1)" fg:x="937" fg:w="1"/><text x="75.4506%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="75.0401%" y="533" width="0.3210%" height="15" fill="rgb(206,163,23)" fg:x="935" fg:w="4"/><text x="75.2901%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="75.0401%" y="517" width="0.3210%" height="15" fill="rgb(229,150,31)" fg:x="935" fg:w="4"/><text x="75.2901%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="75.2809%" y="501" width="0.0803%" height="15" fill="rgb(231,10,5)" fg:x="938" fg:w="1"/><text x="75.5309%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.3612%" y="501" width="0.0803%" height="15" fill="rgb(250,40,50)" fg:x="939" fg:w="1"/><text x="75.6112%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (3 samples, 0.24%)</title><rect x="75.3612%" y="533" width="0.2408%" height="15" fill="rgb(217,119,7)" fg:x="939" fg:w="3"/><text x="75.6112%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="75.3612%" y="517" width="0.2408%" height="15" fill="rgb(245,214,40)" fg:x="939" fg:w="3"/><text x="75.6112%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="75.4414%" y="501" width="0.1605%" height="15" fill="rgb(216,187,1)" fg:x="940" fg:w="2"/><text x="75.6914%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="75.4414%" y="485" width="0.1605%" height="15" fill="rgb(237,146,21)" fg:x="940" fg:w="2"/><text x="75.6914%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (10 samples, 0.80%)</title><rect x="75.0401%" y="581" width="0.8026%" height="15" fill="rgb(210,174,47)" fg:x="935" fg:w="10"/><text x="75.2901%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (10 samples, 0.80%)</title><rect x="75.0401%" y="565" width="0.8026%" height="15" fill="rgb(218,111,39)" fg:x="935" fg:w="10"/><text x="75.2901%" y="575.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (10 samples, 0.80%)</title><rect x="75.0401%" y="549" width="0.8026%" height="15" fill="rgb(224,95,19)" fg:x="935" fg:w="10"/><text x="75.2901%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="75.6019%" y="533" width="0.2408%" height="15" fill="rgb(234,15,38)" fg:x="942" fg:w="3"/><text x="75.8519%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="75.6019%" y="517" width="0.2408%" height="15" fill="rgb(246,56,12)" fg:x="942" fg:w="3"/><text x="75.8519%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (3 samples, 0.24%)</title><rect x="75.6019%" y="501" width="0.2408%" height="15" fill="rgb(247,16,17)" fg:x="942" fg:w="3"/><text x="75.8519%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="75.6019%" y="485" width="0.2408%" height="15" fill="rgb(215,151,11)" fg:x="942" fg:w="3"/><text x="75.8519%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="75.6019%" y="469" width="0.2408%" height="15" fill="rgb(225,16,24)" fg:x="942" fg:w="3"/><text x="75.8519%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="75.6822%" y="453" width="0.1605%" height="15" fill="rgb(217,117,5)" fg:x="943" fg:w="2"/><text x="75.9322%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.6822%" y="437" width="0.1605%" height="15" fill="rgb(246,187,53)" fg:x="943" fg:w="2"/><text x="75.9322%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.6822%" y="421" width="0.1605%" height="15" fill="rgb(241,71,40)" fg:x="943" fg:w="2"/><text x="75.9322%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="75.6822%" y="405" width="0.1605%" height="15" fill="rgb(231,67,39)" fg:x="943" fg:w="2"/><text x="75.9322%" y="415.50"></text></g><g><title>kernel::model::entity::Entity::from_value (13 samples, 1.04%)</title><rect x="74.8796%" y="629" width="1.0433%" height="15" fill="rgb(222,120,24)" fg:x="933" fg:w="13"/><text x="75.1296%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (13 samples, 1.04%)</title><rect x="74.8796%" y="613" width="1.0433%" height="15" fill="rgb(248,3,3)" fg:x="933" fg:w="13"/><text x="75.1296%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (13 samples, 1.04%)</title><rect x="74.8796%" y="597" width="1.0433%" height="15" fill="rgb(228,218,5)" fg:x="933" fg:w="13"/><text x="75.1296%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.8427%" y="581" width="0.0803%" height="15" fill="rgb(212,202,43)" fg:x="945" fg:w="1"/><text x="76.0927%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.8427%" y="565" width="0.0803%" height="15" fill="rgb(235,183,2)" fg:x="945" fg:w="1"/><text x="76.0927%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="75.8427%" y="549" width="0.0803%" height="15" fill="rgb(230,165,10)" fg:x="945" fg:w="1"/><text x="76.0927%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="76.0835%" y="501" width="0.1605%" height="15" fill="rgb(219,54,40)" fg:x="948" fg:w="2"/><text x="76.3335%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.1637%" y="485" width="0.0803%" height="15" fill="rgb(244,73,9)" fg:x="949" fg:w="1"/><text x="76.4137%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.1637%" y="469" width="0.0803%" height="15" fill="rgb(212,32,45)" fg:x="949" fg:w="1"/><text x="76.4137%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.1637%" y="453" width="0.0803%" height="15" fill="rgb(205,58,31)" fg:x="949" fg:w="1"/><text x="76.4137%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.1637%" y="437" width="0.0803%" height="15" fill="rgb(250,120,43)" fg:x="949" fg:w="1"/><text x="76.4137%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="76.0032%" y="565" width="0.3210%" height="15" fill="rgb(235,13,10)" fg:x="947" fg:w="4"/><text x="76.2532%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="76.0032%" y="549" width="0.3210%" height="15" fill="rgb(232,219,31)" fg:x="947" fg:w="4"/><text x="76.2532%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="76.0032%" y="533" width="0.3210%" height="15" fill="rgb(218,157,51)" fg:x="947" fg:w="4"/><text x="76.2532%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="76.0835%" y="517" width="0.2408%" height="15" fill="rgb(211,91,52)" fg:x="948" fg:w="3"/><text x="76.3335%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="76.2440%" y="501" width="0.0803%" height="15" fill="rgb(240,173,1)" fg:x="950" fg:w="1"/><text x="76.4940%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.2440%" y="485" width="0.0803%" height="15" fill="rgb(248,20,47)" fg:x="950" fg:w="1"/><text x="76.4940%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (952 samples, 76.40%)</title><rect x="0.0000%" y="757" width="76.4045%" height="15" fill="rgb(217,221,40)" fg:x="0" fg:w="952"/><text x="0.2500%" y="767.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (952 samples, 76.40%)</title><rect x="0.0000%" y="741" width="76.4045%" height="15" fill="rgb(226,149,51)" fg:x="0" fg:w="952"/><text x="0.2500%" y="751.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (952 samples, 76.40%)</title><rect x="0.0000%" y="725" width="76.4045%" height="15" fill="rgb(252,193,7)" fg:x="0" fg:w="952"/><text x="0.2500%" y="735.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (408 samples, 32.74%)</title><rect x="43.6597%" y="709" width="32.7448%" height="15" fill="rgb(205,123,0)" fg:x="544" fg:w="408"/><text x="43.9097%" y="719.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (408 samples, 32.74%)</title><rect x="43.6597%" y="693" width="32.7448%" height="15" fill="rgb(233,173,25)" fg:x="544" fg:w="408"/><text x="43.9097%" y="703.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (29 samples, 2.33%)</title><rect x="74.0770%" y="677" width="2.3274%" height="15" fill="rgb(216,63,32)" fg:x="923" fg:w="29"/><text x="74.3270%" y="687.50">k..</text></g><g><title>engine::session::Session::load_entity (29 samples, 2.33%)</title><rect x="74.0770%" y="661" width="2.3274%" height="15" fill="rgb(209,56,45)" fg:x="923" fg:w="29"/><text x="74.3270%" y="671.50">e..</text></g><g><title>engine::session::internal::Entities::add_persisted (28 samples, 2.25%)</title><rect x="74.1573%" y="645" width="2.2472%" height="15" fill="rgb(226,111,49)" fg:x="924" fg:w="28"/><text x="74.4073%" y="655.50">e..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (6 samples, 0.48%)</title><rect x="75.9230%" y="629" width="0.4815%" height="15" fill="rgb(244,181,21)" fg:x="946" fg:w="6"/><text x="76.1730%" y="639.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.48%)</title><rect x="75.9230%" y="613" width="0.4815%" height="15" fill="rgb(222,126,15)" fg:x="946" fg:w="6"/><text x="76.1730%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="75.9230%" y="597" width="0.4815%" height="15" fill="rgb(222,95,17)" fg:x="946" fg:w="6"/><text x="76.1730%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="76.0032%" y="581" width="0.4013%" height="15" fill="rgb(254,46,5)" fg:x="947" fg:w="5"/><text x="76.2532%" y="591.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="76.3242%" y="565" width="0.0803%" height="15" fill="rgb(236,216,35)" fg:x="951" fg:w="1"/><text x="76.5742%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.3242%" y="549" width="0.0803%" height="15" fill="rgb(217,187,26)" fg:x="951" fg:w="1"/><text x="76.5742%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.4045%" y="629" width="0.0803%" height="15" fill="rgb(207,192,25)" fg:x="952" fg:w="1"/><text x="76.6545%" y="639.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="76.4045%" y="693" width="0.1605%" height="15" fill="rgb(253,135,27)" fg:x="952" fg:w="2"/><text x="76.6545%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="76.4045%" y="677" width="0.1605%" height="15" fill="rgb(211,122,29)" fg:x="952" fg:w="2"/><text x="76.6545%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="76.4045%" y="661" width="0.1605%" height="15" fill="rgb(233,162,40)" fg:x="952" fg:w="2"/><text x="76.6545%" y="671.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (2 samples, 0.16%)</title><rect x="76.4045%" y="645" width="0.1605%" height="15" fill="rgb(222,184,47)" fg:x="952" fg:w="2"/><text x="76.6545%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="76.4848%" y="629" width="0.0803%" height="15" fill="rgb(249,99,23)" fg:x="953" fg:w="1"/><text x="76.7348%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.4848%" y="613" width="0.0803%" height="15" fill="rgb(214,60,12)" fg:x="953" fg:w="1"/><text x="76.7348%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.5650%" y="613" width="0.0803%" height="15" fill="rgb(250,229,36)" fg:x="954" fg:w="1"/><text x="76.8150%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="76.5650%" y="629" width="0.1605%" height="15" fill="rgb(232,195,10)" fg:x="954" fg:w="2"/><text x="76.8150%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="76.6453%" y="613" width="0.0803%" height="15" fill="rgb(205,213,31)" fg:x="955" fg:w="1"/><text x="76.8953%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="76.6453%" y="597" width="0.0803%" height="15" fill="rgb(237,43,8)" fg:x="955" fg:w="1"/><text x="76.8953%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.6453%" y="581" width="0.0803%" height="15" fill="rgb(216,208,3)" fg:x="955" fg:w="1"/><text x="76.8953%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.6453%" y="565" width="0.0803%" height="15" fill="rgb(228,179,44)" fg:x="955" fg:w="1"/><text x="76.8953%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.6453%" y="549" width="0.0803%" height="15" fill="rgb(230,192,27)" fg:x="955" fg:w="1"/><text x="76.8953%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.7255%" y="629" width="0.0803%" height="15" fill="rgb(251,30,38)" fg:x="956" fg:w="1"/><text x="76.9755%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.8058%" y="597" width="0.0803%" height="15" fill="rgb(246,55,52)" fg:x="957" fg:w="1"/><text x="77.0558%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.8860%" y="581" width="0.0803%" height="15" fill="rgb(249,79,26)" fg:x="958" fg:w="1"/><text x="77.1360%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.64%)</title><rect x="76.4045%" y="709" width="0.6421%" height="15" fill="rgb(220,202,16)" fg:x="952" fg:w="8"/><text x="76.6545%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (6 samples, 0.48%)</title><rect x="76.5650%" y="693" width="0.4815%" height="15" fill="rgb(250,170,23)" fg:x="954" fg:w="6"/><text x="76.8150%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="76.5650%" y="677" width="0.4815%" height="15" fill="rgb(230,7,37)" fg:x="954" fg:w="6"/><text x="76.8150%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (6 samples, 0.48%)</title><rect x="76.5650%" y="661" width="0.4815%" height="15" fill="rgb(213,71,1)" fg:x="954" fg:w="6"/><text x="76.8150%" y="671.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="76.5650%" y="645" width="0.4815%" height="15" fill="rgb(227,87,39)" fg:x="954" fg:w="6"/><text x="76.8150%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="76.8058%" y="629" width="0.2408%" height="15" fill="rgb(210,41,29)" fg:x="957" fg:w="3"/><text x="77.0558%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="76.8058%" y="613" width="0.2408%" height="15" fill="rgb(206,191,31)" fg:x="957" fg:w="3"/><text x="77.0558%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="76.8860%" y="597" width="0.1605%" height="15" fill="rgb(247,75,54)" fg:x="958" fg:w="2"/><text x="77.1360%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.9663%" y="581" width="0.0803%" height="15" fill="rgb(208,54,50)" fg:x="959" fg:w="1"/><text x="77.2163%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.9663%" y="565" width="0.0803%" height="15" fill="rgb(214,90,37)" fg:x="959" fg:w="1"/><text x="77.2163%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.9663%" y="549" width="0.0803%" height="15" fill="rgb(220,132,6)" fg:x="959" fg:w="1"/><text x="77.2163%" y="559.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="77.1268%" y="565" width="0.0803%" height="15" fill="rgb(213,167,7)" fg:x="961" fg:w="1"/><text x="77.3768%" y="575.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="77.1268%" y="549" width="0.0803%" height="15" fill="rgb(243,36,27)" fg:x="961" fg:w="1"/><text x="77.3768%" y="559.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (3 samples, 0.24%)</title><rect x="77.0465%" y="613" width="0.2408%" height="15" fill="rgb(235,147,12)" fg:x="960" fg:w="3"/><text x="77.2965%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (3 samples, 0.24%)</title><rect x="77.0465%" y="597" width="0.2408%" height="15" fill="rgb(212,198,44)" fg:x="960" fg:w="3"/><text x="77.2965%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (3 samples, 0.24%)</title><rect x="77.0465%" y="581" width="0.2408%" height="15" fill="rgb(218,68,50)" fg:x="960" fg:w="3"/><text x="77.2965%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="77.2071%" y="565" width="0.0803%" height="15" fill="rgb(224,79,48)" fg:x="962" fg:w="1"/><text x="77.4571%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.2071%" y="549" width="0.0803%" height="15" fill="rgb(213,191,50)" fg:x="962" fg:w="1"/><text x="77.4571%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.2071%" y="533" width="0.0803%" height="15" fill="rgb(254,146,10)" fg:x="962" fg:w="1"/><text x="77.4571%" y="543.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="77.2873%" y="613" width="0.0803%" height="15" fill="rgb(215,175,11)" fg:x="963" fg:w="1"/><text x="77.5373%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="77.2873%" y="597" width="0.0803%" height="15" fill="rgb(207,49,7)" fg:x="963" fg:w="1"/><text x="77.5373%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="77.2873%" y="581" width="0.0803%" height="15" fill="rgb(234,144,29)" fg:x="963" fg:w="1"/><text x="77.5373%" y="591.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="77.3676%" y="613" width="0.0803%" height="15" fill="rgb(213,222,48)" fg:x="964" fg:w="1"/><text x="77.6176%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="77.3676%" y="597" width="0.0803%" height="15" fill="rgb(222,8,6)" fg:x="964" fg:w="1"/><text x="77.6176%" y="607.50"></text></g><g><title>&lt;plugins_core::fashion::actions::RemoveAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="77.3676%" y="581" width="0.0803%" height="15" fill="rgb(221,114,49)" fg:x="964" fg:w="1"/><text x="77.6176%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="77.3676%" y="565" width="0.0803%" height="15" fill="rgb(250,140,42)" fg:x="964" fg:w="1"/><text x="77.6176%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="77.3676%" y="549" width="0.0803%" height="15" fill="rgb(250,150,27)" fg:x="964" fg:w="1"/><text x="77.6176%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.3676%" y="533" width="0.0803%" height="15" fill="rgb(252,159,3)" fg:x="964" fg:w="1"/><text x="77.6176%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.3676%" y="517" width="0.0803%" height="15" fill="rgb(241,182,3)" fg:x="964" fg:w="1"/><text x="77.6176%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.4478%" y="565" width="0.0803%" height="15" fill="rgb(236,3,9)" fg:x="965" fg:w="1"/><text x="77.6978%" y="575.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="77.4478%" y="613" width="0.1605%" height="15" fill="rgb(223,227,51)" fg:x="965" fg:w="2"/><text x="77.6978%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="77.4478%" y="597" width="0.1605%" height="15" fill="rgb(232,133,30)" fg:x="965" fg:w="2"/><text x="77.6978%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (2 samples, 0.16%)</title><rect x="77.4478%" y="581" width="0.1605%" height="15" fill="rgb(209,93,27)" fg:x="965" fg:w="2"/><text x="77.6978%" y="591.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="77.5281%" y="565" width="0.0803%" height="15" fill="rgb(208,108,34)" fg:x="966" fg:w="1"/><text x="77.7781%" y="575.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="77.5281%" y="549" width="0.0803%" height="15" fill="rgb(215,189,13)" fg:x="966" fg:w="1"/><text x="77.7781%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="77.6083%" y="613" width="0.0803%" height="15" fill="rgb(206,88,23)" fg:x="967" fg:w="1"/><text x="77.8583%" y="623.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (9 samples, 0.72%)</title><rect x="77.0465%" y="629" width="0.7223%" height="15" fill="rgb(240,173,0)" fg:x="960" fg:w="9"/><text x="77.2965%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="77.6886%" y="613" width="0.0803%" height="15" fill="rgb(223,106,52)" fg:x="968" fg:w="1"/><text x="77.9386%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.6886%" y="597" width="0.0803%" height="15" fill="rgb(206,130,16)" fg:x="968" fg:w="1"/><text x="77.9386%" y="607.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.7689%" y="565" width="0.0803%" height="15" fill="rgb(220,54,25)" fg:x="969" fg:w="1"/><text x="78.0189%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.7689%" y="549" width="0.0803%" height="15" fill="rgb(210,4,38)" fg:x="969" fg:w="1"/><text x="78.0189%" y="559.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="77.7689%" y="533" width="0.0803%" height="15" fill="rgb(238,94,39)" fg:x="969" fg:w="1"/><text x="78.0189%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="77.7689%" y="517" width="0.0803%" height="15" fill="rgb(234,124,34)" fg:x="969" fg:w="1"/><text x="78.0189%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="77.7689%" y="501" width="0.0803%" height="15" fill="rgb(221,91,40)" fg:x="969" fg:w="1"/><text x="78.0189%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="77.7689%" y="485" width="0.0803%" height="15" fill="rgb(246,53,28)" fg:x="969" fg:w="1"/><text x="78.0189%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="77.7689%" y="469" width="0.0803%" height="15" fill="rgb(229,109,7)" fg:x="969" fg:w="1"/><text x="78.0189%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="77.7689%" y="453" width="0.0803%" height="15" fill="rgb(249,117,8)" fg:x="969" fg:w="1"/><text x="78.0189%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="77.7689%" y="437" width="0.0803%" height="15" fill="rgb(210,181,1)" fg:x="969" fg:w="1"/><text x="78.0189%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="77.7689%" y="421" width="0.0803%" height="15" fill="rgb(211,66,1)" fg:x="969" fg:w="1"/><text x="78.0189%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.7689%" y="405" width="0.0803%" height="15" fill="rgb(221,90,14)" fg:x="969" fg:w="1"/><text x="78.0189%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="77.7689%" y="389" width="0.0803%" height="15" fill="rgb(219,222,44)" fg:x="969" fg:w="1"/><text x="78.0189%" y="399.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="77.7689%" y="373" width="0.0803%" height="15" fill="rgb(246,34,33)" fg:x="969" fg:w="1"/><text x="78.0189%" y="383.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="77.7689%" y="357" width="0.0803%" height="15" fill="rgb(227,135,41)" fg:x="969" fg:w="1"/><text x="78.0189%" y="367.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="77.7689%" y="341" width="0.0803%" height="15" fill="rgb(226,15,14)" fg:x="969" fg:w="1"/><text x="78.0189%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="77.7689%" y="325" width="0.0803%" height="15" fill="rgb(236,148,47)" fg:x="969" fg:w="1"/><text x="78.0189%" y="335.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="77.7689%" y="613" width="0.1605%" height="15" fill="rgb(233,162,52)" fg:x="969" fg:w="2"/><text x="78.0189%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="77.7689%" y="597" width="0.1605%" height="15" fill="rgb(244,35,28)" fg:x="969" fg:w="2"/><text x="78.0189%" y="607.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="77.7689%" y="581" width="0.1605%" height="15" fill="rgb(205,121,10)" fg:x="969" fg:w="2"/><text x="78.0189%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="77.8491%" y="565" width="0.0803%" height="15" fill="rgb(250,58,18)" fg:x="970" fg:w="1"/><text x="78.0991%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.8491%" y="549" width="0.0803%" height="15" fill="rgb(216,37,13)" fg:x="970" fg:w="1"/><text x="78.0991%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.8491%" y="533" width="0.0803%" height="15" fill="rgb(221,215,42)" fg:x="970" fg:w="1"/><text x="78.0991%" y="543.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="77.8491%" y="517" width="0.0803%" height="15" fill="rgb(217,214,19)" fg:x="970" fg:w="1"/><text x="78.0991%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="77.8491%" y="501" width="0.0803%" height="15" fill="rgb(233,139,13)" fg:x="970" fg:w="1"/><text x="78.0991%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="77.8491%" y="485" width="0.0803%" height="15" fill="rgb(247,168,23)" fg:x="970" fg:w="1"/><text x="78.0991%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="77.8491%" y="469" width="0.0803%" height="15" fill="rgb(207,202,1)" fg:x="970" fg:w="1"/><text x="78.0991%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="77.8491%" y="453" width="0.0803%" height="15" fill="rgb(220,155,48)" fg:x="970" fg:w="1"/><text x="78.0991%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="77.8491%" y="437" width="0.0803%" height="15" fill="rgb(250,43,26)" fg:x="970" fg:w="1"/><text x="78.0991%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="77.8491%" y="421" width="0.0803%" height="15" fill="rgb(212,190,23)" fg:x="970" fg:w="1"/><text x="78.0991%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="77.8491%" y="405" width="0.0803%" height="15" fill="rgb(216,39,24)" fg:x="970" fg:w="1"/><text x="78.0991%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.8491%" y="389" width="0.0803%" height="15" fill="rgb(252,113,16)" fg:x="970" fg:w="1"/><text x="78.0991%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.8491%" y="373" width="0.0803%" height="15" fill="rgb(208,113,19)" fg:x="970" fg:w="1"/><text x="78.0991%" y="383.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.32%)</title><rect x="77.7689%" y="629" width="0.3210%" height="15" fill="rgb(234,107,25)" fg:x="969" fg:w="4"/><text x="78.0189%" y="639.50"></text></g><g><title>libloading::library_filename (2 samples, 0.16%)</title><rect x="77.9294%" y="613" width="0.1605%" height="15" fill="rgb(234,217,51)" fg:x="971" fg:w="2"/><text x="78.1794%" y="623.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (1 samples, 0.08%)</title><rect x="78.0096%" y="597" width="0.0803%" height="15" fill="rgb(251,29,42)" fg:x="972" fg:w="1"/><text x="78.2596%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="78.0096%" y="581" width="0.0803%" height="15" fill="rgb(221,62,51)" fg:x="972" fg:w="1"/><text x="78.2596%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="78.0096%" y="565" width="0.0803%" height="15" fill="rgb(240,192,43)" fg:x="972" fg:w="1"/><text x="78.2596%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="78.0096%" y="549" width="0.0803%" height="15" fill="rgb(224,157,47)" fg:x="972" fg:w="1"/><text x="78.2596%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="78.0096%" y="533" width="0.0803%" height="15" fill="rgb(226,84,45)" fg:x="972" fg:w="1"/><text x="78.2596%" y="543.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (3 samples, 0.24%)</title><rect x="78.0899%" y="613" width="0.2408%" height="15" fill="rgb(208,207,23)" fg:x="973" fg:w="3"/><text x="78.3399%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="78.0899%" y="597" width="0.2408%" height="15" fill="rgb(253,34,51)" fg:x="973" fg:w="3"/><text x="78.3399%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="78.1701%" y="581" width="0.1605%" height="15" fill="rgb(227,26,34)" fg:x="974" fg:w="2"/><text x="78.4201%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="78.1701%" y="565" width="0.1605%" height="15" fill="rgb(245,75,19)" fg:x="974" fg:w="2"/><text x="78.4201%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="78.1701%" y="549" width="0.1605%" height="15" fill="rgb(250,191,31)" fg:x="974" fg:w="2"/><text x="78.4201%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="78.1701%" y="533" width="0.1605%" height="15" fill="rgb(224,11,50)" fg:x="974" fg:w="2"/><text x="78.4201%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="78.1701%" y="517" width="0.1605%" height="15" fill="rgb(231,171,7)" fg:x="974" fg:w="2"/><text x="78.4201%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="78.1701%" y="501" width="0.1605%" height="15" fill="rgb(252,214,10)" fg:x="974" fg:w="2"/><text x="78.4201%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="78.1701%" y="485" width="0.1605%" height="15" fill="rgb(249,45,46)" fg:x="974" fg:w="2"/><text x="78.4201%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="78.1701%" y="469" width="0.1605%" height="15" fill="rgb(240,173,7)" fg:x="974" fg:w="2"/><text x="78.4201%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="78.1701%" y="453" width="0.1605%" height="15" fill="rgb(235,214,13)" fg:x="974" fg:w="2"/><text x="78.4201%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="78.1701%" y="437" width="0.1605%" height="15" fill="rgb(245,156,8)" fg:x="974" fg:w="2"/><text x="78.4201%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="78.1701%" y="421" width="0.1605%" height="15" fill="rgb(235,46,12)" fg:x="974" fg:w="2"/><text x="78.4201%" y="431.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="78.1701%" y="405" width="0.1605%" height="15" fill="rgb(221,81,14)" fg:x="974" fg:w="2"/><text x="78.4201%" y="415.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="78.1701%" y="389" width="0.1605%" height="15" fill="rgb(238,207,9)" fg:x="974" fg:w="2"/><text x="78.4201%" y="399.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="78.3307%" y="597" width="0.2408%" height="15" fill="rgb(224,129,35)" fg:x="976" fg:w="3"/><text x="78.5807%" y="607.50"></text></g><g><title>glob::fill_todo (3 samples, 0.24%)</title><rect x="78.3307%" y="581" width="0.2408%" height="15" fill="rgb(243,218,34)" fg:x="976" fg:w="3"/><text x="78.5807%" y="591.50"></text></g><g><title>glob::is_dir (3 samples, 0.24%)</title><rect x="78.3307%" y="565" width="0.2408%" height="15" fill="rgb(220,166,13)" fg:x="976" fg:w="3"/><text x="78.5807%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat (3 samples, 0.24%)</title><rect x="78.3307%" y="549" width="0.2408%" height="15" fill="rgb(227,167,49)" fg:x="976" fg:w="3"/><text x="78.5807%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (3 samples, 0.24%)</title><rect x="78.3307%" y="533" width="0.2408%" height="15" fill="rgb(234,142,12)" fg:x="976" fg:w="3"/><text x="78.5807%" y="543.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 0.24%)</title><rect x="78.3307%" y="517" width="0.2408%" height="15" fill="rgb(207,100,48)" fg:x="976" fg:w="3"/><text x="78.5807%" y="527.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (3 samples, 0.24%)</title><rect x="78.3307%" y="501" width="0.2408%" height="15" fill="rgb(210,25,14)" fg:x="976" fg:w="3"/><text x="78.5807%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx (3 samples, 0.24%)</title><rect x="78.3307%" y="485" width="0.2408%" height="15" fill="rgb(246,116,27)" fg:x="976" fg:w="3"/><text x="78.5807%" y="495.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (3 samples, 0.24%)</title><rect x="78.3307%" y="469" width="0.2408%" height="15" fill="rgb(214,193,42)" fg:x="976" fg:w="3"/><text x="78.5807%" y="479.50"></text></g><g><title>statx (3 samples, 0.24%)</title><rect x="78.3307%" y="453" width="0.2408%" height="15" fill="rgb(214,122,8)" fg:x="976" fg:w="3"/><text x="78.5807%" y="463.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (20 samples, 1.61%)</title><rect x="77.0465%" y="645" width="1.6051%" height="15" fill="rgb(244,173,18)" fg:x="960" fg:w="20"/><text x="77.2965%" y="655.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (7 samples, 0.56%)</title><rect x="78.0899%" y="629" width="0.5618%" height="15" fill="rgb(232,68,19)" fg:x="973" fg:w="7"/><text x="78.3399%" y="639.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (4 samples, 0.32%)</title><rect x="78.3307%" y="613" width="0.3210%" height="15" fill="rgb(236,224,1)" fg:x="976" fg:w="4"/><text x="78.5807%" y="623.50"></text></g><g><title>glob::glob (1 samples, 0.08%)</title><rect x="78.5714%" y="597" width="0.0803%" height="15" fill="rgb(240,11,8)" fg:x="979" fg:w="1"/><text x="78.8214%" y="607.50"></text></g><g><title>glob::glob_with (1 samples, 0.08%)</title><rect x="78.5714%" y="581" width="0.0803%" height="15" fill="rgb(244,159,20)" fg:x="979" fg:w="1"/><text x="78.8214%" y="591.50"></text></g><g><title>glob::Pattern::new (1 samples, 0.08%)</title><rect x="78.5714%" y="565" width="0.0803%" height="15" fill="rgb(240,223,54)" fg:x="979" fg:w="1"/><text x="78.8214%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="78.5714%" y="549" width="0.0803%" height="15" fill="rgb(237,146,5)" fg:x="979" fg:w="1"/><text x="78.8214%" y="559.50"></text></g><g><title>engine::session::Session::initialize (22 samples, 1.77%)</title><rect x="77.0465%" y="661" width="1.7657%" height="15" fill="rgb(218,221,32)" fg:x="960" fg:w="22"/><text x="77.2965%" y="671.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (2 samples, 0.16%)</title><rect x="78.6517%" y="645" width="0.1605%" height="15" fill="rgb(244,96,26)" fg:x="980" fg:w="2"/><text x="78.9017%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="78.6517%" y="629" width="0.1605%" height="15" fill="rgb(245,184,37)" fg:x="980" fg:w="2"/><text x="78.9017%" y="639.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (23 samples, 1.85%)</title><rect x="77.0465%" y="709" width="1.8459%" height="15" fill="rgb(248,91,47)" fg:x="960" fg:w="23"/><text x="77.2965%" y="719.50">&lt;..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (23 samples, 1.85%)</title><rect x="77.0465%" y="693" width="1.8459%" height="15" fill="rgb(243,199,8)" fg:x="960" fg:w="23"/><text x="77.2965%" y="703.50">e..</text></g><g><title>engine::session::Session::new (23 samples, 1.85%)</title><rect x="77.0465%" y="677" width="1.8459%" height="15" fill="rgb(249,12,15)" fg:x="960" fg:w="23"/><text x="77.2965%" y="687.50">e..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="78.8122%" y="661" width="0.0803%" height="15" fill="rgb(245,97,12)" fg:x="982" fg:w="1"/><text x="79.0622%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="78.8122%" y="645" width="0.0803%" height="15" fill="rgb(244,61,1)" fg:x="982" fg:w="1"/><text x="79.0622%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="78.9727%" y="533" width="0.1605%" height="15" fill="rgb(222,194,10)" fg:x="984" fg:w="2"/><text x="79.2227%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="78.9727%" y="517" width="0.1605%" height="15" fill="rgb(226,178,8)" fg:x="984" fg:w="2"/><text x="79.2227%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="78.9727%" y="597" width="0.2408%" height="15" fill="rgb(241,32,34)" fg:x="984" fg:w="3"/><text x="79.2227%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="78.9727%" y="581" width="0.2408%" height="15" fill="rgb(254,26,6)" fg:x="984" fg:w="3"/><text x="79.2227%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="78.9727%" y="565" width="0.2408%" height="15" fill="rgb(249,71,11)" fg:x="984" fg:w="3"/><text x="79.2227%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="78.9727%" y="549" width="0.2408%" height="15" fill="rgb(232,170,27)" fg:x="984" fg:w="3"/><text x="79.2227%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="79.1332%" y="533" width="0.0803%" height="15" fill="rgb(214,223,17)" fg:x="986" fg:w="1"/><text x="79.3832%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.1332%" y="517" width="0.0803%" height="15" fill="rgb(250,18,15)" fg:x="986" fg:w="1"/><text x="79.3832%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.2135%" y="549" width="0.0803%" height="15" fill="rgb(212,153,51)" fg:x="987" fg:w="1"/><text x="79.4635%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="79.2135%" y="597" width="0.1605%" height="15" fill="rgb(219,194,12)" fg:x="987" fg:w="2"/><text x="79.4635%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="79.2135%" y="581" width="0.1605%" height="15" fill="rgb(212,58,17)" fg:x="987" fg:w="2"/><text x="79.4635%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="79.2135%" y="565" width="0.1605%" height="15" fill="rgb(254,5,10)" fg:x="987" fg:w="2"/><text x="79.4635%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.2937%" y="549" width="0.0803%" height="15" fill="rgb(246,91,7)" fg:x="988" fg:w="1"/><text x="79.5437%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.2937%" y="533" width="0.0803%" height="15" fill="rgb(218,108,49)" fg:x="988" fg:w="1"/><text x="79.5437%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.2937%" y="517" width="0.0803%" height="15" fill="rgb(238,123,20)" fg:x="988" fg:w="1"/><text x="79.5437%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.2937%" y="501" width="0.0803%" height="15" fill="rgb(231,69,23)" fg:x="988" fg:w="1"/><text x="79.5437%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.3740%" y="549" width="0.0803%" height="15" fill="rgb(230,209,3)" fg:x="989" fg:w="1"/><text x="79.6240%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="79.4543%" y="501" width="0.0803%" height="15" fill="rgb(231,19,0)" fg:x="990" fg:w="1"/><text x="79.7043%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="79.4543%" y="485" width="0.0803%" height="15" fill="rgb(226,192,25)" fg:x="990" fg:w="1"/><text x="79.7043%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="79.4543%" y="469" width="0.0803%" height="15" fill="rgb(223,175,53)" fg:x="990" fg:w="1"/><text x="79.7043%" y="479.50"></text></g><g><title>engine::session::Session::flush (9 samples, 0.72%)</title><rect x="78.8925%" y="693" width="0.7223%" height="15" fill="rgb(248,35,51)" fg:x="983" fg:w="9"/><text x="79.1425%" y="703.50"></text></g><g><title>engine::session::state::State::close (9 samples, 0.72%)</title><rect x="78.8925%" y="677" width="0.7223%" height="15" fill="rgb(230,37,26)" fg:x="983" fg:w="9"/><text x="79.1425%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (8 samples, 0.64%)</title><rect x="78.9727%" y="661" width="0.6421%" height="15" fill="rgb(206,120,22)" fg:x="984" fg:w="8"/><text x="79.2227%" y="671.50"></text></g><g><title>core::iter::adapters::try_process (8 samples, 0.64%)</title><rect x="78.9727%" y="645" width="0.6421%" height="15" fill="rgb(207,165,28)" fg:x="984" fg:w="8"/><text x="79.2227%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.64%)</title><rect x="78.9727%" y="629" width="0.6421%" height="15" fill="rgb(226,23,46)" fg:x="984" fg:w="8"/><text x="79.2227%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (8 samples, 0.64%)</title><rect x="78.9727%" y="613" width="0.6421%" height="15" fill="rgb(208,130,44)" fg:x="984" fg:w="8"/><text x="79.2227%" y="623.50"></text></g><g><title>kernel::model::any_entity_changes (3 samples, 0.24%)</title><rect x="79.3740%" y="597" width="0.2408%" height="15" fill="rgb(231,67,8)" fg:x="989" fg:w="3"/><text x="79.6240%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="79.3740%" y="581" width="0.2408%" height="15" fill="rgb(205,183,22)" fg:x="989" fg:w="3"/><text x="79.6240%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="79.3740%" y="565" width="0.2408%" height="15" fill="rgb(224,47,9)" fg:x="989" fg:w="3"/><text x="79.6240%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="79.4543%" y="549" width="0.1605%" height="15" fill="rgb(250,183,49)" fg:x="990" fg:w="2"/><text x="79.7043%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="79.4543%" y="533" width="0.1605%" height="15" fill="rgb(220,151,39)" fg:x="990" fg:w="2"/><text x="79.7043%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="79.4543%" y="517" width="0.1605%" height="15" fill="rgb(220,118,20)" fg:x="990" fg:w="2"/><text x="79.7043%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="79.5345%" y="501" width="0.0803%" height="15" fill="rgb(231,65,51)" fg:x="991" fg:w="1"/><text x="79.7845%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="79.5345%" y="485" width="0.0803%" height="15" fill="rgb(253,125,37)" fg:x="991" fg:w="1"/><text x="79.7845%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="79.5345%" y="469" width="0.0803%" height="15" fill="rgb(232,102,6)" fg:x="991" fg:w="1"/><text x="79.7845%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.5345%" y="453" width="0.0803%" height="15" fill="rgb(251,105,13)" fg:x="991" fg:w="1"/><text x="79.7845%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="79.6148%" y="661" width="0.0803%" height="15" fill="rgb(222,179,29)" fg:x="992" fg:w="1"/><text x="79.8648%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.6148%" y="645" width="0.0803%" height="15" fill="rgb(229,180,53)" fg:x="992" fg:w="1"/><text x="79.8648%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.6148%" y="629" width="0.0803%" height="15" fill="rgb(238,104,13)" fg:x="992" fg:w="1"/><text x="79.8648%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.6148%" y="613" width="0.0803%" height="15" fill="rgb(210,130,5)" fg:x="992" fg:w="1"/><text x="79.8648%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="79.6148%" y="677" width="0.1605%" height="15" fill="rgb(233,87,49)" fg:x="992" fg:w="2"/><text x="79.8648%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="79.6950%" y="661" width="0.0803%" height="15" fill="rgb(243,34,9)" fg:x="993" fg:w="1"/><text x="79.9450%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.7753%" y="645" width="0.0803%" height="15" fill="rgb(235,225,10)" fg:x="994" fg:w="1"/><text x="80.0253%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.7753%" y="629" width="0.0803%" height="15" fill="rgb(212,0,30)" fg:x="994" fg:w="1"/><text x="80.0253%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.7753%" y="613" width="0.0803%" height="15" fill="rgb(211,177,0)" fg:x="994" fg:w="1"/><text x="80.0253%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.7753%" y="597" width="0.0803%" height="15" fill="rgb(225,220,11)" fg:x="994" fg:w="1"/><text x="80.0253%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.7753%" y="581" width="0.0803%" height="15" fill="rgb(215,10,13)" fg:x="994" fg:w="1"/><text x="80.0253%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.7753%" y="565" width="0.0803%" height="15" fill="rgb(240,177,14)" fg:x="994" fg:w="1"/><text x="80.0253%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.7753%" y="549" width="0.0803%" height="15" fill="rgb(243,7,39)" fg:x="994" fg:w="1"/><text x="80.0253%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.7753%" y="533" width="0.0803%" height="15" fill="rgb(212,99,0)" fg:x="994" fg:w="1"/><text x="80.0253%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.7753%" y="517" width="0.0803%" height="15" fill="rgb(225,162,48)" fg:x="994" fg:w="1"/><text x="80.0253%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="79.7753%" y="501" width="0.0803%" height="15" fill="rgb(246,16,25)" fg:x="994" fg:w="1"/><text x="80.0253%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="79.7753%" y="485" width="0.0803%" height="15" fill="rgb(220,150,2)" fg:x="994" fg:w="1"/><text x="80.0253%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="79.7753%" y="469" width="0.0803%" height="15" fill="rgb(237,113,11)" fg:x="994" fg:w="1"/><text x="80.0253%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="79.7753%" y="453" width="0.0803%" height="15" fill="rgb(236,70,20)" fg:x="994" fg:w="1"/><text x="80.0253%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.7753%" y="437" width="0.0803%" height="15" fill="rgb(234,94,7)" fg:x="994" fg:w="1"/><text x="80.0253%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="79.7753%" y="661" width="0.1605%" height="15" fill="rgb(250,221,0)" fg:x="994" fg:w="2"/><text x="80.0253%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.8555%" y="645" width="0.0803%" height="15" fill="rgb(245,149,46)" fg:x="995" fg:w="1"/><text x="80.1055%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.8555%" y="629" width="0.0803%" height="15" fill="rgb(215,37,27)" fg:x="995" fg:w="1"/><text x="80.1055%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="79.8555%" y="613" width="0.0803%" height="15" fill="rgb(232,65,3)" fg:x="995" fg:w="1"/><text x="80.1055%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.8555%" y="597" width="0.0803%" height="15" fill="rgb(214,2,16)" fg:x="995" fg:w="1"/><text x="80.1055%" y="607.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="79.9358%" y="661" width="0.0803%" height="15" fill="rgb(227,131,50)" fg:x="996" fg:w="1"/><text x="80.1858%" y="671.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="79.9358%" y="645" width="0.0803%" height="15" fill="rgb(247,131,45)" fg:x="996" fg:w="1"/><text x="80.1858%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="79.9358%" y="629" width="0.0803%" height="15" fill="rgb(215,97,47)" fg:x="996" fg:w="1"/><text x="80.1858%" y="639.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.48%)</title><rect x="79.6148%" y="693" width="0.4815%" height="15" fill="rgb(233,143,12)" fg:x="992" fg:w="6"/><text x="79.8648%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="79.7753%" y="677" width="0.3210%" height="15" fill="rgb(222,57,17)" fg:x="994" fg:w="4"/><text x="80.0253%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="80.0161%" y="661" width="0.0803%" height="15" fill="rgb(214,119,38)" fg:x="997" fg:w="1"/><text x="80.2661%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="80.0161%" y="645" width="0.0803%" height="15" fill="rgb(217,28,47)" fg:x="997" fg:w="1"/><text x="80.2661%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.0161%" y="629" width="0.0803%" height="15" fill="rgb(231,14,52)" fg:x="997" fg:w="1"/><text x="80.2661%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.0161%" y="613" width="0.0803%" height="15" fill="rgb(220,158,18)" fg:x="997" fg:w="1"/><text x="80.2661%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.0161%" y="597" width="0.0803%" height="15" fill="rgb(222,143,46)" fg:x="997" fg:w="1"/><text x="80.2661%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="80.0161%" y="581" width="0.0803%" height="15" fill="rgb(227,165,5)" fg:x="997" fg:w="1"/><text x="80.2661%" y="591.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (1 samples, 0.08%)</title><rect x="80.0963%" y="693" width="0.0803%" height="15" fill="rgb(216,222,49)" fg:x="998" fg:w="1"/><text x="80.3463%" y="703.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="80.0963%" y="677" width="0.0803%" height="15" fill="rgb(238,73,39)" fg:x="998" fg:w="1"/><text x="80.3463%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="80.0963%" y="661" width="0.0803%" height="15" fill="rgb(252,115,9)" fg:x="998" fg:w="1"/><text x="80.3463%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="80.0963%" y="645" width="0.0803%" height="15" fill="rgb(238,202,4)" fg:x="998" fg:w="1"/><text x="80.3463%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="80.0963%" y="629" width="0.0803%" height="15" fill="rgb(252,153,44)" fg:x="998" fg:w="1"/><text x="80.3463%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="80.0963%" y="613" width="0.0803%" height="15" fill="rgb(235,128,27)" fg:x="998" fg:w="1"/><text x="80.3463%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="80.1766%" y="661" width="0.0803%" height="15" fill="rgb(221,121,47)" fg:x="999" fg:w="1"/><text x="80.4266%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="80.1766%" y="645" width="0.0803%" height="15" fill="rgb(247,211,47)" fg:x="999" fg:w="1"/><text x="80.4266%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="80.1766%" y="629" width="0.0803%" height="15" fill="rgb(252,47,49)" fg:x="999" fg:w="1"/><text x="80.4266%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="80.1766%" y="613" width="0.0803%" height="15" fill="rgb(219,119,53)" fg:x="999" fg:w="1"/><text x="80.4266%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.1766%" y="597" width="0.0803%" height="15" fill="rgb(243,165,53)" fg:x="999" fg:w="1"/><text x="80.4266%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.1766%" y="581" width="0.0803%" height="15" fill="rgb(230,12,35)" fg:x="999" fg:w="1"/><text x="80.4266%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="80.1766%" y="565" width="0.0803%" height="15" fill="rgb(239,57,49)" fg:x="999" fg:w="1"/><text x="80.4266%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.1766%" y="549" width="0.0803%" height="15" fill="rgb(231,154,7)" fg:x="999" fg:w="1"/><text x="80.4266%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.1766%" y="533" width="0.0803%" height="15" fill="rgb(248,81,34)" fg:x="999" fg:w="1"/><text x="80.4266%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.1766%" y="517" width="0.0803%" height="15" fill="rgb(247,9,5)" fg:x="999" fg:w="1"/><text x="80.4266%" y="527.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (2 samples, 0.16%)</title><rect x="80.1766%" y="693" width="0.1605%" height="15" fill="rgb(228,172,27)" fg:x="999" fg:w="2"/><text x="80.4266%" y="703.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="80.1766%" y="677" width="0.1605%" height="15" fill="rgb(230,57,44)" fg:x="999" fg:w="2"/><text x="80.4266%" y="687.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="80.2568%" y="661" width="0.0803%" height="15" fill="rgb(249,35,22)" fg:x="1000" fg:w="1"/><text x="80.5068%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="80.2568%" y="645" width="0.0803%" height="15" fill="rgb(250,137,27)" fg:x="1000" fg:w="1"/><text x="80.5068%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="80.2568%" y="629" width="0.0803%" height="15" fill="rgb(251,57,31)" fg:x="1000" fg:w="1"/><text x="80.5068%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="80.2568%" y="613" width="0.0803%" height="15" fill="rgb(238,60,0)" fg:x="1000" fg:w="1"/><text x="80.5068%" y="623.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="80.2568%" y="597" width="0.0803%" height="15" fill="rgb(242,185,39)" fg:x="1000" fg:w="1"/><text x="80.5068%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="80.2568%" y="581" width="0.0803%" height="15" fill="rgb(240,63,43)" fg:x="1000" fg:w="1"/><text x="80.5068%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="80.2568%" y="565" width="0.0803%" height="15" fill="rgb(236,155,6)" fg:x="1000" fg:w="1"/><text x="80.5068%" y="575.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="80.3371%" y="677" width="0.0803%" height="15" fill="rgb(215,11,29)" fg:x="1001" fg:w="1"/><text x="80.5871%" y="687.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="80.3371%" y="661" width="0.0803%" height="15" fill="rgb(228,180,48)" fg:x="1001" fg:w="1"/><text x="80.5871%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="80.3371%" y="645" width="0.0803%" height="15" fill="rgb(241,102,12)" fg:x="1001" fg:w="1"/><text x="80.5871%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.3371%" y="629" width="0.0803%" height="15" fill="rgb(246,213,4)" fg:x="1001" fg:w="1"/><text x="80.5871%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.4173%" y="677" width="0.0803%" height="15" fill="rgb(218,134,35)" fg:x="1002" fg:w="1"/><text x="80.6673%" y="687.50"></text></g><g><title>engine::session::should_force_rollback (2 samples, 0.16%)</title><rect x="80.4976%" y="645" width="0.1605%" height="15" fill="rgb(251,117,35)" fg:x="1003" fg:w="2"/><text x="80.7476%" y="655.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="80.5778%" y="629" width="0.0803%" height="15" fill="rgb(206,156,45)" fg:x="1004" fg:w="1"/><text x="80.8278%" y="639.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="80.5778%" y="613" width="0.0803%" height="15" fill="rgb(218,52,27)" fg:x="1004" fg:w="1"/><text x="80.8278%" y="623.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="80.5778%" y="597" width="0.0803%" height="15" fill="rgb(238,83,36)" fg:x="1004" fg:w="1"/><text x="80.8278%" y="607.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="80.5778%" y="581" width="0.0803%" height="15" fill="rgb(218,53,43)" fg:x="1004" fg:w="1"/><text x="80.8278%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="80.5778%" y="565" width="0.0803%" height="15" fill="rgb(239,54,39)" fg:x="1004" fg:w="1"/><text x="80.8278%" y="575.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="80.5778%" y="549" width="0.0803%" height="15" fill="rgb(212,198,13)" fg:x="1004" fg:w="1"/><text x="80.8278%" y="559.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="80.5778%" y="533" width="0.0803%" height="15" fill="rgb(234,54,46)" fg:x="1004" fg:w="1"/><text x="80.8278%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="80.6581%" y="613" width="0.0803%" height="15" fill="rgb(217,120,7)" fg:x="1005" fg:w="1"/><text x="80.9081%" y="623.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="80.7384%" y="613" width="0.0803%" height="15" fill="rgb(246,39,15)" fg:x="1006" fg:w="1"/><text x="80.9884%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="80.7384%" y="597" width="0.0803%" height="15" fill="rgb(242,143,31)" fg:x="1006" fg:w="1"/><text x="80.9884%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="80.7384%" y="581" width="0.0803%" height="15" fill="rgb(252,60,24)" fg:x="1006" fg:w="1"/><text x="80.9884%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.7384%" y="565" width="0.0803%" height="15" fill="rgb(249,220,7)" fg:x="1006" fg:w="1"/><text x="80.9884%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.7384%" y="549" width="0.0803%" height="15" fill="rgb(236,67,13)" fg:x="1006" fg:w="1"/><text x="80.9884%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="80.7384%" y="533" width="0.0803%" height="15" fill="rgb(210,62,39)" fg:x="1006" fg:w="1"/><text x="80.9884%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="80.7384%" y="517" width="0.0803%" height="15" fill="rgb(219,122,53)" fg:x="1006" fg:w="1"/><text x="80.9884%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="80.7384%" y="501" width="0.0803%" height="15" fill="rgb(218,87,25)" fg:x="1006" fg:w="1"/><text x="80.9884%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="80.7384%" y="485" width="0.0803%" height="15" fill="rgb(234,179,48)" fg:x="1006" fg:w="1"/><text x="80.9884%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="80.7384%" y="469" width="0.0803%" height="15" fill="rgb(248,90,0)" fg:x="1006" fg:w="1"/><text x="80.9884%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="80.9791%" y="549" width="0.1605%" height="15" fill="rgb(207,228,37)" fg:x="1009" fg:w="2"/><text x="81.2291%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="81.0594%" y="533" width="0.0803%" height="15" fill="rgb(235,214,15)" fg:x="1010" fg:w="1"/><text x="81.3094%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.0594%" y="517" width="0.0803%" height="15" fill="rgb(210,144,39)" fg:x="1010" fg:w="1"/><text x="81.3094%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="81.0594%" y="501" width="0.0803%" height="15" fill="rgb(222,67,41)" fg:x="1010" fg:w="1"/><text x="81.3094%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.0594%" y="485" width="0.0803%" height="15" fill="rgb(205,35,37)" fg:x="1010" fg:w="1"/><text x="81.3094%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="81.0594%" y="469" width="0.0803%" height="15" fill="rgb(216,125,40)" fg:x="1010" fg:w="1"/><text x="81.3094%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.0594%" y="453" width="0.0803%" height="15" fill="rgb(228,227,20)" fg:x="1010" fg:w="1"/><text x="81.3094%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="81.0594%" y="437" width="0.0803%" height="15" fill="rgb(242,173,45)" fg:x="1010" fg:w="1"/><text x="81.3094%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="81.1396%" y="533" width="0.0803%" height="15" fill="rgb(215,79,24)" fg:x="1011" fg:w="1"/><text x="81.3896%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="81.2199%" y="533" width="0.0803%" height="15" fill="rgb(238,164,38)" fg:x="1012" fg:w="1"/><text x="81.4699%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.2199%" y="517" width="0.0803%" height="15" fill="rgb(245,196,38)" fg:x="1012" fg:w="1"/><text x="81.4699%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="81.2199%" y="501" width="0.0803%" height="15" fill="rgb(231,217,29)" fg:x="1012" fg:w="1"/><text x="81.4699%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.2199%" y="485" width="0.0803%" height="15" fill="rgb(245,6,4)" fg:x="1012" fg:w="1"/><text x="81.4699%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="81.2199%" y="469" width="0.0803%" height="15" fill="rgb(214,76,49)" fg:x="1012" fg:w="1"/><text x="81.4699%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="81.3002%" y="485" width="0.0803%" height="15" fill="rgb(205,96,12)" fg:x="1013" fg:w="1"/><text x="81.5502%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.3002%" y="469" width="0.0803%" height="15" fill="rgb(243,131,4)" fg:x="1013" fg:w="1"/><text x="81.5502%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="81.3002%" y="517" width="0.1605%" height="15" fill="rgb(214,114,4)" fg:x="1013" fg:w="2"/><text x="81.5502%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="81.3002%" y="501" width="0.1605%" height="15" fill="rgb(234,215,15)" fg:x="1013" fg:w="2"/><text x="81.5502%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.3804%" y="485" width="0.0803%" height="15" fill="rgb(250,216,45)" fg:x="1014" fg:w="1"/><text x="81.6304%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="81.3804%" y="469" width="0.0803%" height="15" fill="rgb(236,128,4)" fg:x="1014" fg:w="1"/><text x="81.6304%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="81.4607%" y="501" width="0.2408%" height="15" fill="rgb(234,50,33)" fg:x="1015" fg:w="3"/><text x="81.7107%" y="511.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="81.5409%" y="485" width="0.1605%" height="15" fill="rgb(253,131,37)" fg:x="1016" fg:w="2"/><text x="81.7909%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="81.6212%" y="469" width="0.0803%" height="15" fill="rgb(218,55,27)" fg:x="1017" fg:w="1"/><text x="81.8712%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.6212%" y="453" width="0.0803%" height="15" fill="rgb(241,220,28)" fg:x="1017" fg:w="1"/><text x="81.8712%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="81.6212%" y="437" width="0.0803%" height="15" fill="rgb(241,90,48)" fg:x="1017" fg:w="1"/><text x="81.8712%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.6212%" y="421" width="0.0803%" height="15" fill="rgb(216,43,37)" fg:x="1017" fg:w="1"/><text x="81.8712%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="81.6212%" y="405" width="0.0803%" height="15" fill="rgb(207,173,9)" fg:x="1017" fg:w="1"/><text x="81.8712%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="81.4607%" y="517" width="0.6421%" height="15" fill="rgb(240,126,30)" fg:x="1015" fg:w="8"/><text x="81.7107%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="81.7014%" y="501" width="0.4013%" height="15" fill="rgb(228,178,53)" fg:x="1018" fg:w="5"/><text x="81.9514%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.40%)</title><rect x="81.7014%" y="485" width="0.4013%" height="15" fill="rgb(217,33,4)" fg:x="1018" fg:w="5"/><text x="81.9514%" y="495.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.40%)</title><rect x="81.7014%" y="469" width="0.4013%" height="15" fill="rgb(206,124,34)" fg:x="1018" fg:w="5"/><text x="81.9514%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (5 samples, 0.40%)</title><rect x="81.7014%" y="453" width="0.4013%" height="15" fill="rgb(208,122,53)" fg:x="1018" fg:w="5"/><text x="81.9514%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (5 samples, 0.40%)</title><rect x="81.7014%" y="437" width="0.4013%" height="15" fill="rgb(215,202,26)" fg:x="1018" fg:w="5"/><text x="81.9514%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="81.7817%" y="421" width="0.3210%" height="15" fill="rgb(232,198,31)" fg:x="1019" fg:w="4"/><text x="82.0317%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="81.7817%" y="405" width="0.3210%" height="15" fill="rgb(222,23,35)" fg:x="1019" fg:w="4"/><text x="82.0317%" y="415.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="81.7817%" y="389" width="0.3210%" height="15" fill="rgb(242,27,53)" fg:x="1019" fg:w="4"/><text x="82.0317%" y="399.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (16 samples, 1.28%)</title><rect x="80.8989%" y="565" width="1.2841%" height="15" fill="rgb(210,216,42)" fg:x="1008" fg:w="16"/><text x="81.1489%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (13 samples, 1.04%)</title><rect x="81.1396%" y="549" width="1.0433%" height="15" fill="rgb(234,39,38)" fg:x="1011" fg:w="13"/><text x="81.3896%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.88%)</title><rect x="81.3002%" y="533" width="0.8828%" height="15" fill="rgb(235,126,54)" fg:x="1013" fg:w="11"/><text x="81.5502%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.1027%" y="517" width="0.0803%" height="15" fill="rgb(235,150,33)" fg:x="1023" fg:w="1"/><text x="82.3527%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="82.1027%" y="501" width="0.0803%" height="15" fill="rgb(249,49,53)" fg:x="1023" fg:w="1"/><text x="82.3527%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="82.1027%" y="485" width="0.0803%" height="15" fill="rgb(238,60,50)" fg:x="1023" fg:w="1"/><text x="82.3527%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="82.1830%" y="517" width="0.0803%" height="15" fill="rgb(210,5,2)" fg:x="1024" fg:w="1"/><text x="82.4330%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.2632%" y="485" width="0.0803%" height="15" fill="rgb(214,207,24)" fg:x="1025" fg:w="1"/><text x="82.5132%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="82.1830%" y="565" width="0.2408%" height="15" fill="rgb(228,173,2)" fg:x="1024" fg:w="3"/><text x="82.4330%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="82.1830%" y="549" width="0.2408%" height="15" fill="rgb(244,26,8)" fg:x="1024" fg:w="3"/><text x="82.4330%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="82.1830%" y="533" width="0.2408%" height="15" fill="rgb(249,153,35)" fg:x="1024" fg:w="3"/><text x="82.4330%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="82.2632%" y="517" width="0.1605%" height="15" fill="rgb(221,215,40)" fg:x="1025" fg:w="2"/><text x="82.5132%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="82.2632%" y="501" width="0.1605%" height="15" fill="rgb(238,106,35)" fg:x="1025" fg:w="2"/><text x="82.5132%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="82.3435%" y="485" width="0.0803%" height="15" fill="rgb(207,195,21)" fg:x="1026" fg:w="1"/><text x="82.5935%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.3435%" y="469" width="0.0803%" height="15" fill="rgb(205,43,29)" fg:x="1026" fg:w="1"/><text x="82.5935%" y="479.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="82.4238%" y="549" width="0.1605%" height="15" fill="rgb(236,35,21)" fg:x="1027" fg:w="2"/><text x="82.6738%" y="559.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="82.5040%" y="533" width="0.0803%" height="15" fill="rgb(244,74,8)" fg:x="1028" fg:w="1"/><text x="82.7540%" y="543.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="82.5040%" y="517" width="0.0803%" height="15" fill="rgb(241,229,7)" fg:x="1028" fg:w="1"/><text x="82.7540%" y="527.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="82.5040%" y="501" width="0.0803%" height="15" fill="rgb(212,223,25)" fg:x="1028" fg:w="1"/><text x="82.7540%" y="511.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="82.5040%" y="485" width="0.0803%" height="15" fill="rgb(234,58,53)" fg:x="1028" fg:w="1"/><text x="82.7540%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.5843%" y="517" width="0.0803%" height="15" fill="rgb(244,36,1)" fg:x="1029" fg:w="1"/><text x="82.8343%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="82.5843%" y="501" width="0.0803%" height="15" fill="rgb(222,40,54)" fg:x="1029" fg:w="1"/><text x="82.8343%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.6645%" y="469" width="0.0803%" height="15" fill="rgb(210,207,39)" fg:x="1030" fg:w="1"/><text x="82.9145%" y="479.50"></text></g><g><title>engine::session::Session::flush (29 samples, 2.33%)</title><rect x="80.4976%" y="677" width="2.3274%" height="15" fill="rgb(234,52,14)" fg:x="1003" fg:w="29"/><text x="80.7476%" y="687.50">e..</text></g><g><title>engine::session::Session::save_changes (29 samples, 2.33%)</title><rect x="80.4976%" y="661" width="2.3274%" height="15" fill="rgb(239,108,46)" fg:x="1003" fg:w="29"/><text x="80.7476%" y="671.50">e..</text></g><g><title>engine::session::state::State::close (27 samples, 2.17%)</title><rect x="80.6581%" y="645" width="2.1669%" height="15" fill="rgb(252,223,5)" fg:x="1005" fg:w="27"/><text x="80.9081%" y="655.50">e..</text></g><g><title>engine::session::state::State::flush_entities (27 samples, 2.17%)</title><rect x="80.6581%" y="629" width="2.1669%" height="15" fill="rgb(227,181,11)" fg:x="1005" fg:w="27"/><text x="80.9081%" y="639.50">e..</text></g><g><title>core::iter::adapters::try_process (25 samples, 2.01%)</title><rect x="80.8186%" y="613" width="2.0064%" height="15" fill="rgb(248,126,40)" fg:x="1007" fg:w="25"/><text x="81.0686%" y="623.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (25 samples, 2.01%)</title><rect x="80.8186%" y="597" width="2.0064%" height="15" fill="rgb(243,1,18)" fg:x="1007" fg:w="25"/><text x="81.0686%" y="607.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (25 samples, 2.01%)</title><rect x="80.8186%" y="581" width="2.0064%" height="15" fill="rgb(214,145,23)" fg:x="1007" fg:w="25"/><text x="81.0686%" y="591.50">e..</text></g><g><title>kernel::model::any_entity_changes (5 samples, 0.40%)</title><rect x="82.4238%" y="565" width="0.4013%" height="15" fill="rgb(241,218,11)" fg:x="1027" fg:w="5"/><text x="82.6738%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="82.5843%" y="549" width="0.2408%" height="15" fill="rgb(214,219,24)" fg:x="1029" fg:w="3"/><text x="82.8343%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="82.5843%" y="533" width="0.2408%" height="15" fill="rgb(235,32,7)" fg:x="1029" fg:w="3"/><text x="82.8343%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="82.6645%" y="517" width="0.1605%" height="15" fill="rgb(227,121,28)" fg:x="1030" fg:w="2"/><text x="82.9145%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="82.6645%" y="501" width="0.1605%" height="15" fill="rgb(216,129,49)" fg:x="1030" fg:w="2"/><text x="82.9145%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="82.6645%" y="485" width="0.1605%" height="15" fill="rgb(207,194,50)" fg:x="1030" fg:w="2"/><text x="82.9145%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="82.7448%" y="469" width="0.0803%" height="15" fill="rgb(207,4,18)" fg:x="1031" fg:w="1"/><text x="82.9948%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="82.7448%" y="453" width="0.0803%" height="15" fill="rgb(213,50,30)" fg:x="1031" fg:w="1"/><text x="82.9948%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="82.7448%" y="437" width="0.0803%" height="15" fill="rgb(208,77,22)" fg:x="1031" fg:w="1"/><text x="82.9948%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="82.7448%" y="421" width="0.0803%" height="15" fill="rgb(244,204,34)" fg:x="1031" fg:w="1"/><text x="82.9948%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="82.7448%" y="405" width="0.0803%" height="15" fill="rgb(230,20,17)" fg:x="1031" fg:w="1"/><text x="82.9948%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.7448%" y="389" width="0.0803%" height="15" fill="rgb(237,83,15)" fg:x="1031" fg:w="1"/><text x="82.9948%" y="399.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="82.8250%" y="677" width="0.0803%" height="15" fill="rgb(221,109,25)" fg:x="1032" fg:w="1"/><text x="83.0750%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="82.8250%" y="661" width="0.0803%" height="15" fill="rgb(205,194,52)" fg:x="1032" fg:w="1"/><text x="83.0750%" y="671.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="82.8250%" y="645" width="0.0803%" height="15" fill="rgb(244,173,54)" fg:x="1032" fg:w="1"/><text x="83.0750%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.8250%" y="629" width="0.0803%" height="15" fill="rgb(227,181,18)" fg:x="1032" fg:w="1"/><text x="83.0750%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.9053%" y="629" width="0.0803%" height="15" fill="rgb(238,36,30)" fg:x="1033" fg:w="1"/><text x="83.1553%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.9053%" y="613" width="0.0803%" height="15" fill="rgb(254,85,0)" fg:x="1033" fg:w="1"/><text x="83.1553%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="82.9053%" y="645" width="0.1605%" height="15" fill="rgb(247,63,33)" fg:x="1033" fg:w="2"/><text x="83.1553%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="82.9856%" y="629" width="0.0803%" height="15" fill="rgb(220,7,54)" fg:x="1034" fg:w="1"/><text x="83.2356%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.9856%" y="613" width="0.0803%" height="15" fill="rgb(238,227,21)" fg:x="1034" fg:w="1"/><text x="83.2356%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="82.9856%" y="597" width="0.0803%" height="15" fill="rgb(237,29,31)" fg:x="1034" fg:w="1"/><text x="83.2356%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.9856%" y="581" width="0.0803%" height="15" fill="rgb(211,21,50)" fg:x="1034" fg:w="1"/><text x="83.2356%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="82.9856%" y="565" width="0.0803%" height="15" fill="rgb(239,119,2)" fg:x="1034" fg:w="1"/><text x="83.2356%" y="575.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="83.0658%" y="645" width="0.0803%" height="15" fill="rgb(250,2,39)" fg:x="1035" fg:w="1"/><text x="83.3158%" y="655.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="83.0658%" y="629" width="0.0803%" height="15" fill="rgb(244,46,53)" fg:x="1035" fg:w="1"/><text x="83.3158%" y="639.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="83.0658%" y="613" width="0.0803%" height="15" fill="rgb(209,21,19)" fg:x="1035" fg:w="1"/><text x="83.3158%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="83.0658%" y="597" width="0.0803%" height="15" fill="rgb(236,145,4)" fg:x="1035" fg:w="1"/><text x="83.3158%" y="607.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="83.0658%" y="581" width="0.0803%" height="15" fill="rgb(220,133,36)" fg:x="1035" fg:w="1"/><text x="83.3158%" y="591.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.32%)</title><rect x="82.9053%" y="677" width="0.3210%" height="15" fill="rgb(244,18,3)" fg:x="1033" fg:w="4"/><text x="83.1553%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="82.9053%" y="661" width="0.3210%" height="15" fill="rgb(232,171,48)" fg:x="1033" fg:w="4"/><text x="83.1553%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="83.1461%" y="645" width="0.0803%" height="15" fill="rgb(223,223,53)" fg:x="1036" fg:w="1"/><text x="83.3961%" y="655.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="83.1461%" y="629" width="0.0803%" height="15" fill="rgb(246,92,13)" fg:x="1036" fg:w="1"/><text x="83.3961%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="83.1461%" y="613" width="0.0803%" height="15" fill="rgb(229,171,10)" fg:x="1036" fg:w="1"/><text x="83.3961%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="83.1461%" y="597" width="0.0803%" height="15" fill="rgb(213,131,26)" fg:x="1036" fg:w="1"/><text x="83.3961%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.1461%" y="581" width="0.0803%" height="15" fill="rgb(242,87,54)" fg:x="1036" fg:w="1"/><text x="83.3961%" y="591.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="83.2263%" y="645" width="0.0803%" height="15" fill="rgb(237,21,35)" fg:x="1037" fg:w="1"/><text x="83.4763%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="83.2263%" y="629" width="0.0803%" height="15" fill="rgb(253,13,47)" fg:x="1037" fg:w="1"/><text x="83.4763%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="83.2263%" y="613" width="0.0803%" height="15" fill="rgb(215,122,49)" fg:x="1037" fg:w="1"/><text x="83.4763%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="83.2263%" y="597" width="0.0803%" height="15" fill="rgb(209,179,30)" fg:x="1037" fg:w="1"/><text x="83.4763%" y="607.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (2 samples, 0.16%)</title><rect x="83.2263%" y="677" width="0.1605%" height="15" fill="rgb(235,100,24)" fg:x="1037" fg:w="2"/><text x="83.4763%" y="687.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="83.2263%" y="661" width="0.1605%" height="15" fill="rgb(209,67,24)" fg:x="1037" fg:w="2"/><text x="83.4763%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="83.3066%" y="645" width="0.0803%" height="15" fill="rgb(206,74,32)" fg:x="1038" fg:w="1"/><text x="83.5566%" y="655.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="83.3066%" y="629" width="0.0803%" height="15" fill="rgb(212,45,25)" fg:x="1038" fg:w="1"/><text x="83.5566%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="83.3066%" y="613" width="0.0803%" height="15" fill="rgb(239,26,3)" fg:x="1038" fg:w="1"/><text x="83.5566%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="83.3066%" y="597" width="0.0803%" height="15" fill="rgb(218,36,15)" fg:x="1038" fg:w="1"/><text x="83.5566%" y="607.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="83.3066%" y="581" width="0.0803%" height="15" fill="rgb(206,108,24)" fg:x="1038" fg:w="1"/><text x="83.5566%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="83.3868%" y="661" width="0.0803%" height="15" fill="rgb(234,204,42)" fg:x="1039" fg:w="1"/><text x="83.6368%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="83.3868%" y="645" width="0.0803%" height="15" fill="rgb(229,2,11)" fg:x="1039" fg:w="1"/><text x="83.6368%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.3868%" y="629" width="0.0803%" height="15" fill="rgb(221,20,48)" fg:x="1039" fg:w="1"/><text x="83.6368%" y="639.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (40 samples, 3.21%)</title><rect x="80.3371%" y="693" width="3.2103%" height="15" fill="rgb(244,164,10)" fg:x="1001" fg:w="40"/><text x="80.5871%" y="703.50">plu..</text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="83.3868%" y="677" width="0.1605%" height="15" fill="rgb(243,229,2)" fg:x="1039" fg:w="2"/><text x="83.6368%" y="687.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="83.4671%" y="661" width="0.0803%" height="15" fill="rgb(232,131,37)" fg:x="1040" fg:w="1"/><text x="83.7171%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="83.4671%" y="645" width="0.0803%" height="15" fill="rgb(217,156,11)" fg:x="1040" fg:w="1"/><text x="83.7171%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="83.4671%" y="629" width="0.0803%" height="15" fill="rgb(239,99,48)" fg:x="1040" fg:w="1"/><text x="83.7171%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="83.4671%" y="613" width="0.0803%" height="15" fill="rgb(231,209,9)" fg:x="1040" fg:w="1"/><text x="83.7171%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="83.4671%" y="597" width="0.0803%" height="15" fill="rgb(254,97,27)" fg:x="1040" fg:w="1"/><text x="83.7171%" y="607.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="83.5474%" y="693" width="0.0803%" height="15" fill="rgb(223,151,38)" fg:x="1041" fg:w="1"/><text x="83.7974%" y="703.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="83.5474%" y="677" width="0.0803%" height="15" fill="rgb(219,206,35)" fg:x="1041" fg:w="1"/><text x="83.7974%" y="687.50"></text></g><g><title>kernel::model::builder::EntityBuilder::with_key (1 samples, 0.08%)</title><rect x="83.5474%" y="661" width="0.0803%" height="15" fill="rgb(216,130,31)" fg:x="1041" fg:w="1"/><text x="83.7974%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.6276%" y="613" width="0.0803%" height="15" fill="rgb(251,97,34)" fg:x="1042" fg:w="1"/><text x="83.8776%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.6276%" y="597" width="0.0803%" height="15" fill="rgb(246,159,47)" fg:x="1042" fg:w="1"/><text x="83.8776%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.6276%" y="581" width="0.0803%" height="15" fill="rgb(232,87,10)" fg:x="1042" fg:w="1"/><text x="83.8776%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="83.6276%" y="565" width="0.0803%" height="15" fill="rgb(249,1,37)" fg:x="1042" fg:w="1"/><text x="83.8776%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="83.6276%" y="549" width="0.0803%" height="15" fill="rgb(239,135,14)" fg:x="1042" fg:w="1"/><text x="83.8776%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="83.6276%" y="533" width="0.0803%" height="15" fill="rgb(253,116,46)" fg:x="1042" fg:w="1"/><text x="83.8776%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="83.6276%" y="517" width="0.0803%" height="15" fill="rgb(222,217,37)" fg:x="1042" fg:w="1"/><text x="83.8776%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="83.6276%" y="501" width="0.0803%" height="15" fill="rgb(252,96,8)" fg:x="1042" fg:w="1"/><text x="83.8776%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="83.6276%" y="485" width="0.0803%" height="15" fill="rgb(254,103,41)" fg:x="1042" fg:w="1"/><text x="83.8776%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="83.6276%" y="469" width="0.0803%" height="15" fill="rgb(218,213,19)" fg:x="1042" fg:w="1"/><text x="83.8776%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="83.6276%" y="453" width="0.0803%" height="15" fill="rgb(253,95,21)" fg:x="1042" fg:w="1"/><text x="83.8776%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="83.6276%" y="437" width="0.0803%" height="15" fill="rgb(229,26,28)" fg:x="1042" fg:w="1"/><text x="83.8776%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="83.6276%" y="421" width="0.0803%" height="15" fill="rgb(230,129,16)" fg:x="1042" fg:w="1"/><text x="83.8776%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="83.6276%" y="405" width="0.0803%" height="15" fill="rgb(236,126,17)" fg:x="1042" fg:w="1"/><text x="83.8776%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.6276%" y="389" width="0.0803%" height="15" fill="rgb(209,33,33)" fg:x="1042" fg:w="1"/><text x="83.8776%" y="399.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="83.6276%" y="645" width="0.1605%" height="15" fill="rgb(227,85,29)" fg:x="1042" fg:w="2"/><text x="83.8776%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="83.6276%" y="629" width="0.1605%" height="15" fill="rgb(241,53,46)" fg:x="1042" fg:w="2"/><text x="83.8776%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="83.7079%" y="613" width="0.0803%" height="15" fill="rgb(228,167,53)" fg:x="1043" fg:w="1"/><text x="83.9579%" y="623.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (4 samples, 0.32%)</title><rect x="83.6276%" y="693" width="0.3210%" height="15" fill="rgb(238,195,45)" fg:x="1042" fg:w="4"/><text x="83.8776%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (4 samples, 0.32%)</title><rect x="83.6276%" y="677" width="0.3210%" height="15" fill="rgb(252,124,45)" fg:x="1042" fg:w="4"/><text x="83.8776%" y="687.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.32%)</title><rect x="83.6276%" y="661" width="0.3210%" height="15" fill="rgb(251,38,35)" fg:x="1042" fg:w="4"/><text x="83.8776%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="83.7881%" y="645" width="0.1605%" height="15" fill="rgb(227,33,2)" fg:x="1044" fg:w="2"/><text x="84.0381%" y="655.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="83.7881%" y="629" width="0.1605%" height="15" fill="rgb(223,157,46)" fg:x="1044" fg:w="2"/><text x="84.0381%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="83.7881%" y="613" width="0.1605%" height="15" fill="rgb(222,78,41)" fg:x="1044" fg:w="2"/><text x="84.0381%" y="623.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="83.7881%" y="597" width="0.1605%" height="15" fill="rgb(248,176,11)" fg:x="1044" fg:w="2"/><text x="84.0381%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="83.7881%" y="581" width="0.1605%" height="15" fill="rgb(241,221,18)" fg:x="1044" fg:w="2"/><text x="84.0381%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="83.7881%" y="565" width="0.1605%" height="15" fill="rgb(218,85,22)" fg:x="1044" fg:w="2"/><text x="84.0381%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.8684%" y="549" width="0.0803%" height="15" fill="rgb(222,223,7)" fg:x="1045" fg:w="1"/><text x="84.1184%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.8684%" y="533" width="0.0803%" height="15" fill="rgb(254,59,39)" fg:x="1045" fg:w="1"/><text x="84.1184%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="83.9486%" y="661" width="0.0803%" height="15" fill="rgb(247,100,27)" fg:x="1046" fg:w="1"/><text x="84.1986%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.9486%" y="645" width="0.0803%" height="15" fill="rgb(237,207,10)" fg:x="1046" fg:w="1"/><text x="84.1986%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="83.9486%" y="677" width="0.1605%" height="15" fill="rgb(220,121,28)" fg:x="1046" fg:w="2"/><text x="84.1986%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="84.0289%" y="661" width="0.0803%" height="15" fill="rgb(213,223,20)" fg:x="1047" fg:w="1"/><text x="84.2789%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="84.0289%" y="645" width="0.0803%" height="15" fill="rgb(205,121,27)" fg:x="1047" fg:w="1"/><text x="84.2789%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="84.0289%" y="629" width="0.0803%" height="15" fill="rgb(253,24,53)" fg:x="1047" fg:w="1"/><text x="84.2789%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="84.0289%" y="613" width="0.0803%" height="15" fill="rgb(224,224,47)" fg:x="1047" fg:w="1"/><text x="84.2789%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="84.0289%" y="597" width="0.0803%" height="15" fill="rgb(250,125,36)" fg:x="1047" fg:w="1"/><text x="84.2789%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.0289%" y="581" width="0.0803%" height="15" fill="rgb(240,144,38)" fg:x="1047" fg:w="1"/><text x="84.2789%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.0289%" y="565" width="0.0803%" height="15" fill="rgb(250,15,50)" fg:x="1047" fg:w="1"/><text x="84.2789%" y="575.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="84.1894%" y="661" width="0.0803%" height="15" fill="rgb(210,24,26)" fg:x="1049" fg:w="1"/><text x="84.4394%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="84.1894%" y="645" width="0.0803%" height="15" fill="rgb(234,53,53)" fg:x="1049" fg:w="1"/><text x="84.4394%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="84.1894%" y="629" width="0.0803%" height="15" fill="rgb(208,108,28)" fg:x="1049" fg:w="1"/><text x="84.4394%" y="639.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (69 samples, 5.54%)</title><rect x="78.8925%" y="709" width="5.5377%" height="15" fill="rgb(227,143,7)" fg:x="983" fg:w="69"/><text x="79.1425%" y="719.50">&lt;tests:..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (6 samples, 0.48%)</title><rect x="83.9486%" y="693" width="0.4815%" height="15" fill="rgb(238,189,38)" fg:x="1046" fg:w="6"/><text x="84.1986%" y="703.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.32%)</title><rect x="84.1091%" y="677" width="0.3210%" height="15" fill="rgb(222,69,15)" fg:x="1048" fg:w="4"/><text x="84.3591%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="84.2697%" y="661" width="0.1605%" height="15" fill="rgb(213,169,7)" fg:x="1050" fg:w="2"/><text x="84.5197%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="84.3499%" y="645" width="0.0803%" height="15" fill="rgb(251,219,4)" fg:x="1051" fg:w="1"/><text x="84.5999%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="84.3499%" y="629" width="0.0803%" height="15" fill="rgb(241,55,40)" fg:x="1051" fg:w="1"/><text x="84.5999%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="84.3499%" y="613" width="0.0803%" height="15" fill="rgb(243,57,30)" fg:x="1051" fg:w="1"/><text x="84.5999%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.3499%" y="597" width="0.0803%" height="15" fill="rgb(234,50,30)" fg:x="1051" fg:w="1"/><text x="84.5999%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="84.4302%" y="709" width="0.0803%" height="15" fill="rgb(239,23,42)" fg:x="1052" fg:w="1"/><text x="84.6802%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="84.4302%" y="693" width="0.0803%" height="15" fill="rgb(217,38,19)" fg:x="1052" fg:w="1"/><text x="84.6802%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="84.4302%" y="677" width="0.0803%" height="15" fill="rgb(215,179,16)" fg:x="1052" fg:w="1"/><text x="84.6802%" y="687.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="84.4302%" y="661" width="0.0803%" height="15" fill="rgb(254,21,37)" fg:x="1052" fg:w="1"/><text x="84.6802%" y="671.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="84.5104%" y="581" width="0.0803%" height="15" fill="rgb(219,207,48)" fg:x="1053" fg:w="1"/><text x="84.7604%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="84.5104%" y="565" width="0.0803%" height="15" fill="rgb(227,225,41)" fg:x="1053" fg:w="1"/><text x="84.7604%" y="575.50"></text></g><g><title>core::fmt::run (1 samples, 0.08%)</title><rect x="84.5104%" y="549" width="0.0803%" height="15" fill="rgb(223,130,1)" fg:x="1053" fg:w="1"/><text x="84.7604%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="84.5104%" y="533" width="0.0803%" height="15" fill="rgb(249,54,42)" fg:x="1053" fg:w="1"/><text x="84.7604%" y="543.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="84.5104%" y="517" width="0.0803%" height="15" fill="rgb(248,69,25)" fg:x="1053" fg:w="1"/><text x="84.7604%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="84.5104%" y="501" width="0.0803%" height="15" fill="rgb(234,21,32)" fg:x="1053" fg:w="1"/><text x="84.7604%" y="511.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="84.5104%" y="485" width="0.0803%" height="15" fill="rgb(252,136,6)" fg:x="1053" fg:w="1"/><text x="84.7604%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="84.5104%" y="469" width="0.0803%" height="15" fill="rgb(245,87,12)" fg:x="1053" fg:w="1"/><text x="84.7604%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="84.5104%" y="453" width="0.0803%" height="15" fill="rgb(208,12,15)" fg:x="1053" fg:w="1"/><text x="84.7604%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="84.5104%" y="437" width="0.0803%" height="15" fill="rgb(250,98,2)" fg:x="1053" fg:w="1"/><text x="84.7604%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="84.5104%" y="421" width="0.0803%" height="15" fill="rgb(205,213,15)" fg:x="1053" fg:w="1"/><text x="84.7604%" y="431.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="84.5104%" y="693" width="0.1605%" height="15" fill="rgb(248,192,44)" fg:x="1053" fg:w="2"/><text x="84.7604%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="84.5104%" y="677" width="0.1605%" height="15" fill="rgb(221,89,17)" fg:x="1053" fg:w="2"/><text x="84.7604%" y="687.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="84.5104%" y="661" width="0.1605%" height="15" fill="rgb(209,55,3)" fg:x="1053" fg:w="2"/><text x="84.7604%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="84.5104%" y="645" width="0.1605%" height="15" fill="rgb(247,23,45)" fg:x="1053" fg:w="2"/><text x="84.7604%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="84.5104%" y="629" width="0.1605%" height="15" fill="rgb(235,152,23)" fg:x="1053" fg:w="2"/><text x="84.7604%" y="639.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (2 samples, 0.16%)</title><rect x="84.5104%" y="613" width="0.1605%" height="15" fill="rgb(244,63,13)" fg:x="1053" fg:w="2"/><text x="84.7604%" y="623.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (2 samples, 0.16%)</title><rect x="84.5104%" y="597" width="0.1605%" height="15" fill="rgb(227,30,37)" fg:x="1053" fg:w="2"/><text x="84.7604%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="84.5907%" y="581" width="0.0803%" height="15" fill="rgb(224,49,42)" fg:x="1054" fg:w="1"/><text x="84.8407%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="84.5907%" y="565" width="0.0803%" height="15" fill="rgb(218,129,5)" fg:x="1054" fg:w="1"/><text x="84.8407%" y="575.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="84.5907%" y="549" width="0.0803%" height="15" fill="rgb(240,199,54)" fg:x="1054" fg:w="1"/><text x="84.8407%" y="559.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="84.5907%" y="533" width="0.0803%" height="15" fill="rgb(234,31,13)" fg:x="1054" fg:w="1"/><text x="84.8407%" y="543.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="84.6709%" y="693" width="0.0803%" height="15" fill="rgb(219,73,54)" fg:x="1055" fg:w="1"/><text x="84.9209%" y="703.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="84.6709%" y="677" width="0.0803%" height="15" fill="rgb(251,162,10)" fg:x="1055" fg:w="1"/><text x="84.9209%" y="687.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="84.6709%" y="661" width="0.0803%" height="15" fill="rgb(240,138,47)" fg:x="1055" fg:w="1"/><text x="84.9209%" y="671.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="84.6709%" y="645" width="0.0803%" height="15" fill="rgb(216,138,26)" fg:x="1055" fg:w="1"/><text x="84.9209%" y="655.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="84.6709%" y="629" width="0.0803%" height="15" fill="rgb(243,17,35)" fg:x="1055" fg:w="1"/><text x="84.9209%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="84.6709%" y="613" width="0.0803%" height="15" fill="rgb(241,60,18)" fg:x="1055" fg:w="1"/><text x="84.9209%" y="623.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="84.6709%" y="597" width="0.0803%" height="15" fill="rgb(234,2,44)" fg:x="1055" fg:w="1"/><text x="84.9209%" y="607.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="84.6709%" y="581" width="0.0803%" height="15" fill="rgb(225,225,33)" fg:x="1055" fg:w="1"/><text x="84.9209%" y="591.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="84.7512%" y="661" width="0.0803%" height="15" fill="rgb(234,50,31)" fg:x="1056" fg:w="1"/><text x="85.0012%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="84.7512%" y="645" width="0.0803%" height="15" fill="rgb(249,6,25)" fg:x="1056" fg:w="1"/><text x="85.0012%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="84.7512%" y="629" width="0.0803%" height="15" fill="rgb(241,5,17)" fg:x="1056" fg:w="1"/><text x="85.0012%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="84.8315%" y="629" width="0.0803%" height="15" fill="rgb(207,116,10)" fg:x="1057" fg:w="1"/><text x="85.0815%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.8315%" y="613" width="0.0803%" height="15" fill="rgb(222,128,18)" fg:x="1057" fg:w="1"/><text x="85.0815%" y="623.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="84.8315%" y="597" width="0.0803%" height="15" fill="rgb(229,109,25)" fg:x="1057" fg:w="1"/><text x="85.0815%" y="607.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="84.9117%" y="597" width="0.0803%" height="15" fill="rgb(222,102,25)" fg:x="1058" fg:w="1"/><text x="85.1617%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="84.9117%" y="581" width="0.0803%" height="15" fill="rgb(239,211,5)" fg:x="1058" fg:w="1"/><text x="85.1617%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="84.9920%" y="565" width="0.2408%" height="15" fill="rgb(223,136,26)" fg:x="1059" fg:w="3"/><text x="85.2420%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="84.9920%" y="549" width="0.2408%" height="15" fill="rgb(227,30,15)" fg:x="1059" fg:w="3"/><text x="85.2420%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="84.9920%" y="533" width="0.2408%" height="15" fill="rgb(247,76,4)" fg:x="1059" fg:w="3"/><text x="85.2420%" y="543.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="84.9920%" y="517" width="0.2408%" height="15" fill="rgb(245,38,48)" fg:x="1059" fg:w="3"/><text x="85.2420%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="85.1525%" y="501" width="0.0803%" height="15" fill="rgb(210,220,14)" fg:x="1061" fg:w="1"/><text x="85.4025%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="85.1525%" y="485" width="0.0803%" height="15" fill="rgb(224,60,51)" fg:x="1061" fg:w="1"/><text x="85.4025%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="84.9920%" y="581" width="0.3210%" height="15" fill="rgb(212,133,49)" fg:x="1059" fg:w="4"/><text x="85.2420%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="85.2327%" y="565" width="0.0803%" height="15" fill="rgb(231,39,22)" fg:x="1062" fg:w="1"/><text x="85.4827%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.48%)</title><rect x="84.9117%" y="613" width="0.4815%" height="15" fill="rgb(236,173,22)" fg:x="1058" fg:w="6"/><text x="85.1617%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="84.9920%" y="597" width="0.4013%" height="15" fill="rgb(210,70,0)" fg:x="1059" fg:w="5"/><text x="85.2420%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="85.3130%" y="581" width="0.0803%" height="15" fill="rgb(215,170,11)" fg:x="1063" fg:w="1"/><text x="85.5630%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="85.3130%" y="565" width="0.0803%" height="15" fill="rgb(220,154,28)" fg:x="1063" fg:w="1"/><text x="85.5630%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="85.3130%" y="549" width="0.0803%" height="15" fill="rgb(240,160,41)" fg:x="1063" fg:w="1"/><text x="85.5630%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="85.3130%" y="533" width="0.0803%" height="15" fill="rgb(243,215,41)" fg:x="1063" fg:w="1"/><text x="85.5630%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.3130%" y="517" width="0.0803%" height="15" fill="rgb(214,208,31)" fg:x="1063" fg:w="1"/><text x="85.5630%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="85.3130%" y="501" width="0.0803%" height="15" fill="rgb(247,57,22)" fg:x="1063" fg:w="1"/><text x="85.5630%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="85.3933%" y="565" width="0.0803%" height="15" fill="rgb(228,73,52)" fg:x="1064" fg:w="1"/><text x="85.6433%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="85.5538%" y="549" width="0.0803%" height="15" fill="rgb(252,60,9)" fg:x="1066" fg:w="1"/><text x="85.8038%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.5538%" y="533" width="0.0803%" height="15" fill="rgb(233,9,51)" fg:x="1066" fg:w="1"/><text x="85.8038%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="85.6340%" y="533" width="0.0803%" height="15" fill="rgb(223,67,14)" fg:x="1067" fg:w="1"/><text x="85.8840%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="85.6340%" y="517" width="0.0803%" height="15" fill="rgb(222,86,2)" fg:x="1067" fg:w="1"/><text x="85.8840%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.6340%" y="501" width="0.0803%" height="15" fill="rgb(243,58,54)" fg:x="1067" fg:w="1"/><text x="85.8840%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="85.3933%" y="613" width="0.4013%" height="15" fill="rgb(210,200,39)" fg:x="1064" fg:w="5"/><text x="85.6433%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="85.3933%" y="597" width="0.4013%" height="15" fill="rgb(238,135,9)" fg:x="1064" fg:w="5"/><text x="85.6433%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="85.3933%" y="581" width="0.4013%" height="15" fill="rgb(232,179,7)" fg:x="1064" fg:w="5"/><text x="85.6433%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="85.4735%" y="565" width="0.3210%" height="15" fill="rgb(245,65,41)" fg:x="1065" fg:w="4"/><text x="85.7235%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="85.6340%" y="549" width="0.1605%" height="15" fill="rgb(227,43,8)" fg:x="1067" fg:w="2"/><text x="85.8840%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="85.7143%" y="533" width="0.0803%" height="15" fill="rgb(235,91,14)" fg:x="1068" fg:w="1"/><text x="85.9643%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="85.7143%" y="517" width="0.0803%" height="15" fill="rgb(235,219,31)" fg:x="1068" fg:w="1"/><text x="85.9643%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.7143%" y="501" width="0.0803%" height="15" fill="rgb(227,121,25)" fg:x="1068" fg:w="1"/><text x="85.9643%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="85.7945%" y="581" width="0.0803%" height="15" fill="rgb(254,129,24)" fg:x="1069" fg:w="1"/><text x="86.0445%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="85.7945%" y="565" width="0.0803%" height="15" fill="rgb(226,144,49)" fg:x="1069" fg:w="1"/><text x="86.0445%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="85.7945%" y="549" width="0.0803%" height="15" fill="rgb(214,187,32)" fg:x="1069" fg:w="1"/><text x="86.0445%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="85.7945%" y="533" width="0.0803%" height="15" fill="rgb(243,129,46)" fg:x="1069" fg:w="1"/><text x="86.0445%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.7945%" y="517" width="0.0803%" height="15" fill="rgb(221,185,35)" fg:x="1069" fg:w="1"/><text x="86.0445%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.8748%" y="581" width="0.0803%" height="15" fill="rgb(205,0,32)" fg:x="1070" fg:w="1"/><text x="86.1248%" y="591.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="85.9551%" y="581" width="0.0803%" height="15" fill="rgb(229,179,12)" fg:x="1071" fg:w="1"/><text x="86.2051%" y="591.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (4 samples, 0.32%)</title><rect x="85.7945%" y="597" width="0.3210%" height="15" fill="rgb(252,107,19)" fg:x="1069" fg:w="4"/><text x="86.0445%" y="607.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="86.0353%" y="581" width="0.0803%" height="15" fill="rgb(220,95,27)" fg:x="1072" fg:w="1"/><text x="86.2853%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.0353%" y="565" width="0.0803%" height="15" fill="rgb(240,113,40)" fg:x="1072" fg:w="1"/><text x="86.2853%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.0353%" y="549" width="0.0803%" height="15" fill="rgb(208,4,43)" fg:x="1072" fg:w="1"/><text x="86.2853%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.0353%" y="533" width="0.0803%" height="15" fill="rgb(247,189,30)" fg:x="1072" fg:w="1"/><text x="86.2853%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.1958%" y="565" width="0.0803%" height="15" fill="rgb(231,157,17)" fg:x="1074" fg:w="1"/><text x="86.4458%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="86.2761%" y="565" width="0.1605%" height="15" fill="rgb(224,139,6)" fg:x="1075" fg:w="2"/><text x="86.5261%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.3563%" y="549" width="0.0803%" height="15" fill="rgb(223,83,16)" fg:x="1076" fg:w="1"/><text x="86.6063%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="86.4366%" y="565" width="0.1605%" height="15" fill="rgb(232,211,20)" fg:x="1077" fg:w="2"/><text x="86.6866%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="86.4366%" y="549" width="0.1605%" height="15" fill="rgb(225,203,35)" fg:x="1077" fg:w="2"/><text x="86.6866%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="86.7576%" y="485" width="0.0803%" height="15" fill="rgb(215,211,44)" fg:x="1081" fg:w="1"/><text x="87.0076%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="86.8379%" y="469" width="0.0803%" height="15" fill="rgb(248,213,26)" fg:x="1082" fg:w="1"/><text x="87.0879%" y="479.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (11 samples, 0.88%)</title><rect x="86.1156%" y="597" width="0.8828%" height="15" fill="rgb(214,23,52)" fg:x="1073" fg:w="11"/><text x="86.3656%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (11 samples, 0.88%)</title><rect x="86.1156%" y="581" width="0.8828%" height="15" fill="rgb(225,173,50)" fg:x="1073" fg:w="11"/><text x="86.3656%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="86.5971%" y="565" width="0.4013%" height="15" fill="rgb(206,150,22)" fg:x="1079" fg:w="5"/><text x="86.8471%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="86.6774%" y="549" width="0.3210%" height="15" fill="rgb(239,64,23)" fg:x="1080" fg:w="4"/><text x="86.9274%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="86.6774%" y="533" width="0.3210%" height="15" fill="rgb(242,50,38)" fg:x="1080" fg:w="4"/><text x="86.9274%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="86.6774%" y="517" width="0.3210%" height="15" fill="rgb(217,91,15)" fg:x="1080" fg:w="4"/><text x="86.9274%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="86.7576%" y="501" width="0.2408%" height="15" fill="rgb(230,172,6)" fg:x="1081" fg:w="3"/><text x="87.0076%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="86.8379%" y="485" width="0.1605%" height="15" fill="rgb(221,98,26)" fg:x="1082" fg:w="2"/><text x="87.0879%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="86.9181%" y="469" width="0.0803%" height="15" fill="rgb(227,210,45)" fg:x="1083" fg:w="1"/><text x="87.1681%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="86.9181%" y="453" width="0.0803%" height="15" fill="rgb(206,8,30)" fg:x="1083" fg:w="1"/><text x="87.1681%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="86.9984%" y="405" width="0.0803%" height="15" fill="rgb(241,219,17)" fg:x="1084" fg:w="1"/><text x="87.2484%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="86.9984%" y="389" width="0.0803%" height="15" fill="rgb(247,121,29)" fg:x="1084" fg:w="1"/><text x="87.2484%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.9984%" y="373" width="0.0803%" height="15" fill="rgb(219,169,49)" fg:x="1084" fg:w="1"/><text x="87.2484%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="86.9984%" y="453" width="0.1605%" height="15" fill="rgb(253,49,49)" fg:x="1084" fg:w="2"/><text x="87.2484%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="86.9984%" y="437" width="0.1605%" height="15" fill="rgb(217,178,3)" fg:x="1084" fg:w="2"/><text x="87.2484%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="86.9984%" y="421" width="0.1605%" height="15" fill="rgb(234,73,37)" fg:x="1084" fg:w="2"/><text x="87.2484%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.0787%" y="405" width="0.0803%" height="15" fill="rgb(250,98,22)" fg:x="1085" fg:w="1"/><text x="87.3287%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="87.1589%" y="405" width="0.0803%" height="15" fill="rgb(220,108,37)" fg:x="1086" fg:w="1"/><text x="87.4089%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.1589%" y="389" width="0.0803%" height="15" fill="rgb(225,168,10)" fg:x="1086" fg:w="1"/><text x="87.4089%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="87.1589%" y="437" width="0.1605%" height="15" fill="rgb(247,215,21)" fg:x="1086" fg:w="2"/><text x="87.4089%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="87.1589%" y="421" width="0.1605%" height="15" fill="rgb(253,189,31)" fg:x="1086" fg:w="2"/><text x="87.4089%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="87.2392%" y="405" width="0.0803%" height="15" fill="rgb(241,54,22)" fg:x="1087" fg:w="1"/><text x="87.4892%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="87.2392%" y="389" width="0.0803%" height="15" fill="rgb(211,87,4)" fg:x="1087" fg:w="1"/><text x="87.4892%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.2392%" y="373" width="0.0803%" height="15" fill="rgb(245,112,24)" fg:x="1087" fg:w="1"/><text x="87.4892%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="86.9984%" y="501" width="0.4013%" height="15" fill="rgb(235,190,41)" fg:x="1084" fg:w="5"/><text x="87.2484%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="86.9984%" y="485" width="0.4013%" height="15" fill="rgb(214,89,8)" fg:x="1084" fg:w="5"/><text x="87.2484%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="86.9984%" y="469" width="0.4013%" height="15" fill="rgb(249,155,35)" fg:x="1084" fg:w="5"/><text x="87.2484%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="87.1589%" y="453" width="0.2408%" height="15" fill="rgb(249,88,26)" fg:x="1086" fg:w="3"/><text x="87.4089%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="87.3194%" y="437" width="0.0803%" height="15" fill="rgb(232,56,8)" fg:x="1088" fg:w="1"/><text x="87.5694%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.3194%" y="421" width="0.0803%" height="15" fill="rgb(240,95,3)" fg:x="1088" fg:w="1"/><text x="87.5694%" y="431.50"></text></g><g><title>engine::session::state::State::flush_entities (34 samples, 2.73%)</title><rect x="84.7512%" y="677" width="2.7287%" height="15" fill="rgb(222,44,28)" fg:x="1056" fg:w="34"/><text x="85.0012%" y="687.50">en..</text></g><g><title>core::iter::adapters::try_process (33 samples, 2.65%)</title><rect x="84.8315%" y="661" width="2.6485%" height="15" fill="rgb(234,16,30)" fg:x="1057" fg:w="33"/><text x="85.0815%" y="671.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (33 samples, 2.65%)</title><rect x="84.8315%" y="645" width="2.6485%" height="15" fill="rgb(223,26,17)" fg:x="1057" fg:w="33"/><text x="85.0815%" y="655.50">&lt;a..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (32 samples, 2.57%)</title><rect x="84.9117%" y="629" width="2.5682%" height="15" fill="rgb(239,187,47)" fg:x="1058" fg:w="32"/><text x="85.1617%" y="639.50">en..</text></g><g><title>kernel::model::any_entity_changes (21 samples, 1.69%)</title><rect x="85.7945%" y="613" width="1.6854%" height="15" fill="rgb(247,102,50)" fg:x="1069" fg:w="21"/><text x="86.0445%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (6 samples, 0.48%)</title><rect x="86.9984%" y="597" width="0.4815%" height="15" fill="rgb(231,216,22)" fg:x="1084" fg:w="6"/><text x="87.2484%" y="607.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.48%)</title><rect x="86.9984%" y="581" width="0.4815%" height="15" fill="rgb(216,201,26)" fg:x="1084" fg:w="6"/><text x="87.2484%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="86.9984%" y="565" width="0.4815%" height="15" fill="rgb(214,186,23)" fg:x="1084" fg:w="6"/><text x="87.2484%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="86.9984%" y="549" width="0.4815%" height="15" fill="rgb(235,184,4)" fg:x="1084" fg:w="6"/><text x="87.2484%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="86.9984%" y="533" width="0.4815%" height="15" fill="rgb(244,46,17)" fg:x="1084" fg:w="6"/><text x="87.2484%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="86.9984%" y="517" width="0.4815%" height="15" fill="rgb(248,74,46)" fg:x="1084" fg:w="6"/><text x="87.2484%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="87.3997%" y="501" width="0.0803%" height="15" fill="rgb(243,79,5)" fg:x="1089" fg:w="1"/><text x="87.6497%" y="511.50"></text></g><g><title>engine::session::Session::close (38 samples, 3.05%)</title><rect x="84.5104%" y="709" width="3.0498%" height="15" fill="rgb(213,148,1)" fg:x="1053" fg:w="38"/><text x="84.7604%" y="719.50">eng..</text></g><g><title>engine::session::state::State::close (35 samples, 2.81%)</title><rect x="84.7512%" y="693" width="2.8090%" height="15" fill="rgb(221,30,0)" fg:x="1056" fg:w="35"/><text x="85.0012%" y="703.50">en..</text></g><g><title>engine::session::state::State::flush_futures (1 samples, 0.08%)</title><rect x="87.4799%" y="677" width="0.0803%" height="15" fill="rgb(207,85,29)" fg:x="1090" fg:w="1"/><text x="87.7299%" y="687.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="87.5602%" y="677" width="0.0803%" height="15" fill="rgb(239,31,46)" fg:x="1091" fg:w="1"/><text x="87.8102%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="87.5602%" y="661" width="0.0803%" height="15" fill="rgb(219,6,1)" fg:x="1091" fg:w="1"/><text x="87.8102%" y="671.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Plugin&gt;::sources (1 samples, 0.08%)</title><rect x="87.5602%" y="645" width="0.0803%" height="15" fill="rgb(229,90,29)" fg:x="1091" fg:w="1"/><text x="87.8102%" y="655.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (1 samples, 0.08%)</title><rect x="87.6404%" y="645" width="0.0803%" height="15" fill="rgb(242,201,42)" fg:x="1092" fg:w="1"/><text x="87.8904%" y="655.50"></text></g><g><title>tracing_core::callsite::register_dispatch (1 samples, 0.08%)</title><rect x="87.6404%" y="629" width="0.0803%" height="15" fill="rgb(243,80,54)" fg:x="1092" fg:w="1"/><text x="87.8904%" y="639.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (1 samples, 0.08%)</title><rect x="87.6404%" y="613" width="0.0803%" height="15" fill="rgb(223,166,15)" fg:x="1092" fg:w="1"/><text x="87.8904%" y="623.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (1 samples, 0.08%)</title><rect x="87.6404%" y="597" width="0.0803%" height="15" fill="rgb(238,78,27)" fg:x="1092" fg:w="1"/><text x="87.8904%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="87.7207%" y="421" width="0.1605%" height="15" fill="rgb(235,28,43)" fg:x="1093" fg:w="2"/><text x="87.9707%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="87.7207%" y="405" width="0.1605%" height="15" fill="rgb(240,210,28)" fg:x="1093" fg:w="2"/><text x="87.9707%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="87.7207%" y="389" width="0.1605%" height="15" fill="rgb(253,6,46)" fg:x="1093" fg:w="2"/><text x="87.9707%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="87.7207%" y="373" width="0.1605%" height="15" fill="rgb(250,159,47)" fg:x="1093" fg:w="2"/><text x="87.9707%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="87.7207%" y="357" width="0.1605%" height="15" fill="rgb(216,139,2)" fg:x="1093" fg:w="2"/><text x="87.9707%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="87.7207%" y="341" width="0.1605%" height="15" fill="rgb(221,124,44)" fg:x="1093" fg:w="2"/><text x="87.9707%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="87.8010%" y="325" width="0.0803%" height="15" fill="rgb(205,37,22)" fg:x="1094" fg:w="1"/><text x="88.0510%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="87.8010%" y="309" width="0.0803%" height="15" fill="rgb(250,55,8)" fg:x="1094" fg:w="1"/><text x="88.0510%" y="319.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="87.7207%" y="469" width="0.2408%" height="15" fill="rgb(215,83,48)" fg:x="1093" fg:w="3"/><text x="87.9707%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="87.7207%" y="453" width="0.2408%" height="15" fill="rgb(253,2,32)" fg:x="1093" fg:w="3"/><text x="87.9707%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="87.7207%" y="437" width="0.2408%" height="15" fill="rgb(236,67,28)" fg:x="1093" fg:w="3"/><text x="87.9707%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="87.8812%" y="421" width="0.0803%" height="15" fill="rgb(252,55,15)" fg:x="1095" fg:w="1"/><text x="88.1312%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.8812%" y="405" width="0.0803%" height="15" fill="rgb(243,173,17)" fg:x="1095" fg:w="1"/><text x="88.1312%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="87.8812%" y="389" width="0.0803%" height="15" fill="rgb(215,212,13)" fg:x="1095" fg:w="1"/><text x="88.1312%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.8812%" y="373" width="0.0803%" height="15" fill="rgb(253,176,6)" fg:x="1095" fg:w="1"/><text x="88.1312%" y="383.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (4 samples, 0.32%)</title><rect x="87.7207%" y="565" width="0.3210%" height="15" fill="rgb(236,105,26)" fg:x="1093" fg:w="4"/><text x="87.9707%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (4 samples, 0.32%)</title><rect x="87.7207%" y="549" width="0.3210%" height="15" fill="rgb(239,226,32)" fg:x="1093" fg:w="4"/><text x="87.9707%" y="559.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (4 samples, 0.32%)</title><rect x="87.7207%" y="533" width="0.3210%" height="15" fill="rgb(236,104,51)" fg:x="1093" fg:w="4"/><text x="87.9707%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (4 samples, 0.32%)</title><rect x="87.7207%" y="517" width="0.3210%" height="15" fill="rgb(220,172,33)" fg:x="1093" fg:w="4"/><text x="87.9707%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (4 samples, 0.32%)</title><rect x="87.7207%" y="501" width="0.3210%" height="15" fill="rgb(224,182,25)" fg:x="1093" fg:w="4"/><text x="87.9707%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="87.7207%" y="485" width="0.3210%" height="15" fill="rgb(236,184,24)" fg:x="1093" fg:w="4"/><text x="87.9707%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="87.9615%" y="469" width="0.0803%" height="15" fill="rgb(241,221,14)" fg:x="1096" fg:w="1"/><text x="88.2115%" y="479.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="87.9615%" y="453" width="0.0803%" height="15" fill="rgb(227,146,5)" fg:x="1096" fg:w="1"/><text x="88.2115%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="87.9615%" y="437" width="0.0803%" height="15" fill="rgb(214,15,23)" fg:x="1096" fg:w="1"/><text x="88.2115%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="87.9615%" y="421" width="0.0803%" height="15" fill="rgb(233,157,31)" fg:x="1096" fg:w="1"/><text x="88.2115%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="87.9615%" y="405" width="0.0803%" height="15" fill="rgb(211,27,52)" fg:x="1096" fg:w="1"/><text x="88.2115%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="87.9615%" y="389" width="0.0803%" height="15" fill="rgb(212,223,15)" fg:x="1096" fg:w="1"/><text x="88.2115%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="87.9615%" y="373" width="0.0803%" height="15" fill="rgb(254,211,0)" fg:x="1096" fg:w="1"/><text x="88.2115%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="87.9615%" y="357" width="0.0803%" height="15" fill="rgb(205,43,38)" fg:x="1096" fg:w="1"/><text x="88.2115%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="87.9615%" y="341" width="0.0803%" height="15" fill="rgb(242,206,46)" fg:x="1096" fg:w="1"/><text x="88.2115%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="87.9615%" y="325" width="0.0803%" height="15" fill="rgb(220,221,12)" fg:x="1096" fg:w="1"/><text x="88.2115%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="87.9615%" y="309" width="0.0803%" height="15" fill="rgb(217,156,35)" fg:x="1096" fg:w="1"/><text x="88.2115%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="87.9615%" y="293" width="0.0803%" height="15" fill="rgb(207,181,49)" fg:x="1096" fg:w="1"/><text x="88.2115%" y="303.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="88.1220%" y="325" width="0.0803%" height="15" fill="rgb(235,103,47)" fg:x="1098" fg:w="1"/><text x="88.3720%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="88.1220%" y="309" width="0.0803%" height="15" fill="rgb(222,63,28)" fg:x="1098" fg:w="1"/><text x="88.3720%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.1220%" y="293" width="0.0803%" height="15" fill="rgb(244,137,21)" fg:x="1098" fg:w="1"/><text x="88.3720%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.2022%" y="245" width="0.0803%" height="15" fill="rgb(228,35,27)" fg:x="1099" fg:w="1"/><text x="88.4522%" y="255.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (4 samples, 0.32%)</title><rect x="88.0417%" y="357" width="0.3210%" height="15" fill="rgb(226,191,41)" fg:x="1097" fg:w="4"/><text x="88.2917%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="88.0417%" y="341" width="0.3210%" height="15" fill="rgb(210,154,3)" fg:x="1097" fg:w="4"/><text x="88.2917%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="88.2022%" y="325" width="0.1605%" height="15" fill="rgb(216,60,49)" fg:x="1099" fg:w="2"/><text x="88.4522%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (2 samples, 0.16%)</title><rect x="88.2022%" y="309" width="0.1605%" height="15" fill="rgb(226,17,20)" fg:x="1099" fg:w="2"/><text x="88.4522%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (2 samples, 0.16%)</title><rect x="88.2022%" y="293" width="0.1605%" height="15" fill="rgb(206,115,35)" fg:x="1099" fg:w="2"/><text x="88.4522%" y="303.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="88.2022%" y="277" width="0.1605%" height="15" fill="rgb(227,88,1)" fg:x="1099" fg:w="2"/><text x="88.4522%" y="287.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="88.2022%" y="261" width="0.1605%" height="15" fill="rgb(230,222,24)" fg:x="1099" fg:w="2"/><text x="88.4522%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="88.2825%" y="245" width="0.0803%" height="15" fill="rgb(214,124,32)" fg:x="1100" fg:w="1"/><text x="88.5325%" y="255.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (5 samples, 0.40%)</title><rect x="88.0417%" y="389" width="0.4013%" height="15" fill="rgb(240,41,36)" fg:x="1097" fg:w="5"/><text x="88.2917%" y="399.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (5 samples, 0.40%)</title><rect x="88.0417%" y="373" width="0.4013%" height="15" fill="rgb(221,17,52)" fg:x="1097" fg:w="5"/><text x="88.2917%" y="383.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="88.3628%" y="357" width="0.0803%" height="15" fill="rgb(252,70,16)" fg:x="1101" fg:w="1"/><text x="88.6128%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="88.6035%" y="357" width="0.0803%" height="15" fill="rgb(250,177,4)" fg:x="1104" fg:w="1"/><text x="88.8535%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="88.6035%" y="341" width="0.0803%" height="15" fill="rgb(240,188,47)" fg:x="1104" fg:w="1"/><text x="88.8535%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="88.6035%" y="325" width="0.0803%" height="15" fill="rgb(215,92,12)" fg:x="1104" fg:w="1"/><text x="88.8535%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.6035%" y="309" width="0.0803%" height="15" fill="rgb(242,110,29)" fg:x="1104" fg:w="1"/><text x="88.8535%" y="319.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="88.6035%" y="293" width="0.0803%" height="15" fill="rgb(208,211,26)" fg:x="1104" fg:w="1"/><text x="88.8535%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="88.6838%" y="341" width="0.0803%" height="15" fill="rgb(244,147,6)" fg:x="1105" fg:w="1"/><text x="88.9338%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="88.6838%" y="325" width="0.0803%" height="15" fill="rgb(211,130,42)" fg:x="1105" fg:w="1"/><text x="88.9338%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="88.7640%" y="341" width="0.0803%" height="15" fill="rgb(220,63,1)" fg:x="1106" fg:w="1"/><text x="89.0140%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="88.7640%" y="325" width="0.0803%" height="15" fill="rgb(241,212,30)" fg:x="1106" fg:w="1"/><text x="89.0140%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="88.6838%" y="357" width="0.3210%" height="15" fill="rgb(233,153,17)" fg:x="1105" fg:w="4"/><text x="88.9338%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="88.8443%" y="341" width="0.1605%" height="15" fill="rgb(236,3,10)" fg:x="1107" fg:w="2"/><text x="89.0943%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="88.8443%" y="325" width="0.1605%" height="15" fill="rgb(232,41,21)" fg:x="1107" fg:w="2"/><text x="89.0943%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="88.8443%" y="309" width="0.1605%" height="15" fill="rgb(206,63,51)" fg:x="1107" fg:w="2"/><text x="89.0943%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="88.8443%" y="293" width="0.1605%" height="15" fill="rgb(250,214,3)" fg:x="1107" fg:w="2"/><text x="89.0943%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="88.8443%" y="277" width="0.1605%" height="15" fill="rgb(254,89,27)" fg:x="1107" fg:w="2"/><text x="89.0943%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.9246%" y="261" width="0.0803%" height="15" fill="rgb(249,41,14)" fg:x="1108" fg:w="1"/><text x="89.1746%" y="271.50"></text></g><g><title>kernel::model::EntityPtr::gid (2 samples, 0.16%)</title><rect x="89.0048%" y="357" width="0.1605%" height="15" fill="rgb(221,196,51)" fg:x="1109" fg:w="2"/><text x="89.2548%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="89.0048%" y="341" width="0.1605%" height="15" fill="rgb(214,116,26)" fg:x="1109" fg:w="2"/><text x="89.2548%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="89.0048%" y="325" width="0.1605%" height="15" fill="rgb(236,67,7)" fg:x="1109" fg:w="2"/><text x="89.2548%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="89.0048%" y="309" width="0.1605%" height="15" fill="rgb(253,179,32)" fg:x="1109" fg:w="2"/><text x="89.2548%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="89.0851%" y="293" width="0.0803%" height="15" fill="rgb(218,33,15)" fg:x="1110" fg:w="1"/><text x="89.3351%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="89.0851%" y="277" width="0.0803%" height="15" fill="rgb(217,202,41)" fg:x="1110" fg:w="1"/><text x="89.3351%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="89.0851%" y="261" width="0.0803%" height="15" fill="rgb(234,133,5)" fg:x="1110" fg:w="1"/><text x="89.3351%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="89.0851%" y="245" width="0.0803%" height="15" fill="rgb(240,47,40)" fg:x="1110" fg:w="1"/><text x="89.3351%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="89.0851%" y="229" width="0.0803%" height="15" fill="rgb(234,166,26)" fg:x="1110" fg:w="1"/><text x="89.3351%" y="239.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="89.1653%" y="357" width="0.0803%" height="15" fill="rgb(244,125,51)" fg:x="1111" fg:w="1"/><text x="89.4153%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="89.3258%" y="277" width="0.0803%" height="15" fill="rgb(229,171,11)" fg:x="1113" fg:w="1"/><text x="89.5758%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="89.3258%" y="261" width="0.0803%" height="15" fill="rgb(224,38,45)" fg:x="1113" fg:w="1"/><text x="89.5758%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.3258%" y="245" width="0.0803%" height="15" fill="rgb(237,27,7)" fg:x="1113" fg:w="1"/><text x="89.5758%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.3258%" y="229" width="0.0803%" height="15" fill="rgb(216,52,7)" fg:x="1113" fg:w="1"/><text x="89.5758%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="89.4061%" y="277" width="0.0803%" height="15" fill="rgb(243,11,11)" fg:x="1114" fg:w="1"/><text x="89.6561%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="89.4061%" y="261" width="0.0803%" height="15" fill="rgb(253,167,20)" fg:x="1114" fg:w="1"/><text x="89.6561%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="89.4061%" y="245" width="0.0803%" height="15" fill="rgb(215,207,5)" fg:x="1114" fg:w="1"/><text x="89.6561%" y="255.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="89.4061%" y="229" width="0.0803%" height="15" fill="rgb(252,127,31)" fg:x="1114" fg:w="1"/><text x="89.6561%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.5666%" y="213" width="0.0803%" height="15" fill="rgb(209,106,27)" fg:x="1116" fg:w="1"/><text x="89.8166%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (3 samples, 0.24%)</title><rect x="89.6469%" y="213" width="0.2408%" height="15" fill="rgb(214,220,18)" fg:x="1117" fg:w="3"/><text x="89.8969%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (3 samples, 0.24%)</title><rect x="89.6469%" y="197" width="0.2408%" height="15" fill="rgb(237,89,12)" fg:x="1117" fg:w="3"/><text x="89.8969%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.8074%" y="181" width="0.0803%" height="15" fill="rgb(209,167,36)" fg:x="1119" fg:w="1"/><text x="90.0574%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="89.8876%" y="213" width="0.0803%" height="15" fill="rgb(243,45,22)" fg:x="1120" fg:w="1"/><text x="90.1376%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="89.8876%" y="197" width="0.0803%" height="15" fill="rgb(239,2,46)" fg:x="1120" fg:w="1"/><text x="90.1376%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="89.9679%" y="213" width="0.0803%" height="15" fill="rgb(241,101,0)" fg:x="1121" fg:w="1"/><text x="90.2179%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="90.0482%" y="149" width="0.0803%" height="15" fill="rgb(244,34,31)" fg:x="1122" fg:w="1"/><text x="90.2982%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.0482%" y="133" width="0.0803%" height="15" fill="rgb(248,23,22)" fg:x="1122" fg:w="1"/><text x="90.2982%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.0482%" y="117" width="0.0803%" height="15" fill="rgb(218,27,48)" fg:x="1122" fg:w="1"/><text x="90.2982%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.0482%" y="101" width="0.0803%" height="15" fill="rgb(232,78,1)" fg:x="1122" fg:w="1"/><text x="90.2982%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="90.1284%" y="149" width="0.0803%" height="15" fill="rgb(233,169,12)" fg:x="1123" fg:w="1"/><text x="90.3784%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="90.1284%" y="133" width="0.0803%" height="15" fill="rgb(225,222,54)" fg:x="1123" fg:w="1"/><text x="90.3784%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.2087%" y="133" width="0.0803%" height="15" fill="rgb(245,126,29)" fg:x="1124" fg:w="1"/><text x="90.4587%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.2087%" y="117" width="0.0803%" height="15" fill="rgb(241,63,48)" fg:x="1124" fg:w="1"/><text x="90.4587%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (14 samples, 1.12%)</title><rect x="90.2087%" y="149" width="1.1236%" height="15" fill="rgb(235,126,38)" fg:x="1124" fg:w="14"/><text x="90.4587%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (13 samples, 1.04%)</title><rect x="90.2889%" y="133" width="1.0433%" height="15" fill="rgb(232,96,49)" fg:x="1125" fg:w="13"/><text x="90.5389%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (13 samples, 1.04%)</title><rect x="90.2889%" y="117" width="1.0433%" height="15" fill="rgb(211,146,40)" fg:x="1125" fg:w="13"/><text x="90.5389%" y="127.50"></text></g><g><title>regex_automata::meta::strategy::new (23 samples, 1.85%)</title><rect x="89.5666%" y="229" width="1.8459%" height="15" fill="rgb(247,93,44)" fg:x="1116" fg:w="23"/><text x="89.8166%" y="239.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (17 samples, 1.36%)</title><rect x="90.0482%" y="213" width="1.3644%" height="15" fill="rgb(251,41,49)" fg:x="1122" fg:w="17"/><text x="90.2982%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 1.36%)</title><rect x="90.0482%" y="197" width="1.3644%" height="15" fill="rgb(218,155,12)" fg:x="1122" fg:w="17"/><text x="90.2982%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (17 samples, 1.36%)</title><rect x="90.0482%" y="181" width="1.3644%" height="15" fill="rgb(221,161,30)" fg:x="1122" fg:w="17"/><text x="90.2982%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (17 samples, 1.36%)</title><rect x="90.0482%" y="165" width="1.3644%" height="15" fill="rgb(221,179,11)" fg:x="1122" fg:w="17"/><text x="90.2982%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="91.3323%" y="149" width="0.0803%" height="15" fill="rgb(224,170,48)" fg:x="1138" fg:w="1"/><text x="91.5823%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.4125%" y="197" width="0.0803%" height="15" fill="rgb(223,117,5)" fg:x="1139" fg:w="1"/><text x="91.6625%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.4125%" y="181" width="0.0803%" height="15" fill="rgb(209,52,20)" fg:x="1139" fg:w="1"/><text x="91.6625%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.4125%" y="165" width="0.0803%" height="15" fill="rgb(209,19,41)" fg:x="1139" fg:w="1"/><text x="91.6625%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="91.4928%" y="197" width="0.0803%" height="15" fill="rgb(210,177,12)" fg:x="1140" fg:w="1"/><text x="91.7428%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="91.5730%" y="181" width="0.0803%" height="15" fill="rgb(211,159,37)" fg:x="1141" fg:w="1"/><text x="91.8230%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::peek (1 samples, 0.08%)</title><rect x="91.5730%" y="165" width="0.0803%" height="15" fill="rgb(209,20,2)" fg:x="1141" fg:w="1"/><text x="91.8230%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="91.5730%" y="197" width="0.2408%" height="15" fill="rgb(244,3,46)" fg:x="1141" fg:w="3"/><text x="91.8230%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="91.6533%" y="181" width="0.1605%" height="15" fill="rgb(220,94,38)" fg:x="1142" fg:w="2"/><text x="91.9033%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="91.6533%" y="165" width="0.1605%" height="15" fill="rgb(253,14,31)" fg:x="1142" fg:w="2"/><text x="91.9033%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="91.6533%" y="149" width="0.1605%" height="15" fill="rgb(234,176,13)" fg:x="1142" fg:w="2"/><text x="91.9033%" y="159.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="91.6533%" y="133" width="0.1605%" height="15" fill="rgb(218,62,25)" fg:x="1142" fg:w="2"/><text x="91.9033%" y="143.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (30 samples, 2.41%)</title><rect x="89.4864%" y="277" width="2.4077%" height="15" fill="rgb(216,124,40)" fg:x="1115" fg:w="30"/><text x="89.7364%" y="287.50">&lt;r..</text></g><g><title>regex::builders::string::RegexBuilder::build (30 samples, 2.41%)</title><rect x="89.4864%" y="261" width="2.4077%" height="15" fill="rgb(228,170,12)" fg:x="1115" fg:w="30"/><text x="89.7364%" y="271.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (30 samples, 2.41%)</title><rect x="89.4864%" y="245" width="2.4077%" height="15" fill="rgb(231,226,5)" fg:x="1115" fg:w="30"/><text x="89.7364%" y="255.50">re..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="91.4125%" y="229" width="0.4815%" height="15" fill="rgb(237,122,22)" fg:x="1139" fg:w="6"/><text x="91.6625%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.48%)</title><rect x="91.4125%" y="213" width="0.4815%" height="15" fill="rgb(209,185,25)" fg:x="1139" fg:w="6"/><text x="91.6625%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="91.8138%" y="197" width="0.0803%" height="15" fill="rgb(228,200,32)" fg:x="1144" fg:w="1"/><text x="92.0638%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="91.8941%" y="277" width="0.0803%" height="15" fill="rgb(217,140,10)" fg:x="1145" fg:w="1"/><text x="92.1441%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="91.8941%" y="261" width="0.0803%" height="15" fill="rgb(253,17,24)" fg:x="1145" fg:w="1"/><text x="92.1441%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.8941%" y="245" width="0.0803%" height="15" fill="rgb(212,61,6)" fg:x="1145" fg:w="1"/><text x="92.1441%" y="255.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (35 samples, 2.81%)</title><rect x="89.3258%" y="293" width="2.8090%" height="15" fill="rgb(205,14,25)" fg:x="1113" fg:w="35"/><text x="89.5758%" y="303.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="91.9743%" y="277" width="0.1605%" height="15" fill="rgb(232,69,41)" fg:x="1146" fg:w="2"/><text x="92.2243%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="91.9743%" y="261" width="0.1605%" height="15" fill="rgb(241,106,47)" fg:x="1146" fg:w="2"/><text x="92.2243%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="91.9743%" y="245" width="0.1605%" height="15" fill="rgb(210,213,53)" fg:x="1146" fg:w="2"/><text x="92.2243%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="91.9743%" y="229" width="0.1605%" height="15" fill="rgb(253,175,27)" fg:x="1146" fg:w="2"/><text x="92.2243%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="91.9743%" y="213" width="0.1605%" height="15" fill="rgb(211,171,24)" fg:x="1146" fg:w="2"/><text x="92.2243%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="92.0546%" y="197" width="0.0803%" height="15" fill="rgb(229,80,7)" fg:x="1147" fg:w="1"/><text x="92.3046%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="92.1348%" y="229" width="0.0803%" height="15" fill="rgb(212,46,39)" fg:x="1148" fg:w="1"/><text x="92.3848%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="92.1348%" y="213" width="0.0803%" height="15" fill="rgb(240,80,45)" fg:x="1148" fg:w="1"/><text x="92.3848%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.1348%" y="197" width="0.0803%" height="15" fill="rgb(253,177,40)" fg:x="1148" fg:w="1"/><text x="92.3848%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="92.2151%" y="213" width="0.1605%" height="15" fill="rgb(249,200,15)" fg:x="1149" fg:w="2"/><text x="92.4651%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (2 samples, 0.16%)</title><rect x="92.2151%" y="197" width="0.1605%" height="15" fill="rgb(217,78,26)" fg:x="1149" fg:w="2"/><text x="92.4651%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.2953%" y="181" width="0.0803%" height="15" fill="rgb(254,151,32)" fg:x="1150" fg:w="1"/><text x="92.5453%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="92.3756%" y="213" width="0.0803%" height="15" fill="rgb(226,165,27)" fg:x="1151" fg:w="1"/><text x="92.6256%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="92.3756%" y="197" width="0.0803%" height="15" fill="rgb(250,206,4)" fg:x="1151" fg:w="1"/><text x="92.6256%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="92.3756%" y="181" width="0.0803%" height="15" fill="rgb(231,229,27)" fg:x="1151" fg:w="1"/><text x="92.6256%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.3756%" y="165" width="0.0803%" height="15" fill="rgb(239,217,8)" fg:x="1151" fg:w="1"/><text x="92.6256%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (3 samples, 0.24%)</title><rect x="92.4559%" y="181" width="0.2408%" height="15" fill="rgb(225,204,27)" fg:x="1152" fg:w="3"/><text x="92.7059%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="92.5361%" y="165" width="0.1605%" height="15" fill="rgb(230,56,32)" fg:x="1153" fg:w="2"/><text x="92.7861%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="92.5361%" y="149" width="0.1605%" height="15" fill="rgb(222,56,27)" fg:x="1153" fg:w="2"/><text x="92.7861%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="92.5361%" y="133" width="0.1605%" height="15" fill="rgb(253,108,27)" fg:x="1153" fg:w="2"/><text x="92.7861%" y="143.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="92.5361%" y="117" width="0.1605%" height="15" fill="rgb(212,87,36)" fg:x="1153" fg:w="2"/><text x="92.7861%" y="127.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (5 samples, 0.40%)</title><rect x="92.4559%" y="213" width="0.4013%" height="15" fill="rgb(247,82,36)" fg:x="1152" fg:w="5"/><text x="92.7059%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="92.4559%" y="197" width="0.4013%" height="15" fill="rgb(222,143,9)" fg:x="1152" fg:w="5"/><text x="92.7059%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (2 samples, 0.16%)</title><rect x="92.6966%" y="181" width="0.1605%" height="15" fill="rgb(238,162,48)" fg:x="1155" fg:w="2"/><text x="92.9466%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (2 samples, 0.16%)</title><rect x="92.6966%" y="165" width="0.1605%" height="15" fill="rgb(221,59,43)" fg:x="1155" fg:w="2"/><text x="92.9466%" y="175.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.16%)</title><rect x="92.6966%" y="149" width="0.1605%" height="15" fill="rgb(205,166,41)" fg:x="1155" fg:w="2"/><text x="92.9466%" y="159.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="92.9374%" y="101" width="0.0803%" height="15" fill="rgb(241,186,40)" fg:x="1158" fg:w="1"/><text x="93.1874%" y="111.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.0177%" y="101" width="0.0803%" height="15" fill="rgb(216,119,35)" fg:x="1159" fg:w="1"/><text x="93.2677%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="93.0979%" y="101" width="0.0803%" height="15" fill="rgb(208,68,38)" fg:x="1160" fg:w="1"/><text x="93.3479%" y="111.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="93.1782%" y="69" width="0.1605%" height="15" fill="rgb(217,113,1)" fg:x="1161" fg:w="2"/><text x="93.4282%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (13 samples, 1.04%)</title><rect x="93.1782%" y="101" width="1.0433%" height="15" fill="rgb(242,153,3)" fg:x="1161" fg:w="13"/><text x="93.4282%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (13 samples, 1.04%)</title><rect x="93.1782%" y="85" width="1.0433%" height="15" fill="rgb(229,76,35)" fg:x="1161" fg:w="13"/><text x="93.4282%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (11 samples, 0.88%)</title><rect x="93.3387%" y="69" width="0.8828%" height="15" fill="rgb(229,125,34)" fg:x="1163" fg:w="11"/><text x="93.5887%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="94.2215%" y="101" width="0.0803%" height="15" fill="rgb(238,179,36)" fg:x="1174" fg:w="1"/><text x="94.4715%" y="111.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="94.3018%" y="101" width="0.0803%" height="15" fill="rgb(244,183,19)" fg:x="1175" fg:w="1"/><text x="94.5518%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 1.61%)</title><rect x="92.8571%" y="197" width="1.6051%" height="15" fill="rgb(216,85,49)" fg:x="1157" fg:w="20"/><text x="93.1071%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (20 samples, 1.61%)</title><rect x="92.8571%" y="181" width="1.6051%" height="15" fill="rgb(208,161,47)" fg:x="1157" fg:w="20"/><text x="93.1071%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (20 samples, 1.61%)</title><rect x="92.8571%" y="165" width="1.6051%" height="15" fill="rgb(233,210,18)" fg:x="1157" fg:w="20"/><text x="93.1071%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (19 samples, 1.52%)</title><rect x="92.9374%" y="149" width="1.5249%" height="15" fill="rgb(205,104,42)" fg:x="1158" fg:w="19"/><text x="93.1874%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (19 samples, 1.52%)</title><rect x="92.9374%" y="133" width="1.5249%" height="15" fill="rgb(248,90,43)" fg:x="1158" fg:w="19"/><text x="93.1874%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (19 samples, 1.52%)</title><rect x="92.9374%" y="117" width="1.5249%" height="15" fill="rgb(206,198,11)" fg:x="1158" fg:w="19"/><text x="93.1874%" y="127.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="94.3820%" y="101" width="0.0803%" height="15" fill="rgb(239,165,27)" fg:x="1176" fg:w="1"/><text x="94.6320%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.5425%" y="181" width="0.0803%" height="15" fill="rgb(246,44,32)" fg:x="1178" fg:w="1"/><text x="94.7925%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="94.6228%" y="181" width="0.0803%" height="15" fill="rgb(252,65,42)" fg:x="1179" fg:w="1"/><text x="94.8728%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (32 samples, 2.57%)</title><rect x="92.2151%" y="229" width="2.5682%" height="15" fill="rgb(246,197,18)" fg:x="1149" fg:w="32"/><text x="92.4651%" y="239.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (24 samples, 1.93%)</title><rect x="92.8571%" y="213" width="1.9262%" height="15" fill="rgb(216,192,4)" fg:x="1157" fg:w="24"/><text x="93.1071%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="94.4623%" y="197" width="0.3210%" height="15" fill="rgb(208,117,10)" fg:x="1177" fg:w="4"/><text x="94.7123%" y="207.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="94.7030%" y="181" width="0.0803%" height="15" fill="rgb(240,61,47)" fg:x="1180" fg:w="1"/><text x="94.9530%" y="191.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="94.7030%" y="165" width="0.0803%" height="15" fill="rgb(228,178,21)" fg:x="1180" fg:w="1"/><text x="94.9530%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.7030%" y="149" width="0.0803%" height="15" fill="rgb(219,96,54)" fg:x="1180" fg:w="1"/><text x="94.9530%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="94.7833%" y="197" width="0.0803%" height="15" fill="rgb(250,177,24)" fg:x="1181" fg:w="1"/><text x="95.0333%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="94.7833%" y="181" width="0.0803%" height="15" fill="rgb(242,154,46)" fg:x="1181" fg:w="1"/><text x="95.0333%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="94.7833%" y="165" width="0.0803%" height="15" fill="rgb(226,176,29)" fg:x="1181" fg:w="1"/><text x="95.0333%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="94.7833%" y="149" width="0.0803%" height="15" fill="rgb(226,29,2)" fg:x="1181" fg:w="1"/><text x="95.0333%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="94.7833%" y="133" width="0.0803%" height="15" fill="rgb(237,104,14)" fg:x="1181" fg:w="1"/><text x="95.0333%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="94.7833%" y="229" width="0.1605%" height="15" fill="rgb(245,207,31)" fg:x="1181" fg:w="2"/><text x="95.0333%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="94.7833%" y="213" width="0.1605%" height="15" fill="rgb(229,211,45)" fg:x="1181" fg:w="2"/><text x="95.0333%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="94.8636%" y="197" width="0.0803%" height="15" fill="rgb(229,113,15)" fg:x="1182" fg:w="1"/><text x="95.1136%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="94.9438%" y="197" width="0.0803%" height="15" fill="rgb(237,147,15)" fg:x="1183" fg:w="1"/><text x="95.1938%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (37 samples, 2.97%)</title><rect x="92.1348%" y="277" width="2.9695%" height="15" fill="rgb(244,120,12)" fg:x="1148" fg:w="37"/><text x="92.3848%" y="287.50">&lt;re..</text></g><g><title>regex::builders::string::RegexBuilder::build (37 samples, 2.97%)</title><rect x="92.1348%" y="261" width="2.9695%" height="15" fill="rgb(205,120,12)" fg:x="1148" fg:w="37"/><text x="92.3848%" y="271.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (37 samples, 2.97%)</title><rect x="92.1348%" y="245" width="2.9695%" height="15" fill="rgb(231,26,45)" fg:x="1148" fg:w="37"/><text x="92.3848%" y="255.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="94.9438%" y="229" width="0.1605%" height="15" fill="rgb(246,98,1)" fg:x="1183" fg:w="2"/><text x="95.1938%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="94.9438%" y="213" width="0.1605%" height="15" fill="rgb(207,68,45)" fg:x="1183" fg:w="2"/><text x="95.1938%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="95.0241%" y="197" width="0.0803%" height="15" fill="rgb(231,27,38)" fg:x="1184" fg:w="1"/><text x="95.2741%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="95.1043%" y="277" width="0.0803%" height="15" fill="rgb(214,223,3)" fg:x="1185" fg:w="1"/><text x="95.3543%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="95.1043%" y="261" width="0.0803%" height="15" fill="rgb(228,195,46)" fg:x="1185" fg:w="1"/><text x="95.3543%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.1043%" y="245" width="0.0803%" height="15" fill="rgb(231,100,42)" fg:x="1185" fg:w="1"/><text x="95.3543%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="95.1043%" y="229" width="0.0803%" height="15" fill="rgb(236,53,4)" fg:x="1185" fg:w="1"/><text x="95.3543%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="95.1846%" y="261" width="0.0803%" height="15" fill="rgb(230,152,12)" fg:x="1186" fg:w="1"/><text x="95.4346%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="95.1846%" y="245" width="0.0803%" height="15" fill="rgb(226,101,19)" fg:x="1186" fg:w="1"/><text x="95.4346%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="95.1846%" y="229" width="0.0803%" height="15" fill="rgb(250,149,32)" fg:x="1186" fg:w="1"/><text x="95.4346%" y="239.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="95.1846%" y="213" width="0.0803%" height="15" fill="rgb(232,178,12)" fg:x="1186" fg:w="1"/><text x="95.4346%" y="223.50"></text></g><g><title>indefinite::rules::number::Number::check (40 samples, 3.21%)</title><rect x="92.1348%" y="293" width="3.2103%" height="15" fill="rgb(246,151,17)" fg:x="1148" fg:w="40"/><text x="92.3848%" y="303.50">ind..</text></g><g><title>regex::regex::string::Regex::is_match_at (2 samples, 0.16%)</title><rect x="95.1846%" y="277" width="0.1605%" height="15" fill="rgb(252,17,51)" fg:x="1186" fg:w="2"/><text x="95.4346%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="95.2648%" y="261" width="0.0803%" height="15" fill="rgb(250,207,23)" fg:x="1187" fg:w="1"/><text x="95.5148%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="95.2648%" y="245" width="0.0803%" height="15" fill="rgb(205,27,5)" fg:x="1187" fg:w="1"/><text x="95.5148%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="95.2648%" y="229" width="0.0803%" height="15" fill="rgb(224,32,19)" fg:x="1187" fg:w="1"/><text x="95.5148%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="95.2648%" y="213" width="0.0803%" height="15" fill="rgb(247,214,40)" fg:x="1187" fg:w="1"/><text x="95.5148%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="95.2648%" y="197" width="0.0803%" height="15" fill="rgb(239,199,17)" fg:x="1187" fg:w="1"/><text x="95.5148%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="95.2648%" y="181" width="0.0803%" height="15" fill="rgb(251,159,9)" fg:x="1187" fg:w="1"/><text x="95.5148%" y="191.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="95.3451%" y="277" width="0.0803%" height="15" fill="rgb(225,78,32)" fg:x="1188" fg:w="1"/><text x="95.5951%" y="287.50"></text></g><g><title>alloc::str::convert_while_ascii (1 samples, 0.08%)</title><rect x="95.3451%" y="261" width="0.0803%" height="15" fill="rgb(206,97,47)" fg:x="1188" fg:w="1"/><text x="95.5951%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="95.3451%" y="245" width="0.0803%" height="15" fill="rgb(227,107,4)" fg:x="1188" fg:w="1"/><text x="95.5951%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="95.3451%" y="229" width="0.0803%" height="15" fill="rgb(241,146,50)" fg:x="1188" fg:w="1"/><text x="95.5951%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="95.3451%" y="213" width="0.0803%" height="15" fill="rgb(232,92,30)" fg:x="1188" fg:w="1"/><text x="95.5951%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="95.3451%" y="197" width="0.0803%" height="15" fill="rgb(222,0,40)" fg:x="1188" fg:w="1"/><text x="95.5951%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="95.3451%" y="181" width="0.0803%" height="15" fill="rgb(219,54,33)" fg:x="1188" fg:w="1"/><text x="95.5951%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="95.3451%" y="165" width="0.0803%" height="15" fill="rgb(226,209,28)" fg:x="1188" fg:w="1"/><text x="95.5951%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="95.3451%" y="149" width="0.0803%" height="15" fill="rgb(254,205,35)" fg:x="1188" fg:w="1"/><text x="95.5951%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.3451%" y="133" width="0.0803%" height="15" fill="rgb(230,159,3)" fg:x="1188" fg:w="1"/><text x="95.5951%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.4254%" y="197" width="0.0803%" height="15" fill="rgb(232,190,24)" fg:x="1189" fg:w="1"/><text x="95.6754%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="95.5056%" y="197" width="0.1605%" height="15" fill="rgb(217,227,44)" fg:x="1190" fg:w="2"/><text x="95.7556%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="95.5859%" y="181" width="0.0803%" height="15" fill="rgb(236,211,1)" fg:x="1191" fg:w="1"/><text x="95.8359%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (4 samples, 0.32%)</title><rect x="95.4254%" y="213" width="0.3210%" height="15" fill="rgb(250,127,46)" fg:x="1189" fg:w="4"/><text x="95.6754%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1 samples, 0.08%)</title><rect x="95.6661%" y="197" width="0.0803%" height="15" fill="rgb(229,213,6)" fg:x="1192" fg:w="1"/><text x="95.9161%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="95.6661%" y="181" width="0.0803%" height="15" fill="rgb(237,15,36)" fg:x="1192" fg:w="1"/><text x="95.9161%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="95.6661%" y="165" width="0.0803%" height="15" fill="rgb(213,131,41)" fg:x="1192" fg:w="1"/><text x="95.9161%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="95.7464%" y="213" width="0.0803%" height="15" fill="rgb(225,82,44)" fg:x="1193" fg:w="1"/><text x="95.9964%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="95.7464%" y="197" width="0.0803%" height="15" fill="rgb(249,42,11)" fg:x="1193" fg:w="1"/><text x="95.9964%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="95.7464%" y="181" width="0.0803%" height="15" fill="rgb(253,11,29)" fg:x="1193" fg:w="1"/><text x="95.9964%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="95.7464%" y="165" width="0.0803%" height="15" fill="rgb(206,8,54)" fg:x="1193" fg:w="1"/><text x="95.9964%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.7464%" y="149" width="0.0803%" height="15" fill="rgb(222,186,2)" fg:x="1193" fg:w="1"/><text x="95.9964%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.7464%" y="133" width="0.0803%" height="15" fill="rgb(221,206,53)" fg:x="1193" fg:w="1"/><text x="95.9964%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.7464%" y="117" width="0.0803%" height="15" fill="rgb(230,150,21)" fg:x="1193" fg:w="1"/><text x="95.9964%" y="127.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="95.8266%" y="181" width="0.0803%" height="15" fill="rgb(253,202,10)" fg:x="1194" fg:w="1"/><text x="96.0766%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="95.8266%" y="165" width="0.0803%" height="15" fill="rgb(238,109,40)" fg:x="1194" fg:w="1"/><text x="96.0766%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (7 samples, 0.56%)</title><rect x="95.4254%" y="261" width="0.5618%" height="15" fill="rgb(247,120,22)" fg:x="1189" fg:w="7"/><text x="95.6754%" y="271.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (7 samples, 0.56%)</title><rect x="95.4254%" y="245" width="0.5618%" height="15" fill="rgb(207,43,30)" fg:x="1189" fg:w="7"/><text x="95.6754%" y="255.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (7 samples, 0.56%)</title><rect x="95.4254%" y="229" width="0.5618%" height="15" fill="rgb(213,211,24)" fg:x="1189" fg:w="7"/><text x="95.6754%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="95.8266%" y="213" width="0.1605%" height="15" fill="rgb(239,73,39)" fg:x="1194" fg:w="2"/><text x="96.0766%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="95.8266%" y="197" width="0.1605%" height="15" fill="rgb(245,182,19)" fg:x="1194" fg:w="2"/><text x="96.0766%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="95.9069%" y="181" width="0.0803%" height="15" fill="rgb(247,143,26)" fg:x="1195" fg:w="1"/><text x="96.1569%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="95.9872%" y="261" width="0.0803%" height="15" fill="rgb(228,191,23)" fg:x="1196" fg:w="1"/><text x="96.2372%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="95.9872%" y="245" width="0.0803%" height="15" fill="rgb(253,165,31)" fg:x="1196" fg:w="1"/><text x="96.2372%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="95.9872%" y="229" width="0.0803%" height="15" fill="rgb(234,138,20)" fg:x="1196" fg:w="1"/><text x="96.2372%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.9872%" y="213" width="0.0803%" height="15" fill="rgb(218,191,29)" fg:x="1196" fg:w="1"/><text x="96.2372%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="96.2279%" y="181" width="0.0803%" height="15" fill="rgb(221,157,19)" fg:x="1199" fg:w="1"/><text x="96.4779%" y="191.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (99 samples, 7.95%)</title><rect x="88.4430%" y="373" width="7.9454%" height="15" fill="rgb(237,26,42)" fg:x="1102" fg:w="99"/><text x="88.6930%" y="383.50">&lt;&amp;kernel::m..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (89 samples, 7.14%)</title><rect x="89.2456%" y="357" width="7.1429%" height="15" fill="rgb(220,163,24)" fg:x="1112" fg:w="89"/><text x="89.4956%" y="367.50">plugins_co..</text></g><g><title>indefinite::indefinite (89 samples, 7.14%)</title><rect x="89.2456%" y="341" width="7.1429%" height="15" fill="rgb(242,115,20)" fg:x="1112" fg:w="89"/><text x="89.4956%" y="351.50">indefinite..</text></g><g><title>indefinite::methods::indefinite (89 samples, 7.14%)</title><rect x="89.2456%" y="325" width="7.1429%" height="15" fill="rgb(210,206,9)" fg:x="1112" fg:w="89"/><text x="89.4956%" y="335.50">indefinite..</text></g><g><title>indefinite::methods::apply_rules (88 samples, 7.06%)</title><rect x="89.3258%" y="309" width="7.0626%" height="15" fill="rgb(208,71,17)" fg:x="1113" fg:w="88"/><text x="89.5758%" y="319.50">indefinit..</text></g><g><title>indefinite::rules::other::Other::run (13 samples, 1.04%)</title><rect x="95.3451%" y="293" width="1.0433%" height="15" fill="rgb(233,7,5)" fg:x="1188" fg:w="13"/><text x="95.5951%" y="303.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (12 samples, 0.96%)</title><rect x="95.4254%" y="277" width="0.9631%" height="15" fill="rgb(207,92,33)" fg:x="1189" fg:w="12"/><text x="95.6754%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="96.0674%" y="261" width="0.3210%" height="15" fill="rgb(218,87,9)" fg:x="1197" fg:w="4"/><text x="96.3174%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="96.0674%" y="245" width="0.3210%" height="15" fill="rgb(219,47,37)" fg:x="1197" fg:w="4"/><text x="96.3174%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="96.0674%" y="229" width="0.3210%" height="15" fill="rgb(221,152,34)" fg:x="1197" fg:w="4"/><text x="96.3174%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="96.0674%" y="213" width="0.3210%" height="15" fill="rgb(235,176,21)" fg:x="1197" fg:w="4"/><text x="96.3174%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="96.1477%" y="197" width="0.2408%" height="15" fill="rgb(232,212,21)" fg:x="1198" fg:w="3"/><text x="96.3977%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="96.3082%" y="181" width="0.0803%" height="15" fill="rgb(245,82,39)" fg:x="1200" fg:w="1"/><text x="96.5582%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="96.3884%" y="357" width="0.1605%" height="15" fill="rgb(241,52,51)" fg:x="1201" fg:w="2"/><text x="96.6384%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="96.3884%" y="341" width="0.1605%" height="15" fill="rgb(219,91,24)" fg:x="1201" fg:w="2"/><text x="96.6384%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="96.3884%" y="325" width="0.1605%" height="15" fill="rgb(241,142,12)" fg:x="1201" fg:w="2"/><text x="96.6384%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="96.3884%" y="309" width="0.1605%" height="15" fill="rgb(230,27,9)" fg:x="1201" fg:w="2"/><text x="96.6384%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.4687%" y="293" width="0.0803%" height="15" fill="rgb(249,181,32)" fg:x="1202" fg:w="1"/><text x="96.7187%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.4687%" y="277" width="0.0803%" height="15" fill="rgb(230,107,3)" fg:x="1202" fg:w="1"/><text x="96.7187%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.4687%" y="261" width="0.0803%" height="15" fill="rgb(246,204,14)" fg:x="1202" fg:w="1"/><text x="96.7187%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="96.4687%" y="245" width="0.0803%" height="15" fill="rgb(213,192,47)" fg:x="1202" fg:w="1"/><text x="96.7187%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="96.4687%" y="229" width="0.0803%" height="15" fill="rgb(240,44,36)" fg:x="1202" fg:w="1"/><text x="96.7187%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="96.4687%" y="213" width="0.0803%" height="15" fill="rgb(244,209,38)" fg:x="1202" fg:w="1"/><text x="96.7187%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.4687%" y="197" width="0.0803%" height="15" fill="rgb(219,34,37)" fg:x="1202" fg:w="1"/><text x="96.7187%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.4687%" y="181" width="0.0803%" height="15" fill="rgb(210,28,6)" fg:x="1202" fg:w="1"/><text x="96.7187%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="96.4687%" y="165" width="0.0803%" height="15" fill="rgb(244,110,52)" fg:x="1202" fg:w="1"/><text x="96.7187%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="96.4687%" y="149" width="0.0803%" height="15" fill="rgb(254,124,47)" fg:x="1202" fg:w="1"/><text x="96.7187%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="96.4687%" y="133" width="0.0803%" height="15" fill="rgb(254,110,13)" fg:x="1202" fg:w="1"/><text x="96.7187%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="96.4687%" y="117" width="0.0803%" height="15" fill="rgb(252,57,21)" fg:x="1202" fg:w="1"/><text x="96.7187%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.4687%" y="101" width="0.0803%" height="15" fill="rgb(242,60,45)" fg:x="1202" fg:w="1"/><text x="96.7187%" y="111.50"></text></g><g><title>&lt;serde_json::value::de::EnumDeserializer as serde::de::EnumAccess&gt;::variant_seed (1 samples, 0.08%)</title><rect x="96.5490%" y="261" width="0.0803%" height="15" fill="rgb(234,49,30)" fg:x="1203" fg:w="1"/><text x="96.7990%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.5490%" y="245" width="0.0803%" height="15" fill="rgb(218,98,6)" fg:x="1203" fg:w="1"/><text x="96.7990%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (3 samples, 0.24%)</title><rect x="96.5490%" y="325" width="0.2408%" height="15" fill="rgb(220,174,29)" fg:x="1203" fg:w="3"/><text x="96.7990%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (3 samples, 0.24%)</title><rect x="96.5490%" y="309" width="0.2408%" height="15" fill="rgb(236,163,23)" fg:x="1203" fg:w="3"/><text x="96.7990%" y="319.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 0.24%)</title><rect x="96.5490%" y="293" width="0.2408%" height="15" fill="rgb(242,114,45)" fg:x="1203" fg:w="3"/><text x="96.7990%" y="303.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (3 samples, 0.24%)</title><rect x="96.5490%" y="277" width="0.2408%" height="15" fill="rgb(232,10,53)" fg:x="1203" fg:w="3"/><text x="96.7990%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="96.6292%" y="261" width="0.1605%" height="15" fill="rgb(245,108,29)" fg:x="1204" fg:w="2"/><text x="96.8792%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="96.6292%" y="245" width="0.1605%" height="15" fill="rgb(240,89,53)" fg:x="1204" fg:w="2"/><text x="96.8792%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.7095%" y="229" width="0.0803%" height="15" fill="rgb(226,60,45)" fg:x="1205" fg:w="1"/><text x="96.9595%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.7095%" y="213" width="0.0803%" height="15" fill="rgb(230,41,44)" fg:x="1205" fg:w="1"/><text x="96.9595%" y="223.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (6 samples, 0.48%)</title><rect x="96.3884%" y="373" width="0.4815%" height="15" fill="rgb(230,26,20)" fg:x="1201" fg:w="6"/><text x="96.6384%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="96.5490%" y="357" width="0.3210%" height="15" fill="rgb(237,170,32)" fg:x="1203" fg:w="4"/><text x="96.7990%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="96.5490%" y="341" width="0.3210%" height="15" fill="rgb(212,35,42)" fg:x="1203" fg:w="4"/><text x="96.7990%" y="351.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="96.7897%" y="325" width="0.0803%" height="15" fill="rgb(227,31,34)" fg:x="1206" fg:w="1"/><text x="97.0397%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="96.9502%" y="245" width="0.0803%" height="15" fill="rgb(216,19,18)" fg:x="1208" fg:w="1"/><text x="97.2002%" y="255.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="96.8700%" y="341" width="0.2408%" height="15" fill="rgb(211,133,42)" fg:x="1207" fg:w="3"/><text x="97.1200%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="96.8700%" y="325" width="0.2408%" height="15" fill="rgb(244,66,13)" fg:x="1207" fg:w="3"/><text x="97.1200%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="96.9502%" y="309" width="0.1605%" height="15" fill="rgb(218,185,50)" fg:x="1208" fg:w="2"/><text x="97.2002%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="96.9502%" y="293" width="0.1605%" height="15" fill="rgb(219,149,13)" fg:x="1208" fg:w="2"/><text x="97.2002%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="96.9502%" y="277" width="0.1605%" height="15" fill="rgb(221,125,0)" fg:x="1208" fg:w="2"/><text x="97.2002%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="96.9502%" y="261" width="0.1605%" height="15" fill="rgb(247,126,27)" fg:x="1208" fg:w="2"/><text x="97.2002%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.0305%" y="245" width="0.0803%" height="15" fill="rgb(250,138,30)" fg:x="1209" fg:w="1"/><text x="97.2805%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.0305%" y="229" width="0.0803%" height="15" fill="rgb(230,151,9)" fg:x="1209" fg:w="1"/><text x="97.2805%" y="239.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="97.1108%" y="341" width="0.0803%" height="15" fill="rgb(233,80,38)" fg:x="1210" fg:w="1"/><text x="97.3608%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.1108%" y="325" width="0.0803%" height="15" fill="rgb(232,68,43)" fg:x="1210" fg:w="1"/><text x="97.3608%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.1108%" y="309" width="0.0803%" height="15" fill="rgb(254,5,50)" fg:x="1210" fg:w="1"/><text x="97.3608%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.1108%" y="293" width="0.0803%" height="15" fill="rgb(225,45,5)" fg:x="1210" fg:w="1"/><text x="97.3608%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.1108%" y="277" width="0.0803%" height="15" fill="rgb(239,22,3)" fg:x="1210" fg:w="1"/><text x="97.3608%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.1108%" y="261" width="0.0803%" height="15" fill="rgb(243,129,0)" fg:x="1210" fg:w="1"/><text x="97.3608%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.1108%" y="245" width="0.0803%" height="15" fill="rgb(223,164,0)" fg:x="1210" fg:w="1"/><text x="97.3608%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.1910%" y="309" width="0.0803%" height="15" fill="rgb(221,46,29)" fg:x="1211" fg:w="1"/><text x="97.4410%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.1910%" y="293" width="0.0803%" height="15" fill="rgb(205,97,47)" fg:x="1211" fg:w="1"/><text x="97.4410%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.1910%" y="277" width="0.0803%" height="15" fill="rgb(249,14,8)" fg:x="1211" fg:w="1"/><text x="97.4410%" y="287.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (6 samples, 0.48%)</title><rect x="96.8700%" y="357" width="0.4815%" height="15" fill="rgb(216,77,3)" fg:x="1207" fg:w="6"/><text x="97.1200%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::gid (2 samples, 0.16%)</title><rect x="97.1910%" y="341" width="0.1605%" height="15" fill="rgb(206,168,54)" fg:x="1211" fg:w="2"/><text x="97.4410%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="97.1910%" y="325" width="0.1605%" height="15" fill="rgb(236,3,41)" fg:x="1211" fg:w="2"/><text x="97.4410%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.2713%" y="309" width="0.0803%" height="15" fill="rgb(231,132,24)" fg:x="1212" fg:w="1"/><text x="97.5213%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.2713%" y="293" width="0.0803%" height="15" fill="rgb(227,221,40)" fg:x="1212" fg:w="1"/><text x="97.5213%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.2713%" y="277" width="0.0803%" height="15" fill="rgb(233,151,11)" fg:x="1212" fg:w="1"/><text x="97.5213%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.2713%" y="261" width="0.0803%" height="15" fill="rgb(247,81,35)" fg:x="1212" fg:w="1"/><text x="97.5213%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.2713%" y="245" width="0.0803%" height="15" fill="rgb(243,128,48)" fg:x="1212" fg:w="1"/><text x="97.5213%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.2713%" y="229" width="0.0803%" height="15" fill="rgb(253,16,10)" fg:x="1212" fg:w="1"/><text x="97.5213%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="97.2713%" y="213" width="0.0803%" height="15" fill="rgb(228,67,27)" fg:x="1212" fg:w="1"/><text x="97.5213%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.56%)</title><rect x="96.8700%" y="373" width="0.5618%" height="15" fill="rgb(231,105,25)" fg:x="1207" fg:w="7"/><text x="97.1200%" y="383.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (1 samples, 0.08%)</title><rect x="97.3515%" y="357" width="0.0803%" height="15" fill="rgb(213,166,47)" fg:x="1213" fg:w="1"/><text x="97.6015%" y="367.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (1 samples, 0.08%)</title><rect x="97.3515%" y="341" width="0.0803%" height="15" fill="rgb(209,27,10)" fg:x="1213" fg:w="1"/><text x="97.6015%" y="351.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="97.3515%" y="325" width="0.0803%" height="15" fill="rgb(241,44,30)" fg:x="1213" fg:w="1"/><text x="97.6015%" y="335.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="97.3515%" y="309" width="0.0803%" height="15" fill="rgb(223,216,15)" fg:x="1213" fg:w="1"/><text x="97.6015%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.3515%" y="293" width="0.0803%" height="15" fill="rgb(227,14,7)" fg:x="1213" fg:w="1"/><text x="97.6015%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.3515%" y="277" width="0.0803%" height="15" fill="rgb(237,14,5)" fg:x="1213" fg:w="1"/><text x="97.6015%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.3515%" y="261" width="0.0803%" height="15" fill="rgb(232,14,36)" fg:x="1213" fg:w="1"/><text x="97.6015%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.3515%" y="245" width="0.0803%" height="15" fill="rgb(234,0,38)" fg:x="1213" fg:w="1"/><text x="97.6015%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.3515%" y="229" width="0.0803%" height="15" fill="rgb(207,170,14)" fg:x="1213" fg:w="1"/><text x="97.6015%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.3515%" y="213" width="0.0803%" height="15" fill="rgb(252,45,13)" fg:x="1213" fg:w="1"/><text x="97.6015%" y="223.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (118 samples, 9.47%)</title><rect x="88.0417%" y="533" width="9.4703%" height="15" fill="rgb(213,142,7)" fg:x="1097" fg:w="118"/><text x="88.2917%" y="543.50">kernel::plugin..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (118 samples, 9.47%)</title><rect x="88.0417%" y="517" width="9.4703%" height="15" fill="rgb(216,157,23)" fg:x="1097" fg:w="118"/><text x="88.2917%" y="527.50">&lt;plugins_dynli..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (118 samples, 9.47%)</title><rect x="88.0417%" y="501" width="9.4703%" height="15" fill="rgb(212,145,33)" fg:x="1097" fg:w="118"/><text x="88.2917%" y="511.50">kernel::plugin..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (118 samples, 9.47%)</title><rect x="88.0417%" y="485" width="9.4703%" height="15" fill="rgb(233,26,13)" fg:x="1097" fg:w="118"/><text x="88.2917%" y="495.50">core::ops::fun..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (118 samples, 9.47%)</title><rect x="88.0417%" y="469" width="9.4703%" height="15" fill="rgb(219,196,19)" fg:x="1097" fg:w="118"/><text x="88.2917%" y="479.50">kernel::plugin..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (118 samples, 9.47%)</title><rect x="88.0417%" y="453" width="9.4703%" height="15" fill="rgb(246,56,21)" fg:x="1097" fg:w="118"/><text x="88.2917%" y="463.50">core::ops::fun..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (118 samples, 9.47%)</title><rect x="88.0417%" y="437" width="9.4703%" height="15" fill="rgb(222,28,53)" fg:x="1097" fg:w="118"/><text x="88.2917%" y="447.50">&lt;alloc::boxed:..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (118 samples, 9.47%)</title><rect x="88.0417%" y="421" width="9.4703%" height="15" fill="rgb(224,5,27)" fg:x="1097" fg:w="118"/><text x="88.2917%" y="431.50">&lt;engine::sessi..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (118 samples, 9.47%)</title><rect x="88.0417%" y="405" width="9.4703%" height="15" fill="rgb(220,153,33)" fg:x="1097" fg:w="118"/><text x="88.2917%" y="415.50">&lt;plugins_core:..</text></g><g><title>plugins_core::looking::model::new_area_observation (113 samples, 9.07%)</title><rect x="88.4430%" y="389" width="9.0690%" height="15" fill="rgb(226,58,19)" fg:x="1102" fg:w="113"/><text x="88.6930%" y="399.50">plugins_core:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.4318%" y="373" width="0.0803%" height="15" fill="rgb(239,112,23)" fg:x="1214" fg:w="1"/><text x="97.6818%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.4318%" y="357" width="0.0803%" height="15" fill="rgb(251,213,20)" fg:x="1214" fg:w="1"/><text x="97.6818%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.4318%" y="341" width="0.0803%" height="15" fill="rgb(215,181,21)" fg:x="1214" fg:w="1"/><text x="97.6818%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="97.5120%" y="469" width="0.1605%" height="15" fill="rgb(240,8,35)" fg:x="1215" fg:w="2"/><text x="97.7620%" y="479.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="97.5120%" y="485" width="0.2408%" height="15" fill="rgb(232,203,3)" fg:x="1215" fg:w="3"/><text x="97.7620%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.6726%" y="469" width="0.0803%" height="15" fill="rgb(214,202,43)" fg:x="1217" fg:w="1"/><text x="97.9226%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.6726%" y="453" width="0.0803%" height="15" fill="rgb(254,35,11)" fg:x="1217" fg:w="1"/><text x="97.9226%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.6726%" y="437" width="0.0803%" height="15" fill="rgb(239,173,13)" fg:x="1217" fg:w="1"/><text x="97.9226%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.6726%" y="421" width="0.0803%" height="15" fill="rgb(220,141,0)" fg:x="1217" fg:w="1"/><text x="97.9226%" y="431.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.6726%" y="405" width="0.0803%" height="15" fill="rgb(210,98,12)" fg:x="1217" fg:w="1"/><text x="97.9226%" y="415.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.7528%" y="373" width="0.0803%" height="15" fill="rgb(254,153,22)" fg:x="1218" fg:w="1"/><text x="98.0028%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7528%" y="357" width="0.0803%" height="15" fill="rgb(247,223,17)" fg:x="1218" fg:w="1"/><text x="98.0028%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="97.8331%" y="325" width="0.0803%" height="15" fill="rgb(246,56,7)" fg:x="1219" fg:w="1"/><text x="98.0831%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.8331%" y="309" width="0.0803%" height="15" fill="rgb(240,226,12)" fg:x="1219" fg:w="1"/><text x="98.0831%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="97.8331%" y="293" width="0.0803%" height="15" fill="rgb(205,87,46)" fg:x="1219" fg:w="1"/><text x="98.0831%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="97.8331%" y="277" width="0.0803%" height="15" fill="rgb(245,214,51)" fg:x="1219" fg:w="1"/><text x="98.0831%" y="287.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="97.7528%" y="421" width="0.2408%" height="15" fill="rgb(223,172,33)" fg:x="1218" fg:w="3"/><text x="98.0028%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="97.7528%" y="405" width="0.2408%" height="15" fill="rgb(227,203,34)" fg:x="1218" fg:w="3"/><text x="98.0028%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="97.7528%" y="389" width="0.2408%" height="15" fill="rgb(248,143,44)" fg:x="1218" fg:w="3"/><text x="98.0028%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="97.8331%" y="373" width="0.1605%" height="15" fill="rgb(226,162,5)" fg:x="1219" fg:w="2"/><text x="98.0831%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.8331%" y="357" width="0.1605%" height="15" fill="rgb(211,143,1)" fg:x="1219" fg:w="2"/><text x="98.0831%" y="367.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="97.8331%" y="341" width="0.1605%" height="15" fill="rgb(224,96,15)" fg:x="1219" fg:w="2"/><text x="98.0831%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.9133%" y="325" width="0.0803%" height="15" fill="rgb(222,4,38)" fg:x="1220" fg:w="1"/><text x="98.1633%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.9133%" y="309" width="0.0803%" height="15" fill="rgb(253,228,15)" fg:x="1220" fg:w="1"/><text x="98.1633%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="97.9133%" y="293" width="0.0803%" height="15" fill="rgb(242,194,12)" fg:x="1220" fg:w="1"/><text x="98.1633%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.9133%" y="277" width="0.0803%" height="15" fill="rgb(214,177,31)" fg:x="1220" fg:w="1"/><text x="98.1633%" y="287.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="97.9133%" y="261" width="0.0803%" height="15" fill="rgb(226,58,51)" fg:x="1220" fg:w="1"/><text x="98.1633%" y="271.50"></text></g><g><title>plugins_core::tools::contained_by (7 samples, 0.56%)</title><rect x="97.5120%" y="501" width="0.5618%" height="15" fill="rgb(250,119,16)" fg:x="1215" fg:w="7"/><text x="97.7620%" y="511.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (4 samples, 0.32%)</title><rect x="97.7528%" y="485" width="0.3210%" height="15" fill="rgb(223,128,53)" fg:x="1218" fg:w="4"/><text x="98.0028%" y="495.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (4 samples, 0.32%)</title><rect x="97.7528%" y="469" width="0.3210%" height="15" fill="rgb(251,199,15)" fg:x="1218" fg:w="4"/><text x="98.0028%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (4 samples, 0.32%)</title><rect x="97.7528%" y="453" width="0.3210%" height="15" fill="rgb(235,168,42)" fg:x="1218" fg:w="4"/><text x="98.0028%" y="463.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="97.7528%" y="437" width="0.3210%" height="15" fill="rgb(250,210,17)" fg:x="1218" fg:w="4"/><text x="98.0028%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="97.9936%" y="421" width="0.0803%" height="15" fill="rgb(226,36,41)" fg:x="1221" fg:w="1"/><text x="98.2436%" y="431.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="97.9936%" y="405" width="0.0803%" height="15" fill="rgb(225,87,10)" fg:x="1221" fg:w="1"/><text x="98.2436%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.9936%" y="389" width="0.0803%" height="15" fill="rgb(228,83,9)" fg:x="1221" fg:w="1"/><text x="98.2436%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.9936%" y="373" width="0.0803%" height="15" fill="rgb(225,16,36)" fg:x="1221" fg:w="1"/><text x="98.2436%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.9936%" y="357" width="0.0803%" height="15" fill="rgb(242,198,13)" fg:x="1221" fg:w="1"/><text x="98.2436%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.9936%" y="341" width="0.0803%" height="15" fill="rgb(239,25,51)" fg:x="1221" fg:w="1"/><text x="98.2436%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.9936%" y="325" width="0.0803%" height="15" fill="rgb(239,28,37)" fg:x="1221" fg:w="1"/><text x="98.2436%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.9936%" y="309" width="0.0803%" height="15" fill="rgb(234,70,17)" fg:x="1221" fg:w="1"/><text x="98.2436%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.9936%" y="293" width="0.0803%" height="15" fill="rgb(231,215,53)" fg:x="1221" fg:w="1"/><text x="98.2436%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.9936%" y="277" width="0.0803%" height="15" fill="rgb(218,140,42)" fg:x="1221" fg:w="1"/><text x="98.2436%" y="287.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.9936%" y="261" width="0.0803%" height="15" fill="rgb(233,227,45)" fg:x="1221" fg:w="1"/><text x="98.2436%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.9936%" y="245" width="0.0803%" height="15" fill="rgb(225,189,21)" fg:x="1221" fg:w="1"/><text x="98.2436%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.1541%" y="469" width="0.0803%" height="15" fill="rgb(237,176,54)" fg:x="1223" fg:w="1"/><text x="98.4041%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.1541%" y="453" width="0.0803%" height="15" fill="rgb(215,131,46)" fg:x="1223" fg:w="1"/><text x="98.4041%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.1541%" y="437" width="0.0803%" height="15" fill="rgb(218,95,20)" fg:x="1223" fg:w="1"/><text x="98.4041%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.1541%" y="421" width="0.0803%" height="15" fill="rgb(208,198,12)" fg:x="1223" fg:w="1"/><text x="98.4041%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.1541%" y="405" width="0.0803%" height="15" fill="rgb(239,107,50)" fg:x="1223" fg:w="1"/><text x="98.4041%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.1541%" y="389" width="0.0803%" height="15" fill="rgb(240,217,37)" fg:x="1223" fg:w="1"/><text x="98.4041%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.1541%" y="373" width="0.0803%" height="15" fill="rgb(242,197,49)" fg:x="1223" fg:w="1"/><text x="98.4041%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.1541%" y="357" width="0.0803%" height="15" fill="rgb(219,171,17)" fg:x="1223" fg:w="1"/><text x="98.4041%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.1541%" y="341" width="0.0803%" height="15" fill="rgb(209,81,40)" fg:x="1223" fg:w="1"/><text x="98.4041%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.1541%" y="325" width="0.0803%" height="15" fill="rgb(237,156,30)" fg:x="1223" fg:w="1"/><text x="98.4041%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.1541%" y="309" width="0.0803%" height="15" fill="rgb(212,127,16)" fg:x="1223" fg:w="1"/><text x="98.4041%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.1541%" y="293" width="0.0803%" height="15" fill="rgb(226,66,32)" fg:x="1223" fg:w="1"/><text x="98.4041%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.1541%" y="277" width="0.0803%" height="15" fill="rgb(245,22,46)" fg:x="1223" fg:w="1"/><text x="98.4041%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.2343%" y="437" width="0.0803%" height="15" fill="rgb(210,112,21)" fg:x="1224" fg:w="1"/><text x="98.4843%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.3146%" y="437" width="0.0803%" height="15" fill="rgb(207,118,39)" fg:x="1225" fg:w="1"/><text x="98.5646%" y="447.50"></text></g><g><title>engine::session::Session::captured (135 samples, 10.83%)</title><rect x="87.6404%" y="677" width="10.8347%" height="15" fill="rgb(205,206,35)" fg:x="1092" fg:w="135"/><text x="87.8904%" y="687.50">engine::session:..</text></g><g><title>engine::session::logs::capture (135 samples, 10.83%)</title><rect x="87.6404%" y="661" width="10.8347%" height="15" fill="rgb(222,120,2)" fg:x="1092" fg:w="135"/><text x="87.8904%" y="671.50">engine::session:..</text></g><g><title>tracing_core::dispatcher::with_default (134 samples, 10.75%)</title><rect x="87.7207%" y="645" width="10.7544%" height="15" fill="rgb(205,38,18)" fg:x="1093" fg:w="134"/><text x="87.9707%" y="655.50">tracing_core::di..</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (134 samples, 10.75%)</title><rect x="87.7207%" y="629" width="10.7544%" height="15" fill="rgb(226,61,2)" fg:x="1093" fg:w="134"/><text x="87.9707%" y="639.50">&lt;engine::session..</text></g><g><title>kernel::plugins::mw::apply_middleware (134 samples, 10.75%)</title><rect x="87.7207%" y="613" width="10.7544%" height="15" fill="rgb(242,161,23)" fg:x="1093" fg:w="134"/><text x="87.9707%" y="623.50">kernel::plugins:..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (134 samples, 10.75%)</title><rect x="87.7207%" y="597" width="10.7544%" height="15" fill="rgb(213,13,52)" fg:x="1093" fg:w="134"/><text x="87.9707%" y="607.50">kernel::plugins:..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (134 samples, 10.75%)</title><rect x="87.7207%" y="581" width="10.7544%" height="15" fill="rgb(246,209,47)" fg:x="1093" fg:w="134"/><text x="87.9707%" y="591.50">&lt;engine::session..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (130 samples, 10.43%)</title><rect x="88.0417%" y="565" width="10.4334%" height="15" fill="rgb(214,41,3)" fg:x="1097" fg:w="130"/><text x="88.2917%" y="575.50">kernel::plugins..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (130 samples, 10.43%)</title><rect x="88.0417%" y="549" width="10.4334%" height="15" fill="rgb(236,119,38)" fg:x="1097" fg:w="130"/><text x="88.2917%" y="559.50">&lt;plugins_rune::..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (12 samples, 0.96%)</title><rect x="97.5120%" y="533" width="0.9631%" height="15" fill="rgb(218,50,11)" fg:x="1215" fg:w="12"/><text x="97.7620%" y="543.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (12 samples, 0.96%)</title><rect x="97.5120%" y="517" width="0.9631%" height="15" fill="rgb(228,38,11)" fg:x="1215" fg:w="12"/><text x="97.7620%" y="527.50"></text></g><g><title>plugins_core::tools::occupied_by (5 samples, 0.40%)</title><rect x="98.0738%" y="501" width="0.4013%" height="15" fill="rgb(212,13,9)" fg:x="1222" fg:w="5"/><text x="98.3238%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.40%)</title><rect x="98.0738%" y="485" width="0.4013%" height="15" fill="rgb(208,211,9)" fg:x="1222" fg:w="5"/><text x="98.3238%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="98.2343%" y="469" width="0.2408%" height="15" fill="rgb(239,39,32)" fg:x="1224" fg:w="3"/><text x="98.4843%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="98.2343%" y="453" width="0.2408%" height="15" fill="rgb(254,179,26)" fg:x="1224" fg:w="3"/><text x="98.4843%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.3949%" y="437" width="0.0803%" height="15" fill="rgb(249,165,28)" fg:x="1226" fg:w="1"/><text x="98.6449%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.3949%" y="421" width="0.0803%" height="15" fill="rgb(225,59,50)" fg:x="1226" fg:w="1"/><text x="98.6449%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="98.3949%" y="405" width="0.0803%" height="15" fill="rgb(209,122,5)" fg:x="1226" fg:w="1"/><text x="98.6449%" y="415.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="98.3949%" y="389" width="0.0803%" height="15" fill="rgb(214,65,34)" fg:x="1226" fg:w="1"/><text x="98.6449%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.5554%" y="629" width="0.0803%" height="15" fill="rgb(249,183,32)" fg:x="1228" fg:w="1"/><text x="98.8054%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.5554%" y="613" width="0.0803%" height="15" fill="rgb(218,122,24)" fg:x="1228" fg:w="1"/><text x="98.8054%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.5554%" y="597" width="0.0803%" height="15" fill="rgb(224,109,18)" fg:x="1228" fg:w="1"/><text x="98.8054%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.5554%" y="581" width="0.0803%" height="15" fill="rgb(210,68,50)" fg:x="1228" fg:w="1"/><text x="98.8054%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.5554%" y="565" width="0.0803%" height="15" fill="rgb(212,184,34)" fg:x="1228" fg:w="1"/><text x="98.8054%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.5554%" y="549" width="0.0803%" height="15" fill="rgb(238,105,48)" fg:x="1228" fg:w="1"/><text x="98.8054%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.5554%" y="533" width="0.0803%" height="15" fill="rgb(222,134,54)" fg:x="1228" fg:w="1"/><text x="98.8054%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.5554%" y="517" width="0.0803%" height="15" fill="rgb(246,24,43)" fg:x="1228" fg:w="1"/><text x="98.8054%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.5554%" y="501" width="0.0803%" height="15" fill="rgb(227,169,22)" fg:x="1228" fg:w="1"/><text x="98.8054%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="98.5554%" y="485" width="0.0803%" height="15" fill="rgb(253,152,4)" fg:x="1228" fg:w="1"/><text x="98.8054%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="98.5554%" y="469" width="0.0803%" height="15" fill="rgb(219,158,36)" fg:x="1228" fg:w="1"/><text x="98.8054%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.6356%" y="485" width="0.0803%" height="15" fill="rgb(251,128,40)" fg:x="1229" fg:w="1"/><text x="98.8856%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.6356%" y="469" width="0.0803%" height="15" fill="rgb(254,101,39)" fg:x="1229" fg:w="1"/><text x="98.8856%" y="479.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.6356%" y="453" width="0.0803%" height="15" fill="rgb(221,168,40)" fg:x="1229" fg:w="1"/><text x="98.8856%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.6356%" y="437" width="0.0803%" height="15" fill="rgb(221,14,27)" fg:x="1229" fg:w="1"/><text x="98.8856%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.6356%" y="421" width="0.0803%" height="15" fill="rgb(207,36,43)" fg:x="1229" fg:w="1"/><text x="98.8856%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.6356%" y="405" width="0.0803%" height="15" fill="rgb(240,172,53)" fg:x="1229" fg:w="1"/><text x="98.8856%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="98.6356%" y="629" width="0.2408%" height="15" fill="rgb(241,138,43)" fg:x="1229" fg:w="3"/><text x="98.8856%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="98.6356%" y="613" width="0.2408%" height="15" fill="rgb(227,78,19)" fg:x="1229" fg:w="3"/><text x="98.8856%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="98.6356%" y="597" width="0.2408%" height="15" fill="rgb(215,127,44)" fg:x="1229" fg:w="3"/><text x="98.8856%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="98.6356%" y="581" width="0.2408%" height="15" fill="rgb(227,13,10)" fg:x="1229" fg:w="3"/><text x="98.8856%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="98.6356%" y="565" width="0.2408%" height="15" fill="rgb(249,177,6)" fg:x="1229" fg:w="3"/><text x="98.8856%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="98.6356%" y="549" width="0.2408%" height="15" fill="rgb(215,154,26)" fg:x="1229" fg:w="3"/><text x="98.8856%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="98.6356%" y="533" width="0.2408%" height="15" fill="rgb(250,168,20)" fg:x="1229" fg:w="3"/><text x="98.8856%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="98.6356%" y="517" width="0.2408%" height="15" fill="rgb(222,53,38)" fg:x="1229" fg:w="3"/><text x="98.8856%" y="527.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="98.6356%" y="501" width="0.2408%" height="15" fill="rgb(245,154,5)" fg:x="1229" fg:w="3"/><text x="98.8856%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.7159%" y="485" width="0.1605%" height="15" fill="rgb(214,89,50)" fg:x="1230" fg:w="2"/><text x="98.9659%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.7159%" y="469" width="0.1605%" height="15" fill="rgb(232,73,14)" fg:x="1230" fg:w="2"/><text x="98.9659%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.7961%" y="453" width="0.0803%" height="15" fill="rgb(230,101,20)" fg:x="1231" fg:w="1"/><text x="99.0461%" y="463.50"></text></g><g><title>engine::session::internal::Added::find_refs (6 samples, 0.48%)</title><rect x="98.4751%" y="661" width="0.4815%" height="15" fill="rgb(208,56,28)" fg:x="1227" fg:w="6"/><text x="98.7251%" y="671.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (6 samples, 0.48%)</title><rect x="98.4751%" y="645" width="0.4815%" height="15" fill="rgb(247,205,22)" fg:x="1227" fg:w="6"/><text x="98.7251%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.8764%" y="629" width="0.0803%" height="15" fill="rgb(252,109,51)" fg:x="1232" fg:w="1"/><text x="99.1264%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.8764%" y="613" width="0.0803%" height="15" fill="rgb(220,40,24)" fg:x="1232" fg:w="1"/><text x="99.1264%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.8764%" y="597" width="0.0803%" height="15" fill="rgb(251,108,7)" fg:x="1232" fg:w="1"/><text x="99.1264%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.8764%" y="581" width="0.0803%" height="15" fill="rgb(238,102,51)" fg:x="1232" fg:w="1"/><text x="99.1264%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.8764%" y="565" width="0.0803%" height="15" fill="rgb(219,149,34)" fg:x="1232" fg:w="1"/><text x="99.1264%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.8764%" y="549" width="0.0803%" height="15" fill="rgb(239,70,0)" fg:x="1232" fg:w="1"/><text x="99.1264%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.9567%" y="645" width="0.0803%" height="15" fill="rgb(246,214,23)" fg:x="1233" fg:w="1"/><text x="99.2067%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.9567%" y="629" width="0.0803%" height="15" fill="rgb(239,221,51)" fg:x="1233" fg:w="1"/><text x="99.2067%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.9567%" y="613" width="0.0803%" height="15" fill="rgb(254,62,14)" fg:x="1233" fg:w="1"/><text x="99.2067%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.9567%" y="597" width="0.0803%" height="15" fill="rgb(253,57,33)" fg:x="1233" fg:w="1"/><text x="99.2067%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.9567%" y="581" width="0.0803%" height="15" fill="rgb(229,34,6)" fg:x="1233" fg:w="1"/><text x="99.2067%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.0369%" y="613" width="0.0803%" height="15" fill="rgb(235,191,23)" fg:x="1234" fg:w="1"/><text x="99.2869%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.0369%" y="597" width="0.0803%" height="15" fill="rgb(217,207,27)" fg:x="1234" fg:w="1"/><text x="99.2869%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.0369%" y="581" width="0.0803%" height="15" fill="rgb(232,41,44)" fg:x="1234" fg:w="1"/><text x="99.2869%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.0369%" y="565" width="0.0803%" height="15" fill="rgb(221,188,19)" fg:x="1234" fg:w="1"/><text x="99.2869%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.0369%" y="549" width="0.0803%" height="15" fill="rgb(245,180,45)" fg:x="1234" fg:w="1"/><text x="99.2869%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="99.0369%" y="533" width="0.0803%" height="15" fill="rgb(250,220,42)" fg:x="1234" fg:w="1"/><text x="99.2869%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="99.0369%" y="517" width="0.0803%" height="15" fill="rgb(234,16,34)" fg:x="1234" fg:w="1"/><text x="99.2869%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="99.0369%" y="645" width="0.1605%" height="15" fill="rgb(233,217,23)" fg:x="1234" fg:w="2"/><text x="99.2869%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="99.0369%" y="629" width="0.1605%" height="15" fill="rgb(209,22,46)" fg:x="1234" fg:w="2"/><text x="99.2869%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.1172%" y="613" width="0.0803%" height="15" fill="rgb(213,101,18)" fg:x="1235" fg:w="1"/><text x="99.3672%" y="623.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="99.1974%" y="645" width="0.1605%" height="15" fill="rgb(215,179,52)" fg:x="1236" fg:w="2"/><text x="99.4474%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.1974%" y="629" width="0.1605%" height="15" fill="rgb(223,50,25)" fg:x="1236" fg:w="2"/><text x="99.4474%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.1974%" y="613" width="0.1605%" height="15" fill="rgb(224,51,44)" fg:x="1236" fg:w="2"/><text x="99.4474%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.1974%" y="597" width="0.1605%" height="15" fill="rgb(224,13,54)" fg:x="1236" fg:w="2"/><text x="99.4474%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.1974%" y="581" width="0.1605%" height="15" fill="rgb(219,58,47)" fg:x="1236" fg:w="2"/><text x="99.4474%" y="591.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.1974%" y="565" width="0.1605%" height="15" fill="rgb(246,124,34)" fg:x="1236" fg:w="2"/><text x="99.4474%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.2777%" y="549" width="0.0803%" height="15" fill="rgb(245,109,25)" fg:x="1237" fg:w="1"/><text x="99.5277%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.2777%" y="533" width="0.0803%" height="15" fill="rgb(235,48,23)" fg:x="1237" fg:w="1"/><text x="99.5277%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.2777%" y="517" width="0.0803%" height="15" fill="rgb(229,203,36)" fg:x="1237" fg:w="1"/><text x="99.5277%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.2777%" y="501" width="0.0803%" height="15" fill="rgb(234,180,9)" fg:x="1237" fg:w="1"/><text x="99.5277%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (12 samples, 0.96%)</title><rect x="98.4751%" y="677" width="0.9631%" height="15" fill="rgb(228,98,45)" fg:x="1227" fg:w="12"/><text x="98.7251%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="98.9567%" y="661" width="0.4815%" height="15" fill="rgb(240,24,36)" fg:x="1233" fg:w="6"/><text x="99.2067%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="99.3579%" y="645" width="0.0803%" height="15" fill="rgb(227,154,19)" fg:x="1238" fg:w="1"/><text x="99.6079%" y="655.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.3579%" y="629" width="0.0803%" height="15" fill="rgb(231,2,48)" fg:x="1238" fg:w="1"/><text x="99.6079%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.3579%" y="613" width="0.0803%" height="15" fill="rgb(219,216,0)" fg:x="1238" fg:w="1"/><text x="99.6079%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3579%" y="597" width="0.0803%" height="15" fill="rgb(251,88,0)" fg:x="1238" fg:w="1"/><text x="99.6079%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.3579%" y="581" width="0.0803%" height="15" fill="rgb(242,45,45)" fg:x="1238" fg:w="1"/><text x="99.6079%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3579%" y="565" width="0.0803%" height="15" fill="rgb(218,149,45)" fg:x="1238" fg:w="1"/><text x="99.6079%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.3579%" y="549" width="0.0803%" height="15" fill="rgb(247,194,10)" fg:x="1238" fg:w="1"/><text x="99.6079%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3579%" y="533" width="0.0803%" height="15" fill="rgb(234,33,37)" fg:x="1238" fg:w="1"/><text x="99.6079%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.3579%" y="517" width="0.0803%" height="15" fill="rgb(218,61,13)" fg:x="1238" fg:w="1"/><text x="99.6079%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.3579%" y="501" width="0.0803%" height="15" fill="rgb(210,80,52)" fg:x="1238" fg:w="1"/><text x="99.6079%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3579%" y="485" width="0.0803%" height="15" fill="rgb(218,203,27)" fg:x="1238" fg:w="1"/><text x="99.6079%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.3579%" y="469" width="0.0803%" height="15" fill="rgb(209,126,33)" fg:x="1238" fg:w="1"/><text x="99.6079%" y="479.50"></text></g><g><title>engine::users::model::username_to_key (2 samples, 0.16%)</title><rect x="99.4382%" y="677" width="0.1605%" height="15" fill="rgb(234,173,41)" fg:x="1239" fg:w="2"/><text x="99.6882%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="99.4382%" y="661" width="0.1605%" height="15" fill="rgb(228,166,9)" fg:x="1239" fg:w="2"/><text x="99.6882%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.5185%" y="645" width="0.0803%" height="15" fill="rgb(208,124,43)" fg:x="1240" fg:w="1"/><text x="99.7685%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5185%" y="629" width="0.0803%" height="15" fill="rgb(212,154,38)" fg:x="1240" fg:w="1"/><text x="99.7685%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.5185%" y="613" width="0.0803%" height="15" fill="rgb(246,179,35)" fg:x="1240" fg:w="1"/><text x="99.7685%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5185%" y="597" width="0.0803%" height="15" fill="rgb(251,3,50)" fg:x="1240" fg:w="1"/><text x="99.7685%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.5185%" y="581" width="0.0803%" height="15" fill="rgb(219,96,8)" fg:x="1240" fg:w="1"/><text x="99.7685%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="99.5185%" y="565" width="0.0803%" height="15" fill="rgb(251,216,33)" fg:x="1240" fg:w="1"/><text x="99.7685%" y="575.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="99.5987%" y="629" width="0.1605%" height="15" fill="rgb(243,145,29)" fg:x="1241" fg:w="2"/><text x="99.8487%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.5987%" y="613" width="0.1605%" height="15" fill="rgb(210,75,20)" fg:x="1241" fg:w="2"/><text x="99.8487%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.5987%" y="597" width="0.1605%" height="15" fill="rgb(235,56,8)" fg:x="1241" fg:w="2"/><text x="99.8487%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.5987%" y="581" width="0.1605%" height="15" fill="rgb(226,175,49)" fg:x="1241" fg:w="2"/><text x="99.8487%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.5987%" y="565" width="0.1605%" height="15" fill="rgb(242,204,23)" fg:x="1241" fg:w="2"/><text x="99.8487%" y="575.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.5987%" y="549" width="0.1605%" height="15" fill="rgb(225,104,24)" fg:x="1241" fg:w="2"/><text x="99.8487%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.5987%" y="533" width="0.1605%" height="15" fill="rgb(253,34,1)" fg:x="1241" fg:w="2"/><text x="99.8487%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6790%" y="517" width="0.0803%" height="15" fill="rgb(233,199,23)" fg:x="1242" fg:w="1"/><text x="99.9290%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="99.6790%" y="501" width="0.0803%" height="15" fill="rgb(247,7,51)" fg:x="1242" fg:w="1"/><text x="99.9290%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="99.5987%" y="645" width="0.2408%" height="15" fill="rgb(214,146,12)" fg:x="1241" fg:w="3"/><text x="99.8487%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="99.7592%" y="629" width="0.0803%" height="15" fill="rgb(234,181,43)" fg:x="1243" fg:w="1"/><text x="100.0092%" y="639.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.7592%" y="613" width="0.0803%" height="15" fill="rgb(239,148,6)" fg:x="1243" fg:w="1"/><text x="100.0092%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.7592%" y="597" width="0.0803%" height="15" fill="rgb(206,151,17)" fg:x="1243" fg:w="1"/><text x="100.0092%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7592%" y="581" width="0.0803%" height="15" fill="rgb(213,215,10)" fg:x="1243" fg:w="1"/><text x="100.0092%" y="591.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.7592%" y="565" width="0.0803%" height="15" fill="rgb(215,220,44)" fg:x="1243" fg:w="1"/><text x="100.0092%" y="575.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.7592%" y="549" width="0.0803%" height="15" fill="rgb(245,205,37)" fg:x="1243" fg:w="1"/><text x="100.0092%" y="559.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (154 samples, 12.36%)</title><rect x="87.5602%" y="709" width="12.3596%" height="15" fill="rgb(245,130,43)" fg:x="1091" fg:w="154"/><text x="87.8102%" y="719.50">engine::session::S..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (154 samples, 12.36%)</title><rect x="87.5602%" y="693" width="12.3596%" height="15" fill="rgb(231,227,38)" fg:x="1091" fg:w="154"/><text x="87.8102%" y="703.50">engine::session::S..</text></g><g><title>kernel::model::EntityPtrResolver::world (4 samples, 0.32%)</title><rect x="99.5987%" y="677" width="0.3210%" height="15" fill="rgb(233,185,4)" fg:x="1241" fg:w="4"/><text x="99.8487%" y="687.50"></text></g><g><title>engine::session::Session::load_entity (4 samples, 0.32%)</title><rect x="99.5987%" y="661" width="0.3210%" height="15" fill="rgb(224,154,43)" fg:x="1241" fg:w="4"/><text x="99.8487%" y="671.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="99.8395%" y="645" width="0.0803%" height="15" fill="rgb(235,156,15)" fg:x="1244" fg:w="1"/><text x="100.0895%" y="655.50"></text></g><g><title>all (1,246 samples, 100%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(211,55,43)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="1071.50"></text></g><g><title>simple-fa9e39e2 (1,246 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(247,149,40)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="1055.50">simple-fa9e39e2</text></g><g><title>_start (1,246 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(232,171,16)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="1039.50">_start</text></g><g><title>__libc_start_main (1,246 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(215,117,49)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="1023.50">__libc_start_main</text></g><g><title>main (1,246 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(246,194,11)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="1007.50">main</text></g><g><title>std::rt::lang_start_internal (1,246 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(242,101,44)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="991.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,246 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(226,174,6)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="975.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,246 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(213,150,20)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="959.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,246 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(222,124,42)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="943.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,246 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(250,19,47)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="927.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,246 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(241,217,19)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="911.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,246 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(207,210,34)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="895.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,246 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(244,45,4)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="879.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,246 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(252,134,50)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="863.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,246 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(238,74,2)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="847.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,246 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(226,58,46)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="831.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,246 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(232,83,35)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="815.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,246 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(212,148,47)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="799.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,246 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(235,29,1)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="783.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (294 samples, 23.60%)</title><rect x="76.4045%" y="757" width="23.5955%" height="15" fill="rgb(247,55,37)" fg:x="952" fg:w="294"/><text x="76.6545%" y="767.50">&lt;criterion::routine::Function&lt;M,F,T&gt; ..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (294 samples, 23.60%)</title><rect x="76.4045%" y="741" width="23.5955%" height="15" fill="rgb(222,48,3)" fg:x="952" fg:w="294"/><text x="76.6545%" y="751.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (294 samples, 23.60%)</title><rect x="76.4045%" y="725" width="23.5955%" height="15" fill="rgb(234,21,33)" fg:x="952" fg:w="294"/><text x="76.6545%" y="735.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="99.9197%" y="709" width="0.0803%" height="15" fill="rgb(247,178,53)" fg:x="1245" fg:w="1"/><text x="100.1697%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="99.9197%" y="693" width="0.0803%" height="15" fill="rgb(225,75,7)" fg:x="1245" fg:w="1"/><text x="100.1697%" y="703.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="99.9197%" y="677" width="0.0803%" height="15" fill="rgb(219,199,7)" fg:x="1245" fg:w="1"/><text x="100.1697%" y="687.50"></text></g></svg></svg>