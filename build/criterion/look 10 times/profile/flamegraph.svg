<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1110" onload="init(evt)" viewBox="0 0 1200 1110" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1110" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1093.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1093.00"> </text><svg id="frames" x="10" width="1180" total_samples="1245"><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0803%" y="693" width="0.0803%" height="15" fill="rgb(235,82,39)" fg:x="1" fg:w="1"/><text x="0.3303%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (7 samples, 0.56%)</title><rect x="0.1606%" y="693" width="0.5622%" height="15" fill="rgb(230,108,42)" fg:x="2" fg:w="7"/><text x="0.4106%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="0.1606%" y="677" width="0.5622%" height="15" fill="rgb(215,150,50)" fg:x="2" fg:w="7"/><text x="0.4106%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (5 samples, 0.40%)</title><rect x="0.3213%" y="661" width="0.4016%" height="15" fill="rgb(233,212,5)" fg:x="4" fg:w="5"/><text x="0.5713%" y="671.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (5 samples, 0.40%)</title><rect x="0.3213%" y="645" width="0.4016%" height="15" fill="rgb(245,80,22)" fg:x="4" fg:w="5"/><text x="0.5713%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (3 samples, 0.24%)</title><rect x="0.4819%" y="629" width="0.2410%" height="15" fill="rgb(238,129,16)" fg:x="6" fg:w="3"/><text x="0.7319%" y="639.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="0.4819%" y="613" width="0.2410%" height="15" fill="rgb(240,19,0)" fg:x="6" fg:w="3"/><text x="0.7319%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.7229%" y="661" width="0.0803%" height="15" fill="rgb(232,42,35)" fg:x="9" fg:w="1"/><text x="0.9729%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.8835%" y="581" width="0.0803%" height="15" fill="rgb(223,130,24)" fg:x="11" fg:w="1"/><text x="1.1335%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.9639%" y="581" width="0.0803%" height="15" fill="rgb(237,16,22)" fg:x="12" fg:w="1"/><text x="1.2139%" y="591.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.2048%" y="549" width="0.1606%" height="15" fill="rgb(248,192,20)" fg:x="15" fg:w="2"/><text x="1.4548%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.3655%" y="549" width="0.0803%" height="15" fill="rgb(233,167,2)" fg:x="17" fg:w="1"/><text x="1.6155%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.3655%" y="533" width="0.0803%" height="15" fill="rgb(252,71,44)" fg:x="17" fg:w="1"/><text x="1.6155%" y="543.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="1.4458%" y="533" width="0.2410%" height="15" fill="rgb(238,37,47)" fg:x="18" fg:w="3"/><text x="1.6958%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.6867%" y="533" width="0.0803%" height="15" fill="rgb(214,202,54)" fg:x="21" fg:w="1"/><text x="1.9367%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 1.04%)</title><rect x="0.8032%" y="629" width="1.0442%" height="15" fill="rgb(254,165,40)" fg:x="10" fg:w="13"/><text x="1.0532%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (13 samples, 1.04%)</title><rect x="0.8032%" y="613" width="1.0442%" height="15" fill="rgb(246,173,38)" fg:x="10" fg:w="13"/><text x="1.0532%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (13 samples, 1.04%)</title><rect x="0.8032%" y="597" width="1.0442%" height="15" fill="rgb(215,3,27)" fg:x="10" fg:w="13"/><text x="1.0532%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (10 samples, 0.80%)</title><rect x="1.0442%" y="581" width="0.8032%" height="15" fill="rgb(239,169,51)" fg:x="13" fg:w="10"/><text x="1.2942%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="1.2048%" y="565" width="0.6426%" height="15" fill="rgb(212,5,25)" fg:x="15" fg:w="8"/><text x="1.4548%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="1.4458%" y="549" width="0.4016%" height="15" fill="rgb(243,45,17)" fg:x="18" fg:w="5"/><text x="1.6958%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.7671%" y="533" width="0.0803%" height="15" fill="rgb(242,97,9)" fg:x="22" fg:w="1"/><text x="2.0171%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.7671%" y="517" width="0.0803%" height="15" fill="rgb(228,71,31)" fg:x="22" fg:w="1"/><text x="2.0171%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.7671%" y="501" width="0.0803%" height="15" fill="rgb(252,184,16)" fg:x="22" fg:w="1"/><text x="2.0171%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="1.8474%" y="613" width="0.1606%" height="15" fill="rgb(236,169,46)" fg:x="23" fg:w="2"/><text x="2.0974%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.0884%" y="597" width="0.0803%" height="15" fill="rgb(207,17,47)" fg:x="26" fg:w="1"/><text x="2.3384%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="2.1687%" y="597" width="0.1606%" height="15" fill="rgb(206,201,28)" fg:x="27" fg:w="2"/><text x="2.4187%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.6506%" y="565" width="0.0803%" height="15" fill="rgb(224,184,23)" fg:x="33" fg:w="1"/><text x="2.9006%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="2.7309%" y="549" width="0.1606%" height="15" fill="rgb(208,139,48)" fg:x="34" fg:w="2"/><text x="2.9809%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="2.8916%" y="549" width="0.0803%" height="15" fill="rgb(208,130,10)" fg:x="36" fg:w="1"/><text x="3.1416%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.8916%" y="533" width="0.0803%" height="15" fill="rgb(211,213,45)" fg:x="36" fg:w="1"/><text x="3.1416%" y="543.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 2.97%)</title><rect x="0.0803%" y="709" width="2.9719%" height="15" fill="rgb(235,100,30)" fg:x="1" fg:w="37"/><text x="0.3303%" y="719.50">&lt;al..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (29 samples, 2.33%)</title><rect x="0.7229%" y="693" width="2.3293%" height="15" fill="rgb(206,144,31)" fg:x="9" fg:w="29"/><text x="0.9729%" y="703.50">c..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 2.33%)</title><rect x="0.7229%" y="677" width="2.3293%" height="15" fill="rgb(224,200,26)" fg:x="9" fg:w="29"/><text x="0.9729%" y="687.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (28 samples, 2.25%)</title><rect x="0.8032%" y="661" width="2.2490%" height="15" fill="rgb(247,104,53)" fg:x="10" fg:w="28"/><text x="1.0532%" y="671.50">c..</text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 2.25%)</title><rect x="0.8032%" y="645" width="2.2490%" height="15" fill="rgb(220,14,17)" fg:x="10" fg:w="28"/><text x="1.0532%" y="655.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (15 samples, 1.20%)</title><rect x="1.8474%" y="629" width="1.2048%" height="15" fill="rgb(230,140,40)" fg:x="23" fg:w="15"/><text x="2.0974%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (13 samples, 1.04%)</title><rect x="2.0080%" y="613" width="1.0442%" height="15" fill="rgb(229,2,41)" fg:x="25" fg:w="13"/><text x="2.2580%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.72%)</title><rect x="2.3293%" y="597" width="0.7229%" height="15" fill="rgb(232,89,16)" fg:x="29" fg:w="9"/><text x="2.5793%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="2.4096%" y="581" width="0.6426%" height="15" fill="rgb(247,59,52)" fg:x="30" fg:w="8"/><text x="2.6596%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="2.7309%" y="565" width="0.3213%" height="15" fill="rgb(226,110,21)" fg:x="34" fg:w="4"/><text x="2.9809%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.9719%" y="549" width="0.0803%" height="15" fill="rgb(224,176,43)" fg:x="37" fg:w="1"/><text x="3.2219%" y="559.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::begin (1 samples, 0.08%)</title><rect x="3.0522%" y="661" width="0.0803%" height="15" fill="rgb(221,73,6)" fg:x="38" fg:w="1"/><text x="3.3022%" y="671.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new_cyclic (1 samples, 0.08%)</title><rect x="3.1325%" y="661" width="0.0803%" height="15" fill="rgb(232,78,19)" fg:x="39" fg:w="1"/><text x="3.3825%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.1325%" y="645" width="0.0803%" height="15" fill="rgb(233,112,48)" fg:x="39" fg:w="1"/><text x="3.3825%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.2129%" y="645" width="0.0803%" height="15" fill="rgb(243,131,47)" fg:x="40" fg:w="1"/><text x="3.4629%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.2129%" y="629" width="0.0803%" height="15" fill="rgb(226,51,1)" fg:x="40" fg:w="1"/><text x="3.4629%" y="639.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="3.2129%" y="613" width="0.0803%" height="15" fill="rgb(247,58,7)" fg:x="40" fg:w="1"/><text x="3.4629%" y="623.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="3.2129%" y="597" width="0.0803%" height="15" fill="rgb(209,7,32)" fg:x="40" fg:w="1"/><text x="3.4629%" y="607.50"></text></g><g><title>core::ffi::c_str::CStr::from_bytes_with_nul (1 samples, 0.08%)</title><rect x="3.5341%" y="565" width="0.0803%" height="15" fill="rgb(209,39,41)" fg:x="44" fg:w="1"/><text x="3.7841%" y="575.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.08%)</title><rect x="3.5341%" y="549" width="0.0803%" height="15" fill="rgb(226,182,46)" fg:x="44" fg:w="1"/><text x="3.7841%" y="559.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1 samples, 0.08%)</title><rect x="3.5341%" y="533" width="0.0803%" height="15" fill="rgb(230,219,10)" fg:x="44" fg:w="1"/><text x="3.7841%" y="543.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (9 samples, 0.72%)</title><rect x="3.3735%" y="629" width="0.7229%" height="15" fill="rgb(227,175,30)" fg:x="42" fg:w="9"/><text x="3.6235%" y="639.50"></text></g><g><title>std::sys::unix::fs::stat (7 samples, 0.56%)</title><rect x="3.5341%" y="613" width="0.5622%" height="15" fill="rgb(217,2,50)" fg:x="44" fg:w="7"/><text x="3.7841%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (7 samples, 0.56%)</title><rect x="3.5341%" y="597" width="0.5622%" height="15" fill="rgb(229,160,0)" fg:x="44" fg:w="7"/><text x="3.7841%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (7 samples, 0.56%)</title><rect x="3.5341%" y="581" width="0.5622%" height="15" fill="rgb(207,78,37)" fg:x="44" fg:w="7"/><text x="3.7841%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (6 samples, 0.48%)</title><rect x="3.6145%" y="565" width="0.4819%" height="15" fill="rgb(225,57,0)" fg:x="45" fg:w="6"/><text x="3.8645%" y="575.50"></text></g><g><title>std::sys::unix::fs::try_statx (6 samples, 0.48%)</title><rect x="3.6145%" y="549" width="0.4819%" height="15" fill="rgb(232,154,2)" fg:x="45" fg:w="6"/><text x="3.8645%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (6 samples, 0.48%)</title><rect x="3.6145%" y="533" width="0.4819%" height="15" fill="rgb(241,212,25)" fg:x="45" fg:w="6"/><text x="3.8645%" y="543.50"></text></g><g><title>statx (6 samples, 0.48%)</title><rect x="3.6145%" y="517" width="0.4819%" height="15" fill="rgb(226,69,20)" fg:x="45" fg:w="6"/><text x="3.8645%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="4.1767%" y="581" width="0.1606%" height="15" fill="rgb(247,184,54)" fg:x="52" fg:w="2"/><text x="4.4267%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="4.1767%" y="565" width="0.1606%" height="15" fill="rgb(210,145,0)" fg:x="52" fg:w="2"/><text x="4.4267%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="4.1767%" y="549" width="0.1606%" height="15" fill="rgb(253,82,12)" fg:x="52" fg:w="2"/><text x="4.4267%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="4.1767%" y="533" width="0.1606%" height="15" fill="rgb(245,42,11)" fg:x="52" fg:w="2"/><text x="4.4267%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="4.1767%" y="517" width="0.1606%" height="15" fill="rgb(219,147,32)" fg:x="52" fg:w="2"/><text x="4.4267%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.16%)</title><rect x="4.1767%" y="501" width="0.1606%" height="15" fill="rgb(246,12,7)" fg:x="52" fg:w="2"/><text x="4.4267%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.16%)</title><rect x="4.1767%" y="485" width="0.1606%" height="15" fill="rgb(243,50,9)" fg:x="52" fg:w="2"/><text x="4.4267%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.4177%" y="565" width="0.0803%" height="15" fill="rgb(219,149,6)" fg:x="55" fg:w="1"/><text x="4.6677%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.4177%" y="549" width="0.0803%" height="15" fill="rgb(241,51,42)" fg:x="55" fg:w="1"/><text x="4.6677%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.4177%" y="533" width="0.0803%" height="15" fill="rgb(226,128,27)" fg:x="55" fg:w="1"/><text x="4.6677%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.4177%" y="517" width="0.0803%" height="15" fill="rgb(244,144,4)" fg:x="55" fg:w="1"/><text x="4.6677%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.4177%" y="501" width="0.0803%" height="15" fill="rgb(221,4,13)" fg:x="55" fg:w="1"/><text x="4.6677%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.4177%" y="485" width="0.0803%" height="15" fill="rgb(208,170,28)" fg:x="55" fg:w="1"/><text x="4.6677%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.4177%" y="469" width="0.0803%" height="15" fill="rgb(226,131,13)" fg:x="55" fg:w="1"/><text x="4.6677%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="4.4177%" y="453" width="0.0803%" height="15" fill="rgb(215,72,41)" fg:x="55" fg:w="1"/><text x="4.6677%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="4.4177%" y="437" width="0.0803%" height="15" fill="rgb(243,108,20)" fg:x="55" fg:w="1"/><text x="4.6677%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="4.4177%" y="421" width="0.0803%" height="15" fill="rgb(230,189,17)" fg:x="55" fg:w="1"/><text x="4.6677%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="4.4177%" y="405" width="0.0803%" height="15" fill="rgb(220,50,17)" fg:x="55" fg:w="1"/><text x="4.6677%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.4177%" y="389" width="0.0803%" height="15" fill="rgb(248,152,48)" fg:x="55" fg:w="1"/><text x="4.6677%" y="399.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (7 samples, 0.56%)</title><rect x="4.0964%" y="613" width="0.5622%" height="15" fill="rgb(244,91,11)" fg:x="51" fg:w="7"/><text x="4.3464%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.56%)</title><rect x="4.0964%" y="597" width="0.5622%" height="15" fill="rgb(220,157,5)" fg:x="51" fg:w="7"/><text x="4.3464%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.32%)</title><rect x="4.3373%" y="581" width="0.3213%" height="15" fill="rgb(253,137,8)" fg:x="54" fg:w="4"/><text x="4.5873%" y="591.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="4.4980%" y="565" width="0.1606%" height="15" fill="rgb(217,137,51)" fg:x="56" fg:w="2"/><text x="4.7480%" y="575.50"></text></g><g><title>glob::is_dir (8 samples, 0.64%)</title><rect x="4.7390%" y="565" width="0.6426%" height="15" fill="rgb(218,209,53)" fg:x="59" fg:w="8"/><text x="4.9890%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat (6 samples, 0.48%)</title><rect x="4.8996%" y="549" width="0.4819%" height="15" fill="rgb(249,137,25)" fg:x="61" fg:w="6"/><text x="5.1496%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (6 samples, 0.48%)</title><rect x="4.8996%" y="533" width="0.4819%" height="15" fill="rgb(239,155,26)" fg:x="61" fg:w="6"/><text x="5.1496%" y="543.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (6 samples, 0.48%)</title><rect x="4.8996%" y="517" width="0.4819%" height="15" fill="rgb(227,85,46)" fg:x="61" fg:w="6"/><text x="5.1496%" y="527.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (5 samples, 0.40%)</title><rect x="4.9799%" y="501" width="0.4016%" height="15" fill="rgb(251,107,43)" fg:x="62" fg:w="5"/><text x="5.2299%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx (5 samples, 0.40%)</title><rect x="4.9799%" y="485" width="0.4016%" height="15" fill="rgb(234,170,33)" fg:x="62" fg:w="5"/><text x="5.2299%" y="495.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (5 samples, 0.40%)</title><rect x="4.9799%" y="469" width="0.4016%" height="15" fill="rgb(206,29,35)" fg:x="62" fg:w="5"/><text x="5.2299%" y="479.50"></text></g><g><title>statx (5 samples, 0.40%)</title><rect x="4.9799%" y="453" width="0.4016%" height="15" fill="rgb(227,138,25)" fg:x="62" fg:w="5"/><text x="5.2299%" y="463.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.88%)</title><rect x="4.7390%" y="597" width="0.8835%" height="15" fill="rgb(249,131,35)" fg:x="59" fg:w="11"/><text x="4.9890%" y="607.50"></text></g><g><title>glob::fill_todo (11 samples, 0.88%)</title><rect x="4.7390%" y="581" width="0.8835%" height="15" fill="rgb(239,6,40)" fg:x="59" fg:w="11"/><text x="4.9890%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat (3 samples, 0.24%)</title><rect x="5.3815%" y="565" width="0.2410%" height="15" fill="rgb(246,136,47)" fg:x="67" fg:w="3"/><text x="5.6315%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (3 samples, 0.24%)</title><rect x="5.3815%" y="549" width="0.2410%" height="15" fill="rgb(253,58,26)" fg:x="67" fg:w="3"/><text x="5.6315%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 0.24%)</title><rect x="5.3815%" y="533" width="0.2410%" height="15" fill="rgb(237,141,10)" fg:x="67" fg:w="3"/><text x="5.6315%" y="543.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (3 samples, 0.24%)</title><rect x="5.3815%" y="517" width="0.2410%" height="15" fill="rgb(234,156,12)" fg:x="67" fg:w="3"/><text x="5.6315%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx (3 samples, 0.24%)</title><rect x="5.3815%" y="501" width="0.2410%" height="15" fill="rgb(243,224,36)" fg:x="67" fg:w="3"/><text x="5.6315%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (3 samples, 0.24%)</title><rect x="5.3815%" y="485" width="0.2410%" height="15" fill="rgb(205,229,51)" fg:x="67" fg:w="3"/><text x="5.6315%" y="495.50"></text></g><g><title>statx (3 samples, 0.24%)</title><rect x="5.3815%" y="469" width="0.2410%" height="15" fill="rgb(223,189,4)" fg:x="67" fg:w="3"/><text x="5.6315%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;glob::Paths&gt; (1 samples, 0.08%)</title><rect x="5.6225%" y="597" width="0.0803%" height="15" fill="rgb(249,167,54)" fg:x="70" fg:w="1"/><text x="5.8725%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="5.6225%" y="581" width="0.0803%" height="15" fill="rgb(218,34,28)" fg:x="70" fg:w="1"/><text x="5.8725%" y="591.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="5.7831%" y="565" width="0.0803%" height="15" fill="rgb(232,109,42)" fg:x="72" fg:w="1"/><text x="6.0331%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="5.8635%" y="549" width="0.1606%" height="15" fill="rgb(248,214,46)" fg:x="73" fg:w="2"/><text x="6.1135%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.9438%" y="533" width="0.0803%" height="15" fill="rgb(244,216,40)" fg:x="74" fg:w="1"/><text x="6.1938%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.9438%" y="517" width="0.0803%" height="15" fill="rgb(231,226,31)" fg:x="74" fg:w="1"/><text x="6.1938%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.9438%" y="501" width="0.0803%" height="15" fill="rgb(238,38,43)" fg:x="74" fg:w="1"/><text x="6.1938%" y="511.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (25 samples, 2.01%)</title><rect x="4.0964%" y="629" width="2.0080%" height="15" fill="rgb(208,88,43)" fg:x="51" fg:w="25"/><text x="4.3464%" y="639.50">&lt;..</text></g><g><title>plugins_rune::sources::load_directory_sources (18 samples, 1.45%)</title><rect x="4.6586%" y="613" width="1.4458%" height="15" fill="rgb(205,136,37)" fg:x="58" fg:w="18"/><text x="4.9086%" y="623.50"></text></g><g><title>glob::glob (5 samples, 0.40%)</title><rect x="5.7028%" y="597" width="0.4016%" height="15" fill="rgb(237,34,14)" fg:x="71" fg:w="5"/><text x="5.9528%" y="607.50"></text></g><g><title>glob::glob_with (5 samples, 0.40%)</title><rect x="5.7028%" y="581" width="0.4016%" height="15" fill="rgb(236,193,44)" fg:x="71" fg:w="5"/><text x="5.9528%" y="591.50"></text></g><g><title>glob::Pattern::new (3 samples, 0.24%)</title><rect x="5.8635%" y="565" width="0.2410%" height="15" fill="rgb(231,48,10)" fg:x="73" fg:w="3"/><text x="6.1135%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="6.0241%" y="549" width="0.0803%" height="15" fill="rgb(213,141,34)" fg:x="75" fg:w="1"/><text x="6.2741%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.0241%" y="533" width="0.0803%" height="15" fill="rgb(249,130,34)" fg:x="75" fg:w="1"/><text x="6.2741%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="6.0241%" y="517" width="0.0803%" height="15" fill="rgb(219,42,41)" fg:x="75" fg:w="1"/><text x="6.2741%" y="527.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="6.3454%" y="597" width="0.1606%" height="15" fill="rgb(224,100,54)" fg:x="79" fg:w="2"/><text x="6.5954%" y="607.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="6.3454%" y="581" width="0.1606%" height="15" fill="rgb(229,200,27)" fg:x="79" fg:w="2"/><text x="6.5954%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::new (2 samples, 0.16%)</title><rect x="6.3454%" y="565" width="0.1606%" height="15" fill="rgb(217,118,10)" fg:x="79" fg:w="2"/><text x="6.5954%" y="575.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="6.3454%" y="549" width="0.1606%" height="15" fill="rgb(206,22,3)" fg:x="79" fg:w="2"/><text x="6.5954%" y="559.50"></text></g><g><title>&lt;plugins_core::carrying::actions::GiveToAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="6.5863%" y="565" width="0.0803%" height="15" fill="rgb(232,163,46)" fg:x="82" fg:w="1"/><text x="6.8363%" y="575.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="6.5863%" y="549" width="0.0803%" height="15" fill="rgb(206,95,13)" fg:x="82" fg:w="1"/><text x="6.8363%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.5863%" y="533" width="0.0803%" height="15" fill="rgb(253,154,18)" fg:x="82" fg:w="1"/><text x="6.8363%" y="543.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (3 samples, 0.24%)</title><rect x="6.5060%" y="597" width="0.2410%" height="15" fill="rgb(219,32,23)" fg:x="81" fg:w="3"/><text x="6.7560%" y="607.50"></text></g><g><title>kernel::plugins::Schema::action (3 samples, 0.24%)</title><rect x="6.5060%" y="581" width="0.2410%" height="15" fill="rgb(230,191,45)" fg:x="81" fg:w="3"/><text x="6.7560%" y="591.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="6.6667%" y="565" width="0.0803%" height="15" fill="rgb(229,64,36)" fg:x="83" fg:w="1"/><text x="6.9167%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="6.6667%" y="549" width="0.0803%" height="15" fill="rgb(205,129,25)" fg:x="83" fg:w="1"/><text x="6.9167%" y="559.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="6.7470%" y="597" width="0.0803%" height="15" fill="rgb(254,112,7)" fg:x="84" fg:w="1"/><text x="6.9970%" y="607.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="6.7470%" y="581" width="0.0803%" height="15" fill="rgb(226,53,48)" fg:x="84" fg:w="1"/><text x="6.9970%" y="591.50"></text></g><g><title>&lt;plugins_core::fashion::actions::RemoveAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="6.8273%" y="565" width="0.0803%" height="15" fill="rgb(214,153,38)" fg:x="85" fg:w="1"/><text x="7.0773%" y="575.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="6.8273%" y="597" width="0.1606%" height="15" fill="rgb(243,101,7)" fg:x="85" fg:w="2"/><text x="7.0773%" y="607.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="6.8273%" y="581" width="0.1606%" height="15" fill="rgb(240,140,22)" fg:x="85" fg:w="2"/><text x="7.0773%" y="591.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="6.9076%" y="565" width="0.0803%" height="15" fill="rgb(235,114,2)" fg:x="86" fg:w="1"/><text x="7.1576%" y="575.50"></text></g><g><title>&lt;plugins_core::moving::actions::AddRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="6.9880%" y="565" width="0.0803%" height="15" fill="rgb(242,59,12)" fg:x="87" fg:w="1"/><text x="7.2380%" y="575.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (4 samples, 0.32%)</title><rect x="6.9880%" y="597" width="0.3213%" height="15" fill="rgb(252,134,9)" fg:x="87" fg:w="4"/><text x="7.2380%" y="607.50"></text></g><g><title>kernel::plugins::Schema::action (4 samples, 0.32%)</title><rect x="6.9880%" y="581" width="0.3213%" height="15" fill="rgb(236,4,44)" fg:x="87" fg:w="4"/><text x="7.2380%" y="591.50"></text></g><g><title>replies::identifier_to_key (3 samples, 0.24%)</title><rect x="7.0683%" y="565" width="0.2410%" height="15" fill="rgb(254,172,41)" fg:x="88" fg:w="3"/><text x="7.3183%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.2289%" y="549" width="0.0803%" height="15" fill="rgb(244,63,20)" fg:x="90" fg:w="1"/><text x="7.4789%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.2289%" y="533" width="0.0803%" height="15" fill="rgb(250,73,31)" fg:x="90" fg:w="1"/><text x="7.4789%" y="543.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="7.2289%" y="517" width="0.0803%" height="15" fill="rgb(241,38,36)" fg:x="90" fg:w="1"/><text x="7.4789%" y="527.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (16 samples, 1.29%)</title><rect x="6.1044%" y="629" width="1.2851%" height="15" fill="rgb(245,211,2)" fg:x="76" fg:w="16"/><text x="6.3544%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16 samples, 1.29%)</title><rect x="6.1044%" y="613" width="1.2851%" height="15" fill="rgb(206,120,28)" fg:x="76" fg:w="16"/><text x="6.3544%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.3092%" y="597" width="0.0803%" height="15" fill="rgb(211,59,34)" fg:x="91" fg:w="1"/><text x="7.5592%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.3896%" y="613" width="0.0803%" height="15" fill="rgb(233,168,5)" fg:x="92" fg:w="1"/><text x="7.6396%" y="623.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (54 samples, 4.34%)</title><rect x="3.2932%" y="645" width="4.3373%" height="15" fill="rgb(234,33,13)" fg:x="41" fg:w="54"/><text x="3.5432%" y="655.50">kerne..</text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (3 samples, 0.24%)</title><rect x="7.3896%" y="629" width="0.2410%" height="15" fill="rgb(231,150,26)" fg:x="92" fg:w="3"/><text x="7.6396%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (2 samples, 0.16%)</title><rect x="7.4699%" y="613" width="0.1606%" height="15" fill="rgb(217,191,4)" fg:x="93" fg:w="2"/><text x="7.7199%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.5502%" y="597" width="0.0803%" height="15" fill="rgb(246,198,38)" fg:x="94" fg:w="1"/><text x="7.8002%" y="607.50"></text></g><g><title>engine::session::Session::initialize (57 samples, 4.58%)</title><rect x="3.2129%" y="661" width="4.5783%" height="15" fill="rgb(245,64,37)" fg:x="40" fg:w="57"/><text x="3.4629%" y="671.50">engin..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (2 samples, 0.16%)</title><rect x="7.6305%" y="645" width="0.1606%" height="15" fill="rgb(250,30,36)" fg:x="95" fg:w="2"/><text x="7.8805%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="7.6305%" y="629" width="0.1606%" height="15" fill="rgb(217,86,53)" fg:x="95" fg:w="2"/><text x="7.8805%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="7.6305%" y="613" width="0.1606%" height="15" fill="rgb(228,157,16)" fg:x="95" fg:w="2"/><text x="7.8805%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.7108%" y="597" width="0.0803%" height="15" fill="rgb(217,59,31)" fg:x="96" fg:w="1"/><text x="7.9608%" y="607.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.7108%" y="581" width="0.0803%" height="15" fill="rgb(237,138,41)" fg:x="96" fg:w="1"/><text x="7.9608%" y="591.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (60 samples, 4.82%)</title><rect x="3.0522%" y="709" width="4.8193%" height="15" fill="rgb(227,91,49)" fg:x="38" fg:w="60"/><text x="3.3022%" y="719.50">&lt;engin..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (60 samples, 4.82%)</title><rect x="3.0522%" y="693" width="4.8193%" height="15" fill="rgb(247,21,44)" fg:x="38" fg:w="60"/><text x="3.3022%" y="703.50">engine..</text></g><g><title>engine::session::Session::new (60 samples, 4.82%)</title><rect x="3.0522%" y="677" width="4.8193%" height="15" fill="rgb(219,210,51)" fg:x="38" fg:w="60"/><text x="3.3022%" y="687.50">engine..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="7.7912%" y="661" width="0.0803%" height="15" fill="rgb(209,140,6)" fg:x="97" fg:w="1"/><text x="8.0412%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="7.7912%" y="645" width="0.0803%" height="15" fill="rgb(221,188,24)" fg:x="97" fg:w="1"/><text x="8.0412%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.9518%" y="629" width="0.0803%" height="15" fill="rgb(232,154,20)" fg:x="99" fg:w="1"/><text x="8.2018%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="7.9518%" y="693" width="0.1606%" height="15" fill="rgb(244,137,50)" fg:x="99" fg:w="2"/><text x="8.2018%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (2 samples, 0.16%)</title><rect x="7.9518%" y="677" width="0.1606%" height="15" fill="rgb(225,185,43)" fg:x="99" fg:w="2"/><text x="8.2018%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="7.9518%" y="661" width="0.1606%" height="15" fill="rgb(213,205,38)" fg:x="99" fg:w="2"/><text x="8.2018%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="7.9518%" y="645" width="0.1606%" height="15" fill="rgb(236,73,12)" fg:x="99" fg:w="2"/><text x="8.2018%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="8.0321%" y="629" width="0.0803%" height="15" fill="rgb(235,219,13)" fg:x="100" fg:w="1"/><text x="8.2821%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.0321%" y="613" width="0.0803%" height="15" fill="rgb(218,59,36)" fg:x="100" fg:w="1"/><text x="8.2821%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="8.1124%" y="693" width="0.0803%" height="15" fill="rgb(205,110,39)" fg:x="101" fg:w="1"/><text x="8.3624%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.1124%" y="677" width="0.0803%" height="15" fill="rgb(218,206,42)" fg:x="101" fg:w="1"/><text x="8.3624%" y="687.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="8.1928%" y="677" width="0.0803%" height="15" fill="rgb(248,125,24)" fg:x="102" fg:w="1"/><text x="8.4428%" y="687.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="8.1928%" y="661" width="0.0803%" height="15" fill="rgb(242,28,27)" fg:x="102" fg:w="1"/><text x="8.4428%" y="671.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="8.1928%" y="645" width="0.0803%" height="15" fill="rgb(216,228,15)" fg:x="102" fg:w="1"/><text x="8.4428%" y="655.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="8.1928%" y="629" width="0.0803%" height="15" fill="rgb(235,116,46)" fg:x="102" fg:w="1"/><text x="8.4428%" y="639.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="8.1928%" y="613" width="0.0803%" height="15" fill="rgb(224,18,32)" fg:x="102" fg:w="1"/><text x="8.4428%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="8.1928%" y="597" width="0.0803%" height="15" fill="rgb(252,5,12)" fg:x="102" fg:w="1"/><text x="8.4428%" y="607.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="8.1928%" y="581" width="0.0803%" height="15" fill="rgb(251,36,5)" fg:x="102" fg:w="1"/><text x="8.4428%" y="591.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="8.1928%" y="565" width="0.0803%" height="15" fill="rgb(217,53,14)" fg:x="102" fg:w="1"/><text x="8.4428%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.2731%" y="613" width="0.0803%" height="15" fill="rgb(215,86,45)" fg:x="103" fg:w="1"/><text x="8.5231%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.2731%" y="597" width="0.0803%" height="15" fill="rgb(242,169,11)" fg:x="103" fg:w="1"/><text x="8.5231%" y="607.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="8.2731%" y="581" width="0.0803%" height="15" fill="rgb(211,213,45)" fg:x="103" fg:w="1"/><text x="8.5231%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.5141%" y="517" width="0.0803%" height="15" fill="rgb(205,88,11)" fg:x="106" fg:w="1"/><text x="8.7641%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="8.5141%" y="533" width="0.1606%" height="15" fill="rgb(252,69,26)" fg:x="106" fg:w="2"/><text x="8.7641%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.5944%" y="517" width="0.0803%" height="15" fill="rgb(246,123,37)" fg:x="107" fg:w="1"/><text x="8.8444%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.5944%" y="501" width="0.0803%" height="15" fill="rgb(212,205,5)" fg:x="107" fg:w="1"/><text x="8.8444%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="8.4337%" y="549" width="0.3213%" height="15" fill="rgb(253,148,0)" fg:x="105" fg:w="4"/><text x="8.6837%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.6747%" y="533" width="0.0803%" height="15" fill="rgb(239,22,4)" fg:x="108" fg:w="1"/><text x="8.9247%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.7550%" y="549" width="0.0803%" height="15" fill="rgb(226,26,53)" fg:x="109" fg:w="1"/><text x="9.0050%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="8.3534%" y="565" width="0.5622%" height="15" fill="rgb(225,229,45)" fg:x="104" fg:w="7"/><text x="8.6034%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="8.8353%" y="549" width="0.0803%" height="15" fill="rgb(220,60,37)" fg:x="110" fg:w="1"/><text x="9.0853%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="8.8353%" y="533" width="0.0803%" height="15" fill="rgb(217,180,35)" fg:x="110" fg:w="1"/><text x="9.0853%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="8.8353%" y="517" width="0.0803%" height="15" fill="rgb(229,7,53)" fg:x="110" fg:w="1"/><text x="9.0853%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="8.8353%" y="501" width="0.0803%" height="15" fill="rgb(254,137,3)" fg:x="110" fg:w="1"/><text x="9.0853%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.80%)</title><rect x="8.3534%" y="597" width="0.8032%" height="15" fill="rgb(215,140,41)" fg:x="104" fg:w="10"/><text x="8.6034%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.80%)</title><rect x="8.3534%" y="581" width="0.8032%" height="15" fill="rgb(250,80,15)" fg:x="104" fg:w="10"/><text x="8.6034%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="8.9157%" y="565" width="0.2410%" height="15" fill="rgb(252,191,6)" fg:x="111" fg:w="3"/><text x="9.1657%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.0763%" y="549" width="0.0803%" height="15" fill="rgb(246,217,18)" fg:x="113" fg:w="1"/><text x="9.3263%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="9.1566%" y="565" width="0.3213%" height="15" fill="rgb(223,93,7)" fg:x="114" fg:w="4"/><text x="9.4066%" y="575.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="9.1566%" y="549" width="0.3213%" height="15" fill="rgb(225,55,52)" fg:x="114" fg:w="4"/><text x="9.4066%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="9.2369%" y="533" width="0.2410%" height="15" fill="rgb(240,31,24)" fg:x="115" fg:w="3"/><text x="9.4869%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="9.2369%" y="517" width="0.2410%" height="15" fill="rgb(205,56,52)" fg:x="115" fg:w="3"/><text x="9.4869%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="9.2369%" y="501" width="0.2410%" height="15" fill="rgb(246,146,12)" fg:x="115" fg:w="3"/><text x="9.4869%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="9.2369%" y="485" width="0.2410%" height="15" fill="rgb(239,84,36)" fg:x="115" fg:w="3"/><text x="9.4869%" y="495.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="9.3173%" y="469" width="0.1606%" height="15" fill="rgb(207,41,40)" fg:x="116" fg:w="2"/><text x="9.5673%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (6 samples, 0.48%)</title><rect x="9.1566%" y="581" width="0.4819%" height="15" fill="rgb(241,179,25)" fg:x="114" fg:w="6"/><text x="9.4066%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="9.4779%" y="565" width="0.1606%" height="15" fill="rgb(210,0,34)" fg:x="118" fg:w="2"/><text x="9.7279%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.5582%" y="549" width="0.0803%" height="15" fill="rgb(225,217,29)" fg:x="119" fg:w="1"/><text x="9.8082%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.5582%" y="533" width="0.0803%" height="15" fill="rgb(216,191,38)" fg:x="119" fg:w="1"/><text x="9.8082%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="9.7992%" y="565" width="0.0803%" height="15" fill="rgb(232,140,52)" fg:x="122" fg:w="1"/><text x="10.0492%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.8795%" y="565" width="0.0803%" height="15" fill="rgb(223,158,51)" fg:x="123" fg:w="1"/><text x="10.1295%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="10.0402%" y="549" width="0.0803%" height="15" fill="rgb(235,29,51)" fg:x="125" fg:w="1"/><text x="10.2902%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="10.1205%" y="549" width="0.2410%" height="15" fill="rgb(215,181,18)" fg:x="126" fg:w="3"/><text x="10.3705%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="10.1205%" y="533" width="0.2410%" height="15" fill="rgb(227,125,34)" fg:x="126" fg:w="3"/><text x="10.3705%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="10.1205%" y="517" width="0.2410%" height="15" fill="rgb(230,197,49)" fg:x="126" fg:w="3"/><text x="10.3705%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="10.2008%" y="501" width="0.1606%" height="15" fill="rgb(239,141,16)" fg:x="127" fg:w="2"/><text x="10.4508%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.2811%" y="485" width="0.0803%" height="15" fill="rgb(225,105,43)" fg:x="128" fg:w="1"/><text x="10.5311%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (6 samples, 0.48%)</title><rect x="10.3614%" y="549" width="0.4819%" height="15" fill="rgb(214,131,14)" fg:x="129" fg:w="6"/><text x="10.6114%" y="559.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="10.5221%" y="533" width="0.3213%" height="15" fill="rgb(229,177,11)" fg:x="131" fg:w="4"/><text x="10.7721%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.32%)</title><rect x="10.5221%" y="517" width="0.3213%" height="15" fill="rgb(231,180,14)" fg:x="131" fg:w="4"/><text x="10.7721%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.7631%" y="501" width="0.0803%" height="15" fill="rgb(232,88,2)" fg:x="134" fg:w="1"/><text x="11.0131%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="10.8434%" y="533" width="0.0803%" height="15" fill="rgb(205,220,8)" fg:x="135" fg:w="1"/><text x="11.0934%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="10.9237%" y="533" width="0.2410%" height="15" fill="rgb(225,23,53)" fg:x="136" fg:w="3"/><text x="11.1737%" y="543.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="10.9237%" y="517" width="0.2410%" height="15" fill="rgb(213,62,29)" fg:x="136" fg:w="3"/><text x="11.1737%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.0843%" y="501" width="0.0803%" height="15" fill="rgb(227,75,7)" fg:x="138" fg:w="1"/><text x="11.3343%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.0843%" y="485" width="0.0803%" height="15" fill="rgb(207,105,14)" fg:x="138" fg:w="1"/><text x="11.3343%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="11.1647%" y="517" width="0.0803%" height="15" fill="rgb(245,62,29)" fg:x="139" fg:w="1"/><text x="11.4147%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="11.2450%" y="517" width="0.0803%" height="15" fill="rgb(236,202,4)" fg:x="140" fg:w="1"/><text x="11.4950%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.2450%" y="501" width="0.0803%" height="15" fill="rgb(250,67,1)" fg:x="140" fg:w="1"/><text x="11.4950%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.2450%" y="485" width="0.0803%" height="15" fill="rgb(253,115,44)" fg:x="140" fg:w="1"/><text x="11.4950%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="11.1647%" y="533" width="0.2410%" height="15" fill="rgb(251,139,18)" fg:x="139" fg:w="3"/><text x="11.4147%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="11.3253%" y="517" width="0.0803%" height="15" fill="rgb(218,22,32)" fg:x="141" fg:w="1"/><text x="11.5753%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.3253%" y="501" width="0.0803%" height="15" fill="rgb(243,53,5)" fg:x="141" fg:w="1"/><text x="11.5753%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.3253%" y="485" width="0.0803%" height="15" fill="rgb(227,56,16)" fg:x="141" fg:w="1"/><text x="11.5753%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="10.8434%" y="549" width="0.6426%" height="15" fill="rgb(245,53,0)" fg:x="135" fg:w="8"/><text x="11.0934%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.4056%" y="533" width="0.0803%" height="15" fill="rgb(216,170,35)" fg:x="142" fg:w="1"/><text x="11.6556%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.4056%" y="517" width="0.0803%" height="15" fill="rgb(211,200,8)" fg:x="142" fg:w="1"/><text x="11.6556%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (20 samples, 1.61%)</title><rect x="9.9598%" y="565" width="1.6064%" height="15" fill="rgb(228,204,44)" fg:x="124" fg:w="20"/><text x="10.2098%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.4859%" y="549" width="0.0803%" height="15" fill="rgb(214,121,17)" fg:x="143" fg:w="1"/><text x="11.7359%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (36 samples, 2.89%)</title><rect x="9.1566%" y="597" width="2.8916%" height="15" fill="rgb(233,64,38)" fg:x="114" fg:w="36"/><text x="9.4066%" y="607.50">&lt;s..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (30 samples, 2.41%)</title><rect x="9.6386%" y="581" width="2.4096%" height="15" fill="rgb(253,54,19)" fg:x="120" fg:w="30"/><text x="9.8886%" y="591.50">se..</text></g><g><title>std::io::Write::write_all (6 samples, 0.48%)</title><rect x="11.5663%" y="565" width="0.4819%" height="15" fill="rgb(253,94,18)" fg:x="144" fg:w="6"/><text x="11.8163%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.32%)</title><rect x="11.7269%" y="549" width="0.3213%" height="15" fill="rgb(227,57,52)" fg:x="146" fg:w="4"/><text x="11.9769%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="11.8072%" y="533" width="0.2410%" height="15" fill="rgb(230,228,50)" fg:x="147" fg:w="3"/><text x="12.0572%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="11.9679%" y="517" width="0.0803%" height="15" fill="rgb(217,205,27)" fg:x="149" fg:w="1"/><text x="12.2179%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="11.9679%" y="501" width="0.0803%" height="15" fill="rgb(252,71,50)" fg:x="149" fg:w="1"/><text x="12.2179%" y="511.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="12.0482%" y="581" width="0.0803%" height="15" fill="rgb(209,86,4)" fg:x="150" fg:w="1"/><text x="12.2982%" y="591.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="12.0482%" y="565" width="0.0803%" height="15" fill="rgb(229,94,0)" fg:x="150" fg:w="1"/><text x="12.2982%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="12.0482%" y="549" width="0.0803%" height="15" fill="rgb(252,223,21)" fg:x="150" fg:w="1"/><text x="12.2982%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="12.1285%" y="565" width="0.0803%" height="15" fill="rgb(230,210,4)" fg:x="151" fg:w="1"/><text x="12.3785%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="12.2892%" y="549" width="0.0803%" height="15" fill="rgb(240,149,38)" fg:x="153" fg:w="1"/><text x="12.5392%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.2892%" y="533" width="0.0803%" height="15" fill="rgb(254,105,20)" fg:x="153" fg:w="1"/><text x="12.5392%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.2892%" y="517" width="0.0803%" height="15" fill="rgb(253,87,46)" fg:x="153" fg:w="1"/><text x="12.5392%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="12.3695%" y="549" width="0.0803%" height="15" fill="rgb(253,116,33)" fg:x="154" fg:w="1"/><text x="12.6195%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.3695%" y="533" width="0.0803%" height="15" fill="rgb(229,198,5)" fg:x="154" fg:w="1"/><text x="12.6195%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.3695%" y="517" width="0.0803%" height="15" fill="rgb(242,38,37)" fg:x="154" fg:w="1"/><text x="12.6195%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.4498%" y="485" width="0.0803%" height="15" fill="rgb(242,69,53)" fg:x="155" fg:w="1"/><text x="12.6998%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="12.4498%" y="501" width="0.1606%" height="15" fill="rgb(249,80,16)" fg:x="155" fg:w="2"/><text x="12.6998%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="12.5301%" y="485" width="0.0803%" height="15" fill="rgb(206,128,11)" fg:x="156" fg:w="1"/><text x="12.7801%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="12.6104%" y="501" width="0.0803%" height="15" fill="rgb(212,35,20)" fg:x="157" fg:w="1"/><text x="12.8604%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="12.6104%" y="485" width="0.0803%" height="15" fill="rgb(236,79,13)" fg:x="157" fg:w="1"/><text x="12.8604%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.6908%" y="469" width="0.0803%" height="15" fill="rgb(233,123,3)" fg:x="158" fg:w="1"/><text x="12.9408%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="12.4498%" y="517" width="0.4819%" height="15" fill="rgb(214,93,52)" fg:x="155" fg:w="6"/><text x="12.6998%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="12.6908%" y="501" width="0.2410%" height="15" fill="rgb(251,37,40)" fg:x="158" fg:w="3"/><text x="12.9408%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="12.6908%" y="485" width="0.2410%" height="15" fill="rgb(227,80,54)" fg:x="158" fg:w="3"/><text x="12.9408%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="12.7711%" y="469" width="0.1606%" height="15" fill="rgb(254,48,11)" fg:x="159" fg:w="2"/><text x="13.0211%" y="479.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="12.7711%" y="453" width="0.1606%" height="15" fill="rgb(235,193,26)" fg:x="159" fg:w="2"/><text x="13.0211%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.56%)</title><rect x="12.4498%" y="533" width="0.5622%" height="15" fill="rgb(229,99,21)" fg:x="155" fg:w="7"/><text x="12.6998%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="12.9317%" y="517" width="0.0803%" height="15" fill="rgb(211,140,41)" fg:x="161" fg:w="1"/><text x="13.1817%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.9317%" y="501" width="0.0803%" height="15" fill="rgb(240,227,30)" fg:x="161" fg:w="1"/><text x="13.1817%" y="511.50"></text></g><g><title>engine::session::Session::flush (61 samples, 4.90%)</title><rect x="8.1928%" y="693" width="4.8996%" height="15" fill="rgb(215,224,45)" fg:x="102" fg:w="61"/><text x="8.4428%" y="703.50">engine..</text></g><g><title>engine::session::state::State::close (60 samples, 4.82%)</title><rect x="8.2731%" y="677" width="4.8193%" height="15" fill="rgb(206,123,31)" fg:x="103" fg:w="60"/><text x="8.5231%" y="687.50">engine..</text></g><g><title>engine::session::state::State::flush_entities (60 samples, 4.82%)</title><rect x="8.2731%" y="661" width="4.8193%" height="15" fill="rgb(210,138,16)" fg:x="103" fg:w="60"/><text x="8.5231%" y="671.50">engine..</text></g><g><title>core::iter::adapters::try_process (60 samples, 4.82%)</title><rect x="8.2731%" y="645" width="4.8193%" height="15" fill="rgb(228,57,28)" fg:x="103" fg:w="60"/><text x="8.5231%" y="655.50">core::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (60 samples, 4.82%)</title><rect x="8.2731%" y="629" width="4.8193%" height="15" fill="rgb(242,170,10)" fg:x="103" fg:w="60"/><text x="8.5231%" y="639.50">&lt;alloc..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (59 samples, 4.74%)</title><rect x="8.3534%" y="613" width="4.7390%" height="15" fill="rgb(228,214,39)" fg:x="104" fg:w="59"/><text x="8.6034%" y="623.50">engine..</text></g><g><title>kernel::model::any_entity_changes (13 samples, 1.04%)</title><rect x="12.0482%" y="597" width="1.0442%" height="15" fill="rgb(218,179,33)" fg:x="150" fg:w="13"/><text x="12.2982%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (12 samples, 0.96%)</title><rect x="12.1285%" y="581" width="0.9639%" height="15" fill="rgb(235,193,39)" fg:x="151" fg:w="12"/><text x="12.3785%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (11 samples, 0.88%)</title><rect x="12.2088%" y="565" width="0.8835%" height="15" fill="rgb(219,221,36)" fg:x="152" fg:w="11"/><text x="12.4588%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.64%)</title><rect x="12.4498%" y="549" width="0.6426%" height="15" fill="rgb(248,218,19)" fg:x="155" fg:w="8"/><text x="12.6998%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.0120%" y="533" width="0.0803%" height="15" fill="rgb(205,50,9)" fg:x="162" fg:w="1"/><text x="13.2620%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.0120%" y="517" width="0.0803%" height="15" fill="rgb(238,81,28)" fg:x="162" fg:w="1"/><text x="13.2620%" y="527.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="13.0924%" y="693" width="0.0803%" height="15" fill="rgb(235,110,19)" fg:x="163" fg:w="1"/><text x="13.3424%" y="703.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="13.0924%" y="677" width="0.0803%" height="15" fill="rgb(214,7,14)" fg:x="163" fg:w="1"/><text x="13.3424%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="13.0924%" y="661" width="0.0803%" height="15" fill="rgb(211,77,3)" fg:x="163" fg:w="1"/><text x="13.3424%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.0924%" y="645" width="0.0803%" height="15" fill="rgb(229,5,9)" fg:x="163" fg:w="1"/><text x="13.3424%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="13.0924%" y="629" width="0.0803%" height="15" fill="rgb(225,90,11)" fg:x="163" fg:w="1"/><text x="13.3424%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="13.0924%" y="613" width="0.0803%" height="15" fill="rgb(242,56,8)" fg:x="163" fg:w="1"/><text x="13.3424%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="13.1727%" y="661" width="0.0803%" height="15" fill="rgb(249,212,39)" fg:x="164" fg:w="1"/><text x="13.4227%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.1727%" y="645" width="0.0803%" height="15" fill="rgb(236,90,9)" fg:x="164" fg:w="1"/><text x="13.4227%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.1727%" y="629" width="0.0803%" height="15" fill="rgb(206,88,35)" fg:x="164" fg:w="1"/><text x="13.4227%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.1727%" y="613" width="0.0803%" height="15" fill="rgb(205,126,30)" fg:x="164" fg:w="1"/><text x="13.4227%" y="623.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="13.2530%" y="645" width="0.1606%" height="15" fill="rgb(230,176,12)" fg:x="165" fg:w="2"/><text x="13.5030%" y="655.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (2 samples, 0.16%)</title><rect x="13.2530%" y="629" width="0.1606%" height="15" fill="rgb(243,19,9)" fg:x="165" fg:w="2"/><text x="13.5030%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="13.2530%" y="613" width="0.1606%" height="15" fill="rgb(245,171,17)" fg:x="165" fg:w="2"/><text x="13.5030%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.3333%" y="597" width="0.0803%" height="15" fill="rgb(227,52,21)" fg:x="166" fg:w="1"/><text x="13.5833%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.3333%" y="581" width="0.0803%" height="15" fill="rgb(238,69,14)" fg:x="166" fg:w="1"/><text x="13.5833%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="13.3333%" y="565" width="0.0803%" height="15" fill="rgb(241,156,39)" fg:x="166" fg:w="1"/><text x="13.5833%" y="575.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="13.3333%" y="549" width="0.0803%" height="15" fill="rgb(212,227,28)" fg:x="166" fg:w="1"/><text x="13.5833%" y="559.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="13.3333%" y="533" width="0.0803%" height="15" fill="rgb(209,118,27)" fg:x="166" fg:w="1"/><text x="13.5833%" y="543.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (3 samples, 0.24%)</title><rect x="13.2530%" y="661" width="0.2410%" height="15" fill="rgb(226,102,5)" fg:x="165" fg:w="3"/><text x="13.5030%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="13.4137%" y="645" width="0.0803%" height="15" fill="rgb(223,34,3)" fg:x="167" fg:w="1"/><text x="13.6637%" y="655.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="13.4137%" y="629" width="0.0803%" height="15" fill="rgb(221,81,38)" fg:x="167" fg:w="1"/><text x="13.6637%" y="639.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="13.4940%" y="661" width="0.0803%" height="15" fill="rgb(236,219,28)" fg:x="168" fg:w="1"/><text x="13.7440%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.5743%" y="597" width="0.0803%" height="15" fill="rgb(213,200,14)" fg:x="169" fg:w="1"/><text x="13.8243%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.5743%" y="581" width="0.0803%" height="15" fill="rgb(240,33,19)" fg:x="169" fg:w="1"/><text x="13.8243%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.5743%" y="565" width="0.0803%" height="15" fill="rgb(233,113,27)" fg:x="169" fg:w="1"/><text x="13.8243%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.5743%" y="549" width="0.0803%" height="15" fill="rgb(220,221,18)" fg:x="169" fg:w="1"/><text x="13.8243%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.5743%" y="533" width="0.0803%" height="15" fill="rgb(238,92,8)" fg:x="169" fg:w="1"/><text x="13.8243%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.5743%" y="517" width="0.0803%" height="15" fill="rgb(222,164,16)" fg:x="169" fg:w="1"/><text x="13.8243%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.5743%" y="501" width="0.0803%" height="15" fill="rgb(241,119,3)" fg:x="169" fg:w="1"/><text x="13.8243%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.5743%" y="485" width="0.0803%" height="15" fill="rgb(241,44,8)" fg:x="169" fg:w="1"/><text x="13.8243%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.5743%" y="469" width="0.0803%" height="15" fill="rgb(230,36,40)" fg:x="169" fg:w="1"/><text x="13.8243%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.5743%" y="453" width="0.0803%" height="15" fill="rgb(243,16,36)" fg:x="169" fg:w="1"/><text x="13.8243%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.5743%" y="437" width="0.0803%" height="15" fill="rgb(231,4,26)" fg:x="169" fg:w="1"/><text x="13.8243%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.5743%" y="421" width="0.0803%" height="15" fill="rgb(240,9,31)" fg:x="169" fg:w="1"/><text x="13.8243%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.5743%" y="405" width="0.0803%" height="15" fill="rgb(207,173,15)" fg:x="169" fg:w="1"/><text x="13.8243%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.5743%" y="389" width="0.0803%" height="15" fill="rgb(224,192,53)" fg:x="169" fg:w="1"/><text x="13.8243%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.5743%" y="373" width="0.0803%" height="15" fill="rgb(223,67,28)" fg:x="169" fg:w="1"/><text x="13.8243%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.6546%" y="597" width="0.0803%" height="15" fill="rgb(211,20,47)" fg:x="170" fg:w="1"/><text x="13.9046%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="13.5743%" y="645" width="0.2410%" height="15" fill="rgb(240,228,2)" fg:x="169" fg:w="3"/><text x="13.8243%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.24%)</title><rect x="13.5743%" y="629" width="0.2410%" height="15" fill="rgb(248,151,12)" fg:x="169" fg:w="3"/><text x="13.8243%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.24%)</title><rect x="13.5743%" y="613" width="0.2410%" height="15" fill="rgb(244,8,39)" fg:x="169" fg:w="3"/><text x="13.8243%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.7349%" y="597" width="0.0803%" height="15" fill="rgb(222,26,8)" fg:x="171" fg:w="1"/><text x="13.9849%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.7349%" y="581" width="0.0803%" height="15" fill="rgb(213,106,44)" fg:x="171" fg:w="1"/><text x="13.9849%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.7349%" y="565" width="0.0803%" height="15" fill="rgb(214,129,20)" fg:x="171" fg:w="1"/><text x="13.9849%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.7349%" y="549" width="0.0803%" height="15" fill="rgb(212,32,13)" fg:x="171" fg:w="1"/><text x="13.9849%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::size_hint (1 samples, 0.08%)</title><rect x="13.7349%" y="533" width="0.0803%" height="15" fill="rgb(208,168,33)" fg:x="171" fg:w="1"/><text x="13.9849%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.8153%" y="597" width="0.0803%" height="15" fill="rgb(231,207,8)" fg:x="172" fg:w="1"/><text x="14.0653%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="13.8153%" y="613" width="0.1606%" height="15" fill="rgb(235,219,23)" fg:x="172" fg:w="2"/><text x="14.0653%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.8956%" y="597" width="0.0803%" height="15" fill="rgb(226,216,26)" fg:x="173" fg:w="1"/><text x="14.1456%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.8956%" y="581" width="0.0803%" height="15" fill="rgb(239,137,16)" fg:x="173" fg:w="1"/><text x="14.1456%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.8956%" y="565" width="0.0803%" height="15" fill="rgb(207,12,36)" fg:x="173" fg:w="1"/><text x="14.1456%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="13.9759%" y="597" width="0.0803%" height="15" fill="rgb(210,214,24)" fg:x="174" fg:w="1"/><text x="14.2259%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (7 samples, 0.56%)</title><rect x="13.5743%" y="661" width="0.5622%" height="15" fill="rgb(206,56,30)" fg:x="169" fg:w="7"/><text x="13.8243%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="13.8153%" y="645" width="0.3213%" height="15" fill="rgb(228,143,26)" fg:x="172" fg:w="4"/><text x="14.0653%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="13.8153%" y="629" width="0.3213%" height="15" fill="rgb(216,218,46)" fg:x="172" fg:w="4"/><text x="14.0653%" y="639.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="13.9759%" y="613" width="0.1606%" height="15" fill="rgb(206,6,19)" fg:x="174" fg:w="2"/><text x="14.2259%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.0562%" y="597" width="0.0803%" height="15" fill="rgb(239,177,51)" fg:x="175" fg:w="1"/><text x="14.3062%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.0562%" y="581" width="0.0803%" height="15" fill="rgb(216,55,25)" fg:x="175" fg:w="1"/><text x="14.3062%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (13 samples, 1.04%)</title><rect x="13.1727%" y="677" width="1.0442%" height="15" fill="rgb(231,163,29)" fg:x="164" fg:w="13"/><text x="13.4227%" y="687.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="14.1365%" y="661" width="0.0803%" height="15" fill="rgb(232,149,50)" fg:x="176" fg:w="1"/><text x="14.3865%" y="671.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="14.1365%" y="645" width="0.0803%" height="15" fill="rgb(223,142,48)" fg:x="176" fg:w="1"/><text x="14.3865%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.2169%" y="677" width="0.0803%" height="15" fill="rgb(245,83,23)" fg:x="177" fg:w="1"/><text x="14.4669%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.2169%" y="661" width="0.0803%" height="15" fill="rgb(224,63,2)" fg:x="177" fg:w="1"/><text x="14.4669%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.2169%" y="645" width="0.0803%" height="15" fill="rgb(218,65,53)" fg:x="177" fg:w="1"/><text x="14.4669%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="14.2972%" y="661" width="0.2410%" height="15" fill="rgb(221,84,29)" fg:x="178" fg:w="3"/><text x="14.5472%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="14.3775%" y="645" width="0.1606%" height="15" fill="rgb(234,0,32)" fg:x="179" fg:w="2"/><text x="14.6275%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="14.3775%" y="629" width="0.1606%" height="15" fill="rgb(206,20,16)" fg:x="179" fg:w="2"/><text x="14.6275%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.4578%" y="613" width="0.0803%" height="15" fill="rgb(244,172,18)" fg:x="180" fg:w="1"/><text x="14.7078%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="14.2972%" y="677" width="0.3213%" height="15" fill="rgb(254,133,1)" fg:x="178" fg:w="4"/><text x="14.5472%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.5382%" y="661" width="0.0803%" height="15" fill="rgb(222,206,41)" fg:x="181" fg:w="1"/><text x="14.7882%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.5382%" y="645" width="0.0803%" height="15" fill="rgb(212,3,42)" fg:x="181" fg:w="1"/><text x="14.7882%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="14.5382%" y="629" width="0.0803%" height="15" fill="rgb(241,11,4)" fg:x="181" fg:w="1"/><text x="14.7882%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.5382%" y="613" width="0.0803%" height="15" fill="rgb(205,19,26)" fg:x="181" fg:w="1"/><text x="14.7882%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.5382%" y="597" width="0.0803%" height="15" fill="rgb(210,179,32)" fg:x="181" fg:w="1"/><text x="14.7882%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.5382%" y="581" width="0.0803%" height="15" fill="rgb(227,116,49)" fg:x="181" fg:w="1"/><text x="14.7882%" y="591.50"></text></g><g><title>plugins_core::build::Build::save (19 samples, 1.53%)</title><rect x="13.1727%" y="693" width="1.5261%" height="15" fill="rgb(211,146,6)" fg:x="164" fg:w="19"/><text x="13.4227%" y="703.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="14.6185%" y="677" width="0.0803%" height="15" fill="rgb(219,44,39)" fg:x="182" fg:w="1"/><text x="14.8685%" y="687.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (1 samples, 0.08%)</title><rect x="14.6988%" y="693" width="0.0803%" height="15" fill="rgb(234,128,11)" fg:x="183" fg:w="1"/><text x="14.9488%" y="703.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="14.6988%" y="677" width="0.0803%" height="15" fill="rgb(220,183,53)" fg:x="183" fg:w="1"/><text x="14.9488%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="14.6988%" y="661" width="0.0803%" height="15" fill="rgb(213,219,32)" fg:x="183" fg:w="1"/><text x="14.9488%" y="671.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="14.6988%" y="645" width="0.0803%" height="15" fill="rgb(232,156,16)" fg:x="183" fg:w="1"/><text x="14.9488%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="14.6988%" y="629" width="0.0803%" height="15" fill="rgb(246,135,34)" fg:x="183" fg:w="1"/><text x="14.9488%" y="639.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="14.6988%" y="613" width="0.0803%" height="15" fill="rgb(241,99,0)" fg:x="183" fg:w="1"/><text x="14.9488%" y="623.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="14.6988%" y="597" width="0.0803%" height="15" fill="rgb(222,103,45)" fg:x="183" fg:w="1"/><text x="14.9488%" y="607.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="14.6988%" y="581" width="0.0803%" height="15" fill="rgb(212,57,4)" fg:x="183" fg:w="1"/><text x="14.9488%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="14.6988%" y="565" width="0.0803%" height="15" fill="rgb(215,68,47)" fg:x="183" fg:w="1"/><text x="14.9488%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.6988%" y="549" width="0.0803%" height="15" fill="rgb(230,84,2)" fg:x="183" fg:w="1"/><text x="14.9488%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.6988%" y="533" width="0.0803%" height="15" fill="rgb(220,102,14)" fg:x="183" fg:w="1"/><text x="14.9488%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.6988%" y="517" width="0.0803%" height="15" fill="rgb(240,10,32)" fg:x="183" fg:w="1"/><text x="14.9488%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.6988%" y="501" width="0.0803%" height="15" fill="rgb(215,47,27)" fg:x="183" fg:w="1"/><text x="14.9488%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.6988%" y="485" width="0.0803%" height="15" fill="rgb(233,188,43)" fg:x="183" fg:w="1"/><text x="14.9488%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.6988%" y="469" width="0.0803%" height="15" fill="rgb(253,190,1)" fg:x="183" fg:w="1"/><text x="14.9488%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.6988%" y="453" width="0.0803%" height="15" fill="rgb(206,114,52)" fg:x="183" fg:w="1"/><text x="14.9488%" y="463.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="14.7791%" y="661" width="0.0803%" height="15" fill="rgb(233,120,37)" fg:x="184" fg:w="1"/><text x="15.0291%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="14.7791%" y="645" width="0.0803%" height="15" fill="rgb(214,52,39)" fg:x="184" fg:w="1"/><text x="15.0291%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="14.7791%" y="629" width="0.0803%" height="15" fill="rgb(223,80,29)" fg:x="184" fg:w="1"/><text x="15.0291%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="14.7791%" y="613" width="0.0803%" height="15" fill="rgb(230,101,40)" fg:x="184" fg:w="1"/><text x="15.0291%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.7791%" y="597" width="0.0803%" height="15" fill="rgb(219,211,8)" fg:x="184" fg:w="1"/><text x="15.0291%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.7791%" y="581" width="0.0803%" height="15" fill="rgb(252,126,28)" fg:x="184" fg:w="1"/><text x="15.0291%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="14.8594%" y="661" width="0.0803%" height="15" fill="rgb(215,56,38)" fg:x="185" fg:w="1"/><text x="15.1094%" y="671.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="14.8594%" y="645" width="0.0803%" height="15" fill="rgb(249,55,44)" fg:x="185" fg:w="1"/><text x="15.1094%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.8594%" y="629" width="0.0803%" height="15" fill="rgb(220,221,32)" fg:x="185" fg:w="1"/><text x="15.1094%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="14.8594%" y="613" width="0.0803%" height="15" fill="rgb(212,216,41)" fg:x="185" fg:w="1"/><text x="15.1094%" y="623.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="14.8594%" y="597" width="0.0803%" height="15" fill="rgb(228,213,43)" fg:x="185" fg:w="1"/><text x="15.1094%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.9398%" y="629" width="0.0803%" height="15" fill="rgb(211,31,26)" fg:x="186" fg:w="1"/><text x="15.1898%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.9398%" y="613" width="0.0803%" height="15" fill="rgb(229,202,19)" fg:x="186" fg:w="1"/><text x="15.1898%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.9398%" y="597" width="0.0803%" height="15" fill="rgb(229,105,46)" fg:x="186" fg:w="1"/><text x="15.1898%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.9398%" y="581" width="0.0803%" height="15" fill="rgb(235,108,1)" fg:x="186" fg:w="1"/><text x="15.1898%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.9398%" y="565" width="0.0803%" height="15" fill="rgb(245,111,35)" fg:x="186" fg:w="1"/><text x="15.1898%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.9398%" y="549" width="0.0803%" height="15" fill="rgb(219,185,31)" fg:x="186" fg:w="1"/><text x="15.1898%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.9398%" y="533" width="0.0803%" height="15" fill="rgb(214,4,43)" fg:x="186" fg:w="1"/><text x="15.1898%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.9398%" y="517" width="0.0803%" height="15" fill="rgb(235,227,40)" fg:x="186" fg:w="1"/><text x="15.1898%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.9398%" y="501" width="0.0803%" height="15" fill="rgb(230,88,30)" fg:x="186" fg:w="1"/><text x="15.1898%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.9398%" y="485" width="0.0803%" height="15" fill="rgb(216,217,1)" fg:x="186" fg:w="1"/><text x="15.1898%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.9398%" y="469" width="0.0803%" height="15" fill="rgb(248,139,50)" fg:x="186" fg:w="1"/><text x="15.1898%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.9398%" y="453" width="0.0803%" height="15" fill="rgb(233,1,21)" fg:x="186" fg:w="1"/><text x="15.1898%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.9398%" y="437" width="0.0803%" height="15" fill="rgb(215,183,12)" fg:x="186" fg:w="1"/><text x="15.1898%" y="447.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="14.9398%" y="645" width="0.2410%" height="15" fill="rgb(229,104,42)" fg:x="186" fg:w="3"/><text x="15.1898%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="15.0201%" y="629" width="0.1606%" height="15" fill="rgb(243,34,48)" fg:x="187" fg:w="2"/><text x="15.2701%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="15.0201%" y="613" width="0.1606%" height="15" fill="rgb(239,11,44)" fg:x="187" fg:w="2"/><text x="15.2701%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.1004%" y="597" width="0.0803%" height="15" fill="rgb(231,98,35)" fg:x="188" fg:w="1"/><text x="15.3504%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="15.2610%" y="517" width="0.0803%" height="15" fill="rgb(233,28,25)" fg:x="190" fg:w="1"/><text x="15.5110%" y="527.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="15.1807%" y="613" width="0.2410%" height="15" fill="rgb(234,123,11)" fg:x="189" fg:w="3"/><text x="15.4307%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="15.2610%" y="597" width="0.1606%" height="15" fill="rgb(220,69,3)" fg:x="190" fg:w="2"/><text x="15.5110%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="15.2610%" y="581" width="0.1606%" height="15" fill="rgb(214,64,36)" fg:x="190" fg:w="2"/><text x="15.5110%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="15.2610%" y="565" width="0.1606%" height="15" fill="rgb(211,138,32)" fg:x="190" fg:w="2"/><text x="15.5110%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="15.2610%" y="549" width="0.1606%" height="15" fill="rgb(213,118,47)" fg:x="190" fg:w="2"/><text x="15.5110%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="15.2610%" y="533" width="0.1606%" height="15" fill="rgb(243,124,49)" fg:x="190" fg:w="2"/><text x="15.5110%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.3414%" y="517" width="0.0803%" height="15" fill="rgb(221,30,28)" fg:x="191" fg:w="1"/><text x="15.5914%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.4217%" y="581" width="0.0803%" height="15" fill="rgb(246,37,13)" fg:x="192" fg:w="1"/><text x="15.6717%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.4217%" y="565" width="0.0803%" height="15" fill="rgb(249,66,14)" fg:x="192" fg:w="1"/><text x="15.6717%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.4217%" y="549" width="0.0803%" height="15" fill="rgb(213,166,5)" fg:x="192" fg:w="1"/><text x="15.6717%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.4217%" y="533" width="0.0803%" height="15" fill="rgb(221,66,24)" fg:x="192" fg:w="1"/><text x="15.6717%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.4217%" y="517" width="0.0803%" height="15" fill="rgb(210,132,17)" fg:x="192" fg:w="1"/><text x="15.6717%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="15.4217%" y="501" width="0.0803%" height="15" fill="rgb(243,202,5)" fg:x="192" fg:w="1"/><text x="15.6717%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="15.4217%" y="485" width="0.0803%" height="15" fill="rgb(233,70,48)" fg:x="192" fg:w="1"/><text x="15.6717%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="15.4217%" y="469" width="0.0803%" height="15" fill="rgb(238,41,26)" fg:x="192" fg:w="1"/><text x="15.6717%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.4217%" y="453" width="0.0803%" height="15" fill="rgb(241,19,31)" fg:x="192" fg:w="1"/><text x="15.6717%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.4217%" y="437" width="0.0803%" height="15" fill="rgb(214,76,10)" fg:x="192" fg:w="1"/><text x="15.6717%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="15.4217%" y="421" width="0.0803%" height="15" fill="rgb(254,202,22)" fg:x="192" fg:w="1"/><text x="15.6717%" y="431.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.08%)</title><rect x="15.4217%" y="405" width="0.0803%" height="15" fill="rgb(214,72,24)" fg:x="192" fg:w="1"/><text x="15.6717%" y="415.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.08%)</title><rect x="15.4217%" y="389" width="0.0803%" height="15" fill="rgb(221,92,46)" fg:x="192" fg:w="1"/><text x="15.6717%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="15.5020%" y="581" width="0.0803%" height="15" fill="rgb(246,13,50)" fg:x="193" fg:w="1"/><text x="15.7520%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.5020%" y="565" width="0.0803%" height="15" fill="rgb(240,165,38)" fg:x="193" fg:w="1"/><text x="15.7520%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.5823%" y="517" width="0.0803%" height="15" fill="rgb(241,24,51)" fg:x="194" fg:w="1"/><text x="15.8323%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="15.4217%" y="597" width="0.3213%" height="15" fill="rgb(227,51,44)" fg:x="192" fg:w="4"/><text x="15.6717%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="15.5823%" y="581" width="0.1606%" height="15" fill="rgb(231,121,3)" fg:x="194" fg:w="2"/><text x="15.8323%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="15.5823%" y="565" width="0.1606%" height="15" fill="rgb(245,3,41)" fg:x="194" fg:w="2"/><text x="15.8323%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="15.5823%" y="549" width="0.1606%" height="15" fill="rgb(214,13,26)" fg:x="194" fg:w="2"/><text x="15.8323%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="15.5823%" y="533" width="0.1606%" height="15" fill="rgb(252,75,11)" fg:x="194" fg:w="2"/><text x="15.8323%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.6627%" y="517" width="0.0803%" height="15" fill="rgb(218,226,17)" fg:x="195" fg:w="1"/><text x="15.9127%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.6627%" y="501" width="0.0803%" height="15" fill="rgb(248,89,38)" fg:x="195" fg:w="1"/><text x="15.9127%" y="511.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (11 samples, 0.88%)</title><rect x="14.9398%" y="661" width="0.8835%" height="15" fill="rgb(237,73,46)" fg:x="186" fg:w="11"/><text x="15.1898%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (8 samples, 0.64%)</title><rect x="15.1807%" y="645" width="0.6426%" height="15" fill="rgb(242,78,33)" fg:x="189" fg:w="8"/><text x="15.4307%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (8 samples, 0.64%)</title><rect x="15.1807%" y="629" width="0.6426%" height="15" fill="rgb(235,60,3)" fg:x="189" fg:w="8"/><text x="15.4307%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (5 samples, 0.40%)</title><rect x="15.4217%" y="613" width="0.4016%" height="15" fill="rgb(216,172,19)" fg:x="192" fg:w="5"/><text x="15.6717%" y="623.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="15.7430%" y="597" width="0.0803%" height="15" fill="rgb(227,6,42)" fg:x="196" fg:w="1"/><text x="15.9930%" y="607.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (15 samples, 1.20%)</title><rect x="14.7791%" y="693" width="1.2048%" height="15" fill="rgb(223,207,42)" fg:x="184" fg:w="15"/><text x="15.0291%" y="703.50"></text></g><g><title>plugins_core::tools::set_container (15 samples, 1.20%)</title><rect x="14.7791%" y="677" width="1.2048%" height="15" fill="rgb(246,138,30)" fg:x="184" fg:w="15"/><text x="15.0291%" y="687.50"></text></g><g><title>plugins_core::location::model::Location::set (2 samples, 0.16%)</title><rect x="15.8233%" y="661" width="0.1606%" height="15" fill="rgb(251,199,47)" fg:x="197" fg:w="2"/><text x="16.0733%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="15.8233%" y="645" width="0.1606%" height="15" fill="rgb(228,218,44)" fg:x="197" fg:w="2"/><text x="16.0733%" y="655.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="15.9036%" y="629" width="0.0803%" height="15" fill="rgb(220,68,6)" fg:x="198" fg:w="1"/><text x="16.1536%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.9036%" y="613" width="0.0803%" height="15" fill="rgb(240,60,26)" fg:x="198" fg:w="1"/><text x="16.1536%" y="623.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="15.9036%" y="597" width="0.0803%" height="15" fill="rgb(211,200,19)" fg:x="198" fg:w="1"/><text x="16.1536%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.9036%" y="581" width="0.0803%" height="15" fill="rgb(242,145,30)" fg:x="198" fg:w="1"/><text x="16.1536%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.9036%" y="565" width="0.0803%" height="15" fill="rgb(225,64,13)" fg:x="198" fg:w="1"/><text x="16.1536%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.9839%" y="565" width="0.0803%" height="15" fill="rgb(218,103,35)" fg:x="199" fg:w="1"/><text x="16.2339%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.9839%" y="549" width="0.0803%" height="15" fill="rgb(216,93,46)" fg:x="199" fg:w="1"/><text x="16.2339%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.9839%" y="533" width="0.0803%" height="15" fill="rgb(225,159,27)" fg:x="199" fg:w="1"/><text x="16.2339%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.9839%" y="517" width="0.0803%" height="15" fill="rgb(225,204,11)" fg:x="199" fg:w="1"/><text x="16.2339%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.9839%" y="501" width="0.0803%" height="15" fill="rgb(205,56,4)" fg:x="199" fg:w="1"/><text x="16.2339%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="15.9839%" y="485" width="0.0803%" height="15" fill="rgb(206,6,35)" fg:x="199" fg:w="1"/><text x="16.2339%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="15.9839%" y="469" width="0.0803%" height="15" fill="rgb(247,73,52)" fg:x="199" fg:w="1"/><text x="16.2339%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="15.9839%" y="453" width="0.0803%" height="15" fill="rgb(246,97,4)" fg:x="199" fg:w="1"/><text x="16.2339%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="15.9839%" y="437" width="0.0803%" height="15" fill="rgb(212,37,15)" fg:x="199" fg:w="1"/><text x="16.2339%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="15.9839%" y="421" width="0.0803%" height="15" fill="rgb(208,130,40)" fg:x="199" fg:w="1"/><text x="16.2339%" y="431.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="15.9839%" y="597" width="0.1606%" height="15" fill="rgb(236,55,29)" fg:x="199" fg:w="2"/><text x="16.2339%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="15.9839%" y="581" width="0.1606%" height="15" fill="rgb(209,156,45)" fg:x="199" fg:w="2"/><text x="16.2339%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.0643%" y="565" width="0.0803%" height="15" fill="rgb(249,107,4)" fg:x="200" fg:w="1"/><text x="16.3143%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.0643%" y="549" width="0.0803%" height="15" fill="rgb(227,7,13)" fg:x="200" fg:w="1"/><text x="16.3143%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="16.0643%" y="533" width="0.0803%" height="15" fill="rgb(250,129,14)" fg:x="200" fg:w="1"/><text x="16.3143%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.0643%" y="517" width="0.0803%" height="15" fill="rgb(229,92,13)" fg:x="200" fg:w="1"/><text x="16.3143%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.0643%" y="501" width="0.0803%" height="15" fill="rgb(245,98,39)" fg:x="200" fg:w="1"/><text x="16.3143%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.0643%" y="485" width="0.0803%" height="15" fill="rgb(234,135,48)" fg:x="200" fg:w="1"/><text x="16.3143%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.0643%" y="469" width="0.0803%" height="15" fill="rgb(230,98,28)" fg:x="200" fg:w="1"/><text x="16.3143%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.1446%" y="549" width="0.0803%" height="15" fill="rgb(223,121,0)" fg:x="201" fg:w="1"/><text x="16.3946%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.1446%" y="533" width="0.0803%" height="15" fill="rgb(234,173,33)" fg:x="201" fg:w="1"/><text x="16.3946%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.1446%" y="517" width="0.0803%" height="15" fill="rgb(245,47,8)" fg:x="201" fg:w="1"/><text x="16.3946%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.1446%" y="501" width="0.0803%" height="15" fill="rgb(205,17,20)" fg:x="201" fg:w="1"/><text x="16.3946%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.1446%" y="485" width="0.0803%" height="15" fill="rgb(232,151,16)" fg:x="201" fg:w="1"/><text x="16.3946%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.1446%" y="469" width="0.0803%" height="15" fill="rgb(208,30,32)" fg:x="201" fg:w="1"/><text x="16.3946%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.1446%" y="453" width="0.0803%" height="15" fill="rgb(254,26,3)" fg:x="201" fg:w="1"/><text x="16.3946%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="16.1446%" y="437" width="0.0803%" height="15" fill="rgb(240,177,30)" fg:x="201" fg:w="1"/><text x="16.3946%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="16.1446%" y="421" width="0.0803%" height="15" fill="rgb(248,76,44)" fg:x="201" fg:w="1"/><text x="16.3946%" y="431.50"></text></g><g><title>core::iter::adapters::try_process (4 samples, 0.32%)</title><rect x="15.9839%" y="677" width="0.3213%" height="15" fill="rgb(241,186,54)" fg:x="199" fg:w="4"/><text x="16.2339%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="15.9839%" y="661" width="0.3213%" height="15" fill="rgb(249,171,29)" fg:x="199" fg:w="4"/><text x="16.2339%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.32%)</title><rect x="15.9839%" y="645" width="0.3213%" height="15" fill="rgb(237,151,44)" fg:x="199" fg:w="4"/><text x="16.2339%" y="655.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.32%)</title><rect x="15.9839%" y="629" width="0.3213%" height="15" fill="rgb(228,174,30)" fg:x="199" fg:w="4"/><text x="16.2339%" y="639.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="15.9839%" y="613" width="0.3213%" height="15" fill="rgb(252,14,37)" fg:x="199" fg:w="4"/><text x="16.2339%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="16.1446%" y="597" width="0.1606%" height="15" fill="rgb(207,111,40)" fg:x="201" fg:w="2"/><text x="16.3946%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="16.1446%" y="581" width="0.1606%" height="15" fill="rgb(248,171,54)" fg:x="201" fg:w="2"/><text x="16.3946%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="16.1446%" y="565" width="0.1606%" height="15" fill="rgb(211,127,2)" fg:x="201" fg:w="2"/><text x="16.3946%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.2249%" y="549" width="0.0803%" height="15" fill="rgb(236,87,47)" fg:x="202" fg:w="1"/><text x="16.4749%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.2249%" y="533" width="0.0803%" height="15" fill="rgb(223,190,45)" fg:x="202" fg:w="1"/><text x="16.4749%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.2249%" y="517" width="0.0803%" height="15" fill="rgb(215,5,16)" fg:x="202" fg:w="1"/><text x="16.4749%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.2249%" y="501" width="0.0803%" height="15" fill="rgb(252,82,33)" fg:x="202" fg:w="1"/><text x="16.4749%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.2249%" y="485" width="0.0803%" height="15" fill="rgb(247,213,44)" fg:x="202" fg:w="1"/><text x="16.4749%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.2249%" y="469" width="0.0803%" height="15" fill="rgb(205,196,44)" fg:x="202" fg:w="1"/><text x="16.4749%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.2249%" y="453" width="0.0803%" height="15" fill="rgb(237,96,54)" fg:x="202" fg:w="1"/><text x="16.4749%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="16.2249%" y="437" width="0.0803%" height="15" fill="rgb(230,113,34)" fg:x="202" fg:w="1"/><text x="16.4749%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="16.2249%" y="421" width="0.0803%" height="15" fill="rgb(221,224,12)" fg:x="202" fg:w="1"/><text x="16.4749%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="16.2249%" y="405" width="0.0803%" height="15" fill="rgb(219,112,44)" fg:x="202" fg:w="1"/><text x="16.4749%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="16.2249%" y="389" width="0.0803%" height="15" fill="rgb(210,31,13)" fg:x="202" fg:w="1"/><text x="16.4749%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.2249%" y="373" width="0.0803%" height="15" fill="rgb(230,25,16)" fg:x="202" fg:w="1"/><text x="16.4749%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="16.3855%" y="613" width="0.0803%" height="15" fill="rgb(246,108,53)" fg:x="204" fg:w="1"/><text x="16.6355%" y="623.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="16.4659%" y="613" width="0.0803%" height="15" fill="rgb(241,172,50)" fg:x="205" fg:w="1"/><text x="16.7159%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="16.4659%" y="597" width="0.0803%" height="15" fill="rgb(235,141,10)" fg:x="205" fg:w="1"/><text x="16.7159%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="16.4659%" y="581" width="0.0803%" height="15" fill="rgb(220,174,43)" fg:x="205" fg:w="1"/><text x="16.7159%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.4659%" y="565" width="0.0803%" height="15" fill="rgb(215,181,40)" fg:x="205" fg:w="1"/><text x="16.7159%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.4659%" y="549" width="0.0803%" height="15" fill="rgb(230,97,2)" fg:x="205" fg:w="1"/><text x="16.7159%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.4659%" y="533" width="0.0803%" height="15" fill="rgb(211,25,27)" fg:x="205" fg:w="1"/><text x="16.7159%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.4659%" y="517" width="0.0803%" height="15" fill="rgb(230,87,26)" fg:x="205" fg:w="1"/><text x="16.7159%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.4659%" y="501" width="0.0803%" height="15" fill="rgb(227,160,17)" fg:x="205" fg:w="1"/><text x="16.7159%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.4659%" y="485" width="0.0803%" height="15" fill="rgb(244,85,34)" fg:x="205" fg:w="1"/><text x="16.7159%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.4659%" y="469" width="0.0803%" height="15" fill="rgb(207,70,0)" fg:x="205" fg:w="1"/><text x="16.7159%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="16.4659%" y="453" width="0.0803%" height="15" fill="rgb(223,129,7)" fg:x="205" fg:w="1"/><text x="16.7159%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="16.4659%" y="437" width="0.0803%" height="15" fill="rgb(246,105,7)" fg:x="205" fg:w="1"/><text x="16.7159%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="16.4659%" y="421" width="0.0803%" height="15" fill="rgb(215,154,42)" fg:x="205" fg:w="1"/><text x="16.7159%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="16.4659%" y="405" width="0.0803%" height="15" fill="rgb(220,215,30)" fg:x="205" fg:w="1"/><text x="16.7159%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.4659%" y="389" width="0.0803%" height="15" fill="rgb(228,81,51)" fg:x="205" fg:w="1"/><text x="16.7159%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="16.6265%" y="581" width="0.1606%" height="15" fill="rgb(247,71,54)" fg:x="207" fg:w="2"/><text x="16.8765%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="16.7068%" y="565" width="0.0803%" height="15" fill="rgb(234,176,34)" fg:x="208" fg:w="1"/><text x="16.9568%" y="575.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="16.7068%" y="549" width="0.0803%" height="15" fill="rgb(241,103,54)" fg:x="208" fg:w="1"/><text x="16.9568%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="16.8675%" y="501" width="0.0803%" height="15" fill="rgb(228,22,34)" fg:x="210" fg:w="1"/><text x="17.1175%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.8675%" y="485" width="0.0803%" height="15" fill="rgb(241,179,48)" fg:x="210" fg:w="1"/><text x="17.1175%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="16.8675%" y="517" width="0.1606%" height="15" fill="rgb(235,167,37)" fg:x="210" fg:w="2"/><text x="17.1175%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.9478%" y="501" width="0.0803%" height="15" fill="rgb(213,109,30)" fg:x="211" fg:w="1"/><text x="17.1978%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.9478%" y="485" width="0.0803%" height="15" fill="rgb(222,172,16)" fg:x="211" fg:w="1"/><text x="17.1978%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="17.0281%" y="517" width="0.0803%" height="15" fill="rgb(233,192,5)" fg:x="212" fg:w="1"/><text x="17.2781%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.0281%" y="501" width="0.0803%" height="15" fill="rgb(247,189,41)" fg:x="212" fg:w="1"/><text x="17.2781%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="16.8675%" y="533" width="0.3213%" height="15" fill="rgb(218,134,47)" fg:x="210" fg:w="4"/><text x="17.1175%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="17.1084%" y="517" width="0.0803%" height="15" fill="rgb(216,29,3)" fg:x="213" fg:w="1"/><text x="17.3584%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="17.1084%" y="501" width="0.0803%" height="15" fill="rgb(246,140,12)" fg:x="213" fg:w="1"/><text x="17.3584%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="17.1084%" y="485" width="0.0803%" height="15" fill="rgb(230,136,11)" fg:x="213" fg:w="1"/><text x="17.3584%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.1084%" y="469" width="0.0803%" height="15" fill="rgb(247,22,47)" fg:x="213" fg:w="1"/><text x="17.3584%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="16.8675%" y="549" width="0.4016%" height="15" fill="rgb(218,84,22)" fg:x="210" fg:w="5"/><text x="17.1175%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.1888%" y="533" width="0.0803%" height="15" fill="rgb(216,87,39)" fg:x="214" fg:w="1"/><text x="17.4388%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="16.7871%" y="565" width="0.5622%" height="15" fill="rgb(221,178,8)" fg:x="209" fg:w="7"/><text x="17.0371%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="17.2691%" y="549" width="0.0803%" height="15" fill="rgb(230,42,11)" fg:x="215" fg:w="1"/><text x="17.5191%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="17.4297%" y="549" width="0.0803%" height="15" fill="rgb(237,229,4)" fg:x="217" fg:w="1"/><text x="17.6797%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="17.4297%" y="533" width="0.0803%" height="15" fill="rgb(222,31,33)" fg:x="217" fg:w="1"/><text x="17.6797%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="17.4297%" y="517" width="0.0803%" height="15" fill="rgb(210,17,39)" fg:x="217" fg:w="1"/><text x="17.6797%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="17.4297%" y="501" width="0.0803%" height="15" fill="rgb(244,93,20)" fg:x="217" fg:w="1"/><text x="17.6797%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="17.5100%" y="533" width="0.0803%" height="15" fill="rgb(210,40,47)" fg:x="218" fg:w="1"/><text x="17.7600%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="17.5904%" y="533" width="0.0803%" height="15" fill="rgb(239,211,47)" fg:x="219" fg:w="1"/><text x="17.8404%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="17.5904%" y="517" width="0.0803%" height="15" fill="rgb(251,223,49)" fg:x="219" fg:w="1"/><text x="17.8404%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="17.5904%" y="501" width="0.0803%" height="15" fill="rgb(221,149,5)" fg:x="219" fg:w="1"/><text x="17.8404%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="17.5904%" y="485" width="0.0803%" height="15" fill="rgb(219,224,51)" fg:x="219" fg:w="1"/><text x="17.8404%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="17.6707%" y="533" width="0.2410%" height="15" fill="rgb(223,7,8)" fg:x="220" fg:w="3"/><text x="17.9207%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="17.7510%" y="517" width="0.1606%" height="15" fill="rgb(241,217,22)" fg:x="221" fg:w="2"/><text x="18.0010%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="17.7510%" y="501" width="0.1606%" height="15" fill="rgb(248,209,0)" fg:x="221" fg:w="2"/><text x="18.0010%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="17.7510%" y="485" width="0.1606%" height="15" fill="rgb(217,205,4)" fg:x="221" fg:w="2"/><text x="18.0010%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="17.8313%" y="469" width="0.0803%" height="15" fill="rgb(228,124,39)" fg:x="222" fg:w="1"/><text x="18.0813%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="17.8313%" y="453" width="0.0803%" height="15" fill="rgb(250,116,42)" fg:x="222" fg:w="1"/><text x="18.0813%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="17.8313%" y="437" width="0.0803%" height="15" fill="rgb(223,202,9)" fg:x="222" fg:w="1"/><text x="18.0813%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="17.9116%" y="485" width="0.0803%" height="15" fill="rgb(242,222,40)" fg:x="223" fg:w="1"/><text x="18.1616%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="17.9116%" y="469" width="0.0803%" height="15" fill="rgb(229,99,46)" fg:x="223" fg:w="1"/><text x="18.1616%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="17.9116%" y="517" width="0.1606%" height="15" fill="rgb(225,56,46)" fg:x="223" fg:w="2"/><text x="18.1616%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="17.9116%" y="501" width="0.1606%" height="15" fill="rgb(227,94,5)" fg:x="223" fg:w="2"/><text x="18.1616%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="17.9920%" y="485" width="0.0803%" height="15" fill="rgb(205,112,38)" fg:x="224" fg:w="1"/><text x="18.2420%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="17.9920%" y="469" width="0.0803%" height="15" fill="rgb(231,133,46)" fg:x="224" fg:w="1"/><text x="18.2420%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="17.9920%" y="453" width="0.0803%" height="15" fill="rgb(217,16,9)" fg:x="224" fg:w="1"/><text x="18.2420%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="18.0723%" y="517" width="0.2410%" height="15" fill="rgb(249,173,9)" fg:x="225" fg:w="3"/><text x="18.3223%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="18.2329%" y="501" width="0.0803%" height="15" fill="rgb(205,163,53)" fg:x="227" fg:w="1"/><text x="18.4829%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="18.3936%" y="501" width="0.0803%" height="15" fill="rgb(217,54,41)" fg:x="229" fg:w="1"/><text x="18.6436%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.7149%" y="437" width="0.0803%" height="15" fill="rgb(228,216,12)" fg:x="233" fg:w="1"/><text x="18.9649%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="18.7149%" y="421" width="0.0803%" height="15" fill="rgb(244,228,15)" fg:x="233" fg:w="1"/><text x="18.9649%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="18.7149%" y="405" width="0.0803%" height="15" fill="rgb(221,176,53)" fg:x="233" fg:w="1"/><text x="18.9649%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="18.7149%" y="389" width="0.0803%" height="15" fill="rgb(205,94,34)" fg:x="233" fg:w="1"/><text x="18.9649%" y="399.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="18.5542%" y="485" width="0.3213%" height="15" fill="rgb(213,110,48)" fg:x="231" fg:w="4"/><text x="18.8042%" y="495.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="18.7149%" y="469" width="0.1606%" height="15" fill="rgb(236,142,28)" fg:x="233" fg:w="2"/><text x="18.9649%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="18.7149%" y="453" width="0.1606%" height="15" fill="rgb(225,135,29)" fg:x="233" fg:w="2"/><text x="18.9649%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="18.7952%" y="437" width="0.0803%" height="15" fill="rgb(252,45,31)" fg:x="234" fg:w="1"/><text x="19.0452%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="18.8755%" y="485" width="0.0803%" height="15" fill="rgb(211,187,50)" fg:x="235" fg:w="1"/><text x="19.1255%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="18.8755%" y="469" width="0.0803%" height="15" fill="rgb(229,109,7)" fg:x="235" fg:w="1"/><text x="19.1255%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="18.4739%" y="501" width="0.5622%" height="15" fill="rgb(251,131,51)" fg:x="230" fg:w="7"/><text x="18.7239%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="18.9558%" y="485" width="0.0803%" height="15" fill="rgb(251,180,35)" fg:x="236" fg:w="1"/><text x="19.2058%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="18.9558%" y="469" width="0.0803%" height="15" fill="rgb(211,46,32)" fg:x="236" fg:w="1"/><text x="19.2058%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.9558%" y="453" width="0.0803%" height="15" fill="rgb(248,123,17)" fg:x="236" fg:w="1"/><text x="19.2058%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.80%)</title><rect x="18.3133%" y="517" width="0.8032%" height="15" fill="rgb(227,141,18)" fg:x="228" fg:w="10"/><text x="18.5633%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="19.0361%" y="501" width="0.0803%" height="15" fill="rgb(216,102,9)" fg:x="237" fg:w="1"/><text x="19.2861%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="19.0361%" y="485" width="0.0803%" height="15" fill="rgb(253,47,13)" fg:x="237" fg:w="1"/><text x="19.2861%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="19.0361%" y="469" width="0.0803%" height="15" fill="rgb(226,93,23)" fg:x="237" fg:w="1"/><text x="19.2861%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (17 samples, 1.37%)</title><rect x="17.9116%" y="533" width="1.3655%" height="15" fill="rgb(247,104,17)" fg:x="223" fg:w="17"/><text x="18.1616%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="19.1165%" y="517" width="0.1606%" height="15" fill="rgb(233,203,26)" fg:x="238" fg:w="2"/><text x="19.3665%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="19.1165%" y="501" width="0.1606%" height="15" fill="rgb(244,98,49)" fg:x="238" fg:w="2"/><text x="19.3665%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="19.1968%" y="485" width="0.0803%" height="15" fill="rgb(235,134,22)" fg:x="239" fg:w="1"/><text x="19.4468%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (25 samples, 2.01%)</title><rect x="17.3494%" y="565" width="2.0080%" height="15" fill="rgb(221,70,32)" fg:x="216" fg:w="25"/><text x="17.5994%" y="575.50">&lt;..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (23 samples, 1.85%)</title><rect x="17.5100%" y="549" width="1.8474%" height="15" fill="rgb(238,15,50)" fg:x="218" fg:w="23"/><text x="17.7600%" y="559.50">s..</text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="19.2771%" y="533" width="0.0803%" height="15" fill="rgb(215,221,48)" fg:x="240" fg:w="1"/><text x="19.5271%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="19.2771%" y="517" width="0.0803%" height="15" fill="rgb(236,73,3)" fg:x="240" fg:w="1"/><text x="19.5271%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="19.2771%" y="501" width="0.0803%" height="15" fill="rgb(250,107,11)" fg:x="240" fg:w="1"/><text x="19.5271%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="19.2771%" y="485" width="0.0803%" height="15" fill="rgb(242,39,14)" fg:x="240" fg:w="1"/><text x="19.5271%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="19.2771%" y="469" width="0.0803%" height="15" fill="rgb(248,164,37)" fg:x="240" fg:w="1"/><text x="19.5271%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="19.2771%" y="453" width="0.0803%" height="15" fill="rgb(217,60,12)" fg:x="240" fg:w="1"/><text x="19.5271%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.5181%" y="517" width="0.0803%" height="15" fill="rgb(240,125,29)" fg:x="243" fg:w="1"/><text x="19.7681%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="19.6787%" y="469" width="0.1606%" height="15" fill="rgb(208,207,28)" fg:x="245" fg:w="2"/><text x="19.9287%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="19.7590%" y="453" width="0.0803%" height="15" fill="rgb(209,159,27)" fg:x="246" fg:w="1"/><text x="20.0090%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="19.8394%" y="469" width="0.0803%" height="15" fill="rgb(251,176,53)" fg:x="247" fg:w="1"/><text x="20.0894%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="19.8394%" y="453" width="0.0803%" height="15" fill="rgb(211,85,7)" fg:x="247" fg:w="1"/><text x="20.0894%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="19.8394%" y="437" width="0.0803%" height="15" fill="rgb(216,64,54)" fg:x="247" fg:w="1"/><text x="20.0894%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="19.8394%" y="421" width="0.0803%" height="15" fill="rgb(217,54,24)" fg:x="247" fg:w="1"/><text x="20.0894%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.8394%" y="405" width="0.0803%" height="15" fill="rgb(208,206,53)" fg:x="247" fg:w="1"/><text x="20.0894%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="19.9197%" y="453" width="0.0803%" height="15" fill="rgb(251,74,39)" fg:x="248" fg:w="1"/><text x="20.1697%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="20.0000%" y="421" width="0.1606%" height="15" fill="rgb(226,47,5)" fg:x="249" fg:w="2"/><text x="20.2500%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.56%)</title><rect x="19.6787%" y="501" width="0.5622%" height="15" fill="rgb(234,111,33)" fg:x="245" fg:w="7"/><text x="19.9287%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.56%)</title><rect x="19.6787%" y="485" width="0.5622%" height="15" fill="rgb(251,14,10)" fg:x="245" fg:w="7"/><text x="19.9287%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="19.9197%" y="469" width="0.3213%" height="15" fill="rgb(232,43,0)" fg:x="248" fg:w="4"/><text x="20.1697%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="20.0000%" y="453" width="0.2410%" height="15" fill="rgb(222,68,43)" fg:x="249" fg:w="3"/><text x="20.2500%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="20.0000%" y="437" width="0.2410%" height="15" fill="rgb(217,24,23)" fg:x="249" fg:w="3"/><text x="20.2500%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.1606%" y="421" width="0.0803%" height="15" fill="rgb(229,209,14)" fg:x="251" fg:w="1"/><text x="20.4106%" y="431.50"></text></g><g><title>engine::session::Session::flush (51 samples, 4.10%)</title><rect x="16.3052%" y="677" width="4.0964%" height="15" fill="rgb(250,149,48)" fg:x="203" fg:w="51"/><text x="16.5552%" y="687.50">engi..</text></g><g><title>engine::session::Session::save_changes (51 samples, 4.10%)</title><rect x="16.3052%" y="661" width="4.0964%" height="15" fill="rgb(210,120,37)" fg:x="203" fg:w="51"/><text x="16.5552%" y="671.50">engi..</text></g><g><title>engine::session::state::State::close (51 samples, 4.10%)</title><rect x="16.3052%" y="645" width="4.0964%" height="15" fill="rgb(210,21,8)" fg:x="203" fg:w="51"/><text x="16.5552%" y="655.50">engi..</text></g><g><title>engine::session::state::State::flush_entities (50 samples, 4.02%)</title><rect x="16.3855%" y="629" width="4.0161%" height="15" fill="rgb(243,145,7)" fg:x="204" fg:w="50"/><text x="16.6355%" y="639.50">engi..</text></g><g><title>core::iter::adapters::try_process (48 samples, 3.86%)</title><rect x="16.5462%" y="613" width="3.8554%" height="15" fill="rgb(238,178,32)" fg:x="206" fg:w="48"/><text x="16.7962%" y="623.50">core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (47 samples, 3.78%)</title><rect x="16.6265%" y="597" width="3.7751%" height="15" fill="rgb(222,4,10)" fg:x="207" fg:w="47"/><text x="16.8765%" y="607.50">&lt;all..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (45 samples, 3.61%)</title><rect x="16.7871%" y="581" width="3.6145%" height="15" fill="rgb(239,7,37)" fg:x="209" fg:w="45"/><text x="17.0371%" y="591.50">engi..</text></g><g><title>kernel::model::any_entity_changes (13 samples, 1.04%)</title><rect x="19.3574%" y="565" width="1.0442%" height="15" fill="rgb(215,31,37)" fg:x="241" fg:w="13"/><text x="19.6074%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (13 samples, 1.04%)</title><rect x="19.3574%" y="549" width="1.0442%" height="15" fill="rgb(224,83,33)" fg:x="241" fg:w="13"/><text x="19.6074%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (13 samples, 1.04%)</title><rect x="19.3574%" y="533" width="1.0442%" height="15" fill="rgb(239,55,3)" fg:x="241" fg:w="13"/><text x="19.6074%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (10 samples, 0.80%)</title><rect x="19.5984%" y="517" width="0.8032%" height="15" fill="rgb(247,92,11)" fg:x="244" fg:w="10"/><text x="19.8484%" y="527.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="20.2410%" y="501" width="0.1606%" height="15" fill="rgb(239,200,7)" fg:x="252" fg:w="2"/><text x="20.4910%" y="511.50"></text></g><g><title>plugins_core::build::Build::named (3 samples, 0.24%)</title><rect x="20.4016%" y="677" width="0.2410%" height="15" fill="rgb(227,115,8)" fg:x="254" fg:w="3"/><text x="20.6516%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (3 samples, 0.24%)</title><rect x="20.4016%" y="661" width="0.2410%" height="15" fill="rgb(215,189,27)" fg:x="254" fg:w="3"/><text x="20.6516%" y="671.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="20.4819%" y="645" width="0.1606%" height="15" fill="rgb(251,216,39)" fg:x="255" fg:w="2"/><text x="20.7319%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (2 samples, 0.16%)</title><rect x="20.4819%" y="629" width="0.1606%" height="15" fill="rgb(207,29,47)" fg:x="255" fg:w="2"/><text x="20.7319%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.6426%" y="629" width="0.0803%" height="15" fill="rgb(210,71,34)" fg:x="257" fg:w="1"/><text x="20.8926%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.6426%" y="613" width="0.0803%" height="15" fill="rgb(253,217,51)" fg:x="257" fg:w="1"/><text x="20.8926%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="20.6426%" y="645" width="0.1606%" height="15" fill="rgb(222,117,46)" fg:x="257" fg:w="2"/><text x="20.8926%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.7229%" y="629" width="0.0803%" height="15" fill="rgb(226,132,6)" fg:x="258" fg:w="1"/><text x="20.9729%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.7229%" y="613" width="0.0803%" height="15" fill="rgb(254,145,51)" fg:x="258" fg:w="1"/><text x="20.9729%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="20.7229%" y="597" width="0.0803%" height="15" fill="rgb(231,199,27)" fg:x="258" fg:w="1"/><text x="20.9729%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.7229%" y="581" width="0.0803%" height="15" fill="rgb(245,158,14)" fg:x="258" fg:w="1"/><text x="20.9729%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.7229%" y="565" width="0.0803%" height="15" fill="rgb(240,113,14)" fg:x="258" fg:w="1"/><text x="20.9729%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="20.8032%" y="629" width="0.0803%" height="15" fill="rgb(210,20,13)" fg:x="259" fg:w="1"/><text x="21.0532%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="20.8032%" y="613" width="0.0803%" height="15" fill="rgb(241,144,13)" fg:x="259" fg:w="1"/><text x="21.0532%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="20.8032%" y="597" width="0.0803%" height="15" fill="rgb(235,43,34)" fg:x="259" fg:w="1"/><text x="21.0532%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="20.8032%" y="581" width="0.0803%" height="15" fill="rgb(208,36,20)" fg:x="259" fg:w="1"/><text x="21.0532%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="20.8032%" y="565" width="0.0803%" height="15" fill="rgb(239,204,10)" fg:x="259" fg:w="1"/><text x="21.0532%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="20.8032%" y="549" width="0.0803%" height="15" fill="rgb(217,84,43)" fg:x="259" fg:w="1"/><text x="21.0532%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="20.8032%" y="533" width="0.0803%" height="15" fill="rgb(241,170,50)" fg:x="259" fg:w="1"/><text x="21.0532%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="20.8032%" y="645" width="0.1606%" height="15" fill="rgb(226,205,29)" fg:x="259" fg:w="2"/><text x="21.0532%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="20.8835%" y="629" width="0.0803%" height="15" fill="rgb(233,113,1)" fg:x="260" fg:w="1"/><text x="21.1335%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="20.8835%" y="613" width="0.0803%" height="15" fill="rgb(253,98,13)" fg:x="260" fg:w="1"/><text x="21.1335%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.8835%" y="597" width="0.0803%" height="15" fill="rgb(211,115,12)" fg:x="260" fg:w="1"/><text x="21.1335%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="20.6426%" y="661" width="0.4016%" height="15" fill="rgb(208,12,16)" fg:x="257" fg:w="5"/><text x="20.8926%" y="671.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="20.9639%" y="645" width="0.0803%" height="15" fill="rgb(237,193,54)" fg:x="261" fg:w="1"/><text x="21.2139%" y="655.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.48%)</title><rect x="20.6426%" y="677" width="0.4819%" height="15" fill="rgb(243,22,42)" fg:x="257" fg:w="6"/><text x="20.8926%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="21.0442%" y="661" width="0.0803%" height="15" fill="rgb(233,151,36)" fg:x="262" fg:w="1"/><text x="21.2942%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="21.1245%" y="597" width="0.0803%" height="15" fill="rgb(237,57,45)" fg:x="263" fg:w="1"/><text x="21.3745%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="21.1245%" y="581" width="0.0803%" height="15" fill="rgb(221,88,17)" fg:x="263" fg:w="1"/><text x="21.3745%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.1245%" y="565" width="0.0803%" height="15" fill="rgb(230,79,15)" fg:x="263" fg:w="1"/><text x="21.3745%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="21.1245%" y="549" width="0.0803%" height="15" fill="rgb(213,57,13)" fg:x="263" fg:w="1"/><text x="21.3745%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.1245%" y="533" width="0.0803%" height="15" fill="rgb(222,116,39)" fg:x="263" fg:w="1"/><text x="21.3745%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="21.1245%" y="517" width="0.0803%" height="15" fill="rgb(245,107,2)" fg:x="263" fg:w="1"/><text x="21.3745%" y="527.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="21.1245%" y="645" width="0.1606%" height="15" fill="rgb(238,1,10)" fg:x="263" fg:w="2"/><text x="21.3745%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="21.1245%" y="629" width="0.1606%" height="15" fill="rgb(249,4,48)" fg:x="263" fg:w="2"/><text x="21.3745%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="21.1245%" y="613" width="0.1606%" height="15" fill="rgb(223,151,18)" fg:x="263" fg:w="2"/><text x="21.3745%" y="623.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="21.2048%" y="597" width="0.0803%" height="15" fill="rgb(227,65,43)" fg:x="264" fg:w="1"/><text x="21.4548%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="21.2048%" y="581" width="0.0803%" height="15" fill="rgb(218,40,45)" fg:x="264" fg:w="1"/><text x="21.4548%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="21.2048%" y="565" width="0.0803%" height="15" fill="rgb(252,121,31)" fg:x="264" fg:w="1"/><text x="21.4548%" y="575.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="21.3655%" y="629" width="0.0803%" height="15" fill="rgb(219,158,43)" fg:x="266" fg:w="1"/><text x="21.6155%" y="639.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="21.3655%" y="613" width="0.0803%" height="15" fill="rgb(231,162,42)" fg:x="266" fg:w="1"/><text x="21.6155%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="21.3655%" y="597" width="0.0803%" height="15" fill="rgb(217,179,25)" fg:x="266" fg:w="1"/><text x="21.6155%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="21.3655%" y="581" width="0.0803%" height="15" fill="rgb(206,212,31)" fg:x="266" fg:w="1"/><text x="21.6155%" y="591.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (6 samples, 0.48%)</title><rect x="21.1245%" y="677" width="0.4819%" height="15" fill="rgb(235,144,12)" fg:x="263" fg:w="6"/><text x="21.3745%" y="687.50"></text></g><g><title>plugins_core::tools::set_occupying (6 samples, 0.48%)</title><rect x="21.1245%" y="661" width="0.4819%" height="15" fill="rgb(213,51,10)" fg:x="263" fg:w="6"/><text x="21.3745%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (4 samples, 0.32%)</title><rect x="21.2851%" y="645" width="0.3213%" height="15" fill="rgb(231,145,14)" fg:x="265" fg:w="4"/><text x="21.5351%" y="655.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (2 samples, 0.16%)</title><rect x="21.4458%" y="629" width="0.1606%" height="15" fill="rgb(235,15,28)" fg:x="267" fg:w="2"/><text x="21.6958%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="21.4458%" y="613" width="0.1606%" height="15" fill="rgb(237,206,10)" fg:x="267" fg:w="2"/><text x="21.6958%" y="623.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (2 samples, 0.16%)</title><rect x="21.4458%" y="597" width="0.1606%" height="15" fill="rgb(236,227,27)" fg:x="267" fg:w="2"/><text x="21.6958%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="21.5261%" y="581" width="0.0803%" height="15" fill="rgb(246,83,35)" fg:x="268" fg:w="1"/><text x="21.7761%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.5261%" y="565" width="0.0803%" height="15" fill="rgb(220,136,24)" fg:x="268" fg:w="1"/><text x="21.7761%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.5261%" y="549" width="0.0803%" height="15" fill="rgb(217,3,25)" fg:x="268" fg:w="1"/><text x="21.7761%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.6867%" y="613" width="0.0803%" height="15" fill="rgb(239,24,14)" fg:x="270" fg:w="1"/><text x="21.9367%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (3 samples, 0.24%)</title><rect x="21.6064%" y="677" width="0.2410%" height="15" fill="rgb(244,16,53)" fg:x="269" fg:w="3"/><text x="21.8564%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.24%)</title><rect x="21.6064%" y="661" width="0.2410%" height="15" fill="rgb(208,175,44)" fg:x="269" fg:w="3"/><text x="21.8564%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="21.6867%" y="645" width="0.1606%" height="15" fill="rgb(252,18,48)" fg:x="270" fg:w="2"/><text x="21.9367%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="21.6867%" y="629" width="0.1606%" height="15" fill="rgb(234,199,32)" fg:x="270" fg:w="2"/><text x="21.9367%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="21.7671%" y="613" width="0.0803%" height="15" fill="rgb(225,77,54)" fg:x="271" fg:w="1"/><text x="22.0171%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.7671%" y="597" width="0.0803%" height="15" fill="rgb(225,42,25)" fg:x="271" fg:w="1"/><text x="22.0171%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="21.7671%" y="581" width="0.0803%" height="15" fill="rgb(242,227,46)" fg:x="271" fg:w="1"/><text x="22.0171%" y="591.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="21.7671%" y="565" width="0.0803%" height="15" fill="rgb(246,197,35)" fg:x="271" fg:w="1"/><text x="22.0171%" y="575.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="21.7671%" y="549" width="0.0803%" height="15" fill="rgb(215,159,26)" fg:x="271" fg:w="1"/><text x="22.0171%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.8474%" y="597" width="0.0803%" height="15" fill="rgb(212,194,50)" fg:x="272" fg:w="1"/><text x="22.0974%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.8474%" y="581" width="0.0803%" height="15" fill="rgb(246,132,1)" fg:x="272" fg:w="1"/><text x="22.0974%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.8474%" y="565" width="0.0803%" height="15" fill="rgb(217,71,7)" fg:x="272" fg:w="1"/><text x="22.0974%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="21.9277%" y="533" width="0.0803%" height="15" fill="rgb(252,59,32)" fg:x="273" fg:w="1"/><text x="22.1777%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.9277%" y="517" width="0.0803%" height="15" fill="rgb(253,204,25)" fg:x="273" fg:w="1"/><text x="22.1777%" y="527.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="21.8474%" y="661" width="0.2410%" height="15" fill="rgb(232,21,16)" fg:x="272" fg:w="3"/><text x="22.0974%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="21.8474%" y="645" width="0.2410%" height="15" fill="rgb(248,90,29)" fg:x="272" fg:w="3"/><text x="22.0974%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="21.8474%" y="629" width="0.2410%" height="15" fill="rgb(249,223,7)" fg:x="272" fg:w="3"/><text x="22.0974%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="21.8474%" y="613" width="0.2410%" height="15" fill="rgb(231,119,42)" fg:x="272" fg:w="3"/><text x="22.0974%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="21.9277%" y="597" width="0.1606%" height="15" fill="rgb(215,41,35)" fg:x="273" fg:w="2"/><text x="22.1777%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="21.9277%" y="581" width="0.1606%" height="15" fill="rgb(220,44,45)" fg:x="273" fg:w="2"/><text x="22.1777%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="21.9277%" y="565" width="0.1606%" height="15" fill="rgb(253,197,36)" fg:x="273" fg:w="2"/><text x="22.1777%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="21.9277%" y="549" width="0.1606%" height="15" fill="rgb(245,225,54)" fg:x="273" fg:w="2"/><text x="22.1777%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.0080%" y="533" width="0.0803%" height="15" fill="rgb(239,94,37)" fg:x="274" fg:w="1"/><text x="22.2580%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="22.0884%" y="645" width="0.0803%" height="15" fill="rgb(242,217,10)" fg:x="275" fg:w="1"/><text x="22.3384%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="22.0884%" y="629" width="0.0803%" height="15" fill="rgb(250,193,7)" fg:x="275" fg:w="1"/><text x="22.3384%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.0884%" y="613" width="0.0803%" height="15" fill="rgb(230,104,19)" fg:x="275" fg:w="1"/><text x="22.3384%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="22.0884%" y="597" width="0.0803%" height="15" fill="rgb(230,181,4)" fg:x="275" fg:w="1"/><text x="22.3384%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.0884%" y="581" width="0.0803%" height="15" fill="rgb(216,219,49)" fg:x="275" fg:w="1"/><text x="22.3384%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="22.0884%" y="565" width="0.0803%" height="15" fill="rgb(254,144,0)" fg:x="275" fg:w="1"/><text x="22.3384%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.0884%" y="549" width="0.0803%" height="15" fill="rgb(205,209,38)" fg:x="275" fg:w="1"/><text x="22.3384%" y="559.50"></text></g><g><title>plugins_core::tools::set_container (6 samples, 0.48%)</title><rect x="21.8474%" y="677" width="0.4819%" height="15" fill="rgb(240,21,42)" fg:x="272" fg:w="6"/><text x="22.0974%" y="687.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="22.0884%" y="661" width="0.2410%" height="15" fill="rgb(241,132,3)" fg:x="275" fg:w="3"/><text x="22.3384%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="22.1687%" y="645" width="0.1606%" height="15" fill="rgb(225,14,2)" fg:x="276" fg:w="2"/><text x="22.4187%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="22.2490%" y="629" width="0.0803%" height="15" fill="rgb(210,141,35)" fg:x="277" fg:w="1"/><text x="22.4990%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="22.2490%" y="613" width="0.0803%" height="15" fill="rgb(251,14,44)" fg:x="277" fg:w="1"/><text x="22.4990%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="22.2490%" y="597" width="0.0803%" height="15" fill="rgb(247,48,18)" fg:x="277" fg:w="1"/><text x="22.4990%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="22.2490%" y="581" width="0.0803%" height="15" fill="rgb(225,0,40)" fg:x="277" fg:w="1"/><text x="22.4990%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="22.2490%" y="565" width="0.0803%" height="15" fill="rgb(221,31,33)" fg:x="277" fg:w="1"/><text x="22.4990%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="22.2490%" y="549" width="0.0803%" height="15" fill="rgb(237,42,40)" fg:x="277" fg:w="1"/><text x="22.4990%" y="559.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (81 samples, 6.51%)</title><rect x="15.9839%" y="693" width="6.5060%" height="15" fill="rgb(233,51,29)" fg:x="199" fg:w="81"/><text x="16.2339%" y="703.50">plugins_c..</text></g><g><title>plugins_core::tools::set_wearing (2 samples, 0.16%)</title><rect x="22.3293%" y="677" width="0.1606%" height="15" fill="rgb(226,58,20)" fg:x="278" fg:w="2"/><text x="22.5793%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="22.3293%" y="661" width="0.1606%" height="15" fill="rgb(208,98,7)" fg:x="278" fg:w="2"/><text x="22.5793%" y="671.50"></text></g><g><title>plugins_core::fashion::model::_::&lt;impl serde::ser::Serialize for plugins_core::fashion::model::Wearing&gt;::serialize (1 samples, 0.08%)</title><rect x="22.4096%" y="645" width="0.0803%" height="15" fill="rgb(228,143,44)" fg:x="279" fg:w="1"/><text x="22.6596%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="22.4096%" y="629" width="0.0803%" height="15" fill="rgb(246,55,38)" fg:x="279" fg:w="1"/><text x="22.6596%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.4096%" y="613" width="0.0803%" height="15" fill="rgb(247,87,16)" fg:x="279" fg:w="1"/><text x="22.6596%" y="623.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="22.4900%" y="693" width="0.0803%" height="15" fill="rgb(234,129,42)" fg:x="280" fg:w="1"/><text x="22.7400%" y="703.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="22.4900%" y="677" width="0.0803%" height="15" fill="rgb(220,82,16)" fg:x="280" fg:w="1"/><text x="22.7400%" y="687.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="22.4900%" y="661" width="0.0803%" height="15" fill="rgb(211,88,4)" fg:x="280" fg:w="1"/><text x="22.7400%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="22.4900%" y="645" width="0.0803%" height="15" fill="rgb(248,151,21)" fg:x="280" fg:w="1"/><text x="22.7400%" y="655.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="22.4900%" y="629" width="0.0803%" height="15" fill="rgb(238,163,6)" fg:x="280" fg:w="1"/><text x="22.7400%" y="639.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="22.5703%" y="661" width="0.0803%" height="15" fill="rgb(209,183,11)" fg:x="281" fg:w="1"/><text x="22.8203%" y="671.50"></text></g><g><title>kernel::model::builder::build_entity (1 samples, 0.08%)</title><rect x="22.5703%" y="645" width="0.0803%" height="15" fill="rgb(219,37,20)" fg:x="281" fg:w="1"/><text x="22.8203%" y="655.50"></text></g><g><title>kernel::model::builder::EntityBuilder::new (1 samples, 0.08%)</title><rect x="22.5703%" y="629" width="0.0803%" height="15" fill="rgb(210,158,4)" fg:x="281" fg:w="1"/><text x="22.8203%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="22.6506%" y="565" width="0.0803%" height="15" fill="rgb(221,167,53)" fg:x="282" fg:w="1"/><text x="22.9006%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="22.6506%" y="549" width="0.0803%" height="15" fill="rgb(237,151,45)" fg:x="282" fg:w="1"/><text x="22.9006%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="22.6506%" y="533" width="0.0803%" height="15" fill="rgb(231,39,3)" fg:x="282" fg:w="1"/><text x="22.9006%" y="543.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="22.6506%" y="613" width="0.1606%" height="15" fill="rgb(212,167,28)" fg:x="282" fg:w="2"/><text x="22.9006%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="22.6506%" y="597" width="0.1606%" height="15" fill="rgb(232,178,8)" fg:x="282" fg:w="2"/><text x="22.9006%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="22.6506%" y="581" width="0.1606%" height="15" fill="rgb(225,151,20)" fg:x="282" fg:w="2"/><text x="22.9006%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="22.7309%" y="565" width="0.0803%" height="15" fill="rgb(238,3,37)" fg:x="283" fg:w="1"/><text x="22.9809%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.7309%" y="549" width="0.0803%" height="15" fill="rgb(251,147,42)" fg:x="283" fg:w="1"/><text x="22.9809%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="22.7309%" y="533" width="0.0803%" height="15" fill="rgb(208,173,10)" fg:x="283" fg:w="1"/><text x="22.9809%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.7309%" y="517" width="0.0803%" height="15" fill="rgb(246,225,4)" fg:x="283" fg:w="1"/><text x="22.9809%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="22.7309%" y="501" width="0.0803%" height="15" fill="rgb(248,102,6)" fg:x="283" fg:w="1"/><text x="22.9809%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.7309%" y="485" width="0.0803%" height="15" fill="rgb(232,6,21)" fg:x="283" fg:w="1"/><text x="22.9809%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.7309%" y="469" width="0.0803%" height="15" fill="rgb(221,179,22)" fg:x="283" fg:w="1"/><text x="22.9809%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="22.6506%" y="645" width="0.2410%" height="15" fill="rgb(252,50,20)" fg:x="282" fg:w="3"/><text x="22.9006%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="22.6506%" y="629" width="0.2410%" height="15" fill="rgb(222,56,38)" fg:x="282" fg:w="3"/><text x="22.9006%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="22.8112%" y="613" width="0.0803%" height="15" fill="rgb(206,193,29)" fg:x="284" fg:w="1"/><text x="23.0612%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="22.8112%" y="597" width="0.0803%" height="15" fill="rgb(239,192,45)" fg:x="284" fg:w="1"/><text x="23.0612%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.8112%" y="581" width="0.0803%" height="15" fill="rgb(254,18,36)" fg:x="284" fg:w="1"/><text x="23.0612%" y="591.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.32%)</title><rect x="22.6506%" y="661" width="0.3213%" height="15" fill="rgb(221,127,11)" fg:x="282" fg:w="4"/><text x="22.9006%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="22.8916%" y="645" width="0.0803%" height="15" fill="rgb(234,146,35)" fg:x="285" fg:w="1"/><text x="23.1416%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="22.8916%" y="629" width="0.0803%" height="15" fill="rgb(254,201,37)" fg:x="285" fg:w="1"/><text x="23.1416%" y="639.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (6 samples, 0.48%)</title><rect x="22.5703%" y="693" width="0.4819%" height="15" fill="rgb(211,202,23)" fg:x="281" fg:w="6"/><text x="22.8203%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (6 samples, 0.48%)</title><rect x="22.5703%" y="677" width="0.4819%" height="15" fill="rgb(237,91,2)" fg:x="281" fg:w="6"/><text x="22.8203%" y="687.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (1 samples, 0.08%)</title><rect x="22.9719%" y="661" width="0.0803%" height="15" fill="rgb(226,228,36)" fg:x="286" fg:w="1"/><text x="23.2219%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="22.9719%" y="645" width="0.0803%" height="15" fill="rgb(213,63,50)" fg:x="286" fg:w="1"/><text x="23.2219%" y="655.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="22.9719%" y="629" width="0.0803%" height="15" fill="rgb(235,194,19)" fg:x="286" fg:w="1"/><text x="23.2219%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="22.9719%" y="613" width="0.0803%" height="15" fill="rgb(207,204,18)" fg:x="286" fg:w="1"/><text x="23.2219%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="23.1325%" y="677" width="0.1606%" height="15" fill="rgb(248,8,7)" fg:x="288" fg:w="2"/><text x="23.3825%" y="687.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="23.2129%" y="661" width="0.0803%" height="15" fill="rgb(223,145,47)" fg:x="289" fg:w="1"/><text x="23.4629%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.2129%" y="645" width="0.0803%" height="15" fill="rgb(228,84,11)" fg:x="289" fg:w="1"/><text x="23.4629%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="23.2129%" y="629" width="0.0803%" height="15" fill="rgb(218,76,45)" fg:x="289" fg:w="1"/><text x="23.4629%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="23.2932%" y="677" width="0.0803%" height="15" fill="rgb(223,80,15)" fg:x="290" fg:w="1"/><text x="23.5432%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.2932%" y="661" width="0.0803%" height="15" fill="rgb(219,218,33)" fg:x="290" fg:w="1"/><text x="23.5432%" y="671.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 0.08%)</title><rect x="23.3735%" y="661" width="0.0803%" height="15" fill="rgb(208,51,11)" fg:x="291" fg:w="1"/><text x="23.6235%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.3735%" y="645" width="0.0803%" height="15" fill="rgb(229,165,39)" fg:x="291" fg:w="1"/><text x="23.6235%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="23.4538%" y="645" width="0.0803%" height="15" fill="rgb(241,100,24)" fg:x="292" fg:w="1"/><text x="23.7038%" y="655.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="23.4538%" y="629" width="0.0803%" height="15" fill="rgb(228,14,23)" fg:x="292" fg:w="1"/><text x="23.7038%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="23.4538%" y="613" width="0.0803%" height="15" fill="rgb(247,116,52)" fg:x="292" fg:w="1"/><text x="23.7038%" y="623.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="23.4538%" y="597" width="0.0803%" height="15" fill="rgb(216,149,33)" fg:x="292" fg:w="1"/><text x="23.7038%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="23.4538%" y="581" width="0.0803%" height="15" fill="rgb(238,142,29)" fg:x="292" fg:w="1"/><text x="23.7038%" y="591.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="23.4538%" y="565" width="0.0803%" height="15" fill="rgb(224,83,40)" fg:x="292" fg:w="1"/><text x="23.7038%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="23.4538%" y="549" width="0.0803%" height="15" fill="rgb(234,165,11)" fg:x="292" fg:w="1"/><text x="23.7038%" y="559.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="23.4538%" y="533" width="0.0803%" height="15" fill="rgb(215,96,23)" fg:x="292" fg:w="1"/><text x="23.7038%" y="543.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.08%)</title><rect x="23.4538%" y="517" width="0.0803%" height="15" fill="rgb(233,179,26)" fg:x="292" fg:w="1"/><text x="23.7038%" y="527.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (1 samples, 0.08%)</title><rect x="23.4538%" y="501" width="0.0803%" height="15" fill="rgb(225,129,33)" fg:x="292" fg:w="1"/><text x="23.7038%" y="511.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="23.4538%" y="661" width="0.1606%" height="15" fill="rgb(237,49,13)" fg:x="292" fg:w="2"/><text x="23.7038%" y="671.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="23.5341%" y="645" width="0.0803%" height="15" fill="rgb(211,3,31)" fg:x="293" fg:w="1"/><text x="23.7841%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="23.5341%" y="629" width="0.0803%" height="15" fill="rgb(216,152,19)" fg:x="293" fg:w="1"/><text x="23.7841%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="23.5341%" y="613" width="0.0803%" height="15" fill="rgb(251,121,35)" fg:x="293" fg:w="1"/><text x="23.7841%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="23.5341%" y="597" width="0.0803%" height="15" fill="rgb(210,217,47)" fg:x="293" fg:w="1"/><text x="23.7841%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="23.5341%" y="581" width="0.0803%" height="15" fill="rgb(244,116,22)" fg:x="293" fg:w="1"/><text x="23.7841%" y="591.50"></text></g><g><title>plugins_core::build::Build::new_world (5 samples, 0.40%)</title><rect x="23.3735%" y="677" width="0.4016%" height="15" fill="rgb(228,17,21)" fg:x="291" fg:w="5"/><text x="23.6235%" y="687.50"></text></g><g><title>kernel::model::builder::build_entity (2 samples, 0.16%)</title><rect x="23.6145%" y="661" width="0.1606%" height="15" fill="rgb(240,149,34)" fg:x="294" fg:w="2"/><text x="23.8645%" y="671.50"></text></g><g><title>kernel::model::builder::EntityBuilder::new (1 samples, 0.08%)</title><rect x="23.6948%" y="645" width="0.0803%" height="15" fill="rgb(208,125,47)" fg:x="295" fg:w="1"/><text x="23.9448%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="23.8554%" y="645" width="0.1606%" height="15" fill="rgb(249,186,39)" fg:x="297" fg:w="2"/><text x="24.1054%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="23.8554%" y="629" width="0.1606%" height="15" fill="rgb(240,220,33)" fg:x="297" fg:w="2"/><text x="24.1054%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="23.8554%" y="613" width="0.1606%" height="15" fill="rgb(243,110,23)" fg:x="297" fg:w="2"/><text x="24.1054%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="23.8554%" y="597" width="0.1606%" height="15" fill="rgb(219,163,46)" fg:x="297" fg:w="2"/><text x="24.1054%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="23.8554%" y="581" width="0.1606%" height="15" fill="rgb(216,126,30)" fg:x="297" fg:w="2"/><text x="24.1054%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="23.8554%" y="565" width="0.1606%" height="15" fill="rgb(208,139,11)" fg:x="297" fg:w="2"/><text x="24.1054%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="23.8554%" y="549" width="0.1606%" height="15" fill="rgb(213,118,36)" fg:x="297" fg:w="2"/><text x="24.1054%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="23.8554%" y="533" width="0.1606%" height="15" fill="rgb(226,43,17)" fg:x="297" fg:w="2"/><text x="24.1054%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="23.8554%" y="517" width="0.1606%" height="15" fill="rgb(254,217,4)" fg:x="297" fg:w="2"/><text x="24.1054%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="23.8554%" y="501" width="0.1606%" height="15" fill="rgb(210,134,47)" fg:x="297" fg:w="2"/><text x="24.1054%" y="511.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="23.8554%" y="485" width="0.1606%" height="15" fill="rgb(237,24,49)" fg:x="297" fg:w="2"/><text x="24.1054%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.9357%" y="469" width="0.0803%" height="15" fill="rgb(251,39,46)" fg:x="298" fg:w="1"/><text x="24.1857%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="24.0161%" y="645" width="0.0803%" height="15" fill="rgb(251,220,3)" fg:x="299" fg:w="1"/><text x="24.2661%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="24.0161%" y="629" width="0.0803%" height="15" fill="rgb(228,105,12)" fg:x="299" fg:w="1"/><text x="24.2661%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="24.0161%" y="613" width="0.0803%" height="15" fill="rgb(215,196,1)" fg:x="299" fg:w="1"/><text x="24.2661%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="24.0161%" y="597" width="0.0803%" height="15" fill="rgb(214,33,39)" fg:x="299" fg:w="1"/><text x="24.2661%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="24.0161%" y="581" width="0.0803%" height="15" fill="rgb(220,19,52)" fg:x="299" fg:w="1"/><text x="24.2661%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="24.0161%" y="565" width="0.0803%" height="15" fill="rgb(221,78,38)" fg:x="299" fg:w="1"/><text x="24.2661%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="24.0161%" y="549" width="0.0803%" height="15" fill="rgb(253,30,16)" fg:x="299" fg:w="1"/><text x="24.2661%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.0964%" y="549" width="0.0803%" height="15" fill="rgb(242,65,0)" fg:x="300" fg:w="1"/><text x="24.3464%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="24.1767%" y="533" width="0.0803%" height="15" fill="rgb(235,201,12)" fg:x="301" fg:w="1"/><text x="24.4267%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.1767%" y="517" width="0.0803%" height="15" fill="rgb(233,161,9)" fg:x="301" fg:w="1"/><text x="24.4267%" y="527.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="24.0964%" y="629" width="0.2410%" height="15" fill="rgb(241,207,41)" fg:x="300" fg:w="3"/><text x="24.3464%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.24%)</title><rect x="24.0964%" y="613" width="0.2410%" height="15" fill="rgb(212,69,46)" fg:x="300" fg:w="3"/><text x="24.3464%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (3 samples, 0.24%)</title><rect x="24.0964%" y="597" width="0.2410%" height="15" fill="rgb(239,69,45)" fg:x="300" fg:w="3"/><text x="24.3464%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="24.0964%" y="581" width="0.2410%" height="15" fill="rgb(242,117,48)" fg:x="300" fg:w="3"/><text x="24.3464%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="24.0964%" y="565" width="0.2410%" height="15" fill="rgb(228,41,36)" fg:x="300" fg:w="3"/><text x="24.3464%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="24.1767%" y="549" width="0.1606%" height="15" fill="rgb(212,3,32)" fg:x="301" fg:w="2"/><text x="24.4267%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="24.2570%" y="533" width="0.0803%" height="15" fill="rgb(233,41,49)" fg:x="302" fg:w="1"/><text x="24.5070%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.2570%" y="517" width="0.0803%" height="15" fill="rgb(252,170,49)" fg:x="302" fg:w="1"/><text x="24.5070%" y="527.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="24.3373%" y="629" width="0.0803%" height="15" fill="rgb(229,53,26)" fg:x="303" fg:w="1"/><text x="24.5873%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.3373%" y="613" width="0.0803%" height="15" fill="rgb(217,157,12)" fg:x="303" fg:w="1"/><text x="24.5873%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.4177%" y="517" width="0.0803%" height="15" fill="rgb(227,17,9)" fg:x="304" fg:w="1"/><text x="24.6677%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (9 samples, 0.72%)</title><rect x="23.8554%" y="661" width="0.7229%" height="15" fill="rgb(218,84,12)" fg:x="297" fg:w="9"/><text x="24.1054%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (6 samples, 0.48%)</title><rect x="24.0964%" y="645" width="0.4819%" height="15" fill="rgb(212,79,24)" fg:x="300" fg:w="6"/><text x="24.3464%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="24.4177%" y="629" width="0.1606%" height="15" fill="rgb(217,222,37)" fg:x="304" fg:w="2"/><text x="24.6677%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="24.4177%" y="613" width="0.1606%" height="15" fill="rgb(246,208,8)" fg:x="304" fg:w="2"/><text x="24.6677%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="24.4177%" y="597" width="0.1606%" height="15" fill="rgb(244,133,10)" fg:x="304" fg:w="2"/><text x="24.6677%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="24.4177%" y="581" width="0.1606%" height="15" fill="rgb(209,219,41)" fg:x="304" fg:w="2"/><text x="24.6677%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="24.4177%" y="565" width="0.1606%" height="15" fill="rgb(253,175,45)" fg:x="304" fg:w="2"/><text x="24.6677%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="24.4177%" y="549" width="0.1606%" height="15" fill="rgb(235,100,37)" fg:x="304" fg:w="2"/><text x="24.6677%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="24.4177%" y="533" width="0.1606%" height="15" fill="rgb(225,87,19)" fg:x="304" fg:w="2"/><text x="24.6677%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="24.4980%" y="517" width="0.0803%" height="15" fill="rgb(217,152,17)" fg:x="305" fg:w="1"/><text x="24.7480%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="24.4980%" y="501" width="0.0803%" height="15" fill="rgb(235,72,13)" fg:x="305" fg:w="1"/><text x="24.7480%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="24.4980%" y="485" width="0.0803%" height="15" fill="rgb(233,140,18)" fg:x="305" fg:w="1"/><text x="24.7480%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="24.5783%" y="629" width="0.0803%" height="15" fill="rgb(207,212,28)" fg:x="306" fg:w="1"/><text x="24.8283%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="24.5783%" y="613" width="0.0803%" height="15" fill="rgb(220,130,25)" fg:x="306" fg:w="1"/><text x="24.8283%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="24.5783%" y="597" width="0.0803%" height="15" fill="rgb(205,55,34)" fg:x="306" fg:w="1"/><text x="24.8283%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="24.5783%" y="581" width="0.0803%" height="15" fill="rgb(237,54,35)" fg:x="306" fg:w="1"/><text x="24.8283%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="24.5783%" y="565" width="0.0803%" height="15" fill="rgb(208,67,23)" fg:x="306" fg:w="1"/><text x="24.8283%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="24.5783%" y="549" width="0.0803%" height="15" fill="rgb(206,207,50)" fg:x="306" fg:w="1"/><text x="24.8283%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="24.5783%" y="533" width="0.0803%" height="15" fill="rgb(213,211,42)" fg:x="306" fg:w="1"/><text x="24.8283%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="24.5783%" y="517" width="0.0803%" height="15" fill="rgb(252,197,50)" fg:x="306" fg:w="1"/><text x="24.8283%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="24.5783%" y="501" width="0.0803%" height="15" fill="rgb(251,211,41)" fg:x="306" fg:w="1"/><text x="24.8283%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="24.5783%" y="485" width="0.0803%" height="15" fill="rgb(229,211,5)" fg:x="306" fg:w="1"/><text x="24.8283%" y="495.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.08%)</title><rect x="24.5783%" y="469" width="0.0803%" height="15" fill="rgb(239,36,31)" fg:x="306" fg:w="1"/><text x="24.8283%" y="479.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.08%)</title><rect x="24.5783%" y="453" width="0.0803%" height="15" fill="rgb(248,67,31)" fg:x="306" fg:w="1"/><text x="24.8283%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="24.5783%" y="661" width="0.1606%" height="15" fill="rgb(249,55,44)" fg:x="306" fg:w="2"/><text x="24.8283%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="24.5783%" y="645" width="0.1606%" height="15" fill="rgb(216,82,12)" fg:x="306" fg:w="2"/><text x="24.8283%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.6586%" y="629" width="0.0803%" height="15" fill="rgb(242,174,1)" fg:x="307" fg:w="1"/><text x="24.9086%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="24.7390%" y="661" width="0.0803%" height="15" fill="rgb(208,120,29)" fg:x="308" fg:w="1"/><text x="24.9890%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="24.7390%" y="645" width="0.0803%" height="15" fill="rgb(221,105,43)" fg:x="308" fg:w="1"/><text x="24.9890%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="24.7390%" y="629" width="0.0803%" height="15" fill="rgb(234,124,22)" fg:x="308" fg:w="1"/><text x="24.9890%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="24.7390%" y="613" width="0.0803%" height="15" fill="rgb(212,23,30)" fg:x="308" fg:w="1"/><text x="24.9890%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="24.7390%" y="597" width="0.0803%" height="15" fill="rgb(219,122,53)" fg:x="308" fg:w="1"/><text x="24.9890%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="24.7390%" y="581" width="0.0803%" height="15" fill="rgb(248,84,24)" fg:x="308" fg:w="1"/><text x="24.9890%" y="591.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (212 samples, 17.03%)</title><rect x="7.8715%" y="709" width="17.0281%" height="15" fill="rgb(245,115,18)" fg:x="98" fg:w="212"/><text x="8.1215%" y="719.50">&lt;tests::HoldingKeyInVessel..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (23 samples, 1.85%)</title><rect x="23.0522%" y="693" width="1.8474%" height="15" fill="rgb(227,176,51)" fg:x="287" fg:w="23"/><text x="23.3022%" y="703.50">p..</text></g><g><title>plugins_core::build::Build::save (14 samples, 1.12%)</title><rect x="23.7751%" y="677" width="1.1245%" height="15" fill="rgb(229,63,42)" fg:x="296" fg:w="14"/><text x="24.0251%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.8193%" y="661" width="0.0803%" height="15" fill="rgb(247,202,24)" fg:x="309" fg:w="1"/><text x="25.0693%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="24.8996%" y="709" width="0.0803%" height="15" fill="rgb(244,173,20)" fg:x="310" fg:w="1"/><text x="25.1496%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.8996%" y="693" width="0.0803%" height="15" fill="rgb(242,81,47)" fg:x="310" fg:w="1"/><text x="25.1496%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="24.9799%" y="709" width="0.0803%" height="15" fill="rgb(231,185,54)" fg:x="311" fg:w="1"/><text x="25.2299%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="24.9799%" y="693" width="0.0803%" height="15" fill="rgb(243,55,32)" fg:x="311" fg:w="1"/><text x="25.2299%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="24.9799%" y="677" width="0.0803%" height="15" fill="rgb(208,167,19)" fg:x="311" fg:w="1"/><text x="25.2299%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="24.9799%" y="661" width="0.0803%" height="15" fill="rgb(231,72,35)" fg:x="311" fg:w="1"/><text x="25.2299%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.9799%" y="645" width="0.0803%" height="15" fill="rgb(250,173,51)" fg:x="311" fg:w="1"/><text x="25.2299%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (2 samples, 0.16%)</title><rect x="25.0602%" y="709" width="0.1606%" height="15" fill="rgb(209,5,22)" fg:x="312" fg:w="2"/><text x="25.3102%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="25.0602%" y="693" width="0.1606%" height="15" fill="rgb(250,174,19)" fg:x="312" fg:w="2"/><text x="25.3102%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="25.0602%" y="677" width="0.1606%" height="15" fill="rgb(217,3,49)" fg:x="312" fg:w="2"/><text x="25.3102%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="25.1406%" y="661" width="0.0803%" height="15" fill="rgb(218,225,5)" fg:x="313" fg:w="1"/><text x="25.3906%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="25.1406%" y="645" width="0.0803%" height="15" fill="rgb(236,89,11)" fg:x="313" fg:w="1"/><text x="25.3906%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="25.1406%" y="629" width="0.0803%" height="15" fill="rgb(206,33,28)" fg:x="313" fg:w="1"/><text x="25.3906%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="25.1406%" y="613" width="0.0803%" height="15" fill="rgb(241,56,42)" fg:x="313" fg:w="1"/><text x="25.3906%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="25.1406%" y="597" width="0.0803%" height="15" fill="rgb(222,44,11)" fg:x="313" fg:w="1"/><text x="25.3906%" y="607.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="25.3815%" y="693" width="0.0803%" height="15" fill="rgb(234,111,20)" fg:x="316" fg:w="1"/><text x="25.6315%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="25.3815%" y="677" width="0.0803%" height="15" fill="rgb(237,77,6)" fg:x="316" fg:w="1"/><text x="25.6315%" y="687.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="25.3815%" y="661" width="0.0803%" height="15" fill="rgb(235,111,23)" fg:x="316" fg:w="1"/><text x="25.6315%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="25.3815%" y="645" width="0.0803%" height="15" fill="rgb(251,135,29)" fg:x="316" fg:w="1"/><text x="25.6315%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::ops::arith::AddAssign&gt;::add_assign (1 samples, 0.08%)</title><rect x="25.3815%" y="629" width="0.0803%" height="15" fill="rgb(217,57,1)" fg:x="316" fg:w="1"/><text x="25.6315%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="25.4618%" y="661" width="0.0803%" height="15" fill="rgb(249,119,31)" fg:x="317" fg:w="1"/><text x="25.7118%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="25.4618%" y="645" width="0.0803%" height="15" fill="rgb(233,164,33)" fg:x="317" fg:w="1"/><text x="25.7118%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="25.4618%" y="629" width="0.0803%" height="15" fill="rgb(250,217,43)" fg:x="317" fg:w="1"/><text x="25.7118%" y="639.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="25.4618%" y="613" width="0.0803%" height="15" fill="rgb(232,154,50)" fg:x="317" fg:w="1"/><text x="25.7118%" y="623.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="25.5422%" y="661" width="0.0803%" height="15" fill="rgb(227,190,8)" fg:x="318" fg:w="1"/><text x="25.7922%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="25.5422%" y="645" width="0.0803%" height="15" fill="rgb(209,217,32)" fg:x="318" fg:w="1"/><text x="25.7922%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="25.5422%" y="629" width="0.0803%" height="15" fill="rgb(243,203,50)" fg:x="318" fg:w="1"/><text x="25.7922%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.5422%" y="613" width="0.0803%" height="15" fill="rgb(232,152,27)" fg:x="318" fg:w="1"/><text x="25.7922%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="25.7831%" y="565" width="0.0803%" height="15" fill="rgb(240,34,29)" fg:x="321" fg:w="1"/><text x="26.0331%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="25.7831%" y="549" width="0.0803%" height="15" fill="rgb(215,185,52)" fg:x="321" fg:w="1"/><text x="26.0331%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="25.7831%" y="581" width="0.1606%" height="15" fill="rgb(240,89,49)" fg:x="321" fg:w="2"/><text x="26.0331%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="25.8635%" y="565" width="0.0803%" height="15" fill="rgb(225,12,52)" fg:x="322" fg:w="1"/><text x="26.1135%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="25.8635%" y="549" width="0.0803%" height="15" fill="rgb(239,128,45)" fg:x="322" fg:w="1"/><text x="26.1135%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.8635%" y="533" width="0.0803%" height="15" fill="rgb(211,78,47)" fg:x="322" fg:w="1"/><text x="26.1135%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="25.6225%" y="597" width="0.4016%" height="15" fill="rgb(232,31,21)" fg:x="319" fg:w="5"/><text x="25.8725%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="25.9438%" y="581" width="0.0803%" height="15" fill="rgb(222,168,14)" fg:x="323" fg:w="1"/><text x="26.1938%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.9438%" y="565" width="0.0803%" height="15" fill="rgb(209,128,24)" fg:x="323" fg:w="1"/><text x="26.1938%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="25.6225%" y="613" width="0.5622%" height="15" fill="rgb(249,35,13)" fg:x="319" fg:w="7"/><text x="25.8725%" y="623.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="26.0241%" y="597" width="0.1606%" height="15" fill="rgb(218,7,2)" fg:x="324" fg:w="2"/><text x="26.2741%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="26.1847%" y="597" width="0.0803%" height="15" fill="rgb(238,107,27)" fg:x="326" fg:w="1"/><text x="26.4347%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="26.3454%" y="533" width="0.0803%" height="15" fill="rgb(217,88,38)" fg:x="328" fg:w="1"/><text x="26.5954%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="26.3454%" y="517" width="0.0803%" height="15" fill="rgb(230,207,0)" fg:x="328" fg:w="1"/><text x="26.5954%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="26.3454%" y="501" width="0.0803%" height="15" fill="rgb(249,64,54)" fg:x="328" fg:w="1"/><text x="26.5954%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="26.2651%" y="597" width="0.2410%" height="15" fill="rgb(231,7,11)" fg:x="327" fg:w="3"/><text x="26.5151%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="26.3454%" y="581" width="0.1606%" height="15" fill="rgb(205,149,21)" fg:x="328" fg:w="2"/><text x="26.5954%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="26.3454%" y="565" width="0.1606%" height="15" fill="rgb(215,126,34)" fg:x="328" fg:w="2"/><text x="26.5954%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="26.3454%" y="549" width="0.1606%" height="15" fill="rgb(241,132,45)" fg:x="328" fg:w="2"/><text x="26.5954%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="26.4257%" y="533" width="0.0803%" height="15" fill="rgb(252,69,32)" fg:x="329" fg:w="1"/><text x="26.6757%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="26.5060%" y="581" width="0.0803%" height="15" fill="rgb(232,204,19)" fg:x="330" fg:w="1"/><text x="26.7560%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="26.5863%" y="581" width="0.0803%" height="15" fill="rgb(249,15,47)" fg:x="331" fg:w="1"/><text x="26.8363%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="26.5863%" y="565" width="0.0803%" height="15" fill="rgb(209,227,23)" fg:x="331" fg:w="1"/><text x="26.8363%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="26.5863%" y="549" width="0.0803%" height="15" fill="rgb(248,92,24)" fg:x="331" fg:w="1"/><text x="26.8363%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="26.5863%" y="533" width="0.0803%" height="15" fill="rgb(247,59,2)" fg:x="331" fg:w="1"/><text x="26.8363%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="26.5863%" y="517" width="0.0803%" height="15" fill="rgb(221,30,5)" fg:x="331" fg:w="1"/><text x="26.8363%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="26.5863%" y="501" width="0.0803%" height="15" fill="rgb(208,108,53)" fg:x="331" fg:w="1"/><text x="26.8363%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="26.5863%" y="485" width="0.0803%" height="15" fill="rgb(211,183,26)" fg:x="331" fg:w="1"/><text x="26.8363%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="26.6667%" y="565" width="0.1606%" height="15" fill="rgb(232,132,4)" fg:x="332" fg:w="2"/><text x="26.9167%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="26.6667%" y="549" width="0.1606%" height="15" fill="rgb(253,128,37)" fg:x="332" fg:w="2"/><text x="26.9167%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="26.6667%" y="533" width="0.1606%" height="15" fill="rgb(221,58,24)" fg:x="332" fg:w="2"/><text x="26.9167%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="26.6667%" y="517" width="0.1606%" height="15" fill="rgb(230,54,45)" fg:x="332" fg:w="2"/><text x="26.9167%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="26.6667%" y="501" width="0.1606%" height="15" fill="rgb(254,21,18)" fg:x="332" fg:w="2"/><text x="26.9167%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="26.6667%" y="485" width="0.1606%" height="15" fill="rgb(221,108,0)" fg:x="332" fg:w="2"/><text x="26.9167%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="26.7470%" y="469" width="0.0803%" height="15" fill="rgb(206,95,1)" fg:x="333" fg:w="1"/><text x="26.9970%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="26.7470%" y="453" width="0.0803%" height="15" fill="rgb(237,52,5)" fg:x="333" fg:w="1"/><text x="26.9970%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="26.7470%" y="437" width="0.0803%" height="15" fill="rgb(218,150,34)" fg:x="333" fg:w="1"/><text x="26.9970%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="26.8273%" y="565" width="0.1606%" height="15" fill="rgb(235,194,28)" fg:x="334" fg:w="2"/><text x="27.0773%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="26.9076%" y="549" width="0.0803%" height="15" fill="rgb(245,92,18)" fg:x="335" fg:w="1"/><text x="27.1576%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="26.9076%" y="533" width="0.0803%" height="15" fill="rgb(253,203,53)" fg:x="335" fg:w="1"/><text x="27.1576%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="26.9076%" y="517" width="0.0803%" height="15" fill="rgb(249,185,47)" fg:x="335" fg:w="1"/><text x="27.1576%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="26.9880%" y="549" width="0.2410%" height="15" fill="rgb(252,194,52)" fg:x="336" fg:w="3"/><text x="27.2380%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="27.0683%" y="533" width="0.1606%" height="15" fill="rgb(210,53,36)" fg:x="337" fg:w="2"/><text x="27.3183%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="27.1486%" y="517" width="0.0803%" height="15" fill="rgb(237,37,25)" fg:x="338" fg:w="1"/><text x="27.3986%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="27.1486%" y="501" width="0.0803%" height="15" fill="rgb(242,116,27)" fg:x="338" fg:w="1"/><text x="27.3986%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="27.2289%" y="533" width="0.3213%" height="15" fill="rgb(213,185,26)" fg:x="339" fg:w="4"/><text x="27.4789%" y="543.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="27.3092%" y="517" width="0.2410%" height="15" fill="rgb(225,204,8)" fg:x="340" fg:w="3"/><text x="27.5592%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="27.3092%" y="501" width="0.2410%" height="15" fill="rgb(254,111,37)" fg:x="340" fg:w="3"/><text x="27.5592%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="27.4699%" y="485" width="0.0803%" height="15" fill="rgb(242,35,9)" fg:x="342" fg:w="1"/><text x="27.7199%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="27.4699%" y="469" width="0.0803%" height="15" fill="rgb(232,138,49)" fg:x="342" fg:w="1"/><text x="27.7199%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="27.4699%" y="453" width="0.0803%" height="15" fill="rgb(247,56,4)" fg:x="342" fg:w="1"/><text x="27.7199%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="27.4699%" y="437" width="0.0803%" height="15" fill="rgb(226,179,17)" fg:x="342" fg:w="1"/><text x="27.7199%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="27.2289%" y="549" width="0.4819%" height="15" fill="rgb(216,163,45)" fg:x="339" fg:w="6"/><text x="27.4789%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="27.5502%" y="533" width="0.1606%" height="15" fill="rgb(211,157,3)" fg:x="343" fg:w="2"/><text x="27.8002%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="27.5502%" y="517" width="0.1606%" height="15" fill="rgb(234,44,20)" fg:x="343" fg:w="2"/><text x="27.8002%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (16 samples, 1.29%)</title><rect x="26.6667%" y="581" width="1.2851%" height="15" fill="rgb(254,138,23)" fg:x="332" fg:w="16"/><text x="26.9167%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.96%)</title><rect x="26.9880%" y="565" width="0.9639%" height="15" fill="rgb(206,119,39)" fg:x="336" fg:w="12"/><text x="27.2380%" y="575.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="27.7108%" y="549" width="0.2410%" height="15" fill="rgb(231,105,52)" fg:x="345" fg:w="3"/><text x="27.9608%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="27.7912%" y="533" width="0.1606%" height="15" fill="rgb(250,20,5)" fg:x="346" fg:w="2"/><text x="28.0412%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="27.8715%" y="517" width="0.0803%" height="15" fill="rgb(215,198,30)" fg:x="347" fg:w="1"/><text x="28.1215%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (23 samples, 1.85%)</title><rect x="26.1847%" y="613" width="1.8474%" height="15" fill="rgb(246,142,8)" fg:x="326" fg:w="23"/><text x="26.4347%" y="623.50">&lt;..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (19 samples, 1.53%)</title><rect x="26.5060%" y="597" width="1.5261%" height="15" fill="rgb(243,26,38)" fg:x="330" fg:w="19"/><text x="26.7560%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="27.9518%" y="581" width="0.0803%" height="15" fill="rgb(205,133,28)" fg:x="348" fg:w="1"/><text x="28.2018%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="27.9518%" y="565" width="0.0803%" height="15" fill="rgb(212,34,0)" fg:x="348" fg:w="1"/><text x="28.2018%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="27.9518%" y="549" width="0.0803%" height="15" fill="rgb(251,226,22)" fg:x="348" fg:w="1"/><text x="28.2018%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::compare::Modified&gt; (1 samples, 0.08%)</title><rect x="28.0321%" y="613" width="0.0803%" height="15" fill="rgb(252,119,9)" fg:x="349" fg:w="1"/><text x="28.2821%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.0321%" y="597" width="0.0803%" height="15" fill="rgb(213,150,50)" fg:x="349" fg:w="1"/><text x="28.2821%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.1928%" y="549" width="0.0803%" height="15" fill="rgb(212,24,39)" fg:x="351" fg:w="1"/><text x="28.4428%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="28.2731%" y="533" width="0.0803%" height="15" fill="rgb(213,46,39)" fg:x="352" fg:w="1"/><text x="28.5231%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.2731%" y="517" width="0.0803%" height="15" fill="rgb(239,106,12)" fg:x="352" fg:w="1"/><text x="28.5231%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.4337%" y="517" width="0.0803%" height="15" fill="rgb(249,229,21)" fg:x="354" fg:w="1"/><text x="28.6837%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="28.5141%" y="517" width="0.1606%" height="15" fill="rgb(212,158,3)" fg:x="355" fg:w="2"/><text x="28.7641%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.5944%" y="501" width="0.0803%" height="15" fill="rgb(253,26,48)" fg:x="356" fg:w="1"/><text x="28.8444%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="28.6747%" y="501" width="0.0803%" height="15" fill="rgb(238,178,20)" fg:x="357" fg:w="1"/><text x="28.9247%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="28.6747%" y="485" width="0.0803%" height="15" fill="rgb(208,86,15)" fg:x="357" fg:w="1"/><text x="28.9247%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="28.6747%" y="469" width="0.0803%" height="15" fill="rgb(239,42,53)" fg:x="357" fg:w="1"/><text x="28.9247%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="28.6747%" y="453" width="0.0803%" height="15" fill="rgb(245,226,8)" fg:x="357" fg:w="1"/><text x="28.9247%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.72%)</title><rect x="28.1124%" y="581" width="0.7229%" height="15" fill="rgb(216,176,32)" fg:x="350" fg:w="9"/><text x="28.3624%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (9 samples, 0.72%)</title><rect x="28.1124%" y="565" width="0.7229%" height="15" fill="rgb(231,186,21)" fg:x="350" fg:w="9"/><text x="28.3624%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="28.2731%" y="549" width="0.5622%" height="15" fill="rgb(205,95,49)" fg:x="352" fg:w="7"/><text x="28.5231%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="28.3534%" y="533" width="0.4819%" height="15" fill="rgb(217,145,8)" fg:x="353" fg:w="6"/><text x="28.6034%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="28.6747%" y="517" width="0.1606%" height="15" fill="rgb(239,144,48)" fg:x="357" fg:w="2"/><text x="28.9247%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="28.7550%" y="501" width="0.0803%" height="15" fill="rgb(214,189,23)" fg:x="358" fg:w="1"/><text x="29.0050%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="28.7550%" y="485" width="0.0803%" height="15" fill="rgb(229,157,17)" fg:x="358" fg:w="1"/><text x="29.0050%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="28.8353%" y="581" width="0.0803%" height="15" fill="rgb(230,5,48)" fg:x="359" fg:w="1"/><text x="29.0853%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.8353%" y="565" width="0.0803%" height="15" fill="rgb(224,156,48)" fg:x="359" fg:w="1"/><text x="29.0853%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="28.9157%" y="581" width="0.0803%" height="15" fill="rgb(223,14,29)" fg:x="360" fg:w="1"/><text x="29.1657%" y="591.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPaths as core::convert::Into&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::into (1 samples, 0.08%)</title><rect x="28.9960%" y="581" width="0.0803%" height="15" fill="rgb(229,96,36)" fg:x="361" fg:w="1"/><text x="29.2460%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.0763%" y="581" width="0.0803%" height="15" fill="rgb(231,102,53)" fg:x="362" fg:w="1"/><text x="29.3263%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="29.1566%" y="581" width="0.0803%" height="15" fill="rgb(210,77,38)" fg:x="363" fg:w="1"/><text x="29.4066%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="29.2369%" y="549" width="0.0803%" height="15" fill="rgb(235,131,6)" fg:x="364" fg:w="1"/><text x="29.4869%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="29.2369%" y="565" width="0.1606%" height="15" fill="rgb(252,55,38)" fg:x="364" fg:w="2"/><text x="29.4869%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="29.3173%" y="549" width="0.0803%" height="15" fill="rgb(246,38,14)" fg:x="365" fg:w="1"/><text x="29.5673%" y="559.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (17 samples, 1.37%)</title><rect x="28.1124%" y="597" width="1.3655%" height="15" fill="rgb(242,27,5)" fg:x="350" fg:w="17"/><text x="28.3624%" y="607.50"></text></g><g><title>treediff::diff::diff (3 samples, 0.24%)</title><rect x="29.2369%" y="581" width="0.2410%" height="15" fill="rgb(228,65,35)" fg:x="364" fg:w="3"/><text x="29.4869%" y="591.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="29.3976%" y="565" width="0.0803%" height="15" fill="rgb(245,93,11)" fg:x="366" fg:w="1"/><text x="29.6476%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.3976%" y="549" width="0.0803%" height="15" fill="rgb(213,1,31)" fg:x="366" fg:w="1"/><text x="29.6476%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.5582%" y="565" width="0.0803%" height="15" fill="rgb(237,205,14)" fg:x="368" fg:w="1"/><text x="29.8082%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.6386%" y="565" width="0.0803%" height="15" fill="rgb(232,118,45)" fg:x="369" fg:w="1"/><text x="29.8886%" y="575.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="29.7189%" y="565" width="0.1606%" height="15" fill="rgb(218,5,6)" fg:x="370" fg:w="2"/><text x="29.9689%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="29.7189%" y="549" width="0.1606%" height="15" fill="rgb(251,87,51)" fg:x="370" fg:w="2"/><text x="29.9689%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="29.7992%" y="533" width="0.0803%" height="15" fill="rgb(207,225,20)" fg:x="371" fg:w="1"/><text x="30.0492%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (3 samples, 0.24%)</title><rect x="29.8795%" y="565" width="0.2410%" height="15" fill="rgb(222,78,54)" fg:x="372" fg:w="3"/><text x="30.1295%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="30.0402%" y="549" width="0.0803%" height="15" fill="rgb(232,85,16)" fg:x="374" fg:w="1"/><text x="30.2902%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.0402%" y="533" width="0.0803%" height="15" fill="rgb(244,25,33)" fg:x="374" fg:w="1"/><text x="30.2902%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.0402%" y="517" width="0.0803%" height="15" fill="rgb(233,24,36)" fg:x="374" fg:w="1"/><text x="30.2902%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="30.4418%" y="533" width="0.0803%" height="15" fill="rgb(253,49,54)" fg:x="379" fg:w="1"/><text x="30.6918%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.6827%" y="501" width="0.0803%" height="15" fill="rgb(245,12,22)" fg:x="382" fg:w="1"/><text x="30.9327%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="30.6024%" y="517" width="0.2410%" height="15" fill="rgb(253,141,28)" fg:x="381" fg:w="3"/><text x="30.8524%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="30.7631%" y="501" width="0.0803%" height="15" fill="rgb(225,207,27)" fg:x="383" fg:w="1"/><text x="31.0131%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="30.8434%" y="501" width="0.0803%" height="15" fill="rgb(220,84,2)" fg:x="384" fg:w="1"/><text x="31.0934%" y="511.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="30.8434%" y="485" width="0.0803%" height="15" fill="rgb(224,37,37)" fg:x="384" fg:w="1"/><text x="31.0934%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.0843%" y="437" width="0.0803%" height="15" fill="rgb(220,143,18)" fg:x="387" fg:w="1"/><text x="31.3343%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.0843%" y="421" width="0.0803%" height="15" fill="rgb(210,88,33)" fg:x="387" fg:w="1"/><text x="31.3343%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (5 samples, 0.40%)</title><rect x="30.8434%" y="517" width="0.4016%" height="15" fill="rgb(219,87,51)" fg:x="384" fg:w="5"/><text x="31.0934%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="30.9237%" y="501" width="0.3213%" height="15" fill="rgb(211,7,35)" fg:x="385" fg:w="4"/><text x="31.1737%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="31.0040%" y="485" width="0.2410%" height="15" fill="rgb(232,77,2)" fg:x="386" fg:w="3"/><text x="31.2540%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="31.0843%" y="469" width="0.1606%" height="15" fill="rgb(249,94,25)" fg:x="387" fg:w="2"/><text x="31.3343%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="31.0843%" y="453" width="0.1606%" height="15" fill="rgb(215,112,2)" fg:x="387" fg:w="2"/><text x="31.3343%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="31.1647%" y="437" width="0.0803%" height="15" fill="rgb(226,115,48)" fg:x="388" fg:w="1"/><text x="31.4147%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="31.1647%" y="421" width="0.0803%" height="15" fill="rgb(249,196,10)" fg:x="388" fg:w="1"/><text x="31.4147%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="31.1647%" y="405" width="0.0803%" height="15" fill="rgb(237,109,14)" fg:x="388" fg:w="1"/><text x="31.4147%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="31.4056%" y="485" width="0.1606%" height="15" fill="rgb(217,103,53)" fg:x="391" fg:w="2"/><text x="31.6556%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="31.5663%" y="485" width="0.0803%" height="15" fill="rgb(244,137,9)" fg:x="393" fg:w="1"/><text x="31.8163%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="31.5663%" y="469" width="0.0803%" height="15" fill="rgb(227,201,3)" fg:x="393" fg:w="1"/><text x="31.8163%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="31.6466%" y="469" width="0.4819%" height="15" fill="rgb(243,94,6)" fg:x="394" fg:w="6"/><text x="31.8966%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4 samples, 0.32%)</title><rect x="31.8072%" y="453" width="0.3213%" height="15" fill="rgb(235,118,5)" fg:x="396" fg:w="4"/><text x="32.0572%" y="463.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="31.8876%" y="437" width="0.2410%" height="15" fill="rgb(247,10,30)" fg:x="397" fg:w="3"/><text x="32.1376%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (10 samples, 0.80%)</title><rect x="31.4056%" y="501" width="0.8032%" height="15" fill="rgb(205,26,28)" fg:x="391" fg:w="10"/><text x="31.6556%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7 samples, 0.56%)</title><rect x="31.6466%" y="485" width="0.5622%" height="15" fill="rgb(206,99,35)" fg:x="394" fg:w="7"/><text x="31.8966%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.1285%" y="469" width="0.0803%" height="15" fill="rgb(238,130,40)" fg:x="400" fg:w="1"/><text x="32.3785%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (25 samples, 2.01%)</title><rect x="30.3614%" y="549" width="2.0080%" height="15" fill="rgb(224,126,31)" fg:x="378" fg:w="25"/><text x="30.6114%" y="559.50">&lt;..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (23 samples, 1.85%)</title><rect x="30.5221%" y="533" width="1.8474%" height="15" fill="rgb(254,105,17)" fg:x="380" fg:w="23"/><text x="30.7721%" y="543.50">&lt;..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (14 samples, 1.12%)</title><rect x="31.2450%" y="517" width="1.1245%" height="15" fill="rgb(216,87,36)" fg:x="389" fg:w="14"/><text x="31.4950%" y="527.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="32.2088%" y="501" width="0.1606%" height="15" fill="rgb(240,21,12)" fg:x="401" fg:w="2"/><text x="32.4588%" y="511.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (38 samples, 3.05%)</title><rect x="29.4779%" y="597" width="3.0522%" height="15" fill="rgb(245,192,34)" fg:x="367" fg:w="38"/><text x="29.7279%" y="607.50">ker..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (38 samples, 3.05%)</title><rect x="29.4779%" y="581" width="3.0522%" height="15" fill="rgb(226,100,49)" fg:x="367" fg:w="38"/><text x="29.7279%" y="591.50">&lt;se..</text></g><g><title>serde::ser::Serializer::collect_map (30 samples, 2.41%)</title><rect x="30.1205%" y="565" width="2.4096%" height="15" fill="rgb(245,188,27)" fg:x="375" fg:w="30"/><text x="30.3705%" y="575.50">se..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="32.3695%" y="549" width="0.1606%" height="15" fill="rgb(212,170,8)" fg:x="403" fg:w="2"/><text x="32.6195%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="32.7711%" y="405" width="0.0803%" height="15" fill="rgb(217,113,29)" fg:x="408" fg:w="1"/><text x="33.0211%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="32.7711%" y="389" width="0.0803%" height="15" fill="rgb(237,30,3)" fg:x="408" fg:w="1"/><text x="33.0211%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="32.7711%" y="373" width="0.0803%" height="15" fill="rgb(227,19,28)" fg:x="408" fg:w="1"/><text x="33.0211%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.7711%" y="357" width="0.0803%" height="15" fill="rgb(239,172,45)" fg:x="408" fg:w="1"/><text x="33.0211%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.7711%" y="341" width="0.0803%" height="15" fill="rgb(254,55,39)" fg:x="408" fg:w="1"/><text x="33.0211%" y="351.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="32.7711%" y="325" width="0.0803%" height="15" fill="rgb(249,208,12)" fg:x="408" fg:w="1"/><text x="33.0211%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="32.7711%" y="421" width="0.1606%" height="15" fill="rgb(240,52,13)" fg:x="408" fg:w="2"/><text x="33.0211%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.8514%" y="405" width="0.0803%" height="15" fill="rgb(252,149,13)" fg:x="409" fg:w="1"/><text x="33.1014%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="32.7711%" y="453" width="0.2410%" height="15" fill="rgb(232,81,48)" fg:x="408" fg:w="3"/><text x="33.0211%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="32.7711%" y="437" width="0.2410%" height="15" fill="rgb(222,144,2)" fg:x="408" fg:w="3"/><text x="33.0211%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="32.9317%" y="421" width="0.0803%" height="15" fill="rgb(216,81,32)" fg:x="410" fg:w="1"/><text x="33.1817%" y="431.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="32.9317%" y="405" width="0.0803%" height="15" fill="rgb(244,78,51)" fg:x="410" fg:w="1"/><text x="33.1817%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="33.0120%" y="437" width="0.1606%" height="15" fill="rgb(217,66,21)" fg:x="411" fg:w="2"/><text x="33.2620%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="33.0924%" y="421" width="0.0803%" height="15" fill="rgb(247,101,42)" fg:x="412" fg:w="1"/><text x="33.3424%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="33.0924%" y="405" width="0.0803%" height="15" fill="rgb(227,81,39)" fg:x="412" fg:w="1"/><text x="33.3424%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="33.0924%" y="389" width="0.0803%" height="15" fill="rgb(220,223,44)" fg:x="412" fg:w="1"/><text x="33.3424%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.0924%" y="373" width="0.0803%" height="15" fill="rgb(205,218,2)" fg:x="412" fg:w="1"/><text x="33.3424%" y="383.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="33.1727%" y="421" width="0.0803%" height="15" fill="rgb(212,207,28)" fg:x="413" fg:w="1"/><text x="33.4227%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="33.1727%" y="437" width="0.1606%" height="15" fill="rgb(224,12,41)" fg:x="413" fg:w="2"/><text x="33.4227%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.2530%" y="421" width="0.0803%" height="15" fill="rgb(216,118,12)" fg:x="414" fg:w="1"/><text x="33.5030%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.80%)</title><rect x="32.6908%" y="469" width="0.8032%" height="15" fill="rgb(252,97,46)" fg:x="407" fg:w="10"/><text x="32.9408%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="33.0120%" y="453" width="0.4819%" height="15" fill="rgb(244,206,19)" fg:x="411" fg:w="6"/><text x="33.2620%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="33.3333%" y="437" width="0.1606%" height="15" fill="rgb(231,84,31)" fg:x="415" fg:w="2"/><text x="33.5833%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="33.3333%" y="421" width="0.1606%" height="15" fill="rgb(244,133,0)" fg:x="415" fg:w="2"/><text x="33.5833%" y="431.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="33.3333%" y="405" width="0.1606%" height="15" fill="rgb(223,15,50)" fg:x="415" fg:w="2"/><text x="33.5833%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (12 samples, 0.96%)</title><rect x="32.6908%" y="485" width="0.9639%" height="15" fill="rgb(250,118,49)" fg:x="407" fg:w="12"/><text x="32.9408%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="33.4940%" y="469" width="0.1606%" height="15" fill="rgb(248,25,38)" fg:x="417" fg:w="2"/><text x="33.7440%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="33.5743%" y="453" width="0.0803%" height="15" fill="rgb(215,70,14)" fg:x="418" fg:w="1"/><text x="33.8243%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (13 samples, 1.04%)</title><rect x="32.6908%" y="501" width="1.0442%" height="15" fill="rgb(215,28,15)" fg:x="407" fg:w="13"/><text x="32.9408%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.6546%" y="485" width="0.0803%" height="15" fill="rgb(243,6,28)" fg:x="419" fg:w="1"/><text x="33.9046%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (15 samples, 1.20%)</title><rect x="32.6104%" y="533" width="1.2048%" height="15" fill="rgb(222,130,1)" fg:x="406" fg:w="15"/><text x="32.8604%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (14 samples, 1.12%)</title><rect x="32.6908%" y="517" width="1.1245%" height="15" fill="rgb(236,166,44)" fg:x="407" fg:w="14"/><text x="32.9408%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="33.7349%" y="501" width="0.0803%" height="15" fill="rgb(221,108,14)" fg:x="420" fg:w="1"/><text x="33.9849%" y="511.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="33.7349%" y="485" width="0.0803%" height="15" fill="rgb(252,3,45)" fg:x="420" fg:w="1"/><text x="33.9849%" y="495.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="33.8153%" y="517" width="0.0803%" height="15" fill="rgb(237,68,30)" fg:x="421" fg:w="1"/><text x="34.0653%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.24%)</title><rect x="33.8153%" y="533" width="0.2410%" height="15" fill="rgb(211,79,22)" fg:x="421" fg:w="3"/><text x="34.0653%" y="543.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="33.8956%" y="517" width="0.1606%" height="15" fill="rgb(252,185,21)" fg:x="422" fg:w="2"/><text x="34.1456%" y="527.50"></text></g><g><title>engine::session::state::State::close (109 samples, 8.76%)</title><rect x="25.4618%" y="693" width="8.7550%" height="15" fill="rgb(225,189,26)" fg:x="317" fg:w="109"/><text x="25.7118%" y="703.50">engine::sess..</text></g><g><title>engine::session::state::State::flush_entities (109 samples, 8.76%)</title><rect x="25.4618%" y="677" width="8.7550%" height="15" fill="rgb(241,30,40)" fg:x="317" fg:w="109"/><text x="25.7118%" y="687.50">engine::sess..</text></g><g><title>core::iter::adapters::try_process (107 samples, 8.59%)</title><rect x="25.6225%" y="661" width="8.5944%" height="15" fill="rgb(235,215,44)" fg:x="319" fg:w="107"/><text x="25.8725%" y="671.50">core::iter::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (107 samples, 8.59%)</title><rect x="25.6225%" y="645" width="8.5944%" height="15" fill="rgb(205,8,29)" fg:x="319" fg:w="107"/><text x="25.8725%" y="655.50">&lt;alloc::vec:..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (107 samples, 8.59%)</title><rect x="25.6225%" y="629" width="8.5944%" height="15" fill="rgb(241,137,42)" fg:x="319" fg:w="107"/><text x="25.8725%" y="639.50">engine::sess..</text></g><g><title>kernel::model::any_entity_changes (76 samples, 6.10%)</title><rect x="28.1124%" y="613" width="6.1044%" height="15" fill="rgb(237,155,2)" fg:x="350" fg:w="76"/><text x="28.3624%" y="623.50">kernel::..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (21 samples, 1.69%)</title><rect x="32.5301%" y="597" width="1.6867%" height="15" fill="rgb(245,29,42)" fg:x="405" fg:w="21"/><text x="32.7801%" y="607.50"></text></g><g><title>serde_json::de::from_trait (21 samples, 1.69%)</title><rect x="32.5301%" y="581" width="1.6867%" height="15" fill="rgb(234,101,35)" fg:x="405" fg:w="21"/><text x="32.7801%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (21 samples, 1.69%)</title><rect x="32.5301%" y="565" width="1.6867%" height="15" fill="rgb(228,64,37)" fg:x="405" fg:w="21"/><text x="32.7801%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (21 samples, 1.69%)</title><rect x="32.5301%" y="549" width="1.6867%" height="15" fill="rgb(217,214,36)" fg:x="405" fg:w="21"/><text x="32.7801%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="34.0562%" y="533" width="0.1606%" height="15" fill="rgb(243,70,3)" fg:x="424" fg:w="2"/><text x="34.3062%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="34.1365%" y="517" width="0.0803%" height="15" fill="rgb(253,158,52)" fg:x="425" fg:w="1"/><text x="34.3865%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="34.1365%" y="501" width="0.0803%" height="15" fill="rgb(234,111,54)" fg:x="425" fg:w="1"/><text x="34.3865%" y="511.50"></text></g><g><title>engine::session::Session::close (113 samples, 9.08%)</title><rect x="25.2209%" y="709" width="9.0763%" height="15" fill="rgb(217,70,32)" fg:x="314" fg:w="113"/><text x="25.4709%" y="719.50">engine::sessi..</text></g><g><title>kernel::plugins::SessionPlugins::stop (1 samples, 0.08%)</title><rect x="34.2169%" y="693" width="0.0803%" height="15" fill="rgb(234,18,33)" fg:x="426" fg:w="1"/><text x="34.4669%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="34.3775%" y="645" width="0.1606%" height="15" fill="rgb(234,12,49)" fg:x="428" fg:w="2"/><text x="34.6275%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="34.4578%" y="629" width="0.0803%" height="15" fill="rgb(236,10,21)" fg:x="429" fg:w="1"/><text x="34.7078%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.4578%" y="613" width="0.0803%" height="15" fill="rgb(248,182,45)" fg:x="429" fg:w="1"/><text x="34.7078%" y="623.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (4 samples, 0.32%)</title><rect x="34.2972%" y="677" width="0.3213%" height="15" fill="rgb(217,95,36)" fg:x="427" fg:w="4"/><text x="34.5472%" y="687.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="34.2972%" y="661" width="0.3213%" height="15" fill="rgb(212,110,31)" fg:x="427" fg:w="4"/><text x="34.5472%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="34.5382%" y="645" width="0.0803%" height="15" fill="rgb(206,32,53)" fg:x="430" fg:w="1"/><text x="34.7882%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="34.5382%" y="629" width="0.0803%" height="15" fill="rgb(246,141,37)" fg:x="430" fg:w="1"/><text x="34.7882%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.24%)</title><rect x="34.6185%" y="661" width="0.2410%" height="15" fill="rgb(219,16,7)" fg:x="431" fg:w="3"/><text x="34.8685%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.24%)</title><rect x="34.6185%" y="645" width="0.2410%" height="15" fill="rgb(230,205,45)" fg:x="431" fg:w="3"/><text x="34.8685%" y="655.50"></text></g><g><title>core::fmt::write (3 samples, 0.24%)</title><rect x="34.6185%" y="629" width="0.2410%" height="15" fill="rgb(231,43,49)" fg:x="431" fg:w="3"/><text x="34.8685%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (3 samples, 0.24%)</title><rect x="34.6185%" y="613" width="0.2410%" height="15" fill="rgb(212,106,34)" fg:x="431" fg:w="3"/><text x="34.8685%" y="623.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (3 samples, 0.24%)</title><rect x="34.6185%" y="597" width="0.2410%" height="15" fill="rgb(206,83,17)" fg:x="431" fg:w="3"/><text x="34.8685%" y="607.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (2 samples, 0.16%)</title><rect x="34.6988%" y="581" width="0.1606%" height="15" fill="rgb(244,154,49)" fg:x="432" fg:w="2"/><text x="34.9488%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (2 samples, 0.16%)</title><rect x="34.6988%" y="565" width="0.1606%" height="15" fill="rgb(244,149,49)" fg:x="432" fg:w="2"/><text x="34.9488%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (2 samples, 0.16%)</title><rect x="34.6988%" y="549" width="0.1606%" height="15" fill="rgb(227,134,18)" fg:x="432" fg:w="2"/><text x="34.9488%" y="559.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (2 samples, 0.16%)</title><rect x="34.6988%" y="533" width="0.1606%" height="15" fill="rgb(237,116,36)" fg:x="432" fg:w="2"/><text x="34.9488%" y="543.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="34.7791%" y="517" width="0.0803%" height="15" fill="rgb(205,129,40)" fg:x="433" fg:w="1"/><text x="35.0291%" y="527.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="34.7791%" y="501" width="0.0803%" height="15" fill="rgb(236,178,4)" fg:x="433" fg:w="1"/><text x="35.0291%" y="511.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (1 samples, 0.08%)</title><rect x="34.7791%" y="485" width="0.0803%" height="15" fill="rgb(251,76,53)" fg:x="433" fg:w="1"/><text x="35.0291%" y="495.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="34.7791%" y="469" width="0.0803%" height="15" fill="rgb(242,92,40)" fg:x="433" fg:w="1"/><text x="35.0291%" y="479.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (1 samples, 0.08%)</title><rect x="34.7791%" y="453" width="0.0803%" height="15" fill="rgb(209,45,30)" fg:x="433" fg:w="1"/><text x="35.0291%" y="463.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="34.7791%" y="437" width="0.0803%" height="15" fill="rgb(218,157,36)" fg:x="433" fg:w="1"/><text x="35.0291%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="34.7791%" y="421" width="0.0803%" height="15" fill="rgb(222,186,16)" fg:x="433" fg:w="1"/><text x="35.0291%" y="431.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="34.7791%" y="405" width="0.0803%" height="15" fill="rgb(254,72,35)" fg:x="433" fg:w="1"/><text x="35.0291%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="34.7791%" y="389" width="0.0803%" height="15" fill="rgb(224,25,35)" fg:x="433" fg:w="1"/><text x="35.0291%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="34.7791%" y="373" width="0.0803%" height="15" fill="rgb(206,135,52)" fg:x="433" fg:w="1"/><text x="35.0291%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="34.7791%" y="357" width="0.0803%" height="15" fill="rgb(229,174,47)" fg:x="433" fg:w="1"/><text x="35.0291%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.9398%" y="645" width="0.0803%" height="15" fill="rgb(242,184,21)" fg:x="435" fg:w="1"/><text x="35.1898%" y="655.50"></text></g><g><title>chrono::offset::utc::Utc::now (1 samples, 0.08%)</title><rect x="35.0201%" y="645" width="0.0803%" height="15" fill="rgb(213,22,45)" fg:x="436" fg:w="1"/><text x="35.2701%" y="655.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (1 samples, 0.08%)</title><rect x="35.1004%" y="645" width="0.0803%" height="15" fill="rgb(237,81,54)" fg:x="437" fg:w="1"/><text x="35.3504%" y="655.50"></text></g><g><title>tracing_core::callsite::register_dispatch (1 samples, 0.08%)</title><rect x="35.1004%" y="629" width="0.0803%" height="15" fill="rgb(248,177,18)" fg:x="437" fg:w="1"/><text x="35.3504%" y="639.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (1 samples, 0.08%)</title><rect x="35.1004%" y="613" width="0.0803%" height="15" fill="rgb(254,31,16)" fg:x="437" fg:w="1"/><text x="35.3504%" y="623.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (1 samples, 0.08%)</title><rect x="35.1004%" y="597" width="0.0803%" height="15" fill="rgb(235,20,31)" fg:x="437" fg:w="1"/><text x="35.3504%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="35.1807%" y="533" width="0.0803%" height="15" fill="rgb(240,56,43)" fg:x="438" fg:w="1"/><text x="35.4307%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="35.2610%" y="469" width="0.0803%" height="15" fill="rgb(237,197,51)" fg:x="439" fg:w="1"/><text x="35.5110%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="35.2610%" y="453" width="0.0803%" height="15" fill="rgb(241,162,44)" fg:x="439" fg:w="1"/><text x="35.5110%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="35.2610%" y="437" width="0.0803%" height="15" fill="rgb(224,23,20)" fg:x="439" fg:w="1"/><text x="35.5110%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="35.2610%" y="421" width="0.0803%" height="15" fill="rgb(250,109,34)" fg:x="439" fg:w="1"/><text x="35.5110%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="35.2610%" y="405" width="0.0803%" height="15" fill="rgb(214,175,50)" fg:x="439" fg:w="1"/><text x="35.5110%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="35.2610%" y="389" width="0.0803%" height="15" fill="rgb(213,182,5)" fg:x="439" fg:w="1"/><text x="35.5110%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="35.2610%" y="373" width="0.0803%" height="15" fill="rgb(209,199,19)" fg:x="439" fg:w="1"/><text x="35.5110%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="35.2610%" y="357" width="0.0803%" height="15" fill="rgb(236,224,42)" fg:x="439" fg:w="1"/><text x="35.5110%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="35.2610%" y="341" width="0.0803%" height="15" fill="rgb(246,226,29)" fg:x="439" fg:w="1"/><text x="35.5110%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="35.2610%" y="325" width="0.0803%" height="15" fill="rgb(227,223,11)" fg:x="439" fg:w="1"/><text x="35.5110%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="35.2610%" y="309" width="0.0803%" height="15" fill="rgb(219,7,51)" fg:x="439" fg:w="1"/><text x="35.5110%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="35.2610%" y="293" width="0.0803%" height="15" fill="rgb(245,167,10)" fg:x="439" fg:w="1"/><text x="35.5110%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="35.2610%" y="277" width="0.0803%" height="15" fill="rgb(237,224,16)" fg:x="439" fg:w="1"/><text x="35.5110%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="35.2610%" y="261" width="0.0803%" height="15" fill="rgb(226,132,13)" fg:x="439" fg:w="1"/><text x="35.5110%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="35.2610%" y="245" width="0.0803%" height="15" fill="rgb(214,140,3)" fg:x="439" fg:w="1"/><text x="35.5110%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="35.2610%" y="229" width="0.0803%" height="15" fill="rgb(221,177,4)" fg:x="439" fg:w="1"/><text x="35.5110%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="35.2610%" y="213" width="0.0803%" height="15" fill="rgb(238,139,3)" fg:x="439" fg:w="1"/><text x="35.5110%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.2610%" y="197" width="0.0803%" height="15" fill="rgb(216,17,39)" fg:x="439" fg:w="1"/><text x="35.5110%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="35.3414%" y="389" width="0.0803%" height="15" fill="rgb(238,120,9)" fg:x="440" fg:w="1"/><text x="35.5914%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="35.3414%" y="373" width="0.0803%" height="15" fill="rgb(244,92,53)" fg:x="440" fg:w="1"/><text x="35.5914%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="35.3414%" y="357" width="0.0803%" height="15" fill="rgb(224,148,33)" fg:x="440" fg:w="1"/><text x="35.5914%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="35.4217%" y="373" width="0.0803%" height="15" fill="rgb(243,6,36)" fg:x="441" fg:w="1"/><text x="35.6717%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="35.5020%" y="373" width="0.0803%" height="15" fill="rgb(230,102,11)" fg:x="442" fg:w="1"/><text x="35.7520%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="35.5020%" y="357" width="0.0803%" height="15" fill="rgb(234,148,36)" fg:x="442" fg:w="1"/><text x="35.7520%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="35.5020%" y="341" width="0.0803%" height="15" fill="rgb(251,153,25)" fg:x="442" fg:w="1"/><text x="35.7520%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="35.5020%" y="325" width="0.0803%" height="15" fill="rgb(215,129,8)" fg:x="442" fg:w="1"/><text x="35.7520%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.5020%" y="309" width="0.0803%" height="15" fill="rgb(224,128,35)" fg:x="442" fg:w="1"/><text x="35.7520%" y="319.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="35.5823%" y="325" width="0.0803%" height="15" fill="rgb(237,56,52)" fg:x="443" fg:w="1"/><text x="35.8323%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="35.5823%" y="309" width="0.0803%" height="15" fill="rgb(234,213,19)" fg:x="443" fg:w="1"/><text x="35.8323%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="35.5823%" y="293" width="0.0803%" height="15" fill="rgb(252,82,23)" fg:x="443" fg:w="1"/><text x="35.8323%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="35.5823%" y="277" width="0.0803%" height="15" fill="rgb(254,201,21)" fg:x="443" fg:w="1"/><text x="35.8323%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="35.5823%" y="261" width="0.0803%" height="15" fill="rgb(250,186,11)" fg:x="443" fg:w="1"/><text x="35.8323%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="35.5823%" y="245" width="0.0803%" height="15" fill="rgb(211,174,5)" fg:x="443" fg:w="1"/><text x="35.8323%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="35.5823%" y="229" width="0.0803%" height="15" fill="rgb(214,121,10)" fg:x="443" fg:w="1"/><text x="35.8323%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="35.5823%" y="213" width="0.0803%" height="15" fill="rgb(241,66,2)" fg:x="443" fg:w="1"/><text x="35.8323%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="35.5823%" y="197" width="0.0803%" height="15" fill="rgb(220,167,19)" fg:x="443" fg:w="1"/><text x="35.8323%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="35.5823%" y="181" width="0.0803%" height="15" fill="rgb(231,54,50)" fg:x="443" fg:w="1"/><text x="35.8323%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="35.6627%" y="293" width="0.1606%" height="15" fill="rgb(239,217,53)" fg:x="444" fg:w="2"/><text x="35.9127%" y="303.50"></text></g><g><title>kernel::model::entity::Entity::from_value (7 samples, 0.56%)</title><rect x="35.3414%" y="469" width="0.5622%" height="15" fill="rgb(248,8,0)" fg:x="440" fg:w="7"/><text x="35.5914%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (7 samples, 0.56%)</title><rect x="35.3414%" y="453" width="0.5622%" height="15" fill="rgb(229,118,37)" fg:x="440" fg:w="7"/><text x="35.5914%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.56%)</title><rect x="35.3414%" y="437" width="0.5622%" height="15" fill="rgb(253,223,43)" fg:x="440" fg:w="7"/><text x="35.5914%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (7 samples, 0.56%)</title><rect x="35.3414%" y="421" width="0.5622%" height="15" fill="rgb(211,77,36)" fg:x="440" fg:w="7"/><text x="35.5914%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.56%)</title><rect x="35.3414%" y="405" width="0.5622%" height="15" fill="rgb(219,3,53)" fg:x="440" fg:w="7"/><text x="35.5914%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (6 samples, 0.48%)</title><rect x="35.4217%" y="389" width="0.4819%" height="15" fill="rgb(244,45,42)" fg:x="441" fg:w="6"/><text x="35.6717%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="35.5823%" y="373" width="0.3213%" height="15" fill="rgb(225,95,27)" fg:x="443" fg:w="4"/><text x="35.8323%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="35.5823%" y="357" width="0.3213%" height="15" fill="rgb(207,74,8)" fg:x="443" fg:w="4"/><text x="35.8323%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (4 samples, 0.32%)</title><rect x="35.5823%" y="341" width="0.3213%" height="15" fill="rgb(243,63,36)" fg:x="443" fg:w="4"/><text x="35.8323%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="35.6627%" y="325" width="0.2410%" height="15" fill="rgb(211,180,12)" fg:x="444" fg:w="3"/><text x="35.9127%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="35.6627%" y="309" width="0.2410%" height="15" fill="rgb(254,166,49)" fg:x="444" fg:w="3"/><text x="35.9127%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="35.8233%" y="293" width="0.0803%" height="15" fill="rgb(205,19,0)" fg:x="446" fg:w="1"/><text x="36.0733%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="35.8233%" y="277" width="0.0803%" height="15" fill="rgb(224,172,32)" fg:x="446" fg:w="1"/><text x="36.0733%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="35.8233%" y="261" width="0.0803%" height="15" fill="rgb(254,136,30)" fg:x="446" fg:w="1"/><text x="36.0733%" y="271.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="35.9036%" y="469" width="0.0803%" height="15" fill="rgb(246,19,35)" fg:x="447" fg:w="1"/><text x="36.1536%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="35.9036%" y="453" width="0.0803%" height="15" fill="rgb(219,24,36)" fg:x="447" fg:w="1"/><text x="36.1536%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="35.9036%" y="437" width="0.0803%" height="15" fill="rgb(251,55,1)" fg:x="447" fg:w="1"/><text x="36.1536%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="36.0643%" y="293" width="0.0803%" height="15" fill="rgb(218,117,39)" fg:x="449" fg:w="1"/><text x="36.3143%" y="303.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (12 samples, 0.96%)</title><rect x="35.2610%" y="533" width="0.9639%" height="15" fill="rgb(248,169,11)" fg:x="439" fg:w="12"/><text x="35.5110%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (12 samples, 0.96%)</title><rect x="35.2610%" y="517" width="0.9639%" height="15" fill="rgb(244,40,44)" fg:x="439" fg:w="12"/><text x="35.5110%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (12 samples, 0.96%)</title><rect x="35.2610%" y="501" width="0.9639%" height="15" fill="rgb(234,62,37)" fg:x="439" fg:w="12"/><text x="35.5110%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (12 samples, 0.96%)</title><rect x="35.2610%" y="485" width="0.9639%" height="15" fill="rgb(207,117,42)" fg:x="439" fg:w="12"/><text x="35.5110%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="35.9839%" y="469" width="0.2410%" height="15" fill="rgb(213,43,2)" fg:x="448" fg:w="3"/><text x="36.2339%" y="479.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="35.9839%" y="453" width="0.2410%" height="15" fill="rgb(244,202,51)" fg:x="448" fg:w="3"/><text x="36.2339%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="35.9839%" y="437" width="0.2410%" height="15" fill="rgb(253,174,46)" fg:x="448" fg:w="3"/><text x="36.2339%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="35.9839%" y="421" width="0.2410%" height="15" fill="rgb(251,23,1)" fg:x="448" fg:w="3"/><text x="36.2339%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="35.9839%" y="405" width="0.2410%" height="15" fill="rgb(253,26,1)" fg:x="448" fg:w="3"/><text x="36.2339%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="35.9839%" y="389" width="0.2410%" height="15" fill="rgb(216,89,31)" fg:x="448" fg:w="3"/><text x="36.2339%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="35.9839%" y="373" width="0.2410%" height="15" fill="rgb(209,109,5)" fg:x="448" fg:w="3"/><text x="36.2339%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="35.9839%" y="357" width="0.2410%" height="15" fill="rgb(229,63,13)" fg:x="448" fg:w="3"/><text x="36.2339%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="35.9839%" y="341" width="0.2410%" height="15" fill="rgb(238,137,54)" fg:x="448" fg:w="3"/><text x="36.2339%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="35.9839%" y="325" width="0.2410%" height="15" fill="rgb(228,1,9)" fg:x="448" fg:w="3"/><text x="36.2339%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="35.9839%" y="309" width="0.2410%" height="15" fill="rgb(249,120,48)" fg:x="448" fg:w="3"/><text x="36.2339%" y="319.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="36.1446%" y="293" width="0.0803%" height="15" fill="rgb(209,72,36)" fg:x="450" fg:w="1"/><text x="36.3946%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.1446%" y="277" width="0.0803%" height="15" fill="rgb(247,98,49)" fg:x="450" fg:w="1"/><text x="36.3946%" y="287.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (15 samples, 1.20%)</title><rect x="35.1807%" y="549" width="1.2048%" height="15" fill="rgb(233,75,36)" fg:x="438" fg:w="15"/><text x="35.4307%" y="559.50"></text></g><g><title>plugins_core::finding::DefaultFinder::find_top_container (2 samples, 0.16%)</title><rect x="36.2249%" y="533" width="0.1606%" height="15" fill="rgb(225,14,24)" fg:x="451" fg:w="2"/><text x="36.4749%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="36.2249%" y="517" width="0.1606%" height="15" fill="rgb(237,193,20)" fg:x="451" fg:w="2"/><text x="36.4749%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="36.3052%" y="501" width="0.0803%" height="15" fill="rgb(239,122,19)" fg:x="452" fg:w="1"/><text x="36.5552%" y="511.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (17 samples, 1.37%)</title><rect x="35.1807%" y="565" width="1.3655%" height="15" fill="rgb(231,220,10)" fg:x="438" fg:w="17"/><text x="35.4307%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_world (2 samples, 0.16%)</title><rect x="36.3855%" y="549" width="0.1606%" height="15" fill="rgb(220,66,15)" fg:x="453" fg:w="2"/><text x="36.6355%" y="559.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="36.4659%" y="533" width="0.0803%" height="15" fill="rgb(215,171,52)" fg:x="454" fg:w="1"/><text x="36.7159%" y="543.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="36.4659%" y="517" width="0.0803%" height="15" fill="rgb(241,169,50)" fg:x="454" fg:w="1"/><text x="36.7159%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.4659%" y="501" width="0.0803%" height="15" fill="rgb(236,189,0)" fg:x="454" fg:w="1"/><text x="36.7159%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="36.7871%" y="325" width="0.0803%" height="15" fill="rgb(217,147,20)" fg:x="458" fg:w="1"/><text x="37.0371%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.9478%" y="293" width="0.0803%" height="15" fill="rgb(206,188,39)" fg:x="460" fg:w="1"/><text x="37.1978%" y="303.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (3 samples, 0.24%)</title><rect x="36.8675%" y="325" width="0.2410%" height="15" fill="rgb(227,118,25)" fg:x="459" fg:w="3"/><text x="37.1175%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="36.9478%" y="309" width="0.1606%" height="15" fill="rgb(248,171,40)" fg:x="460" fg:w="2"/><text x="37.1978%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="37.0281%" y="293" width="0.0803%" height="15" fill="rgb(251,90,54)" fg:x="461" fg:w="1"/><text x="37.2781%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="37.0281%" y="277" width="0.0803%" height="15" fill="rgb(234,11,46)" fg:x="461" fg:w="1"/><text x="37.2781%" y="287.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="37.1084%" y="309" width="0.1606%" height="15" fill="rgb(229,134,13)" fg:x="462" fg:w="2"/><text x="37.3584%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="37.1084%" y="293" width="0.1606%" height="15" fill="rgb(223,129,3)" fg:x="462" fg:w="2"/><text x="37.3584%" y="303.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="37.1084%" y="277" width="0.1606%" height="15" fill="rgb(221,124,13)" fg:x="462" fg:w="2"/><text x="37.3584%" y="287.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (8 samples, 0.64%)</title><rect x="36.7068%" y="373" width="0.6426%" height="15" fill="rgb(234,3,18)" fg:x="457" fg:w="8"/><text x="36.9568%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (8 samples, 0.64%)</title><rect x="36.7068%" y="357" width="0.6426%" height="15" fill="rgb(249,199,20)" fg:x="457" fg:w="8"/><text x="36.9568%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.64%)</title><rect x="36.7068%" y="341" width="0.6426%" height="15" fill="rgb(224,134,6)" fg:x="457" fg:w="8"/><text x="36.9568%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="37.1084%" y="325" width="0.2410%" height="15" fill="rgb(254,83,26)" fg:x="462" fg:w="3"/><text x="37.3584%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (1 samples, 0.08%)</title><rect x="37.2691%" y="309" width="0.0803%" height="15" fill="rgb(217,88,9)" fg:x="464" fg:w="1"/><text x="37.5191%" y="319.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (10 samples, 0.80%)</title><rect x="36.6265%" y="389" width="0.8032%" height="15" fill="rgb(225,73,2)" fg:x="456" fg:w="10"/><text x="36.8765%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="37.3494%" y="373" width="0.0803%" height="15" fill="rgb(226,44,39)" fg:x="465" fg:w="1"/><text x="37.5994%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.3494%" y="357" width="0.0803%" height="15" fill="rgb(228,53,17)" fg:x="465" fg:w="1"/><text x="37.5994%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="37.6707%" y="357" width="0.1606%" height="15" fill="rgb(212,27,27)" fg:x="469" fg:w="2"/><text x="37.9207%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="37.6707%" y="341" width="0.1606%" height="15" fill="rgb(241,50,6)" fg:x="469" fg:w="2"/><text x="37.9207%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="37.6707%" y="325" width="0.1606%" height="15" fill="rgb(225,28,51)" fg:x="469" fg:w="2"/><text x="37.9207%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="37.6707%" y="309" width="0.1606%" height="15" fill="rgb(215,33,16)" fg:x="469" fg:w="2"/><text x="37.9207%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="37.6707%" y="293" width="0.1606%" height="15" fill="rgb(243,40,39)" fg:x="469" fg:w="2"/><text x="37.9207%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="37.6707%" y="277" width="0.1606%" height="15" fill="rgb(225,11,42)" fg:x="469" fg:w="2"/><text x="37.9207%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="37.6707%" y="261" width="0.1606%" height="15" fill="rgb(241,220,38)" fg:x="469" fg:w="2"/><text x="37.9207%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="37.7510%" y="245" width="0.0803%" height="15" fill="rgb(244,52,35)" fg:x="470" fg:w="1"/><text x="38.0010%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="37.9116%" y="325" width="0.0803%" height="15" fill="rgb(246,42,46)" fg:x="472" fg:w="1"/><text x="38.1616%" y="335.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="37.9920%" y="325" width="0.0803%" height="15" fill="rgb(205,184,13)" fg:x="473" fg:w="1"/><text x="38.2420%" y="335.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::desc (5 samples, 0.40%)</title><rect x="37.8313%" y="357" width="0.4016%" height="15" fill="rgb(209,48,36)" fg:x="471" fg:w="5"/><text x="38.0813%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="37.9116%" y="341" width="0.3213%" height="15" fill="rgb(244,34,51)" fg:x="472" fg:w="4"/><text x="38.1616%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="38.0723%" y="325" width="0.1606%" height="15" fill="rgb(221,107,33)" fg:x="474" fg:w="2"/><text x="38.3223%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="38.0723%" y="309" width="0.1606%" height="15" fill="rgb(224,203,12)" fg:x="474" fg:w="2"/><text x="38.3223%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="38.0723%" y="293" width="0.1606%" height="15" fill="rgb(230,215,18)" fg:x="474" fg:w="2"/><text x="38.3223%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="38.1526%" y="277" width="0.0803%" height="15" fill="rgb(206,185,35)" fg:x="475" fg:w="1"/><text x="38.4026%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="38.1526%" y="261" width="0.0803%" height="15" fill="rgb(228,140,34)" fg:x="475" fg:w="1"/><text x="38.4026%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="38.1526%" y="245" width="0.0803%" height="15" fill="rgb(208,93,13)" fg:x="475" fg:w="1"/><text x="38.4026%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="38.3133%" y="325" width="0.1606%" height="15" fill="rgb(221,193,39)" fg:x="477" fg:w="2"/><text x="38.5633%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="38.3133%" y="309" width="0.1606%" height="15" fill="rgb(241,132,34)" fg:x="477" fg:w="2"/><text x="38.5633%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="38.3133%" y="293" width="0.1606%" height="15" fill="rgb(221,141,10)" fg:x="477" fg:w="2"/><text x="38.5633%" y="303.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="38.3936%" y="277" width="0.0803%" height="15" fill="rgb(226,90,31)" fg:x="478" fg:w="1"/><text x="38.6436%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="38.3936%" y="261" width="0.0803%" height="15" fill="rgb(243,75,5)" fg:x="478" fg:w="1"/><text x="38.6436%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="38.6345%" y="261" width="0.0803%" height="15" fill="rgb(227,156,21)" fg:x="481" fg:w="1"/><text x="38.8845%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="38.6345%" y="245" width="0.0803%" height="15" fill="rgb(250,195,8)" fg:x="481" fg:w="1"/><text x="38.8845%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="38.6345%" y="229" width="0.0803%" height="15" fill="rgb(220,134,5)" fg:x="481" fg:w="1"/><text x="38.8845%" y="239.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (7 samples, 0.56%)</title><rect x="38.2329%" y="357" width="0.5622%" height="15" fill="rgb(246,106,34)" fg:x="476" fg:w="7"/><text x="38.4829%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (6 samples, 0.48%)</title><rect x="38.3133%" y="341" width="0.4819%" height="15" fill="rgb(205,1,4)" fg:x="477" fg:w="6"/><text x="38.5633%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="38.4739%" y="325" width="0.3213%" height="15" fill="rgb(224,151,29)" fg:x="479" fg:w="4"/><text x="38.7239%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="38.4739%" y="309" width="0.3213%" height="15" fill="rgb(251,196,0)" fg:x="479" fg:w="4"/><text x="38.7239%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="38.6345%" y="293" width="0.1606%" height="15" fill="rgb(212,127,0)" fg:x="481" fg:w="2"/><text x="38.8845%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="38.6345%" y="277" width="0.1606%" height="15" fill="rgb(236,71,53)" fg:x="481" fg:w="2"/><text x="38.8845%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="38.7149%" y="261" width="0.0803%" height="15" fill="rgb(227,99,0)" fg:x="482" fg:w="1"/><text x="38.9649%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="38.7149%" y="245" width="0.0803%" height="15" fill="rgb(239,89,21)" fg:x="482" fg:w="1"/><text x="38.9649%" y="255.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="38.7952%" y="357" width="0.0803%" height="15" fill="rgb(243,122,19)" fg:x="483" fg:w="1"/><text x="39.0452%" y="367.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="38.7952%" y="341" width="0.0803%" height="15" fill="rgb(229,192,45)" fg:x="483" fg:w="1"/><text x="39.0452%" y="351.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="38.7952%" y="325" width="0.0803%" height="15" fill="rgb(235,165,35)" fg:x="483" fg:w="1"/><text x="39.0452%" y="335.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="38.7952%" y="309" width="0.0803%" height="15" fill="rgb(253,202,0)" fg:x="483" fg:w="1"/><text x="39.0452%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="38.7952%" y="293" width="0.0803%" height="15" fill="rgb(235,51,20)" fg:x="483" fg:w="1"/><text x="39.0452%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="38.7952%" y="277" width="0.0803%" height="15" fill="rgb(218,95,46)" fg:x="483" fg:w="1"/><text x="39.0452%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.7952%" y="261" width="0.0803%" height="15" fill="rgb(212,81,10)" fg:x="483" fg:w="1"/><text x="39.0452%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="38.8755%" y="325" width="0.0803%" height="15" fill="rgb(240,59,0)" fg:x="484" fg:w="1"/><text x="39.1255%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="38.8755%" y="309" width="0.0803%" height="15" fill="rgb(212,191,42)" fg:x="484" fg:w="1"/><text x="39.1255%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="38.8755%" y="293" width="0.0803%" height="15" fill="rgb(233,140,3)" fg:x="484" fg:w="1"/><text x="39.1255%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="38.8755%" y="277" width="0.0803%" height="15" fill="rgb(215,69,23)" fg:x="484" fg:w="1"/><text x="39.1255%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="38.8755%" y="261" width="0.0803%" height="15" fill="rgb(240,202,20)" fg:x="484" fg:w="1"/><text x="39.1255%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="38.8755%" y="245" width="0.0803%" height="15" fill="rgb(209,146,50)" fg:x="484" fg:w="1"/><text x="39.1255%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="38.8755%" y="229" width="0.0803%" height="15" fill="rgb(253,102,54)" fg:x="484" fg:w="1"/><text x="39.1255%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="38.8755%" y="213" width="0.0803%" height="15" fill="rgb(250,173,47)" fg:x="484" fg:w="1"/><text x="39.1255%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="38.8755%" y="197" width="0.0803%" height="15" fill="rgb(232,142,7)" fg:x="484" fg:w="1"/><text x="39.1255%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="38.8755%" y="181" width="0.0803%" height="15" fill="rgb(230,157,47)" fg:x="484" fg:w="1"/><text x="39.1255%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.9558%" y="325" width="0.0803%" height="15" fill="rgb(214,177,35)" fg:x="485" fg:w="1"/><text x="39.2058%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="39.1165%" y="261" width="0.0803%" height="15" fill="rgb(234,119,46)" fg:x="487" fg:w="1"/><text x="39.3665%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="39.1165%" y="245" width="0.0803%" height="15" fill="rgb(241,180,50)" fg:x="487" fg:w="1"/><text x="39.3665%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="39.3574%" y="229" width="0.0803%" height="15" fill="rgb(221,54,25)" fg:x="490" fg:w="1"/><text x="39.6074%" y="239.50"></text></g><g><title>kernel::model::EntityPtr::gid (8 samples, 0.64%)</title><rect x="38.8755%" y="357" width="0.6426%" height="15" fill="rgb(209,157,44)" fg:x="484" fg:w="8"/><text x="39.1255%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (8 samples, 0.64%)</title><rect x="38.8755%" y="341" width="0.6426%" height="15" fill="rgb(246,115,41)" fg:x="484" fg:w="8"/><text x="39.1255%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.48%)</title><rect x="39.0361%" y="325" width="0.4819%" height="15" fill="rgb(229,86,1)" fg:x="486" fg:w="6"/><text x="39.2861%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="39.1165%" y="309" width="0.4016%" height="15" fill="rgb(240,108,53)" fg:x="487" fg:w="5"/><text x="39.3665%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.40%)</title><rect x="39.1165%" y="293" width="0.4016%" height="15" fill="rgb(227,134,2)" fg:x="487" fg:w="5"/><text x="39.3665%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="39.1165%" y="277" width="0.4016%" height="15" fill="rgb(213,129,25)" fg:x="487" fg:w="5"/><text x="39.3665%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="39.1968%" y="261" width="0.3213%" height="15" fill="rgb(226,35,21)" fg:x="488" fg:w="4"/><text x="39.4468%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="39.1968%" y="245" width="0.3213%" height="15" fill="rgb(208,129,26)" fg:x="488" fg:w="4"/><text x="39.4468%" y="255.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="39.4378%" y="229" width="0.0803%" height="15" fill="rgb(224,83,6)" fg:x="491" fg:w="1"/><text x="39.6878%" y="239.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="39.5181%" y="357" width="0.0803%" height="15" fill="rgb(227,52,39)" fg:x="492" fg:w="1"/><text x="39.7681%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="39.5181%" y="341" width="0.0803%" height="15" fill="rgb(241,30,17)" fg:x="492" fg:w="1"/><text x="39.7681%" y="351.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="39.5984%" y="309" width="0.0803%" height="15" fill="rgb(246,186,42)" fg:x="493" fg:w="1"/><text x="39.8484%" y="319.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="39.5984%" y="293" width="0.0803%" height="15" fill="rgb(221,169,15)" fg:x="493" fg:w="1"/><text x="39.8484%" y="303.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="39.5984%" y="277" width="0.0803%" height="15" fill="rgb(235,108,21)" fg:x="493" fg:w="1"/><text x="39.8484%" y="287.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="39.5984%" y="261" width="0.0803%" height="15" fill="rgb(219,148,30)" fg:x="493" fg:w="1"/><text x="39.8484%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="39.6787%" y="277" width="0.1606%" height="15" fill="rgb(220,109,5)" fg:x="494" fg:w="2"/><text x="39.9287%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="39.6787%" y="261" width="0.1606%" height="15" fill="rgb(213,203,48)" fg:x="494" fg:w="2"/><text x="39.9287%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="39.7590%" y="245" width="0.0803%" height="15" fill="rgb(244,71,33)" fg:x="495" fg:w="1"/><text x="40.0090%" y="255.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="39.7590%" y="229" width="0.0803%" height="15" fill="rgb(209,23,2)" fg:x="495" fg:w="1"/><text x="40.0090%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="39.7590%" y="213" width="0.0803%" height="15" fill="rgb(219,97,7)" fg:x="495" fg:w="1"/><text x="40.0090%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.9197%" y="245" width="0.0803%" height="15" fill="rgb(216,161,23)" fg:x="497" fg:w="1"/><text x="40.1697%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="40.0000%" y="245" width="0.0803%" height="15" fill="rgb(207,45,42)" fg:x="498" fg:w="1"/><text x="40.2500%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="40.0000%" y="229" width="0.0803%" height="15" fill="rgb(241,61,4)" fg:x="498" fg:w="1"/><text x="40.2500%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="40.0000%" y="213" width="0.0803%" height="15" fill="rgb(236,170,1)" fg:x="498" fg:w="1"/><text x="40.2500%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.0000%" y="197" width="0.0803%" height="15" fill="rgb(239,72,5)" fg:x="498" fg:w="1"/><text x="40.2500%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="39.8394%" y="277" width="0.3213%" height="15" fill="rgb(214,13,50)" fg:x="496" fg:w="4"/><text x="40.0894%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="39.8394%" y="261" width="0.3213%" height="15" fill="rgb(224,88,9)" fg:x="496" fg:w="4"/><text x="40.0894%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="40.0803%" y="245" width="0.0803%" height="15" fill="rgb(238,192,34)" fg:x="499" fg:w="1"/><text x="40.3303%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.0803%" y="229" width="0.0803%" height="15" fill="rgb(217,203,50)" fg:x="499" fg:w="1"/><text x="40.3303%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (3 samples, 0.24%)</title><rect x="40.1606%" y="229" width="0.2410%" height="15" fill="rgb(241,123,32)" fg:x="500" fg:w="3"/><text x="40.4106%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="40.1606%" y="213" width="0.2410%" height="15" fill="rgb(248,151,39)" fg:x="500" fg:w="3"/><text x="40.4106%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.3213%" y="197" width="0.0803%" height="15" fill="rgb(208,89,6)" fg:x="502" fg:w="1"/><text x="40.5713%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="40.4016%" y="229" width="0.0803%" height="15" fill="rgb(254,43,26)" fg:x="503" fg:w="1"/><text x="40.6516%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.5622%" y="213" width="0.0803%" height="15" fill="rgb(216,158,13)" fg:x="505" fg:w="1"/><text x="40.8122%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.6426%" y="213" width="0.0803%" height="15" fill="rgb(212,47,37)" fg:x="506" fg:w="1"/><text x="40.8926%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (12 samples, 0.96%)</title><rect x="40.7229%" y="213" width="0.9639%" height="15" fill="rgb(254,16,10)" fg:x="507" fg:w="12"/><text x="40.9729%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (10 samples, 0.80%)</title><rect x="40.8835%" y="197" width="0.8032%" height="15" fill="rgb(223,228,16)" fg:x="509" fg:w="10"/><text x="41.1335%" y="207.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="41.5261%" y="181" width="0.1606%" height="15" fill="rgb(249,108,50)" fg:x="517" fg:w="2"/><text x="41.7761%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="41.7671%" y="197" width="0.2410%" height="15" fill="rgb(208,220,5)" fg:x="520" fg:w="3"/><text x="42.0171%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="42.0080%" y="197" width="0.0803%" height="15" fill="rgb(217,89,48)" fg:x="523" fg:w="1"/><text x="42.2580%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="41.6867%" y="213" width="0.4819%" height="15" fill="rgb(212,113,41)" fg:x="519" fg:w="6"/><text x="41.9367%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="42.0884%" y="197" width="0.0803%" height="15" fill="rgb(231,127,5)" fg:x="524" fg:w="1"/><text x="42.3384%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="42.1687%" y="197" width="0.0803%" height="15" fill="rgb(217,141,17)" fg:x="525" fg:w="1"/><text x="42.4187%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="42.1687%" y="181" width="0.0803%" height="15" fill="rgb(245,125,54)" fg:x="525" fg:w="1"/><text x="42.4187%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="42.1687%" y="213" width="0.1606%" height="15" fill="rgb(248,125,3)" fg:x="525" fg:w="2"/><text x="42.4187%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="42.2490%" y="197" width="0.0803%" height="15" fill="rgb(236,119,51)" fg:x="526" fg:w="1"/><text x="42.4990%" y="207.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="42.2490%" y="181" width="0.0803%" height="15" fill="rgb(239,99,8)" fg:x="526" fg:w="1"/><text x="42.4990%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="42.3293%" y="165" width="0.0803%" height="15" fill="rgb(224,228,4)" fg:x="527" fg:w="1"/><text x="42.5793%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="42.3293%" y="149" width="0.0803%" height="15" fill="rgb(220,131,45)" fg:x="527" fg:w="1"/><text x="42.5793%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="42.3293%" y="133" width="0.0803%" height="15" fill="rgb(215,62,5)" fg:x="527" fg:w="1"/><text x="42.5793%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.3293%" y="117" width="0.0803%" height="15" fill="rgb(253,12,24)" fg:x="527" fg:w="1"/><text x="42.5793%" y="127.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="42.6506%" y="149" width="0.1606%" height="15" fill="rgb(248,120,50)" fg:x="531" fg:w="2"/><text x="42.9006%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="42.8112%" y="149" width="0.0803%" height="15" fill="rgb(245,194,10)" fg:x="533" fg:w="1"/><text x="43.0612%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="42.8112%" y="133" width="0.0803%" height="15" fill="rgb(241,149,38)" fg:x="533" fg:w="1"/><text x="43.0612%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="42.8112%" y="117" width="0.0803%" height="15" fill="rgb(219,215,7)" fg:x="533" fg:w="1"/><text x="43.0612%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="42.8112%" y="101" width="0.0803%" height="15" fill="rgb(208,120,31)" fg:x="533" fg:w="1"/><text x="43.0612%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="42.8916%" y="149" width="0.0803%" height="15" fill="rgb(244,30,8)" fg:x="534" fg:w="1"/><text x="43.1416%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="42.9719%" y="149" width="0.0803%" height="15" fill="rgb(238,35,44)" fg:x="535" fg:w="1"/><text x="43.2219%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="42.9719%" y="133" width="0.0803%" height="15" fill="rgb(243,218,37)" fg:x="535" fg:w="1"/><text x="43.2219%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="42.9719%" y="117" width="0.0803%" height="15" fill="rgb(218,169,10)" fg:x="535" fg:w="1"/><text x="43.2219%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.9719%" y="101" width="0.0803%" height="15" fill="rgb(221,144,10)" fg:x="535" fg:w="1"/><text x="43.2219%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="43.0522%" y="133" width="0.0803%" height="15" fill="rgb(226,41,38)" fg:x="536" fg:w="1"/><text x="43.3022%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.0522%" y="117" width="0.0803%" height="15" fill="rgb(228,3,1)" fg:x="536" fg:w="1"/><text x="43.3022%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.0522%" y="101" width="0.0803%" height="15" fill="rgb(209,129,12)" fg:x="536" fg:w="1"/><text x="43.3022%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="43.0522%" y="85" width="0.0803%" height="15" fill="rgb(213,136,33)" fg:x="536" fg:w="1"/><text x="43.3022%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (51 samples, 4.10%)</title><rect x="43.0522%" y="149" width="4.0964%" height="15" fill="rgb(209,181,29)" fg:x="536" fg:w="51"/><text x="43.3022%" y="159.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (50 samples, 4.02%)</title><rect x="43.1325%" y="133" width="4.0161%" height="15" fill="rgb(234,173,18)" fg:x="537" fg:w="50"/><text x="43.3825%" y="143.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (50 samples, 4.02%)</title><rect x="43.1325%" y="117" width="4.0161%" height="15" fill="rgb(227,73,47)" fg:x="537" fg:w="50"/><text x="43.3825%" y="127.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="47.1486%" y="149" width="0.2410%" height="15" fill="rgb(234,9,34)" fg:x="587" fg:w="3"/><text x="47.3986%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="47.3092%" y="133" width="0.0803%" height="15" fill="rgb(235,172,15)" fg:x="589" fg:w="1"/><text x="47.5592%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (64 samples, 5.14%)</title><rect x="42.3293%" y="197" width="5.1406%" height="15" fill="rgb(245,61,2)" fg:x="527" fg:w="64"/><text x="42.5793%" y="207.50">&lt;core:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (64 samples, 5.14%)</title><rect x="42.3293%" y="181" width="5.1406%" height="15" fill="rgb(238,39,47)" fg:x="527" fg:w="64"/><text x="42.5793%" y="191.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (63 samples, 5.06%)</title><rect x="42.4096%" y="165" width="5.0602%" height="15" fill="rgb(234,37,24)" fg:x="528" fg:w="63"/><text x="42.6596%" y="175.50">regex_..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="47.3896%" y="149" width="0.0803%" height="15" fill="rgb(248,223,24)" fg:x="590" fg:w="1"/><text x="47.6396%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="47.3896%" y="133" width="0.0803%" height="15" fill="rgb(223,12,15)" fg:x="590" fg:w="1"/><text x="47.6396%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="47.7108%" y="181" width="0.0803%" height="15" fill="rgb(249,6,3)" fg:x="594" fg:w="1"/><text x="47.9608%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (6 samples, 0.48%)</title><rect x="47.7912%" y="181" width="0.4819%" height="15" fill="rgb(237,105,33)" fg:x="595" fg:w="6"/><text x="48.0412%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="48.0321%" y="165" width="0.2410%" height="15" fill="rgb(252,208,35)" fg:x="598" fg:w="3"/><text x="48.2821%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="48.0321%" y="149" width="0.2410%" height="15" fill="rgb(215,181,35)" fg:x="598" fg:w="3"/><text x="48.2821%" y="159.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="48.1124%" y="133" width="0.1606%" height="15" fill="rgb(246,212,3)" fg:x="599" fg:w="2"/><text x="48.3624%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="48.2731%" y="181" width="0.1606%" height="15" fill="rgb(247,156,24)" fg:x="601" fg:w="2"/><text x="48.5231%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="48.3534%" y="165" width="0.0803%" height="15" fill="rgb(248,9,31)" fg:x="602" fg:w="1"/><text x="48.6034%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.3534%" y="149" width="0.0803%" height="15" fill="rgb(234,26,45)" fg:x="602" fg:w="1"/><text x="48.6034%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (13 samples, 1.04%)</title><rect x="47.4699%" y="197" width="1.0442%" height="15" fill="rgb(249,11,32)" fg:x="591" fg:w="13"/><text x="47.7199%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="48.4337%" y="181" width="0.0803%" height="15" fill="rgb(249,162,33)" fg:x="603" fg:w="1"/><text x="48.6837%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="48.5141%" y="181" width="0.1606%" height="15" fill="rgb(232,4,32)" fg:x="604" fg:w="2"/><text x="48.7641%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="48.5944%" y="165" width="0.0803%" height="15" fill="rgb(212,5,45)" fg:x="605" fg:w="1"/><text x="48.8444%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.5944%" y="149" width="0.0803%" height="15" fill="rgb(227,95,13)" fg:x="605" fg:w="1"/><text x="48.8444%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.5944%" y="133" width="0.0803%" height="15" fill="rgb(223,205,10)" fg:x="605" fg:w="1"/><text x="48.8444%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (80 samples, 6.43%)</title><rect x="42.3293%" y="213" width="6.4257%" height="15" fill="rgb(222,178,8)" fg:x="527" fg:w="80"/><text x="42.5793%" y="223.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (3 samples, 0.24%)</title><rect x="48.5141%" y="197" width="0.2410%" height="15" fill="rgb(216,13,22)" fg:x="604" fg:w="3"/><text x="48.7641%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="48.6747%" y="181" width="0.0803%" height="15" fill="rgb(240,167,12)" fg:x="606" fg:w="1"/><text x="48.9247%" y="191.50"></text></g><g><title>regex_syntax::hir::literal::Seq::optimize_by_preference (1 samples, 0.08%)</title><rect x="48.7550%" y="197" width="0.0803%" height="15" fill="rgb(235,68,35)" fg:x="607" fg:w="1"/><text x="49.0050%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (105 samples, 8.43%)</title><rect x="40.4819%" y="229" width="8.4337%" height="15" fill="rgb(253,40,27)" fg:x="504" fg:w="105"/><text x="40.7319%" y="239.50">regex_automa..</text></g><g><title>regex_automata::util::prefilter::suffixes (2 samples, 0.16%)</title><rect x="48.7550%" y="213" width="0.1606%" height="15" fill="rgb(214,19,28)" fg:x="607" fg:w="2"/><text x="49.0050%" y="223.50"></text></g><g><title>regex_syntax::hir::literal::Seq::union (1 samples, 0.08%)</title><rect x="48.8353%" y="197" width="0.0803%" height="15" fill="rgb(210,167,45)" fg:x="608" fg:w="1"/><text x="49.0853%" y="207.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::new (1 samples, 0.08%)</title><rect x="48.9157%" y="229" width="0.0803%" height="15" fill="rgb(232,97,40)" fg:x="609" fg:w="1"/><text x="49.1657%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="48.9157%" y="213" width="0.0803%" height="15" fill="rgb(250,35,23)" fg:x="609" fg:w="1"/><text x="49.1657%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="48.9157%" y="197" width="0.0803%" height="15" fill="rgb(248,47,53)" fg:x="609" fg:w="1"/><text x="49.1657%" y="207.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (1 samples, 0.08%)</title><rect x="48.9157%" y="181" width="0.0803%" height="15" fill="rgb(226,58,50)" fg:x="609" fg:w="1"/><text x="49.1657%" y="191.50"></text></g><g><title>posix_memalign (1 samples, 0.08%)</title><rect x="48.9157%" y="165" width="0.0803%" height="15" fill="rgb(217,105,26)" fg:x="609" fg:w="1"/><text x="49.1657%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="49.1566%" y="181" width="0.0803%" height="15" fill="rgb(208,64,1)" fg:x="612" fg:w="1"/><text x="49.4066%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="49.1566%" y="165" width="0.0803%" height="15" fill="rgb(214,80,1)" fg:x="612" fg:w="1"/><text x="49.4066%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="49.1566%" y="149" width="0.0803%" height="15" fill="rgb(206,175,26)" fg:x="612" fg:w="1"/><text x="49.4066%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="49.1566%" y="133" width="0.0803%" height="15" fill="rgb(235,156,37)" fg:x="612" fg:w="1"/><text x="49.4066%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.64%)</title><rect x="48.9960%" y="229" width="0.6426%" height="15" fill="rgb(213,100,9)" fg:x="610" fg:w="8"/><text x="49.2460%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.64%)</title><rect x="48.9960%" y="213" width="0.6426%" height="15" fill="rgb(241,15,13)" fg:x="610" fg:w="8"/><text x="49.2460%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (8 samples, 0.64%)</title><rect x="48.9960%" y="197" width="0.6426%" height="15" fill="rgb(205,97,43)" fg:x="610" fg:w="8"/><text x="49.2460%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (5 samples, 0.40%)</title><rect x="49.2369%" y="181" width="0.4016%" height="15" fill="rgb(216,106,32)" fg:x="613" fg:w="5"/><text x="49.4869%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="49.3976%" y="165" width="0.2410%" height="15" fill="rgb(226,200,8)" fg:x="615" fg:w="3"/><text x="49.6476%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="49.3976%" y="149" width="0.2410%" height="15" fill="rgb(244,54,29)" fg:x="615" fg:w="3"/><text x="49.6476%" y="159.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="49.3976%" y="133" width="0.2410%" height="15" fill="rgb(252,169,12)" fg:x="615" fg:w="3"/><text x="49.6476%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.7189%" y="181" width="0.0803%" height="15" fill="rgb(231,199,11)" fg:x="619" fg:w="1"/><text x="49.9689%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="49.6386%" y="197" width="0.2410%" height="15" fill="rgb(233,191,18)" fg:x="618" fg:w="3"/><text x="49.8886%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="49.7992%" y="181" width="0.0803%" height="15" fill="rgb(215,83,47)" fg:x="620" fg:w="1"/><text x="50.0492%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="49.7992%" y="165" width="0.0803%" height="15" fill="rgb(251,67,19)" fg:x="620" fg:w="1"/><text x="50.0492%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.7992%" y="149" width="0.0803%" height="15" fill="rgb(240,7,20)" fg:x="620" fg:w="1"/><text x="50.0492%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="49.7992%" y="133" width="0.0803%" height="15" fill="rgb(210,150,26)" fg:x="620" fg:w="1"/><text x="50.0492%" y="143.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="49.8795%" y="197" width="0.0803%" height="15" fill="rgb(228,75,42)" fg:x="621" fg:w="1"/><text x="50.1295%" y="207.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="49.8795%" y="181" width="0.0803%" height="15" fill="rgb(237,134,48)" fg:x="621" fg:w="1"/><text x="50.1295%" y="191.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="49.8795%" y="165" width="0.0803%" height="15" fill="rgb(205,80,50)" fg:x="621" fg:w="1"/><text x="50.1295%" y="175.50"></text></g><g><title>regex::regex::string::Regex::new (123 samples, 9.88%)</title><rect x="40.1606%" y="277" width="9.8795%" height="15" fill="rgb(217,74,48)" fg:x="500" fg:w="123"/><text x="40.4106%" y="287.50">regex::regex::..</text></g><g><title>regex::builders::string::RegexBuilder::build (123 samples, 9.88%)</title><rect x="40.1606%" y="261" width="9.8795%" height="15" fill="rgb(205,82,50)" fg:x="500" fg:w="123"/><text x="40.4106%" y="271.50">regex::builder..</text></g><g><title>regex_automata::meta::regex::Builder::build (123 samples, 9.88%)</title><rect x="40.1606%" y="245" width="9.8795%" height="15" fill="rgb(228,1,33)" fg:x="500" fg:w="123"/><text x="40.4106%" y="255.50">regex_automata..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.40%)</title><rect x="49.6386%" y="229" width="0.4016%" height="15" fill="rgb(214,50,23)" fg:x="618" fg:w="5"/><text x="49.8886%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.40%)</title><rect x="49.6386%" y="213" width="0.4016%" height="15" fill="rgb(210,62,9)" fg:x="618" fg:w="5"/><text x="49.8886%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="49.9598%" y="197" width="0.0803%" height="15" fill="rgb(210,104,37)" fg:x="622" fg:w="1"/><text x="50.2098%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.9598%" y="181" width="0.0803%" height="15" fill="rgb(232,104,43)" fg:x="622" fg:w="1"/><text x="50.2098%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="49.9598%" y="165" width="0.0803%" height="15" fill="rgb(244,52,6)" fg:x="622" fg:w="1"/><text x="50.2098%" y="175.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="50.0402%" y="213" width="0.3213%" height="15" fill="rgb(211,174,52)" fg:x="623" fg:w="4"/><text x="50.2902%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="50.2008%" y="197" width="0.1606%" height="15" fill="rgb(229,48,4)" fg:x="625" fg:w="2"/><text x="50.4508%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="50.0402%" y="229" width="0.4819%" height="15" fill="rgb(205,155,16)" fg:x="623" fg:w="6"/><text x="50.2902%" y="239.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="50.3614%" y="213" width="0.1606%" height="15" fill="rgb(211,141,53)" fg:x="627" fg:w="2"/><text x="50.6114%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="50.3614%" y="197" width="0.1606%" height="15" fill="rgb(240,148,11)" fg:x="627" fg:w="2"/><text x="50.6114%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="50.3614%" y="181" width="0.1606%" height="15" fill="rgb(214,45,23)" fg:x="627" fg:w="2"/><text x="50.6114%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="50.3614%" y="165" width="0.1606%" height="15" fill="rgb(248,74,26)" fg:x="627" fg:w="2"/><text x="50.6114%" y="175.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (136 samples, 10.92%)</title><rect x="39.6787%" y="293" width="10.9237%" height="15" fill="rgb(218,121,16)" fg:x="494" fg:w="136"/><text x="39.9287%" y="303.50">indefinite::help..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.56%)</title><rect x="50.0402%" y="277" width="0.5622%" height="15" fill="rgb(218,10,47)" fg:x="623" fg:w="7"/><text x="50.2902%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.56%)</title><rect x="50.0402%" y="261" width="0.5622%" height="15" fill="rgb(227,99,14)" fg:x="623" fg:w="7"/><text x="50.2902%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.56%)</title><rect x="50.0402%" y="245" width="0.5622%" height="15" fill="rgb(229,83,46)" fg:x="623" fg:w="7"/><text x="50.2902%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="50.5221%" y="229" width="0.0803%" height="15" fill="rgb(228,25,1)" fg:x="629" fg:w="1"/><text x="50.7721%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="50.5221%" y="213" width="0.0803%" height="15" fill="rgb(252,190,15)" fg:x="629" fg:w="1"/><text x="50.7721%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="50.5221%" y="197" width="0.0803%" height="15" fill="rgb(213,103,51)" fg:x="629" fg:w="1"/><text x="50.7721%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.5221%" y="181" width="0.0803%" height="15" fill="rgb(220,38,44)" fg:x="629" fg:w="1"/><text x="50.7721%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="50.6827%" y="277" width="0.2410%" height="15" fill="rgb(210,45,26)" fg:x="631" fg:w="3"/><text x="50.9327%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="50.6827%" y="261" width="0.2410%" height="15" fill="rgb(205,95,48)" fg:x="631" fg:w="3"/><text x="50.9327%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="50.6827%" y="245" width="0.2410%" height="15" fill="rgb(225,179,37)" fg:x="631" fg:w="3"/><text x="50.9327%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.24%)</title><rect x="50.6827%" y="229" width="0.2410%" height="15" fill="rgb(230,209,3)" fg:x="631" fg:w="3"/><text x="50.9327%" y="239.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="50.6827%" y="213" width="0.2410%" height="15" fill="rgb(248,12,46)" fg:x="631" fg:w="3"/><text x="50.9327%" y="223.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="50.9237%" y="261" width="0.0803%" height="15" fill="rgb(234,18,0)" fg:x="634" fg:w="1"/><text x="51.1737%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="50.9237%" y="245" width="0.0803%" height="15" fill="rgb(238,197,14)" fg:x="634" fg:w="1"/><text x="51.1737%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="50.9237%" y="229" width="0.0803%" height="15" fill="rgb(251,162,48)" fg:x="634" fg:w="1"/><text x="51.1737%" y="239.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="50.9237%" y="213" width="0.0803%" height="15" fill="rgb(237,73,42)" fg:x="634" fg:w="1"/><text x="51.1737%" y="223.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="50.9237%" y="197" width="0.0803%" height="15" fill="rgb(211,108,8)" fg:x="634" fg:w="1"/><text x="51.1737%" y="207.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (14 samples, 1.12%)</title><rect x="50.9237%" y="277" width="1.1245%" height="15" fill="rgb(213,45,22)" fg:x="634" fg:w="14"/><text x="51.1737%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (13 samples, 1.04%)</title><rect x="51.0040%" y="261" width="1.0442%" height="15" fill="rgb(252,154,5)" fg:x="635" fg:w="13"/><text x="51.2540%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (13 samples, 1.04%)</title><rect x="51.0040%" y="245" width="1.0442%" height="15" fill="rgb(221,79,52)" fg:x="635" fg:w="13"/><text x="51.2540%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (13 samples, 1.04%)</title><rect x="51.0040%" y="229" width="1.0442%" height="15" fill="rgb(229,220,36)" fg:x="635" fg:w="13"/><text x="51.2540%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (13 samples, 1.04%)</title><rect x="51.0040%" y="213" width="1.0442%" height="15" fill="rgb(211,17,16)" fg:x="635" fg:w="13"/><text x="51.2540%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (13 samples, 1.04%)</title><rect x="51.0040%" y="197" width="1.0442%" height="15" fill="rgb(222,55,31)" fg:x="635" fg:w="13"/><text x="51.2540%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (6 samples, 0.48%)</title><rect x="51.5663%" y="181" width="0.4819%" height="15" fill="rgb(221,221,31)" fg:x="642" fg:w="6"/><text x="51.8163%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="52.0482%" y="229" width="0.0803%" height="15" fill="rgb(227,168,26)" fg:x="648" fg:w="1"/><text x="52.2982%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="52.0482%" y="213" width="0.0803%" height="15" fill="rgb(224,139,9)" fg:x="648" fg:w="1"/><text x="52.2982%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="52.0482%" y="197" width="0.0803%" height="15" fill="rgb(254,172,0)" fg:x="648" fg:w="1"/><text x="52.2982%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="52.0482%" y="181" width="0.0803%" height="15" fill="rgb(235,203,1)" fg:x="648" fg:w="1"/><text x="52.2982%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.0482%" y="165" width="0.0803%" height="15" fill="rgb(216,205,24)" fg:x="648" fg:w="1"/><text x="52.2982%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="52.0482%" y="149" width="0.0803%" height="15" fill="rgb(233,24,6)" fg:x="648" fg:w="1"/><text x="52.2982%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="52.1285%" y="229" width="0.0803%" height="15" fill="rgb(244,110,9)" fg:x="649" fg:w="1"/><text x="52.3785%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="52.1285%" y="213" width="0.0803%" height="15" fill="rgb(239,222,42)" fg:x="649" fg:w="1"/><text x="52.3785%" y="223.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="52.2088%" y="213" width="0.0803%" height="15" fill="rgb(218,145,13)" fg:x="650" fg:w="1"/><text x="52.4588%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="52.3695%" y="197" width="0.0803%" height="15" fill="rgb(207,69,11)" fg:x="652" fg:w="1"/><text x="52.6195%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (13 samples, 1.04%)</title><rect x="52.2892%" y="213" width="1.0442%" height="15" fill="rgb(220,223,22)" fg:x="651" fg:w="13"/><text x="52.5392%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (11 samples, 0.88%)</title><rect x="52.4498%" y="197" width="0.8835%" height="15" fill="rgb(245,102,5)" fg:x="653" fg:w="11"/><text x="52.6998%" y="207.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="53.0924%" y="181" width="0.2410%" height="15" fill="rgb(211,148,2)" fg:x="661" fg:w="3"/><text x="53.3424%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (7 samples, 0.56%)</title><rect x="53.3333%" y="197" width="0.5622%" height="15" fill="rgb(241,13,44)" fg:x="664" fg:w="7"/><text x="53.5833%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (8 samples, 0.64%)</title><rect x="53.3333%" y="213" width="0.6426%" height="15" fill="rgb(219,137,21)" fg:x="664" fg:w="8"/><text x="53.5833%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="53.8956%" y="197" width="0.0803%" height="15" fill="rgb(242,206,5)" fg:x="671" fg:w="1"/><text x="54.1456%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="53.8956%" y="181" width="0.0803%" height="15" fill="rgb(217,114,22)" fg:x="671" fg:w="1"/><text x="54.1456%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="54.1365%" y="181" width="0.1606%" height="15" fill="rgb(253,206,42)" fg:x="674" fg:w="2"/><text x="54.3865%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="54.2169%" y="165" width="0.0803%" height="15" fill="rgb(236,102,18)" fg:x="675" fg:w="1"/><text x="54.4669%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.2169%" y="149" width="0.0803%" height="15" fill="rgb(208,59,49)" fg:x="675" fg:w="1"/><text x="54.4669%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="54.2169%" y="133" width="0.0803%" height="15" fill="rgb(215,194,28)" fg:x="675" fg:w="1"/><text x="54.4669%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="54.5382%" y="149" width="0.3213%" height="15" fill="rgb(243,207,11)" fg:x="679" fg:w="4"/><text x="54.7882%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="54.5382%" y="133" width="0.3213%" height="15" fill="rgb(254,179,35)" fg:x="679" fg:w="4"/><text x="54.7882%" y="143.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="54.5382%" y="117" width="0.3213%" height="15" fill="rgb(235,97,3)" fg:x="679" fg:w="4"/><text x="54.7882%" y="127.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (8 samples, 0.64%)</title><rect x="54.2972%" y="181" width="0.6426%" height="15" fill="rgb(215,155,33)" fg:x="676" fg:w="8"/><text x="54.5472%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (5 samples, 0.40%)</title><rect x="54.5382%" y="165" width="0.4016%" height="15" fill="rgb(223,128,12)" fg:x="679" fg:w="5"/><text x="54.7882%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="54.8594%" y="149" width="0.0803%" height="15" fill="rgb(208,157,18)" fg:x="683" fg:w="1"/><text x="55.1094%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.8594%" y="133" width="0.0803%" height="15" fill="rgb(249,70,54)" fg:x="683" fg:w="1"/><text x="55.1094%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.1004%" y="149" width="0.0803%" height="15" fill="rgb(244,118,24)" fg:x="686" fg:w="1"/><text x="55.3504%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.1807%" y="149" width="0.0803%" height="15" fill="rgb(211,54,0)" fg:x="687" fg:w="1"/><text x="55.4307%" y="159.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (9 samples, 0.72%)</title><rect x="54.9398%" y="165" width="0.7229%" height="15" fill="rgb(245,137,45)" fg:x="684" fg:w="9"/><text x="55.1898%" y="175.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (5 samples, 0.40%)</title><rect x="55.2610%" y="149" width="0.4016%" height="15" fill="rgb(232,154,31)" fg:x="688" fg:w="5"/><text x="55.5110%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (10 samples, 0.80%)</title><rect x="54.9398%" y="181" width="0.8032%" height="15" fill="rgb(253,6,39)" fg:x="684" fg:w="10"/><text x="55.1898%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="55.6627%" y="165" width="0.0803%" height="15" fill="rgb(234,183,24)" fg:x="693" fg:w="1"/><text x="55.9127%" y="175.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (23 samples, 1.85%)</title><rect x="53.9759%" y="213" width="1.8474%" height="15" fill="rgb(252,84,40)" fg:x="672" fg:w="23"/><text x="54.2259%" y="223.50">r..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (23 samples, 1.85%)</title><rect x="53.9759%" y="197" width="1.8474%" height="15" fill="rgb(224,65,2)" fg:x="672" fg:w="23"/><text x="54.2259%" y="207.50">r..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="55.7430%" y="181" width="0.0803%" height="15" fill="rgb(229,38,24)" fg:x="694" fg:w="1"/><text x="55.9930%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="55.8233%" y="181" width="0.0803%" height="15" fill="rgb(218,131,50)" fg:x="695" fg:w="1"/><text x="56.0733%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.8233%" y="165" width="0.0803%" height="15" fill="rgb(233,106,18)" fg:x="695" fg:w="1"/><text x="56.0733%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.8233%" y="149" width="0.0803%" height="15" fill="rgb(220,216,11)" fg:x="695" fg:w="1"/><text x="56.0733%" y="159.50"></text></g><g><title>&lt;regex_syntax::hir::ClassUnicodeIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="56.9478%" y="101" width="0.0803%" height="15" fill="rgb(251,100,45)" fg:x="709" fg:w="1"/><text x="57.1978%" y="111.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="57.0281%" y="101" width="0.4016%" height="15" fill="rgb(235,143,32)" fg:x="710" fg:w="5"/><text x="57.2781%" y="111.50"></text></g><g><title>__libc_free (4 samples, 0.32%)</title><rect x="57.4297%" y="101" width="0.3213%" height="15" fill="rgb(248,124,34)" fg:x="715" fg:w="4"/><text x="57.6797%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="57.7510%" y="101" width="0.2410%" height="15" fill="rgb(225,221,4)" fg:x="719" fg:w="3"/><text x="58.0010%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="57.8313%" y="85" width="0.1606%" height="15" fill="rgb(242,27,43)" fg:x="720" fg:w="2"/><text x="58.0813%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.9116%" y="69" width="0.0803%" height="15" fill="rgb(227,54,8)" fg:x="721" fg:w="1"/><text x="58.1616%" y="79.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="57.9116%" y="53" width="0.0803%" height="15" fill="rgb(253,139,49)" fg:x="721" fg:w="1"/><text x="58.1616%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="57.9920%" y="101" width="0.1606%" height="15" fill="rgb(231,26,43)" fg:x="722" fg:w="2"/><text x="58.2420%" y="111.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="58.3936%" y="69" width="0.1606%" height="15" fill="rgb(207,121,39)" fg:x="727" fg:w="2"/><text x="58.6436%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.6345%" y="37" width="0.0803%" height="15" fill="rgb(223,101,35)" fg:x="730" fg:w="1"/><text x="58.8845%" y="47.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="58.5542%" y="69" width="0.3213%" height="15" fill="rgb(232,87,23)" fg:x="729" fg:w="4"/><text x="58.8042%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="58.5542%" y="53" width="0.3213%" height="15" fill="rgb(225,180,29)" fg:x="729" fg:w="4"/><text x="58.8042%" y="63.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="58.7149%" y="37" width="0.1606%" height="15" fill="rgb(225,25,17)" fg:x="731" fg:w="2"/><text x="58.9649%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (14 samples, 1.12%)</title><rect x="58.1526%" y="101" width="1.1245%" height="15" fill="rgb(223,8,52)" fg:x="724" fg:w="14"/><text x="58.4026%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (14 samples, 1.12%)</title><rect x="58.1526%" y="85" width="1.1245%" height="15" fill="rgb(246,42,21)" fg:x="724" fg:w="14"/><text x="58.4026%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (5 samples, 0.40%)</title><rect x="58.8755%" y="69" width="0.4016%" height="15" fill="rgb(205,64,43)" fg:x="733" fg:w="5"/><text x="59.1255%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="59.2771%" y="101" width="0.0803%" height="15" fill="rgb(221,160,13)" fg:x="738" fg:w="1"/><text x="59.5271%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="59.2771%" y="85" width="0.0803%" height="15" fill="rgb(239,58,35)" fg:x="738" fg:w="1"/><text x="59.5271%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (43 samples, 3.45%)</title><rect x="59.3574%" y="101" width="3.4538%" height="15" fill="rgb(251,26,40)" fg:x="739" fg:w="43"/><text x="59.6074%" y="111.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (43 samples, 3.45%)</title><rect x="59.3574%" y="85" width="3.4538%" height="15" fill="rgb(247,0,4)" fg:x="739" fg:w="43"/><text x="59.6074%" y="95.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (43 samples, 3.45%)</title><rect x="59.3574%" y="69" width="3.4538%" height="15" fill="rgb(218,130,10)" fg:x="739" fg:w="43"/><text x="59.6074%" y="79.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="62.8112%" y="101" width="0.1606%" height="15" fill="rgb(239,32,7)" fg:x="782" fg:w="2"/><text x="63.0612%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (93 samples, 7.47%)</title><rect x="55.8233%" y="197" width="7.4699%" height="15" fill="rgb(210,192,24)" fg:x="695" fg:w="93"/><text x="56.0733%" y="207.50">&lt;core::ite..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (92 samples, 7.39%)</title><rect x="55.9036%" y="181" width="7.3896%" height="15" fill="rgb(226,212,17)" fg:x="696" fg:w="92"/><text x="56.1536%" y="191.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (92 samples, 7.39%)</title><rect x="55.9036%" y="165" width="7.3896%" height="15" fill="rgb(219,201,28)" fg:x="696" fg:w="92"/><text x="56.1536%" y="175.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (92 samples, 7.39%)</title><rect x="55.9036%" y="149" width="7.3896%" height="15" fill="rgb(235,207,41)" fg:x="696" fg:w="92"/><text x="56.1536%" y="159.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (92 samples, 7.39%)</title><rect x="55.9036%" y="133" width="7.3896%" height="15" fill="rgb(241,95,54)" fg:x="696" fg:w="92"/><text x="56.1536%" y="143.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (92 samples, 7.39%)</title><rect x="55.9036%" y="117" width="7.3896%" height="15" fill="rgb(248,12,23)" fg:x="696" fg:w="92"/><text x="56.1536%" y="127.50">regex_auto..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (4 samples, 0.32%)</title><rect x="62.9719%" y="101" width="0.3213%" height="15" fill="rgb(228,173,4)" fg:x="784" fg:w="4"/><text x="63.2219%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="62.9719%" y="85" width="0.3213%" height="15" fill="rgb(254,99,5)" fg:x="784" fg:w="4"/><text x="63.2219%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="62.9719%" y="69" width="0.3213%" height="15" fill="rgb(212,184,17)" fg:x="784" fg:w="4"/><text x="63.2219%" y="79.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="63.1325%" y="53" width="0.1606%" height="15" fill="rgb(252,174,1)" fg:x="786" fg:w="2"/><text x="63.3825%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.3735%" y="181" width="0.0803%" height="15" fill="rgb(241,118,51)" fg:x="789" fg:w="1"/><text x="63.6235%" y="191.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="63.4538%" y="181" width="0.0803%" height="15" fill="rgb(227,94,47)" fg:x="790" fg:w="1"/><text x="63.7038%" y="191.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="63.6948%" y="133" width="0.0803%" height="15" fill="rgb(229,104,2)" fg:x="793" fg:w="1"/><text x="63.9448%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (6 samples, 0.48%)</title><rect x="63.5341%" y="181" width="0.4819%" height="15" fill="rgb(219,28,31)" fg:x="791" fg:w="6"/><text x="63.7841%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="63.6948%" y="165" width="0.3213%" height="15" fill="rgb(233,109,36)" fg:x="793" fg:w="4"/><text x="63.9448%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="63.6948%" y="149" width="0.3213%" height="15" fill="rgb(246,88,11)" fg:x="793" fg:w="4"/><text x="63.9448%" y="159.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="63.7751%" y="133" width="0.2410%" height="15" fill="rgb(209,212,17)" fg:x="794" fg:w="3"/><text x="64.0251%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="64.0161%" y="181" width="0.2410%" height="15" fill="rgb(243,59,29)" fg:x="797" fg:w="3"/><text x="64.2661%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (152 samples, 12.21%)</title><rect x="52.2088%" y="229" width="12.2088%" height="15" fill="rgb(244,205,48)" fg:x="650" fg:w="152"/><text x="52.4588%" y="239.50">regex_automata::me..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (107 samples, 8.59%)</title><rect x="55.8233%" y="213" width="8.5944%" height="15" fill="rgb(227,30,6)" fg:x="695" fg:w="107"/><text x="56.0733%" y="223.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (14 samples, 1.12%)</title><rect x="63.2932%" y="197" width="1.1245%" height="15" fill="rgb(220,205,48)" fg:x="788" fg:w="14"/><text x="63.5432%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="64.2570%" y="181" width="0.1606%" height="15" fill="rgb(250,94,14)" fg:x="800" fg:w="2"/><text x="64.5070%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="64.4177%" y="197" width="0.0803%" height="15" fill="rgb(216,119,42)" fg:x="802" fg:w="1"/><text x="64.6677%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="64.4177%" y="181" width="0.0803%" height="15" fill="rgb(232,155,0)" fg:x="802" fg:w="1"/><text x="64.6677%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.4177%" y="165" width="0.0803%" height="15" fill="rgb(212,24,32)" fg:x="802" fg:w="1"/><text x="64.6677%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.4177%" y="149" width="0.0803%" height="15" fill="rgb(216,69,20)" fg:x="802" fg:w="1"/><text x="64.6677%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.4177%" y="133" width="0.0803%" height="15" fill="rgb(229,73,31)" fg:x="802" fg:w="1"/><text x="64.6677%" y="143.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="64.4980%" y="181" width="0.0803%" height="15" fill="rgb(224,219,20)" fg:x="803" fg:w="1"/><text x="64.7480%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="64.4177%" y="229" width="0.2410%" height="15" fill="rgb(215,146,41)" fg:x="802" fg:w="3"/><text x="64.6677%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="64.4177%" y="213" width="0.2410%" height="15" fill="rgb(244,71,31)" fg:x="802" fg:w="3"/><text x="64.6677%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="64.4980%" y="197" width="0.1606%" height="15" fill="rgb(224,24,11)" fg:x="803" fg:w="2"/><text x="64.7480%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.5783%" y="181" width="0.0803%" height="15" fill="rgb(229,76,15)" fg:x="804" fg:w="1"/><text x="64.8283%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.8193%" y="165" width="0.0803%" height="15" fill="rgb(209,93,2)" fg:x="807" fg:w="1"/><text x="65.0693%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="64.7390%" y="197" width="0.2410%" height="15" fill="rgb(216,200,50)" fg:x="806" fg:w="3"/><text x="64.9890%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="64.8193%" y="181" width="0.1606%" height="15" fill="rgb(211,67,34)" fg:x="807" fg:w="2"/><text x="65.0693%" y="191.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="64.8996%" y="165" width="0.0803%" height="15" fill="rgb(225,87,47)" fg:x="808" fg:w="1"/><text x="65.1496%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.8996%" y="149" width="0.0803%" height="15" fill="rgb(217,185,16)" fg:x="808" fg:w="1"/><text x="65.1496%" y="159.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="64.9799%" y="197" width="0.1606%" height="15" fill="rgb(205,0,0)" fg:x="809" fg:w="2"/><text x="65.2299%" y="207.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2 samples, 0.16%)</title><rect x="64.9799%" y="181" width="0.1606%" height="15" fill="rgb(207,116,45)" fg:x="809" fg:w="2"/><text x="65.2299%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.0602%" y="165" width="0.0803%" height="15" fill="rgb(221,156,26)" fg:x="810" fg:w="1"/><text x="65.3102%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.0602%" y="149" width="0.0803%" height="15" fill="rgb(213,140,4)" fg:x="810" fg:w="1"/><text x="65.3102%" y="159.50"></text></g><g><title>indefinite::rules::number::Number::check (182 samples, 14.62%)</title><rect x="50.6024%" y="293" width="14.6185%" height="15" fill="rgb(231,224,15)" fg:x="630" fg:w="182"/><text x="50.8524%" y="303.50">indefinite::rules::num..</text></g><g><title>regex::regex::string::Regex::new (164 samples, 13.17%)</title><rect x="52.0482%" y="277" width="13.1727%" height="15" fill="rgb(244,76,20)" fg:x="648" fg:w="164"/><text x="52.2982%" y="287.50">regex::regex::string..</text></g><g><title>regex::builders::string::RegexBuilder::build (164 samples, 13.17%)</title><rect x="52.0482%" y="261" width="13.1727%" height="15" fill="rgb(238,117,7)" fg:x="648" fg:w="164"/><text x="52.2982%" y="271.50">regex::builders::str..</text></g><g><title>regex_automata::meta::regex::Builder::build (164 samples, 13.17%)</title><rect x="52.0482%" y="245" width="13.1727%" height="15" fill="rgb(235,1,10)" fg:x="648" fg:w="164"/><text x="52.2982%" y="255.50">regex_automata::meta..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (7 samples, 0.56%)</title><rect x="64.6586%" y="229" width="0.5622%" height="15" fill="rgb(216,165,6)" fg:x="805" fg:w="7"/><text x="64.9086%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (7 samples, 0.56%)</title><rect x="64.6586%" y="213" width="0.5622%" height="15" fill="rgb(246,91,35)" fg:x="805" fg:w="7"/><text x="64.9086%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.1406%" y="197" width="0.0803%" height="15" fill="rgb(228,96,24)" fg:x="811" fg:w="1"/><text x="65.3906%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.1406%" y="181" width="0.0803%" height="15" fill="rgb(254,217,53)" fg:x="811" fg:w="1"/><text x="65.3906%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.1406%" y="165" width="0.0803%" height="15" fill="rgb(209,60,0)" fg:x="811" fg:w="1"/><text x="65.3906%" y="175.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="65.2209%" y="261" width="0.1606%" height="15" fill="rgb(250,93,26)" fg:x="812" fg:w="2"/><text x="65.4709%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="65.2209%" y="245" width="0.1606%" height="15" fill="rgb(211,9,40)" fg:x="812" fg:w="2"/><text x="65.4709%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="65.3012%" y="229" width="0.0803%" height="15" fill="rgb(242,57,20)" fg:x="813" fg:w="1"/><text x="65.5512%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="65.3815%" y="213" width="0.0803%" height="15" fill="rgb(248,85,48)" fg:x="814" fg:w="1"/><text x="65.6315%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.3815%" y="197" width="0.0803%" height="15" fill="rgb(212,117,2)" fg:x="814" fg:w="1"/><text x="65.6315%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="65.3815%" y="261" width="0.1606%" height="15" fill="rgb(243,19,3)" fg:x="814" fg:w="2"/><text x="65.6315%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="65.3815%" y="245" width="0.1606%" height="15" fill="rgb(232,217,24)" fg:x="814" fg:w="2"/><text x="65.6315%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="65.3815%" y="229" width="0.1606%" height="15" fill="rgb(224,175,40)" fg:x="814" fg:w="2"/><text x="65.6315%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="65.4618%" y="213" width="0.0803%" height="15" fill="rgb(212,162,32)" fg:x="815" fg:w="1"/><text x="65.7118%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.4618%" y="197" width="0.0803%" height="15" fill="rgb(215,9,4)" fg:x="815" fg:w="1"/><text x="65.7118%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.5422%" y="213" width="0.0803%" height="15" fill="rgb(242,42,7)" fg:x="816" fg:w="1"/><text x="65.7922%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="65.6225%" y="213" width="0.0803%" height="15" fill="rgb(242,184,45)" fg:x="817" fg:w="1"/><text x="65.8725%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.6225%" y="197" width="0.0803%" height="15" fill="rgb(228,111,51)" fg:x="817" fg:w="1"/><text x="65.8725%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="65.6225%" y="181" width="0.0803%" height="15" fill="rgb(236,147,17)" fg:x="817" fg:w="1"/><text x="65.8725%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="65.6225%" y="165" width="0.0803%" height="15" fill="rgb(210,75,22)" fg:x="817" fg:w="1"/><text x="65.8725%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.6225%" y="149" width="0.0803%" height="15" fill="rgb(217,159,45)" fg:x="817" fg:w="1"/><text x="65.8725%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="65.6225%" y="133" width="0.0803%" height="15" fill="rgb(245,165,53)" fg:x="817" fg:w="1"/><text x="65.8725%" y="143.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="65.7028%" y="213" width="0.0803%" height="15" fill="rgb(251,190,50)" fg:x="818" fg:w="1"/><text x="65.9528%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="66.0241%" y="181" width="0.2410%" height="15" fill="rgb(208,203,29)" fg:x="822" fg:w="3"/><text x="66.2741%" y="191.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="66.1847%" y="165" width="0.0803%" height="15" fill="rgb(207,209,35)" fg:x="824" fg:w="1"/><text x="66.4347%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.1847%" y="149" width="0.0803%" height="15" fill="rgb(230,144,49)" fg:x="824" fg:w="1"/><text x="66.4347%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="65.8635%" y="197" width="0.4819%" height="15" fill="rgb(229,31,6)" fg:x="820" fg:w="6"/><text x="66.1135%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="66.2651%" y="181" width="0.0803%" height="15" fill="rgb(251,129,24)" fg:x="825" fg:w="1"/><text x="66.5151%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="66.2651%" y="165" width="0.0803%" height="15" fill="rgb(235,105,15)" fg:x="825" fg:w="1"/><text x="66.5151%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="66.3454%" y="165" width="0.0803%" height="15" fill="rgb(216,52,43)" fg:x="826" fg:w="1"/><text x="66.5954%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.3454%" y="149" width="0.0803%" height="15" fill="rgb(238,144,41)" fg:x="826" fg:w="1"/><text x="66.5954%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.3454%" y="133" width="0.0803%" height="15" fill="rgb(243,63,9)" fg:x="826" fg:w="1"/><text x="66.5954%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="66.3454%" y="181" width="0.1606%" height="15" fill="rgb(246,208,1)" fg:x="826" fg:w="2"/><text x="66.5954%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="66.4257%" y="165" width="0.0803%" height="15" fill="rgb(233,182,18)" fg:x="827" fg:w="1"/><text x="66.6757%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="66.4257%" y="149" width="0.0803%" height="15" fill="rgb(242,224,8)" fg:x="827" fg:w="1"/><text x="66.6757%" y="159.50"></text></g><g><title>regex_automata::meta::strategy::new (11 samples, 0.88%)</title><rect x="65.7831%" y="213" width="0.8835%" height="15" fill="rgb(243,54,37)" fg:x="819" fg:w="11"/><text x="66.0331%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (4 samples, 0.32%)</title><rect x="66.3454%" y="197" width="0.3213%" height="15" fill="rgb(233,192,12)" fg:x="826" fg:w="4"/><text x="66.5954%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="66.5060%" y="181" width="0.1606%" height="15" fill="rgb(251,192,53)" fg:x="828" fg:w="2"/><text x="66.7560%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="66.5060%" y="165" width="0.1606%" height="15" fill="rgb(246,141,26)" fg:x="828" fg:w="2"/><text x="66.7560%" y="175.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="66.7470%" y="165" width="0.0803%" height="15" fill="rgb(239,195,19)" fg:x="831" fg:w="1"/><text x="66.9970%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.7470%" y="149" width="0.0803%" height="15" fill="rgb(241,16,39)" fg:x="831" fg:w="1"/><text x="66.9970%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.7470%" y="133" width="0.0803%" height="15" fill="rgb(223,13,53)" fg:x="831" fg:w="1"/><text x="66.9970%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="66.7470%" y="117" width="0.0803%" height="15" fill="rgb(214,227,0)" fg:x="831" fg:w="1"/><text x="66.9970%" y="127.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="66.8273%" y="165" width="0.0803%" height="15" fill="rgb(228,103,26)" fg:x="832" fg:w="1"/><text x="67.0773%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="66.8273%" y="149" width="0.0803%" height="15" fill="rgb(254,177,53)" fg:x="832" fg:w="1"/><text x="67.0773%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="66.6667%" y="213" width="0.3213%" height="15" fill="rgb(208,201,34)" fg:x="830" fg:w="4"/><text x="66.9167%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="66.6667%" y="197" width="0.3213%" height="15" fill="rgb(212,39,5)" fg:x="830" fg:w="4"/><text x="66.9167%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="66.6667%" y="181" width="0.3213%" height="15" fill="rgb(246,117,3)" fg:x="830" fg:w="4"/><text x="66.9167%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="66.9076%" y="165" width="0.0803%" height="15" fill="rgb(244,118,39)" fg:x="833" fg:w="1"/><text x="67.1576%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.9076%" y="149" width="0.0803%" height="15" fill="rgb(241,64,10)" fg:x="833" fg:w="1"/><text x="67.1576%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.9076%" y="133" width="0.0803%" height="15" fill="rgb(229,39,44)" fg:x="833" fg:w="1"/><text x="67.1576%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.9076%" y="117" width="0.0803%" height="15" fill="rgb(230,226,3)" fg:x="833" fg:w="1"/><text x="67.1576%" y="127.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="66.9880%" y="181" width="0.1606%" height="15" fill="rgb(222,13,42)" fg:x="834" fg:w="2"/><text x="67.2380%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="66.9880%" y="165" width="0.1606%" height="15" fill="rgb(247,180,54)" fg:x="834" fg:w="2"/><text x="67.2380%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="67.1486%" y="181" width="0.0803%" height="15" fill="rgb(205,96,16)" fg:x="836" fg:w="1"/><text x="67.3986%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.3896%" y="149" width="0.0803%" height="15" fill="rgb(205,100,21)" fg:x="839" fg:w="1"/><text x="67.6396%" y="159.50"></text></g><g><title>regex::regex::string::Regex::new (25 samples, 2.01%)</title><rect x="65.5422%" y="261" width="2.0080%" height="15" fill="rgb(248,51,4)" fg:x="816" fg:w="25"/><text x="65.7922%" y="271.50">r..</text></g><g><title>regex::builders::string::RegexBuilder::build (25 samples, 2.01%)</title><rect x="65.5422%" y="245" width="2.0080%" height="15" fill="rgb(217,197,30)" fg:x="816" fg:w="25"/><text x="65.7922%" y="255.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (25 samples, 2.01%)</title><rect x="65.5422%" y="229" width="2.0080%" height="15" fill="rgb(240,179,40)" fg:x="816" fg:w="25"/><text x="65.7922%" y="239.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (7 samples, 0.56%)</title><rect x="66.9880%" y="213" width="0.5622%" height="15" fill="rgb(212,185,35)" fg:x="834" fg:w="7"/><text x="67.2380%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (7 samples, 0.56%)</title><rect x="66.9880%" y="197" width="0.5622%" height="15" fill="rgb(251,222,31)" fg:x="834" fg:w="7"/><text x="67.2380%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (4 samples, 0.32%)</title><rect x="67.2289%" y="181" width="0.3213%" height="15" fill="rgb(208,140,36)" fg:x="837" fg:w="4"/><text x="67.4789%" y="191.50"></text></g><g><title>regex_syntax::hir::Hir::concat (3 samples, 0.24%)</title><rect x="67.3092%" y="165" width="0.2410%" height="15" fill="rgb(220,148,1)" fg:x="838" fg:w="3"/><text x="67.5592%" y="175.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="67.4699%" y="149" width="0.0803%" height="15" fill="rgb(254,4,28)" fg:x="840" fg:w="1"/><text x="67.7199%" y="159.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.4699%" y="133" width="0.0803%" height="15" fill="rgb(222,185,44)" fg:x="840" fg:w="1"/><text x="67.7199%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.5502%" y="197" width="0.0803%" height="15" fill="rgb(215,74,39)" fg:x="841" fg:w="1"/><text x="67.8002%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="67.6305%" y="197" width="0.3213%" height="15" fill="rgb(247,86,4)" fg:x="842" fg:w="4"/><text x="67.8805%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.8715%" y="181" width="0.0803%" height="15" fill="rgb(231,105,32)" fg:x="845" fg:w="1"/><text x="68.1215%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.8715%" y="165" width="0.0803%" height="15" fill="rgb(222,65,35)" fg:x="845" fg:w="1"/><text x="68.1215%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="67.8715%" y="149" width="0.0803%" height="15" fill="rgb(218,145,35)" fg:x="845" fg:w="1"/><text x="68.1215%" y="159.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (35 samples, 2.81%)</title><rect x="65.2209%" y="277" width="2.8112%" height="15" fill="rgb(208,7,15)" fg:x="812" fg:w="35"/><text x="65.4709%" y="287.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.48%)</title><rect x="67.5502%" y="261" width="0.4819%" height="15" fill="rgb(209,83,13)" fg:x="841" fg:w="6"/><text x="67.8002%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.48%)</title><rect x="67.5502%" y="245" width="0.4819%" height="15" fill="rgb(218,3,10)" fg:x="841" fg:w="6"/><text x="67.8002%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.48%)</title><rect x="67.5502%" y="229" width="0.4819%" height="15" fill="rgb(211,219,4)" fg:x="841" fg:w="6"/><text x="67.8002%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="67.5502%" y="213" width="0.4819%" height="15" fill="rgb(228,194,12)" fg:x="841" fg:w="6"/><text x="67.8002%" y="223.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="67.9518%" y="197" width="0.0803%" height="15" fill="rgb(210,175,7)" fg:x="846" fg:w="1"/><text x="68.2018%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.9518%" y="181" width="0.0803%" height="15" fill="rgb(243,132,6)" fg:x="846" fg:w="1"/><text x="68.2018%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.9518%" y="165" width="0.0803%" height="15" fill="rgb(207,72,18)" fg:x="846" fg:w="1"/><text x="68.2018%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.9518%" y="149" width="0.0803%" height="15" fill="rgb(236,1,18)" fg:x="846" fg:w="1"/><text x="68.2018%" y="159.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (380 samples, 30.52%)</title><rect x="37.5904%" y="373" width="30.5221%" height="15" fill="rgb(227,0,18)" fg:x="468" fg:w="380"/><text x="37.8404%" y="383.50">&lt;&amp;kernel::model::EntityPtr as plugins_core::looki..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (355 samples, 28.51%)</title><rect x="39.5984%" y="357" width="28.5141%" height="15" fill="rgb(247,37,5)" fg:x="493" fg:w="355"/><text x="39.8484%" y="367.50">plugins_core::looking::model::Unqualified::qua..</text></g><g><title>indefinite::indefinite (355 samples, 28.51%)</title><rect x="39.5984%" y="341" width="28.5141%" height="15" fill="rgb(237,179,24)" fg:x="493" fg:w="355"/><text x="39.8484%" y="351.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (355 samples, 28.51%)</title><rect x="39.5984%" y="325" width="28.5141%" height="15" fill="rgb(226,53,20)" fg:x="493" fg:w="355"/><text x="39.8484%" y="335.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (354 samples, 28.43%)</title><rect x="39.6787%" y="309" width="28.4337%" height="15" fill="rgb(247,75,7)" fg:x="494" fg:w="354"/><text x="39.9287%" y="319.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (36 samples, 2.89%)</title><rect x="65.2209%" y="293" width="2.8916%" height="15" fill="rgb(233,96,12)" fg:x="812" fg:w="36"/><text x="65.4709%" y="303.50">in..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="68.0321%" y="277" width="0.0803%" height="15" fill="rgb(224,125,0)" fg:x="847" fg:w="1"/><text x="68.2821%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.1124%" y="357" width="0.1606%" height="15" fill="rgb(224,92,25)" fg:x="848" fg:w="2"/><text x="68.3624%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.1928%" y="341" width="0.0803%" height="15" fill="rgb(224,42,24)" fg:x="849" fg:w="1"/><text x="68.4428%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.1928%" y="325" width="0.0803%" height="15" fill="rgb(234,132,49)" fg:x="849" fg:w="1"/><text x="68.4428%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.1928%" y="309" width="0.0803%" height="15" fill="rgb(248,100,35)" fg:x="849" fg:w="1"/><text x="68.4428%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.1928%" y="293" width="0.0803%" height="15" fill="rgb(239,94,40)" fg:x="849" fg:w="1"/><text x="68.4428%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.1928%" y="277" width="0.0803%" height="15" fill="rgb(235,139,28)" fg:x="849" fg:w="1"/><text x="68.4428%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.1928%" y="261" width="0.0803%" height="15" fill="rgb(217,144,7)" fg:x="849" fg:w="1"/><text x="68.4428%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.1928%" y="245" width="0.0803%" height="15" fill="rgb(227,55,4)" fg:x="849" fg:w="1"/><text x="68.4428%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.1928%" y="229" width="0.0803%" height="15" fill="rgb(252,82,54)" fg:x="849" fg:w="1"/><text x="68.4428%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.1928%" y="213" width="0.0803%" height="15" fill="rgb(245,172,4)" fg:x="849" fg:w="1"/><text x="68.4428%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.1928%" y="197" width="0.0803%" height="15" fill="rgb(207,26,27)" fg:x="849" fg:w="1"/><text x="68.4428%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.1928%" y="181" width="0.0803%" height="15" fill="rgb(252,98,18)" fg:x="849" fg:w="1"/><text x="68.4428%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.1928%" y="165" width="0.0803%" height="15" fill="rgb(244,8,26)" fg:x="849" fg:w="1"/><text x="68.4428%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.1928%" y="149" width="0.0803%" height="15" fill="rgb(237,173,45)" fg:x="849" fg:w="1"/><text x="68.4428%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.1928%" y="133" width="0.0803%" height="15" fill="rgb(208,213,49)" fg:x="849" fg:w="1"/><text x="68.4428%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.1928%" y="117" width="0.0803%" height="15" fill="rgb(212,122,37)" fg:x="849" fg:w="1"/><text x="68.4428%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.1928%" y="101" width="0.0803%" height="15" fill="rgb(213,80,17)" fg:x="849" fg:w="1"/><text x="68.4428%" y="111.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.2731%" y="325" width="0.0803%" height="15" fill="rgb(206,210,43)" fg:x="850" fg:w="1"/><text x="68.5231%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="68.3534%" y="325" width="0.0803%" height="15" fill="rgb(229,214,3)" fg:x="851" fg:w="1"/><text x="68.6034%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.3534%" y="309" width="0.0803%" height="15" fill="rgb(235,213,29)" fg:x="851" fg:w="1"/><text x="68.6034%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.40%)</title><rect x="68.1124%" y="373" width="0.4016%" height="15" fill="rgb(248,135,26)" fg:x="848" fg:w="5"/><text x="68.3624%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="68.2731%" y="357" width="0.2410%" height="15" fill="rgb(242,188,12)" fg:x="850" fg:w="3"/><text x="68.5231%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="68.2731%" y="341" width="0.2410%" height="15" fill="rgb(245,38,12)" fg:x="850" fg:w="3"/><text x="68.5231%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="68.4337%" y="325" width="0.0803%" height="15" fill="rgb(218,42,13)" fg:x="852" fg:w="1"/><text x="68.6837%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="68.4337%" y="309" width="0.0803%" height="15" fill="rgb(238,132,49)" fg:x="852" fg:w="1"/><text x="68.6837%" y="319.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="68.4337%" y="293" width="0.0803%" height="15" fill="rgb(209,196,19)" fg:x="852" fg:w="1"/><text x="68.6837%" y="303.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.4337%" y="277" width="0.0803%" height="15" fill="rgb(244,131,22)" fg:x="852" fg:w="1"/><text x="68.6837%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.4337%" y="261" width="0.0803%" height="15" fill="rgb(223,18,34)" fg:x="852" fg:w="1"/><text x="68.6837%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.5944%" y="309" width="0.0803%" height="15" fill="rgb(252,124,54)" fg:x="854" fg:w="1"/><text x="68.8444%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="68.6747%" y="309" width="0.0803%" height="15" fill="rgb(229,106,42)" fg:x="855" fg:w="1"/><text x="68.9247%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="68.6747%" y="293" width="0.0803%" height="15" fill="rgb(221,129,1)" fg:x="855" fg:w="1"/><text x="68.9247%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="68.5141%" y="325" width="0.3213%" height="15" fill="rgb(229,74,15)" fg:x="853" fg:w="4"/><text x="68.7641%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.7550%" y="309" width="0.0803%" height="15" fill="rgb(210,206,50)" fg:x="856" fg:w="1"/><text x="69.0050%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.7550%" y="293" width="0.0803%" height="15" fill="rgb(251,114,31)" fg:x="856" fg:w="1"/><text x="69.0050%" y="303.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::desc (5 samples, 0.40%)</title><rect x="68.5141%" y="341" width="0.4016%" height="15" fill="rgb(215,225,28)" fg:x="853" fg:w="5"/><text x="68.7641%" y="351.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="68.8353%" y="325" width="0.0803%" height="15" fill="rgb(237,109,14)" fg:x="857" fg:w="1"/><text x="69.0853%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="68.8353%" y="309" width="0.0803%" height="15" fill="rgb(230,13,37)" fg:x="857" fg:w="1"/><text x="69.0853%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="68.9157%" y="325" width="0.0803%" height="15" fill="rgb(231,40,28)" fg:x="858" fg:w="1"/><text x="69.1657%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.9157%" y="309" width="0.0803%" height="15" fill="rgb(231,202,18)" fg:x="858" fg:w="1"/><text x="69.1657%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.9157%" y="293" width="0.0803%" height="15" fill="rgb(225,33,18)" fg:x="858" fg:w="1"/><text x="69.1657%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="68.9157%" y="277" width="0.0803%" height="15" fill="rgb(223,64,47)" fg:x="858" fg:w="1"/><text x="69.1657%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.9157%" y="261" width="0.0803%" height="15" fill="rgb(234,114,13)" fg:x="858" fg:w="1"/><text x="69.1657%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.9157%" y="245" width="0.0803%" height="15" fill="rgb(248,56,40)" fg:x="858" fg:w="1"/><text x="69.1657%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.9157%" y="229" width="0.0803%" height="15" fill="rgb(221,194,21)" fg:x="858" fg:w="1"/><text x="69.1657%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.9157%" y="213" width="0.0803%" height="15" fill="rgb(242,108,46)" fg:x="858" fg:w="1"/><text x="69.1657%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (7 samples, 0.56%)</title><rect x="68.5141%" y="357" width="0.5622%" height="15" fill="rgb(220,106,10)" fg:x="853" fg:w="7"/><text x="68.7641%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="68.9157%" y="341" width="0.1606%" height="15" fill="rgb(211,88,4)" fg:x="858" fg:w="2"/><text x="69.1657%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="68.9960%" y="325" width="0.0803%" height="15" fill="rgb(214,95,34)" fg:x="859" fg:w="1"/><text x="69.2460%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.9960%" y="309" width="0.0803%" height="15" fill="rgb(250,160,33)" fg:x="859" fg:w="1"/><text x="69.2460%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.0763%" y="293" width="0.0803%" height="15" fill="rgb(225,29,10)" fg:x="860" fg:w="1"/><text x="69.3263%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.0763%" y="277" width="0.0803%" height="15" fill="rgb(224,28,30)" fg:x="860" fg:w="1"/><text x="69.3263%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.1566%" y="277" width="0.0803%" height="15" fill="rgb(231,77,4)" fg:x="861" fg:w="1"/><text x="69.4066%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="69.1566%" y="293" width="0.1606%" height="15" fill="rgb(209,63,21)" fg:x="861" fg:w="2"/><text x="69.4066%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.2369%" y="277" width="0.0803%" height="15" fill="rgb(226,22,11)" fg:x="862" fg:w="1"/><text x="69.4869%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.2369%" y="261" width="0.0803%" height="15" fill="rgb(216,82,30)" fg:x="862" fg:w="1"/><text x="69.4869%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.2369%" y="245" width="0.0803%" height="15" fill="rgb(246,227,38)" fg:x="862" fg:w="1"/><text x="69.4869%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.2369%" y="229" width="0.0803%" height="15" fill="rgb(251,203,53)" fg:x="862" fg:w="1"/><text x="69.4869%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.2369%" y="213" width="0.0803%" height="15" fill="rgb(254,101,1)" fg:x="862" fg:w="1"/><text x="69.4869%" y="223.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="69.3173%" y="245" width="0.0803%" height="15" fill="rgb(241,180,5)" fg:x="863" fg:w="1"/><text x="69.5673%" y="255.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="69.3173%" y="293" width="0.1606%" height="15" fill="rgb(218,168,4)" fg:x="863" fg:w="2"/><text x="69.5673%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="69.3173%" y="277" width="0.1606%" height="15" fill="rgb(224,223,32)" fg:x="863" fg:w="2"/><text x="69.5673%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.3173%" y="261" width="0.1606%" height="15" fill="rgb(236,106,22)" fg:x="863" fg:w="2"/><text x="69.5673%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.3976%" y="245" width="0.0803%" height="15" fill="rgb(206,121,5)" fg:x="864" fg:w="1"/><text x="69.6476%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.3976%" y="229" width="0.0803%" height="15" fill="rgb(233,87,28)" fg:x="864" fg:w="1"/><text x="69.6476%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.3976%" y="213" width="0.0803%" height="15" fill="rgb(236,137,17)" fg:x="864" fg:w="1"/><text x="69.6476%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="69.3976%" y="197" width="0.0803%" height="15" fill="rgb(209,183,38)" fg:x="864" fg:w="1"/><text x="69.6476%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="69.3976%" y="181" width="0.0803%" height="15" fill="rgb(206,162,44)" fg:x="864" fg:w="1"/><text x="69.6476%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13 samples, 1.04%)</title><rect x="68.5141%" y="373" width="1.0442%" height="15" fill="rgb(237,70,39)" fg:x="853" fg:w="13"/><text x="68.7641%" y="383.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (6 samples, 0.48%)</title><rect x="69.0763%" y="357" width="0.4819%" height="15" fill="rgb(212,176,5)" fg:x="860" fg:w="6"/><text x="69.3263%" y="367.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (6 samples, 0.48%)</title><rect x="69.0763%" y="341" width="0.4819%" height="15" fill="rgb(232,95,16)" fg:x="860" fg:w="6"/><text x="69.3263%" y="351.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.48%)</title><rect x="69.0763%" y="325" width="0.4819%" height="15" fill="rgb(219,115,35)" fg:x="860" fg:w="6"/><text x="69.3263%" y="335.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="69.0763%" y="309" width="0.4819%" height="15" fill="rgb(251,67,27)" fg:x="860" fg:w="6"/><text x="69.3263%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="69.4779%" y="293" width="0.0803%" height="15" fill="rgb(222,95,40)" fg:x="865" fg:w="1"/><text x="69.7279%" y="303.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="69.4779%" y="277" width="0.0803%" height="15" fill="rgb(250,35,16)" fg:x="865" fg:w="1"/><text x="69.7279%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.4779%" y="261" width="0.0803%" height="15" fill="rgb(224,86,44)" fg:x="865" fg:w="1"/><text x="69.7279%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.4779%" y="245" width="0.0803%" height="15" fill="rgb(237,53,53)" fg:x="865" fg:w="1"/><text x="69.7279%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.4779%" y="229" width="0.0803%" height="15" fill="rgb(208,171,33)" fg:x="865" fg:w="1"/><text x="69.7279%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.4779%" y="213" width="0.0803%" height="15" fill="rgb(222,64,27)" fg:x="865" fg:w="1"/><text x="69.7279%" y="223.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.4779%" y="197" width="0.0803%" height="15" fill="rgb(221,121,35)" fg:x="865" fg:w="1"/><text x="69.7279%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.4779%" y="181" width="0.0803%" height="15" fill="rgb(228,137,42)" fg:x="865" fg:w="1"/><text x="69.7279%" y="191.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (411 samples, 33.01%)</title><rect x="36.6265%" y="533" width="33.0120%" height="15" fill="rgb(227,54,21)" fg:x="456" fg:w="411"/><text x="36.8765%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (411 samples, 33.01%)</title><rect x="36.6265%" y="517" width="33.0120%" height="15" fill="rgb(240,168,33)" fg:x="456" fg:w="411"/><text x="36.8765%" y="527.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (411 samples, 33.01%)</title><rect x="36.6265%" y="501" width="33.0120%" height="15" fill="rgb(243,159,6)" fg:x="456" fg:w="411"/><text x="36.8765%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (411 samples, 33.01%)</title><rect x="36.6265%" y="485" width="33.0120%" height="15" fill="rgb(205,211,41)" fg:x="456" fg:w="411"/><text x="36.8765%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (411 samples, 33.01%)</title><rect x="36.6265%" y="469" width="33.0120%" height="15" fill="rgb(253,30,1)" fg:x="456" fg:w="411"/><text x="36.8765%" y="479.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (411 samples, 33.01%)</title><rect x="36.6265%" y="453" width="33.0120%" height="15" fill="rgb(226,80,18)" fg:x="456" fg:w="411"/><text x="36.8765%" y="463.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (411 samples, 33.01%)</title><rect x="36.6265%" y="437" width="33.0120%" height="15" fill="rgb(253,156,46)" fg:x="456" fg:w="411"/><text x="36.8765%" y="447.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnc..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (411 samples, 33.01%)</title><rect x="36.6265%" y="421" width="33.0120%" height="15" fill="rgb(248,87,27)" fg:x="456" fg:w="411"/><text x="36.8765%" y="431.50">&lt;engine::session::state::State as kernel::actions::Pe..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (411 samples, 33.01%)</title><rect x="36.6265%" y="405" width="33.0120%" height="15" fill="rgb(227,122,2)" fg:x="456" fg:w="411"/><text x="36.8765%" y="415.50">&lt;plugins_core::looking::actions::LookAction as kernel..</text></g><g><title>plugins_core::looking::model::new_area_observation (401 samples, 32.21%)</title><rect x="37.4297%" y="389" width="32.2088%" height="15" fill="rgb(229,94,39)" fg:x="466" fg:w="401"/><text x="37.6797%" y="399.50">plugins_core::looking::model::new_area_observation</text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="69.5582%" y="373" width="0.0803%" height="15" fill="rgb(225,173,31)" fg:x="866" fg:w="1"/><text x="69.8082%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="69.5582%" y="357" width="0.0803%" height="15" fill="rgb(239,176,30)" fg:x="866" fg:w="1"/><text x="69.8082%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.5582%" y="341" width="0.0803%" height="15" fill="rgb(212,104,21)" fg:x="866" fg:w="1"/><text x="69.8082%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.7992%" y="453" width="0.0803%" height="15" fill="rgb(240,209,40)" fg:x="869" fg:w="1"/><text x="70.0492%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.7992%" y="437" width="0.0803%" height="15" fill="rgb(234,195,5)" fg:x="869" fg:w="1"/><text x="70.0492%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.7992%" y="421" width="0.0803%" height="15" fill="rgb(238,213,1)" fg:x="869" fg:w="1"/><text x="70.0492%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.7992%" y="405" width="0.0803%" height="15" fill="rgb(235,182,54)" fg:x="869" fg:w="1"/><text x="70.0492%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.7992%" y="389" width="0.0803%" height="15" fill="rgb(229,50,46)" fg:x="869" fg:w="1"/><text x="70.0492%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="69.7992%" y="373" width="0.0803%" height="15" fill="rgb(219,145,13)" fg:x="869" fg:w="1"/><text x="70.0492%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="69.7992%" y="357" width="0.0803%" height="15" fill="rgb(220,226,10)" fg:x="869" fg:w="1"/><text x="70.0492%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.7992%" y="469" width="0.1606%" height="15" fill="rgb(248,47,30)" fg:x="869" fg:w="2"/><text x="70.0492%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.8795%" y="453" width="0.0803%" height="15" fill="rgb(231,209,44)" fg:x="870" fg:w="1"/><text x="70.1295%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.8795%" y="437" width="0.0803%" height="15" fill="rgb(209,80,30)" fg:x="870" fg:w="1"/><text x="70.1295%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.8795%" y="421" width="0.0803%" height="15" fill="rgb(232,9,14)" fg:x="870" fg:w="1"/><text x="70.1295%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.8795%" y="405" width="0.0803%" height="15" fill="rgb(243,91,43)" fg:x="870" fg:w="1"/><text x="70.1295%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.8795%" y="389" width="0.0803%" height="15" fill="rgb(231,90,52)" fg:x="870" fg:w="1"/><text x="70.1295%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.8795%" y="373" width="0.0803%" height="15" fill="rgb(253,192,44)" fg:x="870" fg:w="1"/><text x="70.1295%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.8795%" y="357" width="0.0803%" height="15" fill="rgb(241,66,31)" fg:x="870" fg:w="1"/><text x="70.1295%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.8795%" y="341" width="0.0803%" height="15" fill="rgb(235,81,37)" fg:x="870" fg:w="1"/><text x="70.1295%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.8795%" y="325" width="0.0803%" height="15" fill="rgb(223,221,9)" fg:x="870" fg:w="1"/><text x="70.1295%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.8795%" y="309" width="0.0803%" height="15" fill="rgb(242,180,7)" fg:x="870" fg:w="1"/><text x="70.1295%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.8795%" y="293" width="0.0803%" height="15" fill="rgb(243,78,19)" fg:x="870" fg:w="1"/><text x="70.1295%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.8795%" y="277" width="0.0803%" height="15" fill="rgb(233,23,17)" fg:x="870" fg:w="1"/><text x="70.1295%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.8795%" y="261" width="0.0803%" height="15" fill="rgb(252,122,45)" fg:x="870" fg:w="1"/><text x="70.1295%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.8795%" y="245" width="0.0803%" height="15" fill="rgb(247,108,20)" fg:x="870" fg:w="1"/><text x="70.1295%" y="255.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="69.7992%" y="485" width="0.3213%" height="15" fill="rgb(235,84,21)" fg:x="869" fg:w="4"/><text x="70.0492%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="69.9598%" y="469" width="0.1606%" height="15" fill="rgb(247,129,10)" fg:x="871" fg:w="2"/><text x="70.2098%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.9598%" y="453" width="0.1606%" height="15" fill="rgb(208,173,14)" fg:x="871" fg:w="2"/><text x="70.2098%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.0402%" y="437" width="0.0803%" height="15" fill="rgb(236,31,38)" fg:x="872" fg:w="1"/><text x="70.2902%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.0402%" y="421" width="0.0803%" height="15" fill="rgb(232,65,17)" fg:x="872" fg:w="1"/><text x="70.2902%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.1205%" y="405" width="0.0803%" height="15" fill="rgb(224,45,49)" fg:x="873" fg:w="1"/><text x="70.3705%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.1205%" y="389" width="0.0803%" height="15" fill="rgb(225,2,53)" fg:x="873" fg:w="1"/><text x="70.3705%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.1205%" y="373" width="0.0803%" height="15" fill="rgb(248,210,53)" fg:x="873" fg:w="1"/><text x="70.3705%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.1205%" y="357" width="0.0803%" height="15" fill="rgb(211,1,30)" fg:x="873" fg:w="1"/><text x="70.3705%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.1205%" y="341" width="0.0803%" height="15" fill="rgb(224,96,15)" fg:x="873" fg:w="1"/><text x="70.3705%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.1205%" y="325" width="0.0803%" height="15" fill="rgb(252,45,11)" fg:x="873" fg:w="1"/><text x="70.3705%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.1205%" y="309" width="0.0803%" height="15" fill="rgb(220,125,38)" fg:x="873" fg:w="1"/><text x="70.3705%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.1205%" y="293" width="0.0803%" height="15" fill="rgb(243,161,33)" fg:x="873" fg:w="1"/><text x="70.3705%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.1205%" y="277" width="0.0803%" height="15" fill="rgb(248,197,34)" fg:x="873" fg:w="1"/><text x="70.3705%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="70.1205%" y="261" width="0.0803%" height="15" fill="rgb(228,165,23)" fg:x="873" fg:w="1"/><text x="70.3705%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="70.1205%" y="245" width="0.0803%" height="15" fill="rgb(236,94,38)" fg:x="873" fg:w="1"/><text x="70.3705%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="70.1205%" y="421" width="0.1606%" height="15" fill="rgb(220,13,23)" fg:x="873" fg:w="2"/><text x="70.3705%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.2008%" y="405" width="0.0803%" height="15" fill="rgb(234,26,39)" fg:x="874" fg:w="1"/><text x="70.4508%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.2008%" y="389" width="0.0803%" height="15" fill="rgb(205,117,44)" fg:x="874" fg:w="1"/><text x="70.4508%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.2008%" y="373" width="0.0803%" height="15" fill="rgb(250,42,2)" fg:x="874" fg:w="1"/><text x="70.4508%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.2008%" y="357" width="0.0803%" height="15" fill="rgb(223,83,14)" fg:x="874" fg:w="1"/><text x="70.4508%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.2008%" y="341" width="0.0803%" height="15" fill="rgb(241,147,50)" fg:x="874" fg:w="1"/><text x="70.4508%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.2008%" y="325" width="0.0803%" height="15" fill="rgb(218,90,6)" fg:x="874" fg:w="1"/><text x="70.4508%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.2008%" y="309" width="0.0803%" height="15" fill="rgb(210,191,5)" fg:x="874" fg:w="1"/><text x="70.4508%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.2008%" y="293" width="0.0803%" height="15" fill="rgb(225,139,19)" fg:x="874" fg:w="1"/><text x="70.4508%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.2008%" y="277" width="0.0803%" height="15" fill="rgb(210,1,33)" fg:x="874" fg:w="1"/><text x="70.4508%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.2008%" y="261" width="0.0803%" height="15" fill="rgb(213,50,3)" fg:x="874" fg:w="1"/><text x="70.4508%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.2008%" y="245" width="0.0803%" height="15" fill="rgb(234,227,4)" fg:x="874" fg:w="1"/><text x="70.4508%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.2008%" y="229" width="0.0803%" height="15" fill="rgb(246,63,5)" fg:x="874" fg:w="1"/><text x="70.4508%" y="239.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="70.2811%" y="421" width="0.0803%" height="15" fill="rgb(245,136,27)" fg:x="875" fg:w="1"/><text x="70.5311%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.2811%" y="405" width="0.0803%" height="15" fill="rgb(247,199,27)" fg:x="875" fg:w="1"/><text x="70.5311%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.2811%" y="389" width="0.0803%" height="15" fill="rgb(252,158,49)" fg:x="875" fg:w="1"/><text x="70.5311%" y="399.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="70.3614%" y="421" width="0.1606%" height="15" fill="rgb(254,73,1)" fg:x="876" fg:w="2"/><text x="70.6114%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="70.3614%" y="405" width="0.1606%" height="15" fill="rgb(248,93,19)" fg:x="876" fg:w="2"/><text x="70.6114%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.3614%" y="389" width="0.1606%" height="15" fill="rgb(206,67,5)" fg:x="876" fg:w="2"/><text x="70.6114%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="70.3614%" y="373" width="0.1606%" height="15" fill="rgb(209,210,4)" fg:x="876" fg:w="2"/><text x="70.6114%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.3614%" y="357" width="0.1606%" height="15" fill="rgb(214,185,36)" fg:x="876" fg:w="2"/><text x="70.6114%" y="367.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="70.3614%" y="341" width="0.1606%" height="15" fill="rgb(233,191,26)" fg:x="876" fg:w="2"/><text x="70.6114%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.3614%" y="325" width="0.1606%" height="15" fill="rgb(248,94,17)" fg:x="876" fg:w="2"/><text x="70.6114%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="70.3614%" y="309" width="0.1606%" height="15" fill="rgb(250,64,4)" fg:x="876" fg:w="2"/><text x="70.6114%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="70.4418%" y="293" width="0.0803%" height="15" fill="rgb(218,41,53)" fg:x="877" fg:w="1"/><text x="70.6918%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.4418%" y="277" width="0.0803%" height="15" fill="rgb(251,176,28)" fg:x="877" fg:w="1"/><text x="70.6918%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.4418%" y="261" width="0.0803%" height="15" fill="rgb(247,22,9)" fg:x="877" fg:w="1"/><text x="70.6918%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="70.6024%" y="261" width="0.1606%" height="15" fill="rgb(218,201,14)" fg:x="879" fg:w="2"/><text x="70.8524%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="70.6024%" y="245" width="0.1606%" height="15" fill="rgb(218,94,10)" fg:x="879" fg:w="2"/><text x="70.8524%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="70.6024%" y="229" width="0.1606%" height="15" fill="rgb(222,183,52)" fg:x="879" fg:w="2"/><text x="70.8524%" y="239.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (2 samples, 0.16%)</title><rect x="70.6024%" y="213" width="0.1606%" height="15" fill="rgb(242,140,25)" fg:x="879" fg:w="2"/><text x="70.8524%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="70.5221%" y="325" width="0.3213%" height="15" fill="rgb(235,197,38)" fg:x="878" fg:w="4"/><text x="70.7721%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="70.5221%" y="309" width="0.3213%" height="15" fill="rgb(237,136,15)" fg:x="878" fg:w="4"/><text x="70.7721%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="70.5221%" y="293" width="0.3213%" height="15" fill="rgb(223,44,49)" fg:x="878" fg:w="4"/><text x="70.7721%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="70.6024%" y="277" width="0.2410%" height="15" fill="rgb(227,71,15)" fg:x="879" fg:w="3"/><text x="70.8524%" y="287.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.7631%" y="261" width="0.0803%" height="15" fill="rgb(225,153,20)" fg:x="881" fg:w="1"/><text x="71.0131%" y="271.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="70.7631%" y="245" width="0.0803%" height="15" fill="rgb(210,190,26)" fg:x="881" fg:w="1"/><text x="71.0131%" y="255.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (10 samples, 0.80%)</title><rect x="70.1205%" y="437" width="0.8032%" height="15" fill="rgb(223,147,5)" fg:x="873" fg:w="10"/><text x="70.3705%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.40%)</title><rect x="70.5221%" y="421" width="0.4016%" height="15" fill="rgb(207,14,23)" fg:x="878" fg:w="5"/><text x="70.7721%" y="431.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="70.5221%" y="405" width="0.4016%" height="15" fill="rgb(211,195,53)" fg:x="878" fg:w="5"/><text x="70.7721%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="70.5221%" y="389" width="0.4016%" height="15" fill="rgb(237,75,46)" fg:x="878" fg:w="5"/><text x="70.7721%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="70.5221%" y="373" width="0.4016%" height="15" fill="rgb(254,55,14)" fg:x="878" fg:w="5"/><text x="70.7721%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="70.5221%" y="357" width="0.4016%" height="15" fill="rgb(230,185,30)" fg:x="878" fg:w="5"/><text x="70.7721%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="70.5221%" y="341" width="0.4016%" height="15" fill="rgb(220,14,11)" fg:x="878" fg:w="5"/><text x="70.7721%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.8434%" y="325" width="0.0803%" height="15" fill="rgb(215,169,44)" fg:x="882" fg:w="1"/><text x="71.0934%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.8434%" y="309" width="0.0803%" height="15" fill="rgb(253,203,20)" fg:x="882" fg:w="1"/><text x="71.0934%" y="319.50"></text></g><g><title>plugins_core::tools::contained_by (16 samples, 1.29%)</title><rect x="69.7189%" y="501" width="1.2851%" height="15" fill="rgb(229,225,17)" fg:x="868" fg:w="16"/><text x="69.9689%" y="511.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (11 samples, 0.88%)</title><rect x="70.1205%" y="485" width="0.8835%" height="15" fill="rgb(236,76,26)" fg:x="873" fg:w="11"/><text x="70.3705%" y="495.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (11 samples, 0.88%)</title><rect x="70.1205%" y="469" width="0.8835%" height="15" fill="rgb(234,15,30)" fg:x="873" fg:w="11"/><text x="70.3705%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (11 samples, 0.88%)</title><rect x="70.1205%" y="453" width="0.8835%" height="15" fill="rgb(211,113,48)" fg:x="873" fg:w="11"/><text x="70.3705%" y="463.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="70.9237%" y="437" width="0.0803%" height="15" fill="rgb(221,31,36)" fg:x="883" fg:w="1"/><text x="71.1737%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="70.9237%" y="421" width="0.0803%" height="15" fill="rgb(215,118,52)" fg:x="883" fg:w="1"/><text x="71.1737%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="70.9237%" y="405" width="0.0803%" height="15" fill="rgb(241,151,27)" fg:x="883" fg:w="1"/><text x="71.1737%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.0040%" y="469" width="0.1606%" height="15" fill="rgb(253,51,3)" fg:x="884" fg:w="2"/><text x="71.2540%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="71.0040%" y="453" width="0.1606%" height="15" fill="rgb(216,201,24)" fg:x="884" fg:w="2"/><text x="71.2540%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.0843%" y="437" width="0.0803%" height="15" fill="rgb(231,107,4)" fg:x="885" fg:w="1"/><text x="71.3343%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="71.1647%" y="437" width="0.0803%" height="15" fill="rgb(243,97,54)" fg:x="886" fg:w="1"/><text x="71.4147%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="71.1647%" y="421" width="0.0803%" height="15" fill="rgb(221,32,51)" fg:x="886" fg:w="1"/><text x="71.4147%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="71.1647%" y="405" width="0.0803%" height="15" fill="rgb(218,171,35)" fg:x="886" fg:w="1"/><text x="71.4147%" y="415.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.1647%" y="389" width="0.0803%" height="15" fill="rgb(214,20,53)" fg:x="886" fg:w="1"/><text x="71.4147%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.1647%" y="373" width="0.0803%" height="15" fill="rgb(239,9,52)" fg:x="886" fg:w="1"/><text x="71.4147%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.1647%" y="357" width="0.0803%" height="15" fill="rgb(215,114,45)" fg:x="886" fg:w="1"/><text x="71.4147%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.1647%" y="341" width="0.0803%" height="15" fill="rgb(208,118,9)" fg:x="886" fg:w="1"/><text x="71.4147%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.1647%" y="325" width="0.0803%" height="15" fill="rgb(235,7,39)" fg:x="886" fg:w="1"/><text x="71.4147%" y="335.50"></text></g><g><title>plugins_core::tools::occupied_by (4 samples, 0.32%)</title><rect x="71.0040%" y="501" width="0.3213%" height="15" fill="rgb(243,225,15)" fg:x="884" fg:w="4"/><text x="71.2540%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="71.0040%" y="485" width="0.3213%" height="15" fill="rgb(225,216,18)" fg:x="884" fg:w="4"/><text x="71.2540%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.1647%" y="469" width="0.1606%" height="15" fill="rgb(233,36,38)" fg:x="886" fg:w="2"/><text x="71.4147%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.1647%" y="453" width="0.1606%" height="15" fill="rgb(239,88,23)" fg:x="886" fg:w="2"/><text x="71.4147%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.2450%" y="437" width="0.0803%" height="15" fill="rgb(219,181,35)" fg:x="887" fg:w="1"/><text x="71.4950%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.2450%" y="421" width="0.0803%" height="15" fill="rgb(215,18,46)" fg:x="887" fg:w="1"/><text x="71.4950%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.2450%" y="405" width="0.0803%" height="15" fill="rgb(241,38,11)" fg:x="887" fg:w="1"/><text x="71.4950%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.2450%" y="389" width="0.0803%" height="15" fill="rgb(248,169,45)" fg:x="887" fg:w="1"/><text x="71.4950%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (24 samples, 1.93%)</title><rect x="69.6386%" y="517" width="1.9277%" height="15" fill="rgb(239,50,49)" fg:x="867" fg:w="24"/><text x="69.8886%" y="527.50">p..</text></g><g><title>plugins_core::tools::worn_by (3 samples, 0.24%)</title><rect x="71.3253%" y="501" width="0.2410%" height="15" fill="rgb(231,96,31)" fg:x="888" fg:w="3"/><text x="71.5753%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="71.4056%" y="485" width="0.1606%" height="15" fill="rgb(224,193,37)" fg:x="889" fg:w="2"/><text x="71.6556%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.4056%" y="469" width="0.1606%" height="15" fill="rgb(227,153,50)" fg:x="889" fg:w="2"/><text x="71.6556%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.4859%" y="453" width="0.0803%" height="15" fill="rgb(249,228,3)" fg:x="890" fg:w="1"/><text x="71.7359%" y="463.50"></text></g><g><title>engine::session::Session::captured (461 samples, 37.03%)</title><rect x="34.6185%" y="677" width="37.0281%" height="15" fill="rgb(219,164,43)" fg:x="431" fg:w="461"/><text x="34.8685%" y="687.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (458 samples, 36.79%)</title><rect x="34.8594%" y="661" width="36.7871%" height="15" fill="rgb(216,45,41)" fg:x="434" fg:w="458"/><text x="35.1094%" y="671.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (454 samples, 36.47%)</title><rect x="35.1807%" y="645" width="36.4659%" height="15" fill="rgb(210,226,51)" fg:x="438" fg:w="454"/><text x="35.4307%" y="655.50">tracing_core::dispatcher::with_default</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (454 samples, 36.47%)</title><rect x="35.1807%" y="629" width="36.4659%" height="15" fill="rgb(209,117,49)" fg:x="438" fg:w="454"/><text x="35.4307%" y="639.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::p..</text></g><g><title>kernel::plugins::mw::apply_middleware (454 samples, 36.47%)</title><rect x="35.1807%" y="613" width="36.4659%" height="15" fill="rgb(206,196,24)" fg:x="438" fg:w="454"/><text x="35.4307%" y="623.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (454 samples, 36.47%)</title><rect x="35.1807%" y="597" width="36.4659%" height="15" fill="rgb(253,218,3)" fg:x="438" fg:w="454"/><text x="35.4307%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (454 samples, 36.47%)</title><rect x="35.1807%" y="581" width="36.4659%" height="15" fill="rgb(252,166,2)" fg:x="438" fg:w="454"/><text x="35.4307%" y="591.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::p..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (437 samples, 35.10%)</title><rect x="36.5462%" y="565" width="35.1004%" height="15" fill="rgb(236,218,26)" fg:x="455" fg:w="437"/><text x="36.7962%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (437 samples, 35.10%)</title><rect x="36.5462%" y="549" width="35.1004%" height="15" fill="rgb(254,84,19)" fg:x="455" fg:w="437"/><text x="36.7962%" y="559.50">&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Mid..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (25 samples, 2.01%)</title><rect x="69.6386%" y="533" width="2.0080%" height="15" fill="rgb(219,137,29)" fg:x="867" fg:w="25"/><text x="69.8886%" y="543.50">p..</text></g><g><title>plugins_rune::sources::load_sources_from_entity (1 samples, 0.08%)</title><rect x="71.5663%" y="517" width="0.0803%" height="15" fill="rgb(227,47,52)" fg:x="891" fg:w="1"/><text x="71.8163%" y="527.50"></text></g><g><title>plugins_rune::sources::get_script (1 samples, 0.08%)</title><rect x="71.5663%" y="501" width="0.0803%" height="15" fill="rgb(229,167,24)" fg:x="891" fg:w="1"/><text x="71.8163%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="71.5663%" y="485" width="0.0803%" height="15" fill="rgb(233,164,1)" fg:x="891" fg:w="1"/><text x="71.8163%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="71.5663%" y="469" width="0.0803%" height="15" fill="rgb(218,88,48)" fg:x="891" fg:w="1"/><text x="71.8163%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.6466%" y="581" width="0.0803%" height="15" fill="rgb(226,214,24)" fg:x="892" fg:w="1"/><text x="71.8966%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.6466%" y="565" width="0.0803%" height="15" fill="rgb(233,29,12)" fg:x="892" fg:w="1"/><text x="71.8966%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.6466%" y="549" width="0.0803%" height="15" fill="rgb(219,120,34)" fg:x="892" fg:w="1"/><text x="71.8966%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.6466%" y="533" width="0.0803%" height="15" fill="rgb(226,78,44)" fg:x="892" fg:w="1"/><text x="71.8966%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.6466%" y="517" width="0.0803%" height="15" fill="rgb(240,15,48)" fg:x="892" fg:w="1"/><text x="71.8966%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.6466%" y="501" width="0.0803%" height="15" fill="rgb(253,176,7)" fg:x="892" fg:w="1"/><text x="71.8966%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.6466%" y="485" width="0.0803%" height="15" fill="rgb(206,166,28)" fg:x="892" fg:w="1"/><text x="71.8966%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.6466%" y="469" width="0.0803%" height="15" fill="rgb(241,53,51)" fg:x="892" fg:w="1"/><text x="71.8966%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.6466%" y="453" width="0.0803%" height="15" fill="rgb(249,112,30)" fg:x="892" fg:w="1"/><text x="71.8966%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.6466%" y="437" width="0.0803%" height="15" fill="rgb(217,85,30)" fg:x="892" fg:w="1"/><text x="71.8966%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.6466%" y="421" width="0.0803%" height="15" fill="rgb(233,49,7)" fg:x="892" fg:w="1"/><text x="71.8966%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.6466%" y="405" width="0.0803%" height="15" fill="rgb(234,109,9)" fg:x="892" fg:w="1"/><text x="71.8966%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.6466%" y="389" width="0.0803%" height="15" fill="rgb(253,95,22)" fg:x="892" fg:w="1"/><text x="71.8966%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.6466%" y="629" width="0.1606%" height="15" fill="rgb(233,176,25)" fg:x="892" fg:w="2"/><text x="71.8966%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.6466%" y="613" width="0.1606%" height="15" fill="rgb(236,33,39)" fg:x="892" fg:w="2"/><text x="71.8966%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.6466%" y="597" width="0.1606%" height="15" fill="rgb(223,226,42)" fg:x="892" fg:w="2"/><text x="71.8966%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.7269%" y="581" width="0.0803%" height="15" fill="rgb(216,99,33)" fg:x="893" fg:w="1"/><text x="71.9769%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="71.8876%" y="485" width="0.0803%" height="15" fill="rgb(235,84,23)" fg:x="895" fg:w="1"/><text x="72.1376%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="71.8876%" y="469" width="0.0803%" height="15" fill="rgb(232,2,27)" fg:x="895" fg:w="1"/><text x="72.1376%" y="479.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="71.8876%" y="453" width="0.0803%" height="15" fill="rgb(241,23,22)" fg:x="895" fg:w="1"/><text x="72.1376%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.8876%" y="437" width="0.0803%" height="15" fill="rgb(211,73,27)" fg:x="895" fg:w="1"/><text x="72.1376%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.8876%" y="421" width="0.0803%" height="15" fill="rgb(235,109,49)" fg:x="895" fg:w="1"/><text x="72.1376%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="71.8876%" y="533" width="0.1606%" height="15" fill="rgb(230,99,29)" fg:x="895" fg:w="2"/><text x="72.1376%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="71.8876%" y="517" width="0.1606%" height="15" fill="rgb(245,199,7)" fg:x="895" fg:w="2"/><text x="72.1376%" y="527.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="71.8876%" y="501" width="0.1606%" height="15" fill="rgb(217,179,10)" fg:x="895" fg:w="2"/><text x="72.1376%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.9679%" y="485" width="0.0803%" height="15" fill="rgb(254,99,47)" fg:x="896" fg:w="1"/><text x="72.2179%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.9679%" y="469" width="0.0803%" height="15" fill="rgb(251,121,7)" fg:x="896" fg:w="1"/><text x="72.2179%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="71.9679%" y="453" width="0.0803%" height="15" fill="rgb(250,177,26)" fg:x="896" fg:w="1"/><text x="72.2179%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (1 samples, 0.08%)</title><rect x="71.9679%" y="437" width="0.0803%" height="15" fill="rgb(232,88,15)" fg:x="896" fg:w="1"/><text x="72.2179%" y="447.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (1 samples, 0.08%)</title><rect x="71.9679%" y="421" width="0.0803%" height="15" fill="rgb(251,54,54)" fg:x="896" fg:w="1"/><text x="72.2179%" y="431.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (1 samples, 0.08%)</title><rect x="71.9679%" y="405" width="0.0803%" height="15" fill="rgb(208,177,15)" fg:x="896" fg:w="1"/><text x="72.2179%" y="415.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="71.9679%" y="389" width="0.0803%" height="15" fill="rgb(205,97,32)" fg:x="896" fg:w="1"/><text x="72.2179%" y="399.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="71.9679%" y="373" width="0.0803%" height="15" fill="rgb(217,192,13)" fg:x="896" fg:w="1"/><text x="72.2179%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="71.9679%" y="357" width="0.0803%" height="15" fill="rgb(215,163,41)" fg:x="896" fg:w="1"/><text x="72.2179%" y="367.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="71.9679%" y="341" width="0.0803%" height="15" fill="rgb(246,83,29)" fg:x="896" fg:w="1"/><text x="72.2179%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="71.9679%" y="325" width="0.0803%" height="15" fill="rgb(219,2,45)" fg:x="896" fg:w="1"/><text x="72.2179%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="71.9679%" y="309" width="0.0803%" height="15" fill="rgb(242,215,33)" fg:x="896" fg:w="1"/><text x="72.2179%" y="319.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.08%)</title><rect x="71.9679%" y="293" width="0.0803%" height="15" fill="rgb(217,1,6)" fg:x="896" fg:w="1"/><text x="72.2179%" y="303.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (1 samples, 0.08%)</title><rect x="71.9679%" y="277" width="0.0803%" height="15" fill="rgb(207,85,52)" fg:x="896" fg:w="1"/><text x="72.2179%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="71.8072%" y="581" width="0.3213%" height="15" fill="rgb(231,171,19)" fg:x="894" fg:w="4"/><text x="72.0572%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="71.8072%" y="565" width="0.3213%" height="15" fill="rgb(207,128,4)" fg:x="894" fg:w="4"/><text x="72.0572%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="71.8876%" y="549" width="0.2410%" height="15" fill="rgb(219,208,4)" fg:x="895" fg:w="3"/><text x="72.1376%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.0482%" y="533" width="0.0803%" height="15" fill="rgb(235,161,42)" fg:x="897" fg:w="1"/><text x="72.2982%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.0482%" y="517" width="0.0803%" height="15" fill="rgb(247,218,18)" fg:x="897" fg:w="1"/><text x="72.2982%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="72.0482%" y="501" width="0.0803%" height="15" fill="rgb(232,114,51)" fg:x="897" fg:w="1"/><text x="72.2982%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="72.0482%" y="485" width="0.0803%" height="15" fill="rgb(222,95,3)" fg:x="897" fg:w="1"/><text x="72.2982%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.0482%" y="469" width="0.0803%" height="15" fill="rgb(240,65,29)" fg:x="897" fg:w="1"/><text x="72.2982%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.0482%" y="453" width="0.0803%" height="15" fill="rgb(249,209,20)" fg:x="897" fg:w="1"/><text x="72.2982%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.56%)</title><rect x="71.8072%" y="629" width="0.5622%" height="15" fill="rgb(241,48,37)" fg:x="894" fg:w="7"/><text x="72.0572%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.56%)</title><rect x="71.8072%" y="613" width="0.5622%" height="15" fill="rgb(230,140,42)" fg:x="894" fg:w="7"/><text x="72.0572%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (7 samples, 0.56%)</title><rect x="71.8072%" y="597" width="0.5622%" height="15" fill="rgb(230,176,45)" fg:x="894" fg:w="7"/><text x="72.0572%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="72.1285%" y="581" width="0.2410%" height="15" fill="rgb(245,112,21)" fg:x="898" fg:w="3"/><text x="72.3785%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="72.1285%" y="565" width="0.2410%" height="15" fill="rgb(207,183,35)" fg:x="898" fg:w="3"/><text x="72.3785%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="72.2892%" y="549" width="0.0803%" height="15" fill="rgb(227,44,33)" fg:x="900" fg:w="1"/><text x="72.5392%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="72.2892%" y="533" width="0.0803%" height="15" fill="rgb(246,120,21)" fg:x="900" fg:w="1"/><text x="72.5392%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.2892%" y="517" width="0.0803%" height="15" fill="rgb(235,57,52)" fg:x="900" fg:w="1"/><text x="72.5392%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.2892%" y="501" width="0.0803%" height="15" fill="rgb(238,84,10)" fg:x="900" fg:w="1"/><text x="72.5392%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.2892%" y="485" width="0.0803%" height="15" fill="rgb(251,200,32)" fg:x="900" fg:w="1"/><text x="72.5392%" y="495.50"></text></g><g><title>engine::session::internal::Added::find_refs (10 samples, 0.80%)</title><rect x="71.6466%" y="661" width="0.8032%" height="15" fill="rgb(247,159,13)" fg:x="892" fg:w="10"/><text x="71.8966%" y="671.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (10 samples, 0.80%)</title><rect x="71.6466%" y="645" width="0.8032%" height="15" fill="rgb(238,64,4)" fg:x="892" fg:w="10"/><text x="71.8966%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.3695%" y="629" width="0.0803%" height="15" fill="rgb(221,131,51)" fg:x="901" fg:w="1"/><text x="72.6195%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.3695%" y="613" width="0.0803%" height="15" fill="rgb(242,5,29)" fg:x="901" fg:w="1"/><text x="72.6195%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="72.3695%" y="597" width="0.0803%" height="15" fill="rgb(214,130,32)" fg:x="901" fg:w="1"/><text x="72.6195%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="72.3695%" y="581" width="0.0803%" height="15" fill="rgb(244,210,16)" fg:x="901" fg:w="1"/><text x="72.6195%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.3695%" y="565" width="0.0803%" height="15" fill="rgb(234,48,26)" fg:x="901" fg:w="1"/><text x="72.6195%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.3695%" y="549" width="0.0803%" height="15" fill="rgb(231,82,38)" fg:x="901" fg:w="1"/><text x="72.6195%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.4498%" y="597" width="0.0803%" height="15" fill="rgb(254,128,41)" fg:x="902" fg:w="1"/><text x="72.6998%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.4498%" y="581" width="0.0803%" height="15" fill="rgb(212,73,49)" fg:x="902" fg:w="1"/><text x="72.6998%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.4498%" y="565" width="0.0803%" height="15" fill="rgb(205,62,54)" fg:x="902" fg:w="1"/><text x="72.6998%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.4498%" y="549" width="0.0803%" height="15" fill="rgb(228,0,8)" fg:x="902" fg:w="1"/><text x="72.6998%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.4498%" y="533" width="0.0803%" height="15" fill="rgb(251,28,17)" fg:x="902" fg:w="1"/><text x="72.6998%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.4498%" y="517" width="0.0803%" height="15" fill="rgb(238,105,27)" fg:x="902" fg:w="1"/><text x="72.6998%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.4498%" y="501" width="0.0803%" height="15" fill="rgb(237,216,33)" fg:x="902" fg:w="1"/><text x="72.6998%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.4498%" y="485" width="0.0803%" height="15" fill="rgb(229,228,25)" fg:x="902" fg:w="1"/><text x="72.6998%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.4498%" y="469" width="0.0803%" height="15" fill="rgb(233,75,23)" fg:x="902" fg:w="1"/><text x="72.6998%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="72.4498%" y="453" width="0.0803%" height="15" fill="rgb(231,207,16)" fg:x="902" fg:w="1"/><text x="72.6998%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="72.4498%" y="437" width="0.0803%" height="15" fill="rgb(231,191,45)" fg:x="902" fg:w="1"/><text x="72.6998%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="72.4498%" y="421" width="0.0803%" height="15" fill="rgb(224,133,17)" fg:x="902" fg:w="1"/><text x="72.6998%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="72.4498%" y="405" width="0.0803%" height="15" fill="rgb(209,178,27)" fg:x="902" fg:w="1"/><text x="72.6998%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.4498%" y="389" width="0.0803%" height="15" fill="rgb(218,37,11)" fg:x="902" fg:w="1"/><text x="72.6998%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="72.4498%" y="645" width="0.1606%" height="15" fill="rgb(251,226,25)" fg:x="902" fg:w="2"/><text x="72.6998%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="72.4498%" y="629" width="0.1606%" height="15" fill="rgb(209,222,27)" fg:x="902" fg:w="2"/><text x="72.6998%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="72.4498%" y="613" width="0.1606%" height="15" fill="rgb(238,22,21)" fg:x="902" fg:w="2"/><text x="72.6998%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.5301%" y="597" width="0.0803%" height="15" fill="rgb(233,161,25)" fg:x="903" fg:w="1"/><text x="72.7801%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.5301%" y="581" width="0.0803%" height="15" fill="rgb(226,122,53)" fg:x="903" fg:w="1"/><text x="72.7801%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.5301%" y="565" width="0.0803%" height="15" fill="rgb(220,123,17)" fg:x="903" fg:w="1"/><text x="72.7801%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="72.6104%" y="645" width="0.0803%" height="15" fill="rgb(230,224,35)" fg:x="904" fg:w="1"/><text x="72.8604%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.6104%" y="629" width="0.0803%" height="15" fill="rgb(246,83,8)" fg:x="904" fg:w="1"/><text x="72.8604%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.6104%" y="613" width="0.0803%" height="15" fill="rgb(230,214,17)" fg:x="904" fg:w="1"/><text x="72.8604%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="72.6104%" y="597" width="0.0803%" height="15" fill="rgb(222,97,18)" fg:x="904" fg:w="1"/><text x="72.8604%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.6104%" y="581" width="0.0803%" height="15" fill="rgb(206,79,1)" fg:x="904" fg:w="1"/><text x="72.8604%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.6104%" y="565" width="0.0803%" height="15" fill="rgb(214,121,34)" fg:x="904" fg:w="1"/><text x="72.8604%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.6104%" y="549" width="0.0803%" height="15" fill="rgb(249,199,46)" fg:x="904" fg:w="1"/><text x="72.8604%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.6104%" y="533" width="0.0803%" height="15" fill="rgb(214,222,46)" fg:x="904" fg:w="1"/><text x="72.8604%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="72.6908%" y="565" width="0.0803%" height="15" fill="rgb(248,168,30)" fg:x="905" fg:w="1"/><text x="72.9408%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.6908%" y="549" width="0.0803%" height="15" fill="rgb(226,14,28)" fg:x="905" fg:w="1"/><text x="72.9408%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="72.6908%" y="597" width="0.1606%" height="15" fill="rgb(253,123,1)" fg:x="905" fg:w="2"/><text x="72.9408%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.6908%" y="581" width="0.1606%" height="15" fill="rgb(225,24,42)" fg:x="905" fg:w="2"/><text x="72.9408%" y="591.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="72.7711%" y="565" width="0.0803%" height="15" fill="rgb(216,161,37)" fg:x="906" fg:w="1"/><text x="73.0211%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.7711%" y="549" width="0.0803%" height="15" fill="rgb(251,164,26)" fg:x="906" fg:w="1"/><text x="73.0211%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.7711%" y="533" width="0.0803%" height="15" fill="rgb(219,177,3)" fg:x="906" fg:w="1"/><text x="73.0211%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.7711%" y="517" width="0.0803%" height="15" fill="rgb(222,65,0)" fg:x="906" fg:w="1"/><text x="73.0211%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="72.6908%" y="645" width="0.2410%" height="15" fill="rgb(223,69,54)" fg:x="905" fg:w="3"/><text x="72.9408%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="72.6908%" y="629" width="0.2410%" height="15" fill="rgb(235,30,27)" fg:x="905" fg:w="3"/><text x="72.9408%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="72.6908%" y="613" width="0.2410%" height="15" fill="rgb(220,183,50)" fg:x="905" fg:w="3"/><text x="72.9408%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.8514%" y="597" width="0.0803%" height="15" fill="rgb(248,198,15)" fg:x="907" fg:w="1"/><text x="73.1014%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.8514%" y="581" width="0.0803%" height="15" fill="rgb(222,211,4)" fg:x="907" fg:w="1"/><text x="73.1014%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.8514%" y="565" width="0.0803%" height="15" fill="rgb(214,102,34)" fg:x="907" fg:w="1"/><text x="73.1014%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.9317%" y="581" width="0.0803%" height="15" fill="rgb(245,92,5)" fg:x="908" fg:w="1"/><text x="73.1817%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.9317%" y="565" width="0.0803%" height="15" fill="rgb(252,72,51)" fg:x="908" fg:w="1"/><text x="73.1817%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.9317%" y="549" width="0.0803%" height="15" fill="rgb(252,208,19)" fg:x="908" fg:w="1"/><text x="73.1817%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.9317%" y="533" width="0.0803%" height="15" fill="rgb(211,69,7)" fg:x="908" fg:w="1"/><text x="73.1817%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.9317%" y="517" width="0.0803%" height="15" fill="rgb(211,27,16)" fg:x="908" fg:w="1"/><text x="73.1817%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.9317%" y="501" width="0.0803%" height="15" fill="rgb(219,216,14)" fg:x="908" fg:w="1"/><text x="73.1817%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.9317%" y="485" width="0.0803%" height="15" fill="rgb(219,71,8)" fg:x="908" fg:w="1"/><text x="73.1817%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.9317%" y="469" width="0.0803%" height="15" fill="rgb(223,170,53)" fg:x="908" fg:w="1"/><text x="73.1817%" y="479.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="72.9317%" y="453" width="0.0803%" height="15" fill="rgb(246,21,26)" fg:x="908" fg:w="1"/><text x="73.1817%" y="463.50"></text></g><g><title>engine::session::Session::load_entity (19 samples, 1.53%)</title><rect x="71.6466%" y="677" width="1.5261%" height="15" fill="rgb(248,20,46)" fg:x="892" fg:w="19"/><text x="71.8966%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (9 samples, 0.72%)</title><rect x="72.4498%" y="661" width="0.7229%" height="15" fill="rgb(252,94,11)" fg:x="902" fg:w="9"/><text x="72.6998%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="72.9317%" y="645" width="0.2410%" height="15" fill="rgb(236,163,8)" fg:x="908" fg:w="3"/><text x="73.1817%" y="655.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="72.9317%" y="629" width="0.2410%" height="15" fill="rgb(217,221,45)" fg:x="908" fg:w="3"/><text x="73.1817%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="72.9317%" y="613" width="0.2410%" height="15" fill="rgb(238,38,17)" fg:x="908" fg:w="3"/><text x="73.1817%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="72.9317%" y="597" width="0.2410%" height="15" fill="rgb(242,210,23)" fg:x="908" fg:w="3"/><text x="73.1817%" y="607.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="73.0120%" y="581" width="0.1606%" height="15" fill="rgb(250,86,53)" fg:x="909" fg:w="2"/><text x="73.2620%" y="591.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (2 samples, 0.16%)</title><rect x="73.0120%" y="565" width="0.1606%" height="15" fill="rgb(223,168,25)" fg:x="909" fg:w="2"/><text x="73.2620%" y="575.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="73.1727%" y="645" width="0.0803%" height="15" fill="rgb(251,189,4)" fg:x="911" fg:w="1"/><text x="73.4227%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.1727%" y="629" width="0.0803%" height="15" fill="rgb(245,19,28)" fg:x="911" fg:w="1"/><text x="73.4227%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.1727%" y="613" width="0.0803%" height="15" fill="rgb(207,10,34)" fg:x="911" fg:w="1"/><text x="73.4227%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.1727%" y="597" width="0.0803%" height="15" fill="rgb(235,153,31)" fg:x="911" fg:w="1"/><text x="73.4227%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.1727%" y="581" width="0.0803%" height="15" fill="rgb(228,72,37)" fg:x="911" fg:w="1"/><text x="73.4227%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.1727%" y="565" width="0.0803%" height="15" fill="rgb(215,15,16)" fg:x="911" fg:w="1"/><text x="73.4227%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="73.1727%" y="549" width="0.0803%" height="15" fill="rgb(250,119,29)" fg:x="911" fg:w="1"/><text x="73.4227%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="73.1727%" y="533" width="0.0803%" height="15" fill="rgb(214,59,1)" fg:x="911" fg:w="1"/><text x="73.4227%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="73.2530%" y="629" width="0.0803%" height="15" fill="rgb(223,109,25)" fg:x="912" fg:w="1"/><text x="73.5030%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.2530%" y="613" width="0.0803%" height="15" fill="rgb(230,198,22)" fg:x="912" fg:w="1"/><text x="73.5030%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.2530%" y="597" width="0.0803%" height="15" fill="rgb(245,184,46)" fg:x="912" fg:w="1"/><text x="73.5030%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.2530%" y="581" width="0.0803%" height="15" fill="rgb(253,73,16)" fg:x="912" fg:w="1"/><text x="73.5030%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.2530%" y="565" width="0.0803%" height="15" fill="rgb(206,94,45)" fg:x="912" fg:w="1"/><text x="73.5030%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.2530%" y="549" width="0.0803%" height="15" fill="rgb(236,83,27)" fg:x="912" fg:w="1"/><text x="73.5030%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.2530%" y="533" width="0.0803%" height="15" fill="rgb(220,196,8)" fg:x="912" fg:w="1"/><text x="73.5030%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.2530%" y="517" width="0.0803%" height="15" fill="rgb(254,185,14)" fg:x="912" fg:w="1"/><text x="73.5030%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.2530%" y="501" width="0.0803%" height="15" fill="rgb(226,50,22)" fg:x="912" fg:w="1"/><text x="73.5030%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.2530%" y="485" width="0.0803%" height="15" fill="rgb(253,147,0)" fg:x="912" fg:w="1"/><text x="73.5030%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.2530%" y="469" width="0.0803%" height="15" fill="rgb(252,46,33)" fg:x="912" fg:w="1"/><text x="73.5030%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.2530%" y="453" width="0.0803%" height="15" fill="rgb(242,22,54)" fg:x="912" fg:w="1"/><text x="73.5030%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.2530%" y="437" width="0.0803%" height="15" fill="rgb(223,178,32)" fg:x="912" fg:w="1"/><text x="73.5030%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.2530%" y="421" width="0.0803%" height="15" fill="rgb(214,106,53)" fg:x="912" fg:w="1"/><text x="73.5030%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.2530%" y="405" width="0.0803%" height="15" fill="rgb(232,65,50)" fg:x="912" fg:w="1"/><text x="73.5030%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.2530%" y="389" width="0.0803%" height="15" fill="rgb(231,110,28)" fg:x="912" fg:w="1"/><text x="73.5030%" y="399.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="73.3333%" y="629" width="0.0803%" height="15" fill="rgb(216,71,40)" fg:x="913" fg:w="1"/><text x="73.5833%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.3333%" y="613" width="0.0803%" height="15" fill="rgb(229,89,53)" fg:x="913" fg:w="1"/><text x="73.5833%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="73.3333%" y="597" width="0.0803%" height="15" fill="rgb(210,124,14)" fg:x="913" fg:w="1"/><text x="73.5833%" y="607.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.5743%" y="533" width="0.0803%" height="15" fill="rgb(236,213,6)" fg:x="916" fg:w="1"/><text x="73.8243%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.5743%" y="517" width="0.0803%" height="15" fill="rgb(228,41,5)" fg:x="916" fg:w="1"/><text x="73.8243%" y="527.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="73.5743%" y="501" width="0.0803%" height="15" fill="rgb(221,167,25)" fg:x="916" fg:w="1"/><text x="73.8243%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="73.5743%" y="485" width="0.0803%" height="15" fill="rgb(228,144,37)" fg:x="916" fg:w="1"/><text x="73.8243%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="73.6546%" y="533" width="0.0803%" height="15" fill="rgb(227,189,38)" fg:x="917" fg:w="1"/><text x="73.9046%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.6546%" y="517" width="0.0803%" height="15" fill="rgb(218,8,2)" fg:x="917" fg:w="1"/><text x="73.9046%" y="527.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.7349%" y="501" width="0.0803%" height="15" fill="rgb(209,61,28)" fg:x="918" fg:w="1"/><text x="73.9849%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="73.5743%" y="581" width="0.3213%" height="15" fill="rgb(233,140,39)" fg:x="916" fg:w="4"/><text x="73.8243%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="73.5743%" y="565" width="0.3213%" height="15" fill="rgb(251,66,48)" fg:x="916" fg:w="4"/><text x="73.8243%" y="575.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="73.5743%" y="549" width="0.3213%" height="15" fill="rgb(210,44,45)" fg:x="916" fg:w="4"/><text x="73.8243%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="73.7349%" y="533" width="0.1606%" height="15" fill="rgb(214,136,46)" fg:x="918" fg:w="2"/><text x="73.9849%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.7349%" y="517" width="0.1606%" height="15" fill="rgb(207,130,50)" fg:x="918" fg:w="2"/><text x="73.9849%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="73.8153%" y="501" width="0.0803%" height="15" fill="rgb(228,102,49)" fg:x="919" fg:w="1"/><text x="74.0653%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8153%" y="485" width="0.0803%" height="15" fill="rgb(253,55,1)" fg:x="919" fg:w="1"/><text x="74.0653%" y="495.50"></text></g><g><title>kernel::model::entity::Entity::from_value (8 samples, 0.64%)</title><rect x="73.4137%" y="629" width="0.6426%" height="15" fill="rgb(238,222,9)" fg:x="914" fg:w="8"/><text x="73.6637%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (8 samples, 0.64%)</title><rect x="73.4137%" y="613" width="0.6426%" height="15" fill="rgb(246,99,6)" fg:x="914" fg:w="8"/><text x="73.6637%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.64%)</title><rect x="73.4137%" y="597" width="0.6426%" height="15" fill="rgb(219,110,26)" fg:x="914" fg:w="8"/><text x="73.6637%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="73.8956%" y="581" width="0.1606%" height="15" fill="rgb(239,160,33)" fg:x="920" fg:w="2"/><text x="74.1456%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="73.8956%" y="565" width="0.1606%" height="15" fill="rgb(220,202,23)" fg:x="920" fg:w="2"/><text x="74.1456%" y="575.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (496 samples, 39.84%)</title><rect x="34.2972%" y="709" width="39.8394%" height="15" fill="rgb(208,80,26)" fg:x="427" fg:w="496"/><text x="34.5472%" y="719.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (496 samples, 39.84%)</title><rect x="34.2972%" y="693" width="39.8394%" height="15" fill="rgb(243,85,7)" fg:x="427" fg:w="496"/><text x="34.5472%" y="703.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (12 samples, 0.96%)</title><rect x="73.1727%" y="677" width="0.9639%" height="15" fill="rgb(228,77,47)" fg:x="911" fg:w="12"/><text x="73.4227%" y="687.50"></text></g><g><title>engine::session::Session::load_entity (12 samples, 0.96%)</title><rect x="73.1727%" y="661" width="0.9639%" height="15" fill="rgb(212,226,8)" fg:x="911" fg:w="12"/><text x="73.4227%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (11 samples, 0.88%)</title><rect x="73.2530%" y="645" width="0.8835%" height="15" fill="rgb(241,120,54)" fg:x="912" fg:w="11"/><text x="73.5030%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="74.0562%" y="629" width="0.0803%" height="15" fill="rgb(226,80,16)" fg:x="922" fg:w="1"/><text x="74.3062%" y="639.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="74.0562%" y="613" width="0.0803%" height="15" fill="rgb(240,76,13)" fg:x="922" fg:w="1"/><text x="74.3062%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.0562%" y="597" width="0.0803%" height="15" fill="rgb(252,74,8)" fg:x="922" fg:w="1"/><text x="74.3062%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.0562%" y="581" width="0.0803%" height="15" fill="rgb(244,155,2)" fg:x="922" fg:w="1"/><text x="74.3062%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.0562%" y="565" width="0.0803%" height="15" fill="rgb(215,81,35)" fg:x="922" fg:w="1"/><text x="74.3062%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.0562%" y="549" width="0.0803%" height="15" fill="rgb(206,55,2)" fg:x="922" fg:w="1"/><text x="74.3062%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.0562%" y="533" width="0.0803%" height="15" fill="rgb(231,2,34)" fg:x="922" fg:w="1"/><text x="74.3062%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.0562%" y="517" width="0.0803%" height="15" fill="rgb(242,176,48)" fg:x="922" fg:w="1"/><text x="74.3062%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.0562%" y="501" width="0.0803%" height="15" fill="rgb(249,31,36)" fg:x="922" fg:w="1"/><text x="74.3062%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.0562%" y="485" width="0.0803%" height="15" fill="rgb(205,18,17)" fg:x="922" fg:w="1"/><text x="74.3062%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.0562%" y="469" width="0.0803%" height="15" fill="rgb(254,130,5)" fg:x="922" fg:w="1"/><text x="74.3062%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.0562%" y="453" width="0.0803%" height="15" fill="rgb(229,42,45)" fg:x="922" fg:w="1"/><text x="74.3062%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.0562%" y="437" width="0.0803%" height="15" fill="rgb(245,95,25)" fg:x="922" fg:w="1"/><text x="74.3062%" y="447.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="74.0562%" y="421" width="0.0803%" height="15" fill="rgb(249,193,38)" fg:x="922" fg:w="1"/><text x="74.3062%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (924 samples, 74.22%)</title><rect x="0.0000%" y="757" width="74.2169%" height="15" fill="rgb(241,140,43)" fg:x="0" fg:w="924"/><text x="0.2500%" y="767.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (924 samples, 74.22%)</title><rect x="0.0000%" y="741" width="74.2169%" height="15" fill="rgb(245,78,48)" fg:x="0" fg:w="924"/><text x="0.2500%" y="751.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (924 samples, 74.22%)</title><rect x="0.0000%" y="725" width="74.2169%" height="15" fill="rgb(214,92,39)" fg:x="0" fg:w="924"/><text x="0.2500%" y="735.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="74.1365%" y="709" width="0.0803%" height="15" fill="rgb(211,189,14)" fg:x="923" fg:w="1"/><text x="74.3865%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="74.1365%" y="693" width="0.0803%" height="15" fill="rgb(218,7,24)" fg:x="923" fg:w="1"/><text x="74.3865%" y="703.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="74.1365%" y="677" width="0.0803%" height="15" fill="rgb(224,200,49)" fg:x="923" fg:w="1"/><text x="74.3865%" y="687.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="74.1365%" y="661" width="0.0803%" height="15" fill="rgb(218,210,14)" fg:x="923" fg:w="1"/><text x="74.3865%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="74.2169%" y="693" width="0.1606%" height="15" fill="rgb(234,142,31)" fg:x="924" fg:w="2"/><text x="74.4669%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="74.2169%" y="677" width="0.1606%" height="15" fill="rgb(227,165,2)" fg:x="924" fg:w="2"/><text x="74.4669%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_dynlib::DynamicPlugin&gt; (1 samples, 0.08%)</title><rect x="74.2972%" y="661" width="0.0803%" height="15" fill="rgb(232,44,46)" fg:x="925" fg:w="1"/><text x="74.5472%" y="671.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.2972%" y="645" width="0.0803%" height="15" fill="rgb(236,149,47)" fg:x="925" fg:w="1"/><text x="74.5472%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="74.3775%" y="629" width="0.1606%" height="15" fill="rgb(227,45,31)" fg:x="926" fg:w="2"/><text x="74.6275%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.4578%" y="613" width="0.0803%" height="15" fill="rgb(240,176,51)" fg:x="927" fg:w="1"/><text x="74.7078%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.6185%" y="597" width="0.0803%" height="15" fill="rgb(249,146,41)" fg:x="929" fg:w="1"/><text x="74.8685%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.7791%" y="565" width="0.0803%" height="15" fill="rgb(213,208,4)" fg:x="931" fg:w="1"/><text x="75.0291%" y="575.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="74.3775%" y="645" width="0.5622%" height="15" fill="rgb(245,84,36)" fg:x="926" fg:w="7"/><text x="74.6275%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="74.5382%" y="629" width="0.4016%" height="15" fill="rgb(254,84,18)" fg:x="928" fg:w="5"/><text x="74.7882%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="74.5382%" y="613" width="0.4016%" height="15" fill="rgb(225,38,54)" fg:x="928" fg:w="5"/><text x="74.7882%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="74.6988%" y="597" width="0.2410%" height="15" fill="rgb(246,50,30)" fg:x="930" fg:w="3"/><text x="74.9488%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="74.6988%" y="581" width="0.2410%" height="15" fill="rgb(246,148,9)" fg:x="930" fg:w="3"/><text x="74.9488%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.8594%" y="565" width="0.0803%" height="15" fill="rgb(223,75,4)" fg:x="932" fg:w="1"/><text x="75.1094%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.8594%" y="549" width="0.0803%" height="15" fill="rgb(239,148,41)" fg:x="932" fg:w="1"/><text x="75.1094%" y="559.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.80%)</title><rect x="74.2169%" y="709" width="0.8032%" height="15" fill="rgb(205,195,3)" fg:x="924" fg:w="10"/><text x="74.4669%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (8 samples, 0.64%)</title><rect x="74.3775%" y="693" width="0.6426%" height="15" fill="rgb(254,161,1)" fg:x="926" fg:w="8"/><text x="74.6275%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.64%)</title><rect x="74.3775%" y="677" width="0.6426%" height="15" fill="rgb(211,229,8)" fg:x="926" fg:w="8"/><text x="74.6275%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (8 samples, 0.64%)</title><rect x="74.3775%" y="661" width="0.6426%" height="15" fill="rgb(220,97,9)" fg:x="926" fg:w="8"/><text x="74.6275%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.9398%" y="645" width="0.0803%" height="15" fill="rgb(240,218,8)" fg:x="933" fg:w="1"/><text x="75.1898%" y="655.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (1 samples, 0.08%)</title><rect x="75.1807%" y="629" width="0.0803%" height="15" fill="rgb(250,44,0)" fg:x="936" fg:w="1"/><text x="75.4307%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="75.1807%" y="613" width="0.0803%" height="15" fill="rgb(236,41,53)" fg:x="936" fg:w="1"/><text x="75.4307%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="75.1807%" y="597" width="0.0803%" height="15" fill="rgb(218,227,13)" fg:x="936" fg:w="1"/><text x="75.4307%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="75.1807%" y="581" width="0.0803%" height="15" fill="rgb(217,94,32)" fg:x="936" fg:w="1"/><text x="75.4307%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="75.1807%" y="565" width="0.0803%" height="15" fill="rgb(213,217,12)" fg:x="936" fg:w="1"/><text x="75.4307%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.1807%" y="549" width="0.0803%" height="15" fill="rgb(229,13,46)" fg:x="936" fg:w="1"/><text x="75.4307%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.1807%" y="533" width="0.0803%" height="15" fill="rgb(243,139,5)" fg:x="936" fg:w="1"/><text x="75.4307%" y="543.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="75.1807%" y="517" width="0.0803%" height="15" fill="rgb(249,38,45)" fg:x="936" fg:w="1"/><text x="75.4307%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="75.1807%" y="501" width="0.0803%" height="15" fill="rgb(216,70,11)" fg:x="936" fg:w="1"/><text x="75.4307%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="75.1807%" y="485" width="0.0803%" height="15" fill="rgb(253,101,25)" fg:x="936" fg:w="1"/><text x="75.4307%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="75.1807%" y="469" width="0.0803%" height="15" fill="rgb(207,197,30)" fg:x="936" fg:w="1"/><text x="75.4307%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="75.1807%" y="453" width="0.0803%" height="15" fill="rgb(238,87,13)" fg:x="936" fg:w="1"/><text x="75.4307%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="75.1807%" y="437" width="0.0803%" height="15" fill="rgb(215,155,8)" fg:x="936" fg:w="1"/><text x="75.4307%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="75.1807%" y="421" width="0.0803%" height="15" fill="rgb(239,166,38)" fg:x="936" fg:w="1"/><text x="75.4307%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="75.1807%" y="405" width="0.0803%" height="15" fill="rgb(240,194,35)" fg:x="936" fg:w="1"/><text x="75.4307%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="75.1807%" y="389" width="0.0803%" height="15" fill="rgb(219,10,44)" fg:x="936" fg:w="1"/><text x="75.4307%" y="399.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (1 samples, 0.08%)</title><rect x="75.2610%" y="613" width="0.0803%" height="15" fill="rgb(251,220,35)" fg:x="937" fg:w="1"/><text x="75.5110%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.2610%" y="597" width="0.0803%" height="15" fill="rgb(218,117,13)" fg:x="937" fg:w="1"/><text x="75.5110%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.2610%" y="581" width="0.0803%" height="15" fill="rgb(221,213,40)" fg:x="937" fg:w="1"/><text x="75.5110%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.2610%" y="565" width="0.0803%" height="15" fill="rgb(251,224,35)" fg:x="937" fg:w="1"/><text x="75.5110%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.2610%" y="549" width="0.0803%" height="15" fill="rgb(241,33,39)" fg:x="937" fg:w="1"/><text x="75.5110%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="75.2610%" y="533" width="0.0803%" height="15" fill="rgb(222,74,17)" fg:x="937" fg:w="1"/><text x="75.5110%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="75.2610%" y="517" width="0.0803%" height="15" fill="rgb(225,103,0)" fg:x="937" fg:w="1"/><text x="75.5110%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="75.2610%" y="501" width="0.0803%" height="15" fill="rgb(240,0,12)" fg:x="937" fg:w="1"/><text x="75.5110%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.2610%" y="485" width="0.0803%" height="15" fill="rgb(233,213,37)" fg:x="937" fg:w="1"/><text x="75.5110%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.2610%" y="469" width="0.0803%" height="15" fill="rgb(225,84,52)" fg:x="937" fg:w="1"/><text x="75.5110%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="75.2610%" y="453" width="0.0803%" height="15" fill="rgb(247,160,51)" fg:x="937" fg:w="1"/><text x="75.5110%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="75.2610%" y="437" width="0.0803%" height="15" fill="rgb(244,60,51)" fg:x="937" fg:w="1"/><text x="75.5110%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="75.2610%" y="421" width="0.0803%" height="15" fill="rgb(233,114,7)" fg:x="937" fg:w="1"/><text x="75.5110%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="75.2610%" y="405" width="0.0803%" height="15" fill="rgb(246,136,16)" fg:x="937" fg:w="1"/><text x="75.5110%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.2610%" y="389" width="0.0803%" height="15" fill="rgb(243,114,45)" fg:x="937" fg:w="1"/><text x="75.5110%" y="399.50"></text></g><g><title>glob::is_dir (3 samples, 0.24%)</title><rect x="75.3414%" y="565" width="0.2410%" height="15" fill="rgb(247,183,43)" fg:x="938" fg:w="3"/><text x="75.5914%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat (3 samples, 0.24%)</title><rect x="75.3414%" y="549" width="0.2410%" height="15" fill="rgb(251,210,42)" fg:x="938" fg:w="3"/><text x="75.5914%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (3 samples, 0.24%)</title><rect x="75.3414%" y="533" width="0.2410%" height="15" fill="rgb(221,88,35)" fg:x="938" fg:w="3"/><text x="75.5914%" y="543.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 0.24%)</title><rect x="75.3414%" y="517" width="0.2410%" height="15" fill="rgb(242,21,20)" fg:x="938" fg:w="3"/><text x="75.5914%" y="527.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (3 samples, 0.24%)</title><rect x="75.3414%" y="501" width="0.2410%" height="15" fill="rgb(233,226,36)" fg:x="938" fg:w="3"/><text x="75.5914%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx (3 samples, 0.24%)</title><rect x="75.3414%" y="485" width="0.2410%" height="15" fill="rgb(243,189,34)" fg:x="938" fg:w="3"/><text x="75.5914%" y="495.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (3 samples, 0.24%)</title><rect x="75.3414%" y="469" width="0.2410%" height="15" fill="rgb(207,145,50)" fg:x="938" fg:w="3"/><text x="75.5914%" y="479.50"></text></g><g><title>statx (3 samples, 0.24%)</title><rect x="75.3414%" y="453" width="0.2410%" height="15" fill="rgb(242,1,50)" fg:x="938" fg:w="3"/><text x="75.5914%" y="463.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="75.3414%" y="597" width="0.3213%" height="15" fill="rgb(231,65,32)" fg:x="938" fg:w="4"/><text x="75.5914%" y="607.50"></text></g><g><title>glob::fill_todo (4 samples, 0.32%)</title><rect x="75.3414%" y="581" width="0.3213%" height="15" fill="rgb(208,68,49)" fg:x="938" fg:w="4"/><text x="75.5914%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="75.5823%" y="565" width="0.0803%" height="15" fill="rgb(253,54,49)" fg:x="941" fg:w="1"/><text x="75.8323%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="75.5823%" y="549" width="0.0803%" height="15" fill="rgb(245,186,24)" fg:x="941" fg:w="1"/><text x="75.8323%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="75.5823%" y="533" width="0.0803%" height="15" fill="rgb(209,2,41)" fg:x="941" fg:w="1"/><text x="75.8323%" y="543.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="75.5823%" y="517" width="0.0803%" height="15" fill="rgb(242,208,54)" fg:x="941" fg:w="1"/><text x="75.8323%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="75.5823%" y="501" width="0.0803%" height="15" fill="rgb(225,9,51)" fg:x="941" fg:w="1"/><text x="75.8323%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="75.5823%" y="485" width="0.0803%" height="15" fill="rgb(207,207,25)" fg:x="941" fg:w="1"/><text x="75.8323%" y="495.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="75.5823%" y="469" width="0.0803%" height="15" fill="rgb(253,96,18)" fg:x="941" fg:w="1"/><text x="75.8323%" y="479.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (6 samples, 0.48%)</title><rect x="75.2610%" y="629" width="0.4819%" height="15" fill="rgb(252,215,20)" fg:x="937" fg:w="6"/><text x="75.5110%" y="639.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (5 samples, 0.40%)</title><rect x="75.3414%" y="613" width="0.4016%" height="15" fill="rgb(245,227,26)" fg:x="938" fg:w="5"/><text x="75.5914%" y="623.50"></text></g><g><title>glob::glob (1 samples, 0.08%)</title><rect x="75.6627%" y="597" width="0.0803%" height="15" fill="rgb(241,208,0)" fg:x="942" fg:w="1"/><text x="75.9127%" y="607.50"></text></g><g><title>glob::glob_with (1 samples, 0.08%)</title><rect x="75.6627%" y="581" width="0.0803%" height="15" fill="rgb(224,130,10)" fg:x="942" fg:w="1"/><text x="75.9127%" y="591.50"></text></g><g><title>&lt;std::path::PathBuf as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="75.6627%" y="565" width="0.0803%" height="15" fill="rgb(237,29,0)" fg:x="942" fg:w="1"/><text x="75.9127%" y="575.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="75.6627%" y="549" width="0.0803%" height="15" fill="rgb(219,27,41)" fg:x="942" fg:w="1"/><text x="75.9127%" y="559.50"></text></g><g><title>&lt;plugins_core::carrying::actions::GiveToAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="75.9036%" y="565" width="0.0803%" height="15" fill="rgb(245,101,19)" fg:x="945" fg:w="1"/><text x="76.1536%" y="575.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="75.9036%" y="549" width="0.0803%" height="15" fill="rgb(243,44,37)" fg:x="945" fg:w="1"/><text x="76.1536%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.9036%" y="533" width="0.0803%" height="15" fill="rgb(228,213,43)" fg:x="945" fg:w="1"/><text x="76.1536%" y="543.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="75.9036%" y="597" width="0.1606%" height="15" fill="rgb(219,163,21)" fg:x="945" fg:w="2"/><text x="76.1536%" y="607.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="75.9036%" y="581" width="0.1606%" height="15" fill="rgb(234,86,24)" fg:x="945" fg:w="2"/><text x="76.1536%" y="591.50"></text></g><g><title>&lt;plugins_core::fashion::actions::RemoveAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="75.9839%" y="565" width="0.0803%" height="15" fill="rgb(225,10,24)" fg:x="946" fg:w="1"/><text x="76.2339%" y="575.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="75.9839%" y="549" width="0.0803%" height="15" fill="rgb(218,109,7)" fg:x="946" fg:w="1"/><text x="76.2339%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="75.9839%" y="533" width="0.0803%" height="15" fill="rgb(210,20,26)" fg:x="946" fg:w="1"/><text x="76.2339%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.9839%" y="517" width="0.0803%" height="15" fill="rgb(216,18,1)" fg:x="946" fg:w="1"/><text x="76.2339%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.9839%" y="501" width="0.0803%" height="15" fill="rgb(206,163,23)" fg:x="946" fg:w="1"/><text x="76.2339%" y="511.50"></text></g><g><title>&lt;plugins_core::emote::EmotePlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="76.0643%" y="597" width="0.0803%" height="15" fill="rgb(229,150,31)" fg:x="947" fg:w="1"/><text x="76.3143%" y="607.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="76.0643%" y="581" width="0.0803%" height="15" fill="rgb(231,10,5)" fg:x="947" fg:w="1"/><text x="76.3143%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="76.0643%" y="565" width="0.0803%" height="15" fill="rgb(250,40,50)" fg:x="947" fg:w="1"/><text x="76.3143%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.0643%" y="549" width="0.0803%" height="15" fill="rgb(217,119,7)" fg:x="947" fg:w="1"/><text x="76.3143%" y="559.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="76.1446%" y="597" width="0.0803%" height="15" fill="rgb(245,214,40)" fg:x="948" fg:w="1"/><text x="76.3946%" y="607.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="76.1446%" y="581" width="0.0803%" height="15" fill="rgb(216,187,1)" fg:x="948" fg:w="1"/><text x="76.3946%" y="591.50"></text></g><g><title>&lt;plugins_core::moving::actions::RemoveRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="76.1446%" y="565" width="0.0803%" height="15" fill="rgb(237,146,21)" fg:x="948" fg:w="1"/><text x="76.3946%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (7 samples, 0.56%)</title><rect x="75.7430%" y="629" width="0.5622%" height="15" fill="rgb(210,174,47)" fg:x="943" fg:w="7"/><text x="75.9930%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.56%)</title><rect x="75.7430%" y="613" width="0.5622%" height="15" fill="rgb(218,111,39)" fg:x="943" fg:w="7"/><text x="75.9930%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.2249%" y="597" width="0.0803%" height="15" fill="rgb(224,95,19)" fg:x="949" fg:w="1"/><text x="76.4749%" y="607.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (17 samples, 1.37%)</title><rect x="75.0201%" y="709" width="1.3655%" height="15" fill="rgb(234,15,38)" fg:x="934" fg:w="17"/><text x="75.2701%" y="719.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (17 samples, 1.37%)</title><rect x="75.0201%" y="693" width="1.3655%" height="15" fill="rgb(246,56,12)" fg:x="934" fg:w="17"/><text x="75.2701%" y="703.50"></text></g><g><title>engine::session::Session::new (17 samples, 1.37%)</title><rect x="75.0201%" y="677" width="1.3655%" height="15" fill="rgb(247,16,17)" fg:x="934" fg:w="17"/><text x="75.2701%" y="687.50"></text></g><g><title>engine::session::Session::initialize (16 samples, 1.29%)</title><rect x="75.1004%" y="661" width="1.2851%" height="15" fill="rgb(215,151,11)" fg:x="935" fg:w="16"/><text x="75.3504%" y="671.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (15 samples, 1.20%)</title><rect x="75.1807%" y="645" width="1.2048%" height="15" fill="rgb(225,16,24)" fg:x="936" fg:w="15"/><text x="75.4307%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (1 samples, 0.08%)</title><rect x="76.3052%" y="629" width="0.0803%" height="15" fill="rgb(217,117,5)" fg:x="950" fg:w="1"/><text x="76.5552%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.3052%" y="613" width="0.0803%" height="15" fill="rgb(246,187,53)" fg:x="950" fg:w="1"/><text x="76.5552%" y="623.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="76.3855%" y="677" width="0.0803%" height="15" fill="rgb(241,71,40)" fg:x="951" fg:w="1"/><text x="76.6355%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.3855%" y="661" width="0.0803%" height="15" fill="rgb(231,67,39)" fg:x="951" fg:w="1"/><text x="76.6355%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.3855%" y="645" width="0.0803%" height="15" fill="rgb(222,120,24)" fg:x="951" fg:w="1"/><text x="76.6355%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.3855%" y="629" width="0.0803%" height="15" fill="rgb(248,3,3)" fg:x="951" fg:w="1"/><text x="76.6355%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.3855%" y="613" width="0.0803%" height="15" fill="rgb(228,218,5)" fg:x="951" fg:w="1"/><text x="76.6355%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.3855%" y="597" width="0.0803%" height="15" fill="rgb(212,202,43)" fg:x="951" fg:w="1"/><text x="76.6355%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.3855%" y="581" width="0.0803%" height="15" fill="rgb(235,183,2)" fg:x="951" fg:w="1"/><text x="76.6355%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.3855%" y="565" width="0.0803%" height="15" fill="rgb(230,165,10)" fg:x="951" fg:w="1"/><text x="76.6355%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.3855%" y="549" width="0.0803%" height="15" fill="rgb(219,54,40)" fg:x="951" fg:w="1"/><text x="76.6355%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.3855%" y="533" width="0.0803%" height="15" fill="rgb(244,73,9)" fg:x="951" fg:w="1"/><text x="76.6355%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.3855%" y="517" width="0.0803%" height="15" fill="rgb(212,32,45)" fg:x="951" fg:w="1"/><text x="76.6355%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.3855%" y="501" width="0.0803%" height="15" fill="rgb(205,58,31)" fg:x="951" fg:w="1"/><text x="76.6355%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.3855%" y="485" width="0.0803%" height="15" fill="rgb(250,120,43)" fg:x="951" fg:w="1"/><text x="76.6355%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="76.4659%" y="613" width="0.0803%" height="15" fill="rgb(235,13,10)" fg:x="952" fg:w="1"/><text x="76.7159%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.4659%" y="597" width="0.0803%" height="15" fill="rgb(232,219,31)" fg:x="952" fg:w="1"/><text x="76.7159%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.5462%" y="549" width="0.0803%" height="15" fill="rgb(218,157,51)" fg:x="953" fg:w="1"/><text x="76.7962%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.5462%" y="533" width="0.0803%" height="15" fill="rgb(211,91,52)" fg:x="953" fg:w="1"/><text x="76.7962%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="76.5462%" y="597" width="0.1606%" height="15" fill="rgb(240,173,1)" fg:x="953" fg:w="2"/><text x="76.7962%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="76.5462%" y="581" width="0.1606%" height="15" fill="rgb(248,20,47)" fg:x="953" fg:w="2"/><text x="76.7962%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="76.5462%" y="565" width="0.1606%" height="15" fill="rgb(217,221,40)" fg:x="953" fg:w="2"/><text x="76.7962%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="76.6265%" y="549" width="0.0803%" height="15" fill="rgb(226,149,51)" fg:x="954" fg:w="1"/><text x="76.8765%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.6265%" y="533" width="0.0803%" height="15" fill="rgb(252,193,7)" fg:x="954" fg:w="1"/><text x="76.8765%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.6265%" y="517" width="0.0803%" height="15" fill="rgb(205,123,0)" fg:x="954" fg:w="1"/><text x="76.8765%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="76.7068%" y="565" width="0.1606%" height="15" fill="rgb(233,173,25)" fg:x="955" fg:w="2"/><text x="76.9568%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.7871%" y="549" width="0.0803%" height="15" fill="rgb(216,63,32)" fg:x="956" fg:w="1"/><text x="77.0371%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.7871%" y="533" width="0.0803%" height="15" fill="rgb(209,56,45)" fg:x="956" fg:w="1"/><text x="77.0371%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.7871%" y="517" width="0.0803%" height="15" fill="rgb(226,111,49)" fg:x="956" fg:w="1"/><text x="77.0371%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="76.7871%" y="501" width="0.0803%" height="15" fill="rgb(244,181,21)" fg:x="956" fg:w="1"/><text x="77.0371%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.7871%" y="485" width="0.0803%" height="15" fill="rgb(222,126,15)" fg:x="956" fg:w="1"/><text x="77.0371%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="76.7871%" y="469" width="0.0803%" height="15" fill="rgb(222,95,17)" fg:x="956" fg:w="1"/><text x="77.0371%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="76.8675%" y="517" width="0.0803%" height="15" fill="rgb(254,46,5)" fg:x="957" fg:w="1"/><text x="77.1175%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.8675%" y="501" width="0.0803%" height="15" fill="rgb(236,216,35)" fg:x="957" fg:w="1"/><text x="77.1175%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.8675%" y="485" width="0.0803%" height="15" fill="rgb(217,187,26)" fg:x="957" fg:w="1"/><text x="77.1175%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.8675%" y="469" width="0.0803%" height="15" fill="rgb(207,192,25)" fg:x="957" fg:w="1"/><text x="77.1175%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="76.8675%" y="549" width="0.1606%" height="15" fill="rgb(253,135,27)" fg:x="957" fg:w="2"/><text x="77.1175%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="76.8675%" y="533" width="0.1606%" height="15" fill="rgb(211,122,29)" fg:x="957" fg:w="2"/><text x="77.1175%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.9478%" y="517" width="0.0803%" height="15" fill="rgb(233,162,40)" fg:x="958" fg:w="1"/><text x="77.1978%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.9478%" y="501" width="0.0803%" height="15" fill="rgb(222,184,47)" fg:x="958" fg:w="1"/><text x="77.1978%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="76.9478%" y="485" width="0.0803%" height="15" fill="rgb(249,99,23)" fg:x="958" fg:w="1"/><text x="77.1978%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="77.0281%" y="549" width="0.0803%" height="15" fill="rgb(214,60,12)" fg:x="959" fg:w="1"/><text x="77.2781%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.0281%" y="533" width="0.0803%" height="15" fill="rgb(250,229,36)" fg:x="959" fg:w="1"/><text x="77.2781%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="77.1084%" y="517" width="0.0803%" height="15" fill="rgb(232,195,10)" fg:x="960" fg:w="1"/><text x="77.3584%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.1084%" y="501" width="0.0803%" height="15" fill="rgb(205,213,31)" fg:x="960" fg:w="1"/><text x="77.3584%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="77.1084%" y="549" width="0.1606%" height="15" fill="rgb(237,43,8)" fg:x="960" fg:w="2"/><text x="77.3584%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="77.1084%" y="533" width="0.1606%" height="15" fill="rgb(216,208,3)" fg:x="960" fg:w="2"/><text x="77.3584%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.1888%" y="517" width="0.0803%" height="15" fill="rgb(228,179,44)" fg:x="961" fg:w="1"/><text x="77.4388%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="76.8675%" y="565" width="0.4819%" height="15" fill="rgb(230,192,27)" fg:x="957" fg:w="6"/><text x="77.1175%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.2691%" y="549" width="0.0803%" height="15" fill="rgb(251,30,38)" fg:x="962" fg:w="1"/><text x="77.5191%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.2691%" y="533" width="0.0803%" height="15" fill="rgb(246,55,52)" fg:x="962" fg:w="1"/><text x="77.5191%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.2691%" y="517" width="0.0803%" height="15" fill="rgb(249,79,26)" fg:x="962" fg:w="1"/><text x="77.5191%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.72%)</title><rect x="76.7068%" y="597" width="0.7229%" height="15" fill="rgb(220,202,16)" fg:x="955" fg:w="9"/><text x="76.9568%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.72%)</title><rect x="76.7068%" y="581" width="0.7229%" height="15" fill="rgb(250,170,23)" fg:x="955" fg:w="9"/><text x="76.9568%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.3494%" y="565" width="0.0803%" height="15" fill="rgb(230,7,37)" fg:x="963" fg:w="1"/><text x="77.5994%" y="575.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="77.4297%" y="581" width="0.1606%" height="15" fill="rgb(213,71,1)" fg:x="964" fg:w="2"/><text x="77.6797%" y="591.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPaths as core::convert::Into&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::into (1 samples, 0.08%)</title><rect x="77.5100%" y="565" width="0.0803%" height="15" fill="rgb(227,87,39)" fg:x="965" fg:w="1"/><text x="77.7600%" y="575.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="77.5100%" y="549" width="0.0803%" height="15" fill="rgb(210,41,29)" fg:x="965" fg:w="1"/><text x="77.7600%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="77.5100%" y="533" width="0.0803%" height="15" fill="rgb(206,191,31)" fg:x="965" fg:w="1"/><text x="77.7600%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="77.7510%" y="517" width="0.0803%" height="15" fill="rgb(247,75,54)" fg:x="968" fg:w="1"/><text x="78.0010%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="77.8313%" y="501" width="0.0803%" height="15" fill="rgb(208,54,50)" fg:x="969" fg:w="1"/><text x="78.0813%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.8313%" y="485" width="0.0803%" height="15" fill="rgb(214,90,37)" fg:x="969" fg:w="1"/><text x="78.0813%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.8313%" y="469" width="0.0803%" height="15" fill="rgb(220,132,6)" fg:x="969" fg:w="1"/><text x="78.0813%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.8313%" y="453" width="0.0803%" height="15" fill="rgb(213,167,7)" fg:x="969" fg:w="1"/><text x="78.0813%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.8313%" y="437" width="0.0803%" height="15" fill="rgb(243,36,27)" fg:x="969" fg:w="1"/><text x="78.0813%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.8313%" y="421" width="0.0803%" height="15" fill="rgb(235,147,12)" fg:x="969" fg:w="1"/><text x="78.0813%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.8313%" y="405" width="0.0803%" height="15" fill="rgb(212,198,44)" fg:x="969" fg:w="1"/><text x="78.0813%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.8313%" y="389" width="0.0803%" height="15" fill="rgb(218,68,50)" fg:x="969" fg:w="1"/><text x="78.0813%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.8313%" y="373" width="0.0803%" height="15" fill="rgb(224,79,48)" fg:x="969" fg:w="1"/><text x="78.0813%" y="383.50"></text></g><g><title>engine::session::Session::flush (20 samples, 1.61%)</title><rect x="76.3855%" y="693" width="1.6064%" height="15" fill="rgb(213,191,50)" fg:x="951" fg:w="20"/><text x="76.6355%" y="703.50"></text></g><g><title>engine::session::state::State::close (19 samples, 1.53%)</title><rect x="76.4659%" y="677" width="1.5261%" height="15" fill="rgb(254,146,10)" fg:x="952" fg:w="19"/><text x="76.7159%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (19 samples, 1.53%)</title><rect x="76.4659%" y="661" width="1.5261%" height="15" fill="rgb(215,175,11)" fg:x="952" fg:w="19"/><text x="76.7159%" y="671.50"></text></g><g><title>core::iter::adapters::try_process (19 samples, 1.53%)</title><rect x="76.4659%" y="645" width="1.5261%" height="15" fill="rgb(207,49,7)" fg:x="952" fg:w="19"/><text x="76.7159%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (19 samples, 1.53%)</title><rect x="76.4659%" y="629" width="1.5261%" height="15" fill="rgb(234,144,29)" fg:x="952" fg:w="19"/><text x="76.7159%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (18 samples, 1.45%)</title><rect x="76.5462%" y="613" width="1.4458%" height="15" fill="rgb(213,222,48)" fg:x="953" fg:w="18"/><text x="76.7962%" y="623.50"></text></g><g><title>kernel::model::any_entity_changes (7 samples, 0.56%)</title><rect x="77.4297%" y="597" width="0.5622%" height="15" fill="rgb(222,8,6)" fg:x="964" fg:w="7"/><text x="77.6797%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.40%)</title><rect x="77.5904%" y="581" width="0.4016%" height="15" fill="rgb(221,114,49)" fg:x="966" fg:w="5"/><text x="77.8404%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="77.5904%" y="565" width="0.4016%" height="15" fill="rgb(250,140,42)" fg:x="966" fg:w="5"/><text x="77.8404%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="77.6707%" y="549" width="0.3213%" height="15" fill="rgb(250,150,27)" fg:x="967" fg:w="4"/><text x="77.9207%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="77.7510%" y="533" width="0.2410%" height="15" fill="rgb(252,159,3)" fg:x="968" fg:w="3"/><text x="78.0010%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="77.8313%" y="517" width="0.1606%" height="15" fill="rgb(241,182,3)" fg:x="969" fg:w="2"/><text x="78.0813%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.9116%" y="501" width="0.0803%" height="15" fill="rgb(236,3,9)" fg:x="970" fg:w="1"/><text x="78.1616%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.9116%" y="485" width="0.0803%" height="15" fill="rgb(223,227,51)" fg:x="970" fg:w="1"/><text x="78.1616%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.9116%" y="469" width="0.0803%" height="15" fill="rgb(232,133,30)" fg:x="970" fg:w="1"/><text x="78.1616%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.9116%" y="453" width="0.0803%" height="15" fill="rgb(209,93,27)" fg:x="970" fg:w="1"/><text x="78.1616%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.9116%" y="437" width="0.0803%" height="15" fill="rgb(208,108,34)" fg:x="970" fg:w="1"/><text x="78.1616%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.9920%" y="629" width="0.0803%" height="15" fill="rgb(215,189,13)" fg:x="971" fg:w="1"/><text x="78.2420%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.9920%" y="613" width="0.0803%" height="15" fill="rgb(206,88,23)" fg:x="971" fg:w="1"/><text x="78.2420%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.9920%" y="597" width="0.0803%" height="15" fill="rgb(240,173,0)" fg:x="971" fg:w="1"/><text x="78.2420%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="77.9920%" y="581" width="0.0803%" height="15" fill="rgb(223,106,52)" fg:x="971" fg:w="1"/><text x="78.2420%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="77.9920%" y="565" width="0.0803%" height="15" fill="rgb(206,130,16)" fg:x="971" fg:w="1"/><text x="78.2420%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="77.9920%" y="549" width="0.0803%" height="15" fill="rgb(220,54,25)" fg:x="971" fg:w="1"/><text x="78.2420%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="77.9920%" y="533" width="0.0803%" height="15" fill="rgb(210,4,38)" fg:x="971" fg:w="1"/><text x="78.2420%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="77.9920%" y="517" width="0.0803%" height="15" fill="rgb(238,94,39)" fg:x="971" fg:w="1"/><text x="78.2420%" y="527.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="77.9920%" y="661" width="0.1606%" height="15" fill="rgb(234,124,34)" fg:x="971" fg:w="2"/><text x="78.2420%" y="671.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="77.9920%" y="645" width="0.1606%" height="15" fill="rgb(221,91,40)" fg:x="971" fg:w="2"/><text x="78.2420%" y="655.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.0723%" y="629" width="0.0803%" height="15" fill="rgb(246,53,28)" fg:x="972" fg:w="1"/><text x="78.3223%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="78.1526%" y="645" width="0.0803%" height="15" fill="rgb(229,109,7)" fg:x="973" fg:w="1"/><text x="78.4026%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="78.1526%" y="629" width="0.0803%" height="15" fill="rgb(249,117,8)" fg:x="973" fg:w="1"/><text x="78.4026%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="78.1526%" y="613" width="0.0803%" height="15" fill="rgb(210,181,1)" fg:x="973" fg:w="1"/><text x="78.4026%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.1526%" y="597" width="0.0803%" height="15" fill="rgb(211,66,1)" fg:x="973" fg:w="1"/><text x="78.4026%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.1526%" y="581" width="0.0803%" height="15" fill="rgb(221,90,14)" fg:x="973" fg:w="1"/><text x="78.4026%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.1526%" y="565" width="0.0803%" height="15" fill="rgb(219,222,44)" fg:x="973" fg:w="1"/><text x="78.4026%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.1526%" y="549" width="0.0803%" height="15" fill="rgb(246,34,33)" fg:x="973" fg:w="1"/><text x="78.4026%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.1526%" y="533" width="0.0803%" height="15" fill="rgb(227,135,41)" fg:x="973" fg:w="1"/><text x="78.4026%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="78.1526%" y="517" width="0.0803%" height="15" fill="rgb(226,15,14)" fg:x="973" fg:w="1"/><text x="78.4026%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="78.1526%" y="501" width="0.0803%" height="15" fill="rgb(236,148,47)" fg:x="973" fg:w="1"/><text x="78.4026%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="78.1526%" y="485" width="0.0803%" height="15" fill="rgb(233,162,52)" fg:x="973" fg:w="1"/><text x="78.4026%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.1526%" y="469" width="0.0803%" height="15" fill="rgb(244,35,28)" fg:x="973" fg:w="1"/><text x="78.4026%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.1526%" y="453" width="0.0803%" height="15" fill="rgb(205,121,10)" fg:x="973" fg:w="1"/><text x="78.4026%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="78.1526%" y="437" width="0.0803%" height="15" fill="rgb(250,58,18)" fg:x="973" fg:w="1"/><text x="78.4026%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="78.1526%" y="421" width="0.0803%" height="15" fill="rgb(216,37,13)" fg:x="973" fg:w="1"/><text x="78.4026%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="78.1526%" y="405" width="0.0803%" height="15" fill="rgb(221,215,42)" fg:x="973" fg:w="1"/><text x="78.4026%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="78.1526%" y="389" width="0.0803%" height="15" fill="rgb(217,214,19)" fg:x="973" fg:w="1"/><text x="78.4026%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.1526%" y="373" width="0.0803%" height="15" fill="rgb(233,139,13)" fg:x="973" fg:w="1"/><text x="78.4026%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="77.9920%" y="677" width="0.4016%" height="15" fill="rgb(247,168,23)" fg:x="971" fg:w="5"/><text x="78.2420%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="78.1526%" y="661" width="0.2410%" height="15" fill="rgb(207,202,1)" fg:x="973" fg:w="3"/><text x="78.4026%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="78.2329%" y="645" width="0.1606%" height="15" fill="rgb(220,155,48)" fg:x="974" fg:w="2"/><text x="78.4829%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="78.2329%" y="629" width="0.1606%" height="15" fill="rgb(250,43,26)" fg:x="974" fg:w="2"/><text x="78.4829%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="78.2329%" y="613" width="0.1606%" height="15" fill="rgb(212,190,23)" fg:x="974" fg:w="2"/><text x="78.4829%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="78.2329%" y="597" width="0.1606%" height="15" fill="rgb(216,39,24)" fg:x="974" fg:w="2"/><text x="78.4829%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="78.2329%" y="581" width="0.1606%" height="15" fill="rgb(252,113,16)" fg:x="974" fg:w="2"/><text x="78.4829%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="78.2329%" y="565" width="0.1606%" height="15" fill="rgb(208,113,19)" fg:x="974" fg:w="2"/><text x="78.4829%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="78.2329%" y="549" width="0.1606%" height="15" fill="rgb(234,107,25)" fg:x="974" fg:w="2"/><text x="78.4829%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="78.2329%" y="533" width="0.1606%" height="15" fill="rgb(234,217,51)" fg:x="974" fg:w="2"/><text x="78.4829%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="78.3133%" y="517" width="0.0803%" height="15" fill="rgb(251,29,42)" fg:x="975" fg:w="1"/><text x="78.5633%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.3936%" y="629" width="0.0803%" height="15" fill="rgb(221,62,51)" fg:x="976" fg:w="1"/><text x="78.6436%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.3936%" y="613" width="0.0803%" height="15" fill="rgb(240,192,43)" fg:x="976" fg:w="1"/><text x="78.6436%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (7 samples, 0.56%)</title><rect x="77.9920%" y="693" width="0.5622%" height="15" fill="rgb(224,157,47)" fg:x="971" fg:w="7"/><text x="78.2420%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="78.3936%" y="677" width="0.1606%" height="15" fill="rgb(226,84,45)" fg:x="976" fg:w="2"/><text x="78.6436%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="78.3936%" y="661" width="0.1606%" height="15" fill="rgb(208,207,23)" fg:x="976" fg:w="2"/><text x="78.6436%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.3936%" y="645" width="0.1606%" height="15" fill="rgb(253,34,51)" fg:x="976" fg:w="2"/><text x="78.6436%" y="655.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="78.4739%" y="629" width="0.0803%" height="15" fill="rgb(227,26,34)" fg:x="977" fg:w="1"/><text x="78.7239%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.5542%" y="677" width="0.0803%" height="15" fill="rgb(245,75,19)" fg:x="978" fg:w="1"/><text x="78.8042%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.5542%" y="661" width="0.0803%" height="15" fill="rgb(250,191,31)" fg:x="978" fg:w="1"/><text x="78.8042%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="78.5542%" y="645" width="0.0803%" height="15" fill="rgb(224,11,50)" fg:x="978" fg:w="1"/><text x="78.8042%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.5542%" y="629" width="0.0803%" height="15" fill="rgb(231,171,7)" fg:x="978" fg:w="1"/><text x="78.8042%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.5542%" y="613" width="0.0803%" height="15" fill="rgb(252,214,10)" fg:x="978" fg:w="1"/><text x="78.8042%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.5542%" y="597" width="0.0803%" height="15" fill="rgb(249,45,46)" fg:x="978" fg:w="1"/><text x="78.8042%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.5542%" y="581" width="0.0803%" height="15" fill="rgb(240,173,7)" fg:x="978" fg:w="1"/><text x="78.8042%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.6345%" y="549" width="0.0803%" height="15" fill="rgb(235,214,13)" fg:x="979" fg:w="1"/><text x="78.8845%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.6345%" y="533" width="0.0803%" height="15" fill="rgb(245,156,8)" fg:x="979" fg:w="1"/><text x="78.8845%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.6345%" y="517" width="0.0803%" height="15" fill="rgb(235,46,12)" fg:x="979" fg:w="1"/><text x="78.8845%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="78.6345%" y="565" width="0.1606%" height="15" fill="rgb(221,81,14)" fg:x="979" fg:w="2"/><text x="78.8845%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.7149%" y="549" width="0.0803%" height="15" fill="rgb(238,207,9)" fg:x="980" fg:w="1"/><text x="78.9649%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="78.7952%" y="549" width="0.0803%" height="15" fill="rgb(224,129,35)" fg:x="981" fg:w="1"/><text x="79.0452%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.7952%" y="533" width="0.0803%" height="15" fill="rgb(243,218,34)" fg:x="981" fg:w="1"/><text x="79.0452%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="78.7952%" y="517" width="0.0803%" height="15" fill="rgb(220,166,13)" fg:x="981" fg:w="1"/><text x="79.0452%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="78.8755%" y="533" width="0.0803%" height="15" fill="rgb(227,167,49)" fg:x="982" fg:w="1"/><text x="79.1255%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.8755%" y="517" width="0.0803%" height="15" fill="rgb(234,142,12)" fg:x="982" fg:w="1"/><text x="79.1255%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="78.8755%" y="501" width="0.0803%" height="15" fill="rgb(207,100,48)" fg:x="982" fg:w="1"/><text x="79.1255%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.8755%" y="485" width="0.0803%" height="15" fill="rgb(210,25,14)" fg:x="982" fg:w="1"/><text x="79.1255%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="78.8755%" y="469" width="0.0803%" height="15" fill="rgb(246,116,27)" fg:x="982" fg:w="1"/><text x="79.1255%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.8755%" y="453" width="0.0803%" height="15" fill="rgb(214,193,42)" fg:x="982" fg:w="1"/><text x="79.1255%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="78.8755%" y="437" width="0.0803%" height="15" fill="rgb(214,122,8)" fg:x="982" fg:w="1"/><text x="79.1255%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="78.9558%" y="517" width="0.0803%" height="15" fill="rgb(244,173,18)" fg:x="983" fg:w="1"/><text x="79.2058%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.9558%" y="501" width="0.0803%" height="15" fill="rgb(232,68,19)" fg:x="983" fg:w="1"/><text x="79.2058%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="78.9558%" y="485" width="0.0803%" height="15" fill="rgb(236,224,1)" fg:x="983" fg:w="1"/><text x="79.2058%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.9558%" y="469" width="0.0803%" height="15" fill="rgb(240,11,8)" fg:x="983" fg:w="1"/><text x="79.2058%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.0361%" y="517" width="0.0803%" height="15" fill="rgb(244,159,20)" fg:x="984" fg:w="1"/><text x="79.2861%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.0361%" y="501" width="0.0803%" height="15" fill="rgb(240,223,54)" fg:x="984" fg:w="1"/><text x="79.2861%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="79.1165%" y="501" width="0.1606%" height="15" fill="rgb(237,146,5)" fg:x="985" fg:w="2"/><text x="79.3665%" y="511.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="79.1165%" y="485" width="0.1606%" height="15" fill="rgb(218,221,32)" fg:x="985" fg:w="2"/><text x="79.3665%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.1968%" y="469" width="0.0803%" height="15" fill="rgb(244,96,26)" fg:x="986" fg:w="1"/><text x="79.4468%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.1968%" y="453" width="0.0803%" height="15" fill="rgb(245,184,37)" fg:x="986" fg:w="1"/><text x="79.4468%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="79.1968%" y="437" width="0.0803%" height="15" fill="rgb(248,91,47)" fg:x="986" fg:w="1"/><text x="79.4468%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.1968%" y="421" width="0.0803%" height="15" fill="rgb(243,199,8)" fg:x="986" fg:w="1"/><text x="79.4468%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="79.1968%" y="405" width="0.0803%" height="15" fill="rgb(249,12,15)" fg:x="986" fg:w="1"/><text x="79.4468%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="79.3574%" y="485" width="0.2410%" height="15" fill="rgb(245,97,12)" fg:x="988" fg:w="3"/><text x="79.6074%" y="495.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="79.3574%" y="469" width="0.2410%" height="15" fill="rgb(244,61,1)" fg:x="988" fg:w="3"/><text x="79.6074%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="79.4378%" y="453" width="0.1606%" height="15" fill="rgb(222,194,10)" fg:x="989" fg:w="2"/><text x="79.6878%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.5181%" y="437" width="0.0803%" height="15" fill="rgb(226,178,8)" fg:x="990" fg:w="1"/><text x="79.7681%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="79.5181%" y="421" width="0.0803%" height="15" fill="rgb(241,32,34)" fg:x="990" fg:w="1"/><text x="79.7681%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.5181%" y="405" width="0.0803%" height="15" fill="rgb(254,26,6)" fg:x="990" fg:w="1"/><text x="79.7681%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="79.5181%" y="389" width="0.0803%" height="15" fill="rgb(249,71,11)" fg:x="990" fg:w="1"/><text x="79.7681%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.72%)</title><rect x="78.9558%" y="533" width="0.7229%" height="15" fill="rgb(232,170,27)" fg:x="983" fg:w="9"/><text x="79.2058%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="79.1165%" y="517" width="0.5622%" height="15" fill="rgb(214,223,17)" fg:x="985" fg:w="7"/><text x="79.3665%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="79.2771%" y="501" width="0.4016%" height="15" fill="rgb(250,18,15)" fg:x="987" fg:w="5"/><text x="79.5271%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="79.5984%" y="485" width="0.0803%" height="15" fill="rgb(212,153,51)" fg:x="991" fg:w="1"/><text x="79.8484%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.5984%" y="469" width="0.0803%" height="15" fill="rgb(219,194,12)" fg:x="991" fg:w="1"/><text x="79.8484%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.5984%" y="453" width="0.0803%" height="15" fill="rgb(212,58,17)" fg:x="991" fg:w="1"/><text x="79.8484%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.5984%" y="437" width="0.0803%" height="15" fill="rgb(254,5,10)" fg:x="991" fg:w="1"/><text x="79.8484%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.88%)</title><rect x="78.8755%" y="549" width="0.8835%" height="15" fill="rgb(246,91,7)" fg:x="982" fg:w="11"/><text x="79.1255%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.6787%" y="533" width="0.0803%" height="15" fill="rgb(218,108,49)" fg:x="992" fg:w="1"/><text x="79.9287%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.6787%" y="517" width="0.0803%" height="15" fill="rgb(238,123,20)" fg:x="992" fg:w="1"/><text x="79.9287%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (13 samples, 1.04%)</title><rect x="78.7952%" y="565" width="1.0442%" height="15" fill="rgb(231,69,23)" fg:x="981" fg:w="13"/><text x="79.0452%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.7590%" y="549" width="0.0803%" height="15" fill="rgb(230,209,3)" fg:x="993" fg:w="1"/><text x="80.0090%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.7590%" y="533" width="0.0803%" height="15" fill="rgb(231,19,0)" fg:x="993" fg:w="1"/><text x="80.0090%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.7590%" y="517" width="0.0803%" height="15" fill="rgb(226,192,25)" fg:x="993" fg:w="1"/><text x="80.0090%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="79.7590%" y="501" width="0.0803%" height="15" fill="rgb(223,175,53)" fg:x="993" fg:w="1"/><text x="80.0090%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.7590%" y="485" width="0.0803%" height="15" fill="rgb(248,35,51)" fg:x="993" fg:w="1"/><text x="80.0090%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.7590%" y="469" width="0.0803%" height="15" fill="rgb(230,37,26)" fg:x="993" fg:w="1"/><text x="80.0090%" y="479.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="79.8394%" y="549" width="0.0803%" height="15" fill="rgb(206,120,22)" fg:x="994" fg:w="1"/><text x="80.0894%" y="559.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="79.8394%" y="533" width="0.0803%" height="15" fill="rgb(207,165,28)" fg:x="994" fg:w="1"/><text x="80.0894%" y="543.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="79.8394%" y="517" width="0.0803%" height="15" fill="rgb(226,23,46)" fg:x="994" fg:w="1"/><text x="80.0894%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.8394%" y="501" width="0.0803%" height="15" fill="rgb(208,130,44)" fg:x="994" fg:w="1"/><text x="80.0894%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.0000%" y="469" width="0.0803%" height="15" fill="rgb(231,67,8)" fg:x="996" fg:w="1"/><text x="80.2500%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.0000%" y="453" width="0.0803%" height="15" fill="rgb(205,183,22)" fg:x="996" fg:w="1"/><text x="80.2500%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.1606%" y="421" width="0.0803%" height="15" fill="rgb(224,47,9)" fg:x="998" fg:w="1"/><text x="80.4106%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="80.0803%" y="437" width="0.2410%" height="15" fill="rgb(250,183,49)" fg:x="997" fg:w="3"/><text x="80.3303%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.2410%" y="421" width="0.0803%" height="15" fill="rgb(220,151,39)" fg:x="999" fg:w="1"/><text x="80.4910%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="80.2410%" y="405" width="0.0803%" height="15" fill="rgb(220,118,20)" fg:x="999" fg:w="1"/><text x="80.4910%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.2410%" y="389" width="0.0803%" height="15" fill="rgb(231,65,51)" fg:x="999" fg:w="1"/><text x="80.4910%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="80.2410%" y="373" width="0.0803%" height="15" fill="rgb(253,125,37)" fg:x="999" fg:w="1"/><text x="80.4910%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.2410%" y="357" width="0.0803%" height="15" fill="rgb(232,102,6)" fg:x="999" fg:w="1"/><text x="80.4910%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.2410%" y="341" width="0.0803%" height="15" fill="rgb(251,105,13)" fg:x="999" fg:w="1"/><text x="80.4910%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="80.0803%" y="469" width="0.3213%" height="15" fill="rgb(222,179,29)" fg:x="997" fg:w="4"/><text x="80.3303%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="80.0803%" y="453" width="0.3213%" height="15" fill="rgb(229,180,53)" fg:x="997" fg:w="4"/><text x="80.3303%" y="463.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="80.3213%" y="437" width="0.0803%" height="15" fill="rgb(238,104,13)" fg:x="1000" fg:w="1"/><text x="80.5713%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="80.3213%" y="421" width="0.0803%" height="15" fill="rgb(210,130,5)" fg:x="1000" fg:w="1"/><text x="80.5713%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="80.0000%" y="501" width="0.4819%" height="15" fill="rgb(233,87,49)" fg:x="996" fg:w="6"/><text x="80.2500%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="80.0000%" y="485" width="0.4819%" height="15" fill="rgb(243,34,9)" fg:x="996" fg:w="6"/><text x="80.2500%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.4016%" y="469" width="0.0803%" height="15" fill="rgb(235,225,10)" fg:x="1001" fg:w="1"/><text x="80.6516%" y="479.50"></text></g><g><title>engine::session::Session::flush (24 samples, 1.93%)</title><rect x="78.6345%" y="677" width="1.9277%" height="15" fill="rgb(212,0,30)" fg:x="979" fg:w="24"/><text x="78.8845%" y="687.50">e..</text></g><g><title>engine::session::Session::save_changes (24 samples, 1.93%)</title><rect x="78.6345%" y="661" width="1.9277%" height="15" fill="rgb(211,177,0)" fg:x="979" fg:w="24"/><text x="78.8845%" y="671.50">e..</text></g><g><title>engine::session::state::State::close (24 samples, 1.93%)</title><rect x="78.6345%" y="645" width="1.9277%" height="15" fill="rgb(225,220,11)" fg:x="979" fg:w="24"/><text x="78.8845%" y="655.50">e..</text></g><g><title>engine::session::state::State::flush_entities (24 samples, 1.93%)</title><rect x="78.6345%" y="629" width="1.9277%" height="15" fill="rgb(215,10,13)" fg:x="979" fg:w="24"/><text x="78.8845%" y="639.50">e..</text></g><g><title>core::iter::adapters::try_process (24 samples, 1.93%)</title><rect x="78.6345%" y="613" width="1.9277%" height="15" fill="rgb(240,177,14)" fg:x="979" fg:w="24"/><text x="78.8845%" y="623.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (24 samples, 1.93%)</title><rect x="78.6345%" y="597" width="1.9277%" height="15" fill="rgb(243,7,39)" fg:x="979" fg:w="24"/><text x="78.8845%" y="607.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (24 samples, 1.93%)</title><rect x="78.6345%" y="581" width="1.9277%" height="15" fill="rgb(212,99,0)" fg:x="979" fg:w="24"/><text x="78.8845%" y="591.50">e..</text></g><g><title>kernel::model::any_entity_changes (9 samples, 0.72%)</title><rect x="79.8394%" y="565" width="0.7229%" height="15" fill="rgb(225,162,48)" fg:x="994" fg:w="9"/><text x="80.0894%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.64%)</title><rect x="79.9197%" y="549" width="0.6426%" height="15" fill="rgb(246,16,25)" fg:x="995" fg:w="8"/><text x="80.1697%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.64%)</title><rect x="79.9197%" y="533" width="0.6426%" height="15" fill="rgb(220,150,2)" fg:x="995" fg:w="8"/><text x="80.1697%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.56%)</title><rect x="80.0000%" y="517" width="0.5622%" height="15" fill="rgb(237,113,11)" fg:x="996" fg:w="7"/><text x="80.2500%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.4819%" y="501" width="0.0803%" height="15" fill="rgb(236,70,20)" fg:x="1002" fg:w="1"/><text x="80.7319%" y="511.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="80.5622%" y="677" width="0.0803%" height="15" fill="rgb(234,94,7)" fg:x="1003" fg:w="1"/><text x="80.8122%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="80.5622%" y="661" width="0.0803%" height="15" fill="rgb(250,221,0)" fg:x="1003" fg:w="1"/><text x="80.8122%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="80.5622%" y="645" width="0.0803%" height="15" fill="rgb(245,149,46)" fg:x="1003" fg:w="1"/><text x="80.8122%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.5622%" y="629" width="0.0803%" height="15" fill="rgb(215,37,27)" fg:x="1003" fg:w="1"/><text x="80.8122%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="80.5622%" y="613" width="0.0803%" height="15" fill="rgb(232,65,3)" fg:x="1003" fg:w="1"/><text x="80.8122%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="80.5622%" y="597" width="0.0803%" height="15" fill="rgb(214,2,16)" fg:x="1003" fg:w="1"/><text x="80.8122%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.5622%" y="581" width="0.0803%" height="15" fill="rgb(227,131,50)" fg:x="1003" fg:w="1"/><text x="80.8122%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.5622%" y="565" width="0.0803%" height="15" fill="rgb(247,131,45)" fg:x="1003" fg:w="1"/><text x="80.8122%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.5622%" y="549" width="0.0803%" height="15" fill="rgb(215,97,47)" fg:x="1003" fg:w="1"/><text x="80.8122%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.5622%" y="533" width="0.0803%" height="15" fill="rgb(233,143,12)" fg:x="1003" fg:w="1"/><text x="80.8122%" y="543.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="80.6426%" y="645" width="0.0803%" height="15" fill="rgb(222,57,17)" fg:x="1004" fg:w="1"/><text x="80.8926%" y="655.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="80.6426%" y="629" width="0.0803%" height="15" fill="rgb(214,119,38)" fg:x="1004" fg:w="1"/><text x="80.8926%" y="639.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="80.6426%" y="613" width="0.0803%" height="15" fill="rgb(217,28,47)" fg:x="1004" fg:w="1"/><text x="80.8926%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="80.6426%" y="661" width="0.1606%" height="15" fill="rgb(231,14,52)" fg:x="1004" fg:w="2"/><text x="80.8926%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="80.7229%" y="645" width="0.0803%" height="15" fill="rgb(220,158,18)" fg:x="1005" fg:w="1"/><text x="80.9729%" y="655.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="80.7229%" y="629" width="0.0803%" height="15" fill="rgb(222,143,46)" fg:x="1005" fg:w="1"/><text x="80.9729%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="80.7229%" y="613" width="0.0803%" height="15" fill="rgb(227,165,5)" fg:x="1005" fg:w="1"/><text x="80.9729%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="80.7229%" y="597" width="0.0803%" height="15" fill="rgb(216,222,49)" fg:x="1005" fg:w="1"/><text x="80.9729%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="80.7229%" y="581" width="0.0803%" height="15" fill="rgb(238,73,39)" fg:x="1005" fg:w="1"/><text x="80.9729%" y="591.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="80.6426%" y="677" width="0.2410%" height="15" fill="rgb(252,115,9)" fg:x="1004" fg:w="3"/><text x="80.8926%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.8032%" y="661" width="0.0803%" height="15" fill="rgb(238,202,4)" fg:x="1006" fg:w="1"/><text x="81.0532%" y="671.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (1 samples, 0.08%)</title><rect x="80.8835%" y="677" width="0.0803%" height="15" fill="rgb(252,153,44)" fg:x="1007" fg:w="1"/><text x="81.1335%" y="687.50"></text></g><g><title>plugins_core::tools::set_occupying (1 samples, 0.08%)</title><rect x="80.8835%" y="661" width="0.0803%" height="15" fill="rgb(235,128,27)" fg:x="1007" fg:w="1"/><text x="81.1335%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="80.8835%" y="645" width="0.0803%" height="15" fill="rgb(221,121,47)" fg:x="1007" fg:w="1"/><text x="81.1335%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="80.8835%" y="629" width="0.0803%" height="15" fill="rgb(247,211,47)" fg:x="1007" fg:w="1"/><text x="81.1335%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="80.8835%" y="613" width="0.0803%" height="15" fill="rgb(252,47,49)" fg:x="1007" fg:w="1"/><text x="81.1335%" y="623.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="80.9639%" y="661" width="0.0803%" height="15" fill="rgb(219,119,53)" fg:x="1008" fg:w="1"/><text x="81.2139%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.9639%" y="645" width="0.0803%" height="15" fill="rgb(243,165,53)" fg:x="1008" fg:w="1"/><text x="81.2139%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.9639%" y="629" width="0.0803%" height="15" fill="rgb(230,12,35)" fg:x="1008" fg:w="1"/><text x="81.2139%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.9639%" y="613" width="0.0803%" height="15" fill="rgb(239,57,49)" fg:x="1008" fg:w="1"/><text x="81.2139%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.9639%" y="597" width="0.0803%" height="15" fill="rgb(231,154,7)" fg:x="1008" fg:w="1"/><text x="81.2139%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="80.9639%" y="581" width="0.0803%" height="15" fill="rgb(248,81,34)" fg:x="1008" fg:w="1"/><text x="81.2139%" y="591.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (2 samples, 0.16%)</title><rect x="80.9639%" y="677" width="0.1606%" height="15" fill="rgb(247,9,5)" fg:x="1008" fg:w="2"/><text x="81.2139%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="81.0442%" y="661" width="0.0803%" height="15" fill="rgb(228,172,27)" fg:x="1009" fg:w="1"/><text x="81.2942%" y="671.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="81.0442%" y="645" width="0.0803%" height="15" fill="rgb(230,57,44)" fg:x="1009" fg:w="1"/><text x="81.2942%" y="655.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="81.0442%" y="629" width="0.0803%" height="15" fill="rgb(249,35,22)" fg:x="1009" fg:w="1"/><text x="81.2942%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.0442%" y="613" width="0.0803%" height="15" fill="rgb(250,137,27)" fg:x="1009" fg:w="1"/><text x="81.2942%" y="623.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="81.0442%" y="597" width="0.0803%" height="15" fill="rgb(251,57,31)" fg:x="1009" fg:w="1"/><text x="81.2942%" y="607.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="81.0442%" y="581" width="0.0803%" height="15" fill="rgb(238,60,0)" fg:x="1009" fg:w="1"/><text x="81.2942%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="81.1245%" y="661" width="0.0803%" height="15" fill="rgb(242,185,39)" fg:x="1010" fg:w="1"/><text x="81.3745%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="81.1245%" y="645" width="0.0803%" height="15" fill="rgb(240,63,43)" fg:x="1010" fg:w="1"/><text x="81.3745%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="81.1245%" y="629" width="0.0803%" height="15" fill="rgb(236,155,6)" fg:x="1010" fg:w="1"/><text x="81.3745%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="81.1245%" y="613" width="0.0803%" height="15" fill="rgb(215,11,29)" fg:x="1010" fg:w="1"/><text x="81.3745%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.1245%" y="597" width="0.0803%" height="15" fill="rgb(228,180,48)" fg:x="1010" fg:w="1"/><text x="81.3745%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.1245%" y="581" width="0.0803%" height="15" fill="rgb(241,102,12)" fg:x="1010" fg:w="1"/><text x="81.3745%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.1245%" y="565" width="0.0803%" height="15" fill="rgb(246,213,4)" fg:x="1010" fg:w="1"/><text x="81.3745%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="81.1245%" y="549" width="0.0803%" height="15" fill="rgb(218,134,35)" fg:x="1010" fg:w="1"/><text x="81.3745%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="81.1245%" y="533" width="0.0803%" height="15" fill="rgb(251,117,35)" fg:x="1010" fg:w="1"/><text x="81.3745%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="81.1245%" y="517" width="0.0803%" height="15" fill="rgb(206,156,45)" fg:x="1010" fg:w="1"/><text x="81.3745%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="81.1245%" y="501" width="0.0803%" height="15" fill="rgb(218,52,27)" fg:x="1010" fg:w="1"/><text x="81.3745%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="81.1245%" y="485" width="0.0803%" height="15" fill="rgb(238,83,36)" fg:x="1010" fg:w="1"/><text x="81.3745%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="81.1245%" y="469" width="0.0803%" height="15" fill="rgb(218,53,43)" fg:x="1010" fg:w="1"/><text x="81.3745%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="81.1245%" y="453" width="0.0803%" height="15" fill="rgb(239,54,39)" fg:x="1010" fg:w="1"/><text x="81.3745%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="81.1245%" y="437" width="0.0803%" height="15" fill="rgb(212,198,13)" fg:x="1010" fg:w="1"/><text x="81.3745%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="81.1245%" y="421" width="0.0803%" height="15" fill="rgb(234,54,46)" fg:x="1010" fg:w="1"/><text x="81.3745%" y="431.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="81.1245%" y="677" width="0.1606%" height="15" fill="rgb(217,120,7)" fg:x="1010" fg:w="2"/><text x="81.3745%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="81.2048%" y="661" width="0.0803%" height="15" fill="rgb(246,39,15)" fg:x="1011" fg:w="1"/><text x="81.4548%" y="671.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (35 samples, 2.81%)</title><rect x="78.5542%" y="693" width="2.8112%" height="15" fill="rgb(242,143,31)" fg:x="978" fg:w="35"/><text x="78.8042%" y="703.50">pl..</text></g><g><title>plugins_core::tools::set_wearing (1 samples, 0.08%)</title><rect x="81.2851%" y="677" width="0.0803%" height="15" fill="rgb(252,60,24)" fg:x="1012" fg:w="1"/><text x="81.5351%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="81.2851%" y="661" width="0.0803%" height="15" fill="rgb(249,220,7)" fg:x="1012" fg:w="1"/><text x="81.5351%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="81.2851%" y="645" width="0.0803%" height="15" fill="rgb(236,67,13)" fg:x="1012" fg:w="1"/><text x="81.5351%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.2851%" y="629" width="0.0803%" height="15" fill="rgb(210,62,39)" fg:x="1012" fg:w="1"/><text x="81.5351%" y="639.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::ops::deref::Deref&gt;::deref (1 samples, 0.08%)</title><rect x="81.3655%" y="613" width="0.0803%" height="15" fill="rgb(219,122,53)" fg:x="1013" fg:w="1"/><text x="81.6155%" y="623.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="81.3655%" y="629" width="0.1606%" height="15" fill="rgb(218,87,25)" fg:x="1013" fg:w="2"/><text x="81.6155%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="81.4458%" y="613" width="0.0803%" height="15" fill="rgb(234,179,48)" fg:x="1014" fg:w="1"/><text x="81.6958%" y="623.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="81.4458%" y="597" width="0.0803%" height="15" fill="rgb(248,90,0)" fg:x="1014" fg:w="1"/><text x="81.6958%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.4458%" y="581" width="0.0803%" height="15" fill="rgb(207,228,37)" fg:x="1014" fg:w="1"/><text x="81.6958%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.4458%" y="565" width="0.0803%" height="15" fill="rgb(235,214,15)" fg:x="1014" fg:w="1"/><text x="81.6958%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.4458%" y="549" width="0.0803%" height="15" fill="rgb(210,144,39)" fg:x="1014" fg:w="1"/><text x="81.6958%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="81.4458%" y="533" width="0.0803%" height="15" fill="rgb(222,67,41)" fg:x="1014" fg:w="1"/><text x="81.6958%" y="543.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="81.3655%" y="661" width="0.2410%" height="15" fill="rgb(205,35,37)" fg:x="1013" fg:w="3"/><text x="81.6155%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="81.3655%" y="645" width="0.2410%" height="15" fill="rgb(216,125,40)" fg:x="1013" fg:w="3"/><text x="81.6155%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="81.5261%" y="629" width="0.0803%" height="15" fill="rgb(228,227,20)" fg:x="1015" fg:w="1"/><text x="81.7761%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="81.5261%" y="613" width="0.0803%" height="15" fill="rgb(242,173,45)" fg:x="1015" fg:w="1"/><text x="81.7761%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.5261%" y="597" width="0.0803%" height="15" fill="rgb(215,79,24)" fg:x="1015" fg:w="1"/><text x="81.7761%" y="607.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="81.5261%" y="581" width="0.0803%" height="15" fill="rgb(238,164,38)" fg:x="1015" fg:w="1"/><text x="81.7761%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.5261%" y="565" width="0.0803%" height="15" fill="rgb(245,196,38)" fg:x="1015" fg:w="1"/><text x="81.7761%" y="575.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (4 samples, 0.32%)</title><rect x="81.3655%" y="693" width="0.3213%" height="15" fill="rgb(231,217,29)" fg:x="1013" fg:w="4"/><text x="81.6155%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (4 samples, 0.32%)</title><rect x="81.3655%" y="677" width="0.3213%" height="15" fill="rgb(245,6,4)" fg:x="1013" fg:w="4"/><text x="81.6155%" y="687.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (1 samples, 0.08%)</title><rect x="81.6064%" y="661" width="0.0803%" height="15" fill="rgb(214,76,49)" fg:x="1016" fg:w="1"/><text x="81.8564%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="81.6064%" y="645" width="0.0803%" height="15" fill="rgb(205,96,12)" fg:x="1016" fg:w="1"/><text x="81.8564%" y="655.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="81.6064%" y="629" width="0.0803%" height="15" fill="rgb(243,131,4)" fg:x="1016" fg:w="1"/><text x="81.8564%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="81.6867%" y="645" width="0.0803%" height="15" fill="rgb(214,114,4)" fg:x="1017" fg:w="1"/><text x="81.9367%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="81.6867%" y="629" width="0.0803%" height="15" fill="rgb(234,215,15)" fg:x="1017" fg:w="1"/><text x="81.9367%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.6867%" y="613" width="0.0803%" height="15" fill="rgb(250,216,45)" fg:x="1017" fg:w="1"/><text x="81.9367%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="81.6867%" y="661" width="0.1606%" height="15" fill="rgb(236,128,4)" fg:x="1017" fg:w="2"/><text x="81.9367%" y="671.50"></text></g><g><title>kernel::model::base::EntityGid::new (1 samples, 0.08%)</title><rect x="81.7671%" y="645" width="0.0803%" height="15" fill="rgb(234,50,33)" fg:x="1018" fg:w="1"/><text x="82.0171%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="81.8474%" y="661" width="0.1606%" height="15" fill="rgb(253,131,37)" fg:x="1019" fg:w="2"/><text x="82.0974%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.9277%" y="645" width="0.0803%" height="15" fill="rgb(218,55,27)" fg:x="1020" fg:w="1"/><text x="82.1777%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.9277%" y="629" width="0.0803%" height="15" fill="rgb(241,220,28)" fg:x="1020" fg:w="1"/><text x="82.1777%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.9277%" y="613" width="0.0803%" height="15" fill="rgb(241,90,48)" fg:x="1020" fg:w="1"/><text x="82.1777%" y="623.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (71 samples, 5.70%)</title><rect x="76.3855%" y="709" width="5.7028%" height="15" fill="rgb(216,43,37)" fg:x="951" fg:w="71"/><text x="76.6355%" y="719.50">&lt;tests:..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (5 samples, 0.40%)</title><rect x="81.6867%" y="693" width="0.4016%" height="15" fill="rgb(207,173,9)" fg:x="1017" fg:w="5"/><text x="81.9367%" y="703.50"></text></g><g><title>plugins_core::build::Build::save (5 samples, 0.40%)</title><rect x="81.6867%" y="677" width="0.4016%" height="15" fill="rgb(240,126,30)" fg:x="1017" fg:w="5"/><text x="81.9367%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="82.0080%" y="661" width="0.0803%" height="15" fill="rgb(228,178,53)" fg:x="1021" fg:w="1"/><text x="82.2580%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.0080%" y="645" width="0.0803%" height="15" fill="rgb(217,33,4)" fg:x="1021" fg:w="1"/><text x="82.2580%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.0080%" y="629" width="0.0803%" height="15" fill="rgb(206,124,34)" fg:x="1021" fg:w="1"/><text x="82.2580%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.0080%" y="613" width="0.0803%" height="15" fill="rgb(208,122,53)" fg:x="1021" fg:w="1"/><text x="82.2580%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.0080%" y="597" width="0.0803%" height="15" fill="rgb(215,202,26)" fg:x="1021" fg:w="1"/><text x="82.2580%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="82.0884%" y="709" width="0.0803%" height="15" fill="rgb(232,198,31)" fg:x="1022" fg:w="1"/><text x="82.3384%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="82.0884%" y="693" width="0.0803%" height="15" fill="rgb(222,23,35)" fg:x="1022" fg:w="1"/><text x="82.3384%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="82.0884%" y="677" width="0.0803%" height="15" fill="rgb(242,27,53)" fg:x="1022" fg:w="1"/><text x="82.3384%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="82.0884%" y="661" width="0.0803%" height="15" fill="rgb(210,216,42)" fg:x="1022" fg:w="1"/><text x="82.3384%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="82.0884%" y="645" width="0.0803%" height="15" fill="rgb(234,39,38)" fg:x="1022" fg:w="1"/><text x="82.3384%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.0884%" y="629" width="0.0803%" height="15" fill="rgb(235,126,54)" fg:x="1022" fg:w="1"/><text x="82.3384%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.2490%" y="693" width="0.0803%" height="15" fill="rgb(235,150,33)" fg:x="1024" fg:w="1"/><text x="82.4990%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="82.3293%" y="581" width="0.0803%" height="15" fill="rgb(249,49,53)" fg:x="1025" fg:w="1"/><text x="82.5793%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="82.3293%" y="565" width="0.0803%" height="15" fill="rgb(238,60,50)" fg:x="1025" fg:w="1"/><text x="82.5793%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.3293%" y="549" width="0.0803%" height="15" fill="rgb(210,5,2)" fg:x="1025" fg:w="1"/><text x="82.5793%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="82.3293%" y="613" width="0.1606%" height="15" fill="rgb(214,207,24)" fg:x="1025" fg:w="2"/><text x="82.5793%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="82.3293%" y="597" width="0.1606%" height="15" fill="rgb(228,173,2)" fg:x="1025" fg:w="2"/><text x="82.5793%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.4096%" y="581" width="0.0803%" height="15" fill="rgb(244,26,8)" fg:x="1026" fg:w="1"/><text x="82.6596%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="82.4900%" y="597" width="0.0803%" height="15" fill="rgb(249,153,35)" fg:x="1027" fg:w="1"/><text x="82.7400%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.4900%" y="581" width="0.0803%" height="15" fill="rgb(221,215,40)" fg:x="1027" fg:w="1"/><text x="82.7400%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="82.4900%" y="565" width="0.0803%" height="15" fill="rgb(238,106,35)" fg:x="1027" fg:w="1"/><text x="82.7400%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="82.6506%" y="581" width="0.0803%" height="15" fill="rgb(207,195,21)" fg:x="1029" fg:w="1"/><text x="82.9006%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="82.7309%" y="581" width="0.1606%" height="15" fill="rgb(205,43,29)" fg:x="1030" fg:w="2"/><text x="82.9809%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="82.7309%" y="565" width="0.1606%" height="15" fill="rgb(236,35,21)" fg:x="1030" fg:w="2"/><text x="82.9809%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="82.8112%" y="549" width="0.0803%" height="15" fill="rgb(244,74,8)" fg:x="1031" fg:w="1"/><text x="83.0612%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="82.8916%" y="565" width="0.0803%" height="15" fill="rgb(241,229,7)" fg:x="1032" fg:w="1"/><text x="83.1416%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="82.8916%" y="549" width="0.0803%" height="15" fill="rgb(212,223,25)" fg:x="1032" fg:w="1"/><text x="83.1416%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="82.8916%" y="533" width="0.0803%" height="15" fill="rgb(234,58,53)" fg:x="1032" fg:w="1"/><text x="83.1416%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="82.9719%" y="549" width="0.0803%" height="15" fill="rgb(244,36,1)" fg:x="1033" fg:w="1"/><text x="83.2219%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="82.8916%" y="581" width="0.3213%" height="15" fill="rgb(222,40,54)" fg:x="1032" fg:w="4"/><text x="83.1416%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="82.9719%" y="565" width="0.2410%" height="15" fill="rgb(210,207,39)" fg:x="1033" fg:w="3"/><text x="83.2219%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="83.0522%" y="549" width="0.1606%" height="15" fill="rgb(234,52,14)" fg:x="1034" fg:w="2"/><text x="83.3022%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="83.1325%" y="533" width="0.0803%" height="15" fill="rgb(239,108,46)" fg:x="1035" fg:w="1"/><text x="83.3825%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="83.1325%" y="517" width="0.0803%" height="15" fill="rgb(252,223,5)" fg:x="1035" fg:w="1"/><text x="83.3825%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="83.1325%" y="501" width="0.0803%" height="15" fill="rgb(227,181,11)" fg:x="1035" fg:w="1"/><text x="83.3825%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="83.1325%" y="485" width="0.0803%" height="15" fill="rgb(248,126,40)" fg:x="1035" fg:w="1"/><text x="83.3825%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="83.1325%" y="469" width="0.0803%" height="15" fill="rgb(243,1,18)" fg:x="1035" fg:w="1"/><text x="83.3825%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.1325%" y="453" width="0.0803%" height="15" fill="rgb(214,145,23)" fg:x="1035" fg:w="1"/><text x="83.3825%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="83.1325%" y="437" width="0.0803%" height="15" fill="rgb(241,218,11)" fg:x="1035" fg:w="1"/><text x="83.3825%" y="447.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.80%)</title><rect x="82.4900%" y="613" width="0.8032%" height="15" fill="rgb(214,219,24)" fg:x="1027" fg:w="10"/><text x="82.7400%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.72%)</title><rect x="82.5703%" y="597" width="0.7229%" height="15" fill="rgb(235,32,7)" fg:x="1028" fg:w="9"/><text x="82.8203%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="83.2129%" y="581" width="0.0803%" height="15" fill="rgb(227,121,28)" fg:x="1036" fg:w="1"/><text x="83.4629%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="83.2129%" y="565" width="0.0803%" height="15" fill="rgb(216,129,49)" fg:x="1036" fg:w="1"/><text x="83.4629%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="83.2129%" y="549" width="0.0803%" height="15" fill="rgb(207,194,50)" fg:x="1036" fg:w="1"/><text x="83.4629%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.2932%" y="549" width="0.0803%" height="15" fill="rgb(207,4,18)" fg:x="1037" fg:w="1"/><text x="83.5432%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="83.4538%" y="533" width="0.0803%" height="15" fill="rgb(213,50,30)" fg:x="1039" fg:w="1"/><text x="83.7038%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="83.2932%" y="581" width="0.4016%" height="15" fill="rgb(208,77,22)" fg:x="1037" fg:w="5"/><text x="83.5432%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="83.2932%" y="565" width="0.4016%" height="15" fill="rgb(244,204,34)" fg:x="1037" fg:w="5"/><text x="83.5432%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="83.3735%" y="549" width="0.3213%" height="15" fill="rgb(230,20,17)" fg:x="1038" fg:w="4"/><text x="83.6235%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="83.5341%" y="533" width="0.1606%" height="15" fill="rgb(237,83,15)" fg:x="1040" fg:w="2"/><text x="83.7841%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="83.5341%" y="517" width="0.1606%" height="15" fill="rgb(221,109,25)" fg:x="1040" fg:w="2"/><text x="83.7841%" y="527.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="83.5341%" y="501" width="0.1606%" height="15" fill="rgb(205,194,52)" fg:x="1040" fg:w="2"/><text x="83.7841%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="83.6948%" y="565" width="0.0803%" height="15" fill="rgb(244,173,54)" fg:x="1042" fg:w="1"/><text x="83.9448%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="83.6948%" y="549" width="0.0803%" height="15" fill="rgb(227,181,18)" fg:x="1042" fg:w="1"/><text x="83.9448%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="83.6948%" y="533" width="0.0803%" height="15" fill="rgb(238,36,30)" fg:x="1042" fg:w="1"/><text x="83.9448%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="83.6948%" y="517" width="0.0803%" height="15" fill="rgb(254,85,0)" fg:x="1042" fg:w="1"/><text x="83.9448%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="83.6948%" y="501" width="0.0803%" height="15" fill="rgb(247,63,33)" fg:x="1042" fg:w="1"/><text x="83.9448%" y="511.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (7 samples, 0.56%)</title><rect x="83.2932%" y="597" width="0.5622%" height="15" fill="rgb(220,7,54)" fg:x="1037" fg:w="7"/><text x="83.5432%" y="607.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="83.6948%" y="581" width="0.1606%" height="15" fill="rgb(238,227,21)" fg:x="1042" fg:w="2"/><text x="83.9448%" y="591.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="83.7751%" y="565" width="0.0803%" height="15" fill="rgb(237,29,31)" fg:x="1043" fg:w="1"/><text x="84.0251%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.8554%" y="565" width="0.0803%" height="15" fill="rgb(211,21,50)" fg:x="1044" fg:w="1"/><text x="84.1054%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="84.3373%" y="469" width="0.0803%" height="15" fill="rgb(239,119,2)" fg:x="1050" fg:w="1"/><text x="84.5873%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="84.3373%" y="453" width="0.0803%" height="15" fill="rgb(250,2,39)" fg:x="1050" fg:w="1"/><text x="84.5873%" y="463.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.64%)</title><rect x="83.8554%" y="597" width="0.6426%" height="15" fill="rgb(244,46,53)" fg:x="1044" fg:w="8"/><text x="84.1054%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.64%)</title><rect x="83.8554%" y="581" width="0.6426%" height="15" fill="rgb(209,21,19)" fg:x="1044" fg:w="8"/><text x="84.1054%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.56%)</title><rect x="83.9357%" y="565" width="0.5622%" height="15" fill="rgb(236,145,4)" fg:x="1045" fg:w="7"/><text x="84.1857%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="84.0161%" y="549" width="0.4819%" height="15" fill="rgb(220,133,36)" fg:x="1046" fg:w="6"/><text x="84.2661%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="84.0161%" y="533" width="0.4819%" height="15" fill="rgb(244,18,3)" fg:x="1046" fg:w="6"/><text x="84.2661%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.48%)</title><rect x="84.0161%" y="517" width="0.4819%" height="15" fill="rgb(232,171,48)" fg:x="1046" fg:w="6"/><text x="84.2661%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="84.2570%" y="501" width="0.2410%" height="15" fill="rgb(223,223,53)" fg:x="1049" fg:w="3"/><text x="84.5070%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="84.2570%" y="485" width="0.2410%" height="15" fill="rgb(246,92,13)" fg:x="1049" fg:w="3"/><text x="84.5070%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.4177%" y="469" width="0.0803%" height="15" fill="rgb(229,171,10)" fg:x="1051" fg:w="1"/><text x="84.6677%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.5783%" y="469" width="0.0803%" height="15" fill="rgb(213,131,26)" fg:x="1053" fg:w="1"/><text x="84.8283%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="84.5783%" y="453" width="0.0803%" height="15" fill="rgb(242,87,54)" fg:x="1053" fg:w="1"/><text x="84.8283%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.5783%" y="437" width="0.0803%" height="15" fill="rgb(237,21,35)" fg:x="1053" fg:w="1"/><text x="84.8283%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="84.5783%" y="501" width="0.1606%" height="15" fill="rgb(253,13,47)" fg:x="1053" fg:w="2"/><text x="84.8283%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="84.5783%" y="485" width="0.1606%" height="15" fill="rgb(215,122,49)" fg:x="1053" fg:w="2"/><text x="84.8283%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="84.6586%" y="469" width="0.0803%" height="15" fill="rgb(209,179,30)" fg:x="1054" fg:w="1"/><text x="84.9086%" y="479.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="84.6586%" y="453" width="0.0803%" height="15" fill="rgb(235,100,24)" fg:x="1054" fg:w="1"/><text x="84.9086%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="84.4980%" y="533" width="0.3213%" height="15" fill="rgb(209,67,24)" fg:x="1052" fg:w="4"/><text x="84.7480%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="84.5783%" y="517" width="0.2410%" height="15" fill="rgb(206,74,32)" fg:x="1053" fg:w="3"/><text x="84.8283%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="84.7390%" y="501" width="0.0803%" height="15" fill="rgb(212,45,25)" fg:x="1055" fg:w="1"/><text x="84.9890%" y="511.50"></text></g><g><title>engine::session::Session::close (35 samples, 2.81%)</title><rect x="82.1687%" y="709" width="2.8112%" height="15" fill="rgb(239,26,3)" fg:x="1023" fg:w="35"/><text x="82.4187%" y="719.50">en..</text></g><g><title>engine::session::state::State::close (33 samples, 2.65%)</title><rect x="82.3293%" y="693" width="2.6506%" height="15" fill="rgb(218,36,15)" fg:x="1025" fg:w="33"/><text x="82.5793%" y="703.50">en..</text></g><g><title>engine::session::state::State::flush_entities (33 samples, 2.65%)</title><rect x="82.3293%" y="677" width="2.6506%" height="15" fill="rgb(206,108,24)" fg:x="1025" fg:w="33"/><text x="82.5793%" y="687.50">en..</text></g><g><title>core::iter::adapters::try_process (33 samples, 2.65%)</title><rect x="82.3293%" y="661" width="2.6506%" height="15" fill="rgb(234,204,42)" fg:x="1025" fg:w="33"/><text x="82.5793%" y="671.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (33 samples, 2.65%)</title><rect x="82.3293%" y="645" width="2.6506%" height="15" fill="rgb(229,2,11)" fg:x="1025" fg:w="33"/><text x="82.5793%" y="655.50">&lt;a..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (33 samples, 2.65%)</title><rect x="82.3293%" y="629" width="2.6506%" height="15" fill="rgb(221,20,48)" fg:x="1025" fg:w="33"/><text x="82.5793%" y="639.50">en..</text></g><g><title>kernel::model::any_entity_changes (21 samples, 1.69%)</title><rect x="83.2932%" y="613" width="1.6867%" height="15" fill="rgb(244,164,10)" fg:x="1037" fg:w="21"/><text x="83.5432%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (6 samples, 0.48%)</title><rect x="84.4980%" y="597" width="0.4819%" height="15" fill="rgb(243,229,2)" fg:x="1052" fg:w="6"/><text x="84.7480%" y="607.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.48%)</title><rect x="84.4980%" y="581" width="0.4819%" height="15" fill="rgb(232,131,37)" fg:x="1052" fg:w="6"/><text x="84.7480%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="84.4980%" y="565" width="0.4819%" height="15" fill="rgb(217,156,11)" fg:x="1052" fg:w="6"/><text x="84.7480%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="84.4980%" y="549" width="0.4819%" height="15" fill="rgb(239,99,48)" fg:x="1052" fg:w="6"/><text x="84.7480%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="84.8193%" y="533" width="0.1606%" height="15" fill="rgb(231,209,9)" fg:x="1056" fg:w="2"/><text x="85.0693%" y="543.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="84.9799%" y="677" width="0.0803%" height="15" fill="rgb(254,97,27)" fg:x="1058" fg:w="1"/><text x="85.2299%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="84.9799%" y="661" width="0.0803%" height="15" fill="rgb(223,151,38)" fg:x="1058" fg:w="1"/><text x="85.2299%" y="671.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="84.9799%" y="645" width="0.0803%" height="15" fill="rgb(219,206,35)" fg:x="1058" fg:w="1"/><text x="85.2299%" y="655.50"></text></g><g><title>&lt;(A,B,C) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.08%)</title><rect x="84.9799%" y="629" width="0.0803%" height="15" fill="rgb(216,130,31)" fg:x="1058" fg:w="1"/><text x="85.2299%" y="639.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="84.9799%" y="613" width="0.0803%" height="15" fill="rgb(251,97,34)" fg:x="1058" fg:w="1"/><text x="85.2299%" y="623.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="84.9799%" y="597" width="0.0803%" height="15" fill="rgb(246,159,47)" fg:x="1058" fg:w="1"/><text x="85.2299%" y="607.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="85.0602%" y="661" width="0.0803%" height="15" fill="rgb(232,87,10)" fg:x="1059" fg:w="1"/><text x="85.3102%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="85.0602%" y="645" width="0.0803%" height="15" fill="rgb(249,1,37)" fg:x="1059" fg:w="1"/><text x="85.3102%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="85.0602%" y="629" width="0.0803%" height="15" fill="rgb(239,135,14)" fg:x="1059" fg:w="1"/><text x="85.3102%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="85.0602%" y="613" width="0.0803%" height="15" fill="rgb(253,116,46)" fg:x="1059" fg:w="1"/><text x="85.3102%" y="623.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="85.0602%" y="597" width="0.0803%" height="15" fill="rgb(222,217,37)" fg:x="1059" fg:w="1"/><text x="85.3102%" y="607.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (1 samples, 0.08%)</title><rect x="85.0602%" y="581" width="0.0803%" height="15" fill="rgb(252,96,8)" fg:x="1059" fg:w="1"/><text x="85.3102%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="85.0602%" y="565" width="0.0803%" height="15" fill="rgb(254,103,41)" fg:x="1059" fg:w="1"/><text x="85.3102%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="85.0602%" y="549" width="0.0803%" height="15" fill="rgb(218,213,19)" fg:x="1059" fg:w="1"/><text x="85.3102%" y="559.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="85.0602%" y="533" width="0.0803%" height="15" fill="rgb(253,95,21)" fg:x="1059" fg:w="1"/><text x="85.3102%" y="543.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="85.0602%" y="517" width="0.0803%" height="15" fill="rgb(229,26,28)" fg:x="1059" fg:w="1"/><text x="85.3102%" y="527.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="85.0602%" y="501" width="0.0803%" height="15" fill="rgb(230,129,16)" fg:x="1059" fg:w="1"/><text x="85.3102%" y="511.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="85.0602%" y="485" width="0.0803%" height="15" fill="rgb(236,126,17)" fg:x="1059" fg:w="1"/><text x="85.3102%" y="495.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="85.0602%" y="469" width="0.0803%" height="15" fill="rgb(209,33,33)" fg:x="1059" fg:w="1"/><text x="85.3102%" y="479.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="85.0602%" y="453" width="0.0803%" height="15" fill="rgb(227,85,29)" fg:x="1059" fg:w="1"/><text x="85.3102%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="85.0602%" y="437" width="0.0803%" height="15" fill="rgb(241,53,46)" fg:x="1059" fg:w="1"/><text x="85.3102%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="85.0602%" y="421" width="0.0803%" height="15" fill="rgb(228,167,53)" fg:x="1059" fg:w="1"/><text x="85.3102%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="85.0602%" y="405" width="0.0803%" height="15" fill="rgb(238,195,45)" fg:x="1059" fg:w="1"/><text x="85.3102%" y="415.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="85.0602%" y="389" width="0.0803%" height="15" fill="rgb(252,124,45)" fg:x="1059" fg:w="1"/><text x="85.3102%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="85.0602%" y="373" width="0.0803%" height="15" fill="rgb(251,38,35)" fg:x="1059" fg:w="1"/><text x="85.3102%" y="383.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="85.0602%" y="357" width="0.0803%" height="15" fill="rgb(227,33,2)" fg:x="1059" fg:w="1"/><text x="85.3102%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="85.0602%" y="341" width="0.0803%" height="15" fill="rgb(223,157,46)" fg:x="1059" fg:w="1"/><text x="85.3102%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="85.0602%" y="325" width="0.0803%" height="15" fill="rgb(222,78,41)" fg:x="1059" fg:w="1"/><text x="85.3102%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="85.0602%" y="309" width="0.0803%" height="15" fill="rgb(248,176,11)" fg:x="1059" fg:w="1"/><text x="85.3102%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="85.0602%" y="293" width="0.0803%" height="15" fill="rgb(241,221,18)" fg:x="1059" fg:w="1"/><text x="85.3102%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="85.0602%" y="277" width="0.0803%" height="15" fill="rgb(218,85,22)" fg:x="1059" fg:w="1"/><text x="85.3102%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="85.0602%" y="261" width="0.0803%" height="15" fill="rgb(222,223,7)" fg:x="1059" fg:w="1"/><text x="85.3102%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="85.0602%" y="245" width="0.0803%" height="15" fill="rgb(254,59,39)" fg:x="1059" fg:w="1"/><text x="85.3102%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.0602%" y="229" width="0.0803%" height="15" fill="rgb(247,100,27)" fg:x="1059" fg:w="1"/><text x="85.3102%" y="239.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="85.1406%" y="565" width="0.0803%" height="15" fill="rgb(237,207,10)" fg:x="1060" fg:w="1"/><text x="85.3906%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (1 samples, 0.08%)</title><rect x="85.1406%" y="549" width="0.0803%" height="15" fill="rgb(220,121,28)" fg:x="1060" fg:w="1"/><text x="85.3906%" y="559.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (1 samples, 0.08%)</title><rect x="85.1406%" y="533" width="0.0803%" height="15" fill="rgb(213,223,20)" fg:x="1060" fg:w="1"/><text x="85.3906%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (1 samples, 0.08%)</title><rect x="85.1406%" y="517" width="0.0803%" height="15" fill="rgb(205,121,27)" fg:x="1060" fg:w="1"/><text x="85.3906%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="85.1406%" y="501" width="0.0803%" height="15" fill="rgb(253,24,53)" fg:x="1060" fg:w="1"/><text x="85.3906%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="85.1406%" y="485" width="0.0803%" height="15" fill="rgb(224,224,47)" fg:x="1060" fg:w="1"/><text x="85.3906%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="85.1406%" y="469" width="0.0803%" height="15" fill="rgb(250,125,36)" fg:x="1060" fg:w="1"/><text x="85.3906%" y="479.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="85.1406%" y="453" width="0.0803%" height="15" fill="rgb(240,144,38)" fg:x="1060" fg:w="1"/><text x="85.3906%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="85.1406%" y="437" width="0.0803%" height="15" fill="rgb(250,15,50)" fg:x="1060" fg:w="1"/><text x="85.3906%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="85.1406%" y="421" width="0.0803%" height="15" fill="rgb(210,24,26)" fg:x="1060" fg:w="1"/><text x="85.3906%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="85.1406%" y="405" width="0.0803%" height="15" fill="rgb(234,53,53)" fg:x="1060" fg:w="1"/><text x="85.3906%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="85.1406%" y="389" width="0.0803%" height="15" fill="rgb(208,108,28)" fg:x="1060" fg:w="1"/><text x="85.3906%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="85.1406%" y="373" width="0.0803%" height="15" fill="rgb(227,143,7)" fg:x="1060" fg:w="1"/><text x="85.3906%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="85.1406%" y="357" width="0.0803%" height="15" fill="rgb(238,189,38)" fg:x="1060" fg:w="1"/><text x="85.3906%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="85.1406%" y="341" width="0.0803%" height="15" fill="rgb(222,69,15)" fg:x="1060" fg:w="1"/><text x="85.3906%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="85.1406%" y="325" width="0.0803%" height="15" fill="rgb(213,169,7)" fg:x="1060" fg:w="1"/><text x="85.3906%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="85.1406%" y="309" width="0.0803%" height="15" fill="rgb(251,219,4)" fg:x="1060" fg:w="1"/><text x="85.3906%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="85.1406%" y="293" width="0.0803%" height="15" fill="rgb(241,55,40)" fg:x="1060" fg:w="1"/><text x="85.3906%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="85.1406%" y="277" width="0.0803%" height="15" fill="rgb(243,57,30)" fg:x="1060" fg:w="1"/><text x="85.3906%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="85.1406%" y="261" width="0.0803%" height="15" fill="rgb(234,50,30)" fg:x="1060" fg:w="1"/><text x="85.3906%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="85.1406%" y="245" width="0.0803%" height="15" fill="rgb(239,23,42)" fg:x="1060" fg:w="1"/><text x="85.3906%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.1406%" y="229" width="0.0803%" height="15" fill="rgb(217,38,19)" fg:x="1060" fg:w="1"/><text x="85.3906%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.2209%" y="325" width="0.0803%" height="15" fill="rgb(215,179,16)" fg:x="1061" fg:w="1"/><text x="85.4709%" y="335.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (2 samples, 0.16%)</title><rect x="85.2209%" y="389" width="0.1606%" height="15" fill="rgb(254,21,37)" fg:x="1061" fg:w="2"/><text x="85.4709%" y="399.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (2 samples, 0.16%)</title><rect x="85.2209%" y="373" width="0.1606%" height="15" fill="rgb(219,207,48)" fg:x="1061" fg:w="2"/><text x="85.4709%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (2 samples, 0.16%)</title><rect x="85.2209%" y="357" width="0.1606%" height="15" fill="rgb(227,225,41)" fg:x="1061" fg:w="2"/><text x="85.4709%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="85.2209%" y="341" width="0.1606%" height="15" fill="rgb(223,130,1)" fg:x="1061" fg:w="2"/><text x="85.4709%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="85.3012%" y="325" width="0.0803%" height="15" fill="rgb(249,54,42)" fg:x="1062" fg:w="1"/><text x="85.5512%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="85.3012%" y="309" width="0.0803%" height="15" fill="rgb(248,69,25)" fg:x="1062" fg:w="1"/><text x="85.5512%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="85.3012%" y="293" width="0.0803%" height="15" fill="rgb(234,21,32)" fg:x="1062" fg:w="1"/><text x="85.5512%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.3012%" y="277" width="0.0803%" height="15" fill="rgb(252,136,6)" fg:x="1062" fg:w="1"/><text x="85.5512%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="85.4618%" y="325" width="0.0803%" height="15" fill="rgb(245,87,12)" fg:x="1064" fg:w="1"/><text x="85.7118%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="85.5422%" y="325" width="0.0803%" height="15" fill="rgb(208,12,15)" fg:x="1065" fg:w="1"/><text x="85.7922%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.5422%" y="309" width="0.0803%" height="15" fill="rgb(250,98,2)" fg:x="1065" fg:w="1"/><text x="85.7922%" y="319.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::desc (5 samples, 0.40%)</title><rect x="85.3815%" y="357" width="0.4016%" height="15" fill="rgb(205,213,15)" fg:x="1063" fg:w="5"/><text x="85.6315%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (5 samples, 0.40%)</title><rect x="85.3815%" y="341" width="0.4016%" height="15" fill="rgb(248,192,44)" fg:x="1063" fg:w="5"/><text x="85.6315%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="85.6225%" y="325" width="0.1606%" height="15" fill="rgb(221,89,17)" fg:x="1066" fg:w="2"/><text x="85.8725%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="85.6225%" y="309" width="0.1606%" height="15" fill="rgb(209,55,3)" fg:x="1066" fg:w="2"/><text x="85.8725%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="85.6225%" y="293" width="0.1606%" height="15" fill="rgb(247,23,45)" fg:x="1066" fg:w="2"/><text x="85.8725%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="85.6225%" y="277" width="0.1606%" height="15" fill="rgb(235,152,23)" fg:x="1066" fg:w="2"/><text x="85.8725%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="85.6225%" y="261" width="0.1606%" height="15" fill="rgb(244,63,13)" fg:x="1066" fg:w="2"/><text x="85.8725%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="85.7028%" y="245" width="0.0803%" height="15" fill="rgb(227,30,37)" fg:x="1067" fg:w="1"/><text x="85.9528%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="85.7831%" y="261" width="0.1606%" height="15" fill="rgb(224,49,42)" fg:x="1068" fg:w="2"/><text x="86.0331%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="85.8635%" y="245" width="0.0803%" height="15" fill="rgb(218,129,5)" fg:x="1069" fg:w="1"/><text x="86.1135%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.9438%" y="229" width="0.0803%" height="15" fill="rgb(240,199,54)" fg:x="1070" fg:w="1"/><text x="86.1938%" y="239.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="85.7831%" y="341" width="0.3213%" height="15" fill="rgb(234,31,13)" fg:x="1068" fg:w="4"/><text x="86.0331%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="85.7831%" y="325" width="0.3213%" height="15" fill="rgb(219,73,54)" fg:x="1068" fg:w="4"/><text x="86.0331%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="85.7831%" y="309" width="0.3213%" height="15" fill="rgb(251,162,10)" fg:x="1068" fg:w="4"/><text x="86.0331%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="85.7831%" y="293" width="0.3213%" height="15" fill="rgb(240,138,47)" fg:x="1068" fg:w="4"/><text x="86.0331%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="85.7831%" y="277" width="0.3213%" height="15" fill="rgb(216,138,26)" fg:x="1068" fg:w="4"/><text x="86.0331%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="85.9438%" y="261" width="0.1606%" height="15" fill="rgb(243,17,35)" fg:x="1070" fg:w="2"/><text x="86.1938%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="85.9438%" y="245" width="0.1606%" height="15" fill="rgb(241,60,18)" fg:x="1070" fg:w="2"/><text x="86.1938%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="86.0241%" y="229" width="0.0803%" height="15" fill="rgb(234,2,44)" fg:x="1071" fg:w="1"/><text x="86.2741%" y="239.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (5 samples, 0.40%)</title><rect x="85.7831%" y="357" width="0.4016%" height="15" fill="rgb(225,225,33)" fg:x="1068" fg:w="5"/><text x="86.0331%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="86.1044%" y="341" width="0.0803%" height="15" fill="rgb(234,50,31)" fg:x="1072" fg:w="1"/><text x="86.3544%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="86.1847%" y="341" width="0.0803%" height="15" fill="rgb(249,6,25)" fg:x="1073" fg:w="1"/><text x="86.4347%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="86.1847%" y="325" width="0.0803%" height="15" fill="rgb(241,5,17)" fg:x="1073" fg:w="1"/><text x="86.4347%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="86.1847%" y="309" width="0.0803%" height="15" fill="rgb(207,116,10)" fg:x="1073" fg:w="1"/><text x="86.4347%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="86.1847%" y="293" width="0.0803%" height="15" fill="rgb(222,128,18)" fg:x="1073" fg:w="1"/><text x="86.4347%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="86.1847%" y="277" width="0.0803%" height="15" fill="rgb(229,109,25)" fg:x="1073" fg:w="1"/><text x="86.4347%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="86.1847%" y="261" width="0.0803%" height="15" fill="rgb(222,102,25)" fg:x="1073" fg:w="1"/><text x="86.4347%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="86.1847%" y="245" width="0.0803%" height="15" fill="rgb(239,211,5)" fg:x="1073" fg:w="1"/><text x="86.4347%" y="255.50"></text></g><g><title>kernel::model::EntityPtr::gid (2 samples, 0.16%)</title><rect x="86.1847%" y="357" width="0.1606%" height="15" fill="rgb(223,136,26)" fg:x="1073" fg:w="2"/><text x="86.4347%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.2651%" y="341" width="0.0803%" height="15" fill="rgb(227,30,15)" fg:x="1074" fg:w="1"/><text x="86.5151%" y="351.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="86.3454%" y="309" width="0.0803%" height="15" fill="rgb(247,76,4)" fg:x="1075" fg:w="1"/><text x="86.5954%" y="319.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="86.3454%" y="293" width="0.0803%" height="15" fill="rgb(245,38,48)" fg:x="1075" fg:w="1"/><text x="86.5954%" y="303.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="86.3454%" y="277" width="0.0803%" height="15" fill="rgb(210,220,14)" fg:x="1075" fg:w="1"/><text x="86.5954%" y="287.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="86.3454%" y="261" width="0.0803%" height="15" fill="rgb(224,60,51)" fg:x="1075" fg:w="1"/><text x="86.5954%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="86.3454%" y="245" width="0.0803%" height="15" fill="rgb(212,133,49)" fg:x="1075" fg:w="1"/><text x="86.5954%" y="255.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="86.3454%" y="229" width="0.0803%" height="15" fill="rgb(231,39,22)" fg:x="1075" fg:w="1"/><text x="86.5954%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="86.3454%" y="213" width="0.0803%" height="15" fill="rgb(236,173,22)" fg:x="1075" fg:w="1"/><text x="86.5954%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="86.3454%" y="197" width="0.0803%" height="15" fill="rgb(210,70,0)" fg:x="1075" fg:w="1"/><text x="86.5954%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="86.3454%" y="181" width="0.0803%" height="15" fill="rgb(215,170,11)" fg:x="1075" fg:w="1"/><text x="86.5954%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="86.3454%" y="165" width="0.0803%" height="15" fill="rgb(220,154,28)" fg:x="1075" fg:w="1"/><text x="86.5954%" y="175.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="86.4257%" y="213" width="0.1606%" height="15" fill="rgb(240,160,41)" fg:x="1076" fg:w="2"/><text x="86.6757%" y="223.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="86.5060%" y="197" width="0.0803%" height="15" fill="rgb(243,215,41)" fg:x="1077" fg:w="1"/><text x="86.7560%" y="207.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="86.5060%" y="181" width="0.0803%" height="15" fill="rgb(214,208,31)" fg:x="1077" fg:w="1"/><text x="86.7560%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="86.4257%" y="277" width="0.2410%" height="15" fill="rgb(247,57,22)" fg:x="1076" fg:w="3"/><text x="86.6757%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="86.4257%" y="261" width="0.2410%" height="15" fill="rgb(228,73,52)" fg:x="1076" fg:w="3"/><text x="86.6757%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (3 samples, 0.24%)</title><rect x="86.4257%" y="245" width="0.2410%" height="15" fill="rgb(252,60,9)" fg:x="1076" fg:w="3"/><text x="86.6757%" y="255.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="86.4257%" y="229" width="0.2410%" height="15" fill="rgb(233,9,51)" fg:x="1076" fg:w="3"/><text x="86.6757%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="86.5863%" y="213" width="0.0803%" height="15" fill="rgb(223,67,14)" fg:x="1078" fg:w="1"/><text x="86.8363%" y="223.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="86.5863%" y="197" width="0.0803%" height="15" fill="rgb(222,86,2)" fg:x="1078" fg:w="1"/><text x="86.8363%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="86.6667%" y="277" width="0.0803%" height="15" fill="rgb(243,58,54)" fg:x="1079" fg:w="1"/><text x="86.9167%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="86.6667%" y="261" width="0.0803%" height="15" fill="rgb(210,200,39)" fg:x="1079" fg:w="1"/><text x="86.9167%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="86.6667%" y="245" width="0.0803%" height="15" fill="rgb(238,135,9)" fg:x="1079" fg:w="1"/><text x="86.9167%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="86.6667%" y="229" width="0.0803%" height="15" fill="rgb(232,179,7)" fg:x="1079" fg:w="1"/><text x="86.9167%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="86.6667%" y="213" width="0.0803%" height="15" fill="rgb(245,65,41)" fg:x="1079" fg:w="1"/><text x="86.9167%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="86.7470%" y="197" width="0.0803%" height="15" fill="rgb(227,43,8)" fg:x="1080" fg:w="1"/><text x="86.9970%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (3 samples, 0.24%)</title><rect x="86.7470%" y="229" width="0.2410%" height="15" fill="rgb(235,91,14)" fg:x="1080" fg:w="3"/><text x="86.9970%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="86.7470%" y="213" width="0.2410%" height="15" fill="rgb(235,219,31)" fg:x="1080" fg:w="3"/><text x="86.9970%" y="223.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="86.8273%" y="197" width="0.1606%" height="15" fill="rgb(227,121,25)" fg:x="1081" fg:w="2"/><text x="87.0773%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (4 samples, 0.32%)</title><rect x="86.9880%" y="213" width="0.3213%" height="15" fill="rgb(254,129,24)" fg:x="1083" fg:w="4"/><text x="87.2380%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (3 samples, 0.24%)</title><rect x="87.0683%" y="197" width="0.2410%" height="15" fill="rgb(226,144,49)" fg:x="1084" fg:w="3"/><text x="87.3183%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="87.3092%" y="213" width="0.0803%" height="15" fill="rgb(214,187,32)" fg:x="1087" fg:w="1"/><text x="87.5592%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="87.3092%" y="197" width="0.0803%" height="15" fill="rgb(243,129,46)" fg:x="1087" fg:w="1"/><text x="87.5592%" y="207.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="87.4699%" y="149" width="0.0803%" height="15" fill="rgb(221,185,35)" fg:x="1089" fg:w="1"/><text x="87.7199%" y="159.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.5502%" y="149" width="0.0803%" height="15" fill="rgb(205,0,32)" fg:x="1090" fg:w="1"/><text x="87.8002%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="87.6305%" y="149" width="0.0803%" height="15" fill="rgb(229,179,12)" fg:x="1091" fg:w="1"/><text x="87.8805%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.6305%" y="133" width="0.0803%" height="15" fill="rgb(252,107,19)" fg:x="1091" fg:w="1"/><text x="87.8805%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.6305%" y="117" width="0.0803%" height="15" fill="rgb(220,95,27)" fg:x="1091" fg:w="1"/><text x="87.8805%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="87.6305%" y="101" width="0.0803%" height="15" fill="rgb(240,113,40)" fg:x="1091" fg:w="1"/><text x="87.8805%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="87.7108%" y="149" width="0.0803%" height="15" fill="rgb(208,4,43)" fg:x="1092" fg:w="1"/><text x="87.9608%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="87.7108%" y="133" width="0.0803%" height="15" fill="rgb(247,189,30)" fg:x="1092" fg:w="1"/><text x="87.9608%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="87.7108%" y="117" width="0.0803%" height="15" fill="rgb(231,157,17)" fg:x="1092" fg:w="1"/><text x="87.9608%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (18 samples, 1.45%)</title><rect x="87.7912%" y="149" width="1.4458%" height="15" fill="rgb(224,139,6)" fg:x="1093" fg:w="18"/><text x="88.0412%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (18 samples, 1.45%)</title><rect x="87.7912%" y="133" width="1.4458%" height="15" fill="rgb(223,83,16)" fg:x="1093" fg:w="18"/><text x="88.0412%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (18 samples, 1.45%)</title><rect x="87.7912%" y="117" width="1.4458%" height="15" fill="rgb(232,211,20)" fg:x="1093" fg:w="18"/><text x="88.0412%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 1.93%)</title><rect x="87.3896%" y="197" width="1.9277%" height="15" fill="rgb(225,203,35)" fg:x="1088" fg:w="24"/><text x="87.6396%" y="207.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (24 samples, 1.93%)</title><rect x="87.3896%" y="181" width="1.9277%" height="15" fill="rgb(215,211,44)" fg:x="1088" fg:w="24"/><text x="87.6396%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (24 samples, 1.93%)</title><rect x="87.3896%" y="165" width="1.9277%" height="15" fill="rgb(248,213,26)" fg:x="1088" fg:w="24"/><text x="87.6396%" y="175.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="89.2369%" y="149" width="0.0803%" height="15" fill="rgb(214,23,52)" fg:x="1111" fg:w="1"/><text x="89.4869%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.2369%" y="133" width="0.0803%" height="15" fill="rgb(225,173,50)" fg:x="1111" fg:w="1"/><text x="89.4869%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.3173%" y="181" width="0.0803%" height="15" fill="rgb(206,150,22)" fg:x="1112" fg:w="1"/><text x="89.5673%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="89.3976%" y="181" width="0.0803%" height="15" fill="rgb(239,64,23)" fg:x="1113" fg:w="1"/><text x="89.6476%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.3976%" y="165" width="0.0803%" height="15" fill="rgb(242,50,38)" fg:x="1113" fg:w="1"/><text x="89.6476%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.3976%" y="149" width="0.0803%" height="15" fill="rgb(217,91,15)" fg:x="1113" fg:w="1"/><text x="89.6476%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="89.3976%" y="133" width="0.0803%" height="15" fill="rgb(230,172,6)" fg:x="1113" fg:w="1"/><text x="89.6476%" y="143.50"></text></g><g><title>regex_automata::meta::strategy::new (32 samples, 2.57%)</title><rect x="86.9880%" y="229" width="2.5703%" height="15" fill="rgb(221,98,26)" fg:x="1083" fg:w="32"/><text x="87.2380%" y="239.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (27 samples, 2.17%)</title><rect x="87.3896%" y="213" width="2.1687%" height="15" fill="rgb(227,210,45)" fg:x="1088" fg:w="27"/><text x="87.6396%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="89.3173%" y="197" width="0.2410%" height="15" fill="rgb(206,8,30)" fg:x="1112" fg:w="3"/><text x="89.5673%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="89.4779%" y="181" width="0.0803%" height="15" fill="rgb(241,219,17)" fg:x="1114" fg:w="1"/><text x="89.7279%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="89.4779%" y="165" width="0.0803%" height="15" fill="rgb(247,121,29)" fg:x="1114" fg:w="1"/><text x="89.7279%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.4779%" y="149" width="0.0803%" height="15" fill="rgb(219,169,49)" fg:x="1114" fg:w="1"/><text x="89.7279%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="89.4779%" y="133" width="0.0803%" height="15" fill="rgb(253,49,49)" fg:x="1114" fg:w="1"/><text x="89.7279%" y="143.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::new (1 samples, 0.08%)</title><rect x="89.5582%" y="229" width="0.0803%" height="15" fill="rgb(217,178,3)" fg:x="1115" fg:w="1"/><text x="89.8082%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="89.6386%" y="181" width="0.0803%" height="15" fill="rgb(234,73,37)" fg:x="1116" fg:w="1"/><text x="89.8886%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="89.6386%" y="165" width="0.0803%" height="15" fill="rgb(250,98,22)" fg:x="1116" fg:w="1"/><text x="89.8886%" y="175.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="89.6386%" y="149" width="0.0803%" height="15" fill="rgb(220,108,37)" fg:x="1116" fg:w="1"/><text x="89.8886%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="89.6386%" y="229" width="0.3213%" height="15" fill="rgb(225,168,10)" fg:x="1116" fg:w="4"/><text x="89.8886%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="89.6386%" y="213" width="0.3213%" height="15" fill="rgb(247,215,21)" fg:x="1116" fg:w="4"/><text x="89.8886%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="89.6386%" y="197" width="0.3213%" height="15" fill="rgb(253,189,31)" fg:x="1116" fg:w="4"/><text x="89.8886%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="89.7189%" y="181" width="0.2410%" height="15" fill="rgb(241,54,22)" fg:x="1117" fg:w="3"/><text x="89.9689%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="89.7189%" y="165" width="0.2410%" height="15" fill="rgb(211,87,4)" fg:x="1117" fg:w="3"/><text x="89.9689%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="89.7189%" y="149" width="0.2410%" height="15" fill="rgb(245,112,24)" fg:x="1117" fg:w="3"/><text x="89.9689%" y="159.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="89.7189%" y="133" width="0.2410%" height="15" fill="rgb(235,190,41)" fg:x="1117" fg:w="3"/><text x="89.9689%" y="143.50"></text></g><g><title>regex::regex::string::Regex::new (42 samples, 3.37%)</title><rect x="86.7470%" y="277" width="3.3735%" height="15" fill="rgb(214,89,8)" fg:x="1080" fg:w="42"/><text x="86.9970%" y="287.50">reg..</text></g><g><title>regex::builders::string::RegexBuilder::build (42 samples, 3.37%)</title><rect x="86.7470%" y="261" width="3.3735%" height="15" fill="rgb(249,155,35)" fg:x="1080" fg:w="42"/><text x="86.9970%" y="271.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (42 samples, 3.37%)</title><rect x="86.7470%" y="245" width="3.3735%" height="15" fill="rgb(249,88,26)" fg:x="1080" fg:w="42"/><text x="86.9970%" y="255.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="89.9598%" y="229" width="0.1606%" height="15" fill="rgb(232,56,8)" fg:x="1120" fg:w="2"/><text x="90.2098%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="89.9598%" y="213" width="0.1606%" height="15" fill="rgb(240,95,3)" fg:x="1120" fg:w="2"/><text x="90.2098%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="90.0402%" y="197" width="0.0803%" height="15" fill="rgb(222,44,28)" fg:x="1121" fg:w="1"/><text x="90.2902%" y="207.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (50 samples, 4.02%)</title><rect x="86.4257%" y="293" width="4.0161%" height="15" fill="rgb(234,16,30)" fg:x="1076" fg:w="50"/><text x="86.6757%" y="303.50">inde..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="90.1205%" y="277" width="0.3213%" height="15" fill="rgb(223,26,17)" fg:x="1122" fg:w="4"/><text x="90.3705%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="90.1205%" y="261" width="0.3213%" height="15" fill="rgb(239,187,47)" fg:x="1122" fg:w="4"/><text x="90.3705%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="90.1205%" y="245" width="0.3213%" height="15" fill="rgb(247,102,50)" fg:x="1122" fg:w="4"/><text x="90.3705%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="90.2008%" y="229" width="0.2410%" height="15" fill="rgb(231,216,22)" fg:x="1123" fg:w="3"/><text x="90.4508%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="90.2008%" y="213" width="0.2410%" height="15" fill="rgb(216,201,26)" fg:x="1123" fg:w="3"/><text x="90.4508%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="90.3614%" y="197" width="0.0803%" height="15" fill="rgb(214,186,23)" fg:x="1125" fg:w="1"/><text x="90.6114%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="90.4418%" y="245" width="0.0803%" height="15" fill="rgb(235,184,4)" fg:x="1126" fg:w="1"/><text x="90.6918%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.5221%" y="245" width="0.0803%" height="15" fill="rgb(244,46,17)" fg:x="1127" fg:w="1"/><text x="90.7721%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="90.6024%" y="229" width="0.1606%" height="15" fill="rgb(248,74,46)" fg:x="1128" fg:w="2"/><text x="90.8524%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.6827%" y="213" width="0.0803%" height="15" fill="rgb(243,79,5)" fg:x="1129" fg:w="1"/><text x="90.9327%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.40%)</title><rect x="90.4418%" y="277" width="0.4016%" height="15" fill="rgb(213,148,1)" fg:x="1126" fg:w="5"/><text x="90.6918%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (5 samples, 0.40%)</title><rect x="90.4418%" y="261" width="0.4016%" height="15" fill="rgb(221,30,0)" fg:x="1126" fg:w="5"/><text x="90.6918%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="90.6024%" y="245" width="0.2410%" height="15" fill="rgb(207,85,29)" fg:x="1128" fg:w="3"/><text x="90.8524%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="90.7631%" y="229" width="0.0803%" height="15" fill="rgb(239,31,46)" fg:x="1130" fg:w="1"/><text x="91.0131%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="90.7631%" y="213" width="0.0803%" height="15" fill="rgb(219,6,1)" fg:x="1130" fg:w="1"/><text x="91.0131%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.7631%" y="197" width="0.0803%" height="15" fill="rgb(229,90,29)" fg:x="1130" fg:w="1"/><text x="91.0131%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="90.8434%" y="229" width="0.0803%" height="15" fill="rgb(242,201,42)" fg:x="1131" fg:w="1"/><text x="91.0934%" y="239.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="90.8434%" y="213" width="0.0803%" height="15" fill="rgb(243,80,54)" fg:x="1131" fg:w="1"/><text x="91.0934%" y="223.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="90.8434%" y="261" width="0.1606%" height="15" fill="rgb(223,166,15)" fg:x="1131" fg:w="2"/><text x="91.0934%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="90.8434%" y="245" width="0.1606%" height="15" fill="rgb(238,78,27)" fg:x="1131" fg:w="2"/><text x="91.0934%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="90.9237%" y="229" width="0.0803%" height="15" fill="rgb(235,28,43)" fg:x="1132" fg:w="1"/><text x="91.1737%" y="239.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="90.9237%" y="213" width="0.0803%" height="15" fill="rgb(240,210,28)" fg:x="1132" fg:w="1"/><text x="91.1737%" y="223.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (5 samples, 0.40%)</title><rect x="90.8434%" y="277" width="0.4016%" height="15" fill="rgb(253,6,46)" fg:x="1131" fg:w="5"/><text x="91.0934%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="91.0040%" y="261" width="0.2410%" height="15" fill="rgb(250,159,47)" fg:x="1133" fg:w="3"/><text x="91.2540%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="91.0040%" y="245" width="0.2410%" height="15" fill="rgb(216,139,2)" fg:x="1133" fg:w="3"/><text x="91.2540%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="91.0040%" y="229" width="0.2410%" height="15" fill="rgb(221,124,44)" fg:x="1133" fg:w="3"/><text x="91.2540%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="91.0040%" y="213" width="0.2410%" height="15" fill="rgb(205,37,22)" fg:x="1133" fg:w="3"/><text x="91.2540%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="91.0040%" y="197" width="0.2410%" height="15" fill="rgb(250,55,8)" fg:x="1133" fg:w="3"/><text x="91.2540%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="91.0040%" y="181" width="0.2410%" height="15" fill="rgb(215,83,48)" fg:x="1133" fg:w="3"/><text x="91.2540%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="91.2450%" y="229" width="0.0803%" height="15" fill="rgb(253,2,32)" fg:x="1136" fg:w="1"/><text x="91.4950%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="91.2450%" y="213" width="0.0803%" height="15" fill="rgb(236,67,28)" fg:x="1136" fg:w="1"/><text x="91.4950%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="91.2450%" y="197" width="0.0803%" height="15" fill="rgb(252,55,15)" fg:x="1136" fg:w="1"/><text x="91.4950%" y="207.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="91.2450%" y="181" width="0.0803%" height="15" fill="rgb(243,173,17)" fg:x="1136" fg:w="1"/><text x="91.4950%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.4056%" y="197" width="0.0803%" height="15" fill="rgb(215,212,13)" fg:x="1138" fg:w="1"/><text x="91.6556%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (8 samples, 0.64%)</title><rect x="91.4056%" y="213" width="0.6426%" height="15" fill="rgb(253,176,6)" fg:x="1138" fg:w="8"/><text x="91.6556%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (7 samples, 0.56%)</title><rect x="91.4859%" y="197" width="0.5622%" height="15" fill="rgb(236,105,26)" fg:x="1139" fg:w="7"/><text x="91.7359%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="92.0482%" y="213" width="0.0803%" height="15" fill="rgb(239,226,32)" fg:x="1146" fg:w="1"/><text x="92.2982%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="92.0482%" y="197" width="0.0803%" height="15" fill="rgb(236,104,51)" fg:x="1146" fg:w="1"/><text x="92.2982%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="92.1285%" y="213" width="0.0803%" height="15" fill="rgb(220,172,33)" fg:x="1147" fg:w="1"/><text x="92.3785%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.2892%" y="181" width="0.0803%" height="15" fill="rgb(224,182,25)" fg:x="1149" fg:w="1"/><text x="92.5392%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="92.3695%" y="181" width="0.0803%" height="15" fill="rgb(236,184,24)" fg:x="1150" fg:w="1"/><text x="92.6195%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="92.3695%" y="165" width="0.0803%" height="15" fill="rgb(241,221,14)" fg:x="1150" fg:w="1"/><text x="92.6195%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.3695%" y="149" width="0.0803%" height="15" fill="rgb(227,146,5)" fg:x="1150" fg:w="1"/><text x="92.6195%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (4 samples, 0.32%)</title><rect x="92.2088%" y="213" width="0.3213%" height="15" fill="rgb(214,15,23)" fg:x="1148" fg:w="4"/><text x="92.4588%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="92.2892%" y="197" width="0.2410%" height="15" fill="rgb(233,157,31)" fg:x="1149" fg:w="3"/><text x="92.5392%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (1 samples, 0.08%)</title><rect x="92.4498%" y="181" width="0.0803%" height="15" fill="rgb(211,27,52)" fg:x="1151" fg:w="1"/><text x="92.6998%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="92.4498%" y="165" width="0.0803%" height="15" fill="rgb(212,223,15)" fg:x="1151" fg:w="1"/><text x="92.6998%" y="175.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="92.4498%" y="149" width="0.0803%" height="15" fill="rgb(254,211,0)" fg:x="1151" fg:w="1"/><text x="92.6998%" y="159.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="92.6104%" y="101" width="0.0803%" height="15" fill="rgb(205,43,38)" fg:x="1153" fg:w="1"/><text x="92.8604%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="92.6908%" y="101" width="0.1606%" height="15" fill="rgb(242,206,46)" fg:x="1154" fg:w="2"/><text x="92.9408%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.7711%" y="85" width="0.0803%" height="15" fill="rgb(220,221,12)" fg:x="1155" fg:w="1"/><text x="93.0211%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.7711%" y="69" width="0.0803%" height="15" fill="rgb(217,156,35)" fg:x="1155" fg:w="1"/><text x="93.0211%" y="79.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="92.7711%" y="53" width="0.0803%" height="15" fill="rgb(207,181,49)" fg:x="1155" fg:w="1"/><text x="93.0211%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="92.8514%" y="101" width="0.1606%" height="15" fill="rgb(235,103,47)" fg:x="1156" fg:w="2"/><text x="93.1014%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="92.8514%" y="85" width="0.1606%" height="15" fill="rgb(222,63,28)" fg:x="1156" fg:w="2"/><text x="93.1014%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.9317%" y="69" width="0.0803%" height="15" fill="rgb(244,137,21)" fg:x="1157" fg:w="1"/><text x="93.1817%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.9317%" y="53" width="0.0803%" height="15" fill="rgb(228,35,27)" fg:x="1157" fg:w="1"/><text x="93.1817%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.9317%" y="37" width="0.0803%" height="15" fill="rgb(226,191,41)" fg:x="1157" fg:w="1"/><text x="93.1817%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (25 samples, 2.01%)</title><rect x="93.0120%" y="101" width="2.0080%" height="15" fill="rgb(210,154,3)" fg:x="1158" fg:w="25"/><text x="93.2620%" y="111.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (25 samples, 2.01%)</title><rect x="93.0120%" y="85" width="2.0080%" height="15" fill="rgb(216,60,49)" fg:x="1158" fg:w="25"/><text x="93.2620%" y="95.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (25 samples, 2.01%)</title><rect x="93.0120%" y="69" width="2.0080%" height="15" fill="rgb(226,17,20)" fg:x="1158" fg:w="25"/><text x="93.2620%" y="79.50">a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 2.65%)</title><rect x="92.5301%" y="197" width="2.6506%" height="15" fill="rgb(206,115,35)" fg:x="1152" fg:w="33"/><text x="92.7801%" y="207.50">&lt;c..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (33 samples, 2.65%)</title><rect x="92.5301%" y="181" width="2.6506%" height="15" fill="rgb(227,88,1)" fg:x="1152" fg:w="33"/><text x="92.7801%" y="191.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (33 samples, 2.65%)</title><rect x="92.5301%" y="165" width="2.6506%" height="15" fill="rgb(230,222,24)" fg:x="1152" fg:w="33"/><text x="92.7801%" y="175.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (33 samples, 2.65%)</title><rect x="92.5301%" y="149" width="2.6506%" height="15" fill="rgb(214,124,32)" fg:x="1152" fg:w="33"/><text x="92.7801%" y="159.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (33 samples, 2.65%)</title><rect x="92.5301%" y="133" width="2.6506%" height="15" fill="rgb(240,41,36)" fg:x="1152" fg:w="33"/><text x="92.7801%" y="143.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (33 samples, 2.65%)</title><rect x="92.5301%" y="117" width="2.6506%" height="15" fill="rgb(221,17,52)" fg:x="1152" fg:w="33"/><text x="92.7801%" y="127.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="95.0201%" y="101" width="0.1606%" height="15" fill="rgb(252,70,16)" fg:x="1183" fg:w="2"/><text x="95.2701%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.1004%" y="85" width="0.0803%" height="15" fill="rgb(250,177,4)" fg:x="1184" fg:w="1"/><text x="95.3504%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="95.1807%" y="181" width="0.2410%" height="15" fill="rgb(240,188,47)" fg:x="1185" fg:w="3"/><text x="95.4307%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (52 samples, 4.18%)</title><rect x="91.3253%" y="229" width="4.1767%" height="15" fill="rgb(215,92,12)" fg:x="1137" fg:w="52"/><text x="91.5753%" y="239.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (37 samples, 2.97%)</title><rect x="92.5301%" y="213" width="2.9719%" height="15" fill="rgb(242,110,29)" fg:x="1152" fg:w="37"/><text x="92.7801%" y="223.50">reg..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="95.1807%" y="197" width="0.3213%" height="15" fill="rgb(208,211,26)" fg:x="1185" fg:w="4"/><text x="95.4307%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="95.4217%" y="181" width="0.0803%" height="15" fill="rgb(244,147,6)" fg:x="1188" fg:w="1"/><text x="95.6717%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.4217%" y="165" width="0.0803%" height="15" fill="rgb(211,130,42)" fg:x="1188" fg:w="1"/><text x="95.6717%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.4217%" y="149" width="0.0803%" height="15" fill="rgb(220,63,1)" fg:x="1188" fg:w="1"/><text x="95.6717%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.4217%" y="133" width="0.0803%" height="15" fill="rgb(241,212,30)" fg:x="1188" fg:w="1"/><text x="95.6717%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="95.5823%" y="197" width="0.0803%" height="15" fill="rgb(233,153,17)" fg:x="1190" fg:w="1"/><text x="95.8323%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="95.5823%" y="181" width="0.0803%" height="15" fill="rgb(236,3,10)" fg:x="1190" fg:w="1"/><text x="95.8323%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="95.5823%" y="165" width="0.0803%" height="15" fill="rgb(232,41,21)" fg:x="1190" fg:w="1"/><text x="95.8323%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="95.5020%" y="229" width="0.2410%" height="15" fill="rgb(206,63,51)" fg:x="1189" fg:w="3"/><text x="95.7520%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="95.5020%" y="213" width="0.2410%" height="15" fill="rgb(250,214,3)" fg:x="1189" fg:w="3"/><text x="95.7520%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="95.6627%" y="197" width="0.0803%" height="15" fill="rgb(254,89,27)" fg:x="1191" fg:w="1"/><text x="95.9127%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="95.9036%" y="197" width="0.1606%" height="15" fill="rgb(249,41,14)" fg:x="1194" fg:w="2"/><text x="96.1536%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="95.9036%" y="181" width="0.1606%" height="15" fill="rgb(221,196,51)" fg:x="1194" fg:w="2"/><text x="96.1536%" y="191.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="95.9839%" y="165" width="0.0803%" height="15" fill="rgb(214,116,26)" fg:x="1195" fg:w="1"/><text x="96.2339%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="96.0643%" y="197" width="0.0803%" height="15" fill="rgb(236,67,7)" fg:x="1196" fg:w="1"/><text x="96.3143%" y="207.50"></text></g><g><title>regex_syntax::hir::Properties::capture (1 samples, 0.08%)</title><rect x="96.0643%" y="181" width="0.0803%" height="15" fill="rgb(253,179,32)" fg:x="1196" fg:w="1"/><text x="96.3143%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.0643%" y="165" width="0.0803%" height="15" fill="rgb(218,33,15)" fg:x="1196" fg:w="1"/><text x="96.3143%" y="175.50"></text></g><g><title>indefinite::rules::number::Number::check (72 samples, 5.78%)</title><rect x="90.4418%" y="293" width="5.7831%" height="15" fill="rgb(217,202,41)" fg:x="1126" fg:w="72"/><text x="90.6918%" y="303.50">indefin..</text></g><g><title>regex::regex::string::Regex::new (62 samples, 4.98%)</title><rect x="91.2450%" y="277" width="4.9799%" height="15" fill="rgb(234,133,5)" fg:x="1136" fg:w="62"/><text x="91.4950%" y="287.50">regex:..</text></g><g><title>regex::builders::string::RegexBuilder::build (62 samples, 4.98%)</title><rect x="91.2450%" y="261" width="4.9799%" height="15" fill="rgb(240,47,40)" fg:x="1136" fg:w="62"/><text x="91.4950%" y="271.50">regex:..</text></g><g><title>regex_automata::meta::regex::Builder::build (62 samples, 4.98%)</title><rect x="91.2450%" y="245" width="4.9799%" height="15" fill="rgb(234,166,26)" fg:x="1136" fg:w="62"/><text x="91.4950%" y="255.50">regex_..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.48%)</title><rect x="95.7430%" y="229" width="0.4819%" height="15" fill="rgb(244,125,51)" fg:x="1192" fg:w="6"/><text x="95.9930%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.48%)</title><rect x="95.7430%" y="213" width="0.4819%" height="15" fill="rgb(229,171,11)" fg:x="1192" fg:w="6"/><text x="95.9930%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="96.1446%" y="197" width="0.0803%" height="15" fill="rgb(224,38,45)" fg:x="1197" fg:w="1"/><text x="96.3946%" y="207.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="96.2249%" y="277" width="0.0803%" height="15" fill="rgb(237,27,7)" fg:x="1198" fg:w="1"/><text x="96.4749%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="96.3052%" y="213" width="0.0803%" height="15" fill="rgb(216,52,7)" fg:x="1199" fg:w="1"/><text x="96.5552%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.3052%" y="197" width="0.0803%" height="15" fill="rgb(243,11,11)" fg:x="1199" fg:w="1"/><text x="96.5552%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="96.3052%" y="181" width="0.0803%" height="15" fill="rgb(253,167,20)" fg:x="1199" fg:w="1"/><text x="96.5552%" y="191.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.3052%" y="165" width="0.0803%" height="15" fill="rgb(215,207,5)" fg:x="1199" fg:w="1"/><text x="96.5552%" y="175.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="96.3855%" y="197" width="0.2410%" height="15" fill="rgb(252,127,31)" fg:x="1200" fg:w="3"/><text x="96.6355%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="96.3855%" y="181" width="0.2410%" height="15" fill="rgb(209,106,27)" fg:x="1200" fg:w="3"/><text x="96.6355%" y="191.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="96.5462%" y="165" width="0.0803%" height="15" fill="rgb(214,220,18)" fg:x="1202" fg:w="1"/><text x="96.7962%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="96.6265%" y="181" width="0.1606%" height="15" fill="rgb(237,89,12)" fg:x="1203" fg:w="2"/><text x="96.8765%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="96.6265%" y="165" width="0.1606%" height="15" fill="rgb(209,167,36)" fg:x="1203" fg:w="2"/><text x="96.8765%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="96.6265%" y="149" width="0.1606%" height="15" fill="rgb(243,45,22)" fg:x="1203" fg:w="2"/><text x="96.8765%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="96.7068%" y="133" width="0.0803%" height="15" fill="rgb(239,2,46)" fg:x="1204" fg:w="1"/><text x="96.9568%" y="143.50"></text></g><g><title>regex_automata::meta::strategy::new (6 samples, 0.48%)</title><rect x="96.3855%" y="213" width="0.4819%" height="15" fill="rgb(241,101,0)" fg:x="1200" fg:w="6"/><text x="96.6355%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (3 samples, 0.24%)</title><rect x="96.6265%" y="197" width="0.2410%" height="15" fill="rgb(244,34,31)" fg:x="1203" fg:w="3"/><text x="96.8765%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="96.7871%" y="181" width="0.0803%" height="15" fill="rgb(248,23,22)" fg:x="1205" fg:w="1"/><text x="97.0371%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="96.7871%" y="165" width="0.0803%" height="15" fill="rgb(218,27,48)" fg:x="1205" fg:w="1"/><text x="97.0371%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.7871%" y="149" width="0.0803%" height="15" fill="rgb(232,78,1)" fg:x="1205" fg:w="1"/><text x="97.0371%" y="159.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="96.8675%" y="165" width="0.0803%" height="15" fill="rgb(233,169,12)" fg:x="1206" fg:w="1"/><text x="97.1175%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.8675%" y="149" width="0.0803%" height="15" fill="rgb(225,222,54)" fg:x="1206" fg:w="1"/><text x="97.1175%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.8675%" y="133" width="0.0803%" height="15" fill="rgb(245,126,29)" fg:x="1206" fg:w="1"/><text x="97.1175%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.8675%" y="117" width="0.0803%" height="15" fill="rgb(241,63,48)" fg:x="1206" fg:w="1"/><text x="97.1175%" y="127.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="96.8675%" y="181" width="0.1606%" height="15" fill="rgb(235,126,38)" fg:x="1206" fg:w="2"/><text x="97.1175%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="96.9478%" y="165" width="0.0803%" height="15" fill="rgb(232,96,49)" fg:x="1207" fg:w="1"/><text x="97.1978%" y="175.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::into_item (1 samples, 0.08%)</title><rect x="96.9478%" y="149" width="0.0803%" height="15" fill="rgb(211,146,40)" fg:x="1207" fg:w="1"/><text x="97.1978%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="96.8675%" y="213" width="0.2410%" height="15" fill="rgb(247,93,44)" fg:x="1206" fg:w="3"/><text x="97.1175%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="96.8675%" y="197" width="0.2410%" height="15" fill="rgb(251,41,49)" fg:x="1206" fg:w="3"/><text x="97.1175%" y="207.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="97.0281%" y="181" width="0.0803%" height="15" fill="rgb(218,155,12)" fg:x="1208" fg:w="1"/><text x="97.2781%" y="191.50"></text></g><g><title>regex::regex::string::Regex::new (11 samples, 0.88%)</title><rect x="96.3052%" y="261" width="0.8835%" height="15" fill="rgb(221,161,30)" fg:x="1199" fg:w="11"/><text x="96.5552%" y="271.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (11 samples, 0.88%)</title><rect x="96.3052%" y="245" width="0.8835%" height="15" fill="rgb(221,179,11)" fg:x="1199" fg:w="11"/><text x="96.5552%" y="255.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (11 samples, 0.88%)</title><rect x="96.3052%" y="229" width="0.8835%" height="15" fill="rgb(224,170,48)" fg:x="1199" fg:w="11"/><text x="96.5552%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="97.1084%" y="213" width="0.0803%" height="15" fill="rgb(223,117,5)" fg:x="1209" fg:w="1"/><text x="97.3584%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="97.1084%" y="197" width="0.0803%" height="15" fill="rgb(209,52,20)" fg:x="1209" fg:w="1"/><text x="97.3584%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="97.1084%" y="181" width="0.0803%" height="15" fill="rgb(209,19,41)" fg:x="1209" fg:w="1"/><text x="97.3584%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="97.1888%" y="197" width="0.1606%" height="15" fill="rgb(210,177,12)" fg:x="1210" fg:w="2"/><text x="97.4388%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="97.2691%" y="181" width="0.0803%" height="15" fill="rgb(211,159,37)" fg:x="1211" fg:w="1"/><text x="97.5191%" y="191.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (151 samples, 12.13%)</title><rect x="85.3815%" y="373" width="12.1285%" height="15" fill="rgb(209,20,2)" fg:x="1063" fg:w="151"/><text x="85.6315%" y="383.50">&lt;&amp;kernel::model::E..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (139 samples, 11.16%)</title><rect x="86.3454%" y="357" width="11.1647%" height="15" fill="rgb(244,3,46)" fg:x="1075" fg:w="139"/><text x="86.5954%" y="367.50">plugins_core::lo..</text></g><g><title>indefinite::indefinite (139 samples, 11.16%)</title><rect x="86.3454%" y="341" width="11.1647%" height="15" fill="rgb(220,94,38)" fg:x="1075" fg:w="139"/><text x="86.5954%" y="351.50">indefinite::inde..</text></g><g><title>indefinite::methods::indefinite (139 samples, 11.16%)</title><rect x="86.3454%" y="325" width="11.1647%" height="15" fill="rgb(253,14,31)" fg:x="1075" fg:w="139"/><text x="86.5954%" y="335.50">indefinite::meth..</text></g><g><title>indefinite::methods::apply_rules (138 samples, 11.08%)</title><rect x="86.4257%" y="309" width="11.0843%" height="15" fill="rgb(234,176,13)" fg:x="1076" fg:w="138"/><text x="86.6757%" y="319.50">indefinite::meth..</text></g><g><title>indefinite::rules::other::Other::run (16 samples, 1.29%)</title><rect x="96.2249%" y="293" width="1.2851%" height="15" fill="rgb(218,62,25)" fg:x="1198" fg:w="16"/><text x="96.4749%" y="303.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (15 samples, 1.20%)</title><rect x="96.3052%" y="277" width="1.2048%" height="15" fill="rgb(216,124,40)" fg:x="1199" fg:w="15"/><text x="96.5552%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="97.1888%" y="261" width="0.3213%" height="15" fill="rgb(228,170,12)" fg:x="1210" fg:w="4"/><text x="97.4388%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="97.1888%" y="245" width="0.3213%" height="15" fill="rgb(231,226,5)" fg:x="1210" fg:w="4"/><text x="97.4388%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="97.1888%" y="229" width="0.3213%" height="15" fill="rgb(237,122,22)" fg:x="1210" fg:w="4"/><text x="97.4388%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="97.1888%" y="213" width="0.3213%" height="15" fill="rgb(209,185,25)" fg:x="1210" fg:w="4"/><text x="97.4388%" y="223.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="97.3494%" y="197" width="0.1606%" height="15" fill="rgb(228,200,32)" fg:x="1212" fg:w="2"/><text x="97.5994%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.4297%" y="181" width="0.0803%" height="15" fill="rgb(217,140,10)" fg:x="1213" fg:w="1"/><text x="97.6797%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.5100%" y="357" width="0.0803%" height="15" fill="rgb(253,17,24)" fg:x="1214" fg:w="1"/><text x="97.7600%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.5100%" y="341" width="0.0803%" height="15" fill="rgb(212,61,6)" fg:x="1214" fg:w="1"/><text x="97.7600%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.5100%" y="325" width="0.0803%" height="15" fill="rgb(205,14,25)" fg:x="1214" fg:w="1"/><text x="97.7600%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="97.5100%" y="373" width="0.1606%" height="15" fill="rgb(232,69,41)" fg:x="1214" fg:w="2"/><text x="97.7600%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.5904%" y="357" width="0.0803%" height="15" fill="rgb(241,106,47)" fg:x="1215" fg:w="1"/><text x="97.8404%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.5904%" y="341" width="0.0803%" height="15" fill="rgb(210,213,53)" fg:x="1215" fg:w="1"/><text x="97.8404%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="97.6707%" y="325" width="0.0803%" height="15" fill="rgb(253,175,27)" fg:x="1216" fg:w="1"/><text x="97.9207%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.6707%" y="309" width="0.0803%" height="15" fill="rgb(211,171,24)" fg:x="1216" fg:w="1"/><text x="97.9207%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.6707%" y="293" width="0.0803%" height="15" fill="rgb(229,80,7)" fg:x="1216" fg:w="1"/><text x="97.9207%" y="303.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::desc (2 samples, 0.16%)</title><rect x="97.6707%" y="341" width="0.1606%" height="15" fill="rgb(212,46,39)" fg:x="1216" fg:w="2"/><text x="97.9207%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.7510%" y="325" width="0.0803%" height="15" fill="rgb(240,80,45)" fg:x="1217" fg:w="1"/><text x="98.0010%" y="335.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="97.8313%" y="341" width="0.0803%" height="15" fill="rgb(253,177,40)" fg:x="1218" fg:w="1"/><text x="98.0813%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="97.8313%" y="325" width="0.0803%" height="15" fill="rgb(249,200,15)" fg:x="1218" fg:w="1"/><text x="98.0813%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.8313%" y="309" width="0.0803%" height="15" fill="rgb(217,78,26)" fg:x="1218" fg:w="1"/><text x="98.0813%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.8313%" y="293" width="0.0803%" height="15" fill="rgb(254,151,32)" fg:x="1218" fg:w="1"/><text x="98.0813%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.8313%" y="277" width="0.0803%" height="15" fill="rgb(226,165,27)" fg:x="1218" fg:w="1"/><text x="98.0813%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.8313%" y="261" width="0.0803%" height="15" fill="rgb(250,206,4)" fg:x="1218" fg:w="1"/><text x="98.0813%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.8313%" y="245" width="0.0803%" height="15" fill="rgb(231,229,27)" fg:x="1218" fg:w="1"/><text x="98.0813%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.8313%" y="229" width="0.0803%" height="15" fill="rgb(239,217,8)" fg:x="1218" fg:w="1"/><text x="98.0813%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.8313%" y="213" width="0.0803%" height="15" fill="rgb(225,204,27)" fg:x="1218" fg:w="1"/><text x="98.0813%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.8313%" y="197" width="0.0803%" height="15" fill="rgb(230,56,32)" fg:x="1218" fg:w="1"/><text x="98.0813%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.8313%" y="181" width="0.0803%" height="15" fill="rgb(222,56,27)" fg:x="1218" fg:w="1"/><text x="98.0813%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.8313%" y="165" width="0.0803%" height="15" fill="rgb(253,108,27)" fg:x="1218" fg:w="1"/><text x="98.0813%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.8313%" y="149" width="0.0803%" height="15" fill="rgb(212,87,36)" fg:x="1218" fg:w="1"/><text x="98.0813%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.8313%" y="133" width="0.0803%" height="15" fill="rgb(247,82,36)" fg:x="1218" fg:w="1"/><text x="98.0813%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.8313%" y="117" width="0.0803%" height="15" fill="rgb(222,143,9)" fg:x="1218" fg:w="1"/><text x="98.0813%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.8313%" y="101" width="0.0803%" height="15" fill="rgb(238,162,48)" fg:x="1218" fg:w="1"/><text x="98.0813%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.8313%" y="85" width="0.0803%" height="15" fill="rgb(221,59,43)" fg:x="1218" fg:w="1"/><text x="98.0813%" y="95.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (4 samples, 0.32%)</title><rect x="97.6707%" y="357" width="0.3213%" height="15" fill="rgb(205,166,41)" fg:x="1216" fg:w="4"/><text x="97.9207%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::gid (1 samples, 0.08%)</title><rect x="97.9116%" y="341" width="0.0803%" height="15" fill="rgb(241,186,40)" fg:x="1219" fg:w="1"/><text x="98.1616%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="97.9116%" y="325" width="0.0803%" height="15" fill="rgb(216,119,35)" fg:x="1219" fg:w="1"/><text x="98.1616%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.9116%" y="309" width="0.0803%" height="15" fill="rgb(208,68,38)" fg:x="1219" fg:w="1"/><text x="98.1616%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.9920%" y="293" width="0.0803%" height="15" fill="rgb(217,113,1)" fg:x="1220" fg:w="1"/><text x="98.2420%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.9920%" y="277" width="0.0803%" height="15" fill="rgb(242,153,3)" fg:x="1220" fg:w="1"/><text x="98.2420%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.9920%" y="261" width="0.0803%" height="15" fill="rgb(229,76,35)" fg:x="1220" fg:w="1"/><text x="98.2420%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.9920%" y="245" width="0.0803%" height="15" fill="rgb(229,125,34)" fg:x="1220" fg:w="1"/><text x="98.2420%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.9920%" y="229" width="0.0803%" height="15" fill="rgb(238,179,36)" fg:x="1220" fg:w="1"/><text x="98.2420%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.9920%" y="213" width="0.0803%" height="15" fill="rgb(244,183,19)" fg:x="1220" fg:w="1"/><text x="98.2420%" y="223.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (161 samples, 12.93%)</title><rect x="85.2209%" y="533" width="12.9317%" height="15" fill="rgb(216,85,49)" fg:x="1061" fg:w="161"/><text x="85.4709%" y="543.50">kernel::plugins::mw..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (161 samples, 12.93%)</title><rect x="85.2209%" y="517" width="12.9317%" height="15" fill="rgb(208,161,47)" fg:x="1061" fg:w="161"/><text x="85.4709%" y="527.50">&lt;plugins_dynlib::Dy..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (161 samples, 12.93%)</title><rect x="85.2209%" y="501" width="12.9317%" height="15" fill="rgb(233,210,18)" fg:x="1061" fg:w="161"/><text x="85.4709%" y="511.50">kernel::plugins::mw..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (161 samples, 12.93%)</title><rect x="85.2209%" y="485" width="12.9317%" height="15" fill="rgb(205,104,42)" fg:x="1061" fg:w="161"/><text x="85.4709%" y="495.50">core::ops::function..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (161 samples, 12.93%)</title><rect x="85.2209%" y="469" width="12.9317%" height="15" fill="rgb(248,90,43)" fg:x="1061" fg:w="161"/><text x="85.4709%" y="479.50">kernel::plugins::mw..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (161 samples, 12.93%)</title><rect x="85.2209%" y="453" width="12.9317%" height="15" fill="rgb(206,198,11)" fg:x="1061" fg:w="161"/><text x="85.4709%" y="463.50">core::ops::function..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (161 samples, 12.93%)</title><rect x="85.2209%" y="437" width="12.9317%" height="15" fill="rgb(239,165,27)" fg:x="1061" fg:w="161"/><text x="85.4709%" y="447.50">&lt;alloc::boxed::Box&lt;..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (161 samples, 12.93%)</title><rect x="85.2209%" y="421" width="12.9317%" height="15" fill="rgb(246,44,32)" fg:x="1061" fg:w="161"/><text x="85.4709%" y="431.50">&lt;engine::session::s..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (161 samples, 12.93%)</title><rect x="85.2209%" y="405" width="12.9317%" height="15" fill="rgb(252,65,42)" fg:x="1061" fg:w="161"/><text x="85.4709%" y="415.50">&lt;plugins_core::look..</text></g><g><title>plugins_core::looking::model::new_area_observation (159 samples, 12.77%)</title><rect x="85.3815%" y="389" width="12.7711%" height="15" fill="rgb(246,197,18)" fg:x="1063" fg:w="159"/><text x="85.6315%" y="399.50">plugins_core::looki..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.48%)</title><rect x="97.6707%" y="373" width="0.4819%" height="15" fill="rgb(216,192,4)" fg:x="1216" fg:w="6"/><text x="97.9207%" y="383.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (2 samples, 0.16%)</title><rect x="97.9920%" y="357" width="0.1606%" height="15" fill="rgb(208,117,10)" fg:x="1220" fg:w="2"/><text x="98.2420%" y="367.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (2 samples, 0.16%)</title><rect x="97.9920%" y="341" width="0.1606%" height="15" fill="rgb(240,61,47)" fg:x="1220" fg:w="2"/><text x="98.2420%" y="351.50"></text></g><g><title>engine::session::Session::load_entity (2 samples, 0.16%)</title><rect x="97.9920%" y="325" width="0.1606%" height="15" fill="rgb(228,178,21)" fg:x="1220" fg:w="2"/><text x="98.2420%" y="335.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="97.9920%" y="309" width="0.1606%" height="15" fill="rgb(219,96,54)" fg:x="1220" fg:w="2"/><text x="98.2420%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="98.0723%" y="293" width="0.0803%" height="15" fill="rgb(250,177,24)" fg:x="1221" fg:w="1"/><text x="98.3223%" y="303.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="98.0723%" y="277" width="0.0803%" height="15" fill="rgb(242,154,46)" fg:x="1221" fg:w="1"/><text x="98.3223%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.0723%" y="261" width="0.0803%" height="15" fill="rgb(226,176,29)" fg:x="1221" fg:w="1"/><text x="98.3223%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.0723%" y="245" width="0.0803%" height="15" fill="rgb(226,29,2)" fg:x="1221" fg:w="1"/><text x="98.3223%" y="255.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.0723%" y="229" width="0.0803%" height="15" fill="rgb(237,104,14)" fg:x="1221" fg:w="1"/><text x="98.3223%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.1526%" y="341" width="0.0803%" height="15" fill="rgb(245,207,31)" fg:x="1222" fg:w="1"/><text x="98.4026%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.2329%" y="325" width="0.0803%" height="15" fill="rgb(229,211,45)" fg:x="1223" fg:w="1"/><text x="98.4829%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.2329%" y="309" width="0.0803%" height="15" fill="rgb(229,113,15)" fg:x="1223" fg:w="1"/><text x="98.4829%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.2329%" y="293" width="0.0803%" height="15" fill="rgb(237,147,15)" fg:x="1223" fg:w="1"/><text x="98.4829%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.2329%" y="277" width="0.0803%" height="15" fill="rgb(244,120,12)" fg:x="1223" fg:w="1"/><text x="98.4829%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.2329%" y="261" width="0.0803%" height="15" fill="rgb(205,120,12)" fg:x="1223" fg:w="1"/><text x="98.4829%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.2329%" y="245" width="0.0803%" height="15" fill="rgb(231,26,45)" fg:x="1223" fg:w="1"/><text x="98.4829%" y="255.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="98.2329%" y="229" width="0.0803%" height="15" fill="rgb(246,98,1)" fg:x="1223" fg:w="1"/><text x="98.4829%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="98.3133%" y="325" width="0.0803%" height="15" fill="rgb(207,68,45)" fg:x="1224" fg:w="1"/><text x="98.5633%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.3133%" y="309" width="0.0803%" height="15" fill="rgb(231,27,38)" fg:x="1224" fg:w="1"/><text x="98.5633%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="98.3133%" y="293" width="0.0803%" height="15" fill="rgb(214,223,3)" fg:x="1224" fg:w="1"/><text x="98.5633%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="98.3133%" y="277" width="0.0803%" height="15" fill="rgb(228,195,46)" fg:x="1224" fg:w="1"/><text x="98.5633%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="98.3133%" y="261" width="0.0803%" height="15" fill="rgb(231,100,42)" fg:x="1224" fg:w="1"/><text x="98.5633%" y="271.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="98.1526%" y="421" width="0.3213%" height="15" fill="rgb(236,53,4)" fg:x="1222" fg:w="4"/><text x="98.4026%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="98.1526%" y="405" width="0.3213%" height="15" fill="rgb(230,152,12)" fg:x="1222" fg:w="4"/><text x="98.4026%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="98.1526%" y="389" width="0.3213%" height="15" fill="rgb(226,101,19)" fg:x="1222" fg:w="4"/><text x="98.4026%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="98.1526%" y="373" width="0.3213%" height="15" fill="rgb(250,149,32)" fg:x="1222" fg:w="4"/><text x="98.4026%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="98.1526%" y="357" width="0.3213%" height="15" fill="rgb(232,178,12)" fg:x="1222" fg:w="4"/><text x="98.4026%" y="367.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="98.2329%" y="341" width="0.2410%" height="15" fill="rgb(246,151,17)" fg:x="1223" fg:w="3"/><text x="98.4829%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.3936%" y="325" width="0.0803%" height="15" fill="rgb(252,17,51)" fg:x="1225" fg:w="1"/><text x="98.6436%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.3936%" y="309" width="0.0803%" height="15" fill="rgb(250,207,23)" fg:x="1225" fg:w="1"/><text x="98.6436%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="98.3936%" y="293" width="0.0803%" height="15" fill="rgb(205,27,5)" fg:x="1225" fg:w="1"/><text x="98.6436%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.3936%" y="277" width="0.0803%" height="15" fill="rgb(224,32,19)" fg:x="1225" fg:w="1"/><text x="98.6436%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.3936%" y="261" width="0.0803%" height="15" fill="rgb(247,214,40)" fg:x="1225" fg:w="1"/><text x="98.6436%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="98.3936%" y="245" width="0.0803%" height="15" fill="rgb(239,199,17)" fg:x="1225" fg:w="1"/><text x="98.6436%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.3936%" y="229" width="0.0803%" height="15" fill="rgb(251,159,9)" fg:x="1225" fg:w="1"/><text x="98.6436%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.3936%" y="213" width="0.0803%" height="15" fill="rgb(225,78,32)" fg:x="1225" fg:w="1"/><text x="98.6436%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.3936%" y="197" width="0.0803%" height="15" fill="rgb(206,97,47)" fg:x="1225" fg:w="1"/><text x="98.6436%" y="207.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.4739%" y="357" width="0.0803%" height="15" fill="rgb(227,107,4)" fg:x="1226" fg:w="1"/><text x="98.7239%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.4739%" y="341" width="0.0803%" height="15" fill="rgb(241,146,50)" fg:x="1226" fg:w="1"/><text x="98.7239%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.4739%" y="325" width="0.0803%" height="15" fill="rgb(232,92,30)" fg:x="1226" fg:w="1"/><text x="98.7239%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.4739%" y="309" width="0.0803%" height="15" fill="rgb(222,0,40)" fg:x="1226" fg:w="1"/><text x="98.7239%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.4739%" y="293" width="0.0803%" height="15" fill="rgb(219,54,33)" fg:x="1226" fg:w="1"/><text x="98.7239%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.4739%" y="277" width="0.0803%" height="15" fill="rgb(226,209,28)" fg:x="1226" fg:w="1"/><text x="98.7239%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.4739%" y="261" width="0.0803%" height="15" fill="rgb(254,205,35)" fg:x="1226" fg:w="1"/><text x="98.7239%" y="271.50"></text></g><g><title>plugins_core::tools::contained_by (6 samples, 0.48%)</title><rect x="98.1526%" y="501" width="0.4819%" height="15" fill="rgb(230,159,3)" fg:x="1222" fg:w="6"/><text x="98.4026%" y="511.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (6 samples, 0.48%)</title><rect x="98.1526%" y="485" width="0.4819%" height="15" fill="rgb(232,190,24)" fg:x="1222" fg:w="6"/><text x="98.4026%" y="495.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (6 samples, 0.48%)</title><rect x="98.1526%" y="469" width="0.4819%" height="15" fill="rgb(217,227,44)" fg:x="1222" fg:w="6"/><text x="98.4026%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.48%)</title><rect x="98.1526%" y="453" width="0.4819%" height="15" fill="rgb(236,211,1)" fg:x="1222" fg:w="6"/><text x="98.4026%" y="463.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="98.1526%" y="437" width="0.4819%" height="15" fill="rgb(250,127,46)" fg:x="1222" fg:w="6"/><text x="98.4026%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="98.4739%" y="421" width="0.1606%" height="15" fill="rgb(229,213,6)" fg:x="1226" fg:w="2"/><text x="98.7239%" y="431.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="98.4739%" y="405" width="0.1606%" height="15" fill="rgb(237,15,36)" fg:x="1226" fg:w="2"/><text x="98.7239%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.4739%" y="389" width="0.1606%" height="15" fill="rgb(213,131,41)" fg:x="1226" fg:w="2"/><text x="98.7239%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.4739%" y="373" width="0.1606%" height="15" fill="rgb(225,82,44)" fg:x="1226" fg:w="2"/><text x="98.7239%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.5542%" y="357" width="0.0803%" height="15" fill="rgb(249,42,11)" fg:x="1227" fg:w="1"/><text x="98.8042%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.5542%" y="341" width="0.0803%" height="15" fill="rgb(253,11,29)" fg:x="1227" fg:w="1"/><text x="98.8042%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.6345%" y="469" width="0.1606%" height="15" fill="rgb(206,8,54)" fg:x="1228" fg:w="2"/><text x="98.8845%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.7149%" y="453" width="0.0803%" height="15" fill="rgb(222,186,2)" fg:x="1229" fg:w="1"/><text x="98.9649%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7149%" y="437" width="0.0803%" height="15" fill="rgb(221,206,53)" fg:x="1229" fg:w="1"/><text x="98.9649%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::SeqDeserializer as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.08%)</title><rect x="98.8755%" y="373" width="0.0803%" height="15" fill="rgb(230,150,21)" fg:x="1231" fg:w="1"/><text x="99.1255%" y="383.50"></text></g><g><title>engine::session::Session::captured (174 samples, 13.98%)</title><rect x="85.0602%" y="677" width="13.9759%" height="15" fill="rgb(253,202,10)" fg:x="1059" fg:w="174"/><text x="85.3102%" y="687.50">engine::session::Sess..</text></g><g><title>engine::session::logs::capture (173 samples, 13.90%)</title><rect x="85.1406%" y="661" width="13.8956%" height="15" fill="rgb(238,109,40)" fg:x="1060" fg:w="173"/><text x="85.3906%" y="671.50">engine::session::logs..</text></g><g><title>tracing_core::dispatcher::with_default (173 samples, 13.90%)</title><rect x="85.1406%" y="645" width="13.8956%" height="15" fill="rgb(247,120,22)" fg:x="1060" fg:w="173"/><text x="85.3906%" y="655.50">tracing_core::dispatc..</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (173 samples, 13.90%)</title><rect x="85.1406%" y="629" width="13.8956%" height="15" fill="rgb(207,43,30)" fg:x="1060" fg:w="173"/><text x="85.3906%" y="639.50">&lt;engine::session::Ses..</text></g><g><title>kernel::plugins::mw::apply_middleware (173 samples, 13.90%)</title><rect x="85.1406%" y="613" width="13.8956%" height="15" fill="rgb(213,211,24)" fg:x="1060" fg:w="173"/><text x="85.3906%" y="623.50">kernel::plugins::mw::..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (173 samples, 13.90%)</title><rect x="85.1406%" y="597" width="13.8956%" height="15" fill="rgb(239,73,39)" fg:x="1060" fg:w="173"/><text x="85.3906%" y="607.50">kernel::plugins::mw::..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (173 samples, 13.90%)</title><rect x="85.1406%" y="581" width="13.8956%" height="15" fill="rgb(245,182,19)" fg:x="1060" fg:w="173"/><text x="85.3906%" y="591.50">&lt;engine::session::Exp..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (172 samples, 13.82%)</title><rect x="85.2209%" y="565" width="13.8153%" height="15" fill="rgb(247,143,26)" fg:x="1061" fg:w="172"/><text x="85.4709%" y="575.50">kernel::plugins::mw::..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (172 samples, 13.82%)</title><rect x="85.2209%" y="549" width="13.8153%" height="15" fill="rgb(228,191,23)" fg:x="1061" fg:w="172"/><text x="85.4709%" y="559.50">&lt;plugins_rune::RuneMi..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (11 samples, 0.88%)</title><rect x="98.1526%" y="533" width="0.8835%" height="15" fill="rgb(253,165,31)" fg:x="1222" fg:w="11"/><text x="98.4026%" y="543.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (11 samples, 0.88%)</title><rect x="98.1526%" y="517" width="0.8835%" height="15" fill="rgb(234,138,20)" fg:x="1222" fg:w="11"/><text x="98.4026%" y="527.50"></text></g><g><title>plugins_core::tools::occupied_by (5 samples, 0.40%)</title><rect x="98.6345%" y="501" width="0.4016%" height="15" fill="rgb(218,191,29)" fg:x="1228" fg:w="5"/><text x="98.8845%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.40%)</title><rect x="98.6345%" y="485" width="0.4016%" height="15" fill="rgb(221,157,19)" fg:x="1228" fg:w="5"/><text x="98.8845%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="98.7952%" y="469" width="0.2410%" height="15" fill="rgb(237,26,42)" fg:x="1230" fg:w="3"/><text x="99.0452%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="98.7952%" y="453" width="0.2410%" height="15" fill="rgb(220,163,24)" fg:x="1230" fg:w="3"/><text x="99.0452%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="98.8755%" y="437" width="0.1606%" height="15" fill="rgb(242,115,20)" fg:x="1231" fg:w="2"/><text x="99.1255%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="98.8755%" y="421" width="0.1606%" height="15" fill="rgb(210,206,9)" fg:x="1231" fg:w="2"/><text x="99.1255%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="98.8755%" y="405" width="0.1606%" height="15" fill="rgb(208,71,17)" fg:x="1231" fg:w="2"/><text x="99.1255%" y="415.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (2 samples, 0.16%)</title><rect x="98.8755%" y="389" width="0.1606%" height="15" fill="rgb(233,7,5)" fg:x="1231" fg:w="2"/><text x="99.1255%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.9558%" y="373" width="0.0803%" height="15" fill="rgb(207,92,33)" fg:x="1232" fg:w="1"/><text x="99.2058%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.9558%" y="357" width="0.0803%" height="15" fill="rgb(218,87,9)" fg:x="1232" fg:w="1"/><text x="99.2058%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.9558%" y="341" width="0.0803%" height="15" fill="rgb(219,47,37)" fg:x="1232" fg:w="1"/><text x="99.2058%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.9558%" y="325" width="0.0803%" height="15" fill="rgb(221,152,34)" fg:x="1232" fg:w="1"/><text x="99.2058%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.9558%" y="309" width="0.0803%" height="15" fill="rgb(235,176,21)" fg:x="1232" fg:w="1"/><text x="99.2058%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="99.0361%" y="581" width="0.1606%" height="15" fill="rgb(232,212,21)" fg:x="1233" fg:w="2"/><text x="99.2861%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1165%" y="565" width="0.0803%" height="15" fill="rgb(245,82,39)" fg:x="1234" fg:w="1"/><text x="99.3665%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1165%" y="549" width="0.0803%" height="15" fill="rgb(241,52,51)" fg:x="1234" fg:w="1"/><text x="99.3665%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.1165%" y="533" width="0.0803%" height="15" fill="rgb(219,91,24)" fg:x="1234" fg:w="1"/><text x="99.3665%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.1165%" y="517" width="0.0803%" height="15" fill="rgb(241,142,12)" fg:x="1234" fg:w="1"/><text x="99.3665%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.1165%" y="501" width="0.0803%" height="15" fill="rgb(230,27,9)" fg:x="1234" fg:w="1"/><text x="99.3665%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.1165%" y="485" width="0.0803%" height="15" fill="rgb(249,181,32)" fg:x="1234" fg:w="1"/><text x="99.3665%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.1165%" y="469" width="0.0803%" height="15" fill="rgb(230,107,3)" fg:x="1234" fg:w="1"/><text x="99.3665%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.1165%" y="453" width="0.0803%" height="15" fill="rgb(246,204,14)" fg:x="1234" fg:w="1"/><text x="99.3665%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.1165%" y="437" width="0.0803%" height="15" fill="rgb(213,192,47)" fg:x="1234" fg:w="1"/><text x="99.3665%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.1165%" y="421" width="0.0803%" height="15" fill="rgb(240,44,36)" fg:x="1234" fg:w="1"/><text x="99.3665%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.1165%" y="405" width="0.0803%" height="15" fill="rgb(244,209,38)" fg:x="1234" fg:w="1"/><text x="99.3665%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.1165%" y="389" width="0.0803%" height="15" fill="rgb(219,34,37)" fg:x="1234" fg:w="1"/><text x="99.3665%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.1165%" y="373" width="0.0803%" height="15" fill="rgb(210,28,6)" fg:x="1234" fg:w="1"/><text x="99.3665%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.1165%" y="357" width="0.0803%" height="15" fill="rgb(244,110,52)" fg:x="1234" fg:w="1"/><text x="99.3665%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.1968%" y="533" width="0.0803%" height="15" fill="rgb(254,124,47)" fg:x="1235" fg:w="1"/><text x="99.4468%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.1968%" y="517" width="0.0803%" height="15" fill="rgb(254,110,13)" fg:x="1235" fg:w="1"/><text x="99.4468%" y="527.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="99.1968%" y="501" width="0.0803%" height="15" fill="rgb(252,57,21)" fg:x="1235" fg:w="1"/><text x="99.4468%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.1968%" y="485" width="0.0803%" height="15" fill="rgb(242,60,45)" fg:x="1235" fg:w="1"/><text x="99.4468%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.1968%" y="469" width="0.0803%" height="15" fill="rgb(234,49,30)" fg:x="1235" fg:w="1"/><text x="99.4468%" y="479.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="99.1968%" y="453" width="0.0803%" height="15" fill="rgb(218,98,6)" fg:x="1235" fg:w="1"/><text x="99.4468%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1968%" y="437" width="0.0803%" height="15" fill="rgb(220,174,29)" fg:x="1235" fg:w="1"/><text x="99.4468%" y="447.50"></text></g><g><title>engine::session::internal::Added::find_refs (4 samples, 0.32%)</title><rect x="99.0361%" y="661" width="0.3213%" height="15" fill="rgb(236,163,23)" fg:x="1233" fg:w="4"/><text x="99.2861%" y="671.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="99.0361%" y="645" width="0.3213%" height="15" fill="rgb(242,114,45)" fg:x="1233" fg:w="4"/><text x="99.2861%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="99.0361%" y="629" width="0.3213%" height="15" fill="rgb(232,10,53)" fg:x="1233" fg:w="4"/><text x="99.2861%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="99.0361%" y="613" width="0.3213%" height="15" fill="rgb(245,108,29)" fg:x="1233" fg:w="4"/><text x="99.2861%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="99.0361%" y="597" width="0.3213%" height="15" fill="rgb(240,89,53)" fg:x="1233" fg:w="4"/><text x="99.2861%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="99.1968%" y="581" width="0.1606%" height="15" fill="rgb(226,60,45)" fg:x="1235" fg:w="2"/><text x="99.4468%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="99.1968%" y="565" width="0.1606%" height="15" fill="rgb(230,41,44)" fg:x="1235" fg:w="2"/><text x="99.4468%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="99.1968%" y="549" width="0.1606%" height="15" fill="rgb(230,26,20)" fg:x="1235" fg:w="2"/><text x="99.4468%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.2771%" y="533" width="0.0803%" height="15" fill="rgb(237,170,32)" fg:x="1236" fg:w="1"/><text x="99.5271%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.2771%" y="517" width="0.0803%" height="15" fill="rgb(212,35,42)" fg:x="1236" fg:w="1"/><text x="99.5271%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.2771%" y="501" width="0.0803%" height="15" fill="rgb(227,31,34)" fg:x="1236" fg:w="1"/><text x="99.5271%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="99.2771%" y="485" width="0.0803%" height="15" fill="rgb(216,19,18)" fg:x="1236" fg:w="1"/><text x="99.5271%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.2771%" y="469" width="0.0803%" height="15" fill="rgb(211,133,42)" fg:x="1236" fg:w="1"/><text x="99.5271%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="99.4378%" y="645" width="0.0803%" height="15" fill="rgb(244,66,13)" fg:x="1238" fg:w="1"/><text x="99.6878%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.4378%" y="629" width="0.0803%" height="15" fill="rgb(218,185,50)" fg:x="1238" fg:w="1"/><text x="99.6878%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4378%" y="613" width="0.0803%" height="15" fill="rgb(219,149,13)" fg:x="1238" fg:w="1"/><text x="99.6878%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.4378%" y="597" width="0.0803%" height="15" fill="rgb(221,125,0)" fg:x="1238" fg:w="1"/><text x="99.6878%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4378%" y="581" width="0.0803%" height="15" fill="rgb(247,126,27)" fg:x="1238" fg:w="1"/><text x="99.6878%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.4378%" y="565" width="0.0803%" height="15" fill="rgb(250,138,30)" fg:x="1238" fg:w="1"/><text x="99.6878%" y="575.50"></text></g><g><title>engine::session::Session::load_entity (7 samples, 0.56%)</title><rect x="99.0361%" y="677" width="0.5622%" height="15" fill="rgb(230,151,9)" fg:x="1233" fg:w="7"/><text x="99.2861%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="99.3574%" y="661" width="0.2410%" height="15" fill="rgb(233,80,38)" fg:x="1237" fg:w="3"/><text x="99.6074%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="99.5181%" y="645" width="0.0803%" height="15" fill="rgb(232,68,43)" fg:x="1239" fg:w="1"/><text x="99.7681%" y="655.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.5181%" y="629" width="0.0803%" height="15" fill="rgb(254,5,50)" fg:x="1239" fg:w="1"/><text x="99.7681%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5181%" y="613" width="0.0803%" height="15" fill="rgb(225,45,5)" fg:x="1239" fg:w="1"/><text x="99.7681%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5181%" y="597" width="0.0803%" height="15" fill="rgb(239,22,3)" fg:x="1239" fg:w="1"/><text x="99.7681%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5181%" y="581" width="0.0803%" height="15" fill="rgb(243,129,0)" fg:x="1239" fg:w="1"/><text x="99.7681%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5181%" y="565" width="0.0803%" height="15" fill="rgb(223,164,0)" fg:x="1239" fg:w="1"/><text x="99.7681%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.5181%" y="549" width="0.0803%" height="15" fill="rgb(221,46,29)" fg:x="1239" fg:w="1"/><text x="99.7681%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.5181%" y="533" width="0.0803%" height="15" fill="rgb(205,97,47)" fg:x="1239" fg:w="1"/><text x="99.7681%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5984%" y="629" width="0.0803%" height="15" fill="rgb(249,14,8)" fg:x="1240" fg:w="1"/><text x="99.8484%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5984%" y="613" width="0.0803%" height="15" fill="rgb(216,77,3)" fg:x="1240" fg:w="1"/><text x="99.8484%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.5984%" y="597" width="0.0803%" height="15" fill="rgb(206,168,54)" fg:x="1240" fg:w="1"/><text x="99.8484%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.5984%" y="581" width="0.0803%" height="15" fill="rgb(236,3,41)" fg:x="1240" fg:w="1"/><text x="99.8484%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.5984%" y="565" width="0.0803%" height="15" fill="rgb(231,132,24)" fg:x="1240" fg:w="1"/><text x="99.8484%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.5984%" y="549" width="0.0803%" height="15" fill="rgb(227,221,40)" fg:x="1240" fg:w="1"/><text x="99.8484%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.5984%" y="533" width="0.0803%" height="15" fill="rgb(233,151,11)" fg:x="1240" fg:w="1"/><text x="99.8484%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.5984%" y="517" width="0.0803%" height="15" fill="rgb(247,81,35)" fg:x="1240" fg:w="1"/><text x="99.8484%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.5984%" y="501" width="0.0803%" height="15" fill="rgb(243,128,48)" fg:x="1240" fg:w="1"/><text x="99.8484%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.5984%" y="485" width="0.0803%" height="15" fill="rgb(253,16,10)" fg:x="1240" fg:w="1"/><text x="99.8484%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.5984%" y="469" width="0.0803%" height="15" fill="rgb(228,67,27)" fg:x="1240" fg:w="1"/><text x="99.8484%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.5984%" y="453" width="0.0803%" height="15" fill="rgb(231,105,25)" fg:x="1240" fg:w="1"/><text x="99.8484%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.5984%" y="437" width="0.0803%" height="15" fill="rgb(213,166,47)" fg:x="1240" fg:w="1"/><text x="99.8484%" y="447.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.08%)</title><rect x="99.5984%" y="421" width="0.0803%" height="15" fill="rgb(209,27,10)" fg:x="1240" fg:w="1"/><text x="99.8484%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.6787%" y="533" width="0.0803%" height="15" fill="rgb(241,44,30)" fg:x="1241" fg:w="1"/><text x="99.9287%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.6787%" y="517" width="0.0803%" height="15" fill="rgb(223,216,15)" fg:x="1241" fg:w="1"/><text x="99.9287%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.6787%" y="501" width="0.0803%" height="15" fill="rgb(227,14,7)" fg:x="1241" fg:w="1"/><text x="99.9287%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.6787%" y="485" width="0.0803%" height="15" fill="rgb(237,14,5)" fg:x="1241" fg:w="1"/><text x="99.9287%" y="495.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="99.6787%" y="629" width="0.1606%" height="15" fill="rgb(232,14,36)" fg:x="1241" fg:w="2"/><text x="99.9287%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.6787%" y="613" width="0.1606%" height="15" fill="rgb(234,0,38)" fg:x="1241" fg:w="2"/><text x="99.9287%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.6787%" y="597" width="0.1606%" height="15" fill="rgb(207,170,14)" fg:x="1241" fg:w="2"/><text x="99.9287%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.6787%" y="581" width="0.1606%" height="15" fill="rgb(252,45,13)" fg:x="1241" fg:w="2"/><text x="99.9287%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.6787%" y="565" width="0.1606%" height="15" fill="rgb(213,142,7)" fg:x="1241" fg:w="2"/><text x="99.9287%" y="575.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.6787%" y="549" width="0.1606%" height="15" fill="rgb(216,157,23)" fg:x="1241" fg:w="2"/><text x="99.9287%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7590%" y="533" width="0.0803%" height="15" fill="rgb(212,145,33)" fg:x="1242" fg:w="1"/><text x="100.0090%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7590%" y="517" width="0.0803%" height="15" fill="rgb(233,26,13)" fg:x="1242" fg:w="1"/><text x="100.0090%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.7590%" y="501" width="0.0803%" height="15" fill="rgb(219,196,19)" fg:x="1242" fg:w="1"/><text x="100.0090%" y="511.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (186 samples, 14.94%)</title><rect x="84.9799%" y="709" width="14.9398%" height="15" fill="rgb(246,56,21)" fg:x="1058" fg:w="186"/><text x="85.2299%" y="719.50">engine::session::Sessio..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (186 samples, 14.94%)</title><rect x="84.9799%" y="693" width="14.9398%" height="15" fill="rgb(222,28,53)" fg:x="1058" fg:w="186"/><text x="85.2299%" y="703.50">engine::session::Sessio..</text></g><g><title>kernel::model::EntityPtrResolver::world (4 samples, 0.32%)</title><rect x="99.5984%" y="677" width="0.3213%" height="15" fill="rgb(224,5,27)" fg:x="1240" fg:w="4"/><text x="99.8484%" y="687.50"></text></g><g><title>engine::session::Session::load_entity (4 samples, 0.32%)</title><rect x="99.5984%" y="661" width="0.3213%" height="15" fill="rgb(220,153,33)" fg:x="1240" fg:w="4"/><text x="99.8484%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="99.5984%" y="645" width="0.3213%" height="15" fill="rgb(226,58,19)" fg:x="1240" fg:w="4"/><text x="99.8484%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="99.8394%" y="629" width="0.0803%" height="15" fill="rgb(239,112,23)" fg:x="1243" fg:w="1"/><text x="100.0894%" y="639.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.8394%" y="613" width="0.0803%" height="15" fill="rgb(251,213,20)" fg:x="1243" fg:w="1"/><text x="100.0894%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8394%" y="597" width="0.0803%" height="15" fill="rgb(215,181,21)" fg:x="1243" fg:w="1"/><text x="100.0894%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8394%" y="581" width="0.0803%" height="15" fill="rgb(240,8,35)" fg:x="1243" fg:w="1"/><text x="100.0894%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8394%" y="565" width="0.0803%" height="15" fill="rgb(232,203,3)" fg:x="1243" fg:w="1"/><text x="100.0894%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8394%" y="549" width="0.0803%" height="15" fill="rgb(214,202,43)" fg:x="1243" fg:w="1"/><text x="100.0894%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.8394%" y="533" width="0.0803%" height="15" fill="rgb(254,35,11)" fg:x="1243" fg:w="1"/><text x="100.0894%" y="543.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.8394%" y="517" width="0.0803%" height="15" fill="rgb(239,173,13)" fg:x="1243" fg:w="1"/><text x="100.0894%" y="527.50"></text></g><g><title>all (1,245 samples, 100%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(220,141,0)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="1071.50"></text></g><g><title>simple-96d5fd4f (1,245 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(210,98,12)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="1055.50">simple-96d5fd4f</text></g><g><title>_start (1,245 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(254,153,22)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="1039.50">_start</text></g><g><title>__libc_start_main (1,245 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(247,223,17)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="1023.50">__libc_start_main</text></g><g><title>main (1,245 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(246,56,7)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="1007.50">main</text></g><g><title>std::rt::lang_start_internal (1,245 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(240,226,12)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="991.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,245 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(205,87,46)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="975.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,245 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(245,214,51)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="959.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,245 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(223,172,33)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="943.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,245 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(227,203,34)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="927.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,245 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(248,143,44)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="911.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,245 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(226,162,5)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="895.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,245 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(211,143,1)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="879.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,245 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(224,96,15)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="863.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,245 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(222,4,38)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="847.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,245 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(253,228,15)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="831.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,245 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(242,194,12)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="815.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,245 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(214,177,31)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="799.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,245 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(226,58,51)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="783.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (321 samples, 25.78%)</title><rect x="74.2169%" y="757" width="25.7831%" height="15" fill="rgb(250,119,16)" fg:x="924" fg:w="321"/><text x="74.4669%" y="767.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as c..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (321 samples, 25.78%)</title><rect x="74.2169%" y="741" width="25.7831%" height="15" fill="rgb(223,128,53)" fg:x="924" fg:w="321"/><text x="74.4669%" y="751.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (321 samples, 25.78%)</title><rect x="74.2169%" y="725" width="25.7831%" height="15" fill="rgb(251,199,15)" fg:x="924" fg:w="321"/><text x="74.4669%" y="735.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="99.9197%" y="709" width="0.0803%" height="15" fill="rgb(235,168,42)" fg:x="1244" fg:w="1"/><text x="100.1697%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="99.9197%" y="693" width="0.0803%" height="15" fill="rgb(250,210,17)" fg:x="1244" fg:w="1"/><text x="100.1697%" y="703.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="99.9197%" y="677" width="0.0803%" height="15" fill="rgb(226,36,41)" fg:x="1244" fg:w="1"/><text x="100.1697%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.9197%" y="661" width="0.0803%" height="15" fill="rgb(225,87,10)" fg:x="1244" fg:w="1"/><text x="100.1697%" y="671.50"></text></g></svg></svg>