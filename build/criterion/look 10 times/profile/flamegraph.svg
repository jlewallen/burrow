<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1014" onload="init(evt)" viewBox="0 0 1200 1014" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1014" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="997.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="997.00"> </text><svg id="frames" x="10" width="1180" total_samples="1239"><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.0807%" y="597" width="0.0807%" height="15" fill="rgb(225,176,8)" fg:x="1" fg:w="1"/><text x="0.3307%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0807%" y="581" width="0.0807%" height="15" fill="rgb(219,122,41)" fg:x="1" fg:w="1"/><text x="0.3307%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2421%" y="565" width="0.0807%" height="15" fill="rgb(248,140,20)" fg:x="3" fg:w="1"/><text x="0.4921%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.0807%" y="613" width="0.3228%" height="15" fill="rgb(245,41,37)" fg:x="1" fg:w="4"/><text x="0.3307%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="0.1614%" y="597" width="0.2421%" height="15" fill="rgb(235,82,39)" fg:x="2" fg:w="3"/><text x="0.4114%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.2421%" y="581" width="0.1614%" height="15" fill="rgb(230,108,42)" fg:x="3" fg:w="2"/><text x="0.4921%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.3228%" y="565" width="0.0807%" height="15" fill="rgb(215,150,50)" fg:x="4" fg:w="1"/><text x="0.5728%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.6457%" y="517" width="0.1614%" height="15" fill="rgb(233,212,5)" fg:x="8" fg:w="2"/><text x="0.8957%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.8071%" y="501" width="0.0807%" height="15" fill="rgb(245,80,22)" fg:x="10" fg:w="1"/><text x="1.0571%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.8878%" y="501" width="0.0807%" height="15" fill="rgb(238,129,16)" fg:x="11" fg:w="1"/><text x="1.1378%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.8878%" y="485" width="0.0807%" height="15" fill="rgb(240,19,0)" fg:x="11" fg:w="1"/><text x="1.1378%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.9685%" y="485" width="0.0807%" height="15" fill="rgb(232,42,35)" fg:x="12" fg:w="1"/><text x="1.2185%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.65%)</title><rect x="0.5650%" y="533" width="0.6457%" height="15" fill="rgb(223,130,24)" fg:x="7" fg:w="8"/><text x="0.8150%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="0.8071%" y="517" width="0.4036%" height="15" fill="rgb(237,16,22)" fg:x="10" fg:w="5"/><text x="1.0571%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="0.9685%" y="501" width="0.2421%" height="15" fill="rgb(248,192,20)" fg:x="12" fg:w="3"/><text x="1.2185%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.0492%" y="485" width="0.1614%" height="15" fill="rgb(233,167,2)" fg:x="13" fg:w="2"/><text x="1.2992%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.0492%" y="469" width="0.1614%" height="15" fill="rgb(252,71,44)" fg:x="13" fg:w="2"/><text x="1.2992%" y="479.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.0492%" y="453" width="0.1614%" height="15" fill="rgb(238,37,47)" fg:x="13" fg:w="2"/><text x="1.2992%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.3721%" y="501" width="0.0807%" height="15" fill="rgb(214,202,54)" fg:x="17" fg:w="1"/><text x="1.6221%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="1.4528%" y="501" width="0.1614%" height="15" fill="rgb(254,165,40)" fg:x="18" fg:w="2"/><text x="1.7028%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="1.7756%" y="485" width="0.0807%" height="15" fill="rgb(246,173,38)" fg:x="22" fg:w="1"/><text x="2.0256%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.7756%" y="469" width="0.0807%" height="15" fill="rgb(215,3,27)" fg:x="22" fg:w="1"/><text x="2.0256%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.8563%" y="485" width="0.0807%" height="15" fill="rgb(239,169,51)" fg:x="23" fg:w="1"/><text x="2.1063%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="1.9370%" y="485" width="0.1614%" height="15" fill="rgb(212,5,25)" fg:x="24" fg:w="2"/><text x="2.1870%" y="495.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.9370%" y="469" width="0.1614%" height="15" fill="rgb(243,45,17)" fg:x="24" fg:w="2"/><text x="2.1870%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.97%)</title><rect x="1.2107%" y="533" width="0.9685%" height="15" fill="rgb(242,97,9)" fg:x="15" fg:w="12"/><text x="1.4607%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.89%)</title><rect x="1.2914%" y="517" width="0.8878%" height="15" fill="rgb(228,71,31)" fg:x="16" fg:w="11"/><text x="1.5414%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="1.6142%" y="501" width="0.5650%" height="15" fill="rgb(252,184,16)" fg:x="20" fg:w="7"/><text x="1.8642%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.0985%" y="485" width="0.0807%" height="15" fill="rgb(236,169,46)" fg:x="26" fg:w="1"/><text x="2.3485%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.0985%" y="469" width="0.0807%" height="15" fill="rgb(207,17,47)" fg:x="26" fg:w="1"/><text x="2.3485%" y="479.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 1.86%)</title><rect x="0.4036%" y="613" width="1.8563%" height="15" fill="rgb(206,201,28)" fg:x="5" fg:w="23"/><text x="0.6536%" y="623.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (23 samples, 1.86%)</title><rect x="0.4036%" y="597" width="1.8563%" height="15" fill="rgb(224,184,23)" fg:x="5" fg:w="23"/><text x="0.6536%" y="607.50">c..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 1.86%)</title><rect x="0.4036%" y="581" width="1.8563%" height="15" fill="rgb(208,139,48)" fg:x="5" fg:w="23"/><text x="0.6536%" y="591.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (23 samples, 1.86%)</title><rect x="0.4036%" y="565" width="1.8563%" height="15" fill="rgb(208,130,10)" fg:x="5" fg:w="23"/><text x="0.6536%" y="575.50">c..</text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 1.86%)</title><rect x="0.4036%" y="549" width="1.8563%" height="15" fill="rgb(211,213,45)" fg:x="5" fg:w="23"/><text x="0.6536%" y="559.50">&lt;..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.1792%" y="533" width="0.0807%" height="15" fill="rgb(235,100,30)" fg:x="27" fg:w="1"/><text x="2.4292%" y="543.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.3406%" y="453" width="0.0807%" height="15" fill="rgb(206,144,31)" fg:x="29" fg:w="1"/><text x="2.5906%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.3406%" y="437" width="0.0807%" height="15" fill="rgb(224,200,26)" fg:x="29" fg:w="1"/><text x="2.5906%" y="447.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="2.3406%" y="421" width="0.0807%" height="15" fill="rgb(247,104,53)" fg:x="29" fg:w="1"/><text x="2.5906%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="2.3406%" y="405" width="0.0807%" height="15" fill="rgb(220,14,17)" fg:x="29" fg:w="1"/><text x="2.5906%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="2.3406%" y="389" width="0.0807%" height="15" fill="rgb(230,140,40)" fg:x="29" fg:w="1"/><text x="2.5906%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="2.3406%" y="373" width="0.0807%" height="15" fill="rgb(229,2,41)" fg:x="29" fg:w="1"/><text x="2.5906%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="2.3406%" y="357" width="0.0807%" height="15" fill="rgb(232,89,16)" fg:x="29" fg:w="1"/><text x="2.5906%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="2.3406%" y="341" width="0.0807%" height="15" fill="rgb(247,59,52)" fg:x="29" fg:w="1"/><text x="2.5906%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.3406%" y="325" width="0.0807%" height="15" fill="rgb(226,110,21)" fg:x="29" fg:w="1"/><text x="2.5906%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="2.3406%" y="309" width="0.0807%" height="15" fill="rgb(224,176,43)" fg:x="29" fg:w="1"/><text x="2.5906%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.3406%" y="293" width="0.0807%" height="15" fill="rgb(221,73,6)" fg:x="29" fg:w="1"/><text x="2.5906%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="2.3406%" y="277" width="0.0807%" height="15" fill="rgb(232,78,19)" fg:x="29" fg:w="1"/><text x="2.5906%" y="287.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="2.3406%" y="261" width="0.0807%" height="15" fill="rgb(233,112,48)" fg:x="29" fg:w="1"/><text x="2.5906%" y="271.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="2.3406%" y="245" width="0.0807%" height="15" fill="rgb(243,131,47)" fg:x="29" fg:w="1"/><text x="2.5906%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.3406%" y="229" width="0.0807%" height="15" fill="rgb(226,51,1)" fg:x="29" fg:w="1"/><text x="2.5906%" y="239.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="2.3406%" y="517" width="0.1614%" height="15" fill="rgb(247,58,7)" fg:x="29" fg:w="2"/><text x="2.5906%" y="527.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="2.3406%" y="501" width="0.1614%" height="15" fill="rgb(209,7,32)" fg:x="29" fg:w="2"/><text x="2.5906%" y="511.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="2.3406%" y="485" width="0.1614%" height="15" fill="rgb(209,39,41)" fg:x="29" fg:w="2"/><text x="2.5906%" y="495.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="2.3406%" y="469" width="0.1614%" height="15" fill="rgb(226,182,46)" fg:x="29" fg:w="2"/><text x="2.5906%" y="479.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="2.4213%" y="453" width="0.0807%" height="15" fill="rgb(230,219,10)" fg:x="30" fg:w="1"/><text x="2.6713%" y="463.50"></text></g><g><title>__asprintf (3 samples, 0.24%)</title><rect x="2.5020%" y="485" width="0.2421%" height="15" fill="rgb(227,175,30)" fg:x="31" fg:w="3"/><text x="2.7520%" y="495.50"></text></g><g><title>dlerror (4 samples, 0.32%)</title><rect x="2.5020%" y="501" width="0.3228%" height="15" fill="rgb(217,2,50)" fg:x="31" fg:w="4"/><text x="2.7520%" y="511.50"></text></g><g><title>pthread_rwlock_rdlock (1 samples, 0.08%)</title><rect x="2.7441%" y="485" width="0.0807%" height="15" fill="rgb(229,160,0)" fg:x="34" fg:w="1"/><text x="2.9941%" y="495.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (11 samples, 0.89%)</title><rect x="2.3406%" y="533" width="0.8878%" height="15" fill="rgb(207,78,37)" fg:x="29" fg:w="11"/><text x="2.5906%" y="543.50"></text></g><g><title>libloading::safe::Library::new (9 samples, 0.73%)</title><rect x="2.5020%" y="517" width="0.7264%" height="15" fill="rgb(225,57,0)" fg:x="31" fg:w="9"/><text x="2.7520%" y="527.50"></text></g><g><title>dlopen (5 samples, 0.40%)</title><rect x="2.8249%" y="501" width="0.4036%" height="15" fill="rgb(232,154,2)" fg:x="35" fg:w="5"/><text x="3.0749%" y="511.50"></text></g><g><title>_dl_catch_error (4 samples, 0.32%)</title><rect x="2.9056%" y="485" width="0.3228%" height="15" fill="rgb(241,212,25)" fg:x="36" fg:w="4"/><text x="3.1556%" y="495.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="2.9056%" y="469" width="0.3228%" height="15" fill="rgb(226,69,20)" fg:x="36" fg:w="4"/><text x="3.1556%" y="479.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="2.9056%" y="453" width="0.3228%" height="15" fill="rgb(247,184,54)" fg:x="36" fg:w="4"/><text x="3.1556%" y="463.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="2.9056%" y="437" width="0.3228%" height="15" fill="rgb(210,145,0)" fg:x="36" fg:w="4"/><text x="3.1556%" y="447.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (14 samples, 1.13%)</title><rect x="2.2599%" y="549" width="1.1299%" height="15" fill="rgb(253,82,12)" fg:x="28" fg:w="14"/><text x="2.5099%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.16%)</title><rect x="3.2284%" y="533" width="0.1614%" height="15" fill="rgb(245,42,11)" fg:x="40" fg:w="2"/><text x="3.4784%" y="543.50"></text></g><g><title>clock_gettime (2 samples, 0.16%)</title><rect x="3.2284%" y="517" width="0.1614%" height="15" fill="rgb(219,147,32)" fg:x="40" fg:w="2"/><text x="3.4784%" y="527.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (15 samples, 1.21%)</title><rect x="2.2599%" y="613" width="1.2107%" height="15" fill="rgb(246,12,7)" fg:x="28" fg:w="15"/><text x="2.5099%" y="623.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (15 samples, 1.21%)</title><rect x="2.2599%" y="597" width="1.2107%" height="15" fill="rgb(243,50,9)" fg:x="28" fg:w="15"/><text x="2.5099%" y="607.50"></text></g><g><title>engine::session::Session::new (15 samples, 1.21%)</title><rect x="2.2599%" y="581" width="1.2107%" height="15" fill="rgb(219,149,6)" fg:x="28" fg:w="15"/><text x="2.5099%" y="591.50"></text></g><g><title>engine::session::Session::initialize (15 samples, 1.21%)</title><rect x="2.2599%" y="565" width="1.2107%" height="15" fill="rgb(241,51,42)" fg:x="28" fg:w="15"/><text x="2.5099%" y="575.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="3.3898%" y="549" width="0.0807%" height="15" fill="rgb(226,128,27)" fg:x="42" fg:w="1"/><text x="3.6398%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.3898%" y="533" width="0.0807%" height="15" fill="rgb(244,144,4)" fg:x="42" fg:w="1"/><text x="3.6398%" y="543.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.08%)</title><rect x="3.4705%" y="597" width="0.0807%" height="15" fill="rgb(221,4,13)" fg:x="43" fg:w="1"/><text x="3.7205%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::build::BuildSurroundings&gt; (1 samples, 0.08%)</title><rect x="3.5513%" y="597" width="0.0807%" height="15" fill="rgb(208,170,28)" fg:x="44" fg:w="1"/><text x="3.8013%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.5513%" y="581" width="0.0807%" height="15" fill="rgb(226,131,13)" fg:x="44" fg:w="1"/><text x="3.8013%" y="591.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="3.6320%" y="581" width="0.1614%" height="15" fill="rgb(215,72,41)" fg:x="45" fg:w="2"/><text x="3.8820%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.7127%" y="565" width="0.0807%" height="15" fill="rgb(243,108,20)" fg:x="46" fg:w="1"/><text x="3.9627%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.7127%" y="549" width="0.0807%" height="15" fill="rgb(230,189,17)" fg:x="46" fg:w="1"/><text x="3.9627%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.7127%" y="533" width="0.0807%" height="15" fill="rgb(220,50,17)" fg:x="46" fg:w="1"/><text x="3.9627%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.7127%" y="517" width="0.0807%" height="15" fill="rgb(248,152,48)" fg:x="46" fg:w="1"/><text x="3.9627%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.7127%" y="501" width="0.0807%" height="15" fill="rgb(244,91,11)" fg:x="46" fg:w="1"/><text x="3.9627%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="3.7127%" y="485" width="0.0807%" height="15" fill="rgb(220,157,5)" fg:x="46" fg:w="1"/><text x="3.9627%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="3.7127%" y="469" width="0.0807%" height="15" fill="rgb(253,137,8)" fg:x="46" fg:w="1"/><text x="3.9627%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="3.8741%" y="469" width="0.1614%" height="15" fill="rgb(217,137,51)" fg:x="48" fg:w="2"/><text x="4.1241%" y="479.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="3.8741%" y="453" width="0.1614%" height="15" fill="rgb(218,209,53)" fg:x="48" fg:w="2"/><text x="4.1241%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.9548%" y="437" width="0.0807%" height="15" fill="rgb(249,137,25)" fg:x="49" fg:w="1"/><text x="4.2048%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.9548%" y="421" width="0.0807%" height="15" fill="rgb(239,155,26)" fg:x="49" fg:w="1"/><text x="4.2048%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.0355%" y="421" width="0.0807%" height="15" fill="rgb(227,85,46)" fg:x="50" fg:w="1"/><text x="4.2855%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.0355%" y="405" width="0.0807%" height="15" fill="rgb(251,107,43)" fg:x="50" fg:w="1"/><text x="4.2855%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.0355%" y="389" width="0.0807%" height="15" fill="rgb(234,170,33)" fg:x="50" fg:w="1"/><text x="4.2855%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.0355%" y="373" width="0.0807%" height="15" fill="rgb(206,29,35)" fg:x="50" fg:w="1"/><text x="4.2855%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.0355%" y="357" width="0.0807%" height="15" fill="rgb(227,138,25)" fg:x="50" fg:w="1"/><text x="4.2855%" y="367.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="4.0355%" y="437" width="0.1614%" height="15" fill="rgb(249,131,35)" fg:x="50" fg:w="2"/><text x="4.2855%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.1162%" y="421" width="0.0807%" height="15" fill="rgb(239,6,40)" fg:x="51" fg:w="1"/><text x="4.3662%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.1162%" y="405" width="0.0807%" height="15" fill="rgb(246,136,47)" fg:x="51" fg:w="1"/><text x="4.3662%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="4.0355%" y="453" width="0.2421%" height="15" fill="rgb(253,58,26)" fg:x="50" fg:w="3"/><text x="4.2855%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.1969%" y="437" width="0.0807%" height="15" fill="rgb(237,141,10)" fg:x="52" fg:w="1"/><text x="4.4469%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.1969%" y="421" width="0.0807%" height="15" fill="rgb(234,156,12)" fg:x="52" fg:w="1"/><text x="4.4469%" y="431.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::classify (1 samples, 0.08%)</title><rect x="4.3584%" y="437" width="0.0807%" height="15" fill="rgb(243,224,36)" fg:x="54" fg:w="1"/><text x="4.6084%" y="447.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::partial_classify (1 samples, 0.08%)</title><rect x="4.3584%" y="421" width="0.0807%" height="15" fill="rgb(205,229,51)" fg:x="54" fg:w="1"/><text x="4.6084%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="4.4391%" y="437" width="0.1614%" height="15" fill="rgb(223,189,4)" fg:x="55" fg:w="2"/><text x="4.6891%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="4.4391%" y="421" width="0.1614%" height="15" fill="rgb(249,167,54)" fg:x="55" fg:w="2"/><text x="4.6891%" y="431.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="4.4391%" y="405" width="0.1614%" height="15" fill="rgb(218,34,28)" fg:x="55" fg:w="2"/><text x="4.6891%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="4.4391%" y="389" width="0.1614%" height="15" fill="rgb(232,109,42)" fg:x="55" fg:w="2"/><text x="4.6891%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="4.2776%" y="453" width="0.4036%" height="15" fill="rgb(248,214,46)" fg:x="53" fg:w="5"/><text x="4.5276%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.6005%" y="437" width="0.0807%" height="15" fill="rgb(244,216,40)" fg:x="57" fg:w="1"/><text x="4.8505%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.6005%" y="421" width="0.0807%" height="15" fill="rgb(231,226,31)" fg:x="57" fg:w="1"/><text x="4.8505%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.6005%" y="405" width="0.0807%" height="15" fill="rgb(238,38,43)" fg:x="57" fg:w="1"/><text x="4.8505%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.81%)</title><rect x="4.0355%" y="469" width="0.8071%" height="15" fill="rgb(208,88,43)" fg:x="50" fg:w="10"/><text x="4.2855%" y="479.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="4.6812%" y="453" width="0.1614%" height="15" fill="rgb(205,136,37)" fg:x="58" fg:w="2"/><text x="4.9312%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.7619%" y="437" width="0.0807%" height="15" fill="rgb(237,34,14)" fg:x="59" fg:w="1"/><text x="5.0119%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.7619%" y="421" width="0.0807%" height="15" fill="rgb(236,193,44)" fg:x="59" fg:w="1"/><text x="5.0119%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (14 samples, 1.13%)</title><rect x="3.8741%" y="485" width="1.1299%" height="15" fill="rgb(231,48,10)" fg:x="48" fg:w="14"/><text x="4.1241%" y="495.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="4.8426%" y="469" width="0.1614%" height="15" fill="rgb(213,141,34)" fg:x="60" fg:w="2"/><text x="5.0926%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="4.8426%" y="453" width="0.1614%" height="15" fill="rgb(249,130,34)" fg:x="60" fg:w="2"/><text x="5.0926%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="4.8426%" y="437" width="0.1614%" height="15" fill="rgb(219,42,41)" fg:x="60" fg:w="2"/><text x="5.0926%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="4.8426%" y="421" width="0.1614%" height="15" fill="rgb(224,100,54)" fg:x="60" fg:w="2"/><text x="5.0926%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="4.8426%" y="405" width="0.1614%" height="15" fill="rgb(229,200,27)" fg:x="60" fg:w="2"/><text x="5.0926%" y="415.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="4.8426%" y="389" width="0.1614%" height="15" fill="rgb(217,118,10)" fg:x="60" fg:w="2"/><text x="5.0926%" y="399.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (15 samples, 1.21%)</title><rect x="3.8741%" y="501" width="1.2107%" height="15" fill="rgb(206,22,3)" fg:x="48" fg:w="15"/><text x="4.1241%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.0040%" y="485" width="0.0807%" height="15" fill="rgb(232,163,46)" fg:x="62" fg:w="1"/><text x="5.2540%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.0040%" y="469" width="0.0807%" height="15" fill="rgb(206,95,13)" fg:x="62" fg:w="1"/><text x="5.2540%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.0040%" y="453" width="0.0807%" height="15" fill="rgb(253,154,18)" fg:x="62" fg:w="1"/><text x="5.2540%" y="463.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="5.1655%" y="453" width="0.1614%" height="15" fill="rgb(219,32,23)" fg:x="64" fg:w="2"/><text x="5.4155%" y="463.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="5.4076%" y="421" width="0.1614%" height="15" fill="rgb(230,191,45)" fg:x="67" fg:w="2"/><text x="5.6576%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="5.0847%" y="501" width="0.5650%" height="15" fill="rgb(229,64,36)" fg:x="63" fg:w="7"/><text x="5.3347%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.56%)</title><rect x="5.0847%" y="485" width="0.5650%" height="15" fill="rgb(205,129,25)" fg:x="63" fg:w="7"/><text x="5.3347%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="5.0847%" y="469" width="0.5650%" height="15" fill="rgb(254,112,7)" fg:x="63" fg:w="7"/><text x="5.3347%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="5.3269%" y="453" width="0.3228%" height="15" fill="rgb(226,53,48)" fg:x="66" fg:w="4"/><text x="5.5769%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="5.3269%" y="437" width="0.3228%" height="15" fill="rgb(214,153,38)" fg:x="66" fg:w="4"/><text x="5.5769%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="5.5690%" y="421" width="0.0807%" height="15" fill="rgb(243,101,7)" fg:x="69" fg:w="1"/><text x="5.8190%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="5.5690%" y="405" width="0.0807%" height="15" fill="rgb(240,140,22)" fg:x="69" fg:w="1"/><text x="5.8190%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.8111%" y="453" width="0.0807%" height="15" fill="rgb(235,114,2)" fg:x="72" fg:w="1"/><text x="6.0611%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.8111%" y="437" width="0.0807%" height="15" fill="rgb(242,59,12)" fg:x="72" fg:w="1"/><text x="6.0611%" y="447.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="5.8111%" y="421" width="0.0807%" height="15" fill="rgb(252,134,9)" fg:x="72" fg:w="1"/><text x="6.0611%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="5.9726%" y="405" width="0.1614%" height="15" fill="rgb(236,4,44)" fg:x="74" fg:w="2"/><text x="6.2226%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="5.9726%" y="389" width="0.1614%" height="15" fill="rgb(254,172,41)" fg:x="74" fg:w="2"/><text x="6.2226%" y="399.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="5.9726%" y="373" width="0.1614%" height="15" fill="rgb(244,63,20)" fg:x="74" fg:w="2"/><text x="6.2226%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="6.2147%" y="389" width="0.0807%" height="15" fill="rgb(250,73,31)" fg:x="77" fg:w="1"/><text x="6.4647%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="6.2954%" y="389" width="0.0807%" height="15" fill="rgb(241,38,36)" fg:x="78" fg:w="1"/><text x="6.5454%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.4568%" y="373" width="0.0807%" height="15" fill="rgb(245,211,2)" fg:x="80" fg:w="1"/><text x="6.7068%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.4568%" y="357" width="0.0807%" height="15" fill="rgb(206,120,28)" fg:x="80" fg:w="1"/><text x="6.7068%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.4568%" y="341" width="0.0807%" height="15" fill="rgb(211,59,34)" fg:x="80" fg:w="1"/><text x="6.7068%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.65%)</title><rect x="5.9726%" y="421" width="0.6457%" height="15" fill="rgb(233,168,5)" fg:x="74" fg:w="8"/><text x="6.2226%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.48%)</title><rect x="6.1340%" y="405" width="0.4843%" height="15" fill="rgb(234,33,13)" fg:x="76" fg:w="6"/><text x="6.3840%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="6.3761%" y="389" width="0.2421%" height="15" fill="rgb(231,150,26)" fg:x="79" fg:w="3"/><text x="6.6261%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.5375%" y="373" width="0.0807%" height="15" fill="rgb(217,191,4)" fg:x="81" fg:w="1"/><text x="6.7875%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (10 samples, 0.81%)</title><rect x="5.8918%" y="437" width="0.8071%" height="15" fill="rgb(246,198,38)" fg:x="73" fg:w="10"/><text x="6.1418%" y="447.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="6.6182%" y="421" width="0.0807%" height="15" fill="rgb(245,64,37)" fg:x="82" fg:w="1"/><text x="6.8682%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.6182%" y="405" width="0.0807%" height="15" fill="rgb(250,30,36)" fg:x="82" fg:w="1"/><text x="6.8682%" y="415.50"></text></g><g><title>engine::session::Session::flush (39 samples, 3.15%)</title><rect x="3.6320%" y="597" width="3.1477%" height="15" fill="rgb(217,86,53)" fg:x="45" fg:w="39"/><text x="3.8820%" y="607.50">eng..</text></g><g><title>engine::session::state::State::close (37 samples, 2.99%)</title><rect x="3.7934%" y="581" width="2.9863%" height="15" fill="rgb(228,157,16)" fg:x="47" fg:w="37"/><text x="4.0434%" y="591.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (36 samples, 2.91%)</title><rect x="3.8741%" y="565" width="2.9056%" height="15" fill="rgb(217,59,31)" fg:x="48" fg:w="36"/><text x="4.1241%" y="575.50">en..</text></g><g><title>core::iter::adapters::try_process (36 samples, 2.91%)</title><rect x="3.8741%" y="549" width="2.9056%" height="15" fill="rgb(237,138,41)" fg:x="48" fg:w="36"/><text x="4.1241%" y="559.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (36 samples, 2.91%)</title><rect x="3.8741%" y="533" width="2.9056%" height="15" fill="rgb(227,91,49)" fg:x="48" fg:w="36"/><text x="4.1241%" y="543.50">&lt;a..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (36 samples, 2.91%)</title><rect x="3.8741%" y="517" width="2.9056%" height="15" fill="rgb(247,21,44)" fg:x="48" fg:w="36"/><text x="4.1241%" y="527.50">en..</text></g><g><title>kernel::model::any_entity_changes (14 samples, 1.13%)</title><rect x="5.6497%" y="501" width="1.1299%" height="15" fill="rgb(219,210,51)" fg:x="70" fg:w="14"/><text x="5.8997%" y="511.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (14 samples, 1.13%)</title><rect x="5.6497%" y="485" width="1.1299%" height="15" fill="rgb(209,140,6)" fg:x="70" fg:w="14"/><text x="5.8997%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (14 samples, 1.13%)</title><rect x="5.6497%" y="469" width="1.1299%" height="15" fill="rgb(221,188,24)" fg:x="70" fg:w="14"/><text x="5.8997%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_map (11 samples, 0.89%)</title><rect x="5.8918%" y="453" width="0.8878%" height="15" fill="rgb(232,154,20)" fg:x="73" fg:w="11"/><text x="6.1418%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.6990%" y="437" width="0.0807%" height="15" fill="rgb(244,137,50)" fg:x="83" fg:w="1"/><text x="6.9490%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="6.7797%" y="501" width="0.0807%" height="15" fill="rgb(225,185,43)" fg:x="84" fg:w="1"/><text x="7.0297%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="6.7797%" y="549" width="0.1614%" height="15" fill="rgb(213,205,38)" fg:x="84" fg:w="2"/><text x="7.0297%" y="559.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="6.7797%" y="533" width="0.1614%" height="15" fill="rgb(236,73,12)" fg:x="84" fg:w="2"/><text x="7.0297%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="6.7797%" y="517" width="0.1614%" height="15" fill="rgb(235,219,13)" fg:x="84" fg:w="2"/><text x="7.0297%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.8604%" y="501" width="0.0807%" height="15" fill="rgb(218,59,36)" fg:x="85" fg:w="1"/><text x="7.1104%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.8604%" y="485" width="0.0807%" height="15" fill="rgb(205,110,39)" fg:x="85" fg:w="1"/><text x="7.1104%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.8604%" y="469" width="0.0807%" height="15" fill="rgb(218,206,42)" fg:x="85" fg:w="1"/><text x="7.1104%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.8604%" y="453" width="0.0807%" height="15" fill="rgb(248,125,24)" fg:x="85" fg:w="1"/><text x="7.1104%" y="463.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="6.9411%" y="549" width="0.0807%" height="15" fill="rgb(242,28,27)" fg:x="86" fg:w="1"/><text x="7.1911%" y="559.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="6.9411%" y="533" width="0.0807%" height="15" fill="rgb(216,228,15)" fg:x="86" fg:w="1"/><text x="7.1911%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.9411%" y="517" width="0.0807%" height="15" fill="rgb(235,116,46)" fg:x="86" fg:w="1"/><text x="7.1911%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.9411%" y="501" width="0.0807%" height="15" fill="rgb(224,18,32)" fg:x="86" fg:w="1"/><text x="7.1911%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.9411%" y="485" width="0.0807%" height="15" fill="rgb(252,5,12)" fg:x="86" fg:w="1"/><text x="7.1911%" y="495.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.0218%" y="501" width="0.0807%" height="15" fill="rgb(251,36,5)" fg:x="87" fg:w="1"/><text x="7.2718%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="7.0218%" y="485" width="0.0807%" height="15" fill="rgb(217,53,14)" fg:x="87" fg:w="1"/><text x="7.2718%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.0218%" y="469" width="0.0807%" height="15" fill="rgb(215,86,45)" fg:x="87" fg:w="1"/><text x="7.2718%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.0218%" y="453" width="0.0807%" height="15" fill="rgb(242,169,11)" fg:x="87" fg:w="1"/><text x="7.2718%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.0218%" y="437" width="0.0807%" height="15" fill="rgb(211,213,45)" fg:x="87" fg:w="1"/><text x="7.2718%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.0218%" y="421" width="0.0807%" height="15" fill="rgb(205,88,11)" fg:x="87" fg:w="1"/><text x="7.2718%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.0218%" y="405" width="0.0807%" height="15" fill="rgb(252,69,26)" fg:x="87" fg:w="1"/><text x="7.2718%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.0218%" y="389" width="0.0807%" height="15" fill="rgb(246,123,37)" fg:x="87" fg:w="1"/><text x="7.2718%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.0218%" y="373" width="0.0807%" height="15" fill="rgb(212,205,5)" fg:x="87" fg:w="1"/><text x="7.2718%" y="383.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="7.0218%" y="533" width="0.1614%" height="15" fill="rgb(253,148,0)" fg:x="87" fg:w="2"/><text x="7.2718%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="7.0218%" y="517" width="0.1614%" height="15" fill="rgb(239,22,4)" fg:x="87" fg:w="2"/><text x="7.2718%" y="527.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="7.1025%" y="501" width="0.0807%" height="15" fill="rgb(226,26,53)" fg:x="88" fg:w="1"/><text x="7.3525%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="7.1025%" y="485" width="0.0807%" height="15" fill="rgb(225,229,45)" fg:x="88" fg:w="1"/><text x="7.3525%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.1025%" y="469" width="0.0807%" height="15" fill="rgb(220,60,37)" fg:x="88" fg:w="1"/><text x="7.3525%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="7.1025%" y="453" width="0.0807%" height="15" fill="rgb(217,180,35)" fg:x="88" fg:w="1"/><text x="7.3525%" y="463.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="7.1025%" y="437" width="0.0807%" height="15" fill="rgb(229,7,53)" fg:x="88" fg:w="1"/><text x="7.3525%" y="447.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="7.1832%" y="533" width="0.0807%" height="15" fill="rgb(254,137,3)" fg:x="89" fg:w="1"/><text x="7.4332%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="7.0218%" y="549" width="0.3228%" height="15" fill="rgb(215,140,41)" fg:x="87" fg:w="4"/><text x="7.2718%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="7.2639%" y="533" width="0.0807%" height="15" fill="rgb(250,80,15)" fg:x="90" fg:w="1"/><text x="7.5139%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.2639%" y="517" width="0.0807%" height="15" fill="rgb(252,191,6)" fg:x="90" fg:w="1"/><text x="7.5139%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="7.2639%" y="501" width="0.0807%" height="15" fill="rgb(246,217,18)" fg:x="90" fg:w="1"/><text x="7.5139%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="7.2639%" y="485" width="0.0807%" height="15" fill="rgb(223,93,7)" fg:x="90" fg:w="1"/><text x="7.5139%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="7.2639%" y="469" width="0.0807%" height="15" fill="rgb(225,55,52)" fg:x="90" fg:w="1"/><text x="7.5139%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.2639%" y="453" width="0.0807%" height="15" fill="rgb(240,31,24)" fg:x="90" fg:w="1"/><text x="7.5139%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="7.2639%" y="437" width="0.0807%" height="15" fill="rgb(205,56,52)" fg:x="90" fg:w="1"/><text x="7.5139%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.2639%" y="421" width="0.0807%" height="15" fill="rgb(246,146,12)" fg:x="90" fg:w="1"/><text x="7.5139%" y="431.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="7.2639%" y="405" width="0.0807%" height="15" fill="rgb(239,84,36)" fg:x="90" fg:w="1"/><text x="7.5139%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.2639%" y="389" width="0.0807%" height="15" fill="rgb(207,41,40)" fg:x="90" fg:w="1"/><text x="7.5139%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.3446%" y="533" width="0.0807%" height="15" fill="rgb(241,179,25)" fg:x="91" fg:w="1"/><text x="7.5946%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.3446%" y="517" width="0.0807%" height="15" fill="rgb(210,0,34)" fg:x="91" fg:w="1"/><text x="7.5946%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="7.3446%" y="501" width="0.0807%" height="15" fill="rgb(225,217,29)" fg:x="91" fg:w="1"/><text x="7.5946%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.3446%" y="485" width="0.0807%" height="15" fill="rgb(216,191,38)" fg:x="91" fg:w="1"/><text x="7.5946%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.3446%" y="469" width="0.0807%" height="15" fill="rgb(232,140,52)" fg:x="91" fg:w="1"/><text x="7.5946%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.3446%" y="453" width="0.0807%" height="15" fill="rgb(223,158,51)" fg:x="91" fg:w="1"/><text x="7.5946%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.3446%" y="437" width="0.0807%" height="15" fill="rgb(235,29,51)" fg:x="91" fg:w="1"/><text x="7.5946%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.3446%" y="421" width="0.0807%" height="15" fill="rgb(215,181,18)" fg:x="91" fg:w="1"/><text x="7.5946%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.3446%" y="405" width="0.0807%" height="15" fill="rgb(227,125,34)" fg:x="91" fg:w="1"/><text x="7.5946%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.4253%" y="453" width="0.0807%" height="15" fill="rgb(230,197,49)" fg:x="92" fg:w="1"/><text x="7.6753%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.4253%" y="437" width="0.0807%" height="15" fill="rgb(239,141,16)" fg:x="92" fg:w="1"/><text x="7.6753%" y="447.50"></text></g><g><title>kernel::model::entry::Entry::new (3 samples, 0.24%)</title><rect x="7.3446%" y="549" width="0.2421%" height="15" fill="rgb(225,105,43)" fg:x="91" fg:w="3"/><text x="7.5946%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="7.4253%" y="533" width="0.1614%" height="15" fill="rgb(214,131,14)" fg:x="92" fg:w="2"/><text x="7.6753%" y="543.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="7.4253%" y="517" width="0.1614%" height="15" fill="rgb(229,177,11)" fg:x="92" fg:w="2"/><text x="7.6753%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="7.4253%" y="501" width="0.1614%" height="15" fill="rgb(231,180,14)" fg:x="92" fg:w="2"/><text x="7.6753%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="7.4253%" y="485" width="0.1614%" height="15" fill="rgb(232,88,2)" fg:x="92" fg:w="2"/><text x="7.6753%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="7.4253%" y="469" width="0.1614%" height="15" fill="rgb(205,220,8)" fg:x="92" fg:w="2"/><text x="7.6753%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.5061%" y="453" width="0.0807%" height="15" fill="rgb(225,23,53)" fg:x="93" fg:w="1"/><text x="7.7561%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.5061%" y="437" width="0.0807%" height="15" fill="rgb(213,62,29)" fg:x="93" fg:w="1"/><text x="7.7561%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.5061%" y="421" width="0.0807%" height="15" fill="rgb(227,75,7)" fg:x="93" fg:w="1"/><text x="7.7561%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.5061%" y="405" width="0.0807%" height="15" fill="rgb(207,105,14)" fg:x="93" fg:w="1"/><text x="7.7561%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.5061%" y="389" width="0.0807%" height="15" fill="rgb(245,62,29)" fg:x="93" fg:w="1"/><text x="7.7561%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.5868%" y="469" width="0.0807%" height="15" fill="rgb(236,202,4)" fg:x="94" fg:w="1"/><text x="7.8368%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.5868%" y="453" width="0.0807%" height="15" fill="rgb(250,67,1)" fg:x="94" fg:w="1"/><text x="7.8368%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.5868%" y="437" width="0.0807%" height="15" fill="rgb(253,115,44)" fg:x="94" fg:w="1"/><text x="7.8368%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="7.5868%" y="517" width="0.1614%" height="15" fill="rgb(251,139,18)" fg:x="94" fg:w="2"/><text x="7.8368%" y="527.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="7.5868%" y="501" width="0.1614%" height="15" fill="rgb(218,22,32)" fg:x="94" fg:w="2"/><text x="7.8368%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="7.5868%" y="485" width="0.1614%" height="15" fill="rgb(243,53,5)" fg:x="94" fg:w="2"/><text x="7.8368%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.6675%" y="469" width="0.0807%" height="15" fill="rgb(227,56,16)" fg:x="95" fg:w="1"/><text x="7.9175%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.6675%" y="453" width="0.0807%" height="15" fill="rgb(245,53,0)" fg:x="95" fg:w="1"/><text x="7.9175%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.6675%" y="437" width="0.0807%" height="15" fill="rgb(216,170,35)" fg:x="95" fg:w="1"/><text x="7.9175%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.6675%" y="421" width="0.0807%" height="15" fill="rgb(211,200,8)" fg:x="95" fg:w="1"/><text x="7.9175%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.6675%" y="405" width="0.0807%" height="15" fill="rgb(228,204,44)" fg:x="95" fg:w="1"/><text x="7.9175%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.7482%" y="469" width="0.0807%" height="15" fill="rgb(214,121,17)" fg:x="96" fg:w="1"/><text x="7.9982%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.7482%" y="453" width="0.0807%" height="15" fill="rgb(233,64,38)" fg:x="96" fg:w="1"/><text x="7.9982%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.7482%" y="437" width="0.0807%" height="15" fill="rgb(253,54,19)" fg:x="96" fg:w="1"/><text x="7.9982%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.7482%" y="421" width="0.0807%" height="15" fill="rgb(253,94,18)" fg:x="96" fg:w="1"/><text x="7.9982%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.7482%" y="405" width="0.0807%" height="15" fill="rgb(227,57,52)" fg:x="96" fg:w="1"/><text x="7.9982%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.7482%" y="389" width="0.0807%" height="15" fill="rgb(230,228,50)" fg:x="96" fg:w="1"/><text x="7.9982%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.7482%" y="373" width="0.0807%" height="15" fill="rgb(217,205,27)" fg:x="96" fg:w="1"/><text x="7.9982%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.7482%" y="357" width="0.0807%" height="15" fill="rgb(252,71,50)" fg:x="96" fg:w="1"/><text x="7.9982%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.7482%" y="341" width="0.0807%" height="15" fill="rgb(209,86,4)" fg:x="96" fg:w="1"/><text x="7.9982%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.7482%" y="325" width="0.0807%" height="15" fill="rgb(229,94,0)" fg:x="96" fg:w="1"/><text x="7.9982%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="7.7482%" y="309" width="0.0807%" height="15" fill="rgb(252,223,21)" fg:x="96" fg:w="1"/><text x="7.9982%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="7.7482%" y="293" width="0.0807%" height="15" fill="rgb(230,210,4)" fg:x="96" fg:w="1"/><text x="7.9982%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="7.7482%" y="277" width="0.0807%" height="15" fill="rgb(240,149,38)" fg:x="96" fg:w="1"/><text x="7.9982%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="7.7482%" y="261" width="0.0807%" height="15" fill="rgb(254,105,20)" fg:x="96" fg:w="1"/><text x="7.9982%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.7482%" y="245" width="0.0807%" height="15" fill="rgb(253,87,46)" fg:x="96" fg:w="1"/><text x="7.9982%" y="255.50"></text></g><g><title>plugins_core::build::Build::into_entry (15 samples, 1.21%)</title><rect x="6.7797%" y="581" width="1.2107%" height="15" fill="rgb(253,116,33)" fg:x="84" fg:w="15"/><text x="7.0297%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (15 samples, 1.21%)</title><rect x="6.7797%" y="565" width="1.2107%" height="15" fill="rgb(229,198,5)" fg:x="84" fg:w="15"/><text x="7.0297%" y="575.50"></text></g><g><title>kernel::model::entry::EntryResolver::world (5 samples, 0.40%)</title><rect x="7.5868%" y="549" width="0.4036%" height="15" fill="rgb(242,38,37)" fg:x="94" fg:w="5"/><text x="7.8368%" y="559.50"></text></g><g><title>kernel::model::entry::Entry::new (5 samples, 0.40%)</title><rect x="7.5868%" y="533" width="0.4036%" height="15" fill="rgb(242,69,53)" fg:x="94" fg:w="5"/><text x="7.8368%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="7.7482%" y="517" width="0.2421%" height="15" fill="rgb(249,80,16)" fg:x="96" fg:w="3"/><text x="7.9982%" y="527.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="7.7482%" y="501" width="0.2421%" height="15" fill="rgb(206,128,11)" fg:x="96" fg:w="3"/><text x="7.9982%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="7.7482%" y="485" width="0.2421%" height="15" fill="rgb(212,35,20)" fg:x="96" fg:w="3"/><text x="7.9982%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="7.8289%" y="469" width="0.1614%" height="15" fill="rgb(236,79,13)" fg:x="97" fg:w="2"/><text x="8.0789%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="7.8289%" y="453" width="0.1614%" height="15" fill="rgb(233,123,3)" fg:x="97" fg:w="2"/><text x="8.0789%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.9096%" y="437" width="0.0807%" height="15" fill="rgb(214,93,52)" fg:x="98" fg:w="1"/><text x="8.1596%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.9096%" y="421" width="0.0807%" height="15" fill="rgb(251,37,40)" fg:x="98" fg:w="1"/><text x="8.1596%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.9096%" y="405" width="0.0807%" height="15" fill="rgb(227,80,54)" fg:x="98" fg:w="1"/><text x="8.1596%" y="415.50"></text></g><g><title>plugins_core::build::Build::carryable (16 samples, 1.29%)</title><rect x="6.7797%" y="597" width="1.2914%" height="15" fill="rgb(254,48,11)" fg:x="84" fg:w="16"/><text x="7.0297%" y="607.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="7.9903%" y="581" width="0.0807%" height="15" fill="rgb(235,193,26)" fg:x="99" fg:w="1"/><text x="8.2403%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="7.9903%" y="565" width="0.0807%" height="15" fill="rgb(229,99,21)" fg:x="99" fg:w="1"/><text x="8.2403%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="7.9903%" y="549" width="0.0807%" height="15" fill="rgb(211,140,41)" fg:x="99" fg:w="1"/><text x="8.2403%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.0710%" y="533" width="0.0807%" height="15" fill="rgb(240,227,30)" fg:x="100" fg:w="1"/><text x="8.3210%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.0710%" y="517" width="0.0807%" height="15" fill="rgb(215,224,45)" fg:x="100" fg:w="1"/><text x="8.3210%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="8.0710%" y="501" width="0.0807%" height="15" fill="rgb(206,123,31)" fg:x="100" fg:w="1"/><text x="8.3210%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="8.0710%" y="485" width="0.0807%" height="15" fill="rgb(210,138,16)" fg:x="100" fg:w="1"/><text x="8.3210%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="8.0710%" y="469" width="0.0807%" height="15" fill="rgb(228,57,28)" fg:x="100" fg:w="1"/><text x="8.3210%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="8.0710%" y="453" width="0.0807%" height="15" fill="rgb(242,170,10)" fg:x="100" fg:w="1"/><text x="8.3210%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="8.0710%" y="437" width="0.0807%" height="15" fill="rgb(228,214,39)" fg:x="100" fg:w="1"/><text x="8.3210%" y="447.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity_ref::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="8.0710%" y="565" width="0.1614%" height="15" fill="rgb(218,179,33)" fg:x="100" fg:w="2"/><text x="8.3210%" y="575.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="8.0710%" y="549" width="0.1614%" height="15" fill="rgb(235,193,39)" fg:x="100" fg:w="2"/><text x="8.3210%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.1517%" y="533" width="0.0807%" height="15" fill="rgb(219,221,36)" fg:x="101" fg:w="1"/><text x="8.4017%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.1517%" y="517" width="0.0807%" height="15" fill="rgb(248,218,19)" fg:x="101" fg:w="1"/><text x="8.4017%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="8.1517%" y="501" width="0.0807%" height="15" fill="rgb(205,50,9)" fg:x="101" fg:w="1"/><text x="8.4017%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.1517%" y="485" width="0.0807%" height="15" fill="rgb(238,81,28)" fg:x="101" fg:w="1"/><text x="8.4017%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.1517%" y="469" width="0.0807%" height="15" fill="rgb(235,110,19)" fg:x="101" fg:w="1"/><text x="8.4017%" y="479.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="8.2324%" y="565" width="0.0807%" height="15" fill="rgb(214,7,14)" fg:x="102" fg:w="1"/><text x="8.4824%" y="575.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="8.2324%" y="549" width="0.0807%" height="15" fill="rgb(211,77,3)" fg:x="102" fg:w="1"/><text x="8.4824%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.2324%" y="533" width="0.0807%" height="15" fill="rgb(229,5,9)" fg:x="102" fg:w="1"/><text x="8.4824%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="8.2324%" y="517" width="0.0807%" height="15" fill="rgb(225,90,11)" fg:x="102" fg:w="1"/><text x="8.4824%" y="527.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="8.2324%" y="501" width="0.0807%" height="15" fill="rgb(242,56,8)" fg:x="102" fg:w="1"/><text x="8.4824%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.2324%" y="485" width="0.0807%" height="15" fill="rgb(249,212,39)" fg:x="102" fg:w="1"/><text x="8.4824%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.2324%" y="469" width="0.0807%" height="15" fill="rgb(236,90,9)" fg:x="102" fg:w="1"/><text x="8.4824%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.2324%" y="453" width="0.0807%" height="15" fill="rgb(206,88,35)" fg:x="102" fg:w="1"/><text x="8.4824%" y="463.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="8.2324%" y="437" width="0.0807%" height="15" fill="rgb(205,126,30)" fg:x="102" fg:w="1"/><text x="8.4824%" y="447.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="8.3132%" y="565" width="0.0807%" height="15" fill="rgb(230,176,12)" fg:x="103" fg:w="1"/><text x="8.5632%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="8.3132%" y="549" width="0.0807%" height="15" fill="rgb(243,19,9)" fg:x="103" fg:w="1"/><text x="8.5632%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.3132%" y="533" width="0.0807%" height="15" fill="rgb(245,171,17)" fg:x="103" fg:w="1"/><text x="8.5632%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.3132%" y="517" width="0.0807%" height="15" fill="rgb(227,52,21)" fg:x="103" fg:w="1"/><text x="8.5632%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.3132%" y="501" width="0.0807%" height="15" fill="rgb(238,69,14)" fg:x="103" fg:w="1"/><text x="8.5632%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.3132%" y="485" width="0.0807%" height="15" fill="rgb(241,156,39)" fg:x="103" fg:w="1"/><text x="8.5632%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.3132%" y="469" width="0.0807%" height="15" fill="rgb(212,227,28)" fg:x="103" fg:w="1"/><text x="8.5632%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.3132%" y="453" width="0.0807%" height="15" fill="rgb(209,118,27)" fg:x="103" fg:w="1"/><text x="8.5632%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.3939%" y="517" width="0.0807%" height="15" fill="rgb(226,102,5)" fg:x="104" fg:w="1"/><text x="8.6439%" y="527.50"></text></g><g><title>plugins_core::build::Build::holding (6 samples, 0.48%)</title><rect x="8.0710%" y="597" width="0.4843%" height="15" fill="rgb(223,34,3)" fg:x="100" fg:w="6"/><text x="8.3210%" y="607.50"></text></g><g><title>plugins_core::tools::set_container (6 samples, 0.48%)</title><rect x="8.0710%" y="581" width="0.4843%" height="15" fill="rgb(221,81,38)" fg:x="100" fg:w="6"/><text x="8.3210%" y="591.50"></text></g><g><title>plugins_core::location::Location::set (2 samples, 0.16%)</title><rect x="8.3939%" y="565" width="0.1614%" height="15" fill="rgb(236,219,28)" fg:x="104" fg:w="2"/><text x="8.6439%" y="575.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="8.3939%" y="549" width="0.1614%" height="15" fill="rgb(213,200,14)" fg:x="104" fg:w="2"/><text x="8.6439%" y="559.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="8.3939%" y="533" width="0.1614%" height="15" fill="rgb(240,33,19)" fg:x="104" fg:w="2"/><text x="8.6439%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_struct (1 samples, 0.08%)</title><rect x="8.4746%" y="517" width="0.0807%" height="15" fill="rgb(233,113,27)" fg:x="105" fg:w="1"/><text x="8.7246%" y="527.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="8.5553%" y="597" width="0.0807%" height="15" fill="rgb(220,221,18)" fg:x="106" fg:w="1"/><text x="8.8053%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.5553%" y="581" width="0.0807%" height="15" fill="rgb(238,92,8)" fg:x="106" fg:w="1"/><text x="8.8053%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.5553%" y="565" width="0.0807%" height="15" fill="rgb(222,164,16)" fg:x="106" fg:w="1"/><text x="8.8053%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="8.5553%" y="549" width="0.0807%" height="15" fill="rgb(241,119,3)" fg:x="106" fg:w="1"/><text x="8.8053%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="8.5553%" y="533" width="0.0807%" height="15" fill="rgb(241,44,8)" fg:x="106" fg:w="1"/><text x="8.8053%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="8.5553%" y="517" width="0.0807%" height="15" fill="rgb(230,36,40)" fg:x="106" fg:w="1"/><text x="8.8053%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.5553%" y="501" width="0.0807%" height="15" fill="rgb(243,16,36)" fg:x="106" fg:w="1"/><text x="8.8053%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.5553%" y="485" width="0.0807%" height="15" fill="rgb(231,4,26)" fg:x="106" fg:w="1"/><text x="8.8053%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="8.5553%" y="469" width="0.0807%" height="15" fill="rgb(240,9,31)" fg:x="106" fg:w="1"/><text x="8.8053%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="8.5553%" y="453" width="0.0807%" height="15" fill="rgb(207,173,15)" fg:x="106" fg:w="1"/><text x="8.8053%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="8.5553%" y="437" width="0.0807%" height="15" fill="rgb(224,192,53)" fg:x="106" fg:w="1"/><text x="8.8053%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="8.5553%" y="421" width="0.0807%" height="15" fill="rgb(223,67,28)" fg:x="106" fg:w="1"/><text x="8.8053%" y="431.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="8.5553%" y="405" width="0.0807%" height="15" fill="rgb(211,20,47)" fg:x="106" fg:w="1"/><text x="8.8053%" y="415.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="8.5553%" y="389" width="0.0807%" height="15" fill="rgb(240,228,2)" fg:x="106" fg:w="1"/><text x="8.8053%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="8.7167%" y="533" width="0.0807%" height="15" fill="rgb(248,151,12)" fg:x="108" fg:w="1"/><text x="8.9667%" y="543.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="8.7167%" y="517" width="0.0807%" height="15" fill="rgb(244,8,39)" fg:x="108" fg:w="1"/><text x="8.9667%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="8.7167%" y="501" width="0.0807%" height="15" fill="rgb(222,26,8)" fg:x="108" fg:w="1"/><text x="8.9667%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.7167%" y="485" width="0.0807%" height="15" fill="rgb(213,106,44)" fg:x="108" fg:w="1"/><text x="8.9667%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="8.7167%" y="469" width="0.0807%" height="15" fill="rgb(214,129,20)" fg:x="108" fg:w="1"/><text x="8.9667%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.7974%" y="501" width="0.0807%" height="15" fill="rgb(212,32,13)" fg:x="109" fg:w="1"/><text x="9.0474%" y="511.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.7974%" y="485" width="0.0807%" height="15" fill="rgb(208,168,33)" fg:x="109" fg:w="1"/><text x="9.0474%" y="495.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="8.7974%" y="469" width="0.0807%" height="15" fill="rgb(231,207,8)" fg:x="109" fg:w="1"/><text x="9.0474%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.7974%" y="453" width="0.0807%" height="15" fill="rgb(235,219,23)" fg:x="109" fg:w="1"/><text x="9.0474%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.7974%" y="437" width="0.0807%" height="15" fill="rgb(226,216,26)" fg:x="109" fg:w="1"/><text x="9.0474%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.7974%" y="421" width="0.0807%" height="15" fill="rgb(239,137,16)" fg:x="109" fg:w="1"/><text x="9.0474%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.7974%" y="405" width="0.0807%" height="15" fill="rgb(207,12,36)" fg:x="109" fg:w="1"/><text x="9.0474%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.7974%" y="389" width="0.0807%" height="15" fill="rgb(210,214,24)" fg:x="109" fg:w="1"/><text x="9.0474%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="8.7974%" y="373" width="0.0807%" height="15" fill="rgb(206,56,30)" fg:x="109" fg:w="1"/><text x="9.0474%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="8.7974%" y="357" width="0.0807%" height="15" fill="rgb(228,143,26)" fg:x="109" fg:w="1"/><text x="9.0474%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="8.7974%" y="341" width="0.0807%" height="15" fill="rgb(216,218,46)" fg:x="109" fg:w="1"/><text x="9.0474%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.7974%" y="325" width="0.0807%" height="15" fill="rgb(206,6,19)" fg:x="109" fg:w="1"/><text x="9.0474%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.7974%" y="309" width="0.0807%" height="15" fill="rgb(239,177,51)" fg:x="109" fg:w="1"/><text x="9.0474%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="8.7974%" y="293" width="0.0807%" height="15" fill="rgb(216,55,25)" fg:x="109" fg:w="1"/><text x="9.0474%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="8.7974%" y="277" width="0.0807%" height="15" fill="rgb(231,163,29)" fg:x="109" fg:w="1"/><text x="9.0474%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="8.7974%" y="261" width="0.0807%" height="15" fill="rgb(232,149,50)" fg:x="109" fg:w="1"/><text x="9.0474%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="8.7974%" y="245" width="0.0807%" height="15" fill="rgb(223,142,48)" fg:x="109" fg:w="1"/><text x="9.0474%" y="255.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.08%)</title><rect x="8.7974%" y="229" width="0.0807%" height="15" fill="rgb(245,83,23)" fg:x="109" fg:w="1"/><text x="9.0474%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.8781%" y="373" width="0.0807%" height="15" fill="rgb(224,63,2)" fg:x="110" fg:w="1"/><text x="9.1281%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.8781%" y="357" width="0.0807%" height="15" fill="rgb(218,65,53)" fg:x="110" fg:w="1"/><text x="9.1281%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="8.8781%" y="341" width="0.0807%" height="15" fill="rgb(221,84,29)" fg:x="110" fg:w="1"/><text x="9.1281%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="8.8781%" y="325" width="0.0807%" height="15" fill="rgb(234,0,32)" fg:x="110" fg:w="1"/><text x="9.1281%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="8.8781%" y="309" width="0.0807%" height="15" fill="rgb(206,20,16)" fg:x="110" fg:w="1"/><text x="9.1281%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.8781%" y="293" width="0.0807%" height="15" fill="rgb(244,172,18)" fg:x="110" fg:w="1"/><text x="9.1281%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.8781%" y="277" width="0.0807%" height="15" fill="rgb(254,133,1)" fg:x="110" fg:w="1"/><text x="9.1281%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="8.8781%" y="261" width="0.0807%" height="15" fill="rgb(222,206,41)" fg:x="110" fg:w="1"/><text x="9.1281%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="8.8781%" y="245" width="0.0807%" height="15" fill="rgb(212,3,42)" fg:x="110" fg:w="1"/><text x="9.1281%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="8.8781%" y="229" width="0.0807%" height="15" fill="rgb(241,11,4)" fg:x="110" fg:w="1"/><text x="9.1281%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="8.8781%" y="213" width="0.0807%" height="15" fill="rgb(205,19,26)" fg:x="110" fg:w="1"/><text x="9.1281%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.8781%" y="197" width="0.0807%" height="15" fill="rgb(210,179,32)" fg:x="110" fg:w="1"/><text x="9.1281%" y="207.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="8.8781%" y="501" width="0.1614%" height="15" fill="rgb(227,116,49)" fg:x="110" fg:w="2"/><text x="9.1281%" y="511.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="8.8781%" y="485" width="0.1614%" height="15" fill="rgb(211,146,6)" fg:x="110" fg:w="2"/><text x="9.1281%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="8.8781%" y="469" width="0.1614%" height="15" fill="rgb(219,44,39)" fg:x="110" fg:w="2"/><text x="9.1281%" y="479.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="8.8781%" y="453" width="0.1614%" height="15" fill="rgb(234,128,11)" fg:x="110" fg:w="2"/><text x="9.1281%" y="463.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="8.8781%" y="437" width="0.1614%" height="15" fill="rgb(220,183,53)" fg:x="110" fg:w="2"/><text x="9.1281%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="8.8781%" y="421" width="0.1614%" height="15" fill="rgb(213,219,32)" fg:x="110" fg:w="2"/><text x="9.1281%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="8.8781%" y="405" width="0.1614%" height="15" fill="rgb(232,156,16)" fg:x="110" fg:w="2"/><text x="9.1281%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="8.8781%" y="389" width="0.1614%" height="15" fill="rgb(246,135,34)" fg:x="110" fg:w="2"/><text x="9.1281%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.9588%" y="373" width="0.0807%" height="15" fill="rgb(241,99,0)" fg:x="111" fg:w="1"/><text x="9.2088%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.0395%" y="437" width="0.0807%" height="15" fill="rgb(222,103,45)" fg:x="112" fg:w="1"/><text x="9.2895%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.0395%" y="421" width="0.0807%" height="15" fill="rgb(212,57,4)" fg:x="112" fg:w="1"/><text x="9.2895%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.0395%" y="405" width="0.0807%" height="15" fill="rgb(215,68,47)" fg:x="112" fg:w="1"/><text x="9.2895%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.0395%" y="389" width="0.0807%" height="15" fill="rgb(230,84,2)" fg:x="112" fg:w="1"/><text x="9.2895%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.0395%" y="373" width="0.0807%" height="15" fill="rgb(220,102,14)" fg:x="112" fg:w="1"/><text x="9.2895%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="9.0395%" y="357" width="0.0807%" height="15" fill="rgb(240,10,32)" fg:x="112" fg:w="1"/><text x="9.2895%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="9.0395%" y="341" width="0.0807%" height="15" fill="rgb(215,47,27)" fg:x="112" fg:w="1"/><text x="9.2895%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="9.0395%" y="325" width="0.0807%" height="15" fill="rgb(233,188,43)" fg:x="112" fg:w="1"/><text x="9.2895%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.0395%" y="309" width="0.0807%" height="15" fill="rgb(253,190,1)" fg:x="112" fg:w="1"/><text x="9.2895%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.0395%" y="293" width="0.0807%" height="15" fill="rgb(206,114,52)" fg:x="112" fg:w="1"/><text x="9.2895%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="9.0395%" y="277" width="0.0807%" height="15" fill="rgb(233,120,37)" fg:x="112" fg:w="1"/><text x="9.2895%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="9.0395%" y="261" width="0.0807%" height="15" fill="rgb(214,52,39)" fg:x="112" fg:w="1"/><text x="9.2895%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="9.0395%" y="245" width="0.0807%" height="15" fill="rgb(223,80,29)" fg:x="112" fg:w="1"/><text x="9.2895%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="9.0395%" y="229" width="0.0807%" height="15" fill="rgb(230,101,40)" fg:x="112" fg:w="1"/><text x="9.2895%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.0395%" y="213" width="0.0807%" height="15" fill="rgb(219,211,8)" fg:x="112" fg:w="1"/><text x="9.2895%" y="223.50"></text></g><g><title>plugins_core::build::Build::into_entry (6 samples, 0.48%)</title><rect x="8.7974%" y="533" width="0.4843%" height="15" fill="rgb(252,126,28)" fg:x="109" fg:w="6"/><text x="9.0474%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.48%)</title><rect x="8.7974%" y="517" width="0.4843%" height="15" fill="rgb(215,56,38)" fg:x="109" fg:w="6"/><text x="9.0474%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::new (3 samples, 0.24%)</title><rect x="9.0395%" y="501" width="0.2421%" height="15" fill="rgb(249,55,44)" fg:x="112" fg:w="3"/><text x="9.2895%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="9.0395%" y="485" width="0.2421%" height="15" fill="rgb(220,221,32)" fg:x="112" fg:w="3"/><text x="9.2895%" y="495.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="9.0395%" y="469" width="0.2421%" height="15" fill="rgb(212,216,41)" fg:x="112" fg:w="3"/><text x="9.2895%" y="479.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="9.0395%" y="453" width="0.2421%" height="15" fill="rgb(228,213,43)" fg:x="112" fg:w="3"/><text x="9.2895%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="9.1203%" y="437" width="0.1614%" height="15" fill="rgb(211,31,26)" fg:x="113" fg:w="2"/><text x="9.3703%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="9.1203%" y="421" width="0.1614%" height="15" fill="rgb(229,202,19)" fg:x="113" fg:w="2"/><text x="9.3703%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="9.1203%" y="405" width="0.1614%" height="15" fill="rgb(229,105,46)" fg:x="113" fg:w="2"/><text x="9.3703%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="9.1203%" y="389" width="0.1614%" height="15" fill="rgb(235,108,1)" fg:x="113" fg:w="2"/><text x="9.3703%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="9.1203%" y="373" width="0.1614%" height="15" fill="rgb(245,111,35)" fg:x="113" fg:w="2"/><text x="9.3703%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="9.1203%" y="357" width="0.1614%" height="15" fill="rgb(219,185,31)" fg:x="113" fg:w="2"/><text x="9.3703%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.2010%" y="341" width="0.0807%" height="15" fill="rgb(214,4,43)" fg:x="114" fg:w="1"/><text x="9.4510%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.2817%" y="517" width="0.0807%" height="15" fill="rgb(235,227,40)" fg:x="115" fg:w="1"/><text x="9.5317%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="9.3624%" y="469" width="0.1614%" height="15" fill="rgb(230,88,30)" fg:x="116" fg:w="2"/><text x="9.6124%" y="479.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="9.3624%" y="453" width="0.1614%" height="15" fill="rgb(216,217,1)" fg:x="116" fg:w="2"/><text x="9.6124%" y="463.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="9.4431%" y="437" width="0.0807%" height="15" fill="rgb(248,139,50)" fg:x="117" fg:w="1"/><text x="9.6931%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.4431%" y="421" width="0.0807%" height="15" fill="rgb(233,1,21)" fg:x="117" fg:w="1"/><text x="9.6931%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.4431%" y="405" width="0.0807%" height="15" fill="rgb(215,183,12)" fg:x="117" fg:w="1"/><text x="9.6931%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="9.4431%" y="389" width="0.0807%" height="15" fill="rgb(229,104,42)" fg:x="117" fg:w="1"/><text x="9.6931%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.4431%" y="373" width="0.0807%" height="15" fill="rgb(243,34,48)" fg:x="117" fg:w="1"/><text x="9.6931%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.4431%" y="357" width="0.0807%" height="15" fill="rgb(239,11,44)" fg:x="117" fg:w="1"/><text x="9.6931%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.4431%" y="341" width="0.0807%" height="15" fill="rgb(231,98,35)" fg:x="117" fg:w="1"/><text x="9.6931%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.4431%" y="325" width="0.0807%" height="15" fill="rgb(233,28,25)" fg:x="117" fg:w="1"/><text x="9.6931%" y="335.50"></text></g><g><title>core::iter::adapters::try_process (12 samples, 0.97%)</title><rect x="8.7167%" y="581" width="0.9685%" height="15" fill="rgb(234,123,11)" fg:x="108" fg:w="12"/><text x="8.9667%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (12 samples, 0.97%)</title><rect x="8.7167%" y="565" width="0.9685%" height="15" fill="rgb(220,69,3)" fg:x="108" fg:w="12"/><text x="8.9667%" y="575.50"></text></g><g><title>plugins_core::build::QuickThing::make (12 samples, 0.97%)</title><rect x="8.7167%" y="549" width="0.9685%" height="15" fill="rgb(214,64,36)" fg:x="108" fg:w="12"/><text x="8.9667%" y="559.50"></text></g><g><title>plugins_core::build::Build::leads_to (5 samples, 0.40%)</title><rect x="9.2817%" y="533" width="0.4036%" height="15" fill="rgb(211,138,32)" fg:x="115" fg:w="5"/><text x="9.5317%" y="543.50"></text></g><g><title>plugins_core::tools::leads_to (4 samples, 0.32%)</title><rect x="9.3624%" y="517" width="0.3228%" height="15" fill="rgb(213,118,47)" fg:x="116" fg:w="4"/><text x="9.6124%" y="527.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity_ref::EntityRef&gt;::try_from (4 samples, 0.32%)</title><rect x="9.3624%" y="501" width="0.3228%" height="15" fill="rgb(243,124,49)" fg:x="116" fg:w="4"/><text x="9.6124%" y="511.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="9.3624%" y="485" width="0.3228%" height="15" fill="rgb(221,30,28)" fg:x="116" fg:w="4"/><text x="9.6124%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="9.5238%" y="469" width="0.1614%" height="15" fill="rgb(246,37,13)" fg:x="118" fg:w="2"/><text x="9.7738%" y="479.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="9.5238%" y="453" width="0.1614%" height="15" fill="rgb(249,66,14)" fg:x="118" fg:w="2"/><text x="9.7738%" y="463.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="9.5238%" y="437" width="0.1614%" height="15" fill="rgb(213,166,5)" fg:x="118" fg:w="2"/><text x="9.7738%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="9.5238%" y="421" width="0.1614%" height="15" fill="rgb(221,66,24)" fg:x="118" fg:w="2"/><text x="9.7738%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.6045%" y="405" width="0.0807%" height="15" fill="rgb(210,132,17)" fg:x="119" fg:w="1"/><text x="9.8545%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="9.6045%" y="389" width="0.0807%" height="15" fill="rgb(243,202,5)" fg:x="119" fg:w="1"/><text x="9.8545%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.6045%" y="373" width="0.0807%" height="15" fill="rgb(233,70,48)" fg:x="119" fg:w="1"/><text x="9.8545%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.6045%" y="357" width="0.0807%" height="15" fill="rgb(238,41,26)" fg:x="119" fg:w="1"/><text x="9.8545%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.6045%" y="341" width="0.0807%" height="15" fill="rgb(241,19,31)" fg:x="119" fg:w="1"/><text x="9.8545%" y="351.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="9.6852%" y="565" width="0.1614%" height="15" fill="rgb(214,76,10)" fg:x="120" fg:w="2"/><text x="9.9352%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.7659%" y="549" width="0.0807%" height="15" fill="rgb(254,202,22)" fg:x="121" fg:w="1"/><text x="10.0159%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.7659%" y="533" width="0.0807%" height="15" fill="rgb(214,72,24)" fg:x="121" fg:w="1"/><text x="10.0159%" y="543.50"></text></g><g><title>engine::session::should_force_rollback (2 samples, 0.16%)</title><rect x="9.8467%" y="549" width="0.1614%" height="15" fill="rgb(221,92,46)" fg:x="122" fg:w="2"/><text x="10.0967%" y="559.50"></text></g><g><title>std::env::_var (2 samples, 0.16%)</title><rect x="9.8467%" y="533" width="0.1614%" height="15" fill="rgb(246,13,50)" fg:x="122" fg:w="2"/><text x="10.0967%" y="543.50"></text></g><g><title>std::env::var_os (2 samples, 0.16%)</title><rect x="9.8467%" y="517" width="0.1614%" height="15" fill="rgb(240,165,38)" fg:x="122" fg:w="2"/><text x="10.0967%" y="527.50"></text></g><g><title>std::env::_var_os (2 samples, 0.16%)</title><rect x="9.8467%" y="501" width="0.1614%" height="15" fill="rgb(241,24,51)" fg:x="122" fg:w="2"/><text x="10.0967%" y="511.50"></text></g><g><title>std::sys::unix::os::getenv (2 samples, 0.16%)</title><rect x="9.8467%" y="485" width="0.1614%" height="15" fill="rgb(227,51,44)" fg:x="122" fg:w="2"/><text x="10.0967%" y="495.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.16%)</title><rect x="9.8467%" y="469" width="0.1614%" height="15" fill="rgb(231,121,3)" fg:x="122" fg:w="2"/><text x="10.0967%" y="479.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (2 samples, 0.16%)</title><rect x="9.8467%" y="453" width="0.1614%" height="15" fill="rgb(245,3,41)" fg:x="122" fg:w="2"/><text x="10.0967%" y="463.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="9.9274%" y="437" width="0.0807%" height="15" fill="rgb(214,13,26)" fg:x="123" fg:w="1"/><text x="10.1774%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="10.0081%" y="517" width="0.0807%" height="15" fill="rgb(252,75,11)" fg:x="124" fg:w="1"/><text x="10.2581%" y="527.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="10.0888%" y="485" width="0.0807%" height="15" fill="rgb(218,226,17)" fg:x="125" fg:w="1"/><text x="10.3388%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="10.0888%" y="469" width="0.0807%" height="15" fill="rgb(248,89,38)" fg:x="125" fg:w="1"/><text x="10.3388%" y="479.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="10.0888%" y="517" width="0.1614%" height="15" fill="rgb(237,73,46)" fg:x="125" fg:w="2"/><text x="10.3388%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="10.0888%" y="501" width="0.1614%" height="15" fill="rgb(242,78,33)" fg:x="125" fg:w="2"/><text x="10.3388%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.1695%" y="485" width="0.0807%" height="15" fill="rgb(235,60,3)" fg:x="126" fg:w="1"/><text x="10.4195%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="10.3309%" y="453" width="0.2421%" height="15" fill="rgb(216,172,19)" fg:x="128" fg:w="3"/><text x="10.5809%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="10.3309%" y="437" width="0.2421%" height="15" fill="rgb(227,6,42)" fg:x="128" fg:w="3"/><text x="10.5809%" y="447.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="10.4116%" y="421" width="0.1614%" height="15" fill="rgb(223,207,42)" fg:x="129" fg:w="2"/><text x="10.6616%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="10.4116%" y="405" width="0.1614%" height="15" fill="rgb(246,138,30)" fg:x="129" fg:w="2"/><text x="10.6616%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.4923%" y="389" width="0.0807%" height="15" fill="rgb(251,199,47)" fg:x="130" fg:w="1"/><text x="10.7423%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="10.5730%" y="437" width="0.0807%" height="15" fill="rgb(228,218,44)" fg:x="131" fg:w="1"/><text x="10.8230%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.5730%" y="421" width="0.0807%" height="15" fill="rgb(220,68,6)" fg:x="131" fg:w="1"/><text x="10.8230%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="10.6538%" y="437" width="0.3228%" height="15" fill="rgb(240,60,26)" fg:x="132" fg:w="4"/><text x="10.9038%" y="447.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="10.7345%" y="421" width="0.2421%" height="15" fill="rgb(211,200,19)" fg:x="133" fg:w="3"/><text x="10.9845%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="10.8152%" y="405" width="0.1614%" height="15" fill="rgb(242,145,30)" fg:x="134" fg:w="2"/><text x="11.0652%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="10.8152%" y="389" width="0.1614%" height="15" fill="rgb(225,64,13)" fg:x="134" fg:w="2"/><text x="11.0652%" y="399.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="10.9766%" y="421" width="0.1614%" height="15" fill="rgb(218,103,35)" fg:x="136" fg:w="2"/><text x="11.2266%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.0573%" y="405" width="0.0807%" height="15" fill="rgb(216,93,46)" fg:x="137" fg:w="1"/><text x="11.3073%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.0573%" y="389" width="0.0807%" height="15" fill="rgb(225,159,27)" fg:x="137" fg:w="1"/><text x="11.3073%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.0573%" y="373" width="0.0807%" height="15" fill="rgb(225,204,11)" fg:x="137" fg:w="1"/><text x="11.3073%" y="383.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="11.1380%" y="389" width="0.1614%" height="15" fill="rgb(205,56,4)" fg:x="138" fg:w="2"/><text x="11.3880%" y="399.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="11.2994%" y="373" width="0.1614%" height="15" fill="rgb(206,6,35)" fg:x="140" fg:w="2"/><text x="11.5494%" y="383.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="11.2994%" y="357" width="0.1614%" height="15" fill="rgb(247,73,52)" fg:x="140" fg:w="2"/><text x="11.5494%" y="367.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="11.2994%" y="341" width="0.1614%" height="15" fill="rgb(246,97,4)" fg:x="140" fg:w="2"/><text x="11.5494%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="11.2994%" y="325" width="0.1614%" height="15" fill="rgb(212,37,15)" fg:x="140" fg:w="2"/><text x="11.5494%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="11.2994%" y="309" width="0.1614%" height="15" fill="rgb(208,130,40)" fg:x="140" fg:w="2"/><text x="11.5494%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="11.2994%" y="293" width="0.1614%" height="15" fill="rgb(236,55,29)" fg:x="140" fg:w="2"/><text x="11.5494%" y="303.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="11.2994%" y="277" width="0.1614%" height="15" fill="rgb(209,156,45)" fg:x="140" fg:w="2"/><text x="11.5494%" y="287.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="11.2994%" y="389" width="0.3228%" height="15" fill="rgb(249,107,4)" fg:x="140" fg:w="4"/><text x="11.5494%" y="399.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="11.4609%" y="373" width="0.1614%" height="15" fill="rgb(227,7,13)" fg:x="142" fg:w="2"/><text x="11.7109%" y="383.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="11.4609%" y="357" width="0.1614%" height="15" fill="rgb(250,129,14)" fg:x="142" fg:w="2"/><text x="11.7109%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="11.4609%" y="341" width="0.1614%" height="15" fill="rgb(229,92,13)" fg:x="142" fg:w="2"/><text x="11.7109%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="11.4609%" y="325" width="0.1614%" height="15" fill="rgb(245,98,39)" fg:x="142" fg:w="2"/><text x="11.7109%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="11.4609%" y="309" width="0.1614%" height="15" fill="rgb(234,135,48)" fg:x="142" fg:w="2"/><text x="11.7109%" y="319.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="11.4609%" y="293" width="0.1614%" height="15" fill="rgb(230,98,28)" fg:x="142" fg:w="2"/><text x="11.7109%" y="303.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.65%)</title><rect x="11.1380%" y="405" width="0.6457%" height="15" fill="rgb(223,121,0)" fg:x="138" fg:w="8"/><text x="11.3880%" y="415.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="11.6223%" y="389" width="0.1614%" height="15" fill="rgb(234,173,33)" fg:x="144" fg:w="2"/><text x="11.8723%" y="399.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.7030%" y="373" width="0.0807%" height="15" fill="rgb(245,47,8)" fg:x="145" fg:w="1"/><text x="11.9530%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.7030%" y="357" width="0.0807%" height="15" fill="rgb(205,17,20)" fg:x="145" fg:w="1"/><text x="11.9530%" y="367.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.73%)</title><rect x="11.1380%" y="421" width="0.7264%" height="15" fill="rgb(232,151,16)" fg:x="138" fg:w="9"/><text x="11.3880%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.7837%" y="405" width="0.0807%" height="15" fill="rgb(208,30,32)" fg:x="146" fg:w="1"/><text x="12.0337%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.97%)</title><rect x="10.9766%" y="437" width="0.9685%" height="15" fill="rgb(254,26,3)" fg:x="136" fg:w="12"/><text x="11.2266%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.8644%" y="421" width="0.0807%" height="15" fill="rgb(240,177,30)" fg:x="147" fg:w="1"/><text x="12.1144%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (20 samples, 1.61%)</title><rect x="10.5730%" y="453" width="1.6142%" height="15" fill="rgb(248,76,44)" fg:x="131" fg:w="20"/><text x="10.8230%" y="463.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="11.9451%" y="437" width="0.2421%" height="15" fill="rgb(241,186,54)" fg:x="148" fg:w="3"/><text x="12.1951%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="11.9451%" y="421" width="0.2421%" height="15" fill="rgb(249,171,29)" fg:x="148" fg:w="3"/><text x="12.1951%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="11.9451%" y="405" width="0.2421%" height="15" fill="rgb(237,151,44)" fg:x="148" fg:w="3"/><text x="12.1951%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="12.0258%" y="389" width="0.1614%" height="15" fill="rgb(228,174,30)" fg:x="149" fg:w="2"/><text x="12.2758%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="12.0258%" y="373" width="0.1614%" height="15" fill="rgb(252,14,37)" fg:x="149" fg:w="2"/><text x="12.2758%" y="383.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="12.0258%" y="357" width="0.1614%" height="15" fill="rgb(207,111,40)" fg:x="149" fg:w="2"/><text x="12.2758%" y="367.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (25 samples, 2.02%)</title><rect x="10.3309%" y="469" width="2.0178%" height="15" fill="rgb(248,171,54)" fg:x="128" fg:w="25"/><text x="10.5809%" y="479.50">&lt;..</text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="12.1872%" y="453" width="0.1614%" height="15" fill="rgb(211,127,2)" fg:x="151" fg:w="2"/><text x="12.4372%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="12.2680%" y="437" width="0.0807%" height="15" fill="rgb(236,87,47)" fg:x="152" fg:w="1"/><text x="12.5180%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.2680%" y="421" width="0.0807%" height="15" fill="rgb(223,190,45)" fg:x="152" fg:w="1"/><text x="12.5180%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="12.2680%" y="405" width="0.0807%" height="15" fill="rgb(215,5,16)" fg:x="152" fg:w="1"/><text x="12.5180%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="12.2680%" y="389" width="0.0807%" height="15" fill="rgb(252,82,33)" fg:x="152" fg:w="1"/><text x="12.5180%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.2680%" y="373" width="0.0807%" height="15" fill="rgb(247,213,44)" fg:x="152" fg:w="1"/><text x="12.5180%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.3487%" y="437" width="0.0807%" height="15" fill="rgb(205,196,44)" fg:x="153" fg:w="1"/><text x="12.5987%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="12.3487%" y="469" width="0.3228%" height="15" fill="rgb(237,96,54)" fg:x="153" fg:w="4"/><text x="12.5987%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="12.3487%" y="453" width="0.3228%" height="15" fill="rgb(230,113,34)" fg:x="153" fg:w="4"/><text x="12.5987%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="12.4294%" y="437" width="0.2421%" height="15" fill="rgb(221,224,12)" fg:x="154" fg:w="3"/><text x="12.6794%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.5908%" y="421" width="0.0807%" height="15" fill="rgb(219,112,44)" fg:x="156" fg:w="1"/><text x="12.8408%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.7522%" y="421" width="0.0807%" height="15" fill="rgb(210,31,13)" fg:x="158" fg:w="1"/><text x="13.0022%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.8329%" y="421" width="0.0807%" height="15" fill="rgb(230,25,16)" fg:x="159" fg:w="1"/><text x="13.0829%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.8329%" y="405" width="0.0807%" height="15" fill="rgb(246,108,53)" fg:x="159" fg:w="1"/><text x="13.0829%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="13.0751%" y="373" width="0.1614%" height="15" fill="rgb(241,172,50)" fg:x="162" fg:w="2"/><text x="13.3251%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="13.0751%" y="357" width="0.1614%" height="15" fill="rgb(235,141,10)" fg:x="162" fg:w="2"/><text x="13.3251%" y="367.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="13.0751%" y="341" width="0.1614%" height="15" fill="rgb(220,174,43)" fg:x="162" fg:w="2"/><text x="13.3251%" y="351.50"></text></g><g><title>engine::session::Session::flush (47 samples, 3.79%)</title><rect x="9.6852%" y="581" width="3.7934%" height="15" fill="rgb(215,181,40)" fg:x="120" fg:w="47"/><text x="9.9352%" y="591.50">engi..</text></g><g><title>engine::session::Session::save_changes (45 samples, 3.63%)</title><rect x="9.8467%" y="565" width="3.6320%" height="15" fill="rgb(230,97,2)" fg:x="122" fg:w="45"/><text x="10.0967%" y="575.50">engi..</text></g><g><title>engine::session::state::State::close (43 samples, 3.47%)</title><rect x="10.0081%" y="549" width="3.4705%" height="15" fill="rgb(211,25,27)" fg:x="124" fg:w="43"/><text x="10.2581%" y="559.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (43 samples, 3.47%)</title><rect x="10.0081%" y="533" width="3.4705%" height="15" fill="rgb(230,87,26)" fg:x="124" fg:w="43"/><text x="10.2581%" y="543.50">eng..</text></g><g><title>core::iter::adapters::try_process (40 samples, 3.23%)</title><rect x="10.2502%" y="517" width="3.2284%" height="15" fill="rgb(227,160,17)" fg:x="127" fg:w="40"/><text x="10.5002%" y="527.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (40 samples, 3.23%)</title><rect x="10.2502%" y="501" width="3.2284%" height="15" fill="rgb(244,85,34)" fg:x="127" fg:w="40"/><text x="10.5002%" y="511.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (40 samples, 3.23%)</title><rect x="10.2502%" y="485" width="3.2284%" height="15" fill="rgb(207,70,0)" fg:x="127" fg:w="40"/><text x="10.5002%" y="495.50">eng..</text></g><g><title>kernel::model::any_entity_changes (10 samples, 0.81%)</title><rect x="12.6715%" y="469" width="0.8071%" height="15" fill="rgb(223,129,7)" fg:x="157" fg:w="10"/><text x="12.9215%" y="479.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (10 samples, 0.81%)</title><rect x="12.6715%" y="453" width="0.8071%" height="15" fill="rgb(246,105,7)" fg:x="157" fg:w="10"/><text x="12.9215%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.81%)</title><rect x="12.6715%" y="437" width="0.8071%" height="15" fill="rgb(215,154,42)" fg:x="157" fg:w="10"/><text x="12.9215%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.56%)</title><rect x="12.9136%" y="421" width="0.5650%" height="15" fill="rgb(220,215,30)" fg:x="160" fg:w="7"/><text x="13.1636%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="12.9944%" y="405" width="0.4843%" height="15" fill="rgb(228,81,51)" fg:x="161" fg:w="6"/><text x="13.2444%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="13.0751%" y="389" width="0.4036%" height="15" fill="rgb(247,71,54)" fg:x="162" fg:w="5"/><text x="13.3251%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="13.2365%" y="373" width="0.2421%" height="15" fill="rgb(234,176,34)" fg:x="164" fg:w="3"/><text x="13.4865%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="13.2365%" y="357" width="0.2421%" height="15" fill="rgb(241,103,54)" fg:x="164" fg:w="3"/><text x="13.4865%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="13.3979%" y="341" width="0.0807%" height="15" fill="rgb(228,22,34)" fg:x="166" fg:w="1"/><text x="13.6479%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="13.3979%" y="325" width="0.0807%" height="15" fill="rgb(241,179,48)" fg:x="166" fg:w="1"/><text x="13.6479%" y="335.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="13.3979%" y="309" width="0.0807%" height="15" fill="rgb(235,167,37)" fg:x="166" fg:w="1"/><text x="13.6479%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.3979%" y="293" width="0.0807%" height="15" fill="rgb(213,109,30)" fg:x="166" fg:w="1"/><text x="13.6479%" y="303.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="13.4786%" y="565" width="0.0807%" height="15" fill="rgb(222,172,16)" fg:x="167" fg:w="1"/><text x="13.7286%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.4786%" y="549" width="0.0807%" height="15" fill="rgb(233,192,5)" fg:x="167" fg:w="1"/><text x="13.7286%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.4786%" y="533" width="0.0807%" height="15" fill="rgb(247,189,41)" fg:x="167" fg:w="1"/><text x="13.7286%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.4786%" y="517" width="0.0807%" height="15" fill="rgb(218,134,47)" fg:x="167" fg:w="1"/><text x="13.7286%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.4786%" y="501" width="0.0807%" height="15" fill="rgb(216,29,3)" fg:x="167" fg:w="1"/><text x="13.7286%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.4786%" y="485" width="0.0807%" height="15" fill="rgb(246,140,12)" fg:x="167" fg:w="1"/><text x="13.7286%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.4786%" y="469" width="0.0807%" height="15" fill="rgb(230,136,11)" fg:x="167" fg:w="1"/><text x="13.7286%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.4786%" y="453" width="0.0807%" height="15" fill="rgb(247,22,47)" fg:x="167" fg:w="1"/><text x="13.7286%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.4786%" y="437" width="0.0807%" height="15" fill="rgb(218,84,22)" fg:x="167" fg:w="1"/><text x="13.7286%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.4786%" y="421" width="0.0807%" height="15" fill="rgb(216,87,39)" fg:x="167" fg:w="1"/><text x="13.7286%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.4786%" y="405" width="0.0807%" height="15" fill="rgb(221,178,8)" fg:x="167" fg:w="1"/><text x="13.7286%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.4786%" y="389" width="0.0807%" height="15" fill="rgb(230,42,11)" fg:x="167" fg:w="1"/><text x="13.7286%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.4786%" y="373" width="0.0807%" height="15" fill="rgb(237,229,4)" fg:x="167" fg:w="1"/><text x="13.7286%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="13.5593%" y="421" width="0.1614%" height="15" fill="rgb(222,31,33)" fg:x="168" fg:w="2"/><text x="13.8093%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="13.5593%" y="405" width="0.1614%" height="15" fill="rgb(210,17,39)" fg:x="168" fg:w="2"/><text x="13.8093%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="13.5593%" y="389" width="0.1614%" height="15" fill="rgb(244,93,20)" fg:x="168" fg:w="2"/><text x="13.8093%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="13.5593%" y="373" width="0.1614%" height="15" fill="rgb(210,40,47)" fg:x="168" fg:w="2"/><text x="13.8093%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="13.5593%" y="357" width="0.1614%" height="15" fill="rgb(239,211,47)" fg:x="168" fg:w="2"/><text x="13.8093%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.6400%" y="341" width="0.0807%" height="15" fill="rgb(251,223,49)" fg:x="169" fg:w="1"/><text x="13.8900%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.6400%" y="325" width="0.0807%" height="15" fill="rgb(221,149,5)" fg:x="169" fg:w="1"/><text x="13.8900%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.6400%" y="309" width="0.0807%" height="15" fill="rgb(219,224,51)" fg:x="169" fg:w="1"/><text x="13.8900%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.6400%" y="293" width="0.0807%" height="15" fill="rgb(223,7,8)" fg:x="169" fg:w="1"/><text x="13.8900%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.6400%" y="277" width="0.0807%" height="15" fill="rgb(241,217,22)" fg:x="169" fg:w="1"/><text x="13.8900%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.6400%" y="261" width="0.0807%" height="15" fill="rgb(248,209,0)" fg:x="169" fg:w="1"/><text x="13.8900%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.6400%" y="245" width="0.0807%" height="15" fill="rgb(217,205,4)" fg:x="169" fg:w="1"/><text x="13.8900%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="13.5593%" y="469" width="0.2421%" height="15" fill="rgb(228,124,39)" fg:x="168" fg:w="3"/><text x="13.8093%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="13.5593%" y="453" width="0.2421%" height="15" fill="rgb(250,116,42)" fg:x="168" fg:w="3"/><text x="13.8093%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="13.5593%" y="437" width="0.2421%" height="15" fill="rgb(223,202,9)" fg:x="168" fg:w="3"/><text x="13.8093%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.7207%" y="421" width="0.0807%" height="15" fill="rgb(242,222,40)" fg:x="170" fg:w="1"/><text x="13.9707%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (4 samples, 0.32%)</title><rect x="13.5593%" y="517" width="0.3228%" height="15" fill="rgb(229,99,46)" fg:x="168" fg:w="4"/><text x="13.8093%" y="527.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="13.5593%" y="501" width="0.3228%" height="15" fill="rgb(225,56,46)" fg:x="168" fg:w="4"/><text x="13.8093%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="13.5593%" y="485" width="0.3228%" height="15" fill="rgb(227,94,5)" fg:x="168" fg:w="4"/><text x="13.8093%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.8015%" y="469" width="0.0807%" height="15" fill="rgb(205,112,38)" fg:x="171" fg:w="1"/><text x="14.0515%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.8015%" y="453" width="0.0807%" height="15" fill="rgb(231,133,46)" fg:x="171" fg:w="1"/><text x="14.0515%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.8015%" y="437" width="0.0807%" height="15" fill="rgb(217,16,9)" fg:x="171" fg:w="1"/><text x="14.0515%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.8015%" y="421" width="0.0807%" height="15" fill="rgb(249,173,9)" fg:x="171" fg:w="1"/><text x="14.0515%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.8015%" y="405" width="0.0807%" height="15" fill="rgb(205,163,53)" fg:x="171" fg:w="1"/><text x="14.0515%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.8015%" y="389" width="0.0807%" height="15" fill="rgb(217,54,41)" fg:x="171" fg:w="1"/><text x="14.0515%" y="399.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity_ref::EntityRef&gt;::try_from (5 samples, 0.40%)</title><rect x="13.5593%" y="549" width="0.4036%" height="15" fill="rgb(228,216,12)" fg:x="168" fg:w="5"/><text x="13.8093%" y="559.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (5 samples, 0.40%)</title><rect x="13.5593%" y="533" width="0.4036%" height="15" fill="rgb(244,228,15)" fg:x="168" fg:w="5"/><text x="13.8093%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="13.8822%" y="517" width="0.0807%" height="15" fill="rgb(221,176,53)" fg:x="172" fg:w="1"/><text x="14.1322%" y="527.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="13.8822%" y="501" width="0.0807%" height="15" fill="rgb(205,94,34)" fg:x="172" fg:w="1"/><text x="14.1322%" y="511.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="13.9629%" y="549" width="0.0807%" height="15" fill="rgb(213,110,48)" fg:x="173" fg:w="1"/><text x="14.2129%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="13.9629%" y="533" width="0.0807%" height="15" fill="rgb(236,142,28)" fg:x="173" fg:w="1"/><text x="14.2129%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="14.2050%" y="485" width="0.0807%" height="15" fill="rgb(225,135,29)" fg:x="176" fg:w="1"/><text x="14.4550%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.2857%" y="453" width="0.0807%" height="15" fill="rgb(252,45,31)" fg:x="177" fg:w="1"/><text x="14.5357%" y="463.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="14.1243%" y="533" width="0.3228%" height="15" fill="rgb(211,187,50)" fg:x="175" fg:w="4"/><text x="14.3743%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="14.2050%" y="517" width="0.2421%" height="15" fill="rgb(229,109,7)" fg:x="176" fg:w="3"/><text x="14.4550%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="14.2050%" y="501" width="0.2421%" height="15" fill="rgb(251,131,51)" fg:x="176" fg:w="3"/><text x="14.4550%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="14.2857%" y="485" width="0.1614%" height="15" fill="rgb(251,180,35)" fg:x="177" fg:w="2"/><text x="14.5357%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.2857%" y="469" width="0.1614%" height="15" fill="rgb(211,46,32)" fg:x="177" fg:w="2"/><text x="14.5357%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.3664%" y="453" width="0.0807%" height="15" fill="rgb(248,123,17)" fg:x="178" fg:w="1"/><text x="14.6164%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.3664%" y="437" width="0.0807%" height="15" fill="rgb(227,141,18)" fg:x="178" fg:w="1"/><text x="14.6164%" y="447.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="14.3664%" y="421" width="0.0807%" height="15" fill="rgb(216,102,9)" fg:x="178" fg:w="1"/><text x="14.6164%" y="431.50"></text></g><g><title>plugins_core::build::Build::holding (13 samples, 1.05%)</title><rect x="13.4786%" y="581" width="1.0492%" height="15" fill="rgb(253,47,13)" fg:x="167" fg:w="13"/><text x="13.7286%" y="591.50"></text></g><g><title>plugins_core::tools::set_container (12 samples, 0.97%)</title><rect x="13.5593%" y="565" width="0.9685%" height="15" fill="rgb(226,93,23)" fg:x="168" fg:w="12"/><text x="13.8093%" y="575.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (6 samples, 0.48%)</title><rect x="14.0436%" y="549" width="0.4843%" height="15" fill="rgb(247,104,17)" fg:x="174" fg:w="6"/><text x="14.2936%" y="559.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity_ref::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="14.4471%" y="533" width="0.0807%" height="15" fill="rgb(233,203,26)" fg:x="179" fg:w="1"/><text x="14.6971%" y="543.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="14.4471%" y="517" width="0.0807%" height="15" fill="rgb(244,98,49)" fg:x="179" fg:w="1"/><text x="14.6971%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="14.4471%" y="501" width="0.0807%" height="15" fill="rgb(235,134,22)" fg:x="179" fg:w="1"/><text x="14.6971%" y="511.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="14.4471%" y="485" width="0.0807%" height="15" fill="rgb(221,70,32)" fg:x="179" fg:w="1"/><text x="14.6971%" y="495.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="14.4471%" y="469" width="0.0807%" height="15" fill="rgb(238,15,50)" fg:x="179" fg:w="1"/><text x="14.6971%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.4471%" y="453" width="0.0807%" height="15" fill="rgb(215,221,48)" fg:x="179" fg:w="1"/><text x="14.6971%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.4471%" y="437" width="0.0807%" height="15" fill="rgb(236,73,3)" fg:x="179" fg:w="1"/><text x="14.6971%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="14.4471%" y="421" width="0.0807%" height="15" fill="rgb(250,107,11)" fg:x="179" fg:w="1"/><text x="14.6971%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.4471%" y="405" width="0.0807%" height="15" fill="rgb(242,39,14)" fg:x="179" fg:w="1"/><text x="14.6971%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="14.4471%" y="389" width="0.0807%" height="15" fill="rgb(248,164,37)" fg:x="179" fg:w="1"/><text x="14.6971%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="14.5278%" y="549" width="0.0807%" height="15" fill="rgb(217,60,12)" fg:x="180" fg:w="1"/><text x="14.7778%" y="559.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="14.5278%" y="533" width="0.0807%" height="15" fill="rgb(240,125,29)" fg:x="180" fg:w="1"/><text x="14.7778%" y="543.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="14.5278%" y="517" width="0.0807%" height="15" fill="rgb(208,207,28)" fg:x="180" fg:w="1"/><text x="14.7778%" y="527.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="14.5278%" y="501" width="0.0807%" height="15" fill="rgb(209,159,27)" fg:x="180" fg:w="1"/><text x="14.7778%" y="511.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="14.5278%" y="485" width="0.0807%" height="15" fill="rgb(251,176,53)" fg:x="180" fg:w="1"/><text x="14.7778%" y="495.50"></text></g><g><title>plugins_core::build::Build::new (2 samples, 0.16%)</title><rect x="14.5278%" y="581" width="0.1614%" height="15" fill="rgb(211,85,7)" fg:x="180" fg:w="2"/><text x="14.7778%" y="591.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="14.5278%" y="565" width="0.1614%" height="15" fill="rgb(216,64,54)" fg:x="180" fg:w="2"/><text x="14.7778%" y="575.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="14.6086%" y="549" width="0.0807%" height="15" fill="rgb(217,54,24)" fg:x="181" fg:w="1"/><text x="14.8586%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="14.6086%" y="533" width="0.0807%" height="15" fill="rgb(208,206,53)" fg:x="181" fg:w="1"/><text x="14.8586%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="14.6086%" y="517" width="0.0807%" height="15" fill="rgb(251,74,39)" fg:x="181" fg:w="1"/><text x="14.8586%" y="527.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="14.7700%" y="533" width="0.1614%" height="15" fill="rgb(226,47,5)" fg:x="183" fg:w="2"/><text x="15.0200%" y="543.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="14.8507%" y="517" width="0.0807%" height="15" fill="rgb(234,111,33)" fg:x="184" fg:w="1"/><text x="15.1007%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.8507%" y="501" width="0.0807%" height="15" fill="rgb(251,14,10)" fg:x="184" fg:w="1"/><text x="15.1007%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.8507%" y="485" width="0.0807%" height="15" fill="rgb(232,43,0)" fg:x="184" fg:w="1"/><text x="15.1007%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="14.8507%" y="469" width="0.0807%" height="15" fill="rgb(222,68,43)" fg:x="184" fg:w="1"/><text x="15.1007%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.8507%" y="453" width="0.0807%" height="15" fill="rgb(217,24,23)" fg:x="184" fg:w="1"/><text x="15.1007%" y="463.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="14.9314%" y="533" width="0.2421%" height="15" fill="rgb(229,209,14)" fg:x="185" fg:w="3"/><text x="15.1814%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="14.9314%" y="517" width="0.2421%" height="15" fill="rgb(250,149,48)" fg:x="185" fg:w="3"/><text x="15.1814%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="14.9314%" y="501" width="0.2421%" height="15" fill="rgb(210,120,37)" fg:x="185" fg:w="3"/><text x="15.1814%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="15.0121%" y="485" width="0.1614%" height="15" fill="rgb(210,21,8)" fg:x="186" fg:w="2"/><text x="15.2621%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="15.0121%" y="469" width="0.1614%" height="15" fill="rgb(243,145,7)" fg:x="186" fg:w="2"/><text x="15.2621%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="15.0121%" y="453" width="0.1614%" height="15" fill="rgb(238,178,32)" fg:x="186" fg:w="2"/><text x="15.2621%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="15.0121%" y="437" width="0.1614%" height="15" fill="rgb(222,4,10)" fg:x="186" fg:w="2"/><text x="15.2621%" y="447.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="15.0121%" y="421" width="0.1614%" height="15" fill="rgb(239,7,37)" fg:x="186" fg:w="2"/><text x="15.2621%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="15.0121%" y="405" width="0.1614%" height="15" fill="rgb(215,31,37)" fg:x="186" fg:w="2"/><text x="15.2621%" y="415.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="15.0121%" y="389" width="0.1614%" height="15" fill="rgb(224,83,33)" fg:x="186" fg:w="2"/><text x="15.2621%" y="399.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="15.0121%" y="373" width="0.1614%" height="15" fill="rgb(239,55,3)" fg:x="186" fg:w="2"/><text x="15.2621%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="15.1735%" y="501" width="0.0807%" height="15" fill="rgb(247,92,11)" fg:x="188" fg:w="1"/><text x="15.4235%" y="511.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="15.1735%" y="485" width="0.0807%" height="15" fill="rgb(239,200,7)" fg:x="188" fg:w="1"/><text x="15.4235%" y="495.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="15.1735%" y="469" width="0.0807%" height="15" fill="rgb(227,115,8)" fg:x="188" fg:w="1"/><text x="15.4235%" y="479.50"></text></g><g><title>plugins_core::build::Build::into_entry (8 samples, 0.65%)</title><rect x="14.6893%" y="565" width="0.6457%" height="15" fill="rgb(215,189,27)" fg:x="182" fg:w="8"/><text x="14.9393%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.56%)</title><rect x="14.7700%" y="549" width="0.5650%" height="15" fill="rgb(251,216,39)" fg:x="183" fg:w="7"/><text x="15.0200%" y="559.50"></text></g><g><title>kernel::model::entry::EntryResolver::world (2 samples, 0.16%)</title><rect x="15.1735%" y="533" width="0.1614%" height="15" fill="rgb(207,29,47)" fg:x="188" fg:w="2"/><text x="15.4235%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="15.1735%" y="517" width="0.1614%" height="15" fill="rgb(210,71,34)" fg:x="188" fg:w="2"/><text x="15.4235%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="15.2542%" y="501" width="0.0807%" height="15" fill="rgb(253,217,51)" fg:x="189" fg:w="1"/><text x="15.5042%" y="511.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="15.2542%" y="485" width="0.0807%" height="15" fill="rgb(222,117,46)" fg:x="189" fg:w="1"/><text x="15.5042%" y="495.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="15.2542%" y="469" width="0.0807%" height="15" fill="rgb(226,132,6)" fg:x="189" fg:w="1"/><text x="15.5042%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.2542%" y="453" width="0.0807%" height="15" fill="rgb(254,145,51)" fg:x="189" fg:w="1"/><text x="15.5042%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.2542%" y="437" width="0.0807%" height="15" fill="rgb(231,199,27)" fg:x="189" fg:w="1"/><text x="15.5042%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="15.2542%" y="421" width="0.0807%" height="15" fill="rgb(245,158,14)" fg:x="189" fg:w="1"/><text x="15.5042%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.2542%" y="405" width="0.0807%" height="15" fill="rgb(240,113,14)" fg:x="189" fg:w="1"/><text x="15.5042%" y="415.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="15.3349%" y="549" width="0.0807%" height="15" fill="rgb(210,20,13)" fg:x="190" fg:w="1"/><text x="15.5849%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="15.3349%" y="533" width="0.0807%" height="15" fill="rgb(241,144,13)" fg:x="190" fg:w="1"/><text x="15.5849%" y="543.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity_ref::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="15.4157%" y="549" width="0.0807%" height="15" fill="rgb(235,43,34)" fg:x="191" fg:w="1"/><text x="15.6657%" y="559.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="15.4157%" y="533" width="0.0807%" height="15" fill="rgb(208,36,20)" fg:x="191" fg:w="1"/><text x="15.6657%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="15.4157%" y="517" width="0.0807%" height="15" fill="rgb(239,204,10)" fg:x="191" fg:w="1"/><text x="15.6657%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="15.4157%" y="501" width="0.0807%" height="15" fill="rgb(217,84,43)" fg:x="191" fg:w="1"/><text x="15.6657%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="15.4157%" y="485" width="0.0807%" height="15" fill="rgb(241,170,50)" fg:x="191" fg:w="1"/><text x="15.6657%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.4157%" y="469" width="0.0807%" height="15" fill="rgb(226,205,29)" fg:x="191" fg:w="1"/><text x="15.6657%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.4157%" y="453" width="0.0807%" height="15" fill="rgb(233,113,1)" fg:x="191" fg:w="1"/><text x="15.6657%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.4157%" y="437" width="0.0807%" height="15" fill="rgb(253,98,13)" fg:x="191" fg:w="1"/><text x="15.6657%" y="447.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="15.4964%" y="549" width="0.2421%" height="15" fill="rgb(211,115,12)" fg:x="192" fg:w="3"/><text x="15.7464%" y="559.50"></text></g><g><title>serde_json::value::to_value (3 samples, 0.24%)</title><rect x="15.4964%" y="533" width="0.2421%" height="15" fill="rgb(208,12,16)" fg:x="192" fg:w="3"/><text x="15.7464%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="15.4964%" y="517" width="0.2421%" height="15" fill="rgb(237,193,54)" fg:x="192" fg:w="3"/><text x="15.7464%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="15.5771%" y="501" width="0.1614%" height="15" fill="rgb(243,22,42)" fg:x="193" fg:w="2"/><text x="15.8271%" y="511.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (2 samples, 0.16%)</title><rect x="15.5771%" y="485" width="0.1614%" height="15" fill="rgb(233,151,36)" fg:x="193" fg:w="2"/><text x="15.8271%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="15.5771%" y="469" width="0.1614%" height="15" fill="rgb(237,57,45)" fg:x="193" fg:w="2"/><text x="15.8271%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.6578%" y="453" width="0.0807%" height="15" fill="rgb(221,88,17)" fg:x="194" fg:w="1"/><text x="15.9078%" y="463.50"></text></g><g><title>plugins_core::build::Build::occupying (14 samples, 1.13%)</title><rect x="14.6893%" y="581" width="1.1299%" height="15" fill="rgb(230,79,15)" fg:x="182" fg:w="14"/><text x="14.9393%" y="591.50"></text></g><g><title>plugins_core::tools::set_occupying (6 samples, 0.48%)</title><rect x="15.3349%" y="565" width="0.4843%" height="15" fill="rgb(213,57,13)" fg:x="190" fg:w="6"/><text x="15.5849%" y="575.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (1 samples, 0.08%)</title><rect x="15.7385%" y="549" width="0.0807%" height="15" fill="rgb(222,116,39)" fg:x="195" fg:w="1"/><text x="15.9885%" y="559.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity_ref::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="15.7385%" y="533" width="0.0807%" height="15" fill="rgb(245,107,2)" fg:x="195" fg:w="1"/><text x="15.9885%" y="543.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="15.7385%" y="517" width="0.0807%" height="15" fill="rgb(238,1,10)" fg:x="195" fg:w="1"/><text x="15.9885%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="15.7385%" y="501" width="0.0807%" height="15" fill="rgb(249,4,48)" fg:x="195" fg:w="1"/><text x="15.9885%" y="511.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="15.7385%" y="485" width="0.0807%" height="15" fill="rgb(223,151,18)" fg:x="195" fg:w="1"/><text x="15.9885%" y="495.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="15.7385%" y="469" width="0.0807%" height="15" fill="rgb(227,65,43)" fg:x="195" fg:w="1"/><text x="15.9885%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.7385%" y="453" width="0.0807%" height="15" fill="rgb(218,40,45)" fg:x="195" fg:w="1"/><text x="15.9885%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.7385%" y="437" width="0.0807%" height="15" fill="rgb(252,121,31)" fg:x="195" fg:w="1"/><text x="15.9885%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="15.7385%" y="421" width="0.0807%" height="15" fill="rgb(219,158,43)" fg:x="195" fg:w="1"/><text x="15.9885%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.7385%" y="405" width="0.0807%" height="15" fill="rgb(231,162,42)" fg:x="195" fg:w="1"/><text x="15.9885%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="15.7385%" y="389" width="0.0807%" height="15" fill="rgb(217,179,25)" fg:x="195" fg:w="1"/><text x="15.9885%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="15.8192%" y="501" width="0.0807%" height="15" fill="rgb(206,212,31)" fg:x="196" fg:w="1"/><text x="16.0692%" y="511.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="15.8192%" y="485" width="0.0807%" height="15" fill="rgb(235,144,12)" fg:x="196" fg:w="1"/><text x="16.0692%" y="495.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="15.8192%" y="469" width="0.0807%" height="15" fill="rgb(213,51,10)" fg:x="196" fg:w="1"/><text x="16.0692%" y="479.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (91 samples, 7.34%)</title><rect x="8.6360%" y="597" width="7.3446%" height="15" fill="rgb(231,145,14)" fg:x="107" fg:w="91"/><text x="8.8860%" y="607.50">plugins_co..</text></g><g><title>plugins_core::build::Build::wearing (2 samples, 0.16%)</title><rect x="15.8192%" y="581" width="0.1614%" height="15" fill="rgb(235,15,28)" fg:x="196" fg:w="2"/><text x="16.0692%" y="591.50"></text></g><g><title>plugins_core::build::Build::into_entry (2 samples, 0.16%)</title><rect x="15.8192%" y="565" width="0.1614%" height="15" fill="rgb(237,206,10)" fg:x="196" fg:w="2"/><text x="16.0692%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="15.8192%" y="549" width="0.1614%" height="15" fill="rgb(236,227,27)" fg:x="196" fg:w="2"/><text x="16.0692%" y="559.50"></text></g><g><title>kernel::model::entry::EntryResolver::world (2 samples, 0.16%)</title><rect x="15.8192%" y="533" width="0.1614%" height="15" fill="rgb(246,83,35)" fg:x="196" fg:w="2"/><text x="16.0692%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="15.8192%" y="517" width="0.1614%" height="15" fill="rgb(220,136,24)" fg:x="196" fg:w="2"/><text x="16.0692%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="15.8999%" y="501" width="0.0807%" height="15" fill="rgb(217,3,25)" fg:x="197" fg:w="1"/><text x="16.1499%" y="511.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="15.9806%" y="597" width="0.0807%" height="15" fill="rgb(239,24,14)" fg:x="198" fg:w="1"/><text x="16.2306%" y="607.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="15.9806%" y="581" width="0.0807%" height="15" fill="rgb(244,16,53)" fg:x="198" fg:w="1"/><text x="16.2306%" y="591.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="15.9806%" y="565" width="0.0807%" height="15" fill="rgb(208,175,44)" fg:x="198" fg:w="1"/><text x="16.2306%" y="575.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="15.9806%" y="549" width="0.0807%" height="15" fill="rgb(252,18,48)" fg:x="198" fg:w="1"/><text x="16.2306%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.9806%" y="533" width="0.0807%" height="15" fill="rgb(234,199,32)" fg:x="198" fg:w="1"/><text x="16.2306%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="16.0613%" y="565" width="0.0807%" height="15" fill="rgb(225,77,54)" fg:x="199" fg:w="1"/><text x="16.3113%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="16.0613%" y="549" width="0.0807%" height="15" fill="rgb(225,42,25)" fg:x="199" fg:w="1"/><text x="16.3113%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="16.0613%" y="533" width="0.0807%" height="15" fill="rgb(242,227,46)" fg:x="199" fg:w="1"/><text x="16.3113%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.0613%" y="517" width="0.0807%" height="15" fill="rgb(246,197,35)" fg:x="199" fg:w="1"/><text x="16.3113%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.0613%" y="501" width="0.0807%" height="15" fill="rgb(215,159,26)" fg:x="199" fg:w="1"/><text x="16.3113%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.0613%" y="485" width="0.0807%" height="15" fill="rgb(212,194,50)" fg:x="199" fg:w="1"/><text x="16.3113%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.0613%" y="469" width="0.0807%" height="15" fill="rgb(246,132,1)" fg:x="199" fg:w="1"/><text x="16.3113%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.1421%" y="421" width="0.0807%" height="15" fill="rgb(217,71,7)" fg:x="200" fg:w="1"/><text x="16.3921%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="16.1421%" y="405" width="0.0807%" height="15" fill="rgb(252,59,32)" fg:x="200" fg:w="1"/><text x="16.3921%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="16.1421%" y="533" width="0.1614%" height="15" fill="rgb(253,204,25)" fg:x="200" fg:w="2"/><text x="16.3921%" y="543.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="16.1421%" y="517" width="0.1614%" height="15" fill="rgb(232,21,16)" fg:x="200" fg:w="2"/><text x="16.3921%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="16.1421%" y="501" width="0.1614%" height="15" fill="rgb(248,90,29)" fg:x="200" fg:w="2"/><text x="16.3921%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="16.1421%" y="485" width="0.1614%" height="15" fill="rgb(249,223,7)" fg:x="200" fg:w="2"/><text x="16.3921%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="16.1421%" y="469" width="0.1614%" height="15" fill="rgb(231,119,42)" fg:x="200" fg:w="2"/><text x="16.3921%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="16.1421%" y="453" width="0.1614%" height="15" fill="rgb(215,41,35)" fg:x="200" fg:w="2"/><text x="16.3921%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="16.1421%" y="437" width="0.1614%" height="15" fill="rgb(220,44,45)" fg:x="200" fg:w="2"/><text x="16.3921%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.2228%" y="421" width="0.0807%" height="15" fill="rgb(253,197,36)" fg:x="201" fg:w="1"/><text x="16.4728%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.2228%" y="405" width="0.0807%" height="15" fill="rgb(245,225,54)" fg:x="201" fg:w="1"/><text x="16.4728%" y="415.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="16.3035%" y="517" width="0.0807%" height="15" fill="rgb(239,94,37)" fg:x="202" fg:w="1"/><text x="16.5535%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="16.3035%" y="501" width="0.0807%" height="15" fill="rgb(242,217,10)" fg:x="202" fg:w="1"/><text x="16.5535%" y="511.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="16.3035%" y="485" width="0.0807%" height="15" fill="rgb(250,193,7)" fg:x="202" fg:w="1"/><text x="16.5535%" y="495.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="16.3035%" y="469" width="0.0807%" height="15" fill="rgb(230,104,19)" fg:x="202" fg:w="1"/><text x="16.5535%" y="479.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="16.3035%" y="533" width="0.1614%" height="15" fill="rgb(230,181,4)" fg:x="202" fg:w="2"/><text x="16.5535%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="16.3842%" y="517" width="0.0807%" height="15" fill="rgb(216,219,49)" fg:x="203" fg:w="1"/><text x="16.6342%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.3842%" y="501" width="0.0807%" height="15" fill="rgb(254,144,0)" fg:x="203" fg:w="1"/><text x="16.6342%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="16.3842%" y="485" width="0.0807%" height="15" fill="rgb(205,209,38)" fg:x="203" fg:w="1"/><text x="16.6342%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.3842%" y="469" width="0.0807%" height="15" fill="rgb(240,21,42)" fg:x="203" fg:w="1"/><text x="16.6342%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.3842%" y="453" width="0.0807%" height="15" fill="rgb(241,132,3)" fg:x="203" fg:w="1"/><text x="16.6342%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.5456%" y="485" width="0.0807%" height="15" fill="rgb(225,14,2)" fg:x="205" fg:w="1"/><text x="16.7956%" y="495.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="16.6263%" y="469" width="0.1614%" height="15" fill="rgb(210,141,35)" fg:x="206" fg:w="2"/><text x="16.8763%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="16.6263%" y="453" width="0.1614%" height="15" fill="rgb(251,14,44)" fg:x="206" fg:w="2"/><text x="16.8763%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="16.6263%" y="437" width="0.1614%" height="15" fill="rgb(247,48,18)" fg:x="206" fg:w="2"/><text x="16.8763%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="16.6263%" y="421" width="0.1614%" height="15" fill="rgb(225,0,40)" fg:x="206" fg:w="2"/><text x="16.8763%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="16.6263%" y="405" width="0.1614%" height="15" fill="rgb(221,31,33)" fg:x="206" fg:w="2"/><text x="16.8763%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.7070%" y="389" width="0.0807%" height="15" fill="rgb(237,42,40)" fg:x="207" fg:w="1"/><text x="16.9570%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.7070%" y="373" width="0.0807%" height="15" fill="rgb(233,51,29)" fg:x="207" fg:w="1"/><text x="16.9570%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.7070%" y="357" width="0.0807%" height="15" fill="rgb(226,58,20)" fg:x="207" fg:w="1"/><text x="16.9570%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.7070%" y="341" width="0.0807%" height="15" fill="rgb(208,98,7)" fg:x="207" fg:w="1"/><text x="16.9570%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (9 samples, 0.73%)</title><rect x="16.1421%" y="549" width="0.7264%" height="15" fill="rgb(228,143,44)" fg:x="200" fg:w="9"/><text x="16.3921%" y="559.50"></text></g><g><title>kernel::model::entry::EntryResolver::world (5 samples, 0.40%)</title><rect x="16.4649%" y="533" width="0.4036%" height="15" fill="rgb(246,55,38)" fg:x="204" fg:w="5"/><text x="16.7149%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::new (5 samples, 0.40%)</title><rect x="16.4649%" y="517" width="0.4036%" height="15" fill="rgb(247,87,16)" fg:x="204" fg:w="5"/><text x="16.7149%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="16.5456%" y="501" width="0.3228%" height="15" fill="rgb(234,129,42)" fg:x="205" fg:w="4"/><text x="16.7956%" y="511.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="16.6263%" y="485" width="0.2421%" height="15" fill="rgb(220,82,16)" fg:x="206" fg:w="3"/><text x="16.8763%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.7877%" y="469" width="0.0807%" height="15" fill="rgb(211,88,4)" fg:x="208" fg:w="1"/><text x="17.0377%" y="479.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (11 samples, 0.89%)</title><rect x="16.0613%" y="597" width="0.8878%" height="15" fill="rgb(248,151,21)" fg:x="199" fg:w="11"/><text x="16.3113%" y="607.50"></text></g><g><title>plugins_core::build::QuickThing::make (11 samples, 0.89%)</title><rect x="16.0613%" y="581" width="0.8878%" height="15" fill="rgb(238,163,6)" fg:x="199" fg:w="11"/><text x="16.3113%" y="591.50"></text></g><g><title>plugins_core::build::Build::into_entry (10 samples, 0.81%)</title><rect x="16.1421%" y="565" width="0.8071%" height="15" fill="rgb(209,183,11)" fg:x="200" fg:w="10"/><text x="16.3921%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="16.8684%" y="549" width="0.0807%" height="15" fill="rgb(219,37,20)" fg:x="209" fg:w="1"/><text x="17.1184%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="16.8684%" y="533" width="0.0807%" height="15" fill="rgb(210,158,4)" fg:x="209" fg:w="1"/><text x="17.1184%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="16.8684%" y="517" width="0.0807%" height="15" fill="rgb(221,167,53)" fg:x="209" fg:w="1"/><text x="17.1184%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.8684%" y="501" width="0.0807%" height="15" fill="rgb(237,151,45)" fg:x="209" fg:w="1"/><text x="17.1184%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.8684%" y="485" width="0.0807%" height="15" fill="rgb(231,39,3)" fg:x="209" fg:w="1"/><text x="17.1184%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="16.8684%" y="469" width="0.0807%" height="15" fill="rgb(212,167,28)" fg:x="209" fg:w="1"/><text x="17.1184%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.8684%" y="453" width="0.0807%" height="15" fill="rgb(232,178,8)" fg:x="209" fg:w="1"/><text x="17.1184%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="16.9492%" y="581" width="0.0807%" height="15" fill="rgb(225,151,20)" fg:x="210" fg:w="1"/><text x="17.1992%" y="591.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="16.9492%" y="565" width="0.0807%" height="15" fill="rgb(238,3,37)" fg:x="210" fg:w="1"/><text x="17.1992%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="16.9492%" y="549" width="0.0807%" height="15" fill="rgb(251,147,42)" fg:x="210" fg:w="1"/><text x="17.1992%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.9492%" y="533" width="0.0807%" height="15" fill="rgb(208,173,10)" fg:x="210" fg:w="1"/><text x="17.1992%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="16.9492%" y="517" width="0.0807%" height="15" fill="rgb(246,225,4)" fg:x="210" fg:w="1"/><text x="17.1992%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="16.9492%" y="501" width="0.0807%" height="15" fill="rgb(248,102,6)" fg:x="210" fg:w="1"/><text x="17.1992%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="17.0299%" y="549" width="0.0807%" height="15" fill="rgb(232,6,21)" fg:x="211" fg:w="1"/><text x="17.2799%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="17.0299%" y="533" width="0.0807%" height="15" fill="rgb(221,179,22)" fg:x="211" fg:w="1"/><text x="17.2799%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="17.0299%" y="517" width="0.0807%" height="15" fill="rgb(252,50,20)" fg:x="211" fg:w="1"/><text x="17.2799%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.0299%" y="501" width="0.0807%" height="15" fill="rgb(222,56,38)" fg:x="211" fg:w="1"/><text x="17.2799%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.0299%" y="485" width="0.0807%" height="15" fill="rgb(206,193,29)" fg:x="211" fg:w="1"/><text x="17.2799%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="17.0299%" y="469" width="0.0807%" height="15" fill="rgb(239,192,45)" fg:x="211" fg:w="1"/><text x="17.2799%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.0299%" y="453" width="0.0807%" height="15" fill="rgb(254,18,36)" fg:x="211" fg:w="1"/><text x="17.2799%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.0299%" y="437" width="0.0807%" height="15" fill="rgb(221,127,11)" fg:x="211" fg:w="1"/><text x="17.2799%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.0299%" y="421" width="0.0807%" height="15" fill="rgb(234,146,35)" fg:x="211" fg:w="1"/><text x="17.2799%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.0299%" y="405" width="0.0807%" height="15" fill="rgb(254,201,37)" fg:x="211" fg:w="1"/><text x="17.2799%" y="415.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="17.1106%" y="533" width="0.0807%" height="15" fill="rgb(211,202,23)" fg:x="212" fg:w="1"/><text x="17.3606%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="17.1106%" y="517" width="0.0807%" height="15" fill="rgb(237,91,2)" fg:x="212" fg:w="1"/><text x="17.3606%" y="527.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="17.1106%" y="501" width="0.0807%" height="15" fill="rgb(226,228,36)" fg:x="212" fg:w="1"/><text x="17.3606%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="17.1106%" y="485" width="0.0807%" height="15" fill="rgb(213,63,50)" fg:x="212" fg:w="1"/><text x="17.3606%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.1106%" y="469" width="0.0807%" height="15" fill="rgb(235,194,19)" fg:x="212" fg:w="1"/><text x="17.3606%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.1913%" y="501" width="0.0807%" height="15" fill="rgb(207,204,18)" fg:x="213" fg:w="1"/><text x="17.4413%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.1913%" y="485" width="0.0807%" height="15" fill="rgb(248,8,7)" fg:x="213" fg:w="1"/><text x="17.4413%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.1913%" y="469" width="0.0807%" height="15" fill="rgb(223,145,47)" fg:x="213" fg:w="1"/><text x="17.4413%" y="479.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="17.1106%" y="549" width="0.2421%" height="15" fill="rgb(228,84,11)" fg:x="212" fg:w="3"/><text x="17.3606%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="17.1913%" y="533" width="0.1614%" height="15" fill="rgb(218,76,45)" fg:x="213" fg:w="2"/><text x="17.4413%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="17.1913%" y="517" width="0.1614%" height="15" fill="rgb(223,80,15)" fg:x="213" fg:w="2"/><text x="17.4413%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="17.2720%" y="501" width="0.0807%" height="15" fill="rgb(219,218,33)" fg:x="214" fg:w="1"/><text x="17.5220%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="17.2720%" y="485" width="0.0807%" height="15" fill="rgb(208,51,11)" fg:x="214" fg:w="1"/><text x="17.5220%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="17.2720%" y="469" width="0.0807%" height="15" fill="rgb(229,165,39)" fg:x="214" fg:w="1"/><text x="17.5220%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="17.2720%" y="453" width="0.0807%" height="15" fill="rgb(241,100,24)" fg:x="214" fg:w="1"/><text x="17.5220%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="17.2720%" y="437" width="0.0807%" height="15" fill="rgb(228,14,23)" fg:x="214" fg:w="1"/><text x="17.5220%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="17.2720%" y="421" width="0.0807%" height="15" fill="rgb(247,116,52)" fg:x="214" fg:w="1"/><text x="17.5220%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="17.2720%" y="405" width="0.0807%" height="15" fill="rgb(216,149,33)" fg:x="214" fg:w="1"/><text x="17.5220%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="17.3527%" y="533" width="0.0807%" height="15" fill="rgb(238,142,29)" fg:x="215" fg:w="1"/><text x="17.6027%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="17.3527%" y="517" width="0.0807%" height="15" fill="rgb(224,83,40)" fg:x="215" fg:w="1"/><text x="17.6027%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="17.3527%" y="501" width="0.0807%" height="15" fill="rgb(234,165,11)" fg:x="215" fg:w="1"/><text x="17.6027%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.3527%" y="485" width="0.0807%" height="15" fill="rgb(215,96,23)" fg:x="215" fg:w="1"/><text x="17.6027%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.3527%" y="469" width="0.0807%" height="15" fill="rgb(233,179,26)" fg:x="215" fg:w="1"/><text x="17.6027%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="17.3527%" y="453" width="0.0807%" height="15" fill="rgb(225,129,33)" fg:x="215" fg:w="1"/><text x="17.6027%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.3527%" y="437" width="0.0807%" height="15" fill="rgb(237,49,13)" fg:x="215" fg:w="1"/><text x="17.6027%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.3527%" y="421" width="0.0807%" height="15" fill="rgb(211,3,31)" fg:x="215" fg:w="1"/><text x="17.6027%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.3527%" y="405" width="0.0807%" height="15" fill="rgb(216,152,19)" fg:x="215" fg:w="1"/><text x="17.6027%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.3527%" y="389" width="0.0807%" height="15" fill="rgb(251,121,35)" fg:x="215" fg:w="1"/><text x="17.6027%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="17.4334%" y="533" width="0.0807%" height="15" fill="rgb(210,217,47)" fg:x="216" fg:w="1"/><text x="17.6834%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="17.4334%" y="517" width="0.0807%" height="15" fill="rgb(244,116,22)" fg:x="216" fg:w="1"/><text x="17.6834%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="17.4334%" y="501" width="0.0807%" height="15" fill="rgb(228,17,21)" fg:x="216" fg:w="1"/><text x="17.6834%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.4334%" y="485" width="0.0807%" height="15" fill="rgb(240,149,34)" fg:x="216" fg:w="1"/><text x="17.6834%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.4334%" y="469" width="0.0807%" height="15" fill="rgb(208,125,47)" fg:x="216" fg:w="1"/><text x="17.6834%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="17.4334%" y="453" width="0.0807%" height="15" fill="rgb(249,186,39)" fg:x="216" fg:w="1"/><text x="17.6834%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.4334%" y="437" width="0.0807%" height="15" fill="rgb(240,220,33)" fg:x="216" fg:w="1"/><text x="17.6834%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="17.4334%" y="421" width="0.0807%" height="15" fill="rgb(243,110,23)" fg:x="216" fg:w="1"/><text x="17.6834%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.56%)</title><rect x="17.0299%" y="565" width="0.5650%" height="15" fill="rgb(219,163,46)" fg:x="211" fg:w="7"/><text x="17.2799%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::new (3 samples, 0.24%)</title><rect x="17.3527%" y="549" width="0.2421%" height="15" fill="rgb(216,126,30)" fg:x="215" fg:w="3"/><text x="17.6027%" y="559.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="17.5141%" y="533" width="0.0807%" height="15" fill="rgb(208,139,11)" fg:x="217" fg:w="1"/><text x="17.7641%" y="543.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="17.5141%" y="517" width="0.0807%" height="15" fill="rgb(213,118,36)" fg:x="217" fg:w="1"/><text x="17.7641%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="17.5141%" y="501" width="0.0807%" height="15" fill="rgb(226,43,17)" fg:x="217" fg:w="1"/><text x="17.7641%" y="511.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="17.5141%" y="485" width="0.0807%" height="15" fill="rgb(254,217,4)" fg:x="217" fg:w="1"/><text x="17.7641%" y="495.50"></text></g><g><title>plugins_core::build::Build::into_entry (8 samples, 0.65%)</title><rect x="17.0299%" y="581" width="0.6457%" height="15" fill="rgb(210,134,47)" fg:x="211" fg:w="8"/><text x="17.2799%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="17.5948%" y="565" width="0.0807%" height="15" fill="rgb(237,24,49)" fg:x="218" fg:w="1"/><text x="17.8448%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="17.5948%" y="549" width="0.0807%" height="15" fill="rgb(251,39,46)" fg:x="218" fg:w="1"/><text x="17.8448%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="17.5948%" y="533" width="0.0807%" height="15" fill="rgb(251,220,3)" fg:x="218" fg:w="1"/><text x="17.8448%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.5948%" y="517" width="0.0807%" height="15" fill="rgb(228,105,12)" fg:x="218" fg:w="1"/><text x="17.8448%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.5948%" y="501" width="0.0807%" height="15" fill="rgb(215,196,1)" fg:x="218" fg:w="1"/><text x="17.8448%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="17.5948%" y="485" width="0.0807%" height="15" fill="rgb(214,33,39)" fg:x="218" fg:w="1"/><text x="17.8448%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.5948%" y="469" width="0.0807%" height="15" fill="rgb(220,19,52)" fg:x="218" fg:w="1"/><text x="17.8448%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.5948%" y="453" width="0.0807%" height="15" fill="rgb(221,78,38)" fg:x="218" fg:w="1"/><text x="17.8448%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.5948%" y="437" width="0.0807%" height="15" fill="rgb(253,30,16)" fg:x="218" fg:w="1"/><text x="17.8448%" y="447.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (177 samples, 14.29%)</title><rect x="3.4705%" y="613" width="14.2857%" height="15" fill="rgb(242,65,0)" fg:x="43" fg:w="177"/><text x="3.7205%" y="623.50">&lt;tests::HoldingKeyInVe..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (10 samples, 0.81%)</title><rect x="16.9492%" y="597" width="0.8071%" height="15" fill="rgb(235,201,12)" fg:x="210" fg:w="10"/><text x="17.1992%" y="607.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="17.6755%" y="581" width="0.0807%" height="15" fill="rgb(233,161,9)" fg:x="219" fg:w="1"/><text x="17.9255%" y="591.50"></text></g><g><title>kernel::model::builder::build_entity (1 samples, 0.08%)</title><rect x="17.6755%" y="565" width="0.0807%" height="15" fill="rgb(241,207,41)" fg:x="219" fg:w="1"/><text x="17.9255%" y="575.50"></text></g><g><title>kernel::model::builder::EntityBuilder::new (1 samples, 0.08%)</title><rect x="17.6755%" y="549" width="0.0807%" height="15" fill="rgb(212,69,46)" fg:x="219" fg:w="1"/><text x="17.9255%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.6755%" y="533" width="0.0807%" height="15" fill="rgb(239,69,45)" fg:x="219" fg:w="1"/><text x="17.9255%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="17.7563%" y="613" width="0.0807%" height="15" fill="rgb(242,117,48)" fg:x="220" fg:w="1"/><text x="18.0063%" y="623.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="17.7563%" y="597" width="0.0807%" height="15" fill="rgb(228,41,36)" fg:x="220" fg:w="1"/><text x="18.0063%" y="607.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="17.7563%" y="581" width="0.0807%" height="15" fill="rgb(212,3,32)" fg:x="220" fg:w="1"/><text x="18.0063%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="17.9177%" y="341" width="0.0807%" height="15" fill="rgb(233,41,49)" fg:x="222" fg:w="1"/><text x="18.1677%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="17.9177%" y="325" width="0.0807%" height="15" fill="rgb(252,170,49)" fg:x="222" fg:w="1"/><text x="18.1677%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="17.9177%" y="309" width="0.0807%" height="15" fill="rgb(229,53,26)" fg:x="222" fg:w="1"/><text x="18.1677%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="17.9177%" y="293" width="0.0807%" height="15" fill="rgb(217,157,12)" fg:x="222" fg:w="1"/><text x="18.1677%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="17.9177%" y="277" width="0.0807%" height="15" fill="rgb(227,17,9)" fg:x="222" fg:w="1"/><text x="18.1677%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="17.9177%" y="261" width="0.0807%" height="15" fill="rgb(218,84,12)" fg:x="222" fg:w="1"/><text x="18.1677%" y="271.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="17.9177%" y="245" width="0.0807%" height="15" fill="rgb(212,79,24)" fg:x="222" fg:w="1"/><text x="18.1677%" y="255.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="17.9177%" y="229" width="0.0807%" height="15" fill="rgb(217,222,37)" fg:x="222" fg:w="1"/><text x="18.1677%" y="239.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="17.9177%" y="597" width="0.1614%" height="15" fill="rgb(246,208,8)" fg:x="222" fg:w="2"/><text x="18.1677%" y="607.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="17.9177%" y="581" width="0.1614%" height="15" fill="rgb(244,133,10)" fg:x="222" fg:w="2"/><text x="18.1677%" y="591.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="17.9177%" y="565" width="0.1614%" height="15" fill="rgb(209,219,41)" fg:x="222" fg:w="2"/><text x="18.1677%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="17.9177%" y="549" width="0.1614%" height="15" fill="rgb(253,175,45)" fg:x="222" fg:w="2"/><text x="18.1677%" y="559.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="17.9177%" y="533" width="0.1614%" height="15" fill="rgb(235,100,37)" fg:x="222" fg:w="2"/><text x="18.1677%" y="543.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (2 samples, 0.16%)</title><rect x="17.9177%" y="517" width="0.1614%" height="15" fill="rgb(225,87,19)" fg:x="222" fg:w="2"/><text x="18.1677%" y="527.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (2 samples, 0.16%)</title><rect x="17.9177%" y="501" width="0.1614%" height="15" fill="rgb(217,152,17)" fg:x="222" fg:w="2"/><text x="18.1677%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="17.9177%" y="485" width="0.1614%" height="15" fill="rgb(235,72,13)" fg:x="222" fg:w="2"/><text x="18.1677%" y="495.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="17.9177%" y="469" width="0.1614%" height="15" fill="rgb(233,140,18)" fg:x="222" fg:w="2"/><text x="18.1677%" y="479.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="17.9177%" y="453" width="0.1614%" height="15" fill="rgb(207,212,28)" fg:x="222" fg:w="2"/><text x="18.1677%" y="463.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="17.9177%" y="437" width="0.1614%" height="15" fill="rgb(220,130,25)" fg:x="222" fg:w="2"/><text x="18.1677%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="17.9177%" y="421" width="0.1614%" height="15" fill="rgb(205,55,34)" fg:x="222" fg:w="2"/><text x="18.1677%" y="431.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.16%)</title><rect x="17.9177%" y="405" width="0.1614%" height="15" fill="rgb(237,54,35)" fg:x="222" fg:w="2"/><text x="18.1677%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.16%)</title><rect x="17.9177%" y="389" width="0.1614%" height="15" fill="rgb(208,67,23)" fg:x="222" fg:w="2"/><text x="18.1677%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="17.9177%" y="373" width="0.1614%" height="15" fill="rgb(206,207,50)" fg:x="222" fg:w="2"/><text x="18.1677%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.16%)</title><rect x="17.9177%" y="357" width="0.1614%" height="15" fill="rgb(213,211,42)" fg:x="222" fg:w="2"/><text x="18.1677%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="17.9984%" y="341" width="0.0807%" height="15" fill="rgb(252,197,50)" fg:x="223" fg:w="1"/><text x="18.2484%" y="351.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="18.2405%" y="501" width="0.0807%" height="15" fill="rgb(251,211,41)" fg:x="226" fg:w="1"/><text x="18.4905%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="18.2405%" y="485" width="0.0807%" height="15" fill="rgb(229,211,5)" fg:x="226" fg:w="1"/><text x="18.4905%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="18.2405%" y="469" width="0.0807%" height="15" fill="rgb(239,36,31)" fg:x="226" fg:w="1"/><text x="18.4905%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.2405%" y="453" width="0.0807%" height="15" fill="rgb(248,67,31)" fg:x="226" fg:w="1"/><text x="18.4905%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="18.4019%" y="485" width="0.0807%" height="15" fill="rgb(249,55,44)" fg:x="228" fg:w="1"/><text x="18.6519%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="18.4019%" y="469" width="0.0807%" height="15" fill="rgb(216,82,12)" fg:x="228" fg:w="1"/><text x="18.6519%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="18.4019%" y="453" width="0.0807%" height="15" fill="rgb(242,174,1)" fg:x="228" fg:w="1"/><text x="18.6519%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.4019%" y="437" width="0.0807%" height="15" fill="rgb(208,120,29)" fg:x="228" fg:w="1"/><text x="18.6519%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="18.4826%" y="485" width="0.1614%" height="15" fill="rgb(221,105,43)" fg:x="229" fg:w="2"/><text x="18.7326%" y="495.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="18.4826%" y="469" width="0.1614%" height="15" fill="rgb(234,124,22)" fg:x="229" fg:w="2"/><text x="18.7326%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="18.5634%" y="453" width="0.0807%" height="15" fill="rgb(212,23,30)" fg:x="230" fg:w="1"/><text x="18.8134%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="18.5634%" y="437" width="0.0807%" height="15" fill="rgb(219,122,53)" fg:x="230" fg:w="1"/><text x="18.8134%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="18.6441%" y="469" width="0.0807%" height="15" fill="rgb(248,84,24)" fg:x="231" fg:w="1"/><text x="18.8941%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="18.6441%" y="453" width="0.0807%" height="15" fill="rgb(245,115,18)" fg:x="231" fg:w="1"/><text x="18.8941%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="18.7248%" y="469" width="0.3228%" height="15" fill="rgb(227,176,51)" fg:x="232" fg:w="4"/><text x="18.9748%" y="479.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="18.7248%" y="453" width="0.3228%" height="15" fill="rgb(229,63,42)" fg:x="232" fg:w="4"/><text x="18.9748%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="18.8055%" y="437" width="0.2421%" height="15" fill="rgb(247,202,24)" fg:x="233" fg:w="3"/><text x="19.0555%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="18.8055%" y="421" width="0.2421%" height="15" fill="rgb(244,173,20)" fg:x="233" fg:w="3"/><text x="19.0555%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="18.8862%" y="405" width="0.1614%" height="15" fill="rgb(242,81,47)" fg:x="234" fg:w="2"/><text x="19.1362%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="18.8862%" y="389" width="0.1614%" height="15" fill="rgb(231,185,54)" fg:x="234" fg:w="2"/><text x="19.1362%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="18.9669%" y="373" width="0.0807%" height="15" fill="rgb(243,55,32)" fg:x="235" fg:w="1"/><text x="19.2169%" y="383.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="19.0476%" y="453" width="0.0807%" height="15" fill="rgb(208,167,19)" fg:x="236" fg:w="1"/><text x="19.2976%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="19.0476%" y="437" width="0.0807%" height="15" fill="rgb(231,72,35)" fg:x="236" fg:w="1"/><text x="19.2976%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="19.0476%" y="421" width="0.0807%" height="15" fill="rgb(250,173,51)" fg:x="236" fg:w="1"/><text x="19.2976%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="19.1283%" y="437" width="0.2421%" height="15" fill="rgb(209,5,22)" fg:x="237" fg:w="3"/><text x="19.3783%" y="447.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="19.1283%" y="421" width="0.2421%" height="15" fill="rgb(250,174,19)" fg:x="237" fg:w="3"/><text x="19.3783%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="19.2897%" y="405" width="0.0807%" height="15" fill="rgb(217,3,49)" fg:x="239" fg:w="1"/><text x="19.5397%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="19.2897%" y="389" width="0.0807%" height="15" fill="rgb(218,225,5)" fg:x="239" fg:w="1"/><text x="19.5397%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="19.1283%" y="453" width="0.3228%" height="15" fill="rgb(236,89,11)" fg:x="237" fg:w="4"/><text x="19.3783%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="19.3705%" y="437" width="0.0807%" height="15" fill="rgb(206,33,28)" fg:x="240" fg:w="1"/><text x="19.6205%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.89%)</title><rect x="18.6441%" y="485" width="0.8878%" height="15" fill="rgb(241,56,42)" fg:x="231" fg:w="11"/><text x="18.8941%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="19.0476%" y="469" width="0.4843%" height="15" fill="rgb(222,44,11)" fg:x="236" fg:w="6"/><text x="19.2976%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="19.4512%" y="453" width="0.0807%" height="15" fill="rgb(234,111,20)" fg:x="241" fg:w="1"/><text x="19.7012%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="19.4512%" y="437" width="0.0807%" height="15" fill="rgb(237,77,6)" fg:x="241" fg:w="1"/><text x="19.7012%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (19 samples, 1.53%)</title><rect x="18.3212%" y="501" width="1.5335%" height="15" fill="rgb(235,111,23)" fg:x="227" fg:w="19"/><text x="18.5712%" y="511.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="19.5319%" y="485" width="0.3228%" height="15" fill="rgb(251,135,29)" fg:x="242" fg:w="4"/><text x="19.7819%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="19.6126%" y="469" width="0.2421%" height="15" fill="rgb(217,57,1)" fg:x="243" fg:w="3"/><text x="19.8626%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="19.6126%" y="453" width="0.2421%" height="15" fill="rgb(249,119,31)" fg:x="243" fg:w="3"/><text x="19.8626%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="19.6126%" y="437" width="0.2421%" height="15" fill="rgb(233,164,33)" fg:x="243" fg:w="3"/><text x="19.8626%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="19.6126%" y="421" width="0.2421%" height="15" fill="rgb(250,217,43)" fg:x="243" fg:w="3"/><text x="19.8626%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="19.7740%" y="405" width="0.0807%" height="15" fill="rgb(232,154,50)" fg:x="245" fg:w="1"/><text x="20.0240%" y="415.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (22 samples, 1.78%)</title><rect x="18.2405%" y="517" width="1.7756%" height="15" fill="rgb(227,190,8)" fg:x="226" fg:w="22"/><text x="18.4905%" y="527.50">&lt;..</text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="19.8547%" y="501" width="0.1614%" height="15" fill="rgb(209,217,32)" fg:x="246" fg:w="2"/><text x="20.1047%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="19.8547%" y="485" width="0.1614%" height="15" fill="rgb(243,203,50)" fg:x="246" fg:w="2"/><text x="20.1047%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="19.8547%" y="469" width="0.1614%" height="15" fill="rgb(232,152,27)" fg:x="246" fg:w="2"/><text x="20.1047%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="19.8547%" y="453" width="0.1614%" height="15" fill="rgb(240,34,29)" fg:x="246" fg:w="2"/><text x="20.1047%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="19.8547%" y="437" width="0.1614%" height="15" fill="rgb(215,185,52)" fg:x="246" fg:w="2"/><text x="20.1047%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.9354%" y="421" width="0.0807%" height="15" fill="rgb(240,89,49)" fg:x="247" fg:w="1"/><text x="20.1854%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.0161%" y="453" width="0.0807%" height="15" fill="rgb(225,12,52)" fg:x="248" fg:w="1"/><text x="20.2661%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="20.0969%" y="453" width="0.0807%" height="15" fill="rgb(239,128,45)" fg:x="249" fg:w="1"/><text x="20.3469%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.1776%" y="437" width="0.0807%" height="15" fill="rgb(211,78,47)" fg:x="250" fg:w="1"/><text x="20.4276%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="20.2583%" y="437" width="0.0807%" height="15" fill="rgb(232,31,21)" fg:x="251" fg:w="1"/><text x="20.5083%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.3390%" y="405" width="0.0807%" height="15" fill="rgb(222,168,14)" fg:x="252" fg:w="1"/><text x="20.5890%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="20.0161%" y="517" width="0.4843%" height="15" fill="rgb(209,128,24)" fg:x="248" fg:w="6"/><text x="20.2661%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.48%)</title><rect x="20.0161%" y="501" width="0.4843%" height="15" fill="rgb(249,35,13)" fg:x="248" fg:w="6"/><text x="20.2661%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="20.0161%" y="485" width="0.4843%" height="15" fill="rgb(218,7,2)" fg:x="248" fg:w="6"/><text x="20.2661%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="20.0161%" y="469" width="0.4843%" height="15" fill="rgb(238,107,27)" fg:x="248" fg:w="6"/><text x="20.2661%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="20.1776%" y="453" width="0.3228%" height="15" fill="rgb(217,88,38)" fg:x="250" fg:w="4"/><text x="20.4276%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="20.3390%" y="437" width="0.1614%" height="15" fill="rgb(230,207,0)" fg:x="252" fg:w="2"/><text x="20.5890%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="20.3390%" y="421" width="0.1614%" height="15" fill="rgb(249,64,54)" fg:x="252" fg:w="2"/><text x="20.5890%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="20.4197%" y="405" width="0.0807%" height="15" fill="rgb(231,7,11)" fg:x="253" fg:w="1"/><text x="20.6697%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="20.5811%" y="453" width="0.1614%" height="15" fill="rgb(205,149,21)" fg:x="255" fg:w="2"/><text x="20.8311%" y="463.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="20.5811%" y="437" width="0.1614%" height="15" fill="rgb(215,126,34)" fg:x="255" fg:w="2"/><text x="20.8311%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.7425%" y="437" width="0.0807%" height="15" fill="rgb(241,132,45)" fg:x="257" fg:w="1"/><text x="20.9925%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="20.8232%" y="437" width="0.0807%" height="15" fill="rgb(252,69,32)" fg:x="258" fg:w="1"/><text x="21.0732%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="20.5811%" y="485" width="0.5650%" height="15" fill="rgb(232,204,19)" fg:x="255" fg:w="7"/><text x="20.8311%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.56%)</title><rect x="20.5811%" y="469" width="0.5650%" height="15" fill="rgb(249,15,47)" fg:x="255" fg:w="7"/><text x="20.8311%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="20.7425%" y="453" width="0.4036%" height="15" fill="rgb(209,227,23)" fg:x="257" fg:w="5"/><text x="20.9925%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="20.9040%" y="437" width="0.2421%" height="15" fill="rgb(248,92,24)" fg:x="259" fg:w="3"/><text x="21.1540%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="20.9847%" y="421" width="0.1614%" height="15" fill="rgb(247,59,2)" fg:x="260" fg:w="2"/><text x="21.2347%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="21.0654%" y="405" width="0.0807%" height="15" fill="rgb(221,30,5)" fg:x="261" fg:w="1"/><text x="21.3154%" y="415.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (10 samples, 0.81%)</title><rect x="20.5004%" y="501" width="0.8071%" height="15" fill="rgb(208,108,53)" fg:x="254" fg:w="10"/><text x="20.7504%" y="511.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="21.1461%" y="485" width="0.1614%" height="15" fill="rgb(211,183,26)" fg:x="262" fg:w="2"/><text x="21.3961%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="21.1461%" y="469" width="0.1614%" height="15" fill="rgb(232,132,4)" fg:x="262" fg:w="2"/><text x="21.3961%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="21.1461%" y="453" width="0.1614%" height="15" fill="rgb(253,128,37)" fg:x="262" fg:w="2"/><text x="21.3961%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="21.2268%" y="437" width="0.0807%" height="15" fill="rgb(221,58,24)" fg:x="263" fg:w="1"/><text x="21.4768%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="21.2268%" y="421" width="0.0807%" height="15" fill="rgb(230,54,45)" fg:x="263" fg:w="1"/><text x="21.4768%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="21.2268%" y="405" width="0.0807%" height="15" fill="rgb(254,21,18)" fg:x="263" fg:w="1"/><text x="21.4768%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="21.5496%" y="469" width="0.1614%" height="15" fill="rgb(221,108,0)" fg:x="267" fg:w="2"/><text x="21.7996%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.6303%" y="453" width="0.0807%" height="15" fill="rgb(206,95,1)" fg:x="268" fg:w="1"/><text x="21.8803%" y="463.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="21.7111%" y="469" width="0.0807%" height="15" fill="rgb(237,52,5)" fg:x="269" fg:w="1"/><text x="21.9611%" y="479.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (2 samples, 0.16%)</title><rect x="21.7918%" y="469" width="0.1614%" height="15" fill="rgb(218,150,34)" fg:x="270" fg:w="2"/><text x="22.0418%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="21.8725%" y="453" width="0.0807%" height="15" fill="rgb(235,194,28)" fg:x="271" fg:w="1"/><text x="22.1225%" y="463.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="21.9532%" y="469" width="0.0807%" height="15" fill="rgb(245,92,18)" fg:x="272" fg:w="1"/><text x="22.2032%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="21.9532%" y="453" width="0.0807%" height="15" fill="rgb(253,203,53)" fg:x="272" fg:w="1"/><text x="22.2032%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="22.1146%" y="437" width="0.0807%" height="15" fill="rgb(249,185,47)" fg:x="274" fg:w="1"/><text x="22.3646%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="22.2760%" y="421" width="0.1614%" height="15" fill="rgb(252,194,52)" fg:x="276" fg:w="2"/><text x="22.5260%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.3567%" y="405" width="0.0807%" height="15" fill="rgb(210,53,36)" fg:x="277" fg:w="1"/><text x="22.6067%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.3567%" y="389" width="0.0807%" height="15" fill="rgb(237,37,25)" fg:x="277" fg:w="1"/><text x="22.6067%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="22.5182%" y="389" width="0.4036%" height="15" fill="rgb(242,116,27)" fg:x="279" fg:w="5"/><text x="22.7682%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="22.6796%" y="373" width="0.2421%" height="15" fill="rgb(213,185,26)" fg:x="281" fg:w="3"/><text x="22.9296%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="22.6796%" y="357" width="0.2421%" height="15" fill="rgb(225,204,8)" fg:x="281" fg:w="3"/><text x="22.9296%" y="367.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="22.8410%" y="341" width="0.0807%" height="15" fill="rgb(254,111,37)" fg:x="283" fg:w="1"/><text x="23.0910%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_seq (8 samples, 0.65%)</title><rect x="22.4374%" y="421" width="0.6457%" height="15" fill="rgb(242,35,9)" fg:x="278" fg:w="8"/><text x="22.6874%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (8 samples, 0.65%)</title><rect x="22.4374%" y="405" width="0.6457%" height="15" fill="rgb(232,138,49)" fg:x="278" fg:w="8"/><text x="22.6874%" y="415.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="22.9217%" y="389" width="0.1614%" height="15" fill="rgb(247,56,4)" fg:x="284" fg:w="2"/><text x="23.1717%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="23.0831%" y="405" width="0.1614%" height="15" fill="rgb(226,179,17)" fg:x="286" fg:w="2"/><text x="23.3331%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="23.2446%" y="405" width="0.0807%" height="15" fill="rgb(216,163,45)" fg:x="288" fg:w="1"/><text x="23.4946%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4 samples, 0.32%)</title><rect x="23.3253%" y="389" width="0.3228%" height="15" fill="rgb(211,157,3)" fg:x="289" fg:w="4"/><text x="23.5753%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.5674%" y="373" width="0.0807%" height="15" fill="rgb(234,44,20)" fg:x="292" fg:w="1"/><text x="23.8174%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.5674%" y="357" width="0.0807%" height="15" fill="rgb(254,138,23)" fg:x="292" fg:w="1"/><text x="23.8174%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="23.8095%" y="373" width="0.0807%" height="15" fill="rgb(206,119,39)" fg:x="295" fg:w="1"/><text x="24.0595%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.9709%" y="357" width="0.0807%" height="15" fill="rgb(231,105,52)" fg:x="297" fg:w="1"/><text x="24.2209%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.9709%" y="341" width="0.0807%" height="15" fill="rgb(250,20,5)" fg:x="297" fg:w="1"/><text x="24.2209%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (13 samples, 1.05%)</title><rect x="23.3253%" y="405" width="1.0492%" height="15" fill="rgb(215,198,30)" fg:x="289" fg:w="13"/><text x="23.5753%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (9 samples, 0.73%)</title><rect x="23.6481%" y="389" width="0.7264%" height="15" fill="rgb(246,142,8)" fg:x="293" fg:w="9"/><text x="23.8981%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="23.8902%" y="373" width="0.4843%" height="15" fill="rgb(243,26,38)" fg:x="296" fg:w="6"/><text x="24.1402%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="24.0517%" y="357" width="0.3228%" height="15" fill="rgb(205,133,28)" fg:x="298" fg:w="4"/><text x="24.3017%" y="367.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="24.1324%" y="341" width="0.2421%" height="15" fill="rgb(212,34,0)" fg:x="299" fg:w="3"/><text x="24.3824%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (30 samples, 2.42%)</title><rect x="22.0339%" y="453" width="2.4213%" height="15" fill="rgb(251,226,22)" fg:x="273" fg:w="30"/><text x="22.2839%" y="463.50">&lt;s..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (28 samples, 2.26%)</title><rect x="22.1953%" y="437" width="2.2599%" height="15" fill="rgb(252,119,9)" fg:x="275" fg:w="28"/><text x="22.4453%" y="447.50">&lt;..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (17 samples, 1.37%)</title><rect x="23.0831%" y="421" width="1.3721%" height="15" fill="rgb(213,150,50)" fg:x="286" fg:w="17"/><text x="23.3331%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.3745%" y="405" width="0.0807%" height="15" fill="rgb(212,24,39)" fg:x="302" fg:w="1"/><text x="24.6245%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.4552%" y="453" width="0.0807%" height="15" fill="rgb(213,46,39)" fg:x="303" fg:w="1"/><text x="24.7052%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.6166%" y="421" width="0.0807%" height="15" fill="rgb(239,106,12)" fg:x="305" fg:w="1"/><text x="24.8666%" y="431.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (44 samples, 3.55%)</title><rect x="21.3075%" y="501" width="3.5513%" height="15" fill="rgb(249,229,21)" fg:x="264" fg:w="44"/><text x="21.5575%" y="511.50">kern..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (44 samples, 3.55%)</title><rect x="21.3075%" y="485" width="3.5513%" height="15" fill="rgb(212,158,3)" fg:x="264" fg:w="44"/><text x="21.5575%" y="495.50">&lt;ser..</text></g><g><title>serde::ser::Serializer::collect_map (35 samples, 2.82%)</title><rect x="22.0339%" y="469" width="2.8249%" height="15" fill="rgb(253,26,48)" fg:x="273" fg:w="35"/><text x="22.2839%" y="479.50">se..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4 samples, 0.32%)</title><rect x="24.5359%" y="453" width="0.3228%" height="15" fill="rgb(238,178,20)" fg:x="304" fg:w="4"/><text x="24.7859%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="24.6166%" y="437" width="0.2421%" height="15" fill="rgb(208,86,15)" fg:x="305" fg:w="3"/><text x="24.8666%" y="447.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="24.6973%" y="421" width="0.1614%" height="15" fill="rgb(239,42,53)" fg:x="306" fg:w="2"/><text x="24.9473%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="25.2623%" y="357" width="0.0807%" height="15" fill="rgb(245,226,8)" fg:x="313" fg:w="1"/><text x="25.5123%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="25.2623%" y="341" width="0.0807%" height="15" fill="rgb(216,176,32)" fg:x="313" fg:w="1"/><text x="25.5123%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="25.2623%" y="325" width="0.0807%" height="15" fill="rgb(231,186,21)" fg:x="313" fg:w="1"/><text x="25.5123%" y="335.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="25.4237%" y="293" width="0.0807%" height="15" fill="rgb(205,95,49)" fg:x="315" fg:w="1"/><text x="25.6737%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="25.4237%" y="309" width="0.1614%" height="15" fill="rgb(217,145,8)" fg:x="315" fg:w="2"/><text x="25.6737%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.5044%" y="293" width="0.0807%" height="15" fill="rgb(239,144,48)" fg:x="316" fg:w="1"/><text x="25.7544%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="25.4237%" y="341" width="0.2421%" height="15" fill="rgb(214,189,23)" fg:x="315" fg:w="3"/><text x="25.6737%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="25.4237%" y="325" width="0.2421%" height="15" fill="rgb(229,157,17)" fg:x="315" fg:w="3"/><text x="25.6737%" y="335.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="25.5851%" y="309" width="0.0807%" height="15" fill="rgb(230,5,48)" fg:x="317" fg:w="1"/><text x="25.8351%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.5851%" y="293" width="0.0807%" height="15" fill="rgb(224,156,48)" fg:x="317" fg:w="1"/><text x="25.8351%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="25.3430%" y="357" width="0.4036%" height="15" fill="rgb(223,14,29)" fg:x="314" fg:w="5"/><text x="25.5930%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.6659%" y="341" width="0.0807%" height="15" fill="rgb(229,96,36)" fg:x="318" fg:w="1"/><text x="25.9159%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.6659%" y="325" width="0.0807%" height="15" fill="rgb(231,102,53)" fg:x="318" fg:w="1"/><text x="25.9159%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.6659%" y="309" width="0.0807%" height="15" fill="rgb(210,77,38)" fg:x="318" fg:w="1"/><text x="25.9159%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.65%)</title><rect x="25.1816%" y="389" width="0.6457%" height="15" fill="rgb(235,131,6)" fg:x="312" fg:w="8"/><text x="25.4316%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="25.2623%" y="373" width="0.5650%" height="15" fill="rgb(252,55,38)" fg:x="313" fg:w="7"/><text x="25.5123%" y="383.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.08%)</title><rect x="25.7466%" y="357" width="0.0807%" height="15" fill="rgb(246,38,14)" fg:x="319" fg:w="1"/><text x="25.9966%" y="367.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_decimal (1 samples, 0.08%)</title><rect x="25.7466%" y="341" width="0.0807%" height="15" fill="rgb(242,27,5)" fg:x="319" fg:w="1"/><text x="25.9966%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.8273%" y="389" width="0.0807%" height="15" fill="rgb(228,65,35)" fg:x="320" fg:w="1"/><text x="26.0773%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.89%)</title><rect x="25.1009%" y="405" width="0.8878%" height="15" fill="rgb(245,93,11)" fg:x="311" fg:w="11"/><text x="25.3509%" y="415.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="25.9080%" y="389" width="0.0807%" height="15" fill="rgb(213,1,31)" fg:x="321" fg:w="1"/><text x="26.1580%" y="399.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="25.9080%" y="373" width="0.0807%" height="15" fill="rgb(237,205,14)" fg:x="321" fg:w="1"/><text x="26.1580%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (15 samples, 1.21%)</title><rect x="24.9395%" y="437" width="1.2107%" height="15" fill="rgb(232,118,45)" fg:x="309" fg:w="15"/><text x="25.1895%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (14 samples, 1.13%)</title><rect x="25.0202%" y="421" width="1.1299%" height="15" fill="rgb(218,5,6)" fg:x="310" fg:w="14"/><text x="25.2702%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="25.9887%" y="405" width="0.1614%" height="15" fill="rgb(251,87,51)" fg:x="322" fg:w="2"/><text x="26.2387%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.0694%" y="389" width="0.0807%" height="15" fill="rgb(207,225,20)" fg:x="323" fg:w="1"/><text x="26.3194%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.0694%" y="373" width="0.0807%" height="15" fill="rgb(222,78,54)" fg:x="323" fg:w="1"/><text x="26.3194%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="26.1501%" y="437" width="0.0807%" height="15" fill="rgb(232,85,16)" fg:x="324" fg:w="1"/><text x="26.4001%" y="447.50"></text></g><g><title>engine::session::state::State::close (102 samples, 8.23%)</title><rect x="18.0791%" y="597" width="8.2324%" height="15" fill="rgb(244,25,33)" fg:x="224" fg:w="102"/><text x="18.3291%" y="607.50">engine::ses..</text></g><g><title>engine::session::state::State::flush_entities (101 samples, 8.15%)</title><rect x="18.1598%" y="581" width="8.1517%" height="15" fill="rgb(233,24,36)" fg:x="225" fg:w="101"/><text x="18.4098%" y="591.50">engine::ses..</text></g><g><title>core::iter::adapters::try_process (101 samples, 8.15%)</title><rect x="18.1598%" y="565" width="8.1517%" height="15" fill="rgb(253,49,54)" fg:x="225" fg:w="101"/><text x="18.4098%" y="575.50">core::iter:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (101 samples, 8.15%)</title><rect x="18.1598%" y="549" width="8.1517%" height="15" fill="rgb(245,12,22)" fg:x="225" fg:w="101"/><text x="18.4098%" y="559.50">&lt;alloc::vec..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (100 samples, 8.07%)</title><rect x="18.2405%" y="533" width="8.0710%" height="15" fill="rgb(253,141,28)" fg:x="226" fg:w="100"/><text x="18.4905%" y="543.50">engine::ses..</text></g><g><title>kernel::model::any_entity_changes (72 samples, 5.81%)</title><rect x="20.5004%" y="517" width="5.8111%" height="15" fill="rgb(225,207,27)" fg:x="254" fg:w="72"/><text x="20.7504%" y="527.50">kernel:..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (18 samples, 1.45%)</title><rect x="24.8588%" y="501" width="1.4528%" height="15" fill="rgb(220,84,2)" fg:x="308" fg:w="18"/><text x="25.1088%" y="511.50"></text></g><g><title>serde_json::de::from_trait (18 samples, 1.45%)</title><rect x="24.8588%" y="485" width="1.4528%" height="15" fill="rgb(224,37,37)" fg:x="308" fg:w="18"/><text x="25.1088%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (18 samples, 1.45%)</title><rect x="24.8588%" y="469" width="1.4528%" height="15" fill="rgb(220,143,18)" fg:x="308" fg:w="18"/><text x="25.1088%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (18 samples, 1.45%)</title><rect x="24.8588%" y="453" width="1.4528%" height="15" fill="rgb(210,88,33)" fg:x="308" fg:w="18"/><text x="25.1088%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.2308%" y="437" width="0.0807%" height="15" fill="rgb(219,87,51)" fg:x="325" fg:w="1"/><text x="26.4808%" y="447.50"></text></g><g><title>engine::session::Session::close (106 samples, 8.56%)</title><rect x="17.8370%" y="613" width="8.5553%" height="15" fill="rgb(211,7,35)" fg:x="221" fg:w="106"/><text x="18.0870%" y="623.50">engine::sess..</text></g><g><title>kernel::plugins::SessionPlugins::stop (1 samples, 0.08%)</title><rect x="26.3115%" y="597" width="0.0807%" height="15" fill="rgb(232,77,2)" fg:x="326" fg:w="1"/><text x="26.5615%" y="607.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="26.4730%" y="453" width="0.0807%" height="15" fill="rgb(249,94,25)" fg:x="328" fg:w="1"/><text x="26.7230%" y="463.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="26.4730%" y="437" width="0.0807%" height="15" fill="rgb(215,112,2)" fg:x="328" fg:w="1"/><text x="26.7230%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="26.5537%" y="389" width="0.0807%" height="15" fill="rgb(226,115,48)" fg:x="329" fg:w="1"/><text x="26.8037%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="26.5537%" y="373" width="0.0807%" height="15" fill="rgb(249,196,10)" fg:x="329" fg:w="1"/><text x="26.8037%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="26.5537%" y="357" width="0.0807%" height="15" fill="rgb(237,109,14)" fg:x="329" fg:w="1"/><text x="26.8037%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="26.5537%" y="341" width="0.0807%" height="15" fill="rgb(217,103,53)" fg:x="329" fg:w="1"/><text x="26.8037%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="26.5537%" y="325" width="0.0807%" height="15" fill="rgb(244,137,9)" fg:x="329" fg:w="1"/><text x="26.8037%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="26.5537%" y="309" width="0.0807%" height="15" fill="rgb(227,201,3)" fg:x="329" fg:w="1"/><text x="26.8037%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="26.5537%" y="293" width="0.0807%" height="15" fill="rgb(243,94,6)" fg:x="329" fg:w="1"/><text x="26.8037%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="26.5537%" y="277" width="0.0807%" height="15" fill="rgb(235,118,5)" fg:x="329" fg:w="1"/><text x="26.8037%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="26.5537%" y="261" width="0.0807%" height="15" fill="rgb(247,10,30)" fg:x="329" fg:w="1"/><text x="26.8037%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="26.5537%" y="245" width="0.0807%" height="15" fill="rgb(205,26,28)" fg:x="329" fg:w="1"/><text x="26.8037%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="26.5537%" y="229" width="0.0807%" height="15" fill="rgb(206,99,35)" fg:x="329" fg:w="1"/><text x="26.8037%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="26.5537%" y="213" width="0.0807%" height="15" fill="rgb(238,130,40)" fg:x="329" fg:w="1"/><text x="26.8037%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="26.5537%" y="197" width="0.0807%" height="15" fill="rgb(224,126,31)" fg:x="329" fg:w="1"/><text x="26.8037%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="26.5537%" y="181" width="0.0807%" height="15" fill="rgb(254,105,17)" fg:x="329" fg:w="1"/><text x="26.8037%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.5537%" y="165" width="0.0807%" height="15" fill="rgb(216,87,36)" fg:x="329" fg:w="1"/><text x="26.8037%" y="175.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="26.5537%" y="437" width="0.1614%" height="15" fill="rgb(240,21,12)" fg:x="329" fg:w="2"/><text x="26.8037%" y="447.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="26.5537%" y="421" width="0.1614%" height="15" fill="rgb(245,192,34)" fg:x="329" fg:w="2"/><text x="26.8037%" y="431.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="26.5537%" y="405" width="0.1614%" height="15" fill="rgb(226,100,49)" fg:x="329" fg:w="2"/><text x="26.8037%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="26.6344%" y="389" width="0.0807%" height="15" fill="rgb(245,188,27)" fg:x="330" fg:w="1"/><text x="26.8844%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.6344%" y="373" width="0.0807%" height="15" fill="rgb(212,170,8)" fg:x="330" fg:w="1"/><text x="26.8844%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="26.6344%" y="357" width="0.0807%" height="15" fill="rgb(217,113,29)" fg:x="330" fg:w="1"/><text x="26.8844%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.6344%" y="341" width="0.0807%" height="15" fill="rgb(237,30,3)" fg:x="330" fg:w="1"/><text x="26.8844%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="26.6344%" y="325" width="0.0807%" height="15" fill="rgb(227,19,28)" fg:x="330" fg:w="1"/><text x="26.8844%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.6344%" y="309" width="0.0807%" height="15" fill="rgb(239,172,45)" fg:x="330" fg:w="1"/><text x="26.8844%" y="319.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="26.6344%" y="293" width="0.0807%" height="15" fill="rgb(254,55,39)" fg:x="330" fg:w="1"/><text x="26.8844%" y="303.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_location (4 samples, 0.32%)</title><rect x="26.4730%" y="501" width="0.3228%" height="15" fill="rgb(249,208,12)" fg:x="328" fg:w="4"/><text x="26.7230%" y="511.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntry&gt;::to_entry (4 samples, 0.32%)</title><rect x="26.4730%" y="485" width="0.3228%" height="15" fill="rgb(240,52,13)" fg:x="328" fg:w="4"/><text x="26.7230%" y="495.50"></text></g><g><title>kernel::model::entry::EntryResolver::entry (4 samples, 0.32%)</title><rect x="26.4730%" y="469" width="0.3228%" height="15" fill="rgb(252,149,13)" fg:x="328" fg:w="4"/><text x="26.7230%" y="479.50"></text></g><g><title>kernel::model::entry::Entry::new (3 samples, 0.24%)</title><rect x="26.5537%" y="453" width="0.2421%" height="15" fill="rgb(232,81,48)" fg:x="329" fg:w="3"/><text x="26.8037%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="26.7151%" y="437" width="0.0807%" height="15" fill="rgb(222,144,2)" fg:x="331" fg:w="1"/><text x="26.9651%" y="447.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="26.7151%" y="421" width="0.0807%" height="15" fill="rgb(216,81,32)" fg:x="331" fg:w="1"/><text x="26.9651%" y="431.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (5 samples, 0.40%)</title><rect x="26.4730%" y="517" width="0.4036%" height="15" fill="rgb(244,78,51)" fg:x="328" fg:w="5"/><text x="26.7230%" y="527.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="26.7958%" y="501" width="0.0807%" height="15" fill="rgb(217,66,21)" fg:x="332" fg:w="1"/><text x="27.0458%" y="511.50"></text></g><g><title>kernel::model::entry::EntryResolver::world (1 samples, 0.08%)</title><rect x="26.7958%" y="485" width="0.0807%" height="15" fill="rgb(247,101,42)" fg:x="332" fg:w="1"/><text x="27.0458%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="26.7958%" y="469" width="0.0807%" height="15" fill="rgb(227,81,39)" fg:x="332" fg:w="1"/><text x="27.0458%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="26.7958%" y="453" width="0.0807%" height="15" fill="rgb(220,223,44)" fg:x="332" fg:w="1"/><text x="27.0458%" y="463.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="26.7958%" y="437" width="0.0807%" height="15" fill="rgb(205,218,2)" fg:x="332" fg:w="1"/><text x="27.0458%" y="447.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="26.7958%" y="421" width="0.0807%" height="15" fill="rgb(212,207,28)" fg:x="332" fg:w="1"/><text x="27.0458%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="26.7958%" y="405" width="0.0807%" height="15" fill="rgb(224,12,41)" fg:x="332" fg:w="1"/><text x="27.0458%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="26.7958%" y="389" width="0.0807%" height="15" fill="rgb(216,118,12)" fg:x="332" fg:w="1"/><text x="27.0458%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="26.7958%" y="373" width="0.0807%" height="15" fill="rgb(252,97,46)" fg:x="332" fg:w="1"/><text x="27.0458%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="26.7958%" y="357" width="0.0807%" height="15" fill="rgb(244,206,19)" fg:x="332" fg:w="1"/><text x="27.0458%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="26.7958%" y="341" width="0.0807%" height="15" fill="rgb(231,84,31)" fg:x="332" fg:w="1"/><text x="27.0458%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="26.7958%" y="325" width="0.0807%" height="15" fill="rgb(244,133,0)" fg:x="332" fg:w="1"/><text x="27.0458%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="26.7958%" y="309" width="0.0807%" height="15" fill="rgb(223,15,50)" fg:x="332" fg:w="1"/><text x="27.0458%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="26.7958%" y="293" width="0.0807%" height="15" fill="rgb(250,118,49)" fg:x="332" fg:w="1"/><text x="27.0458%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="26.7958%" y="277" width="0.0807%" height="15" fill="rgb(248,25,38)" fg:x="332" fg:w="1"/><text x="27.0458%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="26.7958%" y="261" width="0.0807%" height="15" fill="rgb(215,70,14)" fg:x="332" fg:w="1"/><text x="27.0458%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="26.7958%" y="245" width="0.0807%" height="15" fill="rgb(215,28,15)" fg:x="332" fg:w="1"/><text x="27.0458%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="26.7958%" y="229" width="0.0807%" height="15" fill="rgb(243,6,28)" fg:x="332" fg:w="1"/><text x="27.0458%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="26.7958%" y="213" width="0.0807%" height="15" fill="rgb(222,130,1)" fg:x="332" fg:w="1"/><text x="27.0458%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="26.7958%" y="197" width="0.0807%" height="15" fill="rgb(236,166,44)" fg:x="332" fg:w="1"/><text x="27.0458%" y="207.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="26.7958%" y="181" width="0.0807%" height="15" fill="rgb(221,108,14)" fg:x="332" fg:w="1"/><text x="27.0458%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="26.7958%" y="165" width="0.0807%" height="15" fill="rgb(252,3,45)" fg:x="332" fg:w="1"/><text x="27.0458%" y="175.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="26.9572%" y="325" width="0.1614%" height="15" fill="rgb(237,68,30)" fg:x="334" fg:w="2"/><text x="27.2072%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="27.0379%" y="309" width="0.0807%" height="15" fill="rgb(211,79,22)" fg:x="335" fg:w="1"/><text x="27.2879%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.0379%" y="293" width="0.0807%" height="15" fill="rgb(252,185,21)" fg:x="335" fg:w="1"/><text x="27.2879%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.0379%" y="277" width="0.0807%" height="15" fill="rgb(225,189,26)" fg:x="335" fg:w="1"/><text x="27.2879%" y="287.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (4 samples, 0.32%)</title><rect x="26.8765%" y="389" width="0.3228%" height="15" fill="rgb(241,30,40)" fg:x="333" fg:w="4"/><text x="27.1265%" y="399.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (4 samples, 0.32%)</title><rect x="26.8765%" y="373" width="0.3228%" height="15" fill="rgb(235,215,44)" fg:x="333" fg:w="4"/><text x="27.1265%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (4 samples, 0.32%)</title><rect x="26.8765%" y="357" width="0.3228%" height="15" fill="rgb(205,8,29)" fg:x="333" fg:w="4"/><text x="27.1265%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="26.8765%" y="341" width="0.3228%" height="15" fill="rgb(241,137,42)" fg:x="333" fg:w="4"/><text x="27.1265%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="27.1186%" y="325" width="0.0807%" height="15" fill="rgb(237,155,2)" fg:x="336" fg:w="1"/><text x="27.3686%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="27.1186%" y="309" width="0.0807%" height="15" fill="rgb(245,29,42)" fg:x="336" fg:w="1"/><text x="27.3686%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="27.1186%" y="293" width="0.0807%" height="15" fill="rgb(234,101,35)" fg:x="336" fg:w="1"/><text x="27.3686%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.1186%" y="277" width="0.0807%" height="15" fill="rgb(228,64,37)" fg:x="336" fg:w="1"/><text x="27.3686%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="27.2801%" y="309" width="0.0807%" height="15" fill="rgb(217,214,36)" fg:x="338" fg:w="1"/><text x="27.5301%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.2801%" y="293" width="0.0807%" height="15" fill="rgb(243,70,3)" fg:x="338" fg:w="1"/><text x="27.5301%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="27.3608%" y="277" width="0.0807%" height="15" fill="rgb(253,158,52)" fg:x="339" fg:w="1"/><text x="27.6108%" y="287.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="27.1994%" y="357" width="0.3228%" height="15" fill="rgb(234,111,54)" fg:x="337" fg:w="4"/><text x="27.4494%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="27.1994%" y="341" width="0.3228%" height="15" fill="rgb(217,70,32)" fg:x="337" fg:w="4"/><text x="27.4494%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="27.1994%" y="325" width="0.3228%" height="15" fill="rgb(234,18,33)" fg:x="337" fg:w="4"/><text x="27.4494%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="27.3608%" y="309" width="0.1614%" height="15" fill="rgb(234,12,49)" fg:x="339" fg:w="2"/><text x="27.6108%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="27.3608%" y="293" width="0.1614%" height="15" fill="rgb(236,10,21)" fg:x="339" fg:w="2"/><text x="27.6108%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="27.4415%" y="277" width="0.0807%" height="15" fill="rgb(248,182,45)" fg:x="340" fg:w="1"/><text x="27.6915%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="27.4415%" y="261" width="0.0807%" height="15" fill="rgb(217,95,36)" fg:x="340" fg:w="1"/><text x="27.6915%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="27.7643%" y="245" width="0.0807%" height="15" fill="rgb(212,110,31)" fg:x="344" fg:w="1"/><text x="28.0143%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.7643%" y="229" width="0.0807%" height="15" fill="rgb(206,32,53)" fg:x="344" fg:w="1"/><text x="28.0143%" y="239.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (5 samples, 0.40%)</title><rect x="27.5222%" y="357" width="0.4036%" height="15" fill="rgb(246,141,37)" fg:x="341" fg:w="5"/><text x="27.7722%" y="367.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="27.6029%" y="341" width="0.3228%" height="15" fill="rgb(219,16,7)" fg:x="342" fg:w="4"/><text x="27.8529%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="27.6029%" y="325" width="0.3228%" height="15" fill="rgb(230,205,45)" fg:x="342" fg:w="4"/><text x="27.8529%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="27.6029%" y="309" width="0.3228%" height="15" fill="rgb(231,43,49)" fg:x="342" fg:w="4"/><text x="27.8529%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="27.6029%" y="293" width="0.3228%" height="15" fill="rgb(212,106,34)" fg:x="342" fg:w="4"/><text x="27.8529%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="27.6029%" y="277" width="0.3228%" height="15" fill="rgb(206,83,17)" fg:x="342" fg:w="4"/><text x="27.8529%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="27.6029%" y="261" width="0.3228%" height="15" fill="rgb(244,154,49)" fg:x="342" fg:w="4"/><text x="27.8529%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="27.8450%" y="245" width="0.0807%" height="15" fill="rgb(244,149,49)" fg:x="345" fg:w="1"/><text x="28.0950%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="27.8450%" y="229" width="0.0807%" height="15" fill="rgb(227,134,18)" fg:x="345" fg:w="1"/><text x="28.0950%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="27.8450%" y="213" width="0.0807%" height="15" fill="rgb(237,116,36)" fg:x="345" fg:w="1"/><text x="28.0950%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.8450%" y="197" width="0.0807%" height="15" fill="rgb(205,129,40)" fg:x="345" fg:w="1"/><text x="28.0950%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="27.9257%" y="261" width="0.1614%" height="15" fill="rgb(236,178,4)" fg:x="346" fg:w="2"/><text x="28.1757%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="27.9257%" y="245" width="0.1614%" height="15" fill="rgb(251,76,53)" fg:x="346" fg:w="2"/><text x="28.1757%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="27.9257%" y="229" width="0.1614%" height="15" fill="rgb(242,92,40)" fg:x="346" fg:w="2"/><text x="28.1757%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="27.9257%" y="213" width="0.1614%" height="15" fill="rgb(209,45,30)" fg:x="346" fg:w="2"/><text x="28.1757%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="27.9257%" y="197" width="0.1614%" height="15" fill="rgb(218,157,36)" fg:x="346" fg:w="2"/><text x="28.1757%" y="207.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="27.9257%" y="181" width="0.1614%" height="15" fill="rgb(222,186,16)" fg:x="346" fg:w="2"/><text x="28.1757%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="27.9257%" y="165" width="0.1614%" height="15" fill="rgb(254,72,35)" fg:x="346" fg:w="2"/><text x="28.1757%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="27.9257%" y="341" width="0.2421%" height="15" fill="rgb(224,25,35)" fg:x="346" fg:w="3"/><text x="28.1757%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="27.9257%" y="325" width="0.2421%" height="15" fill="rgb(206,135,52)" fg:x="346" fg:w="3"/><text x="28.1757%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.24%)</title><rect x="27.9257%" y="309" width="0.2421%" height="15" fill="rgb(229,174,47)" fg:x="346" fg:w="3"/><text x="28.1757%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.24%)</title><rect x="27.9257%" y="293" width="0.2421%" height="15" fill="rgb(242,184,21)" fg:x="346" fg:w="3"/><text x="28.1757%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.24%)</title><rect x="27.9257%" y="277" width="0.2421%" height="15" fill="rgb(213,22,45)" fg:x="346" fg:w="3"/><text x="28.1757%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="28.0872%" y="261" width="0.0807%" height="15" fill="rgb(237,81,54)" fg:x="348" fg:w="1"/><text x="28.3372%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="28.0872%" y="245" width="0.0807%" height="15" fill="rgb(248,177,18)" fg:x="348" fg:w="1"/><text x="28.3372%" y="255.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="28.1679%" y="341" width="0.1614%" height="15" fill="rgb(254,31,16)" fg:x="349" fg:w="2"/><text x="28.4179%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="28.6521%" y="293" width="0.2421%" height="15" fill="rgb(235,20,31)" fg:x="355" fg:w="3"/><text x="28.9021%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="28.6521%" y="277" width="0.2421%" height="15" fill="rgb(240,56,43)" fg:x="355" fg:w="3"/><text x="28.9021%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="28.7328%" y="261" width="0.1614%" height="15" fill="rgb(237,197,51)" fg:x="356" fg:w="2"/><text x="28.9828%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="28.7328%" y="245" width="0.1614%" height="15" fill="rgb(241,162,44)" fg:x="356" fg:w="2"/><text x="28.9828%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="28.7328%" y="229" width="0.1614%" height="15" fill="rgb(224,23,20)" fg:x="356" fg:w="2"/><text x="28.9828%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="28.7328%" y="213" width="0.1614%" height="15" fill="rgb(250,109,34)" fg:x="356" fg:w="2"/><text x="28.9828%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="28.7328%" y="197" width="0.1614%" height="15" fill="rgb(214,175,50)" fg:x="356" fg:w="2"/><text x="28.9828%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="28.7328%" y="181" width="0.1614%" height="15" fill="rgb(213,182,5)" fg:x="356" fg:w="2"/><text x="28.9828%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="28.7328%" y="165" width="0.1614%" height="15" fill="rgb(209,199,19)" fg:x="356" fg:w="2"/><text x="28.9828%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="28.7328%" y="149" width="0.1614%" height="15" fill="rgb(236,224,42)" fg:x="356" fg:w="2"/><text x="28.9828%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="28.7328%" y="133" width="0.1614%" height="15" fill="rgb(246,226,29)" fg:x="356" fg:w="2"/><text x="28.9828%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="28.7328%" y="117" width="0.1614%" height="15" fill="rgb(227,223,11)" fg:x="356" fg:w="2"/><text x="28.9828%" y="127.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="28.7328%" y="101" width="0.1614%" height="15" fill="rgb(219,7,51)" fg:x="356" fg:w="2"/><text x="28.9828%" y="111.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="28.7328%" y="85" width="0.1614%" height="15" fill="rgb(245,167,10)" fg:x="356" fg:w="2"/><text x="28.9828%" y="95.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.40%)</title><rect x="28.5714%" y="309" width="0.4036%" height="15" fill="rgb(237,224,16)" fg:x="354" fg:w="5"/><text x="28.8214%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="28.8943%" y="293" width="0.0807%" height="15" fill="rgb(226,132,13)" fg:x="358" fg:w="1"/><text x="29.1443%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="28.8943%" y="277" width="0.0807%" height="15" fill="rgb(214,140,3)" fg:x="358" fg:w="1"/><text x="29.1443%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="28.8943%" y="261" width="0.0807%" height="15" fill="rgb(221,177,4)" fg:x="358" fg:w="1"/><text x="29.1443%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="28.8943%" y="245" width="0.0807%" height="15" fill="rgb(238,139,3)" fg:x="358" fg:w="1"/><text x="29.1443%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="28.8943%" y="229" width="0.0807%" height="15" fill="rgb(216,17,39)" fg:x="358" fg:w="1"/><text x="29.1443%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="28.8943%" y="213" width="0.0807%" height="15" fill="rgb(238,120,9)" fg:x="358" fg:w="1"/><text x="29.1443%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="28.8943%" y="197" width="0.0807%" height="15" fill="rgb(244,92,53)" fg:x="358" fg:w="1"/><text x="29.1443%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="28.8943%" y="181" width="0.0807%" height="15" fill="rgb(224,148,33)" fg:x="358" fg:w="1"/><text x="29.1443%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="28.8943%" y="165" width="0.0807%" height="15" fill="rgb(243,6,36)" fg:x="358" fg:w="1"/><text x="29.1443%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="28.8943%" y="149" width="0.0807%" height="15" fill="rgb(230,102,11)" fg:x="358" fg:w="1"/><text x="29.1443%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="28.8943%" y="133" width="0.0807%" height="15" fill="rgb(234,148,36)" fg:x="358" fg:w="1"/><text x="29.1443%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.8943%" y="117" width="0.0807%" height="15" fill="rgb(251,153,25)" fg:x="358" fg:w="1"/><text x="29.1443%" y="127.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (14 samples, 1.13%)</title><rect x="27.9257%" y="357" width="1.1299%" height="15" fill="rgb(215,129,8)" fg:x="346" fg:w="14"/><text x="28.1757%" y="367.50"></text></g><g><title>kernel::model::props::load_props (9 samples, 0.73%)</title><rect x="28.3293%" y="341" width="0.7264%" height="15" fill="rgb(224,128,35)" fg:x="351" fg:w="9"/><text x="28.5793%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (9 samples, 0.73%)</title><rect x="28.3293%" y="325" width="0.7264%" height="15" fill="rgb(237,56,52)" fg:x="351" fg:w="9"/><text x="28.5793%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="28.9750%" y="309" width="0.0807%" height="15" fill="rgb(234,213,19)" fg:x="359" fg:w="1"/><text x="29.2250%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="28.9750%" y="293" width="0.0807%" height="15" fill="rgb(252,82,23)" fg:x="359" fg:w="1"/><text x="29.2250%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="28.9750%" y="277" width="0.0807%" height="15" fill="rgb(254,201,21)" fg:x="359" fg:w="1"/><text x="29.2250%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="28.9750%" y="261" width="0.0807%" height="15" fill="rgb(250,186,11)" fg:x="359" fg:w="1"/><text x="29.2250%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.9750%" y="245" width="0.0807%" height="15" fill="rgb(211,174,5)" fg:x="359" fg:w="1"/><text x="29.2250%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.0557%" y="357" width="0.0807%" height="15" fill="rgb(214,121,10)" fg:x="360" fg:w="1"/><text x="29.3057%" y="367.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="29.1364%" y="261" width="0.0807%" height="15" fill="rgb(241,66,2)" fg:x="361" fg:w="1"/><text x="29.3864%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="29.1364%" y="245" width="0.0807%" height="15" fill="rgb(220,167,19)" fg:x="361" fg:w="1"/><text x="29.3864%" y="255.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="29.1364%" y="229" width="0.0807%" height="15" fill="rgb(231,54,50)" fg:x="361" fg:w="1"/><text x="29.3864%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="29.1364%" y="213" width="0.0807%" height="15" fill="rgb(239,217,53)" fg:x="361" fg:w="1"/><text x="29.3864%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="29.1364%" y="197" width="0.0807%" height="15" fill="rgb(248,8,0)" fg:x="361" fg:w="1"/><text x="29.3864%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="29.1364%" y="181" width="0.0807%" height="15" fill="rgb(229,118,37)" fg:x="361" fg:w="1"/><text x="29.3864%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="29.1364%" y="165" width="0.0807%" height="15" fill="rgb(253,223,43)" fg:x="361" fg:w="1"/><text x="29.3864%" y="175.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="29.1364%" y="309" width="0.1614%" height="15" fill="rgb(211,77,36)" fg:x="361" fg:w="2"/><text x="29.3864%" y="319.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="29.1364%" y="293" width="0.1614%" height="15" fill="rgb(219,3,53)" fg:x="361" fg:w="2"/><text x="29.3864%" y="303.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="29.1364%" y="277" width="0.1614%" height="15" fill="rgb(244,45,42)" fg:x="361" fg:w="2"/><text x="29.3864%" y="287.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="29.2171%" y="261" width="0.0807%" height="15" fill="rgb(225,95,27)" fg:x="362" fg:w="1"/><text x="29.4671%" y="271.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="29.2171%" y="245" width="0.0807%" height="15" fill="rgb(207,74,8)" fg:x="362" fg:w="1"/><text x="29.4671%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="29.2171%" y="229" width="0.0807%" height="15" fill="rgb(243,63,36)" fg:x="362" fg:w="1"/><text x="29.4671%" y="239.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="29.2171%" y="213" width="0.0807%" height="15" fill="rgb(211,180,12)" fg:x="362" fg:w="1"/><text x="29.4671%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="29.2171%" y="197" width="0.0807%" height="15" fill="rgb(254,166,49)" fg:x="362" fg:w="1"/><text x="29.4671%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="29.2171%" y="181" width="0.0807%" height="15" fill="rgb(205,19,0)" fg:x="362" fg:w="1"/><text x="29.4671%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="29.2171%" y="165" width="0.0807%" height="15" fill="rgb(224,172,32)" fg:x="362" fg:w="1"/><text x="29.4671%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="29.2171%" y="149" width="0.0807%" height="15" fill="rgb(254,136,30)" fg:x="362" fg:w="1"/><text x="29.4671%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="29.2171%" y="133" width="0.0807%" height="15" fill="rgb(246,19,35)" fg:x="362" fg:w="1"/><text x="29.4671%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="29.2171%" y="117" width="0.0807%" height="15" fill="rgb(219,24,36)" fg:x="362" fg:w="1"/><text x="29.4671%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="29.2171%" y="101" width="0.0807%" height="15" fill="rgb(251,55,1)" fg:x="362" fg:w="1"/><text x="29.4671%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.2171%" y="85" width="0.0807%" height="15" fill="rgb(218,117,39)" fg:x="362" fg:w="1"/><text x="29.4671%" y="95.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.08%)</title><rect x="29.2171%" y="69" width="0.0807%" height="15" fill="rgb(248,169,11)" fg:x="362" fg:w="1"/><text x="29.4671%" y="79.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="29.2978%" y="293" width="0.0807%" height="15" fill="rgb(244,40,44)" fg:x="363" fg:w="1"/><text x="29.5478%" y="303.50"></text></g><g><title>alloc::str::convert_while_ascii (1 samples, 0.08%)</title><rect x="29.2978%" y="277" width="0.0807%" height="15" fill="rgb(234,62,37)" fg:x="363" fg:w="1"/><text x="29.5478%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="29.2978%" y="261" width="0.0807%" height="15" fill="rgb(207,117,42)" fg:x="363" fg:w="1"/><text x="29.5478%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="29.2978%" y="245" width="0.0807%" height="15" fill="rgb(213,43,2)" fg:x="363" fg:w="1"/><text x="29.5478%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="29.2978%" y="229" width="0.0807%" height="15" fill="rgb(244,202,51)" fg:x="363" fg:w="1"/><text x="29.5478%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="29.2978%" y="213" width="0.0807%" height="15" fill="rgb(253,174,46)" fg:x="363" fg:w="1"/><text x="29.5478%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="29.2978%" y="197" width="0.0807%" height="15" fill="rgb(251,23,1)" fg:x="363" fg:w="1"/><text x="29.5478%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="29.2978%" y="181" width="0.0807%" height="15" fill="rgb(253,26,1)" fg:x="363" fg:w="1"/><text x="29.5478%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="29.2978%" y="165" width="0.0807%" height="15" fill="rgb(216,89,31)" fg:x="363" fg:w="1"/><text x="29.5478%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.2978%" y="149" width="0.0807%" height="15" fill="rgb(209,109,5)" fg:x="363" fg:w="1"/><text x="29.5478%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="29.3785%" y="277" width="0.0807%" height="15" fill="rgb(229,63,13)" fg:x="364" fg:w="1"/><text x="29.6285%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="29.4592%" y="277" width="0.1614%" height="15" fill="rgb(238,137,54)" fg:x="365" fg:w="2"/><text x="29.7092%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="29.4592%" y="261" width="0.1614%" height="15" fill="rgb(228,1,9)" fg:x="365" fg:w="2"/><text x="29.7092%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="29.4592%" y="245" width="0.1614%" height="15" fill="rgb(249,120,48)" fg:x="365" fg:w="2"/><text x="29.7092%" y="255.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (2 samples, 0.16%)</title><rect x="29.4592%" y="229" width="0.1614%" height="15" fill="rgb(209,72,36)" fg:x="365" fg:w="2"/><text x="29.7092%" y="239.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="29.4592%" y="213" width="0.1614%" height="15" fill="rgb(247,98,49)" fg:x="365" fg:w="2"/><text x="29.7092%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="29.4592%" y="197" width="0.1614%" height="15" fill="rgb(233,75,36)" fg:x="365" fg:w="2"/><text x="29.7092%" y="207.50"></text></g><g><title>regex_automata::util::determinize::next (2 samples, 0.16%)</title><rect x="29.4592%" y="181" width="0.1614%" height="15" fill="rgb(225,14,24)" fg:x="365" fg:w="2"/><text x="29.7092%" y="191.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderMatches::into_nfa (1 samples, 0.08%)</title><rect x="29.5400%" y="165" width="0.0807%" height="15" fill="rgb(237,193,20)" fg:x="366" fg:w="1"/><text x="29.7900%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.6207%" y="245" width="0.0807%" height="15" fill="rgb(239,122,19)" fg:x="367" fg:w="1"/><text x="29.8707%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.7014%" y="229" width="0.0807%" height="15" fill="rgb(231,220,10)" fg:x="368" fg:w="1"/><text x="29.9514%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (2 samples, 0.16%)</title><rect x="29.7821%" y="229" width="0.1614%" height="15" fill="rgb(220,66,15)" fg:x="369" fg:w="2"/><text x="30.0321%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="29.7821%" y="213" width="0.1614%" height="15" fill="rgb(215,171,52)" fg:x="369" fg:w="2"/><text x="30.0321%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.8628%" y="197" width="0.0807%" height="15" fill="rgb(241,169,50)" fg:x="370" fg:w="1"/><text x="30.1128%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="29.9435%" y="229" width="0.0807%" height="15" fill="rgb(236,189,0)" fg:x="371" fg:w="1"/><text x="30.1935%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.9435%" y="213" width="0.0807%" height="15" fill="rgb(217,147,20)" fg:x="371" fg:w="1"/><text x="30.1935%" y="223.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="30.1049%" y="213" width="0.1614%" height="15" fill="rgb(206,188,39)" fg:x="373" fg:w="2"/><text x="30.3549%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="30.3471%" y="197" width="0.0807%" height="15" fill="rgb(227,118,25)" fg:x="376" fg:w="1"/><text x="30.5971%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (16 samples, 1.29%)</title><rect x="30.4278%" y="197" width="1.2914%" height="15" fill="rgb(248,171,40)" fg:x="377" fg:w="16"/><text x="30.6778%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (20 samples, 1.61%)</title><rect x="30.2663%" y="213" width="1.6142%" height="15" fill="rgb(251,90,54)" fg:x="375" fg:w="20"/><text x="30.5163%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (2 samples, 0.16%)</title><rect x="31.7191%" y="197" width="0.1614%" height="15" fill="rgb(234,11,46)" fg:x="393" fg:w="2"/><text x="31.9691%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.7998%" y="181" width="0.0807%" height="15" fill="rgb(229,134,13)" fg:x="394" fg:w="1"/><text x="32.0498%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="31.8805%" y="197" width="0.0807%" height="15" fill="rgb(223,129,3)" fg:x="395" fg:w="1"/><text x="32.1305%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="31.8805%" y="181" width="0.0807%" height="15" fill="rgb(221,124,13)" fg:x="395" fg:w="1"/><text x="32.1305%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.8805%" y="165" width="0.0807%" height="15" fill="rgb(234,3,18)" fg:x="395" fg:w="1"/><text x="32.1305%" y="175.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (9 samples, 0.73%)</title><rect x="31.9613%" y="197" width="0.7264%" height="15" fill="rgb(249,199,20)" fg:x="396" fg:w="9"/><text x="32.2113%" y="207.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="32.6069%" y="181" width="0.0807%" height="15" fill="rgb(224,134,6)" fg:x="404" fg:w="1"/><text x="32.8569%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.6069%" y="165" width="0.0807%" height="15" fill="rgb(254,83,26)" fg:x="404" fg:w="1"/><text x="32.8569%" y="175.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (11 samples, 0.89%)</title><rect x="31.8805%" y="213" width="0.8878%" height="15" fill="rgb(217,88,9)" fg:x="395" fg:w="11"/><text x="32.1305%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="32.6877%" y="197" width="0.0807%" height="15" fill="rgb(225,73,2)" fg:x="405" fg:w="1"/><text x="32.9377%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="32.6877%" y="181" width="0.0807%" height="15" fill="rgb(226,44,39)" fg:x="405" fg:w="1"/><text x="32.9377%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="32.6877%" y="165" width="0.0807%" height="15" fill="rgb(228,53,17)" fg:x="405" fg:w="1"/><text x="32.9377%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="32.6877%" y="149" width="0.0807%" height="15" fill="rgb(212,27,27)" fg:x="405" fg:w="1"/><text x="32.9377%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.6877%" y="133" width="0.0807%" height="15" fill="rgb(241,50,6)" fg:x="405" fg:w="1"/><text x="32.9377%" y="143.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="32.6877%" y="117" width="0.0807%" height="15" fill="rgb(225,28,51)" fg:x="405" fg:w="1"/><text x="32.9377%" y="127.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="32.6877%" y="101" width="0.0807%" height="15" fill="rgb(215,33,16)" fg:x="405" fg:w="1"/><text x="32.9377%" y="111.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="32.7684%" y="213" width="0.0807%" height="15" fill="rgb(243,40,39)" fg:x="406" fg:w="1"/><text x="33.0184%" y="223.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="33.0912%" y="149" width="0.1614%" height="15" fill="rgb(225,11,42)" fg:x="410" fg:w="2"/><text x="33.3412%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="33.2526%" y="149" width="0.0807%" height="15" fill="rgb(241,220,38)" fg:x="412" fg:w="1"/><text x="33.5026%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="33.3333%" y="149" width="0.0807%" height="15" fill="rgb(244,52,35)" fg:x="413" fg:w="1"/><text x="33.5833%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="33.3333%" y="133" width="0.0807%" height="15" fill="rgb(246,42,46)" fg:x="413" fg:w="1"/><text x="33.5833%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.3333%" y="117" width="0.0807%" height="15" fill="rgb(205,184,13)" fg:x="413" fg:w="1"/><text x="33.5833%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.3333%" y="101" width="0.0807%" height="15" fill="rgb(209,48,36)" fg:x="413" fg:w="1"/><text x="33.5833%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="33.4140%" y="149" width="0.2421%" height="15" fill="rgb(244,34,51)" fg:x="414" fg:w="3"/><text x="33.6640%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="33.4948%" y="133" width="0.1614%" height="15" fill="rgb(221,107,33)" fg:x="415" fg:w="2"/><text x="33.7448%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="33.4948%" y="117" width="0.1614%" height="15" fill="rgb(224,203,12)" fg:x="415" fg:w="2"/><text x="33.7448%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (56 samples, 4.52%)</title><rect x="33.6562%" y="149" width="4.5198%" height="15" fill="rgb(230,215,18)" fg:x="417" fg:w="56"/><text x="33.9062%" y="159.50">regex..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (56 samples, 4.52%)</title><rect x="33.6562%" y="133" width="4.5198%" height="15" fill="rgb(206,185,35)" fg:x="417" fg:w="56"/><text x="33.9062%" y="143.50">regex..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (55 samples, 4.44%)</title><rect x="33.7369%" y="117" width="4.4391%" height="15" fill="rgb(228,140,34)" fg:x="418" fg:w="55"/><text x="33.9869%" y="127.50">alloc..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (5 samples, 0.40%)</title><rect x="38.1759%" y="149" width="0.4036%" height="15" fill="rgb(208,93,13)" fg:x="473" fg:w="5"/><text x="38.4259%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.4988%" y="133" width="0.0807%" height="15" fill="rgb(221,193,39)" fg:x="477" fg:w="1"/><text x="38.7488%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (72 samples, 5.81%)</title><rect x="32.9298%" y="197" width="5.8111%" height="15" fill="rgb(241,132,34)" fg:x="408" fg:w="72"/><text x="33.1798%" y="207.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (72 samples, 5.81%)</title><rect x="32.9298%" y="181" width="5.8111%" height="15" fill="rgb(221,141,10)" fg:x="408" fg:w="72"/><text x="33.1798%" y="191.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (72 samples, 5.81%)</title><rect x="32.9298%" y="165" width="5.8111%" height="15" fill="rgb(226,90,31)" fg:x="408" fg:w="72"/><text x="33.1798%" y="175.50">regex_a..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="38.5795%" y="149" width="0.1614%" height="15" fill="rgb(243,75,5)" fg:x="478" fg:w="2"/><text x="38.8295%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.6602%" y="133" width="0.0807%" height="15" fill="rgb(227,156,21)" fg:x="479" fg:w="1"/><text x="38.9102%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.6602%" y="117" width="0.0807%" height="15" fill="rgb(250,195,8)" fg:x="479" fg:w="1"/><text x="38.9102%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.6602%" y="101" width="0.0807%" height="15" fill="rgb(220,134,5)" fg:x="479" fg:w="1"/><text x="38.9102%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="38.9023%" y="181" width="0.3228%" height="15" fill="rgb(246,106,34)" fg:x="482" fg:w="4"/><text x="39.1523%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="39.0638%" y="165" width="0.1614%" height="15" fill="rgb(205,1,4)" fg:x="484" fg:w="2"/><text x="39.3138%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="39.0638%" y="149" width="0.1614%" height="15" fill="rgb(224,151,29)" fg:x="484" fg:w="2"/><text x="39.3138%" y="159.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="39.0638%" y="133" width="0.1614%" height="15" fill="rgb(251,196,0)" fg:x="484" fg:w="2"/><text x="39.3138%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.6287%" y="165" width="0.0807%" height="15" fill="rgb(212,127,0)" fg:x="491" fg:w="1"/><text x="39.8787%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.56%)</title><rect x="39.2252%" y="181" width="0.5650%" height="15" fill="rgb(236,71,53)" fg:x="486" fg:w="7"/><text x="39.4752%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="39.7094%" y="165" width="0.0807%" height="15" fill="rgb(227,99,0)" fg:x="492" fg:w="1"/><text x="39.9594%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.7094%" y="149" width="0.0807%" height="15" fill="rgb(239,89,21)" fg:x="492" fg:w="1"/><text x="39.9594%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="39.7094%" y="133" width="0.0807%" height="15" fill="rgb(243,122,19)" fg:x="492" fg:w="1"/><text x="39.9594%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="39.7902%" y="181" width="0.0807%" height="15" fill="rgb(229,192,45)" fg:x="493" fg:w="1"/><text x="40.0402%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (15 samples, 1.21%)</title><rect x="38.7409%" y="197" width="1.2107%" height="15" fill="rgb(235,165,35)" fg:x="480" fg:w="15"/><text x="38.9909%" y="207.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="39.8709%" y="181" width="0.0807%" height="15" fill="rgb(253,202,0)" fg:x="494" fg:w="1"/><text x="40.1209%" y="191.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="39.8709%" y="165" width="0.0807%" height="15" fill="rgb(235,51,20)" fg:x="494" fg:w="1"/><text x="40.1209%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="39.9516%" y="197" width="0.0807%" height="15" fill="rgb(218,95,46)" fg:x="495" fg:w="1"/><text x="40.2016%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="39.9516%" y="181" width="0.0807%" height="15" fill="rgb(212,81,10)" fg:x="495" fg:w="1"/><text x="40.2016%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (90 samples, 7.26%)</title><rect x="32.8491%" y="213" width="7.2639%" height="15" fill="rgb(240,59,0)" fg:x="407" fg:w="90"/><text x="33.0991%" y="223.50">regex_auto..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="40.0323%" y="197" width="0.0807%" height="15" fill="rgb(212,191,42)" fg:x="496" fg:w="1"/><text x="40.2823%" y="207.50"></text></g><g><title>regex_syntax::hir::ClassBytes::push (1 samples, 0.08%)</title><rect x="40.0323%" y="181" width="0.0807%" height="15" fill="rgb(233,140,3)" fg:x="496" fg:w="1"/><text x="40.2823%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.0323%" y="165" width="0.0807%" height="15" fill="rgb(215,69,23)" fg:x="496" fg:w="1"/><text x="40.2823%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.0323%" y="149" width="0.0807%" height="15" fill="rgb(240,202,20)" fg:x="496" fg:w="1"/><text x="40.2823%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.0323%" y="133" width="0.0807%" height="15" fill="rgb(209,146,50)" fg:x="496" fg:w="1"/><text x="40.2823%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="40.1130%" y="213" width="0.1614%" height="15" fill="rgb(253,102,54)" fg:x="497" fg:w="2"/><text x="40.3630%" y="223.50"></text></g><g><title>regex_automata::meta::reverse_inner::flatten (2 samples, 0.16%)</title><rect x="40.1130%" y="197" width="0.1614%" height="15" fill="rgb(250,173,47)" fg:x="497" fg:w="2"/><text x="40.3630%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (129 samples, 10.41%)</title><rect x="30.0242%" y="229" width="10.4116%" height="15" fill="rgb(232,142,7)" fg:x="372" fg:w="129"/><text x="30.2742%" y="239.50">regex_automata:..</text></g><g><title>regex_automata::util::prefilter::prefixes (2 samples, 0.16%)</title><rect x="40.2744%" y="213" width="0.1614%" height="15" fill="rgb(230,157,47)" fg:x="499" fg:w="2"/><text x="40.5244%" y="223.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.08%)</title><rect x="40.3551%" y="197" width="0.0807%" height="15" fill="rgb(214,177,35)" fg:x="500" fg:w="1"/><text x="40.6051%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="40.4358%" y="197" width="0.0807%" height="15" fill="rgb(234,119,46)" fg:x="501" fg:w="1"/><text x="40.6858%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="40.4358%" y="229" width="0.1614%" height="15" fill="rgb(241,180,50)" fg:x="501" fg:w="2"/><text x="40.6858%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="40.4358%" y="213" width="0.1614%" height="15" fill="rgb(221,54,25)" fg:x="501" fg:w="2"/><text x="40.6858%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="40.5165%" y="197" width="0.0807%" height="15" fill="rgb(209,157,44)" fg:x="502" fg:w="1"/><text x="40.7665%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="40.6780%" y="181" width="0.2421%" height="15" fill="rgb(246,115,41)" fg:x="504" fg:w="3"/><text x="40.9280%" y="191.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (2 samples, 0.16%)</title><rect x="40.7587%" y="165" width="0.1614%" height="15" fill="rgb(229,86,1)" fg:x="505" fg:w="2"/><text x="41.0087%" y="175.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="40.9201%" y="181" width="0.0807%" height="15" fill="rgb(240,108,53)" fg:x="507" fg:w="1"/><text x="41.1701%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (5 samples, 0.40%)</title><rect x="40.6780%" y="197" width="0.4036%" height="15" fill="rgb(227,134,2)" fg:x="504" fg:w="5"/><text x="40.9280%" y="207.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="41.0008%" y="181" width="0.0807%" height="15" fill="rgb(213,129,25)" fg:x="508" fg:w="1"/><text x="41.2508%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (144 samples, 11.62%)</title><rect x="29.6207%" y="277" width="11.6223%" height="15" fill="rgb(226,35,21)" fg:x="367" fg:w="144"/><text x="29.8707%" y="287.50">&lt;regex::regex::st..</text></g><g><title>regex::builders::Builder::build_one_string (144 samples, 11.62%)</title><rect x="29.6207%" y="261" width="11.6223%" height="15" fill="rgb(208,129,26)" fg:x="367" fg:w="144"/><text x="29.8707%" y="271.50">regex::builders::..</text></g><g><title>regex_automata::meta::regex::Builder::build (143 samples, 11.54%)</title><rect x="29.7014%" y="245" width="11.5416%" height="15" fill="rgb(224,83,6)" fg:x="368" fg:w="143"/><text x="29.9514%" y="255.50">regex_automata::m..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (8 samples, 0.65%)</title><rect x="40.5973%" y="229" width="0.6457%" height="15" fill="rgb(227,52,39)" fg:x="503" fg:w="8"/><text x="40.8473%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (8 samples, 0.65%)</title><rect x="40.5973%" y="213" width="0.6457%" height="15" fill="rgb(241,30,17)" fg:x="503" fg:w="8"/><text x="40.8473%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="41.0815%" y="197" width="0.1614%" height="15" fill="rgb(246,186,42)" fg:x="509" fg:w="2"/><text x="41.3315%" y="207.50"></text></g><g><title>regex_syntax::hir::Hir::class (2 samples, 0.16%)</title><rect x="41.0815%" y="181" width="0.1614%" height="15" fill="rgb(221,169,15)" fg:x="509" fg:w="2"/><text x="41.3315%" y="191.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="41.1622%" y="165" width="0.0807%" height="15" fill="rgb(235,108,21)" fg:x="510" fg:w="1"/><text x="41.4122%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.1622%" y="149" width="0.0807%" height="15" fill="rgb(219,148,30)" fg:x="510" fg:w="1"/><text x="41.4122%" y="159.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="41.2429%" y="229" width="0.0807%" height="15" fill="rgb(220,109,5)" fg:x="511" fg:w="1"/><text x="41.4929%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.2429%" y="213" width="0.0807%" height="15" fill="rgb(213,203,48)" fg:x="511" fg:w="1"/><text x="41.4929%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="41.3236%" y="213" width="0.0807%" height="15" fill="rgb(244,71,33)" fg:x="512" fg:w="1"/><text x="41.5736%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="41.2429%" y="277" width="0.2421%" height="15" fill="rgb(209,23,2)" fg:x="511" fg:w="3"/><text x="41.4929%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="41.2429%" y="261" width="0.2421%" height="15" fill="rgb(219,97,7)" fg:x="511" fg:w="3"/><text x="41.4929%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="41.2429%" y="245" width="0.2421%" height="15" fill="rgb(216,161,23)" fg:x="511" fg:w="3"/><text x="41.4929%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="41.3236%" y="229" width="0.1614%" height="15" fill="rgb(207,45,42)" fg:x="512" fg:w="2"/><text x="41.5736%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.4044%" y="213" width="0.0807%" height="15" fill="rgb(241,61,4)" fg:x="513" fg:w="1"/><text x="41.6544%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="41.4851%" y="213" width="0.0807%" height="15" fill="rgb(236,170,1)" fg:x="514" fg:w="1"/><text x="41.7351%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="41.8886%" y="197" width="0.0807%" height="15" fill="rgb(239,72,5)" fg:x="519" fg:w="1"/><text x="42.1386%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.8886%" y="181" width="0.0807%" height="15" fill="rgb(214,13,50)" fg:x="519" fg:w="1"/><text x="42.1386%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="41.8886%" y="165" width="0.0807%" height="15" fill="rgb(224,88,9)" fg:x="519" fg:w="1"/><text x="42.1386%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="41.9693%" y="197" width="0.0807%" height="15" fill="rgb(238,192,34)" fg:x="520" fg:w="1"/><text x="42.2193%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="41.9693%" y="181" width="0.0807%" height="15" fill="rgb(217,203,50)" fg:x="520" fg:w="1"/><text x="42.2193%" y="191.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (160 samples, 12.91%)</title><rect x="29.3785%" y="293" width="12.9136%" height="15" fill="rgb(241,123,32)" fg:x="364" fg:w="160"/><text x="29.6285%" y="303.50">indefinite::helper:..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (10 samples, 0.81%)</title><rect x="41.4851%" y="277" width="0.8071%" height="15" fill="rgb(248,151,39)" fg:x="514" fg:w="10"/><text x="41.7351%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (10 samples, 0.81%)</title><rect x="41.4851%" y="261" width="0.8071%" height="15" fill="rgb(208,89,6)" fg:x="514" fg:w="10"/><text x="41.7351%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (10 samples, 0.81%)</title><rect x="41.4851%" y="245" width="0.8071%" height="15" fill="rgb(254,43,26)" fg:x="514" fg:w="10"/><text x="41.7351%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (10 samples, 0.81%)</title><rect x="41.4851%" y="229" width="0.8071%" height="15" fill="rgb(216,158,13)" fg:x="514" fg:w="10"/><text x="41.7351%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (9 samples, 0.73%)</title><rect x="41.5658%" y="213" width="0.7264%" height="15" fill="rgb(212,47,37)" fg:x="515" fg:w="9"/><text x="41.8158%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="42.0500%" y="197" width="0.2421%" height="15" fill="rgb(254,16,10)" fg:x="521" fg:w="3"/><text x="42.3000%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="42.2922%" y="261" width="0.0807%" height="15" fill="rgb(223,228,16)" fg:x="524" fg:w="1"/><text x="42.5422%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="42.2922%" y="245" width="0.0807%" height="15" fill="rgb(249,108,50)" fg:x="524" fg:w="1"/><text x="42.5422%" y="255.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="42.2922%" y="229" width="0.0807%" height="15" fill="rgb(208,220,5)" fg:x="524" fg:w="1"/><text x="42.5422%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="42.3729%" y="229" width="0.3228%" height="15" fill="rgb(217,89,48)" fg:x="525" fg:w="4"/><text x="42.6229%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="42.3729%" y="213" width="0.3228%" height="15" fill="rgb(212,113,41)" fg:x="525" fg:w="4"/><text x="42.6229%" y="223.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="42.4536%" y="197" width="0.2421%" height="15" fill="rgb(231,127,5)" fg:x="526" fg:w="3"/><text x="42.7036%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.7764%" y="197" width="0.0807%" height="15" fill="rgb(217,141,17)" fg:x="530" fg:w="1"/><text x="43.0264%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="42.6957%" y="229" width="0.2421%" height="15" fill="rgb(245,125,54)" fg:x="529" fg:w="3"/><text x="42.9457%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="42.6957%" y="213" width="0.2421%" height="15" fill="rgb(248,125,3)" fg:x="529" fg:w="3"/><text x="42.9457%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="42.8571%" y="197" width="0.0807%" height="15" fill="rgb(236,119,51)" fg:x="531" fg:w="1"/><text x="43.1071%" y="207.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="42.8571%" y="181" width="0.0807%" height="15" fill="rgb(239,99,8)" fg:x="531" fg:w="1"/><text x="43.1071%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="42.8571%" y="165" width="0.0807%" height="15" fill="rgb(224,228,4)" fg:x="531" fg:w="1"/><text x="43.1071%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (19 samples, 1.53%)</title><rect x="43.0186%" y="213" width="1.5335%" height="15" fill="rgb(220,131,45)" fg:x="533" fg:w="19"/><text x="43.2686%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (19 samples, 1.53%)</title><rect x="43.0186%" y="197" width="1.5335%" height="15" fill="rgb(215,62,5)" fg:x="533" fg:w="19"/><text x="43.2686%" y="207.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="44.3906%" y="181" width="0.1614%" height="15" fill="rgb(253,12,24)" fg:x="550" fg:w="2"/><text x="44.6406%" y="191.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="44.7942%" y="181" width="0.0807%" height="15" fill="rgb(248,120,50)" fg:x="555" fg:w="1"/><text x="45.0442%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="44.5521%" y="197" width="0.4036%" height="15" fill="rgb(245,194,10)" fg:x="552" fg:w="5"/><text x="44.8021%" y="207.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="44.8749%" y="181" width="0.0807%" height="15" fill="rgb(241,149,38)" fg:x="556" fg:w="1"/><text x="45.1249%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="44.8749%" y="165" width="0.0807%" height="15" fill="rgb(219,215,7)" fg:x="556" fg:w="1"/><text x="45.1249%" y="175.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="44.5521%" y="213" width="0.4843%" height="15" fill="rgb(208,120,31)" fg:x="552" fg:w="6"/><text x="44.8021%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="44.9556%" y="197" width="0.0807%" height="15" fill="rgb(244,30,8)" fg:x="557" fg:w="1"/><text x="45.2056%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="45.3592%" y="181" width="0.0807%" height="15" fill="rgb(238,35,44)" fg:x="562" fg:w="1"/><text x="45.6092%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="45.3592%" y="165" width="0.0807%" height="15" fill="rgb(243,218,37)" fg:x="562" fg:w="1"/><text x="45.6092%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="45.3592%" y="149" width="0.0807%" height="15" fill="rgb(218,169,10)" fg:x="562" fg:w="1"/><text x="45.6092%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="45.4399%" y="181" width="0.1614%" height="15" fill="rgb(221,144,10)" fg:x="563" fg:w="2"/><text x="45.6899%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="45.4399%" y="165" width="0.1614%" height="15" fill="rgb(226,41,38)" fg:x="563" fg:w="2"/><text x="45.6899%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="45.4399%" y="149" width="0.1614%" height="15" fill="rgb(228,3,1)" fg:x="563" fg:w="2"/><text x="45.6899%" y="159.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="45.4399%" y="133" width="0.1614%" height="15" fill="rgb(209,129,12)" fg:x="563" fg:w="2"/><text x="45.6899%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="46.1663%" y="149" width="0.2421%" height="15" fill="rgb(213,136,33)" fg:x="572" fg:w="3"/><text x="46.4163%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="46.1663%" y="133" width="0.2421%" height="15" fill="rgb(209,181,29)" fg:x="572" fg:w="3"/><text x="46.4163%" y="143.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="46.1663%" y="117" width="0.2421%" height="15" fill="rgb(234,173,18)" fg:x="572" fg:w="3"/><text x="46.4163%" y="127.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (11 samples, 0.89%)</title><rect x="45.6013%" y="181" width="0.8878%" height="15" fill="rgb(227,73,47)" fg:x="565" fg:w="11"/><text x="45.8513%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (5 samples, 0.40%)</title><rect x="46.0856%" y="165" width="0.4036%" height="15" fill="rgb(234,9,34)" fg:x="571" fg:w="5"/><text x="46.3356%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="46.4084%" y="149" width="0.0807%" height="15" fill="rgb(235,172,15)" fg:x="575" fg:w="1"/><text x="46.6584%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.4084%" y="133" width="0.0807%" height="15" fill="rgb(245,61,2)" fg:x="575" fg:w="1"/><text x="46.6584%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="46.4084%" y="117" width="0.0807%" height="15" fill="rgb(238,39,47)" fg:x="575" fg:w="1"/><text x="46.6584%" y="127.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (30 samples, 2.42%)</title><rect x="45.0363%" y="213" width="2.4213%" height="15" fill="rgb(234,37,24)" fg:x="558" fg:w="30"/><text x="45.2863%" y="223.50">re..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (30 samples, 2.42%)</title><rect x="45.0363%" y="197" width="2.4213%" height="15" fill="rgb(248,223,24)" fg:x="558" fg:w="30"/><text x="45.2863%" y="207.50">re..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (12 samples, 0.97%)</title><rect x="46.4891%" y="181" width="0.9685%" height="15" fill="rgb(223,12,15)" fg:x="576" fg:w="12"/><text x="46.7391%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (12 samples, 0.97%)</title><rect x="46.4891%" y="165" width="0.9685%" height="15" fill="rgb(249,6,3)" fg:x="576" fg:w="12"/><text x="46.7391%" y="175.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (12 samples, 0.97%)</title><rect x="46.4891%" y="149" width="0.9685%" height="15" fill="rgb(237,105,33)" fg:x="576" fg:w="12"/><text x="46.7391%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="47.5383%" y="165" width="0.0807%" height="15" fill="rgb(252,208,35)" fg:x="589" fg:w="1"/><text x="47.7883%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="47.5383%" y="149" width="0.0807%" height="15" fill="rgb(215,181,35)" fg:x="589" fg:w="1"/><text x="47.7883%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.5383%" y="133" width="0.0807%" height="15" fill="rgb(246,212,3)" fg:x="589" fg:w="1"/><text x="47.7883%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="47.5383%" y="117" width="0.0807%" height="15" fill="rgb(247,156,24)" fg:x="589" fg:w="1"/><text x="47.7883%" y="127.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.65%)</title><rect x="48.6683%" y="101" width="0.6457%" height="15" fill="rgb(248,9,31)" fg:x="603" fg:w="8"/><text x="48.9183%" y="111.50"></text></g><g><title>__libc_free (5 samples, 0.40%)</title><rect x="49.3140%" y="101" width="0.4036%" height="15" fill="rgb(234,26,45)" fg:x="611" fg:w="5"/><text x="49.5640%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (7 samples, 0.56%)</title><rect x="49.7175%" y="101" width="0.5650%" height="15" fill="rgb(249,11,32)" fg:x="616" fg:w="7"/><text x="49.9675%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="49.9596%" y="85" width="0.3228%" height="15" fill="rgb(249,162,33)" fg:x="619" fg:w="4"/><text x="50.2096%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="49.9596%" y="69" width="0.3228%" height="15" fill="rgb(232,4,32)" fg:x="619" fg:w="4"/><text x="50.2096%" y="79.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="49.9596%" y="53" width="0.3228%" height="15" fill="rgb(212,5,45)" fg:x="619" fg:w="4"/><text x="50.2096%" y="63.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="50.7667%" y="69" width="0.1614%" height="15" fill="rgb(227,95,13)" fg:x="629" fg:w="2"/><text x="51.0167%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="50.9282%" y="69" width="0.2421%" height="15" fill="rgb(223,205,10)" fg:x="631" fg:w="3"/><text x="51.1782%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.0896%" y="53" width="0.0807%" height="15" fill="rgb(222,178,8)" fg:x="633" fg:w="1"/><text x="51.3396%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.0896%" y="37" width="0.0807%" height="15" fill="rgb(216,13,22)" fg:x="633" fg:w="1"/><text x="51.3396%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (15 samples, 1.21%)</title><rect x="50.2825%" y="101" width="1.2107%" height="15" fill="rgb(240,167,12)" fg:x="623" fg:w="15"/><text x="50.5325%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (13 samples, 1.05%)</title><rect x="50.4439%" y="85" width="1.0492%" height="15" fill="rgb(235,68,35)" fg:x="625" fg:w="13"/><text x="50.6939%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (4 samples, 0.32%)</title><rect x="51.1703%" y="69" width="0.3228%" height="15" fill="rgb(253,40,27)" fg:x="634" fg:w="4"/><text x="51.4203%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="51.4931%" y="85" width="0.0807%" height="15" fill="rgb(214,19,28)" fg:x="638" fg:w="1"/><text x="51.7431%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="51.5738%" y="69" width="0.0807%" height="15" fill="rgb(210,167,45)" fg:x="639" fg:w="1"/><text x="51.8238%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.5738%" y="53" width="0.0807%" height="15" fill="rgb(232,97,40)" fg:x="639" fg:w="1"/><text x="51.8238%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.5738%" y="37" width="0.0807%" height="15" fill="rgb(250,35,23)" fg:x="639" fg:w="1"/><text x="51.8238%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (3 samples, 0.24%)</title><rect x="51.4931%" y="101" width="0.2421%" height="15" fill="rgb(248,47,53)" fg:x="638" fg:w="3"/><text x="51.7431%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="51.5738%" y="85" width="0.1614%" height="15" fill="rgb(226,58,50)" fg:x="639" fg:w="2"/><text x="51.8238%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="51.6546%" y="69" width="0.0807%" height="15" fill="rgb(217,105,26)" fg:x="640" fg:w="1"/><text x="51.9046%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (75 samples, 6.05%)</title><rect x="51.7353%" y="101" width="6.0533%" height="15" fill="rgb(208,64,1)" fg:x="641" fg:w="75"/><text x="51.9853%" y="111.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (75 samples, 6.05%)</title><rect x="51.7353%" y="85" width="6.0533%" height="15" fill="rgb(214,80,1)" fg:x="641" fg:w="75"/><text x="51.9853%" y="95.50">regex_au..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (75 samples, 6.05%)</title><rect x="51.7353%" y="69" width="6.0533%" height="15" fill="rgb(206,175,26)" fg:x="641" fg:w="75"/><text x="51.9853%" y="79.50">alloc::v..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.32%)</title><rect x="57.7885%" y="101" width="0.3228%" height="15" fill="rgb(235,156,37)" fg:x="716" fg:w="4"/><text x="58.0385%" y="111.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="57.9500%" y="85" width="0.1614%" height="15" fill="rgb(213,100,9)" fg:x="718" fg:w="2"/><text x="58.2000%" y="95.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="58.1114%" y="101" width="0.0807%" height="15" fill="rgb(241,15,13)" fg:x="720" fg:w="1"/><text x="58.3614%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (137 samples, 11.06%)</title><rect x="47.4576%" y="197" width="11.0573%" height="15" fill="rgb(205,97,43)" fg:x="588" fg:w="137"/><text x="47.7076%" y="207.50">&lt;core::iter::ada..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (137 samples, 11.06%)</title><rect x="47.4576%" y="181" width="11.0573%" height="15" fill="rgb(216,106,32)" fg:x="588" fg:w="137"/><text x="47.7076%" y="191.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (135 samples, 10.90%)</title><rect x="47.6190%" y="165" width="10.8959%" height="15" fill="rgb(226,200,8)" fg:x="590" fg:w="135"/><text x="47.8690%" y="175.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (135 samples, 10.90%)</title><rect x="47.6190%" y="149" width="10.8959%" height="15" fill="rgb(244,54,29)" fg:x="590" fg:w="135"/><text x="47.8690%" y="159.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (135 samples, 10.90%)</title><rect x="47.6190%" y="133" width="10.8959%" height="15" fill="rgb(252,169,12)" fg:x="590" fg:w="135"/><text x="47.8690%" y="143.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (135 samples, 10.90%)</title><rect x="47.6190%" y="117" width="10.8959%" height="15" fill="rgb(231,199,11)" fg:x="590" fg:w="135"/><text x="47.8690%" y="127.50">regex_automata::..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (4 samples, 0.32%)</title><rect x="58.1921%" y="101" width="0.3228%" height="15" fill="rgb(233,191,18)" fg:x="721" fg:w="4"/><text x="58.4421%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="58.2728%" y="85" width="0.2421%" height="15" fill="rgb(215,83,47)" fg:x="722" fg:w="3"/><text x="58.5228%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.4342%" y="69" width="0.0807%" height="15" fill="rgb(251,67,19)" fg:x="724" fg:w="1"/><text x="58.6842%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.4342%" y="53" width="0.0807%" height="15" fill="rgb(240,7,20)" fg:x="724" fg:w="1"/><text x="58.6842%" y="63.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="58.8378%" y="181" width="0.0807%" height="15" fill="rgb(210,150,26)" fg:x="729" fg:w="1"/><text x="59.0878%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.9185%" y="181" width="0.0807%" height="15" fill="rgb(228,75,42)" fg:x="730" fg:w="1"/><text x="59.1685%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.9992%" y="181" width="0.0807%" height="15" fill="rgb(237,134,48)" fg:x="731" fg:w="1"/><text x="59.2492%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (6 samples, 0.48%)</title><rect x="59.0799%" y="181" width="0.4843%" height="15" fill="rgb(205,80,50)" fg:x="732" fg:w="6"/><text x="59.3299%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="59.1606%" y="165" width="0.4036%" height="15" fill="rgb(217,74,48)" fg:x="733" fg:w="5"/><text x="59.4106%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="59.1606%" y="149" width="0.4036%" height="15" fill="rgb(205,82,50)" fg:x="733" fg:w="5"/><text x="59.4106%" y="159.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="59.2413%" y="133" width="0.3228%" height="15" fill="rgb(228,1,33)" fg:x="734" fg:w="4"/><text x="59.4913%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.0484%" y="165" width="0.0807%" height="15" fill="rgb(214,50,23)" fg:x="744" fg:w="1"/><text x="60.2984%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (8 samples, 0.65%)</title><rect x="59.5642%" y="181" width="0.6457%" height="15" fill="rgb(210,62,9)" fg:x="738" fg:w="8"/><text x="59.8142%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="60.1291%" y="165" width="0.0807%" height="15" fill="rgb(210,104,37)" fg:x="745" fg:w="1"/><text x="60.3791%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.1291%" y="149" width="0.0807%" height="15" fill="rgb(232,104,43)" fg:x="745" fg:w="1"/><text x="60.3791%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="60.2098%" y="181" width="0.1614%" height="15" fill="rgb(244,52,6)" fg:x="746" fg:w="2"/><text x="60.4598%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (217 samples, 17.51%)</title><rect x="42.9379%" y="229" width="17.5141%" height="15" fill="rgb(211,174,52)" fg:x="532" fg:w="217"/><text x="43.1879%" y="239.50">regex_automata::meta::strat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (161 samples, 12.99%)</title><rect x="47.4576%" y="213" width="12.9944%" height="15" fill="rgb(229,48,4)" fg:x="588" fg:w="161"/><text x="47.7076%" y="223.50">regex_automata::nfa:..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (24 samples, 1.94%)</title><rect x="58.5149%" y="197" width="1.9370%" height="15" fill="rgb(205,155,16)" fg:x="725" fg:w="24"/><text x="58.7649%" y="207.50">r..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="60.3713%" y="181" width="0.0807%" height="15" fill="rgb(211,141,53)" fg:x="748" fg:w="1"/><text x="60.6213%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.3713%" y="165" width="0.0807%" height="15" fill="rgb(240,148,11)" fg:x="748" fg:w="1"/><text x="60.6213%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.3713%" y="149" width="0.0807%" height="15" fill="rgb(214,45,23)" fg:x="748" fg:w="1"/><text x="60.6213%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="60.3713%" y="133" width="0.0807%" height="15" fill="rgb(248,74,26)" fg:x="748" fg:w="1"/><text x="60.6213%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="60.4520%" y="181" width="0.0807%" height="15" fill="rgb(218,121,16)" fg:x="749" fg:w="1"/><text x="60.7020%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="60.5327%" y="181" width="0.0807%" height="15" fill="rgb(218,10,47)" fg:x="750" fg:w="1"/><text x="60.7827%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="60.4520%" y="197" width="0.3228%" height="15" fill="rgb(227,99,14)" fg:x="749" fg:w="4"/><text x="60.7020%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="60.6134%" y="181" width="0.1614%" height="15" fill="rgb(229,83,46)" fg:x="751" fg:w="2"/><text x="60.8634%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="60.6134%" y="165" width="0.1614%" height="15" fill="rgb(228,25,1)" fg:x="751" fg:w="2"/><text x="60.8634%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="60.6134%" y="149" width="0.1614%" height="15" fill="rgb(252,190,15)" fg:x="751" fg:w="2"/><text x="60.8634%" y="159.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="60.6134%" y="133" width="0.1614%" height="15" fill="rgb(213,103,51)" fg:x="751" fg:w="2"/><text x="60.8634%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.7748%" y="181" width="0.0807%" height="15" fill="rgb(220,38,44)" fg:x="753" fg:w="1"/><text x="61.0248%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.7748%" y="165" width="0.0807%" height="15" fill="rgb(210,45,26)" fg:x="753" fg:w="1"/><text x="61.0248%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (3 samples, 0.24%)</title><rect x="60.7748%" y="197" width="0.2421%" height="15" fill="rgb(205,95,48)" fg:x="753" fg:w="3"/><text x="61.0248%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (2 samples, 0.16%)</title><rect x="60.8555%" y="181" width="0.1614%" height="15" fill="rgb(225,179,37)" fg:x="754" fg:w="2"/><text x="61.1055%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="60.9362%" y="165" width="0.0807%" height="15" fill="rgb(230,209,3)" fg:x="755" fg:w="1"/><text x="61.1862%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (9 samples, 0.73%)</title><rect x="60.4520%" y="229" width="0.7264%" height="15" fill="rgb(248,12,46)" fg:x="749" fg:w="9"/><text x="60.7020%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (9 samples, 0.73%)</title><rect x="60.4520%" y="213" width="0.7264%" height="15" fill="rgb(234,18,0)" fg:x="749" fg:w="9"/><text x="60.7020%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="61.0169%" y="197" width="0.1614%" height="15" fill="rgb(238,197,14)" fg:x="756" fg:w="2"/><text x="61.2669%" y="207.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="61.0977%" y="181" width="0.0807%" height="15" fill="rgb(251,162,48)" fg:x="757" fg:w="1"/><text x="61.3477%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (5 samples, 0.40%)</title><rect x="61.2591%" y="197" width="0.4036%" height="15" fill="rgb(237,73,42)" fg:x="759" fg:w="5"/><text x="61.5091%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (5 samples, 0.40%)</title><rect x="61.2591%" y="181" width="0.4036%" height="15" fill="rgb(211,108,8)" fg:x="759" fg:w="5"/><text x="61.5091%" y="191.50"></text></g><g><title>core::slice::sort::merge_sort (3 samples, 0.24%)</title><rect x="61.4205%" y="165" width="0.2421%" height="15" fill="rgb(213,45,22)" fg:x="761" fg:w="3"/><text x="61.6705%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.24%)</title><rect x="61.6626%" y="197" width="0.2421%" height="15" fill="rgb(252,154,5)" fg:x="764" fg:w="3"/><text x="61.9126%" y="207.50"></text></g><g><title>regex_syntax::hir::Properties::capture (2 samples, 0.16%)</title><rect x="61.7433%" y="181" width="0.1614%" height="15" fill="rgb(221,79,52)" fg:x="765" fg:w="2"/><text x="61.9933%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="61.7433%" y="165" width="0.1614%" height="15" fill="rgb(229,220,36)" fg:x="765" fg:w="2"/><text x="61.9933%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (244 samples, 19.69%)</title><rect x="42.2922%" y="277" width="19.6933%" height="15" fill="rgb(211,17,16)" fg:x="524" fg:w="244"/><text x="42.5422%" y="287.50">&lt;regex::regex::string::Regex as..</text></g><g><title>regex::builders::Builder::build_one_string (243 samples, 19.61%)</title><rect x="42.3729%" y="261" width="19.6126%" height="15" fill="rgb(222,55,31)" fg:x="525" fg:w="243"/><text x="42.6229%" y="271.50">regex::builders::Builder::build..</text></g><g><title>regex_automata::meta::regex::Builder::build (243 samples, 19.61%)</title><rect x="42.3729%" y="245" width="19.6126%" height="15" fill="rgb(221,221,31)" fg:x="525" fg:w="243"/><text x="42.6229%" y="255.50">regex_automata::meta::regex::Bu..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (10 samples, 0.81%)</title><rect x="61.1784%" y="229" width="0.8071%" height="15" fill="rgb(227,168,26)" fg:x="758" fg:w="10"/><text x="61.4284%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (10 samples, 0.81%)</title><rect x="61.1784%" y="213" width="0.8071%" height="15" fill="rgb(224,139,9)" fg:x="758" fg:w="10"/><text x="61.4284%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.9048%" y="197" width="0.0807%" height="15" fill="rgb(254,172,0)" fg:x="767" fg:w="1"/><text x="62.1548%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="61.9855%" y="245" width="0.0807%" height="15" fill="rgb(235,203,1)" fg:x="768" fg:w="1"/><text x="62.2355%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="61.9855%" y="229" width="0.0807%" height="15" fill="rgb(216,205,24)" fg:x="768" fg:w="1"/><text x="62.2355%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="61.9855%" y="213" width="0.0807%" height="15" fill="rgb(233,24,6)" fg:x="768" fg:w="1"/><text x="62.2355%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.9855%" y="197" width="0.0807%" height="15" fill="rgb(244,110,9)" fg:x="768" fg:w="1"/><text x="62.2355%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.9855%" y="181" width="0.0807%" height="15" fill="rgb(239,222,42)" fg:x="768" fg:w="1"/><text x="62.2355%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.0662%" y="229" width="0.0807%" height="15" fill="rgb(218,145,13)" fg:x="769" fg:w="1"/><text x="62.3162%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="61.9855%" y="277" width="0.2421%" height="15" fill="rgb(207,69,11)" fg:x="768" fg:w="3"/><text x="62.2355%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="61.9855%" y="261" width="0.2421%" height="15" fill="rgb(220,223,22)" fg:x="768" fg:w="3"/><text x="62.2355%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="62.0662%" y="245" width="0.1614%" height="15" fill="rgb(245,102,5)" fg:x="769" fg:w="2"/><text x="62.3162%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="62.1469%" y="229" width="0.0807%" height="15" fill="rgb(211,148,2)" fg:x="770" fg:w="1"/><text x="62.3969%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="62.2276%" y="261" width="0.1614%" height="15" fill="rgb(241,13,44)" fg:x="771" fg:w="2"/><text x="62.4776%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="62.2276%" y="245" width="0.1614%" height="15" fill="rgb(219,137,21)" fg:x="771" fg:w="2"/><text x="62.4776%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="62.3083%" y="229" width="0.0807%" height="15" fill="rgb(242,206,5)" fg:x="772" fg:w="1"/><text x="62.5583%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="62.3083%" y="213" width="0.0807%" height="15" fill="rgb(217,114,22)" fg:x="772" fg:w="1"/><text x="62.5583%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.3083%" y="197" width="0.0807%" height="15" fill="rgb(253,206,42)" fg:x="772" fg:w="1"/><text x="62.5583%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.3083%" y="181" width="0.0807%" height="15" fill="rgb(236,102,18)" fg:x="772" fg:w="1"/><text x="62.5583%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="63.0347%" y="181" width="0.1614%" height="15" fill="rgb(208,59,49)" fg:x="781" fg:w="2"/><text x="63.2847%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.1154%" y="165" width="0.0807%" height="15" fill="rgb(215,194,28)" fg:x="782" fg:w="1"/><text x="63.3654%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="63.1154%" y="149" width="0.0807%" height="15" fill="rgb(243,207,11)" fg:x="782" fg:w="1"/><text x="63.3654%" y="159.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (15 samples, 1.21%)</title><rect x="62.4697%" y="197" width="1.2107%" height="15" fill="rgb(254,179,35)" fg:x="774" fg:w="15"/><text x="62.7197%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (6 samples, 0.48%)</title><rect x="63.1961%" y="181" width="0.4843%" height="15" fill="rgb(235,97,3)" fg:x="783" fg:w="6"/><text x="63.4461%" y="191.50"></text></g><g><title>indefinite::rules::number::Number::check (266 samples, 21.47%)</title><rect x="42.2922%" y="293" width="21.4689%" height="15" fill="rgb(215,155,33)" fg:x="524" fg:w="266"/><text x="42.5422%" y="303.50">indefinite::rules::number::Number:..</text></g><g><title>regex::regex::string::Regex::is_match_at (19 samples, 1.53%)</title><rect x="62.2276%" y="277" width="1.5335%" height="15" fill="rgb(223,128,12)" fg:x="771" fg:w="19"/><text x="62.4776%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (17 samples, 1.37%)</title><rect x="62.3890%" y="261" width="1.3721%" height="15" fill="rgb(208,157,18)" fg:x="773" fg:w="17"/><text x="62.6390%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (17 samples, 1.37%)</title><rect x="62.3890%" y="245" width="1.3721%" height="15" fill="rgb(249,70,54)" fg:x="773" fg:w="17"/><text x="62.6390%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (17 samples, 1.37%)</title><rect x="62.3890%" y="229" width="1.3721%" height="15" fill="rgb(244,118,24)" fg:x="773" fg:w="17"/><text x="62.6390%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (16 samples, 1.29%)</title><rect x="62.4697%" y="213" width="1.2914%" height="15" fill="rgb(211,54,0)" fg:x="774" fg:w="16"/><text x="62.7197%" y="223.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="63.6804%" y="197" width="0.0807%" height="15" fill="rgb(245,137,45)" fg:x="789" fg:w="1"/><text x="63.9304%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="63.6804%" y="181" width="0.0807%" height="15" fill="rgb(232,154,31)" fg:x="789" fg:w="1"/><text x="63.9304%" y="191.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="63.7611%" y="277" width="0.0807%" height="15" fill="rgb(253,6,39)" fg:x="790" fg:w="1"/><text x="64.0111%" y="287.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_lower (1 samples, 0.08%)</title><rect x="63.7611%" y="261" width="0.0807%" height="15" fill="rgb(234,183,24)" fg:x="790" fg:w="1"/><text x="64.0111%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="63.9225%" y="245" width="0.0807%" height="15" fill="rgb(252,84,40)" fg:x="792" fg:w="1"/><text x="64.1725%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.0032%" y="245" width="0.0807%" height="15" fill="rgb(224,65,2)" fg:x="793" fg:w="1"/><text x="64.2532%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="64.1646%" y="213" width="0.1614%" height="15" fill="rgb(229,38,24)" fg:x="795" fg:w="2"/><text x="64.4146%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="64.1646%" y="197" width="0.1614%" height="15" fill="rgb(218,131,50)" fg:x="795" fg:w="2"/><text x="64.4146%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.2454%" y="181" width="0.0807%" height="15" fill="rgb(233,106,18)" fg:x="796" fg:w="1"/><text x="64.4954%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="64.3261%" y="181" width="0.0807%" height="15" fill="rgb(220,216,11)" fg:x="797" fg:w="1"/><text x="64.5761%" y="191.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="64.3261%" y="165" width="0.0807%" height="15" fill="rgb(251,100,45)" fg:x="797" fg:w="1"/><text x="64.5761%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="64.3261%" y="213" width="0.1614%" height="15" fill="rgb(235,143,32)" fg:x="797" fg:w="2"/><text x="64.5761%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="64.3261%" y="197" width="0.1614%" height="15" fill="rgb(248,124,34)" fg:x="797" fg:w="2"/><text x="64.5761%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="64.4068%" y="181" width="0.0807%" height="15" fill="rgb(225,221,4)" fg:x="798" fg:w="1"/><text x="64.6568%" y="191.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="64.4068%" y="165" width="0.0807%" height="15" fill="rgb(242,27,43)" fg:x="798" fg:w="1"/><text x="64.6568%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.4068%" y="149" width="0.0807%" height="15" fill="rgb(227,54,8)" fg:x="798" fg:w="1"/><text x="64.6568%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="64.6489%" y="197" width="0.1614%" height="15" fill="rgb(253,139,49)" fg:x="801" fg:w="2"/><text x="64.8989%" y="207.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="64.6489%" y="181" width="0.1614%" height="15" fill="rgb(231,26,43)" fg:x="801" fg:w="2"/><text x="64.8989%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="64.8103%" y="197" width="0.3228%" height="15" fill="rgb(207,121,39)" fg:x="803" fg:w="4"/><text x="65.0603%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="64.8103%" y="181" width="0.3228%" height="15" fill="rgb(223,101,35)" fg:x="803" fg:w="4"/><text x="65.0603%" y="191.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="65.0525%" y="165" width="0.0807%" height="15" fill="rgb(232,87,23)" fg:x="806" fg:w="1"/><text x="65.3025%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.1332%" y="165" width="0.0807%" height="15" fill="rgb(225,180,29)" fg:x="807" fg:w="1"/><text x="65.3832%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="65.1332%" y="181" width="0.1614%" height="15" fill="rgb(225,25,17)" fg:x="807" fg:w="2"/><text x="65.3832%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="65.2139%" y="165" width="0.0807%" height="15" fill="rgb(223,8,52)" fg:x="808" fg:w="1"/><text x="65.4639%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="65.2139%" y="149" width="0.0807%" height="15" fill="rgb(246,42,21)" fg:x="808" fg:w="1"/><text x="65.4639%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="65.2139%" y="133" width="0.0807%" height="15" fill="rgb(205,64,43)" fg:x="808" fg:w="1"/><text x="65.4639%" y="143.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="65.3753%" y="165" width="0.1614%" height="15" fill="rgb(221,160,13)" fg:x="810" fg:w="2"/><text x="65.6253%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="65.5367%" y="165" width="0.0807%" height="15" fill="rgb(239,58,35)" fg:x="812" fg:w="1"/><text x="65.7867%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="65.6174%" y="165" width="0.0807%" height="15" fill="rgb(251,26,40)" fg:x="813" fg:w="1"/><text x="65.8674%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.56%)</title><rect x="65.6981%" y="165" width="0.5650%" height="15" fill="rgb(247,0,4)" fg:x="814" fg:w="7"/><text x="65.9481%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (23 samples, 1.86%)</title><rect x="64.4875%" y="213" width="1.8563%" height="15" fill="rgb(218,130,10)" fg:x="799" fg:w="23"/><text x="64.7375%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (15 samples, 1.21%)</title><rect x="65.1332%" y="197" width="1.2107%" height="15" fill="rgb(239,32,7)" fg:x="807" fg:w="15"/><text x="65.3832%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (13 samples, 1.05%)</title><rect x="65.2946%" y="181" width="1.0492%" height="15" fill="rgb(210,192,24)" fg:x="809" fg:w="13"/><text x="65.5446%" y="191.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="66.2631%" y="165" width="0.0807%" height="15" fill="rgb(226,212,17)" fg:x="821" fg:w="1"/><text x="66.5131%" y="175.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::fixup_slot_ranges (1 samples, 0.08%)</title><rect x="66.2631%" y="149" width="0.0807%" height="15" fill="rgb(219,201,28)" fg:x="821" fg:w="1"/><text x="66.5131%" y="159.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="66.3438%" y="165" width="0.1614%" height="15" fill="rgb(235,207,41)" fg:x="822" fg:w="2"/><text x="66.5938%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="66.5052%" y="165" width="0.1614%" height="15" fill="rgb(241,95,54)" fg:x="824" fg:w="2"/><text x="66.7552%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (2 samples, 0.16%)</title><rect x="66.5052%" y="149" width="0.1614%" height="15" fill="rgb(248,12,23)" fg:x="824" fg:w="2"/><text x="66.7552%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="66.5860%" y="133" width="0.0807%" height="15" fill="rgb(228,173,4)" fg:x="825" fg:w="1"/><text x="66.8360%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="66.6667%" y="149" width="0.1614%" height="15" fill="rgb(254,99,5)" fg:x="826" fg:w="2"/><text x="66.9167%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="66.6667%" y="133" width="0.1614%" height="15" fill="rgb(212,184,17)" fg:x="826" fg:w="2"/><text x="66.9167%" y="143.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="66.6667%" y="117" width="0.1614%" height="15" fill="rgb(252,174,1)" fg:x="826" fg:w="2"/><text x="66.9167%" y="127.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (7 samples, 0.56%)</title><rect x="66.3438%" y="181" width="0.5650%" height="15" fill="rgb(241,118,51)" fg:x="822" fg:w="7"/><text x="66.5938%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="66.6667%" y="165" width="0.2421%" height="15" fill="rgb(227,94,47)" fg:x="826" fg:w="3"/><text x="66.9167%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="66.8281%" y="149" width="0.0807%" height="15" fill="rgb(229,104,2)" fg:x="828" fg:w="1"/><text x="67.0781%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="66.8281%" y="133" width="0.0807%" height="15" fill="rgb(219,28,31)" fg:x="828" fg:w="1"/><text x="67.0781%" y="143.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="66.9088%" y="165" width="0.0807%" height="15" fill="rgb(233,109,36)" fg:x="829" fg:w="1"/><text x="67.1588%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (9 samples, 0.73%)</title><rect x="66.3438%" y="213" width="0.7264%" height="15" fill="rgb(246,88,11)" fg:x="822" fg:w="9"/><text x="66.5938%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (9 samples, 0.73%)</title><rect x="66.3438%" y="197" width="0.7264%" height="15" fill="rgb(209,212,17)" fg:x="822" fg:w="9"/><text x="66.5938%" y="207.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="66.9088%" y="181" width="0.1614%" height="15" fill="rgb(243,59,29)" fg:x="829" fg:w="2"/><text x="67.1588%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.9895%" y="165" width="0.0807%" height="15" fill="rgb(244,205,48)" fg:x="830" fg:w="1"/><text x="67.2395%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.9895%" y="149" width="0.0807%" height="15" fill="rgb(227,30,6)" fg:x="830" fg:w="1"/><text x="67.2395%" y="159.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="67.0702%" y="181" width="0.0807%" height="15" fill="rgb(220,205,48)" fg:x="831" fg:w="1"/><text x="67.3202%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="67.0702%" y="165" width="0.0807%" height="15" fill="rgb(250,94,14)" fg:x="831" fg:w="1"/><text x="67.3202%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.1509%" y="165" width="0.0807%" height="15" fill="rgb(216,119,42)" fg:x="832" fg:w="1"/><text x="67.4009%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.2316%" y="165" width="0.0807%" height="15" fill="rgb(232,155,0)" fg:x="833" fg:w="1"/><text x="67.4816%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.2316%" y="149" width="0.0807%" height="15" fill="rgb(212,24,32)" fg:x="833" fg:w="1"/><text x="67.4816%" y="159.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.24%)</title><rect x="67.1509%" y="181" width="0.2421%" height="15" fill="rgb(216,69,20)" fg:x="832" fg:w="3"/><text x="67.4009%" y="191.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="67.3123%" y="165" width="0.0807%" height="15" fill="rgb(229,73,31)" fg:x="834" fg:w="1"/><text x="67.5623%" y="175.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="67.3123%" y="149" width="0.0807%" height="15" fill="rgb(224,219,20)" fg:x="834" fg:w="1"/><text x="67.5623%" y="159.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (42 samples, 3.39%)</title><rect x="64.0839%" y="229" width="3.3898%" height="15" fill="rgb(215,146,41)" fg:x="794" fg:w="42"/><text x="64.3339%" y="239.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.40%)</title><rect x="67.0702%" y="213" width="0.4036%" height="15" fill="rgb(244,71,31)" fg:x="831" fg:w="5"/><text x="67.3202%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.40%)</title><rect x="67.0702%" y="197" width="0.4036%" height="15" fill="rgb(224,24,11)" fg:x="831" fg:w="5"/><text x="67.3202%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="67.3931%" y="181" width="0.0807%" height="15" fill="rgb(229,76,15)" fg:x="835" fg:w="1"/><text x="67.6431%" y="191.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="67.3931%" y="165" width="0.0807%" height="15" fill="rgb(209,93,2)" fg:x="835" fg:w="1"/><text x="67.6431%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.3931%" y="149" width="0.0807%" height="15" fill="rgb(216,200,50)" fg:x="835" fg:w="1"/><text x="67.6431%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.3931%" y="133" width="0.0807%" height="15" fill="rgb(211,67,34)" fg:x="835" fg:w="1"/><text x="67.6431%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.3931%" y="117" width="0.0807%" height="15" fill="rgb(225,87,47)" fg:x="835" fg:w="1"/><text x="67.6431%" y="127.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (45 samples, 3.63%)</title><rect x="63.9225%" y="261" width="3.6320%" height="15" fill="rgb(217,185,16)" fg:x="792" fg:w="45"/><text x="64.1725%" y="271.50">&lt;reg..</text></g><g><title>regex::builders::Builder::build_one_string (43 samples, 3.47%)</title><rect x="64.0839%" y="245" width="3.4705%" height="15" fill="rgb(205,0,0)" fg:x="794" fg:w="43"/><text x="64.3339%" y="255.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::configure (1 samples, 0.08%)</title><rect x="67.4738%" y="229" width="0.0807%" height="15" fill="rgb(207,116,45)" fg:x="836" fg:w="1"/><text x="67.7238%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="67.6352%" y="229" width="0.0807%" height="15" fill="rgb(221,156,26)" fg:x="838" fg:w="1"/><text x="67.8852%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.6352%" y="213" width="0.0807%" height="15" fill="rgb(213,140,4)" fg:x="838" fg:w="1"/><text x="67.8852%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.6352%" y="197" width="0.0807%" height="15" fill="rgb(231,224,15)" fg:x="838" fg:w="1"/><text x="67.8852%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="67.6352%" y="181" width="0.0807%" height="15" fill="rgb(244,76,20)" fg:x="838" fg:w="1"/><text x="67.8852%" y="191.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.24%)</title><rect x="67.5545%" y="261" width="0.2421%" height="15" fill="rgb(238,117,7)" fg:x="837" fg:w="3"/><text x="67.8045%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="67.6352%" y="245" width="0.1614%" height="15" fill="rgb(235,1,10)" fg:x="838" fg:w="2"/><text x="67.8852%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="67.7159%" y="229" width="0.0807%" height="15" fill="rgb(216,165,6)" fg:x="839" fg:w="1"/><text x="67.9659%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="67.8773%" y="229" width="0.0807%" height="15" fill="rgb(246,91,35)" fg:x="841" fg:w="1"/><text x="68.1273%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="67.8773%" y="213" width="0.0807%" height="15" fill="rgb(228,96,24)" fg:x="841" fg:w="1"/><text x="68.1273%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="67.7966%" y="261" width="0.2421%" height="15" fill="rgb(254,217,53)" fg:x="840" fg:w="3"/><text x="68.0466%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="67.8773%" y="245" width="0.1614%" height="15" fill="rgb(209,60,0)" fg:x="841" fg:w="2"/><text x="68.1273%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="67.9580%" y="229" width="0.0807%" height="15" fill="rgb(250,93,26)" fg:x="842" fg:w="1"/><text x="68.2080%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="67.9580%" y="213" width="0.0807%" height="15" fill="rgb(211,9,40)" fg:x="842" fg:w="1"/><text x="68.2080%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.9580%" y="197" width="0.0807%" height="15" fill="rgb(242,57,20)" fg:x="842" fg:w="1"/><text x="68.2080%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.0387%" y="213" width="0.0807%" height="15" fill="rgb(248,85,48)" fg:x="843" fg:w="1"/><text x="68.2887%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.56%)</title><rect x="68.2002%" y="197" width="0.5650%" height="15" fill="rgb(212,117,2)" fg:x="845" fg:w="7"/><text x="68.4502%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.6844%" y="181" width="0.0807%" height="15" fill="rgb(243,19,3)" fg:x="851" fg:w="1"/><text x="68.9344%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.6844%" y="165" width="0.0807%" height="15" fill="rgb(232,217,24)" fg:x="851" fg:w="1"/><text x="68.9344%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="68.6844%" y="149" width="0.0807%" height="15" fill="rgb(224,175,40)" fg:x="851" fg:w="1"/><text x="68.9344%" y="159.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (517 samples, 41.73%)</title><rect x="27.1994%" y="373" width="41.7272%" height="15" fill="rgb(212,162,32)" fg:x="337" fg:w="517"/><text x="27.4494%" y="383.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Obser..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (493 samples, 39.79%)</title><rect x="29.1364%" y="357" width="39.7902%" height="15" fill="rgb(215,9,4)" fg:x="361" fg:w="493"/><text x="29.3864%" y="367.50">plugins_core::looking::model::Unqualified::qualify</text></g><g><title>indefinite::indefinite (493 samples, 39.79%)</title><rect x="29.1364%" y="341" width="39.7902%" height="15" fill="rgb(242,42,7)" fg:x="361" fg:w="493"/><text x="29.3864%" y="351.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (493 samples, 39.79%)</title><rect x="29.1364%" y="325" width="39.7902%" height="15" fill="rgb(242,184,45)" fg:x="361" fg:w="493"/><text x="29.3864%" y="335.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (491 samples, 39.63%)</title><rect x="29.2978%" y="309" width="39.6287%" height="15" fill="rgb(228,111,51)" fg:x="363" fg:w="491"/><text x="29.5478%" y="319.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (64 samples, 5.17%)</title><rect x="63.7611%" y="293" width="5.1655%" height="15" fill="rgb(236,147,17)" fg:x="790" fg:w="64"/><text x="64.0111%" y="303.50">indefi..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (63 samples, 5.08%)</title><rect x="63.8418%" y="277" width="5.0847%" height="15" fill="rgb(210,75,22)" fg:x="791" fg:w="63"/><text x="64.0918%" y="287.50">indefi..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (11 samples, 0.89%)</title><rect x="68.0387%" y="261" width="0.8878%" height="15" fill="rgb(217,159,45)" fg:x="843" fg:w="11"/><text x="68.2887%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (11 samples, 0.89%)</title><rect x="68.0387%" y="245" width="0.8878%" height="15" fill="rgb(245,165,53)" fg:x="843" fg:w="11"/><text x="68.2887%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (11 samples, 0.89%)</title><rect x="68.0387%" y="229" width="0.8878%" height="15" fill="rgb(251,190,50)" fg:x="843" fg:w="11"/><text x="68.2887%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (10 samples, 0.81%)</title><rect x="68.1195%" y="213" width="0.8071%" height="15" fill="rgb(208,203,29)" fg:x="844" fg:w="10"/><text x="68.3695%" y="223.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="68.7651%" y="197" width="0.1614%" height="15" fill="rgb(207,209,35)" fg:x="852" fg:w="2"/><text x="69.0151%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="68.7651%" y="181" width="0.1614%" height="15" fill="rgb(230,144,49)" fg:x="852" fg:w="2"/><text x="69.0151%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="68.7651%" y="165" width="0.1614%" height="15" fill="rgb(229,31,6)" fg:x="852" fg:w="2"/><text x="69.0151%" y="175.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="68.7651%" y="149" width="0.1614%" height="15" fill="rgb(251,129,24)" fg:x="852" fg:w="2"/><text x="69.0151%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.9266%" y="309" width="0.0807%" height="15" fill="rgb(235,105,15)" fg:x="854" fg:w="1"/><text x="69.1766%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.9266%" y="293" width="0.0807%" height="15" fill="rgb(216,52,43)" fg:x="854" fg:w="1"/><text x="69.1766%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.9266%" y="277" width="0.0807%" height="15" fill="rgb(238,144,41)" fg:x="854" fg:w="1"/><text x="69.1766%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.9266%" y="261" width="0.0807%" height="15" fill="rgb(243,63,9)" fg:x="854" fg:w="1"/><text x="69.1766%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.9266%" y="245" width="0.0807%" height="15" fill="rgb(246,208,1)" fg:x="854" fg:w="1"/><text x="69.1766%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="68.9266%" y="229" width="0.0807%" height="15" fill="rgb(233,182,18)" fg:x="854" fg:w="1"/><text x="69.1766%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="68.9266%" y="213" width="0.0807%" height="15" fill="rgb(242,224,8)" fg:x="854" fg:w="1"/><text x="69.1766%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.9266%" y="357" width="0.1614%" height="15" fill="rgb(243,54,37)" fg:x="854" fg:w="2"/><text x="69.1766%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="68.9266%" y="341" width="0.1614%" height="15" fill="rgb(233,192,12)" fg:x="854" fg:w="2"/><text x="69.1766%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.9266%" y="325" width="0.1614%" height="15" fill="rgb(251,192,53)" fg:x="854" fg:w="2"/><text x="69.1766%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.0073%" y="309" width="0.0807%" height="15" fill="rgb(246,141,26)" fg:x="855" fg:w="1"/><text x="69.2573%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="69.0880%" y="357" width="0.0807%" height="15" fill="rgb(239,195,19)" fg:x="856" fg:w="1"/><text x="69.3380%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="69.0880%" y="341" width="0.0807%" height="15" fill="rgb(241,16,39)" fg:x="856" fg:w="1"/><text x="69.3380%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="69.0880%" y="325" width="0.0807%" height="15" fill="rgb(223,13,53)" fg:x="856" fg:w="1"/><text x="69.3380%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.1687%" y="325" width="0.0807%" height="15" fill="rgb(214,227,0)" fg:x="857" fg:w="1"/><text x="69.4187%" y="335.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Occupyable&gt;::deserialize (2 samples, 0.16%)</title><rect x="69.1687%" y="357" width="0.1614%" height="15" fill="rgb(228,103,26)" fg:x="857" fg:w="2"/><text x="69.4187%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.1687%" y="341" width="0.1614%" height="15" fill="rgb(254,177,53)" fg:x="857" fg:w="2"/><text x="69.4187%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.2494%" y="325" width="0.0807%" height="15" fill="rgb(208,201,34)" fg:x="858" fg:w="1"/><text x="69.4994%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.2494%" y="309" width="0.0807%" height="15" fill="rgb(212,39,5)" fg:x="858" fg:w="1"/><text x="69.4994%" y="319.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.2494%" y="293" width="0.0807%" height="15" fill="rgb(246,117,3)" fg:x="858" fg:w="1"/><text x="69.4994%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="69.3301%" y="325" width="0.1614%" height="15" fill="rgb(244,118,39)" fg:x="859" fg:w="2"/><text x="69.5801%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.6529%" y="245" width="0.0807%" height="15" fill="rgb(241,64,10)" fg:x="863" fg:w="1"/><text x="69.9029%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.6529%" y="229" width="0.0807%" height="15" fill="rgb(229,39,44)" fg:x="863" fg:w="1"/><text x="69.9029%" y="239.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (11 samples, 0.89%)</title><rect x="68.9266%" y="373" width="0.8878%" height="15" fill="rgb(230,226,3)" fg:x="854" fg:w="11"/><text x="69.1766%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.48%)</title><rect x="69.3301%" y="357" width="0.4843%" height="15" fill="rgb(222,13,42)" fg:x="859" fg:w="6"/><text x="69.5801%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="69.3301%" y="341" width="0.4843%" height="15" fill="rgb(247,180,54)" fg:x="859" fg:w="6"/><text x="69.5801%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (4 samples, 0.32%)</title><rect x="69.4915%" y="325" width="0.3228%" height="15" fill="rgb(205,96,16)" fg:x="861" fg:w="4"/><text x="69.7415%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (4 samples, 0.32%)</title><rect x="69.4915%" y="309" width="0.3228%" height="15" fill="rgb(205,100,21)" fg:x="861" fg:w="4"/><text x="69.7415%" y="319.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 0.24%)</title><rect x="69.5722%" y="293" width="0.2421%" height="15" fill="rgb(248,51,4)" fg:x="862" fg:w="3"/><text x="69.8222%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="69.5722%" y="277" width="0.2421%" height="15" fill="rgb(217,197,30)" fg:x="862" fg:w="3"/><text x="69.8222%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="69.5722%" y="261" width="0.2421%" height="15" fill="rgb(240,179,40)" fg:x="862" fg:w="3"/><text x="69.8222%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.7337%" y="245" width="0.0807%" height="15" fill="rgb(212,185,35)" fg:x="864" fg:w="1"/><text x="69.9837%" y="255.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="69.8951%" y="341" width="0.0807%" height="15" fill="rgb(251,222,31)" fg:x="866" fg:w="1"/><text x="70.1451%" y="351.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="69.8951%" y="325" width="0.0807%" height="15" fill="rgb(208,140,36)" fg:x="866" fg:w="1"/><text x="70.1451%" y="335.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="69.9758%" y="309" width="0.0807%" height="15" fill="rgb(220,148,1)" fg:x="867" fg:w="1"/><text x="70.2258%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="69.9758%" y="293" width="0.0807%" height="15" fill="rgb(254,4,28)" fg:x="867" fg:w="1"/><text x="70.2258%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="69.9758%" y="325" width="0.2421%" height="15" fill="rgb(222,185,44)" fg:x="867" fg:w="3"/><text x="70.2258%" y="335.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="70.0565%" y="309" width="0.1614%" height="15" fill="rgb(215,74,39)" fg:x="868" fg:w="2"/><text x="70.3065%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="70.0565%" y="293" width="0.1614%" height="15" fill="rgb(247,86,4)" fg:x="868" fg:w="2"/><text x="70.3065%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="70.0565%" y="277" width="0.1614%" height="15" fill="rgb(231,105,32)" fg:x="868" fg:w="2"/><text x="70.3065%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="70.0565%" y="261" width="0.1614%" height="15" fill="rgb(222,65,35)" fg:x="868" fg:w="2"/><text x="70.3065%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.1372%" y="245" width="0.0807%" height="15" fill="rgb(218,145,35)" fg:x="869" fg:w="1"/><text x="70.3872%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.2179%" y="277" width="0.0807%" height="15" fill="rgb(208,7,15)" fg:x="870" fg:w="1"/><text x="70.4679%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.2179%" y="261" width="0.0807%" height="15" fill="rgb(209,83,13)" fg:x="870" fg:w="1"/><text x="70.4679%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.2179%" y="245" width="0.0807%" height="15" fill="rgb(218,3,10)" fg:x="870" fg:w="1"/><text x="70.4679%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.2179%" y="229" width="0.0807%" height="15" fill="rgb(211,219,4)" fg:x="870" fg:w="1"/><text x="70.4679%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.2179%" y="213" width="0.0807%" height="15" fill="rgb(228,194,12)" fg:x="870" fg:w="1"/><text x="70.4679%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.2179%" y="197" width="0.0807%" height="15" fill="rgb(210,175,7)" fg:x="870" fg:w="1"/><text x="70.4679%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="70.2179%" y="181" width="0.0807%" height="15" fill="rgb(243,132,6)" fg:x="870" fg:w="1"/><text x="70.4679%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="70.2179%" y="165" width="0.0807%" height="15" fill="rgb(207,72,18)" fg:x="870" fg:w="1"/><text x="70.4679%" y="175.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntry&gt;::to_entry (7 samples, 0.56%)</title><rect x="69.8144%" y="373" width="0.5650%" height="15" fill="rgb(236,1,18)" fg:x="865" fg:w="7"/><text x="70.0644%" y="383.50"></text></g><g><title>kernel::model::entry::EntryResolver::entry (6 samples, 0.48%)</title><rect x="69.8951%" y="357" width="0.4843%" height="15" fill="rgb(227,0,18)" fg:x="866" fg:w="6"/><text x="70.1451%" y="367.50"></text></g><g><title>kernel::model::entry::Entry::new (5 samples, 0.40%)</title><rect x="69.9758%" y="341" width="0.4036%" height="15" fill="rgb(247,37,5)" fg:x="867" fg:w="5"/><text x="70.2258%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="70.2179%" y="325" width="0.1614%" height="15" fill="rgb(237,179,24)" fg:x="870" fg:w="2"/><text x="70.4679%" y="335.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="70.2179%" y="309" width="0.1614%" height="15" fill="rgb(226,53,20)" fg:x="870" fg:w="2"/><text x="70.4679%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="70.2179%" y="293" width="0.1614%" height="15" fill="rgb(247,75,7)" fg:x="870" fg:w="2"/><text x="70.4679%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.2986%" y="277" width="0.0807%" height="15" fill="rgb(233,96,12)" fg:x="871" fg:w="1"/><text x="70.5486%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.2986%" y="261" width="0.0807%" height="15" fill="rgb(224,125,0)" fg:x="871" fg:w="1"/><text x="70.5486%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="70.2986%" y="245" width="0.0807%" height="15" fill="rgb(224,92,25)" fg:x="871" fg:w="1"/><text x="70.5486%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.2986%" y="229" width="0.0807%" height="15" fill="rgb(224,42,24)" fg:x="871" fg:w="1"/><text x="70.5486%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.2986%" y="213" width="0.0807%" height="15" fill="rgb(234,132,49)" fg:x="871" fg:w="1"/><text x="70.5486%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.2986%" y="197" width="0.0807%" height="15" fill="rgb(248,100,35)" fg:x="871" fg:w="1"/><text x="70.5486%" y="207.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (545 samples, 43.99%)</title><rect x="26.4730%" y="581" width="43.9871%" height="15" fill="rgb(239,94,40)" fg:x="328" fg:w="545"/><text x="26.7230%" y="591.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (545 samples, 43.99%)</title><rect x="26.4730%" y="565" width="43.9871%" height="15" fill="rgb(235,139,28)" fg:x="328" fg:w="545"/><text x="26.7230%" y="575.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (545 samples, 43.99%)</title><rect x="26.4730%" y="549" width="43.9871%" height="15" fill="rgb(217,144,7)" fg:x="328" fg:w="545"/><text x="26.7230%" y="559.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (545 samples, 43.99%)</title><rect x="26.4730%" y="533" width="43.9871%" height="15" fill="rgb(227,55,4)" fg:x="328" fg:w="545"/><text x="26.7230%" y="543.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::M..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (540 samples, 43.58%)</title><rect x="26.8765%" y="517" width="43.5835%" height="15" fill="rgb(252,82,54)" fg:x="333" fg:w="540"/><text x="27.1265%" y="527.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (540 samples, 43.58%)</title><rect x="26.8765%" y="501" width="43.5835%" height="15" fill="rgb(245,172,4)" fg:x="333" fg:w="540"/><text x="27.1265%" y="511.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;:..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (540 samples, 43.58%)</title><rect x="26.8765%" y="485" width="43.5835%" height="15" fill="rgb(207,26,27)" fg:x="333" fg:w="540"/><text x="27.1265%" y="495.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (540 samples, 43.58%)</title><rect x="26.8765%" y="469" width="43.5835%" height="15" fill="rgb(252,98,18)" fg:x="333" fg:w="540"/><text x="27.1265%" y="479.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (540 samples, 43.58%)</title><rect x="26.8765%" y="453" width="43.5835%" height="15" fill="rgb(244,8,26)" fg:x="333" fg:w="540"/><text x="27.1265%" y="463.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (540 samples, 43.58%)</title><rect x="26.8765%" y="437" width="43.5835%" height="15" fill="rgb(237,173,45)" fg:x="333" fg:w="540"/><text x="27.1265%" y="447.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (540 samples, 43.58%)</title><rect x="26.8765%" y="421" width="43.5835%" height="15" fill="rgb(208,213,49)" fg:x="333" fg:w="540"/><text x="27.1265%" y="431.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (540 samples, 43.58%)</title><rect x="26.8765%" y="405" width="43.5835%" height="15" fill="rgb(212,122,37)" fg:x="333" fg:w="540"/><text x="27.1265%" y="415.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;..</text></g><g><title>plugins_core::looking::model::new_area_observation (536 samples, 43.26%)</title><rect x="27.1994%" y="389" width="43.2607%" height="15" fill="rgb(213,80,17)" fg:x="337" fg:w="536"/><text x="27.4494%" y="399.50">plugins_core::looking::model::new_area_observation</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.3793%" y="373" width="0.0807%" height="15" fill="rgb(206,210,43)" fg:x="872" fg:w="1"/><text x="70.6293%" y="383.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="70.5408%" y="533" width="0.0807%" height="15" fill="rgb(229,214,3)" fg:x="874" fg:w="1"/><text x="70.7908%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.7022%" y="501" width="0.0807%" height="15" fill="rgb(235,213,29)" fg:x="876" fg:w="1"/><text x="70.9522%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.7022%" y="485" width="0.0807%" height="15" fill="rgb(248,135,26)" fg:x="876" fg:w="1"/><text x="70.9522%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.7022%" y="469" width="0.0807%" height="15" fill="rgb(242,188,12)" fg:x="876" fg:w="1"/><text x="70.9522%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.7022%" y="453" width="0.0807%" height="15" fill="rgb(245,38,12)" fg:x="876" fg:w="1"/><text x="70.9522%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.7022%" y="437" width="0.0807%" height="15" fill="rgb(218,42,13)" fg:x="876" fg:w="1"/><text x="70.9522%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.7022%" y="421" width="0.0807%" height="15" fill="rgb(238,132,49)" fg:x="876" fg:w="1"/><text x="70.9522%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.7022%" y="405" width="0.0807%" height="15" fill="rgb(209,196,19)" fg:x="876" fg:w="1"/><text x="70.9522%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.7022%" y="389" width="0.0807%" height="15" fill="rgb(244,131,22)" fg:x="876" fg:w="1"/><text x="70.9522%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.7022%" y="373" width="0.0807%" height="15" fill="rgb(223,18,34)" fg:x="876" fg:w="1"/><text x="70.9522%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.7022%" y="357" width="0.0807%" height="15" fill="rgb(252,124,54)" fg:x="876" fg:w="1"/><text x="70.9522%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.7022%" y="341" width="0.0807%" height="15" fill="rgb(229,106,42)" fg:x="876" fg:w="1"/><text x="70.9522%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.7022%" y="325" width="0.0807%" height="15" fill="rgb(221,129,1)" fg:x="876" fg:w="1"/><text x="70.9522%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.7022%" y="309" width="0.0807%" height="15" fill="rgb(229,74,15)" fg:x="876" fg:w="1"/><text x="70.9522%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.7022%" y="293" width="0.0807%" height="15" fill="rgb(210,206,50)" fg:x="876" fg:w="1"/><text x="70.9522%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.7022%" y="277" width="0.0807%" height="15" fill="rgb(251,114,31)" fg:x="876" fg:w="1"/><text x="70.9522%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.7829%" y="421" width="0.0807%" height="15" fill="rgb(215,225,28)" fg:x="877" fg:w="1"/><text x="71.0329%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.7829%" y="405" width="0.0807%" height="15" fill="rgb(237,109,14)" fg:x="877" fg:w="1"/><text x="71.0329%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.7829%" y="389" width="0.0807%" height="15" fill="rgb(230,13,37)" fg:x="877" fg:w="1"/><text x="71.0329%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.7829%" y="373" width="0.0807%" height="15" fill="rgb(231,40,28)" fg:x="877" fg:w="1"/><text x="71.0329%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.7829%" y="357" width="0.0807%" height="15" fill="rgb(231,202,18)" fg:x="877" fg:w="1"/><text x="71.0329%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.7829%" y="341" width="0.0807%" height="15" fill="rgb(225,33,18)" fg:x="877" fg:w="1"/><text x="71.0329%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.7829%" y="325" width="0.0807%" height="15" fill="rgb(223,64,47)" fg:x="877" fg:w="1"/><text x="71.0329%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="70.7022%" y="517" width="0.2421%" height="15" fill="rgb(234,114,13)" fg:x="876" fg:w="3"/><text x="70.9522%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="70.7829%" y="501" width="0.1614%" height="15" fill="rgb(248,56,40)" fg:x="877" fg:w="2"/><text x="71.0329%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="70.7829%" y="485" width="0.1614%" height="15" fill="rgb(221,194,21)" fg:x="877" fg:w="2"/><text x="71.0329%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="70.7829%" y="469" width="0.1614%" height="15" fill="rgb(242,108,46)" fg:x="877" fg:w="2"/><text x="71.0329%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="70.7829%" y="453" width="0.1614%" height="15" fill="rgb(220,106,10)" fg:x="877" fg:w="2"/><text x="71.0329%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="70.7829%" y="437" width="0.1614%" height="15" fill="rgb(211,88,4)" fg:x="877" fg:w="2"/><text x="71.0329%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="70.8636%" y="421" width="0.0807%" height="15" fill="rgb(214,95,34)" fg:x="878" fg:w="1"/><text x="71.1136%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="70.8636%" y="405" width="0.0807%" height="15" fill="rgb(250,160,33)" fg:x="878" fg:w="1"/><text x="71.1136%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.9443%" y="421" width="0.0807%" height="15" fill="rgb(225,29,10)" fg:x="879" fg:w="1"/><text x="71.1943%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.9443%" y="405" width="0.0807%" height="15" fill="rgb(224,28,30)" fg:x="879" fg:w="1"/><text x="71.1943%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.9443%" y="389" width="0.0807%" height="15" fill="rgb(231,77,4)" fg:x="879" fg:w="1"/><text x="71.1943%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.9443%" y="373" width="0.0807%" height="15" fill="rgb(209,63,21)" fg:x="879" fg:w="1"/><text x="71.1943%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.9443%" y="357" width="0.0807%" height="15" fill="rgb(226,22,11)" fg:x="879" fg:w="1"/><text x="71.1943%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.9443%" y="341" width="0.0807%" height="15" fill="rgb(216,82,30)" fg:x="879" fg:w="1"/><text x="71.1943%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.9443%" y="325" width="0.0807%" height="15" fill="rgb(246,227,38)" fg:x="879" fg:w="1"/><text x="71.1943%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="71.0250%" y="421" width="0.0807%" height="15" fill="rgb(251,203,53)" fg:x="880" fg:w="1"/><text x="71.2750%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="71.0250%" y="405" width="0.0807%" height="15" fill="rgb(254,101,1)" fg:x="880" fg:w="1"/><text x="71.2750%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="71.0250%" y="389" width="0.0807%" height="15" fill="rgb(241,180,5)" fg:x="880" fg:w="1"/><text x="71.2750%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="71.0250%" y="373" width="0.0807%" height="15" fill="rgb(218,168,4)" fg:x="880" fg:w="1"/><text x="71.2750%" y="383.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (3 samples, 0.24%)</title><rect x="70.9443%" y="469" width="0.2421%" height="15" fill="rgb(224,223,32)" fg:x="879" fg:w="3"/><text x="71.1943%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="70.9443%" y="453" width="0.2421%" height="15" fill="rgb(236,106,22)" fg:x="879" fg:w="3"/><text x="71.1943%" y="463.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="70.9443%" y="437" width="0.2421%" height="15" fill="rgb(206,121,5)" fg:x="879" fg:w="3"/><text x="71.1943%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.1057%" y="421" width="0.0807%" height="15" fill="rgb(233,87,28)" fg:x="881" fg:w="1"/><text x="71.3557%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.1057%" y="405" width="0.0807%" height="15" fill="rgb(236,137,17)" fg:x="881" fg:w="1"/><text x="71.3557%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="71.1057%" y="389" width="0.0807%" height="15" fill="rgb(209,183,38)" fg:x="881" fg:w="1"/><text x="71.3557%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.1057%" y="373" width="0.0807%" height="15" fill="rgb(206,162,44)" fg:x="881" fg:w="1"/><text x="71.3557%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.1057%" y="357" width="0.0807%" height="15" fill="rgb(237,70,39)" fg:x="881" fg:w="1"/><text x="71.3557%" y="367.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="70.9443%" y="517" width="0.3228%" height="15" fill="rgb(212,176,5)" fg:x="879" fg:w="4"/><text x="71.1943%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="70.9443%" y="501" width="0.3228%" height="15" fill="rgb(232,95,16)" fg:x="879" fg:w="4"/><text x="71.1943%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="70.9443%" y="485" width="0.3228%" height="15" fill="rgb(219,115,35)" fg:x="879" fg:w="4"/><text x="71.1943%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.1864%" y="469" width="0.0807%" height="15" fill="rgb(251,67,27)" fg:x="882" fg:w="1"/><text x="71.4364%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.1864%" y="453" width="0.0807%" height="15" fill="rgb(222,95,40)" fg:x="882" fg:w="1"/><text x="71.4364%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="71.1864%" y="437" width="0.0807%" height="15" fill="rgb(250,35,16)" fg:x="882" fg:w="1"/><text x="71.4364%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="71.2672%" y="421" width="0.1614%" height="15" fill="rgb(224,86,44)" fg:x="883" fg:w="2"/><text x="71.5172%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="71.2672%" y="405" width="0.1614%" height="15" fill="rgb(237,53,53)" fg:x="883" fg:w="2"/><text x="71.5172%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="71.2672%" y="389" width="0.1614%" height="15" fill="rgb(208,171,33)" fg:x="883" fg:w="2"/><text x="71.5172%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="71.2672%" y="373" width="0.1614%" height="15" fill="rgb(222,64,27)" fg:x="883" fg:w="2"/><text x="71.5172%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="71.2672%" y="357" width="0.1614%" height="15" fill="rgb(221,121,35)" fg:x="883" fg:w="2"/><text x="71.5172%" y="367.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="71.3479%" y="341" width="0.0807%" height="15" fill="rgb(228,137,42)" fg:x="884" fg:w="1"/><text x="71.5979%" y="351.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="71.4286%" y="405" width="0.0807%" height="15" fill="rgb(227,54,21)" fg:x="885" fg:w="1"/><text x="71.6786%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="71.2672%" y="453" width="0.3228%" height="15" fill="rgb(240,168,33)" fg:x="883" fg:w="4"/><text x="71.5172%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="71.2672%" y="437" width="0.3228%" height="15" fill="rgb(243,159,6)" fg:x="883" fg:w="4"/><text x="71.5172%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="71.4286%" y="421" width="0.1614%" height="15" fill="rgb(205,211,41)" fg:x="885" fg:w="2"/><text x="71.6786%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.5093%" y="405" width="0.0807%" height="15" fill="rgb(253,30,1)" fg:x="886" fg:w="1"/><text x="71.7593%" y="415.50"></text></g><g><title>engine::session::Session::load_entity (14 samples, 1.13%)</title><rect x="70.5408%" y="549" width="1.1299%" height="15" fill="rgb(226,80,18)" fg:x="874" fg:w="14"/><text x="70.7908%" y="559.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (13 samples, 1.05%)</title><rect x="70.6215%" y="533" width="1.0492%" height="15" fill="rgb(253,156,46)" fg:x="875" fg:w="13"/><text x="70.8715%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.40%)</title><rect x="71.2672%" y="517" width="0.4036%" height="15" fill="rgb(248,87,27)" fg:x="883" fg:w="5"/><text x="71.5172%" y="527.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="71.2672%" y="501" width="0.4036%" height="15" fill="rgb(227,122,2)" fg:x="883" fg:w="5"/><text x="71.5172%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="71.2672%" y="485" width="0.4036%" height="15" fill="rgb(229,94,39)" fg:x="883" fg:w="5"/><text x="71.5172%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="71.2672%" y="469" width="0.4036%" height="15" fill="rgb(225,173,31)" fg:x="883" fg:w="5"/><text x="71.5172%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.5900%" y="453" width="0.0807%" height="15" fill="rgb(239,176,30)" fg:x="887" fg:w="1"/><text x="71.8400%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.5900%" y="437" width="0.0807%" height="15" fill="rgb(212,104,21)" fg:x="887" fg:w="1"/><text x="71.8400%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.6707%" y="469" width="0.0807%" height="15" fill="rgb(240,209,40)" fg:x="888" fg:w="1"/><text x="71.9207%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.6707%" y="453" width="0.0807%" height="15" fill="rgb(234,195,5)" fg:x="888" fg:w="1"/><text x="71.9207%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.6707%" y="437" width="0.0807%" height="15" fill="rgb(238,213,1)" fg:x="888" fg:w="1"/><text x="71.9207%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.6707%" y="421" width="0.0807%" height="15" fill="rgb(235,182,54)" fg:x="888" fg:w="1"/><text x="71.9207%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.6707%" y="405" width="0.0807%" height="15" fill="rgb(229,50,46)" fg:x="888" fg:w="1"/><text x="71.9207%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.6707%" y="389" width="0.0807%" height="15" fill="rgb(219,145,13)" fg:x="888" fg:w="1"/><text x="71.9207%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.6707%" y="373" width="0.0807%" height="15" fill="rgb(220,226,10)" fg:x="888" fg:w="1"/><text x="71.9207%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.6707%" y="357" width="0.0807%" height="15" fill="rgb(248,47,30)" fg:x="888" fg:w="1"/><text x="71.9207%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.6707%" y="341" width="0.0807%" height="15" fill="rgb(231,209,44)" fg:x="888" fg:w="1"/><text x="71.9207%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.6707%" y="325" width="0.0807%" height="15" fill="rgb(209,80,30)" fg:x="888" fg:w="1"/><text x="71.9207%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.6707%" y="309" width="0.0807%" height="15" fill="rgb(232,9,14)" fg:x="888" fg:w="1"/><text x="71.9207%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.6707%" y="293" width="0.0807%" height="15" fill="rgb(243,91,43)" fg:x="888" fg:w="1"/><text x="71.9207%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.6707%" y="485" width="0.1614%" height="15" fill="rgb(231,90,52)" fg:x="888" fg:w="2"/><text x="71.9207%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.7514%" y="469" width="0.0807%" height="15" fill="rgb(253,192,44)" fg:x="889" fg:w="1"/><text x="72.0014%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="71.6707%" y="501" width="0.2421%" height="15" fill="rgb(241,66,31)" fg:x="888" fg:w="3"/><text x="71.9207%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.8321%" y="485" width="0.0807%" height="15" fill="rgb(235,81,37)" fg:x="890" fg:w="1"/><text x="72.0821%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.8321%" y="469" width="0.0807%" height="15" fill="rgb(223,221,9)" fg:x="890" fg:w="1"/><text x="72.0821%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.8321%" y="453" width="0.0807%" height="15" fill="rgb(242,180,7)" fg:x="890" fg:w="1"/><text x="72.0821%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.8321%" y="437" width="0.0807%" height="15" fill="rgb(243,78,19)" fg:x="890" fg:w="1"/><text x="72.0821%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.8321%" y="421" width="0.0807%" height="15" fill="rgb(233,23,17)" fg:x="890" fg:w="1"/><text x="72.0821%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.8321%" y="405" width="0.0807%" height="15" fill="rgb(252,122,45)" fg:x="890" fg:w="1"/><text x="72.0821%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.8321%" y="389" width="0.0807%" height="15" fill="rgb(247,108,20)" fg:x="890" fg:w="1"/><text x="72.0821%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.8321%" y="373" width="0.0807%" height="15" fill="rgb(235,84,21)" fg:x="890" fg:w="1"/><text x="72.0821%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.8321%" y="357" width="0.0807%" height="15" fill="rgb(247,129,10)" fg:x="890" fg:w="1"/><text x="72.0821%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.8321%" y="341" width="0.0807%" height="15" fill="rgb(208,173,14)" fg:x="890" fg:w="1"/><text x="72.0821%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.8321%" y="325" width="0.0807%" height="15" fill="rgb(236,31,38)" fg:x="890" fg:w="1"/><text x="72.0821%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.8321%" y="309" width="0.0807%" height="15" fill="rgb(232,65,17)" fg:x="890" fg:w="1"/><text x="72.0821%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="71.6707%" y="517" width="0.3228%" height="15" fill="rgb(224,45,49)" fg:x="888" fg:w="4"/><text x="71.9207%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.9128%" y="501" width="0.0807%" height="15" fill="rgb(225,2,53)" fg:x="891" fg:w="1"/><text x="72.1628%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.9128%" y="485" width="0.0807%" height="15" fill="rgb(248,210,53)" fg:x="891" fg:w="1"/><text x="72.1628%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.9128%" y="469" width="0.0807%" height="15" fill="rgb(211,1,30)" fg:x="891" fg:w="1"/><text x="72.1628%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.9128%" y="453" width="0.0807%" height="15" fill="rgb(224,96,15)" fg:x="891" fg:w="1"/><text x="72.1628%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.9128%" y="437" width="0.0807%" height="15" fill="rgb(252,45,11)" fg:x="891" fg:w="1"/><text x="72.1628%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.9128%" y="421" width="0.0807%" height="15" fill="rgb(220,125,38)" fg:x="891" fg:w="1"/><text x="72.1628%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.9128%" y="405" width="0.0807%" height="15" fill="rgb(243,161,33)" fg:x="891" fg:w="1"/><text x="72.1628%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.9128%" y="389" width="0.0807%" height="15" fill="rgb(248,197,34)" fg:x="891" fg:w="1"/><text x="72.1628%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.9128%" y="373" width="0.0807%" height="15" fill="rgb(228,165,23)" fg:x="891" fg:w="1"/><text x="72.1628%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.9128%" y="357" width="0.0807%" height="15" fill="rgb(236,94,38)" fg:x="891" fg:w="1"/><text x="72.1628%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.9128%" y="341" width="0.0807%" height="15" fill="rgb(220,13,23)" fg:x="891" fg:w="1"/><text x="72.1628%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.9128%" y="325" width="0.0807%" height="15" fill="rgb(234,26,39)" fg:x="891" fg:w="1"/><text x="72.1628%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.0743%" y="437" width="0.0807%" height="15" fill="rgb(205,117,44)" fg:x="893" fg:w="1"/><text x="72.3243%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.0743%" y="421" width="0.0807%" height="15" fill="rgb(250,42,2)" fg:x="893" fg:w="1"/><text x="72.3243%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.0743%" y="405" width="0.0807%" height="15" fill="rgb(223,83,14)" fg:x="893" fg:w="1"/><text x="72.3243%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.0743%" y="389" width="0.0807%" height="15" fill="rgb(241,147,50)" fg:x="893" fg:w="1"/><text x="72.3243%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.0743%" y="373" width="0.0807%" height="15" fill="rgb(218,90,6)" fg:x="893" fg:w="1"/><text x="72.3243%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.0743%" y="357" width="0.0807%" height="15" fill="rgb(210,191,5)" fg:x="893" fg:w="1"/><text x="72.3243%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="72.0743%" y="341" width="0.0807%" height="15" fill="rgb(225,139,19)" fg:x="893" fg:w="1"/><text x="72.3243%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="72.0743%" y="325" width="0.0807%" height="15" fill="rgb(210,1,33)" fg:x="893" fg:w="1"/><text x="72.3243%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="71.9935%" y="469" width="0.2421%" height="15" fill="rgb(213,50,3)" fg:x="892" fg:w="3"/><text x="72.2435%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="72.0743%" y="453" width="0.1614%" height="15" fill="rgb(234,227,4)" fg:x="893" fg:w="2"/><text x="72.3243%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.1550%" y="437" width="0.0807%" height="15" fill="rgb(246,63,5)" fg:x="894" fg:w="1"/><text x="72.4050%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.1550%" y="421" width="0.0807%" height="15" fill="rgb(245,136,27)" fg:x="894" fg:w="1"/><text x="72.4050%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.1550%" y="405" width="0.0807%" height="15" fill="rgb(247,199,27)" fg:x="894" fg:w="1"/><text x="72.4050%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.1550%" y="389" width="0.0807%" height="15" fill="rgb(252,158,49)" fg:x="894" fg:w="1"/><text x="72.4050%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.1550%" y="373" width="0.0807%" height="15" fill="rgb(254,73,1)" fg:x="894" fg:w="1"/><text x="72.4050%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.1550%" y="357" width="0.0807%" height="15" fill="rgb(248,93,19)" fg:x="894" fg:w="1"/><text x="72.4050%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.1550%" y="341" width="0.0807%" height="15" fill="rgb(206,67,5)" fg:x="894" fg:w="1"/><text x="72.4050%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="72.1550%" y="325" width="0.0807%" height="15" fill="rgb(209,210,4)" fg:x="894" fg:w="1"/><text x="72.4050%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="72.1550%" y="309" width="0.0807%" height="15" fill="rgb(214,185,36)" fg:x="894" fg:w="1"/><text x="72.4050%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="72.1550%" y="293" width="0.0807%" height="15" fill="rgb(233,191,26)" fg:x="894" fg:w="1"/><text x="72.4050%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="72.1550%" y="277" width="0.0807%" height="15" fill="rgb(248,94,17)" fg:x="894" fg:w="1"/><text x="72.4050%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.1550%" y="261" width="0.0807%" height="15" fill="rgb(250,64,4)" fg:x="894" fg:w="1"/><text x="72.4050%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.3164%" y="405" width="0.0807%" height="15" fill="rgb(218,41,53)" fg:x="896" fg:w="1"/><text x="72.5664%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.3164%" y="389" width="0.0807%" height="15" fill="rgb(251,176,28)" fg:x="896" fg:w="1"/><text x="72.5664%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.3164%" y="373" width="0.0807%" height="15" fill="rgb(247,22,9)" fg:x="896" fg:w="1"/><text x="72.5664%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.3164%" y="357" width="0.0807%" height="15" fill="rgb(218,201,14)" fg:x="896" fg:w="1"/><text x="72.5664%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.3164%" y="341" width="0.0807%" height="15" fill="rgb(218,94,10)" fg:x="896" fg:w="1"/><text x="72.5664%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="72.3164%" y="325" width="0.0807%" height="15" fill="rgb(222,183,52)" fg:x="896" fg:w="1"/><text x="72.5664%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="72.3164%" y="309" width="0.0807%" height="15" fill="rgb(242,140,25)" fg:x="896" fg:w="1"/><text x="72.5664%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="72.2357%" y="421" width="0.2421%" height="15" fill="rgb(235,197,38)" fg:x="895" fg:w="3"/><text x="72.4857%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.3971%" y="405" width="0.0807%" height="15" fill="rgb(237,136,15)" fg:x="897" fg:w="1"/><text x="72.6471%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.3971%" y="389" width="0.0807%" height="15" fill="rgb(223,44,49)" fg:x="897" fg:w="1"/><text x="72.6471%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.3971%" y="373" width="0.0807%" height="15" fill="rgb(227,71,15)" fg:x="897" fg:w="1"/><text x="72.6471%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="72.4778%" y="373" width="0.0807%" height="15" fill="rgb(225,153,20)" fg:x="898" fg:w="1"/><text x="72.7278%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="72.4778%" y="357" width="0.0807%" height="15" fill="rgb(210,190,26)" fg:x="898" fg:w="1"/><text x="72.7278%" y="367.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="72.4778%" y="341" width="0.0807%" height="15" fill="rgb(223,147,5)" fg:x="898" fg:w="1"/><text x="72.7278%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="72.4778%" y="325" width="0.0807%" height="15" fill="rgb(207,14,23)" fg:x="898" fg:w="1"/><text x="72.7278%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="72.4778%" y="309" width="0.0807%" height="15" fill="rgb(211,195,53)" fg:x="898" fg:w="1"/><text x="72.7278%" y="319.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="72.4778%" y="293" width="0.0807%" height="15" fill="rgb(237,75,46)" fg:x="898" fg:w="1"/><text x="72.7278%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="72.4778%" y="421" width="0.2421%" height="15" fill="rgb(254,55,14)" fg:x="898" fg:w="3"/><text x="72.7278%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="72.4778%" y="405" width="0.2421%" height="15" fill="rgb(230,185,30)" fg:x="898" fg:w="3"/><text x="72.7278%" y="415.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="72.4778%" y="389" width="0.2421%" height="15" fill="rgb(220,14,11)" fg:x="898" fg:w="3"/><text x="72.7278%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="72.5585%" y="373" width="0.1614%" height="15" fill="rgb(215,169,44)" fg:x="899" fg:w="2"/><text x="72.8085%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.5585%" y="357" width="0.1614%" height="15" fill="rgb(253,203,20)" fg:x="899" fg:w="2"/><text x="72.8085%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="72.6392%" y="341" width="0.0807%" height="15" fill="rgb(229,225,17)" fg:x="900" fg:w="1"/><text x="72.8892%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.6392%" y="325" width="0.0807%" height="15" fill="rgb(236,76,26)" fg:x="900" fg:w="1"/><text x="72.8892%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="72.6392%" y="309" width="0.0807%" height="15" fill="rgb(234,15,30)" fg:x="900" fg:w="1"/><text x="72.8892%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.65%)</title><rect x="72.2357%" y="469" width="0.6457%" height="15" fill="rgb(211,113,48)" fg:x="895" fg:w="8"/><text x="72.4857%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.65%)</title><rect x="72.2357%" y="453" width="0.6457%" height="15" fill="rgb(221,31,36)" fg:x="895" fg:w="8"/><text x="72.4857%" y="463.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (8 samples, 0.65%)</title><rect x="72.2357%" y="437" width="0.6457%" height="15" fill="rgb(215,118,52)" fg:x="895" fg:w="8"/><text x="72.4857%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="72.7199%" y="421" width="0.1614%" height="15" fill="rgb(241,151,27)" fg:x="901" fg:w="2"/><text x="72.9699%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.7199%" y="405" width="0.1614%" height="15" fill="rgb(253,51,3)" fg:x="901" fg:w="2"/><text x="72.9699%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="72.7199%" y="389" width="0.1614%" height="15" fill="rgb(216,201,24)" fg:x="901" fg:w="2"/><text x="72.9699%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="72.8006%" y="373" width="0.0807%" height="15" fill="rgb(231,107,4)" fg:x="902" fg:w="1"/><text x="73.0506%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.8006%" y="357" width="0.0807%" height="15" fill="rgb(243,97,54)" fg:x="902" fg:w="1"/><text x="73.0506%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.8006%" y="341" width="0.0807%" height="15" fill="rgb(221,32,51)" fg:x="902" fg:w="1"/><text x="73.0506%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="72.8814%" y="437" width="0.1614%" height="15" fill="rgb(218,171,35)" fg:x="903" fg:w="2"/><text x="73.1314%" y="447.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="72.8814%" y="421" width="0.1614%" height="15" fill="rgb(214,20,53)" fg:x="903" fg:w="2"/><text x="73.1314%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (14 samples, 1.13%)</title><rect x="71.9935%" y="517" width="1.1299%" height="15" fill="rgb(239,9,52)" fg:x="892" fg:w="14"/><text x="72.2435%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 1.13%)</title><rect x="71.9935%" y="501" width="1.1299%" height="15" fill="rgb(215,114,45)" fg:x="892" fg:w="14"/><text x="72.2435%" y="511.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (14 samples, 1.13%)</title><rect x="71.9935%" y="485" width="1.1299%" height="15" fill="rgb(208,118,9)" fg:x="892" fg:w="14"/><text x="72.2435%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="72.8814%" y="469" width="0.2421%" height="15" fill="rgb(235,7,39)" fg:x="903" fg:w="3"/><text x="73.1314%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="72.8814%" y="453" width="0.2421%" height="15" fill="rgb(243,225,15)" fg:x="903" fg:w="3"/><text x="73.1314%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.0428%" y="437" width="0.0807%" height="15" fill="rgb(225,216,18)" fg:x="905" fg:w="1"/><text x="73.2928%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="73.0428%" y="421" width="0.0807%" height="15" fill="rgb(233,36,38)" fg:x="905" fg:w="1"/><text x="73.2928%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.0428%" y="405" width="0.0807%" height="15" fill="rgb(239,88,23)" fg:x="905" fg:w="1"/><text x="73.2928%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.0428%" y="389" width="0.0807%" height="15" fill="rgb(219,181,35)" fg:x="905" fg:w="1"/><text x="73.2928%" y="399.50"></text></g><g><title>engine::session::internal::Added::find_refs (19 samples, 1.53%)</title><rect x="71.6707%" y="549" width="1.5335%" height="15" fill="rgb(215,18,46)" fg:x="888" fg:w="19"/><text x="71.9207%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (19 samples, 1.53%)</title><rect x="71.6707%" y="533" width="1.5335%" height="15" fill="rgb(241,38,11)" fg:x="888" fg:w="19"/><text x="71.9207%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.1235%" y="517" width="0.0807%" height="15" fill="rgb(248,169,45)" fg:x="906" fg:w="1"/><text x="73.3735%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.1235%" y="501" width="0.0807%" height="15" fill="rgb(239,50,49)" fg:x="906" fg:w="1"/><text x="73.3735%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.1235%" y="485" width="0.0807%" height="15" fill="rgb(231,96,31)" fg:x="906" fg:w="1"/><text x="73.3735%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.1235%" y="469" width="0.0807%" height="15" fill="rgb(224,193,37)" fg:x="906" fg:w="1"/><text x="73.3735%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.1235%" y="453" width="0.0807%" height="15" fill="rgb(227,153,50)" fg:x="906" fg:w="1"/><text x="73.3735%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.1235%" y="437" width="0.0807%" height="15" fill="rgb(249,228,3)" fg:x="906" fg:w="1"/><text x="73.3735%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.2042%" y="533" width="0.0807%" height="15" fill="rgb(219,164,43)" fg:x="907" fg:w="1"/><text x="73.4542%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.2042%" y="517" width="0.0807%" height="15" fill="rgb(216,45,41)" fg:x="907" fg:w="1"/><text x="73.4542%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.2042%" y="501" width="0.0807%" height="15" fill="rgb(210,226,51)" fg:x="907" fg:w="1"/><text x="73.4542%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.2042%" y="485" width="0.0807%" height="15" fill="rgb(209,117,49)" fg:x="907" fg:w="1"/><text x="73.4542%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="73.2849%" y="485" width="0.0807%" height="15" fill="rgb(206,196,24)" fg:x="908" fg:w="1"/><text x="73.5349%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.3656%" y="485" width="0.0807%" height="15" fill="rgb(253,218,3)" fg:x="909" fg:w="1"/><text x="73.6156%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.5270%" y="405" width="0.0807%" height="15" fill="rgb(252,166,2)" fg:x="911" fg:w="1"/><text x="73.7770%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.5270%" y="389" width="0.0807%" height="15" fill="rgb(236,218,26)" fg:x="911" fg:w="1"/><text x="73.7770%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.5270%" y="373" width="0.0807%" height="15" fill="rgb(254,84,19)" fg:x="911" fg:w="1"/><text x="73.7770%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.5270%" y="357" width="0.0807%" height="15" fill="rgb(219,137,29)" fg:x="911" fg:w="1"/><text x="73.7770%" y="367.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="73.5270%" y="341" width="0.0807%" height="15" fill="rgb(227,47,52)" fg:x="911" fg:w="1"/><text x="73.7770%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="73.4463%" y="437" width="0.2421%" height="15" fill="rgb(229,167,24)" fg:x="910" fg:w="3"/><text x="73.6963%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="73.4463%" y="421" width="0.2421%" height="15" fill="rgb(233,164,1)" fg:x="910" fg:w="3"/><text x="73.6963%" y="431.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="73.6077%" y="405" width="0.0807%" height="15" fill="rgb(218,88,48)" fg:x="912" fg:w="1"/><text x="73.8577%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.6077%" y="389" width="0.0807%" height="15" fill="rgb(226,214,24)" fg:x="912" fg:w="1"/><text x="73.8577%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.6077%" y="373" width="0.0807%" height="15" fill="rgb(233,29,12)" fg:x="912" fg:w="1"/><text x="73.8577%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.6077%" y="357" width="0.0807%" height="15" fill="rgb(219,120,34)" fg:x="912" fg:w="1"/><text x="73.8577%" y="367.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="73.6077%" y="341" width="0.0807%" height="15" fill="rgb(226,78,44)" fg:x="912" fg:w="1"/><text x="73.8577%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="73.6077%" y="325" width="0.0807%" height="15" fill="rgb(240,15,48)" fg:x="912" fg:w="1"/><text x="73.8577%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.6077%" y="309" width="0.0807%" height="15" fill="rgb(253,176,7)" fg:x="912" fg:w="1"/><text x="73.8577%" y="319.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="73.6885%" y="389" width="0.0807%" height="15" fill="rgb(206,166,28)" fg:x="913" fg:w="1"/><text x="73.9385%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="73.6885%" y="373" width="0.0807%" height="15" fill="rgb(241,53,51)" fg:x="913" fg:w="1"/><text x="73.9385%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.6885%" y="357" width="0.0807%" height="15" fill="rgb(249,112,30)" fg:x="913" fg:w="1"/><text x="73.9385%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.7692%" y="357" width="0.0807%" height="15" fill="rgb(217,85,30)" fg:x="914" fg:w="1"/><text x="74.0192%" y="367.50"></text></g><g><title>kernel::model::entity::Entity::from_value (10 samples, 0.81%)</title><rect x="73.2849%" y="533" width="0.8071%" height="15" fill="rgb(233,49,7)" fg:x="908" fg:w="10"/><text x="73.5349%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (10 samples, 0.81%)</title><rect x="73.2849%" y="517" width="0.8071%" height="15" fill="rgb(234,109,9)" fg:x="908" fg:w="10"/><text x="73.5349%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (10 samples, 0.81%)</title><rect x="73.2849%" y="501" width="0.8071%" height="15" fill="rgb(253,95,22)" fg:x="908" fg:w="10"/><text x="73.5349%" y="511.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (8 samples, 0.65%)</title><rect x="73.4463%" y="485" width="0.6457%" height="15" fill="rgb(233,176,25)" fg:x="910" fg:w="8"/><text x="73.6963%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.65%)</title><rect x="73.4463%" y="469" width="0.6457%" height="15" fill="rgb(236,33,39)" fg:x="910" fg:w="8"/><text x="73.6963%" y="479.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (8 samples, 0.65%)</title><rect x="73.4463%" y="453" width="0.6457%" height="15" fill="rgb(223,226,42)" fg:x="910" fg:w="8"/><text x="73.6963%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="73.6885%" y="437" width="0.4036%" height="15" fill="rgb(216,99,33)" fg:x="913" fg:w="5"/><text x="73.9385%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="73.6885%" y="421" width="0.4036%" height="15" fill="rgb(235,84,23)" fg:x="913" fg:w="5"/><text x="73.9385%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (5 samples, 0.40%)</title><rect x="73.6885%" y="405" width="0.4036%" height="15" fill="rgb(232,2,27)" fg:x="913" fg:w="5"/><text x="73.9385%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="73.7692%" y="389" width="0.3228%" height="15" fill="rgb(241,23,22)" fg:x="914" fg:w="4"/><text x="74.0192%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="73.7692%" y="373" width="0.3228%" height="15" fill="rgb(211,73,27)" fg:x="914" fg:w="4"/><text x="74.0192%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (3 samples, 0.24%)</title><rect x="73.8499%" y="357" width="0.2421%" height="15" fill="rgb(235,109,49)" fg:x="915" fg:w="3"/><text x="74.0999%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="73.8499%" y="341" width="0.2421%" height="15" fill="rgb(230,99,29)" fg:x="915" fg:w="3"/><text x="74.0999%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="73.8499%" y="325" width="0.2421%" height="15" fill="rgb(245,199,7)" fg:x="915" fg:w="3"/><text x="74.0999%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="73.9306%" y="309" width="0.1614%" height="15" fill="rgb(217,179,10)" fg:x="916" fg:w="2"/><text x="74.1806%" y="319.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.0113%" y="293" width="0.0807%" height="15" fill="rgb(254,99,47)" fg:x="917" fg:w="1"/><text x="74.2613%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.3341%" y="389" width="0.0807%" height="15" fill="rgb(251,121,7)" fg:x="921" fg:w="1"/><text x="74.5841%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.3341%" y="373" width="0.0807%" height="15" fill="rgb(250,177,26)" fg:x="921" fg:w="1"/><text x="74.5841%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.3341%" y="357" width="0.0807%" height="15" fill="rgb(232,88,15)" fg:x="921" fg:w="1"/><text x="74.5841%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.3341%" y="341" width="0.0807%" height="15" fill="rgb(251,54,54)" fg:x="921" fg:w="1"/><text x="74.5841%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="74.0920%" y="469" width="0.4036%" height="15" fill="rgb(208,177,15)" fg:x="918" fg:w="5"/><text x="74.3420%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="74.0920%" y="453" width="0.4036%" height="15" fill="rgb(205,97,32)" fg:x="918" fg:w="5"/><text x="74.3420%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="74.0920%" y="437" width="0.4036%" height="15" fill="rgb(217,192,13)" fg:x="918" fg:w="5"/><text x="74.3420%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="74.1727%" y="421" width="0.3228%" height="15" fill="rgb(215,163,41)" fg:x="919" fg:w="4"/><text x="74.4227%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="74.1727%" y="405" width="0.3228%" height="15" fill="rgb(246,83,29)" fg:x="919" fg:w="4"/><text x="74.4227%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.4149%" y="389" width="0.0807%" height="15" fill="rgb(219,2,45)" fg:x="922" fg:w="1"/><text x="74.6649%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.4149%" y="373" width="0.0807%" height="15" fill="rgb(242,215,33)" fg:x="922" fg:w="1"/><text x="74.6649%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.4149%" y="357" width="0.0807%" height="15" fill="rgb(217,1,6)" fg:x="922" fg:w="1"/><text x="74.6649%" y="367.50"></text></g><g><title>engine::session::Session::load_entity (51 samples, 4.12%)</title><rect x="70.4600%" y="565" width="4.1162%" height="15" fill="rgb(207,85,52)" fg:x="873" fg:w="51"/><text x="70.7100%" y="575.50">engi..</text></g><g><title>engine::session::internal::Entities::add_persisted (17 samples, 1.37%)</title><rect x="73.2042%" y="549" width="1.3721%" height="15" fill="rgb(231,171,19)" fg:x="907" fg:w="17"/><text x="73.4542%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (6 samples, 0.48%)</title><rect x="74.0920%" y="533" width="0.4843%" height="15" fill="rgb(207,128,4)" fg:x="918" fg:w="6"/><text x="74.3420%" y="543.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.48%)</title><rect x="74.0920%" y="517" width="0.4843%" height="15" fill="rgb(219,208,4)" fg:x="918" fg:w="6"/><text x="74.3420%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="74.0920%" y="501" width="0.4843%" height="15" fill="rgb(235,161,42)" fg:x="918" fg:w="6"/><text x="74.3420%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="74.0920%" y="485" width="0.4843%" height="15" fill="rgb(247,218,18)" fg:x="918" fg:w="6"/><text x="74.3420%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.4956%" y="469" width="0.0807%" height="15" fill="rgb(232,114,51)" fg:x="923" fg:w="1"/><text x="74.7456%" y="479.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="74.5763%" y="549" width="0.0807%" height="15" fill="rgb(222,95,3)" fg:x="924" fg:w="1"/><text x="74.8263%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="74.5763%" y="533" width="0.0807%" height="15" fill="rgb(240,65,29)" fg:x="924" fg:w="1"/><text x="74.8263%" y="543.50"></text></g><g><title>kernel::model::entity_ref::&lt;impl core::convert::From&lt;kernel::model::entity_ref::EntityRef&gt; for kernel::model::base::EntityKey&gt;::from (1 samples, 0.08%)</title><rect x="74.5763%" y="517" width="0.0807%" height="15" fill="rgb(249,209,20)" fg:x="924" fg:w="1"/><text x="74.8263%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.7377%" y="485" width="0.0807%" height="15" fill="rgb(241,48,37)" fg:x="926" fg:w="1"/><text x="74.9877%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.7377%" y="469" width="0.0807%" height="15" fill="rgb(230,140,42)" fg:x="926" fg:w="1"/><text x="74.9877%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.7377%" y="453" width="0.0807%" height="15" fill="rgb(230,176,45)" fg:x="926" fg:w="1"/><text x="74.9877%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.7377%" y="437" width="0.0807%" height="15" fill="rgb(245,112,21)" fg:x="926" fg:w="1"/><text x="74.9877%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.7377%" y="421" width="0.0807%" height="15" fill="rgb(207,183,35)" fg:x="926" fg:w="1"/><text x="74.9877%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="74.8184%" y="485" width="0.0807%" height="15" fill="rgb(227,44,33)" fg:x="927" fg:w="1"/><text x="75.0684%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="74.8184%" y="469" width="0.0807%" height="15" fill="rgb(246,120,21)" fg:x="927" fg:w="1"/><text x="75.0684%" y="479.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="74.8184%" y="453" width="0.0807%" height="15" fill="rgb(235,57,52)" fg:x="927" fg:w="1"/><text x="75.0684%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="74.8184%" y="437" width="0.0807%" height="15" fill="rgb(238,84,10)" fg:x="927" fg:w="1"/><text x="75.0684%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="74.8184%" y="421" width="0.0807%" height="15" fill="rgb(251,200,32)" fg:x="927" fg:w="1"/><text x="75.0684%" y="431.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="74.8184%" y="405" width="0.0807%" height="15" fill="rgb(247,159,13)" fg:x="927" fg:w="1"/><text x="75.0684%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="74.8184%" y="389" width="0.0807%" height="15" fill="rgb(238,64,4)" fg:x="927" fg:w="1"/><text x="75.0684%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="74.8184%" y="373" width="0.0807%" height="15" fill="rgb(221,131,51)" fg:x="927" fg:w="1"/><text x="75.0684%" y="383.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="74.8184%" y="357" width="0.0807%" height="15" fill="rgb(242,5,29)" fg:x="927" fg:w="1"/><text x="75.0684%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.8184%" y="341" width="0.0807%" height="15" fill="rgb(214,130,32)" fg:x="927" fg:w="1"/><text x="75.0684%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.8184%" y="325" width="0.0807%" height="15" fill="rgb(244,210,16)" fg:x="927" fg:w="1"/><text x="75.0684%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.8991%" y="405" width="0.0807%" height="15" fill="rgb(234,48,26)" fg:x="928" fg:w="1"/><text x="75.1491%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="74.6570%" y="533" width="0.4036%" height="15" fill="rgb(231,82,38)" fg:x="925" fg:w="5"/><text x="74.9070%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="74.7377%" y="517" width="0.3228%" height="15" fill="rgb(254,128,41)" fg:x="926" fg:w="4"/><text x="74.9877%" y="527.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="74.7377%" y="501" width="0.3228%" height="15" fill="rgb(212,73,49)" fg:x="926" fg:w="4"/><text x="74.9877%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="74.8991%" y="485" width="0.1614%" height="15" fill="rgb(205,62,54)" fg:x="928" fg:w="2"/><text x="75.1491%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.8991%" y="469" width="0.1614%" height="15" fill="rgb(228,0,8)" fg:x="928" fg:w="2"/><text x="75.1491%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.8991%" y="453" width="0.1614%" height="15" fill="rgb(251,28,17)" fg:x="928" fg:w="2"/><text x="75.1491%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="74.8991%" y="437" width="0.1614%" height="15" fill="rgb(238,105,27)" fg:x="928" fg:w="2"/><text x="75.1491%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.8991%" y="421" width="0.1614%" height="15" fill="rgb(237,216,33)" fg:x="928" fg:w="2"/><text x="75.1491%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="74.9798%" y="405" width="0.0807%" height="15" fill="rgb(229,228,25)" fg:x="929" fg:w="1"/><text x="75.2298%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="74.9798%" y="389" width="0.0807%" height="15" fill="rgb(233,75,23)" fg:x="929" fg:w="1"/><text x="75.2298%" y="399.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.9798%" y="373" width="0.0807%" height="15" fill="rgb(231,207,16)" fg:x="929" fg:w="1"/><text x="75.2298%" y="383.50"></text></g><g><title>engine::session::internal::Added::find_refs (7 samples, 0.56%)</title><rect x="74.5763%" y="565" width="0.5650%" height="15" fill="rgb(231,191,45)" fg:x="924" fg:w="7"/><text x="74.8263%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (6 samples, 0.48%)</title><rect x="74.6570%" y="549" width="0.4843%" height="15" fill="rgb(224,133,17)" fg:x="925" fg:w="6"/><text x="74.9070%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.0605%" y="533" width="0.0807%" height="15" fill="rgb(209,178,27)" fg:x="930" fg:w="1"/><text x="75.3105%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.0605%" y="517" width="0.0807%" height="15" fill="rgb(218,37,11)" fg:x="930" fg:w="1"/><text x="75.3105%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.0605%" y="501" width="0.0807%" height="15" fill="rgb(251,226,25)" fg:x="930" fg:w="1"/><text x="75.3105%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.0605%" y="485" width="0.0807%" height="15" fill="rgb(209,222,27)" fg:x="930" fg:w="1"/><text x="75.3105%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.0605%" y="469" width="0.0807%" height="15" fill="rgb(238,22,21)" fg:x="930" fg:w="1"/><text x="75.3105%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.0605%" y="453" width="0.0807%" height="15" fill="rgb(233,161,25)" fg:x="930" fg:w="1"/><text x="75.3105%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.0605%" y="437" width="0.0807%" height="15" fill="rgb(226,122,53)" fg:x="930" fg:w="1"/><text x="75.3105%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="75.1412%" y="549" width="0.1614%" height="15" fill="rgb(220,123,17)" fg:x="931" fg:w="2"/><text x="75.3912%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="75.1412%" y="533" width="0.1614%" height="15" fill="rgb(230,224,35)" fg:x="931" fg:w="2"/><text x="75.3912%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="75.1412%" y="517" width="0.1614%" height="15" fill="rgb(246,83,8)" fg:x="931" fg:w="2"/><text x="75.3912%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="75.1412%" y="501" width="0.1614%" height="15" fill="rgb(230,214,17)" fg:x="931" fg:w="2"/><text x="75.3912%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="75.1412%" y="485" width="0.1614%" height="15" fill="rgb(222,97,18)" fg:x="931" fg:w="2"/><text x="75.3912%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.2220%" y="469" width="0.0807%" height="15" fill="rgb(206,79,1)" fg:x="932" fg:w="1"/><text x="75.4720%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="75.2220%" y="453" width="0.0807%" height="15" fill="rgb(214,121,34)" fg:x="932" fg:w="1"/><text x="75.4720%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="75.2220%" y="437" width="0.0807%" height="15" fill="rgb(249,199,46)" fg:x="932" fg:w="1"/><text x="75.4720%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="75.2220%" y="421" width="0.0807%" height="15" fill="rgb(214,222,46)" fg:x="932" fg:w="1"/><text x="75.4720%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.2220%" y="405" width="0.0807%" height="15" fill="rgb(248,168,30)" fg:x="932" fg:w="1"/><text x="75.4720%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.2220%" y="389" width="0.0807%" height="15" fill="rgb(226,14,28)" fg:x="932" fg:w="1"/><text x="75.4720%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="75.2220%" y="373" width="0.0807%" height="15" fill="rgb(253,123,1)" fg:x="932" fg:w="1"/><text x="75.4720%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="75.2220%" y="357" width="0.0807%" height="15" fill="rgb(225,24,42)" fg:x="932" fg:w="1"/><text x="75.4720%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="75.2220%" y="341" width="0.0807%" height="15" fill="rgb(216,161,37)" fg:x="932" fg:w="1"/><text x="75.4720%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="75.2220%" y="325" width="0.0807%" height="15" fill="rgb(251,164,26)" fg:x="932" fg:w="1"/><text x="75.4720%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.2220%" y="309" width="0.0807%" height="15" fill="rgb(219,177,3)" fg:x="932" fg:w="1"/><text x="75.4720%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="75.3027%" y="549" width="0.1614%" height="15" fill="rgb(222,65,0)" fg:x="933" fg:w="2"/><text x="75.5527%" y="559.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="75.3027%" y="533" width="0.1614%" height="15" fill="rgb(223,69,54)" fg:x="933" fg:w="2"/><text x="75.5527%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="75.3027%" y="517" width="0.1614%" height="15" fill="rgb(235,30,27)" fg:x="933" fg:w="2"/><text x="75.5527%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="75.3027%" y="501" width="0.1614%" height="15" fill="rgb(220,183,50)" fg:x="933" fg:w="2"/><text x="75.5527%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.3027%" y="485" width="0.1614%" height="15" fill="rgb(248,198,15)" fg:x="933" fg:w="2"/><text x="75.5527%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="75.3027%" y="469" width="0.1614%" height="15" fill="rgb(222,211,4)" fg:x="933" fg:w="2"/><text x="75.5527%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.3027%" y="453" width="0.1614%" height="15" fill="rgb(214,102,34)" fg:x="933" fg:w="2"/><text x="75.5527%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="75.3027%" y="437" width="0.1614%" height="15" fill="rgb(245,92,5)" fg:x="933" fg:w="2"/><text x="75.5527%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.3027%" y="421" width="0.1614%" height="15" fill="rgb(252,72,51)" fg:x="933" fg:w="2"/><text x="75.5527%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.3834%" y="405" width="0.0807%" height="15" fill="rgb(252,208,19)" fg:x="934" fg:w="1"/><text x="75.6334%" y="415.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="75.4641%" y="421" width="0.0807%" height="15" fill="rgb(211,69,7)" fg:x="935" fg:w="1"/><text x="75.7141%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.4641%" y="405" width="0.0807%" height="15" fill="rgb(211,27,16)" fg:x="935" fg:w="1"/><text x="75.7141%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.4641%" y="389" width="0.0807%" height="15" fill="rgb(219,216,14)" fg:x="935" fg:w="1"/><text x="75.7141%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.4641%" y="373" width="0.0807%" height="15" fill="rgb(219,71,8)" fg:x="935" fg:w="1"/><text x="75.7141%" y="383.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="75.4641%" y="357" width="0.0807%" height="15" fill="rgb(223,170,53)" fg:x="935" fg:w="1"/><text x="75.7141%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="75.4641%" y="341" width="0.0807%" height="15" fill="rgb(246,21,26)" fg:x="935" fg:w="1"/><text x="75.7141%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.4641%" y="325" width="0.0807%" height="15" fill="rgb(248,20,46)" fg:x="935" fg:w="1"/><text x="75.7141%" y="335.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (2 samples, 0.16%)</title><rect x="75.4641%" y="501" width="0.1614%" height="15" fill="rgb(252,94,11)" fg:x="935" fg:w="2"/><text x="75.7141%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.4641%" y="485" width="0.1614%" height="15" fill="rgb(236,163,8)" fg:x="935" fg:w="2"/><text x="75.7141%" y="495.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="75.4641%" y="469" width="0.1614%" height="15" fill="rgb(217,221,45)" fg:x="935" fg:w="2"/><text x="75.7141%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="75.4641%" y="453" width="0.1614%" height="15" fill="rgb(238,38,17)" fg:x="935" fg:w="2"/><text x="75.7141%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.4641%" y="437" width="0.1614%" height="15" fill="rgb(242,210,23)" fg:x="935" fg:w="2"/><text x="75.7141%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.5448%" y="421" width="0.0807%" height="15" fill="rgb(250,86,53)" fg:x="936" fg:w="1"/><text x="75.7948%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.5448%" y="405" width="0.0807%" height="15" fill="rgb(223,168,25)" fg:x="936" fg:w="1"/><text x="75.7948%" y="415.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="75.5448%" y="389" width="0.0807%" height="15" fill="rgb(251,189,4)" fg:x="936" fg:w="1"/><text x="75.7948%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="75.5448%" y="373" width="0.0807%" height="15" fill="rgb(245,19,28)" fg:x="936" fg:w="1"/><text x="75.7948%" y="383.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="75.4641%" y="549" width="0.2421%" height="15" fill="rgb(207,10,34)" fg:x="935" fg:w="3"/><text x="75.7141%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="75.4641%" y="533" width="0.2421%" height="15" fill="rgb(235,153,31)" fg:x="935" fg:w="3"/><text x="75.7141%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="75.4641%" y="517" width="0.2421%" height="15" fill="rgb(228,72,37)" fg:x="935" fg:w="3"/><text x="75.7141%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.6255%" y="501" width="0.0807%" height="15" fill="rgb(215,15,16)" fg:x="937" fg:w="1"/><text x="75.8755%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.6255%" y="485" width="0.0807%" height="15" fill="rgb(250,119,29)" fg:x="937" fg:w="1"/><text x="75.8755%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.7062%" y="405" width="0.0807%" height="15" fill="rgb(214,59,1)" fg:x="938" fg:w="1"/><text x="75.9562%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="75.7062%" y="485" width="0.1614%" height="15" fill="rgb(223,109,25)" fg:x="938" fg:w="2"/><text x="75.9562%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.7062%" y="469" width="0.1614%" height="15" fill="rgb(230,198,22)" fg:x="938" fg:w="2"/><text x="75.9562%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="75.7062%" y="453" width="0.1614%" height="15" fill="rgb(245,184,46)" fg:x="938" fg:w="2"/><text x="75.9562%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.7062%" y="437" width="0.1614%" height="15" fill="rgb(253,73,16)" fg:x="938" fg:w="2"/><text x="75.9562%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="75.7062%" y="421" width="0.1614%" height="15" fill="rgb(206,94,45)" fg:x="938" fg:w="2"/><text x="75.9562%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.7869%" y="405" width="0.0807%" height="15" fill="rgb(236,83,27)" fg:x="939" fg:w="1"/><text x="76.0369%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.7869%" y="389" width="0.0807%" height="15" fill="rgb(220,196,8)" fg:x="939" fg:w="1"/><text x="76.0369%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.7869%" y="373" width="0.0807%" height="15" fill="rgb(254,185,14)" fg:x="939" fg:w="1"/><text x="76.0369%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="75.7869%" y="357" width="0.0807%" height="15" fill="rgb(226,50,22)" fg:x="939" fg:w="1"/><text x="76.0369%" y="367.50"></text></g><g><title>engine::session::Session::load_entity (68 samples, 5.49%)</title><rect x="70.4600%" y="581" width="5.4883%" height="15" fill="rgb(253,147,0)" fg:x="873" fg:w="68"/><text x="70.7100%" y="591.50">engine:..</text></g><g><title>engine::session::internal::Entities::add_persisted (10 samples, 0.81%)</title><rect x="75.1412%" y="565" width="0.8071%" height="15" fill="rgb(252,46,33)" fg:x="931" fg:w="10"/><text x="75.3912%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="75.7062%" y="549" width="0.2421%" height="15" fill="rgb(242,22,54)" fg:x="938" fg:w="3"/><text x="75.9562%" y="559.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="75.7062%" y="533" width="0.2421%" height="15" fill="rgb(223,178,32)" fg:x="938" fg:w="3"/><text x="75.9562%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="75.7062%" y="517" width="0.2421%" height="15" fill="rgb(214,106,53)" fg:x="938" fg:w="3"/><text x="75.9562%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="75.7062%" y="501" width="0.2421%" height="15" fill="rgb(232,65,50)" fg:x="938" fg:w="3"/><text x="75.9562%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.8676%" y="485" width="0.0807%" height="15" fill="rgb(231,110,28)" fg:x="940" fg:w="1"/><text x="76.1176%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.0291%" y="485" width="0.0807%" height="15" fill="rgb(216,71,40)" fg:x="942" fg:w="1"/><text x="76.2791%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.0291%" y="469" width="0.0807%" height="15" fill="rgb(229,89,53)" fg:x="942" fg:w="1"/><text x="76.2791%" y="479.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="75.9483%" y="565" width="0.2421%" height="15" fill="rgb(210,124,14)" fg:x="941" fg:w="3"/><text x="76.1983%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="75.9483%" y="549" width="0.2421%" height="15" fill="rgb(236,213,6)" fg:x="941" fg:w="3"/><text x="76.1983%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="75.9483%" y="533" width="0.2421%" height="15" fill="rgb(228,41,5)" fg:x="941" fg:w="3"/><text x="76.1983%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="75.9483%" y="517" width="0.2421%" height="15" fill="rgb(221,167,25)" fg:x="941" fg:w="3"/><text x="76.1983%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="75.9483%" y="501" width="0.2421%" height="15" fill="rgb(228,144,37)" fg:x="941" fg:w="3"/><text x="76.1983%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.1098%" y="485" width="0.0807%" height="15" fill="rgb(227,189,38)" fg:x="943" fg:w="1"/><text x="76.3598%" y="495.50"></text></g><g><title>engine::users::model::username_to_key (4 samples, 0.32%)</title><rect x="75.9483%" y="581" width="0.3228%" height="15" fill="rgb(218,8,2)" fg:x="941" fg:w="4"/><text x="76.1983%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.1905%" y="565" width="0.0807%" height="15" fill="rgb(209,61,28)" fg:x="944" fg:w="1"/><text x="76.4405%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.1905%" y="549" width="0.0807%" height="15" fill="rgb(233,140,39)" fg:x="944" fg:w="1"/><text x="76.4405%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.1905%" y="533" width="0.0807%" height="15" fill="rgb(251,66,48)" fg:x="944" fg:w="1"/><text x="76.4405%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.1905%" y="517" width="0.0807%" height="15" fill="rgb(210,44,45)" fg:x="944" fg:w="1"/><text x="76.4405%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.1905%" y="501" width="0.0807%" height="15" fill="rgb(214,136,46)" fg:x="944" fg:w="1"/><text x="76.4405%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="76.1905%" y="485" width="0.0807%" height="15" fill="rgb(207,130,50)" fg:x="944" fg:w="1"/><text x="76.4405%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="76.1905%" y="469" width="0.0807%" height="15" fill="rgb(228,102,49)" fg:x="944" fg:w="1"/><text x="76.4405%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="76.2712%" y="565" width="0.0807%" height="15" fill="rgb(253,55,1)" fg:x="945" fg:w="1"/><text x="76.5212%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="76.2712%" y="549" width="0.0807%" height="15" fill="rgb(238,222,9)" fg:x="945" fg:w="1"/><text x="76.5212%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="76.2712%" y="533" width="0.0807%" height="15" fill="rgb(246,99,6)" fg:x="945" fg:w="1"/><text x="76.5212%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.2712%" y="517" width="0.0807%" height="15" fill="rgb(219,110,26)" fg:x="945" fg:w="1"/><text x="76.5212%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.2712%" y="501" width="0.0807%" height="15" fill="rgb(239,160,33)" fg:x="945" fg:w="1"/><text x="76.5212%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="76.2712%" y="485" width="0.0807%" height="15" fill="rgb(220,202,23)" fg:x="945" fg:w="1"/><text x="76.5212%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.2712%" y="469" width="0.0807%" height="15" fill="rgb(208,80,26)" fg:x="945" fg:w="1"/><text x="76.5212%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.2712%" y="453" width="0.0807%" height="15" fill="rgb(243,85,7)" fg:x="945" fg:w="1"/><text x="76.5212%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.2712%" y="437" width="0.0807%" height="15" fill="rgb(228,77,47)" fg:x="945" fg:w="1"/><text x="76.5212%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.2712%" y="421" width="0.0807%" height="15" fill="rgb(212,226,8)" fg:x="945" fg:w="1"/><text x="76.5212%" y="431.50"></text></g><g><title>kernel::model::entry::Entry::new (3 samples, 0.24%)</title><rect x="76.2712%" y="581" width="0.2421%" height="15" fill="rgb(241,120,54)" fg:x="945" fg:w="3"/><text x="76.5212%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="76.3519%" y="565" width="0.1614%" height="15" fill="rgb(226,80,16)" fg:x="946" fg:w="2"/><text x="76.6019%" y="575.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="76.3519%" y="549" width="0.1614%" height="15" fill="rgb(240,76,13)" fg:x="946" fg:w="2"/><text x="76.6019%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="76.3519%" y="533" width="0.1614%" height="15" fill="rgb(252,74,8)" fg:x="946" fg:w="2"/><text x="76.6019%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.4326%" y="517" width="0.0807%" height="15" fill="rgb(244,155,2)" fg:x="947" fg:w="1"/><text x="76.6826%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.4326%" y="501" width="0.0807%" height="15" fill="rgb(215,81,35)" fg:x="947" fg:w="1"/><text x="76.6826%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="76.4326%" y="485" width="0.0807%" height="15" fill="rgb(206,55,2)" fg:x="947" fg:w="1"/><text x="76.6826%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.4326%" y="469" width="0.0807%" height="15" fill="rgb(231,2,34)" fg:x="947" fg:w="1"/><text x="76.6826%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.4326%" y="453" width="0.0807%" height="15" fill="rgb(242,176,48)" fg:x="947" fg:w="1"/><text x="76.6826%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.4326%" y="437" width="0.0807%" height="15" fill="rgb(249,31,36)" fg:x="947" fg:w="1"/><text x="76.6826%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.4326%" y="421" width="0.0807%" height="15" fill="rgb(205,18,17)" fg:x="947" fg:w="1"/><text x="76.6826%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.4326%" y="405" width="0.0807%" height="15" fill="rgb(254,130,5)" fg:x="947" fg:w="1"/><text x="76.6826%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.5940%" y="501" width="0.0807%" height="15" fill="rgb(229,42,45)" fg:x="949" fg:w="1"/><text x="76.8440%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.5940%" y="485" width="0.0807%" height="15" fill="rgb(245,95,25)" fg:x="949" fg:w="1"/><text x="76.8440%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.5940%" y="469" width="0.0807%" height="15" fill="rgb(249,193,38)" fg:x="949" fg:w="1"/><text x="76.8440%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.5940%" y="453" width="0.0807%" height="15" fill="rgb(241,140,43)" fg:x="949" fg:w="1"/><text x="76.8440%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.5940%" y="437" width="0.0807%" height="15" fill="rgb(245,78,48)" fg:x="949" fg:w="1"/><text x="76.8440%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.5940%" y="421" width="0.0807%" height="15" fill="rgb(214,92,39)" fg:x="949" fg:w="1"/><text x="76.8440%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.5940%" y="405" width="0.0807%" height="15" fill="rgb(211,189,14)" fg:x="949" fg:w="1"/><text x="76.8440%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.5940%" y="389" width="0.0807%" height="15" fill="rgb(218,7,24)" fg:x="949" fg:w="1"/><text x="76.8440%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.5940%" y="373" width="0.0807%" height="15" fill="rgb(224,200,49)" fg:x="949" fg:w="1"/><text x="76.8440%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.5940%" y="357" width="0.0807%" height="15" fill="rgb(218,210,14)" fg:x="949" fg:w="1"/><text x="76.8440%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.5940%" y="341" width="0.0807%" height="15" fill="rgb(234,142,31)" fg:x="949" fg:w="1"/><text x="76.8440%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.5940%" y="325" width="0.0807%" height="15" fill="rgb(227,165,2)" fg:x="949" fg:w="1"/><text x="76.8440%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.5940%" y="309" width="0.0807%" height="15" fill="rgb(232,44,46)" fg:x="949" fg:w="1"/><text x="76.8440%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="76.5133%" y="533" width="0.2421%" height="15" fill="rgb(236,149,47)" fg:x="948" fg:w="3"/><text x="76.7633%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="76.5940%" y="517" width="0.1614%" height="15" fill="rgb(227,45,31)" fg:x="949" fg:w="2"/><text x="76.8440%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.6747%" y="501" width="0.0807%" height="15" fill="rgb(240,176,51)" fg:x="950" fg:w="1"/><text x="76.9247%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.6747%" y="485" width="0.0807%" height="15" fill="rgb(249,146,41)" fg:x="950" fg:w="1"/><text x="76.9247%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.6747%" y="469" width="0.0807%" height="15" fill="rgb(213,208,4)" fg:x="950" fg:w="1"/><text x="76.9247%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.6747%" y="453" width="0.0807%" height="15" fill="rgb(245,84,36)" fg:x="950" fg:w="1"/><text x="76.9247%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.6747%" y="437" width="0.0807%" height="15" fill="rgb(254,84,18)" fg:x="950" fg:w="1"/><text x="76.9247%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.6747%" y="421" width="0.0807%" height="15" fill="rgb(225,38,54)" fg:x="950" fg:w="1"/><text x="76.9247%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.6747%" y="405" width="0.0807%" height="15" fill="rgb(246,50,30)" fg:x="950" fg:w="1"/><text x="76.9247%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.6747%" y="389" width="0.0807%" height="15" fill="rgb(246,148,9)" fg:x="950" fg:w="1"/><text x="76.9247%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.6747%" y="373" width="0.0807%" height="15" fill="rgb(223,75,4)" fg:x="950" fg:w="1"/><text x="76.9247%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.6747%" y="357" width="0.0807%" height="15" fill="rgb(239,148,41)" fg:x="950" fg:w="1"/><text x="76.9247%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.6747%" y="341" width="0.0807%" height="15" fill="rgb(205,195,3)" fg:x="950" fg:w="1"/><text x="76.9247%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.6747%" y="325" width="0.0807%" height="15" fill="rgb(254,161,1)" fg:x="950" fg:w="1"/><text x="76.9247%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="76.7554%" y="533" width="0.0807%" height="15" fill="rgb(211,229,8)" fg:x="951" fg:w="1"/><text x="77.0054%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="76.7554%" y="517" width="0.0807%" height="15" fill="rgb(220,97,9)" fg:x="951" fg:w="1"/><text x="77.0054%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.7554%" y="501" width="0.0807%" height="15" fill="rgb(240,218,8)" fg:x="951" fg:w="1"/><text x="77.0054%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="76.8362%" y="485" width="0.0807%" height="15" fill="rgb(250,44,0)" fg:x="952" fg:w="1"/><text x="77.0862%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.9169%" y="485" width="0.0807%" height="15" fill="rgb(236,41,53)" fg:x="953" fg:w="1"/><text x="77.1669%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.9976%" y="437" width="0.0807%" height="15" fill="rgb(218,227,13)" fg:x="954" fg:w="1"/><text x="77.2476%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.9976%" y="421" width="0.0807%" height="15" fill="rgb(217,94,32)" fg:x="954" fg:w="1"/><text x="77.2476%" y="431.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="76.8362%" y="533" width="0.3228%" height="15" fill="rgb(213,217,12)" fg:x="952" fg:w="4"/><text x="77.0862%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="76.8362%" y="517" width="0.3228%" height="15" fill="rgb(229,13,46)" fg:x="952" fg:w="4"/><text x="77.0862%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="76.8362%" y="501" width="0.3228%" height="15" fill="rgb(243,139,5)" fg:x="952" fg:w="4"/><text x="77.0862%" y="511.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (2 samples, 0.16%)</title><rect x="76.9976%" y="485" width="0.1614%" height="15" fill="rgb(249,38,45)" fg:x="954" fg:w="2"/><text x="77.2476%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="76.9976%" y="469" width="0.1614%" height="15" fill="rgb(216,70,11)" fg:x="954" fg:w="2"/><text x="77.2476%" y="479.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="76.9976%" y="453" width="0.1614%" height="15" fill="rgb(253,101,25)" fg:x="954" fg:w="2"/><text x="77.2476%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="77.0783%" y="437" width="0.0807%" height="15" fill="rgb(207,197,30)" fg:x="955" fg:w="1"/><text x="77.3283%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.0783%" y="421" width="0.0807%" height="15" fill="rgb(238,87,13)" fg:x="955" fg:w="1"/><text x="77.3283%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="77.0783%" y="405" width="0.0807%" height="15" fill="rgb(215,155,8)" fg:x="955" fg:w="1"/><text x="77.3283%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="77.0783%" y="389" width="0.0807%" height="15" fill="rgb(239,166,38)" fg:x="955" fg:w="1"/><text x="77.3283%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="77.3204%" y="437" width="0.4036%" height="15" fill="rgb(240,194,35)" fg:x="958" fg:w="5"/><text x="77.5704%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="77.4818%" y="421" width="0.2421%" height="15" fill="rgb(219,10,44)" fg:x="960" fg:w="3"/><text x="77.7318%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="77.4818%" y="405" width="0.2421%" height="15" fill="rgb(251,220,35)" fg:x="960" fg:w="3"/><text x="77.7318%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="77.4818%" y="389" width="0.2421%" height="15" fill="rgb(218,117,13)" fg:x="960" fg:w="3"/><text x="77.7318%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="77.4818%" y="373" width="0.2421%" height="15" fill="rgb(221,213,40)" fg:x="960" fg:w="3"/><text x="77.7318%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="77.5626%" y="357" width="0.1614%" height="15" fill="rgb(251,224,35)" fg:x="961" fg:w="2"/><text x="77.8126%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="77.5626%" y="341" width="0.1614%" height="15" fill="rgb(241,33,39)" fg:x="961" fg:w="2"/><text x="77.8126%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="77.5626%" y="325" width="0.1614%" height="15" fill="rgb(222,74,17)" fg:x="961" fg:w="2"/><text x="77.8126%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.6433%" y="309" width="0.0807%" height="15" fill="rgb(225,103,0)" fg:x="962" fg:w="1"/><text x="77.8933%" y="319.50"></text></g><g><title>engine::session::Session::load_entity (16 samples, 1.29%)</title><rect x="76.5133%" y="565" width="1.2914%" height="15" fill="rgb(240,0,12)" fg:x="948" fg:w="16"/><text x="76.7633%" y="575.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (16 samples, 1.29%)</title><rect x="76.5133%" y="549" width="1.2914%" height="15" fill="rgb(233,213,37)" fg:x="948" fg:w="16"/><text x="76.7633%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (8 samples, 0.65%)</title><rect x="77.1590%" y="533" width="0.6457%" height="15" fill="rgb(225,84,52)" fg:x="956" fg:w="8"/><text x="77.4090%" y="543.50"></text></g><g><title>serde_json::de::from_trait (8 samples, 0.65%)</title><rect x="77.1590%" y="517" width="0.6457%" height="15" fill="rgb(247,160,51)" fg:x="956" fg:w="8"/><text x="77.4090%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.65%)</title><rect x="77.1590%" y="501" width="0.6457%" height="15" fill="rgb(244,60,51)" fg:x="956" fg:w="8"/><text x="77.4090%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="77.2397%" y="485" width="0.5650%" height="15" fill="rgb(233,114,7)" fg:x="957" fg:w="7"/><text x="77.4897%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="77.2397%" y="469" width="0.5650%" height="15" fill="rgb(246,136,16)" fg:x="957" fg:w="7"/><text x="77.4897%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="77.2397%" y="453" width="0.5650%" height="15" fill="rgb(243,114,45)" fg:x="957" fg:w="7"/><text x="77.4897%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.7240%" y="437" width="0.0807%" height="15" fill="rgb(247,183,43)" fg:x="963" fg:w="1"/><text x="77.9740%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="77.8047%" y="549" width="0.0807%" height="15" fill="rgb(251,210,42)" fg:x="964" fg:w="1"/><text x="78.0547%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="77.8047%" y="533" width="0.0807%" height="15" fill="rgb(221,88,35)" fg:x="964" fg:w="1"/><text x="78.0547%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="77.8047%" y="517" width="0.0807%" height="15" fill="rgb(242,21,20)" fg:x="964" fg:w="1"/><text x="78.0547%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.8047%" y="501" width="0.0807%" height="15" fill="rgb(233,226,36)" fg:x="964" fg:w="1"/><text x="78.0547%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.8047%" y="485" width="0.0807%" height="15" fill="rgb(243,189,34)" fg:x="964" fg:w="1"/><text x="78.0547%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="77.8047%" y="469" width="0.0807%" height="15" fill="rgb(207,145,50)" fg:x="964" fg:w="1"/><text x="78.0547%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.8047%" y="453" width="0.0807%" height="15" fill="rgb(242,1,50)" fg:x="964" fg:w="1"/><text x="78.0547%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.8047%" y="437" width="0.0807%" height="15" fill="rgb(231,65,32)" fg:x="964" fg:w="1"/><text x="78.0547%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.8047%" y="421" width="0.0807%" height="15" fill="rgb(208,68,49)" fg:x="964" fg:w="1"/><text x="78.0547%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.8047%" y="405" width="0.0807%" height="15" fill="rgb(253,54,49)" fg:x="964" fg:w="1"/><text x="78.0547%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (966 samples, 77.97%)</title><rect x="0.0000%" y="661" width="77.9661%" height="15" fill="rgb(245,186,24)" fg:x="0" fg:w="966"/><text x="0.2500%" y="671.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (966 samples, 77.97%)</title><rect x="0.0000%" y="645" width="77.9661%" height="15" fill="rgb(209,2,41)" fg:x="0" fg:w="966"/><text x="0.2500%" y="655.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (966 samples, 77.97%)</title><rect x="0.0000%" y="629" width="77.9661%" height="15" fill="rgb(242,208,54)" fg:x="0" fg:w="966"/><text x="0.2500%" y="639.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (639 samples, 51.57%)</title><rect x="26.3923%" y="613" width="51.5738%" height="15" fill="rgb(225,9,51)" fg:x="327" fg:w="639"/><text x="26.6423%" y="623.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (639 samples, 51.57%)</title><rect x="26.3923%" y="597" width="51.5738%" height="15" fill="rgb(207,207,25)" fg:x="327" fg:w="639"/><text x="26.6423%" y="607.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::entry::EntryResolver::world (18 samples, 1.45%)</title><rect x="76.5133%" y="581" width="1.4528%" height="15" fill="rgb(253,96,18)" fg:x="948" fg:w="18"/><text x="76.7633%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="77.8047%" y="565" width="0.1614%" height="15" fill="rgb(252,215,20)" fg:x="964" fg:w="2"/><text x="78.0547%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="77.8854%" y="549" width="0.0807%" height="15" fill="rgb(245,227,26)" fg:x="965" fg:w="1"/><text x="78.1354%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="77.8854%" y="533" width="0.0807%" height="15" fill="rgb(241,208,0)" fg:x="965" fg:w="1"/><text x="78.1354%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="77.8854%" y="517" width="0.0807%" height="15" fill="rgb(224,130,10)" fg:x="965" fg:w="1"/><text x="78.1354%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.8854%" y="501" width="0.0807%" height="15" fill="rgb(237,29,0)" fg:x="965" fg:w="1"/><text x="78.1354%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.8854%" y="485" width="0.0807%" height="15" fill="rgb(219,27,41)" fg:x="965" fg:w="1"/><text x="78.1354%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.8854%" y="469" width="0.0807%" height="15" fill="rgb(245,101,19)" fg:x="965" fg:w="1"/><text x="78.1354%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.8854%" y="453" width="0.0807%" height="15" fill="rgb(243,44,37)" fg:x="965" fg:w="1"/><text x="78.1354%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.8854%" y="437" width="0.0807%" height="15" fill="rgb(228,213,43)" fg:x="965" fg:w="1"/><text x="78.1354%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="77.8854%" y="421" width="0.0807%" height="15" fill="rgb(219,163,21)" fg:x="965" fg:w="1"/><text x="78.1354%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="77.8854%" y="405" width="0.0807%" height="15" fill="rgb(234,86,24)" fg:x="965" fg:w="1"/><text x="78.1354%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="77.8854%" y="389" width="0.0807%" height="15" fill="rgb(225,10,24)" fg:x="965" fg:w="1"/><text x="78.1354%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.8854%" y="373" width="0.0807%" height="15" fill="rgb(218,109,7)" fg:x="965" fg:w="1"/><text x="78.1354%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.8854%" y="357" width="0.0807%" height="15" fill="rgb(210,20,26)" fg:x="965" fg:w="1"/><text x="78.1354%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="77.8854%" y="341" width="0.0807%" height="15" fill="rgb(216,18,1)" fg:x="965" fg:w="1"/><text x="78.1354%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="77.8854%" y="325" width="0.0807%" height="15" fill="rgb(206,163,23)" fg:x="965" fg:w="1"/><text x="78.1354%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="77.8854%" y="309" width="0.0807%" height="15" fill="rgb(229,150,31)" fg:x="965" fg:w="1"/><text x="78.1354%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="77.8854%" y="293" width="0.0807%" height="15" fill="rgb(231,10,5)" fg:x="965" fg:w="1"/><text x="78.1354%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.8854%" y="277" width="0.0807%" height="15" fill="rgb(250,40,50)" fg:x="965" fg:w="1"/><text x="78.1354%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.9661%" y="613" width="0.0807%" height="15" fill="rgb(217,119,7)" fg:x="966" fg:w="1"/><text x="78.2161%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.9661%" y="597" width="0.0807%" height="15" fill="rgb(245,214,40)" fg:x="966" fg:w="1"/><text x="78.2161%" y="607.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="78.0468%" y="597" width="0.0807%" height="15" fill="rgb(216,187,1)" fg:x="967" fg:w="1"/><text x="78.2968%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.0468%" y="581" width="0.0807%" height="15" fill="rgb(237,146,21)" fg:x="967" fg:w="1"/><text x="78.2968%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.1275%" y="517" width="0.0807%" height="15" fill="rgb(210,174,47)" fg:x="968" fg:w="1"/><text x="78.3775%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="78.1275%" y="533" width="0.1614%" height="15" fill="rgb(218,111,39)" fg:x="968" fg:w="2"/><text x="78.3775%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.2082%" y="517" width="0.0807%" height="15" fill="rgb(224,95,19)" fg:x="969" fg:w="1"/><text x="78.4582%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.2082%" y="501" width="0.0807%" height="15" fill="rgb(234,15,38)" fg:x="969" fg:w="1"/><text x="78.4582%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.2082%" y="485" width="0.0807%" height="15" fill="rgb(246,56,12)" fg:x="969" fg:w="1"/><text x="78.4582%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.2082%" y="469" width="0.0807%" height="15" fill="rgb(247,16,17)" fg:x="969" fg:w="1"/><text x="78.4582%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.2082%" y="453" width="0.0807%" height="15" fill="rgb(215,151,11)" fg:x="969" fg:w="1"/><text x="78.4582%" y="463.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="78.0468%" y="613" width="0.3228%" height="15" fill="rgb(225,16,24)" fg:x="967" fg:w="4"/><text x="78.2968%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (3 samples, 0.24%)</title><rect x="78.1275%" y="597" width="0.2421%" height="15" fill="rgb(217,117,5)" fg:x="968" fg:w="3"/><text x="78.3775%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="78.1275%" y="581" width="0.2421%" height="15" fill="rgb(246,187,53)" fg:x="968" fg:w="3"/><text x="78.3775%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (3 samples, 0.24%)</title><rect x="78.1275%" y="565" width="0.2421%" height="15" fill="rgb(241,71,40)" fg:x="968" fg:w="3"/><text x="78.3775%" y="575.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="78.1275%" y="549" width="0.2421%" height="15" fill="rgb(231,67,39)" fg:x="968" fg:w="3"/><text x="78.3775%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.2889%" y="533" width="0.0807%" height="15" fill="rgb(222,120,24)" fg:x="970" fg:w="1"/><text x="78.5389%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.2889%" y="517" width="0.0807%" height="15" fill="rgb(248,3,3)" fg:x="970" fg:w="1"/><text x="78.5389%" y="527.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="78.3697%" y="501" width="0.0807%" height="15" fill="rgb(228,218,5)" fg:x="971" fg:w="1"/><text x="78.6197%" y="511.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="78.3697%" y="485" width="0.0807%" height="15" fill="rgb(212,202,43)" fg:x="971" fg:w="1"/><text x="78.6197%" y="495.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (5 samples, 0.40%)</title><rect x="78.3697%" y="533" width="0.4036%" height="15" fill="rgb(235,183,2)" fg:x="971" fg:w="5"/><text x="78.6197%" y="543.50"></text></g><g><title>libloading::safe::Library::new (5 samples, 0.40%)</title><rect x="78.3697%" y="517" width="0.4036%" height="15" fill="rgb(230,165,10)" fg:x="971" fg:w="5"/><text x="78.6197%" y="527.50"></text></g><g><title>dlopen (4 samples, 0.32%)</title><rect x="78.4504%" y="501" width="0.3228%" height="15" fill="rgb(219,54,40)" fg:x="972" fg:w="4"/><text x="78.7004%" y="511.50"></text></g><g><title>_dl_catch_error (3 samples, 0.24%)</title><rect x="78.5311%" y="485" width="0.2421%" height="15" fill="rgb(244,73,9)" fg:x="973" fg:w="3"/><text x="78.7811%" y="495.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="78.5311%" y="469" width="0.2421%" height="15" fill="rgb(212,32,45)" fg:x="973" fg:w="3"/><text x="78.7811%" y="479.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="78.5311%" y="453" width="0.2421%" height="15" fill="rgb(205,58,31)" fg:x="973" fg:w="3"/><text x="78.7811%" y="463.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="78.5311%" y="437" width="0.2421%" height="15" fill="rgb(250,120,43)" fg:x="973" fg:w="3"/><text x="78.7811%" y="447.50"></text></g><g><title>engine::session::Session::initialize (6 samples, 0.48%)</title><rect x="78.3697%" y="565" width="0.4843%" height="15" fill="rgb(235,13,10)" fg:x="971" fg:w="6"/><text x="78.6197%" y="575.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (6 samples, 0.48%)</title><rect x="78.3697%" y="549" width="0.4843%" height="15" fill="rgb(232,219,31)" fg:x="971" fg:w="6"/><text x="78.6197%" y="559.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (1 samples, 0.08%)</title><rect x="78.7732%" y="533" width="0.0807%" height="15" fill="rgb(218,157,51)" fg:x="976" fg:w="1"/><text x="79.0232%" y="543.50"></text></g><g><title>std::time::Instant::duration_since (1 samples, 0.08%)</title><rect x="78.7732%" y="517" width="0.0807%" height="15" fill="rgb(211,91,52)" fg:x="976" fg:w="1"/><text x="79.0232%" y="527.50"></text></g><g><title>std::time::Instant::checked_duration_since (1 samples, 0.08%)</title><rect x="78.7732%" y="501" width="0.0807%" height="15" fill="rgb(240,173,1)" fg:x="976" fg:w="1"/><text x="79.0232%" y="511.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (1 samples, 0.08%)</title><rect x="78.7732%" y="485" width="0.0807%" height="15" fill="rgb(248,20,47)" fg:x="976" fg:w="1"/><text x="79.0232%" y="495.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (1 samples, 0.08%)</title><rect x="78.7732%" y="469" width="0.0807%" height="15" fill="rgb(217,221,40)" fg:x="976" fg:w="1"/><text x="79.0232%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (1 samples, 0.08%)</title><rect x="78.7732%" y="453" width="0.0807%" height="15" fill="rgb(226,149,51)" fg:x="976" fg:w="1"/><text x="79.0232%" y="463.50"></text></g><g><title>core::cmp::PartialOrd::ge (1 samples, 0.08%)</title><rect x="78.7732%" y="437" width="0.0807%" height="15" fill="rgb(252,193,7)" fg:x="976" fg:w="1"/><text x="79.0232%" y="447.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (7 samples, 0.56%)</title><rect x="78.3697%" y="613" width="0.5650%" height="15" fill="rgb(205,123,0)" fg:x="971" fg:w="7"/><text x="78.6197%" y="623.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (7 samples, 0.56%)</title><rect x="78.3697%" y="597" width="0.5650%" height="15" fill="rgb(233,173,25)" fg:x="971" fg:w="7"/><text x="78.6197%" y="607.50"></text></g><g><title>engine::session::Session::new (7 samples, 0.56%)</title><rect x="78.3697%" y="581" width="0.5650%" height="15" fill="rgb(216,63,32)" fg:x="971" fg:w="7"/><text x="78.6197%" y="591.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="78.8539%" y="565" width="0.0807%" height="15" fill="rgb(209,56,45)" fg:x="977" fg:w="1"/><text x="79.1039%" y="575.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="78.8539%" y="549" width="0.0807%" height="15" fill="rgb(226,111,49)" fg:x="977" fg:w="1"/><text x="79.1039%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="78.8539%" y="533" width="0.0807%" height="15" fill="rgb(244,181,21)" fg:x="977" fg:w="1"/><text x="79.1039%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::surround::Surroundings&gt; (1 samples, 0.08%)</title><rect x="78.9346%" y="597" width="0.0807%" height="15" fill="rgb(222,126,15)" fg:x="978" fg:w="1"/><text x="79.1846%" y="607.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="79.0153%" y="485" width="0.0807%" height="15" fill="rgb(222,95,17)" fg:x="979" fg:w="1"/><text x="79.2653%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.0153%" y="469" width="0.0807%" height="15" fill="rgb(254,46,5)" fg:x="979" fg:w="1"/><text x="79.2653%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="79.0960%" y="469" width="0.0807%" height="15" fill="rgb(236,216,35)" fg:x="980" fg:w="1"/><text x="79.3460%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.0960%" y="453" width="0.0807%" height="15" fill="rgb(217,187,26)" fg:x="980" fg:w="1"/><text x="79.3460%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.0960%" y="437" width="0.0807%" height="15" fill="rgb(207,192,25)" fg:x="980" fg:w="1"/><text x="79.3460%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.0960%" y="421" width="0.0807%" height="15" fill="rgb(253,135,27)" fg:x="980" fg:w="1"/><text x="79.3460%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.1768%" y="469" width="0.0807%" height="15" fill="rgb(211,122,29)" fg:x="981" fg:w="1"/><text x="79.4268%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.1768%" y="453" width="0.0807%" height="15" fill="rgb(233,162,40)" fg:x="981" fg:w="1"/><text x="79.4268%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.1768%" y="437" width="0.0807%" height="15" fill="rgb(222,184,47)" fg:x="981" fg:w="1"/><text x="79.4268%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.1768%" y="421" width="0.0807%" height="15" fill="rgb(249,99,23)" fg:x="981" fg:w="1"/><text x="79.4268%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.2575%" y="453" width="0.0807%" height="15" fill="rgb(214,60,12)" fg:x="982" fg:w="1"/><text x="79.5075%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.2575%" y="437" width="0.0807%" height="15" fill="rgb(250,229,36)" fg:x="982" fg:w="1"/><text x="79.5075%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.2575%" y="421" width="0.0807%" height="15" fill="rgb(232,195,10)" fg:x="982" fg:w="1"/><text x="79.5075%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.2575%" y="405" width="0.0807%" height="15" fill="rgb(205,213,31)" fg:x="982" fg:w="1"/><text x="79.5075%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="79.2575%" y="389" width="0.0807%" height="15" fill="rgb(237,43,8)" fg:x="982" fg:w="1"/><text x="79.5075%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.2575%" y="373" width="0.0807%" height="15" fill="rgb(216,208,3)" fg:x="982" fg:w="1"/><text x="79.5075%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="79.2575%" y="357" width="0.0807%" height="15" fill="rgb(228,179,44)" fg:x="982" fg:w="1"/><text x="79.5075%" y="367.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.4189%" y="421" width="0.0807%" height="15" fill="rgb(230,192,27)" fg:x="984" fg:w="1"/><text x="79.6689%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="79.2575%" y="469" width="0.3228%" height="15" fill="rgb(251,30,38)" fg:x="982" fg:w="4"/><text x="79.5075%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="79.3382%" y="453" width="0.2421%" height="15" fill="rgb(246,55,52)" fg:x="983" fg:w="3"/><text x="79.5882%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="79.4189%" y="437" width="0.1614%" height="15" fill="rgb(249,79,26)" fg:x="984" fg:w="2"/><text x="79.6689%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.4996%" y="421" width="0.0807%" height="15" fill="rgb(220,202,16)" fg:x="985" fg:w="1"/><text x="79.7496%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.65%)</title><rect x="79.0153%" y="501" width="0.6457%" height="15" fill="rgb(250,170,23)" fg:x="979" fg:w="8"/><text x="79.2653%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="79.0960%" y="485" width="0.5650%" height="15" fill="rgb(230,7,37)" fg:x="980" fg:w="7"/><text x="79.3460%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.5803%" y="469" width="0.0807%" height="15" fill="rgb(213,71,1)" fg:x="986" fg:w="1"/><text x="79.8303%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.5803%" y="453" width="0.0807%" height="15" fill="rgb(227,87,39)" fg:x="986" fg:w="1"/><text x="79.8303%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.5803%" y="437" width="0.0807%" height="15" fill="rgb(210,41,29)" fg:x="986" fg:w="1"/><text x="79.8303%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="79.6610%" y="501" width="0.1614%" height="15" fill="rgb(206,191,31)" fg:x="987" fg:w="2"/><text x="79.9110%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="79.6610%" y="485" width="0.1614%" height="15" fill="rgb(247,75,54)" fg:x="987" fg:w="2"/><text x="79.9110%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="79.6610%" y="469" width="0.1614%" height="15" fill="rgb(208,54,50)" fg:x="987" fg:w="2"/><text x="79.9110%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="79.6610%" y="453" width="0.1614%" height="15" fill="rgb(214,90,37)" fg:x="987" fg:w="2"/><text x="79.9110%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="79.6610%" y="437" width="0.1614%" height="15" fill="rgb(220,132,6)" fg:x="987" fg:w="2"/><text x="79.9110%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.7417%" y="421" width="0.0807%" height="15" fill="rgb(213,167,7)" fg:x="988" fg:w="1"/><text x="79.9917%" y="431.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="79.8224%" y="453" width="0.0807%" height="15" fill="rgb(243,36,27)" fg:x="989" fg:w="1"/><text x="80.0724%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.9031%" y="405" width="0.0807%" height="15" fill="rgb(235,147,12)" fg:x="990" fg:w="1"/><text x="80.1531%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.9031%" y="389" width="0.0807%" height="15" fill="rgb(212,198,44)" fg:x="990" fg:w="1"/><text x="80.1531%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.9031%" y="373" width="0.0807%" height="15" fill="rgb(218,68,50)" fg:x="990" fg:w="1"/><text x="80.1531%" y="383.50"></text></g><g><title>engine::session::Session::flush (13 samples, 1.05%)</title><rect x="79.0153%" y="597" width="1.0492%" height="15" fill="rgb(224,79,48)" fg:x="979" fg:w="13"/><text x="79.2653%" y="607.50"></text></g><g><title>engine::session::state::State::close (13 samples, 1.05%)</title><rect x="79.0153%" y="581" width="1.0492%" height="15" fill="rgb(213,191,50)" fg:x="979" fg:w="13"/><text x="79.2653%" y="591.50"></text></g><g><title>engine::session::state::State::flush_entities (13 samples, 1.05%)</title><rect x="79.0153%" y="565" width="1.0492%" height="15" fill="rgb(254,146,10)" fg:x="979" fg:w="13"/><text x="79.2653%" y="575.50"></text></g><g><title>core::iter::adapters::try_process (13 samples, 1.05%)</title><rect x="79.0153%" y="549" width="1.0492%" height="15" fill="rgb(215,175,11)" fg:x="979" fg:w="13"/><text x="79.2653%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (13 samples, 1.05%)</title><rect x="79.0153%" y="533" width="1.0492%" height="15" fill="rgb(207,49,7)" fg:x="979" fg:w="13"/><text x="79.2653%" y="543.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (13 samples, 1.05%)</title><rect x="79.0153%" y="517" width="1.0492%" height="15" fill="rgb(234,144,29)" fg:x="979" fg:w="13"/><text x="79.2653%" y="527.50"></text></g><g><title>kernel::model::any_entity_changes (3 samples, 0.24%)</title><rect x="79.8224%" y="501" width="0.2421%" height="15" fill="rgb(213,222,48)" fg:x="989" fg:w="3"/><text x="80.0724%" y="511.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="79.8224%" y="485" width="0.2421%" height="15" fill="rgb(222,8,6)" fg:x="989" fg:w="3"/><text x="80.0724%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="79.8224%" y="469" width="0.2421%" height="15" fill="rgb(221,114,49)" fg:x="989" fg:w="3"/><text x="80.0724%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="79.9031%" y="453" width="0.1614%" height="15" fill="rgb(250,140,42)" fg:x="990" fg:w="2"/><text x="80.1531%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="79.9031%" y="437" width="0.1614%" height="15" fill="rgb(250,150,27)" fg:x="990" fg:w="2"/><text x="80.1531%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="79.9031%" y="421" width="0.1614%" height="15" fill="rgb(252,159,3)" fg:x="990" fg:w="2"/><text x="80.1531%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="79.9839%" y="405" width="0.0807%" height="15" fill="rgb(241,182,3)" fg:x="991" fg:w="1"/><text x="80.2339%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="79.9839%" y="389" width="0.0807%" height="15" fill="rgb(236,3,9)" fg:x="991" fg:w="1"/><text x="80.2339%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="79.9839%" y="373" width="0.0807%" height="15" fill="rgb(223,227,51)" fg:x="991" fg:w="1"/><text x="80.2339%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="79.9839%" y="357" width="0.0807%" height="15" fill="rgb(232,133,30)" fg:x="991" fg:w="1"/><text x="80.2339%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="80.0646%" y="517" width="0.0807%" height="15" fill="rgb(209,93,27)" fg:x="992" fg:w="1"/><text x="80.3146%" y="527.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="80.0646%" y="549" width="0.1614%" height="15" fill="rgb(208,108,34)" fg:x="992" fg:w="2"/><text x="80.3146%" y="559.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="80.0646%" y="533" width="0.1614%" height="15" fill="rgb(215,189,13)" fg:x="992" fg:w="2"/><text x="80.3146%" y="543.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="80.1453%" y="517" width="0.0807%" height="15" fill="rgb(206,88,23)" fg:x="993" fg:w="1"/><text x="80.3953%" y="527.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="80.1453%" y="501" width="0.0807%" height="15" fill="rgb(240,173,0)" fg:x="993" fg:w="1"/><text x="80.3953%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="80.0646%" y="565" width="0.2421%" height="15" fill="rgb(223,106,52)" fg:x="992" fg:w="3"/><text x="80.3146%" y="575.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="80.2260%" y="549" width="0.0807%" height="15" fill="rgb(206,130,16)" fg:x="994" fg:w="1"/><text x="80.4760%" y="559.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="80.2260%" y="533" width="0.0807%" height="15" fill="rgb(220,54,25)" fg:x="994" fg:w="1"/><text x="80.4760%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="80.2260%" y="517" width="0.0807%" height="15" fill="rgb(210,4,38)" fg:x="994" fg:w="1"/><text x="80.4760%" y="527.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="80.2260%" y="501" width="0.0807%" height="15" fill="rgb(238,94,39)" fg:x="994" fg:w="1"/><text x="80.4760%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="80.2260%" y="485" width="0.0807%" height="15" fill="rgb(234,124,34)" fg:x="994" fg:w="1"/><text x="80.4760%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.2260%" y="469" width="0.0807%" height="15" fill="rgb(221,91,40)" fg:x="994" fg:w="1"/><text x="80.4760%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="80.2260%" y="453" width="0.0807%" height="15" fill="rgb(246,53,28)" fg:x="994" fg:w="1"/><text x="80.4760%" y="463.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="80.2260%" y="437" width="0.0807%" height="15" fill="rgb(229,109,7)" fg:x="994" fg:w="1"/><text x="80.4760%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.2260%" y="421" width="0.0807%" height="15" fill="rgb(249,117,8)" fg:x="994" fg:w="1"/><text x="80.4760%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.2260%" y="405" width="0.0807%" height="15" fill="rgb(210,181,1)" fg:x="994" fg:w="1"/><text x="80.4760%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.3067%" y="517" width="0.0807%" height="15" fill="rgb(211,66,1)" fg:x="995" fg:w="1"/><text x="80.5567%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.3067%" y="501" width="0.0807%" height="15" fill="rgb(221,90,14)" fg:x="995" fg:w="1"/><text x="80.5567%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.3067%" y="485" width="0.0807%" height="15" fill="rgb(219,222,44)" fg:x="995" fg:w="1"/><text x="80.5567%" y="495.50"></text></g><g><title>plugins_core::build::Build::into_entry (5 samples, 0.40%)</title><rect x="80.0646%" y="581" width="0.4036%" height="15" fill="rgb(246,34,33)" fg:x="992" fg:w="5"/><text x="80.3146%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="80.3067%" y="565" width="0.1614%" height="15" fill="rgb(227,135,41)" fg:x="995" fg:w="2"/><text x="80.5567%" y="575.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="80.3067%" y="549" width="0.1614%" height="15" fill="rgb(226,15,14)" fg:x="995" fg:w="2"/><text x="80.5567%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="80.3067%" y="533" width="0.1614%" height="15" fill="rgb(236,148,47)" fg:x="995" fg:w="2"/><text x="80.5567%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.3874%" y="517" width="0.0807%" height="15" fill="rgb(233,162,52)" fg:x="996" fg:w="1"/><text x="80.6374%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.3874%" y="501" width="0.0807%" height="15" fill="rgb(244,35,28)" fg:x="996" fg:w="1"/><text x="80.6374%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="80.3874%" y="485" width="0.0807%" height="15" fill="rgb(205,121,10)" fg:x="996" fg:w="1"/><text x="80.6374%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.3874%" y="469" width="0.0807%" height="15" fill="rgb(250,58,18)" fg:x="996" fg:w="1"/><text x="80.6374%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.3874%" y="453" width="0.0807%" height="15" fill="rgb(216,37,13)" fg:x="996" fg:w="1"/><text x="80.6374%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.3874%" y="437" width="0.0807%" height="15" fill="rgb(221,215,42)" fg:x="996" fg:w="1"/><text x="80.6374%" y="447.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="80.3874%" y="421" width="0.0807%" height="15" fill="rgb(217,214,19)" fg:x="996" fg:w="1"/><text x="80.6374%" y="431.50"></text></g><g><title>plugins_core::build::Build::carryable (6 samples, 0.48%)</title><rect x="80.0646%" y="597" width="0.4843%" height="15" fill="rgb(233,139,13)" fg:x="992" fg:w="6"/><text x="80.3146%" y="607.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="80.4681%" y="581" width="0.0807%" height="15" fill="rgb(247,168,23)" fg:x="997" fg:w="1"/><text x="80.7181%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="80.4681%" y="565" width="0.0807%" height="15" fill="rgb(207,202,1)" fg:x="997" fg:w="1"/><text x="80.7181%" y="575.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (1 samples, 0.08%)</title><rect x="80.4681%" y="549" width="0.0807%" height="15" fill="rgb(220,155,48)" fg:x="997" fg:w="1"/><text x="80.7181%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.4681%" y="533" width="0.0807%" height="15" fill="rgb(250,43,26)" fg:x="997" fg:w="1"/><text x="80.7181%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Kind&gt;::serialize (1 samples, 0.08%)</title><rect x="80.4681%" y="517" width="0.0807%" height="15" fill="rgb(212,190,23)" fg:x="997" fg:w="1"/><text x="80.7181%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.4681%" y="501" width="0.0807%" height="15" fill="rgb(216,39,24)" fg:x="997" fg:w="1"/><text x="80.7181%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="80.4681%" y="485" width="0.0807%" height="15" fill="rgb(252,113,16)" fg:x="997" fg:w="1"/><text x="80.7181%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.4681%" y="469" width="0.0807%" height="15" fill="rgb(208,113,19)" fg:x="997" fg:w="1"/><text x="80.7181%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.4681%" y="453" width="0.0807%" height="15" fill="rgb(234,107,25)" fg:x="997" fg:w="1"/><text x="80.7181%" y="463.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity_ref::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="80.5488%" y="565" width="0.0807%" height="15" fill="rgb(234,217,51)" fg:x="998" fg:w="1"/><text x="80.7988%" y="575.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="80.5488%" y="549" width="0.0807%" height="15" fill="rgb(251,29,42)" fg:x="998" fg:w="1"/><text x="80.7988%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.5488%" y="533" width="0.0807%" height="15" fill="rgb(221,62,51)" fg:x="998" fg:w="1"/><text x="80.7988%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.5488%" y="517" width="0.0807%" height="15" fill="rgb(240,192,43)" fg:x="998" fg:w="1"/><text x="80.7988%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="80.5488%" y="501" width="0.0807%" height="15" fill="rgb(224,157,47)" fg:x="998" fg:w="1"/><text x="80.7988%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="80.5488%" y="485" width="0.0807%" height="15" fill="rgb(226,84,45)" fg:x="998" fg:w="1"/><text x="80.7988%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="80.5488%" y="469" width="0.0807%" height="15" fill="rgb(208,207,23)" fg:x="998" fg:w="1"/><text x="80.7988%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="80.5488%" y="453" width="0.0807%" height="15" fill="rgb(253,34,51)" fg:x="998" fg:w="1"/><text x="80.7988%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="80.5488%" y="437" width="0.0807%" height="15" fill="rgb(227,26,34)" fg:x="998" fg:w="1"/><text x="80.7988%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="80.5488%" y="421" width="0.0807%" height="15" fill="rgb(245,75,19)" fg:x="998" fg:w="1"/><text x="80.7988%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="80.5488%" y="405" width="0.0807%" height="15" fill="rgb(250,191,31)" fg:x="998" fg:w="1"/><text x="80.7988%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="80.5488%" y="389" width="0.0807%" height="15" fill="rgb(224,11,50)" fg:x="998" fg:w="1"/><text x="80.7988%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="80.5488%" y="373" width="0.0807%" height="15" fill="rgb(231,171,7)" fg:x="998" fg:w="1"/><text x="80.7988%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.5488%" y="357" width="0.0807%" height="15" fill="rgb(252,214,10)" fg:x="998" fg:w="1"/><text x="80.7988%" y="367.50"></text></g><g><title>plugins_core::build::Build::holding (2 samples, 0.16%)</title><rect x="80.5488%" y="597" width="0.1614%" height="15" fill="rgb(249,45,46)" fg:x="998" fg:w="2"/><text x="80.7988%" y="607.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="80.5488%" y="581" width="0.1614%" height="15" fill="rgb(240,173,7)" fg:x="998" fg:w="2"/><text x="80.7988%" y="591.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="80.6295%" y="565" width="0.0807%" height="15" fill="rgb(235,214,13)" fg:x="999" fg:w="1"/><text x="80.8795%" y="575.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity_ref::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="80.6295%" y="549" width="0.0807%" height="15" fill="rgb(245,156,8)" fg:x="999" fg:w="1"/><text x="80.8795%" y="559.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="80.6295%" y="533" width="0.0807%" height="15" fill="rgb(235,46,12)" fg:x="999" fg:w="1"/><text x="80.8795%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="80.6295%" y="517" width="0.0807%" height="15" fill="rgb(221,81,14)" fg:x="999" fg:w="1"/><text x="80.8795%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="80.6295%" y="501" width="0.0807%" height="15" fill="rgb(238,207,9)" fg:x="999" fg:w="1"/><text x="80.8795%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="80.6295%" y="485" width="0.0807%" height="15" fill="rgb(224,129,35)" fg:x="999" fg:w="1"/><text x="80.8795%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.6295%" y="469" width="0.0807%" height="15" fill="rgb(243,218,34)" fg:x="999" fg:w="1"/><text x="80.8795%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.6295%" y="453" width="0.0807%" height="15" fill="rgb(220,166,13)" fg:x="999" fg:w="1"/><text x="80.8795%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="80.6295%" y="437" width="0.0807%" height="15" fill="rgb(227,167,49)" fg:x="999" fg:w="1"/><text x="80.8795%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.6295%" y="421" width="0.0807%" height="15" fill="rgb(234,142,12)" fg:x="999" fg:w="1"/><text x="80.8795%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.6295%" y="405" width="0.0807%" height="15" fill="rgb(207,100,48)" fg:x="999" fg:w="1"/><text x="80.8795%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.6295%" y="389" width="0.0807%" height="15" fill="rgb(210,25,14)" fg:x="999" fg:w="1"/><text x="80.8795%" y="399.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="80.6295%" y="373" width="0.0807%" height="15" fill="rgb(246,116,27)" fg:x="999" fg:w="1"/><text x="80.8795%" y="383.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="80.7103%" y="581" width="0.0807%" height="15" fill="rgb(214,193,42)" fg:x="1000" fg:w="1"/><text x="80.9603%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="80.7103%" y="565" width="0.0807%" height="15" fill="rgb(214,122,8)" fg:x="1000" fg:w="1"/><text x="80.9603%" y="575.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="80.7103%" y="549" width="0.0807%" height="15" fill="rgb(244,173,18)" fg:x="1000" fg:w="1"/><text x="80.9603%" y="559.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="80.7103%" y="533" width="0.0807%" height="15" fill="rgb(232,68,19)" fg:x="1000" fg:w="1"/><text x="80.9603%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="80.7103%" y="517" width="0.0807%" height="15" fill="rgb(236,224,1)" fg:x="1000" fg:w="1"/><text x="80.9603%" y="527.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="80.7103%" y="501" width="0.0807%" height="15" fill="rgb(240,11,8)" fg:x="1000" fg:w="1"/><text x="80.9603%" y="511.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="80.7103%" y="485" width="0.0807%" height="15" fill="rgb(244,159,20)" fg:x="1000" fg:w="1"/><text x="80.9603%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="80.7103%" y="469" width="0.0807%" height="15" fill="rgb(240,223,54)" fg:x="1000" fg:w="1"/><text x="80.9603%" y="479.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="80.7103%" y="453" width="0.0807%" height="15" fill="rgb(237,146,5)" fg:x="1000" fg:w="1"/><text x="80.9603%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="80.7910%" y="421" width="0.1614%" height="15" fill="rgb(218,221,32)" fg:x="1001" fg:w="2"/><text x="81.0410%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="80.7910%" y="405" width="0.1614%" height="15" fill="rgb(244,96,26)" fg:x="1001" fg:w="2"/><text x="81.0410%" y="415.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.8717%" y="389" width="0.0807%" height="15" fill="rgb(245,184,37)" fg:x="1002" fg:w="1"/><text x="81.1217%" y="399.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="80.8717%" y="373" width="0.0807%" height="15" fill="rgb(248,91,47)" fg:x="1002" fg:w="1"/><text x="81.1217%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="80.8717%" y="357" width="0.0807%" height="15" fill="rgb(243,199,8)" fg:x="1002" fg:w="1"/><text x="81.1217%" y="367.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.9524%" y="421" width="0.0807%" height="15" fill="rgb(249,12,15)" fg:x="1003" fg:w="1"/><text x="81.2024%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.9524%" y="405" width="0.0807%" height="15" fill="rgb(245,97,12)" fg:x="1003" fg:w="1"/><text x="81.2024%" y="415.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.9524%" y="389" width="0.0807%" height="15" fill="rgb(244,61,1)" fg:x="1003" fg:w="1"/><text x="81.2024%" y="399.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="80.9524%" y="373" width="0.0807%" height="15" fill="rgb(222,194,10)" fg:x="1003" fg:w="1"/><text x="81.2024%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="80.9524%" y="357" width="0.0807%" height="15" fill="rgb(226,178,8)" fg:x="1003" fg:w="1"/><text x="81.2024%" y="367.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="80.7910%" y="453" width="0.3228%" height="15" fill="rgb(241,32,34)" fg:x="1001" fg:w="4"/><text x="81.0410%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="80.7910%" y="437" width="0.3228%" height="15" fill="rgb(254,26,6)" fg:x="1001" fg:w="4"/><text x="81.0410%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.0331%" y="421" width="0.0807%" height="15" fill="rgb(249,71,11)" fg:x="1004" fg:w="1"/><text x="81.2831%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.40%)</title><rect x="80.7910%" y="469" width="0.4036%" height="15" fill="rgb(232,170,27)" fg:x="1001" fg:w="5"/><text x="81.0410%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.1138%" y="453" width="0.0807%" height="15" fill="rgb(214,223,17)" fg:x="1005" fg:w="1"/><text x="81.3638%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="81.1138%" y="437" width="0.0807%" height="15" fill="rgb(250,18,15)" fg:x="1005" fg:w="1"/><text x="81.3638%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.1138%" y="421" width="0.0807%" height="15" fill="rgb(212,153,51)" fg:x="1005" fg:w="1"/><text x="81.3638%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="81.1138%" y="405" width="0.0807%" height="15" fill="rgb(219,194,12)" fg:x="1005" fg:w="1"/><text x="81.3638%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.1138%" y="389" width="0.0807%" height="15" fill="rgb(212,58,17)" fg:x="1005" fg:w="1"/><text x="81.3638%" y="399.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="81.1138%" y="373" width="0.0807%" height="15" fill="rgb(254,5,10)" fg:x="1005" fg:w="1"/><text x="81.3638%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="81.1138%" y="357" width="0.0807%" height="15" fill="rgb(246,91,7)" fg:x="1005" fg:w="1"/><text x="81.3638%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.1945%" y="437" width="0.0807%" height="15" fill="rgb(218,108,49)" fg:x="1006" fg:w="1"/><text x="81.4445%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="81.1945%" y="469" width="0.1614%" height="15" fill="rgb(238,123,20)" fg:x="1006" fg:w="2"/><text x="81.4445%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="81.1945%" y="453" width="0.1614%" height="15" fill="rgb(231,69,23)" fg:x="1006" fg:w="2"/><text x="81.4445%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="81.2752%" y="437" width="0.0807%" height="15" fill="rgb(230,209,3)" fg:x="1007" fg:w="1"/><text x="81.5252%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="81.2752%" y="421" width="0.0807%" height="15" fill="rgb(231,19,0)" fg:x="1007" fg:w="1"/><text x="81.5252%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.3559%" y="421" width="0.0807%" height="15" fill="rgb(226,192,25)" fg:x="1008" fg:w="1"/><text x="81.6059%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.3559%" y="405" width="0.0807%" height="15" fill="rgb(223,175,53)" fg:x="1008" fg:w="1"/><text x="81.6059%" y="415.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="81.4366%" y="421" width="0.0807%" height="15" fill="rgb(248,35,51)" fg:x="1009" fg:w="1"/><text x="81.6866%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="81.4366%" y="405" width="0.0807%" height="15" fill="rgb(230,37,26)" fg:x="1009" fg:w="1"/><text x="81.6866%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="81.5174%" y="405" width="0.0807%" height="15" fill="rgb(206,120,22)" fg:x="1010" fg:w="1"/><text x="81.7674%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="81.5174%" y="389" width="0.0807%" height="15" fill="rgb(207,165,28)" fg:x="1010" fg:w="1"/><text x="81.7674%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.5174%" y="373" width="0.0807%" height="15" fill="rgb(226,23,46)" fg:x="1010" fg:w="1"/><text x="81.7674%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.5174%" y="357" width="0.0807%" height="15" fill="rgb(208,130,44)" fg:x="1010" fg:w="1"/><text x="81.7674%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.5174%" y="341" width="0.0807%" height="15" fill="rgb(231,67,8)" fg:x="1010" fg:w="1"/><text x="81.7674%" y="351.50"></text></g><g><title>engine::session::Session::flush (11 samples, 0.89%)</title><rect x="80.7910%" y="581" width="0.8878%" height="15" fill="rgb(205,183,22)" fg:x="1001" fg:w="11"/><text x="81.0410%" y="591.50"></text></g><g><title>engine::session::Session::save_changes (11 samples, 0.89%)</title><rect x="80.7910%" y="565" width="0.8878%" height="15" fill="rgb(224,47,9)" fg:x="1001" fg:w="11"/><text x="81.0410%" y="575.50"></text></g><g><title>engine::session::state::State::close (11 samples, 0.89%)</title><rect x="80.7910%" y="549" width="0.8878%" height="15" fill="rgb(250,183,49)" fg:x="1001" fg:w="11"/><text x="81.0410%" y="559.50"></text></g><g><title>engine::session::state::State::flush_entities (11 samples, 0.89%)</title><rect x="80.7910%" y="533" width="0.8878%" height="15" fill="rgb(220,151,39)" fg:x="1001" fg:w="11"/><text x="81.0410%" y="543.50"></text></g><g><title>core::iter::adapters::try_process (11 samples, 0.89%)</title><rect x="80.7910%" y="517" width="0.8878%" height="15" fill="rgb(220,118,20)" fg:x="1001" fg:w="11"/><text x="81.0410%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (11 samples, 0.89%)</title><rect x="80.7910%" y="501" width="0.8878%" height="15" fill="rgb(231,65,51)" fg:x="1001" fg:w="11"/><text x="81.0410%" y="511.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (11 samples, 0.89%)</title><rect x="80.7910%" y="485" width="0.8878%" height="15" fill="rgb(253,125,37)" fg:x="1001" fg:w="11"/><text x="81.0410%" y="495.50"></text></g><g><title>kernel::model::any_entity_changes (4 samples, 0.32%)</title><rect x="81.3559%" y="469" width="0.3228%" height="15" fill="rgb(232,102,6)" fg:x="1008" fg:w="4"/><text x="81.6059%" y="479.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="81.3559%" y="453" width="0.3228%" height="15" fill="rgb(251,105,13)" fg:x="1008" fg:w="4"/><text x="81.6059%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="81.3559%" y="437" width="0.3228%" height="15" fill="rgb(222,179,29)" fg:x="1008" fg:w="4"/><text x="81.6059%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="81.5174%" y="421" width="0.1614%" height="15" fill="rgb(229,180,53)" fg:x="1010" fg:w="2"/><text x="81.7674%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.5981%" y="405" width="0.0807%" height="15" fill="rgb(238,104,13)" fg:x="1011" fg:w="1"/><text x="81.8481%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.6788%" y="469" width="0.0807%" height="15" fill="rgb(210,130,5)" fg:x="1012" fg:w="1"/><text x="81.9288%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.6788%" y="453" width="0.0807%" height="15" fill="rgb(233,87,49)" fg:x="1012" fg:w="1"/><text x="81.9288%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="81.7595%" y="437" width="0.0807%" height="15" fill="rgb(243,34,9)" fg:x="1013" fg:w="1"/><text x="82.0095%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="81.6788%" y="517" width="0.2421%" height="15" fill="rgb(235,225,10)" fg:x="1012" fg:w="3"/><text x="81.9288%" y="527.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="81.6788%" y="501" width="0.2421%" height="15" fill="rgb(212,0,30)" fg:x="1012" fg:w="3"/><text x="81.9288%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="81.6788%" y="485" width="0.2421%" height="15" fill="rgb(211,177,0)" fg:x="1012" fg:w="3"/><text x="81.9288%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="81.7595%" y="469" width="0.1614%" height="15" fill="rgb(225,220,11)" fg:x="1013" fg:w="2"/><text x="82.0095%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="81.7595%" y="453" width="0.1614%" height="15" fill="rgb(215,10,13)" fg:x="1013" fg:w="2"/><text x="82.0095%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="81.8402%" y="437" width="0.0807%" height="15" fill="rgb(240,177,14)" fg:x="1014" fg:w="1"/><text x="82.0902%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.8402%" y="421" width="0.0807%" height="15" fill="rgb(243,7,39)" fg:x="1014" fg:w="1"/><text x="82.0902%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="81.8402%" y="405" width="0.0807%" height="15" fill="rgb(212,99,0)" fg:x="1014" fg:w="1"/><text x="82.0902%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="81.8402%" y="389" width="0.0807%" height="15" fill="rgb(225,162,48)" fg:x="1014" fg:w="1"/><text x="82.0902%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.9209%" y="469" width="0.0807%" height="15" fill="rgb(246,16,25)" fg:x="1015" fg:w="1"/><text x="82.1709%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.9209%" y="453" width="0.0807%" height="15" fill="rgb(220,150,2)" fg:x="1015" fg:w="1"/><text x="82.1709%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.9209%" y="437" width="0.0807%" height="15" fill="rgb(237,113,11)" fg:x="1015" fg:w="1"/><text x="82.1709%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.9209%" y="421" width="0.0807%" height="15" fill="rgb(236,70,20)" fg:x="1015" fg:w="1"/><text x="82.1709%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.9209%" y="405" width="0.0807%" height="15" fill="rgb(234,94,7)" fg:x="1015" fg:w="1"/><text x="82.1709%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="81.9209%" y="389" width="0.0807%" height="15" fill="rgb(250,221,0)" fg:x="1015" fg:w="1"/><text x="82.1709%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="81.9209%" y="373" width="0.0807%" height="15" fill="rgb(245,149,46)" fg:x="1015" fg:w="1"/><text x="82.1709%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="81.9209%" y="357" width="0.0807%" height="15" fill="rgb(215,37,27)" fg:x="1015" fg:w="1"/><text x="82.1709%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="81.9209%" y="341" width="0.0807%" height="15" fill="rgb(232,65,3)" fg:x="1015" fg:w="1"/><text x="82.1709%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="81.9209%" y="325" width="0.0807%" height="15" fill="rgb(214,2,16)" fg:x="1015" fg:w="1"/><text x="82.1709%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="81.9209%" y="309" width="0.0807%" height="15" fill="rgb(227,131,50)" fg:x="1015" fg:w="1"/><text x="82.1709%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="81.9209%" y="293" width="0.0807%" height="15" fill="rgb(247,131,45)" fg:x="1015" fg:w="1"/><text x="82.1709%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="81.9209%" y="277" width="0.0807%" height="15" fill="rgb(215,97,47)" fg:x="1015" fg:w="1"/><text x="82.1709%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="81.9209%" y="261" width="0.0807%" height="15" fill="rgb(233,143,12)" fg:x="1015" fg:w="1"/><text x="82.1709%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.9209%" y="245" width="0.0807%" height="15" fill="rgb(222,57,17)" fg:x="1015" fg:w="1"/><text x="82.1709%" y="255.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity_ref::EntityRef&gt;::try_from (5 samples, 0.40%)</title><rect x="81.6788%" y="549" width="0.4036%" height="15" fill="rgb(214,119,38)" fg:x="1012" fg:w="5"/><text x="81.9288%" y="559.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (5 samples, 0.40%)</title><rect x="81.6788%" y="533" width="0.4036%" height="15" fill="rgb(217,28,47)" fg:x="1012" fg:w="5"/><text x="81.9288%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="81.9209%" y="517" width="0.1614%" height="15" fill="rgb(231,14,52)" fg:x="1015" fg:w="2"/><text x="82.1709%" y="527.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="81.9209%" y="501" width="0.1614%" height="15" fill="rgb(220,158,18)" fg:x="1015" fg:w="2"/><text x="82.1709%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="81.9209%" y="485" width="0.1614%" height="15" fill="rgb(222,143,46)" fg:x="1015" fg:w="2"/><text x="82.1709%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="82.0016%" y="469" width="0.0807%" height="15" fill="rgb(227,165,5)" fg:x="1016" fg:w="1"/><text x="82.2516%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.0016%" y="453" width="0.0807%" height="15" fill="rgb(216,222,49)" fg:x="1016" fg:w="1"/><text x="82.2516%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="82.0016%" y="437" width="0.0807%" height="15" fill="rgb(238,73,39)" fg:x="1016" fg:w="1"/><text x="82.2516%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.0016%" y="421" width="0.0807%" height="15" fill="rgb(252,115,9)" fg:x="1016" fg:w="1"/><text x="82.2516%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.0016%" y="405" width="0.0807%" height="15" fill="rgb(238,202,4)" fg:x="1016" fg:w="1"/><text x="82.2516%" y="415.50"></text></g><g><title>plugins_core::build::Build::holding (6 samples, 0.48%)</title><rect x="81.6788%" y="581" width="0.4843%" height="15" fill="rgb(252,153,44)" fg:x="1012" fg:w="6"/><text x="81.9288%" y="591.50"></text></g><g><title>plugins_core::tools::set_container (6 samples, 0.48%)</title><rect x="81.6788%" y="565" width="0.4843%" height="15" fill="rgb(235,128,27)" fg:x="1012" fg:w="6"/><text x="81.9288%" y="575.50"></text></g><g><title>plugins_core::location::Location::set (1 samples, 0.08%)</title><rect x="82.0823%" y="549" width="0.0807%" height="15" fill="rgb(221,121,47)" fg:x="1017" fg:w="1"/><text x="82.3323%" y="559.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="82.0823%" y="533" width="0.0807%" height="15" fill="rgb(247,211,47)" fg:x="1017" fg:w="1"/><text x="82.3323%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="82.0823%" y="517" width="0.0807%" height="15" fill="rgb(252,47,49)" fg:x="1017" fg:w="1"/><text x="82.3323%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="82.0823%" y="501" width="0.0807%" height="15" fill="rgb(219,119,53)" fg:x="1017" fg:w="1"/><text x="82.3323%" y="511.50"></text></g><g><title>plugins_core::build::Build::occupying (1 samples, 0.08%)</title><rect x="82.1630%" y="581" width="0.0807%" height="15" fill="rgb(243,165,53)" fg:x="1018" fg:w="1"/><text x="82.4130%" y="591.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="82.1630%" y="565" width="0.0807%" height="15" fill="rgb(230,12,35)" fg:x="1018" fg:w="1"/><text x="82.4130%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="82.1630%" y="549" width="0.0807%" height="15" fill="rgb(239,57,49)" fg:x="1018" fg:w="1"/><text x="82.4130%" y="559.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="82.1630%" y="533" width="0.0807%" height="15" fill="rgb(231,154,7)" fg:x="1018" fg:w="1"/><text x="82.4130%" y="543.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="82.1630%" y="517" width="0.0807%" height="15" fill="rgb(248,81,34)" fg:x="1018" fg:w="1"/><text x="82.4130%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="82.1630%" y="501" width="0.0807%" height="15" fill="rgb(247,9,5)" fg:x="1018" fg:w="1"/><text x="82.4130%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="82.2437%" y="533" width="0.0807%" height="15" fill="rgb(228,172,27)" fg:x="1019" fg:w="1"/><text x="82.4937%" y="543.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="82.2437%" y="517" width="0.0807%" height="15" fill="rgb(230,57,44)" fg:x="1019" fg:w="1"/><text x="82.4937%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="82.2437%" y="501" width="0.0807%" height="15" fill="rgb(249,35,22)" fg:x="1019" fg:w="1"/><text x="82.4937%" y="511.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="82.2437%" y="485" width="0.0807%" height="15" fill="rgb(250,137,27)" fg:x="1019" fg:w="1"/><text x="82.4937%" y="495.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="82.2437%" y="469" width="0.0807%" height="15" fill="rgb(251,57,31)" fg:x="1019" fg:w="1"/><text x="82.4937%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.2437%" y="453" width="0.0807%" height="15" fill="rgb(238,60,0)" fg:x="1019" fg:w="1"/><text x="82.4937%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.2437%" y="437" width="0.0807%" height="15" fill="rgb(242,185,39)" fg:x="1019" fg:w="1"/><text x="82.4937%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.2437%" y="421" width="0.0807%" height="15" fill="rgb(240,63,43)" fg:x="1019" fg:w="1"/><text x="82.4937%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="82.2437%" y="405" width="0.0807%" height="15" fill="rgb(236,155,6)" fg:x="1019" fg:w="1"/><text x="82.4937%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="82.2437%" y="389" width="0.0807%" height="15" fill="rgb(215,11,29)" fg:x="1019" fg:w="1"/><text x="82.4937%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="82.2437%" y="373" width="0.0807%" height="15" fill="rgb(228,180,48)" fg:x="1019" fg:w="1"/><text x="82.4937%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="82.2437%" y="357" width="0.0807%" height="15" fill="rgb(241,102,12)" fg:x="1019" fg:w="1"/><text x="82.4937%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="82.2437%" y="341" width="0.0807%" height="15" fill="rgb(246,213,4)" fg:x="1019" fg:w="1"/><text x="82.4937%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="82.2437%" y="325" width="0.0807%" height="15" fill="rgb(218,134,35)" fg:x="1019" fg:w="1"/><text x="82.4937%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="82.2437%" y="309" width="0.0807%" height="15" fill="rgb(251,117,35)" fg:x="1019" fg:w="1"/><text x="82.4937%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="82.2437%" y="293" width="0.0807%" height="15" fill="rgb(206,156,45)" fg:x="1019" fg:w="1"/><text x="82.4937%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="82.2437%" y="277" width="0.0807%" height="15" fill="rgb(218,52,27)" fg:x="1019" fg:w="1"/><text x="82.4937%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="82.2437%" y="261" width="0.0807%" height="15" fill="rgb(238,83,36)" fg:x="1019" fg:w="1"/><text x="82.4937%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="82.2437%" y="245" width="0.0807%" height="15" fill="rgb(218,53,43)" fg:x="1019" fg:w="1"/><text x="82.4937%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.3245%" y="469" width="0.0807%" height="15" fill="rgb(239,54,39)" fg:x="1020" fg:w="1"/><text x="82.5745%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.3245%" y="453" width="0.0807%" height="15" fill="rgb(212,198,13)" fg:x="1020" fg:w="1"/><text x="82.5745%" y="463.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="82.3245%" y="533" width="0.1614%" height="15" fill="rgb(234,54,46)" fg:x="1020" fg:w="2"/><text x="82.5745%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="82.3245%" y="517" width="0.1614%" height="15" fill="rgb(217,120,7)" fg:x="1020" fg:w="2"/><text x="82.5745%" y="527.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="82.3245%" y="501" width="0.1614%" height="15" fill="rgb(246,39,15)" fg:x="1020" fg:w="2"/><text x="82.5745%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="82.3245%" y="485" width="0.1614%" height="15" fill="rgb(242,143,31)" fg:x="1020" fg:w="2"/><text x="82.5745%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="82.4052%" y="469" width="0.0807%" height="15" fill="rgb(252,60,24)" fg:x="1021" fg:w="1"/><text x="82.6552%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.4052%" y="453" width="0.0807%" height="15" fill="rgb(249,220,7)" fg:x="1021" fg:w="1"/><text x="82.6552%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="82.4052%" y="437" width="0.0807%" height="15" fill="rgb(236,67,13)" fg:x="1021" fg:w="1"/><text x="82.6552%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.4052%" y="421" width="0.0807%" height="15" fill="rgb(210,62,39)" fg:x="1021" fg:w="1"/><text x="82.6552%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.4052%" y="405" width="0.0807%" height="15" fill="rgb(219,122,53)" fg:x="1021" fg:w="1"/><text x="82.6552%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="82.4052%" y="389" width="0.0807%" height="15" fill="rgb(218,87,25)" fg:x="1021" fg:w="1"/><text x="82.6552%" y="399.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (23 samples, 1.86%)</title><rect x="80.7103%" y="597" width="1.8563%" height="15" fill="rgb(234,179,48)" fg:x="1000" fg:w="23"/><text x="80.9603%" y="607.50">p..</text></g><g><title>plugins_core::build::Build::wearing (4 samples, 0.32%)</title><rect x="82.2437%" y="581" width="0.3228%" height="15" fill="rgb(248,90,0)" fg:x="1019" fg:w="4"/><text x="82.4937%" y="591.50"></text></g><g><title>plugins_core::build::Build::into_entry (4 samples, 0.32%)</title><rect x="82.2437%" y="565" width="0.3228%" height="15" fill="rgb(207,228,37)" fg:x="1019" fg:w="4"/><text x="82.4937%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="82.2437%" y="549" width="0.3228%" height="15" fill="rgb(235,214,15)" fg:x="1019" fg:w="4"/><text x="82.4937%" y="559.50"></text></g><g><title>kernel::model::entry::EntryResolver::world (1 samples, 0.08%)</title><rect x="82.4859%" y="533" width="0.0807%" height="15" fill="rgb(210,144,39)" fg:x="1022" fg:w="1"/><text x="82.7359%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="82.4859%" y="517" width="0.0807%" height="15" fill="rgb(222,67,41)" fg:x="1022" fg:w="1"/><text x="82.7359%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="82.4859%" y="501" width="0.0807%" height="15" fill="rgb(205,35,37)" fg:x="1022" fg:w="1"/><text x="82.7359%" y="511.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="82.4859%" y="485" width="0.0807%" height="15" fill="rgb(216,125,40)" fg:x="1022" fg:w="1"/><text x="82.7359%" y="495.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="82.4859%" y="469" width="0.0807%" height="15" fill="rgb(228,227,20)" fg:x="1022" fg:w="1"/><text x="82.7359%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.4859%" y="453" width="0.0807%" height="15" fill="rgb(242,173,45)" fg:x="1022" fg:w="1"/><text x="82.7359%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.4859%" y="437" width="0.0807%" height="15" fill="rgb(215,79,24)" fg:x="1022" fg:w="1"/><text x="82.7359%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.4859%" y="421" width="0.0807%" height="15" fill="rgb(238,164,38)" fg:x="1022" fg:w="1"/><text x="82.7359%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="82.4859%" y="405" width="0.0807%" height="15" fill="rgb(245,196,38)" fg:x="1022" fg:w="1"/><text x="82.7359%" y="415.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (1 samples, 0.08%)</title><rect x="82.5666%" y="597" width="0.0807%" height="15" fill="rgb(231,217,29)" fg:x="1023" fg:w="1"/><text x="82.8166%" y="607.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="82.5666%" y="581" width="0.0807%" height="15" fill="rgb(245,6,4)" fg:x="1023" fg:w="1"/><text x="82.8166%" y="591.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="82.5666%" y="565" width="0.0807%" height="15" fill="rgb(214,76,49)" fg:x="1023" fg:w="1"/><text x="82.8166%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="82.5666%" y="549" width="0.0807%" height="15" fill="rgb(205,96,12)" fg:x="1023" fg:w="1"/><text x="82.8166%" y="559.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="82.5666%" y="533" width="0.0807%" height="15" fill="rgb(243,131,4)" fg:x="1023" fg:w="1"/><text x="82.8166%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="82.5666%" y="517" width="0.0807%" height="15" fill="rgb(214,114,4)" fg:x="1023" fg:w="1"/><text x="82.8166%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="82.5666%" y="501" width="0.0807%" height="15" fill="rgb(234,215,15)" fg:x="1023" fg:w="1"/><text x="82.8166%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="82.5666%" y="485" width="0.0807%" height="15" fill="rgb(250,216,45)" fg:x="1023" fg:w="1"/><text x="82.8166%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.5666%" y="469" width="0.0807%" height="15" fill="rgb(236,128,4)" fg:x="1023" fg:w="1"/><text x="82.8166%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.5666%" y="453" width="0.0807%" height="15" fill="rgb(234,50,33)" fg:x="1023" fg:w="1"/><text x="82.8166%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.5666%" y="437" width="0.0807%" height="15" fill="rgb(253,131,37)" fg:x="1023" fg:w="1"/><text x="82.8166%" y="447.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="82.6473%" y="565" width="0.0807%" height="15" fill="rgb(218,55,27)" fg:x="1024" fg:w="1"/><text x="82.8973%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.6473%" y="549" width="0.0807%" height="15" fill="rgb(241,220,28)" fg:x="1024" fg:w="1"/><text x="82.8973%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.6473%" y="533" width="0.0807%" height="15" fill="rgb(241,90,48)" fg:x="1024" fg:w="1"/><text x="82.8973%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="82.6473%" y="517" width="0.0807%" height="15" fill="rgb(216,43,37)" fg:x="1024" fg:w="1"/><text x="82.8973%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="82.6473%" y="581" width="0.1614%" height="15" fill="rgb(207,173,9)" fg:x="1024" fg:w="2"/><text x="82.8973%" y="591.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="82.7280%" y="565" width="0.0807%" height="15" fill="rgb(240,126,30)" fg:x="1025" fg:w="1"/><text x="82.9780%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="82.7280%" y="549" width="0.0807%" height="15" fill="rgb(228,178,53)" fg:x="1025" fg:w="1"/><text x="82.9780%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.7280%" y="533" width="0.0807%" height="15" fill="rgb(217,33,4)" fg:x="1025" fg:w="1"/><text x="82.9780%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="82.7280%" y="517" width="0.0807%" height="15" fill="rgb(206,124,34)" fg:x="1025" fg:w="1"/><text x="82.9780%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="82.7280%" y="501" width="0.0807%" height="15" fill="rgb(208,122,53)" fg:x="1025" fg:w="1"/><text x="82.9780%" y="511.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="82.8087%" y="485" width="0.0807%" height="15" fill="rgb(215,202,26)" fg:x="1026" fg:w="1"/><text x="83.0587%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="82.8087%" y="469" width="0.0807%" height="15" fill="rgb(232,198,31)" fg:x="1026" fg:w="1"/><text x="83.0587%" y="479.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="82.8087%" y="453" width="0.0807%" height="15" fill="rgb(222,23,35)" fg:x="1026" fg:w="1"/><text x="83.0587%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="82.8087%" y="437" width="0.0807%" height="15" fill="rgb(242,27,53)" fg:x="1026" fg:w="1"/><text x="83.0587%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="82.8087%" y="421" width="0.0807%" height="15" fill="rgb(210,216,42)" fg:x="1026" fg:w="1"/><text x="83.0587%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="82.8087%" y="405" width="0.0807%" height="15" fill="rgb(234,39,38)" fg:x="1026" fg:w="1"/><text x="83.0587%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="82.8087%" y="389" width="0.0807%" height="15" fill="rgb(235,126,54)" fg:x="1026" fg:w="1"/><text x="83.0587%" y="399.50"></text></g><g><title>plugins_core::build::Build::into_entry (2 samples, 0.16%)</title><rect x="82.8087%" y="581" width="0.1614%" height="15" fill="rgb(235,150,33)" fg:x="1026" fg:w="2"/><text x="83.0587%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="82.8087%" y="565" width="0.1614%" height="15" fill="rgb(249,49,53)" fg:x="1026" fg:w="2"/><text x="83.0587%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="82.8087%" y="549" width="0.1614%" height="15" fill="rgb(238,60,50)" fg:x="1026" fg:w="2"/><text x="83.0587%" y="559.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="82.8087%" y="533" width="0.1614%" height="15" fill="rgb(210,5,2)" fg:x="1026" fg:w="2"/><text x="83.0587%" y="543.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="82.8087%" y="517" width="0.1614%" height="15" fill="rgb(214,207,24)" fg:x="1026" fg:w="2"/><text x="83.0587%" y="527.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="82.8087%" y="501" width="0.1614%" height="15" fill="rgb(228,173,2)" fg:x="1026" fg:w="2"/><text x="83.0587%" y="511.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="82.8894%" y="485" width="0.0807%" height="15" fill="rgb(244,26,8)" fg:x="1027" fg:w="1"/><text x="83.1394%" y="495.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="82.8894%" y="469" width="0.0807%" height="15" fill="rgb(249,153,35)" fg:x="1027" fg:w="1"/><text x="83.1394%" y="479.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="82.8894%" y="453" width="0.0807%" height="15" fill="rgb(221,215,40)" fg:x="1027" fg:w="1"/><text x="83.1394%" y="463.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="82.8894%" y="437" width="0.0807%" height="15" fill="rgb(238,106,35)" fg:x="1027" fg:w="1"/><text x="83.1394%" y="447.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (51 samples, 4.12%)</title><rect x="78.9346%" y="613" width="4.1162%" height="15" fill="rgb(207,195,21)" fg:x="978" fg:w="51"/><text x="79.1846%" y="623.50">&lt;tes..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (5 samples, 0.40%)</title><rect x="82.6473%" y="597" width="0.4036%" height="15" fill="rgb(205,43,29)" fg:x="1024" fg:w="5"/><text x="82.8973%" y="607.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="82.9701%" y="581" width="0.0807%" height="15" fill="rgb(236,35,21)" fg:x="1028" fg:w="1"/><text x="83.2201%" y="591.50"></text></g><g><title>kernel::model::builder::EntityBuilder::with_key (1 samples, 0.08%)</title><rect x="82.9701%" y="565" width="0.0807%" height="15" fill="rgb(244,74,8)" fg:x="1028" fg:w="1"/><text x="83.2201%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="83.0508%" y="565" width="0.0807%" height="15" fill="rgb(241,229,7)" fg:x="1029" fg:w="1"/><text x="83.3008%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="83.0508%" y="549" width="0.0807%" height="15" fill="rgb(212,223,25)" fg:x="1029" fg:w="1"/><text x="83.3008%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.0508%" y="533" width="0.0807%" height="15" fill="rgb(234,58,53)" fg:x="1029" fg:w="1"/><text x="83.3008%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="83.0508%" y="517" width="0.0807%" height="15" fill="rgb(244,36,1)" fg:x="1029" fg:w="1"/><text x="83.3008%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="83.1316%" y="501" width="0.0807%" height="15" fill="rgb(222,40,54)" fg:x="1030" fg:w="1"/><text x="83.3816%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="83.1316%" y="485" width="0.0807%" height="15" fill="rgb(210,207,39)" fg:x="1030" fg:w="1"/><text x="83.3816%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="83.2930%" y="485" width="0.0807%" height="15" fill="rgb(234,52,14)" fg:x="1032" fg:w="1"/><text x="83.5430%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="83.2930%" y="469" width="0.0807%" height="15" fill="rgb(239,108,46)" fg:x="1032" fg:w="1"/><text x="83.5430%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="83.2930%" y="453" width="0.0807%" height="15" fill="rgb(252,223,5)" fg:x="1032" fg:w="1"/><text x="83.5430%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="83.2930%" y="437" width="0.0807%" height="15" fill="rgb(227,181,11)" fg:x="1032" fg:w="1"/><text x="83.5430%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="83.3737%" y="469" width="0.0807%" height="15" fill="rgb(248,126,40)" fg:x="1033" fg:w="1"/><text x="83.6237%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.40%)</title><rect x="83.1316%" y="517" width="0.4036%" height="15" fill="rgb(243,1,18)" fg:x="1030" fg:w="5"/><text x="83.3816%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="83.2123%" y="501" width="0.3228%" height="15" fill="rgb(214,145,23)" fg:x="1031" fg:w="4"/><text x="83.4623%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="83.3737%" y="485" width="0.1614%" height="15" fill="rgb(241,218,11)" fg:x="1033" fg:w="2"/><text x="83.6237%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="83.4544%" y="469" width="0.0807%" height="15" fill="rgb(214,219,24)" fg:x="1034" fg:w="1"/><text x="83.7044%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="83.4544%" y="453" width="0.0807%" height="15" fill="rgb(235,32,7)" fg:x="1034" fg:w="1"/><text x="83.7044%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="83.4544%" y="437" width="0.0807%" height="15" fill="rgb(227,121,28)" fg:x="1034" fg:w="1"/><text x="83.7044%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="83.4544%" y="421" width="0.0807%" height="15" fill="rgb(216,129,49)" fg:x="1034" fg:w="1"/><text x="83.7044%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.5351%" y="453" width="0.0807%" height="15" fill="rgb(207,194,50)" fg:x="1035" fg:w="1"/><text x="83.7851%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="83.5351%" y="517" width="0.1614%" height="15" fill="rgb(207,4,18)" fg:x="1035" fg:w="2"/><text x="83.7851%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="83.5351%" y="501" width="0.1614%" height="15" fill="rgb(213,50,30)" fg:x="1035" fg:w="2"/><text x="83.7851%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="83.5351%" y="485" width="0.1614%" height="15" fill="rgb(208,77,22)" fg:x="1035" fg:w="2"/><text x="83.7851%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="83.5351%" y="469" width="0.1614%" height="15" fill="rgb(244,204,34)" fg:x="1035" fg:w="2"/><text x="83.7851%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="83.6158%" y="453" width="0.0807%" height="15" fill="rgb(230,20,17)" fg:x="1036" fg:w="1"/><text x="83.8658%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="83.6158%" y="437" width="0.0807%" height="15" fill="rgb(237,83,15)" fg:x="1036" fg:w="1"/><text x="83.8658%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="83.6158%" y="421" width="0.0807%" height="15" fill="rgb(221,109,25)" fg:x="1036" fg:w="1"/><text x="83.8658%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.6158%" y="405" width="0.0807%" height="15" fill="rgb(205,194,52)" fg:x="1036" fg:w="1"/><text x="83.8658%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="83.7772%" y="485" width="0.0807%" height="15" fill="rgb(244,173,54)" fg:x="1038" fg:w="1"/><text x="84.0272%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="83.7772%" y="469" width="0.0807%" height="15" fill="rgb(227,181,18)" fg:x="1038" fg:w="1"/><text x="84.0272%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="83.7772%" y="453" width="0.0807%" height="15" fill="rgb(238,36,30)" fg:x="1038" fg:w="1"/><text x="84.0272%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="83.7772%" y="437" width="0.0807%" height="15" fill="rgb(254,85,0)" fg:x="1038" fg:w="1"/><text x="84.0272%" y="447.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="83.7772%" y="501" width="0.1614%" height="15" fill="rgb(247,63,33)" fg:x="1038" fg:w="2"/><text x="84.0272%" y="511.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="83.8579%" y="485" width="0.0807%" height="15" fill="rgb(220,7,54)" fg:x="1039" fg:w="1"/><text x="84.1079%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="83.8579%" y="469" width="0.0807%" height="15" fill="rgb(238,227,21)" fg:x="1039" fg:w="1"/><text x="84.1079%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="83.8579%" y="453" width="0.0807%" height="15" fill="rgb(237,29,31)" fg:x="1039" fg:w="1"/><text x="84.1079%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="83.8579%" y="437" width="0.0807%" height="15" fill="rgb(211,21,50)" fg:x="1039" fg:w="1"/><text x="84.1079%" y="447.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="83.8579%" y="421" width="0.0807%" height="15" fill="rgb(239,119,2)" fg:x="1039" fg:w="1"/><text x="84.1079%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="83.8579%" y="405" width="0.0807%" height="15" fill="rgb(250,2,39)" fg:x="1039" fg:w="1"/><text x="84.1079%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.9387%" y="373" width="0.0807%" height="15" fill="rgb(244,46,53)" fg:x="1040" fg:w="1"/><text x="84.1887%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.9387%" y="357" width="0.0807%" height="15" fill="rgb(209,21,19)" fg:x="1040" fg:w="1"/><text x="84.1887%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.9387%" y="341" width="0.0807%" height="15" fill="rgb(236,145,4)" fg:x="1040" fg:w="1"/><text x="84.1887%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="83.9387%" y="389" width="0.1614%" height="15" fill="rgb(220,133,36)" fg:x="1040" fg:w="2"/><text x="84.1887%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="84.0194%" y="373" width="0.0807%" height="15" fill="rgb(244,18,3)" fg:x="1041" fg:w="1"/><text x="84.2694%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.0194%" y="357" width="0.0807%" height="15" fill="rgb(232,171,48)" fg:x="1041" fg:w="1"/><text x="84.2694%" y="367.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="83.9387%" y="421" width="0.2421%" height="15" fill="rgb(223,223,53)" fg:x="1040" fg:w="3"/><text x="84.1887%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="83.9387%" y="405" width="0.2421%" height="15" fill="rgb(246,92,13)" fg:x="1040" fg:w="3"/><text x="84.1887%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.1001%" y="389" width="0.0807%" height="15" fill="rgb(229,171,10)" fg:x="1042" fg:w="1"/><text x="84.3501%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="83.9387%" y="437" width="0.3228%" height="15" fill="rgb(213,131,26)" fg:x="1040" fg:w="4"/><text x="84.1887%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="84.1808%" y="421" width="0.0807%" height="15" fill="rgb(242,87,54)" fg:x="1043" fg:w="1"/><text x="84.4308%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.40%)</title><rect x="83.9387%" y="453" width="0.4036%" height="15" fill="rgb(237,21,35)" fg:x="1040" fg:w="5"/><text x="84.1887%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="84.2615%" y="437" width="0.0807%" height="15" fill="rgb(253,13,47)" fg:x="1044" fg:w="1"/><text x="84.5115%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.3422%" y="453" width="0.0807%" height="15" fill="rgb(215,122,49)" fg:x="1045" fg:w="1"/><text x="84.5922%" y="463.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.56%)</title><rect x="83.9387%" y="501" width="0.5650%" height="15" fill="rgb(209,179,30)" fg:x="1040" fg:w="7"/><text x="84.1887%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.56%)</title><rect x="83.9387%" y="485" width="0.5650%" height="15" fill="rgb(235,100,24)" fg:x="1040" fg:w="7"/><text x="84.1887%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.56%)</title><rect x="83.9387%" y="469" width="0.5650%" height="15" fill="rgb(209,67,24)" fg:x="1040" fg:w="7"/><text x="84.1887%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.4229%" y="453" width="0.0807%" height="15" fill="rgb(206,74,32)" fg:x="1046" fg:w="1"/><text x="84.6729%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.4229%" y="437" width="0.0807%" height="15" fill="rgb(212,45,25)" fg:x="1046" fg:w="1"/><text x="84.6729%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.4229%" y="421" width="0.0807%" height="15" fill="rgb(239,26,3)" fg:x="1046" fg:w="1"/><text x="84.6729%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.5036%" y="357" width="0.0807%" height="15" fill="rgb(218,36,15)" fg:x="1047" fg:w="1"/><text x="84.7536%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.5036%" y="341" width="0.0807%" height="15" fill="rgb(206,108,24)" fg:x="1047" fg:w="1"/><text x="84.7536%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="84.5036%" y="325" width="0.0807%" height="15" fill="rgb(234,204,42)" fg:x="1047" fg:w="1"/><text x="84.7536%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.5036%" y="309" width="0.0807%" height="15" fill="rgb(229,2,11)" fg:x="1047" fg:w="1"/><text x="84.7536%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="84.5036%" y="373" width="0.2421%" height="15" fill="rgb(221,20,48)" fg:x="1047" fg:w="3"/><text x="84.7536%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="84.5843%" y="357" width="0.1614%" height="15" fill="rgb(244,164,10)" fg:x="1048" fg:w="2"/><text x="84.8343%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="84.6651%" y="341" width="0.0807%" height="15" fill="rgb(243,229,2)" fg:x="1049" fg:w="1"/><text x="84.9151%" y="351.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="84.6651%" y="325" width="0.0807%" height="15" fill="rgb(232,131,37)" fg:x="1049" fg:w="1"/><text x="84.9151%" y="335.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="84.6651%" y="309" width="0.0807%" height="15" fill="rgb(217,156,11)" fg:x="1049" fg:w="1"/><text x="84.9151%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="84.5036%" y="421" width="0.3228%" height="15" fill="rgb(239,99,48)" fg:x="1047" fg:w="4"/><text x="84.7536%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="84.5036%" y="405" width="0.3228%" height="15" fill="rgb(231,209,9)" fg:x="1047" fg:w="4"/><text x="84.7536%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="84.5036%" y="389" width="0.3228%" height="15" fill="rgb(254,97,27)" fg:x="1047" fg:w="4"/><text x="84.7536%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="84.7458%" y="373" width="0.0807%" height="15" fill="rgb(223,151,38)" fg:x="1050" fg:w="1"/><text x="84.9958%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.7458%" y="357" width="0.0807%" height="15" fill="rgb(219,206,35)" fg:x="1050" fg:w="1"/><text x="84.9958%" y="367.50"></text></g><g><title>engine::session::Session::close (23 samples, 1.86%)</title><rect x="83.0508%" y="613" width="1.8563%" height="15" fill="rgb(216,130,31)" fg:x="1029" fg:w="23"/><text x="83.3008%" y="623.50">e..</text></g><g><title>engine::session::state::State::close (23 samples, 1.86%)</title><rect x="83.0508%" y="597" width="1.8563%" height="15" fill="rgb(251,97,34)" fg:x="1029" fg:w="23"/><text x="83.3008%" y="607.50">e..</text></g><g><title>engine::session::state::State::flush_entities (23 samples, 1.86%)</title><rect x="83.0508%" y="581" width="1.8563%" height="15" fill="rgb(246,159,47)" fg:x="1029" fg:w="23"/><text x="83.3008%" y="591.50">e..</text></g><g><title>core::iter::adapters::try_process (22 samples, 1.78%)</title><rect x="83.1316%" y="565" width="1.7756%" height="15" fill="rgb(232,87,10)" fg:x="1030" fg:w="22"/><text x="83.3816%" y="575.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (22 samples, 1.78%)</title><rect x="83.1316%" y="549" width="1.7756%" height="15" fill="rgb(249,1,37)" fg:x="1030" fg:w="22"/><text x="83.3816%" y="559.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (22 samples, 1.78%)</title><rect x="83.1316%" y="533" width="1.7756%" height="15" fill="rgb(239,135,14)" fg:x="1030" fg:w="22"/><text x="83.3816%" y="543.50">e..</text></g><g><title>kernel::model::any_entity_changes (15 samples, 1.21%)</title><rect x="83.6965%" y="517" width="1.2107%" height="15" fill="rgb(253,116,46)" fg:x="1037" fg:w="15"/><text x="83.9465%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.40%)</title><rect x="84.5036%" y="501" width="0.4036%" height="15" fill="rgb(222,217,37)" fg:x="1047" fg:w="5"/><text x="84.7536%" y="511.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="84.5036%" y="485" width="0.4036%" height="15" fill="rgb(252,96,8)" fg:x="1047" fg:w="5"/><text x="84.7536%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="84.5036%" y="469" width="0.4036%" height="15" fill="rgb(254,103,41)" fg:x="1047" fg:w="5"/><text x="84.7536%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="84.5036%" y="453" width="0.4036%" height="15" fill="rgb(218,213,19)" fg:x="1047" fg:w="5"/><text x="84.7536%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="84.5036%" y="437" width="0.4036%" height="15" fill="rgb(253,95,21)" fg:x="1047" fg:w="5"/><text x="84.7536%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.8265%" y="421" width="0.0807%" height="15" fill="rgb(229,26,28)" fg:x="1051" fg:w="1"/><text x="85.0765%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.9072%" y="517" width="0.0807%" height="15" fill="rgb(230,129,16)" fg:x="1052" fg:w="1"/><text x="85.1572%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.9072%" y="501" width="0.0807%" height="15" fill="rgb(236,126,17)" fg:x="1052" fg:w="1"/><text x="85.1572%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="84.9072%" y="485" width="0.0807%" height="15" fill="rgb(209,33,33)" fg:x="1052" fg:w="1"/><text x="85.1572%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="84.9072%" y="469" width="0.0807%" height="15" fill="rgb(227,85,29)" fg:x="1052" fg:w="1"/><text x="85.1572%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="84.9072%" y="453" width="0.0807%" height="15" fill="rgb(241,53,46)" fg:x="1052" fg:w="1"/><text x="85.1572%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="84.9072%" y="437" width="0.0807%" height="15" fill="rgb(228,167,53)" fg:x="1052" fg:w="1"/><text x="85.1572%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="84.9072%" y="421" width="0.0807%" height="15" fill="rgb(238,195,45)" fg:x="1052" fg:w="1"/><text x="85.1572%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="84.9072%" y="405" width="0.0807%" height="15" fill="rgb(252,124,45)" fg:x="1052" fg:w="1"/><text x="85.1572%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="84.9072%" y="389" width="0.0807%" height="15" fill="rgb(251,38,35)" fg:x="1052" fg:w="1"/><text x="85.1572%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="84.9072%" y="373" width="0.0807%" height="15" fill="rgb(227,33,2)" fg:x="1052" fg:w="1"/><text x="85.1572%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="84.9072%" y="357" width="0.0807%" height="15" fill="rgb(223,157,46)" fg:x="1052" fg:w="1"/><text x="85.1572%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="84.9879%" y="485" width="0.0807%" height="15" fill="rgb(222,78,41)" fg:x="1053" fg:w="1"/><text x="85.2379%" y="495.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Occupying&gt;::deserialize (1 samples, 0.08%)</title><rect x="84.9879%" y="469" width="0.0807%" height="15" fill="rgb(248,176,11)" fg:x="1053" fg:w="1"/><text x="85.2379%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.9879%" y="453" width="0.0807%" height="15" fill="rgb(241,221,18)" fg:x="1053" fg:w="1"/><text x="85.2379%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.9879%" y="437" width="0.0807%" height="15" fill="rgb(218,85,22)" fg:x="1053" fg:w="1"/><text x="85.2379%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.9879%" y="421" width="0.0807%" height="15" fill="rgb(222,223,7)" fg:x="1053" fg:w="1"/><text x="85.2379%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="84.9879%" y="405" width="0.0807%" height="15" fill="rgb(254,59,39)" fg:x="1053" fg:w="1"/><text x="85.2379%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.9879%" y="389" width="0.0807%" height="15" fill="rgb(247,100,27)" fg:x="1053" fg:w="1"/><text x="85.2379%" y="399.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="84.9879%" y="517" width="0.1614%" height="15" fill="rgb(237,207,10)" fg:x="1053" fg:w="2"/><text x="85.2379%" y="527.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_location (2 samples, 0.16%)</title><rect x="84.9879%" y="501" width="0.1614%" height="15" fill="rgb(220,121,28)" fg:x="1053" fg:w="2"/><text x="85.2379%" y="511.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntry&gt;::to_entry (1 samples, 0.08%)</title><rect x="85.0686%" y="485" width="0.0807%" height="15" fill="rgb(213,223,20)" fg:x="1054" fg:w="1"/><text x="85.3186%" y="495.50"></text></g><g><title>kernel::model::entry::EntryResolver::entry (1 samples, 0.08%)</title><rect x="85.0686%" y="469" width="0.0807%" height="15" fill="rgb(205,121,27)" fg:x="1054" fg:w="1"/><text x="85.3186%" y="479.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="85.0686%" y="453" width="0.0807%" height="15" fill="rgb(253,24,53)" fg:x="1054" fg:w="1"/><text x="85.3186%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="85.0686%" y="437" width="0.0807%" height="15" fill="rgb(224,224,47)" fg:x="1054" fg:w="1"/><text x="85.3186%" y="447.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="85.0686%" y="421" width="0.0807%" height="15" fill="rgb(250,125,36)" fg:x="1054" fg:w="1"/><text x="85.3186%" y="431.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="85.0686%" y="405" width="0.0807%" height="15" fill="rgb(240,144,38)" fg:x="1054" fg:w="1"/><text x="85.3186%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.0686%" y="389" width="0.0807%" height="15" fill="rgb(250,15,50)" fg:x="1054" fg:w="1"/><text x="85.3186%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.0686%" y="373" width="0.0807%" height="15" fill="rgb(210,24,26)" fg:x="1054" fg:w="1"/><text x="85.3186%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="85.0686%" y="357" width="0.0807%" height="15" fill="rgb(234,53,53)" fg:x="1054" fg:w="1"/><text x="85.3186%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="85.0686%" y="341" width="0.0807%" height="15" fill="rgb(208,108,28)" fg:x="1054" fg:w="1"/><text x="85.3186%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="85.0686%" y="325" width="0.0807%" height="15" fill="rgb(227,143,7)" fg:x="1054" fg:w="1"/><text x="85.3186%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="85.0686%" y="309" width="0.0807%" height="15" fill="rgb(238,189,38)" fg:x="1054" fg:w="1"/><text x="85.3186%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="85.0686%" y="293" width="0.0807%" height="15" fill="rgb(222,69,15)" fg:x="1054" fg:w="1"/><text x="85.3186%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="85.0686%" y="277" width="0.0807%" height="15" fill="rgb(213,169,7)" fg:x="1054" fg:w="1"/><text x="85.3186%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="85.0686%" y="261" width="0.0807%" height="15" fill="rgb(251,219,4)" fg:x="1054" fg:w="1"/><text x="85.3186%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="85.0686%" y="245" width="0.0807%" height="15" fill="rgb(241,55,40)" fg:x="1054" fg:w="1"/><text x="85.3186%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="85.0686%" y="229" width="0.0807%" height="15" fill="rgb(243,57,30)" fg:x="1054" fg:w="1"/><text x="85.3186%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="85.0686%" y="213" width="0.0807%" height="15" fill="rgb(234,50,30)" fg:x="1054" fg:w="1"/><text x="85.3186%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="85.0686%" y="197" width="0.0807%" height="15" fill="rgb(239,23,42)" fg:x="1054" fg:w="1"/><text x="85.3186%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.0686%" y="181" width="0.0807%" height="15" fill="rgb(217,38,19)" fg:x="1054" fg:w="1"/><text x="85.3186%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="85.2300%" y="357" width="0.0807%" height="15" fill="rgb(215,179,16)" fg:x="1056" fg:w="1"/><text x="85.4800%" y="367.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (2 samples, 0.16%)</title><rect x="85.2300%" y="389" width="0.1614%" height="15" fill="rgb(254,21,37)" fg:x="1056" fg:w="2"/><text x="85.4800%" y="399.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (2 samples, 0.16%)</title><rect x="85.2300%" y="373" width="0.1614%" height="15" fill="rgb(219,207,48)" fg:x="1056" fg:w="2"/><text x="85.4800%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (1 samples, 0.08%)</title><rect x="85.3107%" y="357" width="0.0807%" height="15" fill="rgb(227,225,41)" fg:x="1057" fg:w="1"/><text x="85.5607%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="85.3107%" y="341" width="0.0807%" height="15" fill="rgb(223,130,1)" fg:x="1057" fg:w="1"/><text x="85.5607%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (1 samples, 0.08%)</title><rect x="85.5529%" y="357" width="0.0807%" height="15" fill="rgb(249,54,42)" fg:x="1060" fg:w="1"/><text x="85.8029%" y="367.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="85.5529%" y="341" width="0.0807%" height="15" fill="rgb(248,69,25)" fg:x="1060" fg:w="1"/><text x="85.8029%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="85.5529%" y="325" width="0.0807%" height="15" fill="rgb(234,21,32)" fg:x="1060" fg:w="1"/><text x="85.8029%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="85.5529%" y="309" width="0.0807%" height="15" fill="rgb(252,136,6)" fg:x="1060" fg:w="1"/><text x="85.8029%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.5529%" y="293" width="0.0807%" height="15" fill="rgb(245,87,12)" fg:x="1060" fg:w="1"/><text x="85.8029%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="85.5529%" y="277" width="0.0807%" height="15" fill="rgb(208,12,15)" fg:x="1060" fg:w="1"/><text x="85.8029%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.5529%" y="261" width="0.0807%" height="15" fill="rgb(250,98,2)" fg:x="1060" fg:w="1"/><text x="85.8029%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.5529%" y="245" width="0.0807%" height="15" fill="rgb(205,213,15)" fg:x="1060" fg:w="1"/><text x="85.8029%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.5529%" y="229" width="0.0807%" height="15" fill="rgb(248,192,44)" fg:x="1060" fg:w="1"/><text x="85.8029%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.6336%" y="341" width="0.0807%" height="15" fill="rgb(221,89,17)" fg:x="1061" fg:w="1"/><text x="85.8836%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="85.6336%" y="357" width="0.1614%" height="15" fill="rgb(209,55,3)" fg:x="1061" fg:w="2"/><text x="85.8836%" y="367.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="85.7143%" y="341" width="0.0807%" height="15" fill="rgb(247,23,45)" fg:x="1062" fg:w="1"/><text x="85.9643%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="85.7143%" y="325" width="0.0807%" height="15" fill="rgb(235,152,23)" fg:x="1062" fg:w="1"/><text x="85.9643%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="85.7143%" y="309" width="0.0807%" height="15" fill="rgb(244,63,13)" fg:x="1062" fg:w="1"/><text x="85.9643%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.7143%" y="293" width="0.0807%" height="15" fill="rgb(227,30,37)" fg:x="1062" fg:w="1"/><text x="85.9643%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="85.7143%" y="277" width="0.0807%" height="15" fill="rgb(224,49,42)" fg:x="1062" fg:w="1"/><text x="85.9643%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.7143%" y="261" width="0.0807%" height="15" fill="rgb(218,129,5)" fg:x="1062" fg:w="1"/><text x="85.9643%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="85.7950%" y="277" width="0.0807%" height="15" fill="rgb(240,199,54)" fg:x="1063" fg:w="1"/><text x="86.0450%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="85.7950%" y="261" width="0.0807%" height="15" fill="rgb(234,31,13)" fg:x="1063" fg:w="1"/><text x="86.0450%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="85.7950%" y="245" width="0.0807%" height="15" fill="rgb(219,73,54)" fg:x="1063" fg:w="1"/><text x="86.0450%" y="255.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (1 samples, 0.08%)</title><rect x="85.7950%" y="229" width="0.0807%" height="15" fill="rgb(251,162,10)" fg:x="1063" fg:w="1"/><text x="86.0450%" y="239.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="85.7950%" y="213" width="0.0807%" height="15" fill="rgb(240,138,47)" fg:x="1063" fg:w="1"/><text x="86.0450%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="85.7950%" y="197" width="0.0807%" height="15" fill="rgb(216,138,26)" fg:x="1063" fg:w="1"/><text x="86.0450%" y="207.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="85.7950%" y="181" width="0.0807%" height="15" fill="rgb(243,17,35)" fg:x="1063" fg:w="1"/><text x="86.0450%" y="191.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="85.7950%" y="165" width="0.0807%" height="15" fill="rgb(241,60,18)" fg:x="1063" fg:w="1"/><text x="86.0450%" y="175.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="86.0371%" y="197" width="0.1614%" height="15" fill="rgb(234,2,44)" fg:x="1066" fg:w="2"/><text x="86.2871%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (10 samples, 0.81%)</title><rect x="86.0371%" y="213" width="0.8071%" height="15" fill="rgb(225,225,33)" fg:x="1066" fg:w="10"/><text x="86.2871%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (8 samples, 0.65%)</title><rect x="86.1985%" y="197" width="0.6457%" height="15" fill="rgb(234,50,31)" fg:x="1068" fg:w="8"/><text x="86.4485%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="86.8442%" y="213" width="0.0807%" height="15" fill="rgb(249,6,25)" fg:x="1076" fg:w="1"/><text x="87.0942%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="86.9249%" y="213" width="0.0807%" height="15" fill="rgb(241,5,17)" fg:x="1077" fg:w="1"/><text x="87.1749%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="86.9249%" y="197" width="0.0807%" height="15" fill="rgb(207,116,10)" fg:x="1077" fg:w="1"/><text x="87.1749%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="87.0056%" y="181" width="0.0807%" height="15" fill="rgb(222,128,18)" fg:x="1078" fg:w="1"/><text x="87.2556%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.1671%" y="149" width="0.0807%" height="15" fill="rgb(229,109,25)" fg:x="1080" fg:w="1"/><text x="87.4171%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.2478%" y="133" width="0.0807%" height="15" fill="rgb(222,102,25)" fg:x="1081" fg:w="1"/><text x="87.4978%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.2478%" y="117" width="0.0807%" height="15" fill="rgb(239,211,5)" fg:x="1081" fg:w="1"/><text x="87.4978%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (9 samples, 0.73%)</title><rect x="87.2478%" y="149" width="0.7264%" height="15" fill="rgb(223,136,26)" fg:x="1081" fg:w="9"/><text x="87.4978%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (8 samples, 0.65%)</title><rect x="87.3285%" y="133" width="0.6457%" height="15" fill="rgb(227,30,15)" fg:x="1082" fg:w="8"/><text x="87.5785%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (8 samples, 0.65%)</title><rect x="87.3285%" y="117" width="0.6457%" height="15" fill="rgb(247,76,4)" fg:x="1082" fg:w="8"/><text x="87.5785%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="87.9742%" y="149" width="0.0807%" height="15" fill="rgb(245,38,48)" fg:x="1090" fg:w="1"/><text x="88.2242%" y="159.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="88.0549%" y="149" width="0.0807%" height="15" fill="rgb(210,220,14)" fg:x="1091" fg:w="1"/><text x="88.3049%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 1.21%)</title><rect x="87.0056%" y="197" width="1.2107%" height="15" fill="rgb(224,60,51)" fg:x="1078" fg:w="15"/><text x="87.2556%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (14 samples, 1.13%)</title><rect x="87.0864%" y="181" width="1.1299%" height="15" fill="rgb(212,133,49)" fg:x="1079" fg:w="14"/><text x="87.3364%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (14 samples, 1.13%)</title><rect x="87.0864%" y="165" width="1.1299%" height="15" fill="rgb(231,39,22)" fg:x="1079" fg:w="14"/><text x="87.3364%" y="175.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="88.1356%" y="149" width="0.0807%" height="15" fill="rgb(236,173,22)" fg:x="1092" fg:w="1"/><text x="88.3856%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.1356%" y="133" width="0.0807%" height="15" fill="rgb(210,70,0)" fg:x="1092" fg:w="1"/><text x="88.3856%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.1356%" y="117" width="0.0807%" height="15" fill="rgb(215,170,11)" fg:x="1092" fg:w="1"/><text x="88.3856%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.1356%" y="101" width="0.0807%" height="15" fill="rgb(220,154,28)" fg:x="1092" fg:w="1"/><text x="88.3856%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.2970%" y="181" width="0.0807%" height="15" fill="rgb(240,160,41)" fg:x="1094" fg:w="1"/><text x="88.5470%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.2970%" y="165" width="0.0807%" height="15" fill="rgb(243,215,41)" fg:x="1094" fg:w="1"/><text x="88.5470%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.2970%" y="149" width="0.0807%" height="15" fill="rgb(214,208,31)" fg:x="1094" fg:w="1"/><text x="88.5470%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="88.3777%" y="181" width="0.2421%" height="15" fill="rgb(247,57,22)" fg:x="1095" fg:w="3"/><text x="88.6277%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.56%)</title><rect x="88.2163%" y="197" width="0.5650%" height="15" fill="rgb(228,73,52)" fg:x="1093" fg:w="7"/><text x="88.4663%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="88.6199%" y="181" width="0.1614%" height="15" fill="rgb(252,60,9)" fg:x="1098" fg:w="2"/><text x="88.8699%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="88.7006%" y="165" width="0.0807%" height="15" fill="rgb(233,9,51)" fg:x="1099" fg:w="1"/><text x="88.9506%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.7006%" y="149" width="0.0807%" height="15" fill="rgb(223,67,14)" fg:x="1099" fg:w="1"/><text x="88.9506%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="88.7006%" y="133" width="0.0807%" height="15" fill="rgb(222,86,2)" fg:x="1099" fg:w="1"/><text x="88.9506%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="88.7813%" y="197" width="0.0807%" height="15" fill="rgb(243,58,54)" fg:x="1100" fg:w="1"/><text x="89.0313%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="88.7813%" y="181" width="0.0807%" height="15" fill="rgb(210,200,39)" fg:x="1100" fg:w="1"/><text x="89.0313%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.7813%" y="165" width="0.0807%" height="15" fill="rgb(238,135,9)" fg:x="1100" fg:w="1"/><text x="89.0313%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.7813%" y="149" width="0.0807%" height="15" fill="rgb(232,179,7)" fg:x="1100" fg:w="1"/><text x="89.0313%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.7813%" y="133" width="0.0807%" height="15" fill="rgb(245,65,41)" fg:x="1100" fg:w="1"/><text x="89.0313%" y="143.50"></text></g><g><title>regex_automata::meta::strategy::new (38 samples, 3.07%)</title><rect x="85.8757%" y="229" width="3.0670%" height="15" fill="rgb(227,43,8)" fg:x="1064" fg:w="38"/><text x="86.1257%" y="239.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (24 samples, 1.94%)</title><rect x="87.0056%" y="213" width="1.9370%" height="15" fill="rgb(235,91,14)" fg:x="1078" fg:w="24"/><text x="87.2556%" y="223.50">r..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="88.8620%" y="197" width="0.0807%" height="15" fill="rgb(235,219,31)" fg:x="1101" fg:w="1"/><text x="89.1120%" y="207.50"></text></g><g><title>regex_syntax::hir::ClassBytes::push (1 samples, 0.08%)</title><rect x="88.8620%" y="181" width="0.0807%" height="15" fill="rgb(227,121,25)" fg:x="1101" fg:w="1"/><text x="89.1120%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.8620%" y="165" width="0.0807%" height="15" fill="rgb(254,129,24)" fg:x="1101" fg:w="1"/><text x="89.1120%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.8620%" y="149" width="0.0807%" height="15" fill="rgb(226,144,49)" fg:x="1101" fg:w="1"/><text x="89.1120%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.8620%" y="133" width="0.0807%" height="15" fill="rgb(214,187,32)" fg:x="1101" fg:w="1"/><text x="89.1120%" y="143.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="88.9427%" y="197" width="0.0807%" height="15" fill="rgb(243,129,46)" fg:x="1102" fg:w="1"/><text x="89.1927%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.9427%" y="181" width="0.0807%" height="15" fill="rgb(221,185,35)" fg:x="1102" fg:w="1"/><text x="89.1927%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.9427%" y="165" width="0.0807%" height="15" fill="rgb(205,0,32)" fg:x="1102" fg:w="1"/><text x="89.1927%" y="175.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="88.9427%" y="149" width="0.0807%" height="15" fill="rgb(229,179,12)" fg:x="1102" fg:w="1"/><text x="89.1927%" y="159.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (40 samples, 3.23%)</title><rect x="85.8757%" y="277" width="3.2284%" height="15" fill="rgb(252,107,19)" fg:x="1064" fg:w="40"/><text x="86.1257%" y="287.50">&lt;re..</text></g><g><title>regex::builders::Builder::build_one_string (40 samples, 3.23%)</title><rect x="85.8757%" y="261" width="3.2284%" height="15" fill="rgb(220,95,27)" fg:x="1064" fg:w="40"/><text x="86.1257%" y="271.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (40 samples, 3.23%)</title><rect x="85.8757%" y="245" width="3.2284%" height="15" fill="rgb(240,113,40)" fg:x="1064" fg:w="40"/><text x="86.1257%" y="255.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="88.9427%" y="229" width="0.1614%" height="15" fill="rgb(208,4,43)" fg:x="1102" fg:w="2"/><text x="89.1927%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="88.9427%" y="213" width="0.1614%" height="15" fill="rgb(247,189,30)" fg:x="1102" fg:w="2"/><text x="89.1927%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="89.0234%" y="197" width="0.0807%" height="15" fill="rgb(231,157,17)" fg:x="1103" fg:w="1"/><text x="89.2734%" y="207.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="89.0234%" y="181" width="0.0807%" height="15" fill="rgb(224,139,6)" fg:x="1103" fg:w="1"/><text x="89.2734%" y="191.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="89.0234%" y="165" width="0.0807%" height="15" fill="rgb(223,83,16)" fg:x="1103" fg:w="1"/><text x="89.2734%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.0234%" y="149" width="0.0807%" height="15" fill="rgb(232,211,20)" fg:x="1103" fg:w="1"/><text x="89.2734%" y="159.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (44 samples, 3.55%)</title><rect x="85.7950%" y="293" width="3.5513%" height="15" fill="rgb(225,203,35)" fg:x="1063" fg:w="44"/><text x="86.0450%" y="303.50">inde..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="89.1041%" y="277" width="0.2421%" height="15" fill="rgb(215,211,44)" fg:x="1104" fg:w="3"/><text x="89.3541%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="89.1041%" y="261" width="0.2421%" height="15" fill="rgb(248,213,26)" fg:x="1104" fg:w="3"/><text x="89.3541%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="89.1041%" y="245" width="0.2421%" height="15" fill="rgb(214,23,52)" fg:x="1104" fg:w="3"/><text x="89.3541%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="89.1041%" y="229" width="0.2421%" height="15" fill="rgb(225,173,50)" fg:x="1104" fg:w="3"/><text x="89.3541%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="89.1041%" y="213" width="0.2421%" height="15" fill="rgb(206,150,22)" fg:x="1104" fg:w="3"/><text x="89.3541%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="89.2655%" y="197" width="0.0807%" height="15" fill="rgb(239,64,23)" fg:x="1106" fg:w="1"/><text x="89.5155%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.2655%" y="181" width="0.0807%" height="15" fill="rgb(242,50,38)" fg:x="1106" fg:w="1"/><text x="89.5155%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="89.2655%" y="165" width="0.0807%" height="15" fill="rgb(217,91,15)" fg:x="1106" fg:w="1"/><text x="89.5155%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="89.3462%" y="229" width="0.0807%" height="15" fill="rgb(230,172,6)" fg:x="1107" fg:w="1"/><text x="89.5962%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="89.3462%" y="213" width="0.0807%" height="15" fill="rgb(221,98,26)" fg:x="1107" fg:w="1"/><text x="89.5962%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::hir::Hir&gt;&gt; (1 samples, 0.08%)</title><rect x="89.3462%" y="197" width="0.0807%" height="15" fill="rgb(227,210,45)" fg:x="1107" fg:w="1"/><text x="89.5962%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.3462%" y="181" width="0.0807%" height="15" fill="rgb(206,8,30)" fg:x="1107" fg:w="1"/><text x="89.5962%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="89.4270%" y="229" width="0.1614%" height="15" fill="rgb(241,219,17)" fg:x="1108" fg:w="2"/><text x="89.6770%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="89.4270%" y="213" width="0.1614%" height="15" fill="rgb(247,121,29)" fg:x="1108" fg:w="2"/><text x="89.6770%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="89.5077%" y="197" width="0.0807%" height="15" fill="rgb(219,169,49)" fg:x="1109" fg:w="1"/><text x="89.7577%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="89.5077%" y="181" width="0.0807%" height="15" fill="rgb(253,49,49)" fg:x="1109" fg:w="1"/><text x="89.7577%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.5077%" y="165" width="0.0807%" height="15" fill="rgb(217,178,3)" fg:x="1109" fg:w="1"/><text x="89.7577%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="89.5077%" y="149" width="0.0807%" height="15" fill="rgb(234,73,37)" fg:x="1109" fg:w="1"/><text x="89.7577%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.5884%" y="213" width="0.0807%" height="15" fill="rgb(250,98,22)" fg:x="1110" fg:w="1"/><text x="89.8384%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.7498%" y="197" width="0.0807%" height="15" fill="rgb(220,108,37)" fg:x="1112" fg:w="1"/><text x="89.9998%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (9 samples, 0.73%)</title><rect x="89.6691%" y="213" width="0.7264%" height="15" fill="rgb(225,168,10)" fg:x="1111" fg:w="9"/><text x="89.9191%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (7 samples, 0.56%)</title><rect x="89.8305%" y="197" width="0.5650%" height="15" fill="rgb(247,215,21)" fg:x="1113" fg:w="7"/><text x="90.0805%" y="207.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="90.2341%" y="181" width="0.1614%" height="15" fill="rgb(253,189,31)" fg:x="1118" fg:w="2"/><text x="90.4841%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="90.3955%" y="197" width="0.1614%" height="15" fill="rgb(241,54,22)" fg:x="1120" fg:w="2"/><text x="90.6455%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="90.3955%" y="213" width="0.2421%" height="15" fill="rgb(211,87,4)" fg:x="1120" fg:w="3"/><text x="90.6455%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="90.5569%" y="197" width="0.0807%" height="15" fill="rgb(245,112,24)" fg:x="1122" fg:w="1"/><text x="90.8069%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="90.5569%" y="181" width="0.0807%" height="15" fill="rgb(235,190,41)" fg:x="1122" fg:w="1"/><text x="90.8069%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="90.5569%" y="165" width="0.0807%" height="15" fill="rgb(214,89,8)" fg:x="1122" fg:w="1"/><text x="90.8069%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.5569%" y="149" width="0.0807%" height="15" fill="rgb(249,155,35)" fg:x="1122" fg:w="1"/><text x="90.8069%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.5569%" y="133" width="0.0807%" height="15" fill="rgb(249,88,26)" fg:x="1122" fg:w="1"/><text x="90.8069%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.5569%" y="117" width="0.0807%" height="15" fill="rgb(232,56,8)" fg:x="1122" fg:w="1"/><text x="90.8069%" y="127.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="90.6376%" y="181" width="0.0807%" height="15" fill="rgb(240,95,3)" fg:x="1123" fg:w="1"/><text x="90.8876%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (2 samples, 0.16%)</title><rect x="90.7183%" y="181" width="0.1614%" height="15" fill="rgb(222,44,28)" fg:x="1124" fg:w="2"/><text x="90.9683%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (8 samples, 0.65%)</title><rect x="90.6376%" y="197" width="0.6457%" height="15" fill="rgb(234,16,30)" fg:x="1123" fg:w="8"/><text x="90.8876%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (5 samples, 0.40%)</title><rect x="90.8797%" y="181" width="0.4036%" height="15" fill="rgb(223,26,17)" fg:x="1126" fg:w="5"/><text x="91.1297%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (5 samples, 0.40%)</title><rect x="90.8797%" y="165" width="0.4036%" height="15" fill="rgb(239,187,47)" fg:x="1126" fg:w="5"/><text x="91.1297%" y="175.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (5 samples, 0.40%)</title><rect x="90.8797%" y="149" width="0.4036%" height="15" fill="rgb(247,102,50)" fg:x="1126" fg:w="5"/><text x="91.1297%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (9 samples, 0.73%)</title><rect x="90.6376%" y="213" width="0.7264%" height="15" fill="rgb(231,216,22)" fg:x="1123" fg:w="9"/><text x="90.8876%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="91.2833%" y="197" width="0.0807%" height="15" fill="rgb(216,201,26)" fg:x="1131" fg:w="1"/><text x="91.5333%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="91.3640%" y="213" width="0.1614%" height="15" fill="rgb(214,186,23)" fg:x="1132" fg:w="2"/><text x="91.6140%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="91.4447%" y="197" width="0.0807%" height="15" fill="rgb(235,184,4)" fg:x="1133" fg:w="1"/><text x="91.6947%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="91.4447%" y="181" width="0.0807%" height="15" fill="rgb(244,46,17)" fg:x="1133" fg:w="1"/><text x="91.6947%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.4447%" y="165" width="0.0807%" height="15" fill="rgb(248,74,46)" fg:x="1133" fg:w="1"/><text x="91.6947%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.9290%" y="101" width="0.0807%" height="15" fill="rgb(243,79,5)" fg:x="1139" fg:w="1"/><text x="92.1790%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="92.0097%" y="101" width="0.0807%" height="15" fill="rgb(213,148,1)" fg:x="1140" fg:w="1"/><text x="92.2597%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.1711%" y="37" width="0.0807%" height="15" fill="rgb(221,30,0)" fg:x="1142" fg:w="1"/><text x="92.4211%" y="47.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="92.1711%" y="69" width="0.1614%" height="15" fill="rgb(207,85,29)" fg:x="1142" fg:w="2"/><text x="92.4211%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="92.1711%" y="53" width="0.1614%" height="15" fill="rgb(239,31,46)" fg:x="1142" fg:w="2"/><text x="92.4211%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="92.2518%" y="37" width="0.0807%" height="15" fill="rgb(219,6,1)" fg:x="1143" fg:w="1"/><text x="92.5018%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (7 samples, 0.56%)</title><rect x="92.0904%" y="101" width="0.5650%" height="15" fill="rgb(229,90,29)" fg:x="1141" fg:w="7"/><text x="92.3404%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (6 samples, 0.48%)</title><rect x="92.1711%" y="85" width="0.4843%" height="15" fill="rgb(242,201,42)" fg:x="1142" fg:w="6"/><text x="92.4211%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (4 samples, 0.32%)</title><rect x="92.3325%" y="69" width="0.3228%" height="15" fill="rgb(243,80,54)" fg:x="1144" fg:w="4"/><text x="92.5825%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.5747%" y="53" width="0.0807%" height="15" fill="rgb(223,166,15)" fg:x="1147" fg:w="1"/><text x="92.8247%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (9 samples, 0.73%)</title><rect x="92.6554%" y="101" width="0.7264%" height="15" fill="rgb(238,78,27)" fg:x="1148" fg:w="9"/><text x="92.9054%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (9 samples, 0.73%)</title><rect x="92.6554%" y="85" width="0.7264%" height="15" fill="rgb(235,28,43)" fg:x="1148" fg:w="9"/><text x="92.9054%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (9 samples, 0.73%)</title><rect x="92.6554%" y="69" width="0.7264%" height="15" fill="rgb(240,210,28)" fg:x="1148" fg:w="9"/><text x="92.9054%" y="79.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 2.02%)</title><rect x="91.5254%" y="197" width="2.0178%" height="15" fill="rgb(253,6,46)" fg:x="1134" fg:w="25"/><text x="91.7754%" y="207.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (25 samples, 2.02%)</title><rect x="91.5254%" y="181" width="2.0178%" height="15" fill="rgb(250,159,47)" fg:x="1134" fg:w="25"/><text x="91.7754%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (25 samples, 2.02%)</title><rect x="91.5254%" y="165" width="2.0178%" height="15" fill="rgb(216,139,2)" fg:x="1134" fg:w="25"/><text x="91.7754%" y="175.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (25 samples, 2.02%)</title><rect x="91.5254%" y="149" width="2.0178%" height="15" fill="rgb(221,124,44)" fg:x="1134" fg:w="25"/><text x="91.7754%" y="159.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (25 samples, 2.02%)</title><rect x="91.5254%" y="133" width="2.0178%" height="15" fill="rgb(205,37,22)" fg:x="1134" fg:w="25"/><text x="91.7754%" y="143.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (25 samples, 2.02%)</title><rect x="91.5254%" y="117" width="2.0178%" height="15" fill="rgb(250,55,8)" fg:x="1134" fg:w="25"/><text x="91.7754%" y="127.50">r..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="93.3818%" y="101" width="0.1614%" height="15" fill="rgb(215,83,48)" fg:x="1157" fg:w="2"/><text x="93.6318%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.4625%" y="85" width="0.0807%" height="15" fill="rgb(253,2,32)" fg:x="1158" fg:w="1"/><text x="93.7125%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.4625%" y="69" width="0.0807%" height="15" fill="rgb(236,67,28)" fg:x="1158" fg:w="1"/><text x="93.7125%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.4625%" y="53" width="0.0807%" height="15" fill="rgb(252,55,15)" fg:x="1158" fg:w="1"/><text x="93.7125%" y="63.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.6239%" y="181" width="0.0807%" height="15" fill="rgb(243,173,17)" fg:x="1160" fg:w="1"/><text x="93.8739%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.08%)</title><rect x="93.7046%" y="181" width="0.0807%" height="15" fill="rgb(215,212,13)" fg:x="1161" fg:w="1"/><text x="93.9546%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="93.7853%" y="181" width="0.0807%" height="15" fill="rgb(253,176,6)" fg:x="1162" fg:w="1"/><text x="94.0353%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (37 samples, 2.99%)</title><rect x="91.5254%" y="213" width="2.9863%" height="15" fill="rgb(236,105,26)" fg:x="1134" fg:w="37"/><text x="91.7754%" y="223.50">reg..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (12 samples, 0.97%)</title><rect x="93.5432%" y="197" width="0.9685%" height="15" fill="rgb(239,226,32)" fg:x="1159" fg:w="12"/><text x="93.7932%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (8 samples, 0.65%)</title><rect x="93.8660%" y="181" width="0.6457%" height="15" fill="rgb(236,104,51)" fg:x="1163" fg:w="8"/><text x="94.1160%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="94.4310%" y="165" width="0.0807%" height="15" fill="rgb(220,172,33)" fg:x="1170" fg:w="1"/><text x="94.6810%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.4310%" y="149" width="0.0807%" height="15" fill="rgb(224,182,25)" fg:x="1170" fg:w="1"/><text x="94.6810%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.4310%" y="133" width="0.0807%" height="15" fill="rgb(236,184,24)" fg:x="1170" fg:w="1"/><text x="94.6810%" y="143.50"></text></g><g><title>regex_automata::meta::strategy::new (63 samples, 5.08%)</title><rect x="89.5884%" y="229" width="5.0847%" height="15" fill="rgb(241,221,14)" fg:x="1110" fg:w="63"/><text x="89.8384%" y="239.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="94.5117%" y="213" width="0.1614%" height="15" fill="rgb(227,146,5)" fg:x="1171" fg:w="2"/><text x="94.7617%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (2 samples, 0.16%)</title><rect x="94.5117%" y="197" width="0.1614%" height="15" fill="rgb(214,15,23)" fg:x="1171" fg:w="2"/><text x="94.7617%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="94.6731%" y="197" width="0.0807%" height="15" fill="rgb(233,157,31)" fg:x="1173" fg:w="1"/><text x="94.9231%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="94.7538%" y="197" width="0.0807%" height="15" fill="rgb(211,27,52)" fg:x="1174" fg:w="1"/><text x="95.0038%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="94.7538%" y="181" width="0.0807%" height="15" fill="rgb(212,223,15)" fg:x="1174" fg:w="1"/><text x="95.0038%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.7538%" y="165" width="0.0807%" height="15" fill="rgb(254,211,0)" fg:x="1174" fg:w="1"/><text x="95.0038%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.7538%" y="149" width="0.0807%" height="15" fill="rgb(205,43,38)" fg:x="1174" fg:w="1"/><text x="95.0038%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.7538%" y="133" width="0.0807%" height="15" fill="rgb(242,206,46)" fg:x="1174" fg:w="1"/><text x="95.0038%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="94.6731%" y="229" width="0.2421%" height="15" fill="rgb(220,221,12)" fg:x="1173" fg:w="3"/><text x="94.9231%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="94.6731%" y="213" width="0.2421%" height="15" fill="rgb(217,156,35)" fg:x="1173" fg:w="3"/><text x="94.9231%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="94.8345%" y="197" width="0.0807%" height="15" fill="rgb(207,181,49)" fg:x="1175" fg:w="1"/><text x="95.0845%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.9960%" y="181" width="0.0807%" height="15" fill="rgb(235,103,47)" fg:x="1177" fg:w="1"/><text x="95.2460%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.9960%" y="165" width="0.0807%" height="15" fill="rgb(222,63,28)" fg:x="1177" fg:w="1"/><text x="95.2460%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.9960%" y="149" width="0.0807%" height="15" fill="rgb(244,137,21)" fg:x="1177" fg:w="1"/><text x="95.2460%" y="159.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="94.9960%" y="197" width="0.1614%" height="15" fill="rgb(228,35,27)" fg:x="1177" fg:w="2"/><text x="95.2460%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="95.0767%" y="181" width="0.0807%" height="15" fill="rgb(226,191,41)" fg:x="1178" fg:w="1"/><text x="95.3267%" y="191.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="95.2381%" y="181" width="0.0807%" height="15" fill="rgb(210,154,3)" fg:x="1180" fg:w="1"/><text x="95.4881%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (75 samples, 6.05%)</title><rect x="89.3462%" y="277" width="6.0533%" height="15" fill="rgb(216,60,49)" fg:x="1107" fg:w="75"/><text x="89.5962%" y="287.50">&lt;regex::..</text></g><g><title>regex::builders::Builder::build_one_string (75 samples, 6.05%)</title><rect x="89.3462%" y="261" width="6.0533%" height="15" fill="rgb(226,17,20)" fg:x="1107" fg:w="75"/><text x="89.5962%" y="271.50">regex::b..</text></g><g><title>regex_automata::meta::regex::Builder::build (75 samples, 6.05%)</title><rect x="89.3462%" y="245" width="6.0533%" height="15" fill="rgb(206,115,35)" fg:x="1107" fg:w="75"/><text x="89.5962%" y="255.50">regex_au..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.48%)</title><rect x="94.9153%" y="229" width="0.4843%" height="15" fill="rgb(227,88,1)" fg:x="1176" fg:w="6"/><text x="95.1653%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.48%)</title><rect x="94.9153%" y="213" width="0.4843%" height="15" fill="rgb(230,222,24)" fg:x="1176" fg:w="6"/><text x="95.1653%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.24%)</title><rect x="95.1574%" y="197" width="0.2421%" height="15" fill="rgb(214,124,32)" fg:x="1179" fg:w="3"/><text x="95.4074%" y="207.50"></text></g><g><title>regex_syntax::hir::Properties::repetition (1 samples, 0.08%)</title><rect x="95.3188%" y="181" width="0.0807%" height="15" fill="rgb(240,41,36)" fg:x="1181" fg:w="1"/><text x="95.5688%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.3188%" y="165" width="0.0807%" height="15" fill="rgb(221,17,52)" fg:x="1181" fg:w="1"/><text x="95.5688%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.3995%" y="229" width="0.0807%" height="15" fill="rgb(252,70,16)" fg:x="1182" fg:w="1"/><text x="95.6495%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.3995%" y="213" width="0.0807%" height="15" fill="rgb(250,177,4)" fg:x="1182" fg:w="1"/><text x="95.6495%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="95.3995%" y="277" width="0.1614%" height="15" fill="rgb(240,188,47)" fg:x="1182" fg:w="2"/><text x="95.6495%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="95.3995%" y="261" width="0.1614%" height="15" fill="rgb(215,92,12)" fg:x="1182" fg:w="2"/><text x="95.6495%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="95.3995%" y="245" width="0.1614%" height="15" fill="rgb(242,110,29)" fg:x="1182" fg:w="2"/><text x="95.6495%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="95.4802%" y="229" width="0.0807%" height="15" fill="rgb(208,211,26)" fg:x="1183" fg:w="1"/><text x="95.7302%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.4802%" y="213" width="0.0807%" height="15" fill="rgb(244,147,6)" fg:x="1183" fg:w="1"/><text x="95.7302%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.4802%" y="197" width="0.0807%" height="15" fill="rgb(211,130,42)" fg:x="1183" fg:w="1"/><text x="95.7302%" y="207.50"></text></g><g><title>indefinite::rules::number::Number::check (84 samples, 6.78%)</title><rect x="89.3462%" y="293" width="6.7797%" height="15" fill="rgb(220,63,1)" fg:x="1107" fg:w="84"/><text x="89.5962%" y="303.50">indefinit..</text></g><g><title>regex::regex::string::Regex::is_match_at (7 samples, 0.56%)</title><rect x="95.5609%" y="277" width="0.5650%" height="15" fill="rgb(241,212,30)" fg:x="1184" fg:w="7"/><text x="95.8109%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.56%)</title><rect x="95.5609%" y="261" width="0.5650%" height="15" fill="rgb(233,153,17)" fg:x="1184" fg:w="7"/><text x="95.8109%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.56%)</title><rect x="95.5609%" y="245" width="0.5650%" height="15" fill="rgb(236,3,10)" fg:x="1184" fg:w="7"/><text x="95.8109%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.56%)</title><rect x="95.5609%" y="229" width="0.5650%" height="15" fill="rgb(232,41,21)" fg:x="1184" fg:w="7"/><text x="95.8109%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.56%)</title><rect x="95.5609%" y="213" width="0.5650%" height="15" fill="rgb(206,63,51)" fg:x="1184" fg:w="7"/><text x="95.8109%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.56%)</title><rect x="95.5609%" y="197" width="0.5650%" height="15" fill="rgb(250,214,3)" fg:x="1184" fg:w="7"/><text x="95.8109%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="96.0452%" y="181" width="0.0807%" height="15" fill="rgb(254,89,27)" fg:x="1190" fg:w="1"/><text x="96.2952%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.1259%" y="213" width="0.0807%" height="15" fill="rgb(249,41,14)" fg:x="1191" fg:w="1"/><text x="96.3759%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.1259%" y="197" width="0.0807%" height="15" fill="rgb(221,196,51)" fg:x="1191" fg:w="1"/><text x="96.3759%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.2066%" y="213" width="0.0807%" height="15" fill="rgb(214,116,26)" fg:x="1192" fg:w="1"/><text x="96.4566%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="96.2873%" y="213" width="0.0807%" height="15" fill="rgb(236,67,7)" fg:x="1193" fg:w="1"/><text x="96.5373%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="96.4487%" y="197" width="0.0807%" height="15" fill="rgb(253,179,32)" fg:x="1195" fg:w="1"/><text x="96.6987%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="96.5295%" y="197" width="0.2421%" height="15" fill="rgb(218,33,15)" fg:x="1196" fg:w="3"/><text x="96.7795%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="96.5295%" y="181" width="0.2421%" height="15" fill="rgb(217,202,41)" fg:x="1196" fg:w="3"/><text x="96.7795%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="96.7716%" y="165" width="0.0807%" height="15" fill="rgb(234,133,5)" fg:x="1199" fg:w="1"/><text x="97.0216%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (7 samples, 0.56%)</title><rect x="96.3680%" y="213" width="0.5650%" height="15" fill="rgb(240,47,40)" fg:x="1194" fg:w="7"/><text x="96.6180%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (2 samples, 0.16%)</title><rect x="96.7716%" y="197" width="0.1614%" height="15" fill="rgb(234,166,26)" fg:x="1199" fg:w="2"/><text x="97.0216%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="96.7716%" y="181" width="0.1614%" height="15" fill="rgb(244,125,51)" fg:x="1199" fg:w="2"/><text x="97.0216%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="96.8523%" y="165" width="0.0807%" height="15" fill="rgb(229,171,11)" fg:x="1200" fg:w="1"/><text x="97.1023%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.8523%" y="149" width="0.0807%" height="15" fill="rgb(224,38,45)" fg:x="1200" fg:w="1"/><text x="97.1023%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="96.9330%" y="181" width="0.0807%" height="15" fill="rgb(237,27,7)" fg:x="1201" fg:w="1"/><text x="97.1830%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="96.9330%" y="165" width="0.0807%" height="15" fill="rgb(216,52,7)" fg:x="1201" fg:w="1"/><text x="97.1830%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.9330%" y="149" width="0.0807%" height="15" fill="rgb(243,11,11)" fg:x="1201" fg:w="1"/><text x="97.1830%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.9330%" y="133" width="0.0807%" height="15" fill="rgb(253,167,20)" fg:x="1201" fg:w="1"/><text x="97.1830%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.9330%" y="117" width="0.0807%" height="15" fill="rgb(215,207,5)" fg:x="1201" fg:w="1"/><text x="97.1830%" y="127.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="96.9330%" y="213" width="0.1614%" height="15" fill="rgb(252,127,31)" fg:x="1201" fg:w="2"/><text x="97.1830%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="96.9330%" y="197" width="0.1614%" height="15" fill="rgb(209,106,27)" fg:x="1201" fg:w="2"/><text x="97.1830%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="97.0137%" y="181" width="0.0807%" height="15" fill="rgb(214,220,18)" fg:x="1202" fg:w="1"/><text x="97.2637%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (13 samples, 1.05%)</title><rect x="96.1259%" y="261" width="1.0492%" height="15" fill="rgb(237,89,12)" fg:x="1191" fg:w="13"/><text x="96.3759%" y="271.50"></text></g><g><title>regex::builders::Builder::build_one_string (13 samples, 1.05%)</title><rect x="96.1259%" y="245" width="1.0492%" height="15" fill="rgb(209,167,36)" fg:x="1191" fg:w="13"/><text x="96.3759%" y="255.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (13 samples, 1.05%)</title><rect x="96.1259%" y="229" width="1.0492%" height="15" fill="rgb(243,45,22)" fg:x="1191" fg:w="13"/><text x="96.3759%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="97.0944%" y="213" width="0.0807%" height="15" fill="rgb(239,2,46)" fg:x="1203" fg:w="1"/><text x="97.3444%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="97.0944%" y="197" width="0.0807%" height="15" fill="rgb(241,101,0)" fg:x="1203" fg:w="1"/><text x="97.3444%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="97.0944%" y="181" width="0.0807%" height="15" fill="rgb(244,34,31)" fg:x="1203" fg:w="1"/><text x="97.3444%" y="191.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="97.1751%" y="261" width="0.0807%" height="15" fill="rgb(248,23,22)" fg:x="1204" fg:w="1"/><text x="97.4251%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="97.1751%" y="245" width="0.0807%" height="15" fill="rgb(218,27,48)" fg:x="1204" fg:w="1"/><text x="97.4251%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="97.1751%" y="229" width="0.0807%" height="15" fill="rgb(232,78,1)" fg:x="1204" fg:w="1"/><text x="97.4251%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.1751%" y="213" width="0.0807%" height="15" fill="rgb(233,169,12)" fg:x="1204" fg:w="1"/><text x="97.4251%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.2559%" y="245" width="0.0807%" height="15" fill="rgb(225,222,54)" fg:x="1205" fg:w="1"/><text x="97.5059%" y="255.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (147 samples, 11.86%)</title><rect x="85.5529%" y="373" width="11.8644%" height="15" fill="rgb(245,126,29)" fg:x="1060" fg:w="147"/><text x="85.8029%" y="383.50">&lt;&amp;kernel::model::e..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (144 samples, 11.62%)</title><rect x="85.7950%" y="357" width="11.6223%" height="15" fill="rgb(241,63,48)" fg:x="1063" fg:w="144"/><text x="86.0450%" y="367.50">plugins_core::loo..</text></g><g><title>indefinite::indefinite (144 samples, 11.62%)</title><rect x="85.7950%" y="341" width="11.6223%" height="15" fill="rgb(235,126,38)" fg:x="1063" fg:w="144"/><text x="86.0450%" y="351.50">indefinite::indef..</text></g><g><title>indefinite::methods::indefinite (144 samples, 11.62%)</title><rect x="85.7950%" y="325" width="11.6223%" height="15" fill="rgb(232,96,49)" fg:x="1063" fg:w="144"/><text x="86.0450%" y="335.50">indefinite::metho..</text></g><g><title>indefinite::methods::apply_rules (144 samples, 11.62%)</title><rect x="85.7950%" y="309" width="11.6223%" height="15" fill="rgb(211,146,40)" fg:x="1063" fg:w="144"/><text x="86.0450%" y="319.50">indefinite::metho..</text></g><g><title>indefinite::rules::other::Other::run (16 samples, 1.29%)</title><rect x="96.1259%" y="293" width="1.2914%" height="15" fill="rgb(247,93,44)" fg:x="1191" fg:w="16"/><text x="96.3759%" y="303.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (16 samples, 1.29%)</title><rect x="96.1259%" y="277" width="1.2914%" height="15" fill="rgb(251,41,49)" fg:x="1191" fg:w="16"/><text x="96.3759%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="97.2559%" y="261" width="0.1614%" height="15" fill="rgb(218,155,12)" fg:x="1205" fg:w="2"/><text x="97.5059%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="97.3366%" y="245" width="0.0807%" height="15" fill="rgb(221,161,30)" fg:x="1206" fg:w="1"/><text x="97.5866%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="97.3366%" y="229" width="0.0807%" height="15" fill="rgb(221,179,11)" fg:x="1206" fg:w="1"/><text x="97.5866%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.3366%" y="213" width="0.0807%" height="15" fill="rgb(224,170,48)" fg:x="1206" fg:w="1"/><text x="97.5866%" y="223.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="97.4173%" y="373" width="0.0807%" height="15" fill="rgb(223,117,5)" fg:x="1207" fg:w="1"/><text x="97.6673%" y="383.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="97.4173%" y="357" width="0.0807%" height="15" fill="rgb(209,52,20)" fg:x="1207" fg:w="1"/><text x="97.6673%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (157 samples, 12.67%)</title><rect x="84.9072%" y="581" width="12.6715%" height="15" fill="rgb(209,19,41)" fg:x="1052" fg:w="157"/><text x="85.1572%" y="591.50">&lt;engine::session::S..</text></g><g><title>kernel::plugins::mw::apply_middleware (157 samples, 12.67%)</title><rect x="84.9072%" y="565" width="12.6715%" height="15" fill="rgb(210,177,12)" fg:x="1052" fg:w="157"/><text x="85.1572%" y="575.50">kernel::plugins::mw..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (157 samples, 12.67%)</title><rect x="84.9072%" y="549" width="12.6715%" height="15" fill="rgb(211,159,37)" fg:x="1052" fg:w="157"/><text x="85.1572%" y="559.50">kernel::plugins::mw..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (157 samples, 12.67%)</title><rect x="84.9072%" y="533" width="12.6715%" height="15" fill="rgb(209,20,2)" fg:x="1052" fg:w="157"/><text x="85.1572%" y="543.50">&lt;engine::session::E..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (154 samples, 12.43%)</title><rect x="85.1493%" y="517" width="12.4294%" height="15" fill="rgb(244,3,46)" fg:x="1055" fg:w="154"/><text x="85.3993%" y="527.50">kernel::plugins::mw..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (154 samples, 12.43%)</title><rect x="85.1493%" y="501" width="12.4294%" height="15" fill="rgb(220,94,38)" fg:x="1055" fg:w="154"/><text x="85.3993%" y="511.50">&lt;plugins_dynlib::Dy..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (154 samples, 12.43%)</title><rect x="85.1493%" y="485" width="12.4294%" height="15" fill="rgb(253,14,31)" fg:x="1055" fg:w="154"/><text x="85.3993%" y="495.50">kernel::plugins::mw..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (154 samples, 12.43%)</title><rect x="85.1493%" y="469" width="12.4294%" height="15" fill="rgb(234,176,13)" fg:x="1055" fg:w="154"/><text x="85.3993%" y="479.50">core::ops::function..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (154 samples, 12.43%)</title><rect x="85.1493%" y="453" width="12.4294%" height="15" fill="rgb(218,62,25)" fg:x="1055" fg:w="154"/><text x="85.3993%" y="463.50">kernel::plugins::mw..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (154 samples, 12.43%)</title><rect x="85.1493%" y="437" width="12.4294%" height="15" fill="rgb(216,124,40)" fg:x="1055" fg:w="154"/><text x="85.3993%" y="447.50">core::ops::function..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (154 samples, 12.43%)</title><rect x="85.1493%" y="421" width="12.4294%" height="15" fill="rgb(228,170,12)" fg:x="1055" fg:w="154"/><text x="85.3993%" y="431.50">&lt;engine::session::s..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (154 samples, 12.43%)</title><rect x="85.1493%" y="405" width="12.4294%" height="15" fill="rgb(231,226,5)" fg:x="1055" fg:w="154"/><text x="85.3993%" y="415.50">&lt;plugins_core::look..</text></g><g><title>plugins_core::looking::model::new_area_observation (151 samples, 12.19%)</title><rect x="85.3914%" y="389" width="12.1872%" height="15" fill="rgb(237,122,22)" fg:x="1058" fg:w="151"/><text x="85.6414%" y="399.50">plugins_core::look..</text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntry&gt;::to_entry (1 samples, 0.08%)</title><rect x="97.4980%" y="373" width="0.0807%" height="15" fill="rgb(209,185,25)" fg:x="1208" fg:w="1"/><text x="97.7480%" y="383.50"></text></g><g><title>kernel::model::entry::EntryResolver::entry (1 samples, 0.08%)</title><rect x="97.4980%" y="357" width="0.0807%" height="15" fill="rgb(228,200,32)" fg:x="1208" fg:w="1"/><text x="97.7480%" y="367.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="97.4980%" y="341" width="0.0807%" height="15" fill="rgb(217,140,10)" fg:x="1208" fg:w="1"/><text x="97.7480%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="97.4980%" y="325" width="0.0807%" height="15" fill="rgb(253,17,24)" fg:x="1208" fg:w="1"/><text x="97.7480%" y="335.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="97.4980%" y="309" width="0.0807%" height="15" fill="rgb(212,61,6)" fg:x="1208" fg:w="1"/><text x="97.7480%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="97.4980%" y="293" width="0.0807%" height="15" fill="rgb(205,14,25)" fg:x="1208" fg:w="1"/><text x="97.7480%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.4980%" y="277" width="0.0807%" height="15" fill="rgb(232,69,41)" fg:x="1208" fg:w="1"/><text x="97.7480%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.4980%" y="261" width="0.0807%" height="15" fill="rgb(241,106,47)" fg:x="1208" fg:w="1"/><text x="97.7480%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.4980%" y="245" width="0.0807%" height="15" fill="rgb(210,213,53)" fg:x="1208" fg:w="1"/><text x="97.7480%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.4980%" y="229" width="0.0807%" height="15" fill="rgb(253,175,27)" fg:x="1208" fg:w="1"/><text x="97.7480%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.4980%" y="213" width="0.0807%" height="15" fill="rgb(211,171,24)" fg:x="1208" fg:w="1"/><text x="97.7480%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="97.4980%" y="197" width="0.0807%" height="15" fill="rgb(229,80,7)" fg:x="1208" fg:w="1"/><text x="97.7480%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="97.4980%" y="181" width="0.0807%" height="15" fill="rgb(212,46,39)" fg:x="1208" fg:w="1"/><text x="97.7480%" y="191.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="97.5787%" y="581" width="0.0807%" height="15" fill="rgb(240,80,45)" fg:x="1209" fg:w="1"/><text x="97.8287%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="97.5787%" y="565" width="0.0807%" height="15" fill="rgb(253,177,40)" fg:x="1209" fg:w="1"/><text x="97.8287%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.7401%" y="485" width="0.0807%" height="15" fill="rgb(249,200,15)" fg:x="1211" fg:w="1"/><text x="97.9901%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.7401%" y="469" width="0.0807%" height="15" fill="rgb(217,78,26)" fg:x="1211" fg:w="1"/><text x="97.9901%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="97.7401%" y="517" width="0.1614%" height="15" fill="rgb(254,151,32)" fg:x="1211" fg:w="2"/><text x="97.9901%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="97.7401%" y="501" width="0.1614%" height="15" fill="rgb(226,165,27)" fg:x="1211" fg:w="2"/><text x="97.9901%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.8208%" y="485" width="0.0807%" height="15" fill="rgb(250,206,4)" fg:x="1212" fg:w="1"/><text x="98.0708%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.9015%" y="421" width="0.0807%" height="15" fill="rgb(231,229,27)" fg:x="1213" fg:w="1"/><text x="98.1515%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.9015%" y="405" width="0.0807%" height="15" fill="rgb(239,217,8)" fg:x="1213" fg:w="1"/><text x="98.1515%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.9015%" y="389" width="0.0807%" height="15" fill="rgb(225,204,27)" fg:x="1213" fg:w="1"/><text x="98.1515%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.9015%" y="373" width="0.0807%" height="15" fill="rgb(230,56,32)" fg:x="1213" fg:w="1"/><text x="98.1515%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.9015%" y="357" width="0.0807%" height="15" fill="rgb(222,56,27)" fg:x="1213" fg:w="1"/><text x="98.1515%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.9015%" y="341" width="0.0807%" height="15" fill="rgb(253,108,27)" fg:x="1213" fg:w="1"/><text x="98.1515%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.9015%" y="325" width="0.0807%" height="15" fill="rgb(212,87,36)" fg:x="1213" fg:w="1"/><text x="98.1515%" y="335.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="97.9015%" y="517" width="0.1614%" height="15" fill="rgb(247,82,36)" fg:x="1213" fg:w="2"/><text x="98.1515%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="97.9015%" y="501" width="0.1614%" height="15" fill="rgb(222,143,9)" fg:x="1213" fg:w="2"/><text x="98.1515%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.9015%" y="485" width="0.1614%" height="15" fill="rgb(238,162,48)" fg:x="1213" fg:w="2"/><text x="98.1515%" y="495.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (2 samples, 0.16%)</title><rect x="97.9015%" y="469" width="0.1614%" height="15" fill="rgb(221,59,43)" fg:x="1213" fg:w="2"/><text x="98.1515%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.9015%" y="453" width="0.1614%" height="15" fill="rgb(205,166,41)" fg:x="1213" fg:w="2"/><text x="98.1515%" y="463.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="97.9015%" y="437" width="0.1614%" height="15" fill="rgb(241,186,40)" fg:x="1213" fg:w="2"/><text x="98.1515%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="97.9822%" y="421" width="0.0807%" height="15" fill="rgb(216,119,35)" fg:x="1214" fg:w="1"/><text x="98.2322%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.9822%" y="405" width="0.0807%" height="15" fill="rgb(208,68,38)" fg:x="1214" fg:w="1"/><text x="98.2322%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="97.9822%" y="389" width="0.0807%" height="15" fill="rgb(217,113,1)" fg:x="1214" fg:w="1"/><text x="98.2322%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="97.9822%" y="373" width="0.0807%" height="15" fill="rgb(242,153,3)" fg:x="1214" fg:w="1"/><text x="98.2322%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="97.9822%" y="357" width="0.0807%" height="15" fill="rgb(229,76,35)" fg:x="1214" fg:w="1"/><text x="98.2322%" y="367.50"></text></g><g><title>engine::session::Session::load_entity (5 samples, 0.40%)</title><rect x="97.7401%" y="549" width="0.4036%" height="15" fill="rgb(229,125,34)" fg:x="1211" fg:w="5"/><text x="97.9901%" y="559.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="97.7401%" y="533" width="0.4036%" height="15" fill="rgb(238,179,36)" fg:x="1211" fg:w="5"/><text x="97.9901%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="98.0630%" y="517" width="0.0807%" height="15" fill="rgb(244,183,19)" fg:x="1215" fg:w="1"/><text x="98.3130%" y="527.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="98.0630%" y="501" width="0.0807%" height="15" fill="rgb(216,85,49)" fg:x="1215" fg:w="1"/><text x="98.3130%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.0630%" y="485" width="0.0807%" height="15" fill="rgb(208,161,47)" fg:x="1215" fg:w="1"/><text x="98.3130%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.0630%" y="469" width="0.0807%" height="15" fill="rgb(233,210,18)" fg:x="1215" fg:w="1"/><text x="98.3130%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.0630%" y="453" width="0.0807%" height="15" fill="rgb(205,104,42)" fg:x="1215" fg:w="1"/><text x="98.3130%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.0630%" y="437" width="0.0807%" height="15" fill="rgb(248,90,43)" fg:x="1215" fg:w="1"/><text x="98.3130%" y="447.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="98.0630%" y="421" width="0.0807%" height="15" fill="rgb(206,198,11)" fg:x="1215" fg:w="1"/><text x="98.3130%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.1437%" y="517" width="0.0807%" height="15" fill="rgb(239,165,27)" fg:x="1216" fg:w="1"/><text x="98.3937%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.1437%" y="501" width="0.0807%" height="15" fill="rgb(246,44,32)" fg:x="1216" fg:w="1"/><text x="98.3937%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.1437%" y="485" width="0.0807%" height="15" fill="rgb(252,65,42)" fg:x="1216" fg:w="1"/><text x="98.3937%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.1437%" y="469" width="0.0807%" height="15" fill="rgb(246,197,18)" fg:x="1216" fg:w="1"/><text x="98.3937%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.1437%" y="453" width="0.0807%" height="15" fill="rgb(216,192,4)" fg:x="1216" fg:w="1"/><text x="98.3937%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.1437%" y="437" width="0.0807%" height="15" fill="rgb(208,117,10)" fg:x="1216" fg:w="1"/><text x="98.3937%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.1437%" y="421" width="0.0807%" height="15" fill="rgb(240,61,47)" fg:x="1216" fg:w="1"/><text x="98.3937%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.1437%" y="405" width="0.0807%" height="15" fill="rgb(228,178,21)" fg:x="1216" fg:w="1"/><text x="98.3937%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.1437%" y="389" width="0.0807%" height="15" fill="rgb(219,96,54)" fg:x="1216" fg:w="1"/><text x="98.3937%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.1437%" y="373" width="0.0807%" height="15" fill="rgb(250,177,24)" fg:x="1216" fg:w="1"/><text x="98.3937%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.1437%" y="357" width="0.0807%" height="15" fill="rgb(242,154,46)" fg:x="1216" fg:w="1"/><text x="98.3937%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.1437%" y="341" width="0.0807%" height="15" fill="rgb(226,176,29)" fg:x="1216" fg:w="1"/><text x="98.3937%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.1437%" y="325" width="0.0807%" height="15" fill="rgb(226,29,2)" fg:x="1216" fg:w="1"/><text x="98.3937%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.1437%" y="309" width="0.0807%" height="15" fill="rgb(237,104,14)" fg:x="1216" fg:w="1"/><text x="98.3937%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.1437%" y="293" width="0.0807%" height="15" fill="rgb(245,207,31)" fg:x="1216" fg:w="1"/><text x="98.3937%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.2244%" y="517" width="0.0807%" height="15" fill="rgb(229,211,45)" fg:x="1217" fg:w="1"/><text x="98.4744%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.2244%" y="501" width="0.0807%" height="15" fill="rgb(229,113,15)" fg:x="1217" fg:w="1"/><text x="98.4744%" y="511.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.2244%" y="485" width="0.0807%" height="15" fill="rgb(237,147,15)" fg:x="1217" fg:w="1"/><text x="98.4744%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.2244%" y="469" width="0.0807%" height="15" fill="rgb(244,120,12)" fg:x="1217" fg:w="1"/><text x="98.4744%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.2244%" y="453" width="0.0807%" height="15" fill="rgb(205,120,12)" fg:x="1217" fg:w="1"/><text x="98.4744%" y="463.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.2244%" y="437" width="0.0807%" height="15" fill="rgb(231,26,45)" fg:x="1217" fg:w="1"/><text x="98.4744%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.2244%" y="421" width="0.0807%" height="15" fill="rgb(246,98,1)" fg:x="1217" fg:w="1"/><text x="98.4744%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.2244%" y="405" width="0.0807%" height="15" fill="rgb(207,68,45)" fg:x="1217" fg:w="1"/><text x="98.4744%" y="415.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.2244%" y="389" width="0.0807%" height="15" fill="rgb(231,27,38)" fg:x="1217" fg:w="1"/><text x="98.4744%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2244%" y="373" width="0.0807%" height="15" fill="rgb(214,223,3)" fg:x="1217" fg:w="1"/><text x="98.4744%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2244%" y="357" width="0.0807%" height="15" fill="rgb(228,195,46)" fg:x="1217" fg:w="1"/><text x="98.4744%" y="367.50"></text></g><g><title>engine::session::internal::Added::find_refs (3 samples, 0.24%)</title><rect x="98.1437%" y="549" width="0.2421%" height="15" fill="rgb(231,100,42)" fg:x="1216" fg:w="3"/><text x="98.3937%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="98.1437%" y="533" width="0.2421%" height="15" fill="rgb(236,53,4)" fg:x="1216" fg:w="3"/><text x="98.3937%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.3051%" y="517" width="0.0807%" height="15" fill="rgb(230,152,12)" fg:x="1218" fg:w="1"/><text x="98.5551%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.3051%" y="501" width="0.0807%" height="15" fill="rgb(226,101,19)" fg:x="1218" fg:w="1"/><text x="98.5551%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.3051%" y="485" width="0.0807%" height="15" fill="rgb(250,149,32)" fg:x="1218" fg:w="1"/><text x="98.5551%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.3051%" y="469" width="0.0807%" height="15" fill="rgb(232,178,12)" fg:x="1218" fg:w="1"/><text x="98.5551%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.3051%" y="453" width="0.0807%" height="15" fill="rgb(246,151,17)" fg:x="1218" fg:w="1"/><text x="98.5551%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.3051%" y="437" width="0.0807%" height="15" fill="rgb(252,17,51)" fg:x="1218" fg:w="1"/><text x="98.5551%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="98.3051%" y="421" width="0.0807%" height="15" fill="rgb(250,207,23)" fg:x="1218" fg:w="1"/><text x="98.5551%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="98.3051%" y="405" width="0.0807%" height="15" fill="rgb(205,27,5)" fg:x="1218" fg:w="1"/><text x="98.5551%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.3051%" y="389" width="0.0807%" height="15" fill="rgb(224,32,19)" fg:x="1218" fg:w="1"/><text x="98.5551%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.3858%" y="533" width="0.0807%" height="15" fill="rgb(247,214,40)" fg:x="1219" fg:w="1"/><text x="98.6358%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.3858%" y="517" width="0.0807%" height="15" fill="rgb(239,199,17)" fg:x="1219" fg:w="1"/><text x="98.6358%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.3858%" y="501" width="0.0807%" height="15" fill="rgb(251,159,9)" fg:x="1219" fg:w="1"/><text x="98.6358%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.3858%" y="485" width="0.0807%" height="15" fill="rgb(225,78,32)" fg:x="1219" fg:w="1"/><text x="98.6358%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.3858%" y="469" width="0.0807%" height="15" fill="rgb(206,97,47)" fg:x="1219" fg:w="1"/><text x="98.6358%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.4665%" y="453" width="0.0807%" height="15" fill="rgb(227,107,4)" fg:x="1220" fg:w="1"/><text x="98.7165%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="98.5472%" y="437" width="0.0807%" height="15" fill="rgb(241,146,50)" fg:x="1221" fg:w="1"/><text x="98.7972%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.5472%" y="421" width="0.0807%" height="15" fill="rgb(232,92,30)" fg:x="1221" fg:w="1"/><text x="98.7972%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="98.5472%" y="405" width="0.0807%" height="15" fill="rgb(222,0,40)" fg:x="1221" fg:w="1"/><text x="98.7972%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="98.5472%" y="389" width="0.0807%" height="15" fill="rgb(219,54,33)" fg:x="1221" fg:w="1"/><text x="98.7972%" y="399.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="98.4665%" y="533" width="0.2421%" height="15" fill="rgb(226,209,28)" fg:x="1220" fg:w="3"/><text x="98.7165%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="98.4665%" y="517" width="0.2421%" height="15" fill="rgb(254,205,35)" fg:x="1220" fg:w="3"/><text x="98.7165%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="98.4665%" y="501" width="0.2421%" height="15" fill="rgb(230,159,3)" fg:x="1220" fg:w="3"/><text x="98.7165%" y="511.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (3 samples, 0.24%)</title><rect x="98.4665%" y="485" width="0.2421%" height="15" fill="rgb(232,190,24)" fg:x="1220" fg:w="3"/><text x="98.7165%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="98.4665%" y="469" width="0.2421%" height="15" fill="rgb(217,227,44)" fg:x="1220" fg:w="3"/><text x="98.7165%" y="479.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="98.5472%" y="453" width="0.1614%" height="15" fill="rgb(236,211,1)" fg:x="1221" fg:w="2"/><text x="98.7972%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.6279%" y="437" width="0.0807%" height="15" fill="rgb(250,127,46)" fg:x="1222" fg:w="1"/><text x="98.8779%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.6279%" y="421" width="0.0807%" height="15" fill="rgb(229,213,6)" fg:x="1222" fg:w="1"/><text x="98.8779%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.6279%" y="405" width="0.0807%" height="15" fill="rgb(237,15,36)" fg:x="1222" fg:w="1"/><text x="98.8779%" y="415.50"></text></g><g><title>engine::session::Session::load_entity (14 samples, 1.13%)</title><rect x="97.6594%" y="565" width="1.1299%" height="15" fill="rgb(213,131,41)" fg:x="1210" fg:w="14"/><text x="97.9094%" y="575.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="98.3858%" y="549" width="0.4036%" height="15" fill="rgb(225,82,44)" fg:x="1219" fg:w="5"/><text x="98.6358%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="98.7086%" y="533" width="0.0807%" height="15" fill="rgb(249,42,11)" fg:x="1223" fg:w="1"/><text x="98.9586%" y="543.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="98.7086%" y="517" width="0.0807%" height="15" fill="rgb(253,11,29)" fg:x="1223" fg:w="1"/><text x="98.9586%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.7086%" y="501" width="0.0807%" height="15" fill="rgb(206,8,54)" fg:x="1223" fg:w="1"/><text x="98.9586%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.7086%" y="485" width="0.0807%" height="15" fill="rgb(222,186,2)" fg:x="1223" fg:w="1"/><text x="98.9586%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.7086%" y="469" width="0.0807%" height="15" fill="rgb(221,206,53)" fg:x="1223" fg:w="1"/><text x="98.9586%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.7086%" y="453" width="0.0807%" height="15" fill="rgb(230,150,21)" fg:x="1223" fg:w="1"/><text x="98.9586%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.7086%" y="437" width="0.0807%" height="15" fill="rgb(253,202,10)" fg:x="1223" fg:w="1"/><text x="98.9586%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.7086%" y="421" width="0.0807%" height="15" fill="rgb(238,109,40)" fg:x="1223" fg:w="1"/><text x="98.9586%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.7086%" y="405" width="0.0807%" height="15" fill="rgb(247,120,22)" fg:x="1223" fg:w="1"/><text x="98.9586%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.7086%" y="389" width="0.0807%" height="15" fill="rgb(207,43,30)" fg:x="1223" fg:w="1"/><text x="98.9586%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.7086%" y="373" width="0.0807%" height="15" fill="rgb(213,211,24)" fg:x="1223" fg:w="1"/><text x="98.9586%" y="383.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="98.7086%" y="357" width="0.0807%" height="15" fill="rgb(239,73,39)" fg:x="1223" fg:w="1"/><text x="98.9586%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7893%" y="485" width="0.0807%" height="15" fill="rgb(245,182,19)" fg:x="1224" fg:w="1"/><text x="99.0393%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7893%" y="469" width="0.0807%" height="15" fill="rgb(247,143,26)" fg:x="1224" fg:w="1"/><text x="99.0393%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7893%" y="453" width="0.0807%" height="15" fill="rgb(228,191,23)" fg:x="1224" fg:w="1"/><text x="99.0393%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7893%" y="437" width="0.0807%" height="15" fill="rgb(253,165,31)" fg:x="1224" fg:w="1"/><text x="99.0393%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.7893%" y="421" width="0.0807%" height="15" fill="rgb(234,138,20)" fg:x="1224" fg:w="1"/><text x="99.0393%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.8701%" y="437" width="0.0807%" height="15" fill="rgb(218,191,29)" fg:x="1225" fg:w="1"/><text x="99.1201%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.8701%" y="421" width="0.0807%" height="15" fill="rgb(221,157,19)" fg:x="1225" fg:w="1"/><text x="99.1201%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.8701%" y="405" width="0.0807%" height="15" fill="rgb(237,26,42)" fg:x="1225" fg:w="1"/><text x="99.1201%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.8701%" y="389" width="0.0807%" height="15" fill="rgb(220,163,24)" fg:x="1225" fg:w="1"/><text x="99.1201%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.8701%" y="373" width="0.0807%" height="15" fill="rgb(242,115,20)" fg:x="1225" fg:w="1"/><text x="99.1201%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.8701%" y="357" width="0.0807%" height="15" fill="rgb(210,206,9)" fg:x="1225" fg:w="1"/><text x="99.1201%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.8701%" y="341" width="0.0807%" height="15" fill="rgb(208,71,17)" fg:x="1225" fg:w="1"/><text x="99.1201%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.8701%" y="325" width="0.0807%" height="15" fill="rgb(233,7,5)" fg:x="1225" fg:w="1"/><text x="99.1201%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.8701%" y="309" width="0.0807%" height="15" fill="rgb(207,92,33)" fg:x="1225" fg:w="1"/><text x="99.1201%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.8701%" y="293" width="0.0807%" height="15" fill="rgb(218,87,9)" fg:x="1225" fg:w="1"/><text x="99.1201%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.8701%" y="277" width="0.0807%" height="15" fill="rgb(219,47,37)" fg:x="1225" fg:w="1"/><text x="99.1201%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.8701%" y="261" width="0.0807%" height="15" fill="rgb(221,152,34)" fg:x="1225" fg:w="1"/><text x="99.1201%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.8701%" y="245" width="0.0807%" height="15" fill="rgb(235,176,21)" fg:x="1225" fg:w="1"/><text x="99.1201%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.8701%" y="229" width="0.0807%" height="15" fill="rgb(232,212,21)" fg:x="1225" fg:w="1"/><text x="99.1201%" y="239.50"></text></g><g><title>engine::session::internal::Added::find_refs (3 samples, 0.24%)</title><rect x="98.7893%" y="565" width="0.2421%" height="15" fill="rgb(245,82,39)" fg:x="1224" fg:w="3"/><text x="99.0393%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="98.7893%" y="549" width="0.2421%" height="15" fill="rgb(241,52,51)" fg:x="1224" fg:w="3"/><text x="99.0393%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="98.7893%" y="533" width="0.2421%" height="15" fill="rgb(219,91,24)" fg:x="1224" fg:w="3"/><text x="99.0393%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="98.7893%" y="517" width="0.2421%" height="15" fill="rgb(241,142,12)" fg:x="1224" fg:w="3"/><text x="99.0393%" y="527.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="98.7893%" y="501" width="0.2421%" height="15" fill="rgb(230,27,9)" fg:x="1224" fg:w="3"/><text x="99.0393%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="98.8701%" y="485" width="0.1614%" height="15" fill="rgb(249,181,32)" fg:x="1225" fg:w="2"/><text x="99.1201%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="98.8701%" y="469" width="0.1614%" height="15" fill="rgb(230,107,3)" fg:x="1225" fg:w="2"/><text x="99.1201%" y="479.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="98.8701%" y="453" width="0.1614%" height="15" fill="rgb(246,204,14)" fg:x="1225" fg:w="2"/><text x="99.1201%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.9508%" y="437" width="0.0807%" height="15" fill="rgb(213,192,47)" fg:x="1226" fg:w="1"/><text x="99.2008%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.9508%" y="421" width="0.0807%" height="15" fill="rgb(240,44,36)" fg:x="1226" fg:w="1"/><text x="99.2008%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.9508%" y="405" width="0.0807%" height="15" fill="rgb(244,209,38)" fg:x="1226" fg:w="1"/><text x="99.2008%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.9508%" y="389" width="0.0807%" height="15" fill="rgb(219,34,37)" fg:x="1226" fg:w="1"/><text x="99.2008%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="99.0315%" y="549" width="0.0807%" height="15" fill="rgb(210,28,6)" fg:x="1227" fg:w="1"/><text x="99.2815%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.0315%" y="533" width="0.0807%" height="15" fill="rgb(244,110,52)" fg:x="1227" fg:w="1"/><text x="99.2815%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="99.0315%" y="517" width="0.0807%" height="15" fill="rgb(254,124,47)" fg:x="1227" fg:w="1"/><text x="99.2815%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.0315%" y="501" width="0.0807%" height="15" fill="rgb(254,110,13)" fg:x="1227" fg:w="1"/><text x="99.2815%" y="511.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="99.1122%" y="549" width="0.0807%" height="15" fill="rgb(252,57,21)" fg:x="1228" fg:w="1"/><text x="99.3622%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.1122%" y="533" width="0.0807%" height="15" fill="rgb(242,60,45)" fg:x="1228" fg:w="1"/><text x="99.3622%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.1122%" y="517" width="0.0807%" height="15" fill="rgb(234,49,30)" fg:x="1228" fg:w="1"/><text x="99.3622%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (21 samples, 1.69%)</title><rect x="97.6594%" y="581" width="1.6949%" height="15" fill="rgb(218,98,6)" fg:x="1210" fg:w="21"/><text x="97.9094%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="99.0315%" y="565" width="0.3228%" height="15" fill="rgb(220,174,29)" fg:x="1227" fg:w="4"/><text x="99.2815%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="99.1929%" y="549" width="0.1614%" height="15" fill="rgb(236,163,23)" fg:x="1229" fg:w="2"/><text x="99.4429%" y="559.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.1929%" y="533" width="0.1614%" height="15" fill="rgb(242,114,45)" fg:x="1229" fg:w="2"/><text x="99.4429%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.1929%" y="517" width="0.1614%" height="15" fill="rgb(232,10,53)" fg:x="1229" fg:w="2"/><text x="99.4429%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.1929%" y="501" width="0.1614%" height="15" fill="rgb(245,108,29)" fg:x="1229" fg:w="2"/><text x="99.4429%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.1929%" y="485" width="0.1614%" height="15" fill="rgb(240,89,53)" fg:x="1229" fg:w="2"/><text x="99.4429%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.1929%" y="469" width="0.1614%" height="15" fill="rgb(226,60,45)" fg:x="1229" fg:w="2"/><text x="99.4429%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.2736%" y="453" width="0.0807%" height="15" fill="rgb(230,41,44)" fg:x="1230" fg:w="1"/><text x="99.5236%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.2736%" y="437" width="0.0807%" height="15" fill="rgb(230,26,20)" fg:x="1230" fg:w="1"/><text x="99.5236%" y="447.50"></text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="99.3543%" y="581" width="0.0807%" height="15" fill="rgb(237,170,32)" fg:x="1231" fg:w="1"/><text x="99.6043%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="99.3543%" y="565" width="0.0807%" height="15" fill="rgb(212,35,42)" fg:x="1231" fg:w="1"/><text x="99.6043%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.3543%" y="549" width="0.0807%" height="15" fill="rgb(227,31,34)" fg:x="1231" fg:w="1"/><text x="99.6043%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.3543%" y="533" width="0.0807%" height="15" fill="rgb(216,19,18)" fg:x="1231" fg:w="1"/><text x="99.6043%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.3543%" y="517" width="0.0807%" height="15" fill="rgb(211,133,42)" fg:x="1231" fg:w="1"/><text x="99.6043%" y="527.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="99.4350%" y="549" width="0.0807%" height="15" fill="rgb(244,66,13)" fg:x="1232" fg:w="1"/><text x="99.6850%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5157%" y="533" width="0.0807%" height="15" fill="rgb(218,185,50)" fg:x="1233" fg:w="1"/><text x="99.7657%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5157%" y="517" width="0.0807%" height="15" fill="rgb(219,149,13)" fg:x="1233" fg:w="1"/><text x="99.7657%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.5157%" y="501" width="0.0807%" height="15" fill="rgb(221,125,0)" fg:x="1233" fg:w="1"/><text x="99.7657%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.5157%" y="485" width="0.0807%" height="15" fill="rgb(247,126,27)" fg:x="1233" fg:w="1"/><text x="99.7657%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.5157%" y="469" width="0.0807%" height="15" fill="rgb(250,138,30)" fg:x="1233" fg:w="1"/><text x="99.7657%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.5157%" y="453" width="0.0807%" height="15" fill="rgb(230,151,9)" fg:x="1233" fg:w="1"/><text x="99.7657%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.5157%" y="437" width="0.0807%" height="15" fill="rgb(233,80,38)" fg:x="1233" fg:w="1"/><text x="99.7657%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="99.5157%" y="421" width="0.0807%" height="15" fill="rgb(232,68,43)" fg:x="1233" fg:w="1"/><text x="99.7657%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="99.5157%" y="405" width="0.0807%" height="15" fill="rgb(254,5,50)" fg:x="1233" fg:w="1"/><text x="99.7657%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.5964%" y="437" width="0.0807%" height="15" fill="rgb(225,45,5)" fg:x="1234" fg:w="1"/><text x="99.8464%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.5964%" y="421" width="0.0807%" height="15" fill="rgb(239,22,3)" fg:x="1234" fg:w="1"/><text x="99.8464%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.5964%" y="405" width="0.0807%" height="15" fill="rgb(243,129,0)" fg:x="1234" fg:w="1"/><text x="99.8464%" y="415.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="99.5964%" y="533" width="0.1614%" height="15" fill="rgb(223,164,0)" fg:x="1234" fg:w="2"/><text x="99.8464%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.5964%" y="517" width="0.1614%" height="15" fill="rgb(221,46,29)" fg:x="1234" fg:w="2"/><text x="99.8464%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.5964%" y="501" width="0.1614%" height="15" fill="rgb(205,97,47)" fg:x="1234" fg:w="2"/><text x="99.8464%" y="511.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.5964%" y="485" width="0.1614%" height="15" fill="rgb(249,14,8)" fg:x="1234" fg:w="2"/><text x="99.8464%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.5964%" y="469" width="0.1614%" height="15" fill="rgb(216,77,3)" fg:x="1234" fg:w="2"/><text x="99.8464%" y="479.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.5964%" y="453" width="0.1614%" height="15" fill="rgb(206,168,54)" fg:x="1234" fg:w="2"/><text x="99.8464%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6772%" y="437" width="0.0807%" height="15" fill="rgb(236,3,41)" fg:x="1235" fg:w="1"/><text x="99.9272%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6772%" y="421" width="0.0807%" height="15" fill="rgb(231,132,24)" fg:x="1235" fg:w="1"/><text x="99.9272%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.6772%" y="405" width="0.0807%" height="15" fill="rgb(227,221,40)" fg:x="1235" fg:w="1"/><text x="99.9272%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6772%" y="389" width="0.0807%" height="15" fill="rgb(233,151,11)" fg:x="1235" fg:w="1"/><text x="99.9272%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6772%" y="373" width="0.0807%" height="15" fill="rgb(247,81,35)" fg:x="1235" fg:w="1"/><text x="99.9272%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.6772%" y="357" width="0.0807%" height="15" fill="rgb(243,128,48)" fg:x="1235" fg:w="1"/><text x="99.9272%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6772%" y="341" width="0.0807%" height="15" fill="rgb(253,16,10)" fg:x="1235" fg:w="1"/><text x="99.9272%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6772%" y="325" width="0.0807%" height="15" fill="rgb(228,67,27)" fg:x="1235" fg:w="1"/><text x="99.9272%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.6772%" y="309" width="0.0807%" height="15" fill="rgb(231,105,25)" fg:x="1235" fg:w="1"/><text x="99.9272%" y="319.50"></text></g><g><title>engine::session::Session::load_entity (5 samples, 0.40%)</title><rect x="99.4350%" y="565" width="0.4036%" height="15" fill="rgb(213,166,47)" fg:x="1232" fg:w="5"/><text x="99.6850%" y="575.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="99.5157%" y="549" width="0.3228%" height="15" fill="rgb(209,27,10)" fg:x="1233" fg:w="4"/><text x="99.7657%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="99.7579%" y="533" width="0.0807%" height="15" fill="rgb(241,44,30)" fg:x="1236" fg:w="1"/><text x="100.0079%" y="543.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.7579%" y="517" width="0.0807%" height="15" fill="rgb(223,216,15)" fg:x="1236" fg:w="1"/><text x="100.0079%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.7579%" y="501" width="0.0807%" height="15" fill="rgb(227,14,7)" fg:x="1236" fg:w="1"/><text x="100.0079%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7579%" y="485" width="0.0807%" height="15" fill="rgb(237,14,5)" fg:x="1236" fg:w="1"/><text x="100.0079%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.7579%" y="469" width="0.0807%" height="15" fill="rgb(232,14,36)" fg:x="1236" fg:w="1"/><text x="100.0079%" y="479.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.7579%" y="453" width="0.0807%" height="15" fill="rgb(234,0,38)" fg:x="1236" fg:w="1"/><text x="100.0079%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="99.8386%" y="549" width="0.0807%" height="15" fill="rgb(207,170,14)" fg:x="1237" fg:w="1"/><text x="100.0886%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.8386%" y="533" width="0.0807%" height="15" fill="rgb(252,45,13)" fg:x="1237" fg:w="1"/><text x="100.0886%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="99.8386%" y="517" width="0.0807%" height="15" fill="rgb(213,142,7)" fg:x="1237" fg:w="1"/><text x="100.0886%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.8386%" y="501" width="0.0807%" height="15" fill="rgb(216,157,23)" fg:x="1237" fg:w="1"/><text x="100.0886%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8386%" y="485" width="0.0807%" height="15" fill="rgb(212,145,33)" fg:x="1237" fg:w="1"/><text x="100.0886%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.8386%" y="469" width="0.0807%" height="15" fill="rgb(233,26,13)" fg:x="1237" fg:w="1"/><text x="100.0886%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8386%" y="453" width="0.0807%" height="15" fill="rgb(219,196,19)" fg:x="1237" fg:w="1"/><text x="100.0886%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.8386%" y="437" width="0.0807%" height="15" fill="rgb(246,56,21)" fg:x="1237" fg:w="1"/><text x="100.0886%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="99.8386%" y="421" width="0.0807%" height="15" fill="rgb(222,28,53)" fg:x="1237" fg:w="1"/><text x="100.0886%" y="431.50"></text></g><g><title>all (1,239 samples, 100%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(224,5,27)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="975.50"></text></g><g><title>simple-d0356034 (1,239 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(220,153,33)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="959.50">simple-d0356034</text></g><g><title>_start (1,239 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(226,58,19)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="943.50">_start</text></g><g><title>__libc_start_main (1,239 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(239,112,23)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="927.50">__libc_start_main</text></g><g><title>main (1,239 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(251,213,20)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="911.50">main</text></g><g><title>std::rt::lang_start_internal (1,239 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(215,181,21)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="895.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,239 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(240,8,35)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="879.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,239 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(232,203,3)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="863.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,239 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(214,202,43)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="847.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,239 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(254,35,11)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="831.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,239 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(239,173,13)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="815.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,239 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(220,141,0)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="799.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,239 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(210,98,12)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="783.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,239 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(254,153,22)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="767.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,239 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(247,223,17)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="751.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,239 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(246,56,7)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="735.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,239 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(240,226,12)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="719.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,239 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(205,87,46)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="703.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,239 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(245,214,51)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="687.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (273 samples, 22.03%)</title><rect x="77.9661%" y="661" width="22.0339%" height="15" fill="rgb(223,172,33)" fg:x="966" fg:w="273"/><text x="78.2161%" y="671.50">&lt;criterion::routine::Function&lt;M,F,T..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (273 samples, 22.03%)</title><rect x="77.9661%" y="645" width="22.0339%" height="15" fill="rgb(227,203,34)" fg:x="966" fg:w="273"/><text x="78.2161%" y="655.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (273 samples, 22.03%)</title><rect x="77.9661%" y="629" width="22.0339%" height="15" fill="rgb(248,143,44)" fg:x="966" fg:w="273"/><text x="78.2161%" y="639.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (187 samples, 15.09%)</title><rect x="84.9072%" y="613" width="15.0928%" height="15" fill="rgb(226,162,5)" fg:x="1052" fg:w="187"/><text x="85.1572%" y="623.50">engine::session::Sessio..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (187 samples, 15.09%)</title><rect x="84.9072%" y="597" width="15.0928%" height="15" fill="rgb(211,143,1)" fg:x="1052" fg:w="187"/><text x="85.1572%" y="607.50">engine::session::Sessio..</text></g><g><title>kernel::model::entry::EntryResolver::world (7 samples, 0.56%)</title><rect x="99.4350%" y="581" width="0.5650%" height="15" fill="rgb(224,96,15)" fg:x="1232" fg:w="7"/><text x="99.6850%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="99.8386%" y="565" width="0.1614%" height="15" fill="rgb(222,4,38)" fg:x="1237" fg:w="2"/><text x="100.0886%" y="575.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="99.9193%" y="549" width="0.0807%" height="15" fill="rgb(253,228,15)" fg:x="1238" fg:w="1"/><text x="100.1693%" y="559.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="99.9193%" y="533" width="0.0807%" height="15" fill="rgb(242,194,12)" fg:x="1238" fg:w="1"/><text x="100.1693%" y="543.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.9193%" y="517" width="0.0807%" height="15" fill="rgb(214,177,31)" fg:x="1238" fg:w="1"/><text x="100.1693%" y="527.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="99.9193%" y="501" width="0.0807%" height="15" fill="rgb(226,58,51)" fg:x="1238" fg:w="1"/><text x="100.1693%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="99.9193%" y="485" width="0.0807%" height="15" fill="rgb(250,119,16)" fg:x="1238" fg:w="1"/><text x="100.1693%" y="495.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="99.9193%" y="469" width="0.0807%" height="15" fill="rgb(223,128,53)" fg:x="1238" fg:w="1"/><text x="100.1693%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="99.9193%" y="453" width="0.0807%" height="15" fill="rgb(251,199,15)" fg:x="1238" fg:w="1"/><text x="100.1693%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="99.9193%" y="437" width="0.0807%" height="15" fill="rgb(235,168,42)" fg:x="1238" fg:w="1"/><text x="100.1693%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="99.9193%" y="421" width="0.0807%" height="15" fill="rgb(250,210,17)" fg:x="1238" fg:w="1"/><text x="100.1693%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="99.9193%" y="405" width="0.0807%" height="15" fill="rgb(226,36,41)" fg:x="1238" fg:w="1"/><text x="100.1693%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="99.9193%" y="389" width="0.0807%" height="15" fill="rgb(225,87,10)" fg:x="1238" fg:w="1"/><text x="100.1693%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="99.9193%" y="373" width="0.0807%" height="15" fill="rgb(228,83,9)" fg:x="1238" fg:w="1"/><text x="100.1693%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="99.9193%" y="357" width="0.0807%" height="15" fill="rgb(225,16,36)" fg:x="1238" fg:w="1"/><text x="100.1693%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.08%)</title><rect x="99.9193%" y="341" width="0.0807%" height="15" fill="rgb(242,198,13)" fg:x="1238" fg:w="1"/><text x="100.1693%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.08%)</title><rect x="99.9193%" y="325" width="0.0807%" height="15" fill="rgb(239,25,51)" fg:x="1238" fg:w="1"/><text x="100.1693%" y="335.50"></text></g></svg></svg>